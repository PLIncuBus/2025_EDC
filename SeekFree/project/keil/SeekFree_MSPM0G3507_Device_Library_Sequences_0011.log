/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0011.log
 *  Created     : 13:33:28 (31/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[13:33:28.436]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:33:28.436]  
[13:33:28.436]  <debugvars>
[13:33:28.436]    // Pre-defined
[13:33:28.436]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:33:28.436]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:33:28.436]    __dp=0x00000000
[13:33:28.436]    __ap=0x00000000
[13:33:28.436]    __traceout=0x00000000      (Trace Disabled)
[13:33:28.436]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:33:28.436]    __FlashAddr=0x00000000
[13:33:28.436]    __FlashLen=0x00000000
[13:33:28.436]    __FlashArg=0x00000000
[13:33:28.436]    __FlashOp=0x00000000
[13:33:28.436]    __Result=0x00000000
[13:33:28.436]  </debugvars>
[13:33:28.436]  
[13:33:28.436]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:33:28.436]    <block atomic="false" info="">
[13:33:28.436]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:33:28.436]        // -> [isSWJ <= 0x00000001]
[13:33:28.438]      __var hasDormant = __protocol & 0x00020000;
[13:33:28.438]        // -> [hasDormant <= 0x00000000]
[13:33:28.438]      __var protType   = __protocol & 0x0000FFFF;
[13:33:28.438]        // -> [protType <= 0x00000002]
[13:33:28.438]    </block>
[13:33:28.438]    <control if="protType == 1" while="" timeout="0" info="">
[13:33:28.438]      // if-block "protType == 1"
[13:33:28.438]        // =>  FALSE
[13:33:28.438]      // skip if-block "protType == 1"
[13:33:28.438]    </control>
[13:33:28.438]    <control if="protType == 2" while="" timeout="0" info="">
[13:33:28.438]      // if-block "protType == 2"
[13:33:28.438]        // =>  TRUE
[13:33:28.438]      <control if="isSWJ" while="" timeout="0" info="">
[13:33:28.438]        // if-block "isSWJ"
[13:33:28.438]          // =>  TRUE
[13:33:28.438]        <control if="hasDormant" while="" timeout="0" info="">
[13:33:28.438]          // if-block "hasDormant"
[13:33:28.438]            // =>  FALSE
[13:33:28.438]          // skip if-block "hasDormant"
[13:33:28.440]        </control>
[13:33:28.441]        <control if="!hasDormant" while="" timeout="0" info="">
[13:33:28.441]          // if-block "!hasDormant"
[13:33:28.441]            // =>  TRUE
[13:33:28.441]          <block atomic="false" info="">
[13:33:28.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:33:28.442]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:33:28.442]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:33:28.444]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:33:28.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:33:28.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:33:28.446]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:33:28.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:33:28.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:33:28.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:33:28.448]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:33:28.448]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:33:28.448]          </block>
[13:33:28.448]          // end if-block "!hasDormant"
[13:33:28.448]        </control>
[13:33:28.448]        // end if-block "isSWJ"
[13:33:28.452]      </control>
[13:33:28.452]      <control if="!isSWJ" while="" timeout="0" info="">
[13:33:28.452]        // if-block "!isSWJ"
[13:33:28.452]          // =>  FALSE
[13:33:28.452]        // skip if-block "!isSWJ"
[13:33:28.452]      </control>
[13:33:28.452]      <block atomic="false" info="">
[13:33:28.452]        ReadDP(0x0);
[13:33:28.452]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:33:28.452]      </block>
[13:33:28.452]      // end if-block "protType == 2"
[13:33:28.452]    </control>
[13:33:28.452]  </sequence>
[13:33:28.452]  
[13:33:28.457]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:33:28.457]  
[13:33:28.457]  <debugvars>
[13:33:28.457]    // Pre-defined
[13:33:28.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:33:28.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:33:28.457]    __dp=0x00000000
[13:33:28.458]    __ap=0x00000000
[13:33:28.458]    __traceout=0x00000000      (Trace Disabled)
[13:33:28.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:33:28.458]    __FlashAddr=0x00000000
[13:33:28.458]    __FlashLen=0x00000000
[13:33:28.458]    __FlashArg=0x00000000
[13:33:28.458]    __FlashOp=0x00000000
[13:33:28.458]    __Result=0x00000000
[13:33:28.458]  </debugvars>
[13:33:28.458]  
[13:33:28.458]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:33:28.458]    <block atomic="false" info="">
[13:33:28.459]      __var SW_DP_ABORT       = 0x0;
[13:33:28.459]        // -> [SW_DP_ABORT <= 0x00000000]
[13:33:28.459]      __var DP_CTRL_STAT      = 0x4;
[13:33:28.459]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:33:28.459]      __var DP_SELECT         = 0x8;
[13:33:28.459]        // -> [DP_SELECT <= 0x00000008]
[13:33:28.459]      __var powered_down      = 0;
[13:33:28.459]        // -> [powered_down <= 0x00000000]
[13:33:28.459]      WriteDP(DP_SELECT, 0x00000000);
[13:33:28.461]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:33:28.461]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:33:28.463]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:33:28.463]        // -> [powered_down <= 0x00000001]
[13:33:28.463]    </block>
[13:33:28.463]    <control if="powered_down" while="" timeout="0" info="">
[13:33:28.463]      // if-block "powered_down"
[13:33:28.463]        // =>  TRUE
[13:33:28.463]      <block atomic="false" info="">
[13:33:28.464]        Message(0, "Debug/System power-up request sent");
[13:33:28.464]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:33:28.468]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:33:28.468]      </block>
[13:33:28.468]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:33:28.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:33:28.470]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:33:28.470]        // while-condition  =>  FALSE
[13:33:28.470]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:33:28.470]      </control>
[13:33:28.470]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:33:28.470]        // if-block "(__protocol & 0xFFFF) == 1"
[13:33:28.470]          // =>  FALSE
[13:33:28.470]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:33:28.470]      </control>
[13:33:28.470]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:33:28.471]        // if-block "(__protocol & 0xFFFF) == 2"
[13:33:28.471]          // =>  TRUE
[13:33:28.471]        <block atomic="false" info="">
[13:33:28.471]          Message(0, "executing SWD power up");
[13:33:28.471]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:33:28.476]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:33:28.476]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:33:28.477]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:33:28.477]        </block>
[13:33:28.477]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:33:28.477]      </control>
[13:33:28.478]      // end if-block "powered_down"
[13:33:28.478]    </control>
[13:33:28.478]    <block atomic="false" info="">
[13:33:28.478]      __var DEBUG_PORT_VAL    = 0;
[13:33:28.478]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:33:28.478]      __var ACCESS_POINT_VAL  = 0;
[13:33:28.478]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:33:28.478]      __ap = 1; 
[13:33:28.479]        // -> [__ap <= 0x00000001]
[13:33:28.479]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:33:28.482]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:33:28.482]      __ap = 4;
[13:33:28.482]        // -> [__ap <= 0x00000004]
[13:33:28.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:33:28.486]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:33:28.486]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:33:28.486]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:33:28.489]    </block>
[13:33:28.489]    <block atomic="false" info="">
[13:33:28.489]      __var nReset = 0x80;
[13:33:28.490]        // -> [nReset <= 0x00000080]
[13:33:28.490]      __var canReadPins = 0;
[13:33:28.490]        // -> [canReadPins <= 0x00000000]
[13:33:28.490]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:33:28.492]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:33:28.492]        // -> [canReadPins <= 0x00000001]
[13:33:28.492]    </block>
[13:33:28.492]    <control if="" while="1" timeout="200" info="">
[13:33:28.492]      // while "1"  (timeout="200")
[13:33:28.492]      // while-condition  =>  TRUE
[13:33:28.492]      // while "1"  (timeout="200")
[13:33:28.492]      // while-condition  =>  TRUE
[13:33:28.492]      // while "1"  (timeout="200")
[13:33:28.492]      // while-condition  =>  TRUE
[13:33:28.492]      // while "1"  (timeout="200")
[13:33:28.492]      // while-condition  =>  TRUE
[13:33:28.492]      // while "1"  (timeout="200")
[13:33:28.492]      // while-condition  =>  TRUE
[13:33:28.492]      // while "1"  (timeout="200")
[13:33:28.492]      // while-condition  =>  TRUE
[13:33:28.492]      // while "1"  (timeout="200")
[13:33:28.494]      // while-condition  =>  TRUE
[13:33:28.494]      // while "1"  (timeout="200")
[13:33:28.494]      // while-condition  =>  TRUE
[13:33:28.494]      // while "1"  (timeout="200")
[13:33:28.494]      // while-condition  =>  TRUE
[13:33:28.494]      // while "1"  (timeout="200")
[13:33:28.494]      // while-condition  =>  TRUE
[13:33:28.494]      // while "1"  (timeout="200")
[13:33:28.494]      // while-condition  =>  TRUE
[13:33:28.494]      // while "1"  (timeout="200")
[13:33:28.494]      // while-condition  =>  TRUE
[13:33:28.495]      // while "1"  (timeout="200")
[13:33:28.495]      // while-condition  =>  TRUE
[13:33:28.495]      // while "1"  (timeout="200")
[13:33:28.495]      // while-condition  =>  TRUE
[13:33:28.495]      // while "1"  (timeout="200")
[13:33:28.496]      // while-condition  =>  TRUE
[13:33:28.496]      // while "1"  (timeout="200")
[13:33:28.496]      // while-condition  =>  TRUE
[13:33:28.496]      // while "1"  (timeout="200")
[13:33:28.496]      // while-condition  =>  TRUE
[13:33:28.496]      // while "1"  (timeout="200")
[13:33:28.496]      // while-condition  =>  TRUE
[13:33:28.496]      // while "1"  (timeout="200")
[13:33:28.496]      // while-condition  =>  TRUE
[13:33:28.496]      // while "1"  (timeout="200")
[13:33:28.496]      // while-condition  =>  TRUE
[13:33:28.496]      // while "1"  (timeout="200")
[13:33:28.497]      // while-condition  =>  TRUE
[13:33:28.497]      // while "1"  (timeout="200")
[13:33:28.497]      // while-condition  =>  TRUE
[13:33:28.497]      // while "1"  (timeout="200")
[13:33:28.497]      // while-condition  =>  TRUE
[13:33:28.497]      // while "1"  (timeout="200")
[13:33:28.497]      // while-condition  =>  TRUE
[13:33:28.497]      // while "1"  (timeout="200")
[13:33:28.497]      // while-condition  =>  TRUE
[13:33:28.497]      // while "1"  (timeout="200")
[13:33:28.497]      // while-condition  =>  TRUE
[13:33:28.497]      // while "1"  (timeout="200")
[13:33:28.497]      // while-condition  =>  TRUE
[13:33:28.497]      // while "1"  (timeout="200")
[13:33:28.498]      // while-condition  =>  TRUE
[13:33:28.498]      // while "1"  (timeout="200")
[13:33:28.498]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.499]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.499]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.499]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.499]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.499]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.499]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.499]      // while-condition  =>  TRUE
[13:33:28.499]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.501]      // while "1"  (timeout="200")
[13:33:28.501]      // while-condition  =>  TRUE
[13:33:28.503]      // while "1"  (timeout="200")
[13:33:28.503]      // while  =>  TIMEOUT
[13:33:28.503]      // end while "1"
[13:33:28.503]    </control>
[13:33:28.503]    <control if="canReadPins" while="" timeout="0" info="">
[13:33:28.503]      // if-block "canReadPins"
[13:33:28.503]        // =>  TRUE
[13:33:28.503]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:33:28.503]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:33:28.505]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:33:28.506]        // while-condition  =>  FALSE
[13:33:28.506]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:33:28.506]      </control>
[13:33:28.506]      // end if-block "canReadPins"
[13:33:28.506]    </control>
[13:33:28.506]    <control if="!canReadPins" while="" timeout="0" info="">
[13:33:28.507]      // if-block "!canReadPins"
[13:33:28.507]        // =>  FALSE
[13:33:28.507]      // skip if-block "!canReadPins"
[13:33:28.507]    </control>
[13:33:28.507]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:33:28.507]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:33:28.507]        // =>  TRUE
[13:33:28.507]      <block atomic="false" info="">
[13:33:28.507]        WriteAP(0x00, 0x190008);
[13:33:28.510]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:33:28.510]        WriteAP(0xF0, 0x01);
[13:33:28.514]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:33:28.514]      </block>
[13:33:28.514]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:33:28.514]    </control>
[13:33:28.514]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:33:28.514]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:33:28.514]        // =>  FALSE
[13:33:28.514]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:33:28.514]    </control>
[13:33:28.516]    <block atomic="false" info="">
[13:33:28.516]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:33:28.519]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:33:28.519]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:33:28.519]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:33:28.520]      __ap = 0; //lets make sure we reset the access point selection
[13:33:28.520]        // -> [__ap <= 0x00000000]
[13:33:28.520]    </block>
[13:33:28.520]  </sequence>
[13:33:28.520]  
[13:33:28.544]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:33:28.544]  
[13:33:28.544]  <debugvars>
[13:33:28.544]    // Pre-defined
[13:33:28.544]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:33:28.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:33:28.545]    __dp=0x00000000
[13:33:28.545]    __ap=0x00000000
[13:33:28.545]    __traceout=0x00000000      (Trace Disabled)
[13:33:28.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:33:28.545]    __FlashAddr=0x00000000
[13:33:28.545]    __FlashLen=0x00000000
[13:33:28.545]    __FlashArg=0x00000000
[13:33:28.545]    __FlashOp=0x00000000
[13:33:28.546]    __Result=0x00000000
[13:33:28.546]  </debugvars>
[13:33:28.546]  
[13:33:28.546]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:33:28.546]    <block atomic="false" info="">
[13:33:28.546]      __var deviceID = 0;
[13:33:28.546]        // -> [deviceID <= 0x00000000]
[13:33:28.546]      __var version = 0;
[13:33:28.546]        // -> [version <= 0x00000000]
[13:33:28.546]      __var partNum = 0;
[13:33:28.546]        // -> [partNum <= 0x00000000]
[13:33:28.546]      __var manuf = 0;
[13:33:28.546]        // -> [manuf <= 0x00000000]
[13:33:28.546]      __var isMSPM0G1X0X_G3X0X = 0;
[13:33:28.546]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:33:28.546]      __var isProduction = 0;
[13:33:28.546]        // -> [isProduction <= 0x00000000]
[13:33:28.546]      __var continueId = 0;
[13:33:28.546]        // -> [continueId <= 0x00000000]
[13:33:28.548]      deviceID =   Read32(0x41C40004);
[13:33:28.552]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:33:28.552]        // -> [deviceID <= 0x2BB8802F]
[13:33:28.555]      version = deviceID >> 28;
[13:33:28.556]        // -> [version <= 0x00000002]
[13:33:28.556]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:33:28.556]        // -> [partNum <= 0x0000BB88]
[13:33:28.556]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:33:28.556]        // -> [manuf <= 0x00000017]
[13:33:28.556]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:33:28.556]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:33:28.556]      isProduction = (version > 0);
[13:33:28.556]        // -> [isProduction <= 0x00000001]
[13:33:28.556]    </block>
[13:33:28.556]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:33:28.556]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:33:28.556]        // =>  FALSE
[13:33:28.556]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:33:28.556]    </control>
[13:33:28.556]    <control if="continueId == 4" while="" timeout="0" info="">
[13:33:28.556]      // if-block "continueId == 4"
[13:33:28.556]        // =>  FALSE
[13:33:28.556]      // skip if-block "continueId == 4"
[13:33:28.556]    </control>
[13:33:28.556]    <control if="!isProduction" while="" timeout="0" info="">
[13:33:28.556]      // if-block "!isProduction"
[13:33:28.556]        // =>  FALSE
[13:33:28.556]      // skip if-block "!isProduction"
[13:33:28.556]    </control>
[13:33:28.556]  </sequence>
[13:33:28.556]  
[13:33:35.332]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:33:35.332]  
[13:33:35.334]  <debugvars>
[13:33:35.334]    // Pre-defined
[13:33:35.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:33:35.334]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:33:35.334]    __dp=0x00000000
[13:33:35.334]    __ap=0x00000000
[13:33:35.334]    __traceout=0x00000000      (Trace Disabled)
[13:33:35.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:33:35.334]    __FlashAddr=0x00000000
[13:33:35.334]    __FlashLen=0x00000000
[13:33:35.334]    __FlashArg=0x00000000
[13:33:35.334]    __FlashOp=0x00000000
[13:33:35.336]    __Result=0x00000000
[13:33:35.336]  </debugvars>
[13:33:35.336]  
[13:33:35.336]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:33:35.336]    <block atomic="false" info="">
[13:33:35.336]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:33:35.336]        // -> [isSWJ <= 0x00000001]
[13:33:35.336]      __var hasDormant = __protocol & 0x00020000;
[13:33:35.336]        // -> [hasDormant <= 0x00000000]
[13:33:35.336]      __var protType   = __protocol & 0x0000FFFF;
[13:33:35.336]        // -> [protType <= 0x00000002]
[13:33:35.336]    </block>
[13:33:35.336]    <control if="protType == 1" while="" timeout="0" info="">
[13:33:35.336]      // if-block "protType == 1"
[13:33:35.336]        // =>  FALSE
[13:33:35.336]      // skip if-block "protType == 1"
[13:33:35.336]    </control>
[13:33:35.336]    <control if="protType == 2" while="" timeout="0" info="">
[13:33:35.336]      // if-block "protType == 2"
[13:33:35.336]        // =>  TRUE
[13:33:35.336]      <control if="isSWJ" while="" timeout="0" info="">
[13:33:35.336]        // if-block "isSWJ"
[13:33:35.336]          // =>  TRUE
[13:33:35.336]        <control if="hasDormant" while="" timeout="0" info="">
[13:33:35.336]          // if-block "hasDormant"
[13:33:35.336]            // =>  FALSE
[13:33:35.336]          // skip if-block "hasDormant"
[13:33:35.336]        </control>
[13:33:35.336]        <control if="!hasDormant" while="" timeout="0" info="">
[13:33:35.336]          // if-block "!hasDormant"
[13:33:35.336]            // =>  TRUE
[13:33:35.336]          <block atomic="false" info="">
[13:33:35.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:33:35.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:33:35.348]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:33:35.352]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:33:35.352]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:33:35.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:33:35.360]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:33:35.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:33:35.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:33:35.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:33:35.368]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:33:35.369]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:33:35.369]          </block>
[13:33:35.369]          // end if-block "!hasDormant"
[13:33:35.369]        </control>
[13:33:35.369]        // end if-block "isSWJ"
[13:33:35.369]      </control>
[13:33:35.369]      <control if="!isSWJ" while="" timeout="0" info="">
[13:33:35.369]        // if-block "!isSWJ"
[13:33:35.369]          // =>  FALSE
[13:33:35.369]        // skip if-block "!isSWJ"
[13:33:35.369]      </control>
[13:33:35.369]      <block atomic="false" info="">
[13:33:35.369]        ReadDP(0x0);
[13:33:35.378]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:33:35.378]      </block>
[13:33:35.378]      // end if-block "protType == 2"
[13:33:35.378]    </control>
[13:33:35.378]  </sequence>
[13:33:35.378]  
[13:33:35.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:33:35.381]  
[13:33:35.381]  <debugvars>
[13:33:35.381]    // Pre-defined
[13:33:35.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:33:35.381]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:33:35.381]    __dp=0x00000000
[13:33:35.381]    __ap=0x00000000
[13:33:35.381]    __traceout=0x00000000      (Trace Disabled)
[13:33:35.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:33:35.381]    __FlashAddr=0x00000000
[13:33:35.383]    __FlashLen=0x00000000
[13:33:35.383]    __FlashArg=0x00000000
[13:33:35.383]    __FlashOp=0x00000000
[13:33:35.383]    __Result=0x00000000
[13:33:35.383]  </debugvars>
[13:33:35.383]  
[13:33:35.383]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:33:35.383]    <block atomic="false" info="">
[13:33:35.383]      __var SW_DP_ABORT       = 0x0;
[13:33:35.384]        // -> [SW_DP_ABORT <= 0x00000000]
[13:33:35.384]      __var DP_CTRL_STAT      = 0x4;
[13:33:35.384]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:33:35.384]      __var DP_SELECT         = 0x8;
[13:33:35.384]        // -> [DP_SELECT <= 0x00000008]
[13:33:35.384]      __var powered_down      = 0;
[13:33:35.384]        // -> [powered_down <= 0x00000000]
[13:33:35.384]      WriteDP(DP_SELECT, 0x00000000);
[13:33:35.388]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:33:35.388]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:33:35.388]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:33:35.388]        // -> [powered_down <= 0x00000001]
[13:33:35.388]    </block>
[13:33:35.388]    <control if="powered_down" while="" timeout="0" info="">
[13:33:35.388]      // if-block "powered_down"
[13:33:35.388]        // =>  TRUE
[13:33:35.388]      <block atomic="false" info="">
[13:33:35.388]        Message(0, "Debug/System power-up request sent");
[13:33:35.392]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:33:35.392]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:33:35.392]      </block>
[13:33:35.392]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:33:35.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:33:35.396]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:33:35.396]        // while-condition  =>  FALSE
[13:33:35.396]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:33:35.396]      </control>
[13:33:35.400]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:33:35.400]        // if-block "(__protocol & 0xFFFF) == 1"
[13:33:35.400]          // =>  FALSE
[13:33:35.400]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:33:35.400]      </control>
[13:33:35.400]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:33:35.400]        // if-block "(__protocol & 0xFFFF) == 2"
[13:33:35.400]          // =>  TRUE
[13:33:35.400]        <block atomic="false" info="">
[13:33:35.400]          Message(0, "executing SWD power up");
[13:33:35.401]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:33:35.405]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:33:35.405]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:33:35.409]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:33:35.409]        </block>
[13:33:35.409]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:33:35.409]      </control>
[13:33:35.409]      // end if-block "powered_down"
[13:33:35.409]    </control>
[13:33:35.409]    <block atomic="false" info="">
[13:33:35.409]      __var DEBUG_PORT_VAL    = 0;
[13:33:35.409]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:33:35.409]      __var ACCESS_POINT_VAL  = 0;
[13:33:35.409]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:33:35.409]      __ap = 1; 
[13:33:35.411]        // -> [__ap <= 0x00000001]
[13:33:35.411]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:33:35.412]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:33:35.412]      __ap = 4;
[13:33:35.412]        // -> [__ap <= 0x00000004]
[13:33:35.412]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:33:35.419]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:33:35.419]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:33:35.419]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:33:35.421]    </block>
[13:33:35.421]    <block atomic="false" info="">
[13:33:35.421]      __var nReset = 0x80;
[13:33:35.421]        // -> [nReset <= 0x00000080]
[13:33:35.421]      __var canReadPins = 0;
[13:33:35.421]        // -> [canReadPins <= 0x00000000]
[13:33:35.421]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:33:35.425]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:33:35.425]        // -> [canReadPins <= 0x00000001]
[13:33:35.425]    </block>
[13:33:35.425]    <control if="" while="1" timeout="200" info="">
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.425]      // while "1"  (timeout="200")
[13:33:35.425]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.428]      // while "1"  (timeout="200")
[13:33:35.428]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.430]      // while-condition  =>  TRUE
[13:33:35.430]      // while "1"  (timeout="200")
[13:33:35.432]      // while-condition  =>  TRUE
[13:33:35.432]      // while "1"  (timeout="200")
[13:33:35.432]      // while-condition  =>  TRUE
[13:33:35.432]      // while "1"  (timeout="200")
[13:33:35.432]      // while-condition  =>  TRUE
[13:33:35.432]      // while "1"  (timeout="200")
[13:33:35.432]      // while-condition  =>  TRUE
[13:33:35.432]      // while "1"  (timeout="200")
[13:33:35.432]      // while-condition  =>  TRUE
[13:33:35.433]      // while "1"  (timeout="200")
[13:33:35.433]      // while-condition  =>  TRUE
[13:33:35.433]      // while "1"  (timeout="200")
[13:33:35.433]      // while-condition  =>  TRUE
[13:33:35.433]      // while "1"  (timeout="200")
[13:33:35.433]      // while-condition  =>  TRUE
[13:33:35.433]      // while "1"  (timeout="200")
[13:33:35.433]      // while-condition  =>  TRUE
[13:33:35.433]      // while "1"  (timeout="200")
[13:33:35.433]      // while-condition  =>  TRUE
[13:33:35.433]      // while "1"  (timeout="200")
[13:33:35.433]      // while-condition  =>  TRUE
[13:33:35.435]      // while "1"  (timeout="200")
[13:33:35.435]      // while-condition  =>  TRUE
[13:33:35.435]      // while "1"  (timeout="200")
[13:33:35.435]      // while-condition  =>  TRUE
[13:33:35.435]      // while "1"  (timeout="200")
[13:33:35.436]      // while-condition  =>  TRUE
[13:33:35.436]      // while "1"  (timeout="200")
[13:33:35.436]      // while-condition  =>  TRUE
[13:33:35.436]      // while "1"  (timeout="200")
[13:33:35.436]      // while-condition  =>  TRUE
[13:33:35.436]      // while "1"  (timeout="200")
[13:33:35.436]      // while-condition  =>  TRUE
[13:33:35.436]      // while "1"  (timeout="200")
[13:33:35.436]      // while-condition  =>  TRUE
[13:33:35.436]      // while "1"  (timeout="200")
[13:33:35.436]      // while-condition  =>  TRUE
[13:33:35.436]      // while "1"  (timeout="200")
[13:33:35.436]      // while-condition  =>  TRUE
[13:33:35.436]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.437]      // while "1"  (timeout="200")
[13:33:35.437]      // while-condition  =>  TRUE
[13:33:35.440]      // while "1"  (timeout="200")
[13:33:35.440]      // while  =>  TIMEOUT
[13:33:35.440]      // end while "1"
[13:33:35.440]    </control>
[13:33:35.440]    <control if="canReadPins" while="" timeout="0" info="">
[13:33:35.440]      // if-block "canReadPins"
[13:33:35.440]        // =>  TRUE
[13:33:35.440]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:33:35.440]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:33:35.442]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:33:35.442]        // while-condition  =>  FALSE
[13:33:35.443]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:33:35.443]      </control>
[13:33:35.443]      // end if-block "canReadPins"
[13:33:35.443]    </control>
[13:33:35.443]    <control if="!canReadPins" while="" timeout="0" info="">
[13:33:35.443]      // if-block "!canReadPins"
[13:33:35.443]        // =>  FALSE
[13:33:35.443]      // skip if-block "!canReadPins"
[13:33:35.443]    </control>
[13:33:35.443]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:33:35.443]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:33:35.444]        // =>  TRUE
[13:33:35.444]      <block atomic="false" info="">
[13:33:35.444]        WriteAP(0x00, 0x190008);
[13:33:35.446]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:33:35.446]        WriteAP(0xF0, 0x01);
[13:33:35.451]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:33:35.451]      </block>
[13:33:35.451]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:33:35.451]    </control>
[13:33:35.451]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:33:35.451]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:33:35.451]        // =>  FALSE
[13:33:35.451]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:33:35.451]    </control>
[13:33:35.451]    <block atomic="false" info="">
[13:33:35.451]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:33:35.457]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:33:35.457]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:33:35.457]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:33:35.458]      __ap = 0; //lets make sure we reset the access point selection
[13:33:35.458]        // -> [__ap <= 0x00000000]
[13:33:35.458]    </block>
[13:33:35.458]  </sequence>
[13:33:35.458]  
[13:33:35.490]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:33:35.490]  
[13:33:35.490]  <debugvars>
[13:33:35.490]    // Pre-defined
[13:33:35.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:33:35.490]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:33:35.490]    __dp=0x00000000
[13:33:35.490]    __ap=0x00000000
[13:33:35.490]    __traceout=0x00000000      (Trace Disabled)
[13:33:35.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:33:35.490]    __FlashAddr=0x00000000
[13:33:35.490]    __FlashLen=0x00000000
[13:33:35.492]    __FlashArg=0x00000000
[13:33:35.492]    __FlashOp=0x00000000
[13:33:35.492]    __Result=0x00000000
[13:33:35.492]  </debugvars>
[13:33:35.492]  
[13:33:35.492]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:33:35.492]    <block atomic="false" info="">
[13:33:35.492]      __var deviceID = 0;
[13:33:35.492]        // -> [deviceID <= 0x00000000]
[13:33:35.492]      __var version = 0;
[13:33:35.492]        // -> [version <= 0x00000000]
[13:33:35.492]      __var partNum = 0;
[13:33:35.492]        // -> [partNum <= 0x00000000]
[13:33:35.492]      __var manuf = 0;
[13:33:35.492]        // -> [manuf <= 0x00000000]
[13:33:35.492]      __var isMSPM0G1X0X_G3X0X = 0;
[13:33:35.492]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:33:35.492]      __var isProduction = 0;
[13:33:35.492]        // -> [isProduction <= 0x00000000]
[13:33:35.492]      __var continueId = 0;
[13:33:35.492]        // -> [continueId <= 0x00000000]
[13:33:35.495]      deviceID =   Read32(0x41C40004);
[13:33:35.506]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:33:35.506]        // -> [deviceID <= 0x2BB8802F]
[13:33:35.506]      version = deviceID >> 28;
[13:33:35.507]        // -> [version <= 0x00000002]
[13:33:35.507]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:33:35.507]        // -> [partNum <= 0x0000BB88]
[13:33:35.507]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:33:35.507]        // -> [manuf <= 0x00000017]
[13:33:35.507]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:33:35.507]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:33:35.507]      isProduction = (version > 0);
[13:33:35.507]        // -> [isProduction <= 0x00000001]
[13:33:35.507]    </block>
[13:33:35.507]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:33:35.507]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:33:35.507]        // =>  FALSE
[13:33:35.507]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:33:35.507]    </control>
[13:33:35.507]    <control if="continueId == 4" while="" timeout="0" info="">
[13:33:35.507]      // if-block "continueId == 4"
[13:33:35.507]        // =>  FALSE
[13:33:35.507]      // skip if-block "continueId == 4"
[13:33:35.507]    </control>
[13:33:35.507]    <control if="!isProduction" while="" timeout="0" info="">
[13:33:35.507]      // if-block "!isProduction"
[13:33:35.507]        // =>  FALSE
[13:33:35.507]      // skip if-block "!isProduction"
[13:33:35.507]    </control>
[13:33:35.507]  </sequence>
[13:33:35.507]  
[13:35:02.378]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:35:02.378]  
[13:35:02.382]  <debugvars>
[13:35:02.382]    // Pre-defined
[13:35:02.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:35:02.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:35:02.382]    __dp=0x00000000
[13:35:02.382]    __ap=0x00000000
[13:35:02.382]    __traceout=0x00000000      (Trace Disabled)
[13:35:02.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:35:02.383]    __FlashAddr=0x00000000
[13:35:02.383]    __FlashLen=0x00000000
[13:35:02.383]    __FlashArg=0x00000000
[13:35:02.383]    __FlashOp=0x00000000
[13:35:02.383]    __Result=0x00000000
[13:35:02.383]  </debugvars>
[13:35:02.383]  
[13:35:02.383]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:35:02.383]    <block atomic="false" info="">
[13:35:02.383]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:35:02.383]        // -> [isSWJ <= 0x00000001]
[13:35:02.383]      __var hasDormant = __protocol & 0x00020000;
[13:35:02.383]        // -> [hasDormant <= 0x00000000]
[13:35:02.383]      __var protType   = __protocol & 0x0000FFFF;
[13:35:02.383]        // -> [protType <= 0x00000002]
[13:35:02.383]    </block>
[13:35:02.383]    <control if="protType == 1" while="" timeout="0" info="">
[13:35:02.383]      // if-block "protType == 1"
[13:35:02.383]        // =>  FALSE
[13:35:02.383]      // skip if-block "protType == 1"
[13:35:02.383]    </control>
[13:35:02.383]    <control if="protType == 2" while="" timeout="0" info="">
[13:35:02.383]      // if-block "protType == 2"
[13:35:02.383]        // =>  TRUE
[13:35:02.383]      <control if="isSWJ" while="" timeout="0" info="">
[13:35:02.383]        // if-block "isSWJ"
[13:35:02.383]          // =>  TRUE
[13:35:02.383]        <control if="hasDormant" while="" timeout="0" info="">
[13:35:02.383]          // if-block "hasDormant"
[13:35:02.386]            // =>  FALSE
[13:35:02.386]          // skip if-block "hasDormant"
[13:35:02.386]        </control>
[13:35:02.386]        <control if="!hasDormant" while="" timeout="0" info="">
[13:35:02.386]          // if-block "!hasDormant"
[13:35:02.386]            // =>  TRUE
[13:35:02.386]          <block atomic="false" info="">
[13:35:02.386]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:35:02.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:35:02.387]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:35:02.390]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:35:02.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:35:02.398]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:35:02.398]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:35:02.398]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:35:02.398]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:35:02.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:35:02.402]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:35:02.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:35:02.402]          </block>
[13:35:02.402]          // end if-block "!hasDormant"
[13:35:02.402]        </control>
[13:35:02.402]        // end if-block "isSWJ"
[13:35:02.402]      </control>
[13:35:02.402]      <control if="!isSWJ" while="" timeout="0" info="">
[13:35:02.402]        // if-block "!isSWJ"
[13:35:02.402]          // =>  FALSE
[13:35:02.402]        // skip if-block "!isSWJ"
[13:35:02.402]      </control>
[13:35:02.402]      <block atomic="false" info="">
[13:35:02.402]        ReadDP(0x0);
[13:35:02.407]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:35:02.407]      </block>
[13:35:02.407]      // end if-block "protType == 2"
[13:35:02.407]    </control>
[13:35:02.407]  </sequence>
[13:35:02.407]  
[13:35:02.410]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:35:02.410]  
[13:35:02.410]  <debugvars>
[13:35:02.410]    // Pre-defined
[13:35:02.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:35:02.410]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:35:02.410]    __dp=0x00000000
[13:35:02.410]    __ap=0x00000000
[13:35:02.410]    __traceout=0x00000000      (Trace Disabled)
[13:35:02.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:35:02.410]    __FlashAddr=0x00000000
[13:35:02.410]    __FlashLen=0x00000000
[13:35:02.410]    __FlashArg=0x00000000
[13:35:02.410]    __FlashOp=0x00000000
[13:35:02.410]    __Result=0x00000000
[13:35:02.410]  </debugvars>
[13:35:02.410]  
[13:35:02.410]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:35:02.410]    <block atomic="false" info="">
[13:35:02.410]      __var SW_DP_ABORT       = 0x0;
[13:35:02.410]        // -> [SW_DP_ABORT <= 0x00000000]
[13:35:02.410]      __var DP_CTRL_STAT      = 0x4;
[13:35:02.410]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:35:02.410]      __var DP_SELECT         = 0x8;
[13:35:02.410]        // -> [DP_SELECT <= 0x00000008]
[13:35:02.410]      __var powered_down      = 0;
[13:35:02.410]        // -> [powered_down <= 0x00000000]
[13:35:02.410]      WriteDP(DP_SELECT, 0x00000000);
[13:35:02.414]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:35:02.414]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:35:02.419]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:35:02.419]        // -> [powered_down <= 0x00000001]
[13:35:02.419]    </block>
[13:35:02.419]    <control if="powered_down" while="" timeout="0" info="">
[13:35:02.420]      // if-block "powered_down"
[13:35:02.420]        // =>  TRUE
[13:35:02.420]      <block atomic="false" info="">
[13:35:02.420]        Message(0, "Debug/System power-up request sent");
[13:35:02.421]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:35:02.423]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:35:02.423]      </block>
[13:35:02.423]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:35:02.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:35:02.424]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:35:02.424]        // while-condition  =>  FALSE
[13:35:02.424]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:35:02.424]      </control>
[13:35:02.424]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:35:02.424]        // if-block "(__protocol & 0xFFFF) == 1"
[13:35:02.424]          // =>  FALSE
[13:35:02.424]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:35:02.424]      </control>
[13:35:02.424]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:35:02.424]        // if-block "(__protocol & 0xFFFF) == 2"
[13:35:02.424]          // =>  TRUE
[13:35:02.424]        <block atomic="false" info="">
[13:35:02.424]          Message(0, "executing SWD power up");
[13:35:02.427]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:35:02.429]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:35:02.429]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:35:02.430]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:35:02.430]        </block>
[13:35:02.430]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:35:02.430]      </control>
[13:35:02.430]      // end if-block "powered_down"
[13:35:02.430]    </control>
[13:35:02.430]    <block atomic="false" info="">
[13:35:02.430]      __var DEBUG_PORT_VAL    = 0;
[13:35:02.430]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:35:02.432]      __var ACCESS_POINT_VAL  = 0;
[13:35:02.432]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:35:02.432]      __ap = 1; 
[13:35:02.432]        // -> [__ap <= 0x00000001]
[13:35:02.432]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:35:02.436]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:35:02.436]      __ap = 4;
[13:35:02.436]        // -> [__ap <= 0x00000004]
[13:35:02.436]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:35:02.440]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:35:02.440]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:35:02.440]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:35:02.443]    </block>
[13:35:02.443]    <block atomic="false" info="">
[13:35:02.443]      __var nReset = 0x80;
[13:35:02.443]        // -> [nReset <= 0x00000080]
[13:35:02.443]      __var canReadPins = 0;
[13:35:02.443]        // -> [canReadPins <= 0x00000000]
[13:35:02.443]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:35:02.447]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:35:02.447]        // -> [canReadPins <= 0x00000001]
[13:35:02.447]    </block>
[13:35:02.447]    <control if="" while="1" timeout="200" info="">
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.447]      // while-condition  =>  TRUE
[13:35:02.447]      // while "1"  (timeout="200")
[13:35:02.450]      // while-condition  =>  TRUE
[13:35:02.450]      // while "1"  (timeout="200")
[13:35:02.450]      // while-condition  =>  TRUE
[13:35:02.450]      // while "1"  (timeout="200")
[13:35:02.450]      // while-condition  =>  TRUE
[13:35:02.450]      // while "1"  (timeout="200")
[13:35:02.450]      // while-condition  =>  TRUE
[13:35:02.450]      // while "1"  (timeout="200")
[13:35:02.450]      // while-condition  =>  TRUE
[13:35:02.450]      // while "1"  (timeout="200")
[13:35:02.450]      // while-condition  =>  TRUE
[13:35:02.450]      // while "1"  (timeout="200")
[13:35:02.450]      // while-condition  =>  TRUE
[13:35:02.450]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.451]      // while "1"  (timeout="200")
[13:35:02.451]      // while-condition  =>  TRUE
[13:35:02.455]      // while "1"  (timeout="200")
[13:35:02.455]      // while  =>  TIMEOUT
[13:35:02.455]      // end while "1"
[13:35:02.455]    </control>
[13:35:02.455]    <control if="canReadPins" while="" timeout="0" info="">
[13:35:02.455]      // if-block "canReadPins"
[13:35:02.455]        // =>  TRUE
[13:35:02.455]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:35:02.455]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:35:02.459]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:35:02.459]        // while-condition  =>  FALSE
[13:35:02.459]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:35:02.459]      </control>
[13:35:02.459]      // end if-block "canReadPins"
[13:35:02.459]    </control>
[13:35:02.459]    <control if="!canReadPins" while="" timeout="0" info="">
[13:35:02.459]      // if-block "!canReadPins"
[13:35:02.459]        // =>  FALSE
[13:35:02.459]      // skip if-block "!canReadPins"
[13:35:02.459]    </control>
[13:35:02.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:35:02.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:35:02.459]        // =>  TRUE
[13:35:02.459]      <block atomic="false" info="">
[13:35:02.463]        WriteAP(0x00, 0x190008);
[13:35:02.464]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:35:02.464]        WriteAP(0xF0, 0x01);
[13:35:02.468]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:35:02.468]      </block>
[13:35:02.468]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:35:02.468]    </control>
[13:35:02.468]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:35:02.468]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:35:02.468]        // =>  FALSE
[13:35:02.468]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:35:02.468]    </control>
[13:35:02.468]    <block atomic="false" info="">
[13:35:02.468]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:35:02.476]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:35:02.476]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:35:02.476]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:35:02.480]      __ap = 0; //lets make sure we reset the access point selection
[13:35:02.480]        // -> [__ap <= 0x00000000]
[13:35:02.480]    </block>
[13:35:02.480]  </sequence>
[13:35:02.480]  
[13:35:02.514]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:35:02.514]  
[13:35:02.516]  <debugvars>
[13:35:02.516]    // Pre-defined
[13:35:02.516]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:35:02.516]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:35:02.516]    __dp=0x00000000
[13:35:02.516]    __ap=0x00000000
[13:35:02.516]    __traceout=0x00000000      (Trace Disabled)
[13:35:02.516]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:35:02.516]    __FlashAddr=0x00000000
[13:35:02.516]    __FlashLen=0x00000000
[13:35:02.516]    __FlashArg=0x00000000
[13:35:02.516]    __FlashOp=0x00000000
[13:35:02.516]    __Result=0x00000000
[13:35:02.516]  </debugvars>
[13:35:02.516]  
[13:35:02.518]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:35:02.518]    <block atomic="false" info="">
[13:35:02.518]      __var deviceID = 0;
[13:35:02.518]        // -> [deviceID <= 0x00000000]
[13:35:02.518]      __var version = 0;
[13:35:02.518]        // -> [version <= 0x00000000]
[13:35:02.518]      __var partNum = 0;
[13:35:02.518]        // -> [partNum <= 0x00000000]
[13:35:02.518]      __var manuf = 0;
[13:35:02.518]        // -> [manuf <= 0x00000000]
[13:35:02.518]      __var isMSPM0G1X0X_G3X0X = 0;
[13:35:02.519]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:35:02.519]      __var isProduction = 0;
[13:35:02.519]        // -> [isProduction <= 0x00000000]
[13:35:02.519]      __var continueId = 0;
[13:35:02.519]        // -> [continueId <= 0x00000000]
[13:35:02.519]      deviceID =   Read32(0x41C40004);
[13:35:02.523]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:35:02.523]        // -> [deviceID <= 0x2BB8802F]
[13:35:02.523]      version = deviceID >> 28;
[13:35:02.523]        // -> [version <= 0x00000002]
[13:35:02.523]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:35:02.523]        // -> [partNum <= 0x0000BB88]
[13:35:02.523]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:35:02.523]        // -> [manuf <= 0x00000017]
[13:35:02.523]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:35:02.523]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:35:02.526]      isProduction = (version > 0);
[13:35:02.526]        // -> [isProduction <= 0x00000001]
[13:35:02.526]    </block>
[13:35:02.526]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:35:02.526]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:35:02.526]        // =>  FALSE
[13:35:02.526]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:35:02.526]    </control>
[13:35:02.526]    <control if="continueId == 4" while="" timeout="0" info="">
[13:35:02.526]      // if-block "continueId == 4"
[13:35:02.526]        // =>  FALSE
[13:35:02.526]      // skip if-block "continueId == 4"
[13:35:02.526]    </control>
[13:35:02.527]    <control if="!isProduction" while="" timeout="0" info="">
[13:35:02.527]      // if-block "!isProduction"
[13:35:02.527]        // =>  FALSE
[13:35:02.527]      // skip if-block "!isProduction"
[13:35:02.527]    </control>
[13:35:02.527]  </sequence>
[13:35:02.527]  
[13:35:36.971]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:35:36.971]  
[13:35:36.982]  <debugvars>
[13:35:36.982]    // Pre-defined
[13:35:36.982]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:35:36.982]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:35:36.982]    __dp=0x00000000
[13:35:36.982]    __ap=0x00000000
[13:35:36.982]    __traceout=0x00000000      (Trace Disabled)
[13:35:36.982]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:35:36.982]    __FlashAddr=0x00000000
[13:35:36.982]    __FlashLen=0x00000000
[13:35:36.982]    __FlashArg=0x00000000
[13:35:36.982]    __FlashOp=0x00000000
[13:35:36.982]    __Result=0x00000000
[13:35:36.982]  </debugvars>
[13:35:36.982]  
[13:35:36.982]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:35:36.982]    <block atomic="false" info="">
[13:35:36.982]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:35:36.982]        // -> [isSWJ <= 0x00000001]
[13:35:36.984]      __var hasDormant = __protocol & 0x00020000;
[13:35:36.984]        // -> [hasDormant <= 0x00000000]
[13:35:36.984]      __var protType   = __protocol & 0x0000FFFF;
[13:35:36.984]        // -> [protType <= 0x00000002]
[13:35:36.984]    </block>
[13:35:36.984]    <control if="protType == 1" while="" timeout="0" info="">
[13:35:36.984]      // if-block "protType == 1"
[13:35:36.984]        // =>  FALSE
[13:35:36.984]      // skip if-block "protType == 1"
[13:35:36.985]    </control>
[13:35:36.985]    <control if="protType == 2" while="" timeout="0" info="">
[13:35:36.985]      // if-block "protType == 2"
[13:35:36.985]        // =>  TRUE
[13:35:36.985]      <control if="isSWJ" while="" timeout="0" info="">
[13:35:36.985]        // if-block "isSWJ"
[13:35:36.985]          // =>  TRUE
[13:35:36.985]        <control if="hasDormant" while="" timeout="0" info="">
[13:35:36.985]          // if-block "hasDormant"
[13:35:36.985]            // =>  FALSE
[13:35:36.986]          // skip if-block "hasDormant"
[13:35:36.986]        </control>
[13:35:36.986]        <control if="!hasDormant" while="" timeout="0" info="">
[13:35:36.986]          // if-block "!hasDormant"
[13:35:36.986]            // =>  TRUE
[13:35:36.986]          <block atomic="false" info="">
[13:35:36.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:35:36.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:35:36.988]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:35:36.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:35:36.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:35:36.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:35:36.992]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:35:36.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:35:36.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:35:36.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:35:36.998]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:35:36.998]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:35:36.998]          </block>
[13:35:36.998]          // end if-block "!hasDormant"
[13:35:37.000]        </control>
[13:35:37.000]        // end if-block "isSWJ"
[13:35:37.000]      </control>
[13:35:37.000]      <control if="!isSWJ" while="" timeout="0" info="">
[13:35:37.000]        // if-block "!isSWJ"
[13:35:37.000]          // =>  FALSE
[13:35:37.000]        // skip if-block "!isSWJ"
[13:35:37.000]      </control>
[13:35:37.000]      <block atomic="false" info="">
[13:35:37.000]        ReadDP(0x0);
[13:35:37.000]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:35:37.000]      </block>
[13:35:37.000]      // end if-block "protType == 2"
[13:35:37.000]    </control>
[13:35:37.004]  </sequence>
[13:35:37.004]  
[13:35:37.008]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:35:37.008]  
[13:35:37.008]  <debugvars>
[13:35:37.008]    // Pre-defined
[13:35:37.008]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:35:37.008]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:35:37.008]    __dp=0x00000000
[13:35:37.008]    __ap=0x00000000
[13:35:37.008]    __traceout=0x00000000      (Trace Disabled)
[13:35:37.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:35:37.008]    __FlashAddr=0x00000000
[13:35:37.008]    __FlashLen=0x00000000
[13:35:37.008]    __FlashArg=0x00000000
[13:35:37.008]    __FlashOp=0x00000000
[13:35:37.008]    __Result=0x00000000
[13:35:37.008]  </debugvars>
[13:35:37.008]  
[13:35:37.008]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:35:37.008]    <block atomic="false" info="">
[13:35:37.008]      __var SW_DP_ABORT       = 0x0;
[13:35:37.008]        // -> [SW_DP_ABORT <= 0x00000000]
[13:35:37.008]      __var DP_CTRL_STAT      = 0x4;
[13:35:37.008]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:35:37.008]      __var DP_SELECT         = 0x8;
[13:35:37.008]        // -> [DP_SELECT <= 0x00000008]
[13:35:37.012]      __var powered_down      = 0;
[13:35:37.012]        // -> [powered_down <= 0x00000000]
[13:35:37.012]      WriteDP(DP_SELECT, 0x00000000);
[13:35:37.013]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:35:37.013]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:35:37.015]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:35:37.015]        // -> [powered_down <= 0x00000001]
[13:35:37.015]    </block>
[13:35:37.015]    <control if="powered_down" while="" timeout="0" info="">
[13:35:37.015]      // if-block "powered_down"
[13:35:37.015]        // =>  TRUE
[13:35:37.015]      <block atomic="false" info="">
[13:35:37.015]        Message(0, "Debug/System power-up request sent");
[13:35:37.019]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:35:37.021]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:35:37.021]      </block>
[13:35:37.021]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:35:37.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:35:37.025]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:35:37.025]        // while-condition  =>  FALSE
[13:35:37.025]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:35:37.025]      </control>
[13:35:37.025]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:35:37.025]        // if-block "(__protocol & 0xFFFF) == 1"
[13:35:37.025]          // =>  FALSE
[13:35:37.025]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:35:37.025]      </control>
[13:35:37.025]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:35:37.025]        // if-block "(__protocol & 0xFFFF) == 2"
[13:35:37.025]          // =>  TRUE
[13:35:37.025]        <block atomic="false" info="">
[13:35:37.025]          Message(0, "executing SWD power up");
[13:35:37.028]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:35:37.030]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:35:37.030]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:35:37.033]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:35:37.033]        </block>
[13:35:37.033]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:35:37.033]      </control>
[13:35:37.037]      // end if-block "powered_down"
[13:35:37.037]    </control>
[13:35:37.037]    <block atomic="false" info="">
[13:35:37.037]      __var DEBUG_PORT_VAL    = 0;
[13:35:37.037]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:35:37.038]      __var ACCESS_POINT_VAL  = 0;
[13:35:37.038]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:35:37.038]      __ap = 1; 
[13:35:37.038]        // -> [__ap <= 0x00000001]
[13:35:37.038]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:35:37.041]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:35:37.041]      __ap = 4;
[13:35:37.041]        // -> [__ap <= 0x00000004]
[13:35:37.041]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:35:37.047]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:35:37.047]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:35:37.047]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:35:37.048]    </block>
[13:35:37.048]    <block atomic="false" info="">
[13:35:37.048]      __var nReset = 0x80;
[13:35:37.048]        // -> [nReset <= 0x00000080]
[13:35:37.050]      __var canReadPins = 0;
[13:35:37.050]        // -> [canReadPins <= 0x00000000]
[13:35:37.050]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:35:37.059]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:35:37.059]        // -> [canReadPins <= 0x00000001]
[13:35:37.059]    </block>
[13:35:37.059]    <control if="" while="1" timeout="200" info="">
[13:35:37.059]      // while "1"  (timeout="200")
[13:35:37.059]      // while-condition  =>  TRUE
[13:35:37.059]      // while "1"  (timeout="200")
[13:35:37.059]      // while-condition  =>  TRUE
[13:35:37.060]      // while "1"  (timeout="200")
[13:35:37.060]      // while-condition  =>  TRUE
[13:35:37.060]      // while "1"  (timeout="200")
[13:35:37.060]      // while-condition  =>  TRUE
[13:35:37.060]      // while "1"  (timeout="200")
[13:35:37.060]      // while-condition  =>  TRUE
[13:35:37.060]      // while "1"  (timeout="200")
[13:35:37.060]      // while-condition  =>  TRUE
[13:35:37.060]      // while "1"  (timeout="200")
[13:35:37.060]      // while-condition  =>  TRUE
[13:35:37.060]      // while "1"  (timeout="200")
[13:35:37.060]      // while-condition  =>  TRUE
[13:35:37.060]      // while "1"  (timeout="200")
[13:35:37.060]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.062]      // while "1"  (timeout="200")
[13:35:37.062]      // while-condition  =>  TRUE
[13:35:37.066]      // while "1"  (timeout="200")
[13:35:37.066]      // while  =>  TIMEOUT
[13:35:37.066]      // end while "1"
[13:35:37.066]    </control>
[13:35:37.066]    <control if="canReadPins" while="" timeout="0" info="">
[13:35:37.066]      // if-block "canReadPins"
[13:35:37.066]        // =>  TRUE
[13:35:37.066]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:35:37.066]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:35:37.068]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:35:37.068]        // while-condition  =>  FALSE
[13:35:37.068]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:35:37.068]      </control>
[13:35:37.068]      // end if-block "canReadPins"
[13:35:37.068]    </control>
[13:35:37.068]    <control if="!canReadPins" while="" timeout="0" info="">
[13:35:37.070]      // if-block "!canReadPins"
[13:35:37.070]        // =>  FALSE
[13:35:37.070]      // skip if-block "!canReadPins"
[13:35:37.070]    </control>
[13:35:37.070]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:35:37.070]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:35:37.070]        // =>  TRUE
[13:35:37.070]      <block atomic="false" info="">
[13:35:37.070]        WriteAP(0x00, 0x190008);
[13:35:37.070]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:35:37.070]        WriteAP(0xF0, 0x01);
[13:35:37.075]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:35:37.075]      </block>
[13:35:37.075]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:35:37.075]    </control>
[13:35:37.075]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:35:37.075]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:35:37.075]        // =>  FALSE
[13:35:37.075]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:35:37.075]    </control>
[13:35:37.075]    <block atomic="false" info="">
[13:35:37.078]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:35:37.080]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:35:37.080]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:35:37.080]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:35:37.082]      __ap = 0; //lets make sure we reset the access point selection
[13:35:37.082]        // -> [__ap <= 0x00000000]
[13:35:37.082]    </block>
[13:35:37.082]  </sequence>
[13:35:37.082]  
[13:35:37.110]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:35:37.110]  
[13:35:37.110]  <debugvars>
[13:35:37.110]    // Pre-defined
[13:35:37.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:35:37.114]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:35:37.114]    __dp=0x00000000
[13:35:37.114]    __ap=0x00000000
[13:35:37.114]    __traceout=0x00000000      (Trace Disabled)
[13:35:37.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:35:37.114]    __FlashAddr=0x00000000
[13:35:37.114]    __FlashLen=0x00000000
[13:35:37.114]    __FlashArg=0x00000000
[13:35:37.114]    __FlashOp=0x00000000
[13:35:37.114]    __Result=0x00000000
[13:35:37.115]  </debugvars>
[13:35:37.115]  
[13:35:37.115]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:35:37.115]    <block atomic="false" info="">
[13:35:37.115]      __var deviceID = 0;
[13:35:37.115]        // -> [deviceID <= 0x00000000]
[13:35:37.115]      __var version = 0;
[13:35:37.115]        // -> [version <= 0x00000000]
[13:35:37.115]      __var partNum = 0;
[13:35:37.115]        // -> [partNum <= 0x00000000]
[13:35:37.115]      __var manuf = 0;
[13:35:37.115]        // -> [manuf <= 0x00000000]
[13:35:37.115]      __var isMSPM0G1X0X_G3X0X = 0;
[13:35:37.115]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:35:37.115]      __var isProduction = 0;
[13:35:37.115]        // -> [isProduction <= 0x00000000]
[13:35:37.115]      __var continueId = 0;
[13:35:37.115]        // -> [continueId <= 0x00000000]
[13:35:37.115]      deviceID =   Read32(0x41C40004);
[13:35:37.124]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:35:37.124]        // -> [deviceID <= 0x2BB8802F]
[13:35:37.124]      version = deviceID >> 28;
[13:35:37.124]        // -> [version <= 0x00000002]
[13:35:37.124]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:35:37.127]        // -> [partNum <= 0x0000BB88]
[13:35:37.127]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:35:37.127]        // -> [manuf <= 0x00000017]
[13:35:37.127]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:35:37.127]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:35:37.127]      isProduction = (version > 0);
[13:35:37.127]        // -> [isProduction <= 0x00000001]
[13:35:37.127]    </block>
[13:35:37.127]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:35:37.127]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:35:37.127]        // =>  FALSE
[13:35:37.127]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:35:37.127]    </control>
[13:35:37.127]    <control if="continueId == 4" while="" timeout="0" info="">
[13:35:37.127]      // if-block "continueId == 4"
[13:35:37.128]        // =>  FALSE
[13:35:37.128]      // skip if-block "continueId == 4"
[13:35:37.128]    </control>
[13:35:37.128]    <control if="!isProduction" while="" timeout="0" info="">
[13:35:37.128]      // if-block "!isProduction"
[13:35:37.128]        // =>  FALSE
[13:35:37.128]      // skip if-block "!isProduction"
[13:35:37.128]    </control>
[13:35:37.128]  </sequence>
[13:35:37.128]  
[13:44:31.866]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:44:31.866]  
[13:44:31.866]  <debugvars>
[13:44:31.866]    // Pre-defined
[13:44:31.866]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:44:31.866]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:44:31.866]    __dp=0x00000000
[13:44:31.866]    __ap=0x00000000
[13:44:31.866]    __traceout=0x00000000      (Trace Disabled)
[13:44:31.866]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:44:31.866]    __FlashAddr=0x00000000
[13:44:31.866]    __FlashLen=0x00000000
[13:44:31.866]    __FlashArg=0x00000000
[13:44:31.868]    __FlashOp=0x00000000
[13:44:31.868]    __Result=0x00000000
[13:44:31.868]  </debugvars>
[13:44:31.868]  
[13:44:31.868]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:44:31.868]    <block atomic="false" info="">
[13:44:31.868]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:44:31.868]        // -> [isSWJ <= 0x00000001]
[13:44:31.868]      __var hasDormant = __protocol & 0x00020000;
[13:44:31.868]        // -> [hasDormant <= 0x00000000]
[13:44:31.868]      __var protType   = __protocol & 0x0000FFFF;
[13:44:31.868]        // -> [protType <= 0x00000002]
[13:44:31.868]    </block>
[13:44:31.868]    <control if="protType == 1" while="" timeout="0" info="">
[13:44:31.868]      // if-block "protType == 1"
[13:44:31.868]        // =>  FALSE
[13:44:31.868]      // skip if-block "protType == 1"
[13:44:31.868]    </control>
[13:44:31.868]    <control if="protType == 2" while="" timeout="0" info="">
[13:44:31.868]      // if-block "protType == 2"
[13:44:31.868]        // =>  TRUE
[13:44:31.868]      <control if="isSWJ" while="" timeout="0" info="">
[13:44:31.868]        // if-block "isSWJ"
[13:44:31.868]          // =>  TRUE
[13:44:31.868]        <control if="hasDormant" while="" timeout="0" info="">
[13:44:31.868]          // if-block "hasDormant"
[13:44:31.868]            // =>  FALSE
[13:44:31.868]          // skip if-block "hasDormant"
[13:44:31.868]        </control>
[13:44:31.868]        <control if="!hasDormant" while="" timeout="0" info="">
[13:44:31.868]          // if-block "!hasDormant"
[13:44:31.868]            // =>  TRUE
[13:44:31.868]          <block atomic="false" info="">
[13:44:31.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:44:31.872]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:31.872]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:44:31.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:44:31.874]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:44:31.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:31.875]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:44:31.876]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:44:31.876]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:44:31.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:31.883]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:44:31.884]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:44:31.884]          </block>
[13:44:31.884]          // end if-block "!hasDormant"
[13:44:31.884]        </control>
[13:44:31.886]        // end if-block "isSWJ"
[13:44:31.886]      </control>
[13:44:31.886]      <control if="!isSWJ" while="" timeout="0" info="">
[13:44:31.886]        // if-block "!isSWJ"
[13:44:31.886]          // =>  FALSE
[13:44:31.886]        // skip if-block "!isSWJ"
[13:44:31.886]      </control>
[13:44:31.886]      <block atomic="false" info="">
[13:44:31.886]        ReadDP(0x0);
[13:44:31.888]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:44:31.888]      </block>
[13:44:31.888]      // end if-block "protType == 2"
[13:44:31.888]    </control>
[13:44:31.888]  </sequence>
[13:44:31.888]  
[13:44:34.456]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:44:34.456]  
[13:44:34.462]  <debugvars>
[13:44:34.462]    // Pre-defined
[13:44:34.462]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:44:34.462]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:44:34.462]    __dp=0x00000000
[13:44:34.462]    __ap=0x00000000
[13:44:34.462]    __traceout=0x00000000      (Trace Disabled)
[13:44:34.462]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:44:34.462]    __FlashAddr=0x00000000
[13:44:34.463]    __FlashLen=0x00000000
[13:44:34.463]    __FlashArg=0x00000000
[13:44:34.463]    __FlashOp=0x00000000
[13:44:34.463]    __Result=0x00000000
[13:44:34.463]  </debugvars>
[13:44:34.463]  
[13:44:34.463]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:44:34.463]    <block atomic="false" info="">
[13:44:34.463]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:44:34.463]        // -> [isSWJ <= 0x00000001]
[13:44:34.464]      __var hasDormant = __protocol & 0x00020000;
[13:44:34.464]        // -> [hasDormant <= 0x00000000]
[13:44:34.464]      __var protType   = __protocol & 0x0000FFFF;
[13:44:34.464]        // -> [protType <= 0x00000002]
[13:44:34.464]    </block>
[13:44:34.464]    <control if="protType == 1" while="" timeout="0" info="">
[13:44:34.464]      // if-block "protType == 1"
[13:44:34.464]        // =>  FALSE
[13:44:34.464]      // skip if-block "protType == 1"
[13:44:34.464]    </control>
[13:44:34.464]    <control if="protType == 2" while="" timeout="0" info="">
[13:44:34.464]      // if-block "protType == 2"
[13:44:34.464]        // =>  TRUE
[13:44:34.464]      <control if="isSWJ" while="" timeout="0" info="">
[13:44:34.464]        // if-block "isSWJ"
[13:44:34.466]          // =>  TRUE
[13:44:34.466]        <control if="hasDormant" while="" timeout="0" info="">
[13:44:34.466]          // if-block "hasDormant"
[13:44:34.466]            // =>  FALSE
[13:44:34.466]          // skip if-block "hasDormant"
[13:44:34.466]        </control>
[13:44:34.466]        <control if="!hasDormant" while="" timeout="0" info="">
[13:44:34.466]          // if-block "!hasDormant"
[13:44:34.466]            // =>  TRUE
[13:44:34.466]          <block atomic="false" info="">
[13:44:34.466]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:44:34.470]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:34.470]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:44:34.474]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:44:34.474]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:44:34.476]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:34.476]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:44:34.476]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:44:34.476]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:44:34.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:34.478]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:44:34.478]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:44:34.481]          </block>
[13:44:34.481]          // end if-block "!hasDormant"
[13:44:34.481]        </control>
[13:44:34.481]        // end if-block "isSWJ"
[13:44:34.481]      </control>
[13:44:34.481]      <control if="!isSWJ" while="" timeout="0" info="">
[13:44:34.481]        // if-block "!isSWJ"
[13:44:34.481]          // =>  FALSE
[13:44:34.481]        // skip if-block "!isSWJ"
[13:44:34.481]      </control>
[13:44:34.481]      <block atomic="false" info="">
[13:44:34.482]        ReadDP(0x0);
[13:44:34.483]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:44:34.483]      </block>
[13:44:34.483]      // end if-block "protType == 2"
[13:44:34.483]    </control>
[13:44:34.483]  </sequence>
[13:44:34.484]  
[13:44:34.486]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:44:34.486]  
[13:44:34.486]  <debugvars>
[13:44:34.486]    // Pre-defined
[13:44:34.486]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:44:34.486]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:44:34.486]    __dp=0x00000000
[13:44:34.486]    __ap=0x00000000
[13:44:34.486]    __traceout=0x00000000      (Trace Disabled)
[13:44:34.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:44:34.486]    __FlashAddr=0x00000000
[13:44:34.486]    __FlashLen=0x00000000
[13:44:34.486]    __FlashArg=0x00000000
[13:44:34.486]    __FlashOp=0x00000000
[13:44:34.486]    __Result=0x00000000
[13:44:34.486]  </debugvars>
[13:44:34.486]  
[13:44:34.486]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:44:34.486]    <block atomic="false" info="">
[13:44:34.486]      __var SW_DP_ABORT       = 0x0;
[13:44:34.486]        // -> [SW_DP_ABORT <= 0x00000000]
[13:44:34.486]      __var DP_CTRL_STAT      = 0x4;
[13:44:34.486]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:44:34.486]      __var DP_SELECT         = 0x8;
[13:44:34.486]        // -> [DP_SELECT <= 0x00000008]
[13:44:34.486]      __var powered_down      = 0;
[13:44:34.486]        // -> [powered_down <= 0x00000000]
[13:44:34.486]      WriteDP(DP_SELECT, 0x00000000);
[13:44:34.490]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:44:34.490]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:44:34.492]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:44:34.492]        // -> [powered_down <= 0x00000001]
[13:44:34.492]    </block>
[13:44:34.492]    <control if="powered_down" while="" timeout="0" info="">
[13:44:34.492]      // if-block "powered_down"
[13:44:34.492]        // =>  TRUE
[13:44:34.492]      <block atomic="false" info="">
[13:44:34.492]        Message(0, "Debug/System power-up request sent");
[13:44:34.494]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:44:34.496]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:44:34.496]      </block>
[13:44:34.496]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:44:34.496]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:44:34.498]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:44:34.498]        // while-condition  =>  FALSE
[13:44:34.498]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:44:34.498]      </control>
[13:44:34.498]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:44:34.498]        // if-block "(__protocol & 0xFFFF) == 1"
[13:44:34.498]          // =>  FALSE
[13:44:34.498]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:44:34.498]      </control>
[13:44:34.498]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:44:34.498]        // if-block "(__protocol & 0xFFFF) == 2"
[13:44:34.498]          // =>  TRUE
[13:44:34.498]        <block atomic="false" info="">
[13:44:34.498]          Message(0, "executing SWD power up");
[13:44:34.502]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:44:34.504]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:44:34.505]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:44:34.506]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:44:34.506]        </block>
[13:44:34.510]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:44:34.510]      </control>
[13:44:34.510]      // end if-block "powered_down"
[13:44:34.510]    </control>
[13:44:34.510]    <block atomic="false" info="">
[13:44:34.510]      __var DEBUG_PORT_VAL    = 0;
[13:44:34.510]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:44:34.510]      __var ACCESS_POINT_VAL  = 0;
[13:44:34.510]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:44:34.510]      __ap = 1; 
[13:44:34.510]        // -> [__ap <= 0x00000001]
[13:44:34.510]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:44:34.524]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:44:34.524]      __ap = 4;
[13:44:34.524]        // -> [__ap <= 0x00000004]
[13:44:34.524]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:44:34.530]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:44:34.530]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:44:34.530]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:44:34.530]    </block>
[13:44:34.530]    <block atomic="false" info="">
[13:44:34.534]      __var nReset = 0x80;
[13:44:34.534]        // -> [nReset <= 0x00000080]
[13:44:34.534]      __var canReadPins = 0;
[13:44:34.534]        // -> [canReadPins <= 0x00000000]
[13:44:34.534]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:44:34.534]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:44:34.534]        // -> [canReadPins <= 0x00000001]
[13:44:34.534]    </block>
[13:44:34.534]    <control if="" while="1" timeout="200" info="">
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.534]      // while "1"  (timeout="200")
[13:44:34.534]      // while-condition  =>  TRUE
[13:44:34.538]      // while "1"  (timeout="200")
[13:44:34.538]      // while-condition  =>  TRUE
[13:44:34.538]      // while "1"  (timeout="200")
[13:44:34.538]      // while-condition  =>  TRUE
[13:44:34.538]      // while "1"  (timeout="200")
[13:44:34.538]      // while-condition  =>  TRUE
[13:44:34.538]      // while "1"  (timeout="200")
[13:44:34.538]      // while-condition  =>  TRUE
[13:44:34.538]      // while "1"  (timeout="200")
[13:44:34.538]      // while-condition  =>  TRUE
[13:44:34.538]      // while "1"  (timeout="200")
[13:44:34.538]      // while-condition  =>  TRUE
[13:44:34.538]      // while "1"  (timeout="200")
[13:44:34.539]      // while-condition  =>  TRUE
[13:44:34.539]      // while "1"  (timeout="200")
[13:44:34.539]      // while-condition  =>  TRUE
[13:44:34.539]      // while "1"  (timeout="200")
[13:44:34.539]      // while-condition  =>  TRUE
[13:44:34.539]      // while "1"  (timeout="200")
[13:44:34.539]      // while-condition  =>  TRUE
[13:44:34.539]      // while "1"  (timeout="200")
[13:44:34.539]      // while-condition  =>  TRUE
[13:44:34.539]      // while "1"  (timeout="200")
[13:44:34.539]      // while-condition  =>  TRUE
[13:44:34.539]      // while "1"  (timeout="200")
[13:44:34.540]      // while-condition  =>  TRUE
[13:44:34.540]      // while "1"  (timeout="200")
[13:44:34.540]      // while-condition  =>  TRUE
[13:44:34.540]      // while "1"  (timeout="200")
[13:44:34.540]      // while-condition  =>  TRUE
[13:44:34.540]      // while "1"  (timeout="200")
[13:44:34.540]      // while-condition  =>  TRUE
[13:44:34.540]      // while "1"  (timeout="200")
[13:44:34.540]      // while-condition  =>  TRUE
[13:44:34.540]      // while "1"  (timeout="200")
[13:44:34.540]      // while-condition  =>  TRUE
[13:44:34.540]      // while "1"  (timeout="200")
[13:44:34.540]      // while-condition  =>  TRUE
[13:44:34.542]      // while "1"  (timeout="200")
[13:44:34.542]      // while-condition  =>  TRUE
[13:44:34.542]      // while "1"  (timeout="200")
[13:44:34.542]      // while-condition  =>  TRUE
[13:44:34.542]      // while "1"  (timeout="200")
[13:44:34.543]      // while-condition  =>  TRUE
[13:44:34.543]      // while "1"  (timeout="200")
[13:44:34.543]      // while-condition  =>  TRUE
[13:44:34.543]      // while "1"  (timeout="200")
[13:44:34.543]      // while-condition  =>  TRUE
[13:44:34.543]      // while "1"  (timeout="200")
[13:44:34.543]      // while-condition  =>  TRUE
[13:44:34.543]      // while "1"  (timeout="200")
[13:44:34.543]      // while-condition  =>  TRUE
[13:44:34.543]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.544]      // while-condition  =>  TRUE
[13:44:34.544]      // while "1"  (timeout="200")
[13:44:34.545]      // while-condition  =>  TRUE
[13:44:34.545]      // while "1"  (timeout="200")
[13:44:34.545]      // while-condition  =>  TRUE
[13:44:34.545]      // while "1"  (timeout="200")
[13:44:34.545]      // while-condition  =>  TRUE
[13:44:34.545]      // while "1"  (timeout="200")
[13:44:34.546]      // while-condition  =>  TRUE
[13:44:34.546]      // while "1"  (timeout="200")
[13:44:34.546]      // while-condition  =>  TRUE
[13:44:34.546]      // while "1"  (timeout="200")
[13:44:34.546]      // while-condition  =>  TRUE
[13:44:34.546]      // while "1"  (timeout="200")
[13:44:34.546]      // while-condition  =>  TRUE
[13:44:34.546]      // while "1"  (timeout="200")
[13:44:34.546]      // while-condition  =>  TRUE
[13:44:34.546]      // while "1"  (timeout="200")
[13:44:34.546]      // while-condition  =>  TRUE
[13:44:34.546]      // while "1"  (timeout="200")
[13:44:34.547]      // while-condition  =>  TRUE
[13:44:34.547]      // while "1"  (timeout="200")
[13:44:34.547]      // while-condition  =>  TRUE
[13:44:34.547]      // while "1"  (timeout="200")
[13:44:34.547]      // while-condition  =>  TRUE
[13:44:34.547]      // while "1"  (timeout="200")
[13:44:34.547]      // while-condition  =>  TRUE
[13:44:34.547]      // while "1"  (timeout="200")
[13:44:34.547]      // while-condition  =>  TRUE
[13:44:34.547]      // while "1"  (timeout="200")
[13:44:34.547]      // while-condition  =>  TRUE
[13:44:34.549]      // while "1"  (timeout="200")
[13:44:34.549]      // while  =>  TIMEOUT
[13:44:34.549]      // end while "1"
[13:44:34.549]    </control>
[13:44:34.549]    <control if="canReadPins" while="" timeout="0" info="">
[13:44:34.549]      // if-block "canReadPins"
[13:44:34.549]        // =>  TRUE
[13:44:34.549]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:44:34.549]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:44:34.550]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:44:34.550]        // while-condition  =>  FALSE
[13:44:34.550]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:44:34.550]      </control>
[13:44:34.550]      // end if-block "canReadPins"
[13:44:34.550]    </control>
[13:44:34.550]    <control if="!canReadPins" while="" timeout="0" info="">
[13:44:34.550]      // if-block "!canReadPins"
[13:44:34.550]        // =>  FALSE
[13:44:34.550]      // skip if-block "!canReadPins"
[13:44:34.550]    </control>
[13:44:34.550]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:44:34.550]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:44:34.552]        // =>  TRUE
[13:44:34.552]      <block atomic="false" info="">
[13:44:34.552]        WriteAP(0x00, 0x190008);
[13:44:34.556]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:44:34.556]        WriteAP(0xF0, 0x01);
[13:44:34.560]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:44:34.560]      </block>
[13:44:34.560]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:44:34.560]    </control>
[13:44:34.560]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:44:34.560]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:44:34.560]        // =>  FALSE
[13:44:34.560]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:44:34.560]    </control>
[13:44:34.560]    <block atomic="false" info="">
[13:44:34.560]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:44:34.563]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:44:34.563]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:44:34.564]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:44:34.565]      __ap = 0; //lets make sure we reset the access point selection
[13:44:34.565]        // -> [__ap <= 0x00000000]
[13:44:34.565]    </block>
[13:44:34.565]  </sequence>
[13:44:34.565]  
[13:44:34.594]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:44:34.594]  
[13:44:34.594]  <debugvars>
[13:44:34.594]    // Pre-defined
[13:44:34.594]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:44:34.594]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:44:34.594]    __dp=0x00000000
[13:44:34.596]    __ap=0x00000000
[13:44:34.596]    __traceout=0x00000000      (Trace Disabled)
[13:44:34.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:44:34.596]    __FlashAddr=0x00000000
[13:44:34.596]    __FlashLen=0x00000000
[13:44:34.596]    __FlashArg=0x00000000
[13:44:34.596]    __FlashOp=0x00000000
[13:44:34.596]    __Result=0x00000000
[13:44:34.596]  </debugvars>
[13:44:34.596]  
[13:44:34.596]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:44:34.596]    <block atomic="false" info="">
[13:44:34.597]      __var deviceID = 0;
[13:44:34.597]        // -> [deviceID <= 0x00000000]
[13:44:34.597]      __var version = 0;
[13:44:34.597]        // -> [version <= 0x00000000]
[13:44:34.597]      __var partNum = 0;
[13:44:34.597]        // -> [partNum <= 0x00000000]
[13:44:34.597]      __var manuf = 0;
[13:44:34.597]        // -> [manuf <= 0x00000000]
[13:44:34.597]      __var isMSPM0G1X0X_G3X0X = 0;
[13:44:34.597]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:44:34.597]      __var isProduction = 0;
[13:44:34.597]        // -> [isProduction <= 0x00000000]
[13:44:34.597]      __var continueId = 0;
[13:44:34.597]        // -> [continueId <= 0x00000000]
[13:44:34.597]      deviceID =   Read32(0x41C40004);
[13:44:34.605]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:44:34.605]        // -> [deviceID <= 0x2BB8802F]
[13:44:34.606]      version = deviceID >> 28;
[13:44:34.606]        // -> [version <= 0x00000002]
[13:44:34.606]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:44:34.606]        // -> [partNum <= 0x0000BB88]
[13:44:34.606]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:44:34.606]        // -> [manuf <= 0x00000017]
[13:44:34.606]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:44:34.606]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:44:34.606]      isProduction = (version > 0);
[13:44:34.606]        // -> [isProduction <= 0x00000001]
[13:44:34.607]    </block>
[13:44:34.607]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:44:34.607]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:44:34.607]        // =>  FALSE
[13:44:34.607]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:44:34.607]    </control>
[13:44:34.607]    <control if="continueId == 4" while="" timeout="0" info="">
[13:44:34.607]      // if-block "continueId == 4"
[13:44:34.607]        // =>  FALSE
[13:44:34.607]      // skip if-block "continueId == 4"
[13:44:34.607]    </control>
[13:44:34.607]    <control if="!isProduction" while="" timeout="0" info="">
[13:44:34.607]      // if-block "!isProduction"
[13:44:34.607]        // =>  FALSE
[13:44:34.607]      // skip if-block "!isProduction"
[13:44:34.607]    </control>
[13:44:34.608]  </sequence>
[13:44:34.608]  
[13:45:50.780]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:45:50.780]  
[13:45:50.788]  <debugvars>
[13:45:50.788]    // Pre-defined
[13:45:50.788]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:45:50.788]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:45:50.788]    __dp=0x00000000
[13:45:50.789]    __ap=0x00000000
[13:45:50.789]    __traceout=0x00000000      (Trace Disabled)
[13:45:50.789]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:45:50.789]    __FlashAddr=0x00000000
[13:45:50.789]    __FlashLen=0x00000000
[13:45:50.789]    __FlashArg=0x00000000
[13:45:50.790]    __FlashOp=0x00000000
[13:45:50.790]    __Result=0x00000000
[13:45:50.790]  </debugvars>
[13:45:50.790]  
[13:45:50.790]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:45:50.791]    <block atomic="false" info="">
[13:45:50.791]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:45:50.791]        // -> [isSWJ <= 0x00000001]
[13:45:50.791]      __var hasDormant = __protocol & 0x00020000;
[13:45:50.791]        // -> [hasDormant <= 0x00000000]
[13:45:50.791]      __var protType   = __protocol & 0x0000FFFF;
[13:45:50.791]        // -> [protType <= 0x00000002]
[13:45:50.791]    </block>
[13:45:50.791]    <control if="protType == 1" while="" timeout="0" info="">
[13:45:50.791]      // if-block "protType == 1"
[13:45:50.791]        // =>  FALSE
[13:45:50.791]      // skip if-block "protType == 1"
[13:45:50.791]    </control>
[13:45:50.791]    <control if="protType == 2" while="" timeout="0" info="">
[13:45:50.791]      // if-block "protType == 2"
[13:45:50.791]        // =>  TRUE
[13:45:50.791]      <control if="isSWJ" while="" timeout="0" info="">
[13:45:50.792]        // if-block "isSWJ"
[13:45:50.792]          // =>  TRUE
[13:45:50.792]        <control if="hasDormant" while="" timeout="0" info="">
[13:45:50.792]          // if-block "hasDormant"
[13:45:50.792]            // =>  FALSE
[13:45:50.792]          // skip if-block "hasDormant"
[13:45:50.792]        </control>
[13:45:50.792]        <control if="!hasDormant" while="" timeout="0" info="">
[13:45:50.793]          // if-block "!hasDormant"
[13:45:50.793]            // =>  TRUE
[13:45:50.793]          <block atomic="false" info="">
[13:45:50.793]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:45:50.800]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:45:50.800]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:45:50.801]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:45:50.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:45:50.801]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:45:50.801]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:45:50.808]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:45:50.808]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:45:50.816]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:45:50.816]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:45:50.820]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:45:50.820]          </block>
[13:45:50.820]          // end if-block "!hasDormant"
[13:45:50.820]        </control>
[13:45:50.820]        // end if-block "isSWJ"
[13:45:50.820]      </control>
[13:45:50.820]      <control if="!isSWJ" while="" timeout="0" info="">
[13:45:50.820]        // if-block "!isSWJ"
[13:45:50.820]          // =>  FALSE
[13:45:50.820]        // skip if-block "!isSWJ"
[13:45:50.820]      </control>
[13:45:50.820]      <block atomic="false" info="">
[13:45:50.820]        ReadDP(0x0);
[13:45:50.820]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:45:50.820]      </block>
[13:45:50.820]      // end if-block "protType == 2"
[13:45:50.820]    </control>
[13:45:50.820]  </sequence>
[13:45:50.820]  
[13:45:50.826]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:45:50.826]  
[13:45:50.826]  <debugvars>
[13:45:50.826]    // Pre-defined
[13:45:50.826]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:45:50.826]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:45:50.826]    __dp=0x00000000
[13:45:50.826]    __ap=0x00000000
[13:45:50.826]    __traceout=0x00000000      (Trace Disabled)
[13:45:50.826]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:45:50.826]    __FlashAddr=0x00000000
[13:45:50.826]    __FlashLen=0x00000000
[13:45:50.826]    __FlashArg=0x00000000
[13:45:50.826]    __FlashOp=0x00000000
[13:45:50.826]    __Result=0x00000000
[13:45:50.826]  </debugvars>
[13:45:50.826]  
[13:45:50.826]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:45:50.826]    <block atomic="false" info="">
[13:45:50.826]      __var SW_DP_ABORT       = 0x0;
[13:45:50.826]        // -> [SW_DP_ABORT <= 0x00000000]
[13:45:50.828]      __var DP_CTRL_STAT      = 0x4;
[13:45:50.828]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:45:50.828]      __var DP_SELECT         = 0x8;
[13:45:50.828]        // -> [DP_SELECT <= 0x00000008]
[13:45:50.828]      __var powered_down      = 0;
[13:45:50.828]        // -> [powered_down <= 0x00000000]
[13:45:50.828]      WriteDP(DP_SELECT, 0x00000000);
[13:45:50.840]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:45:50.840]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:45:50.844]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:45:50.844]        // -> [powered_down <= 0x00000001]
[13:45:50.844]    </block>
[13:45:50.844]    <control if="powered_down" while="" timeout="0" info="">
[13:45:50.846]      // if-block "powered_down"
[13:45:50.846]        // =>  TRUE
[13:45:50.846]      <block atomic="false" info="">
[13:45:50.846]        Message(0, "Debug/System power-up request sent");
[13:45:50.846]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:45:50.856]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:45:50.857]      </block>
[13:45:50.857]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:45:50.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:45:50.857]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:45:50.857]        // while-condition  =>  FALSE
[13:45:50.859]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:45:50.859]      </control>
[13:45:50.859]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:45:50.859]        // if-block "(__protocol & 0xFFFF) == 1"
[13:45:50.859]          // =>  FALSE
[13:45:50.859]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:45:50.859]      </control>
[13:45:50.859]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:45:50.859]        // if-block "(__protocol & 0xFFFF) == 2"
[13:45:50.859]          // =>  TRUE
[13:45:50.859]        <block atomic="false" info="">
[13:45:50.859]          Message(0, "executing SWD power up");
[13:45:50.861]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:45:50.865]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:45:50.865]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:45:50.868]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:45:50.868]        </block>
[13:45:50.868]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:45:50.868]      </control>
[13:45:50.868]      // end if-block "powered_down"
[13:45:50.868]    </control>
[13:45:50.869]    <block atomic="false" info="">
[13:45:50.869]      __var DEBUG_PORT_VAL    = 0;
[13:45:50.869]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:45:50.869]      __var ACCESS_POINT_VAL  = 0;
[13:45:50.869]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:45:50.869]      __ap = 1; 
[13:45:50.869]        // -> [__ap <= 0x00000001]
[13:45:50.870]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:45:50.878]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:45:50.878]      __ap = 4;
[13:45:50.878]        // -> [__ap <= 0x00000004]
[13:45:50.878]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:45:50.886]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:45:50.886]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:45:50.886]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:45:50.888]    </block>
[13:45:50.888]    <block atomic="false" info="">
[13:45:50.888]      __var nReset = 0x80;
[13:45:50.888]        // -> [nReset <= 0x00000080]
[13:45:50.888]      __var canReadPins = 0;
[13:45:50.888]        // -> [canReadPins <= 0x00000000]
[13:45:50.888]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:45:50.890]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:45:50.890]        // -> [canReadPins <= 0x00000001]
[13:45:50.890]    </block>
[13:45:50.890]    <control if="" while="1" timeout="200" info="">
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.890]      // while "1"  (timeout="200")
[13:45:50.890]      // while-condition  =>  TRUE
[13:45:50.894]      // while "1"  (timeout="200")
[13:45:50.894]      // while  =>  TIMEOUT
[13:45:50.894]      // end while "1"
[13:45:50.894]    </control>
[13:45:50.894]    <control if="canReadPins" while="" timeout="0" info="">
[13:45:50.894]      // if-block "canReadPins"
[13:45:50.894]        // =>  TRUE
[13:45:50.894]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:45:50.894]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:45:50.898]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:45:50.898]        // while-condition  =>  FALSE
[13:45:50.898]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:45:50.898]      </control>
[13:45:50.898]      // end if-block "canReadPins"
[13:45:50.898]    </control>
[13:45:50.898]    <control if="!canReadPins" while="" timeout="0" info="">
[13:45:50.898]      // if-block "!canReadPins"
[13:45:50.898]        // =>  FALSE
[13:45:50.898]      // skip if-block "!canReadPins"
[13:45:50.898]    </control>
[13:45:50.898]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:45:50.898]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:45:50.898]        // =>  TRUE
[13:45:50.898]      <block atomic="false" info="">
[13:45:50.898]        WriteAP(0x00, 0x190008);
[13:45:50.902]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:45:50.902]        WriteAP(0xF0, 0x01);
[13:45:50.906]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:45:50.906]      </block>
[13:45:50.906]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:45:50.906]    </control>
[13:45:50.906]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:45:50.906]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:45:50.906]        // =>  FALSE
[13:45:50.906]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:45:50.906]    </control>
[13:45:50.906]    <block atomic="false" info="">
[13:45:50.906]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:45:50.910]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:45:50.910]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:45:50.910]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:45:50.914]      __ap = 0; //lets make sure we reset the access point selection
[13:45:50.914]        // -> [__ap <= 0x00000000]
[13:45:50.914]    </block>
[13:45:50.914]  </sequence>
[13:45:50.914]  
[13:45:50.937]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:45:50.937]  
[13:45:50.937]  <debugvars>
[13:45:50.937]    // Pre-defined
[13:45:50.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:45:50.937]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:45:50.937]    __dp=0x00000000
[13:45:50.941]    __ap=0x00000000
[13:45:50.941]    __traceout=0x00000000      (Trace Disabled)
[13:45:50.941]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:45:50.941]    __FlashAddr=0x00000000
[13:45:50.941]    __FlashLen=0x00000000
[13:45:50.941]    __FlashArg=0x00000000
[13:45:50.941]    __FlashOp=0x00000000
[13:45:50.941]    __Result=0x00000000
[13:45:50.941]  </debugvars>
[13:45:50.941]  
[13:45:50.941]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:45:50.941]    <block atomic="false" info="">
[13:45:50.941]      __var deviceID = 0;
[13:45:50.941]        // -> [deviceID <= 0x00000000]
[13:45:50.941]      __var version = 0;
[13:45:50.941]        // -> [version <= 0x00000000]
[13:45:50.941]      __var partNum = 0;
[13:45:50.941]        // -> [partNum <= 0x00000000]
[13:45:50.941]      __var manuf = 0;
[13:45:50.941]        // -> [manuf <= 0x00000000]
[13:45:50.941]      __var isMSPM0G1X0X_G3X0X = 0;
[13:45:50.941]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:45:50.941]      __var isProduction = 0;
[13:45:50.941]        // -> [isProduction <= 0x00000000]
[13:45:50.941]      __var continueId = 0;
[13:45:50.941]        // -> [continueId <= 0x00000000]
[13:45:50.941]      deviceID =   Read32(0x41C40004);
[13:45:50.950]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:45:50.950]        // -> [deviceID <= 0x2BB8802F]
[13:45:50.950]      version = deviceID >> 28;
[13:45:50.950]        // -> [version <= 0x00000002]
[13:45:50.950]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:45:50.950]        // -> [partNum <= 0x0000BB88]
[13:45:50.950]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:45:50.950]        // -> [manuf <= 0x00000017]
[13:45:50.950]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:45:50.950]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:45:50.950]      isProduction = (version > 0);
[13:45:50.950]        // -> [isProduction <= 0x00000001]
[13:45:50.954]    </block>
[13:45:50.954]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:45:50.954]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:45:50.954]        // =>  FALSE
[13:45:50.954]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:45:50.954]    </control>
[13:45:50.954]    <control if="continueId == 4" while="" timeout="0" info="">
[13:45:50.954]      // if-block "continueId == 4"
[13:45:50.954]        // =>  FALSE
[13:45:50.954]      // skip if-block "continueId == 4"
[13:45:50.955]    </control>
[13:45:50.955]    <control if="!isProduction" while="" timeout="0" info="">
[13:45:50.955]      // if-block "!isProduction"
[13:45:50.955]        // =>  FALSE
[13:45:50.955]      // skip if-block "!isProduction"
[13:45:50.955]    </control>
[13:45:50.955]  </sequence>
[13:45:50.955]  
[13:50:47.078]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:50:47.078]  
[13:50:47.089]  <debugvars>
[13:50:47.089]    // Pre-defined
[13:50:47.089]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:50:47.089]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:50:47.089]    __dp=0x00000000
[13:50:47.089]    __ap=0x00000000
[13:50:47.089]    __traceout=0x00000000      (Trace Disabled)
[13:50:47.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:50:47.089]    __FlashAddr=0x00000000
[13:50:47.089]    __FlashLen=0x00000000
[13:50:47.089]    __FlashArg=0x00000000
[13:50:47.090]    __FlashOp=0x00000000
[13:50:47.090]    __Result=0x00000000
[13:50:47.090]  </debugvars>
[13:50:47.090]  
[13:50:47.090]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:50:47.090]    <block atomic="false" info="">
[13:50:47.090]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:50:47.090]        // -> [isSWJ <= 0x00000001]
[13:50:47.090]      __var hasDormant = __protocol & 0x00020000;
[13:50:47.090]        // -> [hasDormant <= 0x00000000]
[13:50:47.090]      __var protType   = __protocol & 0x0000FFFF;
[13:50:47.090]        // -> [protType <= 0x00000002]
[13:50:47.090]    </block>
[13:50:47.090]    <control if="protType == 1" while="" timeout="0" info="">
[13:50:47.090]      // if-block "protType == 1"
[13:50:47.092]        // =>  FALSE
[13:50:47.092]      // skip if-block "protType == 1"
[13:50:47.092]    </control>
[13:50:47.092]    <control if="protType == 2" while="" timeout="0" info="">
[13:50:47.092]      // if-block "protType == 2"
[13:50:47.092]        // =>  TRUE
[13:50:47.092]      <control if="isSWJ" while="" timeout="0" info="">
[13:50:47.092]        // if-block "isSWJ"
[13:50:47.092]          // =>  TRUE
[13:50:47.092]        <control if="hasDormant" while="" timeout="0" info="">
[13:50:47.092]          // if-block "hasDormant"
[13:50:47.092]            // =>  FALSE
[13:50:47.092]          // skip if-block "hasDormant"
[13:50:47.092]        </control>
[13:50:47.092]        <control if="!hasDormant" while="" timeout="0" info="">
[13:50:47.092]          // if-block "!hasDormant"
[13:50:47.092]            // =>  TRUE
[13:50:47.092]          <block atomic="false" info="">
[13:50:47.092]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:50:47.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:50:47.094]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:50:47.094]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:50:47.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:50:47.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:50:47.106]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:50:47.106]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:50:47.106]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:50:47.110]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:50:47.110]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:50:47.112]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:50:47.112]          </block>
[13:50:47.112]          // end if-block "!hasDormant"
[13:50:47.112]        </control>
[13:50:47.112]        // end if-block "isSWJ"
[13:50:47.112]      </control>
[13:50:47.112]      <control if="!isSWJ" while="" timeout="0" info="">
[13:50:47.112]        // if-block "!isSWJ"
[13:50:47.112]          // =>  FALSE
[13:50:47.112]        // skip if-block "!isSWJ"
[13:50:47.112]      </control>
[13:50:47.112]      <block atomic="false" info="">
[13:50:47.112]        ReadDP(0x0);
[13:50:47.114]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:50:47.114]      </block>
[13:50:47.114]      // end if-block "protType == 2"
[13:50:47.114]    </control>
[13:50:47.114]  </sequence>
[13:50:47.114]  
[13:50:47.118]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:50:47.118]  
[13:50:47.118]  <debugvars>
[13:50:47.118]    // Pre-defined
[13:50:47.118]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:50:47.118]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:50:47.118]    __dp=0x00000000
[13:50:47.118]    __ap=0x00000000
[13:50:47.118]    __traceout=0x00000000      (Trace Disabled)
[13:50:47.118]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:50:47.118]    __FlashAddr=0x00000000
[13:50:47.118]    __FlashLen=0x00000000
[13:50:47.118]    __FlashArg=0x00000000
[13:50:47.118]    __FlashOp=0x00000000
[13:50:47.118]    __Result=0x00000000
[13:50:47.118]  </debugvars>
[13:50:47.118]  
[13:50:47.118]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:50:47.118]    <block atomic="false" info="">
[13:50:47.118]      __var SW_DP_ABORT       = 0x0;
[13:50:47.118]        // -> [SW_DP_ABORT <= 0x00000000]
[13:50:47.118]      __var DP_CTRL_STAT      = 0x4;
[13:50:47.118]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:50:47.118]      __var DP_SELECT         = 0x8;
[13:50:47.122]        // -> [DP_SELECT <= 0x00000008]
[13:50:47.122]      __var powered_down      = 0;
[13:50:47.122]        // -> [powered_down <= 0x00000000]
[13:50:47.122]      WriteDP(DP_SELECT, 0x00000000);
[13:50:47.126]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:50:47.126]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:50:47.128]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:50:47.128]        // -> [powered_down <= 0x00000001]
[13:50:47.128]    </block>
[13:50:47.128]    <control if="powered_down" while="" timeout="0" info="">
[13:50:47.128]      // if-block "powered_down"
[13:50:47.128]        // =>  TRUE
[13:50:47.128]      <block atomic="false" info="">
[13:50:47.128]        Message(0, "Debug/System power-up request sent");
[13:50:47.130]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:50:47.131]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:50:47.131]      </block>
[13:50:47.131]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:50:47.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:50:47.134]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:50:47.134]        // while-condition  =>  FALSE
[13:50:47.134]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:50:47.134]      </control>
[13:50:47.134]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:50:47.134]        // if-block "(__protocol & 0xFFFF) == 1"
[13:50:47.134]          // =>  FALSE
[13:50:47.134]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:50:47.134]      </control>
[13:50:47.134]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:50:47.134]        // if-block "(__protocol & 0xFFFF) == 2"
[13:50:47.134]          // =>  TRUE
[13:50:47.134]        <block atomic="false" info="">
[13:50:47.134]          Message(0, "executing SWD power up");
[13:50:47.134]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:50:47.143]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:50:47.143]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:50:47.143]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:50:47.143]        </block>
[13:50:47.143]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:50:47.143]      </control>
[13:50:47.146]      // end if-block "powered_down"
[13:50:47.146]    </control>
[13:50:47.146]    <block atomic="false" info="">
[13:50:47.146]      __var DEBUG_PORT_VAL    = 0;
[13:50:47.146]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:50:47.146]      __var ACCESS_POINT_VAL  = 0;
[13:50:47.146]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:50:47.146]      __ap = 1; 
[13:50:47.146]        // -> [__ap <= 0x00000001]
[13:50:47.146]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:50:47.154]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:50:47.154]      __ap = 4;
[13:50:47.154]        // -> [__ap <= 0x00000004]
[13:50:47.154]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:50:47.158]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:50:47.158]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:50:47.158]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:50:47.158]    </block>
[13:50:47.158]    <block atomic="false" info="">
[13:50:47.158]      __var nReset = 0x80;
[13:50:47.158]        // -> [nReset <= 0x00000080]
[13:50:47.158]      __var canReadPins = 0;
[13:50:47.158]        // -> [canReadPins <= 0x00000000]
[13:50:47.161]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:50:47.162]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:50:47.162]        // -> [canReadPins <= 0x00000001]
[13:50:47.162]    </block>
[13:50:47.162]    <control if="" while="1" timeout="200" info="">
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.162]      // while "1"  (timeout="200")
[13:50:47.162]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.165]      // while-condition  =>  TRUE
[13:50:47.165]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.169]      // while "1"  (timeout="200")
[13:50:47.169]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.171]      // while "1"  (timeout="200")
[13:50:47.171]      // while-condition  =>  TRUE
[13:50:47.173]      // while "1"  (timeout="200")
[13:50:47.173]      // while  =>  TIMEOUT
[13:50:47.173]      // end while "1"
[13:50:47.173]    </control>
[13:50:47.173]    <control if="canReadPins" while="" timeout="0" info="">
[13:50:47.173]      // if-block "canReadPins"
[13:50:47.173]        // =>  TRUE
[13:50:47.173]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:50:47.173]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:50:47.173]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:50:47.173]        // while-condition  =>  FALSE
[13:50:47.173]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:50:47.173]      </control>
[13:50:47.173]      // end if-block "canReadPins"
[13:50:47.173]    </control>
[13:50:47.173]    <control if="!canReadPins" while="" timeout="0" info="">
[13:50:47.173]      // if-block "!canReadPins"
[13:50:47.173]        // =>  FALSE
[13:50:47.173]      // skip if-block "!canReadPins"
[13:50:47.173]    </control>
[13:50:47.173]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:50:47.173]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:50:47.173]        // =>  TRUE
[13:50:47.177]      <block atomic="false" info="">
[13:50:47.177]        WriteAP(0x00, 0x190008);
[13:50:47.177]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:50:47.177]        WriteAP(0xF0, 0x01);
[13:50:47.184]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:50:47.184]      </block>
[13:50:47.184]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:50:47.184]    </control>
[13:50:47.184]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:50:47.186]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:50:47.186]        // =>  FALSE
[13:50:47.186]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:50:47.186]    </control>
[13:50:47.187]    <block atomic="false" info="">
[13:50:47.187]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:50:47.190]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:50:47.190]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:50:47.190]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:50:47.192]      __ap = 0; //lets make sure we reset the access point selection
[13:50:47.192]        // -> [__ap <= 0x00000000]
[13:50:47.192]    </block>
[13:50:47.192]  </sequence>
[13:50:47.192]  
[13:50:47.220]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:50:47.220]  
[13:50:47.220]  <debugvars>
[13:50:47.220]    // Pre-defined
[13:50:47.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:50:47.220]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:50:47.220]    __dp=0x00000000
[13:50:47.220]    __ap=0x00000000
[13:50:47.220]    __traceout=0x00000000      (Trace Disabled)
[13:50:47.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:50:47.220]    __FlashAddr=0x00000000
[13:50:47.220]    __FlashLen=0x00000000
[13:50:47.220]    __FlashArg=0x00000000
[13:50:47.220]    __FlashOp=0x00000000
[13:50:47.220]    __Result=0x00000000
[13:50:47.222]  </debugvars>
[13:50:47.222]  
[13:50:47.222]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:50:47.222]    <block atomic="false" info="">
[13:50:47.222]      __var deviceID = 0;
[13:50:47.222]        // -> [deviceID <= 0x00000000]
[13:50:47.223]      __var version = 0;
[13:50:47.223]        // -> [version <= 0x00000000]
[13:50:47.223]      __var partNum = 0;
[13:50:47.223]        // -> [partNum <= 0x00000000]
[13:50:47.223]      __var manuf = 0;
[13:50:47.223]        // -> [manuf <= 0x00000000]
[13:50:47.223]      __var isMSPM0G1X0X_G3X0X = 0;
[13:50:47.223]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:50:47.223]      __var isProduction = 0;
[13:50:47.223]        // -> [isProduction <= 0x00000000]
[13:50:47.223]      __var continueId = 0;
[13:50:47.224]        // -> [continueId <= 0x00000000]
[13:50:47.224]      deviceID =   Read32(0x41C40004);
[13:50:47.228]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:50:47.229]        // -> [deviceID <= 0x2BB8802F]
[13:50:47.229]      version = deviceID >> 28;
[13:50:47.229]        // -> [version <= 0x00000002]
[13:50:47.229]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:50:47.229]        // -> [partNum <= 0x0000BB88]
[13:50:47.229]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:50:47.229]        // -> [manuf <= 0x00000017]
[13:50:47.229]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:50:47.229]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:50:47.229]      isProduction = (version > 0);
[13:50:47.229]        // -> [isProduction <= 0x00000001]
[13:50:47.229]    </block>
[13:50:47.230]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:50:47.230]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:50:47.230]        // =>  FALSE
[13:50:47.230]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:50:47.230]    </control>
[13:50:47.230]    <control if="continueId == 4" while="" timeout="0" info="">
[13:50:47.230]      // if-block "continueId == 4"
[13:50:47.230]        // =>  FALSE
[13:50:47.230]      // skip if-block "continueId == 4"
[13:50:47.230]    </control>
[13:50:47.230]    <control if="!isProduction" while="" timeout="0" info="">
[13:50:47.230]      // if-block "!isProduction"
[13:50:47.230]        // =>  FALSE
[13:50:47.230]      // skip if-block "!isProduction"
[13:50:47.230]    </control>
[13:50:47.230]  </sequence>
[13:50:47.232]  
[13:51:26.879]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:51:26.879]  
[13:51:26.889]  <debugvars>
[13:51:26.889]    // Pre-defined
[13:51:26.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:51:26.889]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:51:26.889]    __dp=0x00000000
[13:51:26.889]    __ap=0x00000000
[13:51:26.889]    __traceout=0x00000000      (Trace Disabled)
[13:51:26.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:51:26.889]    __FlashAddr=0x00000000
[13:51:26.889]    __FlashLen=0x00000000
[13:51:26.889]    __FlashArg=0x00000000
[13:51:26.890]    __FlashOp=0x00000000
[13:51:26.890]    __Result=0x00000000
[13:51:26.891]  </debugvars>
[13:51:26.891]  
[13:51:26.891]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:51:26.891]    <block atomic="false" info="">
[13:51:26.891]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:51:26.891]        // -> [isSWJ <= 0x00000001]
[13:51:26.891]      __var hasDormant = __protocol & 0x00020000;
[13:51:26.891]        // -> [hasDormant <= 0x00000000]
[13:51:26.891]      __var protType   = __protocol & 0x0000FFFF;
[13:51:26.891]        // -> [protType <= 0x00000002]
[13:51:26.891]    </block>
[13:51:26.891]    <control if="protType == 1" while="" timeout="0" info="">
[13:51:26.891]      // if-block "protType == 1"
[13:51:26.891]        // =>  FALSE
[13:51:26.891]      // skip if-block "protType == 1"
[13:51:26.891]    </control>
[13:51:26.892]    <control if="protType == 2" while="" timeout="0" info="">
[13:51:26.892]      // if-block "protType == 2"
[13:51:26.892]        // =>  TRUE
[13:51:26.892]      <control if="isSWJ" while="" timeout="0" info="">
[13:51:26.892]        // if-block "isSWJ"
[13:51:26.892]          // =>  TRUE
[13:51:26.892]        <control if="hasDormant" while="" timeout="0" info="">
[13:51:26.892]          // if-block "hasDormant"
[13:51:26.892]            // =>  FALSE
[13:51:26.892]          // skip if-block "hasDormant"
[13:51:26.892]        </control>
[13:51:26.892]        <control if="!hasDormant" while="" timeout="0" info="">
[13:51:26.892]          // if-block "!hasDormant"
[13:51:26.892]            // =>  TRUE
[13:51:26.892]          <block atomic="false" info="">
[13:51:26.892]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:51:26.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:51:26.894]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:51:26.898]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:51:26.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:51:26.898]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:51:26.898]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:51:26.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:51:26.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:51:26.904]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:51:26.904]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:51:26.907]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:51:26.907]          </block>
[13:51:26.907]          // end if-block "!hasDormant"
[13:51:26.907]        </control>
[13:51:26.907]        // end if-block "isSWJ"
[13:51:26.907]      </control>
[13:51:26.907]      <control if="!isSWJ" while="" timeout="0" info="">
[13:51:26.907]        // if-block "!isSWJ"
[13:51:26.907]          // =>  FALSE
[13:51:26.907]        // skip if-block "!isSWJ"
[13:51:26.907]      </control>
[13:51:26.907]      <block atomic="false" info="">
[13:51:26.907]        ReadDP(0x0);
[13:51:26.909]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:51:26.909]      </block>
[13:51:26.909]      // end if-block "protType == 2"
[13:51:26.909]    </control>
[13:51:26.909]  </sequence>
[13:51:26.909]  
[13:51:26.912]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:51:26.912]  
[13:51:26.912]  <debugvars>
[13:51:26.912]    // Pre-defined
[13:51:26.912]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:51:26.912]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:51:26.912]    __dp=0x00000000
[13:51:26.912]    __ap=0x00000000
[13:51:26.912]    __traceout=0x00000000      (Trace Disabled)
[13:51:26.912]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:51:26.914]    __FlashAddr=0x00000000
[13:51:26.914]    __FlashLen=0x00000000
[13:51:26.914]    __FlashArg=0x00000000
[13:51:26.914]    __FlashOp=0x00000000
[13:51:26.914]    __Result=0x00000000
[13:51:26.914]  </debugvars>
[13:51:26.914]  
[13:51:26.914]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:51:26.915]    <block atomic="false" info="">
[13:51:26.915]      __var SW_DP_ABORT       = 0x0;
[13:51:26.915]        // -> [SW_DP_ABORT <= 0x00000000]
[13:51:26.915]      __var DP_CTRL_STAT      = 0x4;
[13:51:26.915]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:51:26.915]      __var DP_SELECT         = 0x8;
[13:51:26.915]        // -> [DP_SELECT <= 0x00000008]
[13:51:26.915]      __var powered_down      = 0;
[13:51:26.916]        // -> [powered_down <= 0x00000000]
[13:51:26.916]      WriteDP(DP_SELECT, 0x00000000);
[13:51:26.919]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:51:26.922]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:51:26.924]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:51:26.924]        // -> [powered_down <= 0x00000001]
[13:51:26.924]    </block>
[13:51:26.924]    <control if="powered_down" while="" timeout="0" info="">
[13:51:26.924]      // if-block "powered_down"
[13:51:26.924]        // =>  TRUE
[13:51:26.924]      <block atomic="false" info="">
[13:51:26.924]        Message(0, "Debug/System power-up request sent");
[13:51:26.926]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:51:26.928]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:51:26.928]      </block>
[13:51:26.928]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:51:26.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:51:26.929]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:51:26.931]        // while-condition  =>  FALSE
[13:51:26.931]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:51:26.931]      </control>
[13:51:26.931]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:51:26.931]        // if-block "(__protocol & 0xFFFF) == 1"
[13:51:26.931]          // =>  FALSE
[13:51:26.931]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:51:26.931]      </control>
[13:51:26.931]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:51:26.931]        // if-block "(__protocol & 0xFFFF) == 2"
[13:51:26.931]          // =>  TRUE
[13:51:26.932]        <block atomic="false" info="">
[13:51:26.932]          Message(0, "executing SWD power up");
[13:51:26.933]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:51:26.935]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:51:26.935]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:51:26.936]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:51:26.936]        </block>
[13:51:26.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:51:26.936]      </control>
[13:51:26.936]      // end if-block "powered_down"
[13:51:26.936]    </control>
[13:51:26.936]    <block atomic="false" info="">
[13:51:26.936]      __var DEBUG_PORT_VAL    = 0;
[13:51:26.936]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:51:26.936]      __var ACCESS_POINT_VAL  = 0;
[13:51:26.936]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:51:26.936]      __ap = 1; 
[13:51:26.936]        // -> [__ap <= 0x00000001]
[13:51:26.936]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:51:26.944]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:51:26.944]      __ap = 4;
[13:51:26.944]        // -> [__ap <= 0x00000004]
[13:51:26.948]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:51:26.948]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:51:26.948]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:51:26.952]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:51:26.952]    </block>
[13:51:26.952]    <block atomic="false" info="">
[13:51:26.952]      __var nReset = 0x80;
[13:51:26.952]        // -> [nReset <= 0x00000080]
[13:51:26.952]      __var canReadPins = 0;
[13:51:26.952]        // -> [canReadPins <= 0x00000000]
[13:51:26.952]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:51:26.957]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:51:26.957]        // -> [canReadPins <= 0x00000001]
[13:51:26.957]    </block>
[13:51:26.957]    <control if="" while="1" timeout="200" info="">
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.957]      // while "1"  (timeout="200")
[13:51:26.957]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.961]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.961]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.961]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.961]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.961]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.961]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.961]      // while-condition  =>  TRUE
[13:51:26.961]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.962]      // while-condition  =>  TRUE
[13:51:26.962]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.965]      // while "1"  (timeout="200")
[13:51:26.965]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.969]      // while-condition  =>  TRUE
[13:51:26.969]      // while "1"  (timeout="200")
[13:51:26.972]      // while-condition  =>  TRUE
[13:51:26.972]      // while "1"  (timeout="200")
[13:51:26.972]      // while  =>  TIMEOUT
[13:51:26.972]      // end while "1"
[13:51:26.972]    </control>
[13:51:26.972]    <control if="canReadPins" while="" timeout="0" info="">
[13:51:26.972]      // if-block "canReadPins"
[13:51:26.972]        // =>  TRUE
[13:51:26.972]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:51:26.972]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:51:26.972]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:51:26.972]        // while-condition  =>  FALSE
[13:51:26.972]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:51:26.972]      </control>
[13:51:26.972]      // end if-block "canReadPins"
[13:51:26.972]    </control>
[13:51:26.972]    <control if="!canReadPins" while="" timeout="0" info="">
[13:51:26.972]      // if-block "!canReadPins"
[13:51:26.972]        // =>  FALSE
[13:51:26.972]      // skip if-block "!canReadPins"
[13:51:26.972]    </control>
[13:51:26.972]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:51:26.972]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:51:26.976]        // =>  TRUE
[13:51:26.976]      <block atomic="false" info="">
[13:51:26.976]        WriteAP(0x00, 0x190008);
[13:51:26.976]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:51:26.976]        WriteAP(0xF0, 0x01);
[13:51:26.980]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:51:26.980]      </block>
[13:51:26.982]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:51:26.982]    </control>
[13:51:26.982]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:51:26.982]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:51:26.982]        // =>  FALSE
[13:51:26.982]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:51:26.982]    </control>
[13:51:26.982]    <block atomic="false" info="">
[13:51:26.982]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:51:26.984]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:51:26.984]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:51:26.984]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:51:26.988]      __ap = 0; //lets make sure we reset the access point selection
[13:51:26.988]        // -> [__ap <= 0x00000000]
[13:51:26.988]    </block>
[13:51:26.988]  </sequence>
[13:51:26.988]  
[13:51:27.021]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:51:27.021]  
[13:51:27.021]  <debugvars>
[13:51:27.022]    // Pre-defined
[13:51:27.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:51:27.022]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:51:27.022]    __dp=0x00000000
[13:51:27.022]    __ap=0x00000000
[13:51:27.022]    __traceout=0x00000000      (Trace Disabled)
[13:51:27.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:51:27.022]    __FlashAddr=0x00000000
[13:51:27.022]    __FlashLen=0x00000000
[13:51:27.022]    __FlashArg=0x00000000
[13:51:27.022]    __FlashOp=0x00000000
[13:51:27.022]    __Result=0x00000000
[13:51:27.022]  </debugvars>
[13:51:27.022]  
[13:51:27.022]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:51:27.022]    <block atomic="false" info="">
[13:51:27.022]      __var deviceID = 0;
[13:51:27.022]        // -> [deviceID <= 0x00000000]
[13:51:27.022]      __var version = 0;
[13:51:27.022]        // -> [version <= 0x00000000]
[13:51:27.022]      __var partNum = 0;
[13:51:27.022]        // -> [partNum <= 0x00000000]
[13:51:27.022]      __var manuf = 0;
[13:51:27.022]        // -> [manuf <= 0x00000000]
[13:51:27.022]      __var isMSPM0G1X0X_G3X0X = 0;
[13:51:27.022]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:51:27.025]      __var isProduction = 0;
[13:51:27.025]        // -> [isProduction <= 0x00000000]
[13:51:27.025]      __var continueId = 0;
[13:51:27.025]        // -> [continueId <= 0x00000000]
[13:51:27.025]      deviceID =   Read32(0x41C40004);
[13:51:27.029]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:51:27.029]        // -> [deviceID <= 0x2BB8802F]
[13:51:27.029]      version = deviceID >> 28;
[13:51:27.029]        // -> [version <= 0x00000002]
[13:51:27.029]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:51:27.029]        // -> [partNum <= 0x0000BB88]
[13:51:27.029]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:51:27.029]        // -> [manuf <= 0x00000017]
[13:51:27.029]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:51:27.029]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:51:27.029]      isProduction = (version > 0);
[13:51:27.029]        // -> [isProduction <= 0x00000001]
[13:51:27.029]    </block>
[13:51:27.029]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:51:27.029]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:51:27.029]        // =>  FALSE
[13:51:27.029]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:51:27.029]    </control>
[13:51:27.029]    <control if="continueId == 4" while="" timeout="0" info="">
[13:51:27.029]      // if-block "continueId == 4"
[13:51:27.029]        // =>  FALSE
[13:51:27.029]      // skip if-block "continueId == 4"
[13:51:27.029]    </control>
[13:51:27.029]    <control if="!isProduction" while="" timeout="0" info="">
[13:51:27.032]      // if-block "!isProduction"
[13:51:27.032]        // =>  FALSE
[13:51:27.032]      // skip if-block "!isProduction"
[13:51:27.032]    </control>
[13:51:27.032]  </sequence>
[13:51:27.032]  
[13:52:27.317]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:52:27.317]  
[13:52:27.328]  <debugvars>
[13:52:27.328]    // Pre-defined
[13:52:27.328]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:52:27.328]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:52:27.328]    __dp=0x00000000
[13:52:27.329]    __ap=0x00000000
[13:52:27.329]    __traceout=0x00000000      (Trace Disabled)
[13:52:27.329]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:52:27.329]    __FlashAddr=0x00000000
[13:52:27.329]    __FlashLen=0x00000000
[13:52:27.329]    __FlashArg=0x00000000
[13:52:27.329]    __FlashOp=0x00000000
[13:52:27.329]    __Result=0x00000000
[13:52:27.329]  </debugvars>
[13:52:27.329]  
[13:52:27.329]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:52:27.329]    <block atomic="false" info="">
[13:52:27.329]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:52:27.329]        // -> [isSWJ <= 0x00000001]
[13:52:27.329]      __var hasDormant = __protocol & 0x00020000;
[13:52:27.329]        // -> [hasDormant <= 0x00000000]
[13:52:27.329]      __var protType   = __protocol & 0x0000FFFF;
[13:52:27.329]        // -> [protType <= 0x00000002]
[13:52:27.329]    </block>
[13:52:27.329]    <control if="protType == 1" while="" timeout="0" info="">
[13:52:27.329]      // if-block "protType == 1"
[13:52:27.329]        // =>  FALSE
[13:52:27.329]      // skip if-block "protType == 1"
[13:52:27.329]    </control>
[13:52:27.329]    <control if="protType == 2" while="" timeout="0" info="">
[13:52:27.329]      // if-block "protType == 2"
[13:52:27.329]        // =>  TRUE
[13:52:27.329]      <control if="isSWJ" while="" timeout="0" info="">
[13:52:27.329]        // if-block "isSWJ"
[13:52:27.329]          // =>  TRUE
[13:52:27.329]        <control if="hasDormant" while="" timeout="0" info="">
[13:52:27.329]          // if-block "hasDormant"
[13:52:27.329]            // =>  FALSE
[13:52:27.329]          // skip if-block "hasDormant"
[13:52:27.329]        </control>
[13:52:27.329]        <control if="!hasDormant" while="" timeout="0" info="">
[13:52:27.329]          // if-block "!hasDormant"
[13:52:27.329]            // =>  TRUE
[13:52:27.329]          <block atomic="false" info="">
[13:52:27.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:52:27.334]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:52:27.334]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:52:27.336]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:52:27.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:52:27.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:52:27.336]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:52:27.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:52:27.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:52:27.338]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:52:27.338]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:52:27.342]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:52:27.342]          </block>
[13:52:27.342]          // end if-block "!hasDormant"
[13:52:27.342]        </control>
[13:52:27.342]        // end if-block "isSWJ"
[13:52:27.342]      </control>
[13:52:27.344]      <control if="!isSWJ" while="" timeout="0" info="">
[13:52:27.344]        // if-block "!isSWJ"
[13:52:27.344]          // =>  FALSE
[13:52:27.344]        // skip if-block "!isSWJ"
[13:52:27.344]      </control>
[13:52:27.344]      <block atomic="false" info="">
[13:52:27.344]        ReadDP(0x0);
[13:52:27.344]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:52:27.344]      </block>
[13:52:27.344]      // end if-block "protType == 2"
[13:52:27.344]    </control>
[13:52:27.346]  </sequence>
[13:52:27.346]  
[13:52:27.350]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:52:27.350]  
[13:52:27.350]  <debugvars>
[13:52:27.350]    // Pre-defined
[13:52:27.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:52:27.354]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:52:27.354]    __dp=0x00000000
[13:52:27.354]    __ap=0x00000000
[13:52:27.354]    __traceout=0x00000000      (Trace Disabled)
[13:52:27.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:52:27.354]    __FlashAddr=0x00000000
[13:52:27.354]    __FlashLen=0x00000000
[13:52:27.354]    __FlashArg=0x00000000
[13:52:27.354]    __FlashOp=0x00000000
[13:52:27.354]    __Result=0x00000000
[13:52:27.354]  </debugvars>
[13:52:27.354]  
[13:52:27.354]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:52:27.354]    <block atomic="false" info="">
[13:52:27.354]      __var SW_DP_ABORT       = 0x0;
[13:52:27.354]        // -> [SW_DP_ABORT <= 0x00000000]
[13:52:27.354]      __var DP_CTRL_STAT      = 0x4;
[13:52:27.354]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:52:27.354]      __var DP_SELECT         = 0x8;
[13:52:27.354]        // -> [DP_SELECT <= 0x00000008]
[13:52:27.354]      __var powered_down      = 0;
[13:52:27.354]        // -> [powered_down <= 0x00000000]
[13:52:27.354]      WriteDP(DP_SELECT, 0x00000000);
[13:52:27.358]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:52:27.358]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:52:27.362]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:52:27.362]        // -> [powered_down <= 0x00000001]
[13:52:27.362]    </block>
[13:52:27.362]    <control if="powered_down" while="" timeout="0" info="">
[13:52:27.362]      // if-block "powered_down"
[13:52:27.362]        // =>  TRUE
[13:52:27.362]      <block atomic="false" info="">
[13:52:27.362]        Message(0, "Debug/System power-up request sent");
[13:52:27.364]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:52:27.366]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:52:27.366]      </block>
[13:52:27.366]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:52:27.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:52:27.366]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:52:27.366]        // while-condition  =>  FALSE
[13:52:27.366]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:52:27.366]      </control>
[13:52:27.366]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:52:27.366]        // if-block "(__protocol & 0xFFFF) == 1"
[13:52:27.366]          // =>  FALSE
[13:52:27.370]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:52:27.370]      </control>
[13:52:27.370]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:52:27.370]        // if-block "(__protocol & 0xFFFF) == 2"
[13:52:27.370]          // =>  TRUE
[13:52:27.370]        <block atomic="false" info="">
[13:52:27.370]          Message(0, "executing SWD power up");
[13:52:27.370]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:52:27.374]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:52:27.374]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:52:27.382]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:52:27.382]        </block>
[13:52:27.382]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:52:27.382]      </control>
[13:52:27.382]      // end if-block "powered_down"
[13:52:27.382]    </control>
[13:52:27.382]    <block atomic="false" info="">
[13:52:27.382]      __var DEBUG_PORT_VAL    = 0;
[13:52:27.382]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:52:27.382]      __var ACCESS_POINT_VAL  = 0;
[13:52:27.382]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:52:27.382]      __ap = 1; 
[13:52:27.382]        // -> [__ap <= 0x00000001]
[13:52:27.382]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:52:27.397]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:52:27.397]      __ap = 4;
[13:52:27.397]        // -> [__ap <= 0x00000004]
[13:52:27.397]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:52:27.403]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:52:27.403]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:52:27.403]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:52:27.406]    </block>
[13:52:27.406]    <block atomic="false" info="">
[13:52:27.406]      __var nReset = 0x80;
[13:52:27.406]        // -> [nReset <= 0x00000080]
[13:52:27.406]      __var canReadPins = 0;
[13:52:27.406]        // -> [canReadPins <= 0x00000000]
[13:52:27.406]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:52:27.410]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:52:27.410]        // -> [canReadPins <= 0x00000001]
[13:52:27.410]    </block>
[13:52:27.410]    <control if="" while="1" timeout="200" info="">
[13:52:27.410]      // while "1"  (timeout="200")
[13:52:27.410]      // while-condition  =>  TRUE
[13:52:27.410]      // while "1"  (timeout="200")
[13:52:27.410]      // while-condition  =>  TRUE
[13:52:27.414]      // while "1"  (timeout="200")
[13:52:27.414]      // while-condition  =>  TRUE
[13:52:27.414]      // while "1"  (timeout="200")
[13:52:27.414]      // while-condition  =>  TRUE
[13:52:27.414]      // while "1"  (timeout="200")
[13:52:27.414]      // while-condition  =>  TRUE
[13:52:27.414]      // while "1"  (timeout="200")
[13:52:27.414]      // while-condition  =>  TRUE
[13:52:27.414]      // while "1"  (timeout="200")
[13:52:27.414]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.415]      // while "1"  (timeout="200")
[13:52:27.415]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.418]      // while-condition  =>  TRUE
[13:52:27.418]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.422]      // while-condition  =>  TRUE
[13:52:27.422]      // while "1"  (timeout="200")
[13:52:27.424]      // while-condition  =>  TRUE
[13:52:27.424]      // while "1"  (timeout="200")
[13:52:27.424]      // while  =>  TIMEOUT
[13:52:27.424]      // end while "1"
[13:52:27.424]    </control>
[13:52:27.424]    <control if="canReadPins" while="" timeout="0" info="">
[13:52:27.424]      // if-block "canReadPins"
[13:52:27.424]        // =>  TRUE
[13:52:27.424]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:52:27.424]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:52:27.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:52:27.427]        // while-condition  =>  FALSE
[13:52:27.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:52:27.427]      </control>
[13:52:27.428]      // end if-block "canReadPins"
[13:52:27.428]    </control>
[13:52:27.428]    <control if="!canReadPins" while="" timeout="0" info="">
[13:52:27.428]      // if-block "!canReadPins"
[13:52:27.428]        // =>  FALSE
[13:52:27.428]      // skip if-block "!canReadPins"
[13:52:27.428]    </control>
[13:52:27.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:52:27.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:52:27.428]        // =>  TRUE
[13:52:27.428]      <block atomic="false" info="">
[13:52:27.428]        WriteAP(0x00, 0x190008);
[13:52:27.431]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:52:27.431]        WriteAP(0xF0, 0x01);
[13:52:27.436]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:52:27.436]      </block>
[13:52:27.436]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:52:27.436]    </control>
[13:52:27.436]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:52:27.436]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:52:27.436]        // =>  FALSE
[13:52:27.436]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:52:27.436]    </control>
[13:52:27.436]    <block atomic="false" info="">
[13:52:27.436]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:52:27.441]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:52:27.441]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:52:27.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:52:27.442]      __ap = 0; //lets make sure we reset the access point selection
[13:52:27.442]        // -> [__ap <= 0x00000000]
[13:52:27.442]    </block>
[13:52:27.442]  </sequence>
[13:52:27.442]  
[13:52:27.478]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:52:27.478]  
[13:52:27.478]  <debugvars>
[13:52:27.478]    // Pre-defined
[13:52:27.478]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:52:27.478]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:52:27.478]    __dp=0x00000000
[13:52:27.478]    __ap=0x00000000
[13:52:27.478]    __traceout=0x00000000      (Trace Disabled)
[13:52:27.478]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:52:27.478]    __FlashAddr=0x00000000
[13:52:27.478]    __FlashLen=0x00000000
[13:52:27.480]    __FlashArg=0x00000000
[13:52:27.480]    __FlashOp=0x00000000
[13:52:27.480]    __Result=0x00000000
[13:52:27.480]  </debugvars>
[13:52:27.480]  
[13:52:27.480]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:52:27.480]    <block atomic="false" info="">
[13:52:27.480]      __var deviceID = 0;
[13:52:27.480]        // -> [deviceID <= 0x00000000]
[13:52:27.480]      __var version = 0;
[13:52:27.480]        // -> [version <= 0x00000000]
[13:52:27.480]      __var partNum = 0;
[13:52:27.480]        // -> [partNum <= 0x00000000]
[13:52:27.480]      __var manuf = 0;
[13:52:27.480]        // -> [manuf <= 0x00000000]
[13:52:27.480]      __var isMSPM0G1X0X_G3X0X = 0;
[13:52:27.480]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:52:27.480]      __var isProduction = 0;
[13:52:27.480]        // -> [isProduction <= 0x00000000]
[13:52:27.480]      __var continueId = 0;
[13:52:27.480]        // -> [continueId <= 0x00000000]
[13:52:27.480]      deviceID =   Read32(0x41C40004);
[13:52:27.485]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:52:27.485]        // -> [deviceID <= 0x2BB8802F]
[13:52:27.485]      version = deviceID >> 28;
[13:52:27.485]        // -> [version <= 0x00000002]
[13:52:27.485]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:52:27.485]        // -> [partNum <= 0x0000BB88]
[13:52:27.485]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:52:27.488]        // -> [manuf <= 0x00000017]
[13:52:27.488]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:52:27.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:52:27.488]      isProduction = (version > 0);
[13:52:27.488]        // -> [isProduction <= 0x00000001]
[13:52:27.488]    </block>
[13:52:27.488]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:52:27.488]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:52:27.488]        // =>  FALSE
[13:52:27.488]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:52:27.488]    </control>
[13:52:27.488]    <control if="continueId == 4" while="" timeout="0" info="">
[13:52:27.488]      // if-block "continueId == 4"
[13:52:27.488]        // =>  FALSE
[13:52:27.488]      // skip if-block "continueId == 4"
[13:52:27.488]    </control>
[13:52:27.488]    <control if="!isProduction" while="" timeout="0" info="">
[13:52:27.488]      // if-block "!isProduction"
[13:52:27.488]        // =>  FALSE
[13:52:27.488]      // skip if-block "!isProduction"
[13:52:27.488]    </control>
[13:52:27.488]  </sequence>
[13:52:27.488]  
[13:54:30.088]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:54:30.088]  
[13:54:30.097]  <debugvars>
[13:54:30.097]    // Pre-defined
[13:54:30.097]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:54:30.097]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:54:30.097]    __dp=0x00000000
[13:54:30.097]    __ap=0x00000000
[13:54:30.097]    __traceout=0x00000000      (Trace Disabled)
[13:54:30.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:54:30.097]    __FlashAddr=0x00000000
[13:54:30.097]    __FlashLen=0x00000000
[13:54:30.097]    __FlashArg=0x00000000
[13:54:30.097]    __FlashOp=0x00000000
[13:54:30.097]    __Result=0x00000000
[13:54:30.097]  </debugvars>
[13:54:30.097]  
[13:54:30.097]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:54:30.097]    <block atomic="false" info="">
[13:54:30.097]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:54:30.097]        // -> [isSWJ <= 0x00000001]
[13:54:30.097]      __var hasDormant = __protocol & 0x00020000;
[13:54:30.097]        // -> [hasDormant <= 0x00000000]
[13:54:30.097]      __var protType   = __protocol & 0x0000FFFF;
[13:54:30.097]        // -> [protType <= 0x00000002]
[13:54:30.097]    </block>
[13:54:30.097]    <control if="protType == 1" while="" timeout="0" info="">
[13:54:30.097]      // if-block "protType == 1"
[13:54:30.097]        // =>  FALSE
[13:54:30.100]      // skip if-block "protType == 1"
[13:54:30.100]    </control>
[13:54:30.100]    <control if="protType == 2" while="" timeout="0" info="">
[13:54:30.100]      // if-block "protType == 2"
[13:54:30.100]        // =>  TRUE
[13:54:30.100]      <control if="isSWJ" while="" timeout="0" info="">
[13:54:30.100]        // if-block "isSWJ"
[13:54:30.100]          // =>  TRUE
[13:54:30.100]        <control if="hasDormant" while="" timeout="0" info="">
[13:54:30.100]          // if-block "hasDormant"
[13:54:30.100]            // =>  FALSE
[13:54:30.100]          // skip if-block "hasDormant"
[13:54:30.100]        </control>
[13:54:30.100]        <control if="!hasDormant" while="" timeout="0" info="">
[13:54:30.100]          // if-block "!hasDormant"
[13:54:30.100]            // =>  TRUE
[13:54:30.100]          <block atomic="false" info="">
[13:54:30.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:54:30.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:54:30.104]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:54:30.106]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:54:30.106]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:54:30.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:54:30.108]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:54:30.112]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:54:30.112]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:54:30.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:54:30.116]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:54:30.116]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:54:30.116]          </block>
[13:54:30.116]          // end if-block "!hasDormant"
[13:54:30.116]        </control>
[13:54:30.116]        // end if-block "isSWJ"
[13:54:30.116]      </control>
[13:54:30.116]      <control if="!isSWJ" while="" timeout="0" info="">
[13:54:30.116]        // if-block "!isSWJ"
[13:54:30.116]          // =>  FALSE
[13:54:30.116]        // skip if-block "!isSWJ"
[13:54:30.116]      </control>
[13:54:30.120]      <block atomic="false" info="">
[13:54:30.120]        ReadDP(0x0);
[13:54:30.122]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:54:30.122]      </block>
[13:54:30.122]      // end if-block "protType == 2"
[13:54:30.122]    </control>
[13:54:30.122]  </sequence>
[13:54:30.122]  
[13:54:30.126]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:54:30.126]  
[13:54:30.126]  <debugvars>
[13:54:30.126]    // Pre-defined
[13:54:30.126]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:54:30.126]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:54:30.129]    __dp=0x00000000
[13:54:30.129]    __ap=0x00000000
[13:54:30.129]    __traceout=0x00000000      (Trace Disabled)
[13:54:30.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:54:30.129]    __FlashAddr=0x00000000
[13:54:30.129]    __FlashLen=0x00000000
[13:54:30.129]    __FlashArg=0x00000000
[13:54:30.129]    __FlashOp=0x00000000
[13:54:30.129]    __Result=0x00000000
[13:54:30.129]  </debugvars>
[13:54:30.129]  
[13:54:30.129]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:54:30.129]    <block atomic="false" info="">
[13:54:30.129]      __var SW_DP_ABORT       = 0x0;
[13:54:30.129]        // -> [SW_DP_ABORT <= 0x00000000]
[13:54:30.129]      __var DP_CTRL_STAT      = 0x4;
[13:54:30.129]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:54:30.129]      __var DP_SELECT         = 0x8;
[13:54:30.129]        // -> [DP_SELECT <= 0x00000008]
[13:54:30.129]      __var powered_down      = 0;
[13:54:30.129]        // -> [powered_down <= 0x00000000]
[13:54:30.129]      WriteDP(DP_SELECT, 0x00000000);
[13:54:30.137]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:54:30.137]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:54:30.141]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:54:30.141]        // -> [powered_down <= 0x00000001]
[13:54:30.141]    </block>
[13:54:30.141]    <control if="powered_down" while="" timeout="0" info="">
[13:54:30.141]      // if-block "powered_down"
[13:54:30.141]        // =>  TRUE
[13:54:30.141]      <block atomic="false" info="">
[13:54:30.141]        Message(0, "Debug/System power-up request sent");
[13:54:30.141]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:54:30.146]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:54:30.146]      </block>
[13:54:30.146]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:54:30.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:54:30.148]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:54:30.148]        // while-condition  =>  FALSE
[13:54:30.148]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:54:30.148]      </control>
[13:54:30.148]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:54:30.148]        // if-block "(__protocol & 0xFFFF) == 1"
[13:54:30.148]          // =>  FALSE
[13:54:30.148]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:54:30.150]      </control>
[13:54:30.150]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:54:30.150]        // if-block "(__protocol & 0xFFFF) == 2"
[13:54:30.150]          // =>  TRUE
[13:54:30.150]        <block atomic="false" info="">
[13:54:30.150]          Message(0, "executing SWD power up");
[13:54:30.150]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:54:30.156]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:54:30.156]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:54:30.159]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:54:30.159]        </block>
[13:54:30.159]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:54:30.159]      </control>
[13:54:30.159]      // end if-block "powered_down"
[13:54:30.159]    </control>
[13:54:30.159]    <block atomic="false" info="">
[13:54:30.159]      __var DEBUG_PORT_VAL    = 0;
[13:54:30.159]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:54:30.159]      __var ACCESS_POINT_VAL  = 0;
[13:54:30.159]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:54:30.161]      __ap = 1; 
[13:54:30.161]        // -> [__ap <= 0x00000001]
[13:54:30.161]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:54:30.163]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:54:30.163]      __ap = 4;
[13:54:30.163]        // -> [__ap <= 0x00000004]
[13:54:30.163]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:54:30.166]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:54:30.166]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:54:30.166]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:54:30.166]    </block>
[13:54:30.166]    <block atomic="false" info="">
[13:54:30.166]      __var nReset = 0x80;
[13:54:30.166]        // -> [nReset <= 0x00000080]
[13:54:30.166]      __var canReadPins = 0;
[13:54:30.166]        // -> [canReadPins <= 0x00000000]
[13:54:30.166]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:54:30.171]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:54:30.171]        // -> [canReadPins <= 0x00000001]
[13:54:30.171]    </block>
[13:54:30.171]    <control if="" while="1" timeout="200" info="">
[13:54:30.171]      // while "1"  (timeout="200")
[13:54:30.171]      // while-condition  =>  TRUE
[13:54:30.171]      // while "1"  (timeout="200")
[13:54:30.171]      // while-condition  =>  TRUE
[13:54:30.171]      // while "1"  (timeout="200")
[13:54:30.171]      // while-condition  =>  TRUE
[13:54:30.171]      // while "1"  (timeout="200")
[13:54:30.171]      // while-condition  =>  TRUE
[13:54:30.171]      // while "1"  (timeout="200")
[13:54:30.173]      // while-condition  =>  TRUE
[13:54:30.173]      // while "1"  (timeout="200")
[13:54:30.173]      // while  =>  TIMEOUT
[13:54:30.173]      // end while "1"
[13:54:30.173]    </control>
[13:54:30.173]    <control if="canReadPins" while="" timeout="0" info="">
[13:54:30.173]      // if-block "canReadPins"
[13:54:30.173]        // =>  TRUE
[13:54:30.174]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:54:30.174]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:54:30.178]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:54:30.178]        // while-condition  =>  FALSE
[13:54:30.178]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:54:30.178]      </control>
[13:54:30.178]      // end if-block "canReadPins"
[13:54:30.178]    </control>
[13:54:30.178]    <control if="!canReadPins" while="" timeout="0" info="">
[13:54:30.178]      // if-block "!canReadPins"
[13:54:30.178]        // =>  FALSE
[13:54:30.178]      // skip if-block "!canReadPins"
[13:54:30.178]    </control>
[13:54:30.178]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:54:30.178]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:54:30.178]        // =>  TRUE
[13:54:30.178]      <block atomic="false" info="">
[13:54:30.181]        WriteAP(0x00, 0x190008);
[13:54:30.186]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:54:30.190]        WriteAP(0xF0, 0x01);
[13:54:30.190]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:54:30.194]      </block>
[13:54:30.194]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:54:30.194]    </control>
[13:54:30.194]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:54:30.194]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:54:30.194]        // =>  FALSE
[13:54:30.194]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:54:30.194]    </control>
[13:54:30.194]    <block atomic="false" info="">
[13:54:30.194]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:54:30.210]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:54:30.210]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:54:30.210]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:54:30.210]      __ap = 0; //lets make sure we reset the access point selection
[13:54:30.210]        // -> [__ap <= 0x00000000]
[13:54:30.210]    </block>
[13:54:30.210]  </sequence>
[13:54:30.210]  
[13:54:30.243]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:54:30.243]  
[13:54:30.243]  <debugvars>
[13:54:30.243]    // Pre-defined
[13:54:30.243]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:54:30.243]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:54:30.243]    __dp=0x00000000
[13:54:30.243]    __ap=0x00000000
[13:54:30.243]    __traceout=0x00000000      (Trace Disabled)
[13:54:30.243]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:54:30.243]    __FlashAddr=0x00000000
[13:54:30.243]    __FlashLen=0x00000000
[13:54:30.243]    __FlashArg=0x00000000
[13:54:30.243]    __FlashOp=0x00000000
[13:54:30.243]    __Result=0x00000000
[13:54:30.243]  </debugvars>
[13:54:30.243]  
[13:54:30.243]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:54:30.243]    <block atomic="false" info="">
[13:54:30.243]      __var deviceID = 0;
[13:54:30.243]        // -> [deviceID <= 0x00000000]
[13:54:30.243]      __var version = 0;
[13:54:30.246]        // -> [version <= 0x00000000]
[13:54:30.246]      __var partNum = 0;
[13:54:30.246]        // -> [partNum <= 0x00000000]
[13:54:30.246]      __var manuf = 0;
[13:54:30.246]        // -> [manuf <= 0x00000000]
[13:54:30.246]      __var isMSPM0G1X0X_G3X0X = 0;
[13:54:30.246]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:54:30.246]      __var isProduction = 0;
[13:54:30.246]        // -> [isProduction <= 0x00000000]
[13:54:30.246]      __var continueId = 0;
[13:54:30.246]        // -> [continueId <= 0x00000000]
[13:54:30.246]      deviceID =   Read32(0x41C40004);
[13:54:30.250]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:54:30.250]        // -> [deviceID <= 0x2BB8802F]
[13:54:30.250]      version = deviceID >> 28;
[13:54:30.250]        // -> [version <= 0x00000002]
[13:54:30.250]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:54:30.250]        // -> [partNum <= 0x0000BB88]
[13:54:30.250]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:54:30.250]        // -> [manuf <= 0x00000017]
[13:54:30.250]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:54:30.250]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:54:30.250]      isProduction = (version > 0);
[13:54:30.250]        // -> [isProduction <= 0x00000001]
[13:54:30.250]    </block>
[13:54:30.250]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:54:30.250]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:54:30.250]        // =>  FALSE
[13:54:30.250]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:54:30.250]    </control>
[13:54:30.250]    <control if="continueId == 4" while="" timeout="0" info="">
[13:54:30.250]      // if-block "continueId == 4"
[13:54:30.250]        // =>  FALSE
[13:54:30.250]      // skip if-block "continueId == 4"
[13:54:30.250]    </control>
[13:54:30.250]    <control if="!isProduction" while="" timeout="0" info="">
[13:54:30.250]      // if-block "!isProduction"
[13:54:30.254]        // =>  FALSE
[13:54:30.254]      // skip if-block "!isProduction"
[13:54:30.254]    </control>
[13:54:30.254]  </sequence>
[13:54:30.254]  
[13:58:15.577]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:58:15.577]  
[13:58:15.586]  <debugvars>
[13:58:15.586]    // Pre-defined
[13:58:15.586]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:58:15.586]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:58:15.586]    __dp=0x00000000
[13:58:15.586]    __ap=0x00000000
[13:58:15.586]    __traceout=0x00000000      (Trace Disabled)
[13:58:15.586]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:58:15.586]    __FlashAddr=0x00000000
[13:58:15.586]    __FlashLen=0x00000000
[13:58:15.586]    __FlashArg=0x00000000
[13:58:15.586]    __FlashOp=0x00000000
[13:58:15.586]    __Result=0x00000000
[13:58:15.586]  </debugvars>
[13:58:15.586]  
[13:58:15.586]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:58:15.586]    <block atomic="false" info="">
[13:58:15.586]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:58:15.586]        // -> [isSWJ <= 0x00000001]
[13:58:15.586]      __var hasDormant = __protocol & 0x00020000;
[13:58:15.586]        // -> [hasDormant <= 0x00000000]
[13:58:15.586]      __var protType   = __protocol & 0x0000FFFF;
[13:58:15.586]        // -> [protType <= 0x00000002]
[13:58:15.586]    </block>
[13:58:15.586]    <control if="protType == 1" while="" timeout="0" info="">
[13:58:15.586]      // if-block "protType == 1"
[13:58:15.589]        // =>  FALSE
[13:58:15.589]      // skip if-block "protType == 1"
[13:58:15.589]    </control>
[13:58:15.589]    <control if="protType == 2" while="" timeout="0" info="">
[13:58:15.589]      // if-block "protType == 2"
[13:58:15.589]        // =>  TRUE
[13:58:15.589]      <control if="isSWJ" while="" timeout="0" info="">
[13:58:15.589]        // if-block "isSWJ"
[13:58:15.589]          // =>  TRUE
[13:58:15.589]        <control if="hasDormant" while="" timeout="0" info="">
[13:58:15.589]          // if-block "hasDormant"
[13:58:15.589]            // =>  FALSE
[13:58:15.589]          // skip if-block "hasDormant"
[13:58:15.589]        </control>
[13:58:15.589]        <control if="!hasDormant" while="" timeout="0" info="">
[13:58:15.589]          // if-block "!hasDormant"
[13:58:15.591]            // =>  TRUE
[13:58:15.591]          <block atomic="false" info="">
[13:58:15.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:58:15.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:58:15.591]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:58:15.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:58:15.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:58:15.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:58:15.593]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:58:15.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:58:15.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:58:15.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:58:15.597]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:58:15.601]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:58:15.601]          </block>
[13:58:15.601]          // end if-block "!hasDormant"
[13:58:15.601]        </control>
[13:58:15.601]        // end if-block "isSWJ"
[13:58:15.601]      </control>
[13:58:15.601]      <control if="!isSWJ" while="" timeout="0" info="">
[13:58:15.601]        // if-block "!isSWJ"
[13:58:15.601]          // =>  FALSE
[13:58:15.601]        // skip if-block "!isSWJ"
[13:58:15.601]      </control>
[13:58:15.601]      <block atomic="false" info="">
[13:58:15.601]        ReadDP(0x0);
[13:58:15.601]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:58:15.601]      </block>
[13:58:15.601]      // end if-block "protType == 2"
[13:58:15.601]    </control>
[13:58:15.601]  </sequence>
[13:58:15.601]  
[13:58:15.609]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:58:15.609]  
[13:58:15.609]  <debugvars>
[13:58:15.609]    // Pre-defined
[13:58:15.609]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:58:15.609]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:58:15.609]    __dp=0x00000000
[13:58:15.609]    __ap=0x00000000
[13:58:15.609]    __traceout=0x00000000      (Trace Disabled)
[13:58:15.609]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:58:15.609]    __FlashAddr=0x00000000
[13:58:15.609]    __FlashLen=0x00000000
[13:58:15.609]    __FlashArg=0x00000000
[13:58:15.609]    __FlashOp=0x00000000
[13:58:15.609]    __Result=0x00000000
[13:58:15.609]  </debugvars>
[13:58:15.609]  
[13:58:15.609]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:58:15.609]    <block atomic="false" info="">
[13:58:15.609]      __var SW_DP_ABORT       = 0x0;
[13:58:15.609]        // -> [SW_DP_ABORT <= 0x00000000]
[13:58:15.611]      __var DP_CTRL_STAT      = 0x4;
[13:58:15.611]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:58:15.611]      __var DP_SELECT         = 0x8;
[13:58:15.611]        // -> [DP_SELECT <= 0x00000008]
[13:58:15.611]      __var powered_down      = 0;
[13:58:15.611]        // -> [powered_down <= 0x00000000]
[13:58:15.611]      WriteDP(DP_SELECT, 0x00000000);
[13:58:15.613]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:58:15.613]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:58:15.614]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:58:15.614]        // -> [powered_down <= 0x00000001]
[13:58:15.614]    </block>
[13:58:15.614]    <control if="powered_down" while="" timeout="0" info="">
[13:58:15.614]      // if-block "powered_down"
[13:58:15.614]        // =>  TRUE
[13:58:15.614]      <block atomic="false" info="">
[13:58:15.614]        Message(0, "Debug/System power-up request sent");
[13:58:15.616]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:58:15.617]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:58:15.617]      </block>
[13:58:15.617]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:58:15.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:58:15.619]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:58:15.619]        // while-condition  =>  FALSE
[13:58:15.619]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:58:15.619]      </control>
[13:58:15.619]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:58:15.619]        // if-block "(__protocol & 0xFFFF) == 1"
[13:58:15.619]          // =>  FALSE
[13:58:15.619]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:58:15.619]      </control>
[13:58:15.619]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:58:15.621]        // if-block "(__protocol & 0xFFFF) == 2"
[13:58:15.621]          // =>  TRUE
[13:58:15.621]        <block atomic="false" info="">
[13:58:15.621]          Message(0, "executing SWD power up");
[13:58:15.622]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:58:15.624]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:58:15.624]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:58:15.626]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:58:15.626]        </block>
[13:58:15.626]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:58:15.626]      </control>
[13:58:15.626]      // end if-block "powered_down"
[13:58:15.626]    </control>
[13:58:15.627]    <block atomic="false" info="">
[13:58:15.627]      __var DEBUG_PORT_VAL    = 0;
[13:58:15.627]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:58:15.627]      __var ACCESS_POINT_VAL  = 0;
[13:58:15.627]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:58:15.627]      __ap = 1; 
[13:58:15.627]        // -> [__ap <= 0x00000001]
[13:58:15.627]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:58:15.633]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:58:15.633]      __ap = 4;
[13:58:15.633]        // -> [__ap <= 0x00000004]
[13:58:15.633]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:58:15.645]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:58:15.645]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:58:15.645]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:58:15.645]    </block>
[13:58:15.645]    <block atomic="false" info="">
[13:58:15.645]      __var nReset = 0x80;
[13:58:15.645]        // -> [nReset <= 0x00000080]
[13:58:15.645]      __var canReadPins = 0;
[13:58:15.645]        // -> [canReadPins <= 0x00000000]
[13:58:15.645]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:58:15.651]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:58:15.651]        // -> [canReadPins <= 0x00000001]
[13:58:15.653]    </block>
[13:58:15.653]    <control if="" while="1" timeout="200" info="">
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.653]      // while "1"  (timeout="200")
[13:58:15.653]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.655]      // while "1"  (timeout="200")
[13:58:15.655]      // while-condition  =>  TRUE
[13:58:15.657]      // while "1"  (timeout="200")
[13:58:15.657]      // while  =>  TIMEOUT
[13:58:15.657]      // end while "1"
[13:58:15.657]    </control>
[13:58:15.657]    <control if="canReadPins" while="" timeout="0" info="">
[13:58:15.657]      // if-block "canReadPins"
[13:58:15.657]        // =>  TRUE
[13:58:15.657]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:58:15.657]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:58:15.657]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:58:15.657]        // while-condition  =>  FALSE
[13:58:15.657]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:58:15.657]      </control>
[13:58:15.657]      // end if-block "canReadPins"
[13:58:15.657]    </control>
[13:58:15.657]    <control if="!canReadPins" while="" timeout="0" info="">
[13:58:15.661]      // if-block "!canReadPins"
[13:58:15.661]        // =>  FALSE
[13:58:15.661]      // skip if-block "!canReadPins"
[13:58:15.661]    </control>
[13:58:15.661]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:58:15.661]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:58:15.661]        // =>  TRUE
[13:58:15.661]      <block atomic="false" info="">
[13:58:15.661]        WriteAP(0x00, 0x190008);
[13:58:15.661]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:58:15.661]        WriteAP(0xF0, 0x01);
[13:58:15.666]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:58:15.666]      </block>
[13:58:15.666]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:58:15.666]    </control>
[13:58:15.667]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:58:15.667]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:58:15.667]        // =>  FALSE
[13:58:15.667]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:58:15.667]    </control>
[13:58:15.667]    <block atomic="false" info="">
[13:58:15.667]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:58:15.671]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:58:15.671]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:58:15.671]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:58:15.673]      __ap = 0; //lets make sure we reset the access point selection
[13:58:15.673]        // -> [__ap <= 0x00000000]
[13:58:15.673]    </block>
[13:58:15.673]  </sequence>
[13:58:15.673]  
[13:58:15.702]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:58:15.702]  
[13:58:15.702]  <debugvars>
[13:58:15.706]    // Pre-defined
[13:58:15.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:58:15.706]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:58:15.706]    __dp=0x00000000
[13:58:15.706]    __ap=0x00000000
[13:58:15.706]    __traceout=0x00000000      (Trace Disabled)
[13:58:15.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:58:15.706]    __FlashAddr=0x00000000
[13:58:15.706]    __FlashLen=0x00000000
[13:58:15.706]    __FlashArg=0x00000000
[13:58:15.706]    __FlashOp=0x00000000
[13:58:15.706]    __Result=0x00000000
[13:58:15.706]  </debugvars>
[13:58:15.706]  
[13:58:15.706]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:58:15.706]    <block atomic="false" info="">
[13:58:15.706]      __var deviceID = 0;
[13:58:15.706]        // -> [deviceID <= 0x00000000]
[13:58:15.708]      __var version = 0;
[13:58:15.708]        // -> [version <= 0x00000000]
[13:58:15.708]      __var partNum = 0;
[13:58:15.708]        // -> [partNum <= 0x00000000]
[13:58:15.708]      __var manuf = 0;
[13:58:15.708]        // -> [manuf <= 0x00000000]
[13:58:15.708]      __var isMSPM0G1X0X_G3X0X = 0;
[13:58:15.708]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:58:15.708]      __var isProduction = 0;
[13:58:15.708]        // -> [isProduction <= 0x00000000]
[13:58:15.708]      __var continueId = 0;
[13:58:15.708]        // -> [continueId <= 0x00000000]
[13:58:15.710]      deviceID =   Read32(0x41C40004);
[13:58:15.715]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:58:15.715]        // -> [deviceID <= 0x2BB8802F]
[13:58:15.715]      version = deviceID >> 28;
[13:58:15.715]        // -> [version <= 0x00000002]
[13:58:15.715]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:58:15.715]        // -> [partNum <= 0x0000BB88]
[13:58:15.715]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:58:15.715]        // -> [manuf <= 0x00000017]
[13:58:15.715]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:58:15.715]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:58:15.715]      isProduction = (version > 0);
[13:58:15.715]        // -> [isProduction <= 0x00000001]
[13:58:15.715]    </block>
[13:58:15.715]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:58:15.715]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:58:15.715]        // =>  FALSE
[13:58:15.715]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:58:15.715]    </control>
[13:58:15.715]    <control if="continueId == 4" while="" timeout="0" info="">
[13:58:15.718]      // if-block "continueId == 4"
[13:58:15.718]        // =>  FALSE
[13:58:15.718]      // skip if-block "continueId == 4"
[13:58:15.718]    </control>
[13:58:15.718]    <control if="!isProduction" while="" timeout="0" info="">
[13:58:15.718]      // if-block "!isProduction"
[13:58:15.718]        // =>  FALSE
[13:58:15.718]      // skip if-block "!isProduction"
[13:58:15.718]    </control>
[13:58:15.718]  </sequence>
[13:58:15.718]  
[14:09:17.117]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:09:17.117]  
[14:09:17.126]  <debugvars>
[14:09:17.126]    // Pre-defined
[14:09:17.126]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:09:17.126]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:09:17.126]    __dp=0x00000000
[14:09:17.126]    __ap=0x00000000
[14:09:17.126]    __traceout=0x00000000      (Trace Disabled)
[14:09:17.126]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:09:17.126]    __FlashAddr=0x00000000
[14:09:17.126]    __FlashLen=0x00000000
[14:09:17.126]    __FlashArg=0x00000000
[14:09:17.126]    __FlashOp=0x00000000
[14:09:17.126]    __Result=0x00000000
[14:09:17.126]  </debugvars>
[14:09:17.126]  
[14:09:17.126]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:09:17.126]    <block atomic="false" info="">
[14:09:17.128]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:09:17.128]        // -> [isSWJ <= 0x00000001]
[14:09:17.128]      __var hasDormant = __protocol & 0x00020000;
[14:09:17.128]        // -> [hasDormant <= 0x00000000]
[14:09:17.128]      __var protType   = __protocol & 0x0000FFFF;
[14:09:17.128]        // -> [protType <= 0x00000002]
[14:09:17.128]    </block>
[14:09:17.128]    <control if="protType == 1" while="" timeout="0" info="">
[14:09:17.128]      // if-block "protType == 1"
[14:09:17.128]        // =>  FALSE
[14:09:17.128]      // skip if-block "protType == 1"
[14:09:17.128]    </control>
[14:09:17.128]    <control if="protType == 2" while="" timeout="0" info="">
[14:09:17.128]      // if-block "protType == 2"
[14:09:17.128]        // =>  TRUE
[14:09:17.128]      <control if="isSWJ" while="" timeout="0" info="">
[14:09:17.128]        // if-block "isSWJ"
[14:09:17.128]          // =>  TRUE
[14:09:17.128]        <control if="hasDormant" while="" timeout="0" info="">
[14:09:17.128]          // if-block "hasDormant"
[14:09:17.128]            // =>  FALSE
[14:09:17.128]          // skip if-block "hasDormant"
[14:09:17.128]        </control>
[14:09:17.128]        <control if="!hasDormant" while="" timeout="0" info="">
[14:09:17.128]          // if-block "!hasDormant"
[14:09:17.128]            // =>  TRUE
[14:09:17.128]          <block atomic="false" info="">
[14:09:17.128]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:09:17.134]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:09:17.134]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:09:17.134]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:09:17.134]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:09:17.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:09:17.136]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:09:17.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:09:17.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:09:17.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:09:17.140]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:09:17.144]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:09:17.144]          </block>
[14:09:17.144]          // end if-block "!hasDormant"
[14:09:17.144]        </control>
[14:09:17.144]        // end if-block "isSWJ"
[14:09:17.144]      </control>
[14:09:17.144]      <control if="!isSWJ" while="" timeout="0" info="">
[14:09:17.144]        // if-block "!isSWJ"
[14:09:17.144]          // =>  FALSE
[14:09:17.144]        // skip if-block "!isSWJ"
[14:09:17.144]      </control>
[14:09:17.144]      <block atomic="false" info="">
[14:09:17.144]        ReadDP(0x0);
[14:09:17.144]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:09:17.144]      </block>
[14:09:17.144]      // end if-block "protType == 2"
[14:09:17.144]    </control>
[14:09:17.149]  </sequence>
[14:09:17.149]  
[14:09:17.157]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:09:17.157]  
[14:09:17.157]  <debugvars>
[14:09:17.157]    // Pre-defined
[14:09:17.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:09:17.157]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:09:17.157]    __dp=0x00000000
[14:09:17.157]    __ap=0x00000000
[14:09:17.157]    __traceout=0x00000000      (Trace Disabled)
[14:09:17.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:09:17.157]    __FlashAddr=0x00000000
[14:09:17.157]    __FlashLen=0x00000000
[14:09:17.157]    __FlashArg=0x00000000
[14:09:17.157]    __FlashOp=0x00000000
[14:09:17.157]    __Result=0x00000000
[14:09:17.157]  </debugvars>
[14:09:17.157]  
[14:09:17.157]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:09:17.157]    <block atomic="false" info="">
[14:09:17.157]      __var SW_DP_ABORT       = 0x0;
[14:09:17.161]        // -> [SW_DP_ABORT <= 0x00000000]
[14:09:17.161]      __var DP_CTRL_STAT      = 0x4;
[14:09:17.161]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:09:17.161]      __var DP_SELECT         = 0x8;
[14:09:17.161]        // -> [DP_SELECT <= 0x00000008]
[14:09:17.161]      __var powered_down      = 0;
[14:09:17.161]        // -> [powered_down <= 0x00000000]
[14:09:17.161]      WriteDP(DP_SELECT, 0x00000000);
[14:09:17.161]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:09:17.161]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:09:17.168]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:09:17.168]        // -> [powered_down <= 0x00000001]
[14:09:17.168]    </block>
[14:09:17.168]    <control if="powered_down" while="" timeout="0" info="">
[14:09:17.168]      // if-block "powered_down"
[14:09:17.168]        // =>  TRUE
[14:09:17.168]      <block atomic="false" info="">
[14:09:17.168]        Message(0, "Debug/System power-up request sent");
[14:09:17.172]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:09:17.176]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:09:17.176]      </block>
[14:09:17.176]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:09:17.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:09:17.180]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:09:17.180]        // while-condition  =>  FALSE
[14:09:17.180]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:09:17.180]      </control>
[14:09:17.184]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:09:17.184]        // if-block "(__protocol & 0xFFFF) == 1"
[14:09:17.184]          // =>  FALSE
[14:09:17.184]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:09:17.184]      </control>
[14:09:17.184]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:09:17.184]        // if-block "(__protocol & 0xFFFF) == 2"
[14:09:17.184]          // =>  TRUE
[14:09:17.184]        <block atomic="false" info="">
[14:09:17.184]          Message(0, "executing SWD power up");
[14:09:17.184]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:09:17.189]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:09:17.189]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:09:17.192]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:09:17.192]        </block>
[14:09:17.192]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:09:17.194]      </control>
[14:09:17.194]      // end if-block "powered_down"
[14:09:17.194]    </control>
[14:09:17.194]    <block atomic="false" info="">
[14:09:17.194]      __var DEBUG_PORT_VAL    = 0;
[14:09:17.194]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:09:17.194]      __var ACCESS_POINT_VAL  = 0;
[14:09:17.194]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:09:17.194]      __ap = 1; 
[14:09:17.194]        // -> [__ap <= 0x00000001]
[14:09:17.194]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:09:17.200]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:09:17.200]      __ap = 4;
[14:09:17.200]        // -> [__ap <= 0x00000004]
[14:09:17.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:09:17.214]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:09:17.214]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:09:17.214]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:09:17.214]    </block>
[14:09:17.214]    <block atomic="false" info="">
[14:09:17.214]      __var nReset = 0x80;
[14:09:17.214]        // -> [nReset <= 0x00000080]
[14:09:17.214]      __var canReadPins = 0;
[14:09:17.217]        // -> [canReadPins <= 0x00000000]
[14:09:17.217]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:09:17.221]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:09:17.221]        // -> [canReadPins <= 0x00000001]
[14:09:17.221]    </block>
[14:09:17.221]    <control if="" while="1" timeout="200" info="">
[14:09:17.221]      // while "1"  (timeout="200")
[14:09:17.221]      // while-condition  =>  TRUE
[14:09:17.221]      // while "1"  (timeout="200")
[14:09:17.221]      // while-condition  =>  TRUE
[14:09:17.221]      // while "1"  (timeout="200")
[14:09:17.221]      // while-condition  =>  TRUE
[14:09:17.221]      // while "1"  (timeout="200")
[14:09:17.221]      // while-condition  =>  TRUE
[14:09:17.221]      // while "1"  (timeout="200")
[14:09:17.221]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.224]      // while-condition  =>  TRUE
[14:09:17.224]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.228]      // while-condition  =>  TRUE
[14:09:17.228]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.232]      // while "1"  (timeout="200")
[14:09:17.232]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.234]      // while-condition  =>  TRUE
[14:09:17.234]      // while "1"  (timeout="200")
[14:09:17.236]      // while-condition  =>  TRUE
[14:09:17.236]      // while "1"  (timeout="200")
[14:09:17.236]      // while  =>  TIMEOUT
[14:09:17.236]      // end while "1"
[14:09:17.236]    </control>
[14:09:17.236]    <control if="canReadPins" while="" timeout="0" info="">
[14:09:17.236]      // if-block "canReadPins"
[14:09:17.236]        // =>  TRUE
[14:09:17.236]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:09:17.236]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:09:17.236]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:09:17.240]        // while-condition  =>  FALSE
[14:09:17.240]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:09:17.240]      </control>
[14:09:17.240]      // end if-block "canReadPins"
[14:09:17.240]    </control>
[14:09:17.240]    <control if="!canReadPins" while="" timeout="0" info="">
[14:09:17.240]      // if-block "!canReadPins"
[14:09:17.240]        // =>  FALSE
[14:09:17.240]      // skip if-block "!canReadPins"
[14:09:17.240]    </control>
[14:09:17.240]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:09:17.240]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:09:17.240]        // =>  TRUE
[14:09:17.240]      <block atomic="false" info="">
[14:09:17.240]        WriteAP(0x00, 0x190008);
[14:09:17.240]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:09:17.244]        WriteAP(0xF0, 0x01);
[14:09:17.256]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:09:17.256]      </block>
[14:09:17.256]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:09:17.256]    </control>
[14:09:17.256]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:09:17.256]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:09:17.256]        // =>  FALSE
[14:09:17.256]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:09:17.256]    </control>
[14:09:17.256]    <block atomic="false" info="">
[14:09:17.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:09:17.264]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:09:17.264]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:09:17.264]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:09:17.268]      __ap = 0; //lets make sure we reset the access point selection
[14:09:17.268]        // -> [__ap <= 0x00000000]
[14:09:17.268]    </block>
[14:09:17.268]  </sequence>
[14:09:17.268]  
[14:09:17.304]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:09:17.304]  
[14:09:17.304]  <debugvars>
[14:09:17.304]    // Pre-defined
[14:09:17.304]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:09:17.304]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:09:17.304]    __dp=0x00000000
[14:09:17.304]    __ap=0x00000000
[14:09:17.304]    __traceout=0x00000000      (Trace Disabled)
[14:09:17.304]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:09:17.304]    __FlashAddr=0x00000000
[14:09:17.304]    __FlashLen=0x00000000
[14:09:17.304]    __FlashArg=0x00000000
[14:09:17.304]    __FlashOp=0x00000000
[14:09:17.304]    __Result=0x00000000
[14:09:17.304]  </debugvars>
[14:09:17.304]  
[14:09:17.304]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:09:17.304]    <block atomic="false" info="">
[14:09:17.304]      __var deviceID = 0;
[14:09:17.304]        // -> [deviceID <= 0x00000000]
[14:09:17.304]      __var version = 0;
[14:09:17.304]        // -> [version <= 0x00000000]
[14:09:17.304]      __var partNum = 0;
[14:09:17.304]        // -> [partNum <= 0x00000000]
[14:09:17.304]      __var manuf = 0;
[14:09:17.304]        // -> [manuf <= 0x00000000]
[14:09:17.304]      __var isMSPM0G1X0X_G3X0X = 0;
[14:09:17.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:09:17.304]      __var isProduction = 0;
[14:09:17.304]        // -> [isProduction <= 0x00000000]
[14:09:17.304]      __var continueId = 0;
[14:09:17.308]        // -> [continueId <= 0x00000000]
[14:09:17.308]      deviceID =   Read32(0x41C40004);
[14:09:17.314]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:09:17.314]        // -> [deviceID <= 0x2BB8802F]
[14:09:17.314]      version = deviceID >> 28;
[14:09:17.314]        // -> [version <= 0x00000002]
[14:09:17.314]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:09:17.314]        // -> [partNum <= 0x0000BB88]
[14:09:17.314]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:09:17.314]        // -> [manuf <= 0x00000017]
[14:09:17.314]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:09:17.314]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:09:17.314]      isProduction = (version > 0);
[14:09:17.314]        // -> [isProduction <= 0x00000001]
[14:09:17.314]    </block>
[14:09:17.314]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:09:17.314]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:09:17.314]        // =>  FALSE
[14:09:17.314]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:09:17.314]    </control>
[14:09:17.314]    <control if="continueId == 4" while="" timeout="0" info="">
[14:09:17.314]      // if-block "continueId == 4"
[14:09:17.316]        // =>  FALSE
[14:09:17.316]      // skip if-block "continueId == 4"
[14:09:17.316]    </control>
[14:09:17.316]    <control if="!isProduction" while="" timeout="0" info="">
[14:09:17.316]      // if-block "!isProduction"
[14:09:17.316]        // =>  FALSE
[14:09:17.316]      // skip if-block "!isProduction"
[14:09:17.316]    </control>
[14:09:17.316]  </sequence>
[14:09:17.316]  
[14:09:24.679]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:09:24.679]  
[14:09:24.687]  <debugvars>
[14:09:24.687]    // Pre-defined
[14:09:24.687]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:09:24.687]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:09:24.687]    __dp=0x00000000
[14:09:24.687]    __ap=0x00000000
[14:09:24.687]    __traceout=0x00000000      (Trace Disabled)
[14:09:24.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:09:24.687]    __FlashAddr=0x00000000
[14:09:24.687]    __FlashLen=0x00000000
[14:09:24.687]    __FlashArg=0x00000000
[14:09:24.687]    __FlashOp=0x00000000
[14:09:24.687]    __Result=0x00000000
[14:09:24.687]  </debugvars>
[14:09:24.687]  
[14:09:24.687]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:09:24.687]    <block atomic="false" info="">
[14:09:24.687]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:09:24.687]        // -> [isSWJ <= 0x00000001]
[14:09:24.687]      __var hasDormant = __protocol & 0x00020000;
[14:09:24.687]        // -> [hasDormant <= 0x00000000]
[14:09:24.687]      __var protType   = __protocol & 0x0000FFFF;
[14:09:24.687]        // -> [protType <= 0x00000002]
[14:09:24.687]    </block>
[14:09:24.687]    <control if="protType == 1" while="" timeout="0" info="">
[14:09:24.687]      // if-block "protType == 1"
[14:09:24.687]        // =>  FALSE
[14:09:24.687]      // skip if-block "protType == 1"
[14:09:24.687]    </control>
[14:09:24.687]    <control if="protType == 2" while="" timeout="0" info="">
[14:09:24.691]      // if-block "protType == 2"
[14:09:24.691]        // =>  TRUE
[14:09:24.691]      <control if="isSWJ" while="" timeout="0" info="">
[14:09:24.691]        // if-block "isSWJ"
[14:09:24.691]          // =>  TRUE
[14:09:24.691]        <control if="hasDormant" while="" timeout="0" info="">
[14:09:24.691]          // if-block "hasDormant"
[14:09:24.691]            // =>  FALSE
[14:09:24.691]          // skip if-block "hasDormant"
[14:09:24.691]        </control>
[14:09:24.691]        <control if="!hasDormant" while="" timeout="0" info="">
[14:09:24.691]          // if-block "!hasDormant"
[14:09:24.691]            // =>  TRUE
[14:09:24.691]          <block atomic="false" info="">
[14:09:24.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:09:24.691]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:09:24.694]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:09:24.700]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:09:24.700]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:09:24.700]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:09:24.703]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:09:24.704]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:09:24.704]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:09:24.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:09:24.704]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:09:24.707]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:09:24.707]          </block>
[14:09:24.707]          // end if-block "!hasDormant"
[14:09:24.707]        </control>
[14:09:24.707]        // end if-block "isSWJ"
[14:09:24.707]      </control>
[14:09:24.707]      <control if="!isSWJ" while="" timeout="0" info="">
[14:09:24.707]        // if-block "!isSWJ"
[14:09:24.707]          // =>  FALSE
[14:09:24.707]        // skip if-block "!isSWJ"
[14:09:24.707]      </control>
[14:09:24.707]      <block atomic="false" info="">
[14:09:24.707]        ReadDP(0x0);
[14:09:24.713]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:09:24.713]      </block>
[14:09:24.715]      // end if-block "protType == 2"
[14:09:24.715]    </control>
[14:09:24.715]  </sequence>
[14:09:24.715]  
[14:09:24.719]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:09:24.719]  
[14:09:24.719]  <debugvars>
[14:09:24.719]    // Pre-defined
[14:09:24.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:09:24.719]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:09:24.719]    __dp=0x00000000
[14:09:24.719]    __ap=0x00000000
[14:09:24.719]    __traceout=0x00000000      (Trace Disabled)
[14:09:24.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:09:24.719]    __FlashAddr=0x00000000
[14:09:24.719]    __FlashLen=0x00000000
[14:09:24.719]    __FlashArg=0x00000000
[14:09:24.719]    __FlashOp=0x00000000
[14:09:24.719]    __Result=0x00000000
[14:09:24.719]  </debugvars>
[14:09:24.719]  
[14:09:24.719]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:09:24.719]    <block atomic="false" info="">
[14:09:24.719]      __var SW_DP_ABORT       = 0x0;
[14:09:24.719]        // -> [SW_DP_ABORT <= 0x00000000]
[14:09:24.719]      __var DP_CTRL_STAT      = 0x4;
[14:09:24.719]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:09:24.719]      __var DP_SELECT         = 0x8;
[14:09:24.719]        // -> [DP_SELECT <= 0x00000008]
[14:09:24.719]      __var powered_down      = 0;
[14:09:24.719]        // -> [powered_down <= 0x00000000]
[14:09:24.719]      WriteDP(DP_SELECT, 0x00000000);
[14:09:24.723]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:09:24.724]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:09:24.727]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:09:24.727]        // -> [powered_down <= 0x00000001]
[14:09:24.727]    </block>
[14:09:24.727]    <control if="powered_down" while="" timeout="0" info="">
[14:09:24.727]      // if-block "powered_down"
[14:09:24.727]        // =>  TRUE
[14:09:24.727]      <block atomic="false" info="">
[14:09:24.727]        Message(0, "Debug/System power-up request sent");
[14:09:24.731]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:09:24.731]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:09:24.734]      </block>
[14:09:24.734]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:09:24.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:09:24.734]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:09:24.734]        // while-condition  =>  FALSE
[14:09:24.734]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:09:24.734]      </control>
[14:09:24.734]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:09:24.734]        // if-block "(__protocol & 0xFFFF) == 1"
[14:09:24.734]          // =>  FALSE
[14:09:24.734]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:09:24.734]      </control>
[14:09:24.734]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:09:24.734]        // if-block "(__protocol & 0xFFFF) == 2"
[14:09:24.734]          // =>  TRUE
[14:09:24.734]        <block atomic="false" info="">
[14:09:24.734]          Message(0, "executing SWD power up");
[14:09:24.738]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:09:24.740]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:09:24.740]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:09:24.742]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:09:24.742]        </block>
[14:09:24.742]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:09:24.742]      </control>
[14:09:24.742]      // end if-block "powered_down"
[14:09:24.742]    </control>
[14:09:24.742]    <block atomic="false" info="">
[14:09:24.742]      __var DEBUG_PORT_VAL    = 0;
[14:09:24.742]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:09:24.742]      __var ACCESS_POINT_VAL  = 0;
[14:09:24.742]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:09:24.742]      __ap = 1; 
[14:09:24.742]        // -> [__ap <= 0x00000001]
[14:09:24.742]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:09:24.746]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:09:24.746]      __ap = 4;
[14:09:24.746]        // -> [__ap <= 0x00000004]
[14:09:24.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:09:24.754]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:09:24.754]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:09:24.754]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:09:24.754]    </block>
[14:09:24.754]    <block atomic="false" info="">
[14:09:24.754]      __var nReset = 0x80;
[14:09:24.754]        // -> [nReset <= 0x00000080]
[14:09:24.754]      __var canReadPins = 0;
[14:09:24.754]        // -> [canReadPins <= 0x00000000]
[14:09:24.754]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:09:24.759]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:09:24.759]        // -> [canReadPins <= 0x00000001]
[14:09:24.759]    </block>
[14:09:24.759]    <control if="" while="1" timeout="200" info="">
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.759]      // while "1"  (timeout="200")
[14:09:24.759]      // while-condition  =>  TRUE
[14:09:24.763]      // while "1"  (timeout="200")
[14:09:24.763]      // while-condition  =>  TRUE
[14:09:24.763]      // while "1"  (timeout="200")
[14:09:24.763]      // while-condition  =>  TRUE
[14:09:24.763]      // while "1"  (timeout="200")
[14:09:24.763]      // while-condition  =>  TRUE
[14:09:24.763]      // while "1"  (timeout="200")
[14:09:24.763]      // while-condition  =>  TRUE
[14:09:24.763]      // while "1"  (timeout="200")
[14:09:24.764]      // while-condition  =>  TRUE
[14:09:24.764]      // while "1"  (timeout="200")
[14:09:24.764]      // while-condition  =>  TRUE
[14:09:24.764]      // while "1"  (timeout="200")
[14:09:24.764]      // while-condition  =>  TRUE
[14:09:24.764]      // while "1"  (timeout="200")
[14:09:24.764]      // while-condition  =>  TRUE
[14:09:24.764]      // while "1"  (timeout="200")
[14:09:24.764]      // while-condition  =>  TRUE
[14:09:24.764]      // while "1"  (timeout="200")
[14:09:24.764]      // while-condition  =>  TRUE
[14:09:24.764]      // while "1"  (timeout="200")
[14:09:24.764]      // while-condition  =>  TRUE
[14:09:24.764]      // while "1"  (timeout="200")
[14:09:24.766]      // while-condition  =>  TRUE
[14:09:24.766]      // while "1"  (timeout="200")
[14:09:24.766]      // while-condition  =>  TRUE
[14:09:24.766]      // while "1"  (timeout="200")
[14:09:24.766]      // while-condition  =>  TRUE
[14:09:24.766]      // while "1"  (timeout="200")
[14:09:24.767]      // while-condition  =>  TRUE
[14:09:24.767]      // while "1"  (timeout="200")
[14:09:24.767]      // while  =>  TIMEOUT
[14:09:24.767]      // end while "1"
[14:09:24.767]    </control>
[14:09:24.767]    <control if="canReadPins" while="" timeout="0" info="">
[14:09:24.767]      // if-block "canReadPins"
[14:09:24.767]        // =>  TRUE
[14:09:24.767]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:09:24.767]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:09:24.771]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:09:24.771]        // while-condition  =>  FALSE
[14:09:24.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:09:24.771]      </control>
[14:09:24.771]      // end if-block "canReadPins"
[14:09:24.771]    </control>
[14:09:24.771]    <control if="!canReadPins" while="" timeout="0" info="">
[14:09:24.771]      // if-block "!canReadPins"
[14:09:24.771]        // =>  FALSE
[14:09:24.771]      // skip if-block "!canReadPins"
[14:09:24.771]    </control>
[14:09:24.771]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:09:24.771]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:09:24.771]        // =>  TRUE
[14:09:24.771]      <block atomic="false" info="">
[14:09:24.771]        WriteAP(0x00, 0x190008);
[14:09:24.774]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:09:24.774]        WriteAP(0xF0, 0x01);
[14:09:24.784]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:09:24.784]      </block>
[14:09:24.784]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:09:24.788]    </control>
[14:09:24.788]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:09:24.788]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:09:24.788]        // =>  FALSE
[14:09:24.788]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:09:24.788]    </control>
[14:09:24.788]    <block atomic="false" info="">
[14:09:24.788]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:09:24.794]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:09:24.794]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:09:24.794]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:09:24.796]      __ap = 0; //lets make sure we reset the access point selection
[14:09:24.796]        // -> [__ap <= 0x00000000]
[14:09:24.796]    </block>
[14:09:24.796]  </sequence>
[14:09:24.796]  
[14:09:24.832]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:09:24.832]  
[14:09:24.832]  <debugvars>
[14:09:24.832]    // Pre-defined
[14:09:24.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:09:24.832]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:09:24.832]    __dp=0x00000000
[14:09:24.832]    __ap=0x00000000
[14:09:24.832]    __traceout=0x00000000      (Trace Disabled)
[14:09:24.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:09:24.832]    __FlashAddr=0x00000000
[14:09:24.832]    __FlashLen=0x00000000
[14:09:24.832]    __FlashArg=0x00000000
[14:09:24.832]    __FlashOp=0x00000000
[14:09:24.834]    __Result=0x00000000
[14:09:24.834]  </debugvars>
[14:09:24.834]  
[14:09:24.834]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:09:24.834]    <block atomic="false" info="">
[14:09:24.834]      __var deviceID = 0;
[14:09:24.834]        // -> [deviceID <= 0x00000000]
[14:09:24.834]      __var version = 0;
[14:09:24.834]        // -> [version <= 0x00000000]
[14:09:24.834]      __var partNum = 0;
[14:09:24.834]        // -> [partNum <= 0x00000000]
[14:09:24.834]      __var manuf = 0;
[14:09:24.834]        // -> [manuf <= 0x00000000]
[14:09:24.836]      __var isMSPM0G1X0X_G3X0X = 0;
[14:09:24.836]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:09:24.836]      __var isProduction = 0;
[14:09:24.836]        // -> [isProduction <= 0x00000000]
[14:09:24.836]      __var continueId = 0;
[14:09:24.836]        // -> [continueId <= 0x00000000]
[14:09:24.837]      deviceID =   Read32(0x41C40004);
[14:09:24.840]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:09:24.840]        // -> [deviceID <= 0x2BB8802F]
[14:09:24.840]      version = deviceID >> 28;
[14:09:24.840]        // -> [version <= 0x00000002]
[14:09:24.840]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:09:24.840]        // -> [partNum <= 0x0000BB88]
[14:09:24.840]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:09:24.840]        // -> [manuf <= 0x00000017]
[14:09:24.840]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:09:24.840]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:09:24.840]      isProduction = (version > 0);
[14:09:24.840]        // -> [isProduction <= 0x00000001]
[14:09:24.840]    </block>
[14:09:24.840]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:09:24.844]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:09:24.844]        // =>  FALSE
[14:09:24.844]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:09:24.844]    </control>
[14:09:24.844]    <control if="continueId == 4" while="" timeout="0" info="">
[14:09:24.844]      // if-block "continueId == 4"
[14:09:24.844]        // =>  FALSE
[14:09:24.844]      // skip if-block "continueId == 4"
[14:09:24.844]    </control>
[14:09:24.844]    <control if="!isProduction" while="" timeout="0" info="">
[14:09:24.844]      // if-block "!isProduction"
[14:09:24.844]        // =>  FALSE
[14:09:24.844]      // skip if-block "!isProduction"
[14:09:24.844]    </control>
[14:09:24.844]  </sequence>
[14:09:24.844]  
[14:13:16.920]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:13:16.920]  
[14:13:16.920]  <debugvars>
[14:13:16.920]    // Pre-defined
[14:13:16.920]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:13:16.920]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:13:16.920]    __dp=0x00000000
[14:13:16.920]    __ap=0x00000000
[14:13:16.920]    __traceout=0x00000000      (Trace Disabled)
[14:13:16.920]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:13:16.920]    __FlashAddr=0x00000000
[14:13:16.920]    __FlashLen=0x00000000
[14:13:16.920]    __FlashArg=0x00000000
[14:13:16.920]    __FlashOp=0x00000000
[14:13:16.920]    __Result=0x00000000
[14:13:16.920]  </debugvars>
[14:13:16.920]  
[14:13:16.920]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:13:16.920]    <block atomic="false" info="">
[14:13:16.920]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:13:16.920]        // -> [isSWJ <= 0x00000001]
[14:13:16.920]      __var hasDormant = __protocol & 0x00020000;
[14:13:16.924]        // -> [hasDormant <= 0x00000000]
[14:13:16.924]      __var protType   = __protocol & 0x0000FFFF;
[14:13:16.924]        // -> [protType <= 0x00000002]
[14:13:16.924]    </block>
[14:13:16.924]    <control if="protType == 1" while="" timeout="0" info="">
[14:13:16.924]      // if-block "protType == 1"
[14:13:16.924]        // =>  FALSE
[14:13:16.924]      // skip if-block "protType == 1"
[14:13:16.924]    </control>
[14:13:16.924]    <control if="protType == 2" while="" timeout="0" info="">
[14:13:16.924]      // if-block "protType == 2"
[14:13:16.924]        // =>  TRUE
[14:13:16.924]      <control if="isSWJ" while="" timeout="0" info="">
[14:13:16.924]        // if-block "isSWJ"
[14:13:16.924]          // =>  TRUE
[14:13:16.924]        <control if="hasDormant" while="" timeout="0" info="">
[14:13:16.924]          // if-block "hasDormant"
[14:13:16.924]            // =>  FALSE
[14:13:16.924]          // skip if-block "hasDormant"
[14:13:16.924]        </control>
[14:13:16.924]        <control if="!hasDormant" while="" timeout="0" info="">
[14:13:16.924]          // if-block "!hasDormant"
[14:13:16.924]            // =>  TRUE
[14:13:16.924]          <block atomic="false" info="">
[14:13:16.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:13:16.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:13:16.928]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:13:16.929]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:13:16.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:13:16.929]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:13:16.929]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:13:16.932]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:13:16.932]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:13:16.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:13:16.932]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:13:16.932]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:13:16.932]          </block>
[14:13:16.937]          // end if-block "!hasDormant"
[14:13:16.937]        </control>
[14:13:16.937]        // end if-block "isSWJ"
[14:13:16.937]      </control>
[14:13:16.937]      <control if="!isSWJ" while="" timeout="0" info="">
[14:13:16.937]        // if-block "!isSWJ"
[14:13:16.937]          // =>  FALSE
[14:13:16.937]        // skip if-block "!isSWJ"
[14:13:16.937]      </control>
[14:13:16.937]      <block atomic="false" info="">
[14:13:16.937]        ReadDP(0x0);
[14:13:16.939]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:13:16.939]      </block>
[14:13:16.939]      // end if-block "protType == 2"
[14:13:16.939]    </control>
[14:13:16.939]  </sequence>
[14:13:16.939]  
[14:13:16.941]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:13:16.941]  
[14:13:16.941]  <debugvars>
[14:13:16.941]    // Pre-defined
[14:13:16.941]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:13:16.941]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:13:16.941]    __dp=0x00000000
[14:13:16.945]    __ap=0x00000000
[14:13:16.945]    __traceout=0x00000000      (Trace Disabled)
[14:13:16.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:13:16.945]    __FlashAddr=0x00000000
[14:13:16.945]    __FlashLen=0x00000000
[14:13:16.945]    __FlashArg=0x00000000
[14:13:16.945]    __FlashOp=0x00000000
[14:13:16.945]    __Result=0x00000000
[14:13:16.945]  </debugvars>
[14:13:16.945]  
[14:13:16.945]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:13:16.945]    <block atomic="false" info="">
[14:13:16.945]      __var SW_DP_ABORT       = 0x0;
[14:13:16.945]        // -> [SW_DP_ABORT <= 0x00000000]
[14:13:16.945]      __var DP_CTRL_STAT      = 0x4;
[14:13:16.945]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:13:16.945]      __var DP_SELECT         = 0x8;
[14:13:16.945]        // -> [DP_SELECT <= 0x00000008]
[14:13:16.945]      __var powered_down      = 0;
[14:13:16.945]        // -> [powered_down <= 0x00000000]
[14:13:16.945]      WriteDP(DP_SELECT, 0x00000000);
[14:13:16.949]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:13:16.949]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:13:16.949]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:13:16.949]        // -> [powered_down <= 0x00000001]
[14:13:16.949]    </block>
[14:13:16.949]    <control if="powered_down" while="" timeout="0" info="">
[14:13:16.949]      // if-block "powered_down"
[14:13:16.949]        // =>  TRUE
[14:13:16.949]      <block atomic="false" info="">
[14:13:16.949]        Message(0, "Debug/System power-up request sent");
[14:13:16.953]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:13:16.953]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:13:16.953]      </block>
[14:13:16.953]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:13:16.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:13:16.957]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:13:16.957]        // while-condition  =>  FALSE
[14:13:16.957]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:13:16.957]      </control>
[14:13:16.957]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:13:16.957]        // if-block "(__protocol & 0xFFFF) == 1"
[14:13:16.957]          // =>  FALSE
[14:13:16.957]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:13:16.957]      </control>
[14:13:16.959]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:13:16.959]        // if-block "(__protocol & 0xFFFF) == 2"
[14:13:16.959]          // =>  TRUE
[14:13:16.959]        <block atomic="false" info="">
[14:13:16.959]          Message(0, "executing SWD power up");
[14:13:16.959]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:13:16.961]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:13:16.961]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:13:16.965]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:13:16.965]        </block>
[14:13:16.965]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:13:16.965]      </control>
[14:13:16.965]      // end if-block "powered_down"
[14:13:16.965]    </control>
[14:13:16.965]    <block atomic="false" info="">
[14:13:16.965]      __var DEBUG_PORT_VAL    = 0;
[14:13:16.965]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:13:16.965]      __var ACCESS_POINT_VAL  = 0;
[14:13:16.965]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:13:16.965]      __ap = 1; 
[14:13:16.965]        // -> [__ap <= 0x00000001]
[14:13:16.965]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:13:16.973]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:13:16.973]      __ap = 4;
[14:13:16.973]        // -> [__ap <= 0x00000004]
[14:13:16.973]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:13:16.973]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:13:16.973]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:13:16.977]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:13:16.977]    </block>
[14:13:16.979]    <block atomic="false" info="">
[14:13:16.979]      __var nReset = 0x80;
[14:13:16.979]        // -> [nReset <= 0x00000080]
[14:13:16.979]      __var canReadPins = 0;
[14:13:16.979]        // -> [canReadPins <= 0x00000000]
[14:13:16.979]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:13:16.981]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:13:16.981]        // -> [canReadPins <= 0x00000001]
[14:13:16.981]    </block>
[14:13:16.981]    <control if="" while="1" timeout="200" info="">
[14:13:16.981]      // while "1"  (timeout="200")
[14:13:16.981]      // while-condition  =>  TRUE
[14:13:16.981]      // while "1"  (timeout="200")
[14:13:16.981]      // while-condition  =>  TRUE
[14:13:16.981]      // while "1"  (timeout="200")
[14:13:16.981]      // while-condition  =>  TRUE
[14:13:16.981]      // while "1"  (timeout="200")
[14:13:16.981]      // while-condition  =>  TRUE
[14:13:16.981]      // while "1"  (timeout="200")
[14:13:16.981]      // while-condition  =>  TRUE
[14:13:16.981]      // while "1"  (timeout="200")
[14:13:16.981]      // while-condition  =>  TRUE
[14:13:16.983]      // while "1"  (timeout="200")
[14:13:16.983]      // while-condition  =>  TRUE
[14:13:16.983]      // while "1"  (timeout="200")
[14:13:16.983]      // while-condition  =>  TRUE
[14:13:16.984]      // while "1"  (timeout="200")
[14:13:16.984]      // while-condition  =>  TRUE
[14:13:16.984]      // while "1"  (timeout="200")
[14:13:16.984]      // while-condition  =>  TRUE
[14:13:16.984]      // while "1"  (timeout="200")
[14:13:16.984]      // while-condition  =>  TRUE
[14:13:16.984]      // while "1"  (timeout="200")
[14:13:16.984]      // while-condition  =>  TRUE
[14:13:16.984]      // while "1"  (timeout="200")
[14:13:16.984]      // while-condition  =>  TRUE
[14:13:16.984]      // while "1"  (timeout="200")
[14:13:16.984]      // while-condition  =>  TRUE
[14:13:16.984]      // while "1"  (timeout="200")
[14:13:16.984]      // while-condition  =>  TRUE
[14:13:16.986]      // while "1"  (timeout="200")
[14:13:16.986]      // while  =>  TIMEOUT
[14:13:16.986]      // end while "1"
[14:13:16.986]    </control>
[14:13:16.986]    <control if="canReadPins" while="" timeout="0" info="">
[14:13:16.986]      // if-block "canReadPins"
[14:13:16.986]        // =>  TRUE
[14:13:16.986]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:13:16.986]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:13:16.990]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:13:16.990]        // while-condition  =>  FALSE
[14:13:16.990]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:13:16.990]      </control>
[14:13:16.990]      // end if-block "canReadPins"
[14:13:16.990]    </control>
[14:13:16.990]    <control if="!canReadPins" while="" timeout="0" info="">
[14:13:16.990]      // if-block "!canReadPins"
[14:13:16.990]        // =>  FALSE
[14:13:16.990]      // skip if-block "!canReadPins"
[14:13:16.990]    </control>
[14:13:16.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:13:16.990]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:13:16.990]        // =>  TRUE
[14:13:16.994]      <block atomic="false" info="">
[14:13:16.994]        WriteAP(0x00, 0x190008);
[14:13:16.994]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:13:16.994]        WriteAP(0xF0, 0x01);
[14:13:16.999]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:13:16.999]      </block>
[14:13:16.999]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:13:16.999]    </control>
[14:13:16.999]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:13:16.999]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:13:16.999]        // =>  FALSE
[14:13:16.999]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:13:16.999]    </control>
[14:13:16.999]    <block atomic="false" info="">
[14:13:16.999]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:13:17.002]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:13:17.002]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:13:17.002]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:13:17.008]      __ap = 0; //lets make sure we reset the access point selection
[14:13:17.008]        // -> [__ap <= 0x00000000]
[14:13:17.008]    </block>
[14:13:17.008]  </sequence>
[14:13:17.008]  
[14:13:17.048]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:13:17.048]  
[14:13:17.048]  <debugvars>
[14:13:17.048]    // Pre-defined
[14:13:17.048]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:13:17.048]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:13:17.048]    __dp=0x00000000
[14:13:17.049]    __ap=0x00000000
[14:13:17.049]    __traceout=0x00000000      (Trace Disabled)
[14:13:17.049]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:13:17.049]    __FlashAddr=0x00000000
[14:13:17.049]    __FlashLen=0x00000000
[14:13:17.049]    __FlashArg=0x00000000
[14:13:17.049]    __FlashOp=0x00000000
[14:13:17.049]    __Result=0x00000000
[14:13:17.049]  </debugvars>
[14:13:17.049]  
[14:13:17.049]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:13:17.049]    <block atomic="false" info="">
[14:13:17.049]      __var deviceID = 0;
[14:13:17.049]        // -> [deviceID <= 0x00000000]
[14:13:17.049]      __var version = 0;
[14:13:17.049]        // -> [version <= 0x00000000]
[14:13:17.049]      __var partNum = 0;
[14:13:17.049]        // -> [partNum <= 0x00000000]
[14:13:17.049]      __var manuf = 0;
[14:13:17.049]        // -> [manuf <= 0x00000000]
[14:13:17.049]      __var isMSPM0G1X0X_G3X0X = 0;
[14:13:17.049]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:13:17.049]      __var isProduction = 0;
[14:13:17.049]        // -> [isProduction <= 0x00000000]
[14:13:17.049]      __var continueId = 0;
[14:13:17.052]        // -> [continueId <= 0x00000000]
[14:13:17.052]      deviceID =   Read32(0x41C40004);
[14:13:17.060]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:13:17.060]        // -> [deviceID <= 0x2BB8802F]
[14:13:17.060]      version = deviceID >> 28;
[14:13:17.060]        // -> [version <= 0x00000002]
[14:13:17.060]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:13:17.060]        // -> [partNum <= 0x0000BB88]
[14:13:17.060]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:13:17.060]        // -> [manuf <= 0x00000017]
[14:13:17.060]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:13:17.060]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:13:17.064]      isProduction = (version > 0);
[14:13:17.064]        // -> [isProduction <= 0x00000001]
[14:13:17.064]    </block>
[14:13:17.064]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:13:17.064]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:13:17.064]        // =>  FALSE
[14:13:17.064]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:13:17.064]    </control>
[14:13:17.064]    <control if="continueId == 4" while="" timeout="0" info="">
[14:13:17.064]      // if-block "continueId == 4"
[14:13:17.065]        // =>  FALSE
[14:13:17.065]      // skip if-block "continueId == 4"
[14:13:17.065]    </control>
[14:13:17.065]    <control if="!isProduction" while="" timeout="0" info="">
[14:13:17.065]      // if-block "!isProduction"
[14:13:17.065]        // =>  FALSE
[14:13:17.065]      // skip if-block "!isProduction"
[14:13:17.065]    </control>
[14:13:17.065]  </sequence>
[14:13:17.065]  
[14:27:42.355]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:27:42.355]  
[14:27:42.355]  <debugvars>
[14:27:42.355]    // Pre-defined
[14:27:42.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:27:42.355]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:27:42.355]    __dp=0x00000000
[14:27:42.355]    __ap=0x00000000
[14:27:42.355]    __traceout=0x00000000      (Trace Disabled)
[14:27:42.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:27:42.355]    __FlashAddr=0x00000000
[14:27:42.355]    __FlashLen=0x00000000
[14:27:42.355]    __FlashArg=0x00000000
[14:27:42.357]    __FlashOp=0x00000000
[14:27:42.357]    __Result=0x00000000
[14:27:42.357]  </debugvars>
[14:27:42.357]  
[14:27:42.357]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:27:42.357]    <block atomic="false" info="">
[14:27:42.357]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:27:42.357]        // -> [isSWJ <= 0x00000001]
[14:27:42.357]      __var hasDormant = __protocol & 0x00020000;
[14:27:42.357]        // -> [hasDormant <= 0x00000000]
[14:27:42.357]      __var protType   = __protocol & 0x0000FFFF;
[14:27:42.357]        // -> [protType <= 0x00000002]
[14:27:42.357]    </block>
[14:27:42.359]    <control if="protType == 1" while="" timeout="0" info="">
[14:27:42.359]      // if-block "protType == 1"
[14:27:42.359]        // =>  FALSE
[14:27:42.359]      // skip if-block "protType == 1"
[14:27:42.359]    </control>
[14:27:42.359]    <control if="protType == 2" while="" timeout="0" info="">
[14:27:42.359]      // if-block "protType == 2"
[14:27:42.359]        // =>  TRUE
[14:27:42.359]      <control if="isSWJ" while="" timeout="0" info="">
[14:27:42.359]        // if-block "isSWJ"
[14:27:42.359]          // =>  TRUE
[14:27:42.359]        <control if="hasDormant" while="" timeout="0" info="">
[14:27:42.359]          // if-block "hasDormant"
[14:27:42.359]            // =>  FALSE
[14:27:42.359]          // skip if-block "hasDormant"
[14:27:42.359]        </control>
[14:27:42.359]        <control if="!hasDormant" while="" timeout="0" info="">
[14:27:42.359]          // if-block "!hasDormant"
[14:27:42.359]            // =>  TRUE
[14:27:42.359]          <block atomic="false" info="">
[14:27:42.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:27:42.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:27:42.359]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:27:42.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:27:42.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:27:42.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:27:42.363]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:27:42.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:27:42.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:27:42.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:27:42.371]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:27:42.373]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:27:42.373]          </block>
[14:27:42.373]          // end if-block "!hasDormant"
[14:27:42.375]        </control>
[14:27:42.375]        // end if-block "isSWJ"
[14:27:42.375]      </control>
[14:27:42.375]      <control if="!isSWJ" while="" timeout="0" info="">
[14:27:42.375]        // if-block "!isSWJ"
[14:27:42.375]          // =>  FALSE
[14:27:42.375]        // skip if-block "!isSWJ"
[14:27:42.375]      </control>
[14:27:42.375]      <block atomic="false" info="">
[14:27:42.375]        ReadDP(0x0);
[14:27:42.379]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:27:42.379]      </block>
[14:27:42.379]      // end if-block "protType == 2"
[14:27:42.379]    </control>
[14:27:42.379]  </sequence>
[14:27:42.379]  
[14:27:42.383]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:27:42.383]  
[14:27:42.383]  <debugvars>
[14:27:42.383]    // Pre-defined
[14:27:42.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:27:42.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:27:42.383]    __dp=0x00000000
[14:27:42.383]    __ap=0x00000000
[14:27:42.383]    __traceout=0x00000000      (Trace Disabled)
[14:27:42.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:27:42.383]    __FlashAddr=0x00000000
[14:27:42.383]    __FlashLen=0x00000000
[14:27:42.383]    __FlashArg=0x00000000
[14:27:42.383]    __FlashOp=0x00000000
[14:27:42.383]    __Result=0x00000000
[14:27:42.383]  </debugvars>
[14:27:42.383]  
[14:27:42.383]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:27:42.383]    <block atomic="false" info="">
[14:27:42.383]      __var SW_DP_ABORT       = 0x0;
[14:27:42.383]        // -> [SW_DP_ABORT <= 0x00000000]
[14:27:42.383]      __var DP_CTRL_STAT      = 0x4;
[14:27:42.383]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:27:42.383]      __var DP_SELECT         = 0x8;
[14:27:42.383]        // -> [DP_SELECT <= 0x00000008]
[14:27:42.383]      __var powered_down      = 0;
[14:27:42.383]        // -> [powered_down <= 0x00000000]
[14:27:42.383]      WriteDP(DP_SELECT, 0x00000000);
[14:27:42.387]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:27:42.387]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:27:42.387]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:27:42.387]        // -> [powered_down <= 0x00000001]
[14:27:42.387]    </block>
[14:27:42.387]    <control if="powered_down" while="" timeout="0" info="">
[14:27:42.391]      // if-block "powered_down"
[14:27:42.391]        // =>  TRUE
[14:27:42.391]      <block atomic="false" info="">
[14:27:42.391]        Message(0, "Debug/System power-up request sent");
[14:27:42.391]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:27:42.391]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:27:42.391]      </block>
[14:27:42.395]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:27:42.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:27:42.396]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:27:42.396]        // while-condition  =>  FALSE
[14:27:42.396]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:27:42.396]      </control>
[14:27:42.396]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:27:42.396]        // if-block "(__protocol & 0xFFFF) == 1"
[14:27:42.396]          // =>  FALSE
[14:27:42.396]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:27:42.396]      </control>
[14:27:42.396]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:27:42.396]        // if-block "(__protocol & 0xFFFF) == 2"
[14:27:42.396]          // =>  TRUE
[14:27:42.396]        <block atomic="false" info="">
[14:27:42.396]          Message(0, "executing SWD power up");
[14:27:42.399]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:27:42.403]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:27:42.403]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:27:42.403]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:27:42.403]        </block>
[14:27:42.403]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:27:42.403]      </control>
[14:27:42.403]      // end if-block "powered_down"
[14:27:42.403]    </control>
[14:27:42.403]    <block atomic="false" info="">
[14:27:42.403]      __var DEBUG_PORT_VAL    = 0;
[14:27:42.403]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:27:42.403]      __var ACCESS_POINT_VAL  = 0;
[14:27:42.403]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:27:42.403]      __ap = 1; 
[14:27:42.403]        // -> [__ap <= 0x00000001]
[14:27:42.403]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:27:42.407]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:27:42.407]      __ap = 4;
[14:27:42.407]        // -> [__ap <= 0x00000004]
[14:27:42.407]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:27:42.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:27:42.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:27:42.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:27:42.411]    </block>
[14:27:42.415]    <block atomic="false" info="">
[14:27:42.415]      __var nReset = 0x80;
[14:27:42.415]        // -> [nReset <= 0x00000080]
[14:27:42.415]      __var canReadPins = 0;
[14:27:42.415]        // -> [canReadPins <= 0x00000000]
[14:27:42.415]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:27:42.417]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:27:42.417]        // -> [canReadPins <= 0x00000001]
[14:27:42.417]    </block>
[14:27:42.417]    <control if="" while="1" timeout="200" info="">
[14:27:42.417]      // while "1"  (timeout="200")
[14:27:42.417]      // while-condition  =>  TRUE
[14:27:42.417]      // while "1"  (timeout="200")
[14:27:42.417]      // while-condition  =>  TRUE
[14:27:42.417]      // while "1"  (timeout="200")
[14:27:42.417]      // while-condition  =>  TRUE
[14:27:42.417]      // while "1"  (timeout="200")
[14:27:42.417]      // while-condition  =>  TRUE
[14:27:42.417]      // while "1"  (timeout="200")
[14:27:42.417]      // while-condition  =>  TRUE
[14:27:42.417]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.419]      // while-condition  =>  TRUE
[14:27:42.419]      // while "1"  (timeout="200")
[14:27:42.423]      // while-condition  =>  TRUE
[14:27:42.423]      // while "1"  (timeout="200")
[14:27:42.423]      // while  =>  TIMEOUT
[14:27:42.423]      // end while "1"
[14:27:42.423]    </control>
[14:27:42.423]    <control if="canReadPins" while="" timeout="0" info="">
[14:27:42.423]      // if-block "canReadPins"
[14:27:42.423]        // =>  TRUE
[14:27:42.423]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:27:42.423]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:27:42.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:27:42.427]        // while-condition  =>  FALSE
[14:27:42.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:27:42.427]      </control>
[14:27:42.427]      // end if-block "canReadPins"
[14:27:42.427]    </control>
[14:27:42.427]    <control if="!canReadPins" while="" timeout="0" info="">
[14:27:42.427]      // if-block "!canReadPins"
[14:27:42.427]        // =>  FALSE
[14:27:42.427]      // skip if-block "!canReadPins"
[14:27:42.427]    </control>
[14:27:42.427]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:27:42.427]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:27:42.427]        // =>  TRUE
[14:27:42.427]      <block atomic="false" info="">
[14:27:42.427]        WriteAP(0x00, 0x190008);
[14:27:42.427]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:27:42.427]        WriteAP(0xF0, 0x01);
[14:27:42.431]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:27:42.431]      </block>
[14:27:42.431]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:27:42.431]    </control>
[14:27:42.435]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:27:42.435]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:27:42.435]        // =>  FALSE
[14:27:42.435]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:27:42.435]    </control>
[14:27:42.435]    <block atomic="false" info="">
[14:27:42.435]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:27:42.441]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:27:42.441]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:27:42.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:27:42.441]      __ap = 0; //lets make sure we reset the access point selection
[14:27:42.441]        // -> [__ap <= 0x00000000]
[14:27:42.441]    </block>
[14:27:42.443]  </sequence>
[14:27:42.443]  
[14:27:42.469]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:27:42.469]  
[14:27:42.469]  <debugvars>
[14:27:42.469]    // Pre-defined
[14:27:42.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:27:42.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:27:42.469]    __dp=0x00000000
[14:27:42.469]    __ap=0x00000000
[14:27:42.469]    __traceout=0x00000000      (Trace Disabled)
[14:27:42.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:27:42.469]    __FlashAddr=0x00000000
[14:27:42.469]    __FlashLen=0x00000000
[14:27:42.469]    __FlashArg=0x00000000
[14:27:42.469]    __FlashOp=0x00000000
[14:27:42.469]    __Result=0x00000000
[14:27:42.471]  </debugvars>
[14:27:42.471]  
[14:27:42.471]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:27:42.471]    <block atomic="false" info="">
[14:27:42.471]      __var deviceID = 0;
[14:27:42.471]        // -> [deviceID <= 0x00000000]
[14:27:42.471]      __var version = 0;
[14:27:42.471]        // -> [version <= 0x00000000]
[14:27:42.471]      __var partNum = 0;
[14:27:42.471]        // -> [partNum <= 0x00000000]
[14:27:42.471]      __var manuf = 0;
[14:27:42.471]        // -> [manuf <= 0x00000000]
[14:27:42.471]      __var isMSPM0G1X0X_G3X0X = 0;
[14:27:42.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:27:42.471]      __var isProduction = 0;
[14:27:42.471]        // -> [isProduction <= 0x00000000]
[14:27:42.471]      __var continueId = 0;
[14:27:42.471]        // -> [continueId <= 0x00000000]
[14:27:42.471]      deviceID =   Read32(0x41C40004);
[14:27:42.479]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:27:42.479]        // -> [deviceID <= 0x2BB8802F]
[14:27:42.479]      version = deviceID >> 28;
[14:27:42.479]        // -> [version <= 0x00000002]
[14:27:42.479]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:27:42.479]        // -> [partNum <= 0x0000BB88]
[14:27:42.479]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:27:42.479]        // -> [manuf <= 0x00000017]
[14:27:42.479]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:27:42.479]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:27:42.479]      isProduction = (version > 0);
[14:27:42.479]        // -> [isProduction <= 0x00000001]
[14:27:42.479]    </block>
[14:27:42.479]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:27:42.479]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:27:42.479]        // =>  FALSE
[14:27:42.479]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:27:42.479]    </control>
[14:27:42.479]    <control if="continueId == 4" while="" timeout="0" info="">
[14:27:42.479]      // if-block "continueId == 4"
[14:27:42.479]        // =>  FALSE
[14:27:42.479]      // skip if-block "continueId == 4"
[14:27:42.481]    </control>
[14:27:42.481]    <control if="!isProduction" while="" timeout="0" info="">
[14:27:42.481]      // if-block "!isProduction"
[14:27:42.481]        // =>  FALSE
[14:27:42.481]      // skip if-block "!isProduction"
[14:27:42.481]    </control>
[14:27:42.481]  </sequence>
[14:27:42.481]  
[14:37:03.144]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:37:03.144]  
[14:37:03.144]  <debugvars>
[14:37:03.144]    // Pre-defined
[14:37:03.144]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:37:03.144]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:37:03.144]    __dp=0x00000000
[14:37:03.144]    __ap=0x00000000
[14:37:03.144]    __traceout=0x00000000      (Trace Disabled)
[14:37:03.144]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:37:03.144]    __FlashAddr=0x00000000
[14:37:03.144]    __FlashLen=0x00000000
[14:37:03.148]    __FlashArg=0x00000000
[14:37:03.148]    __FlashOp=0x00000000
[14:37:03.148]    __Result=0x00000000
[14:37:03.148]  </debugvars>
[14:37:03.148]  
[14:37:03.148]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:37:03.148]    <block atomic="false" info="">
[14:37:03.148]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:37:03.148]        // -> [isSWJ <= 0x00000001]
[14:37:03.148]      __var hasDormant = __protocol & 0x00020000;
[14:37:03.148]        // -> [hasDormant <= 0x00000000]
[14:37:03.148]      __var protType   = __protocol & 0x0000FFFF;
[14:37:03.148]        // -> [protType <= 0x00000002]
[14:37:03.148]    </block>
[14:37:03.148]    <control if="protType == 1" while="" timeout="0" info="">
[14:37:03.148]      // if-block "protType == 1"
[14:37:03.148]        // =>  FALSE
[14:37:03.148]      // skip if-block "protType == 1"
[14:37:03.148]    </control>
[14:37:03.148]    <control if="protType == 2" while="" timeout="0" info="">
[14:37:03.148]      // if-block "protType == 2"
[14:37:03.151]        // =>  TRUE
[14:37:03.151]      <control if="isSWJ" while="" timeout="0" info="">
[14:37:03.151]        // if-block "isSWJ"
[14:37:03.151]          // =>  TRUE
[14:37:03.151]        <control if="hasDormant" while="" timeout="0" info="">
[14:37:03.151]          // if-block "hasDormant"
[14:37:03.151]            // =>  FALSE
[14:37:03.151]          // skip if-block "hasDormant"
[14:37:03.151]        </control>
[14:37:03.151]        <control if="!hasDormant" while="" timeout="0" info="">
[14:37:03.151]          // if-block "!hasDormant"
[14:37:03.151]            // =>  TRUE
[14:37:03.152]          <block atomic="false" info="">
[14:37:03.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:37:03.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:37:03.153]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:37:03.153]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:37:03.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:37:03.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:37:03.158]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:37:03.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:37:03.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:37:03.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:37:03.161]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:37:03.161]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:37:03.163]          </block>
[14:37:03.163]          // end if-block "!hasDormant"
[14:37:03.163]        </control>
[14:37:03.163]        // end if-block "isSWJ"
[14:37:03.163]      </control>
[14:37:03.163]      <control if="!isSWJ" while="" timeout="0" info="">
[14:37:03.163]        // if-block "!isSWJ"
[14:37:03.163]          // =>  FALSE
[14:37:03.163]        // skip if-block "!isSWJ"
[14:37:03.163]      </control>
[14:37:03.163]      <block atomic="false" info="">
[14:37:03.163]        ReadDP(0x0);
[14:37:03.165]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:37:03.165]      </block>
[14:37:03.165]      // end if-block "protType == 2"
[14:37:03.165]    </control>
[14:37:03.165]  </sequence>
[14:37:03.165]  
[14:37:03.170]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:37:03.170]  
[14:37:03.170]  <debugvars>
[14:37:03.170]    // Pre-defined
[14:37:03.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:37:03.170]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:37:03.170]    __dp=0x00000000
[14:37:03.170]    __ap=0x00000000
[14:37:03.170]    __traceout=0x00000000      (Trace Disabled)
[14:37:03.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:37:03.170]    __FlashAddr=0x00000000
[14:37:03.170]    __FlashLen=0x00000000
[14:37:03.170]    __FlashArg=0x00000000
[14:37:03.170]    __FlashOp=0x00000000
[14:37:03.170]    __Result=0x00000000
[14:37:03.170]  </debugvars>
[14:37:03.170]  
[14:37:03.170]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:37:03.170]    <block atomic="false" info="">
[14:37:03.170]      __var SW_DP_ABORT       = 0x0;
[14:37:03.170]        // -> [SW_DP_ABORT <= 0x00000000]
[14:37:03.170]      __var DP_CTRL_STAT      = 0x4;
[14:37:03.170]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:37:03.170]      __var DP_SELECT         = 0x8;
[14:37:03.170]        // -> [DP_SELECT <= 0x00000008]
[14:37:03.170]      __var powered_down      = 0;
[14:37:03.170]        // -> [powered_down <= 0x00000000]
[14:37:03.170]      WriteDP(DP_SELECT, 0x00000000);
[14:37:03.173]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:37:03.173]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:37:03.173]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:37:03.173]        // -> [powered_down <= 0x00000001]
[14:37:03.173]    </block>
[14:37:03.173]    <control if="powered_down" while="" timeout="0" info="">
[14:37:03.173]      // if-block "powered_down"
[14:37:03.173]        // =>  TRUE
[14:37:03.173]      <block atomic="false" info="">
[14:37:03.173]        Message(0, "Debug/System power-up request sent");
[14:37:03.178]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:37:03.178]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:37:03.178]      </block>
[14:37:03.182]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:37:03.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:37:03.182]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:37:03.186]        // while-condition  =>  FALSE
[14:37:03.186]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:37:03.186]      </control>
[14:37:03.187]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:37:03.187]        // if-block "(__protocol & 0xFFFF) == 1"
[14:37:03.187]          // =>  FALSE
[14:37:03.187]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:37:03.187]      </control>
[14:37:03.187]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:37:03.187]        // if-block "(__protocol & 0xFFFF) == 2"
[14:37:03.187]          // =>  TRUE
[14:37:03.187]        <block atomic="false" info="">
[14:37:03.187]          Message(0, "executing SWD power up");
[14:37:03.188]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:37:03.191]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:37:03.191]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:37:03.194]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:37:03.194]        </block>
[14:37:03.194]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:37:03.194]      </control>
[14:37:03.196]      // end if-block "powered_down"
[14:37:03.196]    </control>
[14:37:03.196]    <block atomic="false" info="">
[14:37:03.196]      __var DEBUG_PORT_VAL    = 0;
[14:37:03.196]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:37:03.196]      __var ACCESS_POINT_VAL  = 0;
[14:37:03.196]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:37:03.196]      __ap = 1; 
[14:37:03.196]        // -> [__ap <= 0x00000001]
[14:37:03.196]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:37:03.200]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:37:03.200]      __ap = 4;
[14:37:03.200]        // -> [__ap <= 0x00000004]
[14:37:03.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:37:03.204]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:37:03.204]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:37:03.204]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:37:03.207]    </block>
[14:37:03.207]    <block atomic="false" info="">
[14:37:03.207]      __var nReset = 0x80;
[14:37:03.207]        // -> [nReset <= 0x00000080]
[14:37:03.207]      __var canReadPins = 0;
[14:37:03.207]        // -> [canReadPins <= 0x00000000]
[14:37:03.207]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:37:03.208]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:37:03.208]        // -> [canReadPins <= 0x00000001]
[14:37:03.210]    </block>
[14:37:03.210]    <control if="" while="1" timeout="200" info="">
[14:37:03.210]      // while "1"  (timeout="200")
[14:37:03.210]      // while-condition  =>  TRUE
[14:37:03.210]      // while "1"  (timeout="200")
[14:37:03.210]      // while-condition  =>  TRUE
[14:37:03.211]      // while "1"  (timeout="200")
[14:37:03.211]      // while-condition  =>  TRUE
[14:37:03.211]      // while "1"  (timeout="200")
[14:37:03.211]      // while-condition  =>  TRUE
[14:37:03.211]      // while "1"  (timeout="200")
[14:37:03.211]      // while-condition  =>  TRUE
[14:37:03.211]      // while "1"  (timeout="200")
[14:37:03.211]      // while-condition  =>  TRUE
[14:37:03.211]      // while "1"  (timeout="200")
[14:37:03.211]      // while-condition  =>  TRUE
[14:37:03.213]      // while "1"  (timeout="200")
[14:37:03.213]      // while-condition  =>  TRUE
[14:37:03.213]      // while "1"  (timeout="200")
[14:37:03.213]      // while-condition  =>  TRUE
[14:37:03.213]      // while "1"  (timeout="200")
[14:37:03.213]      // while-condition  =>  TRUE
[14:37:03.213]      // while "1"  (timeout="200")
[14:37:03.213]      // while-condition  =>  TRUE
[14:37:03.213]      // while "1"  (timeout="200")
[14:37:03.213]      // while-condition  =>  TRUE
[14:37:03.213]      // while "1"  (timeout="200")
[14:37:03.214]      // while-condition  =>  TRUE
[14:37:03.214]      // while "1"  (timeout="200")
[14:37:03.214]      // while-condition  =>  TRUE
[14:37:03.214]      // while "1"  (timeout="200")
[14:37:03.214]      // while-condition  =>  TRUE
[14:37:03.214]      // while "1"  (timeout="200")
[14:37:03.214]      // while-condition  =>  TRUE
[14:37:03.214]      // while "1"  (timeout="200")
[14:37:03.214]      // while-condition  =>  TRUE
[14:37:03.214]      // while "1"  (timeout="200")
[14:37:03.215]      // while-condition  =>  TRUE
[14:37:03.215]      // while "1"  (timeout="200")
[14:37:03.215]      // while-condition  =>  TRUE
[14:37:03.215]      // while "1"  (timeout="200")
[14:37:03.215]      // while-condition  =>  TRUE
[14:37:03.215]      // while "1"  (timeout="200")
[14:37:03.215]      // while-condition  =>  TRUE
[14:37:03.215]      // while "1"  (timeout="200")
[14:37:03.215]      // while-condition  =>  TRUE
[14:37:03.215]      // while "1"  (timeout="200")
[14:37:03.215]      // while-condition  =>  TRUE
[14:37:03.216]      // while "1"  (timeout="200")
[14:37:03.216]      // while-condition  =>  TRUE
[14:37:03.216]      // while "1"  (timeout="200")
[14:37:03.216]      // while-condition  =>  TRUE
[14:37:03.216]      // while "1"  (timeout="200")
[14:37:03.216]      // while-condition  =>  TRUE
[14:37:03.216]      // while "1"  (timeout="200")
[14:37:03.216]      // while-condition  =>  TRUE
[14:37:03.216]      // while "1"  (timeout="200")
[14:37:03.216]      // while-condition  =>  TRUE
[14:37:03.216]      // while "1"  (timeout="200")
[14:37:03.217]      // while-condition  =>  TRUE
[14:37:03.217]      // while "1"  (timeout="200")
[14:37:03.217]      // while-condition  =>  TRUE
[14:37:03.217]      // while "1"  (timeout="200")
[14:37:03.217]      // while-condition  =>  TRUE
[14:37:03.217]      // while "1"  (timeout="200")
[14:37:03.217]      // while-condition  =>  TRUE
[14:37:03.217]      // while "1"  (timeout="200")
[14:37:03.218]      // while-condition  =>  TRUE
[14:37:03.218]      // while "1"  (timeout="200")
[14:37:03.218]      // while-condition  =>  TRUE
[14:37:03.218]      // while "1"  (timeout="200")
[14:37:03.218]      // while-condition  =>  TRUE
[14:37:03.218]      // while "1"  (timeout="200")
[14:37:03.218]      // while-condition  =>  TRUE
[14:37:03.218]      // while "1"  (timeout="200")
[14:37:03.219]      // while-condition  =>  TRUE
[14:37:03.219]      // while "1"  (timeout="200")
[14:37:03.219]      // while-condition  =>  TRUE
[14:37:03.219]      // while "1"  (timeout="200")
[14:37:03.219]      // while-condition  =>  TRUE
[14:37:03.219]      // while "1"  (timeout="200")
[14:37:03.219]      // while-condition  =>  TRUE
[14:37:03.219]      // while "1"  (timeout="200")
[14:37:03.219]      // while-condition  =>  TRUE
[14:37:03.219]      // while "1"  (timeout="200")
[14:37:03.219]      // while-condition  =>  TRUE
[14:37:03.219]      // while "1"  (timeout="200")
[14:37:03.220]      // while-condition  =>  TRUE
[14:37:03.220]      // while "1"  (timeout="200")
[14:37:03.220]      // while  =>  TIMEOUT
[14:37:03.220]      // end while "1"
[14:37:03.220]    </control>
[14:37:03.220]    <control if="canReadPins" while="" timeout="0" info="">
[14:37:03.220]      // if-block "canReadPins"
[14:37:03.220]        // =>  TRUE
[14:37:03.220]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:37:03.220]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:37:03.221]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:37:03.221]        // while-condition  =>  FALSE
[14:37:03.221]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:37:03.221]      </control>
[14:37:03.221]      // end if-block "canReadPins"
[14:37:03.223]    </control>
[14:37:03.223]    <control if="!canReadPins" while="" timeout="0" info="">
[14:37:03.223]      // if-block "!canReadPins"
[14:37:03.223]        // =>  FALSE
[14:37:03.223]      // skip if-block "!canReadPins"
[14:37:03.223]    </control>
[14:37:03.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:37:03.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:37:03.223]        // =>  TRUE
[14:37:03.223]      <block atomic="false" info="">
[14:37:03.223]        WriteAP(0x00, 0x190008);
[14:37:03.223]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:37:03.223]        WriteAP(0xF0, 0x01);
[14:37:03.228]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:37:03.228]      </block>
[14:37:03.228]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:37:03.228]    </control>
[14:37:03.228]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:37:03.228]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:37:03.228]        // =>  FALSE
[14:37:03.232]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:37:03.232]    </control>
[14:37:03.232]    <block atomic="false" info="">
[14:37:03.232]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:37:03.232]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:37:03.236]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:37:03.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:37:03.238]      __ap = 0; //lets make sure we reset the access point selection
[14:37:03.238]        // -> [__ap <= 0x00000000]
[14:37:03.238]    </block>
[14:37:03.238]  </sequence>
[14:37:03.238]  
[14:37:03.265]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:37:03.265]  
[14:37:03.265]  <debugvars>
[14:37:03.265]    // Pre-defined
[14:37:03.265]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:37:03.265]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:37:03.265]    __dp=0x00000000
[14:37:03.265]    __ap=0x00000000
[14:37:03.265]    __traceout=0x00000000      (Trace Disabled)
[14:37:03.265]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:37:03.265]    __FlashAddr=0x00000000
[14:37:03.265]    __FlashLen=0x00000000
[14:37:03.265]    __FlashArg=0x00000000
[14:37:03.265]    __FlashOp=0x00000000
[14:37:03.265]    __Result=0x00000000
[14:37:03.265]  </debugvars>
[14:37:03.265]  
[14:37:03.265]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:37:03.265]    <block atomic="false" info="">
[14:37:03.265]      __var deviceID = 0;
[14:37:03.265]        // -> [deviceID <= 0x00000000]
[14:37:03.265]      __var version = 0;
[14:37:03.265]        // -> [version <= 0x00000000]
[14:37:03.265]      __var partNum = 0;
[14:37:03.268]        // -> [partNum <= 0x00000000]
[14:37:03.268]      __var manuf = 0;
[14:37:03.268]        // -> [manuf <= 0x00000000]
[14:37:03.268]      __var isMSPM0G1X0X_G3X0X = 0;
[14:37:03.268]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:37:03.268]      __var isProduction = 0;
[14:37:03.269]        // -> [isProduction <= 0x00000000]
[14:37:03.269]      __var continueId = 0;
[14:37:03.269]        // -> [continueId <= 0x00000000]
[14:37:03.269]      deviceID =   Read32(0x41C40004);
[14:37:03.278]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:37:03.278]        // -> [deviceID <= 0x2BB8802F]
[14:37:03.278]      version = deviceID >> 28;
[14:37:03.278]        // -> [version <= 0x00000002]
[14:37:03.278]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:37:03.278]        // -> [partNum <= 0x0000BB88]
[14:37:03.278]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:37:03.278]        // -> [manuf <= 0x00000017]
[14:37:03.278]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:37:03.278]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:37:03.278]      isProduction = (version > 0);
[14:37:03.278]        // -> [isProduction <= 0x00000001]
[14:37:03.278]    </block>
[14:37:03.278]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:37:03.278]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:37:03.278]        // =>  FALSE
[14:37:03.278]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:37:03.278]    </control>
[14:37:03.278]    <control if="continueId == 4" while="" timeout="0" info="">
[14:37:03.278]      // if-block "continueId == 4"
[14:37:03.278]        // =>  FALSE
[14:37:03.278]      // skip if-block "continueId == 4"
[14:37:03.278]    </control>
[14:37:03.278]    <control if="!isProduction" while="" timeout="0" info="">
[14:37:03.278]      // if-block "!isProduction"
[14:37:03.278]        // =>  FALSE
[14:37:03.281]      // skip if-block "!isProduction"
[14:37:03.281]    </control>
[14:37:03.281]  </sequence>
[14:37:03.281]  
[14:39:12.894]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:39:12.894]  
[14:39:12.894]  <debugvars>
[14:39:12.894]    // Pre-defined
[14:39:12.894]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:39:12.894]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:39:12.897]    __dp=0x00000000
[14:39:12.897]    __ap=0x00000000
[14:39:12.897]    __traceout=0x00000000      (Trace Disabled)
[14:39:12.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:39:12.897]    __FlashAddr=0x00000000
[14:39:12.897]    __FlashLen=0x00000000
[14:39:12.897]    __FlashArg=0x00000000
[14:39:12.897]    __FlashOp=0x00000000
[14:39:12.897]    __Result=0x00000000
[14:39:12.897]  </debugvars>
[14:39:12.897]  
[14:39:12.897]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:39:12.897]    <block atomic="false" info="">
[14:39:12.897]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:39:12.897]        // -> [isSWJ <= 0x00000001]
[14:39:12.897]      __var hasDormant = __protocol & 0x00020000;
[14:39:12.897]        // -> [hasDormant <= 0x00000000]
[14:39:12.897]      __var protType   = __protocol & 0x0000FFFF;
[14:39:12.897]        // -> [protType <= 0x00000002]
[14:39:12.897]    </block>
[14:39:12.897]    <control if="protType == 1" while="" timeout="0" info="">
[14:39:12.897]      // if-block "protType == 1"
[14:39:12.897]        // =>  FALSE
[14:39:12.897]      // skip if-block "protType == 1"
[14:39:12.897]    </control>
[14:39:12.897]    <control if="protType == 2" while="" timeout="0" info="">
[14:39:12.897]      // if-block "protType == 2"
[14:39:12.897]        // =>  TRUE
[14:39:12.897]      <control if="isSWJ" while="" timeout="0" info="">
[14:39:12.897]        // if-block "isSWJ"
[14:39:12.897]          // =>  TRUE
[14:39:12.897]        <control if="hasDormant" while="" timeout="0" info="">
[14:39:12.897]          // if-block "hasDormant"
[14:39:12.897]            // =>  FALSE
[14:39:12.897]          // skip if-block "hasDormant"
[14:39:12.901]        </control>
[14:39:12.901]        <control if="!hasDormant" while="" timeout="0" info="">
[14:39:12.901]          // if-block "!hasDormant"
[14:39:12.901]            // =>  TRUE
[14:39:12.901]          <block atomic="false" info="">
[14:39:12.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:39:12.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:39:12.901]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:39:12.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:39:12.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:39:12.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:39:12.905]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:39:12.911]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:39:12.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:39:12.913]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:39:12.913]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:39:12.913]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:39:12.913]          </block>
[14:39:12.913]          // end if-block "!hasDormant"
[14:39:12.913]        </control>
[14:39:12.913]        // end if-block "isSWJ"
[14:39:12.913]      </control>
[14:39:12.913]      <control if="!isSWJ" while="" timeout="0" info="">
[14:39:12.913]        // if-block "!isSWJ"
[14:39:12.913]          // =>  FALSE
[14:39:12.913]        // skip if-block "!isSWJ"
[14:39:12.913]      </control>
[14:39:12.913]      <block atomic="false" info="">
[14:39:12.913]        ReadDP(0x0);
[14:39:12.919]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:39:12.919]      </block>
[14:39:12.919]      // end if-block "protType == 2"
[14:39:12.919]    </control>
[14:39:12.919]  </sequence>
[14:39:12.919]  
[14:39:12.921]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:39:12.921]  
[14:39:12.921]  <debugvars>
[14:39:12.921]    // Pre-defined
[14:39:12.921]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:39:12.921]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:39:12.921]    __dp=0x00000000
[14:39:12.921]    __ap=0x00000000
[14:39:12.921]    __traceout=0x00000000      (Trace Disabled)
[14:39:12.921]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:39:12.921]    __FlashAddr=0x00000000
[14:39:12.921]    __FlashLen=0x00000000
[14:39:12.921]    __FlashArg=0x00000000
[14:39:12.921]    __FlashOp=0x00000000
[14:39:12.925]    __Result=0x00000000
[14:39:12.925]  </debugvars>
[14:39:12.925]  
[14:39:12.925]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:39:12.925]    <block atomic="false" info="">
[14:39:12.925]      __var SW_DP_ABORT       = 0x0;
[14:39:12.925]        // -> [SW_DP_ABORT <= 0x00000000]
[14:39:12.925]      __var DP_CTRL_STAT      = 0x4;
[14:39:12.925]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:39:12.925]      __var DP_SELECT         = 0x8;
[14:39:12.925]        // -> [DP_SELECT <= 0x00000008]
[14:39:12.925]      __var powered_down      = 0;
[14:39:12.925]        // -> [powered_down <= 0x00000000]
[14:39:12.925]      WriteDP(DP_SELECT, 0x00000000);
[14:39:12.933]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:39:12.933]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:39:12.933]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:39:12.933]        // -> [powered_down <= 0x00000001]
[14:39:12.933]    </block>
[14:39:12.933]    <control if="powered_down" while="" timeout="0" info="">
[14:39:12.933]      // if-block "powered_down"
[14:39:12.933]        // =>  TRUE
[14:39:12.933]      <block atomic="false" info="">
[14:39:12.933]        Message(0, "Debug/System power-up request sent");
[14:39:12.937]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:39:12.941]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:39:12.941]      </block>
[14:39:12.941]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:39:12.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:39:12.941]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:39:12.941]        // while-condition  =>  FALSE
[14:39:12.941]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:39:12.941]      </control>
[14:39:12.941]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:39:12.941]        // if-block "(__protocol & 0xFFFF) == 1"
[14:39:12.941]          // =>  FALSE
[14:39:12.941]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:39:12.941]      </control>
[14:39:12.941]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:39:12.941]        // if-block "(__protocol & 0xFFFF) == 2"
[14:39:12.941]          // =>  TRUE
[14:39:12.941]        <block atomic="false" info="">
[14:39:12.941]          Message(0, "executing SWD power up");
[14:39:12.945]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:39:12.946]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:39:12.947]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:39:12.949]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:39:12.949]        </block>
[14:39:12.949]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:39:12.949]      </control>
[14:39:12.949]      // end if-block "powered_down"
[14:39:12.949]    </control>
[14:39:12.949]    <block atomic="false" info="">
[14:39:12.950]      __var DEBUG_PORT_VAL    = 0;
[14:39:12.950]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:39:12.950]      __var ACCESS_POINT_VAL  = 0;
[14:39:12.950]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:39:12.950]      __ap = 1; 
[14:39:12.950]        // -> [__ap <= 0x00000001]
[14:39:12.950]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:39:12.961]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:39:12.962]      __ap = 4;
[14:39:12.962]        // -> [__ap <= 0x00000004]
[14:39:12.962]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:39:12.966]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:39:12.966]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:39:12.966]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:39:12.966]    </block>
[14:39:12.966]    <block atomic="false" info="">
[14:39:12.966]      __var nReset = 0x80;
[14:39:12.966]        // -> [nReset <= 0x00000080]
[14:39:12.966]      __var canReadPins = 0;
[14:39:12.966]        // -> [canReadPins <= 0x00000000]
[14:39:12.966]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:39:12.971]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:39:12.971]        // -> [canReadPins <= 0x00000001]
[14:39:12.971]    </block>
[14:39:12.971]    <control if="" while="1" timeout="200" info="">
[14:39:12.971]      // while "1"  (timeout="200")
[14:39:12.971]      // while-condition  =>  TRUE
[14:39:12.971]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.972]      // while-condition  =>  TRUE
[14:39:12.972]      // while "1"  (timeout="200")
[14:39:12.974]      // while-condition  =>  TRUE
[14:39:12.974]      // while "1"  (timeout="200")
[14:39:12.974]      // while-condition  =>  TRUE
[14:39:12.974]      // while "1"  (timeout="200")
[14:39:12.974]      // while-condition  =>  TRUE
[14:39:12.974]      // while "1"  (timeout="200")
[14:39:12.974]      // while-condition  =>  TRUE
[14:39:12.974]      // while "1"  (timeout="200")
[14:39:12.974]      // while-condition  =>  TRUE
[14:39:12.974]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.975]      // while-condition  =>  TRUE
[14:39:12.975]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.978]      // while "1"  (timeout="200")
[14:39:12.978]      // while-condition  =>  TRUE
[14:39:12.980]      // while "1"  (timeout="200")
[14:39:12.980]      // while-condition  =>  TRUE
[14:39:12.980]      // while "1"  (timeout="200")
[14:39:12.980]      // while-condition  =>  TRUE
[14:39:12.980]      // while "1"  (timeout="200")
[14:39:12.980]      // while-condition  =>  TRUE
[14:39:12.980]      // while "1"  (timeout="200")
[14:39:12.980]      // while-condition  =>  TRUE
[14:39:12.980]      // while "1"  (timeout="200")
[14:39:12.980]      // while-condition  =>  TRUE
[14:39:12.980]      // while "1"  (timeout="200")
[14:39:12.980]      // while-condition  =>  TRUE
[14:39:12.980]      // while "1"  (timeout="200")
[14:39:12.980]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.982]      // while "1"  (timeout="200")
[14:39:12.982]      // while-condition  =>  TRUE
[14:39:12.986]      // while "1"  (timeout="200")
[14:39:12.986]      // while  =>  TIMEOUT
[14:39:12.986]      // end while "1"
[14:39:12.986]    </control>
[14:39:12.986]    <control if="canReadPins" while="" timeout="0" info="">
[14:39:12.986]      // if-block "canReadPins"
[14:39:12.986]        // =>  TRUE
[14:39:12.986]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:39:12.986]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:39:12.995]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:39:12.995]        // while-condition  =>  FALSE
[14:39:12.995]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:39:12.996]      </control>
[14:39:12.996]      // end if-block "canReadPins"
[14:39:12.996]    </control>
[14:39:12.996]    <control if="!canReadPins" while="" timeout="0" info="">
[14:39:12.996]      // if-block "!canReadPins"
[14:39:12.996]        // =>  FALSE
[14:39:12.996]      // skip if-block "!canReadPins"
[14:39:12.996]    </control>
[14:39:12.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:39:12.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:39:12.996]        // =>  TRUE
[14:39:12.996]      <block atomic="false" info="">
[14:39:12.996]        WriteAP(0x00, 0x190008);
[14:39:12.999]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:39:12.999]        WriteAP(0xF0, 0x01);
[14:39:13.003]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:39:13.003]      </block>
[14:39:13.003]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:39:13.003]    </control>
[14:39:13.003]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:39:13.003]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:39:13.003]        // =>  FALSE
[14:39:13.003]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:39:13.003]    </control>
[14:39:13.003]    <block atomic="false" info="">
[14:39:13.003]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:39:13.011]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:39:13.015]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:39:13.015]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:39:13.015]      __ap = 0; //lets make sure we reset the access point selection
[14:39:13.015]        // -> [__ap <= 0x00000000]
[14:39:13.015]    </block>
[14:39:13.015]  </sequence>
[14:39:13.015]  
[14:39:13.044]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:39:13.044]  
[14:39:13.044]  <debugvars>
[14:39:13.044]    // Pre-defined
[14:39:13.044]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:39:13.044]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:39:13.044]    __dp=0x00000000
[14:39:13.044]    __ap=0x00000000
[14:39:13.044]    __traceout=0x00000000      (Trace Disabled)
[14:39:13.046]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:39:13.046]    __FlashAddr=0x00000000
[14:39:13.046]    __FlashLen=0x00000000
[14:39:13.046]    __FlashArg=0x00000000
[14:39:13.046]    __FlashOp=0x00000000
[14:39:13.046]    __Result=0x00000000
[14:39:13.046]  </debugvars>
[14:39:13.046]  
[14:39:13.046]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:39:13.046]    <block atomic="false" info="">
[14:39:13.046]      __var deviceID = 0;
[14:39:13.046]        // -> [deviceID <= 0x00000000]
[14:39:13.046]      __var version = 0;
[14:39:13.046]        // -> [version <= 0x00000000]
[14:39:13.046]      __var partNum = 0;
[14:39:13.046]        // -> [partNum <= 0x00000000]
[14:39:13.046]      __var manuf = 0;
[14:39:13.046]        // -> [manuf <= 0x00000000]
[14:39:13.046]      __var isMSPM0G1X0X_G3X0X = 0;
[14:39:13.046]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:39:13.046]      __var isProduction = 0;
[14:39:13.046]        // -> [isProduction <= 0x00000000]
[14:39:13.046]      __var continueId = 0;
[14:39:13.046]        // -> [continueId <= 0x00000000]
[14:39:13.046]      deviceID =   Read32(0x41C40004);
[14:39:13.061]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:39:13.061]        // -> [deviceID <= 0x2BB8802F]
[14:39:13.061]      version = deviceID >> 28;
[14:39:13.061]        // -> [version <= 0x00000002]
[14:39:13.061]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:39:13.061]        // -> [partNum <= 0x0000BB88]
[14:39:13.061]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:39:13.061]        // -> [manuf <= 0x00000017]
[14:39:13.061]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:39:13.061]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:39:13.061]      isProduction = (version > 0);
[14:39:13.061]        // -> [isProduction <= 0x00000001]
[14:39:13.061]    </block>
[14:39:13.061]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:39:13.061]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:39:13.061]        // =>  FALSE
[14:39:13.061]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:39:13.061]    </control>
[14:39:13.061]    <control if="continueId == 4" while="" timeout="0" info="">
[14:39:13.061]      // if-block "continueId == 4"
[14:39:13.061]        // =>  FALSE
[14:39:13.064]      // skip if-block "continueId == 4"
[14:39:13.064]    </control>
[14:39:13.064]    <control if="!isProduction" while="" timeout="0" info="">
[14:39:13.064]      // if-block "!isProduction"
[14:39:13.064]        // =>  FALSE
[14:39:13.064]      // skip if-block "!isProduction"
[14:39:13.064]    </control>
[14:39:13.064]  </sequence>
[14:39:13.064]  
