/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0011.log
 *  Created     : 21:42:24 (23/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[21:42:24.763]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:42:24.763]  
[21:42:24.764]  <debugvars>
[21:42:24.764]    // Pre-defined
[21:42:24.764]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:24.764]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:42:24.764]    __dp=0x00000000
[21:42:24.765]    __ap=0x00000000
[21:42:24.765]    __traceout=0x00000000      (Trace Disabled)
[21:42:24.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:24.765]    __FlashAddr=0x00000000
[21:42:24.765]    __FlashLen=0x00000000
[21:42:24.765]    __FlashArg=0x00000000
[21:42:24.765]    __FlashOp=0x00000000
[21:42:24.765]    __Result=0x00000000
[21:42:24.765]  </debugvars>
[21:42:24.765]  
[21:42:24.765]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:42:24.765]    <block atomic="false" info="">
[21:42:24.765]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:42:24.766]        // -> [isSWJ <= 0x00000001]
[21:42:24.766]      __var hasDormant = __protocol & 0x00020000;
[21:42:24.766]        // -> [hasDormant <= 0x00000000]
[21:42:24.766]      __var protType   = __protocol & 0x0000FFFF;
[21:42:24.766]        // -> [protType <= 0x00000002]
[21:42:24.766]    </block>
[21:42:24.766]    <control if="protType == 1" while="" timeout="0" info="">
[21:42:24.766]      // if-block "protType == 1"
[21:42:24.766]        // =>  FALSE
[21:42:24.766]      // skip if-block "protType == 1"
[21:42:24.766]    </control>
[21:42:24.766]    <control if="protType == 2" while="" timeout="0" info="">
[21:42:24.766]      // if-block "protType == 2"
[21:42:24.767]        // =>  TRUE
[21:42:24.767]      <control if="isSWJ" while="" timeout="0" info="">
[21:42:24.767]        // if-block "isSWJ"
[21:42:24.767]          // =>  TRUE
[21:42:24.767]        <control if="hasDormant" while="" timeout="0" info="">
[21:42:24.767]          // if-block "hasDormant"
[21:42:24.767]            // =>  FALSE
[21:42:24.767]          // skip if-block "hasDormant"
[21:42:24.767]        </control>
[21:42:24.767]        <control if="!hasDormant" while="" timeout="0" info="">
[21:42:24.767]          // if-block "!hasDormant"
[21:42:24.767]            // =>  TRUE
[21:42:24.767]          <block atomic="false" info="">
[21:42:24.767]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:42:24.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:24.769]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:42:24.769]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:42:24.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:42:24.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:24.770]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:42:24.770]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:42:24.770]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:42:24.771]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:24.771]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:42:24.771]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:42:24.771]          </block>
[21:42:24.771]          // end if-block "!hasDormant"
[21:42:24.771]        </control>
[21:42:24.771]        // end if-block "isSWJ"
[21:42:24.772]      </control>
[21:42:24.772]      <control if="!isSWJ" while="" timeout="0" info="">
[21:42:24.772]        // if-block "!isSWJ"
[21:42:24.772]          // =>  FALSE
[21:42:24.773]        // skip if-block "!isSWJ"
[21:42:24.773]      </control>
[21:42:24.773]      <block atomic="false" info="">
[21:42:24.773]        ReadDP(0x0);
[21:42:24.773]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:42:24.774]      </block>
[21:42:24.774]      // end if-block "protType == 2"
[21:42:24.774]    </control>
[21:42:24.774]  </sequence>
[21:42:24.774]  
[21:42:24.774]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:42:24.774]  
[21:42:24.775]  <debugvars>
[21:42:24.775]    // Pre-defined
[21:42:24.775]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:24.775]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:42:24.775]    __dp=0x00000000
[21:42:24.775]    __ap=0x00000000
[21:42:24.775]    __traceout=0x00000000      (Trace Disabled)
[21:42:24.775]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:24.775]    __FlashAddr=0x00000000
[21:42:24.775]    __FlashLen=0x00000000
[21:42:24.775]    __FlashArg=0x00000000
[21:42:24.775]    __FlashOp=0x00000000
[21:42:24.777]    __Result=0x00000000
[21:42:24.777]  </debugvars>
[21:42:24.777]  
[21:42:24.777]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:42:24.777]    <block atomic="false" info="">
[21:42:24.777]      __var SW_DP_ABORT       = 0x0;
[21:42:24.777]        // -> [SW_DP_ABORT <= 0x00000000]
[21:42:24.777]      __var DP_CTRL_STAT      = 0x4;
[21:42:24.777]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:42:24.777]      __var DP_SELECT         = 0x8;
[21:42:24.778]        // -> [DP_SELECT <= 0x00000008]
[21:42:24.778]      __var powered_down      = 0;
[21:42:24.778]        // -> [powered_down <= 0x00000000]
[21:42:24.778]      WriteDP(DP_SELECT, 0x00000000);
[21:42:24.778]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:42:24.778]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:42:24.779]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:42:24.779]        // -> [powered_down <= 0x00000001]
[21:42:24.779]    </block>
[21:42:24.779]    <control if="powered_down" while="" timeout="0" info="">
[21:42:24.780]      // if-block "powered_down"
[21:42:24.780]        // =>  TRUE
[21:42:24.780]      <block atomic="false" info="">
[21:42:24.780]        Message(0, "Debug/System power-up request sent");
[21:42:24.786]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:42:24.787]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:42:24.787]      </block>
[21:42:24.787]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:42:24.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:42:24.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:42:24.788]        // while-condition  =>  FALSE
[21:42:24.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:42:24.788]      </control>
[21:42:24.789]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:42:24.789]        // if-block "(__protocol & 0xFFFF) == 1"
[21:42:24.789]          // =>  FALSE
[21:42:24.789]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:42:24.789]      </control>
[21:42:24.789]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:42:24.789]        // if-block "(__protocol & 0xFFFF) == 2"
[21:42:24.789]          // =>  TRUE
[21:42:24.789]        <block atomic="false" info="">
[21:42:24.789]          Message(0, "executing SWD power up");
[21:42:24.791]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:42:24.791]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:42:24.791]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:42:24.792]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:42:24.792]        </block>
[21:42:24.792]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:42:24.792]      </control>
[21:42:24.792]      // end if-block "powered_down"
[21:42:24.792]    </control>
[21:42:24.792]    <block atomic="false" info="">
[21:42:24.793]      __var DEBUG_PORT_VAL    = 0;
[21:42:24.793]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:42:24.793]      __var ACCESS_POINT_VAL  = 0;
[21:42:24.793]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:42:24.793]      __ap = 1; 
[21:42:24.793]        // -> [__ap <= 0x00000001]
[21:42:24.793]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:42:24.795]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:42:24.795]      __ap = 4;
[21:42:24.795]        // -> [__ap <= 0x00000004]
[21:42:24.795]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:24.796]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:42:24.796]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:42:24.796]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:42:24.798]    </block>
[21:42:24.798]    <block atomic="false" info="">
[21:42:24.799]      __var nReset = 0x80;
[21:42:24.799]        // -> [nReset <= 0x00000080]
[21:42:24.799]      __var canReadPins = 0;
[21:42:24.799]        // -> [canReadPins <= 0x00000000]
[21:42:24.799]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:42:24.799]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:42:24.799]        // -> [canReadPins <= 0x00000001]
[21:42:24.800]    </block>
[21:42:24.800]    <control if="" while="1" timeout="200" info="">
[21:42:24.800]      // while "1"  (timeout="200")
[21:42:24.800]      // while-condition  =>  TRUE
[21:42:24.800]      // while "1"  (timeout="200")
[21:42:24.800]      // while-condition  =>  TRUE
[21:42:24.800]      // while "1"  (timeout="200")
[21:42:24.800]      // while-condition  =>  TRUE
[21:42:24.800]      // while "1"  (timeout="200")
[21:42:24.800]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.801]      // while "1"  (timeout="200")
[21:42:24.801]      // while-condition  =>  TRUE
[21:42:24.802]      // while "1"  (timeout="200")
[21:42:24.802]      // while-condition  =>  TRUE
[21:42:24.802]      // while "1"  (timeout="200")
[21:42:24.802]      // while-condition  =>  TRUE
[21:42:24.802]      // while "1"  (timeout="200")
[21:42:24.802]      // while-condition  =>  TRUE
[21:42:24.802]      // while "1"  (timeout="200")
[21:42:24.802]      // while-condition  =>  TRUE
[21:42:24.802]      // while "1"  (timeout="200")
[21:42:24.802]      // while-condition  =>  TRUE
[21:42:24.802]      // while "1"  (timeout="200")
[21:42:24.803]      // while-condition  =>  TRUE
[21:42:24.803]      // while "1"  (timeout="200")
[21:42:24.803]      // while  =>  TIMEOUT
[21:42:24.803]      // end while "1"
[21:42:24.803]    </control>
[21:42:24.803]    <control if="canReadPins" while="" timeout="0" info="">
[21:42:24.803]      // if-block "canReadPins"
[21:42:24.803]        // =>  TRUE
[21:42:24.803]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:42:24.803]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:42:24.804]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:42:24.805]        // while-condition  =>  FALSE
[21:42:24.805]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:42:24.805]      </control>
[21:42:24.805]      // end if-block "canReadPins"
[21:42:24.805]    </control>
[21:42:24.805]    <control if="!canReadPins" while="" timeout="0" info="">
[21:42:24.805]      // if-block "!canReadPins"
[21:42:24.805]        // =>  FALSE
[21:42:24.805]      // skip if-block "!canReadPins"
[21:42:24.805]    </control>
[21:42:24.805]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:42:24.805]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:24.805]        // =>  TRUE
[21:42:24.805]      <block atomic="false" info="">
[21:42:24.805]        WriteAP(0x00, 0x190008);
[21:42:24.806]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:24.806]        WriteAP(0xF0, 0x01);
[21:42:24.808]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:24.808]      </block>
[21:42:24.808]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:24.808]    </control>
[21:42:24.808]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:42:24.808]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:24.808]        // =>  FALSE
[21:42:24.808]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:24.808]    </control>
[21:42:24.808]    <block atomic="false" info="">
[21:42:24.809]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:24.810]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:42:24.810]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:42:24.810]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:42:24.812]      __ap = 0; //lets make sure we reset the access point selection
[21:42:24.812]        // -> [__ap <= 0x00000000]
[21:42:24.812]    </block>
[21:42:24.812]  </sequence>
[21:42:24.812]  
[21:42:24.819]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:42:24.819]  
[21:42:24.819]  <debugvars>
[21:42:24.819]    // Pre-defined
[21:42:24.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:24.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:42:24.819]    __dp=0x00000000
[21:42:24.820]    __ap=0x00000000
[21:42:24.820]    __traceout=0x00000000      (Trace Disabled)
[21:42:24.820]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:24.820]    __FlashAddr=0x00000000
[21:42:24.820]    __FlashLen=0x00000000
[21:42:24.820]    __FlashArg=0x00000000
[21:42:24.820]    __FlashOp=0x00000000
[21:42:24.820]    __Result=0x00000000
[21:42:24.820]  </debugvars>
[21:42:24.820]  
[21:42:24.821]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:42:24.821]    <block atomic="false" info="">
[21:42:24.821]      __var deviceID = 0;
[21:42:24.821]        // -> [deviceID <= 0x00000000]
[21:42:24.821]      __var version = 0;
[21:42:24.822]        // -> [version <= 0x00000000]
[21:42:24.822]      __var partNum = 0;
[21:42:24.822]        // -> [partNum <= 0x00000000]
[21:42:24.822]      __var manuf = 0;
[21:42:24.822]        // -> [manuf <= 0x00000000]
[21:42:24.823]      __var isMSPM0G1X0X_G3X0X = 0;
[21:42:24.823]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:42:24.823]      __var isProduction = 0;
[21:42:24.823]        // -> [isProduction <= 0x00000000]
[21:42:24.823]      __var continueId = 0;
[21:42:24.823]        // -> [continueId <= 0x00000000]
[21:42:24.823]      deviceID =   Read32(0x41C40004);
[21:42:24.825]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:42:24.825]        // -> [deviceID <= 0x2BB8802F]
[21:42:24.825]      version = deviceID >> 28;
[21:42:24.825]        // -> [version <= 0x00000002]
[21:42:24.825]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:42:24.825]        // -> [partNum <= 0x0000BB88]
[21:42:24.825]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:42:24.825]        // -> [manuf <= 0x00000017]
[21:42:24.825]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:42:24.825]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:42:24.826]      isProduction = (version > 0);
[21:42:24.826]        // -> [isProduction <= 0x00000001]
[21:42:24.826]    </block>
[21:42:24.826]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:42:24.826]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:42:24.826]        // =>  FALSE
[21:42:24.826]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:42:24.826]    </control>
[21:42:24.826]    <control if="continueId == 4" while="" timeout="0" info="">
[21:42:24.827]      // if-block "continueId == 4"
[21:42:24.827]        // =>  FALSE
[21:42:24.827]      // skip if-block "continueId == 4"
[21:42:24.827]    </control>
[21:42:24.827]    <control if="!isProduction" while="" timeout="0" info="">
[21:42:24.827]      // if-block "!isProduction"
[21:42:24.827]        // =>  FALSE
[21:42:24.827]      // skip if-block "!isProduction"
[21:42:24.828]    </control>
[21:42:24.829]  </sequence>
[21:42:24.829]  
[21:42:27.483]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:42:27.483]  
[21:42:27.484]  <debugvars>
[21:42:27.484]    // Pre-defined
[21:42:27.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:27.484]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:42:27.484]    __dp=0x00000000
[21:42:27.484]    __ap=0x00000000
[21:42:27.484]    __traceout=0x00000000      (Trace Disabled)
[21:42:27.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:27.484]    __FlashAddr=0x00000000
[21:42:27.484]    __FlashLen=0x00000000
[21:42:27.484]    __FlashArg=0x00000000
[21:42:27.484]    __FlashOp=0x00000000
[21:42:27.484]    __Result=0x00000000
[21:42:27.485]  </debugvars>
[21:42:27.485]  
[21:42:27.485]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:42:27.485]    <block atomic="false" info="">
[21:42:27.485]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:42:27.485]        // -> [isSWJ <= 0x00000001]
[21:42:27.485]      __var hasDormant = __protocol & 0x00020000;
[21:42:27.485]        // -> [hasDormant <= 0x00000000]
[21:42:27.485]      __var protType   = __protocol & 0x0000FFFF;
[21:42:27.485]        // -> [protType <= 0x00000002]
[21:42:27.485]    </block>
[21:42:27.486]    <control if="protType == 1" while="" timeout="0" info="">
[21:42:27.486]      // if-block "protType == 1"
[21:42:27.486]        // =>  FALSE
[21:42:27.486]      // skip if-block "protType == 1"
[21:42:27.486]    </control>
[21:42:27.486]    <control if="protType == 2" while="" timeout="0" info="">
[21:42:27.486]      // if-block "protType == 2"
[21:42:27.486]        // =>  TRUE
[21:42:27.486]      <control if="isSWJ" while="" timeout="0" info="">
[21:42:27.487]        // if-block "isSWJ"
[21:42:27.487]          // =>  TRUE
[21:42:27.487]        <control if="hasDormant" while="" timeout="0" info="">
[21:42:27.487]          // if-block "hasDormant"
[21:42:27.487]            // =>  FALSE
[21:42:27.487]          // skip if-block "hasDormant"
[21:42:27.487]        </control>
[21:42:27.487]        <control if="!hasDormant" while="" timeout="0" info="">
[21:42:27.487]          // if-block "!hasDormant"
[21:42:27.488]            // =>  TRUE
[21:42:27.488]          <block atomic="false" info="">
[21:42:27.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:42:27.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:27.489]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:42:27.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:42:27.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:42:27.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:27.490]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:42:27.490]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:42:27.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:42:27.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:27.490]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:42:27.491]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:42:27.491]          </block>
[21:42:27.491]          // end if-block "!hasDormant"
[21:42:27.491]        </control>
[21:42:27.491]        // end if-block "isSWJ"
[21:42:27.492]      </control>
[21:42:27.492]      <control if="!isSWJ" while="" timeout="0" info="">
[21:42:27.492]        // if-block "!isSWJ"
[21:42:27.492]          // =>  FALSE
[21:42:27.492]        // skip if-block "!isSWJ"
[21:42:27.492]      </control>
[21:42:27.492]      <block atomic="false" info="">
[21:42:27.492]        ReadDP(0x0);
[21:42:27.492]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:42:27.492]      </block>
[21:42:27.494]      // end if-block "protType == 2"
[21:42:27.494]    </control>
[21:42:27.494]  </sequence>
[21:42:27.494]  
[21:42:27.494]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:42:27.494]  
[21:42:27.494]  <debugvars>
[21:42:27.495]    // Pre-defined
[21:42:27.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:27.495]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:42:27.495]    __dp=0x00000000
[21:42:27.495]    __ap=0x00000000
[21:42:27.495]    __traceout=0x00000000      (Trace Disabled)
[21:42:27.495]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:27.495]    __FlashAddr=0x00000000
[21:42:27.495]    __FlashLen=0x00000000
[21:42:27.495]    __FlashArg=0x00000000
[21:42:27.495]    __FlashOp=0x00000000
[21:42:27.495]    __Result=0x00000000
[21:42:27.496]  </debugvars>
[21:42:27.496]  
[21:42:27.496]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:42:27.496]    <block atomic="false" info="">
[21:42:27.496]      __var SW_DP_ABORT       = 0x0;
[21:42:27.496]        // -> [SW_DP_ABORT <= 0x00000000]
[21:42:27.496]      __var DP_CTRL_STAT      = 0x4;
[21:42:27.496]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:42:27.496]      __var DP_SELECT         = 0x8;
[21:42:27.496]        // -> [DP_SELECT <= 0x00000008]
[21:42:27.496]      __var powered_down      = 0;
[21:42:27.496]        // -> [powered_down <= 0x00000000]
[21:42:27.498]      WriteDP(DP_SELECT, 0x00000000);
[21:42:27.498]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:42:27.498]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:42:27.498]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:42:27.499]        // -> [powered_down <= 0x00000001]
[21:42:27.499]    </block>
[21:42:27.499]    <control if="powered_down" while="" timeout="0" info="">
[21:42:27.500]      // if-block "powered_down"
[21:42:27.500]        // =>  TRUE
[21:42:27.500]      <block atomic="false" info="">
[21:42:27.500]        Message(0, "Debug/System power-up request sent");
[21:42:27.501]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:42:27.502]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:42:27.502]      </block>
[21:42:27.503]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:42:27.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:42:27.503]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:42:27.503]        // while-condition  =>  FALSE
[21:42:27.503]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:42:27.503]      </control>
[21:42:27.503]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:42:27.503]        // if-block "(__protocol & 0xFFFF) == 1"
[21:42:27.503]          // =>  FALSE
[21:42:27.504]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:42:27.504]      </control>
[21:42:27.505]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:42:27.505]        // if-block "(__protocol & 0xFFFF) == 2"
[21:42:27.505]          // =>  TRUE
[21:42:27.505]        <block atomic="false" info="">
[21:42:27.505]          Message(0, "executing SWD power up");
[21:42:27.506]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:42:27.507]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:42:27.507]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:42:27.508]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:42:27.508]        </block>
[21:42:27.508]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:42:27.508]      </control>
[21:42:27.508]      // end if-block "powered_down"
[21:42:27.509]    </control>
[21:42:27.509]    <block atomic="false" info="">
[21:42:27.509]      __var DEBUG_PORT_VAL    = 0;
[21:42:27.509]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:42:27.509]      __var ACCESS_POINT_VAL  = 0;
[21:42:27.509]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:42:27.509]      __ap = 1; 
[21:42:27.509]        // -> [__ap <= 0x00000001]
[21:42:27.510]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:42:27.511]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:42:27.511]      __ap = 4;
[21:42:27.511]        // -> [__ap <= 0x00000004]
[21:42:27.511]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:27.512]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:42:27.512]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:42:27.512]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:42:27.514]    </block>
[21:42:27.514]    <block atomic="false" info="">
[21:42:27.514]      __var nReset = 0x80;
[21:42:27.514]        // -> [nReset <= 0x00000080]
[21:42:27.514]      __var canReadPins = 0;
[21:42:27.514]        // -> [canReadPins <= 0x00000000]
[21:42:27.514]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:42:27.515]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:42:27.515]        // -> [canReadPins <= 0x00000001]
[21:42:27.515]    </block>
[21:42:27.515]    <control if="" while="1" timeout="200" info="">
[21:42:27.515]      // while "1"  (timeout="200")
[21:42:27.515]      // while-condition  =>  TRUE
[21:42:27.515]      // while "1"  (timeout="200")
[21:42:27.515]      // while-condition  =>  TRUE
[21:42:27.515]      // while "1"  (timeout="200")
[21:42:27.515]      // while-condition  =>  TRUE
[21:42:27.515]      // while "1"  (timeout="200")
[21:42:27.516]      // while-condition  =>  TRUE
[21:42:27.516]      // while "1"  (timeout="200")
[21:42:27.516]      // while-condition  =>  TRUE
[21:42:27.516]      // while "1"  (timeout="200")
[21:42:27.516]      // while-condition  =>  TRUE
[21:42:27.516]      // while "1"  (timeout="200")
[21:42:27.516]      // while-condition  =>  TRUE
[21:42:27.516]      // while "1"  (timeout="200")
[21:42:27.516]      // while-condition  =>  TRUE
[21:42:27.516]      // while "1"  (timeout="200")
[21:42:27.517]      // while-condition  =>  TRUE
[21:42:27.517]      // while "1"  (timeout="200")
[21:42:27.517]      // while-condition  =>  TRUE
[21:42:27.517]      // while "1"  (timeout="200")
[21:42:27.517]      // while-condition  =>  TRUE
[21:42:27.517]      // while "1"  (timeout="200")
[21:42:27.517]      // while-condition  =>  TRUE
[21:42:27.517]      // while "1"  (timeout="200")
[21:42:27.517]      // while-condition  =>  TRUE
[21:42:27.517]      // while "1"  (timeout="200")
[21:42:27.518]      // while-condition  =>  TRUE
[21:42:27.518]      // while "1"  (timeout="200")
[21:42:27.518]      // while-condition  =>  TRUE
[21:42:27.518]      // while "1"  (timeout="200")
[21:42:27.518]      // while-condition  =>  TRUE
[21:42:27.518]      // while "1"  (timeout="200")
[21:42:27.518]      // while-condition  =>  TRUE
[21:42:27.518]      // while "1"  (timeout="200")
[21:42:27.518]      // while-condition  =>  TRUE
[21:42:27.519]      // while "1"  (timeout="200")
[21:42:27.519]      // while-condition  =>  TRUE
[21:42:27.519]      // while "1"  (timeout="200")
[21:42:27.519]      // while-condition  =>  TRUE
[21:42:27.519]      // while "1"  (timeout="200")
[21:42:27.519]      // while-condition  =>  TRUE
[21:42:27.519]      // while "1"  (timeout="200")
[21:42:27.519]      // while-condition  =>  TRUE
[21:42:27.519]      // while "1"  (timeout="200")
[21:42:27.519]      // while-condition  =>  TRUE
[21:42:27.519]      // while "1"  (timeout="200")
[21:42:27.520]      // while-condition  =>  TRUE
[21:42:27.520]      // while "1"  (timeout="200")
[21:42:27.520]      // while-condition  =>  TRUE
[21:42:27.520]      // while "1"  (timeout="200")
[21:42:27.520]      // while-condition  =>  TRUE
[21:42:27.520]      // while "1"  (timeout="200")
[21:42:27.520]      // while-condition  =>  TRUE
[21:42:27.520]      // while "1"  (timeout="200")
[21:42:27.520]      // while-condition  =>  TRUE
[21:42:27.520]      // while "1"  (timeout="200")
[21:42:27.521]      // while-condition  =>  TRUE
[21:42:27.521]      // while "1"  (timeout="200")
[21:42:27.521]      // while-condition  =>  TRUE
[21:42:27.521]      // while "1"  (timeout="200")
[21:42:27.521]      // while-condition  =>  TRUE
[21:42:27.521]      // while "1"  (timeout="200")
[21:42:27.521]      // while-condition  =>  TRUE
[21:42:27.521]      // while "1"  (timeout="200")
[21:42:27.521]      // while-condition  =>  TRUE
[21:42:27.521]      // while "1"  (timeout="200")
[21:42:27.521]      // while-condition  =>  TRUE
[21:42:27.521]      // while "1"  (timeout="200")
[21:42:27.522]      // while-condition  =>  TRUE
[21:42:27.522]      // while "1"  (timeout="200")
[21:42:27.522]      // while  =>  TIMEOUT
[21:42:27.522]      // end while "1"
[21:42:27.522]    </control>
[21:42:27.522]    <control if="canReadPins" while="" timeout="0" info="">
[21:42:27.522]      // if-block "canReadPins"
[21:42:27.522]        // =>  TRUE
[21:42:27.522]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:42:27.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:42:27.523]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:42:27.523]        // while-condition  =>  FALSE
[21:42:27.523]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:42:27.523]      </control>
[21:42:27.523]      // end if-block "canReadPins"
[21:42:27.523]    </control>
[21:42:27.523]    <control if="!canReadPins" while="" timeout="0" info="">
[21:42:27.523]      // if-block "!canReadPins"
[21:42:27.523]        // =>  FALSE
[21:42:27.523]      // skip if-block "!canReadPins"
[21:42:27.523]    </control>
[21:42:27.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:42:27.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:27.524]        // =>  TRUE
[21:42:27.524]      <block atomic="false" info="">
[21:42:27.525]        WriteAP(0x00, 0x190008);
[21:42:27.525]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:27.525]        WriteAP(0xF0, 0x01);
[21:42:27.526]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:27.526]      </block>
[21:42:27.526]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:27.526]    </control>
[21:42:27.526]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:42:27.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:27.527]        // =>  FALSE
[21:42:27.527]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:27.527]    </control>
[21:42:27.527]    <block atomic="false" info="">
[21:42:27.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:27.542]  
[21:42:27.542]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[21:42:27.542]  
[21:42:27.544]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:42:27.544]    </block>
[21:42:27.544]  </sequence>
[21:42:27.544]  
[21:42:42.812]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:42:42.812]  
[21:42:42.812]  <debugvars>
[21:42:42.812]    // Pre-defined
[21:42:42.812]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:42.812]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:42:42.812]    __dp=0x00000000
[21:42:42.812]    __ap=0x00000000
[21:42:42.812]    __traceout=0x00000000      (Trace Disabled)
[21:42:42.813]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:42.813]    __FlashAddr=0x00000000
[21:42:42.813]    __FlashLen=0x00000000
[21:42:42.813]    __FlashArg=0x00000000
[21:42:42.813]    __FlashOp=0x00000000
[21:42:42.813]    __Result=0x00000000
[21:42:42.813]  </debugvars>
[21:42:42.813]  
[21:42:42.813]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:42:42.814]    <block atomic="false" info="">
[21:42:42.814]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:42:42.814]        // -> [isSWJ <= 0x00000001]
[21:42:42.815]      __var hasDormant = __protocol & 0x00020000;
[21:42:42.815]        // -> [hasDormant <= 0x00000000]
[21:42:42.815]      __var protType   = __protocol & 0x0000FFFF;
[21:42:42.815]        // -> [protType <= 0x00000002]
[21:42:42.815]    </block>
[21:42:42.815]    <control if="protType == 1" while="" timeout="0" info="">
[21:42:42.815]      // if-block "protType == 1"
[21:42:42.815]        // =>  FALSE
[21:42:42.815]      // skip if-block "protType == 1"
[21:42:42.815]    </control>
[21:42:42.815]    <control if="protType == 2" while="" timeout="0" info="">
[21:42:42.815]      // if-block "protType == 2"
[21:42:42.815]        // =>  TRUE
[21:42:42.815]      <control if="isSWJ" while="" timeout="0" info="">
[21:42:42.816]        // if-block "isSWJ"
[21:42:42.816]          // =>  TRUE
[21:42:42.816]        <control if="hasDormant" while="" timeout="0" info="">
[21:42:42.816]          // if-block "hasDormant"
[21:42:42.817]            // =>  FALSE
[21:42:42.817]          // skip if-block "hasDormant"
[21:42:42.817]        </control>
[21:42:42.817]        <control if="!hasDormant" while="" timeout="0" info="">
[21:42:42.817]          // if-block "!hasDormant"
[21:42:42.817]            // =>  TRUE
[21:42:42.817]          <block atomic="false" info="">
[21:42:42.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:42:42.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:42.818]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:42:42.819]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:42:42.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:42:42.819]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:42.819]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:42:42.820]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:42:42.820]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:42:42.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:42.820]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:42:42.820]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:42:42.820]          </block>
[21:42:42.820]          // end if-block "!hasDormant"
[21:42:42.820]        </control>
[21:42:42.820]        // end if-block "isSWJ"
[21:42:42.821]      </control>
[21:42:42.821]      <control if="!isSWJ" while="" timeout="0" info="">
[21:42:42.821]        // if-block "!isSWJ"
[21:42:42.821]          // =>  FALSE
[21:42:42.821]        // skip if-block "!isSWJ"
[21:42:42.822]      </control>
[21:42:42.822]      <block atomic="false" info="">
[21:42:42.822]        ReadDP(0x0);
[21:42:42.823]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:42:42.823]      </block>
[21:42:42.823]      // end if-block "protType == 2"
[21:42:42.823]    </control>
[21:42:42.823]  </sequence>
[21:42:42.823]  
[21:42:42.824]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:42:42.824]  
[21:42:42.824]  <debugvars>
[21:42:42.824]    // Pre-defined
[21:42:42.824]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:42.824]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:42:42.824]    __dp=0x00000000
[21:42:42.824]    __ap=0x00000000
[21:42:42.824]    __traceout=0x00000000      (Trace Disabled)
[21:42:42.824]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:42.824]    __FlashAddr=0x00000000
[21:42:42.824]    __FlashLen=0x00000000
[21:42:42.824]    __FlashArg=0x00000000
[21:42:42.824]    __FlashOp=0x00000000
[21:42:42.824]    __Result=0x00000000
[21:42:42.825]  </debugvars>
[21:42:42.825]  
[21:42:42.825]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:42:42.825]    <block atomic="false" info="">
[21:42:42.825]      __var SW_DP_ABORT       = 0x0;
[21:42:42.825]        // -> [SW_DP_ABORT <= 0x00000000]
[21:42:42.825]      __var DP_CTRL_STAT      = 0x4;
[21:42:42.825]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:42:42.825]      __var DP_SELECT         = 0x8;
[21:42:42.825]        // -> [DP_SELECT <= 0x00000008]
[21:42:42.825]      __var powered_down      = 0;
[21:42:42.825]        // -> [powered_down <= 0x00000000]
[21:42:42.826]      WriteDP(DP_SELECT, 0x00000000);
[21:42:42.826]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:42:42.826]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:42:42.828]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:42:42.828]        // -> [powered_down <= 0x00000001]
[21:42:42.828]    </block>
[21:42:42.828]    <control if="powered_down" while="" timeout="0" info="">
[21:42:42.828]      // if-block "powered_down"
[21:42:42.828]        // =>  TRUE
[21:42:42.828]      <block atomic="false" info="">
[21:42:42.828]        Message(0, "Debug/System power-up request sent");
[21:42:42.831]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:42:42.831]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:42:42.831]      </block>
[21:42:42.832]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:42:42.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:42:42.832]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:42:42.832]        // while-condition  =>  FALSE
[21:42:42.832]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:42:42.832]      </control>
[21:42:42.833]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:42:42.833]        // if-block "(__protocol & 0xFFFF) == 1"
[21:42:42.833]          // =>  FALSE
[21:42:42.833]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:42:42.833]      </control>
[21:42:42.833]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:42:42.833]        // if-block "(__protocol & 0xFFFF) == 2"
[21:42:42.833]          // =>  TRUE
[21:42:42.833]        <block atomic="false" info="">
[21:42:42.833]          Message(0, "executing SWD power up");
[21:42:42.835]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:42:42.836]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:42:42.836]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:42:42.836]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:42:42.837]        </block>
[21:42:42.837]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:42:42.837]      </control>
[21:42:42.837]      // end if-block "powered_down"
[21:42:42.837]    </control>
[21:42:42.837]    <block atomic="false" info="">
[21:42:42.837]      __var DEBUG_PORT_VAL    = 0;
[21:42:42.837]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:42:42.837]      __var ACCESS_POINT_VAL  = 0;
[21:42:42.837]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:42:42.837]      __ap = 1; 
[21:42:42.838]        // -> [__ap <= 0x00000001]
[21:42:42.838]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:42:42.840]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:42:42.840]      __ap = 4;
[21:42:42.840]        // -> [__ap <= 0x00000004]
[21:42:42.840]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:42.841]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:42:42.841]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:42:42.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:42:42.843]    </block>
[21:42:42.843]    <block atomic="false" info="">
[21:42:42.843]      __var nReset = 0x80;
[21:42:42.843]        // -> [nReset <= 0x00000080]
[21:42:42.844]      __var canReadPins = 0;
[21:42:42.844]        // -> [canReadPins <= 0x00000000]
[21:42:42.844]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:42:42.844]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:42:42.845]        // -> [canReadPins <= 0x00000001]
[21:42:42.845]    </block>
[21:42:42.845]    <control if="" while="1" timeout="200" info="">
[21:42:42.845]      // while "1"  (timeout="200")
[21:42:42.845]      // while-condition  =>  TRUE
[21:42:42.845]      // while "1"  (timeout="200")
[21:42:42.845]      // while-condition  =>  TRUE
[21:42:42.845]      // while "1"  (timeout="200")
[21:42:42.845]      // while-condition  =>  TRUE
[21:42:42.845]      // while "1"  (timeout="200")
[21:42:42.845]      // while-condition  =>  TRUE
[21:42:42.846]      // while "1"  (timeout="200")
[21:42:42.846]      // while-condition  =>  TRUE
[21:42:42.846]      // while "1"  (timeout="200")
[21:42:42.846]      // while-condition  =>  TRUE
[21:42:42.846]      // while "1"  (timeout="200")
[21:42:42.846]      // while-condition  =>  TRUE
[21:42:42.846]      // while "1"  (timeout="200")
[21:42:42.846]      // while-condition  =>  TRUE
[21:42:42.846]      // while "1"  (timeout="200")
[21:42:42.847]      // while-condition  =>  TRUE
[21:42:42.847]      // while "1"  (timeout="200")
[21:42:42.847]      // while-condition  =>  TRUE
[21:42:42.847]      // while "1"  (timeout="200")
[21:42:42.847]      // while-condition  =>  TRUE
[21:42:42.847]      // while "1"  (timeout="200")
[21:42:42.847]      // while-condition  =>  TRUE
[21:42:42.847]      // while "1"  (timeout="200")
[21:42:42.847]      // while-condition  =>  TRUE
[21:42:42.847]      // while "1"  (timeout="200")
[21:42:42.847]      // while-condition  =>  TRUE
[21:42:42.848]      // while "1"  (timeout="200")
[21:42:42.848]      // while-condition  =>  TRUE
[21:42:42.848]      // while "1"  (timeout="200")
[21:42:42.848]      // while-condition  =>  TRUE
[21:42:42.848]      // while "1"  (timeout="200")
[21:42:42.848]      // while-condition  =>  TRUE
[21:42:42.848]      // while "1"  (timeout="200")
[21:42:42.848]      // while-condition  =>  TRUE
[21:42:42.848]      // while "1"  (timeout="200")
[21:42:42.849]      // while-condition  =>  TRUE
[21:42:42.849]      // while "1"  (timeout="200")
[21:42:42.849]      // while-condition  =>  TRUE
[21:42:42.850]      // while "1"  (timeout="200")
[21:42:42.850]      // while  =>  TIMEOUT
[21:42:42.850]      // end while "1"
[21:42:42.850]    </control>
[21:42:42.850]    <control if="canReadPins" while="" timeout="0" info="">
[21:42:42.850]      // if-block "canReadPins"
[21:42:42.850]        // =>  TRUE
[21:42:42.850]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:42:42.850]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:42:42.851]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:42:42.851]        // while-condition  =>  FALSE
[21:42:42.851]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:42:42.851]      </control>
[21:42:42.851]      // end if-block "canReadPins"
[21:42:42.851]    </control>
[21:42:42.851]    <control if="!canReadPins" while="" timeout="0" info="">
[21:42:42.852]      // if-block "!canReadPins"
[21:42:42.852]        // =>  FALSE
[21:42:42.852]      // skip if-block "!canReadPins"
[21:42:42.852]    </control>
[21:42:42.852]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:42:42.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:42.852]        // =>  TRUE
[21:42:42.852]      <block atomic="false" info="">
[21:42:42.852]        WriteAP(0x00, 0x190008);
[21:42:42.853]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:42.853]        WriteAP(0xF0, 0x01);
[21:42:42.854]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:42.854]      </block>
[21:42:42.854]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:42.855]    </control>
[21:42:42.855]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:42:42.855]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:42.855]        // =>  FALSE
[21:42:42.855]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:42.855]    </control>
[21:42:42.855]    <block atomic="false" info="">
[21:42:42.855]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:42.857]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:42:42.857]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:42:42.857]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:42:42.858]      __ap = 0; //lets make sure we reset the access point selection
[21:42:42.859]        // -> [__ap <= 0x00000000]
[21:42:42.859]    </block>
[21:42:42.859]  </sequence>
[21:42:42.859]  
[21:42:42.865]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:42:42.865]  
[21:42:42.865]  <debugvars>
[21:42:42.865]    // Pre-defined
[21:42:42.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:42.865]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:42:42.865]    __dp=0x00000000
[21:42:42.865]    __ap=0x00000000
[21:42:42.865]    __traceout=0x00000000      (Trace Disabled)
[21:42:42.865]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:42.865]    __FlashAddr=0x00000000
[21:42:42.865]    __FlashLen=0x00000000
[21:42:42.865]    __FlashArg=0x00000000
[21:42:42.865]    __FlashOp=0x00000000
[21:42:42.867]    __Result=0x00000000
[21:42:42.867]  </debugvars>
[21:42:42.867]  
[21:42:42.867]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:42:42.867]    <block atomic="false" info="">
[21:42:42.867]      __var deviceID = 0;
[21:42:42.867]        // -> [deviceID <= 0x00000000]
[21:42:42.867]      __var version = 0;
[21:42:42.868]        // -> [version <= 0x00000000]
[21:42:42.868]      __var partNum = 0;
[21:42:42.868]        // -> [partNum <= 0x00000000]
[21:42:42.868]      __var manuf = 0;
[21:42:42.868]        // -> [manuf <= 0x00000000]
[21:42:42.868]      __var isMSPM0G1X0X_G3X0X = 0;
[21:42:42.868]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:42:42.868]      __var isProduction = 0;
[21:42:42.868]        // -> [isProduction <= 0x00000000]
[21:42:42.868]      __var continueId = 0;
[21:42:42.869]        // -> [continueId <= 0x00000000]
[21:42:42.869]      deviceID =   Read32(0x41C40004);
[21:42:42.870]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:42:42.870]        // -> [deviceID <= 0x2BB8802F]
[21:42:42.870]      version = deviceID >> 28;
[21:42:42.870]        // -> [version <= 0x00000002]
[21:42:42.870]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:42:42.870]        // -> [partNum <= 0x0000BB88]
[21:42:42.870]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:42:42.870]        // -> [manuf <= 0x00000017]
[21:42:42.870]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:42:42.870]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:42:42.870]      isProduction = (version > 0);
[21:42:42.870]        // -> [isProduction <= 0x00000001]
[21:42:42.870]    </block>
[21:42:42.872]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:42:42.872]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:42:42.872]        // =>  FALSE
[21:42:42.872]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:42:42.872]    </control>
[21:42:42.872]    <control if="continueId == 4" while="" timeout="0" info="">
[21:42:42.872]      // if-block "continueId == 4"
[21:42:42.872]        // =>  FALSE
[21:42:42.872]      // skip if-block "continueId == 4"
[21:42:42.872]    </control>
[21:42:42.873]    <control if="!isProduction" while="" timeout="0" info="">
[21:42:42.873]      // if-block "!isProduction"
[21:42:42.873]        // =>  FALSE
[21:42:42.873]      // skip if-block "!isProduction"
[21:42:42.873]    </control>
[21:42:42.873]  </sequence>
[21:42:42.873]  
[21:43:19.639]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:43:19.639]  
[21:43:19.639]  <debugvars>
[21:43:19.639]    // Pre-defined
[21:43:19.639]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:43:19.639]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:43:19.639]    __dp=0x00000000
[21:43:19.639]    __ap=0x00000000
[21:43:19.639]    __traceout=0x00000000      (Trace Disabled)
[21:43:19.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:43:19.640]    __FlashAddr=0x00000000
[21:43:19.640]    __FlashLen=0x00000000
[21:43:19.640]    __FlashArg=0x00000000
[21:43:19.640]    __FlashOp=0x00000000
[21:43:19.640]    __Result=0x00000000
[21:43:19.640]  </debugvars>
[21:43:19.640]  
[21:43:19.640]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:43:19.640]    <block atomic="false" info="">
[21:43:19.640]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:43:19.640]        // -> [isSWJ <= 0x00000001]
[21:43:19.640]      __var hasDormant = __protocol & 0x00020000;
[21:43:19.641]        // -> [hasDormant <= 0x00000000]
[21:43:19.641]      __var protType   = __protocol & 0x0000FFFF;
[21:43:19.641]        // -> [protType <= 0x00000002]
[21:43:19.641]    </block>
[21:43:19.641]    <control if="protType == 1" while="" timeout="0" info="">
[21:43:19.641]      // if-block "protType == 1"
[21:43:19.641]        // =>  FALSE
[21:43:19.642]      // skip if-block "protType == 1"
[21:43:19.642]    </control>
[21:43:19.642]    <control if="protType == 2" while="" timeout="0" info="">
[21:43:19.642]      // if-block "protType == 2"
[21:43:19.642]        // =>  TRUE
[21:43:19.642]      <control if="isSWJ" while="" timeout="0" info="">
[21:43:19.642]        // if-block "isSWJ"
[21:43:19.642]          // =>  TRUE
[21:43:19.642]        <control if="hasDormant" while="" timeout="0" info="">
[21:43:19.642]          // if-block "hasDormant"
[21:43:19.642]            // =>  FALSE
[21:43:19.643]          // skip if-block "hasDormant"
[21:43:19.643]        </control>
[21:43:19.643]        <control if="!hasDormant" while="" timeout="0" info="">
[21:43:19.643]          // if-block "!hasDormant"
[21:43:19.643]            // =>  TRUE
[21:43:19.643]          <block atomic="false" info="">
[21:43:19.643]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:43:19.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:43:19.644]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:43:19.644]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:43:19.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:43:19.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:43:19.645]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:43:19.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:43:19.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:43:19.646]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:43:19.646]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:43:19.646]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:43:19.647]          </block>
[21:43:19.647]          // end if-block "!hasDormant"
[21:43:19.647]        </control>
[21:43:19.647]        // end if-block "isSWJ"
[21:43:19.647]      </control>
[21:43:19.647]      <control if="!isSWJ" while="" timeout="0" info="">
[21:43:19.647]        // if-block "!isSWJ"
[21:43:19.647]          // =>  FALSE
[21:43:19.647]        // skip if-block "!isSWJ"
[21:43:19.647]      </control>
[21:43:19.647]      <block atomic="false" info="">
[21:43:19.647]        ReadDP(0x0);
[21:43:19.649]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:43:19.649]      </block>
[21:43:19.649]      // end if-block "protType == 2"
[21:43:19.649]    </control>
[21:43:19.649]  </sequence>
[21:43:19.649]  
[21:43:19.650]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:43:19.650]  
[21:43:19.650]  <debugvars>
[21:43:19.650]    // Pre-defined
[21:43:19.650]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:43:19.650]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:43:19.650]    __dp=0x00000000
[21:43:19.650]    __ap=0x00000000
[21:43:19.650]    __traceout=0x00000000      (Trace Disabled)
[21:43:19.650]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:43:19.651]    __FlashAddr=0x00000000
[21:43:19.651]    __FlashLen=0x00000000
[21:43:19.651]    __FlashArg=0x00000000
[21:43:19.651]    __FlashOp=0x00000000
[21:43:19.651]    __Result=0x00000000
[21:43:19.651]  </debugvars>
[21:43:19.651]  
[21:43:19.651]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:43:19.651]    <block atomic="false" info="">
[21:43:19.651]      __var SW_DP_ABORT       = 0x0;
[21:43:19.652]        // -> [SW_DP_ABORT <= 0x00000000]
[21:43:19.652]      __var DP_CTRL_STAT      = 0x4;
[21:43:19.652]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:43:19.652]      __var DP_SELECT         = 0x8;
[21:43:19.652]        // -> [DP_SELECT <= 0x00000008]
[21:43:19.652]      __var powered_down      = 0;
[21:43:19.653]        // -> [powered_down <= 0x00000000]
[21:43:19.653]      WriteDP(DP_SELECT, 0x00000000);
[21:43:19.653]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:43:19.653]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:43:19.654]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:43:19.654]        // -> [powered_down <= 0x00000001]
[21:43:19.654]    </block>
[21:43:19.654]    <control if="powered_down" while="" timeout="0" info="">
[21:43:19.654]      // if-block "powered_down"
[21:43:19.654]        // =>  TRUE
[21:43:19.654]      <block atomic="false" info="">
[21:43:19.654]        Message(0, "Debug/System power-up request sent");
[21:43:19.657]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:43:19.657]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:43:19.657]      </block>
[21:43:19.657]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:43:19.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:43:19.658]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:43:19.658]        // while-condition  =>  FALSE
[21:43:19.658]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:43:19.659]      </control>
[21:43:19.659]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:43:19.659]        // if-block "(__protocol & 0xFFFF) == 1"
[21:43:19.659]          // =>  FALSE
[21:43:19.659]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:43:19.660]      </control>
[21:43:19.660]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:43:19.660]        // if-block "(__protocol & 0xFFFF) == 2"
[21:43:19.660]          // =>  TRUE
[21:43:19.660]        <block atomic="false" info="">
[21:43:19.660]          Message(0, "executing SWD power up");
[21:43:19.662]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:43:19.662]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:43:19.662]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:43:19.663]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:43:19.663]        </block>
[21:43:19.663]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:43:19.663]      </control>
[21:43:19.663]      // end if-block "powered_down"
[21:43:19.663]    </control>
[21:43:19.663]    <block atomic="false" info="">
[21:43:19.663]      __var DEBUG_PORT_VAL    = 0;
[21:43:19.663]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:43:19.663]      __var ACCESS_POINT_VAL  = 0;
[21:43:19.664]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:43:19.664]      __ap = 1; 
[21:43:19.664]        // -> [__ap <= 0x00000001]
[21:43:19.664]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:43:19.665]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:43:19.665]      __ap = 4;
[21:43:19.665]        // -> [__ap <= 0x00000004]
[21:43:19.665]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:43:19.666]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:43:19.666]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:43:19.666]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:43:19.668]    </block>
[21:43:19.669]    <block atomic="false" info="">
[21:43:19.669]      __var nReset = 0x80;
[21:43:19.669]        // -> [nReset <= 0x00000080]
[21:43:19.669]      __var canReadPins = 0;
[21:43:19.669]        // -> [canReadPins <= 0x00000000]
[21:43:19.669]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:43:19.670]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:43:19.670]        // -> [canReadPins <= 0x00000001]
[21:43:19.671]    </block>
[21:43:19.671]    <control if="" while="1" timeout="200" info="">
[21:43:19.671]      // while "1"  (timeout="200")
[21:43:19.671]      // while-condition  =>  TRUE
[21:43:19.671]      // while "1"  (timeout="200")
[21:43:19.671]      // while-condition  =>  TRUE
[21:43:19.671]      // while "1"  (timeout="200")
[21:43:19.671]      // while-condition  =>  TRUE
[21:43:19.671]      // while "1"  (timeout="200")
[21:43:19.672]      // while-condition  =>  TRUE
[21:43:19.672]      // while "1"  (timeout="200")
[21:43:19.672]      // while-condition  =>  TRUE
[21:43:19.672]      // while "1"  (timeout="200")
[21:43:19.672]      // while-condition  =>  TRUE
[21:43:19.672]      // while "1"  (timeout="200")
[21:43:19.672]      // while-condition  =>  TRUE
[21:43:19.672]      // while "1"  (timeout="200")
[21:43:19.673]      // while-condition  =>  TRUE
[21:43:19.673]      // while "1"  (timeout="200")
[21:43:19.673]      // while-condition  =>  TRUE
[21:43:19.673]      // while "1"  (timeout="200")
[21:43:19.673]      // while-condition  =>  TRUE
[21:43:19.673]      // while "1"  (timeout="200")
[21:43:19.673]      // while-condition  =>  TRUE
[21:43:19.674]      // while "1"  (timeout="200")
[21:43:19.674]      // while-condition  =>  TRUE
[21:43:19.674]      // while "1"  (timeout="200")
[21:43:19.674]      // while-condition  =>  TRUE
[21:43:19.674]      // while "1"  (timeout="200")
[21:43:19.674]      // while-condition  =>  TRUE
[21:43:19.674]      // while "1"  (timeout="200")
[21:43:19.674]      // while-condition  =>  TRUE
[21:43:19.674]      // while "1"  (timeout="200")
[21:43:19.674]      // while-condition  =>  TRUE
[21:43:19.674]      // while "1"  (timeout="200")
[21:43:19.675]      // while-condition  =>  TRUE
[21:43:19.675]      // while "1"  (timeout="200")
[21:43:19.675]      // while-condition  =>  TRUE
[21:43:19.675]      // while "1"  (timeout="200")
[21:43:19.676]      // while-condition  =>  TRUE
[21:43:19.676]      // while "1"  (timeout="200")
[21:43:19.676]      // while-condition  =>  TRUE
[21:43:19.676]      // while "1"  (timeout="200")
[21:43:19.676]      // while-condition  =>  TRUE
[21:43:19.676]      // while "1"  (timeout="200")
[21:43:19.676]      // while-condition  =>  TRUE
[21:43:19.676]      // while "1"  (timeout="200")
[21:43:19.676]      // while-condition  =>  TRUE
[21:43:19.676]      // while "1"  (timeout="200")
[21:43:19.676]      // while-condition  =>  TRUE
[21:43:19.676]      // while "1"  (timeout="200")
[21:43:19.677]      // while-condition  =>  TRUE
[21:43:19.677]      // while "1"  (timeout="200")
[21:43:19.677]      // while-condition  =>  TRUE
[21:43:19.677]      // while "1"  (timeout="200")
[21:43:19.677]      // while-condition  =>  TRUE
[21:43:19.677]      // while "1"  (timeout="200")
[21:43:19.677]      // while-condition  =>  TRUE
[21:43:19.677]      // while "1"  (timeout="200")
[21:43:19.677]      // while-condition  =>  TRUE
[21:43:19.677]      // while "1"  (timeout="200")
[21:43:19.679]      // while-condition  =>  TRUE
[21:43:19.679]      // while "1"  (timeout="200")
[21:43:19.679]      // while  =>  TIMEOUT
[21:43:19.679]      // end while "1"
[21:43:19.679]    </control>
[21:43:19.679]    <control if="canReadPins" while="" timeout="0" info="">
[21:43:19.679]      // if-block "canReadPins"
[21:43:19.679]        // =>  TRUE
[21:43:19.679]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:43:19.679]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:43:19.680]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:43:19.680]        // while-condition  =>  FALSE
[21:43:19.680]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:43:19.680]      </control>
[21:43:19.680]      // end if-block "canReadPins"
[21:43:19.680]    </control>
[21:43:19.680]    <control if="!canReadPins" while="" timeout="0" info="">
[21:43:19.680]      // if-block "!canReadPins"
[21:43:19.681]        // =>  FALSE
[21:43:19.681]      // skip if-block "!canReadPins"
[21:43:19.681]    </control>
[21:43:19.681]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:43:19.681]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:43:19.681]        // =>  TRUE
[21:43:19.681]      <block atomic="false" info="">
[21:43:19.681]        WriteAP(0x00, 0x190008);
[21:43:19.681]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:43:19.681]        WriteAP(0xF0, 0x01);
[21:43:19.683]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:43:19.684]      </block>
[21:43:19.684]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:43:19.684]    </control>
[21:43:19.684]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:43:19.684]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:43:19.684]        // =>  FALSE
[21:43:19.684]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:43:19.684]    </control>
[21:43:19.684]    <block atomic="false" info="">
[21:43:19.684]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:43:19.685]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:43:19.686]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:43:19.686]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:43:19.687]      __ap = 0; //lets make sure we reset the access point selection
[21:43:19.687]        // -> [__ap <= 0x00000000]
[21:43:19.687]    </block>
[21:43:19.689]  </sequence>
[21:43:19.689]  
[21:43:19.695]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:43:19.695]  
[21:43:19.695]  <debugvars>
[21:43:19.695]    // Pre-defined
[21:43:19.695]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:43:19.695]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:43:19.695]    __dp=0x00000000
[21:43:19.696]    __ap=0x00000000
[21:43:19.696]    __traceout=0x00000000      (Trace Disabled)
[21:43:19.696]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:43:19.696]    __FlashAddr=0x00000000
[21:43:19.696]    __FlashLen=0x00000000
[21:43:19.696]    __FlashArg=0x00000000
[21:43:19.696]    __FlashOp=0x00000000
[21:43:19.696]    __Result=0x00000000
[21:43:19.696]  </debugvars>
[21:43:19.696]  
[21:43:19.696]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:43:19.697]    <block atomic="false" info="">
[21:43:19.697]      __var deviceID = 0;
[21:43:19.697]        // -> [deviceID <= 0x00000000]
[21:43:19.697]      __var version = 0;
[21:43:19.697]        // -> [version <= 0x00000000]
[21:43:19.697]      __var partNum = 0;
[21:43:19.697]        // -> [partNum <= 0x00000000]
[21:43:19.697]      __var manuf = 0;
[21:43:19.697]        // -> [manuf <= 0x00000000]
[21:43:19.697]      __var isMSPM0G1X0X_G3X0X = 0;
[21:43:19.697]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:43:19.697]      __var isProduction = 0;
[21:43:19.698]        // -> [isProduction <= 0x00000000]
[21:43:19.698]      __var continueId = 0;
[21:43:19.698]        // -> [continueId <= 0x00000000]
[21:43:19.698]      deviceID =   Read32(0x41C40004);
[21:43:19.700]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:43:19.700]        // -> [deviceID <= 0x2BB8802F]
[21:43:19.700]      version = deviceID >> 28;
[21:43:19.700]        // -> [version <= 0x00000002]
[21:43:19.700]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:43:19.700]        // -> [partNum <= 0x0000BB88]
[21:43:19.700]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:43:19.700]        // -> [manuf <= 0x00000017]
[21:43:19.700]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:43:19.700]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:43:19.701]      isProduction = (version > 0);
[21:43:19.701]        // -> [isProduction <= 0x00000001]
[21:43:19.701]    </block>
[21:43:19.701]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:43:19.701]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:43:19.701]        // =>  FALSE
[21:43:19.701]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:43:19.701]    </control>
[21:43:19.701]    <control if="continueId == 4" while="" timeout="0" info="">
[21:43:19.701]      // if-block "continueId == 4"
[21:43:19.701]        // =>  FALSE
[21:43:19.701]      // skip if-block "continueId == 4"
[21:43:19.701]    </control>
[21:43:19.701]    <control if="!isProduction" while="" timeout="0" info="">
[21:43:19.701]      // if-block "!isProduction"
[21:43:19.701]        // =>  FALSE
[21:43:19.701]      // skip if-block "!isProduction"
[21:43:19.702]    </control>
[21:43:19.702]  </sequence>
[21:43:19.702]  
[21:43:22.265]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:43:22.265]  
[21:43:22.275]  <debugvars>
[21:43:22.275]    // Pre-defined
[21:43:22.275]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:43:22.275]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:43:22.275]    __dp=0x00000000
[21:43:22.275]    __ap=0x00000000
[21:43:22.276]    __traceout=0x00000000      (Trace Disabled)
[21:43:22.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:43:22.276]    __FlashAddr=0x00000000
[21:43:22.276]    __FlashLen=0x00000000
[21:43:22.276]    __FlashArg=0x00000000
[21:43:22.276]    __FlashOp=0x00000000
[21:43:22.276]    __Result=0x00000000
[21:43:22.276]  </debugvars>
[21:43:22.276]  
[21:43:22.276]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:43:22.276]    <block atomic="false" info="">
[21:43:22.277]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:43:22.277]        // -> [isSWJ <= 0x00000001]
[21:43:22.277]      __var hasDormant = __protocol & 0x00020000;
[21:43:22.277]        // -> [hasDormant <= 0x00000000]
[21:43:22.277]      __var protType   = __protocol & 0x0000FFFF;
[21:43:22.277]        // -> [protType <= 0x00000002]
[21:43:22.277]    </block>
[21:43:22.277]    <control if="protType == 1" while="" timeout="0" info="">
[21:43:22.277]      // if-block "protType == 1"
[21:43:22.277]        // =>  FALSE
[21:43:22.277]      // skip if-block "protType == 1"
[21:43:22.277]    </control>
[21:43:22.278]    <control if="protType == 2" while="" timeout="0" info="">
[21:43:22.278]      // if-block "protType == 2"
[21:43:22.278]        // =>  TRUE
[21:43:22.278]      <control if="isSWJ" while="" timeout="0" info="">
[21:43:22.278]        // if-block "isSWJ"
[21:43:22.278]          // =>  TRUE
[21:43:22.278]        <control if="hasDormant" while="" timeout="0" info="">
[21:43:22.278]          // if-block "hasDormant"
[21:43:22.279]            // =>  FALSE
[21:43:22.279]          // skip if-block "hasDormant"
[21:43:22.279]        </control>
[21:43:22.280]        <control if="!hasDormant" while="" timeout="0" info="">
[21:43:22.280]          // if-block "!hasDormant"
[21:43:22.280]            // =>  TRUE
[21:43:22.280]          <block atomic="false" info="">
[21:43:22.280]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:43:22.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:43:22.281]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:43:22.281]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:43:22.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:43:22.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:43:22.281]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:43:22.282]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:43:22.282]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:43:22.282]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:43:22.282]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:43:22.283]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:43:22.283]          </block>
[21:43:22.283]          // end if-block "!hasDormant"
[21:43:22.283]        </control>
[21:43:22.284]        // end if-block "isSWJ"
[21:43:22.284]      </control>
[21:43:22.284]      <control if="!isSWJ" while="" timeout="0" info="">
[21:43:22.284]        // if-block "!isSWJ"
[21:43:22.284]          // =>  FALSE
[21:43:22.284]        // skip if-block "!isSWJ"
[21:43:22.284]      </control>
[21:43:22.284]      <block atomic="false" info="">
[21:43:22.285]        ReadDP(0x0);
[21:43:22.285]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:43:22.285]      </block>
[21:43:22.285]      // end if-block "protType == 2"
[21:43:22.285]    </control>
[21:43:22.285]  </sequence>
[21:43:22.286]  
[21:43:22.286]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:43:22.286]  
[21:43:22.286]  <debugvars>
[21:43:22.287]    // Pre-defined
[21:43:22.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:43:22.288]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:43:22.288]    __dp=0x00000000
[21:43:22.288]    __ap=0x00000000
[21:43:22.288]    __traceout=0x00000000      (Trace Disabled)
[21:43:22.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:43:22.289]    __FlashAddr=0x00000000
[21:43:22.289]    __FlashLen=0x00000000
[21:43:22.289]    __FlashArg=0x00000000
[21:43:22.290]    __FlashOp=0x00000000
[21:43:22.290]    __Result=0x00000000
[21:43:22.290]  </debugvars>
[21:43:22.290]  
[21:43:22.291]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:43:22.291]    <block atomic="false" info="">
[21:43:22.291]      __var SW_DP_ABORT       = 0x0;
[21:43:22.291]        // -> [SW_DP_ABORT <= 0x00000000]
[21:43:22.291]      __var DP_CTRL_STAT      = 0x4;
[21:43:22.291]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:43:22.291]      __var DP_SELECT         = 0x8;
[21:43:22.291]        // -> [DP_SELECT <= 0x00000008]
[21:43:22.291]      __var powered_down      = 0;
[21:43:22.292]        // -> [powered_down <= 0x00000000]
[21:43:22.292]      WriteDP(DP_SELECT, 0x00000000);
[21:43:22.292]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:43:22.292]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:43:22.293]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:43:22.293]        // -> [powered_down <= 0x00000001]
[21:43:22.293]    </block>
[21:43:22.293]    <control if="powered_down" while="" timeout="0" info="">
[21:43:22.293]      // if-block "powered_down"
[21:43:22.293]        // =>  TRUE
[21:43:22.293]      <block atomic="false" info="">
[21:43:22.293]        Message(0, "Debug/System power-up request sent");
[21:43:22.295]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:43:22.296]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:43:22.296]      </block>
[21:43:22.296]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:43:22.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:43:22.296]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:43:22.296]        // while-condition  =>  FALSE
[21:43:22.297]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:43:22.297]      </control>
[21:43:22.297]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:43:22.297]        // if-block "(__protocol & 0xFFFF) == 1"
[21:43:22.297]          // =>  FALSE
[21:43:22.297]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:43:22.297]      </control>
[21:43:22.298]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:43:22.298]        // if-block "(__protocol & 0xFFFF) == 2"
[21:43:22.298]          // =>  TRUE
[21:43:22.298]        <block atomic="false" info="">
[21:43:22.298]          Message(0, "executing SWD power up");
[21:43:22.300]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:43:22.300]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:43:22.301]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:43:22.301]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:43:22.301]        </block>
[21:43:22.301]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:43:22.302]      </control>
[21:43:22.302]      // end if-block "powered_down"
[21:43:22.302]    </control>
[21:43:22.302]    <block atomic="false" info="">
[21:43:22.302]      __var DEBUG_PORT_VAL    = 0;
[21:43:22.302]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:43:22.302]      __var ACCESS_POINT_VAL  = 0;
[21:43:22.302]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:43:22.302]      __ap = 1; 
[21:43:22.302]        // -> [__ap <= 0x00000001]
[21:43:22.302]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:43:22.303]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:43:22.303]      __ap = 4;
[21:43:22.304]        // -> [__ap <= 0x00000004]
[21:43:22.305]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:43:22.305]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:43:22.306]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:43:22.306]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:43:22.307]    </block>
[21:43:22.307]    <block atomic="false" info="">
[21:43:22.307]      __var nReset = 0x80;
[21:43:22.307]        // -> [nReset <= 0x00000080]
[21:43:22.308]      __var canReadPins = 0;
[21:43:22.308]        // -> [canReadPins <= 0x00000000]
[21:43:22.308]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:43:22.309]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:43:22.309]        // -> [canReadPins <= 0x00000001]
[21:43:22.309]    </block>
[21:43:22.309]    <control if="" while="1" timeout="200" info="">
[21:43:22.309]      // while "1"  (timeout="200")
[21:43:22.309]      // while-condition  =>  TRUE
[21:43:22.309]      // while "1"  (timeout="200")
[21:43:22.310]      // while-condition  =>  TRUE
[21:43:22.310]      // while "1"  (timeout="200")
[21:43:22.310]      // while-condition  =>  TRUE
[21:43:22.310]      // while "1"  (timeout="200")
[21:43:22.310]      // while-condition  =>  TRUE
[21:43:22.310]      // while "1"  (timeout="200")
[21:43:22.310]      // while-condition  =>  TRUE
[21:43:22.310]      // while "1"  (timeout="200")
[21:43:22.310]      // while-condition  =>  TRUE
[21:43:22.310]      // while "1"  (timeout="200")
[21:43:22.311]      // while-condition  =>  TRUE
[21:43:22.311]      // while "1"  (timeout="200")
[21:43:22.311]      // while-condition  =>  TRUE
[21:43:22.311]      // while "1"  (timeout="200")
[21:43:22.311]      // while-condition  =>  TRUE
[21:43:22.311]      // while "1"  (timeout="200")
[21:43:22.311]      // while-condition  =>  TRUE
[21:43:22.311]      // while "1"  (timeout="200")
[21:43:22.311]      // while-condition  =>  TRUE
[21:43:22.311]      // while "1"  (timeout="200")
[21:43:22.311]      // while-condition  =>  TRUE
[21:43:22.312]      // while "1"  (timeout="200")
[21:43:22.312]      // while-condition  =>  TRUE
[21:43:22.312]      // while "1"  (timeout="200")
[21:43:22.312]      // while-condition  =>  TRUE
[21:43:22.312]      // while "1"  (timeout="200")
[21:43:22.312]      // while-condition  =>  TRUE
[21:43:22.312]      // while "1"  (timeout="200")
[21:43:22.312]      // while-condition  =>  TRUE
[21:43:22.312]      // while "1"  (timeout="200")
[21:43:22.312]      // while-condition  =>  TRUE
[21:43:22.312]      // while "1"  (timeout="200")
[21:43:22.313]      // while-condition  =>  TRUE
[21:43:22.313]      // while "1"  (timeout="200")
[21:43:22.313]      // while-condition  =>  TRUE
[21:43:22.313]      // while "1"  (timeout="200")
[21:43:22.313]      // while-condition  =>  TRUE
[21:43:22.313]      // while "1"  (timeout="200")
[21:43:22.313]      // while-condition  =>  TRUE
[21:43:22.313]      // while "1"  (timeout="200")
[21:43:22.313]      // while-condition  =>  TRUE
[21:43:22.313]      // while "1"  (timeout="200")
[21:43:22.313]      // while-condition  =>  TRUE
[21:43:22.314]      // while "1"  (timeout="200")
[21:43:22.314]      // while-condition  =>  TRUE
[21:43:22.314]      // while "1"  (timeout="200")
[21:43:22.314]      // while-condition  =>  TRUE
[21:43:22.314]      // while "1"  (timeout="200")
[21:43:22.314]      // while-condition  =>  TRUE
[21:43:22.314]      // while "1"  (timeout="200")
[21:43:22.314]      // while-condition  =>  TRUE
[21:43:22.315]      // while "1"  (timeout="200")
[21:43:22.315]      // while-condition  =>  TRUE
[21:43:22.315]      // while "1"  (timeout="200")
[21:43:22.315]      // while-condition  =>  TRUE
[21:43:22.315]      // while "1"  (timeout="200")
[21:43:22.316]      // while-condition  =>  TRUE
[21:43:22.316]      // while "1"  (timeout="200")
[21:43:22.316]      // while-condition  =>  TRUE
[21:43:22.316]      // while "1"  (timeout="200")
[21:43:22.316]      // while-condition  =>  TRUE
[21:43:22.316]      // while "1"  (timeout="200")
[21:43:22.316]      // while-condition  =>  TRUE
[21:43:22.317]      // while "1"  (timeout="200")
[21:43:22.317]      // while-condition  =>  TRUE
[21:43:22.317]      // while "1"  (timeout="200")
[21:43:22.317]      // while-condition  =>  TRUE
[21:43:22.317]      // while "1"  (timeout="200")
[21:43:22.317]      // while-condition  =>  TRUE
[21:43:22.317]      // while "1"  (timeout="200")
[21:43:22.317]      // while-condition  =>  TRUE
[21:43:22.318]      // while "1"  (timeout="200")
[21:43:22.318]      // while-condition  =>  TRUE
[21:43:22.318]      // while "1"  (timeout="200")
[21:43:22.318]      // while-condition  =>  TRUE
[21:43:22.318]      // while "1"  (timeout="200")
[21:43:22.318]      // while-condition  =>  TRUE
[21:43:22.318]      // while "1"  (timeout="200")
[21:43:22.318]      // while-condition  =>  TRUE
[21:43:22.318]      // while "1"  (timeout="200")
[21:43:22.318]      // while-condition  =>  TRUE
[21:43:22.318]      // while "1"  (timeout="200")
[21:43:22.318]      // while-condition  =>  TRUE
[21:43:22.318]      // while "1"  (timeout="200")
[21:43:22.319]      // while-condition  =>  TRUE
[21:43:22.319]      // while "1"  (timeout="200")
[21:43:22.319]      // while  =>  TIMEOUT
[21:43:22.319]      // end while "1"
[21:43:22.319]    </control>
[21:43:22.320]    <control if="canReadPins" while="" timeout="0" info="">
[21:43:22.320]      // if-block "canReadPins"
[21:43:22.320]        // =>  TRUE
[21:43:22.320]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:43:22.320]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:43:22.320]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:43:22.320]        // while-condition  =>  FALSE
[21:43:22.320]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:43:22.320]      </control>
[21:43:22.321]      // end if-block "canReadPins"
[21:43:22.321]    </control>
[21:43:22.321]    <control if="!canReadPins" while="" timeout="0" info="">
[21:43:22.321]      // if-block "!canReadPins"
[21:43:22.321]        // =>  FALSE
[21:43:22.321]      // skip if-block "!canReadPins"
[21:43:22.321]    </control>
[21:43:22.321]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:43:22.321]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:43:22.321]        // =>  TRUE
[21:43:22.322]      <block atomic="false" info="">
[21:43:22.322]        WriteAP(0x00, 0x190008);
[21:43:22.323]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:43:22.323]        WriteAP(0xF0, 0x01);
[21:43:22.324]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:43:22.324]      </block>
[21:43:22.324]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:43:22.324]    </control>
[21:43:22.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:43:22.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:43:22.325]        // =>  FALSE
[21:43:22.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:43:22.325]    </control>
[21:43:22.325]    <block atomic="false" info="">
[21:43:22.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:43:22.326]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:43:22.326]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:43:22.326]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:43:22.328]      __ap = 0; //lets make sure we reset the access point selection
[21:43:22.328]        // -> [__ap <= 0x00000000]
[21:43:22.328]    </block>
[21:43:22.328]  </sequence>
[21:43:22.329]  
[21:43:22.335]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:43:22.335]  
[21:43:22.335]  <debugvars>
[21:43:22.335]    // Pre-defined
[21:43:22.335]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:43:22.335]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:43:22.335]    __dp=0x00000000
[21:43:22.335]    __ap=0x00000000
[21:43:22.335]    __traceout=0x00000000      (Trace Disabled)
[21:43:22.335]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:43:22.336]    __FlashAddr=0x00000000
[21:43:22.336]    __FlashLen=0x00000000
[21:43:22.337]    __FlashArg=0x00000000
[21:43:22.337]    __FlashOp=0x00000000
[21:43:22.337]    __Result=0x00000000
[21:43:22.337]  </debugvars>
[21:43:22.337]  
[21:43:22.337]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:43:22.337]    <block atomic="false" info="">
[21:43:22.337]      __var deviceID = 0;
[21:43:22.337]        // -> [deviceID <= 0x00000000]
[21:43:22.337]      __var version = 0;
[21:43:22.337]        // -> [version <= 0x00000000]
[21:43:22.337]      __var partNum = 0;
[21:43:22.338]        // -> [partNum <= 0x00000000]
[21:43:22.338]      __var manuf = 0;
[21:43:22.338]        // -> [manuf <= 0x00000000]
[21:43:22.338]      __var isMSPM0G1X0X_G3X0X = 0;
[21:43:22.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:43:22.339]      __var isProduction = 0;
[21:43:22.339]        // -> [isProduction <= 0x00000000]
[21:43:22.339]      __var continueId = 0;
[21:43:22.339]        // -> [continueId <= 0x00000000]
[21:43:22.339]      deviceID =   Read32(0x41C40004);
[21:43:22.340]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:43:22.341]        // -> [deviceID <= 0x2BB8802F]
[21:43:22.341]      version = deviceID >> 28;
[21:43:22.341]        // -> [version <= 0x00000002]
[21:43:22.341]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:43:22.341]        // -> [partNum <= 0x0000BB88]
[21:43:22.341]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:43:22.341]        // -> [manuf <= 0x00000017]
[21:43:22.341]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:43:22.342]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:43:22.342]      isProduction = (version > 0);
[21:43:22.342]        // -> [isProduction <= 0x00000001]
[21:43:22.342]    </block>
[21:43:22.342]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:43:22.342]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:43:22.342]        // =>  FALSE
[21:43:22.342]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:43:22.342]    </control>
[21:43:22.343]    <control if="continueId == 4" while="" timeout="0" info="">
[21:43:22.343]      // if-block "continueId == 4"
[21:43:22.343]        // =>  FALSE
[21:43:22.343]      // skip if-block "continueId == 4"
[21:43:22.343]    </control>
[21:43:22.343]    <control if="!isProduction" while="" timeout="0" info="">
[21:43:22.343]      // if-block "!isProduction"
[21:43:22.343]        // =>  FALSE
[21:43:22.344]      // skip if-block "!isProduction"
[21:43:22.344]    </control>
[21:43:22.344]  </sequence>
[21:43:22.344]  
[21:59:28.012]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:59:28.012]  
[21:59:28.021]  <debugvars>
[21:59:28.021]    // Pre-defined
[21:59:28.021]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:28.021]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:28.022]    __dp=0x00000000
[21:59:28.022]    __ap=0x00000000
[21:59:28.022]    __traceout=0x00000000      (Trace Disabled)
[21:59:28.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:28.022]    __FlashAddr=0x00000000
[21:59:28.022]    __FlashLen=0x00000000
[21:59:28.022]    __FlashArg=0x00000000
[21:59:28.022]    __FlashOp=0x00000000
[21:59:28.022]    __Result=0x00000000
[21:59:28.022]  </debugvars>
[21:59:28.023]  
[21:59:28.023]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:59:28.023]    <block atomic="false" info="">
[21:59:28.023]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:59:28.023]        // -> [isSWJ <= 0x00000001]
[21:59:28.023]      __var hasDormant = __protocol & 0x00020000;
[21:59:28.023]        // -> [hasDormant <= 0x00000000]
[21:59:28.023]      __var protType   = __protocol & 0x0000FFFF;
[21:59:28.023]        // -> [protType <= 0x00000002]
[21:59:28.024]    </block>
[21:59:28.024]    <control if="protType == 1" while="" timeout="0" info="">
[21:59:28.024]      // if-block "protType == 1"
[21:59:28.024]        // =>  FALSE
[21:59:28.024]      // skip if-block "protType == 1"
[21:59:28.024]    </control>
[21:59:28.024]    <control if="protType == 2" while="" timeout="0" info="">
[21:59:28.025]      // if-block "protType == 2"
[21:59:28.025]        // =>  TRUE
[21:59:28.025]      <control if="isSWJ" while="" timeout="0" info="">
[21:59:28.025]        // if-block "isSWJ"
[21:59:28.025]          // =>  TRUE
[21:59:28.025]        <control if="hasDormant" while="" timeout="0" info="">
[21:59:28.025]          // if-block "hasDormant"
[21:59:28.026]            // =>  FALSE
[21:59:28.026]          // skip if-block "hasDormant"
[21:59:28.026]        </control>
[21:59:28.026]        <control if="!hasDormant" while="" timeout="0" info="">
[21:59:28.027]          // if-block "!hasDormant"
[21:59:28.027]            // =>  TRUE
[21:59:28.027]          <block atomic="false" info="">
[21:59:28.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:59:28.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:28.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:59:28.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:59:28.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:59:28.029]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:28.029]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:59:28.029]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:59:28.029]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:59:28.030]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:28.030]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:59:28.030]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:59:28.030]          </block>
[21:59:28.031]          // end if-block "!hasDormant"
[21:59:28.031]        </control>
[21:59:28.031]        // end if-block "isSWJ"
[21:59:28.031]      </control>
[21:59:28.031]      <control if="!isSWJ" while="" timeout="0" info="">
[21:59:28.031]        // if-block "!isSWJ"
[21:59:28.031]          // =>  FALSE
[21:59:28.031]        // skip if-block "!isSWJ"
[21:59:28.032]      </control>
[21:59:28.032]      <block atomic="false" info="">
[21:59:28.032]        ReadDP(0x0);
[21:59:28.032]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:59:28.032]      </block>
[21:59:28.032]      // end if-block "protType == 2"
[21:59:28.032]    </control>
[21:59:28.033]  </sequence>
[21:59:28.033]  
[21:59:28.034]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:59:28.034]  
[21:59:28.034]  <debugvars>
[21:59:28.034]    // Pre-defined
[21:59:28.034]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:28.034]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:28.034]    __dp=0x00000000
[21:59:28.035]    __ap=0x00000000
[21:59:28.035]    __traceout=0x00000000      (Trace Disabled)
[21:59:28.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:28.035]    __FlashAddr=0x00000000
[21:59:28.035]    __FlashLen=0x00000000
[21:59:28.035]    __FlashArg=0x00000000
[21:59:28.035]    __FlashOp=0x00000000
[21:59:28.035]    __Result=0x00000000
[21:59:28.035]  </debugvars>
[21:59:28.036]  
[21:59:28.036]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:59:28.036]    <block atomic="false" info="">
[21:59:28.036]      __var SW_DP_ABORT       = 0x0;
[21:59:28.036]        // -> [SW_DP_ABORT <= 0x00000000]
[21:59:28.036]      __var DP_CTRL_STAT      = 0x4;
[21:59:28.036]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:59:28.036]      __var DP_SELECT         = 0x8;
[21:59:28.036]        // -> [DP_SELECT <= 0x00000008]
[21:59:28.037]      __var powered_down      = 0;
[21:59:28.037]        // -> [powered_down <= 0x00000000]
[21:59:28.037]      WriteDP(DP_SELECT, 0x00000000);
[21:59:28.037]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:59:28.037]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:59:28.038]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:59:28.038]        // -> [powered_down <= 0x00000001]
[21:59:28.038]    </block>
[21:59:28.038]    <control if="powered_down" while="" timeout="0" info="">
[21:59:28.038]      // if-block "powered_down"
[21:59:28.039]        // =>  TRUE
[21:59:28.039]      <block atomic="false" info="">
[21:59:28.039]        Message(0, "Debug/System power-up request sent");
[21:59:28.043]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:59:28.044]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:59:28.044]      </block>
[21:59:28.044]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:59:28.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:59:28.045]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:59:28.045]        // while-condition  =>  FALSE
[21:59:28.045]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:59:28.046]      </control>
[21:59:28.046]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:59:28.046]        // if-block "(__protocol & 0xFFFF) == 1"
[21:59:28.046]          // =>  FALSE
[21:59:28.046]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:59:28.046]      </control>
[21:59:28.046]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:59:28.046]        // if-block "(__protocol & 0xFFFF) == 2"
[21:59:28.047]          // =>  TRUE
[21:59:28.047]        <block atomic="false" info="">
[21:59:28.047]          Message(0, "executing SWD power up");
[21:59:28.048]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:59:28.050]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:59:28.050]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:59:28.051]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:59:28.051]        </block>
[21:59:28.051]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:59:28.051]      </control>
[21:59:28.051]      // end if-block "powered_down"
[21:59:28.051]    </control>
[21:59:28.051]    <block atomic="false" info="">
[21:59:28.051]      __var DEBUG_PORT_VAL    = 0;
[21:59:28.051]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:59:28.051]      __var ACCESS_POINT_VAL  = 0;
[21:59:28.051]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:59:28.051]      __ap = 1; 
[21:59:28.052]        // -> [__ap <= 0x00000001]
[21:59:28.052]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:59:28.053]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:59:28.053]      __ap = 4;
[21:59:28.053]        // -> [__ap <= 0x00000004]
[21:59:28.053]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:28.055]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:59:28.055]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:59:28.055]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:59:28.058]    </block>
[21:59:28.058]    <block atomic="false" info="">
[21:59:28.058]      __var nReset = 0x80;
[21:59:28.058]        // -> [nReset <= 0x00000080]
[21:59:28.058]      __var canReadPins = 0;
[21:59:28.058]        // -> [canReadPins <= 0x00000000]
[21:59:28.058]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:59:28.059]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:59:28.059]        // -> [canReadPins <= 0x00000001]
[21:59:28.059]    </block>
[21:59:28.059]    <control if="" while="1" timeout="200" info="">
[21:59:28.059]      // while "1"  (timeout="200")
[21:59:28.059]      // while-condition  =>  TRUE
[21:59:28.060]      // while "1"  (timeout="200")
[21:59:28.060]      // while-condition  =>  TRUE
[21:59:28.060]      // while "1"  (timeout="200")
[21:59:28.060]      // while-condition  =>  TRUE
[21:59:28.060]      // while "1"  (timeout="200")
[21:59:28.060]      // while-condition  =>  TRUE
[21:59:28.061]      // while "1"  (timeout="200")
[21:59:28.061]      // while-condition  =>  TRUE
[21:59:28.061]      // while "1"  (timeout="200")
[21:59:28.061]      // while-condition  =>  TRUE
[21:59:28.061]      // while "1"  (timeout="200")
[21:59:28.061]      // while-condition  =>  TRUE
[21:59:28.061]      // while "1"  (timeout="200")
[21:59:28.062]      // while-condition  =>  TRUE
[21:59:28.062]      // while "1"  (timeout="200")
[21:59:28.062]      // while-condition  =>  TRUE
[21:59:28.062]      // while "1"  (timeout="200")
[21:59:28.062]      // while-condition  =>  TRUE
[21:59:28.062]      // while "1"  (timeout="200")
[21:59:28.062]      // while-condition  =>  TRUE
[21:59:28.062]      // while "1"  (timeout="200")
[21:59:28.062]      // while-condition  =>  TRUE
[21:59:28.063]      // while "1"  (timeout="200")
[21:59:28.063]      // while-condition  =>  TRUE
[21:59:28.063]      // while "1"  (timeout="200")
[21:59:28.063]      // while-condition  =>  TRUE
[21:59:28.063]      // while "1"  (timeout="200")
[21:59:28.063]      // while-condition  =>  TRUE
[21:59:28.063]      // while "1"  (timeout="200")
[21:59:28.063]      // while-condition  =>  TRUE
[21:59:28.063]      // while "1"  (timeout="200")
[21:59:28.063]      // while-condition  =>  TRUE
[21:59:28.063]      // while "1"  (timeout="200")
[21:59:28.064]      // while-condition  =>  TRUE
[21:59:28.064]      // while "1"  (timeout="200")
[21:59:28.064]      // while-condition  =>  TRUE
[21:59:28.064]      // while "1"  (timeout="200")
[21:59:28.064]      // while-condition  =>  TRUE
[21:59:28.064]      // while "1"  (timeout="200")
[21:59:28.064]      // while-condition  =>  TRUE
[21:59:28.064]      // while "1"  (timeout="200")
[21:59:28.064]      // while-condition  =>  TRUE
[21:59:28.065]      // while "1"  (timeout="200")
[21:59:28.065]      // while-condition  =>  TRUE
[21:59:28.065]      // while "1"  (timeout="200")
[21:59:28.065]      // while-condition  =>  TRUE
[21:59:28.065]      // while "1"  (timeout="200")
[21:59:28.065]      // while-condition  =>  TRUE
[21:59:28.066]      // while "1"  (timeout="200")
[21:59:28.066]      // while-condition  =>  TRUE
[21:59:28.066]      // while "1"  (timeout="200")
[21:59:28.066]      // while-condition  =>  TRUE
[21:59:28.066]      // while "1"  (timeout="200")
[21:59:28.066]      // while-condition  =>  TRUE
[21:59:28.066]      // while "1"  (timeout="200")
[21:59:28.066]      // while-condition  =>  TRUE
[21:59:28.066]      // while "1"  (timeout="200")
[21:59:28.067]      // while-condition  =>  TRUE
[21:59:28.067]      // while "1"  (timeout="200")
[21:59:28.067]      // while-condition  =>  TRUE
[21:59:28.067]      // while "1"  (timeout="200")
[21:59:28.067]      // while-condition  =>  TRUE
[21:59:28.067]      // while "1"  (timeout="200")
[21:59:28.067]      // while-condition  =>  TRUE
[21:59:28.068]      // while "1"  (timeout="200")
[21:59:28.068]      // while-condition  =>  TRUE
[21:59:28.068]      // while "1"  (timeout="200")
[21:59:28.068]      // while-condition  =>  TRUE
[21:59:28.068]      // while "1"  (timeout="200")
[21:59:28.068]      // while  =>  TIMEOUT
[21:59:28.068]      // end while "1"
[21:59:28.068]    </control>
[21:59:28.068]    <control if="canReadPins" while="" timeout="0" info="">
[21:59:28.068]      // if-block "canReadPins"
[21:59:28.068]        // =>  TRUE
[21:59:28.068]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:59:28.068]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:59:28.068]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:59:28.070]        // while-condition  =>  FALSE
[21:59:28.070]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:59:28.070]      </control>
[21:59:28.070]      // end if-block "canReadPins"
[21:59:28.070]    </control>
[21:59:28.070]    <control if="!canReadPins" while="" timeout="0" info="">
[21:59:28.070]      // if-block "!canReadPins"
[21:59:28.070]        // =>  FALSE
[21:59:28.070]      // skip if-block "!canReadPins"
[21:59:28.070]    </control>
[21:59:28.070]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:59:28.070]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:28.070]        // =>  TRUE
[21:59:28.070]      <block atomic="false" info="">
[21:59:28.070]        WriteAP(0x00, 0x190008);
[21:59:28.072]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:28.072]        WriteAP(0xF0, 0x01);
[21:59:28.073]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:28.073]      </block>
[21:59:28.074]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:28.074]    </control>
[21:59:28.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:59:28.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:28.074]        // =>  FALSE
[21:59:28.074]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:28.074]    </control>
[21:59:28.074]    <block atomic="false" info="">
[21:59:28.075]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:28.075]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:59:28.076]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:59:28.076]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:59:28.080]      __ap = 0; //lets make sure we reset the access point selection
[21:59:28.080]        // -> [__ap <= 0x00000000]
[21:59:28.081]    </block>
[21:59:28.081]  </sequence>
[21:59:28.081]  
[21:59:28.087]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:59:28.087]  
[21:59:28.087]  <debugvars>
[21:59:28.088]    // Pre-defined
[21:59:28.088]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:28.088]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:28.088]    __dp=0x00000000
[21:59:28.088]    __ap=0x00000000
[21:59:28.088]    __traceout=0x00000000      (Trace Disabled)
[21:59:28.088]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:28.088]    __FlashAddr=0x00000000
[21:59:28.089]    __FlashLen=0x00000000
[21:59:28.089]    __FlashArg=0x00000000
[21:59:28.089]    __FlashOp=0x00000000
[21:59:28.089]    __Result=0x00000000
[21:59:28.089]  </debugvars>
[21:59:28.089]  
[21:59:28.089]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:59:28.089]    <block atomic="false" info="">
[21:59:28.089]      __var deviceID = 0;
[21:59:28.089]        // -> [deviceID <= 0x00000000]
[21:59:28.090]      __var version = 0;
[21:59:28.090]        // -> [version <= 0x00000000]
[21:59:28.090]      __var partNum = 0;
[21:59:28.090]        // -> [partNum <= 0x00000000]
[21:59:28.090]      __var manuf = 0;
[21:59:28.091]        // -> [manuf <= 0x00000000]
[21:59:28.091]      __var isMSPM0G1X0X_G3X0X = 0;
[21:59:28.091]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:59:28.091]      __var isProduction = 0;
[21:59:28.091]        // -> [isProduction <= 0x00000000]
[21:59:28.091]      __var continueId = 0;
[21:59:28.091]        // -> [continueId <= 0x00000000]
[21:59:28.091]      deviceID =   Read32(0x41C40004);
[21:59:28.093]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:59:28.093]        // -> [deviceID <= 0x2BB8802F]
[21:59:28.093]      version = deviceID >> 28;
[21:59:28.093]        // -> [version <= 0x00000002]
[21:59:28.093]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:59:28.093]        // -> [partNum <= 0x0000BB88]
[21:59:28.094]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:59:28.094]        // -> [manuf <= 0x00000017]
[21:59:28.094]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:59:28.094]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:59:28.094]      isProduction = (version > 0);
[21:59:28.094]        // -> [isProduction <= 0x00000001]
[21:59:28.095]    </block>
[21:59:28.095]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:59:28.095]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:59:28.095]        // =>  FALSE
[21:59:28.095]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:59:28.095]    </control>
[21:59:28.095]    <control if="continueId == 4" while="" timeout="0" info="">
[21:59:28.095]      // if-block "continueId == 4"
[21:59:28.095]        // =>  FALSE
[21:59:28.095]      // skip if-block "continueId == 4"
[21:59:28.095]    </control>
[21:59:28.096]    <control if="!isProduction" while="" timeout="0" info="">
[21:59:28.096]      // if-block "!isProduction"
[21:59:28.096]        // =>  FALSE
[21:59:28.096]      // skip if-block "!isProduction"
[21:59:28.096]    </control>
[21:59:28.096]  </sequence>
[21:59:28.096]  
[22:00:20.037]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:00:20.037]  
[22:00:20.047]  <debugvars>
[22:00:20.047]    // Pre-defined
[22:00:20.047]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:20.047]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:00:20.047]    __dp=0x00000000
[22:00:20.047]    __ap=0x00000000
[22:00:20.047]    __traceout=0x00000000      (Trace Disabled)
[22:00:20.047]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:20.047]    __FlashAddr=0x00000000
[22:00:20.048]    __FlashLen=0x00000000
[22:00:20.048]    __FlashArg=0x00000000
[22:00:20.048]    __FlashOp=0x00000000
[22:00:20.048]    __Result=0x00000000
[22:00:20.048]  </debugvars>
[22:00:20.048]  
[22:00:20.048]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:00:20.048]    <block atomic="false" info="">
[22:00:20.048]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:00:20.048]        // -> [isSWJ <= 0x00000001]
[22:00:20.048]      __var hasDormant = __protocol & 0x00020000;
[22:00:20.048]        // -> [hasDormant <= 0x00000000]
[22:00:20.048]      __var protType   = __protocol & 0x0000FFFF;
[22:00:20.048]        // -> [protType <= 0x00000002]
[22:00:20.048]    </block>
[22:00:20.048]    <control if="protType == 1" while="" timeout="0" info="">
[22:00:20.048]      // if-block "protType == 1"
[22:00:20.048]        // =>  FALSE
[22:00:20.050]      // skip if-block "protType == 1"
[22:00:20.050]    </control>
[22:00:20.050]    <control if="protType == 2" while="" timeout="0" info="">
[22:00:20.050]      // if-block "protType == 2"
[22:00:20.050]        // =>  TRUE
[22:00:20.050]      <control if="isSWJ" while="" timeout="0" info="">
[22:00:20.050]        // if-block "isSWJ"
[22:00:20.050]          // =>  TRUE
[22:00:20.050]        <control if="hasDormant" while="" timeout="0" info="">
[22:00:20.051]          // if-block "hasDormant"
[22:00:20.051]            // =>  FALSE
[22:00:20.051]          // skip if-block "hasDormant"
[22:00:20.051]        </control>
[22:00:20.051]        <control if="!hasDormant" while="" timeout="0" info="">
[22:00:20.051]          // if-block "!hasDormant"
[22:00:20.051]            // =>  TRUE
[22:00:20.051]          <block atomic="false" info="">
[22:00:20.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:00:20.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:20.052]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:00:20.052]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:00:20.052]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:00:20.053]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:20.054]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:00:20.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:00:20.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:00:20.054]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:20.054]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:00:20.055]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:00:20.055]          </block>
[22:00:20.055]          // end if-block "!hasDormant"
[22:00:20.055]        </control>
[22:00:20.055]        // end if-block "isSWJ"
[22:00:20.055]      </control>
[22:00:20.055]      <control if="!isSWJ" while="" timeout="0" info="">
[22:00:20.055]        // if-block "!isSWJ"
[22:00:20.056]          // =>  FALSE
[22:00:20.056]        // skip if-block "!isSWJ"
[22:00:20.056]      </control>
[22:00:20.056]      <block atomic="false" info="">
[22:00:20.056]        ReadDP(0x0);
[22:00:20.056]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:00:20.056]      </block>
[22:00:20.057]      // end if-block "protType == 2"
[22:00:20.057]    </control>
[22:00:20.057]  </sequence>
[22:00:20.057]  
[22:00:20.057]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:00:20.057]  
[22:00:20.057]  <debugvars>
[22:00:20.058]    // Pre-defined
[22:00:20.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:20.058]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:00:20.058]    __dp=0x00000000
[22:00:20.058]    __ap=0x00000000
[22:00:20.058]    __traceout=0x00000000      (Trace Disabled)
[22:00:20.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:20.058]    __FlashAddr=0x00000000
[22:00:20.058]    __FlashLen=0x00000000
[22:00:20.058]    __FlashArg=0x00000000
[22:00:20.059]    __FlashOp=0x00000000
[22:00:20.059]    __Result=0x00000000
[22:00:20.059]  </debugvars>
[22:00:20.059]  
[22:00:20.059]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:00:20.059]    <block atomic="false" info="">
[22:00:20.059]      __var SW_DP_ABORT       = 0x0;
[22:00:20.059]        // -> [SW_DP_ABORT <= 0x00000000]
[22:00:20.059]      __var DP_CTRL_STAT      = 0x4;
[22:00:20.059]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:00:20.060]      __var DP_SELECT         = 0x8;
[22:00:20.060]        // -> [DP_SELECT <= 0x00000008]
[22:00:20.060]      __var powered_down      = 0;
[22:00:20.060]        // -> [powered_down <= 0x00000000]
[22:00:20.060]      WriteDP(DP_SELECT, 0x00000000);
[22:00:20.061]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:00:20.061]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:00:20.061]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:00:20.061]        // -> [powered_down <= 0x00000001]
[22:00:20.062]    </block>
[22:00:20.062]    <control if="powered_down" while="" timeout="0" info="">
[22:00:20.062]      // if-block "powered_down"
[22:00:20.062]        // =>  TRUE
[22:00:20.062]      <block atomic="false" info="">
[22:00:20.062]        Message(0, "Debug/System power-up request sent");
[22:00:20.064]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:00:20.064]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:00:20.064]      </block>
[22:00:20.065]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:00:20.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:00:20.065]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:00:20.065]        // while-condition  =>  FALSE
[22:00:20.065]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:00:20.066]      </control>
[22:00:20.066]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:00:20.066]        // if-block "(__protocol & 0xFFFF) == 1"
[22:00:20.066]          // =>  FALSE
[22:00:20.066]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:00:20.066]      </control>
[22:00:20.066]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:00:20.067]        // if-block "(__protocol & 0xFFFF) == 2"
[22:00:20.067]          // =>  TRUE
[22:00:20.067]        <block atomic="false" info="">
[22:00:20.067]          Message(0, "executing SWD power up");
[22:00:20.070]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:00:20.070]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:00:20.070]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:00:20.071]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:00:20.071]        </block>
[22:00:20.071]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:00:20.071]      </control>
[22:00:20.071]      // end if-block "powered_down"
[22:00:20.071]    </control>
[22:00:20.072]    <block atomic="false" info="">
[22:00:20.072]      __var DEBUG_PORT_VAL    = 0;
[22:00:20.072]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:00:20.072]      __var ACCESS_POINT_VAL  = 0;
[22:00:20.072]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:00:20.072]      __ap = 1; 
[22:00:20.072]        // -> [__ap <= 0x00000001]
[22:00:20.073]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:00:20.074]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:00:20.075]      __ap = 4;
[22:00:20.075]        // -> [__ap <= 0x00000004]
[22:00:20.075]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:20.076]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:00:20.076]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:00:20.076]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:20.078]    </block>
[22:00:20.078]    <block atomic="false" info="">
[22:00:20.078]      __var nReset = 0x80;
[22:00:20.079]        // -> [nReset <= 0x00000080]
[22:00:20.079]      __var canReadPins = 0;
[22:00:20.079]        // -> [canReadPins <= 0x00000000]
[22:00:20.079]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:00:20.079]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:00:20.079]        // -> [canReadPins <= 0x00000001]
[22:00:20.079]    </block>
[22:00:20.080]    <control if="" while="1" timeout="200" info="">
[22:00:20.080]      // while "1"  (timeout="200")
[22:00:20.080]      // while-condition  =>  TRUE
[22:00:20.080]      // while "1"  (timeout="200")
[22:00:20.080]      // while-condition  =>  TRUE
[22:00:20.080]      // while "1"  (timeout="200")
[22:00:20.080]      // while-condition  =>  TRUE
[22:00:20.081]      // while "1"  (timeout="200")
[22:00:20.081]      // while-condition  =>  TRUE
[22:00:20.081]      // while "1"  (timeout="200")
[22:00:20.081]      // while-condition  =>  TRUE
[22:00:20.081]      // while "1"  (timeout="200")
[22:00:20.082]      // while-condition  =>  TRUE
[22:00:20.082]      // while "1"  (timeout="200")
[22:00:20.082]      // while-condition  =>  TRUE
[22:00:20.082]      // while "1"  (timeout="200")
[22:00:20.082]      // while-condition  =>  TRUE
[22:00:20.082]      // while "1"  (timeout="200")
[22:00:20.082]      // while-condition  =>  TRUE
[22:00:20.082]      // while "1"  (timeout="200")
[22:00:20.082]      // while-condition  =>  TRUE
[22:00:20.082]      // while "1"  (timeout="200")
[22:00:20.083]      // while-condition  =>  TRUE
[22:00:20.083]      // while "1"  (timeout="200")
[22:00:20.083]      // while-condition  =>  TRUE
[22:00:20.083]      // while "1"  (timeout="200")
[22:00:20.083]      // while-condition  =>  TRUE
[22:00:20.083]      // while "1"  (timeout="200")
[22:00:20.084]      // while-condition  =>  TRUE
[22:00:20.084]      // while "1"  (timeout="200")
[22:00:20.084]      // while  =>  TIMEOUT
[22:00:20.084]      // end while "1"
[22:00:20.084]    </control>
[22:00:20.084]    <control if="canReadPins" while="" timeout="0" info="">
[22:00:20.084]      // if-block "canReadPins"
[22:00:20.085]        // =>  TRUE
[22:00:20.085]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:00:20.085]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:00:20.085]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:00:20.085]        // while-condition  =>  FALSE
[22:00:20.086]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:00:20.086]      </control>
[22:00:20.086]      // end if-block "canReadPins"
[22:00:20.086]    </control>
[22:00:20.086]    <control if="!canReadPins" while="" timeout="0" info="">
[22:00:20.086]      // if-block "!canReadPins"
[22:00:20.086]        // =>  FALSE
[22:00:20.086]      // skip if-block "!canReadPins"
[22:00:20.087]    </control>
[22:00:20.087]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:00:20.087]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:20.087]        // =>  TRUE
[22:00:20.087]      <block atomic="false" info="">
[22:00:20.087]        WriteAP(0x00, 0x190008);
[22:00:20.088]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:20.088]        WriteAP(0xF0, 0x01);
[22:00:20.088]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:20.088]      </block>
[22:00:20.088]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:20.090]    </control>
[22:00:20.090]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:00:20.090]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:20.090]        // =>  FALSE
[22:00:20.090]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:20.090]    </control>
[22:00:20.090]    <block atomic="false" info="">
[22:00:20.090]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:20.092]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:00:20.092]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:00:20.092]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:20.094]      __ap = 0; //lets make sure we reset the access point selection
[22:00:20.094]        // -> [__ap <= 0x00000000]
[22:00:20.094]    </block>
[22:00:20.094]  </sequence>
[22:00:20.094]  
[22:00:20.101]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:00:20.101]  
[22:00:20.101]  <debugvars>
[22:00:20.101]    // Pre-defined
[22:00:20.101]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:20.102]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:00:20.102]    __dp=0x00000000
[22:00:20.102]    __ap=0x00000000
[22:00:20.102]    __traceout=0x00000000      (Trace Disabled)
[22:00:20.102]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:20.102]    __FlashAddr=0x00000000
[22:00:20.102]    __FlashLen=0x00000000
[22:00:20.102]    __FlashArg=0x00000000
[22:00:20.102]    __FlashOp=0x00000000
[22:00:20.102]    __Result=0x00000000
[22:00:20.102]  </debugvars>
[22:00:20.102]  
[22:00:20.102]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:00:20.102]    <block atomic="false" info="">
[22:00:20.102]      __var deviceID = 0;
[22:00:20.102]        // -> [deviceID <= 0x00000000]
[22:00:20.102]      __var version = 0;
[22:00:20.103]        // -> [version <= 0x00000000]
[22:00:20.103]      __var partNum = 0;
[22:00:20.103]        // -> [partNum <= 0x00000000]
[22:00:20.103]      __var manuf = 0;
[22:00:20.103]        // -> [manuf <= 0x00000000]
[22:00:20.103]      __var isMSPM0G1X0X_G3X0X = 0;
[22:00:20.104]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:00:20.104]      __var isProduction = 0;
[22:00:20.104]        // -> [isProduction <= 0x00000000]
[22:00:20.104]      __var continueId = 0;
[22:00:20.104]        // -> [continueId <= 0x00000000]
[22:00:20.104]      deviceID =   Read32(0x41C40004);
[22:00:20.106]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:00:20.106]        // -> [deviceID <= 0x2BB8802F]
[22:00:20.106]      version = deviceID >> 28;
[22:00:20.106]        // -> [version <= 0x00000002]
[22:00:20.106]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:00:20.106]        // -> [partNum <= 0x0000BB88]
[22:00:20.106]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:00:20.107]        // -> [manuf <= 0x00000017]
[22:00:20.107]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:00:20.107]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:00:20.107]      isProduction = (version > 0);
[22:00:20.107]        // -> [isProduction <= 0x00000001]
[22:00:20.107]    </block>
[22:00:20.107]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:00:20.107]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:00:20.108]        // =>  FALSE
[22:00:20.108]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:00:20.108]    </control>
[22:00:20.108]    <control if="continueId == 4" while="" timeout="0" info="">
[22:00:20.108]      // if-block "continueId == 4"
[22:00:20.108]        // =>  FALSE
[22:00:20.108]      // skip if-block "continueId == 4"
[22:00:20.108]    </control>
[22:00:20.109]    <control if="!isProduction" while="" timeout="0" info="">
[22:00:20.109]      // if-block "!isProduction"
[22:00:20.110]        // =>  FALSE
[22:00:20.110]      // skip if-block "!isProduction"
[22:00:20.110]    </control>
[22:00:20.110]  </sequence>
[22:00:20.110]  
[22:09:12.925]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:09:12.925]  
[22:09:12.936]  <debugvars>
[22:09:12.936]    // Pre-defined
[22:09:12.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:12.936]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:12.936]    __dp=0x00000000
[22:09:12.936]    __ap=0x00000000
[22:09:12.936]    __traceout=0x00000000      (Trace Disabled)
[22:09:12.936]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:12.936]    __FlashAddr=0x00000000
[22:09:12.936]    __FlashLen=0x00000000
[22:09:12.936]    __FlashArg=0x00000000
[22:09:12.936]    __FlashOp=0x00000000
[22:09:12.936]    __Result=0x00000000
[22:09:12.936]  </debugvars>
[22:09:12.936]  
[22:09:12.936]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:09:12.936]    <block atomic="false" info="">
[22:09:12.936]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:09:12.936]        // -> [isSWJ <= 0x00000001]
[22:09:12.936]      __var hasDormant = __protocol & 0x00020000;
[22:09:12.936]        // -> [hasDormant <= 0x00000000]
[22:09:12.936]      __var protType   = __protocol & 0x0000FFFF;
[22:09:12.936]        // -> [protType <= 0x00000002]
[22:09:12.936]    </block>
[22:09:12.936]    <control if="protType == 1" while="" timeout="0" info="">
[22:09:12.936]      // if-block "protType == 1"
[22:09:12.936]        // =>  FALSE
[22:09:12.936]      // skip if-block "protType == 1"
[22:09:12.936]    </control>
[22:09:12.936]    <control if="protType == 2" while="" timeout="0" info="">
[22:09:12.936]      // if-block "protType == 2"
[22:09:12.936]        // =>  TRUE
[22:09:12.936]      <control if="isSWJ" while="" timeout="0" info="">
[22:09:12.936]        // if-block "isSWJ"
[22:09:12.936]          // =>  TRUE
[22:09:12.936]        <control if="hasDormant" while="" timeout="0" info="">
[22:09:12.936]          // if-block "hasDormant"
[22:09:12.936]            // =>  FALSE
[22:09:12.936]          // skip if-block "hasDormant"
[22:09:12.936]        </control>
[22:09:12.936]        <control if="!hasDormant" while="" timeout="0" info="">
[22:09:12.936]          // if-block "!hasDormant"
[22:09:12.936]            // =>  TRUE
[22:09:12.936]          <block atomic="false" info="">
[22:09:12.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:09:12.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:12.936]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:09:12.936]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:09:12.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:09:12.943]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:12.943]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:09:12.943]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:09:12.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:09:12.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:12.944]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:09:12.944]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:09:12.944]          </block>
[22:09:12.944]          // end if-block "!hasDormant"
[22:09:12.944]        </control>
[22:09:12.944]        // end if-block "isSWJ"
[22:09:12.944]      </control>
[22:09:12.944]      <control if="!isSWJ" while="" timeout="0" info="">
[22:09:12.945]        // if-block "!isSWJ"
[22:09:12.945]          // =>  FALSE
[22:09:12.945]        // skip if-block "!isSWJ"
[22:09:12.945]      </control>
[22:09:12.945]      <block atomic="false" info="">
[22:09:12.945]        ReadDP(0x0);
[22:09:12.945]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:09:12.945]      </block>
[22:09:12.945]      // end if-block "protType == 2"
[22:09:12.945]    </control>
[22:09:12.945]  </sequence>
[22:09:12.945]  
[22:09:12.945]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:09:12.945]  
[22:09:12.945]  <debugvars>
[22:09:12.945]    // Pre-defined
[22:09:12.945]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:12.945]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:12.945]    __dp=0x00000000
[22:09:12.945]    __ap=0x00000000
[22:09:12.945]    __traceout=0x00000000      (Trace Disabled)
[22:09:12.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:12.945]    __FlashAddr=0x00000000
[22:09:12.945]    __FlashLen=0x00000000
[22:09:12.945]    __FlashArg=0x00000000
[22:09:12.945]    __FlashOp=0x00000000
[22:09:12.945]    __Result=0x00000000
[22:09:12.945]  </debugvars>
[22:09:12.945]  
[22:09:12.945]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:09:12.945]    <block atomic="false" info="">
[22:09:12.945]      __var SW_DP_ABORT       = 0x0;
[22:09:12.945]        // -> [SW_DP_ABORT <= 0x00000000]
[22:09:12.945]      __var DP_CTRL_STAT      = 0x4;
[22:09:12.945]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:09:12.945]      __var DP_SELECT         = 0x8;
[22:09:12.945]        // -> [DP_SELECT <= 0x00000008]
[22:09:12.945]      __var powered_down      = 0;
[22:09:12.945]        // -> [powered_down <= 0x00000000]
[22:09:12.945]      WriteDP(DP_SELECT, 0x00000000);
[22:09:12.945]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:09:12.945]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:09:12.945]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:09:12.945]        // -> [powered_down <= 0x00000001]
[22:09:12.945]    </block>
[22:09:12.945]    <control if="powered_down" while="" timeout="0" info="">
[22:09:12.945]      // if-block "powered_down"
[22:09:12.945]        // =>  TRUE
[22:09:12.945]      <block atomic="false" info="">
[22:09:12.945]        Message(0, "Debug/System power-up request sent");
[22:09:12.954]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:09:12.954]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:09:12.954]      </block>
[22:09:12.954]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:09:12.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:09:12.957]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:09:12.957]        // while-condition  =>  FALSE
[22:09:12.957]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:09:12.957]      </control>
[22:09:12.957]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:09:12.957]        // if-block "(__protocol & 0xFFFF) == 1"
[22:09:12.957]          // =>  FALSE
[22:09:12.957]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:09:12.957]      </control>
[22:09:12.957]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:09:12.957]        // if-block "(__protocol & 0xFFFF) == 2"
[22:09:12.959]          // =>  TRUE
[22:09:12.959]        <block atomic="false" info="">
[22:09:12.959]          Message(0, "executing SWD power up");
[22:09:12.959]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:09:12.959]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:09:12.959]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:09:12.962]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:09:12.962]        </block>
[22:09:12.962]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:09:12.962]      </control>
[22:09:12.962]      // end if-block "powered_down"
[22:09:12.963]    </control>
[22:09:12.963]    <block atomic="false" info="">
[22:09:12.963]      __var DEBUG_PORT_VAL    = 0;
[22:09:12.963]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:09:12.963]      __var ACCESS_POINT_VAL  = 0;
[22:09:12.963]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:09:12.963]      __ap = 1; 
[22:09:12.965]        // -> [__ap <= 0x00000001]
[22:09:12.965]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:09:12.965]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:09:12.965]      __ap = 4;
[22:09:12.965]        // -> [__ap <= 0x00000004]
[22:09:12.965]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:12.967]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:09:12.967]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:09:12.967]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:12.967]    </block>
[22:09:12.967]    <block atomic="false" info="">
[22:09:12.967]      __var nReset = 0x80;
[22:09:12.967]        // -> [nReset <= 0x00000080]
[22:09:12.967]      __var canReadPins = 0;
[22:09:12.967]        // -> [canReadPins <= 0x00000000]
[22:09:12.967]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:09:12.967]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:09:12.967]        // -> [canReadPins <= 0x00000001]
[22:09:12.967]    </block>
[22:09:12.967]    <control if="" while="1" timeout="200" info="">
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.967]      // while-condition  =>  TRUE
[22:09:12.967]      // while "1"  (timeout="200")
[22:09:12.973]      // while-condition  =>  TRUE
[22:09:12.973]      // while "1"  (timeout="200")
[22:09:12.973]      // while-condition  =>  TRUE
[22:09:12.973]      // while "1"  (timeout="200")
[22:09:12.973]      // while-condition  =>  TRUE
[22:09:12.973]      // while "1"  (timeout="200")
[22:09:12.973]      // while-condition  =>  TRUE
[22:09:12.973]      // while "1"  (timeout="200")
[22:09:12.973]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.974]      // while-condition  =>  TRUE
[22:09:12.974]      // while "1"  (timeout="200")
[22:09:12.983]      // while-condition  =>  TRUE
[22:09:12.983]      // while "1"  (timeout="200")
[22:09:12.983]      // while  =>  TIMEOUT
[22:09:12.983]      // end while "1"
[22:09:12.983]    </control>
[22:09:12.983]    <control if="canReadPins" while="" timeout="0" info="">
[22:09:12.984]      // if-block "canReadPins"
[22:09:12.984]        // =>  TRUE
[22:09:12.984]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:09:12.984]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:09:12.984]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:09:12.984]        // while-condition  =>  FALSE
[22:09:12.984]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:09:12.984]      </control>
[22:09:12.984]      // end if-block "canReadPins"
[22:09:12.984]    </control>
[22:09:12.984]    <control if="!canReadPins" while="" timeout="0" info="">
[22:09:12.984]      // if-block "!canReadPins"
[22:09:12.984]        // =>  FALSE
[22:09:12.984]      // skip if-block "!canReadPins"
[22:09:12.984]    </control>
[22:09:12.984]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:09:12.984]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:12.984]        // =>  TRUE
[22:09:12.984]      <block atomic="false" info="">
[22:09:12.984]        WriteAP(0x00, 0x190008);
[22:09:12.984]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:12.984]        WriteAP(0xF0, 0x01);
[22:09:12.984]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:12.984]      </block>
[22:09:12.984]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:12.984]    </control>
[22:09:12.984]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:09:12.984]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:12.984]        // =>  FALSE
[22:09:12.984]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:12.984]    </control>
[22:09:12.984]    <block atomic="false" info="">
[22:09:12.984]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:12.984]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:09:12.984]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:09:12.984]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:12.984]      __ap = 0; //lets make sure we reset the access point selection
[22:09:12.984]        // -> [__ap <= 0x00000000]
[22:09:12.984]    </block>
[22:09:12.984]  </sequence>
[22:09:12.984]  
[22:09:12.994]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:09:12.994]  
[22:09:12.994]  <debugvars>
[22:09:12.994]    // Pre-defined
[22:09:12.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:12.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:12.994]    __dp=0x00000000
[22:09:12.994]    __ap=0x00000000
[22:09:12.994]    __traceout=0x00000000      (Trace Disabled)
[22:09:12.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:12.994]    __FlashAddr=0x00000000
[22:09:12.994]    __FlashLen=0x00000000
[22:09:12.994]    __FlashArg=0x00000000
[22:09:12.994]    __FlashOp=0x00000000
[22:09:12.994]    __Result=0x00000000
[22:09:12.994]  </debugvars>
[22:09:12.994]  
[22:09:12.994]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:09:12.994]    <block atomic="false" info="">
[22:09:12.994]      __var deviceID = 0;
[22:09:12.994]        // -> [deviceID <= 0x00000000]
[22:09:12.994]      __var version = 0;
[22:09:12.994]        // -> [version <= 0x00000000]
[22:09:12.994]      __var partNum = 0;
[22:09:12.994]        // -> [partNum <= 0x00000000]
[22:09:12.994]      __var manuf = 0;
[22:09:12.994]        // -> [manuf <= 0x00000000]
[22:09:12.994]      __var isMSPM0G1X0X_G3X0X = 0;
[22:09:12.994]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:09:12.994]      __var isProduction = 0;
[22:09:12.994]        // -> [isProduction <= 0x00000000]
[22:09:12.994]      __var continueId = 0;
[22:09:12.994]        // -> [continueId <= 0x00000000]
[22:09:12.994]      deviceID =   Read32(0x41C40004);
[22:09:13.003]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:09:13.004]        // -> [deviceID <= 0x2BB8802F]
[22:09:13.004]      version = deviceID >> 28;
[22:09:13.004]        // -> [version <= 0x00000002]
[22:09:13.004]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:09:13.004]        // -> [partNum <= 0x0000BB88]
[22:09:13.004]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:09:13.004]        // -> [manuf <= 0x00000017]
[22:09:13.004]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:09:13.004]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:09:13.004]      isProduction = (version > 0);
[22:09:13.004]        // -> [isProduction <= 0x00000001]
[22:09:13.004]    </block>
[22:09:13.005]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:09:13.005]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:09:13.005]        // =>  FALSE
[22:09:13.005]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:09:13.005]    </control>
[22:09:13.005]    <control if="continueId == 4" while="" timeout="0" info="">
[22:09:13.005]      // if-block "continueId == 4"
[22:09:13.005]        // =>  FALSE
[22:09:13.005]      // skip if-block "continueId == 4"
[22:09:13.005]    </control>
[22:09:13.005]    <control if="!isProduction" while="" timeout="0" info="">
[22:09:13.005]      // if-block "!isProduction"
[22:09:13.005]        // =>  FALSE
[22:09:13.005]      // skip if-block "!isProduction"
[22:09:13.005]    </control>
[22:09:13.005]  </sequence>
[22:09:13.005]  
[22:09:16.374]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:09:16.374]  
[22:09:16.375]  <debugvars>
[22:09:16.375]    // Pre-defined
[22:09:16.375]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:16.375]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:09:16.375]    __dp=0x00000000
[22:09:16.375]    __ap=0x00000000
[22:09:16.375]    __traceout=0x00000000      (Trace Disabled)
[22:09:16.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:16.375]    __FlashAddr=0x00000000
[22:09:16.375]    __FlashLen=0x00000000
[22:09:16.375]    __FlashArg=0x00000000
[22:09:16.375]    __FlashOp=0x00000000
[22:09:16.375]    __Result=0x00000000
[22:09:16.375]  </debugvars>
[22:09:16.375]  
[22:09:16.375]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:09:16.375]    <block atomic="false" info="">
[22:09:16.375]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:09:16.375]        // -> [isSWJ <= 0x00000001]
[22:09:16.375]      __var hasDormant = __protocol & 0x00020000;
[22:09:16.375]        // -> [hasDormant <= 0x00000000]
[22:09:16.375]      __var protType   = __protocol & 0x0000FFFF;
[22:09:16.375]        // -> [protType <= 0x00000002]
[22:09:16.375]    </block>
[22:09:16.375]    <control if="protType == 1" while="" timeout="0" info="">
[22:09:16.375]      // if-block "protType == 1"
[22:09:16.375]        // =>  FALSE
[22:09:16.375]      // skip if-block "protType == 1"
[22:09:16.375]    </control>
[22:09:16.375]    <control if="protType == 2" while="" timeout="0" info="">
[22:09:16.375]      // if-block "protType == 2"
[22:09:16.375]        // =>  TRUE
[22:09:16.375]      <control if="isSWJ" while="" timeout="0" info="">
[22:09:16.375]        // if-block "isSWJ"
[22:09:16.375]          // =>  TRUE
[22:09:16.375]        <control if="hasDormant" while="" timeout="0" info="">
[22:09:16.375]          // if-block "hasDormant"
[22:09:16.375]            // =>  FALSE
[22:09:16.375]          // skip if-block "hasDormant"
[22:09:16.375]        </control>
[22:09:16.375]        <control if="!hasDormant" while="" timeout="0" info="">
[22:09:16.375]          // if-block "!hasDormant"
[22:09:16.375]            // =>  TRUE
[22:09:16.375]          <block atomic="false" info="">
[22:09:16.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:09:16.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:16.375]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:09:16.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:09:16.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:09:16.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:16.375]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:09:16.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:09:16.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:09:16.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:16.375]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:09:16.375]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:09:16.375]          </block>
[22:09:16.375]          // end if-block "!hasDormant"
[22:09:16.375]        </control>
[22:09:16.375]        // end if-block "isSWJ"
[22:09:16.375]      </control>
[22:09:16.375]      <control if="!isSWJ" while="" timeout="0" info="">
[22:09:16.383]        // if-block "!isSWJ"
[22:09:16.383]          // =>  FALSE
[22:09:16.383]        // skip if-block "!isSWJ"
[22:09:16.383]      </control>
[22:09:16.383]      <block atomic="false" info="">
[22:09:16.383]        ReadDP(0x0);
[22:09:16.383]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:09:16.384]      </block>
[22:09:16.384]      // end if-block "protType == 2"
[22:09:16.384]    </control>
[22:09:16.384]  </sequence>
[22:09:16.384]  
[22:09:16.384]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:09:16.384]  
[22:09:16.385]  <debugvars>
[22:09:16.385]    // Pre-defined
[22:09:16.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:16.385]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:09:16.385]    __dp=0x00000000
[22:09:16.385]    __ap=0x00000000
[22:09:16.385]    __traceout=0x00000000      (Trace Disabled)
[22:09:16.385]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:16.385]    __FlashAddr=0x00000000
[22:09:16.385]    __FlashLen=0x00000000
[22:09:16.385]    __FlashArg=0x00000000
[22:09:16.385]    __FlashOp=0x00000000
[22:09:16.385]    __Result=0x00000000
[22:09:16.385]  </debugvars>
[22:09:16.385]  
[22:09:16.385]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:09:16.385]    <block atomic="false" info="">
[22:09:16.385]      __var SW_DP_ABORT       = 0x0;
[22:09:16.385]        // -> [SW_DP_ABORT <= 0x00000000]
[22:09:16.385]      __var DP_CTRL_STAT      = 0x4;
[22:09:16.385]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:09:16.385]      __var DP_SELECT         = 0x8;
[22:09:16.385]        // -> [DP_SELECT <= 0x00000008]
[22:09:16.385]      __var powered_down      = 0;
[22:09:16.385]        // -> [powered_down <= 0x00000000]
[22:09:16.385]      WriteDP(DP_SELECT, 0x00000000);
[22:09:16.385]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:09:16.385]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:09:16.385]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:09:16.385]        // -> [powered_down <= 0x00000001]
[22:09:16.385]    </block>
[22:09:16.385]    <control if="powered_down" while="" timeout="0" info="">
[22:09:16.385]      // if-block "powered_down"
[22:09:16.385]        // =>  TRUE
[22:09:16.385]      <block atomic="false" info="">
[22:09:16.385]        Message(0, "Debug/System power-up request sent");
[22:09:16.385]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:09:16.385]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:09:16.385]      </block>
[22:09:16.385]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:09:16.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:09:16.385]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:09:16.385]        // while-condition  =>  FALSE
[22:09:16.385]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:09:16.385]      </control>
[22:09:16.385]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:09:16.393]        // if-block "(__protocol & 0xFFFF) == 1"
[22:09:16.393]          // =>  FALSE
[22:09:16.393]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:09:16.393]      </control>
[22:09:16.393]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:09:16.393]        // if-block "(__protocol & 0xFFFF) == 2"
[22:09:16.393]          // =>  TRUE
[22:09:16.393]        <block atomic="false" info="">
[22:09:16.393]          Message(0, "executing SWD power up");
[22:09:16.394]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:09:16.394]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:09:16.394]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:09:16.394]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:09:16.394]        </block>
[22:09:16.394]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:09:16.394]      </control>
[22:09:16.394]      // end if-block "powered_down"
[22:09:16.394]    </control>
[22:09:16.394]    <block atomic="false" info="">
[22:09:16.394]      __var DEBUG_PORT_VAL    = 0;
[22:09:16.394]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:09:16.394]      __var ACCESS_POINT_VAL  = 0;
[22:09:16.394]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:09:16.394]      __ap = 1; 
[22:09:16.394]        // -> [__ap <= 0x00000001]
[22:09:16.394]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:09:16.394]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:09:16.394]      __ap = 4;
[22:09:16.394]        // -> [__ap <= 0x00000004]
[22:09:16.394]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:16.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:09:16.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:09:16.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:16.394]    </block>
[22:09:16.394]    <block atomic="false" info="">
[22:09:16.394]      __var nReset = 0x80;
[22:09:16.394]        // -> [nReset <= 0x00000080]
[22:09:16.402]      __var canReadPins = 0;
[22:09:16.402]        // -> [canReadPins <= 0x00000000]
[22:09:16.402]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:09:16.402]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:09:16.403]        // -> [canReadPins <= 0x00000001]
[22:09:16.403]    </block>
[22:09:16.403]    <control if="" while="1" timeout="200" info="">
[22:09:16.403]      // while "1"  (timeout="200")
[22:09:16.403]      // while-condition  =>  TRUE
[22:09:16.403]      // while "1"  (timeout="200")
[22:09:16.403]      // while-condition  =>  TRUE
[22:09:16.403]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.404]      // while-condition  =>  TRUE
[22:09:16.404]      // while "1"  (timeout="200")
[22:09:16.413]      // while-condition  =>  TRUE
[22:09:16.413]      // while "1"  (timeout="200")
[22:09:16.413]      // while  =>  TIMEOUT
[22:09:16.413]      // end while "1"
[22:09:16.413]    </control>
[22:09:16.413]    <control if="canReadPins" while="" timeout="0" info="">
[22:09:16.413]      // if-block "canReadPins"
[22:09:16.413]        // =>  TRUE
[22:09:16.414]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:09:16.414]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:09:16.414]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:09:16.414]        // while-condition  =>  FALSE
[22:09:16.414]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:09:16.414]      </control>
[22:09:16.414]      // end if-block "canReadPins"
[22:09:16.414]    </control>
[22:09:16.414]    <control if="!canReadPins" while="" timeout="0" info="">
[22:09:16.414]      // if-block "!canReadPins"
[22:09:16.414]        // =>  FALSE
[22:09:16.414]      // skip if-block "!canReadPins"
[22:09:16.414]    </control>
[22:09:16.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:09:16.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:16.414]        // =>  TRUE
[22:09:16.414]      <block atomic="false" info="">
[22:09:16.414]        WriteAP(0x00, 0x190008);
[22:09:16.416]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:16.416]        WriteAP(0xF0, 0x01);
[22:09:16.417]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:16.417]      </block>
[22:09:16.417]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:16.417]    </control>
[22:09:16.417]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:09:16.417]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:16.417]        // =>  FALSE
[22:09:16.417]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:16.417]    </control>
[22:09:16.417]    <block atomic="false" info="">
[22:09:16.417]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:16.417]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:09:16.417]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:09:16.417]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:16.417]      __ap = 0; //lets make sure we reset the access point selection
[22:09:16.417]        // -> [__ap <= 0x00000000]
[22:09:16.417]    </block>
[22:09:16.417]  </sequence>
[22:09:16.417]  
[22:09:16.426]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:09:16.426]  
[22:09:16.426]  <debugvars>
[22:09:16.426]    // Pre-defined
[22:09:16.426]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:16.426]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:09:16.426]    __dp=0x00000000
[22:09:16.426]    __ap=0x00000000
[22:09:16.426]    __traceout=0x00000000      (Trace Disabled)
[22:09:16.426]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:16.426]    __FlashAddr=0x00000000
[22:09:16.426]    __FlashLen=0x00000000
[22:09:16.426]    __FlashArg=0x00000000
[22:09:16.426]    __FlashOp=0x00000000
[22:09:16.426]    __Result=0x00000000
[22:09:16.426]  </debugvars>
[22:09:16.426]  
[22:09:16.426]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:09:16.426]    <block atomic="false" info="">
[22:09:16.426]      __var deviceID = 0;
[22:09:16.426]        // -> [deviceID <= 0x00000000]
[22:09:16.426]      __var version = 0;
[22:09:16.426]        // -> [version <= 0x00000000]
[22:09:16.426]      __var partNum = 0;
[22:09:16.426]        // -> [partNum <= 0x00000000]
[22:09:16.426]      __var manuf = 0;
[22:09:16.426]        // -> [manuf <= 0x00000000]
[22:09:16.426]      __var isMSPM0G1X0X_G3X0X = 0;
[22:09:16.426]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:09:16.426]      __var isProduction = 0;
[22:09:16.426]        // -> [isProduction <= 0x00000000]
[22:09:16.426]      __var continueId = 0;
[22:09:16.426]        // -> [continueId <= 0x00000000]
[22:09:16.426]      deviceID =   Read32(0x41C40004);
[22:09:16.433]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:09:16.433]        // -> [deviceID <= 0x2BB8802F]
[22:09:16.433]      version = deviceID >> 28;
[22:09:16.433]        // -> [version <= 0x00000002]
[22:09:16.433]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:09:16.433]        // -> [partNum <= 0x0000BB88]
[22:09:16.433]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:09:16.433]        // -> [manuf <= 0x00000017]
[22:09:16.433]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:09:16.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:09:16.433]      isProduction = (version > 0);
[22:09:16.433]        // -> [isProduction <= 0x00000001]
[22:09:16.433]    </block>
[22:09:16.433]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:09:16.433]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:09:16.433]        // =>  FALSE
[22:09:16.433]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:09:16.433]    </control>
[22:09:16.433]    <control if="continueId == 4" while="" timeout="0" info="">
[22:09:16.433]      // if-block "continueId == 4"
[22:09:16.433]        // =>  FALSE
[22:09:16.433]      // skip if-block "continueId == 4"
[22:09:16.433]    </control>
[22:09:16.433]    <control if="!isProduction" while="" timeout="0" info="">
[22:09:16.433]      // if-block "!isProduction"
[22:09:16.433]        // =>  FALSE
[22:09:16.433]      // skip if-block "!isProduction"
[22:09:16.433]    </control>
[22:09:16.433]  </sequence>
[22:09:16.433]  
[22:45:32.725]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:45:32.725]  
[22:45:32.725]  <debugvars>
[22:45:32.725]    // Pre-defined
[22:45:32.725]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:32.725]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:45:32.725]    __dp=0x00000000
[22:45:32.725]    __ap=0x00000000
[22:45:32.725]    __traceout=0x00000000      (Trace Disabled)
[22:45:32.725]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:32.725]    __FlashAddr=0x00000000
[22:45:32.725]    __FlashLen=0x00000000
[22:45:32.725]    __FlashArg=0x00000000
[22:45:32.725]    __FlashOp=0x00000000
[22:45:32.725]    __Result=0x00000000
[22:45:32.728]  </debugvars>
[22:45:32.728]  
[22:45:32.728]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:45:32.728]    <block atomic="false" info="">
[22:45:32.728]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:45:32.728]        // -> [isSWJ <= 0x00000001]
[22:45:32.728]      __var hasDormant = __protocol & 0x00020000;
[22:45:32.728]        // -> [hasDormant <= 0x00000000]
[22:45:32.728]      __var protType   = __protocol & 0x0000FFFF;
[22:45:32.728]        // -> [protType <= 0x00000002]
[22:45:32.728]    </block>
[22:45:32.728]    <control if="protType == 1" while="" timeout="0" info="">
[22:45:32.728]      // if-block "protType == 1"
[22:45:32.728]        // =>  FALSE
[22:45:32.728]      // skip if-block "protType == 1"
[22:45:32.730]    </control>
[22:45:32.730]    <control if="protType == 2" while="" timeout="0" info="">
[22:45:32.730]      // if-block "protType == 2"
[22:45:32.730]        // =>  TRUE
[22:45:32.730]      <control if="isSWJ" while="" timeout="0" info="">
[22:45:32.730]        // if-block "isSWJ"
[22:45:32.730]          // =>  TRUE
[22:45:32.730]        <control if="hasDormant" while="" timeout="0" info="">
[22:45:32.730]          // if-block "hasDormant"
[22:45:32.730]            // =>  FALSE
[22:45:32.731]          // skip if-block "hasDormant"
[22:45:32.731]        </control>
[22:45:32.731]        <control if="!hasDormant" while="" timeout="0" info="">
[22:45:32.731]          // if-block "!hasDormant"
[22:45:32.731]            // =>  TRUE
[22:45:32.731]          <block atomic="false" info="">
[22:45:32.731]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:45:32.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:32.732]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:45:32.733]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:45:32.733]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:45:32.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:32.733]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:45:32.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:45:32.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:45:32.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:32.734]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:45:32.735]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:45:32.735]          </block>
[22:45:32.735]          // end if-block "!hasDormant"
[22:45:32.735]        </control>
[22:45:32.735]        // end if-block "isSWJ"
[22:45:32.735]      </control>
[22:45:32.735]      <control if="!isSWJ" while="" timeout="0" info="">
[22:45:32.735]        // if-block "!isSWJ"
[22:45:32.735]          // =>  FALSE
[22:45:32.735]        // skip if-block "!isSWJ"
[22:45:32.735]      </control>
[22:45:32.736]      <block atomic="false" info="">
[22:45:32.736]        ReadDP(0x0);
[22:45:32.736]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:45:32.736]      </block>
[22:45:32.736]      // end if-block "protType == 2"
[22:45:32.736]    </control>
[22:45:32.736]  </sequence>
[22:45:32.736]  
[22:45:35.124]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:45:35.124]  
[22:45:35.131]  <debugvars>
[22:45:35.131]    // Pre-defined
[22:45:35.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:35.131]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:35.131]    __dp=0x00000000
[22:45:35.131]    __ap=0x00000000
[22:45:35.131]    __traceout=0x00000000      (Trace Disabled)
[22:45:35.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:35.131]    __FlashAddr=0x00000000
[22:45:35.131]    __FlashLen=0x00000000
[22:45:35.131]    __FlashArg=0x00000000
[22:45:35.131]    __FlashOp=0x00000000
[22:45:35.131]    __Result=0x00000000
[22:45:35.133]  </debugvars>
[22:45:35.133]  
[22:45:35.133]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:45:35.133]    <block atomic="false" info="">
[22:45:35.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:45:35.133]        // -> [isSWJ <= 0x00000001]
[22:45:35.134]      __var hasDormant = __protocol & 0x00020000;
[22:45:35.134]        // -> [hasDormant <= 0x00000000]
[22:45:35.134]      __var protType   = __protocol & 0x0000FFFF;
[22:45:35.134]        // -> [protType <= 0x00000002]
[22:45:35.134]    </block>
[22:45:35.134]    <control if="protType == 1" while="" timeout="0" info="">
[22:45:35.134]      // if-block "protType == 1"
[22:45:35.134]        // =>  FALSE
[22:45:35.134]      // skip if-block "protType == 1"
[22:45:35.135]    </control>
[22:45:35.135]    <control if="protType == 2" while="" timeout="0" info="">
[22:45:35.135]      // if-block "protType == 2"
[22:45:35.135]        // =>  TRUE
[22:45:35.135]      <control if="isSWJ" while="" timeout="0" info="">
[22:45:35.135]        // if-block "isSWJ"
[22:45:35.135]          // =>  TRUE
[22:45:35.135]        <control if="hasDormant" while="" timeout="0" info="">
[22:45:35.135]          // if-block "hasDormant"
[22:45:35.135]            // =>  FALSE
[22:45:35.135]          // skip if-block "hasDormant"
[22:45:35.135]        </control>
[22:45:35.135]        <control if="!hasDormant" while="" timeout="0" info="">
[22:45:35.135]          // if-block "!hasDormant"
[22:45:35.135]            // =>  TRUE
[22:45:35.135]          <block atomic="false" info="">
[22:45:35.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:45:35.135]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:35.135]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:45:35.135]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:45:35.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:45:35.135]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:35.135]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:45:35.135]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:45:35.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:45:35.135]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:35.135]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:45:35.135]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:45:35.135]          </block>
[22:45:35.135]          // end if-block "!hasDormant"
[22:45:35.135]        </control>
[22:45:35.135]        // end if-block "isSWJ"
[22:45:35.135]      </control>
[22:45:35.135]      <control if="!isSWJ" while="" timeout="0" info="">
[22:45:35.135]        // if-block "!isSWJ"
[22:45:35.135]          // =>  FALSE
[22:45:35.135]        // skip if-block "!isSWJ"
[22:45:35.135]      </control>
[22:45:35.135]      <block atomic="false" info="">
[22:45:35.135]        ReadDP(0x0);
[22:45:35.135]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:45:35.135]      </block>
[22:45:35.135]      // end if-block "protType == 2"
[22:45:35.135]    </control>
[22:45:35.135]  </sequence>
[22:45:35.135]  
[22:45:35.135]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:45:35.135]  
[22:45:35.135]  <debugvars>
[22:45:35.135]    // Pre-defined
[22:45:35.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:35.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:35.135]    __dp=0x00000000
[22:45:35.135]    __ap=0x00000000
[22:45:35.135]    __traceout=0x00000000      (Trace Disabled)
[22:45:35.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:35.135]    __FlashAddr=0x00000000
[22:45:35.135]    __FlashLen=0x00000000
[22:45:35.135]    __FlashArg=0x00000000
[22:45:35.135]    __FlashOp=0x00000000
[22:45:35.135]    __Result=0x00000000
[22:45:35.135]  </debugvars>
[22:45:35.135]  
[22:45:35.143]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:45:35.143]    <block atomic="false" info="">
[22:45:35.143]      __var SW_DP_ABORT       = 0x0;
[22:45:35.143]        // -> [SW_DP_ABORT <= 0x00000000]
[22:45:35.143]      __var DP_CTRL_STAT      = 0x4;
[22:45:35.143]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:45:35.143]      __var DP_SELECT         = 0x8;
[22:45:35.143]        // -> [DP_SELECT <= 0x00000008]
[22:45:35.143]      __var powered_down      = 0;
[22:45:35.143]        // -> [powered_down <= 0x00000000]
[22:45:35.144]      WriteDP(DP_SELECT, 0x00000000);
[22:45:35.144]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:45:35.144]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:45:35.144]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:45:35.144]        // -> [powered_down <= 0x00000001]
[22:45:35.144]    </block>
[22:45:35.144]    <control if="powered_down" while="" timeout="0" info="">
[22:45:35.144]      // if-block "powered_down"
[22:45:35.144]        // =>  TRUE
[22:45:35.144]      <block atomic="false" info="">
[22:45:35.144]        Message(0, "Debug/System power-up request sent");
[22:45:35.144]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:45:35.148]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:45:35.148]      </block>
[22:45:35.148]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:45:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.148]        // while-condition  =>  TRUE
[22:45:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.148]        // while-condition  =>  TRUE
[22:45:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.148]        // while-condition  =>  TRUE
[22:45:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.148]        // while-condition  =>  TRUE
[22:45:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.148]        // while-condition  =>  TRUE
[22:45:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.148]        // while-condition  =>  TRUE
[22:45:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.153]        // while-condition  =>  TRUE
[22:45:35.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.153]        // while-condition  =>  TRUE
[22:45:35.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.155]        // while-condition  =>  TRUE
[22:45:35.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.155]        // while-condition  =>  TRUE
[22:45:35.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.155]        // while-condition  =>  TRUE
[22:45:35.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.156]        // while-condition  =>  TRUE
[22:45:35.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.156]        // while-condition  =>  TRUE
[22:45:35.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.158]        // while-condition  =>  TRUE
[22:45:35.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.163]        // while-condition  =>  TRUE
[22:45:35.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.163]        // while-condition  =>  TRUE
[22:45:35.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.164]        // while-condition  =>  TRUE
[22:45:35.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.164]        // while-condition  =>  TRUE
[22:45:35.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.165]        // while-condition  =>  TRUE
[22:45:35.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.166]        // while-condition  =>  TRUE
[22:45:35.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.166]        // while-condition  =>  TRUE
[22:45:35.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.168]        // while-condition  =>  TRUE
[22:45:35.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.173]        // while-condition  =>  TRUE
[22:45:35.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.173]        // while-condition  =>  TRUE
[22:45:35.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.174]        // while-condition  =>  TRUE
[22:45:35.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.174]        // while-condition  =>  TRUE
[22:45:35.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.175]        // while-condition  =>  TRUE
[22:45:35.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.175]        // while-condition  =>  TRUE
[22:45:35.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.176]        // while-condition  =>  TRUE
[22:45:35.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.183]        // while-condition  =>  TRUE
[22:45:35.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.183]        // while-condition  =>  TRUE
[22:45:35.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.184]        // while-condition  =>  TRUE
[22:45:35.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.192]        // while-condition  =>  TRUE
[22:45:35.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.193]        // while-condition  =>  TRUE
[22:45:35.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.193]        // while-condition  =>  TRUE
[22:45:35.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.194]        // while-condition  =>  TRUE
[22:45:35.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.195]        // while-condition  =>  TRUE
[22:45:35.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.195]        // while-condition  =>  TRUE
[22:45:35.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.196]        // while-condition  =>  TRUE
[22:45:35.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.196]        // while-condition  =>  TRUE
[22:45:35.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.196]        // while-condition  =>  TRUE
[22:45:35.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.198]        // while-condition  =>  TRUE
[22:45:35.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.198]        // while-condition  =>  TRUE
[22:45:35.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.198]        // while-condition  =>  TRUE
[22:45:35.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.199]        // while-condition  =>  TRUE
[22:45:35.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.199]        // while-condition  =>  TRUE
[22:45:35.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.201]        // while-condition  =>  TRUE
[22:45:35.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.201]        // while-condition  =>  TRUE
[22:45:35.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.201]        // while-condition  =>  TRUE
[22:45:35.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.203]        // while-condition  =>  TRUE
[22:45:35.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.204]        // while-condition  =>  TRUE
[22:45:35.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.204]        // while-condition  =>  TRUE
[22:45:35.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.204]        // while-condition  =>  TRUE
[22:45:35.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.204]        // while-condition  =>  TRUE
[22:45:35.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.204]        // while-condition  =>  TRUE
[22:45:35.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.204]        // while-condition  =>  TRUE
[22:45:35.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.208]        // while-condition  =>  TRUE
[22:45:35.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.208]        // while-condition  =>  TRUE
[22:45:35.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.208]        // while-condition  =>  TRUE
[22:45:35.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.208]        // while-condition  =>  TRUE
[22:45:35.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.208]        // while-condition  =>  TRUE
[22:45:35.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.208]        // while-condition  =>  TRUE
[22:45:35.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.212]        // while-condition  =>  TRUE
[22:45:35.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.213]        // while-condition  =>  TRUE
[22:45:35.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.213]        // while-condition  =>  TRUE
[22:45:35.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.214]        // while-condition  =>  TRUE
[22:45:35.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.214]        // while-condition  =>  TRUE
[22:45:35.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.215]        // while-condition  =>  TRUE
[22:45:35.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.223]        // while-condition  =>  TRUE
[22:45:35.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.224]        // while-condition  =>  TRUE
[22:45:35.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.224]        // while-condition  =>  TRUE
[22:45:35.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.225]        // while-condition  =>  TRUE
[22:45:35.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.233]        // while-condition  =>  TRUE
[22:45:35.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.234]        // while-condition  =>  TRUE
[22:45:35.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.234]        // while-condition  =>  TRUE
[22:45:35.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.234]        // while-condition  =>  TRUE
[22:45:35.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.234]        // while-condition  =>  TRUE
[22:45:35.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.236]        // while-condition  =>  TRUE
[22:45:35.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.237]        // while-condition  =>  TRUE
[22:45:35.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.237]        // while-condition  =>  TRUE
[22:45:35.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.238]        // while-condition  =>  TRUE
[22:45:35.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.238]        // while-condition  =>  TRUE
[22:45:35.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.240]        // while-condition  =>  TRUE
[22:45:35.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.240]        // while-condition  =>  TRUE
[22:45:35.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.241]        // while-condition  =>  TRUE
[22:45:35.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.241]        // while-condition  =>  TRUE
[22:45:35.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.241]        // while-condition  =>  TRUE
[22:45:35.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.243]        // while-condition  =>  TRUE
[22:45:35.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.243]        // while-condition  =>  TRUE
[22:45:35.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.244]        // while-condition  =>  TRUE
[22:45:35.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.244]        // while-condition  =>  TRUE
[22:45:35.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.245]        // while-condition  =>  TRUE
[22:45:35.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.253]        // while-condition  =>  TRUE
[22:45:35.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.254]        // while-condition  =>  TRUE
[22:45:35.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.254]        // while-condition  =>  TRUE
[22:45:35.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.254]        // while-condition  =>  TRUE
[22:45:35.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.254]        // while-condition  =>  TRUE
[22:45:35.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.254]        // while-condition  =>  TRUE
[22:45:35.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.254]        // while-condition  =>  TRUE
[22:45:35.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.258]        // while-condition  =>  TRUE
[22:45:35.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.263]        // while-condition  =>  TRUE
[22:45:35.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.263]        // while-condition  =>  TRUE
[22:45:35.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.264]        // while-condition  =>  TRUE
[22:45:35.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.265]        // while-condition  =>  TRUE
[22:45:35.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.265]        // while-condition  =>  TRUE
[22:45:35.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.265]        // while-condition  =>  TRUE
[22:45:35.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.267]        // while-condition  =>  TRUE
[22:45:35.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.267]        // while-condition  =>  TRUE
[22:45:35.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.267]        // while-condition  =>  TRUE
[22:45:35.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.269]        // while-condition  =>  TRUE
[22:45:35.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.269]        // while-condition  =>  TRUE
[22:45:35.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.269]        // while-condition  =>  TRUE
[22:45:35.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.269]        // while-condition  =>  TRUE
[22:45:35.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.271]        // while-condition  =>  TRUE
[22:45:35.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.271]        // while-condition  =>  TRUE
[22:45:35.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.271]        // while-condition  =>  TRUE
[22:45:35.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.273]        // while-condition  =>  TRUE
[22:45:35.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.274]        // while-condition  =>  TRUE
[22:45:35.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.275]        // while-condition  =>  TRUE
[22:45:35.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.275]        // while-condition  =>  TRUE
[22:45:35.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.275]        // while-condition  =>  TRUE
[22:45:35.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.276]        // while-condition  =>  TRUE
[22:45:35.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.283]        // while-condition  =>  TRUE
[22:45:35.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.283]        // while-condition  =>  TRUE
[22:45:35.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.284]        // while-condition  =>  TRUE
[22:45:35.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.284]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.285]        // while-condition  =>  TRUE
[22:45:35.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.293]        // while-condition  =>  TRUE
[22:45:35.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.294]        // while-condition  =>  TRUE
[22:45:35.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.294]        // while-condition  =>  TRUE
[22:45:35.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.294]        // while-condition  =>  TRUE
[22:45:35.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.296]        // while-condition  =>  TRUE
[22:45:35.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.303]        // while-condition  =>  TRUE
[22:45:35.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.303]        // while-condition  =>  TRUE
[22:45:35.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.304]        // while-condition  =>  TRUE
[22:45:35.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.305]        // while-condition  =>  TRUE
[22:45:35.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.305]        // while-condition  =>  TRUE
[22:45:35.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.306]        // while-condition  =>  TRUE
[22:45:35.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.313]        // while-condition  =>  TRUE
[22:45:35.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.313]        // while-condition  =>  TRUE
[22:45:35.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.314]        // while-condition  =>  TRUE
[22:45:35.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.314]        // while-condition  =>  TRUE
[22:45:35.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.314]        // while-condition  =>  TRUE
[22:45:35.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.314]        // while-condition  =>  TRUE
[22:45:35.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.314]        // while-condition  =>  TRUE
[22:45:35.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.318]        // while-condition  =>  TRUE
[22:45:35.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.318]        // while-condition  =>  TRUE
[22:45:35.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.318]        // while-condition  =>  TRUE
[22:45:35.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.319]        // while-condition  =>  TRUE
[22:45:35.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.320]        // while-condition  =>  TRUE
[22:45:35.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.320]        // while-condition  =>  TRUE
[22:45:35.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.321]        // while-condition  =>  TRUE
[22:45:35.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.321]        // while-condition  =>  TRUE
[22:45:35.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.321]        // while-condition  =>  TRUE
[22:45:35.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.321]        // while-condition  =>  TRUE
[22:45:35.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.323]        // while-condition  =>  TRUE
[22:45:35.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.324]        // while-condition  =>  TRUE
[22:45:35.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.325]        // while-condition  =>  TRUE
[22:45:35.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.325]        // while-condition  =>  TRUE
[22:45:35.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.325]        // while-condition  =>  TRUE
[22:45:35.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.326]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.326]        // while-condition  =>  TRUE
[22:45:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.327]        // while-condition  =>  TRUE
[22:45:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.327]        // while-condition  =>  TRUE
[22:45:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.327]        // while-condition  =>  TRUE
[22:45:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.327]        // while-condition  =>  TRUE
[22:45:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.327]        // while-condition  =>  TRUE
[22:45:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.327]        // while-condition  =>  TRUE
[22:45:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.331]        // while-condition  =>  TRUE
[22:45:35.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.331]        // while-condition  =>  TRUE
[22:45:35.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.332]        // while-condition  =>  TRUE
[22:45:35.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.333]        // while-condition  =>  TRUE
[22:45:35.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.333]        // while-condition  =>  TRUE
[22:45:35.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.334]        // while-condition  =>  TRUE
[22:45:35.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.334]        // while-condition  =>  TRUE
[22:45:35.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.334]        // while-condition  =>  TRUE
[22:45:35.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.334]        // while-condition  =>  TRUE
[22:45:35.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.334]        // while-condition  =>  TRUE
[22:45:35.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.337]        // while-condition  =>  TRUE
[22:45:35.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.337]        // while-condition  =>  TRUE
[22:45:35.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.337]        // while-condition  =>  TRUE
[22:45:35.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.337]        // while-condition  =>  TRUE
[22:45:35.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.337]        // while-condition  =>  TRUE
[22:45:35.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.341]        // while-condition  =>  TRUE
[22:45:35.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.341]        // while-condition  =>  TRUE
[22:45:35.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.341]        // while-condition  =>  TRUE
[22:45:35.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.343]        // while-condition  =>  TRUE
[22:45:35.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.344]        // while-condition  =>  TRUE
[22:45:35.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.344]        // while-condition  =>  TRUE
[22:45:35.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.345]        // while-condition  =>  TRUE
[22:45:35.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.345]        // while-condition  =>  TRUE
[22:45:35.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.347]        // while-condition  =>  TRUE
[22:45:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.353]        // while-condition  =>  TRUE
[22:45:35.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.354]        // while-condition  =>  TRUE
[22:45:35.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.359]        // while-condition  =>  TRUE
[22:45:35.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.361]        // while-condition  =>  TRUE
[22:45:35.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.361]        // while-condition  =>  TRUE
[22:45:35.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.362]        // while-condition  =>  TRUE
[22:45:35.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.362]        // while-condition  =>  TRUE
[22:45:35.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.363]        // while-condition  =>  TRUE
[22:45:35.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.364]        // while-condition  =>  TRUE
[22:45:35.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.365]        // while-condition  =>  TRUE
[22:45:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.373]        // while-condition  =>  TRUE
[22:45:35.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.374]        // while-condition  =>  TRUE
[22:45:35.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.374]        // while-condition  =>  TRUE
[22:45:35.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.375]        // while-condition  =>  TRUE
[22:45:35.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.375]        // while-condition  =>  TRUE
[22:45:35.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.376]        // while-condition  =>  TRUE
[22:45:35.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.376]        // while-condition  =>  TRUE
[22:45:35.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.378]        // while-condition  =>  TRUE
[22:45:35.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.378]        // while-condition  =>  TRUE
[22:45:35.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.380]        // while-condition  =>  TRUE
[22:45:35.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.380]        // while-condition  =>  TRUE
[22:45:35.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.381]        // while-condition  =>  TRUE
[22:45:35.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.381]        // while-condition  =>  TRUE
[22:45:35.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.382]        // while-condition  =>  TRUE
[22:45:35.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.382]        // while-condition  =>  TRUE
[22:45:35.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.384]        // while-condition  =>  TRUE
[22:45:35.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.384]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.384]        // while-condition  =>  TRUE
[22:45:35.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.385]        // while-condition  =>  TRUE
[22:45:35.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.385]        // while-condition  =>  TRUE
[22:45:35.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.386]        // while-condition  =>  TRUE
[22:45:35.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.386]        // while-condition  =>  TRUE
[22:45:35.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.387]        // while-condition  =>  TRUE
[22:45:35.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.388]        // while-condition  =>  TRUE
[22:45:35.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.388]        // while-condition  =>  TRUE
[22:45:35.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.389]        // while-condition  =>  TRUE
[22:45:35.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.389]        // while-condition  =>  TRUE
[22:45:35.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.391]        // while-condition  =>  TRUE
[22:45:35.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.391]        // while-condition  =>  TRUE
[22:45:35.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.391]        // while-condition  =>  TRUE
[22:45:35.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.393]        // while-condition  =>  TRUE
[22:45:35.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.395]        // while-condition  =>  TRUE
[22:45:35.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.396]        // while-condition  =>  TRUE
[22:45:35.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.396]        // while-condition  =>  TRUE
[22:45:35.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.396]        // while-condition  =>  TRUE
[22:45:35.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.396]        // while-condition  =>  TRUE
[22:45:35.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.399]        // while-condition  =>  TRUE
[22:45:35.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.399]        // while-condition  =>  TRUE
[22:45:35.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.399]        // while-condition  =>  TRUE
[22:45:35.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.401]        // while-condition  =>  TRUE
[22:45:35.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.401]        // while-condition  =>  TRUE
[22:45:35.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.402]        // while-condition  =>  TRUE
[22:45:35.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.403]        // while-condition  =>  TRUE
[22:45:35.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.404]        // while-condition  =>  TRUE
[22:45:35.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.404]        // while-condition  =>  TRUE
[22:45:35.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.405]        // while-condition  =>  TRUE
[22:45:35.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.406]        // while-condition  =>  TRUE
[22:45:35.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.407]        // while-condition  =>  TRUE
[22:45:35.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.407]        // while-condition  =>  TRUE
[22:45:35.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.408]        // while-condition  =>  TRUE
[22:45:35.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.408]        // while-condition  =>  TRUE
[22:45:35.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.410]        // while-condition  =>  TRUE
[22:45:35.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.410]        // while-condition  =>  TRUE
[22:45:35.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.411]        // while-condition  =>  TRUE
[22:45:35.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.412]        // while-condition  =>  TRUE
[22:45:35.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.413]        // while-condition  =>  TRUE
[22:45:35.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.413]        // while-condition  =>  TRUE
[22:45:35.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.414]        // while-condition  =>  TRUE
[22:45:35.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.415]        // while-condition  =>  TRUE
[22:45:35.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.415]        // while-condition  =>  TRUE
[22:45:35.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.416]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.416]        // while-condition  =>  TRUE
[22:45:35.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.417]        // while-condition  =>  TRUE
[22:45:35.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.417]        // while-condition  =>  TRUE
[22:45:35.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.418]        // while-condition  =>  TRUE
[22:45:35.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.420]        // while-condition  =>  TRUE
[22:45:35.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.420]        // while-condition  =>  TRUE
[22:45:35.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.421]        // while-condition  =>  TRUE
[22:45:35.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.422]        // while-condition  =>  TRUE
[22:45:35.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.422]        // while-condition  =>  TRUE
[22:45:35.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.423]        // while-condition  =>  TRUE
[22:45:35.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.423]        // while-condition  =>  TRUE
[22:45:35.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.424]        // while-condition  =>  TRUE
[22:45:35.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.425]        // while-condition  =>  TRUE
[22:45:35.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.425]        // while-condition  =>  TRUE
[22:45:35.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.426]        // while-condition  =>  TRUE
[22:45:35.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.427]        // while-condition  =>  TRUE
[22:45:35.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.428]        // while-condition  =>  TRUE
[22:45:35.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.428]        // while-condition  =>  TRUE
[22:45:35.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.429]        // while-condition  =>  TRUE
[22:45:35.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.429]        // while-condition  =>  TRUE
[22:45:35.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.430]        // while-condition  =>  TRUE
[22:45:35.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.431]        // while-condition  =>  TRUE
[22:45:35.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.431]        // while-condition  =>  TRUE
[22:45:35.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.433]        // while-condition  =>  TRUE
[22:45:35.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.434]        // while-condition  =>  TRUE
[22:45:35.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.434]        // while-condition  =>  TRUE
[22:45:35.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.435]        // while-condition  =>  TRUE
[22:45:35.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.436]        // while-condition  =>  TRUE
[22:45:35.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.436]        // while-condition  =>  TRUE
[22:45:35.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.437]        // while-condition  =>  TRUE
[22:45:35.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.438]        // while-condition  =>  TRUE
[22:45:35.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.439]        // while-condition  =>  TRUE
[22:45:35.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.439]        // while-condition  =>  TRUE
[22:45:35.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.440]        // while-condition  =>  TRUE
[22:45:35.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.441]        // while-condition  =>  TRUE
[22:45:35.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.441]        // while-condition  =>  TRUE
[22:45:35.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.442]        // while-condition  =>  TRUE
[22:45:35.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.443]        // while-condition  =>  TRUE
[22:45:35.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.443]        // while-condition  =>  TRUE
[22:45:35.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.444]        // while-condition  =>  TRUE
[22:45:35.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.445]        // while-condition  =>  TRUE
[22:45:35.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.445]        // while-condition  =>  TRUE
[22:45:35.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.446]        // while-condition  =>  TRUE
[22:45:35.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.447]        // while-condition  =>  TRUE
[22:45:35.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.448]        // while-condition  =>  TRUE
[22:45:35.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.448]        // while-condition  =>  TRUE
[22:45:35.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.449]        // while-condition  =>  TRUE
[22:45:35.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.450]        // while-condition  =>  TRUE
[22:45:35.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.450]        // while-condition  =>  TRUE
[22:45:35.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.451]        // while-condition  =>  TRUE
[22:45:35.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.451]        // while-condition  =>  TRUE
[22:45:35.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.452]        // while-condition  =>  TRUE
[22:45:35.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.452]        // while-condition  =>  TRUE
[22:45:35.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.453]        // while-condition  =>  TRUE
[22:45:35.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.454]        // while-condition  =>  TRUE
[22:45:35.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.454]        // while-condition  =>  TRUE
[22:45:35.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.454]        // while-condition  =>  TRUE
[22:45:35.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.456]        // while-condition  =>  TRUE
[22:45:35.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.456]        // while-condition  =>  TRUE
[22:45:35.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.457]        // while-condition  =>  TRUE
[22:45:35.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.457]        // while-condition  =>  TRUE
[22:45:35.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.457]        // while-condition  =>  TRUE
[22:45:35.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.459]        // while-condition  =>  TRUE
[22:45:35.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.460]        // while-condition  =>  TRUE
[22:45:35.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.460]        // while-condition  =>  TRUE
[22:45:35.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.461]        // while-condition  =>  TRUE
[22:45:35.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.461]        // while-condition  =>  TRUE
[22:45:35.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.462]        // while-condition  =>  TRUE
[22:45:35.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.463]        // while-condition  =>  TRUE
[22:45:35.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.463]        // while-condition  =>  TRUE
[22:45:35.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.464]        // while-condition  =>  TRUE
[22:45:35.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.465]        // while-condition  =>  TRUE
[22:45:35.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.465]        // while-condition  =>  TRUE
[22:45:35.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.465]        // while-condition  =>  TRUE
[22:45:35.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.467]        // while-condition  =>  TRUE
[22:45:35.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.472]        // while-condition  =>  TRUE
[22:45:35.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.473]        // while-condition  =>  TRUE
[22:45:35.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.473]        // while-condition  =>  TRUE
[22:45:35.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.474]        // while-condition  =>  TRUE
[22:45:35.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.474]        // while-condition  =>  TRUE
[22:45:35.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.475]        // while-condition  =>  TRUE
[22:45:35.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.475]        // while-condition  =>  TRUE
[22:45:35.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.475]        // while-condition  =>  TRUE
[22:45:35.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.477]        // while-condition  =>  TRUE
[22:45:35.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.482]        // while-condition  =>  TRUE
[22:45:35.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.483]        // while-condition  =>  TRUE
[22:45:35.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.483]        // while-condition  =>  TRUE
[22:45:35.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.484]        // while-condition  =>  TRUE
[22:45:35.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.484]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.485]        // while-condition  =>  TRUE
[22:45:35.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.492]        // while-condition  =>  TRUE
[22:45:35.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.492]        // while-condition  =>  TRUE
[22:45:35.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.493]        // while-condition  =>  TRUE
[22:45:35.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.494]        // while-condition  =>  TRUE
[22:45:35.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.495]        // while-condition  =>  TRUE
[22:45:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.502]        // while-condition  =>  TRUE
[22:45:35.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.502]        // while-condition  =>  TRUE
[22:45:35.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.503]        // while-condition  =>  TRUE
[22:45:35.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.503]        // while-condition  =>  TRUE
[22:45:35.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.505]        // while-condition  =>  TRUE
[22:45:35.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.512]        // while-condition  =>  TRUE
[22:45:35.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.513]        // while-condition  =>  TRUE
[22:45:35.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.513]        // while-condition  =>  TRUE
[22:45:35.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.514]        // while-condition  =>  TRUE
[22:45:35.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.515]        // while-condition  =>  TRUE
[22:45:35.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.523]        // while-condition  =>  TRUE
[22:45:35.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.523]        // while-condition  =>  TRUE
[22:45:35.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.524]        // while-condition  =>  TRUE
[22:45:35.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.524]        // while-condition  =>  TRUE
[22:45:35.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.525]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.525]        // while-condition  =>  TRUE
[22:45:35.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.526]        // while-condition  =>  TRUE
[22:45:35.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.526]        // while-condition  =>  TRUE
[22:45:35.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.526]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.528]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.528]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.528]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.528]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.528]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.528]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.528]        // while-condition  =>  TRUE
[22:45:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.533]        // while-condition  =>  TRUE
[22:45:35.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.533]        // while-condition  =>  TRUE
[22:45:35.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.534]        // while-condition  =>  TRUE
[22:45:35.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.535]        // while-condition  =>  TRUE
[22:45:35.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.535]        // while-condition  =>  TRUE
[22:45:35.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.536]        // while-condition  =>  TRUE
[22:45:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.543]        // while-condition  =>  TRUE
[22:45:35.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.544]        // while-condition  =>  TRUE
[22:45:35.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.544]        // while-condition  =>  TRUE
[22:45:35.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.545]        // while-condition  =>  TRUE
[22:45:35.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.545]        // while-condition  =>  TRUE
[22:45:35.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.546]        // while-condition  =>  TRUE
[22:45:35.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.546]        // while-condition  =>  TRUE
[22:45:35.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.548]        // while-condition  =>  TRUE
[22:45:35.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.548]        // while-condition  =>  TRUE
[22:45:35.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.549]        // while-condition  =>  TRUE
[22:45:35.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.549]        // while-condition  =>  TRUE
[22:45:35.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.550]        // while-condition  =>  TRUE
[22:45:35.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.552]        // while-condition  =>  TRUE
[22:45:35.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.552]        // while-condition  =>  TRUE
[22:45:35.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.552]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.553]        // while-condition  =>  TRUE
[22:45:35.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.563]        // while-condition  =>  TRUE
[22:45:35.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.563]        // while-condition  =>  TRUE
[22:45:35.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.564]        // while-condition  =>  TRUE
[22:45:35.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.565]        // while-condition  =>  TRUE
[22:45:35.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.565]        // while-condition  =>  TRUE
[22:45:35.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.565]        // while-condition  =>  TRUE
[22:45:35.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.565]        // while-condition  =>  TRUE
[22:45:35.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.567]        // while-condition  =>  TRUE
[22:45:35.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.567]        // while-condition  =>  TRUE
[22:45:35.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.569]        // while-condition  =>  TRUE
[22:45:35.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.569]        // while-condition  =>  TRUE
[22:45:35.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.569]        // while-condition  =>  TRUE
[22:45:35.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.570]        // while-condition  =>  TRUE
[22:45:35.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.570]        // while-condition  =>  TRUE
[22:45:35.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.570]        // while-condition  =>  TRUE
[22:45:35.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.570]        // while-condition  =>  TRUE
[22:45:35.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.573]        // while-condition  =>  TRUE
[22:45:35.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.574]        // while-condition  =>  TRUE
[22:45:35.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.574]        // while-condition  =>  TRUE
[22:45:35.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.574]        // while-condition  =>  TRUE
[22:45:35.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.574]        // while-condition  =>  TRUE
[22:45:35.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.577]        // while-condition  =>  TRUE
[22:45:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.583]        // while-condition  =>  TRUE
[22:45:35.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.583]        // while-condition  =>  TRUE
[22:45:35.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.584]        // while-condition  =>  TRUE
[22:45:35.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.585]        // while-condition  =>  TRUE
[22:45:35.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.586]        // while-condition  =>  TRUE
[22:45:35.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.586]        // while-condition  =>  TRUE
[22:45:35.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.587]        // while-condition  =>  TRUE
[22:45:35.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.593]        // while-condition  =>  TRUE
[22:45:35.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.594]        // while-condition  =>  TRUE
[22:45:35.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.594]        // while-condition  =>  TRUE
[22:45:35.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.594]        // while-condition  =>  TRUE
[22:45:35.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.596]        // while-condition  =>  TRUE
[22:45:35.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.596]        // while-condition  =>  TRUE
[22:45:35.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.596]        // while-condition  =>  TRUE
[22:45:35.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.596]        // while-condition  =>  TRUE
[22:45:35.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.596]        // while-condition  =>  TRUE
[22:45:35.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.596]        // while-condition  =>  TRUE
[22:45:35.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.596]        // while-condition  =>  TRUE
[22:45:35.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.600]        // while-condition  =>  TRUE
[22:45:35.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.600]        // while-condition  =>  TRUE
[22:45:35.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.600]        // while-condition  =>  TRUE
[22:45:35.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.602]        // while-condition  =>  TRUE
[22:45:35.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.602]        // while-condition  =>  TRUE
[22:45:35.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.603]        // while-condition  =>  TRUE
[22:45:35.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.604]        // while-condition  =>  TRUE
[22:45:35.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.605]        // while-condition  =>  TRUE
[22:45:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.613]        // while-condition  =>  TRUE
[22:45:35.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.614]        // while-condition  =>  TRUE
[22:45:35.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.623]        // while-condition  =>  TRUE
[22:45:35.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.624]        // while-condition  =>  TRUE
[22:45:35.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.625]        // while-condition  =>  TRUE
[22:45:35.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.625]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.626]        // while-condition  =>  TRUE
[22:45:35.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.633]        // while-condition  =>  TRUE
[22:45:35.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.634]        // while-condition  =>  TRUE
[22:45:35.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.634]        // while-condition  =>  TRUE
[22:45:35.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.634]        // while-condition  =>  TRUE
[22:45:35.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.635]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.635]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.636]        // while-condition  =>  TRUE
[22:45:35.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.643]        // while-condition  =>  TRUE
[22:45:35.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.644]        // while-condition  =>  TRUE
[22:45:35.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.644]        // while-condition  =>  TRUE
[22:45:35.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.645]        // while-condition  =>  TRUE
[22:45:35.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.653]        // while-condition  =>  TRUE
[22:45:35.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.654]        // while-condition  =>  TRUE
[22:45:35.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.654]        // while-condition  =>  TRUE
[22:45:35.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.654]        // while-condition  =>  TRUE
[22:45:35.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.654]        // while-condition  =>  TRUE
[22:45:35.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.654]        // while-condition  =>  TRUE
[22:45:35.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.654]        // while-condition  =>  TRUE
[22:45:35.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.658]        // while-condition  =>  TRUE
[22:45:35.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.663]        // while-condition  =>  TRUE
[22:45:35.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.664]        // while-condition  =>  TRUE
[22:45:35.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.664]        // while-condition  =>  TRUE
[22:45:35.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.665]        // while-condition  =>  TRUE
[22:45:35.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.665]        // while-condition  =>  TRUE
[22:45:35.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.665]        // while-condition  =>  TRUE
[22:45:35.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.667]        // while-condition  =>  TRUE
[22:45:35.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.668]        // while-condition  =>  TRUE
[22:45:35.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.668]        // while-condition  =>  TRUE
[22:45:35.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.669]        // while-condition  =>  TRUE
[22:45:35.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.669]        // while-condition  =>  TRUE
[22:45:35.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.670]        // while-condition  =>  TRUE
[22:45:35.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.670]        // while-condition  =>  TRUE
[22:45:35.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.671]        // while-condition  =>  TRUE
[22:45:35.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.672]        // while-condition  =>  TRUE
[22:45:35.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.672]        // while-condition  =>  TRUE
[22:45:35.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.673]        // while-condition  =>  TRUE
[22:45:35.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.673]        // while-condition  =>  TRUE
[22:45:35.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.674]        // while-condition  =>  TRUE
[22:45:35.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.675]        // while-condition  =>  TRUE
[22:45:35.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.675]        // while-condition  =>  TRUE
[22:45:35.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.675]        // while-condition  =>  TRUE
[22:45:35.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.677]        // while-condition  =>  TRUE
[22:45:35.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.677]        // while-condition  =>  TRUE
[22:45:35.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.677]        // while-condition  =>  TRUE
[22:45:35.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.677]        // while-condition  =>  TRUE
[22:45:35.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.679]        // while-condition  =>  TRUE
[22:45:35.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.679]        // while-condition  =>  TRUE
[22:45:35.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.679]        // while-condition  =>  TRUE
[22:45:35.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.681]        // while-condition  =>  TRUE
[22:45:35.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.681]        // while-condition  =>  TRUE
[22:45:35.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.681]        // while-condition  =>  TRUE
[22:45:35.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.683]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.683]        // while-condition  =>  TRUE
[22:45:35.683]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.683]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.683]        // while-condition  =>  TRUE
[22:45:35.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.684]        // while-condition  =>  TRUE
[22:45:35.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.685]        // while-condition  =>  TRUE
[22:45:35.685]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.686]        // while-condition  =>  TRUE
[22:45:35.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.693]        // while-condition  =>  TRUE
[22:45:35.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.693]        // while-condition  =>  TRUE
[22:45:35.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.695]        // while-condition  =>  TRUE
[22:45:35.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.695]        // while-condition  =>  TRUE
[22:45:35.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.695]        // while-condition  =>  TRUE
[22:45:35.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.696]        // while-condition  =>  TRUE
[22:45:35.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.696]        // while-condition  =>  TRUE
[22:45:35.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.698]        // while-condition  =>  TRUE
[22:45:35.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.698]        // while-condition  =>  TRUE
[22:45:35.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.699]        // while-condition  =>  TRUE
[22:45:35.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.699]        // while-condition  =>  TRUE
[22:45:35.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.699]        // while-condition  =>  TRUE
[22:45:35.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.699]        // while-condition  =>  TRUE
[22:45:35.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.699]        // while-condition  =>  TRUE
[22:45:35.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.702]        // while-condition  =>  TRUE
[22:45:35.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.703]        // while-condition  =>  TRUE
[22:45:35.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.704]        // while-condition  =>  TRUE
[22:45:35.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.704]        // while-condition  =>  TRUE
[22:45:35.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.704]        // while-condition  =>  TRUE
[22:45:35.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.704]        // while-condition  =>  TRUE
[22:45:35.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.707]        // while-condition  =>  TRUE
[22:45:35.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.707]        // while-condition  =>  TRUE
[22:45:35.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.707]        // while-condition  =>  TRUE
[22:45:35.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.708]        // while-condition  =>  TRUE
[22:45:35.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.710]        // while-condition  =>  TRUE
[22:45:35.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.710]        // while-condition  =>  TRUE
[22:45:35.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.711]        // while-condition  =>  TRUE
[22:45:35.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.711]        // while-condition  =>  TRUE
[22:45:35.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.712]        // while-condition  =>  TRUE
[22:45:35.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.712]        // while-condition  =>  TRUE
[22:45:35.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.713]        // while-condition  =>  TRUE
[22:45:35.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.713]        // while-condition  =>  TRUE
[22:45:35.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.714]        // while-condition  =>  TRUE
[22:45:35.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.714]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.715]        // while-condition  =>  TRUE
[22:45:35.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.724]        // while-condition  =>  TRUE
[22:45:35.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.724]        // while-condition  =>  TRUE
[22:45:35.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.724]        // while-condition  =>  TRUE
[22:45:35.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.724]        // while-condition  =>  TRUE
[22:45:35.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.724]        // while-condition  =>  TRUE
[22:45:35.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.724]        // while-condition  =>  TRUE
[22:45:35.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.724]        // while-condition  =>  TRUE
[22:45:35.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.728]        // while-condition  =>  TRUE
[22:45:35.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.733]        // while-condition  =>  TRUE
[22:45:35.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.734]        // while-condition  =>  TRUE
[22:45:35.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.734]        // while-condition  =>  TRUE
[22:45:35.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.735]        // while-condition  =>  TRUE
[22:45:35.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.743]        // while-condition  =>  TRUE
[22:45:35.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.744]        // while-condition  =>  TRUE
[22:45:35.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.744]        // while-condition  =>  TRUE
[22:45:35.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.744]        // while-condition  =>  TRUE
[22:45:35.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.745]        // while-condition  =>  TRUE
[22:45:35.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.746]        // while-condition  =>  TRUE
[22:45:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.753]        // while-condition  =>  TRUE
[22:45:35.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.754]        // while-condition  =>  TRUE
[22:45:35.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.754]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.755]        // while-condition  =>  TRUE
[22:45:35.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.763]        // while-condition  =>  TRUE
[22:45:35.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.763]        // while-condition  =>  TRUE
[22:45:35.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.764]        // while-condition  =>  TRUE
[22:45:35.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.764]        // while-condition  =>  TRUE
[22:45:35.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.765]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.765]        // while-condition  =>  TRUE
[22:45:35.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.765]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.765]        // while-condition  =>  TRUE
[22:45:35.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.766]        // while-condition  =>  TRUE
[22:45:35.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.767]        // while-condition  =>  TRUE
[22:45:35.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.767]        // while-condition  =>  TRUE
[22:45:35.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.767]        // while-condition  =>  TRUE
[22:45:35.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.769]        // while-condition  =>  TRUE
[22:45:35.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.769]        // while-condition  =>  TRUE
[22:45:35.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.769]        // while-condition  =>  TRUE
[22:45:35.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.770]        // while-condition  =>  TRUE
[22:45:35.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.770]        // while-condition  =>  TRUE
[22:45:35.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.771]        // while-condition  =>  TRUE
[22:45:35.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.771]        // while-condition  =>  TRUE
[22:45:35.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.773]        // while-condition  =>  TRUE
[22:45:35.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.773]        // while-condition  =>  TRUE
[22:45:35.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.774]        // while-condition  =>  TRUE
[22:45:35.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.775]        // while-condition  =>  TRUE
[22:45:35.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.775]        // while-condition  =>  TRUE
[22:45:35.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.775]        // while-condition  =>  TRUE
[22:45:35.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.776]        // while-condition  =>  TRUE
[22:45:35.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.776]        // while-condition  =>  TRUE
[22:45:35.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.778]        // while-condition  =>  TRUE
[22:45:35.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.778]        // while-condition  =>  TRUE
[22:45:35.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.779]        // while-condition  =>  TRUE
[22:45:35.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.780]        // while-condition  =>  TRUE
[22:45:35.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.780]        // while-condition  =>  TRUE
[22:45:35.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.781]        // while-condition  =>  TRUE
[22:45:35.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.781]        // while-condition  =>  TRUE
[22:45:35.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.782]        // while-condition  =>  TRUE
[22:45:35.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.782]        // while-condition  =>  TRUE
[22:45:35.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.783]        // while-condition  =>  TRUE
[22:45:35.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.784]        // while-condition  =>  TRUE
[22:45:35.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.784]        // while-condition  =>  TRUE
[22:45:35.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.786]        // while-condition  =>  TRUE
[22:45:35.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.786]        // while-condition  =>  TRUE
[22:45:35.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.787]        // while-condition  =>  TRUE
[22:45:35.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.787]        // while-condition  =>  TRUE
[22:45:35.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.788]        // while-condition  =>  TRUE
[22:45:35.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.793]        // while-condition  =>  TRUE
[22:45:35.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.794]        // while-condition  =>  TRUE
[22:45:35.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.794]        // while-condition  =>  TRUE
[22:45:35.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.795]        // while-condition  =>  TRUE
[22:45:35.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.803]        // while-condition  =>  TRUE
[22:45:35.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.804]        // while-condition  =>  TRUE
[22:45:35.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.804]        // while-condition  =>  TRUE
[22:45:35.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.804]        // while-condition  =>  TRUE
[22:45:35.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.804]        // while-condition  =>  TRUE
[22:45:35.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.806]        // while-condition  =>  TRUE
[22:45:35.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.806]        // while-condition  =>  TRUE
[22:45:35.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.806]        // while-condition  =>  TRUE
[22:45:35.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.806]        // while-condition  =>  TRUE
[22:45:35.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.806]        // while-condition  =>  TRUE
[22:45:35.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.809]        // while-condition  =>  TRUE
[22:45:35.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.809]        // while-condition  =>  TRUE
[22:45:35.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.809]        // while-condition  =>  TRUE
[22:45:35.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.809]        // while-condition  =>  TRUE
[22:45:35.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.812]        // while-condition  =>  TRUE
[22:45:35.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.812]        // while-condition  =>  TRUE
[22:45:35.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.813]        // while-condition  =>  TRUE
[22:45:35.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.814]        // while-condition  =>  TRUE
[22:45:35.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.814]        // while-condition  =>  TRUE
[22:45:35.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.815]        // while-condition  =>  TRUE
[22:45:35.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.815]        // while-condition  =>  TRUE
[22:45:35.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.815]        // while-condition  =>  TRUE
[22:45:35.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.815]        // while-condition  =>  TRUE
[22:45:35.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.815]        // while-condition  =>  TRUE
[22:45:35.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.818]        // while-condition  =>  TRUE
[22:45:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.818]        // while-condition  =>  TRUE
[22:45:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.818]        // while-condition  =>  TRUE
[22:45:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.818]        // while-condition  =>  TRUE
[22:45:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.818]        // while-condition  =>  TRUE
[22:45:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.818]        // while-condition  =>  TRUE
[22:45:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.818]        // while-condition  =>  TRUE
[22:45:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.823]        // while-condition  =>  TRUE
[22:45:35.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.823]        // while-condition  =>  TRUE
[22:45:35.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.824]        // while-condition  =>  TRUE
[22:45:35.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.824]        // while-condition  =>  TRUE
[22:45:35.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.824]        // while-condition  =>  TRUE
[22:45:35.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.824]        // while-condition  =>  TRUE
[22:45:35.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.824]        // while-condition  =>  TRUE
[22:45:35.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.827]        // while-condition  =>  TRUE
[22:45:35.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.827]        // while-condition  =>  TRUE
[22:45:35.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.828]        // while-condition  =>  TRUE
[22:45:35.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.829]        // while-condition  =>  TRUE
[22:45:35.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.829]        // while-condition  =>  TRUE
[22:45:35.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.829]        // while-condition  =>  TRUE
[22:45:35.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.829]        // while-condition  =>  TRUE
[22:45:35.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.829]        // while-condition  =>  TRUE
[22:45:35.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.832]        // while-condition  =>  TRUE
[22:45:35.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.832]        // while-condition  =>  TRUE
[22:45:35.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.833]        // while-condition  =>  TRUE
[22:45:35.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.833]        // while-condition  =>  TRUE
[22:45:35.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.835]        // while-condition  =>  TRUE
[22:45:35.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.835]        // while-condition  =>  TRUE
[22:45:35.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.836]        // while-condition  =>  TRUE
[22:45:35.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.836]        // while-condition  =>  TRUE
[22:45:35.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.836]        // while-condition  =>  TRUE
[22:45:35.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.838]        // while-condition  =>  TRUE
[22:45:35.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.838]        // while-condition  =>  TRUE
[22:45:35.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.839]        // while-condition  =>  TRUE
[22:45:35.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.839]        // while-condition  =>  TRUE
[22:45:35.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.840]        // while-condition  =>  TRUE
[22:45:35.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.840]        // while-condition  =>  TRUE
[22:45:35.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.842]        // while-condition  =>  TRUE
[22:45:35.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.842]        // while-condition  =>  TRUE
[22:45:35.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.843]        // while-condition  =>  TRUE
[22:45:35.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.843]        // while-condition  =>  TRUE
[22:45:35.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.844]        // while-condition  =>  TRUE
[22:45:35.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.845]        // while-condition  =>  TRUE
[22:45:35.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.845]        // while-condition  =>  TRUE
[22:45:35.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.845]        // while-condition  =>  TRUE
[22:45:35.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.845]        // while-condition  =>  TRUE
[22:45:35.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.847]        // while-condition  =>  TRUE
[22:45:35.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.847]        // while-condition  =>  TRUE
[22:45:35.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.849]        // while-condition  =>  TRUE
[22:45:35.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.849]        // while-condition  =>  TRUE
[22:45:35.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.849]        // while-condition  =>  TRUE
[22:45:35.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.849]        // while-condition  =>  TRUE
[22:45:35.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.849]        // while-condition  =>  TRUE
[22:45:35.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.849]        // while-condition  =>  TRUE
[22:45:35.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.853]        // while-condition  =>  TRUE
[22:45:35.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.853]        // while-condition  =>  TRUE
[22:45:35.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.854]        // while-condition  =>  TRUE
[22:45:35.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.855]        // while-condition  =>  TRUE
[22:45:35.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.856]        // while-condition  =>  TRUE
[22:45:35.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.856]        // while-condition  =>  TRUE
[22:45:35.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.856]        // while-condition  =>  TRUE
[22:45:35.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.858]        // while-condition  =>  TRUE
[22:45:35.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.858]        // while-condition  =>  TRUE
[22:45:35.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.858]        // while-condition  =>  TRUE
[22:45:35.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.860]        // while-condition  =>  TRUE
[22:45:35.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.860]        // while-condition  =>  TRUE
[22:45:35.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.861]        // while-condition  =>  TRUE
[22:45:35.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.861]        // while-condition  =>  TRUE
[22:45:35.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.863]        // while-condition  =>  TRUE
[22:45:35.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.863]        // while-condition  =>  TRUE
[22:45:35.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.864]        // while-condition  =>  TRUE
[22:45:35.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.864]        // while-condition  =>  TRUE
[22:45:35.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.864]        // while-condition  =>  TRUE
[22:45:35.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.866]        // while-condition  =>  TRUE
[22:45:35.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.867]        // while-condition  =>  TRUE
[22:45:35.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.867]        // while-condition  =>  TRUE
[22:45:35.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.867]        // while-condition  =>  TRUE
[22:45:35.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.869]        // while-condition  =>  TRUE
[22:45:35.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.869]        // while-condition  =>  TRUE
[22:45:35.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.870]        // while-condition  =>  TRUE
[22:45:35.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.870]        // while-condition  =>  TRUE
[22:45:35.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.872]        // while-condition  =>  TRUE
[22:45:35.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.872]        // while-condition  =>  TRUE
[22:45:35.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.873]        // while-condition  =>  TRUE
[22:45:35.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.874]        // while-condition  =>  TRUE
[22:45:35.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.874]        // while-condition  =>  TRUE
[22:45:35.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.875]        // while-condition  =>  TRUE
[22:45:35.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.875]        // while-condition  =>  TRUE
[22:45:35.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.876]        // while-condition  =>  TRUE
[22:45:35.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.876]        // while-condition  =>  TRUE
[22:45:35.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.877]        // while-condition  =>  TRUE
[22:45:35.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.877]        // while-condition  =>  TRUE
[22:45:35.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.879]        // while-condition  =>  TRUE
[22:45:35.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.879]        // while-condition  =>  TRUE
[22:45:35.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.879]        // while-condition  =>  TRUE
[22:45:35.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.880]        // while-condition  =>  TRUE
[22:45:35.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.881]        // while-condition  =>  TRUE
[22:45:35.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.881]        // while-condition  =>  TRUE
[22:45:35.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.881]        // while-condition  =>  TRUE
[22:45:35.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.883]        // while-condition  =>  TRUE
[22:45:35.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.884]        // while-condition  =>  TRUE
[22:45:35.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.884]        // while-condition  =>  TRUE
[22:45:35.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.885]        // while-condition  =>  TRUE
[22:45:35.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.885]        // while-condition  =>  TRUE
[22:45:35.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.887]        // while-condition  =>  TRUE
[22:45:35.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.893]        // while-condition  =>  TRUE
[22:45:35.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.894]        // while-condition  =>  TRUE
[22:45:35.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.894]        // while-condition  =>  TRUE
[22:45:35.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.894]        // while-condition  =>  TRUE
[22:45:35.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.894]        // while-condition  =>  TRUE
[22:45:35.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.897]        // while-condition  =>  TRUE
[22:45:35.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.897]        // while-condition  =>  TRUE
[22:45:35.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.897]        // while-condition  =>  TRUE
[22:45:35.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.899]        // while-condition  =>  TRUE
[22:45:35.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.899]        // while-condition  =>  TRUE
[22:45:35.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.900]        // while-condition  =>  TRUE
[22:45:35.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.900]        // while-condition  =>  TRUE
[22:45:35.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.901]        // while-condition  =>  TRUE
[22:45:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.901]        // while-condition  =>  TRUE
[22:45:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.901]        // while-condition  =>  TRUE
[22:45:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.903]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.903]        // while-condition  =>  TRUE
[22:45:35.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.903]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.903]        // while-condition  =>  TRUE
[22:45:35.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.904]        // while-condition  =>  TRUE
[22:45:35.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.905]        // while-condition  =>  TRUE
[22:45:35.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.905]        // while-condition  =>  TRUE
[22:45:35.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.905]        // while-condition  =>  TRUE
[22:45:35.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.907]        // while-condition  =>  TRUE
[22:45:35.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.907]        // while-condition  =>  TRUE
[22:45:35.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.908]        // while-condition  =>  TRUE
[22:45:35.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.908]        // while-condition  =>  TRUE
[22:45:35.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.909]        // while-condition  =>  TRUE
[22:45:35.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.910]        // while-condition  =>  TRUE
[22:45:35.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.911]        // while-condition  =>  TRUE
[22:45:35.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.911]        // while-condition  =>  TRUE
[22:45:35.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.912]        // while-condition  =>  TRUE
[22:45:35.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.913]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.913]        // while-condition  =>  TRUE
[22:45:35.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.913]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.913]        // while-condition  =>  TRUE
[22:45:35.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.914]        // while-condition  =>  TRUE
[22:45:35.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.915]        // while-condition  =>  TRUE
[22:45:35.915]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.915]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.915]        // while-condition  =>  TRUE
[22:45:35.915]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.916]        // while-condition  =>  TRUE
[22:45:35.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.916]        // while-condition  =>  TRUE
[22:45:35.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.917]        // while-condition  =>  TRUE
[22:45:35.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.917]        // while-condition  =>  TRUE
[22:45:35.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.918]        // while-condition  =>  TRUE
[22:45:35.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.919]        // while-condition  =>  TRUE
[22:45:35.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.920]        // while-condition  =>  TRUE
[22:45:35.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.920]        // while-condition  =>  TRUE
[22:45:35.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.921]        // while-condition  =>  TRUE
[22:45:35.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.921]        // while-condition  =>  TRUE
[22:45:35.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.922]        // while-condition  =>  TRUE
[22:45:35.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.923]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.923]        // while-condition  =>  TRUE
[22:45:35.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.924]        // while-condition  =>  TRUE
[22:45:35.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.925]        // while-condition  =>  TRUE
[22:45:35.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.926]        // while-condition  =>  TRUE
[22:45:35.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.927]        // while-condition  =>  TRUE
[22:45:35.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.927]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.927]        // while-condition  =>  TRUE
[22:45:35.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.928]        // while-condition  =>  TRUE
[22:45:35.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.928]        // while-condition  =>  TRUE
[22:45:35.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.929]        // while-condition  =>  TRUE
[22:45:35.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.930]        // while-condition  =>  TRUE
[22:45:35.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.931]        // while-condition  =>  TRUE
[22:45:35.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.931]        // while-condition  =>  TRUE
[22:45:35.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.932]        // while-condition  =>  TRUE
[22:45:35.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.933]        // while-condition  =>  TRUE
[22:45:35.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.933]        // while-condition  =>  TRUE
[22:45:35.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.934]        // while-condition  =>  TRUE
[22:45:35.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.934]        // while-condition  =>  TRUE
[22:45:35.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.936]        // while-condition  =>  TRUE
[22:45:35.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.936]        // while-condition  =>  TRUE
[22:45:35.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.937]        // while-condition  =>  TRUE
[22:45:35.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.937]        // while-condition  =>  TRUE
[22:45:35.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.938]        // while-condition  =>  TRUE
[22:45:35.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.939]        // while-condition  =>  TRUE
[22:45:35.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.939]        // while-condition  =>  TRUE
[22:45:35.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.940]        // while-condition  =>  TRUE
[22:45:35.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.941]        // while-condition  =>  TRUE
[22:45:35.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.941]        // while-condition  =>  TRUE
[22:45:35.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.942]        // while-condition  =>  TRUE
[22:45:35.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.942]        // while-condition  =>  TRUE
[22:45:35.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.943]        // while-condition  =>  TRUE
[22:45:35.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.944]        // while-condition  =>  TRUE
[22:45:35.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.944]        // while-condition  =>  TRUE
[22:45:35.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.945]        // while-condition  =>  TRUE
[22:45:35.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.946]        // while-condition  =>  TRUE
[22:45:35.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.947]        // while-condition  =>  TRUE
[22:45:35.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.947]        // while-condition  =>  TRUE
[22:45:35.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.948]        // while-condition  =>  TRUE
[22:45:35.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.948]        // while-condition  =>  TRUE
[22:45:35.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.949]        // while-condition  =>  TRUE
[22:45:35.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.950]        // while-condition  =>  TRUE
[22:45:35.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.950]        // while-condition  =>  TRUE
[22:45:35.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.951]        // while-condition  =>  TRUE
[22:45:35.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.951]        // while-condition  =>  TRUE
[22:45:35.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.952]        // while-condition  =>  TRUE
[22:45:35.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.953]        // while-condition  =>  TRUE
[22:45:35.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.954]        // while-condition  =>  TRUE
[22:45:35.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.954]        // while-condition  =>  TRUE
[22:45:35.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.955]        // while-condition  =>  TRUE
[22:45:35.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.956]        // while-condition  =>  TRUE
[22:45:35.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.956]        // while-condition  =>  TRUE
[22:45:35.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.956]        // while-condition  =>  TRUE
[22:45:35.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.957]        // while-condition  =>  TRUE
[22:45:35.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.957]        // while-condition  =>  TRUE
[22:45:35.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.957]        // while-condition  =>  TRUE
[22:45:35.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.959]        // while-condition  =>  TRUE
[22:45:35.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.959]        // while-condition  =>  TRUE
[22:45:35.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.959]        // while-condition  =>  TRUE
[22:45:35.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.959]        // while-condition  =>  TRUE
[22:45:35.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.962]        // while-condition  =>  TRUE
[22:45:35.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.963]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.963]        // while-condition  =>  TRUE
[22:45:35.963]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.964]        // while-condition  =>  TRUE
[22:45:35.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.964]        // while-condition  =>  TRUE
[22:45:35.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.965]        // while-condition  =>  TRUE
[22:45:35.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.965]        // while-condition  =>  TRUE
[22:45:35.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.966]        // while-condition  =>  TRUE
[22:45:35.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.967]        // while-condition  =>  TRUE
[22:45:35.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.967]        // while-condition  =>  TRUE
[22:45:35.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.968]        // while-condition  =>  TRUE
[22:45:35.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.968]        // while-condition  =>  TRUE
[22:45:35.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.968]        // while-condition  =>  TRUE
[22:45:35.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.970]        // while-condition  =>  TRUE
[22:45:35.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.970]        // while-condition  =>  TRUE
[22:45:35.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.971]        // while-condition  =>  TRUE
[22:45:35.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.971]        // while-condition  =>  TRUE
[22:45:35.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.971]        // while-condition  =>  TRUE
[22:45:35.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.974]        // while-condition  =>  TRUE
[22:45:35.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.974]        // while-condition  =>  TRUE
[22:45:35.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.975]        // while-condition  =>  TRUE
[22:45:35.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.975]        // while-condition  =>  TRUE
[22:45:35.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.975]        // while-condition  =>  TRUE
[22:45:35.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.977]        // while-condition  =>  TRUE
[22:45:35.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.977]        // while-condition  =>  TRUE
[22:45:35.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.977]        // while-condition  =>  TRUE
[22:45:35.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.977]        // while-condition  =>  TRUE
[22:45:35.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.979]        // while-condition  =>  TRUE
[22:45:35.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.979]        // while-condition  =>  TRUE
[22:45:35.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.979]        // while-condition  =>  TRUE
[22:45:35.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.981]        // while-condition  =>  TRUE
[22:45:35.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.981]        // while-condition  =>  TRUE
[22:45:35.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.982]        // while-condition  =>  TRUE
[22:45:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.983]        // while-condition  =>  TRUE
[22:45:35.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.984]        // while-condition  =>  TRUE
[22:45:35.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.984]        // while-condition  =>  TRUE
[22:45:35.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.985]        // while-condition  =>  TRUE
[22:45:35.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.985]        // while-condition  =>  TRUE
[22:45:35.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.985]        // while-condition  =>  TRUE
[22:45:35.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.987]        // while-condition  =>  TRUE
[22:45:35.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.987]        // while-condition  =>  TRUE
[22:45:35.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.987]        // while-condition  =>  TRUE
[22:45:35.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.987]        // while-condition  =>  TRUE
[22:45:35.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.989]        // while-condition  =>  TRUE
[22:45:35.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.989]        // while-condition  =>  TRUE
[22:45:35.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.989]        // while-condition  =>  TRUE
[22:45:35.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.990]        // while-condition  =>  TRUE
[22:45:35.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.990]        // while-condition  =>  TRUE
[22:45:35.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.990]        // while-condition  =>  TRUE
[22:45:35.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.992]        // while-condition  =>  TRUE
[22:45:35.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.993]        // while-condition  =>  TRUE
[22:45:35.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.994]        // while-condition  =>  TRUE
[22:45:35.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.994]        // while-condition  =>  TRUE
[22:45:35.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.995]        // while-condition  =>  TRUE
[22:45:35.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.995]        // while-condition  =>  TRUE
[22:45:35.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.996]        // while-condition  =>  TRUE
[22:45:35.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.996]        // while-condition  =>  TRUE
[22:45:35.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.998]        // while-condition  =>  TRUE
[22:45:35.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.998]        // while-condition  =>  TRUE
[22:45:35.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.999]        // while-condition  =>  TRUE
[22:45:35.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.999]        // while-condition  =>  TRUE
[22:45:35.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.999]        // while-condition  =>  TRUE
[22:45:35.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.999]        // while-condition  =>  TRUE
[22:45:35.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.999]        // while-condition  =>  TRUE
[22:45:35.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.999]        // while-condition  =>  TRUE
[22:45:35.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:35.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:35.999]        // while-condition  =>  TRUE
[22:45:35.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.003]        // while-condition  =>  TRUE
[22:45:36.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.004]        // while-condition  =>  TRUE
[22:45:36.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.012]        // while-condition  =>  TRUE
[22:45:36.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.012]        // while-condition  =>  TRUE
[22:45:36.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.014]        // while-condition  =>  TRUE
[22:45:36.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.014]        // while-condition  =>  TRUE
[22:45:36.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.014]        // while-condition  =>  TRUE
[22:45:36.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.014]        // while-condition  =>  TRUE
[22:45:36.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.016]        // while-condition  =>  TRUE
[22:45:36.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.024]        // while-condition  =>  TRUE
[22:45:36.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.024]        // while-condition  =>  TRUE
[22:45:36.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.024]        // while-condition  =>  TRUE
[22:45:36.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.025]        // while-condition  =>  TRUE
[22:45:36.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.025]        // while-condition  =>  TRUE
[22:45:36.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.025]        // while-condition  =>  TRUE
[22:45:36.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.025]        // while-condition  =>  TRUE
[22:45:36.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.028]        // while-condition  =>  TRUE
[22:45:36.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.034]        // while-condition  =>  TRUE
[22:45:36.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.034]        // while-condition  =>  TRUE
[22:45:36.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.035]        // while-condition  =>  TRUE
[22:45:36.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.041]        // while-condition  =>  TRUE
[22:45:36.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.041]        // while-condition  =>  TRUE
[22:45:36.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.043]        // while-condition  =>  TRUE
[22:45:36.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.044]        // while-condition  =>  TRUE
[22:45:36.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.044]        // while-condition  =>  TRUE
[22:45:36.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.044]        // while-condition  =>  TRUE
[22:45:36.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.046]        // while-condition  =>  TRUE
[22:45:36.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.046]        // while-condition  =>  TRUE
[22:45:36.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.047]        // while-condition  =>  TRUE
[22:45:36.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.053]        // while-condition  =>  TRUE
[22:45:36.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.054]        // while-condition  =>  TRUE
[22:45:36.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.055]        // while-condition  =>  TRUE
[22:45:36.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.055]        // while-condition  =>  TRUE
[22:45:36.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.056]        // while-condition  =>  TRUE
[22:45:36.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.063]        // while-condition  =>  TRUE
[22:45:36.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.063]        // while-condition  =>  TRUE
[22:45:36.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.064]        // while-condition  =>  TRUE
[22:45:36.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.064]        // while-condition  =>  TRUE
[22:45:36.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.064]        // while-condition  =>  TRUE
[22:45:36.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.064]        // while-condition  =>  TRUE
[22:45:36.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.064]        // while-condition  =>  TRUE
[22:45:36.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.068]        // while-condition  =>  TRUE
[22:45:36.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.068]        // while-condition  =>  TRUE
[22:45:36.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.070]        // while-condition  =>  TRUE
[22:45:36.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.070]        // while-condition  =>  TRUE
[22:45:36.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.070]        // while-condition  =>  TRUE
[22:45:36.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.070]        // while-condition  =>  TRUE
[22:45:36.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.070]        // while-condition  =>  TRUE
[22:45:36.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.073]        // while-condition  =>  TRUE
[22:45:36.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.074]        // while-condition  =>  TRUE
[22:45:36.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.075]        // while-condition  =>  TRUE
[22:45:36.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.075]        // while-condition  =>  TRUE
[22:45:36.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.076]        // while-condition  =>  TRUE
[22:45:36.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.076]        // while-condition  =>  TRUE
[22:45:36.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.077]        // while-condition  =>  TRUE
[22:45:36.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.083]        // while-condition  =>  TRUE
[22:45:36.083]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.084]        // while-condition  =>  TRUE
[22:45:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.084]        // while-condition  =>  TRUE
[22:45:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.084]        // while-condition  =>  TRUE
[22:45:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.084]        // while-condition  =>  TRUE
[22:45:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.084]        // while-condition  =>  TRUE
[22:45:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.084]        // while-condition  =>  TRUE
[22:45:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.088]        // while-condition  =>  TRUE
[22:45:36.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.093]        // while-condition  =>  TRUE
[22:45:36.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.094]        // while-condition  =>  TRUE
[22:45:36.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.094]        // while-condition  =>  TRUE
[22:45:36.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.095]        // while-condition  =>  TRUE
[22:45:36.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.103]        // while-condition  =>  TRUE
[22:45:36.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.104]        // while-condition  =>  TRUE
[22:45:36.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.104]        // while-condition  =>  TRUE
[22:45:36.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.105]        // while-condition  =>  TRUE
[22:45:36.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.106]        // while-condition  =>  TRUE
[22:45:36.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.106]        // while-condition  =>  TRUE
[22:45:36.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.106]        // while-condition  =>  TRUE
[22:45:36.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.107]        // while-condition  =>  TRUE
[22:45:36.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.107]        // while-condition  =>  TRUE
[22:45:36.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.109]        // while-condition  =>  TRUE
[22:45:36.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.109]        // while-condition  =>  TRUE
[22:45:36.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.109]        // while-condition  =>  TRUE
[22:45:36.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.109]        // while-condition  =>  TRUE
[22:45:36.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.111]        // while-condition  =>  TRUE
[22:45:36.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.112]        // while-condition  =>  TRUE
[22:45:36.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.113]        // while-condition  =>  TRUE
[22:45:36.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.113]        // while-condition  =>  TRUE
[22:45:36.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.114]        // while-condition  =>  TRUE
[22:45:36.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.115]        // while-condition  =>  TRUE
[22:45:36.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.115]        // while-condition  =>  TRUE
[22:45:36.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.116]        // while-condition  =>  TRUE
[22:45:36.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.116]        // while-condition  =>  TRUE
[22:45:36.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.116]        // while-condition  =>  TRUE
[22:45:36.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.116]        // while-condition  =>  TRUE
[22:45:36.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.116]        // while-condition  =>  TRUE
[22:45:36.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.119]        // while-condition  =>  TRUE
[22:45:36.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.119]        // while-condition  =>  TRUE
[22:45:36.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.120]        // while-condition  =>  TRUE
[22:45:36.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.120]        // while-condition  =>  TRUE
[22:45:36.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.120]        // while-condition  =>  TRUE
[22:45:36.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.122]        // while-condition  =>  TRUE
[22:45:36.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.123]        // while-condition  =>  TRUE
[22:45:36.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.123]        // while-condition  =>  TRUE
[22:45:36.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.124]        // while-condition  =>  TRUE
[22:45:36.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.124]        // while-condition  =>  TRUE
[22:45:36.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.124]        // while-condition  =>  TRUE
[22:45:36.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.124]        // while-condition  =>  TRUE
[22:45:36.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.124]        // while-condition  =>  TRUE
[22:45:36.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.128]        // while-condition  =>  TRUE
[22:45:36.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.134]        // while-condition  =>  TRUE
[22:45:36.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.134]        // while-condition  =>  TRUE
[22:45:36.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.134]        // while-condition  =>  TRUE
[22:45:36.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.135]        // while-condition  =>  TRUE
[22:45:36.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.136]        // while-condition  =>  TRUE
[22:45:36.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.144]        // while-condition  =>  TRUE
[22:45:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:45:36.149]        // while-condition  =>  TRUE
[22:45:36.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:36.149]        // while  =>  TIMEOUT
[22:45:36.149]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:45:36.149]      </control>
[22:45:36.149]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:45:36.149]        // if-block "(__protocol & 0xFFFF) == 1"
[22:45:36.149]          // =>  FALSE
[22:45:36.149]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:45:36.149]      </control>
[22:45:36.149]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:45:36.149]        // if-block "(__protocol & 0xFFFF) == 2"
[22:45:36.149]          // =>  TRUE
[22:45:36.149]        <block atomic="false" info="">
[22:45:36.149]          Message(0, "executing SWD power up");
[22:45:36.151]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:45:36.153]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:45:36.153]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:45:36.154]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:45:36.154]        </block>
[22:45:36.154]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:45:36.154]      </control>
[22:45:36.154]      // end if-block "powered_down"
[22:45:36.154]    </control>
[22:45:36.154]    <block atomic="false" info="">
[22:45:36.154]      __var DEBUG_PORT_VAL    = 0;
[22:45:36.155]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:45:36.155]      __var ACCESS_POINT_VAL  = 0;
[22:45:36.155]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:45:36.155]      __ap = 1; 
[22:45:36.155]        // -> [__ap <= 0x00000001]
[22:45:36.155]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:45:36.165]  
[22:45:36.165]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[22:45:36.165]  
[22:45:36.165]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:45:36.165]    </block>
[22:45:36.165]  </sequence>
[22:45:36.165]  
[22:45:44.192]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:45:44.192]  
[22:45:44.192]  <debugvars>
[22:45:44.192]    // Pre-defined
[22:45:44.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:44.193]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:45:44.193]    __dp=0x00000000
[22:45:44.193]    __ap=0x00000000
[22:45:44.193]    __traceout=0x00000000      (Trace Disabled)
[22:45:44.193]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:44.193]    __FlashAddr=0x00000000
[22:45:44.193]    __FlashLen=0x00000000
[22:45:44.194]    __FlashArg=0x00000000
[22:45:44.194]    __FlashOp=0x00000000
[22:45:44.194]    __Result=0x00000000
[22:45:44.194]  </debugvars>
[22:45:44.194]  
[22:45:44.194]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:45:44.194]    <block atomic="false" info="">
[22:45:44.194]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:45:44.194]        // -> [isSWJ <= 0x00000001]
[22:45:44.194]      __var hasDormant = __protocol & 0x00020000;
[22:45:44.194]        // -> [hasDormant <= 0x00000000]
[22:45:44.194]      __var protType   = __protocol & 0x0000FFFF;
[22:45:44.194]        // -> [protType <= 0x00000002]
[22:45:44.194]    </block>
[22:45:44.194]    <control if="protType == 1" while="" timeout="0" info="">
[22:45:44.194]      // if-block "protType == 1"
[22:45:44.194]        // =>  FALSE
[22:45:44.195]      // skip if-block "protType == 1"
[22:45:44.195]    </control>
[22:45:44.195]    <control if="protType == 2" while="" timeout="0" info="">
[22:45:44.195]      // if-block "protType == 2"
[22:45:44.195]        // =>  TRUE
[22:45:44.195]      <control if="isSWJ" while="" timeout="0" info="">
[22:45:44.195]        // if-block "isSWJ"
[22:45:44.195]          // =>  TRUE
[22:45:44.197]        <control if="hasDormant" while="" timeout="0" info="">
[22:45:44.197]          // if-block "hasDormant"
[22:45:44.197]            // =>  FALSE
[22:45:44.197]          // skip if-block "hasDormant"
[22:45:44.197]        </control>
[22:45:44.197]        <control if="!hasDormant" while="" timeout="0" info="">
[22:45:44.197]          // if-block "!hasDormant"
[22:45:44.197]            // =>  TRUE
[22:45:44.197]          <block atomic="false" info="">
[22:45:44.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:45:44.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:44.198]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:45:44.198]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:45:44.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:45:44.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:44.198]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:45:44.198]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:45:44.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:45:44.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:44.198]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:45:44.198]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:45:44.198]          </block>
[22:45:44.198]          // end if-block "!hasDormant"
[22:45:44.198]        </control>
[22:45:44.198]        // end if-block "isSWJ"
[22:45:44.198]      </control>
[22:45:44.201]      <control if="!isSWJ" while="" timeout="0" info="">
[22:45:44.201]        // if-block "!isSWJ"
[22:45:44.201]          // =>  FALSE
[22:45:44.201]        // skip if-block "!isSWJ"
[22:45:44.201]      </control>
[22:45:44.201]      <block atomic="false" info="">
[22:45:44.201]        ReadDP(0x0);
[22:45:44.201]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:45:44.201]      </block>
[22:45:44.201]      // end if-block "protType == 2"
[22:45:44.201]    </control>
[22:45:44.201]  </sequence>
[22:45:44.203]  
[22:45:47.364]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:45:47.364]  
[22:45:47.377]  <debugvars>
[22:45:47.377]    // Pre-defined
[22:45:47.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:47.377]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:47.377]    __dp=0x00000000
[22:45:47.377]    __ap=0x00000000
[22:45:47.377]    __traceout=0x00000000      (Trace Disabled)
[22:45:47.377]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:47.377]    __FlashAddr=0x00000000
[22:45:47.377]    __FlashLen=0x00000000
[22:45:47.377]    __FlashArg=0x00000000
[22:45:47.377]    __FlashOp=0x00000000
[22:45:47.377]    __Result=0x00000000
[22:45:47.377]  </debugvars>
[22:45:47.377]  
[22:45:47.377]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:45:47.377]    <block atomic="false" info="">
[22:45:47.377]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:45:47.377]        // -> [isSWJ <= 0x00000001]
[22:45:47.377]      __var hasDormant = __protocol & 0x00020000;
[22:45:47.377]        // -> [hasDormant <= 0x00000000]
[22:45:47.377]      __var protType   = __protocol & 0x0000FFFF;
[22:45:47.377]        // -> [protType <= 0x00000002]
[22:45:47.377]    </block>
[22:45:47.377]    <control if="protType == 1" while="" timeout="0" info="">
[22:45:47.377]      // if-block "protType == 1"
[22:45:47.377]        // =>  FALSE
[22:45:47.377]      // skip if-block "protType == 1"
[22:45:47.377]    </control>
[22:45:47.377]    <control if="protType == 2" while="" timeout="0" info="">
[22:45:47.377]      // if-block "protType == 2"
[22:45:47.377]        // =>  TRUE
[22:45:47.377]      <control if="isSWJ" while="" timeout="0" info="">
[22:45:47.377]        // if-block "isSWJ"
[22:45:47.377]          // =>  TRUE
[22:45:47.377]        <control if="hasDormant" while="" timeout="0" info="">
[22:45:47.377]          // if-block "hasDormant"
[22:45:47.377]            // =>  FALSE
[22:45:47.377]          // skip if-block "hasDormant"
[22:45:47.377]        </control>
[22:45:47.377]        <control if="!hasDormant" while="" timeout="0" info="">
[22:45:47.377]          // if-block "!hasDormant"
[22:45:47.377]            // =>  TRUE
[22:45:47.377]          <block atomic="false" info="">
[22:45:47.377]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:45:47.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:47.377]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:45:47.377]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:45:47.383]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:45:47.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:47.384]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:45:47.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:45:47.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:45:47.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:47.385]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:45:47.385]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:45:47.385]          </block>
[22:45:47.385]          // end if-block "!hasDormant"
[22:45:47.385]        </control>
[22:45:47.385]        // end if-block "isSWJ"
[22:45:47.385]      </control>
[22:45:47.386]      <control if="!isSWJ" while="" timeout="0" info="">
[22:45:47.386]        // if-block "!isSWJ"
[22:45:47.386]          // =>  FALSE
[22:45:47.386]        // skip if-block "!isSWJ"
[22:45:47.386]      </control>
[22:45:47.386]      <block atomic="false" info="">
[22:45:47.386]        ReadDP(0x0);
[22:45:47.386]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:45:47.386]      </block>
[22:45:47.386]      // end if-block "protType == 2"
[22:45:47.386]    </control>
[22:45:47.386]  </sequence>
[22:45:47.386]  
[22:45:47.386]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:45:47.386]  
[22:45:47.386]  <debugvars>
[22:45:47.386]    // Pre-defined
[22:45:47.386]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:47.386]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:47.386]    __dp=0x00000000
[22:45:47.386]    __ap=0x00000000
[22:45:47.386]    __traceout=0x00000000      (Trace Disabled)
[22:45:47.386]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:47.386]    __FlashAddr=0x00000000
[22:45:47.386]    __FlashLen=0x00000000
[22:45:47.386]    __FlashArg=0x00000000
[22:45:47.386]    __FlashOp=0x00000000
[22:45:47.386]    __Result=0x00000000
[22:45:47.386]  </debugvars>
[22:45:47.386]  
[22:45:47.386]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:45:47.386]    <block atomic="false" info="">
[22:45:47.386]      __var SW_DP_ABORT       = 0x0;
[22:45:47.386]        // -> [SW_DP_ABORT <= 0x00000000]
[22:45:47.386]      __var DP_CTRL_STAT      = 0x4;
[22:45:47.386]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:45:47.386]      __var DP_SELECT         = 0x8;
[22:45:47.386]        // -> [DP_SELECT <= 0x00000008]
[22:45:47.386]      __var powered_down      = 0;
[22:45:47.386]        // -> [powered_down <= 0x00000000]
[22:45:47.386]      WriteDP(DP_SELECT, 0x00000000);
[22:45:47.386]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:45:47.386]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:45:47.386]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:45:47.386]        // -> [powered_down <= 0x00000001]
[22:45:47.386]    </block>
[22:45:47.386]    <control if="powered_down" while="" timeout="0" info="">
[22:45:47.386]      // if-block "powered_down"
[22:45:47.386]        // =>  TRUE
[22:45:47.386]      <block atomic="false" info="">
[22:45:47.386]        Message(0, "Debug/System power-up request sent");
[22:45:47.393]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:45:47.394]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:45:47.394]      </block>
[22:45:47.394]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:45:47.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:47.394]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:45:47.394]        // while-condition  =>  FALSE
[22:45:47.394]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:45:47.394]      </control>
[22:45:47.394]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:45:47.394]        // if-block "(__protocol & 0xFFFF) == 1"
[22:45:47.394]          // =>  FALSE
[22:45:47.394]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:45:47.394]      </control>
[22:45:47.394]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:45:47.394]        // if-block "(__protocol & 0xFFFF) == 2"
[22:45:47.394]          // =>  TRUE
[22:45:47.394]        <block atomic="false" info="">
[22:45:47.394]          Message(0, "executing SWD power up");
[22:45:47.398]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:45:47.398]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:45:47.398]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:45:47.398]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:45:47.398]        </block>
[22:45:47.398]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:45:47.398]      </control>
[22:45:47.398]      // end if-block "powered_down"
[22:45:47.398]    </control>
[22:45:47.398]    <block atomic="false" info="">
[22:45:47.398]      __var DEBUG_PORT_VAL    = 0;
[22:45:47.398]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:45:47.398]      __var ACCESS_POINT_VAL  = 0;
[22:45:47.398]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:45:47.398]      __ap = 1; 
[22:45:47.398]        // -> [__ap <= 0x00000001]
[22:45:47.398]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:45:47.403]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:45:47.403]      __ap = 4;
[22:45:47.403]        // -> [__ap <= 0x00000004]
[22:45:47.403]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:45:47.404]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:45:47.405]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:45:47.405]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:45:47.408]    </block>
[22:45:47.408]    <block atomic="false" info="">
[22:45:47.408]      __var nReset = 0x80;
[22:45:47.408]        // -> [nReset <= 0x00000080]
[22:45:47.408]      __var canReadPins = 0;
[22:45:47.408]        // -> [canReadPins <= 0x00000000]
[22:45:47.408]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:45:47.408]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:45:47.408]        // -> [canReadPins <= 0x00000001]
[22:45:47.408]    </block>
[22:45:47.408]    <control if="" while="1" timeout="200" info="">
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.408]      // while "1"  (timeout="200")
[22:45:47.408]      // while-condition  =>  TRUE
[22:45:47.413]      // while "1"  (timeout="200")
[22:45:47.413]      // while  =>  TIMEOUT
[22:45:47.413]      // end while "1"
[22:45:47.413]    </control>
[22:45:47.413]    <control if="canReadPins" while="" timeout="0" info="">
[22:45:47.413]      // if-block "canReadPins"
[22:45:47.413]        // =>  TRUE
[22:45:47.413]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:45:47.413]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:45:47.414]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:45:47.414]        // while-condition  =>  FALSE
[22:45:47.414]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:45:47.414]      </control>
[22:45:47.414]      // end if-block "canReadPins"
[22:45:47.414]    </control>
[22:45:47.414]    <control if="!canReadPins" while="" timeout="0" info="">
[22:45:47.414]      // if-block "!canReadPins"
[22:45:47.414]        // =>  FALSE
[22:45:47.414]      // skip if-block "!canReadPins"
[22:45:47.414]    </control>
[22:45:47.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:45:47.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:45:47.414]        // =>  TRUE
[22:45:47.414]      <block atomic="false" info="">
[22:45:47.414]        WriteAP(0x00, 0x190008);
[22:45:47.416]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:45:47.416]        WriteAP(0xF0, 0x01);
[22:45:47.416]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:45:47.416]      </block>
[22:45:47.416]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:45:47.416]    </control>
[22:45:47.416]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:45:47.416]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:45:47.416]        // =>  FALSE
[22:45:47.416]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:45:47.416]    </control>
[22:45:47.416]    <block atomic="false" info="">
[22:45:47.416]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:45:47.416]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:45:47.416]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:45:47.416]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:45:47.420]      __ap = 0; //lets make sure we reset the access point selection
[22:45:47.420]        // -> [__ap <= 0x00000000]
[22:45:47.420]    </block>
[22:45:47.420]  </sequence>
[22:45:47.420]  
[22:45:47.425]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:45:47.425]  
[22:45:47.425]  <debugvars>
[22:45:47.425]    // Pre-defined
[22:45:47.425]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:47.425]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:47.425]    __dp=0x00000000
[22:45:47.425]    __ap=0x00000000
[22:45:47.425]    __traceout=0x00000000      (Trace Disabled)
[22:45:47.425]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:47.425]    __FlashAddr=0x00000000
[22:45:47.425]    __FlashLen=0x00000000
[22:45:47.425]    __FlashArg=0x00000000
[22:45:47.425]    __FlashOp=0x00000000
[22:45:47.425]    __Result=0x00000000
[22:45:47.425]  </debugvars>
[22:45:47.425]  
[22:45:47.425]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:45:47.425]    <block atomic="false" info="">
[22:45:47.425]      __var deviceID = 0;
[22:45:47.430]        // -> [deviceID <= 0x00000000]
[22:45:47.430]      __var version = 0;
[22:45:47.430]        // -> [version <= 0x00000000]
[22:45:47.430]      __var partNum = 0;
[22:45:47.430]        // -> [partNum <= 0x00000000]
[22:45:47.430]      __var manuf = 0;
[22:45:47.430]        // -> [manuf <= 0x00000000]
[22:45:47.430]      __var isMSPM0G1X0X_G3X0X = 0;
[22:45:47.430]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:45:47.430]      __var isProduction = 0;
[22:45:47.430]        // -> [isProduction <= 0x00000000]
[22:45:47.430]      __var continueId = 0;
[22:45:47.430]        // -> [continueId <= 0x00000000]
[22:45:47.430]      deviceID =   Read32(0x41C40004);
[22:45:47.433]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:45:47.433]        // -> [deviceID <= 0x2BB8802F]
[22:45:47.433]      version = deviceID >> 28;
[22:45:47.433]        // -> [version <= 0x00000002]
[22:45:47.433]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:45:47.434]        // -> [partNum <= 0x0000BB88]
[22:45:47.434]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:45:47.434]        // -> [manuf <= 0x00000017]
[22:45:47.434]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:45:47.434]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:45:47.434]      isProduction = (version > 0);
[22:45:47.434]        // -> [isProduction <= 0x00000001]
[22:45:47.434]    </block>
[22:45:47.434]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:45:47.434]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:45:47.434]        // =>  FALSE
[22:45:47.434]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:45:47.434]    </control>
[22:45:47.434]    <control if="continueId == 4" while="" timeout="0" info="">
[22:45:47.434]      // if-block "continueId == 4"
[22:45:47.434]        // =>  FALSE
[22:45:47.434]      // skip if-block "continueId == 4"
[22:45:47.434]    </control>
[22:45:47.434]    <control if="!isProduction" while="" timeout="0" info="">
[22:45:47.434]      // if-block "!isProduction"
[22:45:47.434]        // =>  FALSE
[22:45:47.434]      // skip if-block "!isProduction"
[22:45:47.434]    </control>
[22:45:47.434]  </sequence>
[22:45:47.434]  
[22:48:38.823]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:48:38.823]  
[22:48:38.823]  <debugvars>
[22:48:38.823]    // Pre-defined
[22:48:38.823]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:48:38.823]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:48:38.823]    __dp=0x00000000
[22:48:38.823]    __ap=0x00000000
[22:48:38.823]    __traceout=0x00000000      (Trace Disabled)
[22:48:38.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:48:38.823]    __FlashAddr=0x00000000
[22:48:38.823]    __FlashLen=0x00000000
[22:48:38.823]    __FlashArg=0x00000000
[22:48:38.823]    __FlashOp=0x00000000
[22:48:38.823]    __Result=0x00000000
[22:48:38.823]  </debugvars>
[22:48:38.823]  
[22:48:38.823]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:48:38.823]    <block atomic="false" info="">
[22:48:38.823]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:48:38.823]        // -> [isSWJ <= 0x00000001]
[22:48:38.823]      __var hasDormant = __protocol & 0x00020000;
[22:48:38.823]        // -> [hasDormant <= 0x00000000]
[22:48:38.823]      __var protType   = __protocol & 0x0000FFFF;
[22:48:38.823]        // -> [protType <= 0x00000002]
[22:48:38.823]    </block>
[22:48:38.823]    <control if="protType == 1" while="" timeout="0" info="">
[22:48:38.823]      // if-block "protType == 1"
[22:48:38.823]        // =>  FALSE
[22:48:38.823]      // skip if-block "protType == 1"
[22:48:38.827]    </control>
[22:48:38.827]    <control if="protType == 2" while="" timeout="0" info="">
[22:48:38.827]      // if-block "protType == 2"
[22:48:38.827]        // =>  TRUE
[22:48:38.827]      <control if="isSWJ" while="" timeout="0" info="">
[22:48:38.827]        // if-block "isSWJ"
[22:48:38.827]          // =>  TRUE
[22:48:38.827]        <control if="hasDormant" while="" timeout="0" info="">
[22:48:38.827]          // if-block "hasDormant"
[22:48:38.827]            // =>  FALSE
[22:48:38.827]          // skip if-block "hasDormant"
[22:48:38.827]        </control>
[22:48:38.827]        <control if="!hasDormant" while="" timeout="0" info="">
[22:48:38.827]          // if-block "!hasDormant"
[22:48:38.827]            // =>  TRUE
[22:48:38.830]          <block atomic="false" info="">
[22:48:38.830]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:48:38.830]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:48:38.830]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:48:38.831]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:48:38.831]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:48:38.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:48:38.831]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:48:38.831]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:48:38.832]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:48:38.832]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:48:38.832]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:48:38.832]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:48:38.832]          </block>
[22:48:38.832]          // end if-block "!hasDormant"
[22:48:38.832]        </control>
[22:48:38.832]        // end if-block "isSWJ"
[22:48:38.832]      </control>
[22:48:38.832]      <control if="!isSWJ" while="" timeout="0" info="">
[22:48:38.832]        // if-block "!isSWJ"
[22:48:38.832]          // =>  FALSE
[22:48:38.832]        // skip if-block "!isSWJ"
[22:48:38.832]      </control>
[22:48:38.832]      <block atomic="false" info="">
[22:48:38.832]        ReadDP(0x0);
[22:48:38.832]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:48:38.832]      </block>
[22:48:38.832]      // end if-block "protType == 2"
[22:48:38.835]    </control>
[22:48:38.835]  </sequence>
[22:48:38.835]  
[22:48:38.835]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:48:38.835]  
[22:48:38.835]  <debugvars>
[22:48:38.835]    // Pre-defined
[22:48:38.835]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:48:38.835]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:48:38.835]    __dp=0x00000000
[22:48:38.835]    __ap=0x00000000
[22:48:38.835]    __traceout=0x00000000      (Trace Disabled)
[22:48:38.835]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:48:38.835]    __FlashAddr=0x00000000
[22:48:38.835]    __FlashLen=0x00000000
[22:48:38.835]    __FlashArg=0x00000000
[22:48:38.835]    __FlashOp=0x00000000
[22:48:38.835]    __Result=0x00000000
[22:48:38.835]  </debugvars>
[22:48:38.835]  
[22:48:38.835]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:48:38.835]    <block atomic="false" info="">
[22:48:38.835]      __var SW_DP_ABORT       = 0x0;
[22:48:38.835]        // -> [SW_DP_ABORT <= 0x00000000]
[22:48:38.835]      __var DP_CTRL_STAT      = 0x4;
[22:48:38.835]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:48:38.835]      __var DP_SELECT         = 0x8;
[22:48:38.835]        // -> [DP_SELECT <= 0x00000008]
[22:48:38.835]      __var powered_down      = 0;
[22:48:38.835]        // -> [powered_down <= 0x00000000]
[22:48:38.835]      WriteDP(DP_SELECT, 0x00000000);
[22:48:38.839]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:48:38.839]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:48:38.840]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:48:38.840]        // -> [powered_down <= 0x00000001]
[22:48:38.840]    </block>
[22:48:38.840]    <control if="powered_down" while="" timeout="0" info="">
[22:48:38.840]      // if-block "powered_down"
[22:48:38.840]        // =>  TRUE
[22:48:38.840]      <block atomic="false" info="">
[22:48:38.840]        Message(0, "Debug/System power-up request sent");
[22:48:38.842]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:48:38.843]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:48:38.843]      </block>
[22:48:38.843]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:48:38.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:48:38.844]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:48:38.844]        // while-condition  =>  FALSE
[22:48:38.844]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:48:38.844]      </control>
[22:48:38.844]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:48:38.844]        // if-block "(__protocol & 0xFFFF) == 1"
[22:48:38.844]          // =>  FALSE
[22:48:38.844]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:48:38.844]      </control>
[22:48:38.844]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:48:38.846]        // if-block "(__protocol & 0xFFFF) == 2"
[22:48:38.846]          // =>  TRUE
[22:48:38.846]        <block atomic="false" info="">
[22:48:38.846]          Message(0, "executing SWD power up");
[22:48:38.847]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:48:38.849]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:48:38.849]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:48:38.849]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:48:38.849]        </block>
[22:48:38.850]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:48:38.850]      </control>
[22:48:38.850]      // end if-block "powered_down"
[22:48:38.850]    </control>
[22:48:38.850]    <block atomic="false" info="">
[22:48:38.850]      __var DEBUG_PORT_VAL    = 0;
[22:48:38.850]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:48:38.850]      __var ACCESS_POINT_VAL  = 0;
[22:48:38.850]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:48:38.851]      __ap = 1; 
[22:48:38.851]        // -> [__ap <= 0x00000001]
[22:48:38.851]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:48:38.852]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:48:38.852]      __ap = 4;
[22:48:38.852]        // -> [__ap <= 0x00000004]
[22:48:38.852]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:48:38.854]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:48:38.854]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:48:38.854]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:48:38.856]    </block>
[22:48:38.856]    <block atomic="false" info="">
[22:48:38.856]      __var nReset = 0x80;
[22:48:38.856]        // -> [nReset <= 0x00000080]
[22:48:38.856]      __var canReadPins = 0;
[22:48:38.856]        // -> [canReadPins <= 0x00000000]
[22:48:38.856]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:48:38.856]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:48:38.856]        // -> [canReadPins <= 0x00000001]
[22:48:38.856]    </block>
[22:48:38.856]    <control if="" while="1" timeout="200" info="">
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.856]      // while-condition  =>  TRUE
[22:48:38.856]      // while "1"  (timeout="200")
[22:48:38.860]      // while-condition  =>  TRUE
[22:48:38.860]      // while "1"  (timeout="200")
[22:48:38.860]      // while-condition  =>  TRUE
[22:48:38.860]      // while "1"  (timeout="200")
[22:48:38.860]      // while-condition  =>  TRUE
[22:48:38.860]      // while "1"  (timeout="200")
[22:48:38.860]      // while-condition  =>  TRUE
[22:48:38.860]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.861]      // while-condition  =>  TRUE
[22:48:38.861]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.864]      // while-condition  =>  TRUE
[22:48:38.864]      // while "1"  (timeout="200")
[22:48:38.867]      // while-condition  =>  TRUE
[22:48:38.867]      // while "1"  (timeout="200")
[22:48:38.867]      // while  =>  TIMEOUT
[22:48:38.867]      // end while "1"
[22:48:38.867]    </control>
[22:48:38.867]    <control if="canReadPins" while="" timeout="0" info="">
[22:48:38.867]      // if-block "canReadPins"
[22:48:38.867]        // =>  TRUE
[22:48:38.867]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:48:38.867]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:48:38.868]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:48:38.868]        // while-condition  =>  FALSE
[22:48:38.868]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:48:38.868]      </control>
[22:48:38.868]      // end if-block "canReadPins"
[22:48:38.869]    </control>
[22:48:38.869]    <control if="!canReadPins" while="" timeout="0" info="">
[22:48:38.869]      // if-block "!canReadPins"
[22:48:38.869]        // =>  FALSE
[22:48:38.869]      // skip if-block "!canReadPins"
[22:48:38.869]    </control>
[22:48:38.869]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:48:38.869]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:48:38.870]        // =>  TRUE
[22:48:38.870]      <block atomic="false" info="">
[22:48:38.870]        WriteAP(0x00, 0x190008);
[22:48:38.870]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:48:38.871]        WriteAP(0xF0, 0x01);
[22:48:38.872]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:48:38.872]      </block>
[22:48:38.872]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:48:38.872]    </control>
[22:48:38.872]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:48:38.872]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:48:38.872]        // =>  FALSE
[22:48:38.872]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:48:38.872]    </control>
[22:48:38.872]    <block atomic="false" info="">
[22:48:38.872]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:48:38.872]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:48:38.872]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:48:38.872]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:48:38.876]      __ap = 0; //lets make sure we reset the access point selection
[22:48:38.876]        // -> [__ap <= 0x00000000]
[22:48:38.876]    </block>
[22:48:38.876]  </sequence>
[22:48:38.876]  
[22:48:38.883]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:48:38.883]  
[22:48:38.883]  <debugvars>
[22:48:38.883]    // Pre-defined
[22:48:38.883]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:48:38.883]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:48:38.883]    __dp=0x00000000
[22:48:38.883]    __ap=0x00000000
[22:48:38.883]    __traceout=0x00000000      (Trace Disabled)
[22:48:38.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:48:38.885]    __FlashAddr=0x00000000
[22:48:38.885]    __FlashLen=0x00000000
[22:48:38.885]    __FlashArg=0x00000000
[22:48:38.885]    __FlashOp=0x00000000
[22:48:38.885]    __Result=0x00000000
[22:48:38.885]  </debugvars>
[22:48:38.885]  
[22:48:38.885]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:48:38.885]    <block atomic="false" info="">
[22:48:38.885]      __var deviceID = 0;
[22:48:38.885]        // -> [deviceID <= 0x00000000]
[22:48:38.885]      __var version = 0;
[22:48:38.885]        // -> [version <= 0x00000000]
[22:48:38.885]      __var partNum = 0;
[22:48:38.885]        // -> [partNum <= 0x00000000]
[22:48:38.885]      __var manuf = 0;
[22:48:38.885]        // -> [manuf <= 0x00000000]
[22:48:38.885]      __var isMSPM0G1X0X_G3X0X = 0;
[22:48:38.886]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:48:38.886]      __var isProduction = 0;
[22:48:38.886]        // -> [isProduction <= 0x00000000]
[22:48:38.886]      __var continueId = 0;
[22:48:38.886]        // -> [continueId <= 0x00000000]
[22:48:38.886]      deviceID =   Read32(0x41C40004);
[22:48:38.888]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:48:38.888]        // -> [deviceID <= 0x2BB8802F]
[22:48:38.889]      version = deviceID >> 28;
[22:48:38.889]        // -> [version <= 0x00000002]
[22:48:38.889]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:48:38.889]        // -> [partNum <= 0x0000BB88]
[22:48:38.889]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:48:38.890]        // -> [manuf <= 0x00000017]
[22:48:38.890]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:48:38.890]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:48:38.890]      isProduction = (version > 0);
[22:48:38.890]        // -> [isProduction <= 0x00000001]
[22:48:38.890]    </block>
[22:48:38.890]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:48:38.890]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:48:38.890]        // =>  FALSE
[22:48:38.890]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:48:38.890]    </control>
[22:48:38.890]    <control if="continueId == 4" while="" timeout="0" info="">
[22:48:38.891]      // if-block "continueId == 4"
[22:48:38.891]        // =>  FALSE
[22:48:38.891]      // skip if-block "continueId == 4"
[22:48:38.891]    </control>
[22:48:38.891]    <control if="!isProduction" while="" timeout="0" info="">
[22:48:38.891]      // if-block "!isProduction"
[22:48:38.891]        // =>  FALSE
[22:48:38.891]      // skip if-block "!isProduction"
[22:48:38.891]    </control>
[22:48:38.891]  </sequence>
[22:48:38.891]  
[22:48:54.352]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:48:54.352]  
[22:48:54.364]  <debugvars>
[22:48:54.364]    // Pre-defined
[22:48:54.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:48:54.364]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:48:54.364]    __dp=0x00000000
[22:48:54.364]    __ap=0x00000000
[22:48:54.364]    __traceout=0x00000000      (Trace Disabled)
[22:48:54.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:48:54.364]    __FlashAddr=0x00000000
[22:48:54.364]    __FlashLen=0x00000000
[22:48:54.364]    __FlashArg=0x00000000
[22:48:54.366]    __FlashOp=0x00000000
[22:48:54.366]    __Result=0x00000000
[22:48:54.366]  </debugvars>
[22:48:54.366]  
[22:48:54.366]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:48:54.366]    <block atomic="false" info="">
[22:48:54.366]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:48:54.366]        // -> [isSWJ <= 0x00000001]
[22:48:54.366]      __var hasDormant = __protocol & 0x00020000;
[22:48:54.366]        // -> [hasDormant <= 0x00000000]
[22:48:54.366]      __var protType   = __protocol & 0x0000FFFF;
[22:48:54.366]        // -> [protType <= 0x00000002]
[22:48:54.366]    </block>
[22:48:54.366]    <control if="protType == 1" while="" timeout="0" info="">
[22:48:54.366]      // if-block "protType == 1"
[22:48:54.366]        // =>  FALSE
[22:48:54.366]      // skip if-block "protType == 1"
[22:48:54.366]    </control>
[22:48:54.366]    <control if="protType == 2" while="" timeout="0" info="">
[22:48:54.366]      // if-block "protType == 2"
[22:48:54.366]        // =>  TRUE
[22:48:54.366]      <control if="isSWJ" while="" timeout="0" info="">
[22:48:54.366]        // if-block "isSWJ"
[22:48:54.366]          // =>  TRUE
[22:48:54.366]        <control if="hasDormant" while="" timeout="0" info="">
[22:48:54.366]          // if-block "hasDormant"
[22:48:54.366]            // =>  FALSE
[22:48:54.366]          // skip if-block "hasDormant"
[22:48:54.368]        </control>
[22:48:54.368]        <control if="!hasDormant" while="" timeout="0" info="">
[22:48:54.368]          // if-block "!hasDormant"
[22:48:54.368]            // =>  TRUE
[22:48:54.368]          <block atomic="false" info="">
[22:48:54.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:48:54.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:48:54.370]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:48:54.370]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:48:54.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:48:54.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:48:54.371]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:48:54.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:48:54.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:48:54.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:48:54.371]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:48:54.371]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:48:54.371]          </block>
[22:48:54.372]          // end if-block "!hasDormant"
[22:48:54.372]        </control>
[22:48:54.372]        // end if-block "isSWJ"
[22:48:54.372]      </control>
[22:48:54.372]      <control if="!isSWJ" while="" timeout="0" info="">
[22:48:54.372]        // if-block "!isSWJ"
[22:48:54.373]          // =>  FALSE
[22:48:54.373]        // skip if-block "!isSWJ"
[22:48:54.373]      </control>
[22:48:54.373]      <block atomic="false" info="">
[22:48:54.373]        ReadDP(0x0);
[22:48:54.373]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:48:54.373]      </block>
[22:48:54.373]      // end if-block "protType == 2"
[22:48:54.373]    </control>
[22:48:54.373]  </sequence>
[22:48:54.375]  
[22:48:54.375]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:48:54.375]  
[22:48:54.375]  <debugvars>
[22:48:54.375]    // Pre-defined
[22:48:54.375]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:48:54.375]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:48:54.375]    __dp=0x00000000
[22:48:54.375]    __ap=0x00000000
[22:48:54.375]    __traceout=0x00000000      (Trace Disabled)
[22:48:54.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:48:54.375]    __FlashAddr=0x00000000
[22:48:54.375]    __FlashLen=0x00000000
[22:48:54.375]    __FlashArg=0x00000000
[22:48:54.375]    __FlashOp=0x00000000
[22:48:54.375]    __Result=0x00000000
[22:48:54.375]  </debugvars>
[22:48:54.375]  
[22:48:54.375]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:48:54.377]    <block atomic="false" info="">
[22:48:54.377]      __var SW_DP_ABORT       = 0x0;
[22:48:54.377]        // -> [SW_DP_ABORT <= 0x00000000]
[22:48:54.377]      __var DP_CTRL_STAT      = 0x4;
[22:48:54.377]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:48:54.377]      __var DP_SELECT         = 0x8;
[22:48:54.377]        // -> [DP_SELECT <= 0x00000008]
[22:48:54.377]      __var powered_down      = 0;
[22:48:54.377]        // -> [powered_down <= 0x00000000]
[22:48:54.377]      WriteDP(DP_SELECT, 0x00000000);
[22:48:54.377]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:48:54.377]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:48:54.377]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:48:54.377]        // -> [powered_down <= 0x00000001]
[22:48:54.377]    </block>
[22:48:54.377]    <control if="powered_down" while="" timeout="0" info="">
[22:48:54.377]      // if-block "powered_down"
[22:48:54.377]        // =>  TRUE
[22:48:54.377]      <block atomic="false" info="">
[22:48:54.377]        Message(0, "Debug/System power-up request sent");
[22:48:54.383]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:48:54.383]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:48:54.383]      </block>
[22:48:54.383]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:48:54.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:48:54.383]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:48:54.385]        // while-condition  =>  FALSE
[22:48:54.385]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:48:54.385]      </control>
[22:48:54.385]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:48:54.385]        // if-block "(__protocol & 0xFFFF) == 1"
[22:48:54.385]          // =>  FALSE
[22:48:54.385]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:48:54.385]      </control>
[22:48:54.385]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:48:54.385]        // if-block "(__protocol & 0xFFFF) == 2"
[22:48:54.385]          // =>  TRUE
[22:48:54.385]        <block atomic="false" info="">
[22:48:54.385]          Message(0, "executing SWD power up");
[22:48:54.385]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:48:54.385]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:48:54.385]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:48:54.389]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:48:54.389]        </block>
[22:48:54.390]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:48:54.390]      </control>
[22:48:54.390]      // end if-block "powered_down"
[22:48:54.390]    </control>
[22:48:54.390]    <block atomic="false" info="">
[22:48:54.390]      __var DEBUG_PORT_VAL    = 0;
[22:48:54.390]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:48:54.390]      __var ACCESS_POINT_VAL  = 0;
[22:48:54.390]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:48:54.391]      __ap = 1; 
[22:48:54.391]        // -> [__ap <= 0x00000001]
[22:48:54.391]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:48:54.391]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:48:54.391]      __ap = 4;
[22:48:54.391]        // -> [__ap <= 0x00000004]
[22:48:54.391]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:48:54.391]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:48:54.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:48:54.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:48:54.394]    </block>
[22:48:54.394]    <block atomic="false" info="">
[22:48:54.394]      __var nReset = 0x80;
[22:48:54.394]        // -> [nReset <= 0x00000080]
[22:48:54.394]      __var canReadPins = 0;
[22:48:54.394]        // -> [canReadPins <= 0x00000000]
[22:48:54.394]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:48:54.394]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:48:54.394]        // -> [canReadPins <= 0x00000001]
[22:48:54.394]    </block>
[22:48:54.398]    <control if="" while="1" timeout="200" info="">
[22:48:54.398]      // while "1"  (timeout="200")
[22:48:54.398]      // while-condition  =>  TRUE
[22:48:54.398]      // while "1"  (timeout="200")
[22:48:54.398]      // while-condition  =>  TRUE
[22:48:54.398]      // while "1"  (timeout="200")
[22:48:54.398]      // while-condition  =>  TRUE
[22:48:54.399]      // while "1"  (timeout="200")
[22:48:54.399]      // while-condition  =>  TRUE
[22:48:54.399]      // while "1"  (timeout="200")
[22:48:54.399]      // while-condition  =>  TRUE
[22:48:54.399]      // while "1"  (timeout="200")
[22:48:54.399]      // while-condition  =>  TRUE
[22:48:54.399]      // while "1"  (timeout="200")
[22:48:54.399]      // while-condition  =>  TRUE
[22:48:54.399]      // while "1"  (timeout="200")
[22:48:54.400]      // while-condition  =>  TRUE
[22:48:54.400]      // while "1"  (timeout="200")
[22:48:54.400]      // while-condition  =>  TRUE
[22:48:54.400]      // while "1"  (timeout="200")
[22:48:54.400]      // while-condition  =>  TRUE
[22:48:54.400]      // while "1"  (timeout="200")
[22:48:54.400]      // while-condition  =>  TRUE
[22:48:54.400]      // while "1"  (timeout="200")
[22:48:54.400]      // while-condition  =>  TRUE
[22:48:54.400]      // while "1"  (timeout="200")
[22:48:54.400]      // while-condition  =>  TRUE
[22:48:54.400]      // while "1"  (timeout="200")
[22:48:54.401]      // while-condition  =>  TRUE
[22:48:54.401]      // while "1"  (timeout="200")
[22:48:54.401]      // while-condition  =>  TRUE
[22:48:54.401]      // while "1"  (timeout="200")
[22:48:54.401]      // while-condition  =>  TRUE
[22:48:54.401]      // while "1"  (timeout="200")
[22:48:54.401]      // while-condition  =>  TRUE
[22:48:54.401]      // while "1"  (timeout="200")
[22:48:54.401]      // while-condition  =>  TRUE
[22:48:54.401]      // while "1"  (timeout="200")
[22:48:54.401]      // while-condition  =>  TRUE
[22:48:54.401]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.402]      // while-condition  =>  TRUE
[22:48:54.402]      // while "1"  (timeout="200")
[22:48:54.406]      // while-condition  =>  TRUE
[22:48:54.406]      // while "1"  (timeout="200")
[22:48:54.406]      // while-condition  =>  TRUE
[22:48:54.406]      // while "1"  (timeout="200")
[22:48:54.406]      // while-condition  =>  TRUE
[22:48:54.406]      // while "1"  (timeout="200")
[22:48:54.406]      // while-condition  =>  TRUE
[22:48:54.406]      // while "1"  (timeout="200")
[22:48:54.406]      // while-condition  =>  TRUE
[22:48:54.406]      // while "1"  (timeout="200")
[22:48:54.406]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.407]      // while-condition  =>  TRUE
[22:48:54.407]      // while "1"  (timeout="200")
[22:48:54.410]      // while-condition  =>  TRUE
[22:48:54.410]      // while "1"  (timeout="200")
[22:48:54.410]      // while-condition  =>  TRUE
[22:48:54.410]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.411]      // while "1"  (timeout="200")
[22:48:54.411]      // while-condition  =>  TRUE
[22:48:54.412]      // while "1"  (timeout="200")
[22:48:54.412]      // while  =>  TIMEOUT
[22:48:54.412]      // end while "1"
[22:48:54.412]    </control>
[22:48:54.412]    <control if="canReadPins" while="" timeout="0" info="">
[22:48:54.412]      // if-block "canReadPins"
[22:48:54.412]        // =>  TRUE
[22:48:54.412]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:48:54.412]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:48:54.412]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:48:54.412]        // while-condition  =>  FALSE
[22:48:54.412]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:48:54.412]      </control>
[22:48:54.412]      // end if-block "canReadPins"
[22:48:54.412]    </control>
[22:48:54.412]    <control if="!canReadPins" while="" timeout="0" info="">
[22:48:54.412]      // if-block "!canReadPins"
[22:48:54.412]        // =>  FALSE
[22:48:54.414]      // skip if-block "!canReadPins"
[22:48:54.414]    </control>
[22:48:54.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:48:54.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:48:54.414]        // =>  TRUE
[22:48:54.414]      <block atomic="false" info="">
[22:48:54.414]        WriteAP(0x00, 0x190008);
[22:48:54.415]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:48:54.415]        WriteAP(0xF0, 0x01);
[22:48:54.416]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:48:54.416]      </block>
[22:48:54.416]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:48:54.416]    </control>
[22:48:54.416]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:48:54.418]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:48:54.418]        // =>  FALSE
[22:48:54.418]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:48:54.418]    </control>
[22:48:54.418]    <block atomic="false" info="">
[22:48:54.418]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:48:54.419]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:48:54.419]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:48:54.419]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:48:54.421]      __ap = 0; //lets make sure we reset the access point selection
[22:48:54.421]        // -> [__ap <= 0x00000000]
[22:48:54.421]    </block>
[22:48:54.421]  </sequence>
[22:48:54.421]  
[22:48:54.427]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:48:54.427]  
[22:48:54.427]  <debugvars>
[22:48:54.427]    // Pre-defined
[22:48:54.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:48:54.427]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:48:54.427]    __dp=0x00000000
[22:48:54.428]    __ap=0x00000000
[22:48:54.428]    __traceout=0x00000000      (Trace Disabled)
[22:48:54.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:48:54.428]    __FlashAddr=0x00000000
[22:48:54.428]    __FlashLen=0x00000000
[22:48:54.428]    __FlashArg=0x00000000
[22:48:54.428]    __FlashOp=0x00000000
[22:48:54.428]    __Result=0x00000000
[22:48:54.428]  </debugvars>
[22:48:54.428]  
[22:48:54.428]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:48:54.428]    <block atomic="false" info="">
[22:48:54.429]      __var deviceID = 0;
[22:48:54.429]        // -> [deviceID <= 0x00000000]
[22:48:54.429]      __var version = 0;
[22:48:54.429]        // -> [version <= 0x00000000]
[22:48:54.429]      __var partNum = 0;
[22:48:54.429]        // -> [partNum <= 0x00000000]
[22:48:54.429]      __var manuf = 0;
[22:48:54.429]        // -> [manuf <= 0x00000000]
[22:48:54.429]      __var isMSPM0G1X0X_G3X0X = 0;
[22:48:54.429]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:48:54.429]      __var isProduction = 0;
[22:48:54.430]        // -> [isProduction <= 0x00000000]
[22:48:54.430]      __var continueId = 0;
[22:48:54.430]        // -> [continueId <= 0x00000000]
[22:48:54.430]      deviceID =   Read32(0x41C40004);
[22:48:54.432]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:48:54.432]        // -> [deviceID <= 0x2BB8802F]
[22:48:54.432]      version = deviceID >> 28;
[22:48:54.432]        // -> [version <= 0x00000002]
[22:48:54.432]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:48:54.432]        // -> [partNum <= 0x0000BB88]
[22:48:54.432]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:48:54.433]        // -> [manuf <= 0x00000017]
[22:48:54.433]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:48:54.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:48:54.433]      isProduction = (version > 0);
[22:48:54.433]        // -> [isProduction <= 0x00000001]
[22:48:54.433]    </block>
[22:48:54.433]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:48:54.433]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:48:54.433]        // =>  FALSE
[22:48:54.433]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:48:54.433]    </control>
[22:48:54.433]    <control if="continueId == 4" while="" timeout="0" info="">
[22:48:54.433]      // if-block "continueId == 4"
[22:48:54.433]        // =>  FALSE
[22:48:54.433]      // skip if-block "continueId == 4"
[22:48:54.433]    </control>
[22:48:54.435]    <control if="!isProduction" while="" timeout="0" info="">
[22:48:54.435]      // if-block "!isProduction"
[22:48:54.435]        // =>  FALSE
[22:48:54.435]      // skip if-block "!isProduction"
[22:48:54.435]    </control>
[22:48:54.435]  </sequence>
[22:48:54.435]  
[22:50:25.313]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:50:25.313]  
[22:50:25.323]  <debugvars>
[22:50:25.323]    // Pre-defined
[22:50:25.323]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:50:25.323]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:50:25.323]    __dp=0x00000000
[22:50:25.323]    __ap=0x00000000
[22:50:25.323]    __traceout=0x00000000      (Trace Disabled)
[22:50:25.323]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:50:25.323]    __FlashAddr=0x00000000
[22:50:25.323]    __FlashLen=0x00000000
[22:50:25.323]    __FlashArg=0x00000000
[22:50:25.323]    __FlashOp=0x00000000
[22:50:25.323]    __Result=0x00000000
[22:50:25.323]  </debugvars>
[22:50:25.323]  
[22:50:25.323]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:50:25.323]    <block atomic="false" info="">
[22:50:25.323]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:50:25.323]        // -> [isSWJ <= 0x00000001]
[22:50:25.323]      __var hasDormant = __protocol & 0x00020000;
[22:50:25.323]        // -> [hasDormant <= 0x00000000]
[22:50:25.323]      __var protType   = __protocol & 0x0000FFFF;
[22:50:25.323]        // -> [protType <= 0x00000002]
[22:50:25.323]    </block>
[22:50:25.323]    <control if="protType == 1" while="" timeout="0" info="">
[22:50:25.323]      // if-block "protType == 1"
[22:50:25.323]        // =>  FALSE
[22:50:25.323]      // skip if-block "protType == 1"
[22:50:25.323]    </control>
[22:50:25.323]    <control if="protType == 2" while="" timeout="0" info="">
[22:50:25.323]      // if-block "protType == 2"
[22:50:25.323]        // =>  TRUE
[22:50:25.323]      <control if="isSWJ" while="" timeout="0" info="">
[22:50:25.323]        // if-block "isSWJ"
[22:50:25.323]          // =>  TRUE
[22:50:25.323]        <control if="hasDormant" while="" timeout="0" info="">
[22:50:25.323]          // if-block "hasDormant"
[22:50:25.323]            // =>  FALSE
[22:50:25.323]          // skip if-block "hasDormant"
[22:50:25.323]        </control>
[22:50:25.328]        <control if="!hasDormant" while="" timeout="0" info="">
[22:50:25.328]          // if-block "!hasDormant"
[22:50:25.328]            // =>  TRUE
[22:50:25.328]          <block atomic="false" info="">
[22:50:25.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:50:25.329]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:50:25.329]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:50:25.329]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:50:25.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:50:25.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:50:25.330]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:50:25.330]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:50:25.330]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:50:25.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:50:25.331]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:50:25.331]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:50:25.331]          </block>
[22:50:25.331]          // end if-block "!hasDormant"
[22:50:25.331]        </control>
[22:50:25.331]        // end if-block "isSWJ"
[22:50:25.331]      </control>
[22:50:25.331]      <control if="!isSWJ" while="" timeout="0" info="">
[22:50:25.331]        // if-block "!isSWJ"
[22:50:25.331]          // =>  FALSE
[22:50:25.331]        // skip if-block "!isSWJ"
[22:50:25.331]      </control>
[22:50:25.331]      <block atomic="false" info="">
[22:50:25.331]        ReadDP(0x0);
[22:50:25.331]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:50:25.331]      </block>
[22:50:25.331]      // end if-block "protType == 2"
[22:50:25.331]    </control>
[22:50:25.331]  </sequence>
[22:50:25.333]  
[22:50:25.333]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:50:25.333]  
[22:50:25.333]  <debugvars>
[22:50:25.335]    // Pre-defined
[22:50:25.335]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:50:25.335]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:50:25.335]    __dp=0x00000000
[22:50:25.335]    __ap=0x00000000
[22:50:25.335]    __traceout=0x00000000      (Trace Disabled)
[22:50:25.335]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:50:25.335]    __FlashAddr=0x00000000
[22:50:25.335]    __FlashLen=0x00000000
[22:50:25.335]    __FlashArg=0x00000000
[22:50:25.335]    __FlashOp=0x00000000
[22:50:25.335]    __Result=0x00000000
[22:50:25.335]  </debugvars>
[22:50:25.335]  
[22:50:25.335]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:50:25.336]    <block atomic="false" info="">
[22:50:25.336]      __var SW_DP_ABORT       = 0x0;
[22:50:25.336]        // -> [SW_DP_ABORT <= 0x00000000]
[22:50:25.336]      __var DP_CTRL_STAT      = 0x4;
[22:50:25.336]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:50:25.336]      __var DP_SELECT         = 0x8;
[22:50:25.336]        // -> [DP_SELECT <= 0x00000008]
[22:50:25.336]      __var powered_down      = 0;
[22:50:25.336]        // -> [powered_down <= 0x00000000]
[22:50:25.336]      WriteDP(DP_SELECT, 0x00000000);
[22:50:25.337]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:50:25.338]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:50:25.338]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:50:25.338]        // -> [powered_down <= 0x00000001]
[22:50:25.338]    </block>
[22:50:25.338]    <control if="powered_down" while="" timeout="0" info="">
[22:50:25.338]      // if-block "powered_down"
[22:50:25.338]        // =>  TRUE
[22:50:25.338]      <block atomic="false" info="">
[22:50:25.338]        Message(0, "Debug/System power-up request sent");
[22:50:25.340]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:50:25.340]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:50:25.340]      </block>
[22:50:25.340]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:50:25.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:50:25.340]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:50:25.340]        // while-condition  =>  FALSE
[22:50:25.340]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:50:25.340]      </control>
[22:50:25.340]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:50:25.342]        // if-block "(__protocol & 0xFFFF) == 1"
[22:50:25.342]          // =>  FALSE
[22:50:25.342]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:50:25.342]      </control>
[22:50:25.342]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:50:25.342]        // if-block "(__protocol & 0xFFFF) == 2"
[22:50:25.342]          // =>  TRUE
[22:50:25.342]        <block atomic="false" info="">
[22:50:25.342]          Message(0, "executing SWD power up");
[22:50:25.344]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:50:25.344]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:50:25.344]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:50:25.344]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:50:25.344]        </block>
[22:50:25.344]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:50:25.344]      </control>
[22:50:25.344]      // end if-block "powered_down"
[22:50:25.344]    </control>
[22:50:25.346]    <block atomic="false" info="">
[22:50:25.346]      __var DEBUG_PORT_VAL    = 0;
[22:50:25.346]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:50:25.346]      __var ACCESS_POINT_VAL  = 0;
[22:50:25.346]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:50:25.346]      __ap = 1; 
[22:50:25.346]        // -> [__ap <= 0x00000001]
[22:50:25.346]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:50:25.346]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:50:25.346]      __ap = 4;
[22:50:25.346]        // -> [__ap <= 0x00000004]
[22:50:25.346]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:50:25.350]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:50:25.350]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:50:25.350]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:50:25.351]    </block>
[22:50:25.351]    <block atomic="false" info="">
[22:50:25.351]      __var nReset = 0x80;
[22:50:25.351]        // -> [nReset <= 0x00000080]
[22:50:25.351]      __var canReadPins = 0;
[22:50:25.352]        // -> [canReadPins <= 0x00000000]
[22:50:25.352]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:50:25.352]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:50:25.352]        // -> [canReadPins <= 0x00000001]
[22:50:25.352]    </block>
[22:50:25.352]    <control if="" while="1" timeout="200" info="">
[22:50:25.352]      // while "1"  (timeout="200")
[22:50:25.352]      // while-condition  =>  TRUE
[22:50:25.352]      // while "1"  (timeout="200")
[22:50:25.352]      // while-condition  =>  TRUE
[22:50:25.352]      // while "1"  (timeout="200")
[22:50:25.352]      // while-condition  =>  TRUE
[22:50:25.352]      // while "1"  (timeout="200")
[22:50:25.352]      // while-condition  =>  TRUE
[22:50:25.354]      // while "1"  (timeout="200")
[22:50:25.354]      // while-condition  =>  TRUE
[22:50:25.354]      // while "1"  (timeout="200")
[22:50:25.354]      // while-condition  =>  TRUE
[22:50:25.354]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.355]      // while "1"  (timeout="200")
[22:50:25.355]      // while-condition  =>  TRUE
[22:50:25.360]      // while "1"  (timeout="200")
[22:50:25.360]      // while-condition  =>  TRUE
[22:50:25.360]      // while "1"  (timeout="200")
[22:50:25.360]      // while-condition  =>  TRUE
[22:50:25.360]      // while "1"  (timeout="200")
[22:50:25.360]      // while-condition  =>  TRUE
[22:50:25.360]      // while "1"  (timeout="200")
[22:50:25.360]      // while-condition  =>  TRUE
[22:50:25.360]      // while "1"  (timeout="200")
[22:50:25.360]      // while-condition  =>  TRUE
[22:50:25.360]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.361]      // while-condition  =>  TRUE
[22:50:25.361]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.364]      // while "1"  (timeout="200")
[22:50:25.364]      // while-condition  =>  TRUE
[22:50:25.370]      // while "1"  (timeout="200")
[22:50:25.370]      // while  =>  TIMEOUT
[22:50:25.370]      // end while "1"
[22:50:25.370]    </control>
[22:50:25.370]    <control if="canReadPins" while="" timeout="0" info="">
[22:50:25.370]      // if-block "canReadPins"
[22:50:25.370]        // =>  TRUE
[22:50:25.370]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:50:25.370]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:50:25.371]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:50:25.371]        // while-condition  =>  FALSE
[22:50:25.371]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:50:25.371]      </control>
[22:50:25.371]      // end if-block "canReadPins"
[22:50:25.371]    </control>
[22:50:25.371]    <control if="!canReadPins" while="" timeout="0" info="">
[22:50:25.371]      // if-block "!canReadPins"
[22:50:25.371]        // =>  FALSE
[22:50:25.371]      // skip if-block "!canReadPins"
[22:50:25.371]    </control>
[22:50:25.372]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:50:25.372]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:50:25.372]        // =>  TRUE
[22:50:25.372]      <block atomic="false" info="">
[22:50:25.372]        WriteAP(0x00, 0x190008);
[22:50:25.372]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:50:25.372]        WriteAP(0xF0, 0x01);
[22:50:25.372]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:50:25.372]      </block>
[22:50:25.372]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:50:25.374]    </control>
[22:50:25.374]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:50:25.374]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:50:25.374]        // =>  FALSE
[22:50:25.374]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:50:25.374]    </control>
[22:50:25.374]    <block atomic="false" info="">
[22:50:25.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:50:25.377]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:50:25.377]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:50:25.377]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:50:25.377]      __ap = 0; //lets make sure we reset the access point selection
[22:50:25.377]        // -> [__ap <= 0x00000000]
[22:50:25.377]    </block>
[22:50:25.377]  </sequence>
[22:50:25.377]  
[22:50:25.384]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:50:25.384]  
[22:50:25.385]  <debugvars>
[22:50:25.385]    // Pre-defined
[22:50:25.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:50:25.385]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:50:25.385]    __dp=0x00000000
[22:50:25.385]    __ap=0x00000000
[22:50:25.385]    __traceout=0x00000000      (Trace Disabled)
[22:50:25.385]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:50:25.385]    __FlashAddr=0x00000000
[22:50:25.385]    __FlashLen=0x00000000
[22:50:25.385]    __FlashArg=0x00000000
[22:50:25.385]    __FlashOp=0x00000000
[22:50:25.385]    __Result=0x00000000
[22:50:25.385]  </debugvars>
[22:50:25.385]  
[22:50:25.385]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:50:25.385]    <block atomic="false" info="">
[22:50:25.385]      __var deviceID = 0;
[22:50:25.385]        // -> [deviceID <= 0x00000000]
[22:50:25.385]      __var version = 0;
[22:50:25.385]        // -> [version <= 0x00000000]
[22:50:25.387]      __var partNum = 0;
[22:50:25.387]        // -> [partNum <= 0x00000000]
[22:50:25.387]      __var manuf = 0;
[22:50:25.387]        // -> [manuf <= 0x00000000]
[22:50:25.387]      __var isMSPM0G1X0X_G3X0X = 0;
[22:50:25.387]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:50:25.387]      __var isProduction = 0;
[22:50:25.387]        // -> [isProduction <= 0x00000000]
[22:50:25.387]      __var continueId = 0;
[22:50:25.387]        // -> [continueId <= 0x00000000]
[22:50:25.387]      deviceID =   Read32(0x41C40004);
[22:50:25.387]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:50:25.387]        // -> [deviceID <= 0x2BB8802F]
[22:50:25.387]      version = deviceID >> 28;
[22:50:25.387]        // -> [version <= 0x00000002]
[22:50:25.387]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:50:25.387]        // -> [partNum <= 0x0000BB88]
[22:50:25.390]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:50:25.390]        // -> [manuf <= 0x00000017]
[22:50:25.390]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:50:25.390]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:50:25.390]      isProduction = (version > 0);
[22:50:25.390]        // -> [isProduction <= 0x00000001]
[22:50:25.390]    </block>
[22:50:25.390]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:50:25.390]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:50:25.390]        // =>  FALSE
[22:50:25.390]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:50:25.390]    </control>
[22:50:25.390]    <control if="continueId == 4" while="" timeout="0" info="">
[22:50:25.392]      // if-block "continueId == 4"
[22:50:25.392]        // =>  FALSE
[22:50:25.392]      // skip if-block "continueId == 4"
[22:50:25.392]    </control>
[22:50:25.392]    <control if="!isProduction" while="" timeout="0" info="">
[22:50:25.392]      // if-block "!isProduction"
[22:50:25.392]        // =>  FALSE
[22:50:25.392]      // skip if-block "!isProduction"
[22:50:25.392]    </control>
[22:50:25.392]  </sequence>
[22:50:25.392]  
[22:52:41.980]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:52:41.980]  
[22:52:41.988]  <debugvars>
[22:52:41.988]    // Pre-defined
[22:52:41.988]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:41.988]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:52:41.988]    __dp=0x00000000
[22:52:41.988]    __ap=0x00000000
[22:52:41.988]    __traceout=0x00000000      (Trace Disabled)
[22:52:41.988]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:41.989]    __FlashAddr=0x00000000
[22:52:41.989]    __FlashLen=0x00000000
[22:52:41.989]    __FlashArg=0x00000000
[22:52:41.989]    __FlashOp=0x00000000
[22:52:41.989]    __Result=0x00000000
[22:52:41.989]  </debugvars>
[22:52:41.989]  
[22:52:41.989]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:52:41.989]    <block atomic="false" info="">
[22:52:41.989]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:52:41.989]        // -> [isSWJ <= 0x00000001]
[22:52:41.989]      __var hasDormant = __protocol & 0x00020000;
[22:52:41.989]        // -> [hasDormant <= 0x00000000]
[22:52:41.989]      __var protType   = __protocol & 0x0000FFFF;
[22:52:41.989]        // -> [protType <= 0x00000002]
[22:52:41.989]    </block>
[22:52:41.989]    <control if="protType == 1" while="" timeout="0" info="">
[22:52:41.989]      // if-block "protType == 1"
[22:52:41.989]        // =>  FALSE
[22:52:41.989]      // skip if-block "protType == 1"
[22:52:41.989]    </control>
[22:52:41.989]    <control if="protType == 2" while="" timeout="0" info="">
[22:52:41.989]      // if-block "protType == 2"
[22:52:41.989]        // =>  TRUE
[22:52:41.989]      <control if="isSWJ" while="" timeout="0" info="">
[22:52:41.989]        // if-block "isSWJ"
[22:52:41.989]          // =>  TRUE
[22:52:41.989]        <control if="hasDormant" while="" timeout="0" info="">
[22:52:41.989]          // if-block "hasDormant"
[22:52:41.989]            // =>  FALSE
[22:52:41.989]          // skip if-block "hasDormant"
[22:52:41.989]        </control>
[22:52:41.989]        <control if="!hasDormant" while="" timeout="0" info="">
[22:52:41.989]          // if-block "!hasDormant"
[22:52:41.989]            // =>  TRUE
[22:52:41.989]          <block atomic="false" info="">
[22:52:41.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:52:41.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:41.989]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:52:41.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:52:41.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:52:41.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:41.989]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:52:41.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:52:41.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:52:41.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:41.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:52:41.989]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:52:41.989]          </block>
[22:52:41.989]          // end if-block "!hasDormant"
[22:52:41.989]        </control>
[22:52:41.989]        // end if-block "isSWJ"
[22:52:41.989]      </control>
[22:52:41.989]      <control if="!isSWJ" while="" timeout="0" info="">
[22:52:41.989]        // if-block "!isSWJ"
[22:52:41.989]          // =>  FALSE
[22:52:41.989]        // skip if-block "!isSWJ"
[22:52:41.989]      </control>
[22:52:41.989]      <block atomic="false" info="">
[22:52:41.989]        ReadDP(0x0);
[22:52:41.989]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:52:41.989]      </block>
[22:52:41.997]      // end if-block "protType == 2"
[22:52:41.997]    </control>
[22:52:41.997]  </sequence>
[22:52:41.997]  
[22:52:41.998]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:52:41.998]  
[22:52:41.998]  <debugvars>
[22:52:41.998]    // Pre-defined
[22:52:41.998]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:41.998]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:52:41.998]    __dp=0x00000000
[22:52:41.998]    __ap=0x00000000
[22:52:41.998]    __traceout=0x00000000      (Trace Disabled)
[22:52:41.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:41.998]    __FlashAddr=0x00000000
[22:52:41.998]    __FlashLen=0x00000000
[22:52:41.998]    __FlashArg=0x00000000
[22:52:41.998]    __FlashOp=0x00000000
[22:52:41.998]    __Result=0x00000000
[22:52:41.998]  </debugvars>
[22:52:41.998]  
[22:52:41.998]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:52:41.998]    <block atomic="false" info="">
[22:52:41.998]      __var SW_DP_ABORT       = 0x0;
[22:52:41.998]        // -> [SW_DP_ABORT <= 0x00000000]
[22:52:41.998]      __var DP_CTRL_STAT      = 0x4;
[22:52:41.998]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:52:41.998]      __var DP_SELECT         = 0x8;
[22:52:41.998]        // -> [DP_SELECT <= 0x00000008]
[22:52:41.998]      __var powered_down      = 0;
[22:52:41.998]        // -> [powered_down <= 0x00000000]
[22:52:41.998]      WriteDP(DP_SELECT, 0x00000000);
[22:52:41.998]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:52:41.998]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:52:41.998]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:52:41.998]        // -> [powered_down <= 0x00000001]
[22:52:41.998]    </block>
[22:52:41.998]    <control if="powered_down" while="" timeout="0" info="">
[22:52:41.998]      // if-block "powered_down"
[22:52:41.998]        // =>  TRUE
[22:52:41.998]      <block atomic="false" info="">
[22:52:41.998]        Message(0, "Debug/System power-up request sent");
[22:52:41.998]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:52:41.998]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:52:41.998]      </block>
[22:52:41.998]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:52:41.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:41.998]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:52:41.998]        // while-condition  =>  FALSE
[22:52:41.998]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:52:41.998]      </control>
[22:52:41.998]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:52:41.998]        // if-block "(__protocol & 0xFFFF) == 1"
[22:52:41.998]          // =>  FALSE
[22:52:41.998]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:52:41.998]      </control>
[22:52:41.998]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:52:41.998]        // if-block "(__protocol & 0xFFFF) == 2"
[22:52:41.998]          // =>  TRUE
[22:52:41.998]        <block atomic="false" info="">
[22:52:41.998]          Message(0, "executing SWD power up");
[22:52:42.007]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:52:42.008]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:52:42.008]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:52:42.009]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:52:42.009]        </block>
[22:52:42.009]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:52:42.009]      </control>
[22:52:42.009]      // end if-block "powered_down"
[22:52:42.009]    </control>
[22:52:42.009]    <block atomic="false" info="">
[22:52:42.009]      __var DEBUG_PORT_VAL    = 0;
[22:52:42.009]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:52:42.009]      __var ACCESS_POINT_VAL  = 0;
[22:52:42.009]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:52:42.009]      __ap = 1; 
[22:52:42.009]        // -> [__ap <= 0x00000001]
[22:52:42.009]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:52:42.009]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:52:42.009]      __ap = 4;
[22:52:42.009]        // -> [__ap <= 0x00000004]
[22:52:42.009]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:52:42.009]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:52:42.009]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:52:42.009]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:52:42.009]    </block>
[22:52:42.009]    <block atomic="false" info="">
[22:52:42.009]      __var nReset = 0x80;
[22:52:42.009]        // -> [nReset <= 0x00000080]
[22:52:42.009]      __var canReadPins = 0;
[22:52:42.009]        // -> [canReadPins <= 0x00000000]
[22:52:42.009]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:52:42.009]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:52:42.009]        // -> [canReadPins <= 0x00000001]
[22:52:42.009]    </block>
[22:52:42.009]    <control if="" while="1" timeout="200" info="">
[22:52:42.009]      // while "1"  (timeout="200")
[22:52:42.017]      // while-condition  =>  TRUE
[22:52:42.017]      // while "1"  (timeout="200")
[22:52:42.017]      // while-condition  =>  TRUE
[22:52:42.017]      // while "1"  (timeout="200")
[22:52:42.017]      // while-condition  =>  TRUE
[22:52:42.017]      // while "1"  (timeout="200")
[22:52:42.017]      // while-condition  =>  TRUE
[22:52:42.017]      // while "1"  (timeout="200")
[22:52:42.017]      // while-condition  =>  TRUE
[22:52:42.017]      // while "1"  (timeout="200")
[22:52:42.017]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.018]      // while "1"  (timeout="200")
[22:52:42.018]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.021]      // while "1"  (timeout="200")
[22:52:42.021]      // while-condition  =>  TRUE
[22:52:42.027]      // while "1"  (timeout="200")
[22:52:42.027]      // while  =>  TIMEOUT
[22:52:42.027]      // end while "1"
[22:52:42.027]    </control>
[22:52:42.028]    <control if="canReadPins" while="" timeout="0" info="">
[22:52:42.028]      // if-block "canReadPins"
[22:52:42.028]        // =>  TRUE
[22:52:42.028]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:52:42.028]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:52:42.028]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:52:42.028]        // while-condition  =>  FALSE
[22:52:42.028]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:52:42.028]      </control>
[22:52:42.028]      // end if-block "canReadPins"
[22:52:42.028]    </control>
[22:52:42.028]    <control if="!canReadPins" while="" timeout="0" info="">
[22:52:42.028]      // if-block "!canReadPins"
[22:52:42.028]        // =>  FALSE
[22:52:42.028]      // skip if-block "!canReadPins"
[22:52:42.028]    </control>
[22:52:42.028]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:52:42.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:52:42.028]        // =>  TRUE
[22:52:42.028]      <block atomic="false" info="">
[22:52:42.028]        WriteAP(0x00, 0x190008);
[22:52:42.031]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:52:42.031]        WriteAP(0xF0, 0x01);
[22:52:42.031]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:52:42.031]      </block>
[22:52:42.031]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:52:42.031]    </control>
[22:52:42.031]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:52:42.031]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:52:42.031]        // =>  FALSE
[22:52:42.031]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:52:42.031]    </control>
[22:52:42.031]    <block atomic="false" info="">
[22:52:42.031]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:52:42.031]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:52:42.031]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:52:42.031]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:52:42.031]      __ap = 0; //lets make sure we reset the access point selection
[22:52:42.031]        // -> [__ap <= 0x00000000]
[22:52:42.031]    </block>
[22:52:42.031]  </sequence>
[22:52:42.031]  
[22:52:42.039]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:52:42.039]  
[22:52:42.039]  <debugvars>
[22:52:42.039]    // Pre-defined
[22:52:42.039]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:42.039]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:52:42.039]    __dp=0x00000000
[22:52:42.039]    __ap=0x00000000
[22:52:42.039]    __traceout=0x00000000      (Trace Disabled)
[22:52:42.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:42.039]    __FlashAddr=0x00000000
[22:52:42.039]    __FlashLen=0x00000000
[22:52:42.039]    __FlashArg=0x00000000
[22:52:42.039]    __FlashOp=0x00000000
[22:52:42.039]    __Result=0x00000000
[22:52:42.039]  </debugvars>
[22:52:42.039]  
[22:52:42.039]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:52:42.039]    <block atomic="false" info="">
[22:52:42.039]      __var deviceID = 0;
[22:52:42.039]        // -> [deviceID <= 0x00000000]
[22:52:42.039]      __var version = 0;
[22:52:42.039]        // -> [version <= 0x00000000]
[22:52:42.039]      __var partNum = 0;
[22:52:42.039]        // -> [partNum <= 0x00000000]
[22:52:42.039]      __var manuf = 0;
[22:52:42.039]        // -> [manuf <= 0x00000000]
[22:52:42.039]      __var isMSPM0G1X0X_G3X0X = 0;
[22:52:42.039]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:52:42.039]      __var isProduction = 0;
[22:52:42.039]        // -> [isProduction <= 0x00000000]
[22:52:42.039]      __var continueId = 0;
[22:52:42.039]        // -> [continueId <= 0x00000000]
[22:52:42.039]      deviceID =   Read32(0x41C40004);
[22:52:42.047]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:52:42.047]        // -> [deviceID <= 0x2BB8802F]
[22:52:42.047]      version = deviceID >> 28;
[22:52:42.048]        // -> [version <= 0x00000002]
[22:52:42.048]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:52:42.048]        // -> [partNum <= 0x0000BB88]
[22:52:42.048]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:52:42.048]        // -> [manuf <= 0x00000017]
[22:52:42.048]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:52:42.049]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:52:42.049]      isProduction = (version > 0);
[22:52:42.049]        // -> [isProduction <= 0x00000001]
[22:52:42.049]    </block>
[22:52:42.049]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:52:42.049]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:52:42.049]        // =>  FALSE
[22:52:42.049]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:52:42.049]    </control>
[22:52:42.049]    <control if="continueId == 4" while="" timeout="0" info="">
[22:52:42.049]      // if-block "continueId == 4"
[22:52:42.049]        // =>  FALSE
[22:52:42.049]      // skip if-block "continueId == 4"
[22:52:42.049]    </control>
[22:52:42.049]    <control if="!isProduction" while="" timeout="0" info="">
[22:52:42.049]      // if-block "!isProduction"
[22:52:42.049]        // =>  FALSE
[22:52:42.049]      // skip if-block "!isProduction"
[22:52:42.049]    </control>
[22:52:42.049]  </sequence>
[22:52:42.049]  
[23:09:22.218]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:09:22.218]  
[23:09:22.228]  <debugvars>
[23:09:22.228]    // Pre-defined
[23:09:22.228]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:22.228]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:09:22.228]    __dp=0x00000000
[23:09:22.228]    __ap=0x00000000
[23:09:22.228]    __traceout=0x00000000      (Trace Disabled)
[23:09:22.228]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:22.228]    __FlashAddr=0x00000000
[23:09:22.228]    __FlashLen=0x00000000
[23:09:22.228]    __FlashArg=0x00000000
[23:09:22.228]    __FlashOp=0x00000000
[23:09:22.228]    __Result=0x00000000
[23:09:22.228]  </debugvars>
[23:09:22.228]  
[23:09:22.228]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:09:22.228]    <block atomic="false" info="">
[23:09:22.228]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:09:22.228]        // -> [isSWJ <= 0x00000001]
[23:09:22.228]      __var hasDormant = __protocol & 0x00020000;
[23:09:22.228]        // -> [hasDormant <= 0x00000000]
[23:09:22.228]      __var protType   = __protocol & 0x0000FFFF;
[23:09:22.228]        // -> [protType <= 0x00000002]
[23:09:22.228]    </block>
[23:09:22.228]    <control if="protType == 1" while="" timeout="0" info="">
[23:09:22.228]      // if-block "protType == 1"
[23:09:22.228]        // =>  FALSE
[23:09:22.228]      // skip if-block "protType == 1"
[23:09:22.228]    </control>
[23:09:22.228]    <control if="protType == 2" while="" timeout="0" info="">
[23:09:22.228]      // if-block "protType == 2"
[23:09:22.228]        // =>  TRUE
[23:09:22.228]      <control if="isSWJ" while="" timeout="0" info="">
[23:09:22.228]        // if-block "isSWJ"
[23:09:22.228]          // =>  TRUE
[23:09:22.228]        <control if="hasDormant" while="" timeout="0" info="">
[23:09:22.228]          // if-block "hasDormant"
[23:09:22.228]            // =>  FALSE
[23:09:22.228]          // skip if-block "hasDormant"
[23:09:22.228]        </control>
[23:09:22.228]        <control if="!hasDormant" while="" timeout="0" info="">
[23:09:22.228]          // if-block "!hasDormant"
[23:09:22.228]            // =>  TRUE
[23:09:22.228]          <block atomic="false" info="">
[23:09:22.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:09:22.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:22.228]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:09:22.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:09:22.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:09:22.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:22.228]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:09:22.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:09:22.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:09:22.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:22.235]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:09:22.235]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:09:22.235]          </block>
[23:09:22.235]          // end if-block "!hasDormant"
[23:09:22.235]        </control>
[23:09:22.235]        // end if-block "isSWJ"
[23:09:22.236]      </control>
[23:09:22.236]      <control if="!isSWJ" while="" timeout="0" info="">
[23:09:22.236]        // if-block "!isSWJ"
[23:09:22.236]          // =>  FALSE
[23:09:22.236]        // skip if-block "!isSWJ"
[23:09:22.236]      </control>
[23:09:22.236]      <block atomic="false" info="">
[23:09:22.236]        ReadDP(0x0);
[23:09:22.236]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:09:22.236]      </block>
[23:09:22.236]      // end if-block "protType == 2"
[23:09:22.236]    </control>
[23:09:22.236]  </sequence>
[23:09:22.236]  
[23:09:22.238]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:09:22.238]  
[23:09:22.238]  <debugvars>
[23:09:22.238]    // Pre-defined
[23:09:22.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:22.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:09:22.238]    __dp=0x00000000
[23:09:22.238]    __ap=0x00000000
[23:09:22.238]    __traceout=0x00000000      (Trace Disabled)
[23:09:22.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:22.238]    __FlashAddr=0x00000000
[23:09:22.238]    __FlashLen=0x00000000
[23:09:22.239]    __FlashArg=0x00000000
[23:09:22.239]    __FlashOp=0x00000000
[23:09:22.239]    __Result=0x00000000
[23:09:22.239]  </debugvars>
[23:09:22.239]  
[23:09:22.239]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:09:22.239]    <block atomic="false" info="">
[23:09:22.239]      __var SW_DP_ABORT       = 0x0;
[23:09:22.239]        // -> [SW_DP_ABORT <= 0x00000000]
[23:09:22.241]      __var DP_CTRL_STAT      = 0x4;
[23:09:22.241]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:09:22.241]      __var DP_SELECT         = 0x8;
[23:09:22.241]        // -> [DP_SELECT <= 0x00000008]
[23:09:22.241]      __var powered_down      = 0;
[23:09:22.241]        // -> [powered_down <= 0x00000000]
[23:09:22.241]      WriteDP(DP_SELECT, 0x00000000);
[23:09:22.242]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:09:22.242]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:09:22.242]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:09:22.242]        // -> [powered_down <= 0x00000001]
[23:09:22.242]    </block>
[23:09:22.242]    <control if="powered_down" while="" timeout="0" info="">
[23:09:22.242]      // if-block "powered_down"
[23:09:22.242]        // =>  TRUE
[23:09:22.242]      <block atomic="false" info="">
[23:09:22.243]        Message(0, "Debug/System power-up request sent");
[23:09:22.247]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:09:22.247]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:09:22.247]      </block>
[23:09:22.247]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:09:22.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:09:22.248]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:09:22.248]        // while-condition  =>  FALSE
[23:09:22.248]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:09:22.248]      </control>
[23:09:22.248]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:09:22.248]        // if-block "(__protocol & 0xFFFF) == 1"
[23:09:22.248]          // =>  FALSE
[23:09:22.248]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:09:22.248]      </control>
[23:09:22.248]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:09:22.248]        // if-block "(__protocol & 0xFFFF) == 2"
[23:09:22.248]          // =>  TRUE
[23:09:22.248]        <block atomic="false" info="">
[23:09:22.248]          Message(0, "executing SWD power up");
[23:09:22.250]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:09:22.250]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:09:22.250]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:09:22.250]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:09:22.250]        </block>
[23:09:22.250]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:09:22.250]      </control>
[23:09:22.250]      // end if-block "powered_down"
[23:09:22.250]    </control>
[23:09:22.250]    <block atomic="false" info="">
[23:09:22.250]      __var DEBUG_PORT_VAL    = 0;
[23:09:22.250]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:09:22.250]      __var ACCESS_POINT_VAL  = 0;
[23:09:22.250]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:09:22.250]      __ap = 1; 
[23:09:22.250]        // -> [__ap <= 0x00000001]
[23:09:22.250]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:09:22.255]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:09:22.255]      __ap = 4;
[23:09:22.255]        // -> [__ap <= 0x00000004]
[23:09:22.256]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:09:22.256]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:09:22.256]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:09:22.256]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:09:22.259]    </block>
[23:09:22.259]    <block atomic="false" info="">
[23:09:22.259]      __var nReset = 0x80;
[23:09:22.259]        // -> [nReset <= 0x00000080]
[23:09:22.259]      __var canReadPins = 0;
[23:09:22.259]        // -> [canReadPins <= 0x00000000]
[23:09:22.259]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:09:22.259]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:09:22.259]        // -> [canReadPins <= 0x00000001]
[23:09:22.259]    </block>
[23:09:22.259]    <control if="" while="1" timeout="200" info="">
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.259]      // while "1"  (timeout="200")
[23:09:22.259]      // while-condition  =>  TRUE
[23:09:22.265]      // while "1"  (timeout="200")
[23:09:22.265]      // while-condition  =>  TRUE
[23:09:22.265]      // while "1"  (timeout="200")
[23:09:22.265]      // while-condition  =>  TRUE
[23:09:22.265]      // while "1"  (timeout="200")
[23:09:22.265]      // while-condition  =>  TRUE
[23:09:22.265]      // while "1"  (timeout="200")
[23:09:22.265]      // while-condition  =>  TRUE
[23:09:22.265]      // while "1"  (timeout="200")
[23:09:22.265]      // while-condition  =>  TRUE
[23:09:22.266]      // while "1"  (timeout="200")
[23:09:22.266]      // while-condition  =>  TRUE
[23:09:22.266]      // while "1"  (timeout="200")
[23:09:22.266]      // while-condition  =>  TRUE
[23:09:22.266]      // while "1"  (timeout="200")
[23:09:22.266]      // while-condition  =>  TRUE
[23:09:22.266]      // while "1"  (timeout="200")
[23:09:22.266]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.267]      // while "1"  (timeout="200")
[23:09:22.267]      // while-condition  =>  TRUE
[23:09:22.274]      // while "1"  (timeout="200")
[23:09:22.274]      // while  =>  TIMEOUT
[23:09:22.274]      // end while "1"
[23:09:22.274]    </control>
[23:09:22.274]    <control if="canReadPins" while="" timeout="0" info="">
[23:09:22.274]      // if-block "canReadPins"
[23:09:22.274]        // =>  TRUE
[23:09:22.274]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:09:22.274]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:09:22.275]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:09:22.275]        // while-condition  =>  FALSE
[23:09:22.275]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:09:22.275]      </control>
[23:09:22.275]      // end if-block "canReadPins"
[23:09:22.275]    </control>
[23:09:22.275]    <control if="!canReadPins" while="" timeout="0" info="">
[23:09:22.275]      // if-block "!canReadPins"
[23:09:22.275]        // =>  FALSE
[23:09:22.275]      // skip if-block "!canReadPins"
[23:09:22.275]    </control>
[23:09:22.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:09:22.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:09:22.275]        // =>  TRUE
[23:09:22.275]      <block atomic="false" info="">
[23:09:22.275]        WriteAP(0x00, 0x190008);
[23:09:22.275]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:09:22.275]        WriteAP(0xF0, 0x01);
[23:09:22.275]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:09:22.275]      </block>
[23:09:22.275]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:09:22.275]    </control>
[23:09:22.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:09:22.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:09:22.275]        // =>  FALSE
[23:09:22.275]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:09:22.275]    </control>
[23:09:22.275]    <block atomic="false" info="">
[23:09:22.275]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:09:22.275]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:09:22.275]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:09:22.275]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:09:22.275]      __ap = 0; //lets make sure we reset the access point selection
[23:09:22.275]        // -> [__ap <= 0x00000000]
[23:09:22.275]    </block>
[23:09:22.275]  </sequence>
[23:09:22.275]  
[23:09:22.289]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:09:22.289]  
[23:09:22.289]  <debugvars>
[23:09:22.289]    // Pre-defined
[23:09:22.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:22.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:09:22.289]    __dp=0x00000000
[23:09:22.289]    __ap=0x00000000
[23:09:22.289]    __traceout=0x00000000      (Trace Disabled)
[23:09:22.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:22.289]    __FlashAddr=0x00000000
[23:09:22.289]    __FlashLen=0x00000000
[23:09:22.291]    __FlashArg=0x00000000
[23:09:22.291]    __FlashOp=0x00000000
[23:09:22.291]    __Result=0x00000000
[23:09:22.291]  </debugvars>
[23:09:22.291]  
[23:09:22.291]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:09:22.291]    <block atomic="false" info="">
[23:09:22.291]      __var deviceID = 0;
[23:09:22.291]        // -> [deviceID <= 0x00000000]
[23:09:22.292]      __var version = 0;
[23:09:22.292]        // -> [version <= 0x00000000]
[23:09:22.292]      __var partNum = 0;
[23:09:22.292]        // -> [partNum <= 0x00000000]
[23:09:22.292]      __var manuf = 0;
[23:09:22.292]        // -> [manuf <= 0x00000000]
[23:09:22.292]      __var isMSPM0G1X0X_G3X0X = 0;
[23:09:22.292]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:09:22.292]      __var isProduction = 0;
[23:09:22.292]        // -> [isProduction <= 0x00000000]
[23:09:22.292]      __var continueId = 0;
[23:09:22.294]        // -> [continueId <= 0x00000000]
[23:09:22.294]      deviceID =   Read32(0x41C40004);
[23:09:22.295]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:09:22.295]        // -> [deviceID <= 0x2BB8802F]
[23:09:22.295]      version = deviceID >> 28;
[23:09:22.295]        // -> [version <= 0x00000002]
[23:09:22.295]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:09:22.295]        // -> [partNum <= 0x0000BB88]
[23:09:22.295]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:09:22.295]        // -> [manuf <= 0x00000017]
[23:09:22.295]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:09:22.295]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:09:22.295]      isProduction = (version > 0);
[23:09:22.295]        // -> [isProduction <= 0x00000001]
[23:09:22.295]    </block>
[23:09:22.295]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:09:22.295]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:09:22.298]        // =>  FALSE
[23:09:22.298]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:09:22.298]    </control>
[23:09:22.298]    <control if="continueId == 4" while="" timeout="0" info="">
[23:09:22.298]      // if-block "continueId == 4"
[23:09:22.298]        // =>  FALSE
[23:09:22.298]      // skip if-block "continueId == 4"
[23:09:22.298]    </control>
[23:09:22.298]    <control if="!isProduction" while="" timeout="0" info="">
[23:09:22.298]      // if-block "!isProduction"
[23:09:22.299]        // =>  FALSE
[23:09:22.299]      // skip if-block "!isProduction"
[23:09:22.299]    </control>
[23:09:22.299]  </sequence>
[23:09:22.299]  
[23:09:25.701]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:09:25.701]  
[23:09:25.710]  <debugvars>
[23:09:25.710]    // Pre-defined
[23:09:25.710]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:25.710]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:09:25.710]    __dp=0x00000000
[23:09:25.710]    __ap=0x00000000
[23:09:25.710]    __traceout=0x00000000      (Trace Disabled)
[23:09:25.710]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:25.710]    __FlashAddr=0x00000000
[23:09:25.710]    __FlashLen=0x00000000
[23:09:25.710]    __FlashArg=0x00000000
[23:09:25.710]    __FlashOp=0x00000000
[23:09:25.710]    __Result=0x00000000
[23:09:25.710]  </debugvars>
[23:09:25.710]  
[23:09:25.710]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:09:25.710]    <block atomic="false" info="">
[23:09:25.710]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:09:25.710]        // -> [isSWJ <= 0x00000001]
[23:09:25.710]      __var hasDormant = __protocol & 0x00020000;
[23:09:25.710]        // -> [hasDormant <= 0x00000000]
[23:09:25.710]      __var protType   = __protocol & 0x0000FFFF;
[23:09:25.710]        // -> [protType <= 0x00000002]
[23:09:25.710]    </block>
[23:09:25.710]    <control if="protType == 1" while="" timeout="0" info="">
[23:09:25.710]      // if-block "protType == 1"
[23:09:25.710]        // =>  FALSE
[23:09:25.710]      // skip if-block "protType == 1"
[23:09:25.710]    </control>
[23:09:25.710]    <control if="protType == 2" while="" timeout="0" info="">
[23:09:25.710]      // if-block "protType == 2"
[23:09:25.710]        // =>  TRUE
[23:09:25.710]      <control if="isSWJ" while="" timeout="0" info="">
[23:09:25.710]        // if-block "isSWJ"
[23:09:25.710]          // =>  TRUE
[23:09:25.710]        <control if="hasDormant" while="" timeout="0" info="">
[23:09:25.710]          // if-block "hasDormant"
[23:09:25.715]            // =>  FALSE
[23:09:25.715]          // skip if-block "hasDormant"
[23:09:25.715]        </control>
[23:09:25.715]        <control if="!hasDormant" while="" timeout="0" info="">
[23:09:25.715]          // if-block "!hasDormant"
[23:09:25.715]            // =>  TRUE
[23:09:25.715]          <block atomic="false" info="">
[23:09:25.715]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:09:25.715]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:25.715]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:09:25.715]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:09:25.715]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:09:25.715]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:25.715]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:09:25.715]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:09:25.715]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:09:25.715]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:25.715]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:09:25.715]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:09:25.715]          </block>
[23:09:25.715]          // end if-block "!hasDormant"
[23:09:25.715]        </control>
[23:09:25.715]        // end if-block "isSWJ"
[23:09:25.715]      </control>
[23:09:25.715]      <control if="!isSWJ" while="" timeout="0" info="">
[23:09:25.715]        // if-block "!isSWJ"
[23:09:25.715]          // =>  FALSE
[23:09:25.715]        // skip if-block "!isSWJ"
[23:09:25.715]      </control>
[23:09:25.715]      <block atomic="false" info="">
[23:09:25.715]        ReadDP(0x0);
[23:09:25.715]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:09:25.715]      </block>
[23:09:25.715]      // end if-block "protType == 2"
[23:09:25.715]    </control>
[23:09:25.715]  </sequence>
[23:09:25.715]  
[23:09:25.715]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:09:25.715]  
[23:09:25.715]  <debugvars>
[23:09:25.715]    // Pre-defined
[23:09:25.715]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:25.715]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:09:25.715]    __dp=0x00000000
[23:09:25.715]    __ap=0x00000000
[23:09:25.715]    __traceout=0x00000000      (Trace Disabled)
[23:09:25.715]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:25.715]    __FlashAddr=0x00000000
[23:09:25.715]    __FlashLen=0x00000000
[23:09:25.715]    __FlashArg=0x00000000
[23:09:25.715]    __FlashOp=0x00000000
[23:09:25.715]    __Result=0x00000000
[23:09:25.715]  </debugvars>
[23:09:25.715]  
[23:09:25.715]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:09:25.715]    <block atomic="false" info="">
[23:09:25.715]      __var SW_DP_ABORT       = 0x0;
[23:09:25.715]        // -> [SW_DP_ABORT <= 0x00000000]
[23:09:25.715]      __var DP_CTRL_STAT      = 0x4;
[23:09:25.715]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:09:25.715]      __var DP_SELECT         = 0x8;
[23:09:25.715]        // -> [DP_SELECT <= 0x00000008]
[23:09:25.715]      __var powered_down      = 0;
[23:09:25.715]        // -> [powered_down <= 0x00000000]
[23:09:25.715]      WriteDP(DP_SELECT, 0x00000000);
[23:09:25.715]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:09:25.725]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:09:25.725]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:09:25.725]        // -> [powered_down <= 0x00000001]
[23:09:25.725]    </block>
[23:09:25.725]    <control if="powered_down" while="" timeout="0" info="">
[23:09:25.725]      // if-block "powered_down"
[23:09:25.725]        // =>  TRUE
[23:09:25.725]      <block atomic="false" info="">
[23:09:25.726]        Message(0, "Debug/System power-up request sent");
[23:09:25.728]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:09:25.728]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:09:25.728]      </block>
[23:09:25.728]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:09:25.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:09:25.728]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:09:25.728]        // while-condition  =>  FALSE
[23:09:25.728]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:09:25.728]      </control>
[23:09:25.728]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:09:25.728]        // if-block "(__protocol & 0xFFFF) == 1"
[23:09:25.728]          // =>  FALSE
[23:09:25.728]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:09:25.728]      </control>
[23:09:25.728]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:09:25.728]        // if-block "(__protocol & 0xFFFF) == 2"
[23:09:25.728]          // =>  TRUE
[23:09:25.728]        <block atomic="false" info="">
[23:09:25.728]          Message(0, "executing SWD power up");
[23:09:25.728]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:09:25.728]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:09:25.728]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:09:25.735]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:09:25.735]        </block>
[23:09:25.735]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:09:25.735]      </control>
[23:09:25.735]      // end if-block "powered_down"
[23:09:25.735]    </control>
[23:09:25.735]    <block atomic="false" info="">
[23:09:25.735]      __var DEBUG_PORT_VAL    = 0;
[23:09:25.736]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:09:25.736]      __var ACCESS_POINT_VAL  = 0;
[23:09:25.736]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:09:25.736]      __ap = 1; 
[23:09:25.736]        // -> [__ap <= 0x00000001]
[23:09:25.736]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:09:25.736]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:09:25.736]      __ap = 4;
[23:09:25.736]        // -> [__ap <= 0x00000004]
[23:09:25.736]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:09:25.736]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:09:25.736]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:09:25.736]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:09:25.736]    </block>
[23:09:25.736]    <block atomic="false" info="">
[23:09:25.736]      __var nReset = 0x80;
[23:09:25.736]        // -> [nReset <= 0x00000080]
[23:09:25.736]      __var canReadPins = 0;
[23:09:25.736]        // -> [canReadPins <= 0x00000000]
[23:09:25.736]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:09:25.736]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:09:25.736]        // -> [canReadPins <= 0x00000001]
[23:09:25.736]    </block>
[23:09:25.736]    <control if="" while="1" timeout="200" info="">
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.736]      // while "1"  (timeout="200")
[23:09:25.736]      // while-condition  =>  TRUE
[23:09:25.745]      // while "1"  (timeout="200")
[23:09:25.745]      // while  =>  TIMEOUT
[23:09:25.745]      // end while "1"
[23:09:25.745]    </control>
[23:09:25.745]    <control if="canReadPins" while="" timeout="0" info="">
[23:09:25.745]      // if-block "canReadPins"
[23:09:25.745]        // =>  TRUE
[23:09:25.745]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:09:25.745]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:09:25.745]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:09:25.745]        // while-condition  =>  FALSE
[23:09:25.745]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:09:25.746]      </control>
[23:09:25.746]      // end if-block "canReadPins"
[23:09:25.747]    </control>
[23:09:25.747]    <control if="!canReadPins" while="" timeout="0" info="">
[23:09:25.747]      // if-block "!canReadPins"
[23:09:25.747]        // =>  FALSE
[23:09:25.747]      // skip if-block "!canReadPins"
[23:09:25.747]    </control>
[23:09:25.747]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:09:25.747]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:09:25.747]        // =>  TRUE
[23:09:25.747]      <block atomic="false" info="">
[23:09:25.747]        WriteAP(0x00, 0x190008);
[23:09:25.748]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:09:25.748]        WriteAP(0xF0, 0x01);
[23:09:25.750]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:09:25.750]      </block>
[23:09:25.750]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:09:25.750]    </control>
[23:09:25.750]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:09:25.750]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:09:25.750]        // =>  FALSE
[23:09:25.750]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:09:25.750]    </control>
[23:09:25.750]    <block atomic="false" info="">
[23:09:25.750]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:09:25.750]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:09:25.750]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:09:25.750]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:09:25.752]      __ap = 0; //lets make sure we reset the access point selection
[23:09:25.752]        // -> [__ap <= 0x00000000]
[23:09:25.752]    </block>
[23:09:25.752]  </sequence>
[23:09:25.752]  
[23:09:25.756]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:09:25.756]  
[23:09:25.756]  <debugvars>
[23:09:25.756]    // Pre-defined
[23:09:25.756]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:25.756]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:09:25.756]    __dp=0x00000000
[23:09:25.756]    __ap=0x00000000
[23:09:25.756]    __traceout=0x00000000      (Trace Disabled)
[23:09:25.756]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:25.756]    __FlashAddr=0x00000000
[23:09:25.756]    __FlashLen=0x00000000
[23:09:25.756]    __FlashArg=0x00000000
[23:09:25.756]    __FlashOp=0x00000000
[23:09:25.756]    __Result=0x00000000
[23:09:25.756]  </debugvars>
[23:09:25.756]  
[23:09:25.756]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:09:25.756]    <block atomic="false" info="">
[23:09:25.756]      __var deviceID = 0;
[23:09:25.756]        // -> [deviceID <= 0x00000000]
[23:09:25.756]      __var version = 0;
[23:09:25.756]        // -> [version <= 0x00000000]
[23:09:25.756]      __var partNum = 0;
[23:09:25.756]        // -> [partNum <= 0x00000000]
[23:09:25.756]      __var manuf = 0;
[23:09:25.756]        // -> [manuf <= 0x00000000]
[23:09:25.756]      __var isMSPM0G1X0X_G3X0X = 0;
[23:09:25.756]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:09:25.756]      __var isProduction = 0;
[23:09:25.756]        // -> [isProduction <= 0x00000000]
[23:09:25.756]      __var continueId = 0;
[23:09:25.756]        // -> [continueId <= 0x00000000]
[23:09:25.756]      deviceID =   Read32(0x41C40004);
[23:09:25.756]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:09:25.756]        // -> [deviceID <= 0x2BB8802F]
[23:09:25.765]      version = deviceID >> 28;
[23:09:25.765]        // -> [version <= 0x00000002]
[23:09:25.765]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:09:25.765]        // -> [partNum <= 0x0000BB88]
[23:09:25.765]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:09:25.765]        // -> [manuf <= 0x00000017]
[23:09:25.765]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:09:25.765]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:09:25.765]      isProduction = (version > 0);
[23:09:25.765]        // -> [isProduction <= 0x00000001]
[23:09:25.765]    </block>
[23:09:25.765]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:09:25.766]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:09:25.766]        // =>  FALSE
[23:09:25.766]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:09:25.766]    </control>
[23:09:25.766]    <control if="continueId == 4" while="" timeout="0" info="">
[23:09:25.766]      // if-block "continueId == 4"
[23:09:25.766]        // =>  FALSE
[23:09:25.766]      // skip if-block "continueId == 4"
[23:09:25.766]    </control>
[23:09:25.766]    <control if="!isProduction" while="" timeout="0" info="">
[23:09:25.766]      // if-block "!isProduction"
[23:09:25.766]        // =>  FALSE
[23:09:25.766]      // skip if-block "!isProduction"
[23:09:25.766]    </control>
[23:09:25.766]  </sequence>
[23:09:25.766]  
[23:10:35.721]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:10:35.721]  
[23:10:35.731]  <debugvars>
[23:10:35.731]    // Pre-defined
[23:10:35.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:35.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:35.732]    __dp=0x00000000
[23:10:35.732]    __ap=0x00000000
[23:10:35.732]    __traceout=0x00000000      (Trace Disabled)
[23:10:35.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:35.732]    __FlashAddr=0x00000000
[23:10:35.732]    __FlashLen=0x00000000
[23:10:35.732]    __FlashArg=0x00000000
[23:10:35.732]    __FlashOp=0x00000000
[23:10:35.732]    __Result=0x00000000
[23:10:35.732]  </debugvars>
[23:10:35.732]  
[23:10:35.732]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:10:35.732]    <block atomic="false" info="">
[23:10:35.732]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:10:35.732]        // -> [isSWJ <= 0x00000001]
[23:10:35.733]      __var hasDormant = __protocol & 0x00020000;
[23:10:35.733]        // -> [hasDormant <= 0x00000000]
[23:10:35.733]      __var protType   = __protocol & 0x0000FFFF;
[23:10:35.733]        // -> [protType <= 0x00000002]
[23:10:35.733]    </block>
[23:10:35.733]    <control if="protType == 1" while="" timeout="0" info="">
[23:10:35.733]      // if-block "protType == 1"
[23:10:35.733]        // =>  FALSE
[23:10:35.733]      // skip if-block "protType == 1"
[23:10:35.733]    </control>
[23:10:35.733]    <control if="protType == 2" while="" timeout="0" info="">
[23:10:35.733]      // if-block "protType == 2"
[23:10:35.733]        // =>  TRUE
[23:10:35.733]      <control if="isSWJ" while="" timeout="0" info="">
[23:10:35.733]        // if-block "isSWJ"
[23:10:35.735]          // =>  TRUE
[23:10:35.735]        <control if="hasDormant" while="" timeout="0" info="">
[23:10:35.735]          // if-block "hasDormant"
[23:10:35.735]            // =>  FALSE
[23:10:35.735]          // skip if-block "hasDormant"
[23:10:35.735]        </control>
[23:10:35.735]        <control if="!hasDormant" while="" timeout="0" info="">
[23:10:35.735]          // if-block "!hasDormant"
[23:10:35.735]            // =>  TRUE
[23:10:35.735]          <block atomic="false" info="">
[23:10:35.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:10:35.735]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:35.735]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:10:35.735]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:10:35.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:10:35.735]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:35.735]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:10:35.735]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:10:35.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:10:35.735]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:35.735]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:10:35.735]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:10:35.735]          </block>
[23:10:35.735]          // end if-block "!hasDormant"
[23:10:35.735]        </control>
[23:10:35.735]        // end if-block "isSWJ"
[23:10:35.735]      </control>
[23:10:35.735]      <control if="!isSWJ" while="" timeout="0" info="">
[23:10:35.735]        // if-block "!isSWJ"
[23:10:35.735]          // =>  FALSE
[23:10:35.735]        // skip if-block "!isSWJ"
[23:10:35.741]      </control>
[23:10:35.741]      <block atomic="false" info="">
[23:10:35.741]        ReadDP(0x0);
[23:10:35.741]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:10:35.742]      </block>
[23:10:35.742]      // end if-block "protType == 2"
[23:10:35.742]    </control>
[23:10:35.742]  </sequence>
[23:10:35.742]  
[23:10:35.743]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:10:35.743]  
[23:10:35.743]  <debugvars>
[23:10:35.743]    // Pre-defined
[23:10:35.743]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:35.743]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:35.743]    __dp=0x00000000
[23:10:35.743]    __ap=0x00000000
[23:10:35.743]    __traceout=0x00000000      (Trace Disabled)
[23:10:35.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:35.744]    __FlashAddr=0x00000000
[23:10:35.744]    __FlashLen=0x00000000
[23:10:35.744]    __FlashArg=0x00000000
[23:10:35.744]    __FlashOp=0x00000000
[23:10:35.744]    __Result=0x00000000
[23:10:35.744]  </debugvars>
[23:10:35.744]  
[23:10:35.744]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:10:35.744]    <block atomic="false" info="">
[23:10:35.744]      __var SW_DP_ABORT       = 0x0;
[23:10:35.744]        // -> [SW_DP_ABORT <= 0x00000000]
[23:10:35.744]      __var DP_CTRL_STAT      = 0x4;
[23:10:35.744]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:10:35.744]      __var DP_SELECT         = 0x8;
[23:10:35.744]        // -> [DP_SELECT <= 0x00000008]
[23:10:35.744]      __var powered_down      = 0;
[23:10:35.744]        // -> [powered_down <= 0x00000000]
[23:10:35.744]      WriteDP(DP_SELECT, 0x00000000);
[23:10:35.746]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:10:35.746]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:10:35.746]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:10:35.746]        // -> [powered_down <= 0x00000001]
[23:10:35.746]    </block>
[23:10:35.746]    <control if="powered_down" while="" timeout="0" info="">
[23:10:35.746]      // if-block "powered_down"
[23:10:35.746]        // =>  TRUE
[23:10:35.746]      <block atomic="false" info="">
[23:10:35.746]        Message(0, "Debug/System power-up request sent");
[23:10:35.749]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:10:35.751]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:10:35.751]      </block>
[23:10:35.751]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:10:35.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:10:35.752]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:10:35.752]        // while-condition  =>  FALSE
[23:10:35.752]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:10:35.752]      </control>
[23:10:35.752]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:10:35.752]        // if-block "(__protocol & 0xFFFF) == 1"
[23:10:35.752]          // =>  FALSE
[23:10:35.752]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:10:35.752]      </control>
[23:10:35.752]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:10:35.752]        // if-block "(__protocol & 0xFFFF) == 2"
[23:10:35.752]          // =>  TRUE
[23:10:35.752]        <block atomic="false" info="">
[23:10:35.752]          Message(0, "executing SWD power up");
[23:10:35.755]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:10:35.755]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:10:35.755]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:10:35.755]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:10:35.755]        </block>
[23:10:35.755]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:10:35.755]      </control>
[23:10:35.755]      // end if-block "powered_down"
[23:10:35.755]    </control>
[23:10:35.755]    <block atomic="false" info="">
[23:10:35.757]      __var DEBUG_PORT_VAL    = 0;
[23:10:35.757]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:10:35.757]      __var ACCESS_POINT_VAL  = 0;
[23:10:35.757]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:10:35.757]      __ap = 1; 
[23:10:35.757]        // -> [__ap <= 0x00000001]
[23:10:35.757]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:10:35.759]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:10:35.760]      __ap = 4;
[23:10:35.760]        // -> [__ap <= 0x00000004]
[23:10:35.760]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:35.761]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:10:35.761]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:10:35.761]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:35.763]    </block>
[23:10:35.763]    <block atomic="false" info="">
[23:10:35.763]      __var nReset = 0x80;
[23:10:35.763]        // -> [nReset <= 0x00000080]
[23:10:35.764]      __var canReadPins = 0;
[23:10:35.764]        // -> [canReadPins <= 0x00000000]
[23:10:35.764]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:10:35.764]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:10:35.764]        // -> [canReadPins <= 0x00000001]
[23:10:35.764]    </block>
[23:10:35.764]    <control if="" while="1" timeout="200" info="">
[23:10:35.764]      // while "1"  (timeout="200")
[23:10:35.764]      // while-condition  =>  TRUE
[23:10:35.764]      // while "1"  (timeout="200")
[23:10:35.764]      // while-condition  =>  TRUE
[23:10:35.764]      // while "1"  (timeout="200")
[23:10:35.764]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.766]      // while "1"  (timeout="200")
[23:10:35.766]      // while-condition  =>  TRUE
[23:10:35.770]      // while "1"  (timeout="200")
[23:10:35.770]      // while-condition  =>  TRUE
[23:10:35.770]      // while "1"  (timeout="200")
[23:10:35.770]      // while-condition  =>  TRUE
[23:10:35.770]      // while "1"  (timeout="200")
[23:10:35.770]      // while-condition  =>  TRUE
[23:10:35.771]      // while "1"  (timeout="200")
[23:10:35.771]      // while-condition  =>  TRUE
[23:10:35.771]      // while "1"  (timeout="200")
[23:10:35.771]      // while-condition  =>  TRUE
[23:10:35.771]      // while "1"  (timeout="200")
[23:10:35.771]      // while  =>  TIMEOUT
[23:10:35.771]      // end while "1"
[23:10:35.771]    </control>
[23:10:35.771]    <control if="canReadPins" while="" timeout="0" info="">
[23:10:35.771]      // if-block "canReadPins"
[23:10:35.771]        // =>  TRUE
[23:10:35.771]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:10:35.771]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:10:35.771]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:10:35.771]        // while-condition  =>  FALSE
[23:10:35.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:10:35.771]      </control>
[23:10:35.771]      // end if-block "canReadPins"
[23:10:35.771]    </control>
[23:10:35.771]    <control if="!canReadPins" while="" timeout="0" info="">
[23:10:35.771]      // if-block "!canReadPins"
[23:10:35.771]        // =>  FALSE
[23:10:35.771]      // skip if-block "!canReadPins"
[23:10:35.771]    </control>
[23:10:35.771]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:10:35.771]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:35.771]        // =>  TRUE
[23:10:35.771]      <block atomic="false" info="">
[23:10:35.771]        WriteAP(0x00, 0x190008);
[23:10:35.775]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:35.775]        WriteAP(0xF0, 0x01);
[23:10:35.775]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:35.775]      </block>
[23:10:35.775]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:35.776]    </control>
[23:10:35.776]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:10:35.776]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:35.776]        // =>  FALSE
[23:10:35.776]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:35.776]    </control>
[23:10:35.776]    <block atomic="false" info="">
[23:10:35.776]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:35.792]  
[23:10:35.792]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[23:10:35.792]  
[23:10:35.794]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:10:35.794]    </block>
[23:10:35.794]  </sequence>
[23:10:35.794]  
[23:10:46.303]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:10:46.303]  
[23:10:46.313]  <debugvars>
[23:10:46.313]    // Pre-defined
[23:10:46.313]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:46.313]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:10:46.313]    __dp=0x00000000
[23:10:46.313]    __ap=0x00000000
[23:10:46.313]    __traceout=0x00000000      (Trace Disabled)
[23:10:46.313]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:46.313]    __FlashAddr=0x00000000
[23:10:46.313]    __FlashLen=0x00000000
[23:10:46.313]    __FlashArg=0x00000000
[23:10:46.313]    __FlashOp=0x00000000
[23:10:46.313]    __Result=0x00000000
[23:10:46.313]  </debugvars>
[23:10:46.313]  
[23:10:46.313]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:10:46.313]    <block atomic="false" info="">
[23:10:46.313]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:10:46.313]        // -> [isSWJ <= 0x00000001]
[23:10:46.313]      __var hasDormant = __protocol & 0x00020000;
[23:10:46.313]        // -> [hasDormant <= 0x00000000]
[23:10:46.313]      __var protType   = __protocol & 0x0000FFFF;
[23:10:46.313]        // -> [protType <= 0x00000002]
[23:10:46.313]    </block>
[23:10:46.313]    <control if="protType == 1" while="" timeout="0" info="">
[23:10:46.313]      // if-block "protType == 1"
[23:10:46.313]        // =>  FALSE
[23:10:46.313]      // skip if-block "protType == 1"
[23:10:46.313]    </control>
[23:10:46.313]    <control if="protType == 2" while="" timeout="0" info="">
[23:10:46.313]      // if-block "protType == 2"
[23:10:46.313]        // =>  TRUE
[23:10:46.313]      <control if="isSWJ" while="" timeout="0" info="">
[23:10:46.313]        // if-block "isSWJ"
[23:10:46.313]          // =>  TRUE
[23:10:46.313]        <control if="hasDormant" while="" timeout="0" info="">
[23:10:46.313]          // if-block "hasDormant"
[23:10:46.313]            // =>  FALSE
[23:10:46.313]          // skip if-block "hasDormant"
[23:10:46.313]        </control>
[23:10:46.313]        <control if="!hasDormant" while="" timeout="0" info="">
[23:10:46.313]          // if-block "!hasDormant"
[23:10:46.313]            // =>  TRUE
[23:10:46.313]          <block atomic="false" info="">
[23:10:46.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:10:46.317]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:46.317]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:10:46.317]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:10:46.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:10:46.317]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:46.317]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:10:46.317]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:10:46.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:10:46.317]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:46.317]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:10:46.317]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:10:46.317]          </block>
[23:10:46.317]          // end if-block "!hasDormant"
[23:10:46.317]        </control>
[23:10:46.317]        // end if-block "isSWJ"
[23:10:46.317]      </control>
[23:10:46.317]      <control if="!isSWJ" while="" timeout="0" info="">
[23:10:46.317]        // if-block "!isSWJ"
[23:10:46.317]          // =>  FALSE
[23:10:46.317]        // skip if-block "!isSWJ"
[23:10:46.317]      </control>
[23:10:46.317]      <block atomic="false" info="">
[23:10:46.321]        ReadDP(0x0);
[23:10:46.321]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:10:46.321]      </block>
[23:10:46.321]      // end if-block "protType == 2"
[23:10:46.321]    </control>
[23:10:46.322]  </sequence>
[23:10:46.322]  
[23:10:48.669]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:10:48.669]  
[23:10:48.677]  <debugvars>
[23:10:48.677]    // Pre-defined
[23:10:48.677]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:48.677]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:48.677]    __dp=0x00000000
[23:10:48.677]    __ap=0x00000000
[23:10:48.677]    __traceout=0x00000000      (Trace Disabled)
[23:10:48.677]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:48.677]    __FlashAddr=0x00000000
[23:10:48.677]    __FlashLen=0x00000000
[23:10:48.677]    __FlashArg=0x00000000
[23:10:48.677]    __FlashOp=0x00000000
[23:10:48.677]    __Result=0x00000000
[23:10:48.679]  </debugvars>
[23:10:48.679]  
[23:10:48.679]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:10:48.679]    <block atomic="false" info="">
[23:10:48.679]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:10:48.679]        // -> [isSWJ <= 0x00000001]
[23:10:48.679]      __var hasDormant = __protocol & 0x00020000;
[23:10:48.679]        // -> [hasDormant <= 0x00000000]
[23:10:48.679]      __var protType   = __protocol & 0x0000FFFF;
[23:10:48.679]        // -> [protType <= 0x00000002]
[23:10:48.679]    </block>
[23:10:48.679]    <control if="protType == 1" while="" timeout="0" info="">
[23:10:48.679]      // if-block "protType == 1"
[23:10:48.679]        // =>  FALSE
[23:10:48.679]      // skip if-block "protType == 1"
[23:10:48.679]    </control>
[23:10:48.679]    <control if="protType == 2" while="" timeout="0" info="">
[23:10:48.681]      // if-block "protType == 2"
[23:10:48.681]        // =>  TRUE
[23:10:48.681]      <control if="isSWJ" while="" timeout="0" info="">
[23:10:48.681]        // if-block "isSWJ"
[23:10:48.681]          // =>  TRUE
[23:10:48.681]        <control if="hasDormant" while="" timeout="0" info="">
[23:10:48.681]          // if-block "hasDormant"
[23:10:48.681]            // =>  FALSE
[23:10:48.681]          // skip if-block "hasDormant"
[23:10:48.681]        </control>
[23:10:48.681]        <control if="!hasDormant" while="" timeout="0" info="">
[23:10:48.681]          // if-block "!hasDormant"
[23:10:48.682]            // =>  TRUE
[23:10:48.682]          <block atomic="false" info="">
[23:10:48.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:10:48.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:48.682]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:10:48.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:10:48.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:10:48.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:48.682]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:10:48.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:10:48.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:10:48.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:48.682]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:10:48.682]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:10:48.682]          </block>
[23:10:48.682]          // end if-block "!hasDormant"
[23:10:48.682]        </control>
[23:10:48.682]        // end if-block "isSWJ"
[23:10:48.682]      </control>
[23:10:48.682]      <control if="!isSWJ" while="" timeout="0" info="">
[23:10:48.682]        // if-block "!isSWJ"
[23:10:48.682]          // =>  FALSE
[23:10:48.682]        // skip if-block "!isSWJ"
[23:10:48.682]      </control>
[23:10:48.682]      <block atomic="false" info="">
[23:10:48.682]        ReadDP(0x0);
[23:10:48.682]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:10:48.682]      </block>
[23:10:48.682]      // end if-block "protType == 2"
[23:10:48.682]    </control>
[23:10:48.682]  </sequence>
[23:10:48.682]  
[23:10:48.682]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:10:48.682]  
[23:10:48.682]  <debugvars>
[23:10:48.682]    // Pre-defined
[23:10:48.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:48.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:48.682]    __dp=0x00000000
[23:10:48.682]    __ap=0x00000000
[23:10:48.682]    __traceout=0x00000000      (Trace Disabled)
[23:10:48.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:48.682]    __FlashAddr=0x00000000
[23:10:48.689]    __FlashLen=0x00000000
[23:10:48.689]    __FlashArg=0x00000000
[23:10:48.689]    __FlashOp=0x00000000
[23:10:48.689]    __Result=0x00000000
[23:10:48.689]  </debugvars>
[23:10:48.689]  
[23:10:48.689]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:10:48.689]    <block atomic="false" info="">
[23:10:48.689]      __var SW_DP_ABORT       = 0x0;
[23:10:48.689]        // -> [SW_DP_ABORT <= 0x00000000]
[23:10:48.689]      __var DP_CTRL_STAT      = 0x4;
[23:10:48.689]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:10:48.689]      __var DP_SELECT         = 0x8;
[23:10:48.689]        // -> [DP_SELECT <= 0x00000008]
[23:10:48.689]      __var powered_down      = 0;
[23:10:48.689]        // -> [powered_down <= 0x00000000]
[23:10:48.689]      WriteDP(DP_SELECT, 0x00000000);
[23:10:48.691]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:10:48.691]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:10:48.691]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:10:48.691]        // -> [powered_down <= 0x00000001]
[23:10:48.692]    </block>
[23:10:48.692]    <control if="powered_down" while="" timeout="0" info="">
[23:10:48.692]      // if-block "powered_down"
[23:10:48.692]        // =>  TRUE
[23:10:48.692]      <block atomic="false" info="">
[23:10:48.692]        Message(0, "Debug/System power-up request sent");
[23:10:48.693]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:10:48.693]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:10:48.693]      </block>
[23:10:48.693]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:10:48.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:10:48.693]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:10:48.693]        // while-condition  =>  FALSE
[23:10:48.693]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:10:48.693]      </control>
[23:10:48.693]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:10:48.693]        // if-block "(__protocol & 0xFFFF) == 1"
[23:10:48.693]          // =>  FALSE
[23:10:48.693]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:10:48.693]      </control>
[23:10:48.693]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:10:48.693]        // if-block "(__protocol & 0xFFFF) == 2"
[23:10:48.693]          // =>  TRUE
[23:10:48.693]        <block atomic="false" info="">
[23:10:48.693]          Message(0, "executing SWD power up");
[23:10:48.693]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:10:48.699]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:10:48.699]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:10:48.699]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:10:48.699]        </block>
[23:10:48.699]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:10:48.699]      </control>
[23:10:48.699]      // end if-block "powered_down"
[23:10:48.699]    </control>
[23:10:48.699]    <block atomic="false" info="">
[23:10:48.701]      __var DEBUG_PORT_VAL    = 0;
[23:10:48.701]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:10:48.701]      __var ACCESS_POINT_VAL  = 0;
[23:10:48.701]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:10:48.701]      __ap = 1; 
[23:10:48.701]        // -> [__ap <= 0x00000001]
[23:10:48.701]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:10:48.702]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:10:48.702]      __ap = 4;
[23:10:48.702]        // -> [__ap <= 0x00000004]
[23:10:48.702]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:48.702]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:10:48.702]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:10:48.702]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:48.705]    </block>
[23:10:48.705]    <block atomic="false" info="">
[23:10:48.705]      __var nReset = 0x80;
[23:10:48.705]        // -> [nReset <= 0x00000080]
[23:10:48.705]      __var canReadPins = 0;
[23:10:48.705]        // -> [canReadPins <= 0x00000000]
[23:10:48.705]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:10:48.705]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:10:48.705]        // -> [canReadPins <= 0x00000001]
[23:10:48.705]    </block>
[23:10:48.705]    <control if="" while="1" timeout="200" info="">
[23:10:48.705]      // while "1"  (timeout="200")
[23:10:48.705]      // while-condition  =>  TRUE
[23:10:48.705]      // while "1"  (timeout="200")
[23:10:48.709]      // while-condition  =>  TRUE
[23:10:48.709]      // while "1"  (timeout="200")
[23:10:48.709]      // while  =>  TIMEOUT
[23:10:48.709]      // end while "1"
[23:10:48.709]    </control>
[23:10:48.709]    <control if="canReadPins" while="" timeout="0" info="">
[23:10:48.709]      // if-block "canReadPins"
[23:10:48.709]        // =>  TRUE
[23:10:48.709]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:10:48.709]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:10:48.711]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:10:48.711]        // while-condition  =>  FALSE
[23:10:48.711]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:10:48.711]      </control>
[23:10:48.711]      // end if-block "canReadPins"
[23:10:48.711]    </control>
[23:10:48.711]    <control if="!canReadPins" while="" timeout="0" info="">
[23:10:48.711]      // if-block "!canReadPins"
[23:10:48.712]        // =>  FALSE
[23:10:48.712]      // skip if-block "!canReadPins"
[23:10:48.712]    </control>
[23:10:48.712]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:10:48.712]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:48.712]        // =>  TRUE
[23:10:48.712]      <block atomic="false" info="">
[23:10:48.712]        WriteAP(0x00, 0x190008);
[23:10:48.713]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:48.713]        WriteAP(0xF0, 0x01);
[23:10:48.713]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:48.713]      </block>
[23:10:48.713]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:48.713]    </control>
[23:10:48.713]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:10:48.713]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:48.713]        // =>  FALSE
[23:10:48.713]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:48.713]    </control>
[23:10:48.713]    <block atomic="false" info="">
[23:10:48.713]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:48.713]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:10:48.713]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:10:48.713]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:48.713]      __ap = 0; //lets make sure we reset the access point selection
[23:10:48.713]        // -> [__ap <= 0x00000000]
[23:10:48.713]    </block>
[23:10:48.713]  </sequence>
[23:10:48.713]  
[23:10:48.722]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:10:48.722]  
[23:10:48.722]  <debugvars>
[23:10:48.722]    // Pre-defined
[23:10:48.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:48.722]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:48.722]    __dp=0x00000000
[23:10:48.722]    __ap=0x00000000
[23:10:48.722]    __traceout=0x00000000      (Trace Disabled)
[23:10:48.722]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:48.722]    __FlashAddr=0x00000000
[23:10:48.722]    __FlashLen=0x00000000
[23:10:48.722]    __FlashArg=0x00000000
[23:10:48.722]    __FlashOp=0x00000000
[23:10:48.722]    __Result=0x00000000
[23:10:48.722]  </debugvars>
[23:10:48.722]  
[23:10:48.722]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:10:48.722]    <block atomic="false" info="">
[23:10:48.722]      __var deviceID = 0;
[23:10:48.722]        // -> [deviceID <= 0x00000000]
[23:10:48.722]      __var version = 0;
[23:10:48.722]        // -> [version <= 0x00000000]
[23:10:48.722]      __var partNum = 0;
[23:10:48.722]        // -> [partNum <= 0x00000000]
[23:10:48.722]      __var manuf = 0;
[23:10:48.722]        // -> [manuf <= 0x00000000]
[23:10:48.722]      __var isMSPM0G1X0X_G3X0X = 0;
[23:10:48.722]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:10:48.722]      __var isProduction = 0;
[23:10:48.722]        // -> [isProduction <= 0x00000000]
[23:10:48.722]      __var continueId = 0;
[23:10:48.722]        // -> [continueId <= 0x00000000]
[23:10:48.722]      deviceID =   Read32(0x41C40004);
[23:10:48.731]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:10:48.731]        // -> [deviceID <= 0x2BB8802F]
[23:10:48.731]      version = deviceID >> 28;
[23:10:48.731]        // -> [version <= 0x00000002]
[23:10:48.731]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:10:48.731]        // -> [partNum <= 0x0000BB88]
[23:10:48.731]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:10:48.731]        // -> [manuf <= 0x00000017]
[23:10:48.731]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:10:48.731]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:10:48.731]      isProduction = (version > 0);
[23:10:48.732]        // -> [isProduction <= 0x00000001]
[23:10:48.732]    </block>
[23:10:48.732]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:10:48.732]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:10:48.732]        // =>  FALSE
[23:10:48.732]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:10:48.732]    </control>
[23:10:48.732]    <control if="continueId == 4" while="" timeout="0" info="">
[23:10:48.732]      // if-block "continueId == 4"
[23:10:48.732]        // =>  FALSE
[23:10:48.732]      // skip if-block "continueId == 4"
[23:10:48.732]    </control>
[23:10:48.732]    <control if="!isProduction" while="" timeout="0" info="">
[23:10:48.733]      // if-block "!isProduction"
[23:10:48.733]        // =>  FALSE
[23:10:48.733]      // skip if-block "!isProduction"
[23:10:48.733]    </control>
[23:10:48.733]  </sequence>
[23:10:48.733]  
[23:10:51.226]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:10:51.226]  
[23:10:51.235]  <debugvars>
[23:10:51.235]    // Pre-defined
[23:10:51.235]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:51.235]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:10:51.235]    __dp=0x00000000
[23:10:51.235]    __ap=0x00000000
[23:10:51.235]    __traceout=0x00000000      (Trace Disabled)
[23:10:51.236]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:51.236]    __FlashAddr=0x00000000
[23:10:51.236]    __FlashLen=0x00000000
[23:10:51.236]    __FlashArg=0x00000000
[23:10:51.236]    __FlashOp=0x00000000
[23:10:51.236]    __Result=0x00000000
[23:10:51.236]  </debugvars>
[23:10:51.236]  
[23:10:51.236]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:10:51.236]    <block atomic="false" info="">
[23:10:51.236]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:10:51.236]        // -> [isSWJ <= 0x00000001]
[23:10:51.236]      __var hasDormant = __protocol & 0x00020000;
[23:10:51.236]        // -> [hasDormant <= 0x00000000]
[23:10:51.236]      __var protType   = __protocol & 0x0000FFFF;
[23:10:51.236]        // -> [protType <= 0x00000002]
[23:10:51.236]    </block>
[23:10:51.238]    <control if="protType == 1" while="" timeout="0" info="">
[23:10:51.238]      // if-block "protType == 1"
[23:10:51.238]        // =>  FALSE
[23:10:51.238]      // skip if-block "protType == 1"
[23:10:51.238]    </control>
[23:10:51.238]    <control if="protType == 2" while="" timeout="0" info="">
[23:10:51.238]      // if-block "protType == 2"
[23:10:51.238]        // =>  TRUE
[23:10:51.238]      <control if="isSWJ" while="" timeout="0" info="">
[23:10:51.238]        // if-block "isSWJ"
[23:10:51.238]          // =>  TRUE
[23:10:51.238]        <control if="hasDormant" while="" timeout="0" info="">
[23:10:51.238]          // if-block "hasDormant"
[23:10:51.238]            // =>  FALSE
[23:10:51.238]          // skip if-block "hasDormant"
[23:10:51.238]        </control>
[23:10:51.238]        <control if="!hasDormant" while="" timeout="0" info="">
[23:10:51.238]          // if-block "!hasDormant"
[23:10:51.238]            // =>  TRUE
[23:10:51.238]          <block atomic="false" info="">
[23:10:51.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:10:51.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:51.241]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:10:51.241]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:10:51.241]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:10:51.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:51.242]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:10:51.242]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:10:51.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:10:51.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:51.242]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:10:51.242]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:10:51.242]          </block>
[23:10:51.242]          // end if-block "!hasDormant"
[23:10:51.242]        </control>
[23:10:51.242]        // end if-block "isSWJ"
[23:10:51.242]      </control>
[23:10:51.242]      <control if="!isSWJ" while="" timeout="0" info="">
[23:10:51.242]        // if-block "!isSWJ"
[23:10:51.242]          // =>  FALSE
[23:10:51.242]        // skip if-block "!isSWJ"
[23:10:51.242]      </control>
[23:10:51.242]      <block atomic="false" info="">
[23:10:51.242]        ReadDP(0x0);
[23:10:51.242]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:10:51.242]      </block>
[23:10:51.246]      // end if-block "protType == 2"
[23:10:51.246]    </control>
[23:10:51.246]  </sequence>
[23:10:51.246]  
[23:10:51.246]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:10:51.246]  
[23:10:51.246]  <debugvars>
[23:10:51.246]    // Pre-defined
[23:10:51.246]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:51.246]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:10:51.246]    __dp=0x00000000
[23:10:51.246]    __ap=0x00000000
[23:10:51.246]    __traceout=0x00000000      (Trace Disabled)
[23:10:51.246]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:51.246]    __FlashAddr=0x00000000
[23:10:51.246]    __FlashLen=0x00000000
[23:10:51.246]    __FlashArg=0x00000000
[23:10:51.246]    __FlashOp=0x00000000
[23:10:51.246]    __Result=0x00000000
[23:10:51.248]  </debugvars>
[23:10:51.248]  
[23:10:51.248]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:10:51.248]    <block atomic="false" info="">
[23:10:51.248]      __var SW_DP_ABORT       = 0x0;
[23:10:51.248]        // -> [SW_DP_ABORT <= 0x00000000]
[23:10:51.248]      __var DP_CTRL_STAT      = 0x4;
[23:10:51.248]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:10:51.248]      __var DP_SELECT         = 0x8;
[23:10:51.248]        // -> [DP_SELECT <= 0x00000008]
[23:10:51.248]      __var powered_down      = 0;
[23:10:51.248]        // -> [powered_down <= 0x00000000]
[23:10:51.248]      WriteDP(DP_SELECT, 0x00000000);
[23:10:51.248]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:10:51.248]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:10:51.248]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:10:51.248]        // -> [powered_down <= 0x00000001]
[23:10:51.251]    </block>
[23:10:51.251]    <control if="powered_down" while="" timeout="0" info="">
[23:10:51.251]      // if-block "powered_down"
[23:10:51.251]        // =>  TRUE
[23:10:51.251]      <block atomic="false" info="">
[23:10:51.251]        Message(0, "Debug/System power-up request sent");
[23:10:51.253]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:10:51.253]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:10:51.253]      </block>
[23:10:51.253]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:10:51.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:10:51.254]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:10:51.254]        // while-condition  =>  FALSE
[23:10:51.254]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:10:51.254]      </control>
[23:10:51.255]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:10:51.255]        // if-block "(__protocol & 0xFFFF) == 1"
[23:10:51.255]          // =>  FALSE
[23:10:51.255]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:10:51.255]      </control>
[23:10:51.255]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:10:51.255]        // if-block "(__protocol & 0xFFFF) == 2"
[23:10:51.255]          // =>  TRUE
[23:10:51.255]        <block atomic="false" info="">
[23:10:51.255]          Message(0, "executing SWD power up");
[23:10:51.258]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:10:51.259]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:10:51.259]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:10:51.260]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:10:51.260]        </block>
[23:10:51.260]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:10:51.260]      </control>
[23:10:51.260]      // end if-block "powered_down"
[23:10:51.260]    </control>
[23:10:51.260]    <block atomic="false" info="">
[23:10:51.260]      __var DEBUG_PORT_VAL    = 0;
[23:10:51.260]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:10:51.260]      __var ACCESS_POINT_VAL  = 0;
[23:10:51.261]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:10:51.261]      __ap = 1; 
[23:10:51.261]        // -> [__ap <= 0x00000001]
[23:10:51.261]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:10:51.262]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:10:51.262]      __ap = 4;
[23:10:51.262]        // -> [__ap <= 0x00000004]
[23:10:51.262]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:51.263]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:10:51.264]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:10:51.264]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:51.265]    </block>
[23:10:51.265]    <block atomic="false" info="">
[23:10:51.265]      __var nReset = 0x80;
[23:10:51.266]        // -> [nReset <= 0x00000080]
[23:10:51.266]      __var canReadPins = 0;
[23:10:51.266]        // -> [canReadPins <= 0x00000000]
[23:10:51.266]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:10:51.266]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:10:51.266]        // -> [canReadPins <= 0x00000001]
[23:10:51.267]    </block>
[23:10:51.267]    <control if="" while="1" timeout="200" info="">
[23:10:51.267]      // while "1"  (timeout="200")
[23:10:51.267]      // while-condition  =>  TRUE
[23:10:51.267]      // while "1"  (timeout="200")
[23:10:51.268]      // while-condition  =>  TRUE
[23:10:51.268]      // while "1"  (timeout="200")
[23:10:51.268]      // while-condition  =>  TRUE
[23:10:51.268]      // while "1"  (timeout="200")
[23:10:51.268]      // while-condition  =>  TRUE
[23:10:51.268]      // while "1"  (timeout="200")
[23:10:51.268]      // while-condition  =>  TRUE
[23:10:51.268]      // while "1"  (timeout="200")
[23:10:51.269]      // while-condition  =>  TRUE
[23:10:51.269]      // while "1"  (timeout="200")
[23:10:51.269]      // while-condition  =>  TRUE
[23:10:51.269]      // while "1"  (timeout="200")
[23:10:51.269]      // while-condition  =>  TRUE
[23:10:51.269]      // while "1"  (timeout="200")
[23:10:51.269]      // while-condition  =>  TRUE
[23:10:51.269]      // while "1"  (timeout="200")
[23:10:51.270]      // while-condition  =>  TRUE
[23:10:51.270]      // while "1"  (timeout="200")
[23:10:51.270]      // while-condition  =>  TRUE
[23:10:51.270]      // while "1"  (timeout="200")
[23:10:51.270]      // while-condition  =>  TRUE
[23:10:51.270]      // while "1"  (timeout="200")
[23:10:51.270]      // while-condition  =>  TRUE
[23:10:51.271]      // while "1"  (timeout="200")
[23:10:51.271]      // while-condition  =>  TRUE
[23:10:51.271]      // while "1"  (timeout="200")
[23:10:51.271]      // while-condition  =>  TRUE
[23:10:51.271]      // while "1"  (timeout="200")
[23:10:51.271]      // while-condition  =>  TRUE
[23:10:51.271]      // while "1"  (timeout="200")
[23:10:51.271]      // while  =>  TIMEOUT
[23:10:51.271]      // end while "1"
[23:10:51.271]    </control>
[23:10:51.272]    <control if="canReadPins" while="" timeout="0" info="">
[23:10:51.272]      // if-block "canReadPins"
[23:10:51.272]        // =>  TRUE
[23:10:51.272]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:10:51.272]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:10:51.272]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:10:51.272]        // while-condition  =>  FALSE
[23:10:51.273]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:10:51.273]      </control>
[23:10:51.273]      // end if-block "canReadPins"
[23:10:51.273]    </control>
[23:10:51.273]    <control if="!canReadPins" while="" timeout="0" info="">
[23:10:51.273]      // if-block "!canReadPins"
[23:10:51.273]        // =>  FALSE
[23:10:51.273]      // skip if-block "!canReadPins"
[23:10:51.273]    </control>
[23:10:51.273]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:10:51.273]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:51.274]        // =>  TRUE
[23:10:51.274]      <block atomic="false" info="">
[23:10:51.274]        WriteAP(0x00, 0x190008);
[23:10:51.274]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:51.274]        WriteAP(0xF0, 0x01);
[23:10:51.276]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:51.276]      </block>
[23:10:51.276]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:51.276]    </control>
[23:10:51.276]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:10:51.276]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:51.276]        // =>  FALSE
[23:10:51.276]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:51.276]    </control>
[23:10:51.276]    <block atomic="false" info="">
[23:10:51.277]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:51.291]  
[23:10:51.291]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[23:10:51.291]  
[23:10:51.292]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:10:51.292]    </block>
[23:10:51.293]  </sequence>
[23:10:51.293]  
[23:11:02.053]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:11:02.053]  
[23:11:02.062]  <debugvars>
[23:11:02.062]    // Pre-defined
[23:11:02.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:11:02.062]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:11:02.063]    __dp=0x00000000
[23:11:02.063]    __ap=0x00000000
[23:11:02.063]    __traceout=0x00000000      (Trace Disabled)
[23:11:02.063]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:11:02.063]    __FlashAddr=0x00000000
[23:11:02.063]    __FlashLen=0x00000000
[23:11:02.063]    __FlashArg=0x00000000
[23:11:02.063]    __FlashOp=0x00000000
[23:11:02.063]    __Result=0x00000000
[23:11:02.063]  </debugvars>
[23:11:02.063]  
[23:11:02.063]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:11:02.063]    <block atomic="false" info="">
[23:11:02.063]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:11:02.063]        // -> [isSWJ <= 0x00000001]
[23:11:02.063]      __var hasDormant = __protocol & 0x00020000;
[23:11:02.063]        // -> [hasDormant <= 0x00000000]
[23:11:02.063]      __var protType   = __protocol & 0x0000FFFF;
[23:11:02.063]        // -> [protType <= 0x00000002]
[23:11:02.063]    </block>
[23:11:02.063]    <control if="protType == 1" while="" timeout="0" info="">
[23:11:02.063]      // if-block "protType == 1"
[23:11:02.063]        // =>  FALSE
[23:11:02.063]      // skip if-block "protType == 1"
[23:11:02.063]    </control>
[23:11:02.063]    <control if="protType == 2" while="" timeout="0" info="">
[23:11:02.063]      // if-block "protType == 2"
[23:11:02.063]        // =>  TRUE
[23:11:02.063]      <control if="isSWJ" while="" timeout="0" info="">
[23:11:02.063]        // if-block "isSWJ"
[23:11:02.063]          // =>  TRUE
[23:11:02.063]        <control if="hasDormant" while="" timeout="0" info="">
[23:11:02.063]          // if-block "hasDormant"
[23:11:02.063]            // =>  FALSE
[23:11:02.063]          // skip if-block "hasDormant"
[23:11:02.063]        </control>
[23:11:02.063]        <control if="!hasDormant" while="" timeout="0" info="">
[23:11:02.063]          // if-block "!hasDormant"
[23:11:02.063]            // =>  TRUE
[23:11:02.063]          <block atomic="false" info="">
[23:11:02.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:11:02.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:11:02.063]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:11:02.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:11:02.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:11:02.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:11:02.063]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:11:02.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:11:02.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:11:02.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:11:02.069]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:11:02.069]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:11:02.069]          </block>
[23:11:02.069]          // end if-block "!hasDormant"
[23:11:02.069]        </control>
[23:11:02.069]        // end if-block "isSWJ"
[23:11:02.069]      </control>
[23:11:02.069]      <control if="!isSWJ" while="" timeout="0" info="">
[23:11:02.069]        // if-block "!isSWJ"
[23:11:02.069]          // =>  FALSE
[23:11:02.069]        // skip if-block "!isSWJ"
[23:11:02.071]      </control>
[23:11:02.071]      <block atomic="false" info="">
[23:11:02.071]        ReadDP(0x0);
[23:11:02.071]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:11:02.071]      </block>
[23:11:02.071]      // end if-block "protType == 2"
[23:11:02.072]    </control>
[23:11:02.072]  </sequence>
[23:11:02.072]  
[23:11:04.739]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:11:04.739]  
[23:11:04.740]  <debugvars>
[23:11:04.740]    // Pre-defined
[23:11:04.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:11:04.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:11:04.740]    __dp=0x00000000
[23:11:04.740]    __ap=0x00000000
[23:11:04.740]    __traceout=0x00000000      (Trace Disabled)
[23:11:04.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:11:04.741]    __FlashAddr=0x00000000
[23:11:04.741]    __FlashLen=0x00000000
[23:11:04.741]    __FlashArg=0x00000000
[23:11:04.741]    __FlashOp=0x00000000
[23:11:04.741]    __Result=0x00000000
[23:11:04.742]  </debugvars>
[23:11:04.742]  
[23:11:04.742]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:11:04.742]    <block atomic="false" info="">
[23:11:04.742]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:11:04.742]        // -> [isSWJ <= 0x00000001]
[23:11:04.742]      __var hasDormant = __protocol & 0x00020000;
[23:11:04.742]        // -> [hasDormant <= 0x00000000]
[23:11:04.742]      __var protType   = __protocol & 0x0000FFFF;
[23:11:04.743]        // -> [protType <= 0x00000002]
[23:11:04.743]    </block>
[23:11:04.743]    <control if="protType == 1" while="" timeout="0" info="">
[23:11:04.743]      // if-block "protType == 1"
[23:11:04.743]        // =>  FALSE
[23:11:04.743]      // skip if-block "protType == 1"
[23:11:04.744]    </control>
[23:11:04.744]    <control if="protType == 2" while="" timeout="0" info="">
[23:11:04.744]      // if-block "protType == 2"
[23:11:04.744]        // =>  TRUE
[23:11:04.744]      <control if="isSWJ" while="" timeout="0" info="">
[23:11:04.744]        // if-block "isSWJ"
[23:11:04.744]          // =>  TRUE
[23:11:04.744]        <control if="hasDormant" while="" timeout="0" info="">
[23:11:04.744]          // if-block "hasDormant"
[23:11:04.745]            // =>  FALSE
[23:11:04.745]          // skip if-block "hasDormant"
[23:11:04.745]        </control>
[23:11:04.745]        <control if="!hasDormant" while="" timeout="0" info="">
[23:11:04.745]          // if-block "!hasDormant"
[23:11:04.746]            // =>  TRUE
[23:11:04.746]          <block atomic="false" info="">
[23:11:04.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:11:04.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:11:04.747]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:11:04.747]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:11:04.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:11:04.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:11:04.748]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:11:04.748]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:11:04.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:11:04.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:11:04.749]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:11:04.749]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:11:04.749]          </block>
[23:11:04.749]          // end if-block "!hasDormant"
[23:11:04.749]        </control>
[23:11:04.749]        // end if-block "isSWJ"
[23:11:04.749]      </control>
[23:11:04.750]      <control if="!isSWJ" while="" timeout="0" info="">
[23:11:04.750]        // if-block "!isSWJ"
[23:11:04.750]          // =>  FALSE
[23:11:04.750]        // skip if-block "!isSWJ"
[23:11:04.750]      </control>
[23:11:04.750]      <block atomic="false" info="">
[23:11:04.750]        ReadDP(0x0);
[23:11:04.751]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:11:04.751]      </block>
[23:11:04.751]      // end if-block "protType == 2"
[23:11:04.751]    </control>
[23:11:04.751]  </sequence>
[23:11:04.751]  
[23:11:04.752]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:11:04.752]  
[23:11:04.752]  <debugvars>
[23:11:04.752]    // Pre-defined
[23:11:04.752]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:11:04.752]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:11:04.753]    __dp=0x00000000
[23:11:04.753]    __ap=0x00000000
[23:11:04.753]    __traceout=0x00000000      (Trace Disabled)
[23:11:04.753]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:11:04.753]    __FlashAddr=0x00000000
[23:11:04.753]    __FlashLen=0x00000000
[23:11:04.753]    __FlashArg=0x00000000
[23:11:04.754]    __FlashOp=0x00000000
[23:11:04.754]    __Result=0x00000000
[23:11:04.754]  </debugvars>
[23:11:04.754]  
[23:11:04.754]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:11:04.754]    <block atomic="false" info="">
[23:11:04.754]      __var SW_DP_ABORT       = 0x0;
[23:11:04.754]        // -> [SW_DP_ABORT <= 0x00000000]
[23:11:04.754]      __var DP_CTRL_STAT      = 0x4;
[23:11:04.755]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:11:04.755]      __var DP_SELECT         = 0x8;
[23:11:04.755]        // -> [DP_SELECT <= 0x00000008]
[23:11:04.755]      __var powered_down      = 0;
[23:11:04.755]        // -> [powered_down <= 0x00000000]
[23:11:04.755]      WriteDP(DP_SELECT, 0x00000000);
[23:11:04.756]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:11:04.756]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:11:04.757]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:11:04.757]        // -> [powered_down <= 0x00000001]
[23:11:04.757]    </block>
[23:11:04.757]    <control if="powered_down" while="" timeout="0" info="">
[23:11:04.757]      // if-block "powered_down"
[23:11:04.757]        // =>  TRUE
[23:11:04.757]      <block atomic="false" info="">
[23:11:04.757]        Message(0, "Debug/System power-up request sent");
[23:11:04.759]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:11:04.759]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:11:04.760]      </block>
[23:11:04.760]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:11:04.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:11:04.760]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:11:04.761]        // while-condition  =>  FALSE
[23:11:04.761]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:11:04.761]      </control>
[23:11:04.761]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:11:04.761]        // if-block "(__protocol & 0xFFFF) == 1"
[23:11:04.761]          // =>  FALSE
[23:11:04.761]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:11:04.761]      </control>
[23:11:04.761]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:11:04.762]        // if-block "(__protocol & 0xFFFF) == 2"
[23:11:04.762]          // =>  TRUE
[23:11:04.762]        <block atomic="false" info="">
[23:11:04.762]          Message(0, "executing SWD power up");
[23:11:04.764]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:11:04.764]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:11:04.764]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:11:04.764]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:11:04.764]        </block>
[23:11:04.764]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:11:04.764]      </control>
[23:11:04.764]      // end if-block "powered_down"
[23:11:04.764]    </control>
[23:11:04.764]    <block atomic="false" info="">
[23:11:04.764]      __var DEBUG_PORT_VAL    = 0;
[23:11:04.764]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:11:04.764]      __var ACCESS_POINT_VAL  = 0;
[23:11:04.764]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:11:04.764]      __ap = 1; 
[23:11:04.764]        // -> [__ap <= 0x00000001]
[23:11:04.764]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:11:04.768]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:11:04.769]      __ap = 4;
[23:11:04.769]        // -> [__ap <= 0x00000004]
[23:11:04.769]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:11:04.769]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:11:04.769]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:11:04.769]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:11:04.772]    </block>
[23:11:04.772]    <block atomic="false" info="">
[23:11:04.772]      __var nReset = 0x80;
[23:11:04.772]        // -> [nReset <= 0x00000080]
[23:11:04.772]      __var canReadPins = 0;
[23:11:04.772]        // -> [canReadPins <= 0x00000000]
[23:11:04.772]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:11:04.773]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:11:04.773]        // -> [canReadPins <= 0x00000001]
[23:11:04.773]    </block>
[23:11:04.773]    <control if="" while="1" timeout="200" info="">
[23:11:04.773]      // while "1"  (timeout="200")
[23:11:04.773]      // while-condition  =>  TRUE
[23:11:04.773]      // while "1"  (timeout="200")
[23:11:04.773]      // while-condition  =>  TRUE
[23:11:04.773]      // while "1"  (timeout="200")
[23:11:04.773]      // while-condition  =>  TRUE
[23:11:04.773]      // while "1"  (timeout="200")
[23:11:04.773]      // while-condition  =>  TRUE
[23:11:04.773]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.774]      // while "1"  (timeout="200")
[23:11:04.774]      // while-condition  =>  TRUE
[23:11:04.781]      // while "1"  (timeout="200")
[23:11:04.781]      // while-condition  =>  TRUE
[23:11:04.781]      // while "1"  (timeout="200")
[23:11:04.782]      // while-condition  =>  TRUE
[23:11:04.782]      // while "1"  (timeout="200")
[23:11:04.782]      // while-condition  =>  TRUE
[23:11:04.782]      // while "1"  (timeout="200")
[23:11:04.782]      // while-condition  =>  TRUE
[23:11:04.782]      // while "1"  (timeout="200")
[23:11:04.782]      // while-condition  =>  TRUE
[23:11:04.782]      // while "1"  (timeout="200")
[23:11:04.783]      // while-condition  =>  TRUE
[23:11:04.783]      // while "1"  (timeout="200")
[23:11:04.783]      // while-condition  =>  TRUE
[23:11:04.783]      // while "1"  (timeout="200")
[23:11:04.783]      // while-condition  =>  TRUE
[23:11:04.783]      // while "1"  (timeout="200")
[23:11:04.783]      // while-condition  =>  TRUE
[23:11:04.783]      // while "1"  (timeout="200")
[23:11:04.783]      // while-condition  =>  TRUE
[23:11:04.783]      // while "1"  (timeout="200")
[23:11:04.783]      // while-condition  =>  TRUE
[23:11:04.783]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.784]      // while-condition  =>  TRUE
[23:11:04.784]      // while "1"  (timeout="200")
[23:11:04.792]      // while-condition  =>  TRUE
[23:11:04.792]      // while "1"  (timeout="200")
[23:11:04.792]      // while  =>  TIMEOUT
[23:11:04.792]      // end while "1"
[23:11:04.792]    </control>
[23:11:04.792]    <control if="canReadPins" while="" timeout="0" info="">
[23:11:04.792]      // if-block "canReadPins"
[23:11:04.792]        // =>  TRUE
[23:11:04.792]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:11:04.792]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:11:04.792]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:11:04.792]        // while-condition  =>  FALSE
[23:11:04.792]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:11:04.792]      </control>
[23:11:04.792]      // end if-block "canReadPins"
[23:11:04.792]    </control>
[23:11:04.792]    <control if="!canReadPins" while="" timeout="0" info="">
[23:11:04.792]      // if-block "!canReadPins"
[23:11:04.792]        // =>  FALSE
[23:11:04.792]      // skip if-block "!canReadPins"
[23:11:04.792]    </control>
[23:11:04.792]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:11:04.792]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:11:04.792]        // =>  TRUE
[23:11:04.792]      <block atomic="false" info="">
[23:11:04.792]        WriteAP(0x00, 0x190008);
[23:11:04.792]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:11:04.792]        WriteAP(0xF0, 0x01);
[23:11:04.792]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:11:04.792]      </block>
[23:11:04.792]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:11:04.792]    </control>
[23:11:04.792]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:11:04.792]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:11:04.792]        // =>  FALSE
[23:11:04.792]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:11:04.792]    </control>
[23:11:04.792]    <block atomic="false" info="">
[23:11:04.792]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:11:04.792]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:11:04.792]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:11:04.792]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:11:04.800]      __ap = 0; //lets make sure we reset the access point selection
[23:11:04.800]        // -> [__ap <= 0x00000000]
[23:11:04.800]    </block>
[23:11:04.800]  </sequence>
[23:11:04.800]  
[23:11:04.806]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:11:04.806]  
[23:11:04.806]  <debugvars>
[23:11:04.806]    // Pre-defined
[23:11:04.806]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:11:04.806]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:11:04.806]    __dp=0x00000000
[23:11:04.806]    __ap=0x00000000
[23:11:04.806]    __traceout=0x00000000      (Trace Disabled)
[23:11:04.806]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:11:04.806]    __FlashAddr=0x00000000
[23:11:04.806]    __FlashLen=0x00000000
[23:11:04.806]    __FlashArg=0x00000000
[23:11:04.808]    __FlashOp=0x00000000
[23:11:04.808]    __Result=0x00000000
[23:11:04.808]  </debugvars>
[23:11:04.808]  
[23:11:04.808]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:11:04.808]    <block atomic="false" info="">
[23:11:04.808]      __var deviceID = 0;
[23:11:04.808]        // -> [deviceID <= 0x00000000]
[23:11:04.808]      __var version = 0;
[23:11:04.808]        // -> [version <= 0x00000000]
[23:11:04.808]      __var partNum = 0;
[23:11:04.808]        // -> [partNum <= 0x00000000]
[23:11:04.808]      __var manuf = 0;
[23:11:04.808]        // -> [manuf <= 0x00000000]
[23:11:04.809]      __var isMSPM0G1X0X_G3X0X = 0;
[23:11:04.809]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:11:04.809]      __var isProduction = 0;
[23:11:04.809]        // -> [isProduction <= 0x00000000]
[23:11:04.809]      __var continueId = 0;
[23:11:04.809]        // -> [continueId <= 0x00000000]
[23:11:04.809]      deviceID =   Read32(0x41C40004);
[23:11:04.809]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:11:04.809]        // -> [deviceID <= 0x2BB8802F]
[23:11:04.809]      version = deviceID >> 28;
[23:11:04.809]        // -> [version <= 0x00000002]
[23:11:04.809]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:11:04.809]        // -> [partNum <= 0x0000BB88]
[23:11:04.809]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:11:04.809]        // -> [manuf <= 0x00000017]
[23:11:04.812]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:11:04.812]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:11:04.812]      isProduction = (version > 0);
[23:11:04.812]        // -> [isProduction <= 0x00000001]
[23:11:04.812]    </block>
[23:11:04.812]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:11:04.812]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:11:04.812]        // =>  FALSE
[23:11:04.812]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:11:04.812]    </control>
[23:11:04.812]    <control if="continueId == 4" while="" timeout="0" info="">
[23:11:04.812]      // if-block "continueId == 4"
[23:11:04.812]        // =>  FALSE
[23:11:04.812]      // skip if-block "continueId == 4"
[23:11:04.812]    </control>
[23:11:04.812]    <control if="!isProduction" while="" timeout="0" info="">
[23:11:04.812]      // if-block "!isProduction"
[23:11:04.812]        // =>  FALSE
[23:11:04.812]      // skip if-block "!isProduction"
[23:11:04.812]    </control>
[23:11:04.812]  </sequence>
[23:11:04.812]  
[23:15:34.870]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:15:34.870]  
[23:15:34.870]  <debugvars>
[23:15:34.870]    // Pre-defined
[23:15:34.870]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:34.870]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:34.870]    __dp=0x00000000
[23:15:34.870]    __ap=0x00000000
[23:15:34.870]    __traceout=0x00000000      (Trace Disabled)
[23:15:34.870]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:34.870]    __FlashAddr=0x00000000
[23:15:34.870]    __FlashLen=0x00000000
[23:15:34.870]    __FlashArg=0x00000000
[23:15:34.870]    __FlashOp=0x00000000
[23:15:34.870]    __Result=0x00000000
[23:15:34.870]  </debugvars>
[23:15:34.870]  
[23:15:34.870]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:15:34.870]    <block atomic="false" info="">
[23:15:34.870]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:15:34.870]        // -> [isSWJ <= 0x00000001]
[23:15:34.870]      __var hasDormant = __protocol & 0x00020000;
[23:15:34.870]        // -> [hasDormant <= 0x00000000]
[23:15:34.870]      __var protType   = __protocol & 0x0000FFFF;
[23:15:34.870]        // -> [protType <= 0x00000002]
[23:15:34.870]    </block>
[23:15:34.870]    <control if="protType == 1" while="" timeout="0" info="">
[23:15:34.870]      // if-block "protType == 1"
[23:15:34.870]        // =>  FALSE
[23:15:34.870]      // skip if-block "protType == 1"
[23:15:34.870]    </control>
[23:15:34.870]    <control if="protType == 2" while="" timeout="0" info="">
[23:15:34.870]      // if-block "protType == 2"
[23:15:34.870]        // =>  TRUE
[23:15:34.870]      <control if="isSWJ" while="" timeout="0" info="">
[23:15:34.870]        // if-block "isSWJ"
[23:15:34.870]          // =>  TRUE
[23:15:34.870]        <control if="hasDormant" while="" timeout="0" info="">
[23:15:34.870]          // if-block "hasDormant"
[23:15:34.870]            // =>  FALSE
[23:15:34.870]          // skip if-block "hasDormant"
[23:15:34.870]        </control>
[23:15:34.870]        <control if="!hasDormant" while="" timeout="0" info="">
[23:15:34.870]          // if-block "!hasDormant"
[23:15:34.870]            // =>  TRUE
[23:15:34.880]          <block atomic="false" info="">
[23:15:34.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:15:34.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:34.880]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:15:34.881]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:15:34.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:15:34.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:34.882]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:15:34.882]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:15:34.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:15:34.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:34.882]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:15:34.882]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:15:34.882]          </block>
[23:15:34.882]          // end if-block "!hasDormant"
[23:15:34.882]        </control>
[23:15:34.882]        // end if-block "isSWJ"
[23:15:34.882]      </control>
[23:15:34.882]      <control if="!isSWJ" while="" timeout="0" info="">
[23:15:34.882]        // if-block "!isSWJ"
[23:15:34.882]          // =>  FALSE
[23:15:34.882]        // skip if-block "!isSWJ"
[23:15:34.882]      </control>
[23:15:34.882]      <block atomic="false" info="">
[23:15:34.882]        ReadDP(0x0);
[23:15:34.882]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:15:34.882]      </block>
[23:15:34.882]      // end if-block "protType == 2"
[23:15:34.882]    </control>
[23:15:34.882]  </sequence>
[23:15:34.882]  
[23:15:34.882]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:15:34.882]  
[23:15:34.882]  <debugvars>
[23:15:34.882]    // Pre-defined
[23:15:34.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:34.882]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:34.882]    __dp=0x00000000
[23:15:34.882]    __ap=0x00000000
[23:15:34.882]    __traceout=0x00000000      (Trace Disabled)
[23:15:34.882]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:34.882]    __FlashAddr=0x00000000
[23:15:34.882]    __FlashLen=0x00000000
[23:15:34.882]    __FlashArg=0x00000000
[23:15:34.882]    __FlashOp=0x00000000
[23:15:34.882]    __Result=0x00000000
[23:15:34.882]  </debugvars>
[23:15:34.882]  
[23:15:34.882]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:15:34.882]    <block atomic="false" info="">
[23:15:34.882]      __var SW_DP_ABORT       = 0x0;
[23:15:34.882]        // -> [SW_DP_ABORT <= 0x00000000]
[23:15:34.882]      __var DP_CTRL_STAT      = 0x4;
[23:15:34.882]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:15:34.882]      __var DP_SELECT         = 0x8;
[23:15:34.882]        // -> [DP_SELECT <= 0x00000008]
[23:15:34.882]      __var powered_down      = 0;
[23:15:34.882]        // -> [powered_down <= 0x00000000]
[23:15:34.882]      WriteDP(DP_SELECT, 0x00000000);
[23:15:34.882]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:15:34.882]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:15:34.882]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:15:34.890]        // -> [powered_down <= 0x00000001]
[23:15:34.890]    </block>
[23:15:34.890]    <control if="powered_down" while="" timeout="0" info="">
[23:15:34.890]      // if-block "powered_down"
[23:15:34.890]        // =>  TRUE
[23:15:34.890]      <block atomic="false" info="">
[23:15:34.890]        Message(0, "Debug/System power-up request sent");
[23:15:34.892]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:15:34.892]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:15:34.892]      </block>
[23:15:34.892]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:15:34.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:15:34.892]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:15:34.892]        // while-condition  =>  FALSE
[23:15:34.892]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:15:34.892]      </control>
[23:15:34.892]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:15:34.892]        // if-block "(__protocol & 0xFFFF) == 1"
[23:15:34.892]          // =>  FALSE
[23:15:34.892]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:15:34.892]      </control>
[23:15:34.892]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:15:34.892]        // if-block "(__protocol & 0xFFFF) == 2"
[23:15:34.892]          // =>  TRUE
[23:15:34.892]        <block atomic="false" info="">
[23:15:34.892]          Message(0, "executing SWD power up");
[23:15:34.892]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:15:34.892]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:15:34.892]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:15:34.892]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:15:34.892]        </block>
[23:15:34.892]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:15:34.892]      </control>
[23:15:34.900]      // end if-block "powered_down"
[23:15:34.900]    </control>
[23:15:34.900]    <block atomic="false" info="">
[23:15:34.900]      __var DEBUG_PORT_VAL    = 0;
[23:15:34.900]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:15:34.900]      __var ACCESS_POINT_VAL  = 0;
[23:15:34.900]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:15:34.900]      __ap = 1; 
[23:15:34.901]        // -> [__ap <= 0x00000001]
[23:15:34.901]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:15:34.902]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:15:34.902]      __ap = 4;
[23:15:34.902]        // -> [__ap <= 0x00000004]
[23:15:34.902]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:34.903]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:15:34.903]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:15:34.903]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:34.905]    </block>
[23:15:34.905]    <block atomic="false" info="">
[23:15:34.905]      __var nReset = 0x80;
[23:15:34.906]        // -> [nReset <= 0x00000080]
[23:15:34.906]      __var canReadPins = 0;
[23:15:34.906]        // -> [canReadPins <= 0x00000000]
[23:15:34.906]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:15:34.907]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:15:34.907]        // -> [canReadPins <= 0x00000001]
[23:15:34.907]    </block>
[23:15:34.907]    <control if="" while="1" timeout="200" info="">
[23:15:34.907]      // while "1"  (timeout="200")
[23:15:34.907]      // while-condition  =>  TRUE
[23:15:34.907]      // while "1"  (timeout="200")
[23:15:34.907]      // while-condition  =>  TRUE
[23:15:34.907]      // while "1"  (timeout="200")
[23:15:34.907]      // while-condition  =>  TRUE
[23:15:34.907]      // while "1"  (timeout="200")
[23:15:34.907]      // while-condition  =>  TRUE
[23:15:34.907]      // while "1"  (timeout="200")
[23:15:34.907]      // while-condition  =>  TRUE
[23:15:34.907]      // while "1"  (timeout="200")
[23:15:34.908]      // while-condition  =>  TRUE
[23:15:34.908]      // while "1"  (timeout="200")
[23:15:34.908]      // while-condition  =>  TRUE
[23:15:34.908]      // while "1"  (timeout="200")
[23:15:34.908]      // while-condition  =>  TRUE
[23:15:34.908]      // while "1"  (timeout="200")
[23:15:34.908]      // while-condition  =>  TRUE
[23:15:34.908]      // while "1"  (timeout="200")
[23:15:34.908]      // while-condition  =>  TRUE
[23:15:34.908]      // while "1"  (timeout="200")
[23:15:34.908]      // while-condition  =>  TRUE
[23:15:34.908]      // while "1"  (timeout="200")
[23:15:34.908]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.910]      // while "1"  (timeout="200")
[23:15:34.910]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.912]      // while "1"  (timeout="200")
[23:15:34.912]      // while-condition  =>  TRUE
[23:15:34.916]      // while "1"  (timeout="200")
[23:15:34.916]      // while  =>  TIMEOUT
[23:15:34.916]      // end while "1"
[23:15:34.916]    </control>
[23:15:34.916]    <control if="canReadPins" while="" timeout="0" info="">
[23:15:34.916]      // if-block "canReadPins"
[23:15:34.916]        // =>  TRUE
[23:15:34.916]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:15:34.916]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:15:34.916]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:15:34.916]        // while-condition  =>  FALSE
[23:15:34.916]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:15:34.916]      </control>
[23:15:34.916]      // end if-block "canReadPins"
[23:15:34.916]    </control>
[23:15:34.916]    <control if="!canReadPins" while="" timeout="0" info="">
[23:15:34.916]      // if-block "!canReadPins"
[23:15:34.916]        // =>  FALSE
[23:15:34.916]      // skip if-block "!canReadPins"
[23:15:34.916]    </control>
[23:15:34.916]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:15:34.916]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:34.916]        // =>  TRUE
[23:15:34.916]      <block atomic="false" info="">
[23:15:34.916]        WriteAP(0x00, 0x190008);
[23:15:34.920]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:34.920]        WriteAP(0xF0, 0x01);
[23:15:34.921]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:34.921]      </block>
[23:15:34.921]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:34.921]    </control>
[23:15:34.921]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:15:34.921]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:34.921]        // =>  FALSE
[23:15:34.921]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:34.921]    </control>
[23:15:34.921]    <block atomic="false" info="">
[23:15:34.921]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:34.921]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:15:34.921]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:15:34.921]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:34.921]      __ap = 0; //lets make sure we reset the access point selection
[23:15:34.921]        // -> [__ap <= 0x00000000]
[23:15:34.921]    </block>
[23:15:34.921]  </sequence>
[23:15:34.921]  
[23:15:34.932]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:15:34.932]  
[23:15:34.932]  <debugvars>
[23:15:34.932]    // Pre-defined
[23:15:34.932]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:34.932]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:34.932]    __dp=0x00000000
[23:15:34.932]    __ap=0x00000000
[23:15:34.932]    __traceout=0x00000000      (Trace Disabled)
[23:15:34.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:34.932]    __FlashAddr=0x00000000
[23:15:34.932]    __FlashLen=0x00000000
[23:15:34.932]    __FlashArg=0x00000000
[23:15:34.932]    __FlashOp=0x00000000
[23:15:34.932]    __Result=0x00000000
[23:15:34.932]  </debugvars>
[23:15:34.932]  
[23:15:34.932]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:15:34.932]    <block atomic="false" info="">
[23:15:34.932]      __var deviceID = 0;
[23:15:34.932]        // -> [deviceID <= 0x00000000]
[23:15:34.932]      __var version = 0;
[23:15:34.932]        // -> [version <= 0x00000000]
[23:15:34.932]      __var partNum = 0;
[23:15:34.932]        // -> [partNum <= 0x00000000]
[23:15:34.932]      __var manuf = 0;
[23:15:34.932]        // -> [manuf <= 0x00000000]
[23:15:34.932]      __var isMSPM0G1X0X_G3X0X = 0;
[23:15:34.932]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:15:34.932]      __var isProduction = 0;
[23:15:34.932]        // -> [isProduction <= 0x00000000]
[23:15:34.932]      __var continueId = 0;
[23:15:34.932]        // -> [continueId <= 0x00000000]
[23:15:34.932]      deviceID =   Read32(0x41C40004);
[23:15:34.937]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:15:34.937]        // -> [deviceID <= 0x2BB8802F]
[23:15:34.937]      version = deviceID >> 28;
[23:15:34.937]        // -> [version <= 0x00000002]
[23:15:34.937]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:15:34.937]        // -> [partNum <= 0x0000BB88]
[23:15:34.937]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:15:34.937]        // -> [manuf <= 0x00000017]
[23:15:34.937]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:15:34.937]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:15:34.937]      isProduction = (version > 0);
[23:15:34.937]        // -> [isProduction <= 0x00000001]
[23:15:34.937]    </block>
[23:15:34.937]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:15:34.937]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:15:34.937]        // =>  FALSE
[23:15:34.937]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:15:34.937]    </control>
[23:15:34.937]    <control if="continueId == 4" while="" timeout="0" info="">
[23:15:34.937]      // if-block "continueId == 4"
[23:15:34.937]        // =>  FALSE
[23:15:34.937]      // skip if-block "continueId == 4"
[23:15:34.937]    </control>
[23:15:34.937]    <control if="!isProduction" while="" timeout="0" info="">
[23:15:34.937]      // if-block "!isProduction"
[23:15:34.937]        // =>  FALSE
[23:15:34.937]      // skip if-block "!isProduction"
[23:15:34.937]    </control>
[23:15:34.940]  </sequence>
[23:15:34.940]  
[23:15:38.951]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:15:38.951]  
[23:15:38.962]  <debugvars>
[23:15:38.962]    // Pre-defined
[23:15:38.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:38.962]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:15:38.962]    __dp=0x00000000
[23:15:38.962]    __ap=0x00000000
[23:15:38.962]    __traceout=0x00000000      (Trace Disabled)
[23:15:38.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:38.962]    __FlashAddr=0x00000000
[23:15:38.962]    __FlashLen=0x00000000
[23:15:38.962]    __FlashArg=0x00000000
[23:15:38.963]    __FlashOp=0x00000000
[23:15:38.963]    __Result=0x00000000
[23:15:38.963]  </debugvars>
[23:15:38.963]  
[23:15:38.963]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:15:38.963]    <block atomic="false" info="">
[23:15:38.963]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:15:38.963]        // -> [isSWJ <= 0x00000001]
[23:15:38.963]      __var hasDormant = __protocol & 0x00020000;
[23:15:38.963]        // -> [hasDormant <= 0x00000000]
[23:15:38.963]      __var protType   = __protocol & 0x0000FFFF;
[23:15:38.963]        // -> [protType <= 0x00000002]
[23:15:38.963]    </block>
[23:15:38.963]    <control if="protType == 1" while="" timeout="0" info="">
[23:15:38.963]      // if-block "protType == 1"
[23:15:38.963]        // =>  FALSE
[23:15:38.963]      // skip if-block "protType == 1"
[23:15:38.963]    </control>
[23:15:38.963]    <control if="protType == 2" while="" timeout="0" info="">
[23:15:38.965]      // if-block "protType == 2"
[23:15:38.965]        // =>  TRUE
[23:15:38.965]      <control if="isSWJ" while="" timeout="0" info="">
[23:15:38.965]        // if-block "isSWJ"
[23:15:38.965]          // =>  TRUE
[23:15:38.965]        <control if="hasDormant" while="" timeout="0" info="">
[23:15:38.965]          // if-block "hasDormant"
[23:15:38.966]            // =>  FALSE
[23:15:38.966]          // skip if-block "hasDormant"
[23:15:38.966]        </control>
[23:15:38.966]        <control if="!hasDormant" while="" timeout="0" info="">
[23:15:38.966]          // if-block "!hasDormant"
[23:15:38.966]            // =>  TRUE
[23:15:38.966]          <block atomic="false" info="">
[23:15:38.966]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:15:38.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:38.966]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:15:38.966]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:15:38.966]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:15:38.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:38.966]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:15:38.966]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:15:38.966]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:15:38.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:38.966]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:15:38.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:15:38.966]          </block>
[23:15:38.966]          // end if-block "!hasDormant"
[23:15:38.966]        </control>
[23:15:38.970]        // end if-block "isSWJ"
[23:15:38.970]      </control>
[23:15:38.970]      <control if="!isSWJ" while="" timeout="0" info="">
[23:15:38.970]        // if-block "!isSWJ"
[23:15:38.970]          // =>  FALSE
[23:15:38.970]        // skip if-block "!isSWJ"
[23:15:38.970]      </control>
[23:15:38.970]      <block atomic="false" info="">
[23:15:38.970]        ReadDP(0x0);
[23:15:38.970]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:15:38.970]      </block>
[23:15:38.970]      // end if-block "protType == 2"
[23:15:38.970]    </control>
[23:15:38.970]  </sequence>
[23:15:38.972]  
[23:15:38.972]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:15:38.972]  
[23:15:38.972]  <debugvars>
[23:15:38.972]    // Pre-defined
[23:15:38.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:38.972]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:15:38.972]    __dp=0x00000000
[23:15:38.972]    __ap=0x00000000
[23:15:38.973]    __traceout=0x00000000      (Trace Disabled)
[23:15:38.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:38.973]    __FlashAddr=0x00000000
[23:15:38.973]    __FlashLen=0x00000000
[23:15:38.973]    __FlashArg=0x00000000
[23:15:38.973]    __FlashOp=0x00000000
[23:15:38.973]    __Result=0x00000000
[23:15:38.973]  </debugvars>
[23:15:38.973]  
[23:15:38.974]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:15:38.974]    <block atomic="false" info="">
[23:15:38.974]      __var SW_DP_ABORT       = 0x0;
[23:15:38.974]        // -> [SW_DP_ABORT <= 0x00000000]
[23:15:38.974]      __var DP_CTRL_STAT      = 0x4;
[23:15:38.974]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:15:38.974]      __var DP_SELECT         = 0x8;
[23:15:38.974]        // -> [DP_SELECT <= 0x00000008]
[23:15:38.974]      __var powered_down      = 0;
[23:15:38.974]        // -> [powered_down <= 0x00000000]
[23:15:38.974]      WriteDP(DP_SELECT, 0x00000000);
[23:15:38.975]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:15:38.975]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:15:38.975]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:15:38.975]        // -> [powered_down <= 0x00000001]
[23:15:38.975]    </block>
[23:15:38.975]    <control if="powered_down" while="" timeout="0" info="">
[23:15:38.975]      // if-block "powered_down"
[23:15:38.975]        // =>  TRUE
[23:15:38.977]      <block atomic="false" info="">
[23:15:38.977]        Message(0, "Debug/System power-up request sent");
[23:15:38.978]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:15:38.978]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:15:38.980]      </block>
[23:15:38.980]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:15:38.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:15:38.981]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:15:38.981]        // while-condition  =>  FALSE
[23:15:38.981]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:15:38.981]      </control>
[23:15:38.981]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:15:38.981]        // if-block "(__protocol & 0xFFFF) == 1"
[23:15:38.981]          // =>  FALSE
[23:15:38.981]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:15:38.981]      </control>
[23:15:38.982]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:15:38.982]        // if-block "(__protocol & 0xFFFF) == 2"
[23:15:38.982]          // =>  TRUE
[23:15:38.982]        <block atomic="false" info="">
[23:15:38.982]          Message(0, "executing SWD power up");
[23:15:38.982]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:15:38.984]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:15:38.984]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:15:38.984]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:15:38.984]        </block>
[23:15:38.984]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:15:38.985]      </control>
[23:15:38.985]      // end if-block "powered_down"
[23:15:38.985]    </control>
[23:15:38.985]    <block atomic="false" info="">
[23:15:38.985]      __var DEBUG_PORT_VAL    = 0;
[23:15:38.986]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:15:38.986]      __var ACCESS_POINT_VAL  = 0;
[23:15:38.986]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:15:38.986]      __ap = 1; 
[23:15:38.986]        // -> [__ap <= 0x00000001]
[23:15:38.986]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:15:38.986]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:15:38.986]      __ap = 4;
[23:15:38.986]        // -> [__ap <= 0x00000004]
[23:15:38.986]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:38.986]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:15:38.986]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:15:38.986]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:38.991]    </block>
[23:15:38.991]    <block atomic="false" info="">
[23:15:38.991]      __var nReset = 0x80;
[23:15:38.991]        // -> [nReset <= 0x00000080]
[23:15:38.991]      __var canReadPins = 0;
[23:15:38.991]        // -> [canReadPins <= 0x00000000]
[23:15:38.991]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:15:38.992]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:15:38.992]        // -> [canReadPins <= 0x00000001]
[23:15:38.992]    </block>
[23:15:38.992]    <control if="" while="1" timeout="200" info="">
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.992]      // while-condition  =>  TRUE
[23:15:38.992]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.996]      // while "1"  (timeout="200")
[23:15:38.996]      // while-condition  =>  TRUE
[23:15:38.999]      // while "1"  (timeout="200")
[23:15:38.999]      // while-condition  =>  TRUE
[23:15:38.999]      // while "1"  (timeout="200")
[23:15:38.999]      // while-condition  =>  TRUE
[23:15:38.999]      // while "1"  (timeout="200")
[23:15:38.999]      // while-condition  =>  TRUE
[23:15:38.999]      // while "1"  (timeout="200")
[23:15:38.999]      // while-condition  =>  TRUE
[23:15:38.999]      // while "1"  (timeout="200")
[23:15:38.999]      // while-condition  =>  TRUE
[23:15:38.999]      // while "1"  (timeout="200")
[23:15:39.001]      // while-condition  =>  TRUE
[23:15:39.001]      // while "1"  (timeout="200")
[23:15:39.001]      // while-condition  =>  TRUE
[23:15:39.001]      // while "1"  (timeout="200")
[23:15:39.001]      // while-condition  =>  TRUE
[23:15:39.001]      // while "1"  (timeout="200")
[23:15:39.001]      // while-condition  =>  TRUE
[23:15:39.001]      // while "1"  (timeout="200")
[23:15:39.001]      // while-condition  =>  TRUE
[23:15:39.001]      // while "1"  (timeout="200")
[23:15:39.001]      // while-condition  =>  TRUE
[23:15:39.001]      // while "1"  (timeout="200")
[23:15:39.001]      // while-condition  =>  TRUE
[23:15:39.001]      // while "1"  (timeout="200")
[23:15:39.002]      // while-condition  =>  TRUE
[23:15:39.002]      // while "1"  (timeout="200")
[23:15:39.002]      // while-condition  =>  TRUE
[23:15:39.002]      // while "1"  (timeout="200")
[23:15:39.002]      // while-condition  =>  TRUE
[23:15:39.002]      // while "1"  (timeout="200")
[23:15:39.002]      // while-condition  =>  TRUE
[23:15:39.002]      // while "1"  (timeout="200")
[23:15:39.002]      // while-condition  =>  TRUE
[23:15:39.002]      // while "1"  (timeout="200")
[23:15:39.002]      // while-condition  =>  TRUE
[23:15:39.002]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.003]      // while "1"  (timeout="200")
[23:15:39.003]      // while-condition  =>  TRUE
[23:15:39.005]      // while "1"  (timeout="200")
[23:15:39.005]      // while-condition  =>  TRUE
[23:15:39.005]      // while "1"  (timeout="200")
[23:15:39.005]      // while-condition  =>  TRUE
[23:15:39.005]      // while "1"  (timeout="200")
[23:15:39.005]      // while-condition  =>  TRUE
[23:15:39.005]      // while "1"  (timeout="200")
[23:15:39.005]      // while-condition  =>  TRUE
[23:15:39.005]      // while "1"  (timeout="200")
[23:15:39.005]      // while-condition  =>  TRUE
[23:15:39.006]      // while "1"  (timeout="200")
[23:15:39.006]      // while  =>  TIMEOUT
[23:15:39.006]      // end while "1"
[23:15:39.006]    </control>
[23:15:39.006]    <control if="canReadPins" while="" timeout="0" info="">
[23:15:39.006]      // if-block "canReadPins"
[23:15:39.006]        // =>  TRUE
[23:15:39.006]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:15:39.006]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:15:39.006]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:15:39.006]        // while-condition  =>  FALSE
[23:15:39.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:15:39.006]      </control>
[23:15:39.006]      // end if-block "canReadPins"
[23:15:39.006]    </control>
[23:15:39.006]    <control if="!canReadPins" while="" timeout="0" info="">
[23:15:39.006]      // if-block "!canReadPins"
[23:15:39.006]        // =>  FALSE
[23:15:39.006]      // skip if-block "!canReadPins"
[23:15:39.006]    </control>
[23:15:39.006]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:15:39.006]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:39.006]        // =>  TRUE
[23:15:39.006]      <block atomic="false" info="">
[23:15:39.006]        WriteAP(0x00, 0x190008);
[23:15:39.006]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:39.010]        WriteAP(0xF0, 0x01);
[23:15:39.011]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:39.011]      </block>
[23:15:39.011]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:39.011]    </control>
[23:15:39.011]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:15:39.011]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:39.012]        // =>  FALSE
[23:15:39.012]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:39.012]    </control>
[23:15:39.012]    <block atomic="false" info="">
[23:15:39.012]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:39.012]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:15:39.012]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:15:39.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:39.014]      __ap = 0; //lets make sure we reset the access point selection
[23:15:39.014]        // -> [__ap <= 0x00000000]
[23:15:39.014]    </block>
[23:15:39.014]  </sequence>
[23:15:39.014]  
[23:15:39.021]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:15:39.022]  
[23:15:39.022]  <debugvars>
[23:15:39.022]    // Pre-defined
[23:15:39.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:39.022]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:15:39.022]    __dp=0x00000000
[23:15:39.022]    __ap=0x00000000
[23:15:39.022]    __traceout=0x00000000      (Trace Disabled)
[23:15:39.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:39.022]    __FlashAddr=0x00000000
[23:15:39.022]    __FlashLen=0x00000000
[23:15:39.022]    __FlashArg=0x00000000
[23:15:39.022]    __FlashOp=0x00000000
[23:15:39.022]    __Result=0x00000000
[23:15:39.022]  </debugvars>
[23:15:39.022]  
[23:15:39.022]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:15:39.022]    <block atomic="false" info="">
[23:15:39.022]      __var deviceID = 0;
[23:15:39.022]        // -> [deviceID <= 0x00000000]
[23:15:39.022]      __var version = 0;
[23:15:39.024]        // -> [version <= 0x00000000]
[23:15:39.024]      __var partNum = 0;
[23:15:39.024]        // -> [partNum <= 0x00000000]
[23:15:39.024]      __var manuf = 0;
[23:15:39.024]        // -> [manuf <= 0x00000000]
[23:15:39.024]      __var isMSPM0G1X0X_G3X0X = 0;
[23:15:39.024]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:15:39.024]      __var isProduction = 0;
[23:15:39.024]        // -> [isProduction <= 0x00000000]
[23:15:39.024]      __var continueId = 0;
[23:15:39.024]        // -> [continueId <= 0x00000000]
[23:15:39.024]      deviceID =   Read32(0x41C40004);
[23:15:39.026]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:15:39.027]        // -> [deviceID <= 0x2BB8802F]
[23:15:39.027]      version = deviceID >> 28;
[23:15:39.027]        // -> [version <= 0x00000002]
[23:15:39.027]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:15:39.027]        // -> [partNum <= 0x0000BB88]
[23:15:39.027]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:15:39.027]        // -> [manuf <= 0x00000017]
[23:15:39.027]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:15:39.027]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:15:39.027]      isProduction = (version > 0);
[23:15:39.027]        // -> [isProduction <= 0x00000001]
[23:15:39.027]    </block>
[23:15:39.027]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:15:39.027]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:15:39.027]        // =>  FALSE
[23:15:39.027]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:15:39.027]    </control>
[23:15:39.027]    <control if="continueId == 4" while="" timeout="0" info="">
[23:15:39.027]      // if-block "continueId == 4"
[23:15:39.027]        // =>  FALSE
[23:15:39.027]      // skip if-block "continueId == 4"
[23:15:39.027]    </control>
[23:15:39.027]    <control if="!isProduction" while="" timeout="0" info="">
[23:15:39.027]      // if-block "!isProduction"
[23:15:39.027]        // =>  FALSE
[23:15:39.027]      // skip if-block "!isProduction"
[23:15:39.027]    </control>
[23:15:39.027]  </sequence>
[23:15:39.027]  
[23:20:32.300]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:20:32.300]  
[23:20:32.300]  <debugvars>
[23:20:32.300]    // Pre-defined
[23:20:32.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:32.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:20:32.301]    __dp=0x00000000
[23:20:32.301]    __ap=0x00000000
[23:20:32.301]    __traceout=0x00000000      (Trace Disabled)
[23:20:32.301]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:32.301]    __FlashAddr=0x00000000
[23:20:32.301]    __FlashLen=0x00000000
[23:20:32.301]    __FlashArg=0x00000000
[23:20:32.301]    __FlashOp=0x00000000
[23:20:32.301]    __Result=0x00000000
[23:20:32.302]  </debugvars>
[23:20:32.302]  
[23:20:32.302]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:20:32.302]    <block atomic="false" info="">
[23:20:32.302]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:20:32.302]        // -> [isSWJ <= 0x00000001]
[23:20:32.302]      __var hasDormant = __protocol & 0x00020000;
[23:20:32.302]        // -> [hasDormant <= 0x00000000]
[23:20:32.302]      __var protType   = __protocol & 0x0000FFFF;
[23:20:32.303]        // -> [protType <= 0x00000002]
[23:20:32.303]    </block>
[23:20:32.303]    <control if="protType == 1" while="" timeout="0" info="">
[23:20:32.303]      // if-block "protType == 1"
[23:20:32.303]        // =>  FALSE
[23:20:32.303]      // skip if-block "protType == 1"
[23:20:32.303]    </control>
[23:20:32.303]    <control if="protType == 2" while="" timeout="0" info="">
[23:20:32.303]      // if-block "protType == 2"
[23:20:32.303]        // =>  TRUE
[23:20:32.303]      <control if="isSWJ" while="" timeout="0" info="">
[23:20:32.304]        // if-block "isSWJ"
[23:20:32.304]          // =>  TRUE
[23:20:32.304]        <control if="hasDormant" while="" timeout="0" info="">
[23:20:32.304]          // if-block "hasDormant"
[23:20:32.304]            // =>  FALSE
[23:20:32.304]          // skip if-block "hasDormant"
[23:20:32.304]        </control>
[23:20:32.305]        <control if="!hasDormant" while="" timeout="0" info="">
[23:20:32.305]          // if-block "!hasDormant"
[23:20:32.305]            // =>  TRUE
[23:20:32.305]          <block atomic="false" info="">
[23:20:32.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:20:32.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:32.306]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:20:32.306]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:20:32.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:20:32.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:32.307]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:20:32.307]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:20:32.307]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:20:32.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:32.308]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:20:32.308]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:20:32.308]          </block>
[23:20:32.308]          // end if-block "!hasDormant"
[23:20:32.308]        </control>
[23:20:32.308]        // end if-block "isSWJ"
[23:20:32.309]      </control>
[23:20:32.309]      <control if="!isSWJ" while="" timeout="0" info="">
[23:20:32.309]        // if-block "!isSWJ"
[23:20:32.309]          // =>  FALSE
[23:20:32.309]        // skip if-block "!isSWJ"
[23:20:32.309]      </control>
[23:20:32.309]      <block atomic="false" info="">
[23:20:32.309]        ReadDP(0x0);
[23:20:32.310]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:20:32.310]      </block>
[23:20:32.310]      // end if-block "protType == 2"
[23:20:32.310]    </control>
[23:20:32.310]  </sequence>
[23:20:32.310]  
[23:20:32.311]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:20:32.311]  
[23:20:32.311]  <debugvars>
[23:20:32.311]    // Pre-defined
[23:20:32.311]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:32.312]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:20:32.312]    __dp=0x00000000
[23:20:32.312]    __ap=0x00000000
[23:20:32.312]    __traceout=0x00000000      (Trace Disabled)
[23:20:32.312]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:32.312]    __FlashAddr=0x00000000
[23:20:32.312]    __FlashLen=0x00000000
[23:20:32.312]    __FlashArg=0x00000000
[23:20:32.312]    __FlashOp=0x00000000
[23:20:32.312]    __Result=0x00000000
[23:20:32.312]  </debugvars>
[23:20:32.313]  
[23:20:32.313]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:20:32.313]    <block atomic="false" info="">
[23:20:32.313]      __var SW_DP_ABORT       = 0x0;
[23:20:32.313]        // -> [SW_DP_ABORT <= 0x00000000]
[23:20:32.314]      __var DP_CTRL_STAT      = 0x4;
[23:20:32.314]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:20:32.314]      __var DP_SELECT         = 0x8;
[23:20:32.314]        // -> [DP_SELECT <= 0x00000008]
[23:20:32.314]      __var powered_down      = 0;
[23:20:32.314]        // -> [powered_down <= 0x00000000]
[23:20:32.314]      WriteDP(DP_SELECT, 0x00000000);
[23:20:32.315]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:20:32.315]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:20:32.316]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:20:32.316]        // -> [powered_down <= 0x00000001]
[23:20:32.316]    </block>
[23:20:32.316]    <control if="powered_down" while="" timeout="0" info="">
[23:20:32.316]      // if-block "powered_down"
[23:20:32.316]        // =>  TRUE
[23:20:32.316]      <block atomic="false" info="">
[23:20:32.316]        Message(0, "Debug/System power-up request sent");
[23:20:32.319]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:20:32.320]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:20:32.320]      </block>
[23:20:32.320]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:20:32.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:20:32.321]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:20:32.321]        // while-condition  =>  FALSE
[23:20:32.321]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:20:32.321]      </control>
[23:20:32.321]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:20:32.322]        // if-block "(__protocol & 0xFFFF) == 1"
[23:20:32.322]          // =>  FALSE
[23:20:32.322]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:20:32.322]      </control>
[23:20:32.322]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:20:32.322]        // if-block "(__protocol & 0xFFFF) == 2"
[23:20:32.322]          // =>  TRUE
[23:20:32.322]        <block atomic="false" info="">
[23:20:32.322]          Message(0, "executing SWD power up");
[23:20:32.324]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:20:32.325]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:20:32.326]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:20:32.326]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:20:32.326]        </block>
[23:20:32.326]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:20:32.326]      </control>
[23:20:32.326]      // end if-block "powered_down"
[23:20:32.326]    </control>
[23:20:32.326]    <block atomic="false" info="">
[23:20:32.327]      __var DEBUG_PORT_VAL    = 0;
[23:20:32.327]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:20:32.327]      __var ACCESS_POINT_VAL  = 0;
[23:20:32.327]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:20:32.327]      __ap = 1; 
[23:20:32.327]        // -> [__ap <= 0x00000001]
[23:20:32.327]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:20:32.328]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:20:32.328]      __ap = 4;
[23:20:32.329]        // -> [__ap <= 0x00000004]
[23:20:32.329]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:20:32.330]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:20:32.330]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:20:32.330]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:20:32.331]    </block>
[23:20:32.331]    <block atomic="false" info="">
[23:20:32.331]      __var nReset = 0x80;
[23:20:32.332]        // -> [nReset <= 0x00000080]
[23:20:32.332]      __var canReadPins = 0;
[23:20:32.332]        // -> [canReadPins <= 0x00000000]
[23:20:32.332]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:20:32.333]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:20:32.333]        // -> [canReadPins <= 0x00000001]
[23:20:32.333]    </block>
[23:20:32.333]    <control if="" while="1" timeout="200" info="">
[23:20:32.333]      // while "1"  (timeout="200")
[23:20:32.333]      // while-condition  =>  TRUE
[23:20:32.334]      // while "1"  (timeout="200")
[23:20:32.334]      // while  =>  TIMEOUT
[23:20:32.334]      // end while "1"
[23:20:32.334]    </control>
[23:20:32.334]    <control if="canReadPins" while="" timeout="0" info="">
[23:20:32.334]      // if-block "canReadPins"
[23:20:32.334]        // =>  TRUE
[23:20:32.334]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:20:32.334]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:20:32.335]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:20:32.335]        // while-condition  =>  FALSE
[23:20:32.335]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:20:32.335]      </control>
[23:20:32.335]      // end if-block "canReadPins"
[23:20:32.335]    </control>
[23:20:32.335]    <control if="!canReadPins" while="" timeout="0" info="">
[23:20:32.335]      // if-block "!canReadPins"
[23:20:32.335]        // =>  FALSE
[23:20:32.335]      // skip if-block "!canReadPins"
[23:20:32.335]    </control>
[23:20:32.335]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:20:32.335]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:20:32.337]        // =>  TRUE
[23:20:32.337]      <block atomic="false" info="">
[23:20:32.337]        WriteAP(0x00, 0x190008);
[23:20:32.337]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:20:32.338]        WriteAP(0xF0, 0x01);
[23:20:32.339]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:20:32.339]      </block>
[23:20:32.339]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:20:32.339]    </control>
[23:20:32.339]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:20:32.339]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:20:32.339]        // =>  FALSE
[23:20:32.339]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:20:32.339]    </control>
[23:20:32.339]    <block atomic="false" info="">
[23:20:32.340]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:20:32.341]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:20:32.341]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:20:32.341]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:20:32.342]      __ap = 0; //lets make sure we reset the access point selection
[23:20:32.342]        // -> [__ap <= 0x00000000]
[23:20:32.342]    </block>
[23:20:32.343]  </sequence>
[23:20:32.343]  
[23:20:32.348]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:20:32.348]  
[23:20:32.349]  <debugvars>
[23:20:32.349]    // Pre-defined
[23:20:32.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:32.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:20:32.349]    __dp=0x00000000
[23:20:32.349]    __ap=0x00000000
[23:20:32.349]    __traceout=0x00000000      (Trace Disabled)
[23:20:32.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:32.349]    __FlashAddr=0x00000000
[23:20:32.349]    __FlashLen=0x00000000
[23:20:32.349]    __FlashArg=0x00000000
[23:20:32.349]    __FlashOp=0x00000000
[23:20:32.351]    __Result=0x00000000
[23:20:32.351]  </debugvars>
[23:20:32.351]  
[23:20:32.351]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:20:32.351]    <block atomic="false" info="">
[23:20:32.351]      __var deviceID = 0;
[23:20:32.351]        // -> [deviceID <= 0x00000000]
[23:20:32.351]      __var version = 0;
[23:20:32.352]        // -> [version <= 0x00000000]
[23:20:32.352]      __var partNum = 0;
[23:20:32.352]        // -> [partNum <= 0x00000000]
[23:20:32.352]      __var manuf = 0;
[23:20:32.352]        // -> [manuf <= 0x00000000]
[23:20:32.352]      __var isMSPM0G1X0X_G3X0X = 0;
[23:20:32.353]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:20:32.353]      __var isProduction = 0;
[23:20:32.353]        // -> [isProduction <= 0x00000000]
[23:20:32.353]      __var continueId = 0;
[23:20:32.353]        // -> [continueId <= 0x00000000]
[23:20:32.353]      deviceID =   Read32(0x41C40004);
[23:20:32.355]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:20:32.355]        // -> [deviceID <= 0x2BB8802F]
[23:20:32.355]      version = deviceID >> 28;
[23:20:32.355]        // -> [version <= 0x00000002]
[23:20:32.355]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:20:32.355]        // -> [partNum <= 0x0000BB88]
[23:20:32.355]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:20:32.355]        // -> [manuf <= 0x00000017]
[23:20:32.355]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:20:32.355]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:20:32.356]      isProduction = (version > 0);
[23:20:32.356]        // -> [isProduction <= 0x00000001]
[23:20:32.356]    </block>
[23:20:32.356]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:20:32.356]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:20:32.356]        // =>  FALSE
[23:20:32.356]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:20:32.356]    </control>
[23:20:32.356]    <control if="continueId == 4" while="" timeout="0" info="">
[23:20:32.356]      // if-block "continueId == 4"
[23:20:32.356]        // =>  FALSE
[23:20:32.356]      // skip if-block "continueId == 4"
[23:20:32.356]    </control>
[23:20:32.356]    <control if="!isProduction" while="" timeout="0" info="">
[23:20:32.356]      // if-block "!isProduction"
[23:20:32.356]        // =>  FALSE
[23:20:32.356]      // skip if-block "!isProduction"
[23:20:32.356]    </control>
[23:20:32.357]  </sequence>
[23:20:32.357]  
[23:20:35.799]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:20:35.799]  
[23:20:35.799]  <debugvars>
[23:20:35.799]    // Pre-defined
[23:20:35.800]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:35.800]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:20:35.800]    __dp=0x00000000
[23:20:35.800]    __ap=0x00000000
[23:20:35.800]    __traceout=0x00000000      (Trace Disabled)
[23:20:35.800]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:35.800]    __FlashAddr=0x00000000
[23:20:35.800]    __FlashLen=0x00000000
[23:20:35.800]    __FlashArg=0x00000000
[23:20:35.800]    __FlashOp=0x00000000
[23:20:35.800]    __Result=0x00000000
[23:20:35.801]  </debugvars>
[23:20:35.801]  
[23:20:35.801]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:20:35.801]    <block atomic="false" info="">
[23:20:35.801]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:20:35.801]        // -> [isSWJ <= 0x00000001]
[23:20:35.801]      __var hasDormant = __protocol & 0x00020000;
[23:20:35.801]        // -> [hasDormant <= 0x00000000]
[23:20:35.801]      __var protType   = __protocol & 0x0000FFFF;
[23:20:35.801]        // -> [protType <= 0x00000002]
[23:20:35.802]    </block>
[23:20:35.802]    <control if="protType == 1" while="" timeout="0" info="">
[23:20:35.802]      // if-block "protType == 1"
[23:20:35.802]        // =>  FALSE
[23:20:35.802]      // skip if-block "protType == 1"
[23:20:35.802]    </control>
[23:20:35.802]    <control if="protType == 2" while="" timeout="0" info="">
[23:20:35.802]      // if-block "protType == 2"
[23:20:35.802]        // =>  TRUE
[23:20:35.802]      <control if="isSWJ" while="" timeout="0" info="">
[23:20:35.802]        // if-block "isSWJ"
[23:20:35.803]          // =>  TRUE
[23:20:35.803]        <control if="hasDormant" while="" timeout="0" info="">
[23:20:35.803]          // if-block "hasDormant"
[23:20:35.803]            // =>  FALSE
[23:20:35.803]          // skip if-block "hasDormant"
[23:20:35.803]        </control>
[23:20:35.803]        <control if="!hasDormant" while="" timeout="0" info="">
[23:20:35.803]          // if-block "!hasDormant"
[23:20:35.804]            // =>  TRUE
[23:20:35.804]          <block atomic="false" info="">
[23:20:35.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:20:35.804]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:35.804]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:20:35.805]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:20:35.805]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:20:35.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:35.805]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:20:35.806]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:20:35.806]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:20:35.806]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:35.806]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:20:35.807]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:20:35.807]          </block>
[23:20:35.807]          // end if-block "!hasDormant"
[23:20:35.807]        </control>
[23:20:35.807]        // end if-block "isSWJ"
[23:20:35.807]      </control>
[23:20:35.807]      <control if="!isSWJ" while="" timeout="0" info="">
[23:20:35.807]        // if-block "!isSWJ"
[23:20:35.807]          // =>  FALSE
[23:20:35.807]        // skip if-block "!isSWJ"
[23:20:35.808]      </control>
[23:20:35.808]      <block atomic="false" info="">
[23:20:35.808]        ReadDP(0x0);
[23:20:35.808]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:20:35.808]      </block>
[23:20:35.808]      // end if-block "protType == 2"
[23:20:35.808]    </control>
[23:20:35.809]  </sequence>
[23:20:35.809]  
[23:20:35.809]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:20:35.809]  
[23:20:35.810]  <debugvars>
[23:20:35.810]    // Pre-defined
[23:20:35.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:35.810]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:20:35.810]    __dp=0x00000000
[23:20:35.810]    __ap=0x00000000
[23:20:35.811]    __traceout=0x00000000      (Trace Disabled)
[23:20:35.811]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:35.811]    __FlashAddr=0x00000000
[23:20:35.811]    __FlashLen=0x00000000
[23:20:35.811]    __FlashArg=0x00000000
[23:20:35.811]    __FlashOp=0x00000000
[23:20:35.812]    __Result=0x00000000
[23:20:35.812]  </debugvars>
[23:20:35.812]  
[23:20:35.812]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:20:35.812]    <block atomic="false" info="">
[23:20:35.812]      __var SW_DP_ABORT       = 0x0;
[23:20:35.812]        // -> [SW_DP_ABORT <= 0x00000000]
[23:20:35.812]      __var DP_CTRL_STAT      = 0x4;
[23:20:35.813]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:20:35.813]      __var DP_SELECT         = 0x8;
[23:20:35.813]        // -> [DP_SELECT <= 0x00000008]
[23:20:35.813]      __var powered_down      = 0;
[23:20:35.813]        // -> [powered_down <= 0x00000000]
[23:20:35.813]      WriteDP(DP_SELECT, 0x00000000);
[23:20:35.814]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:20:35.814]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:20:35.814]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:20:35.814]        // -> [powered_down <= 0x00000001]
[23:20:35.815]    </block>
[23:20:35.815]    <control if="powered_down" while="" timeout="0" info="">
[23:20:35.815]      // if-block "powered_down"
[23:20:35.815]        // =>  TRUE
[23:20:35.815]      <block atomic="false" info="">
[23:20:35.815]        Message(0, "Debug/System power-up request sent");
[23:20:35.817]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:20:35.817]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:20:35.817]      </block>
[23:20:35.818]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:20:35.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:20:35.818]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:20:35.818]        // while-condition  =>  FALSE
[23:20:35.818]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:20:35.818]      </control>
[23:20:35.819]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:20:35.819]        // if-block "(__protocol & 0xFFFF) == 1"
[23:20:35.819]          // =>  FALSE
[23:20:35.819]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:20:35.819]      </control>
[23:20:35.819]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:20:35.819]        // if-block "(__protocol & 0xFFFF) == 2"
[23:20:35.819]          // =>  TRUE
[23:20:35.820]        <block atomic="false" info="">
[23:20:35.820]          Message(0, "executing SWD power up");
[23:20:35.822]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:20:35.822]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:20:35.822]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:20:35.823]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:20:35.823]        </block>
[23:20:35.823]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:20:35.824]      </control>
[23:20:35.824]      // end if-block "powered_down"
[23:20:35.824]    </control>
[23:20:35.824]    <block atomic="false" info="">
[23:20:35.824]      __var DEBUG_PORT_VAL    = 0;
[23:20:35.824]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:20:35.824]      __var ACCESS_POINT_VAL  = 0;
[23:20:35.824]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:20:35.825]      __ap = 1; 
[23:20:35.825]        // -> [__ap <= 0x00000001]
[23:20:35.825]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:20:35.826]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:20:35.826]      __ap = 4;
[23:20:35.826]        // -> [__ap <= 0x00000004]
[23:20:35.826]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:20:35.827]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:20:35.828]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:20:35.828]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:20:35.829]    </block>
[23:20:35.830]    <block atomic="false" info="">
[23:20:35.830]      __var nReset = 0x80;
[23:20:35.830]        // -> [nReset <= 0x00000080]
[23:20:35.830]      __var canReadPins = 0;
[23:20:35.830]        // -> [canReadPins <= 0x00000000]
[23:20:35.830]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:20:35.830]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:20:35.830]        // -> [canReadPins <= 0x00000001]
[23:20:35.831]    </block>
[23:20:35.831]    <control if="" while="1" timeout="200" info="">
[23:20:35.831]      // while "1"  (timeout="200")
[23:20:35.831]      // while-condition  =>  TRUE
[23:20:35.831]      // while "1"  (timeout="200")
[23:20:35.831]      // while-condition  =>  TRUE
[23:20:35.831]      // while "1"  (timeout="200")
[23:20:35.831]      // while-condition  =>  TRUE
[23:20:35.831]      // while "1"  (timeout="200")
[23:20:35.831]      // while-condition  =>  TRUE
[23:20:35.831]      // while "1"  (timeout="200")
[23:20:35.832]      // while-condition  =>  TRUE
[23:20:35.832]      // while "1"  (timeout="200")
[23:20:35.832]      // while-condition  =>  TRUE
[23:20:35.832]      // while "1"  (timeout="200")
[23:20:35.832]      // while-condition  =>  TRUE
[23:20:35.832]      // while "1"  (timeout="200")
[23:20:35.832]      // while-condition  =>  TRUE
[23:20:35.832]      // while "1"  (timeout="200")
[23:20:35.832]      // while-condition  =>  TRUE
[23:20:35.832]      // while "1"  (timeout="200")
[23:20:35.832]      // while-condition  =>  TRUE
[23:20:35.833]      // while "1"  (timeout="200")
[23:20:35.833]      // while-condition  =>  TRUE
[23:20:35.833]      // while "1"  (timeout="200")
[23:20:35.833]      // while-condition  =>  TRUE
[23:20:35.833]      // while "1"  (timeout="200")
[23:20:35.833]      // while-condition  =>  TRUE
[23:20:35.833]      // while "1"  (timeout="200")
[23:20:35.833]      // while-condition  =>  TRUE
[23:20:35.833]      // while "1"  (timeout="200")
[23:20:35.833]      // while-condition  =>  TRUE
[23:20:35.833]      // while "1"  (timeout="200")
[23:20:35.833]      // while-condition  =>  TRUE
[23:20:35.834]      // while "1"  (timeout="200")
[23:20:35.834]      // while  =>  TIMEOUT
[23:20:35.834]      // end while "1"
[23:20:35.834]    </control>
[23:20:35.834]    <control if="canReadPins" while="" timeout="0" info="">
[23:20:35.834]      // if-block "canReadPins"
[23:20:35.834]        // =>  TRUE
[23:20:35.835]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:20:35.835]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:20:35.835]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:20:35.835]        // while-condition  =>  FALSE
[23:20:35.835]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:20:35.835]      </control>
[23:20:35.836]      // end if-block "canReadPins"
[23:20:35.836]    </control>
[23:20:35.836]    <control if="!canReadPins" while="" timeout="0" info="">
[23:20:35.836]      // if-block "!canReadPins"
[23:20:35.836]        // =>  FALSE
[23:20:35.836]      // skip if-block "!canReadPins"
[23:20:35.836]    </control>
[23:20:35.836]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:20:35.836]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:20:35.836]        // =>  TRUE
[23:20:35.836]      <block atomic="false" info="">
[23:20:35.837]        WriteAP(0x00, 0x190008);
[23:20:35.837]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:20:35.837]        WriteAP(0xF0, 0x01);
[23:20:35.838]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:20:35.839]      </block>
[23:20:35.839]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:20:35.839]    </control>
[23:20:35.839]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:20:35.839]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:20:35.839]        // =>  FALSE
[23:20:35.839]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:20:35.839]    </control>
[23:20:35.839]    <block atomic="false" info="">
[23:20:35.839]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:20:35.840]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:20:35.840]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:20:35.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:20:35.842]      __ap = 0; //lets make sure we reset the access point selection
[23:20:35.842]        // -> [__ap <= 0x00000000]
[23:20:35.842]    </block>
[23:20:35.842]  </sequence>
[23:20:35.842]  
[23:20:35.849]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:20:35.849]  
[23:20:35.849]  <debugvars>
[23:20:35.849]    // Pre-defined
[23:20:35.849]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:35.849]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:20:35.849]    __dp=0x00000000
[23:20:35.849]    __ap=0x00000000
[23:20:35.849]    __traceout=0x00000000      (Trace Disabled)
[23:20:35.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:35.849]    __FlashAddr=0x00000000
[23:20:35.849]    __FlashLen=0x00000000
[23:20:35.849]    __FlashArg=0x00000000
[23:20:35.849]    __FlashOp=0x00000000
[23:20:35.849]    __Result=0x00000000
[23:20:35.849]  </debugvars>
[23:20:35.849]  
[23:20:35.850]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:20:35.850]    <block atomic="false" info="">
[23:20:35.850]      __var deviceID = 0;
[23:20:35.850]        // -> [deviceID <= 0x00000000]
[23:20:35.850]      __var version = 0;
[23:20:35.850]        // -> [version <= 0x00000000]
[23:20:35.850]      __var partNum = 0;
[23:20:35.851]        // -> [partNum <= 0x00000000]
[23:20:35.851]      __var manuf = 0;
[23:20:35.851]        // -> [manuf <= 0x00000000]
[23:20:35.851]      __var isMSPM0G1X0X_G3X0X = 0;
[23:20:35.851]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:20:35.851]      __var isProduction = 0;
[23:20:35.851]        // -> [isProduction <= 0x00000000]
[23:20:35.851]      __var continueId = 0;
[23:20:35.851]        // -> [continueId <= 0x00000000]
[23:20:35.851]      deviceID =   Read32(0x41C40004);
[23:20:35.853]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:20:35.853]        // -> [deviceID <= 0x2BB8802F]
[23:20:35.853]      version = deviceID >> 28;
[23:20:35.853]        // -> [version <= 0x00000002]
[23:20:35.853]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:20:35.853]        // -> [partNum <= 0x0000BB88]
[23:20:35.853]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:20:35.853]        // -> [manuf <= 0x00000017]
[23:20:35.854]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:20:35.854]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:20:35.854]      isProduction = (version > 0);
[23:20:35.854]        // -> [isProduction <= 0x00000001]
[23:20:35.854]    </block>
[23:20:35.854]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:20:35.854]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:20:35.854]        // =>  FALSE
[23:20:35.854]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:20:35.854]    </control>
[23:20:35.854]    <control if="continueId == 4" while="" timeout="0" info="">
[23:20:35.855]      // if-block "continueId == 4"
[23:20:35.855]        // =>  FALSE
[23:20:35.855]      // skip if-block "continueId == 4"
[23:20:35.855]    </control>
[23:20:35.855]    <control if="!isProduction" while="" timeout="0" info="">
[23:20:35.855]      // if-block "!isProduction"
[23:20:35.855]        // =>  FALSE
[23:20:35.855]      // skip if-block "!isProduction"
[23:20:35.855]    </control>
[23:20:35.855]  </sequence>
[23:20:35.855]  
[23:23:21.970]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:23:21.970]  
[23:23:21.971]  <debugvars>
[23:23:21.971]    // Pre-defined
[23:23:21.971]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:21.971]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:23:21.971]    __dp=0x00000000
[23:23:21.971]    __ap=0x00000000
[23:23:21.971]    __traceout=0x00000000      (Trace Disabled)
[23:23:21.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:21.971]    __FlashAddr=0x00000000
[23:23:21.972]    __FlashLen=0x00000000
[23:23:21.972]    __FlashArg=0x00000000
[23:23:21.972]    __FlashOp=0x00000000
[23:23:21.972]    __Result=0x00000000
[23:23:21.972]  </debugvars>
[23:23:21.973]  
[23:23:21.973]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:23:21.973]    <block atomic="false" info="">
[23:23:21.973]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:23:21.973]        // -> [isSWJ <= 0x00000001]
[23:23:21.973]      __var hasDormant = __protocol & 0x00020000;
[23:23:21.974]        // -> [hasDormant <= 0x00000000]
[23:23:21.974]      __var protType   = __protocol & 0x0000FFFF;
[23:23:21.974]        // -> [protType <= 0x00000002]
[23:23:21.974]    </block>
[23:23:21.974]    <control if="protType == 1" while="" timeout="0" info="">
[23:23:21.974]      // if-block "protType == 1"
[23:23:21.974]        // =>  FALSE
[23:23:21.975]      // skip if-block "protType == 1"
[23:23:21.975]    </control>
[23:23:21.975]    <control if="protType == 2" while="" timeout="0" info="">
[23:23:21.975]      // if-block "protType == 2"
[23:23:21.975]        // =>  TRUE
[23:23:21.975]      <control if="isSWJ" while="" timeout="0" info="">
[23:23:21.975]        // if-block "isSWJ"
[23:23:21.975]          // =>  TRUE
[23:23:21.975]        <control if="hasDormant" while="" timeout="0" info="">
[23:23:21.976]          // if-block "hasDormant"
[23:23:21.976]            // =>  FALSE
[23:23:21.976]          // skip if-block "hasDormant"
[23:23:21.976]        </control>
[23:23:21.976]        <control if="!hasDormant" while="" timeout="0" info="">
[23:23:21.976]          // if-block "!hasDormant"
[23:23:21.976]            // =>  TRUE
[23:23:21.976]          <block atomic="false" info="">
[23:23:21.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:23:21.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:21.977]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:23:21.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:23:21.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:23:21.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:21.979]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:23:21.979]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:23:21.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:23:21.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:21.980]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:23:21.980]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:23:21.980]          </block>
[23:23:21.980]          // end if-block "!hasDormant"
[23:23:21.980]        </control>
[23:23:21.981]        // end if-block "isSWJ"
[23:23:21.981]      </control>
[23:23:21.981]      <control if="!isSWJ" while="" timeout="0" info="">
[23:23:21.981]        // if-block "!isSWJ"
[23:23:21.981]          // =>  FALSE
[23:23:21.981]        // skip if-block "!isSWJ"
[23:23:21.981]      </control>
[23:23:21.981]      <block atomic="false" info="">
[23:23:21.981]        ReadDP(0x0);
[23:23:21.982]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:23:21.982]      </block>
[23:23:21.982]      // end if-block "protType == 2"
[23:23:21.982]    </control>
[23:23:21.982]  </sequence>
[23:23:21.982]  
[23:27:55.016]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:27:55.016]  
[23:27:55.017]  <debugvars>
[23:27:55.017]    // Pre-defined
[23:27:55.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:55.017]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:27:55.017]    __dp=0x00000000
[23:27:55.017]    __ap=0x00000000
[23:27:55.017]    __traceout=0x00000000      (Trace Disabled)
[23:27:55.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:55.017]    __FlashAddr=0x00000000
[23:27:55.017]    __FlashLen=0x00000000
[23:27:55.017]    __FlashArg=0x00000000
[23:27:55.018]    __FlashOp=0x00000000
[23:27:55.018]    __Result=0x00000000
[23:27:55.018]  </debugvars>
[23:27:55.018]  
[23:27:55.018]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:27:55.018]    <block atomic="false" info="">
[23:27:55.018]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:27:55.018]        // -> [isSWJ <= 0x00000001]
[23:27:55.018]      __var hasDormant = __protocol & 0x00020000;
[23:27:55.019]        // -> [hasDormant <= 0x00000000]
[23:27:55.019]      __var protType   = __protocol & 0x0000FFFF;
[23:27:55.019]        // -> [protType <= 0x00000002]
[23:27:55.019]    </block>
[23:27:55.019]    <control if="protType == 1" while="" timeout="0" info="">
[23:27:55.019]      // if-block "protType == 1"
[23:27:55.019]        // =>  FALSE
[23:27:55.019]      // skip if-block "protType == 1"
[23:27:55.019]    </control>
[23:27:55.019]    <control if="protType == 2" while="" timeout="0" info="">
[23:27:55.019]      // if-block "protType == 2"
[23:27:55.019]        // =>  TRUE
[23:27:55.019]      <control if="isSWJ" while="" timeout="0" info="">
[23:27:55.019]        // if-block "isSWJ"
[23:27:55.019]          // =>  TRUE
[23:27:55.019]        <control if="hasDormant" while="" timeout="0" info="">
[23:27:55.019]          // if-block "hasDormant"
[23:27:55.021]            // =>  FALSE
[23:27:55.021]          // skip if-block "hasDormant"
[23:27:55.021]        </control>
[23:27:55.021]        <control if="!hasDormant" while="" timeout="0" info="">
[23:27:55.021]          // if-block "!hasDormant"
[23:27:55.021]            // =>  TRUE
[23:27:55.021]          <block atomic="false" info="">
[23:27:55.021]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:27:55.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:55.021]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:27:55.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:27:55.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:27:55.022]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:55.022]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:27:55.023]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:27:55.023]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:27:55.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:55.023]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:27:55.024]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:27:55.025]          </block>
[23:27:55.025]          // end if-block "!hasDormant"
[23:27:55.025]        </control>
[23:27:55.025]        // end if-block "isSWJ"
[23:27:55.025]      </control>
[23:27:55.025]      <control if="!isSWJ" while="" timeout="0" info="">
[23:27:55.025]        // if-block "!isSWJ"
[23:27:55.025]          // =>  FALSE
[23:27:55.025]        // skip if-block "!isSWJ"
[23:27:55.025]      </control>
[23:27:55.025]      <block atomic="false" info="">
[23:27:55.026]        ReadDP(0x0);
[23:27:55.026]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:27:55.026]      </block>
[23:27:55.026]      // end if-block "protType == 2"
[23:27:55.026]    </control>
[23:27:55.026]  </sequence>
[23:27:55.027]  
[23:27:55.027]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:27:55.027]  
[23:27:55.027]  <debugvars>
[23:27:55.027]    // Pre-defined
[23:27:55.027]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:55.027]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:27:55.027]    __dp=0x00000000
[23:27:55.028]    __ap=0x00000000
[23:27:55.028]    __traceout=0x00000000      (Trace Disabled)
[23:27:55.028]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:55.028]    __FlashAddr=0x00000000
[23:27:55.028]    __FlashLen=0x00000000
[23:27:55.028]    __FlashArg=0x00000000
[23:27:55.029]    __FlashOp=0x00000000
[23:27:55.029]    __Result=0x00000000
[23:27:55.029]  </debugvars>
[23:27:55.029]  
[23:27:55.029]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:27:55.029]    <block atomic="false" info="">
[23:27:55.029]      __var SW_DP_ABORT       = 0x0;
[23:27:55.029]        // -> [SW_DP_ABORT <= 0x00000000]
[23:27:55.029]      __var DP_CTRL_STAT      = 0x4;
[23:27:55.029]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:27:55.030]      __var DP_SELECT         = 0x8;
[23:27:55.030]        // -> [DP_SELECT <= 0x00000008]
[23:27:55.030]      __var powered_down      = 0;
[23:27:55.030]        // -> [powered_down <= 0x00000000]
[23:27:55.030]      WriteDP(DP_SELECT, 0x00000000);
[23:27:55.031]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:27:55.031]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:27:55.031]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:27:55.031]        // -> [powered_down <= 0x00000001]
[23:27:55.031]    </block>
[23:27:55.031]    <control if="powered_down" while="" timeout="0" info="">
[23:27:55.031]      // if-block "powered_down"
[23:27:55.031]        // =>  TRUE
[23:27:55.031]      <block atomic="false" info="">
[23:27:55.032]        Message(0, "Debug/System power-up request sent");
[23:27:55.034]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:27:55.035]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:27:55.035]      </block>
[23:27:55.035]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:27:55.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:27:55.035]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:27:55.036]        // while-condition  =>  FALSE
[23:27:55.036]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:27:55.036]      </control>
[23:27:55.036]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:27:55.036]        // if-block "(__protocol & 0xFFFF) == 1"
[23:27:55.036]          // =>  FALSE
[23:27:55.036]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:27:55.036]      </control>
[23:27:55.037]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:27:55.037]        // if-block "(__protocol & 0xFFFF) == 2"
[23:27:55.037]          // =>  TRUE
[23:27:55.037]        <block atomic="false" info="">
[23:27:55.037]          Message(0, "executing SWD power up");
[23:27:55.039]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:27:55.040]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:27:55.040]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:27:55.041]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:27:55.041]        </block>
[23:27:55.041]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:27:55.042]      </control>
[23:27:55.042]      // end if-block "powered_down"
[23:27:55.042]    </control>
[23:27:55.042]    <block atomic="false" info="">
[23:27:55.042]      __var DEBUG_PORT_VAL    = 0;
[23:27:55.042]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:27:55.042]      __var ACCESS_POINT_VAL  = 0;
[23:27:55.042]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:27:55.042]      __ap = 1; 
[23:27:55.042]        // -> [__ap <= 0x00000001]
[23:27:55.042]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:27:55.043]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:27:55.043]      __ap = 4;
[23:27:55.043]        // -> [__ap <= 0x00000004]
[23:27:55.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:27:55.045]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:27:55.045]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:27:55.045]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:27:55.047]    </block>
[23:27:55.047]    <block atomic="false" info="">
[23:27:55.047]      __var nReset = 0x80;
[23:27:55.047]        // -> [nReset <= 0x00000080]
[23:27:55.047]      __var canReadPins = 0;
[23:27:55.048]        // -> [canReadPins <= 0x00000000]
[23:27:55.048]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:27:55.048]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:27:55.048]        // -> [canReadPins <= 0x00000001]
[23:27:55.048]    </block>
[23:27:55.048]    <control if="" while="1" timeout="200" info="">
[23:27:55.048]      // while "1"  (timeout="200")
[23:27:55.049]      // while-condition  =>  TRUE
[23:27:55.049]      // while "1"  (timeout="200")
[23:27:55.049]      // while-condition  =>  TRUE
[23:27:55.049]      // while "1"  (timeout="200")
[23:27:55.049]      // while-condition  =>  TRUE
[23:27:55.049]      // while "1"  (timeout="200")
[23:27:55.050]      // while-condition  =>  TRUE
[23:27:55.050]      // while "1"  (timeout="200")
[23:27:55.050]      // while-condition  =>  TRUE
[23:27:55.050]      // while "1"  (timeout="200")
[23:27:55.050]      // while-condition  =>  TRUE
[23:27:55.050]      // while "1"  (timeout="200")
[23:27:55.050]      // while-condition  =>  TRUE
[23:27:55.050]      // while "1"  (timeout="200")
[23:27:55.050]      // while-condition  =>  TRUE
[23:27:55.050]      // while "1"  (timeout="200")
[23:27:55.050]      // while-condition  =>  TRUE
[23:27:55.051]      // while "1"  (timeout="200")
[23:27:55.051]      // while-condition  =>  TRUE
[23:27:55.051]      // while "1"  (timeout="200")
[23:27:55.051]      // while-condition  =>  TRUE
[23:27:55.051]      // while "1"  (timeout="200")
[23:27:55.051]      // while-condition  =>  TRUE
[23:27:55.051]      // while "1"  (timeout="200")
[23:27:55.051]      // while-condition  =>  TRUE
[23:27:55.051]      // while "1"  (timeout="200")
[23:27:55.051]      // while-condition  =>  TRUE
[23:27:55.051]      // while "1"  (timeout="200")
[23:27:55.051]      // while-condition  =>  TRUE
[23:27:55.052]      // while "1"  (timeout="200")
[23:27:55.052]      // while-condition  =>  TRUE
[23:27:55.052]      // while "1"  (timeout="200")
[23:27:55.052]      // while-condition  =>  TRUE
[23:27:55.052]      // while "1"  (timeout="200")
[23:27:55.053]      // while-condition  =>  TRUE
[23:27:55.053]      // while "1"  (timeout="200")
[23:27:55.053]      // while  =>  TIMEOUT
[23:27:55.053]      // end while "1"
[23:27:55.053]    </control>
[23:27:55.053]    <control if="canReadPins" while="" timeout="0" info="">
[23:27:55.053]      // if-block "canReadPins"
[23:27:55.053]        // =>  TRUE
[23:27:55.053]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:27:55.053]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:27:55.055]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:27:55.055]        // while-condition  =>  FALSE
[23:27:55.055]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:27:55.055]      </control>
[23:27:55.055]      // end if-block "canReadPins"
[23:27:55.055]    </control>
[23:27:55.055]    <control if="!canReadPins" while="" timeout="0" info="">
[23:27:55.056]      // if-block "!canReadPins"
[23:27:55.056]        // =>  FALSE
[23:27:55.056]      // skip if-block "!canReadPins"
[23:27:55.056]    </control>
[23:27:55.056]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:27:55.056]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:27:55.056]        // =>  TRUE
[23:27:55.057]      <block atomic="false" info="">
[23:27:55.057]        WriteAP(0x00, 0x190008);
[23:27:55.057]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:27:55.057]        WriteAP(0xF0, 0x01);
[23:27:55.058]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:27:55.058]      </block>
[23:27:55.058]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:27:55.058]    </control>
[23:27:55.058]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:27:55.058]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:27:55.059]        // =>  FALSE
[23:27:55.059]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:27:55.059]    </control>
[23:27:55.059]    <block atomic="false" info="">
[23:27:55.059]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:27:55.060]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:27:55.060]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:27:55.060]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:27:55.062]      __ap = 0; //lets make sure we reset the access point selection
[23:27:55.062]        // -> [__ap <= 0x00000000]
[23:27:55.062]    </block>
[23:27:55.062]  </sequence>
[23:27:55.062]  
[23:27:55.068]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:27:55.068]  
[23:27:55.069]  <debugvars>
[23:27:55.069]    // Pre-defined
[23:27:55.069]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:55.069]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:27:55.069]    __dp=0x00000000
[23:27:55.069]    __ap=0x00000000
[23:27:55.069]    __traceout=0x00000000      (Trace Disabled)
[23:27:55.069]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:55.069]    __FlashAddr=0x00000000
[23:27:55.069]    __FlashLen=0x00000000
[23:27:55.069]    __FlashArg=0x00000000
[23:27:55.070]    __FlashOp=0x00000000
[23:27:55.070]    __Result=0x00000000
[23:27:55.070]  </debugvars>
[23:27:55.070]  
[23:27:55.070]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:27:55.070]    <block atomic="false" info="">
[23:27:55.070]      __var deviceID = 0;
[23:27:55.070]        // -> [deviceID <= 0x00000000]
[23:27:55.070]      __var version = 0;
[23:27:55.071]        // -> [version <= 0x00000000]
[23:27:55.071]      __var partNum = 0;
[23:27:55.071]        // -> [partNum <= 0x00000000]
[23:27:55.071]      __var manuf = 0;
[23:27:55.071]        // -> [manuf <= 0x00000000]
[23:27:55.071]      __var isMSPM0G1X0X_G3X0X = 0;
[23:27:55.071]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:27:55.072]      __var isProduction = 0;
[23:27:55.072]        // -> [isProduction <= 0x00000000]
[23:27:55.072]      __var continueId = 0;
[23:27:55.072]        // -> [continueId <= 0x00000000]
[23:27:55.072]      deviceID =   Read32(0x41C40004);
[23:27:55.073]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:27:55.073]        // -> [deviceID <= 0x2BB8802F]
[23:27:55.074]      version = deviceID >> 28;
[23:27:55.074]        // -> [version <= 0x00000002]
[23:27:55.074]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:27:55.074]        // -> [partNum <= 0x0000BB88]
[23:27:55.074]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:27:55.074]        // -> [manuf <= 0x00000017]
[23:27:55.074]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:27:55.074]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:27:55.075]      isProduction = (version > 0);
[23:27:55.075]        // -> [isProduction <= 0x00000001]
[23:27:55.075]    </block>
[23:27:55.075]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:27:55.075]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:27:55.075]        // =>  FALSE
[23:27:55.075]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:27:55.075]    </control>
[23:27:55.075]    <control if="continueId == 4" while="" timeout="0" info="">
[23:27:55.075]      // if-block "continueId == 4"
[23:27:55.077]        // =>  FALSE
[23:27:55.077]      // skip if-block "continueId == 4"
[23:27:55.077]    </control>
[23:27:55.077]    <control if="!isProduction" while="" timeout="0" info="">
[23:27:55.077]      // if-block "!isProduction"
[23:27:55.077]        // =>  FALSE
[23:27:55.077]      // skip if-block "!isProduction"
[23:27:55.077]    </control>
[23:27:55.077]  </sequence>
[23:27:55.077]  
[23:27:58.509]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:27:58.509]  
[23:27:58.519]  <debugvars>
[23:27:58.519]    // Pre-defined
[23:27:58.519]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:58.519]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:27:58.519]    __dp=0x00000000
[23:27:58.519]    __ap=0x00000000
[23:27:58.519]    __traceout=0x00000000      (Trace Disabled)
[23:27:58.519]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:58.519]    __FlashAddr=0x00000000
[23:27:58.519]    __FlashLen=0x00000000
[23:27:58.520]    __FlashArg=0x00000000
[23:27:58.520]    __FlashOp=0x00000000
[23:27:58.520]    __Result=0x00000000
[23:27:58.520]  </debugvars>
[23:27:58.520]  
[23:27:58.520]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:27:58.520]    <block atomic="false" info="">
[23:27:58.520]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:27:58.520]        // -> [isSWJ <= 0x00000001]
[23:27:58.520]      __var hasDormant = __protocol & 0x00020000;
[23:27:58.520]        // -> [hasDormant <= 0x00000000]
[23:27:58.520]      __var protType   = __protocol & 0x0000FFFF;
[23:27:58.520]        // -> [protType <= 0x00000002]
[23:27:58.520]    </block>
[23:27:58.520]    <control if="protType == 1" while="" timeout="0" info="">
[23:27:58.521]      // if-block "protType == 1"
[23:27:58.521]        // =>  FALSE
[23:27:58.521]      // skip if-block "protType == 1"
[23:27:58.521]    </control>
[23:27:58.521]    <control if="protType == 2" while="" timeout="0" info="">
[23:27:58.521]      // if-block "protType == 2"
[23:27:58.521]        // =>  TRUE
[23:27:58.521]      <control if="isSWJ" while="" timeout="0" info="">
[23:27:58.522]        // if-block "isSWJ"
[23:27:58.522]          // =>  TRUE
[23:27:58.522]        <control if="hasDormant" while="" timeout="0" info="">
[23:27:58.522]          // if-block "hasDormant"
[23:27:58.522]            // =>  FALSE
[23:27:58.522]          // skip if-block "hasDormant"
[23:27:58.522]        </control>
[23:27:58.522]        <control if="!hasDormant" while="" timeout="0" info="">
[23:27:58.522]          // if-block "!hasDormant"
[23:27:58.522]            // =>  TRUE
[23:27:58.522]          <block atomic="false" info="">
[23:27:58.523]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:27:58.523]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:58.523]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:27:58.523]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:27:58.523]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:27:58.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:58.525]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:27:58.525]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:27:58.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:27:58.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:58.525]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:27:58.526]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:27:58.526]          </block>
[23:27:58.526]          // end if-block "!hasDormant"
[23:27:58.526]        </control>
[23:27:58.526]        // end if-block "isSWJ"
[23:27:58.526]      </control>
[23:27:58.526]      <control if="!isSWJ" while="" timeout="0" info="">
[23:27:58.526]        // if-block "!isSWJ"
[23:27:58.526]          // =>  FALSE
[23:27:58.527]        // skip if-block "!isSWJ"
[23:27:58.527]      </control>
[23:27:58.527]      <block atomic="false" info="">
[23:27:58.527]        ReadDP(0x0);
[23:27:58.527]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:27:58.527]      </block>
[23:27:58.527]      // end if-block "protType == 2"
[23:27:58.527]    </control>
[23:27:58.528]  </sequence>
[23:27:58.528]  
[23:27:58.528]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:27:58.528]  
[23:27:58.528]  <debugvars>
[23:27:58.529]    // Pre-defined
[23:27:58.529]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:58.529]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:27:58.529]    __dp=0x00000000
[23:27:58.529]    __ap=0x00000000
[23:27:58.529]    __traceout=0x00000000      (Trace Disabled)
[23:27:58.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:58.529]    __FlashAddr=0x00000000
[23:27:58.529]    __FlashLen=0x00000000
[23:27:58.529]    __FlashArg=0x00000000
[23:27:58.530]    __FlashOp=0x00000000
[23:27:58.530]    __Result=0x00000000
[23:27:58.530]  </debugvars>
[23:27:58.530]  
[23:27:58.530]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:27:58.530]    <block atomic="false" info="">
[23:27:58.530]      __var SW_DP_ABORT       = 0x0;
[23:27:58.530]        // -> [SW_DP_ABORT <= 0x00000000]
[23:27:58.530]      __var DP_CTRL_STAT      = 0x4;
[23:27:58.530]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:27:58.530]      __var DP_SELECT         = 0x8;
[23:27:58.530]        // -> [DP_SELECT <= 0x00000008]
[23:27:58.530]      __var powered_down      = 0;
[23:27:58.530]        // -> [powered_down <= 0x00000000]
[23:27:58.530]      WriteDP(DP_SELECT, 0x00000000);
[23:27:58.532]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:27:58.532]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:27:58.532]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:27:58.532]        // -> [powered_down <= 0x00000001]
[23:27:58.533]    </block>
[23:27:58.533]    <control if="powered_down" while="" timeout="0" info="">
[23:27:58.533]      // if-block "powered_down"
[23:27:58.533]        // =>  TRUE
[23:27:58.533]      <block atomic="false" info="">
[23:27:58.533]        Message(0, "Debug/System power-up request sent");
[23:27:58.534]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:27:58.535]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:27:58.535]      </block>
[23:27:58.535]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:27:58.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:27:58.535]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:27:58.535]        // while-condition  =>  FALSE
[23:27:58.535]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:27:58.535]      </control>
[23:27:58.535]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:27:58.535]        // if-block "(__protocol & 0xFFFF) == 1"
[23:27:58.537]          // =>  FALSE
[23:27:58.537]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:27:58.537]      </control>
[23:27:58.537]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:27:58.537]        // if-block "(__protocol & 0xFFFF) == 2"
[23:27:58.537]          // =>  TRUE
[23:27:58.537]        <block atomic="false" info="">
[23:27:58.537]          Message(0, "executing SWD power up");
[23:27:58.539]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:27:58.539]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:27:58.539]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:27:58.540]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:27:58.540]        </block>
[23:27:58.540]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:27:58.540]      </control>
[23:27:58.540]      // end if-block "powered_down"
[23:27:58.540]    </control>
[23:27:58.540]    <block atomic="false" info="">
[23:27:58.540]      __var DEBUG_PORT_VAL    = 0;
[23:27:58.540]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:27:58.540]      __var ACCESS_POINT_VAL  = 0;
[23:27:58.540]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:27:58.540]      __ap = 1; 
[23:27:58.542]        // -> [__ap <= 0x00000001]
[23:27:58.542]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:27:58.543]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:27:58.543]      __ap = 4;
[23:27:58.543]        // -> [__ap <= 0x00000004]
[23:27:58.543]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:27:58.544]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:27:58.544]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:27:58.544]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:27:58.545]    </block>
[23:27:58.545]    <block atomic="false" info="">
[23:27:58.545]      __var nReset = 0x80;
[23:27:58.546]        // -> [nReset <= 0x00000080]
[23:27:58.546]      __var canReadPins = 0;
[23:27:58.546]        // -> [canReadPins <= 0x00000000]
[23:27:58.546]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:27:58.546]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:27:58.546]        // -> [canReadPins <= 0x00000001]
[23:27:58.547]    </block>
[23:27:58.547]    <control if="" while="1" timeout="200" info="">
[23:27:58.547]      // while "1"  (timeout="200")
[23:27:58.547]      // while-condition  =>  TRUE
[23:27:58.547]      // while "1"  (timeout="200")
[23:27:58.547]      // while-condition  =>  TRUE
[23:27:58.547]      // while "1"  (timeout="200")
[23:27:58.547]      // while-condition  =>  TRUE
[23:27:58.547]      // while "1"  (timeout="200")
[23:27:58.547]      // while-condition  =>  TRUE
[23:27:58.549]      // while "1"  (timeout="200")
[23:27:58.549]      // while-condition  =>  TRUE
[23:27:58.549]      // while "1"  (timeout="200")
[23:27:58.549]      // while-condition  =>  TRUE
[23:27:58.549]      // while "1"  (timeout="200")
[23:27:58.549]      // while-condition  =>  TRUE
[23:27:58.549]      // while "1"  (timeout="200")
[23:27:58.549]      // while-condition  =>  TRUE
[23:27:58.549]      // while "1"  (timeout="200")
[23:27:58.549]      // while-condition  =>  TRUE
[23:27:58.549]      // while "1"  (timeout="200")
[23:27:58.549]      // while-condition  =>  TRUE
[23:27:58.549]      // while "1"  (timeout="200")
[23:27:58.550]      // while-condition  =>  TRUE
[23:27:58.550]      // while "1"  (timeout="200")
[23:27:58.550]      // while-condition  =>  TRUE
[23:27:58.550]      // while "1"  (timeout="200")
[23:27:58.550]      // while-condition  =>  TRUE
[23:27:58.550]      // while "1"  (timeout="200")
[23:27:58.550]      // while-condition  =>  TRUE
[23:27:58.550]      // while "1"  (timeout="200")
[23:27:58.550]      // while-condition  =>  TRUE
[23:27:58.550]      // while "1"  (timeout="200")
[23:27:58.550]      // while-condition  =>  TRUE
[23:27:58.551]      // while "1"  (timeout="200")
[23:27:58.551]      // while-condition  =>  TRUE
[23:27:58.551]      // while "1"  (timeout="200")
[23:27:58.551]      // while-condition  =>  TRUE
[23:27:58.551]      // while "1"  (timeout="200")
[23:27:58.551]      // while-condition  =>  TRUE
[23:27:58.551]      // while "1"  (timeout="200")
[23:27:58.551]      // while-condition  =>  TRUE
[23:27:58.551]      // while "1"  (timeout="200")
[23:27:58.551]      // while-condition  =>  TRUE
[23:27:58.551]      // while "1"  (timeout="200")
[23:27:58.551]      // while-condition  =>  TRUE
[23:27:58.552]      // while "1"  (timeout="200")
[23:27:58.552]      // while-condition  =>  TRUE
[23:27:58.552]      // while "1"  (timeout="200")
[23:27:58.552]      // while-condition  =>  TRUE
[23:27:58.552]      // while "1"  (timeout="200")
[23:27:58.552]      // while-condition  =>  TRUE
[23:27:58.552]      // while "1"  (timeout="200")
[23:27:58.553]      // while-condition  =>  TRUE
[23:27:58.553]      // while "1"  (timeout="200")
[23:27:58.553]      // while  =>  TIMEOUT
[23:27:58.553]      // end while "1"
[23:27:58.553]    </control>
[23:27:58.553]    <control if="canReadPins" while="" timeout="0" info="">
[23:27:58.553]      // if-block "canReadPins"
[23:27:58.553]        // =>  TRUE
[23:27:58.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:27:58.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:27:58.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:27:58.554]        // while-condition  =>  FALSE
[23:27:58.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:27:58.554]      </control>
[23:27:58.554]      // end if-block "canReadPins"
[23:27:58.554]    </control>
[23:27:58.554]    <control if="!canReadPins" while="" timeout="0" info="">
[23:27:58.554]      // if-block "!canReadPins"
[23:27:58.555]        // =>  FALSE
[23:27:58.555]      // skip if-block "!canReadPins"
[23:27:58.555]    </control>
[23:27:58.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:27:58.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:27:58.555]        // =>  TRUE
[23:27:58.555]      <block atomic="false" info="">
[23:27:58.555]        WriteAP(0x00, 0x190008);
[23:27:58.557]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:27:58.557]        WriteAP(0xF0, 0x01);
[23:27:58.558]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:27:58.558]      </block>
[23:27:58.558]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:27:58.558]    </control>
[23:27:58.559]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:27:58.559]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:27:58.559]        // =>  FALSE
[23:27:58.559]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:27:58.559]    </control>
[23:27:58.559]    <block atomic="false" info="">
[23:27:58.559]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:27:58.560]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:27:58.561]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:27:58.561]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:27:58.561]      __ap = 0; //lets make sure we reset the access point selection
[23:27:58.562]        // -> [__ap <= 0x00000000]
[23:27:58.562]    </block>
[23:27:58.562]  </sequence>
[23:27:58.562]  
[23:27:58.569]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:27:58.569]  
[23:27:58.569]  <debugvars>
[23:27:58.569]    // Pre-defined
[23:27:58.569]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:58.569]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:27:58.569]    __dp=0x00000000
[23:27:58.569]    __ap=0x00000000
[23:27:58.569]    __traceout=0x00000000      (Trace Disabled)
[23:27:58.569]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:58.569]    __FlashAddr=0x00000000
[23:27:58.569]    __FlashLen=0x00000000
[23:27:58.569]    __FlashArg=0x00000000
[23:27:58.570]    __FlashOp=0x00000000
[23:27:58.570]    __Result=0x00000000
[23:27:58.570]  </debugvars>
[23:27:58.570]  
[23:27:58.570]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:27:58.570]    <block atomic="false" info="">
[23:27:58.570]      __var deviceID = 0;
[23:27:58.571]        // -> [deviceID <= 0x00000000]
[23:27:58.571]      __var version = 0;
[23:27:58.571]        // -> [version <= 0x00000000]
[23:27:58.571]      __var partNum = 0;
[23:27:58.571]        // -> [partNum <= 0x00000000]
[23:27:58.571]      __var manuf = 0;
[23:27:58.571]        // -> [manuf <= 0x00000000]
[23:27:58.571]      __var isMSPM0G1X0X_G3X0X = 0;
[23:27:58.571]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:27:58.571]      __var isProduction = 0;
[23:27:58.571]        // -> [isProduction <= 0x00000000]
[23:27:58.571]      __var continueId = 0;
[23:27:58.571]        // -> [continueId <= 0x00000000]
[23:27:58.571]      deviceID =   Read32(0x41C40004);
[23:27:58.573]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:27:58.573]        // -> [deviceID <= 0x2BB8802F]
[23:27:58.573]      version = deviceID >> 28;
[23:27:58.573]        // -> [version <= 0x00000002]
[23:27:58.573]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:27:58.573]        // -> [partNum <= 0x0000BB88]
[23:27:58.574]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:27:58.574]        // -> [manuf <= 0x00000017]
[23:27:58.574]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:27:58.574]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:27:58.574]      isProduction = (version > 0);
[23:27:58.574]        // -> [isProduction <= 0x00000001]
[23:27:58.574]    </block>
[23:27:58.574]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:27:58.575]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:27:58.575]        // =>  FALSE
[23:27:58.575]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:27:58.575]    </control>
[23:27:58.575]    <control if="continueId == 4" while="" timeout="0" info="">
[23:27:58.575]      // if-block "continueId == 4"
[23:27:58.575]        // =>  FALSE
[23:27:58.575]      // skip if-block "continueId == 4"
[23:27:58.575]    </control>
[23:27:58.575]    <control if="!isProduction" while="" timeout="0" info="">
[23:27:58.576]      // if-block "!isProduction"
[23:27:58.576]        // =>  FALSE
[23:27:58.576]      // skip if-block "!isProduction"
[23:27:58.576]    </control>
[23:27:58.576]  </sequence>
[23:27:58.576]  
[23:29:30.839]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:29:30.839]  
[23:29:30.848]  <debugvars>
[23:29:30.848]    // Pre-defined
[23:29:30.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:30.848]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:30.848]    __dp=0x00000000
[23:29:30.848]    __ap=0x00000000
[23:29:30.848]    __traceout=0x00000000      (Trace Disabled)
[23:29:30.848]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:30.848]    __FlashAddr=0x00000000
[23:29:30.848]    __FlashLen=0x00000000
[23:29:30.849]    __FlashArg=0x00000000
[23:29:30.849]    __FlashOp=0x00000000
[23:29:30.849]    __Result=0x00000000
[23:29:30.849]  </debugvars>
[23:29:30.849]  
[23:29:30.849]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:29:30.849]    <block atomic="false" info="">
[23:29:30.849]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:29:30.849]        // -> [isSWJ <= 0x00000001]
[23:29:30.849]      __var hasDormant = __protocol & 0x00020000;
[23:29:30.850]        // -> [hasDormant <= 0x00000000]
[23:29:30.850]      __var protType   = __protocol & 0x0000FFFF;
[23:29:30.850]        // -> [protType <= 0x00000002]
[23:29:30.850]    </block>
[23:29:30.850]    <control if="protType == 1" while="" timeout="0" info="">
[23:29:30.850]      // if-block "protType == 1"
[23:29:30.850]        // =>  FALSE
[23:29:30.850]      // skip if-block "protType == 1"
[23:29:30.850]    </control>
[23:29:30.850]    <control if="protType == 2" while="" timeout="0" info="">
[23:29:30.850]      // if-block "protType == 2"
[23:29:30.850]        // =>  TRUE
[23:29:30.851]      <control if="isSWJ" while="" timeout="0" info="">
[23:29:30.851]        // if-block "isSWJ"
[23:29:30.851]          // =>  TRUE
[23:29:30.851]        <control if="hasDormant" while="" timeout="0" info="">
[23:29:30.851]          // if-block "hasDormant"
[23:29:30.851]            // =>  FALSE
[23:29:30.851]          // skip if-block "hasDormant"
[23:29:30.851]        </control>
[23:29:30.852]        <control if="!hasDormant" while="" timeout="0" info="">
[23:29:30.852]          // if-block "!hasDormant"
[23:29:30.852]            // =>  TRUE
[23:29:30.852]          <block atomic="false" info="">
[23:29:30.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:29:30.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:30.852]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:29:30.853]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:29:30.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:29:30.853]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:30.854]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:29:30.854]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:29:30.854]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:29:30.854]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:30.854]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:29:30.854]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:29:30.855]          </block>
[23:29:30.855]          // end if-block "!hasDormant"
[23:29:30.855]        </control>
[23:29:30.855]        // end if-block "isSWJ"
[23:29:30.855]      </control>
[23:29:30.855]      <control if="!isSWJ" while="" timeout="0" info="">
[23:29:30.855]        // if-block "!isSWJ"
[23:29:30.855]          // =>  FALSE
[23:29:30.855]        // skip if-block "!isSWJ"
[23:29:30.855]      </control>
[23:29:30.855]      <block atomic="false" info="">
[23:29:30.855]        ReadDP(0x0);
[23:29:30.856]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:29:30.856]      </block>
[23:29:30.856]      // end if-block "protType == 2"
[23:29:30.856]    </control>
[23:29:30.856]  </sequence>
[23:29:30.856]  
[23:29:30.858]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:29:30.858]  
[23:29:30.858]  <debugvars>
[23:29:30.858]    // Pre-defined
[23:29:30.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:30.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:30.858]    __dp=0x00000000
[23:29:30.858]    __ap=0x00000000
[23:29:30.858]    __traceout=0x00000000      (Trace Disabled)
[23:29:30.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:30.858]    __FlashAddr=0x00000000
[23:29:30.858]    __FlashLen=0x00000000
[23:29:30.859]    __FlashArg=0x00000000
[23:29:30.859]    __FlashOp=0x00000000
[23:29:30.859]    __Result=0x00000000
[23:29:30.859]  </debugvars>
[23:29:30.859]  
[23:29:30.859]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:29:30.859]    <block atomic="false" info="">
[23:29:30.859]      __var SW_DP_ABORT       = 0x0;
[23:29:30.859]        // -> [SW_DP_ABORT <= 0x00000000]
[23:29:30.860]      __var DP_CTRL_STAT      = 0x4;
[23:29:30.860]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:29:30.860]      __var DP_SELECT         = 0x8;
[23:29:30.860]        // -> [DP_SELECT <= 0x00000008]
[23:29:30.860]      __var powered_down      = 0;
[23:29:30.860]        // -> [powered_down <= 0x00000000]
[23:29:30.860]      WriteDP(DP_SELECT, 0x00000000);
[23:29:30.861]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:29:30.861]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:29:30.861]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:29:30.861]        // -> [powered_down <= 0x00000001]
[23:29:30.862]    </block>
[23:29:30.862]    <control if="powered_down" while="" timeout="0" info="">
[23:29:30.862]      // if-block "powered_down"
[23:29:30.862]        // =>  TRUE
[23:29:30.862]      <block atomic="false" info="">
[23:29:30.862]        Message(0, "Debug/System power-up request sent");
[23:29:30.864]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:29:30.864]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:29:30.864]      </block>
[23:29:30.864]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:29:30.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:30.865]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:29:30.865]        // while-condition  =>  FALSE
[23:29:30.865]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:29:30.865]      </control>
[23:29:30.866]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:29:30.866]        // if-block "(__protocol & 0xFFFF) == 1"
[23:29:30.866]          // =>  FALSE
[23:29:30.866]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:29:30.866]      </control>
[23:29:30.866]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:29:30.866]        // if-block "(__protocol & 0xFFFF) == 2"
[23:29:30.866]          // =>  TRUE
[23:29:30.866]        <block atomic="false" info="">
[23:29:30.866]          Message(0, "executing SWD power up");
[23:29:30.867]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:29:30.868]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:29:30.868]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:29:30.868]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:29:30.868]        </block>
[23:29:30.868]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:29:30.868]      </control>
[23:29:30.870]      // end if-block "powered_down"
[23:29:30.870]    </control>
[23:29:30.870]    <block atomic="false" info="">
[23:29:30.870]      __var DEBUG_PORT_VAL    = 0;
[23:29:30.870]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:29:30.870]      __var ACCESS_POINT_VAL  = 0;
[23:29:30.870]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:29:30.870]      __ap = 1; 
[23:29:30.870]        // -> [__ap <= 0x00000001]
[23:29:30.870]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:29:30.872]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:29:30.872]      __ap = 4;
[23:29:30.872]        // -> [__ap <= 0x00000004]
[23:29:30.872]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:29:30.873]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:29:30.873]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:29:30.873]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:29:30.876]    </block>
[23:29:30.876]    <block atomic="false" info="">
[23:29:30.876]      __var nReset = 0x80;
[23:29:30.876]        // -> [nReset <= 0x00000080]
[23:29:30.876]      __var canReadPins = 0;
[23:29:30.876]        // -> [canReadPins <= 0x00000000]
[23:29:30.876]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:29:30.877]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:29:30.877]        // -> [canReadPins <= 0x00000001]
[23:29:30.878]    </block>
[23:29:30.878]    <control if="" while="1" timeout="200" info="">
[23:29:30.878]      // while "1"  (timeout="200")
[23:29:30.878]      // while-condition  =>  TRUE
[23:29:30.878]      // while "1"  (timeout="200")
[23:29:30.878]      // while-condition  =>  TRUE
[23:29:30.878]      // while "1"  (timeout="200")
[23:29:30.878]      // while-condition  =>  TRUE
[23:29:30.878]      // while "1"  (timeout="200")
[23:29:30.878]      // while-condition  =>  TRUE
[23:29:30.879]      // while "1"  (timeout="200")
[23:29:30.879]      // while-condition  =>  TRUE
[23:29:30.879]      // while "1"  (timeout="200")
[23:29:30.879]      // while-condition  =>  TRUE
[23:29:30.879]      // while "1"  (timeout="200")
[23:29:30.879]      // while-condition  =>  TRUE
[23:29:30.879]      // while "1"  (timeout="200")
[23:29:30.879]      // while-condition  =>  TRUE
[23:29:30.879]      // while "1"  (timeout="200")
[23:29:30.879]      // while-condition  =>  TRUE
[23:29:30.879]      // while "1"  (timeout="200")
[23:29:30.879]      // while-condition  =>  TRUE
[23:29:30.880]      // while "1"  (timeout="200")
[23:29:30.880]      // while-condition  =>  TRUE
[23:29:30.880]      // while "1"  (timeout="200")
[23:29:30.880]      // while-condition  =>  TRUE
[23:29:30.880]      // while "1"  (timeout="200")
[23:29:30.880]      // while-condition  =>  TRUE
[23:29:30.880]      // while "1"  (timeout="200")
[23:29:30.880]      // while-condition  =>  TRUE
[23:29:30.880]      // while "1"  (timeout="200")
[23:29:30.880]      // while-condition  =>  TRUE
[23:29:30.880]      // while "1"  (timeout="200")
[23:29:30.881]      // while-condition  =>  TRUE
[23:29:30.881]      // while "1"  (timeout="200")
[23:29:30.881]      // while  =>  TIMEOUT
[23:29:30.881]      // end while "1"
[23:29:30.881]    </control>
[23:29:30.882]    <control if="canReadPins" while="" timeout="0" info="">
[23:29:30.882]      // if-block "canReadPins"
[23:29:30.882]        // =>  TRUE
[23:29:30.882]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:29:30.882]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:29:30.882]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:29:30.882]        // while-condition  =>  FALSE
[23:29:30.882]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:29:30.883]      </control>
[23:29:30.883]      // end if-block "canReadPins"
[23:29:30.883]    </control>
[23:29:30.883]    <control if="!canReadPins" while="" timeout="0" info="">
[23:29:30.883]      // if-block "!canReadPins"
[23:29:30.883]        // =>  FALSE
[23:29:30.883]      // skip if-block "!canReadPins"
[23:29:30.883]    </control>
[23:29:30.883]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:29:30.883]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:29:30.883]        // =>  TRUE
[23:29:30.884]      <block atomic="false" info="">
[23:29:30.884]        WriteAP(0x00, 0x190008);
[23:29:30.885]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:29:30.885]        WriteAP(0xF0, 0x01);
[23:29:30.886]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:29:30.886]      </block>
[23:29:30.886]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:29:30.886]    </control>
[23:29:30.886]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:29:30.886]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:29:30.886]        // =>  FALSE
[23:29:30.886]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:29:30.886]    </control>
[23:29:30.888]    <block atomic="false" info="">
[23:29:30.888]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:29:30.889]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:29:30.889]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:29:30.889]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:29:30.890]      __ap = 0; //lets make sure we reset the access point selection
[23:29:30.890]        // -> [__ap <= 0x00000000]
[23:29:30.890]    </block>
[23:29:30.890]  </sequence>
[23:29:30.890]  
[23:29:30.896]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:29:30.896]  
[23:29:30.896]  <debugvars>
[23:29:30.896]    // Pre-defined
[23:29:30.898]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:30.898]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:30.898]    __dp=0x00000000
[23:29:30.898]    __ap=0x00000000
[23:29:30.898]    __traceout=0x00000000      (Trace Disabled)
[23:29:30.898]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:30.898]    __FlashAddr=0x00000000
[23:29:30.898]    __FlashLen=0x00000000
[23:29:30.898]    __FlashArg=0x00000000
[23:29:30.898]    __FlashOp=0x00000000
[23:29:30.898]    __Result=0x00000000
[23:29:30.899]  </debugvars>
[23:29:30.899]  
[23:29:30.899]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:29:30.899]    <block atomic="false" info="">
[23:29:30.899]      __var deviceID = 0;
[23:29:30.899]        // -> [deviceID <= 0x00000000]
[23:29:30.899]      __var version = 0;
[23:29:30.899]        // -> [version <= 0x00000000]
[23:29:30.899]      __var partNum = 0;
[23:29:30.899]        // -> [partNum <= 0x00000000]
[23:29:30.899]      __var manuf = 0;
[23:29:30.899]        // -> [manuf <= 0x00000000]
[23:29:30.899]      __var isMSPM0G1X0X_G3X0X = 0;
[23:29:30.899]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:29:30.899]      __var isProduction = 0;
[23:29:30.900]        // -> [isProduction <= 0x00000000]
[23:29:30.900]      __var continueId = 0;
[23:29:30.900]        // -> [continueId <= 0x00000000]
[23:29:30.900]      deviceID =   Read32(0x41C40004);
[23:29:30.901]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:29:30.901]        // -> [deviceID <= 0x2BB8802F]
[23:29:30.901]      version = deviceID >> 28;
[23:29:30.902]        // -> [version <= 0x00000002]
[23:29:30.903]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:29:30.903]        // -> [partNum <= 0x0000BB88]
[23:29:30.903]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:29:30.903]        // -> [manuf <= 0x00000017]
[23:29:30.903]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:29:30.903]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:29:30.903]      isProduction = (version > 0);
[23:29:30.903]        // -> [isProduction <= 0x00000001]
[23:29:30.905]    </block>
[23:29:30.905]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:29:30.905]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:29:30.905]        // =>  FALSE
[23:29:30.905]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:29:30.906]    </control>
[23:29:30.906]    <control if="continueId == 4" while="" timeout="0" info="">
[23:29:30.906]      // if-block "continueId == 4"
[23:29:30.906]        // =>  FALSE
[23:29:30.906]      // skip if-block "continueId == 4"
[23:29:30.906]    </control>
[23:29:30.906]    <control if="!isProduction" while="" timeout="0" info="">
[23:29:30.906]      // if-block "!isProduction"
[23:29:30.907]        // =>  FALSE
[23:29:30.907]      // skip if-block "!isProduction"
[23:29:30.907]    </control>
[23:29:30.907]  </sequence>
[23:29:30.907]  
[23:29:34.356]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:29:34.356]  
[23:29:34.356]  <debugvars>
[23:29:34.356]    // Pre-defined
[23:29:34.356]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:34.356]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:29:34.356]    __dp=0x00000000
[23:29:34.356]    __ap=0x00000000
[23:29:34.356]    __traceout=0x00000000      (Trace Disabled)
[23:29:34.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:34.356]    __FlashAddr=0x00000000
[23:29:34.356]    __FlashLen=0x00000000
[23:29:34.356]    __FlashArg=0x00000000
[23:29:34.356]    __FlashOp=0x00000000
[23:29:34.357]    __Result=0x00000000
[23:29:34.357]  </debugvars>
[23:29:34.357]  
[23:29:34.357]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:29:34.357]    <block atomic="false" info="">
[23:29:34.357]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:29:34.357]        // -> [isSWJ <= 0x00000001]
[23:29:34.357]      __var hasDormant = __protocol & 0x00020000;
[23:29:34.357]        // -> [hasDormant <= 0x00000000]
[23:29:34.357]      __var protType   = __protocol & 0x0000FFFF;
[23:29:34.358]        // -> [protType <= 0x00000002]
[23:29:34.358]    </block>
[23:29:34.358]    <control if="protType == 1" while="" timeout="0" info="">
[23:29:34.359]      // if-block "protType == 1"
[23:29:34.359]        // =>  FALSE
[23:29:34.359]      // skip if-block "protType == 1"
[23:29:34.359]    </control>
[23:29:34.359]    <control if="protType == 2" while="" timeout="0" info="">
[23:29:34.359]      // if-block "protType == 2"
[23:29:34.359]        // =>  TRUE
[23:29:34.359]      <control if="isSWJ" while="" timeout="0" info="">
[23:29:34.359]        // if-block "isSWJ"
[23:29:34.359]          // =>  TRUE
[23:29:34.359]        <control if="hasDormant" while="" timeout="0" info="">
[23:29:34.359]          // if-block "hasDormant"
[23:29:34.359]            // =>  FALSE
[23:29:34.360]          // skip if-block "hasDormant"
[23:29:34.360]        </control>
[23:29:34.360]        <control if="!hasDormant" while="" timeout="0" info="">
[23:29:34.360]          // if-block "!hasDormant"
[23:29:34.360]            // =>  TRUE
[23:29:34.360]          <block atomic="false" info="">
[23:29:34.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:29:34.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:34.361]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:29:34.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:29:34.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:29:34.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:34.361]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:29:34.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:29:34.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:29:34.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:34.363]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:29:34.363]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:29:34.363]          </block>
[23:29:34.364]          // end if-block "!hasDormant"
[23:29:34.364]        </control>
[23:29:34.364]        // end if-block "isSWJ"
[23:29:34.364]      </control>
[23:29:34.364]      <control if="!isSWJ" while="" timeout="0" info="">
[23:29:34.364]        // if-block "!isSWJ"
[23:29:34.364]          // =>  FALSE
[23:29:34.364]        // skip if-block "!isSWJ"
[23:29:34.364]      </control>
[23:29:34.364]      <block atomic="false" info="">
[23:29:34.364]        ReadDP(0x0);
[23:29:34.365]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:29:34.365]      </block>
[23:29:34.365]      // end if-block "protType == 2"
[23:29:34.365]    </control>
[23:29:34.365]  </sequence>
[23:29:34.365]  
[23:29:34.366]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:29:34.366]  
[23:29:34.366]  <debugvars>
[23:29:34.366]    // Pre-defined
[23:29:34.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:34.366]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:29:34.366]    __dp=0x00000000
[23:29:34.366]    __ap=0x00000000
[23:29:34.366]    __traceout=0x00000000      (Trace Disabled)
[23:29:34.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:34.366]    __FlashAddr=0x00000000
[23:29:34.366]    __FlashLen=0x00000000
[23:29:34.366]    __FlashArg=0x00000000
[23:29:34.367]    __FlashOp=0x00000000
[23:29:34.367]    __Result=0x00000000
[23:29:34.367]  </debugvars>
[23:29:34.368]  
[23:29:34.368]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:29:34.368]    <block atomic="false" info="">
[23:29:34.368]      __var SW_DP_ABORT       = 0x0;
[23:29:34.368]        // -> [SW_DP_ABORT <= 0x00000000]
[23:29:34.368]      __var DP_CTRL_STAT      = 0x4;
[23:29:34.368]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:29:34.368]      __var DP_SELECT         = 0x8;
[23:29:34.369]        // -> [DP_SELECT <= 0x00000008]
[23:29:34.369]      __var powered_down      = 0;
[23:29:34.369]        // -> [powered_down <= 0x00000000]
[23:29:34.369]      WriteDP(DP_SELECT, 0x00000000);
[23:29:34.369]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:29:34.370]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:29:34.370]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:29:34.370]        // -> [powered_down <= 0x00000001]
[23:29:34.370]    </block>
[23:29:34.370]    <control if="powered_down" while="" timeout="0" info="">
[23:29:34.371]      // if-block "powered_down"
[23:29:34.371]        // =>  TRUE
[23:29:34.371]      <block atomic="false" info="">
[23:29:34.371]        Message(0, "Debug/System power-up request sent");
[23:29:34.372]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:29:34.373]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:29:34.373]      </block>
[23:29:34.373]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:29:34.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.373]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:29:34.373]        // while-condition  =>  FALSE
[23:29:34.373]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:29:34.373]      </control>
[23:29:34.373]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:29:34.373]        // if-block "(__protocol & 0xFFFF) == 1"
[23:29:34.374]          // =>  FALSE
[23:29:34.374]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:29:34.374]      </control>
[23:29:34.374]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:29:34.374]        // if-block "(__protocol & 0xFFFF) == 2"
[23:29:34.374]          // =>  TRUE
[23:29:34.374]        <block atomic="false" info="">
[23:29:34.374]          Message(0, "executing SWD power up");
[23:29:34.376]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:29:34.376]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:29:34.376]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:29:34.376]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:29:34.376]        </block>
[23:29:34.378]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:29:34.378]      </control>
[23:29:34.378]      // end if-block "powered_down"
[23:29:34.378]    </control>
[23:29:34.378]    <block atomic="false" info="">
[23:29:34.378]      __var DEBUG_PORT_VAL    = 0;
[23:29:34.378]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:29:34.378]      __var ACCESS_POINT_VAL  = 0;
[23:29:34.378]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:29:34.378]      __ap = 1; 
[23:29:34.378]        // -> [__ap <= 0x00000001]
[23:29:34.378]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:29:34.379]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:29:34.380]      __ap = 4;
[23:29:34.380]        // -> [__ap <= 0x00000004]
[23:29:34.380]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:29:34.382]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:29:34.382]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:29:34.382]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:29:34.383]    </block>
[23:29:34.384]    <block atomic="false" info="">
[23:29:34.384]      __var nReset = 0x80;
[23:29:34.384]        // -> [nReset <= 0x00000080]
[23:29:34.384]      __var canReadPins = 0;
[23:29:34.384]        // -> [canReadPins <= 0x00000000]
[23:29:34.384]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:29:34.384]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:29:34.384]        // -> [canReadPins <= 0x00000001]
[23:29:34.384]    </block>
[23:29:34.384]    <control if="" while="1" timeout="200" info="">
[23:29:34.385]      // while "1"  (timeout="200")
[23:29:34.385]      // while-condition  =>  TRUE
[23:29:34.385]      // while "1"  (timeout="200")
[23:29:34.385]      // while-condition  =>  TRUE
[23:29:34.385]      // while "1"  (timeout="200")
[23:29:34.385]      // while-condition  =>  TRUE
[23:29:34.385]      // while "1"  (timeout="200")
[23:29:34.385]      // while-condition  =>  TRUE
[23:29:34.385]      // while "1"  (timeout="200")
[23:29:34.385]      // while-condition  =>  TRUE
[23:29:34.385]      // while "1"  (timeout="200")
[23:29:34.385]      // while-condition  =>  TRUE
[23:29:34.385]      // while "1"  (timeout="200")
[23:29:34.385]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.386]      // while-condition  =>  TRUE
[23:29:34.386]      // while "1"  (timeout="200")
[23:29:34.388]      // while-condition  =>  TRUE
[23:29:34.388]      // while "1"  (timeout="200")
[23:29:34.388]      // while-condition  =>  TRUE
[23:29:34.388]      // while "1"  (timeout="200")
[23:29:34.388]      // while-condition  =>  TRUE
[23:29:34.388]      // while "1"  (timeout="200")
[23:29:34.388]      // while-condition  =>  TRUE
[23:29:34.388]      // while "1"  (timeout="200")
[23:29:34.389]      // while-condition  =>  TRUE
[23:29:34.389]      // while "1"  (timeout="200")
[23:29:34.389]      // while-condition  =>  TRUE
[23:29:34.389]      // while "1"  (timeout="200")
[23:29:34.389]      // while-condition  =>  TRUE
[23:29:34.389]      // while "1"  (timeout="200")
[23:29:34.389]      // while-condition  =>  TRUE
[23:29:34.389]      // while "1"  (timeout="200")
[23:29:34.389]      // while-condition  =>  TRUE
[23:29:34.389]      // while "1"  (timeout="200")
[23:29:34.389]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.390]      // while "1"  (timeout="200")
[23:29:34.390]      // while-condition  =>  TRUE
[23:29:34.391]      // while "1"  (timeout="200")
[23:29:34.391]      // while-condition  =>  TRUE
[23:29:34.391]      // while "1"  (timeout="200")
[23:29:34.391]      // while-condition  =>  TRUE
[23:29:34.391]      // while "1"  (timeout="200")
[23:29:34.391]      // while-condition  =>  TRUE
[23:29:34.391]      // while "1"  (timeout="200")
[23:29:34.391]      // while-condition  =>  TRUE
[23:29:34.391]      // while "1"  (timeout="200")
[23:29:34.391]      // while-condition  =>  TRUE
[23:29:34.391]      // while "1"  (timeout="200")
[23:29:34.391]      // while-condition  =>  TRUE
[23:29:34.391]      // while "1"  (timeout="200")
[23:29:34.393]      // while-condition  =>  TRUE
[23:29:34.393]      // while "1"  (timeout="200")
[23:29:34.393]      // while-condition  =>  TRUE
[23:29:34.393]      // while "1"  (timeout="200")
[23:29:34.393]      // while-condition  =>  TRUE
[23:29:34.393]      // while "1"  (timeout="200")
[23:29:34.394]      // while-condition  =>  TRUE
[23:29:34.394]      // while "1"  (timeout="200")
[23:29:34.394]      // while-condition  =>  TRUE
[23:29:34.394]      // while "1"  (timeout="200")
[23:29:34.394]      // while-condition  =>  TRUE
[23:29:34.394]      // while "1"  (timeout="200")
[23:29:34.395]      // while-condition  =>  TRUE
[23:29:34.395]      // while "1"  (timeout="200")
[23:29:34.395]      // while-condition  =>  TRUE
[23:29:34.395]      // while "1"  (timeout="200")
[23:29:34.395]      // while-condition  =>  TRUE
[23:29:34.396]      // while "1"  (timeout="200")
[23:29:34.396]      // while-condition  =>  TRUE
[23:29:34.396]      // while "1"  (timeout="200")
[23:29:34.396]      // while-condition  =>  TRUE
[23:29:34.396]      // while "1"  (timeout="200")
[23:29:34.396]      // while-condition  =>  TRUE
[23:29:34.396]      // while "1"  (timeout="200")
[23:29:34.396]      // while-condition  =>  TRUE
[23:29:34.397]      // while "1"  (timeout="200")
[23:29:34.397]      // while  =>  TIMEOUT
[23:29:34.397]      // end while "1"
[23:29:34.397]    </control>
[23:29:34.397]    <control if="canReadPins" while="" timeout="0" info="">
[23:29:34.397]      // if-block "canReadPins"
[23:29:34.397]        // =>  TRUE
[23:29:34.397]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:29:34.397]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:29:34.398]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:29:34.398]        // while-condition  =>  FALSE
[23:29:34.398]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:29:34.398]      </control>
[23:29:34.398]      // end if-block "canReadPins"
[23:29:34.398]    </control>
[23:29:34.398]    <control if="!canReadPins" while="" timeout="0" info="">
[23:29:34.398]      // if-block "!canReadPins"
[23:29:34.399]        // =>  FALSE
[23:29:34.399]      // skip if-block "!canReadPins"
[23:29:34.399]    </control>
[23:29:34.399]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:29:34.399]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:29:34.399]        // =>  TRUE
[23:29:34.399]      <block atomic="false" info="">
[23:29:34.399]        WriteAP(0x00, 0x190008);
[23:29:34.400]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:29:34.400]        WriteAP(0xF0, 0x01);
[23:29:34.401]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:29:34.402]      </block>
[23:29:34.402]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:29:34.402]    </control>
[23:29:34.402]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:29:34.402]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:29:34.402]        // =>  FALSE
[23:29:34.402]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:29:34.403]    </control>
[23:29:34.403]    <block atomic="false" info="">
[23:29:34.403]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:29:34.404]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:29:34.404]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:29:34.404]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:29:34.405]      __ap = 0; //lets make sure we reset the access point selection
[23:29:34.405]        // -> [__ap <= 0x00000000]
[23:29:34.405]    </block>
[23:29:34.405]  </sequence>
[23:29:34.405]  
[23:29:34.412]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:29:34.412]  
[23:29:34.412]  <debugvars>
[23:29:34.412]    // Pre-defined
[23:29:34.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:34.412]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:29:34.412]    __dp=0x00000000
[23:29:34.412]    __ap=0x00000000
[23:29:34.412]    __traceout=0x00000000      (Trace Disabled)
[23:29:34.412]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:34.413]    __FlashAddr=0x00000000
[23:29:34.413]    __FlashLen=0x00000000
[23:29:34.413]    __FlashArg=0x00000000
[23:29:34.413]    __FlashOp=0x00000000
[23:29:34.413]    __Result=0x00000000
[23:29:34.413]  </debugvars>
[23:29:34.414]  
[23:29:34.414]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:29:34.414]    <block atomic="false" info="">
[23:29:34.414]      __var deviceID = 0;
[23:29:34.414]        // -> [deviceID <= 0x00000000]
[23:29:34.414]      __var version = 0;
[23:29:34.415]        // -> [version <= 0x00000000]
[23:29:34.415]      __var partNum = 0;
[23:29:34.415]        // -> [partNum <= 0x00000000]
[23:29:34.415]      __var manuf = 0;
[23:29:34.415]        // -> [manuf <= 0x00000000]
[23:29:34.415]      __var isMSPM0G1X0X_G3X0X = 0;
[23:29:34.415]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:29:34.415]      __var isProduction = 0;
[23:29:34.416]        // -> [isProduction <= 0x00000000]
[23:29:34.416]      __var continueId = 0;
[23:29:34.416]        // -> [continueId <= 0x00000000]
[23:29:34.416]      deviceID =   Read32(0x41C40004);
[23:29:34.417]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:29:34.417]        // -> [deviceID <= 0x2BB8802F]
[23:29:34.417]      version = deviceID >> 28;
[23:29:34.418]        // -> [version <= 0x00000002]
[23:29:34.418]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:29:34.418]        // -> [partNum <= 0x0000BB88]
[23:29:34.418]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:29:34.418]        // -> [manuf <= 0x00000017]
[23:29:34.418]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:29:34.418]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:29:34.418]      isProduction = (version > 0);
[23:29:34.418]        // -> [isProduction <= 0x00000001]
[23:29:34.418]    </block>
[23:29:34.418]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:29:34.418]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:29:34.418]        // =>  FALSE
[23:29:34.418]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:29:34.419]    </control>
[23:29:34.419]    <control if="continueId == 4" while="" timeout="0" info="">
[23:29:34.419]      // if-block "continueId == 4"
[23:29:34.419]        // =>  FALSE
[23:29:34.419]      // skip if-block "continueId == 4"
[23:29:34.419]    </control>
[23:29:34.419]    <control if="!isProduction" while="" timeout="0" info="">
[23:29:34.419]      // if-block "!isProduction"
[23:29:34.419]        // =>  FALSE
[23:29:34.419]      // skip if-block "!isProduction"
[23:29:34.420]    </control>
[23:29:34.420]  </sequence>
[23:29:34.420]  
[23:32:49.209]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:32:49.209]  
[23:32:49.218]  <debugvars>
[23:32:49.218]    // Pre-defined
[23:32:49.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:49.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:32:49.218]    __dp=0x00000000
[23:32:49.218]    __ap=0x00000000
[23:32:49.218]    __traceout=0x00000000      (Trace Disabled)
[23:32:49.219]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:49.219]    __FlashAddr=0x00000000
[23:32:49.219]    __FlashLen=0x00000000
[23:32:49.219]    __FlashArg=0x00000000
[23:32:49.219]    __FlashOp=0x00000000
[23:32:49.219]    __Result=0x00000000
[23:32:49.219]  </debugvars>
[23:32:49.219]  
[23:32:49.219]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:32:49.220]    <block atomic="false" info="">
[23:32:49.220]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:32:49.220]        // -> [isSWJ <= 0x00000001]
[23:32:49.220]      __var hasDormant = __protocol & 0x00020000;
[23:32:49.220]        // -> [hasDormant <= 0x00000000]
[23:32:49.220]      __var protType   = __protocol & 0x0000FFFF;
[23:32:49.220]        // -> [protType <= 0x00000002]
[23:32:49.220]    </block>
[23:32:49.220]    <control if="protType == 1" while="" timeout="0" info="">
[23:32:49.220]      // if-block "protType == 1"
[23:32:49.220]        // =>  FALSE
[23:32:49.221]      // skip if-block "protType == 1"
[23:32:49.221]    </control>
[23:32:49.221]    <control if="protType == 2" while="" timeout="0" info="">
[23:32:49.221]      // if-block "protType == 2"
[23:32:49.221]        // =>  TRUE
[23:32:49.221]      <control if="isSWJ" while="" timeout="0" info="">
[23:32:49.221]        // if-block "isSWJ"
[23:32:49.221]          // =>  TRUE
[23:32:49.221]        <control if="hasDormant" while="" timeout="0" info="">
[23:32:49.221]          // if-block "hasDormant"
[23:32:49.221]            // =>  FALSE
[23:32:49.222]          // skip if-block "hasDormant"
[23:32:49.222]        </control>
[23:32:49.222]        <control if="!hasDormant" while="" timeout="0" info="">
[23:32:49.222]          // if-block "!hasDormant"
[23:32:49.222]            // =>  TRUE
[23:32:49.222]          <block atomic="false" info="">
[23:32:49.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:32:49.222]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:49.223]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:32:49.223]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:32:49.223]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:32:49.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:49.224]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:32:49.224]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:32:49.224]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:32:49.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:49.225]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:32:49.225]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:32:49.225]          </block>
[23:32:49.225]          // end if-block "!hasDormant"
[23:32:49.225]        </control>
[23:32:49.225]        // end if-block "isSWJ"
[23:32:49.225]      </control>
[23:32:49.225]      <control if="!isSWJ" while="" timeout="0" info="">
[23:32:49.225]        // if-block "!isSWJ"
[23:32:49.225]          // =>  FALSE
[23:32:49.226]        // skip if-block "!isSWJ"
[23:32:49.226]      </control>
[23:32:49.226]      <block atomic="false" info="">
[23:32:49.226]        ReadDP(0x0);
[23:32:49.226]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:32:49.226]      </block>
[23:32:49.227]      // end if-block "protType == 2"
[23:32:49.227]    </control>
[23:32:49.227]  </sequence>
[23:32:49.227]  
[23:32:49.228]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:32:49.228]  
[23:32:49.228]  <debugvars>
[23:32:49.228]    // Pre-defined
[23:32:49.228]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:49.228]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:32:49.228]    __dp=0x00000000
[23:32:49.228]    __ap=0x00000000
[23:32:49.228]    __traceout=0x00000000      (Trace Disabled)
[23:32:49.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:49.229]    __FlashAddr=0x00000000
[23:32:49.229]    __FlashLen=0x00000000
[23:32:49.229]    __FlashArg=0x00000000
[23:32:49.229]    __FlashOp=0x00000000
[23:32:49.229]    __Result=0x00000000
[23:32:49.229]  </debugvars>
[23:32:49.229]  
[23:32:49.229]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:32:49.229]    <block atomic="false" info="">
[23:32:49.229]      __var SW_DP_ABORT       = 0x0;
[23:32:49.229]        // -> [SW_DP_ABORT <= 0x00000000]
[23:32:49.231]      __var DP_CTRL_STAT      = 0x4;
[23:32:49.231]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:32:49.231]      __var DP_SELECT         = 0x8;
[23:32:49.231]        // -> [DP_SELECT <= 0x00000008]
[23:32:49.231]      __var powered_down      = 0;
[23:32:49.231]        // -> [powered_down <= 0x00000000]
[23:32:49.231]      WriteDP(DP_SELECT, 0x00000000);
[23:32:49.232]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:32:49.232]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:32:49.232]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:32:49.232]        // -> [powered_down <= 0x00000001]
[23:32:49.232]    </block>
[23:32:49.232]    <control if="powered_down" while="" timeout="0" info="">
[23:32:49.232]      // if-block "powered_down"
[23:32:49.233]        // =>  TRUE
[23:32:49.233]      <block atomic="false" info="">
[23:32:49.233]        Message(0, "Debug/System power-up request sent");
[23:32:49.234]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:32:49.236]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:32:49.236]      </block>
[23:32:49.236]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:32:49.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:32:49.237]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:32:49.237]        // while-condition  =>  FALSE
[23:32:49.237]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:32:49.237]      </control>
[23:32:49.237]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:32:49.237]        // if-block "(__protocol & 0xFFFF) == 1"
[23:32:49.237]          // =>  FALSE
[23:32:49.237]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:32:49.237]      </control>
[23:32:49.238]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:32:49.238]        // if-block "(__protocol & 0xFFFF) == 2"
[23:32:49.238]          // =>  TRUE
[23:32:49.238]        <block atomic="false" info="">
[23:32:49.238]          Message(0, "executing SWD power up");
[23:32:49.240]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:32:49.240]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:32:49.241]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:32:49.242]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:32:49.242]        </block>
[23:32:49.242]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:32:49.242]      </control>
[23:32:49.242]      // end if-block "powered_down"
[23:32:49.242]    </control>
[23:32:49.242]    <block atomic="false" info="">
[23:32:49.243]      __var DEBUG_PORT_VAL    = 0;
[23:32:49.243]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:32:49.243]      __var ACCESS_POINT_VAL  = 0;
[23:32:49.243]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:32:49.243]      __ap = 1; 
[23:32:49.243]        // -> [__ap <= 0x00000001]
[23:32:49.244]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:32:49.244]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:32:49.245]      __ap = 4;
[23:32:49.245]        // -> [__ap <= 0x00000004]
[23:32:49.245]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:32:49.246]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:32:49.246]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:32:49.246]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:32:49.248]    </block>
[23:32:49.248]    <block atomic="false" info="">
[23:32:49.248]      __var nReset = 0x80;
[23:32:49.248]        // -> [nReset <= 0x00000080]
[23:32:49.248]      __var canReadPins = 0;
[23:32:49.248]        // -> [canReadPins <= 0x00000000]
[23:32:49.248]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:32:49.248]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:32:49.250]        // -> [canReadPins <= 0x00000001]
[23:32:49.250]    </block>
[23:32:49.250]    <control if="" while="1" timeout="200" info="">
[23:32:49.250]      // while "1"  (timeout="200")
[23:32:49.250]      // while-condition  =>  TRUE
[23:32:49.250]      // while "1"  (timeout="200")
[23:32:49.250]      // while-condition  =>  TRUE
[23:32:49.250]      // while "1"  (timeout="200")
[23:32:49.250]      // while-condition  =>  TRUE
[23:32:49.250]      // while "1"  (timeout="200")
[23:32:49.250]      // while-condition  =>  TRUE
[23:32:49.250]      // while "1"  (timeout="200")
[23:32:49.250]      // while-condition  =>  TRUE
[23:32:49.251]      // while "1"  (timeout="200")
[23:32:49.251]      // while-condition  =>  TRUE
[23:32:49.251]      // while "1"  (timeout="200")
[23:32:49.251]      // while-condition  =>  TRUE
[23:32:49.251]      // while "1"  (timeout="200")
[23:32:49.251]      // while-condition  =>  TRUE
[23:32:49.251]      // while "1"  (timeout="200")
[23:32:49.251]      // while-condition  =>  TRUE
[23:32:49.251]      // while "1"  (timeout="200")
[23:32:49.252]      // while-condition  =>  TRUE
[23:32:49.252]      // while "1"  (timeout="200")
[23:32:49.252]      // while-condition  =>  TRUE
[23:32:49.252]      // while "1"  (timeout="200")
[23:32:49.252]      // while-condition  =>  TRUE
[23:32:49.252]      // while "1"  (timeout="200")
[23:32:49.252]      // while-condition  =>  TRUE
[23:32:49.252]      // while "1"  (timeout="200")
[23:32:49.252]      // while-condition  =>  TRUE
[23:32:49.253]      // while "1"  (timeout="200")
[23:32:49.253]      // while-condition  =>  TRUE
[23:32:49.253]      // while "1"  (timeout="200")
[23:32:49.253]      // while-condition  =>  TRUE
[23:32:49.253]      // while "1"  (timeout="200")
[23:32:49.253]      // while-condition  =>  TRUE
[23:32:49.254]      // while "1"  (timeout="200")
[23:32:49.254]      // while-condition  =>  TRUE
[23:32:49.254]      // while "1"  (timeout="200")
[23:32:49.254]      // while-condition  =>  TRUE
[23:32:49.254]      // while "1"  (timeout="200")
[23:32:49.254]      // while-condition  =>  TRUE
[23:32:49.254]      // while "1"  (timeout="200")
[23:32:49.255]      // while-condition  =>  TRUE
[23:32:49.255]      // while "1"  (timeout="200")
[23:32:49.255]      // while-condition  =>  TRUE
[23:32:49.255]      // while "1"  (timeout="200")
[23:32:49.255]      // while-condition  =>  TRUE
[23:32:49.255]      // while "1"  (timeout="200")
[23:32:49.255]      // while-condition  =>  TRUE
[23:32:49.255]      // while "1"  (timeout="200")
[23:32:49.255]      // while-condition  =>  TRUE
[23:32:49.255]      // while "1"  (timeout="200")
[23:32:49.255]      // while-condition  =>  TRUE
[23:32:49.255]      // while "1"  (timeout="200")
[23:32:49.256]      // while-condition  =>  TRUE
[23:32:49.256]      // while "1"  (timeout="200")
[23:32:49.256]      // while  =>  TIMEOUT
[23:32:49.256]      // end while "1"
[23:32:49.256]    </control>
[23:32:49.256]    <control if="canReadPins" while="" timeout="0" info="">
[23:32:49.256]      // if-block "canReadPins"
[23:32:49.256]        // =>  TRUE
[23:32:49.256]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:32:49.256]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:32:49.257]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:32:49.257]        // while-condition  =>  FALSE
[23:32:49.257]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:32:49.257]      </control>
[23:32:49.257]      // end if-block "canReadPins"
[23:32:49.257]    </control>
[23:32:49.257]    <control if="!canReadPins" while="" timeout="0" info="">
[23:32:49.258]      // if-block "!canReadPins"
[23:32:49.258]        // =>  FALSE
[23:32:49.258]      // skip if-block "!canReadPins"
[23:32:49.258]    </control>
[23:32:49.258]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:32:49.258]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:32:49.258]        // =>  TRUE
[23:32:49.259]      <block atomic="false" info="">
[23:32:49.259]        WriteAP(0x00, 0x190008);
[23:32:49.259]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:32:49.259]        WriteAP(0xF0, 0x01);
[23:32:49.261]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:32:49.261]      </block>
[23:32:49.261]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:32:49.261]    </control>
[23:32:49.261]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:32:49.261]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:32:49.261]        // =>  FALSE
[23:32:49.262]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:32:49.262]    </control>
[23:32:49.262]    <block atomic="false" info="">
[23:32:49.262]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:32:49.263]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:32:49.263]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:32:49.263]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:32:49.264]      __ap = 0; //lets make sure we reset the access point selection
[23:32:49.265]        // -> [__ap <= 0x00000000]
[23:32:49.265]    </block>
[23:32:49.265]  </sequence>
[23:32:49.265]  
[23:32:49.271]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:32:49.271]  
[23:32:49.271]  <debugvars>
[23:32:49.272]    // Pre-defined
[23:32:49.272]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:49.272]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:32:49.272]    __dp=0x00000000
[23:32:49.272]    __ap=0x00000000
[23:32:49.272]    __traceout=0x00000000      (Trace Disabled)
[23:32:49.272]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:49.272]    __FlashAddr=0x00000000
[23:32:49.272]    __FlashLen=0x00000000
[23:32:49.272]    __FlashArg=0x00000000
[23:32:49.272]    __FlashOp=0x00000000
[23:32:49.273]    __Result=0x00000000
[23:32:49.273]  </debugvars>
[23:32:49.273]  
[23:32:49.273]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:32:49.273]    <block atomic="false" info="">
[23:32:49.273]      __var deviceID = 0;
[23:32:49.273]        // -> [deviceID <= 0x00000000]
[23:32:49.273]      __var version = 0;
[23:32:49.273]        // -> [version <= 0x00000000]
[23:32:49.273]      __var partNum = 0;
[23:32:49.273]        // -> [partNum <= 0x00000000]
[23:32:49.273]      __var manuf = 0;
[23:32:49.274]        // -> [manuf <= 0x00000000]
[23:32:49.274]      __var isMSPM0G1X0X_G3X0X = 0;
[23:32:49.274]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:32:49.274]      __var isProduction = 0;
[23:32:49.274]        // -> [isProduction <= 0x00000000]
[23:32:49.274]      __var continueId = 0;
[23:32:49.274]        // -> [continueId <= 0x00000000]
[23:32:49.274]      deviceID =   Read32(0x41C40004);
[23:32:49.276]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:32:49.276]        // -> [deviceID <= 0x2BB8802F]
[23:32:49.276]      version = deviceID >> 28;
[23:32:49.276]        // -> [version <= 0x00000002]
[23:32:49.276]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:32:49.276]        // -> [partNum <= 0x0000BB88]
[23:32:49.276]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:32:49.276]        // -> [manuf <= 0x00000017]
[23:32:49.276]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:32:49.277]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:32:49.277]      isProduction = (version > 0);
[23:32:49.277]        // -> [isProduction <= 0x00000001]
[23:32:49.277]    </block>
[23:32:49.277]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:32:49.277]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:32:49.277]        // =>  FALSE
[23:32:49.277]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:32:49.277]    </control>
[23:32:49.277]    <control if="continueId == 4" while="" timeout="0" info="">
[23:32:49.277]      // if-block "continueId == 4"
[23:32:49.278]        // =>  FALSE
[23:32:49.278]      // skip if-block "continueId == 4"
[23:32:49.278]    </control>
[23:32:49.278]    <control if="!isProduction" while="" timeout="0" info="">
[23:32:49.278]      // if-block "!isProduction"
[23:32:49.278]        // =>  FALSE
[23:32:49.278]      // skip if-block "!isProduction"
[23:32:49.278]    </control>
[23:32:49.278]  </sequence>
[23:32:49.278]  
[23:32:53.531]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:32:53.531]  
[23:32:53.540]  <debugvars>
[23:32:53.540]    // Pre-defined
[23:32:53.540]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:53.540]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:32:53.540]    __dp=0x00000000
[23:32:53.540]    __ap=0x00000000
[23:32:53.540]    __traceout=0x00000000      (Trace Disabled)
[23:32:53.540]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:53.540]    __FlashAddr=0x00000000
[23:32:53.540]    __FlashLen=0x00000000
[23:32:53.540]    __FlashArg=0x00000000
[23:32:53.540]    __FlashOp=0x00000000
[23:32:53.541]    __Result=0x00000000
[23:32:53.541]  </debugvars>
[23:32:53.541]  
[23:32:53.542]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:32:53.542]    <block atomic="false" info="">
[23:32:53.542]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:32:53.542]        // -> [isSWJ <= 0x00000001]
[23:32:53.542]      __var hasDormant = __protocol & 0x00020000;
[23:32:53.542]        // -> [hasDormant <= 0x00000000]
[23:32:53.543]      __var protType   = __protocol & 0x0000FFFF;
[23:32:53.543]        // -> [protType <= 0x00000002]
[23:32:53.543]    </block>
[23:32:53.543]    <control if="protType == 1" while="" timeout="0" info="">
[23:32:53.543]      // if-block "protType == 1"
[23:32:53.543]        // =>  FALSE
[23:32:53.543]      // skip if-block "protType == 1"
[23:32:53.544]    </control>
[23:32:53.544]    <control if="protType == 2" while="" timeout="0" info="">
[23:32:53.544]      // if-block "protType == 2"
[23:32:53.544]        // =>  TRUE
[23:32:53.544]      <control if="isSWJ" while="" timeout="0" info="">
[23:32:53.544]        // if-block "isSWJ"
[23:32:53.544]          // =>  TRUE
[23:32:53.544]        <control if="hasDormant" while="" timeout="0" info="">
[23:32:53.544]          // if-block "hasDormant"
[23:32:53.544]            // =>  FALSE
[23:32:53.544]          // skip if-block "hasDormant"
[23:32:53.544]        </control>
[23:32:53.544]        <control if="!hasDormant" while="" timeout="0" info="">
[23:32:53.545]          // if-block "!hasDormant"
[23:32:53.545]            // =>  TRUE
[23:32:53.545]          <block atomic="false" info="">
[23:32:53.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:32:53.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:53.545]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:32:53.546]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:32:53.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:32:53.546]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:53.546]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:32:53.547]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:32:53.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:32:53.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:53.547]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:32:53.548]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:32:53.548]          </block>
[23:32:53.548]          // end if-block "!hasDormant"
[23:32:53.548]        </control>
[23:32:53.548]        // end if-block "isSWJ"
[23:32:53.548]      </control>
[23:32:53.548]      <control if="!isSWJ" while="" timeout="0" info="">
[23:32:53.548]        // if-block "!isSWJ"
[23:32:53.548]          // =>  FALSE
[23:32:53.548]        // skip if-block "!isSWJ"
[23:32:53.548]      </control>
[23:32:53.549]      <block atomic="false" info="">
[23:32:53.549]        ReadDP(0x0);
[23:32:53.549]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:32:53.549]      </block>
[23:32:53.549]      // end if-block "protType == 2"
[23:32:53.549]    </control>
[23:32:53.549]  </sequence>
[23:32:53.549]  
[23:32:53.551]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:32:53.551]  
[23:32:53.551]  <debugvars>
[23:32:53.551]    // Pre-defined
[23:32:53.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:53.551]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:32:53.551]    __dp=0x00000000
[23:32:53.551]    __ap=0x00000000
[23:32:53.551]    __traceout=0x00000000      (Trace Disabled)
[23:32:53.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:53.551]    __FlashAddr=0x00000000
[23:32:53.551]    __FlashLen=0x00000000
[23:32:53.552]    __FlashArg=0x00000000
[23:32:53.552]    __FlashOp=0x00000000
[23:32:53.552]    __Result=0x00000000
[23:32:53.552]  </debugvars>
[23:32:53.552]  
[23:32:53.552]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:32:53.553]    <block atomic="false" info="">
[23:32:53.553]      __var SW_DP_ABORT       = 0x0;
[23:32:53.553]        // -> [SW_DP_ABORT <= 0x00000000]
[23:32:53.553]      __var DP_CTRL_STAT      = 0x4;
[23:32:53.553]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:32:53.553]      __var DP_SELECT         = 0x8;
[23:32:53.553]        // -> [DP_SELECT <= 0x00000008]
[23:32:53.553]      __var powered_down      = 0;
[23:32:53.554]        // -> [powered_down <= 0x00000000]
[23:32:53.554]      WriteDP(DP_SELECT, 0x00000000);
[23:32:53.555]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:32:53.555]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:32:53.555]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:32:53.555]        // -> [powered_down <= 0x00000001]
[23:32:53.555]    </block>
[23:32:53.555]    <control if="powered_down" while="" timeout="0" info="">
[23:32:53.555]      // if-block "powered_down"
[23:32:53.555]        // =>  TRUE
[23:32:53.556]      <block atomic="false" info="">
[23:32:53.556]        Message(0, "Debug/System power-up request sent");
[23:32:53.557]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:32:53.558]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:32:53.558]      </block>
[23:32:53.558]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:32:53.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:32:53.558]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:32:53.559]        // while-condition  =>  FALSE
[23:32:53.559]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:32:53.559]      </control>
[23:32:53.559]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:32:53.559]        // if-block "(__protocol & 0xFFFF) == 1"
[23:32:53.559]          // =>  FALSE
[23:32:53.559]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:32:53.559]      </control>
[23:32:53.559]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:32:53.559]        // if-block "(__protocol & 0xFFFF) == 2"
[23:32:53.559]          // =>  TRUE
[23:32:53.559]        <block atomic="false" info="">
[23:32:53.560]          Message(0, "executing SWD power up");
[23:32:53.563]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:32:53.563]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:32:53.563]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:32:53.564]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:32:53.565]        </block>
[23:32:53.565]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:32:53.565]      </control>
[23:32:53.565]      // end if-block "powered_down"
[23:32:53.565]    </control>
[23:32:53.565]    <block atomic="false" info="">
[23:32:53.565]      __var DEBUG_PORT_VAL    = 0;
[23:32:53.565]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:32:53.565]      __var ACCESS_POINT_VAL  = 0;
[23:32:53.565]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:32:53.565]      __ap = 1; 
[23:32:53.565]        // -> [__ap <= 0x00000001]
[23:32:53.566]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:32:53.567]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:32:53.567]      __ap = 4;
[23:32:53.567]        // -> [__ap <= 0x00000004]
[23:32:53.567]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:32:53.568]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:32:53.568]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:32:53.569]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:32:53.570]    </block>
[23:32:53.570]    <block atomic="false" info="">
[23:32:53.570]      __var nReset = 0x80;
[23:32:53.570]        // -> [nReset <= 0x00000080]
[23:32:53.571]      __var canReadPins = 0;
[23:32:53.571]        // -> [canReadPins <= 0x00000000]
[23:32:53.571]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:32:53.571]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:32:53.571]        // -> [canReadPins <= 0x00000001]
[23:32:53.572]    </block>
[23:32:53.572]    <control if="" while="1" timeout="200" info="">
[23:32:53.572]      // while "1"  (timeout="200")
[23:32:53.572]      // while-condition  =>  TRUE
[23:32:53.572]      // while "1"  (timeout="200")
[23:32:53.572]      // while-condition  =>  TRUE
[23:32:53.572]      // while "1"  (timeout="200")
[23:32:53.572]      // while-condition  =>  TRUE
[23:32:53.572]      // while "1"  (timeout="200")
[23:32:53.572]      // while-condition  =>  TRUE
[23:32:53.572]      // while "1"  (timeout="200")
[23:32:53.573]      // while-condition  =>  TRUE
[23:32:53.573]      // while "1"  (timeout="200")
[23:32:53.573]      // while-condition  =>  TRUE
[23:32:53.573]      // while "1"  (timeout="200")
[23:32:53.573]      // while-condition  =>  TRUE
[23:32:53.573]      // while "1"  (timeout="200")
[23:32:53.573]      // while-condition  =>  TRUE
[23:32:53.573]      // while "1"  (timeout="200")
[23:32:53.573]      // while-condition  =>  TRUE
[23:32:53.573]      // while "1"  (timeout="200")
[23:32:53.573]      // while-condition  =>  TRUE
[23:32:53.573]      // while "1"  (timeout="200")
[23:32:53.574]      // while-condition  =>  TRUE
[23:32:53.574]      // while "1"  (timeout="200")
[23:32:53.574]      // while-condition  =>  TRUE
[23:32:53.574]      // while "1"  (timeout="200")
[23:32:53.574]      // while-condition  =>  TRUE
[23:32:53.574]      // while "1"  (timeout="200")
[23:32:53.574]      // while-condition  =>  TRUE
[23:32:53.575]      // while "1"  (timeout="200")
[23:32:53.575]      // while-condition  =>  TRUE
[23:32:53.575]      // while "1"  (timeout="200")
[23:32:53.575]      // while-condition  =>  TRUE
[23:32:53.575]      // while "1"  (timeout="200")
[23:32:53.575]      // while-condition  =>  TRUE
[23:32:53.575]      // while "1"  (timeout="200")
[23:32:53.576]      // while-condition  =>  TRUE
[23:32:53.576]      // while "1"  (timeout="200")
[23:32:53.576]      // while-condition  =>  TRUE
[23:32:53.576]      // while "1"  (timeout="200")
[23:32:53.576]      // while-condition  =>  TRUE
[23:32:53.576]      // while "1"  (timeout="200")
[23:32:53.576]      // while-condition  =>  TRUE
[23:32:53.576]      // while "1"  (timeout="200")
[23:32:53.578]      // while-condition  =>  TRUE
[23:32:53.578]      // while "1"  (timeout="200")
[23:32:53.578]      // while-condition  =>  TRUE
[23:32:53.578]      // while "1"  (timeout="200")
[23:32:53.578]      // while-condition  =>  TRUE
[23:32:53.578]      // while "1"  (timeout="200")
[23:32:53.578]      // while-condition  =>  TRUE
[23:32:53.579]      // while "1"  (timeout="200")
[23:32:53.579]      // while-condition  =>  TRUE
[23:32:53.579]      // while "1"  (timeout="200")
[23:32:53.579]      // while-condition  =>  TRUE
[23:32:53.579]      // while "1"  (timeout="200")
[23:32:53.579]      // while-condition  =>  TRUE
[23:32:53.579]      // while "1"  (timeout="200")
[23:32:53.579]      // while-condition  =>  TRUE
[23:32:53.579]      // while "1"  (timeout="200")
[23:32:53.579]      // while-condition  =>  TRUE
[23:32:53.579]      // while "1"  (timeout="200")
[23:32:53.579]      // while-condition  =>  TRUE
[23:32:53.579]      // while "1"  (timeout="200")
[23:32:53.579]      // while-condition  =>  TRUE
[23:32:53.580]      // while "1"  (timeout="200")
[23:32:53.580]      // while-condition  =>  TRUE
[23:32:53.580]      // while "1"  (timeout="200")
[23:32:53.580]      // while-condition  =>  TRUE
[23:32:53.580]      // while "1"  (timeout="200")
[23:32:53.580]      // while-condition  =>  TRUE
[23:32:53.580]      // while "1"  (timeout="200")
[23:32:53.581]      // while-condition  =>  TRUE
[23:32:53.581]      // while "1"  (timeout="200")
[23:32:53.581]      // while-condition  =>  TRUE
[23:32:53.581]      // while "1"  (timeout="200")
[23:32:53.581]      // while-condition  =>  TRUE
[23:32:53.581]      // while "1"  (timeout="200")
[23:32:53.581]      // while-condition  =>  TRUE
[23:32:53.582]      // while "1"  (timeout="200")
[23:32:53.582]      // while-condition  =>  TRUE
[23:32:53.582]      // while "1"  (timeout="200")
[23:32:53.582]      // while-condition  =>  TRUE
[23:32:53.582]      // while "1"  (timeout="200")
[23:32:53.582]      // while-condition  =>  TRUE
[23:32:53.582]      // while "1"  (timeout="200")
[23:32:53.582]      // while-condition  =>  TRUE
[23:32:53.582]      // while "1"  (timeout="200")
[23:32:53.582]      // while-condition  =>  TRUE
[23:32:53.582]      // while "1"  (timeout="200")
[23:32:53.583]      // while-condition  =>  TRUE
[23:32:53.583]      // while "1"  (timeout="200")
[23:32:53.583]      // while-condition  =>  TRUE
[23:32:53.583]      // while "1"  (timeout="200")
[23:32:53.583]      // while-condition  =>  TRUE
[23:32:53.583]      // while "1"  (timeout="200")
[23:32:53.583]      // while-condition  =>  TRUE
[23:32:53.583]      // while "1"  (timeout="200")
[23:32:53.584]      // while-condition  =>  TRUE
[23:32:53.584]      // while "1"  (timeout="200")
[23:32:53.584]      // while  =>  TIMEOUT
[23:32:53.584]      // end while "1"
[23:32:53.584]    </control>
[23:32:53.584]    <control if="canReadPins" while="" timeout="0" info="">
[23:32:53.584]      // if-block "canReadPins"
[23:32:53.584]        // =>  TRUE
[23:32:53.584]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:32:53.584]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:32:53.585]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:32:53.585]        // while-condition  =>  FALSE
[23:32:53.585]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:32:53.585]      </control>
[23:32:53.585]      // end if-block "canReadPins"
[23:32:53.585]    </control>
[23:32:53.585]    <control if="!canReadPins" while="" timeout="0" info="">
[23:32:53.585]      // if-block "!canReadPins"
[23:32:53.587]        // =>  FALSE
[23:32:53.587]      // skip if-block "!canReadPins"
[23:32:53.587]    </control>
[23:32:53.587]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:32:53.587]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:32:53.587]        // =>  TRUE
[23:32:53.587]      <block atomic="false" info="">
[23:32:53.587]        WriteAP(0x00, 0x190008);
[23:32:53.588]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:32:53.588]        WriteAP(0xF0, 0x01);
[23:32:53.589]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:32:53.589]      </block>
[23:32:53.589]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:32:53.589]    </control>
[23:32:53.590]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:32:53.590]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:32:53.590]        // =>  FALSE
[23:32:53.590]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:32:53.590]    </control>
[23:32:53.590]    <block atomic="false" info="">
[23:32:53.590]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:32:53.591]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:32:53.591]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:32:53.591]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:32:53.594]      __ap = 0; //lets make sure we reset the access point selection
[23:32:53.594]        // -> [__ap <= 0x00000000]
[23:32:53.595]    </block>
[23:32:53.595]  </sequence>
[23:32:53.595]  
[23:32:53.601]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:32:53.601]  
[23:32:53.601]  <debugvars>
[23:32:53.601]    // Pre-defined
[23:32:53.601]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:53.601]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:32:53.601]    __dp=0x00000000
[23:32:53.601]    __ap=0x00000000
[23:32:53.601]    __traceout=0x00000000      (Trace Disabled)
[23:32:53.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:53.601]    __FlashAddr=0x00000000
[23:32:53.601]    __FlashLen=0x00000000
[23:32:53.601]    __FlashArg=0x00000000
[23:32:53.602]    __FlashOp=0x00000000
[23:32:53.602]    __Result=0x00000000
[23:32:53.602]  </debugvars>
[23:32:53.602]  
[23:32:53.602]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:32:53.602]    <block atomic="false" info="">
[23:32:53.602]      __var deviceID = 0;
[23:32:53.603]        // -> [deviceID <= 0x00000000]
[23:32:53.603]      __var version = 0;
[23:32:53.603]        // -> [version <= 0x00000000]
[23:32:53.603]      __var partNum = 0;
[23:32:53.603]        // -> [partNum <= 0x00000000]
[23:32:53.603]      __var manuf = 0;
[23:32:53.603]        // -> [manuf <= 0x00000000]
[23:32:53.603]      __var isMSPM0G1X0X_G3X0X = 0;
[23:32:53.603]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:32:53.603]      __var isProduction = 0;
[23:32:53.604]        // -> [isProduction <= 0x00000000]
[23:32:53.604]      __var continueId = 0;
[23:32:53.605]        // -> [continueId <= 0x00000000]
[23:32:53.605]      deviceID =   Read32(0x41C40004);
[23:32:53.606]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:32:53.606]        // -> [deviceID <= 0x2BB8802F]
[23:32:53.606]      version = deviceID >> 28;
[23:32:53.606]        // -> [version <= 0x00000002]
[23:32:53.606]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:32:53.606]        // -> [partNum <= 0x0000BB88]
[23:32:53.607]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:32:53.607]        // -> [manuf <= 0x00000017]
[23:32:53.607]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:32:53.607]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:32:53.607]      isProduction = (version > 0);
[23:32:53.607]        // -> [isProduction <= 0x00000001]
[23:32:53.607]    </block>
[23:32:53.607]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:32:53.607]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:32:53.607]        // =>  FALSE
[23:32:53.607]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:32:53.608]    </control>
[23:32:53.608]    <control if="continueId == 4" while="" timeout="0" info="">
[23:32:53.608]      // if-block "continueId == 4"
[23:32:53.608]        // =>  FALSE
[23:32:53.608]      // skip if-block "continueId == 4"
[23:32:53.608]    </control>
[23:32:53.608]    <control if="!isProduction" while="" timeout="0" info="">
[23:32:53.608]      // if-block "!isProduction"
[23:32:53.608]        // =>  FALSE
[23:32:53.608]      // skip if-block "!isProduction"
[23:32:53.608]    </control>
[23:32:53.609]  </sequence>
[23:32:53.609]  
[00:39:05.368]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:39:05.368]  
[00:39:05.368]  <debugvars>
[00:39:05.368]    // Pre-defined
[00:39:05.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:05.368]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:05.368]    __dp=0x00000000
[00:39:05.368]    __ap=0x00000000
[00:39:05.368]    __traceout=0x00000000      (Trace Disabled)
[00:39:05.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:05.368]    __FlashAddr=0x00000000
[00:39:05.368]    __FlashLen=0x00000000
[00:39:05.368]    __FlashArg=0x00000000
[00:39:05.368]    __FlashOp=0x00000000
[00:39:05.368]    __Result=0x00000000
[00:39:05.368]  </debugvars>
[00:39:05.368]  
[00:39:05.369]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:39:05.369]    <block atomic="false" info="">
[00:39:05.369]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:39:05.369]        // -> [isSWJ <= 0x00000001]
[00:39:05.369]      __var hasDormant = __protocol & 0x00020000;
[00:39:05.369]        // -> [hasDormant <= 0x00000000]
[00:39:05.369]      __var protType   = __protocol & 0x0000FFFF;
[00:39:05.370]        // -> [protType <= 0x00000002]
[00:39:05.370]    </block>
[00:39:05.370]    <control if="protType == 1" while="" timeout="0" info="">
[00:39:05.370]      // if-block "protType == 1"
[00:39:05.370]        // =>  FALSE
[00:39:05.370]      // skip if-block "protType == 1"
[00:39:05.370]    </control>
[00:39:05.370]    <control if="protType == 2" while="" timeout="0" info="">
[00:39:05.371]      // if-block "protType == 2"
[00:39:05.371]        // =>  TRUE
[00:39:05.371]      <control if="isSWJ" while="" timeout="0" info="">
[00:39:05.371]        // if-block "isSWJ"
[00:39:05.371]          // =>  TRUE
[00:39:05.371]        <control if="hasDormant" while="" timeout="0" info="">
[00:39:05.371]          // if-block "hasDormant"
[00:39:05.371]            // =>  FALSE
[00:39:05.371]          // skip if-block "hasDormant"
[00:39:05.371]        </control>
[00:39:05.371]        <control if="!hasDormant" while="" timeout="0" info="">
[00:39:05.372]          // if-block "!hasDormant"
[00:39:05.372]            // =>  TRUE
[00:39:05.372]          <block atomic="false" info="">
[00:39:05.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:39:05.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:05.373]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:39:05.373]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:39:05.373]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:39:05.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:05.374]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:39:05.374]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:39:05.374]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:39:05.374]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:05.374]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:39:05.374]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:39:05.374]          </block>
[00:39:05.374]          // end if-block "!hasDormant"
[00:39:05.374]        </control>
[00:39:05.376]        // end if-block "isSWJ"
[00:39:05.376]      </control>
[00:39:05.376]      <control if="!isSWJ" while="" timeout="0" info="">
[00:39:05.376]        // if-block "!isSWJ"
[00:39:05.376]          // =>  FALSE
[00:39:05.376]        // skip if-block "!isSWJ"
[00:39:05.376]      </control>
[00:39:05.376]      <block atomic="false" info="">
[00:39:05.376]        ReadDP(0x0);
[00:39:05.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:39:05.377]      </block>
[00:39:05.377]      // end if-block "protType == 2"
[00:39:05.377]    </control>
[00:39:05.377]  </sequence>
[00:39:05.377]  
[00:39:05.378]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:39:05.378]  
[00:39:05.378]  <debugvars>
[00:39:05.378]    // Pre-defined
[00:39:05.378]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:05.378]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:05.378]    __dp=0x00000000
[00:39:05.378]    __ap=0x00000000
[00:39:05.378]    __traceout=0x00000000      (Trace Disabled)
[00:39:05.378]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:05.379]    __FlashAddr=0x00000000
[00:39:05.379]    __FlashLen=0x00000000
[00:39:05.379]    __FlashArg=0x00000000
[00:39:05.379]    __FlashOp=0x00000000
[00:39:05.379]    __Result=0x00000000
[00:39:05.379]  </debugvars>
[00:39:05.379]  
[00:39:05.379]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:39:05.379]    <block atomic="false" info="">
[00:39:05.379]      __var SW_DP_ABORT       = 0x0;
[00:39:05.379]        // -> [SW_DP_ABORT <= 0x00000000]
[00:39:05.379]      __var DP_CTRL_STAT      = 0x4;
[00:39:05.380]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:39:05.380]      __var DP_SELECT         = 0x8;
[00:39:05.380]        // -> [DP_SELECT <= 0x00000008]
[00:39:05.380]      __var powered_down      = 0;
[00:39:05.380]        // -> [powered_down <= 0x00000000]
[00:39:05.380]      WriteDP(DP_SELECT, 0x00000000);
[00:39:05.381]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:39:05.381]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:39:05.381]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:39:05.381]        // -> [powered_down <= 0x00000001]
[00:39:05.381]    </block>
[00:39:05.381]    <control if="powered_down" while="" timeout="0" info="">
[00:39:05.381]      // if-block "powered_down"
[00:39:05.381]        // =>  TRUE
[00:39:05.382]      <block atomic="false" info="">
[00:39:05.382]        Message(0, "Debug/System power-up request sent");
[00:39:05.386]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:39:05.387]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:39:05.387]      </block>
[00:39:05.387]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:39:05.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:39:05.388]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:39:05.388]        // while-condition  =>  FALSE
[00:39:05.388]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:39:05.388]      </control>
[00:39:05.388]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:39:05.388]        // if-block "(__protocol & 0xFFFF) == 1"
[00:39:05.388]          // =>  FALSE
[00:39:05.388]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:39:05.388]      </control>
[00:39:05.389]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:39:05.389]        // if-block "(__protocol & 0xFFFF) == 2"
[00:39:05.389]          // =>  TRUE
[00:39:05.389]        <block atomic="false" info="">
[00:39:05.389]          Message(0, "executing SWD power up");
[00:39:05.391]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:39:05.391]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:39:05.391]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:39:05.392]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:39:05.392]        </block>
[00:39:05.392]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:39:05.392]      </control>
[00:39:05.392]      // end if-block "powered_down"
[00:39:05.392]    </control>
[00:39:05.393]    <block atomic="false" info="">
[00:39:05.393]      __var DEBUG_PORT_VAL    = 0;
[00:39:05.393]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:39:05.393]      __var ACCESS_POINT_VAL  = 0;
[00:39:05.393]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:39:05.393]      __ap = 1; 
[00:39:05.393]        // -> [__ap <= 0x00000001]
[00:39:05.393]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:39:05.394]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:39:05.394]      __ap = 4;
[00:39:05.395]        // -> [__ap <= 0x00000004]
[00:39:05.395]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:05.396]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:39:05.396]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:39:05.396]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:05.398]    </block>
[00:39:05.398]    <block atomic="false" info="">
[00:39:05.398]      __var nReset = 0x80;
[00:39:05.398]        // -> [nReset <= 0x00000080]
[00:39:05.398]      __var canReadPins = 0;
[00:39:05.398]        // -> [canReadPins <= 0x00000000]
[00:39:05.399]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:39:05.399]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:39:05.399]        // -> [canReadPins <= 0x00000001]
[00:39:05.399]    </block>
[00:39:05.399]    <control if="" while="1" timeout="200" info="">
[00:39:05.399]      // while "1"  (timeout="200")
[00:39:05.399]      // while-condition  =>  TRUE
[00:39:05.399]      // while "1"  (timeout="200")
[00:39:05.400]      // while-condition  =>  TRUE
[00:39:05.400]      // while "1"  (timeout="200")
[00:39:05.400]      // while-condition  =>  TRUE
[00:39:05.400]      // while "1"  (timeout="200")
[00:39:05.400]      // while-condition  =>  TRUE
[00:39:05.400]      // while "1"  (timeout="200")
[00:39:05.400]      // while-condition  =>  TRUE
[00:39:05.400]      // while "1"  (timeout="200")
[00:39:05.400]      // while-condition  =>  TRUE
[00:39:05.400]      // while "1"  (timeout="200")
[00:39:05.401]      // while-condition  =>  TRUE
[00:39:05.401]      // while "1"  (timeout="200")
[00:39:05.401]      // while-condition  =>  TRUE
[00:39:05.401]      // while "1"  (timeout="200")
[00:39:05.401]      // while-condition  =>  TRUE
[00:39:05.401]      // while "1"  (timeout="200")
[00:39:05.401]      // while-condition  =>  TRUE
[00:39:05.402]      // while "1"  (timeout="200")
[00:39:05.402]      // while-condition  =>  TRUE
[00:39:05.402]      // while "1"  (timeout="200")
[00:39:05.402]      // while-condition  =>  TRUE
[00:39:05.402]      // while "1"  (timeout="200")
[00:39:05.402]      // while-condition  =>  TRUE
[00:39:05.402]      // while "1"  (timeout="200")
[00:39:05.402]      // while-condition  =>  TRUE
[00:39:05.402]      // while "1"  (timeout="200")
[00:39:05.402]      // while-condition  =>  TRUE
[00:39:05.402]      // while "1"  (timeout="200")
[00:39:05.403]      // while-condition  =>  TRUE
[00:39:05.403]      // while "1"  (timeout="200")
[00:39:05.403]      // while-condition  =>  TRUE
[00:39:05.403]      // while "1"  (timeout="200")
[00:39:05.403]      // while-condition  =>  TRUE
[00:39:05.403]      // while "1"  (timeout="200")
[00:39:05.403]      // while-condition  =>  TRUE
[00:39:05.403]      // while "1"  (timeout="200")
[00:39:05.404]      // while-condition  =>  TRUE
[00:39:05.404]      // while "1"  (timeout="200")
[00:39:05.404]      // while-condition  =>  TRUE
[00:39:05.404]      // while "1"  (timeout="200")
[00:39:05.404]      // while-condition  =>  TRUE
[00:39:05.404]      // while "1"  (timeout="200")
[00:39:05.404]      // while-condition  =>  TRUE
[00:39:05.405]      // while "1"  (timeout="200")
[00:39:05.405]      // while-condition  =>  TRUE
[00:39:05.405]      // while "1"  (timeout="200")
[00:39:05.405]      // while-condition  =>  TRUE
[00:39:05.405]      // while "1"  (timeout="200")
[00:39:05.406]      // while-condition  =>  TRUE
[00:39:05.406]      // while "1"  (timeout="200")
[00:39:05.406]      // while-condition  =>  TRUE
[00:39:05.406]      // while "1"  (timeout="200")
[00:39:05.406]      // while-condition  =>  TRUE
[00:39:05.406]      // while "1"  (timeout="200")
[00:39:05.406]      // while-condition  =>  TRUE
[00:39:05.406]      // while "1"  (timeout="200")
[00:39:05.406]      // while-condition  =>  TRUE
[00:39:05.406]      // while "1"  (timeout="200")
[00:39:05.406]      // while-condition  =>  TRUE
[00:39:05.406]      // while "1"  (timeout="200")
[00:39:05.406]      // while-condition  =>  TRUE
[00:39:05.407]      // while "1"  (timeout="200")
[00:39:05.407]      // while-condition  =>  TRUE
[00:39:05.407]      // while "1"  (timeout="200")
[00:39:05.407]      // while-condition  =>  TRUE
[00:39:05.407]      // while "1"  (timeout="200")
[00:39:05.407]      // while-condition  =>  TRUE
[00:39:05.407]      // while "1"  (timeout="200")
[00:39:05.407]      // while-condition  =>  TRUE
[00:39:05.407]      // while "1"  (timeout="200")
[00:39:05.408]      // while-condition  =>  TRUE
[00:39:05.408]      // while "1"  (timeout="200")
[00:39:05.408]      // while-condition  =>  TRUE
[00:39:05.408]      // while "1"  (timeout="200")
[00:39:05.408]      // while-condition  =>  TRUE
[00:39:05.408]      // while "1"  (timeout="200")
[00:39:05.408]      // while-condition  =>  TRUE
[00:39:05.408]      // while "1"  (timeout="200")
[00:39:05.408]      // while-condition  =>  TRUE
[00:39:05.408]      // while "1"  (timeout="200")
[00:39:05.408]      // while-condition  =>  TRUE
[00:39:05.409]      // while "1"  (timeout="200")
[00:39:05.409]      // while-condition  =>  TRUE
[00:39:05.409]      // while "1"  (timeout="200")
[00:39:05.409]      // while-condition  =>  TRUE
[00:39:05.409]      // while "1"  (timeout="200")
[00:39:05.409]      // while-condition  =>  TRUE
[00:39:05.409]      // while "1"  (timeout="200")
[00:39:05.409]      // while-condition  =>  TRUE
[00:39:05.409]      // while "1"  (timeout="200")
[00:39:05.409]      // while-condition  =>  TRUE
[00:39:05.409]      // while "1"  (timeout="200")
[00:39:05.410]      // while-condition  =>  TRUE
[00:39:05.410]      // while "1"  (timeout="200")
[00:39:05.410]      // while-condition  =>  TRUE
[00:39:05.410]      // while "1"  (timeout="200")
[00:39:05.410]      // while-condition  =>  TRUE
[00:39:05.410]      // while "1"  (timeout="200")
[00:39:05.410]      // while-condition  =>  TRUE
[00:39:05.410]      // while "1"  (timeout="200")
[00:39:05.410]      // while-condition  =>  TRUE
[00:39:05.410]      // while "1"  (timeout="200")
[00:39:05.411]      // while-condition  =>  TRUE
[00:39:05.411]      // while "1"  (timeout="200")
[00:39:05.411]      // while-condition  =>  TRUE
[00:39:05.411]      // while "1"  (timeout="200")
[00:39:05.411]      // while-condition  =>  TRUE
[00:39:05.411]      // while "1"  (timeout="200")
[00:39:05.411]      // while-condition  =>  TRUE
[00:39:05.411]      // while "1"  (timeout="200")
[00:39:05.411]      // while-condition  =>  TRUE
[00:39:05.411]      // while "1"  (timeout="200")
[00:39:05.412]      // while-condition  =>  TRUE
[00:39:05.412]      // while "1"  (timeout="200")
[00:39:05.412]      // while  =>  TIMEOUT
[00:39:05.412]      // end while "1"
[00:39:05.412]    </control>
[00:39:05.412]    <control if="canReadPins" while="" timeout="0" info="">
[00:39:05.412]      // if-block "canReadPins"
[00:39:05.412]        // =>  TRUE
[00:39:05.412]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:39:05.412]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:39:05.413]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:39:05.413]        // while-condition  =>  FALSE
[00:39:05.413]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:39:05.413]      </control>
[00:39:05.413]      // end if-block "canReadPins"
[00:39:05.413]    </control>
[00:39:05.413]    <control if="!canReadPins" while="" timeout="0" info="">
[00:39:05.413]      // if-block "!canReadPins"
[00:39:05.414]        // =>  FALSE
[00:39:05.414]      // skip if-block "!canReadPins"
[00:39:05.414]    </control>
[00:39:05.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:39:05.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:05.414]        // =>  TRUE
[00:39:05.414]      <block atomic="false" info="">
[00:39:05.414]        WriteAP(0x00, 0x190008);
[00:39:05.416]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:05.416]        WriteAP(0xF0, 0x01);
[00:39:05.416]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:05.417]      </block>
[00:39:05.417]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:05.417]    </control>
[00:39:05.417]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:39:05.417]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:05.417]        // =>  FALSE
[00:39:05.417]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:05.417]    </control>
[00:39:05.417]    <block atomic="false" info="">
[00:39:05.418]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:05.419]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:39:05.419]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:39:05.419]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:05.421]      __ap = 0; //lets make sure we reset the access point selection
[00:39:05.421]        // -> [__ap <= 0x00000000]
[00:39:05.421]    </block>
[00:39:05.421]  </sequence>
[00:39:05.421]  
[00:39:05.427]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:39:05.427]  
[00:39:05.428]  <debugvars>
[00:39:05.428]    // Pre-defined
[00:39:05.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:05.428]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:05.428]    __dp=0x00000000
[00:39:05.428]    __ap=0x00000000
[00:39:05.428]    __traceout=0x00000000      (Trace Disabled)
[00:39:05.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:05.428]    __FlashAddr=0x00000000
[00:39:05.428]    __FlashLen=0x00000000
[00:39:05.429]    __FlashArg=0x00000000
[00:39:05.429]    __FlashOp=0x00000000
[00:39:05.429]    __Result=0x00000000
[00:39:05.429]  </debugvars>
[00:39:05.429]  
[00:39:05.429]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:39:05.429]    <block atomic="false" info="">
[00:39:05.429]      __var deviceID = 0;
[00:39:05.429]        // -> [deviceID <= 0x00000000]
[00:39:05.429]      __var version = 0;
[00:39:05.429]        // -> [version <= 0x00000000]
[00:39:05.429]      __var partNum = 0;
[00:39:05.430]        // -> [partNum <= 0x00000000]
[00:39:05.430]      __var manuf = 0;
[00:39:05.430]        // -> [manuf <= 0x00000000]
[00:39:05.430]      __var isMSPM0G1X0X_G3X0X = 0;
[00:39:05.430]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:39:05.430]      __var isProduction = 0;
[00:39:05.430]        // -> [isProduction <= 0x00000000]
[00:39:05.430]      __var continueId = 0;
[00:39:05.430]        // -> [continueId <= 0x00000000]
[00:39:05.430]      deviceID =   Read32(0x41C40004);
[00:39:05.432]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:39:05.432]        // -> [deviceID <= 0x2BB8802F]
[00:39:05.432]      version = deviceID >> 28;
[00:39:05.432]        // -> [version <= 0x00000002]
[00:39:05.432]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:39:05.432]        // -> [partNum <= 0x0000BB88]
[00:39:05.433]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:39:05.433]        // -> [manuf <= 0x00000017]
[00:39:05.433]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:39:05.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:39:05.433]      isProduction = (version > 0);
[00:39:05.433]        // -> [isProduction <= 0x00000001]
[00:39:05.433]    </block>
[00:39:05.433]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:39:05.433]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:39:05.433]        // =>  FALSE
[00:39:05.433]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:39:05.434]    </control>
[00:39:05.434]    <control if="continueId == 4" while="" timeout="0" info="">
[00:39:05.434]      // if-block "continueId == 4"
[00:39:05.434]        // =>  FALSE
[00:39:05.434]      // skip if-block "continueId == 4"
[00:39:05.434]    </control>
[00:39:05.434]    <control if="!isProduction" while="" timeout="0" info="">
[00:39:05.434]      // if-block "!isProduction"
[00:39:05.434]        // =>  FALSE
[00:39:05.434]      // skip if-block "!isProduction"
[00:39:05.435]    </control>
[00:39:05.435]  </sequence>
[00:39:05.435]  
[00:42:11.714]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:42:11.714]  
[00:42:11.714]  <debugvars>
[00:42:11.714]    // Pre-defined
[00:42:11.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:11.714]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:11.714]    __dp=0x00000000
[00:42:11.714]    __ap=0x00000000
[00:42:11.714]    __traceout=0x00000000      (Trace Disabled)
[00:42:11.715]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:11.715]    __FlashAddr=0x00000000
[00:42:11.715]    __FlashLen=0x00000000
[00:42:11.715]    __FlashArg=0x00000000
[00:42:11.715]    __FlashOp=0x00000000
[00:42:11.715]    __Result=0x00000000
[00:42:11.715]  </debugvars>
[00:42:11.716]  
[00:42:11.716]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:42:11.716]    <block atomic="false" info="">
[00:42:11.716]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:42:11.716]        // -> [isSWJ <= 0x00000001]
[00:42:11.717]      __var hasDormant = __protocol & 0x00020000;
[00:42:11.717]        // -> [hasDormant <= 0x00000000]
[00:42:11.717]      __var protType   = __protocol & 0x0000FFFF;
[00:42:11.717]        // -> [protType <= 0x00000002]
[00:42:11.717]    </block>
[00:42:11.717]    <control if="protType == 1" while="" timeout="0" info="">
[00:42:11.717]      // if-block "protType == 1"
[00:42:11.717]        // =>  FALSE
[00:42:11.717]      // skip if-block "protType == 1"
[00:42:11.717]    </control>
[00:42:11.717]    <control if="protType == 2" while="" timeout="0" info="">
[00:42:11.717]      // if-block "protType == 2"
[00:42:11.717]        // =>  TRUE
[00:42:11.717]      <control if="isSWJ" while="" timeout="0" info="">
[00:42:11.717]        // if-block "isSWJ"
[00:42:11.718]          // =>  TRUE
[00:42:11.718]        <control if="hasDormant" while="" timeout="0" info="">
[00:42:11.718]          // if-block "hasDormant"
[00:42:11.718]            // =>  FALSE
[00:42:11.718]          // skip if-block "hasDormant"
[00:42:11.718]        </control>
[00:42:11.719]        <control if="!hasDormant" while="" timeout="0" info="">
[00:42:11.719]          // if-block "!hasDormant"
[00:42:11.719]            // =>  TRUE
[00:42:11.719]          <block atomic="false" info="">
[00:42:11.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:42:11.719]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:11.719]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:42:11.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:42:11.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:42:11.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:11.721]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:42:11.721]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:42:11.721]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:42:11.721]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:11.721]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:42:11.722]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:42:11.722]          </block>
[00:42:11.722]          // end if-block "!hasDormant"
[00:42:11.722]        </control>
[00:42:11.722]        // end if-block "isSWJ"
[00:42:11.722]      </control>
[00:42:11.722]      <control if="!isSWJ" while="" timeout="0" info="">
[00:42:11.722]        // if-block "!isSWJ"
[00:42:11.722]          // =>  FALSE
[00:42:11.723]        // skip if-block "!isSWJ"
[00:42:11.723]      </control>
[00:42:11.723]      <block atomic="false" info="">
[00:42:11.723]        ReadDP(0x0);
[00:42:11.723]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:42:11.723]      </block>
[00:42:11.723]      // end if-block "protType == 2"
[00:42:11.723]    </control>
[00:42:11.724]  </sequence>
[00:42:11.724]  
[00:42:11.724]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:42:11.724]  
[00:42:11.724]  <debugvars>
[00:42:11.724]    // Pre-defined
[00:42:11.724]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:11.725]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:11.725]    __dp=0x00000000
[00:42:11.725]    __ap=0x00000000
[00:42:11.725]    __traceout=0x00000000      (Trace Disabled)
[00:42:11.725]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:11.725]    __FlashAddr=0x00000000
[00:42:11.725]    __FlashLen=0x00000000
[00:42:11.725]    __FlashArg=0x00000000
[00:42:11.725]    __FlashOp=0x00000000
[00:42:11.725]    __Result=0x00000000
[00:42:11.725]  </debugvars>
[00:42:11.725]  
[00:42:11.725]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:42:11.725]    <block atomic="false" info="">
[00:42:11.725]      __var SW_DP_ABORT       = 0x0;
[00:42:11.725]        // -> [SW_DP_ABORT <= 0x00000000]
[00:42:11.725]      __var DP_CTRL_STAT      = 0x4;
[00:42:11.726]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:42:11.726]      __var DP_SELECT         = 0x8;
[00:42:11.726]        // -> [DP_SELECT <= 0x00000008]
[00:42:11.726]      __var powered_down      = 0;
[00:42:11.726]        // -> [powered_down <= 0x00000000]
[00:42:11.726]      WriteDP(DP_SELECT, 0x00000000);
[00:42:11.727]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:42:11.727]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:42:11.727]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:42:11.727]        // -> [powered_down <= 0x00000001]
[00:42:11.727]    </block>
[00:42:11.727]    <control if="powered_down" while="" timeout="0" info="">
[00:42:11.727]      // if-block "powered_down"
[00:42:11.728]        // =>  TRUE
[00:42:11.728]      <block atomic="false" info="">
[00:42:11.728]        Message(0, "Debug/System power-up request sent");
[00:42:11.730]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:42:11.731]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:42:11.731]      </block>
[00:42:11.731]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:42:11.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:42:11.732]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:42:11.732]        // while-condition  =>  FALSE
[00:42:11.732]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:42:11.732]      </control>
[00:42:11.732]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:42:11.732]        // if-block "(__protocol & 0xFFFF) == 1"
[00:42:11.732]          // =>  FALSE
[00:42:11.732]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:42:11.732]      </control>
[00:42:11.732]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:42:11.733]        // if-block "(__protocol & 0xFFFF) == 2"
[00:42:11.733]          // =>  TRUE
[00:42:11.733]        <block atomic="false" info="">
[00:42:11.733]          Message(0, "executing SWD power up");
[00:42:11.735]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:42:11.735]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:42:11.735]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:42:11.736]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:42:11.736]        </block>
[00:42:11.737]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:42:11.737]      </control>
[00:42:11.737]      // end if-block "powered_down"
[00:42:11.737]    </control>
[00:42:11.737]    <block atomic="false" info="">
[00:42:11.737]      __var DEBUG_PORT_VAL    = 0;
[00:42:11.737]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:42:11.737]      __var ACCESS_POINT_VAL  = 0;
[00:42:11.737]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:42:11.738]      __ap = 1; 
[00:42:11.738]        // -> [__ap <= 0x00000001]
[00:42:11.738]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:42:11.739]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:42:11.739]      __ap = 4;
[00:42:11.739]        // -> [__ap <= 0x00000004]
[00:42:11.739]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:11.740]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:42:11.740]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:42:11.740]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:11.742]    </block>
[00:42:11.742]    <block atomic="false" info="">
[00:42:11.742]      __var nReset = 0x80;
[00:42:11.742]        // -> [nReset <= 0x00000080]
[00:42:11.742]      __var canReadPins = 0;
[00:42:11.742]        // -> [canReadPins <= 0x00000000]
[00:42:11.742]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:42:11.743]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:42:11.743]        // -> [canReadPins <= 0x00000001]
[00:42:11.743]    </block>
[00:42:11.743]    <control if="" while="1" timeout="200" info="">
[00:42:11.743]      // while "1"  (timeout="200")
[00:42:11.743]      // while-condition  =>  TRUE
[00:42:11.743]      // while "1"  (timeout="200")
[00:42:11.743]      // while-condition  =>  TRUE
[00:42:11.744]      // while "1"  (timeout="200")
[00:42:11.744]      // while-condition  =>  TRUE
[00:42:11.744]      // while "1"  (timeout="200")
[00:42:11.744]      // while-condition  =>  TRUE
[00:42:11.744]      // while "1"  (timeout="200")
[00:42:11.744]      // while-condition  =>  TRUE
[00:42:11.744]      // while "1"  (timeout="200")
[00:42:11.744]      // while-condition  =>  TRUE
[00:42:11.744]      // while "1"  (timeout="200")
[00:42:11.744]      // while-condition  =>  TRUE
[00:42:11.744]      // while "1"  (timeout="200")
[00:42:11.744]      // while-condition  =>  TRUE
[00:42:11.745]      // while "1"  (timeout="200")
[00:42:11.745]      // while-condition  =>  TRUE
[00:42:11.745]      // while "1"  (timeout="200")
[00:42:11.745]      // while-condition  =>  TRUE
[00:42:11.745]      // while "1"  (timeout="200")
[00:42:11.745]      // while-condition  =>  TRUE
[00:42:11.745]      // while "1"  (timeout="200")
[00:42:11.745]      // while-condition  =>  TRUE
[00:42:11.746]      // while "1"  (timeout="200")
[00:42:11.746]      // while-condition  =>  TRUE
[00:42:11.746]      // while "1"  (timeout="200")
[00:42:11.746]      // while-condition  =>  TRUE
[00:42:11.746]      // while "1"  (timeout="200")
[00:42:11.747]      // while-condition  =>  TRUE
[00:42:11.747]      // while "1"  (timeout="200")
[00:42:11.747]      // while-condition  =>  TRUE
[00:42:11.747]      // while "1"  (timeout="200")
[00:42:11.747]      // while-condition  =>  TRUE
[00:42:11.747]      // while "1"  (timeout="200")
[00:42:11.747]      // while-condition  =>  TRUE
[00:42:11.747]      // while "1"  (timeout="200")
[00:42:11.747]      // while-condition  =>  TRUE
[00:42:11.747]      // while "1"  (timeout="200")
[00:42:11.748]      // while-condition  =>  TRUE
[00:42:11.748]      // while "1"  (timeout="200")
[00:42:11.748]      // while-condition  =>  TRUE
[00:42:11.748]      // while "1"  (timeout="200")
[00:42:11.748]      // while-condition  =>  TRUE
[00:42:11.748]      // while "1"  (timeout="200")
[00:42:11.748]      // while-condition  =>  TRUE
[00:42:11.748]      // while "1"  (timeout="200")
[00:42:11.748]      // while-condition  =>  TRUE
[00:42:11.748]      // while "1"  (timeout="200")
[00:42:11.748]      // while-condition  =>  TRUE
[00:42:11.748]      // while "1"  (timeout="200")
[00:42:11.749]      // while-condition  =>  TRUE
[00:42:11.749]      // while "1"  (timeout="200")
[00:42:11.749]      // while-condition  =>  TRUE
[00:42:11.749]      // while "1"  (timeout="200")
[00:42:11.749]      // while-condition  =>  TRUE
[00:42:11.749]      // while "1"  (timeout="200")
[00:42:11.749]      // while-condition  =>  TRUE
[00:42:11.749]      // while "1"  (timeout="200")
[00:42:11.749]      // while-condition  =>  TRUE
[00:42:11.749]      // while "1"  (timeout="200")
[00:42:11.750]      // while-condition  =>  TRUE
[00:42:11.750]      // while "1"  (timeout="200")
[00:42:11.750]      // while-condition  =>  TRUE
[00:42:11.750]      // while "1"  (timeout="200")
[00:42:11.750]      // while-condition  =>  TRUE
[00:42:11.750]      // while "1"  (timeout="200")
[00:42:11.750]      // while-condition  =>  TRUE
[00:42:11.750]      // while "1"  (timeout="200")
[00:42:11.750]      // while-condition  =>  TRUE
[00:42:11.750]      // while "1"  (timeout="200")
[00:42:11.750]      // while-condition  =>  TRUE
[00:42:11.750]      // while "1"  (timeout="200")
[00:42:11.751]      // while-condition  =>  TRUE
[00:42:11.751]      // while "1"  (timeout="200")
[00:42:11.751]      // while-condition  =>  TRUE
[00:42:11.751]      // while "1"  (timeout="200")
[00:42:11.751]      // while-condition  =>  TRUE
[00:42:11.751]      // while "1"  (timeout="200")
[00:42:11.751]      // while-condition  =>  TRUE
[00:42:11.751]      // while "1"  (timeout="200")
[00:42:11.751]      // while-condition  =>  TRUE
[00:42:11.751]      // while "1"  (timeout="200")
[00:42:11.751]      // while-condition  =>  TRUE
[00:42:11.751]      // while "1"  (timeout="200")
[00:42:11.752]      // while-condition  =>  TRUE
[00:42:11.752]      // while "1"  (timeout="200")
[00:42:11.752]      // while-condition  =>  TRUE
[00:42:11.752]      // while "1"  (timeout="200")
[00:42:11.752]      // while-condition  =>  TRUE
[00:42:11.752]      // while "1"  (timeout="200")
[00:42:11.752]      // while-condition  =>  TRUE
[00:42:11.752]      // while "1"  (timeout="200")
[00:42:11.752]      // while-condition  =>  TRUE
[00:42:11.752]      // while "1"  (timeout="200")
[00:42:11.752]      // while-condition  =>  TRUE
[00:42:11.753]      // while "1"  (timeout="200")
[00:42:11.753]      // while-condition  =>  TRUE
[00:42:11.753]      // while "1"  (timeout="200")
[00:42:11.753]      // while-condition  =>  TRUE
[00:42:11.753]      // while "1"  (timeout="200")
[00:42:11.753]      // while-condition  =>  TRUE
[00:42:11.753]      // while "1"  (timeout="200")
[00:42:11.753]      // while-condition  =>  TRUE
[00:42:11.753]      // while "1"  (timeout="200")
[00:42:11.753]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.754]      // while-condition  =>  TRUE
[00:42:11.754]      // while "1"  (timeout="200")
[00:42:11.756]      // while-condition  =>  TRUE
[00:42:11.756]      // while "1"  (timeout="200")
[00:42:11.756]      // while  =>  TIMEOUT
[00:42:11.756]      // end while "1"
[00:42:11.756]    </control>
[00:42:11.756]    <control if="canReadPins" while="" timeout="0" info="">
[00:42:11.756]      // if-block "canReadPins"
[00:42:11.756]        // =>  TRUE
[00:42:11.756]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:42:11.756]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:42:11.757]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:42:11.757]        // while-condition  =>  FALSE
[00:42:11.757]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:42:11.757]      </control>
[00:42:11.757]      // end if-block "canReadPins"
[00:42:11.757]    </control>
[00:42:11.757]    <control if="!canReadPins" while="" timeout="0" info="">
[00:42:11.757]      // if-block "!canReadPins"
[00:42:11.757]        // =>  FALSE
[00:42:11.757]      // skip if-block "!canReadPins"
[00:42:11.758]    </control>
[00:42:11.758]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:42:11.758]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:11.758]        // =>  TRUE
[00:42:11.758]      <block atomic="false" info="">
[00:42:11.758]        WriteAP(0x00, 0x190008);
[00:42:11.759]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:11.759]        WriteAP(0xF0, 0x01);
[00:42:11.761]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:11.761]      </block>
[00:42:11.761]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:11.761]    </control>
[00:42:11.761]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:42:11.761]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:11.761]        // =>  FALSE
[00:42:11.761]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:11.762]    </control>
[00:42:11.762]    <block atomic="false" info="">
[00:42:11.762]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:11.763]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:42:11.763]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:42:11.763]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:11.765]      __ap = 0; //lets make sure we reset the access point selection
[00:42:11.765]        // -> [__ap <= 0x00000000]
[00:42:11.765]    </block>
[00:42:11.765]  </sequence>
[00:42:11.765]  
[00:42:11.771]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:42:11.771]  
[00:42:11.771]  <debugvars>
[00:42:11.771]    // Pre-defined
[00:42:11.771]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:11.771]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:11.772]    __dp=0x00000000
[00:42:11.772]    __ap=0x00000000
[00:42:11.772]    __traceout=0x00000000      (Trace Disabled)
[00:42:11.772]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:11.772]    __FlashAddr=0x00000000
[00:42:11.772]    __FlashLen=0x00000000
[00:42:11.772]    __FlashArg=0x00000000
[00:42:11.772]    __FlashOp=0x00000000
[00:42:11.772]    __Result=0x00000000
[00:42:11.772]  </debugvars>
[00:42:11.772]  
[00:42:11.773]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:42:11.773]    <block atomic="false" info="">
[00:42:11.773]      __var deviceID = 0;
[00:42:11.773]        // -> [deviceID <= 0x00000000]
[00:42:11.773]      __var version = 0;
[00:42:11.773]        // -> [version <= 0x00000000]
[00:42:11.773]      __var partNum = 0;
[00:42:11.773]        // -> [partNum <= 0x00000000]
[00:42:11.773]      __var manuf = 0;
[00:42:11.773]        // -> [manuf <= 0x00000000]
[00:42:11.773]      __var isMSPM0G1X0X_G3X0X = 0;
[00:42:11.773]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:42:11.774]      __var isProduction = 0;
[00:42:11.774]        // -> [isProduction <= 0x00000000]
[00:42:11.774]      __var continueId = 0;
[00:42:11.774]        // -> [continueId <= 0x00000000]
[00:42:11.774]      deviceID =   Read32(0x41C40004);
[00:42:11.775]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:42:11.775]        // -> [deviceID <= 0x2BB8802F]
[00:42:11.776]      version = deviceID >> 28;
[00:42:11.776]        // -> [version <= 0x00000002]
[00:42:11.776]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:42:11.776]        // -> [partNum <= 0x0000BB88]
[00:42:11.776]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:42:11.777]        // -> [manuf <= 0x00000017]
[00:42:11.777]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:42:11.777]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:42:11.777]      isProduction = (version > 0);
[00:42:11.777]        // -> [isProduction <= 0x00000001]
[00:42:11.777]    </block>
[00:42:11.778]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:42:11.778]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:42:11.778]        // =>  FALSE
[00:42:11.778]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:42:11.778]    </control>
[00:42:11.778]    <control if="continueId == 4" while="" timeout="0" info="">
[00:42:11.778]      // if-block "continueId == 4"
[00:42:11.778]        // =>  FALSE
[00:42:11.778]      // skip if-block "continueId == 4"
[00:42:11.778]    </control>
[00:42:11.778]    <control if="!isProduction" while="" timeout="0" info="">
[00:42:11.778]      // if-block "!isProduction"
[00:42:11.779]        // =>  FALSE
[00:42:11.779]      // skip if-block "!isProduction"
[00:42:11.779]    </control>
[00:42:11.779]  </sequence>
[00:42:11.779]  
[00:42:17.538]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:42:17.538]  
[00:42:17.547]  <debugvars>
[00:42:17.547]    // Pre-defined
[00:42:17.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:17.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:17.547]    __dp=0x00000000
[00:42:17.547]    __ap=0x00000000
[00:42:17.547]    __traceout=0x00000000      (Trace Disabled)
[00:42:17.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:17.547]    __FlashAddr=0x00000000
[00:42:17.547]    __FlashLen=0x00000000
[00:42:17.548]    __FlashArg=0x00000000
[00:42:17.548]    __FlashOp=0x00000000
[00:42:17.548]    __Result=0x00000000
[00:42:17.548]  </debugvars>
[00:42:17.548]  
[00:42:17.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:42:17.548]    <block atomic="false" info="">
[00:42:17.548]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:42:17.548]        // -> [isSWJ <= 0x00000001]
[00:42:17.548]      __var hasDormant = __protocol & 0x00020000;
[00:42:17.548]        // -> [hasDormant <= 0x00000000]
[00:42:17.549]      __var protType   = __protocol & 0x0000FFFF;
[00:42:17.549]        // -> [protType <= 0x00000002]
[00:42:17.549]    </block>
[00:42:17.549]    <control if="protType == 1" while="" timeout="0" info="">
[00:42:17.549]      // if-block "protType == 1"
[00:42:17.549]        // =>  FALSE
[00:42:17.549]      // skip if-block "protType == 1"
[00:42:17.549]    </control>
[00:42:17.549]    <control if="protType == 2" while="" timeout="0" info="">
[00:42:17.549]      // if-block "protType == 2"
[00:42:17.549]        // =>  TRUE
[00:42:17.550]      <control if="isSWJ" while="" timeout="0" info="">
[00:42:17.550]        // if-block "isSWJ"
[00:42:17.550]          // =>  TRUE
[00:42:17.550]        <control if="hasDormant" while="" timeout="0" info="">
[00:42:17.550]          // if-block "hasDormant"
[00:42:17.550]            // =>  FALSE
[00:42:17.550]          // skip if-block "hasDormant"
[00:42:17.550]        </control>
[00:42:17.550]        <control if="!hasDormant" while="" timeout="0" info="">
[00:42:17.550]          // if-block "!hasDormant"
[00:42:17.550]            // =>  TRUE
[00:42:17.550]          <block atomic="false" info="">
[00:42:17.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:42:17.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:17.551]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:42:17.551]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:42:17.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:42:17.552]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:17.552]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:42:17.552]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:42:17.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:42:17.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:17.553]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:42:17.554]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:42:17.554]          </block>
[00:42:17.554]          // end if-block "!hasDormant"
[00:42:17.554]        </control>
[00:42:17.554]        // end if-block "isSWJ"
[00:42:17.554]      </control>
[00:42:17.554]      <control if="!isSWJ" while="" timeout="0" info="">
[00:42:17.554]        // if-block "!isSWJ"
[00:42:17.554]          // =>  FALSE
[00:42:17.554]        // skip if-block "!isSWJ"
[00:42:17.554]      </control>
[00:42:17.555]      <block atomic="false" info="">
[00:42:17.555]        ReadDP(0x0);
[00:42:17.555]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:42:17.555]      </block>
[00:42:17.555]      // end if-block "protType == 2"
[00:42:17.555]    </control>
[00:42:17.555]  </sequence>
[00:42:17.555]  
[00:42:17.556]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:42:17.556]  
[00:42:17.556]  <debugvars>
[00:42:17.556]    // Pre-defined
[00:42:17.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:17.556]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:17.556]    __dp=0x00000000
[00:42:17.556]    __ap=0x00000000
[00:42:17.557]    __traceout=0x00000000      (Trace Disabled)
[00:42:17.557]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:17.557]    __FlashAddr=0x00000000
[00:42:17.557]    __FlashLen=0x00000000
[00:42:17.557]    __FlashArg=0x00000000
[00:42:17.557]    __FlashOp=0x00000000
[00:42:17.557]    __Result=0x00000000
[00:42:17.557]  </debugvars>
[00:42:17.557]  
[00:42:17.558]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:42:17.558]    <block atomic="false" info="">
[00:42:17.558]      __var SW_DP_ABORT       = 0x0;
[00:42:17.558]        // -> [SW_DP_ABORT <= 0x00000000]
[00:42:17.558]      __var DP_CTRL_STAT      = 0x4;
[00:42:17.558]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:42:17.558]      __var DP_SELECT         = 0x8;
[00:42:17.558]        // -> [DP_SELECT <= 0x00000008]
[00:42:17.558]      __var powered_down      = 0;
[00:42:17.558]        // -> [powered_down <= 0x00000000]
[00:42:17.558]      WriteDP(DP_SELECT, 0x00000000);
[00:42:17.559]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:42:17.559]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:42:17.560]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:42:17.560]        // -> [powered_down <= 0x00000001]
[00:42:17.560]    </block>
[00:42:17.560]    <control if="powered_down" while="" timeout="0" info="">
[00:42:17.560]      // if-block "powered_down"
[00:42:17.560]        // =>  TRUE
[00:42:17.560]      <block atomic="false" info="">
[00:42:17.560]        Message(0, "Debug/System power-up request sent");
[00:42:17.562]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:42:17.563]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:42:17.563]      </block>
[00:42:17.563]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:42:17.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:42:17.563]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:42:17.563]        // while-condition  =>  FALSE
[00:42:17.563]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:42:17.564]      </control>
[00:42:17.564]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:42:17.564]        // if-block "(__protocol & 0xFFFF) == 1"
[00:42:17.564]          // =>  FALSE
[00:42:17.564]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:42:17.564]      </control>
[00:42:17.564]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:42:17.564]        // if-block "(__protocol & 0xFFFF) == 2"
[00:42:17.565]          // =>  TRUE
[00:42:17.565]        <block atomic="false" info="">
[00:42:17.565]          Message(0, "executing SWD power up");
[00:42:17.566]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:42:17.567]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:42:17.567]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:42:17.568]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:42:17.568]        </block>
[00:42:17.568]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:42:17.568]      </control>
[00:42:17.568]      // end if-block "powered_down"
[00:42:17.568]    </control>
[00:42:17.568]    <block atomic="false" info="">
[00:42:17.569]      __var DEBUG_PORT_VAL    = 0;
[00:42:17.569]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:42:17.569]      __var ACCESS_POINT_VAL  = 0;
[00:42:17.569]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:42:17.569]      __ap = 1; 
[00:42:17.569]        // -> [__ap <= 0x00000001]
[00:42:17.570]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:42:17.571]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:42:17.571]      __ap = 4;
[00:42:17.571]        // -> [__ap <= 0x00000004]
[00:42:17.571]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:17.572]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:42:17.572]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:42:17.572]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:17.573]    </block>
[00:42:17.574]    <block atomic="false" info="">
[00:42:17.574]      __var nReset = 0x80;
[00:42:17.574]        // -> [nReset <= 0x00000080]
[00:42:17.574]      __var canReadPins = 0;
[00:42:17.574]        // -> [canReadPins <= 0x00000000]
[00:42:17.574]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:42:17.574]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:42:17.574]        // -> [canReadPins <= 0x00000001]
[00:42:17.574]    </block>
[00:42:17.574]    <control if="" while="1" timeout="200" info="">
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.576]      // while-condition  =>  TRUE
[00:42:17.576]      // while "1"  (timeout="200")
[00:42:17.577]      // while-condition  =>  TRUE
[00:42:17.577]      // while "1"  (timeout="200")
[00:42:17.577]      // while-condition  =>  TRUE
[00:42:17.577]      // while "1"  (timeout="200")
[00:42:17.577]      // while-condition  =>  TRUE
[00:42:17.577]      // while "1"  (timeout="200")
[00:42:17.577]      // while-condition  =>  TRUE
[00:42:17.577]      // while "1"  (timeout="200")
[00:42:17.577]      // while-condition  =>  TRUE
[00:42:17.577]      // while "1"  (timeout="200")
[00:42:17.577]      // while-condition  =>  TRUE
[00:42:17.577]      // while "1"  (timeout="200")
[00:42:17.577]      // while-condition  =>  TRUE
[00:42:17.578]      // while "1"  (timeout="200")
[00:42:17.578]      // while-condition  =>  TRUE
[00:42:17.578]      // while "1"  (timeout="200")
[00:42:17.578]      // while-condition  =>  TRUE
[00:42:17.578]      // while "1"  (timeout="200")
[00:42:17.578]      // while-condition  =>  TRUE
[00:42:17.579]      // while "1"  (timeout="200")
[00:42:17.579]      // while-condition  =>  TRUE
[00:42:17.579]      // while "1"  (timeout="200")
[00:42:17.579]      // while-condition  =>  TRUE
[00:42:17.579]      // while "1"  (timeout="200")
[00:42:17.579]      // while-condition  =>  TRUE
[00:42:17.579]      // while "1"  (timeout="200")
[00:42:17.579]      // while-condition  =>  TRUE
[00:42:17.579]      // while "1"  (timeout="200")
[00:42:17.579]      // while-condition  =>  TRUE
[00:42:17.579]      // while "1"  (timeout="200")
[00:42:17.579]      // while-condition  =>  TRUE
[00:42:17.580]      // while "1"  (timeout="200")
[00:42:17.580]      // while-condition  =>  TRUE
[00:42:17.580]      // while "1"  (timeout="200")
[00:42:17.580]      // while-condition  =>  TRUE
[00:42:17.580]      // while "1"  (timeout="200")
[00:42:17.580]      // while-condition  =>  TRUE
[00:42:17.580]      // while "1"  (timeout="200")
[00:42:17.580]      // while-condition  =>  TRUE
[00:42:17.580]      // while "1"  (timeout="200")
[00:42:17.580]      // while-condition  =>  TRUE
[00:42:17.580]      // while "1"  (timeout="200")
[00:42:17.580]      // while-condition  =>  TRUE
[00:42:17.581]      // while "1"  (timeout="200")
[00:42:17.581]      // while-condition  =>  TRUE
[00:42:17.581]      // while "1"  (timeout="200")
[00:42:17.581]      // while-condition  =>  TRUE
[00:42:17.581]      // while "1"  (timeout="200")
[00:42:17.581]      // while-condition  =>  TRUE
[00:42:17.581]      // while "1"  (timeout="200")
[00:42:17.581]      // while-condition  =>  TRUE
[00:42:17.581]      // while "1"  (timeout="200")
[00:42:17.582]      // while-condition  =>  TRUE
[00:42:17.582]      // while "1"  (timeout="200")
[00:42:17.582]      // while-condition  =>  TRUE
[00:42:17.582]      // while "1"  (timeout="200")
[00:42:17.582]      // while-condition  =>  TRUE
[00:42:17.582]      // while "1"  (timeout="200")
[00:42:17.582]      // while-condition  =>  TRUE
[00:42:17.582]      // while "1"  (timeout="200")
[00:42:17.582]      // while-condition  =>  TRUE
[00:42:17.582]      // while "1"  (timeout="200")
[00:42:17.582]      // while-condition  =>  TRUE
[00:42:17.583]      // while "1"  (timeout="200")
[00:42:17.583]      // while-condition  =>  TRUE
[00:42:17.583]      // while "1"  (timeout="200")
[00:42:17.583]      // while-condition  =>  TRUE
[00:42:17.583]      // while "1"  (timeout="200")
[00:42:17.583]      // while-condition  =>  TRUE
[00:42:17.583]      // while "1"  (timeout="200")
[00:42:17.583]      // while-condition  =>  TRUE
[00:42:17.583]      // while "1"  (timeout="200")
[00:42:17.583]      // while-condition  =>  TRUE
[00:42:17.584]      // while "1"  (timeout="200")
[00:42:17.584]      // while  =>  TIMEOUT
[00:42:17.584]      // end while "1"
[00:42:17.584]    </control>
[00:42:17.584]    <control if="canReadPins" while="" timeout="0" info="">
[00:42:17.584]      // if-block "canReadPins"
[00:42:17.584]        // =>  TRUE
[00:42:17.584]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:42:17.584]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:42:17.585]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:42:17.585]        // while-condition  =>  FALSE
[00:42:17.585]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:42:17.585]      </control>
[00:42:17.585]      // end if-block "canReadPins"
[00:42:17.585]    </control>
[00:42:17.585]    <control if="!canReadPins" while="" timeout="0" info="">
[00:42:17.585]      // if-block "!canReadPins"
[00:42:17.585]        // =>  FALSE
[00:42:17.585]      // skip if-block "!canReadPins"
[00:42:17.586]    </control>
[00:42:17.586]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:42:17.586]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:17.586]        // =>  TRUE
[00:42:17.586]      <block atomic="false" info="">
[00:42:17.586]        WriteAP(0x00, 0x190008);
[00:42:17.587]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:17.587]        WriteAP(0xF0, 0x01);
[00:42:17.588]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:17.588]      </block>
[00:42:17.588]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:17.588]    </control>
[00:42:17.588]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:42:17.588]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:17.588]        // =>  FALSE
[00:42:17.588]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:17.588]    </control>
[00:42:17.589]    <block atomic="false" info="">
[00:42:17.589]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:17.590]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:42:17.590]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:42:17.590]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:17.592]      __ap = 0; //lets make sure we reset the access point selection
[00:42:17.592]        // -> [__ap <= 0x00000000]
[00:42:17.592]    </block>
[00:42:17.592]  </sequence>
[00:42:17.592]  
[00:42:17.598]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:42:17.598]  
[00:42:17.598]  <debugvars>
[00:42:17.598]    // Pre-defined
[00:42:17.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:17.599]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:17.599]    __dp=0x00000000
[00:42:17.599]    __ap=0x00000000
[00:42:17.599]    __traceout=0x00000000      (Trace Disabled)
[00:42:17.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:17.599]    __FlashAddr=0x00000000
[00:42:17.599]    __FlashLen=0x00000000
[00:42:17.599]    __FlashArg=0x00000000
[00:42:17.599]    __FlashOp=0x00000000
[00:42:17.599]    __Result=0x00000000
[00:42:17.600]  </debugvars>
[00:42:17.600]  
[00:42:17.600]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:42:17.600]    <block atomic="false" info="">
[00:42:17.600]      __var deviceID = 0;
[00:42:17.600]        // -> [deviceID <= 0x00000000]
[00:42:17.600]      __var version = 0;
[00:42:17.600]        // -> [version <= 0x00000000]
[00:42:17.600]      __var partNum = 0;
[00:42:17.600]        // -> [partNum <= 0x00000000]
[00:42:17.600]      __var manuf = 0;
[00:42:17.601]        // -> [manuf <= 0x00000000]
[00:42:17.601]      __var isMSPM0G1X0X_G3X0X = 0;
[00:42:17.601]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:42:17.601]      __var isProduction = 0;
[00:42:17.601]        // -> [isProduction <= 0x00000000]
[00:42:17.601]      __var continueId = 0;
[00:42:17.601]        // -> [continueId <= 0x00000000]
[00:42:17.601]      deviceID =   Read32(0x41C40004);
[00:42:17.603]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:42:17.603]        // -> [deviceID <= 0x2BB8802F]
[00:42:17.603]      version = deviceID >> 28;
[00:42:17.603]        // -> [version <= 0x00000002]
[00:42:17.603]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:42:17.603]        // -> [partNum <= 0x0000BB88]
[00:42:17.603]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:42:17.603]        // -> [manuf <= 0x00000017]
[00:42:17.603]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:42:17.603]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:42:17.604]      isProduction = (version > 0);
[00:42:17.604]        // -> [isProduction <= 0x00000001]
[00:42:17.604]    </block>
[00:42:17.604]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:42:17.604]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:42:17.604]        // =>  FALSE
[00:42:17.604]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:42:17.604]    </control>
[00:42:17.604]    <control if="continueId == 4" while="" timeout="0" info="">
[00:42:17.604]      // if-block "continueId == 4"
[00:42:17.604]        // =>  FALSE
[00:42:17.605]      // skip if-block "continueId == 4"
[00:42:17.605]    </control>
[00:42:17.605]    <control if="!isProduction" while="" timeout="0" info="">
[00:42:17.605]      // if-block "!isProduction"
[00:42:17.605]        // =>  FALSE
[00:42:17.605]      // skip if-block "!isProduction"
[00:42:17.605]    </control>
[00:42:17.605]  </sequence>
[00:42:17.605]  
[00:42:27.613]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:42:27.613]  
[00:42:27.613]  <debugvars>
[00:42:27.613]    // Pre-defined
[00:42:27.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:27.614]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:42:27.614]    __dp=0x00000000
[00:42:27.614]    __ap=0x00000000
[00:42:27.614]    __traceout=0x00000000      (Trace Disabled)
[00:42:27.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:27.614]    __FlashAddr=0x00000000
[00:42:27.614]    __FlashLen=0x00000000
[00:42:27.614]    __FlashArg=0x00000000
[00:42:27.614]    __FlashOp=0x00000000
[00:42:27.614]    __Result=0x00000000
[00:42:27.615]  </debugvars>
[00:42:27.615]  
[00:42:27.615]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:42:27.615]    <block atomic="false" info="">
[00:42:27.615]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:42:27.615]        // -> [isSWJ <= 0x00000001]
[00:42:27.615]      __var hasDormant = __protocol & 0x00020000;
[00:42:27.615]        // -> [hasDormant <= 0x00000000]
[00:42:27.615]      __var protType   = __protocol & 0x0000FFFF;
[00:42:27.615]        // -> [protType <= 0x00000002]
[00:42:27.615]    </block>
[00:42:27.616]    <control if="protType == 1" while="" timeout="0" info="">
[00:42:27.616]      // if-block "protType == 1"
[00:42:27.616]        // =>  FALSE
[00:42:27.616]      // skip if-block "protType == 1"
[00:42:27.616]    </control>
[00:42:27.616]    <control if="protType == 2" while="" timeout="0" info="">
[00:42:27.616]      // if-block "protType == 2"
[00:42:27.616]        // =>  TRUE
[00:42:27.616]      <control if="isSWJ" while="" timeout="0" info="">
[00:42:27.616]        // if-block "isSWJ"
[00:42:27.616]          // =>  TRUE
[00:42:27.616]        <control if="hasDormant" while="" timeout="0" info="">
[00:42:27.617]          // if-block "hasDormant"
[00:42:27.617]            // =>  FALSE
[00:42:27.617]          // skip if-block "hasDormant"
[00:42:27.617]        </control>
[00:42:27.617]        <control if="!hasDormant" while="" timeout="0" info="">
[00:42:27.617]          // if-block "!hasDormant"
[00:42:27.617]            // =>  TRUE
[00:42:27.617]          <block atomic="false" info="">
[00:42:27.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:42:27.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:27.618]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:42:27.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:42:27.619]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:42:27.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:27.620]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:42:27.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:42:27.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:42:27.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:27.620]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:42:27.621]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:42:27.621]          </block>
[00:42:27.621]          // end if-block "!hasDormant"
[00:42:27.621]        </control>
[00:42:27.621]        // end if-block "isSWJ"
[00:42:27.621]      </control>
[00:42:27.621]      <control if="!isSWJ" while="" timeout="0" info="">
[00:42:27.621]        // if-block "!isSWJ"
[00:42:27.622]          // =>  FALSE
[00:42:27.622]        // skip if-block "!isSWJ"
[00:42:27.622]      </control>
[00:42:27.622]      <block atomic="false" info="">
[00:42:27.622]        ReadDP(0x0);
[00:42:27.622]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:42:27.622]      </block>
[00:42:27.623]      // end if-block "protType == 2"
[00:42:27.623]    </control>
[00:42:27.623]  </sequence>
[00:42:27.623]  
[00:42:27.623]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:42:27.623]  
[00:42:27.623]  <debugvars>
[00:42:27.624]    // Pre-defined
[00:42:27.624]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:27.624]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:42:27.624]    __dp=0x00000000
[00:42:27.624]    __ap=0x00000000
[00:42:27.624]    __traceout=0x00000000      (Trace Disabled)
[00:42:27.624]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:27.624]    __FlashAddr=0x00000000
[00:42:27.624]    __FlashLen=0x00000000
[00:42:27.624]    __FlashArg=0x00000000
[00:42:27.624]    __FlashOp=0x00000000
[00:42:27.625]    __Result=0x00000000
[00:42:27.625]  </debugvars>
[00:42:27.625]  
[00:42:27.625]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:42:27.625]    <block atomic="false" info="">
[00:42:27.625]      __var SW_DP_ABORT       = 0x0;
[00:42:27.625]        // -> [SW_DP_ABORT <= 0x00000000]
[00:42:27.625]      __var DP_CTRL_STAT      = 0x4;
[00:42:27.625]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:42:27.625]      __var DP_SELECT         = 0x8;
[00:42:27.625]        // -> [DP_SELECT <= 0x00000008]
[00:42:27.625]      __var powered_down      = 0;
[00:42:27.625]        // -> [powered_down <= 0x00000000]
[00:42:27.625]      WriteDP(DP_SELECT, 0x00000000);
[00:42:27.626]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:42:27.626]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:42:27.626]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:42:27.626]        // -> [powered_down <= 0x00000001]
[00:42:27.627]    </block>
[00:42:27.627]    <control if="powered_down" while="" timeout="0" info="">
[00:42:27.627]      // if-block "powered_down"
[00:42:27.627]        // =>  TRUE
[00:42:27.627]      <block atomic="false" info="">
[00:42:27.627]        Message(0, "Debug/System power-up request sent");
[00:42:27.628]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:42:27.629]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:42:27.630]      </block>
[00:42:27.630]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:42:27.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:42:27.630]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:42:27.630]        // while-condition  =>  FALSE
[00:42:27.630]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:42:27.630]      </control>
[00:42:27.630]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:42:27.630]        // if-block "(__protocol & 0xFFFF) == 1"
[00:42:27.630]          // =>  FALSE
[00:42:27.630]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:42:27.630]      </control>
[00:42:27.631]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:42:27.631]        // if-block "(__protocol & 0xFFFF) == 2"
[00:42:27.631]          // =>  TRUE
[00:42:27.631]        <block atomic="false" info="">
[00:42:27.631]          Message(0, "executing SWD power up");
[00:42:27.632]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:42:27.633]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:42:27.633]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:42:27.634]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:42:27.634]        </block>
[00:42:27.634]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:42:27.634]      </control>
[00:42:27.634]      // end if-block "powered_down"
[00:42:27.634]    </control>
[00:42:27.634]    <block atomic="false" info="">
[00:42:27.634]      __var DEBUG_PORT_VAL    = 0;
[00:42:27.634]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:42:27.634]      __var ACCESS_POINT_VAL  = 0;
[00:42:27.634]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:42:27.634]      __ap = 1; 
[00:42:27.634]        // -> [__ap <= 0x00000001]
[00:42:27.634]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:42:27.636]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:42:27.636]      __ap = 4;
[00:42:27.637]        // -> [__ap <= 0x00000004]
[00:42:27.637]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:27.637]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:42:27.637]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:42:27.638]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:27.639]    </block>
[00:42:27.639]    <block atomic="false" info="">
[00:42:27.639]      __var nReset = 0x80;
[00:42:27.639]        // -> [nReset <= 0x00000080]
[00:42:27.639]      __var canReadPins = 0;
[00:42:27.639]        // -> [canReadPins <= 0x00000000]
[00:42:27.639]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:42:27.640]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:42:27.640]        // -> [canReadPins <= 0x00000001]
[00:42:27.640]    </block>
[00:42:27.640]    <control if="" while="1" timeout="200" info="">
[00:42:27.640]      // while "1"  (timeout="200")
[00:42:27.640]      // while-condition  =>  TRUE
[00:42:27.641]      // while "1"  (timeout="200")
[00:42:27.641]      // while-condition  =>  TRUE
[00:42:27.641]      // while "1"  (timeout="200")
[00:42:27.641]      // while-condition  =>  TRUE
[00:42:27.641]      // while "1"  (timeout="200")
[00:42:27.641]      // while-condition  =>  TRUE
[00:42:27.641]      // while "1"  (timeout="200")
[00:42:27.641]      // while-condition  =>  TRUE
[00:42:27.642]      // while "1"  (timeout="200")
[00:42:27.642]      // while-condition  =>  TRUE
[00:42:27.642]      // while "1"  (timeout="200")
[00:42:27.642]      // while-condition  =>  TRUE
[00:42:27.642]      // while "1"  (timeout="200")
[00:42:27.642]      // while-condition  =>  TRUE
[00:42:27.642]      // while "1"  (timeout="200")
[00:42:27.642]      // while-condition  =>  TRUE
[00:42:27.642]      // while "1"  (timeout="200")
[00:42:27.642]      // while-condition  =>  TRUE
[00:42:27.642]      // while "1"  (timeout="200")
[00:42:27.643]      // while-condition  =>  TRUE
[00:42:27.643]      // while "1"  (timeout="200")
[00:42:27.643]      // while-condition  =>  TRUE
[00:42:27.643]      // while "1"  (timeout="200")
[00:42:27.643]      // while-condition  =>  TRUE
[00:42:27.643]      // while "1"  (timeout="200")
[00:42:27.643]      // while-condition  =>  TRUE
[00:42:27.643]      // while "1"  (timeout="200")
[00:42:27.643]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.644]      // while "1"  (timeout="200")
[00:42:27.644]      // while-condition  =>  TRUE
[00:42:27.646]      // while "1"  (timeout="200")
[00:42:27.646]      // while-condition  =>  TRUE
[00:42:27.646]      // while "1"  (timeout="200")
[00:42:27.646]      // while-condition  =>  TRUE
[00:42:27.646]      // while "1"  (timeout="200")
[00:42:27.646]      // while-condition  =>  TRUE
[00:42:27.646]      // while "1"  (timeout="200")
[00:42:27.646]      // while-condition  =>  TRUE
[00:42:27.646]      // while "1"  (timeout="200")
[00:42:27.646]      // while-condition  =>  TRUE
[00:42:27.646]      // while "1"  (timeout="200")
[00:42:27.646]      // while-condition  =>  TRUE
[00:42:27.647]      // while "1"  (timeout="200")
[00:42:27.647]      // while  =>  TIMEOUT
[00:42:27.648]      // end while "1"
[00:42:27.648]    </control>
[00:42:27.648]    <control if="canReadPins" while="" timeout="0" info="">
[00:42:27.648]      // if-block "canReadPins"
[00:42:27.648]        // =>  TRUE
[00:42:27.648]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:42:27.648]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:42:27.648]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:42:27.648]        // while-condition  =>  FALSE
[00:42:27.649]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:42:27.649]      </control>
[00:42:27.649]      // end if-block "canReadPins"
[00:42:27.649]    </control>
[00:42:27.649]    <control if="!canReadPins" while="" timeout="0" info="">
[00:42:27.649]      // if-block "!canReadPins"
[00:42:27.649]        // =>  FALSE
[00:42:27.649]      // skip if-block "!canReadPins"
[00:42:27.649]    </control>
[00:42:27.649]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:42:27.650]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:27.650]        // =>  TRUE
[00:42:27.650]      <block atomic="false" info="">
[00:42:27.650]        WriteAP(0x00, 0x190008);
[00:42:27.650]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:27.650]        WriteAP(0xF0, 0x01);
[00:42:27.651]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:27.652]      </block>
[00:42:27.652]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:27.652]    </control>
[00:42:27.652]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:42:27.652]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:27.652]        // =>  FALSE
[00:42:27.652]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:27.652]    </control>
[00:42:27.652]    <block atomic="false" info="">
[00:42:27.652]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:27.654]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:42:27.654]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:42:27.654]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:27.655]      __ap = 0; //lets make sure we reset the access point selection
[00:42:27.655]        // -> [__ap <= 0x00000000]
[00:42:27.655]    </block>
[00:42:27.655]  </sequence>
[00:42:27.655]  
[00:42:27.661]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:42:27.661]  
[00:42:27.661]  <debugvars>
[00:42:27.661]    // Pre-defined
[00:42:27.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:27.662]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:42:27.662]    __dp=0x00000000
[00:42:27.662]    __ap=0x00000000
[00:42:27.662]    __traceout=0x00000000      (Trace Disabled)
[00:42:27.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:27.662]    __FlashAddr=0x00000000
[00:42:27.663]    __FlashLen=0x00000000
[00:42:27.663]    __FlashArg=0x00000000
[00:42:27.663]    __FlashOp=0x00000000
[00:42:27.663]    __Result=0x00000000
[00:42:27.663]  </debugvars>
[00:42:27.663]  
[00:42:27.663]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:42:27.663]    <block atomic="false" info="">
[00:42:27.663]      __var deviceID = 0;
[00:42:27.663]        // -> [deviceID <= 0x00000000]
[00:42:27.663]      __var version = 0;
[00:42:27.663]        // -> [version <= 0x00000000]
[00:42:27.663]      __var partNum = 0;
[00:42:27.663]        // -> [partNum <= 0x00000000]
[00:42:27.665]      __var manuf = 0;
[00:42:27.665]        // -> [manuf <= 0x00000000]
[00:42:27.665]      __var isMSPM0G1X0X_G3X0X = 0;
[00:42:27.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:42:27.665]      __var isProduction = 0;
[00:42:27.665]        // -> [isProduction <= 0x00000000]
[00:42:27.665]      __var continueId = 0;
[00:42:27.665]        // -> [continueId <= 0x00000000]
[00:42:27.665]      deviceID =   Read32(0x41C40004);
[00:42:27.667]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:42:27.667]        // -> [deviceID <= 0x2BB8802F]
[00:42:27.667]      version = deviceID >> 28;
[00:42:27.667]        // -> [version <= 0x00000002]
[00:42:27.667]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:42:27.667]        // -> [partNum <= 0x0000BB88]
[00:42:27.667]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:42:27.667]        // -> [manuf <= 0x00000017]
[00:42:27.667]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:42:27.667]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:42:27.667]      isProduction = (version > 0);
[00:42:27.667]        // -> [isProduction <= 0x00000001]
[00:42:27.668]    </block>
[00:42:27.668]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:42:27.668]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:42:27.668]        // =>  FALSE
[00:42:27.668]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:42:27.669]    </control>
[00:42:27.669]    <control if="continueId == 4" while="" timeout="0" info="">
[00:42:27.669]      // if-block "continueId == 4"
[00:42:27.669]        // =>  FALSE
[00:42:27.669]      // skip if-block "continueId == 4"
[00:42:27.669]    </control>
[00:42:27.669]    <control if="!isProduction" while="" timeout="0" info="">
[00:42:27.669]      // if-block "!isProduction"
[00:42:27.669]        // =>  FALSE
[00:42:27.669]      // skip if-block "!isProduction"
[00:42:27.669]    </control>
[00:42:27.670]  </sequence>
[00:42:27.670]  
[00:46:06.161]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:46:06.161]  
[00:46:06.161]  <debugvars>
[00:46:06.161]    // Pre-defined
[00:46:06.162]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:06.162]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:46:06.162]    __dp=0x00000000
[00:46:06.162]    __ap=0x00000000
[00:46:06.162]    __traceout=0x00000000      (Trace Disabled)
[00:46:06.162]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:06.162]    __FlashAddr=0x00000000
[00:46:06.162]    __FlashLen=0x00000000
[00:46:06.162]    __FlashArg=0x00000000
[00:46:06.162]    __FlashOp=0x00000000
[00:46:06.162]    __Result=0x00000000
[00:46:06.163]  </debugvars>
[00:46:06.163]  
[00:46:06.163]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:46:06.163]    <block atomic="false" info="">
[00:46:06.163]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:46:06.163]        // -> [isSWJ <= 0x00000001]
[00:46:06.163]      __var hasDormant = __protocol & 0x00020000;
[00:46:06.163]        // -> [hasDormant <= 0x00000000]
[00:46:06.163]      __var protType   = __protocol & 0x0000FFFF;
[00:46:06.164]        // -> [protType <= 0x00000002]
[00:46:06.164]    </block>
[00:46:06.164]    <control if="protType == 1" while="" timeout="0" info="">
[00:46:06.164]      // if-block "protType == 1"
[00:46:06.164]        // =>  FALSE
[00:46:06.164]      // skip if-block "protType == 1"
[00:46:06.165]    </control>
[00:46:06.165]    <control if="protType == 2" while="" timeout="0" info="">
[00:46:06.165]      // if-block "protType == 2"
[00:46:06.165]        // =>  TRUE
[00:46:06.165]      <control if="isSWJ" while="" timeout="0" info="">
[00:46:06.165]        // if-block "isSWJ"
[00:46:06.165]          // =>  TRUE
[00:46:06.165]        <control if="hasDormant" while="" timeout="0" info="">
[00:46:06.166]          // if-block "hasDormant"
[00:46:06.166]            // =>  FALSE
[00:46:06.166]          // skip if-block "hasDormant"
[00:46:06.166]        </control>
[00:46:06.166]        <control if="!hasDormant" while="" timeout="0" info="">
[00:46:06.166]          // if-block "!hasDormant"
[00:46:06.166]            // =>  TRUE
[00:46:06.166]          <block atomic="false" info="">
[00:46:06.166]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:46:06.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:06.167]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:46:06.167]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:46:06.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:46:06.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:06.168]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:46:06.168]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:46:06.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:46:06.169]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:06.169]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:46:06.169]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:46:06.169]          </block>
[00:46:06.169]          // end if-block "!hasDormant"
[00:46:06.169]        </control>
[00:46:06.169]        // end if-block "isSWJ"
[00:46:06.169]      </control>
[00:46:06.170]      <control if="!isSWJ" while="" timeout="0" info="">
[00:46:06.170]        // if-block "!isSWJ"
[00:46:06.170]          // =>  FALSE
[00:46:06.171]        // skip if-block "!isSWJ"
[00:46:06.171]      </control>
[00:46:06.171]      <block atomic="false" info="">
[00:46:06.171]        ReadDP(0x0);
[00:46:06.171]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:46:06.172]      </block>
[00:46:06.172]      // end if-block "protType == 2"
[00:46:06.172]    </control>
[00:46:06.172]  </sequence>
[00:46:06.172]  
[00:46:06.172]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:46:06.172]  
[00:46:06.173]  <debugvars>
[00:46:06.173]    // Pre-defined
[00:46:06.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:06.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:46:06.173]    __dp=0x00000000
[00:46:06.173]    __ap=0x00000000
[00:46:06.173]    __traceout=0x00000000      (Trace Disabled)
[00:46:06.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:06.174]    __FlashAddr=0x00000000
[00:46:06.174]    __FlashLen=0x00000000
[00:46:06.174]    __FlashArg=0x00000000
[00:46:06.174]    __FlashOp=0x00000000
[00:46:06.174]    __Result=0x00000000
[00:46:06.174]  </debugvars>
[00:46:06.174]  
[00:46:06.174]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:46:06.174]    <block atomic="false" info="">
[00:46:06.174]      __var SW_DP_ABORT       = 0x0;
[00:46:06.175]        // -> [SW_DP_ABORT <= 0x00000000]
[00:46:06.175]      __var DP_CTRL_STAT      = 0x4;
[00:46:06.175]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:46:06.175]      __var DP_SELECT         = 0x8;
[00:46:06.175]        // -> [DP_SELECT <= 0x00000008]
[00:46:06.175]      __var powered_down      = 0;
[00:46:06.175]        // -> [powered_down <= 0x00000000]
[00:46:06.176]      WriteDP(DP_SELECT, 0x00000000);
[00:46:06.176]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:46:06.176]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:46:06.177]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:46:06.177]        // -> [powered_down <= 0x00000001]
[00:46:06.177]    </block>
[00:46:06.177]    <control if="powered_down" while="" timeout="0" info="">
[00:46:06.177]      // if-block "powered_down"
[00:46:06.178]        // =>  TRUE
[00:46:06.178]      <block atomic="false" info="">
[00:46:06.178]        Message(0, "Debug/System power-up request sent");
[00:46:06.180]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:46:06.181]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:46:06.181]      </block>
[00:46:06.181]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:46:06.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:46:06.182]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:46:06.182]        // while-condition  =>  FALSE
[00:46:06.182]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:46:06.182]      </control>
[00:46:06.182]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:46:06.182]        // if-block "(__protocol & 0xFFFF) == 1"
[00:46:06.182]          // =>  FALSE
[00:46:06.183]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:46:06.183]      </control>
[00:46:06.183]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:46:06.183]        // if-block "(__protocol & 0xFFFF) == 2"
[00:46:06.183]          // =>  TRUE
[00:46:06.183]        <block atomic="false" info="">
[00:46:06.183]          Message(0, "executing SWD power up");
[00:46:06.185]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:46:06.186]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:46:06.186]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:46:06.187]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:46:06.187]        </block>
[00:46:06.187]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:46:06.187]      </control>
[00:46:06.187]      // end if-block "powered_down"
[00:46:06.188]    </control>
[00:46:06.188]    <block atomic="false" info="">
[00:46:06.188]      __var DEBUG_PORT_VAL    = 0;
[00:46:06.188]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:46:06.188]      __var ACCESS_POINT_VAL  = 0;
[00:46:06.188]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:46:06.188]      __ap = 1; 
[00:46:06.188]        // -> [__ap <= 0x00000001]
[00:46:06.188]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:46:06.189]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:46:06.189]      __ap = 4;
[00:46:06.190]        // -> [__ap <= 0x00000004]
[00:46:06.190]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:46:06.191]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:46:06.191]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:46:06.191]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:46:06.192]    </block>
[00:46:06.192]    <block atomic="false" info="">
[00:46:06.192]      __var nReset = 0x80;
[00:46:06.192]        // -> [nReset <= 0x00000080]
[00:46:06.193]      __var canReadPins = 0;
[00:46:06.193]        // -> [canReadPins <= 0x00000000]
[00:46:06.193]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:46:06.193]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:46:06.194]        // -> [canReadPins <= 0x00000001]
[00:46:06.194]    </block>
[00:46:06.194]    <control if="" while="1" timeout="200" info="">
[00:46:06.194]      // while "1"  (timeout="200")
[00:46:06.194]      // while-condition  =>  TRUE
[00:46:06.195]      // while "1"  (timeout="200")
[00:46:06.195]      // while-condition  =>  TRUE
[00:46:06.195]      // while "1"  (timeout="200")
[00:46:06.195]      // while-condition  =>  TRUE
[00:46:06.195]      // while "1"  (timeout="200")
[00:46:06.195]      // while-condition  =>  TRUE
[00:46:06.195]      // while "1"  (timeout="200")
[00:46:06.195]      // while-condition  =>  TRUE
[00:46:06.195]      // while "1"  (timeout="200")
[00:46:06.195]      // while-condition  =>  TRUE
[00:46:06.195]      // while "1"  (timeout="200")
[00:46:06.195]      // while-condition  =>  TRUE
[00:46:06.196]      // while "1"  (timeout="200")
[00:46:06.196]      // while-condition  =>  TRUE
[00:46:06.196]      // while "1"  (timeout="200")
[00:46:06.196]      // while-condition  =>  TRUE
[00:46:06.196]      // while "1"  (timeout="200")
[00:46:06.196]      // while-condition  =>  TRUE
[00:46:06.196]      // while "1"  (timeout="200")
[00:46:06.196]      // while-condition  =>  TRUE
[00:46:06.196]      // while "1"  (timeout="200")
[00:46:06.196]      // while-condition  =>  TRUE
[00:46:06.196]      // while "1"  (timeout="200")
[00:46:06.197]      // while-condition  =>  TRUE
[00:46:06.197]      // while "1"  (timeout="200")
[00:46:06.197]      // while-condition  =>  TRUE
[00:46:06.197]      // while "1"  (timeout="200")
[00:46:06.197]      // while-condition  =>  TRUE
[00:46:06.197]      // while "1"  (timeout="200")
[00:46:06.197]      // while-condition  =>  TRUE
[00:46:06.197]      // while "1"  (timeout="200")
[00:46:06.197]      // while-condition  =>  TRUE
[00:46:06.197]      // while "1"  (timeout="200")
[00:46:06.197]      // while-condition  =>  TRUE
[00:46:06.198]      // while "1"  (timeout="200")
[00:46:06.198]      // while-condition  =>  TRUE
[00:46:06.198]      // while "1"  (timeout="200")
[00:46:06.198]      // while-condition  =>  TRUE
[00:46:06.198]      // while "1"  (timeout="200")
[00:46:06.198]      // while-condition  =>  TRUE
[00:46:06.198]      // while "1"  (timeout="200")
[00:46:06.198]      // while-condition  =>  TRUE
[00:46:06.198]      // while "1"  (timeout="200")
[00:46:06.198]      // while-condition  =>  TRUE
[00:46:06.198]      // while "1"  (timeout="200")
[00:46:06.198]      // while-condition  =>  TRUE
[00:46:06.199]      // while "1"  (timeout="200")
[00:46:06.199]      // while-condition  =>  TRUE
[00:46:06.199]      // while "1"  (timeout="200")
[00:46:06.199]      // while-condition  =>  TRUE
[00:46:06.199]      // while "1"  (timeout="200")
[00:46:06.199]      // while-condition  =>  TRUE
[00:46:06.199]      // while "1"  (timeout="200")
[00:46:06.199]      // while-condition  =>  TRUE
[00:46:06.199]      // while "1"  (timeout="200")
[00:46:06.199]      // while-condition  =>  TRUE
[00:46:06.199]      // while "1"  (timeout="200")
[00:46:06.200]      // while-condition  =>  TRUE
[00:46:06.200]      // while "1"  (timeout="200")
[00:46:06.200]      // while-condition  =>  TRUE
[00:46:06.200]      // while "1"  (timeout="200")
[00:46:06.200]      // while-condition  =>  TRUE
[00:46:06.200]      // while "1"  (timeout="200")
[00:46:06.200]      // while-condition  =>  TRUE
[00:46:06.200]      // while "1"  (timeout="200")
[00:46:06.200]      // while-condition  =>  TRUE
[00:46:06.201]      // while "1"  (timeout="200")
[00:46:06.201]      // while-condition  =>  TRUE
[00:46:06.201]      // while "1"  (timeout="200")
[00:46:06.201]      // while-condition  =>  TRUE
[00:46:06.201]      // while "1"  (timeout="200")
[00:46:06.201]      // while-condition  =>  TRUE
[00:46:06.201]      // while "1"  (timeout="200")
[00:46:06.201]      // while-condition  =>  TRUE
[00:46:06.201]      // while "1"  (timeout="200")
[00:46:06.201]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.202]      // while "1"  (timeout="200")
[00:46:06.202]      // while-condition  =>  TRUE
[00:46:06.203]      // while "1"  (timeout="200")
[00:46:06.203]      // while-condition  =>  TRUE
[00:46:06.203]      // while "1"  (timeout="200")
[00:46:06.203]      // while-condition  =>  TRUE
[00:46:06.203]      // while "1"  (timeout="200")
[00:46:06.203]      // while-condition  =>  TRUE
[00:46:06.203]      // while "1"  (timeout="200")
[00:46:06.203]      // while-condition  =>  TRUE
[00:46:06.203]      // while "1"  (timeout="200")
[00:46:06.203]      // while-condition  =>  TRUE
[00:46:06.204]      // while "1"  (timeout="200")
[00:46:06.204]      // while-condition  =>  TRUE
[00:46:06.204]      // while "1"  (timeout="200")
[00:46:06.204]      // while-condition  =>  TRUE
[00:46:06.204]      // while "1"  (timeout="200")
[00:46:06.204]      // while-condition  =>  TRUE
[00:46:06.205]      // while "1"  (timeout="200")
[00:46:06.205]      // while-condition  =>  TRUE
[00:46:06.205]      // while "1"  (timeout="200")
[00:46:06.205]      // while-condition  =>  TRUE
[00:46:06.205]      // while "1"  (timeout="200")
[00:46:06.205]      // while-condition  =>  TRUE
[00:46:06.205]      // while "1"  (timeout="200")
[00:46:06.205]      // while-condition  =>  TRUE
[00:46:06.205]      // while "1"  (timeout="200")
[00:46:06.205]      // while-condition  =>  TRUE
[00:46:06.205]      // while "1"  (timeout="200")
[00:46:06.205]      // while-condition  =>  TRUE
[00:46:06.206]      // while "1"  (timeout="200")
[00:46:06.206]      // while-condition  =>  TRUE
[00:46:06.206]      // while "1"  (timeout="200")
[00:46:06.206]      // while-condition  =>  TRUE
[00:46:06.206]      // while "1"  (timeout="200")
[00:46:06.206]      // while-condition  =>  TRUE
[00:46:06.206]      // while "1"  (timeout="200")
[00:46:06.206]      // while-condition  =>  TRUE
[00:46:06.206]      // while "1"  (timeout="200")
[00:46:06.206]      // while-condition  =>  TRUE
[00:46:06.206]      // while "1"  (timeout="200")
[00:46:06.207]      // while-condition  =>  TRUE
[00:46:06.207]      // while "1"  (timeout="200")
[00:46:06.207]      // while-condition  =>  TRUE
[00:46:06.207]      // while "1"  (timeout="200")
[00:46:06.207]      // while-condition  =>  TRUE
[00:46:06.207]      // while "1"  (timeout="200")
[00:46:06.207]      // while-condition  =>  TRUE
[00:46:06.207]      // while "1"  (timeout="200")
[00:46:06.207]      // while-condition  =>  TRUE
[00:46:06.207]      // while "1"  (timeout="200")
[00:46:06.207]      // while-condition  =>  TRUE
[00:46:06.208]      // while "1"  (timeout="200")
[00:46:06.208]      // while-condition  =>  TRUE
[00:46:06.208]      // while "1"  (timeout="200")
[00:46:06.208]      // while-condition  =>  TRUE
[00:46:06.208]      // while "1"  (timeout="200")
[00:46:06.208]      // while-condition  =>  TRUE
[00:46:06.208]      // while "1"  (timeout="200")
[00:46:06.208]      // while-condition  =>  TRUE
[00:46:06.208]      // while "1"  (timeout="200")
[00:46:06.208]      // while-condition  =>  TRUE
[00:46:06.208]      // while "1"  (timeout="200")
[00:46:06.208]      // while-condition  =>  TRUE
[00:46:06.209]      // while "1"  (timeout="200")
[00:46:06.209]      // while  =>  TIMEOUT
[00:46:06.209]      // end while "1"
[00:46:06.209]    </control>
[00:46:06.209]    <control if="canReadPins" while="" timeout="0" info="">
[00:46:06.209]      // if-block "canReadPins"
[00:46:06.209]        // =>  TRUE
[00:46:06.209]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:46:06.209]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:46:06.210]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:46:06.210]        // while-condition  =>  FALSE
[00:46:06.210]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:46:06.210]      </control>
[00:46:06.210]      // end if-block "canReadPins"
[00:46:06.210]    </control>
[00:46:06.210]    <control if="!canReadPins" while="" timeout="0" info="">
[00:46:06.210]      // if-block "!canReadPins"
[00:46:06.210]        // =>  FALSE
[00:46:06.210]      // skip if-block "!canReadPins"
[00:46:06.211]    </control>
[00:46:06.211]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:46:06.211]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:46:06.211]        // =>  TRUE
[00:46:06.211]      <block atomic="false" info="">
[00:46:06.211]        WriteAP(0x00, 0x190008);
[00:46:06.212]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:46:06.212]        WriteAP(0xF0, 0x01);
[00:46:06.212]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:46:06.212]      </block>
[00:46:06.213]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:46:06.213]    </control>
[00:46:06.213]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:46:06.213]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:46:06.213]        // =>  FALSE
[00:46:06.213]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:46:06.213]    </control>
[00:46:06.213]    <block atomic="false" info="">
[00:46:06.213]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:46:06.215]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:46:06.215]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:46:06.215]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:46:06.217]      __ap = 0; //lets make sure we reset the access point selection
[00:46:06.217]        // -> [__ap <= 0x00000000]
[00:46:06.217]    </block>
[00:46:06.217]  </sequence>
[00:46:06.218]  
[00:46:06.224]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:46:06.224]  
[00:46:06.224]  <debugvars>
[00:46:06.224]    // Pre-defined
[00:46:06.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:06.224]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:46:06.224]    __dp=0x00000000
[00:46:06.224]    __ap=0x00000000
[00:46:06.224]    __traceout=0x00000000      (Trace Disabled)
[00:46:06.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:06.225]    __FlashAddr=0x00000000
[00:46:06.225]    __FlashLen=0x00000000
[00:46:06.225]    __FlashArg=0x00000000
[00:46:06.225]    __FlashOp=0x00000000
[00:46:06.225]    __Result=0x00000000
[00:46:06.225]  </debugvars>
[00:46:06.225]  
[00:46:06.225]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:46:06.225]    <block atomic="false" info="">
[00:46:06.225]      __var deviceID = 0;
[00:46:06.226]        // -> [deviceID <= 0x00000000]
[00:46:06.226]      __var version = 0;
[00:46:06.226]        // -> [version <= 0x00000000]
[00:46:06.226]      __var partNum = 0;
[00:46:06.226]        // -> [partNum <= 0x00000000]
[00:46:06.226]      __var manuf = 0;
[00:46:06.226]        // -> [manuf <= 0x00000000]
[00:46:06.226]      __var isMSPM0G1X0X_G3X0X = 0;
[00:46:06.226]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:46:06.227]      __var isProduction = 0;
[00:46:06.227]        // -> [isProduction <= 0x00000000]
[00:46:06.227]      __var continueId = 0;
[00:46:06.227]        // -> [continueId <= 0x00000000]
[00:46:06.227]      deviceID =   Read32(0x41C40004);
[00:46:06.228]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:46:06.228]        // -> [deviceID <= 0x2BB8802F]
[00:46:06.229]      version = deviceID >> 28;
[00:46:06.229]        // -> [version <= 0x00000002]
[00:46:06.229]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:46:06.229]        // -> [partNum <= 0x0000BB88]
[00:46:06.229]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:46:06.229]        // -> [manuf <= 0x00000017]
[00:46:06.230]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:46:06.230]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:46:06.231]      isProduction = (version > 0);
[00:46:06.231]        // -> [isProduction <= 0x00000001]
[00:46:06.231]    </block>
[00:46:06.231]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:46:06.231]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:46:06.231]        // =>  FALSE
[00:46:06.231]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:46:06.231]    </control>
[00:46:06.231]    <control if="continueId == 4" while="" timeout="0" info="">
[00:46:06.232]      // if-block "continueId == 4"
[00:46:06.232]        // =>  FALSE
[00:46:06.232]      // skip if-block "continueId == 4"
[00:46:06.232]    </control>
[00:46:06.232]    <control if="!isProduction" while="" timeout="0" info="">
[00:46:06.232]      // if-block "!isProduction"
[00:46:06.232]        // =>  FALSE
[00:46:06.232]      // skip if-block "!isProduction"
[00:46:06.232]    </control>
[00:46:06.232]  </sequence>
[00:46:06.232]  
[00:48:41.331]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:48:41.331]  
[00:48:41.340]  <debugvars>
[00:48:41.340]    // Pre-defined
[00:48:41.340]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:41.340]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:48:41.340]    __dp=0x00000000
[00:48:41.340]    __ap=0x00000000
[00:48:41.340]    __traceout=0x00000000      (Trace Disabled)
[00:48:41.340]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:41.340]    __FlashAddr=0x00000000
[00:48:41.340]    __FlashLen=0x00000000
[00:48:41.340]    __FlashArg=0x00000000
[00:48:41.340]    __FlashOp=0x00000000
[00:48:41.340]    __Result=0x00000000
[00:48:41.340]  </debugvars>
[00:48:41.340]  
[00:48:41.340]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:41.341]    <block atomic="false" info="">
[00:48:41.341]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:41.341]        // -> [isSWJ <= 0x00000001]
[00:48:41.341]      __var hasDormant = __protocol & 0x00020000;
[00:48:41.341]        // -> [hasDormant <= 0x00000000]
[00:48:41.341]      __var protType   = __protocol & 0x0000FFFF;
[00:48:41.341]        // -> [protType <= 0x00000002]
[00:48:41.341]    </block>
[00:48:41.341]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:41.341]      // if-block "protType == 1"
[00:48:41.341]        // =>  FALSE
[00:48:41.341]      // skip if-block "protType == 1"
[00:48:41.343]    </control>
[00:48:41.343]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:41.343]      // if-block "protType == 2"
[00:48:41.343]        // =>  TRUE
[00:48:41.343]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:41.343]        // if-block "isSWJ"
[00:48:41.343]          // =>  TRUE
[00:48:41.343]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:41.343]          // if-block "hasDormant"
[00:48:41.343]            // =>  FALSE
[00:48:41.343]          // skip if-block "hasDormant"
[00:48:41.344]        </control>
[00:48:41.344]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:41.344]          // if-block "!hasDormant"
[00:48:41.344]            // =>  TRUE
[00:48:41.344]          <block atomic="false" info="">
[00:48:41.344]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:41.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:41.345]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:41.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:41.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:41.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:41.345]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:41.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:41.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:41.346]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:41.346]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:41.346]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:41.346]          </block>
[00:48:41.346]          // end if-block "!hasDormant"
[00:48:41.346]        </control>
[00:48:41.347]        // end if-block "isSWJ"
[00:48:41.347]      </control>
[00:48:41.347]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:41.347]        // if-block "!isSWJ"
[00:48:41.347]          // =>  FALSE
[00:48:41.347]        // skip if-block "!isSWJ"
[00:48:41.347]      </control>
[00:48:41.347]      <block atomic="false" info="">
[00:48:41.347]        ReadDP(0x0);
[00:48:41.348]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:41.348]      </block>
[00:48:41.348]      // end if-block "protType == 2"
[00:48:41.348]    </control>
[00:48:41.348]  </sequence>
[00:48:41.348]  
[00:48:41.349]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:48:41.349]  
[00:48:41.349]  <debugvars>
[00:48:41.349]    // Pre-defined
[00:48:41.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:41.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:48:41.349]    __dp=0x00000000
[00:48:41.349]    __ap=0x00000000
[00:48:41.349]    __traceout=0x00000000      (Trace Disabled)
[00:48:41.350]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:41.350]    __FlashAddr=0x00000000
[00:48:41.350]    __FlashLen=0x00000000
[00:48:41.350]    __FlashArg=0x00000000
[00:48:41.350]    __FlashOp=0x00000000
[00:48:41.350]    __Result=0x00000000
[00:48:41.350]  </debugvars>
[00:48:41.350]  
[00:48:41.350]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:48:41.350]    <block atomic="false" info="">
[00:48:41.350]      __var SW_DP_ABORT       = 0x0;
[00:48:41.351]        // -> [SW_DP_ABORT <= 0x00000000]
[00:48:41.351]      __var DP_CTRL_STAT      = 0x4;
[00:48:41.351]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:48:41.351]      __var DP_SELECT         = 0x8;
[00:48:41.351]        // -> [DP_SELECT <= 0x00000008]
[00:48:41.351]      __var powered_down      = 0;
[00:48:41.351]        // -> [powered_down <= 0x00000000]
[00:48:41.351]      WriteDP(DP_SELECT, 0x00000000);
[00:48:41.351]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:48:41.351]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:48:41.353]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:48:41.353]        // -> [powered_down <= 0x00000001]
[00:48:41.353]    </block>
[00:48:41.353]    <control if="powered_down" while="" timeout="0" info="">
[00:48:41.353]      // if-block "powered_down"
[00:48:41.353]        // =>  TRUE
[00:48:41.353]      <block atomic="false" info="">
[00:48:41.353]        Message(0, "Debug/System power-up request sent");
[00:48:41.355]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:48:41.355]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:48:41.356]      </block>
[00:48:41.356]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:48:41.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:48:41.356]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:48:41.356]        // while-condition  =>  FALSE
[00:48:41.356]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:48:41.356]      </control>
[00:48:41.358]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:48:41.358]        // if-block "(__protocol & 0xFFFF) == 1"
[00:48:41.358]          // =>  FALSE
[00:48:41.358]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:48:41.358]      </control>
[00:48:41.358]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:48:41.358]        // if-block "(__protocol & 0xFFFF) == 2"
[00:48:41.358]          // =>  TRUE
[00:48:41.358]        <block atomic="false" info="">
[00:48:41.359]          Message(0, "executing SWD power up");
[00:48:41.360]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:48:41.361]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:48:41.361]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:48:41.361]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:48:41.361]        </block>
[00:48:41.362]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:48:41.362]      </control>
[00:48:41.362]      // end if-block "powered_down"
[00:48:41.362]    </control>
[00:48:41.362]    <block atomic="false" info="">
[00:48:41.362]      __var DEBUG_PORT_VAL    = 0;
[00:48:41.362]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:48:41.362]      __var ACCESS_POINT_VAL  = 0;
[00:48:41.362]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:48:41.363]      __ap = 1; 
[00:48:41.363]        // -> [__ap <= 0x00000001]
[00:48:41.363]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:48:41.364]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:48:41.364]      __ap = 4;
[00:48:41.365]        // -> [__ap <= 0x00000004]
[00:48:41.365]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:48:41.366]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:48:41.366]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:48:41.366]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:48:41.367]    </block>
[00:48:41.368]    <block atomic="false" info="">
[00:48:41.368]      __var nReset = 0x80;
[00:48:41.368]        // -> [nReset <= 0x00000080]
[00:48:41.368]      __var canReadPins = 0;
[00:48:41.368]        // -> [canReadPins <= 0x00000000]
[00:48:41.368]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:48:41.369]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:48:41.369]        // -> [canReadPins <= 0x00000001]
[00:48:41.369]    </block>
[00:48:41.369]    <control if="" while="1" timeout="200" info="">
[00:48:41.369]      // while "1"  (timeout="200")
[00:48:41.369]      // while-condition  =>  TRUE
[00:48:41.369]      // while "1"  (timeout="200")
[00:48:41.369]      // while-condition  =>  TRUE
[00:48:41.370]      // while "1"  (timeout="200")
[00:48:41.370]      // while-condition  =>  TRUE
[00:48:41.370]      // while "1"  (timeout="200")
[00:48:41.370]      // while-condition  =>  TRUE
[00:48:41.370]      // while "1"  (timeout="200")
[00:48:41.370]      // while-condition  =>  TRUE
[00:48:41.370]      // while "1"  (timeout="200")
[00:48:41.370]      // while-condition  =>  TRUE
[00:48:41.370]      // while "1"  (timeout="200")
[00:48:41.370]      // while-condition  =>  TRUE
[00:48:41.371]      // while "1"  (timeout="200")
[00:48:41.371]      // while-condition  =>  TRUE
[00:48:41.371]      // while "1"  (timeout="200")
[00:48:41.371]      // while-condition  =>  TRUE
[00:48:41.371]      // while "1"  (timeout="200")
[00:48:41.371]      // while-condition  =>  TRUE
[00:48:41.371]      // while "1"  (timeout="200")
[00:48:41.371]      // while-condition  =>  TRUE
[00:48:41.371]      // while "1"  (timeout="200")
[00:48:41.371]      // while-condition  =>  TRUE
[00:48:41.371]      // while "1"  (timeout="200")
[00:48:41.371]      // while-condition  =>  TRUE
[00:48:41.373]      // while "1"  (timeout="200")
[00:48:41.373]      // while-condition  =>  TRUE
[00:48:41.373]      // while "1"  (timeout="200")
[00:48:41.373]      // while-condition  =>  TRUE
[00:48:41.373]      // while "1"  (timeout="200")
[00:48:41.373]      // while-condition  =>  TRUE
[00:48:41.373]      // while "1"  (timeout="200")
[00:48:41.373]      // while-condition  =>  TRUE
[00:48:41.373]      // while "1"  (timeout="200")
[00:48:41.373]      // while-condition  =>  TRUE
[00:48:41.373]      // while "1"  (timeout="200")
[00:48:41.374]      // while-condition  =>  TRUE
[00:48:41.374]      // while "1"  (timeout="200")
[00:48:41.374]      // while-condition  =>  TRUE
[00:48:41.374]      // while "1"  (timeout="200")
[00:48:41.374]      // while-condition  =>  TRUE
[00:48:41.374]      // while "1"  (timeout="200")
[00:48:41.374]      // while-condition  =>  TRUE
[00:48:41.374]      // while "1"  (timeout="200")
[00:48:41.374]      // while-condition  =>  TRUE
[00:48:41.374]      // while "1"  (timeout="200")
[00:48:41.374]      // while-condition  =>  TRUE
[00:48:41.374]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.375]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.375]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.375]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.375]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.375]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.375]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.375]      // while "1"  (timeout="200")
[00:48:41.375]      // while-condition  =>  TRUE
[00:48:41.376]      // while "1"  (timeout="200")
[00:48:41.376]      // while-condition  =>  TRUE
[00:48:41.376]      // while "1"  (timeout="200")
[00:48:41.376]      // while-condition  =>  TRUE
[00:48:41.376]      // while "1"  (timeout="200")
[00:48:41.376]      // while-condition  =>  TRUE
[00:48:41.376]      // while "1"  (timeout="200")
[00:48:41.376]      // while-condition  =>  TRUE
[00:48:41.376]      // while "1"  (timeout="200")
[00:48:41.376]      // while-condition  =>  TRUE
[00:48:41.376]      // while "1"  (timeout="200")
[00:48:41.376]      // while-condition  =>  TRUE
[00:48:41.377]      // while "1"  (timeout="200")
[00:48:41.377]      // while-condition  =>  TRUE
[00:48:41.377]      // while "1"  (timeout="200")
[00:48:41.377]      // while-condition  =>  TRUE
[00:48:41.377]      // while "1"  (timeout="200")
[00:48:41.377]      // while-condition  =>  TRUE
[00:48:41.377]      // while "1"  (timeout="200")
[00:48:41.377]      // while-condition  =>  TRUE
[00:48:41.377]      // while "1"  (timeout="200")
[00:48:41.377]      // while-condition  =>  TRUE
[00:48:41.377]      // while "1"  (timeout="200")
[00:48:41.378]      // while-condition  =>  TRUE
[00:48:41.378]      // while "1"  (timeout="200")
[00:48:41.378]      // while-condition  =>  TRUE
[00:48:41.378]      // while "1"  (timeout="200")
[00:48:41.378]      // while-condition  =>  TRUE
[00:48:41.378]      // while "1"  (timeout="200")
[00:48:41.378]      // while-condition  =>  TRUE
[00:48:41.378]      // while "1"  (timeout="200")
[00:48:41.378]      // while-condition  =>  TRUE
[00:48:41.379]      // while "1"  (timeout="200")
[00:48:41.379]      // while-condition  =>  TRUE
[00:48:41.379]      // while "1"  (timeout="200")
[00:48:41.379]      // while-condition  =>  TRUE
[00:48:41.379]      // while "1"  (timeout="200")
[00:48:41.379]      // while-condition  =>  TRUE
[00:48:41.379]      // while "1"  (timeout="200")
[00:48:41.379]      // while-condition  =>  TRUE
[00:48:41.380]      // while "1"  (timeout="200")
[00:48:41.380]      // while-condition  =>  TRUE
[00:48:41.380]      // while "1"  (timeout="200")
[00:48:41.380]      // while-condition  =>  TRUE
[00:48:41.380]      // while "1"  (timeout="200")
[00:48:41.380]      // while-condition  =>  TRUE
[00:48:41.380]      // while "1"  (timeout="200")
[00:48:41.380]      // while-condition  =>  TRUE
[00:48:41.380]      // while "1"  (timeout="200")
[00:48:41.380]      // while-condition  =>  TRUE
[00:48:41.380]      // while "1"  (timeout="200")
[00:48:41.380]      // while-condition  =>  TRUE
[00:48:41.381]      // while "1"  (timeout="200")
[00:48:41.381]      // while  =>  TIMEOUT
[00:48:41.381]      // end while "1"
[00:48:41.381]    </control>
[00:48:41.381]    <control if="canReadPins" while="" timeout="0" info="">
[00:48:41.381]      // if-block "canReadPins"
[00:48:41.381]        // =>  TRUE
[00:48:41.381]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:48:41.381]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:48:41.381]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:48:41.381]        // while-condition  =>  FALSE
[00:48:41.381]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:48:41.383]      </control>
[00:48:41.383]      // end if-block "canReadPins"
[00:48:41.383]    </control>
[00:48:41.383]    <control if="!canReadPins" while="" timeout="0" info="">
[00:48:41.383]      // if-block "!canReadPins"
[00:48:41.383]        // =>  FALSE
[00:48:41.383]      // skip if-block "!canReadPins"
[00:48:41.383]    </control>
[00:48:41.383]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:48:41.383]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:48:41.383]        // =>  TRUE
[00:48:41.383]      <block atomic="false" info="">
[00:48:41.383]        WriteAP(0x00, 0x190008);
[00:48:41.385]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:48:41.385]        WriteAP(0xF0, 0x01);
[00:48:41.386]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:48:41.386]      </block>
[00:48:41.386]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:48:41.386]    </control>
[00:48:41.386]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:48:41.387]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:48:41.387]        // =>  FALSE
[00:48:41.387]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:48:41.387]    </control>
[00:48:41.388]    <block atomic="false" info="">
[00:48:41.388]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:48:41.388]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:48:41.389]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:48:41.389]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:48:41.390]      __ap = 0; //lets make sure we reset the access point selection
[00:48:41.390]        // -> [__ap <= 0x00000000]
[00:48:41.390]    </block>
[00:48:41.390]  </sequence>
[00:48:41.390]  
[00:48:41.396]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:48:41.396]  
[00:48:41.397]  <debugvars>
[00:48:41.397]    // Pre-defined
[00:48:41.397]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:41.397]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:48:41.397]    __dp=0x00000000
[00:48:41.397]    __ap=0x00000000
[00:48:41.397]    __traceout=0x00000000      (Trace Disabled)
[00:48:41.397]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:41.397]    __FlashAddr=0x00000000
[00:48:41.398]    __FlashLen=0x00000000
[00:48:41.398]    __FlashArg=0x00000000
[00:48:41.398]    __FlashOp=0x00000000
[00:48:41.398]    __Result=0x00000000
[00:48:41.398]  </debugvars>
[00:48:41.398]  
[00:48:41.398]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:48:41.398]    <block atomic="false" info="">
[00:48:41.398]      __var deviceID = 0;
[00:48:41.398]        // -> [deviceID <= 0x00000000]
[00:48:41.399]      __var version = 0;
[00:48:41.399]        // -> [version <= 0x00000000]
[00:48:41.399]      __var partNum = 0;
[00:48:41.399]        // -> [partNum <= 0x00000000]
[00:48:41.399]      __var manuf = 0;
[00:48:41.399]        // -> [manuf <= 0x00000000]
[00:48:41.399]      __var isMSPM0G1X0X_G3X0X = 0;
[00:48:41.399]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:48:41.399]      __var isProduction = 0;
[00:48:41.399]        // -> [isProduction <= 0x00000000]
[00:48:41.399]      __var continueId = 0;
[00:48:41.400]        // -> [continueId <= 0x00000000]
[00:48:41.400]      deviceID =   Read32(0x41C40004);
[00:48:41.401]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:48:41.401]        // -> [deviceID <= 0x2BB8802F]
[00:48:41.401]      version = deviceID >> 28;
[00:48:41.402]        // -> [version <= 0x00000002]
[00:48:41.402]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:48:41.402]        // -> [partNum <= 0x0000BB88]
[00:48:41.402]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:48:41.402]        // -> [manuf <= 0x00000017]
[00:48:41.403]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:48:41.403]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:48:41.403]      isProduction = (version > 0);
[00:48:41.403]        // -> [isProduction <= 0x00000001]
[00:48:41.403]    </block>
[00:48:41.403]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:48:41.403]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:48:41.403]        // =>  FALSE
[00:48:41.403]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:48:41.403]    </control>
[00:48:41.403]    <control if="continueId == 4" while="" timeout="0" info="">
[00:48:41.403]      // if-block "continueId == 4"
[00:48:41.403]        // =>  FALSE
[00:48:41.403]      // skip if-block "continueId == 4"
[00:48:41.403]    </control>
[00:48:41.403]    <control if="!isProduction" while="" timeout="0" info="">
[00:48:41.405]      // if-block "!isProduction"
[00:48:41.405]        // =>  FALSE
[00:48:41.405]      // skip if-block "!isProduction"
[00:48:41.405]    </control>
[00:48:41.405]  </sequence>
[00:48:41.405]  
[00:52:24.183]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:52:24.183]  
[00:52:24.192]  <debugvars>
[00:52:24.192]    // Pre-defined
[00:52:24.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:24.192]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:24.192]    __dp=0x00000000
[00:52:24.192]    __ap=0x00000000
[00:52:24.192]    __traceout=0x00000000      (Trace Disabled)
[00:52:24.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:24.192]    __FlashAddr=0x00000000
[00:52:24.192]    __FlashLen=0x00000000
[00:52:24.193]    __FlashArg=0x00000000
[00:52:24.193]    __FlashOp=0x00000000
[00:52:24.193]    __Result=0x00000000
[00:52:24.193]  </debugvars>
[00:52:24.193]  
[00:52:24.193]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:52:24.193]    <block atomic="false" info="">
[00:52:24.193]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:52:24.193]        // -> [isSWJ <= 0x00000001]
[00:52:24.193]      __var hasDormant = __protocol & 0x00020000;
[00:52:24.194]        // -> [hasDormant <= 0x00000000]
[00:52:24.194]      __var protType   = __protocol & 0x0000FFFF;
[00:52:24.194]        // -> [protType <= 0x00000002]
[00:52:24.194]    </block>
[00:52:24.194]    <control if="protType == 1" while="" timeout="0" info="">
[00:52:24.194]      // if-block "protType == 1"
[00:52:24.194]        // =>  FALSE
[00:52:24.194]      // skip if-block "protType == 1"
[00:52:24.194]    </control>
[00:52:24.195]    <control if="protType == 2" while="" timeout="0" info="">
[00:52:24.195]      // if-block "protType == 2"
[00:52:24.195]        // =>  TRUE
[00:52:24.195]      <control if="isSWJ" while="" timeout="0" info="">
[00:52:24.195]        // if-block "isSWJ"
[00:52:24.195]          // =>  TRUE
[00:52:24.195]        <control if="hasDormant" while="" timeout="0" info="">
[00:52:24.195]          // if-block "hasDormant"
[00:52:24.195]            // =>  FALSE
[00:52:24.195]          // skip if-block "hasDormant"
[00:52:24.195]        </control>
[00:52:24.195]        <control if="!hasDormant" while="" timeout="0" info="">
[00:52:24.195]          // if-block "!hasDormant"
[00:52:24.196]            // =>  TRUE
[00:52:24.196]          <block atomic="false" info="">
[00:52:24.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:52:24.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:24.196]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:52:24.197]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:52:24.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:52:24.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:24.197]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:52:24.197]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:52:24.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:52:24.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:24.198]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:52:24.198]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:52:24.198]          </block>
[00:52:24.198]          // end if-block "!hasDormant"
[00:52:24.199]        </control>
[00:52:24.199]        // end if-block "isSWJ"
[00:52:24.199]      </control>
[00:52:24.199]      <control if="!isSWJ" while="" timeout="0" info="">
[00:52:24.199]        // if-block "!isSWJ"
[00:52:24.199]          // =>  FALSE
[00:52:24.200]        // skip if-block "!isSWJ"
[00:52:24.200]      </control>
[00:52:24.200]      <block atomic="false" info="">
[00:52:24.200]        ReadDP(0x0);
[00:52:24.201]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:52:24.201]      </block>
[00:52:24.201]      // end if-block "protType == 2"
[00:52:24.201]    </control>
[00:52:24.201]  </sequence>
[00:52:24.201]  
[00:52:24.202]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:52:24.202]  
[00:52:24.202]  <debugvars>
[00:52:24.202]    // Pre-defined
[00:52:24.202]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:24.202]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:24.202]    __dp=0x00000000
[00:52:24.202]    __ap=0x00000000
[00:52:24.202]    __traceout=0x00000000      (Trace Disabled)
[00:52:24.202]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:24.202]    __FlashAddr=0x00000000
[00:52:24.202]    __FlashLen=0x00000000
[00:52:24.203]    __FlashArg=0x00000000
[00:52:24.203]    __FlashOp=0x00000000
[00:52:24.203]    __Result=0x00000000
[00:52:24.203]  </debugvars>
[00:52:24.203]  
[00:52:24.203]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:52:24.203]    <block atomic="false" info="">
[00:52:24.203]      __var SW_DP_ABORT       = 0x0;
[00:52:24.203]        // -> [SW_DP_ABORT <= 0x00000000]
[00:52:24.203]      __var DP_CTRL_STAT      = 0x4;
[00:52:24.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:52:24.203]      __var DP_SELECT         = 0x8;
[00:52:24.203]        // -> [DP_SELECT <= 0x00000008]
[00:52:24.203]      __var powered_down      = 0;
[00:52:24.203]        // -> [powered_down <= 0x00000000]
[00:52:24.203]      WriteDP(DP_SELECT, 0x00000000);
[00:52:24.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:52:24.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:52:24.205]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:52:24.205]        // -> [powered_down <= 0x00000001]
[00:52:24.205]    </block>
[00:52:24.205]    <control if="powered_down" while="" timeout="0" info="">
[00:52:24.205]      // if-block "powered_down"
[00:52:24.205]        // =>  TRUE
[00:52:24.205]      <block atomic="false" info="">
[00:52:24.205]        Message(0, "Debug/System power-up request sent");
[00:52:24.207]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:52:24.208]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:52:24.208]      </block>
[00:52:24.208]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:52:24.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:52:24.208]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:52:24.208]        // while-condition  =>  FALSE
[00:52:24.208]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:52:24.209]      </control>
[00:52:24.209]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:52:24.209]        // if-block "(__protocol & 0xFFFF) == 1"
[00:52:24.209]          // =>  FALSE
[00:52:24.209]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:52:24.209]      </control>
[00:52:24.209]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:52:24.209]        // if-block "(__protocol & 0xFFFF) == 2"
[00:52:24.209]          // =>  TRUE
[00:52:24.209]        <block atomic="false" info="">
[00:52:24.209]          Message(0, "executing SWD power up");
[00:52:24.211]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:52:24.211]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:52:24.211]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:52:24.213]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:52:24.213]        </block>
[00:52:24.213]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:52:24.213]      </control>
[00:52:24.213]      // end if-block "powered_down"
[00:52:24.213]    </control>
[00:52:24.213]    <block atomic="false" info="">
[00:52:24.213]      __var DEBUG_PORT_VAL    = 0;
[00:52:24.213]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:52:24.213]      __var ACCESS_POINT_VAL  = 0;
[00:52:24.213]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:52:24.213]      __ap = 1; 
[00:52:24.213]        // -> [__ap <= 0x00000001]
[00:52:24.213]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:52:24.215]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:52:24.215]      __ap = 4;
[00:52:24.215]        // -> [__ap <= 0x00000004]
[00:52:24.215]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:52:24.216]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:52:24.216]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:52:24.216]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:52:24.218]    </block>
[00:52:24.218]    <block atomic="false" info="">
[00:52:24.218]      __var nReset = 0x80;
[00:52:24.218]        // -> [nReset <= 0x00000080]
[00:52:24.218]      __var canReadPins = 0;
[00:52:24.218]        // -> [canReadPins <= 0x00000000]
[00:52:24.219]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:52:24.219]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:52:24.219]        // -> [canReadPins <= 0x00000001]
[00:52:24.219]    </block>
[00:52:24.219]    <control if="" while="1" timeout="200" info="">
[00:52:24.219]      // while "1"  (timeout="200")
[00:52:24.219]      // while-condition  =>  TRUE
[00:52:24.220]      // while "1"  (timeout="200")
[00:52:24.220]      // while-condition  =>  TRUE
[00:52:24.220]      // while "1"  (timeout="200")
[00:52:24.220]      // while-condition  =>  TRUE
[00:52:24.220]      // while "1"  (timeout="200")
[00:52:24.220]      // while-condition  =>  TRUE
[00:52:24.220]      // while "1"  (timeout="200")
[00:52:24.220]      // while-condition  =>  TRUE
[00:52:24.220]      // while "1"  (timeout="200")
[00:52:24.220]      // while-condition  =>  TRUE
[00:52:24.220]      // while "1"  (timeout="200")
[00:52:24.220]      // while-condition  =>  TRUE
[00:52:24.221]      // while "1"  (timeout="200")
[00:52:24.221]      // while-condition  =>  TRUE
[00:52:24.221]      // while "1"  (timeout="200")
[00:52:24.221]      // while-condition  =>  TRUE
[00:52:24.221]      // while "1"  (timeout="200")
[00:52:24.221]      // while-condition  =>  TRUE
[00:52:24.221]      // while "1"  (timeout="200")
[00:52:24.221]      // while-condition  =>  TRUE
[00:52:24.222]      // while "1"  (timeout="200")
[00:52:24.222]      // while-condition  =>  TRUE
[00:52:24.222]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.223]      // while-condition  =>  TRUE
[00:52:24.223]      // while "1"  (timeout="200")
[00:52:24.224]      // while-condition  =>  TRUE
[00:52:24.224]      // while "1"  (timeout="200")
[00:52:24.224]      // while  =>  TIMEOUT
[00:52:24.224]      // end while "1"
[00:52:24.224]    </control>
[00:52:24.224]    <control if="canReadPins" while="" timeout="0" info="">
[00:52:24.224]      // if-block "canReadPins"
[00:52:24.224]        // =>  TRUE
[00:52:24.224]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:52:24.225]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:52:24.225]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:52:24.225]        // while-condition  =>  FALSE
[00:52:24.225]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:52:24.225]      </control>
[00:52:24.225]      // end if-block "canReadPins"
[00:52:24.225]    </control>
[00:52:24.225]    <control if="!canReadPins" while="" timeout="0" info="">
[00:52:24.226]      // if-block "!canReadPins"
[00:52:24.226]        // =>  FALSE
[00:52:24.226]      // skip if-block "!canReadPins"
[00:52:24.226]    </control>
[00:52:24.226]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:52:24.226]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:52:24.226]        // =>  TRUE
[00:52:24.226]      <block atomic="false" info="">
[00:52:24.226]        WriteAP(0x00, 0x190008);
[00:52:24.227]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:52:24.227]        WriteAP(0xF0, 0x01);
[00:52:24.228]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:52:24.228]      </block>
[00:52:24.228]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:52:24.228]    </control>
[00:52:24.228]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:52:24.229]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:52:24.229]        // =>  FALSE
[00:52:24.229]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:52:24.229]    </control>
[00:52:24.229]    <block atomic="false" info="">
[00:52:24.229]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:52:24.230]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:52:24.230]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:52:24.230]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:52:24.232]      __ap = 0; //lets make sure we reset the access point selection
[00:52:24.233]        // -> [__ap <= 0x00000000]
[00:52:24.233]    </block>
[00:52:24.233]  </sequence>
[00:52:24.233]  
[00:52:24.238]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:52:24.238]  
[00:52:24.239]  <debugvars>
[00:52:24.239]    // Pre-defined
[00:52:24.239]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:24.239]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:24.239]    __dp=0x00000000
[00:52:24.239]    __ap=0x00000000
[00:52:24.240]    __traceout=0x00000000      (Trace Disabled)
[00:52:24.240]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:24.240]    __FlashAddr=0x00000000
[00:52:24.240]    __FlashLen=0x00000000
[00:52:24.240]    __FlashArg=0x00000000
[00:52:24.240]    __FlashOp=0x00000000
[00:52:24.240]    __Result=0x00000000
[00:52:24.240]  </debugvars>
[00:52:24.240]  
[00:52:24.240]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:52:24.241]    <block atomic="false" info="">
[00:52:24.241]      __var deviceID = 0;
[00:52:24.241]        // -> [deviceID <= 0x00000000]
[00:52:24.241]      __var version = 0;
[00:52:24.241]        // -> [version <= 0x00000000]
[00:52:24.241]      __var partNum = 0;
[00:52:24.241]        // -> [partNum <= 0x00000000]
[00:52:24.241]      __var manuf = 0;
[00:52:24.241]        // -> [manuf <= 0x00000000]
[00:52:24.241]      __var isMSPM0G1X0X_G3X0X = 0;
[00:52:24.241]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:52:24.242]      __var isProduction = 0;
[00:52:24.242]        // -> [isProduction <= 0x00000000]
[00:52:24.242]      __var continueId = 0;
[00:52:24.242]        // -> [continueId <= 0x00000000]
[00:52:24.242]      deviceID =   Read32(0x41C40004);
[00:52:24.243]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:52:24.245]        // -> [deviceID <= 0x2BB8802F]
[00:52:24.245]      version = deviceID >> 28;
[00:52:24.245]        // -> [version <= 0x00000002]
[00:52:24.245]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:52:24.245]        // -> [partNum <= 0x0000BB88]
[00:52:24.245]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:52:24.245]        // -> [manuf <= 0x00000017]
[00:52:24.245]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:52:24.245]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:52:24.246]      isProduction = (version > 0);
[00:52:24.246]        // -> [isProduction <= 0x00000001]
[00:52:24.246]    </block>
[00:52:24.246]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:52:24.246]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:52:24.246]        // =>  FALSE
[00:52:24.246]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:52:24.246]    </control>
[00:52:24.246]    <control if="continueId == 4" while="" timeout="0" info="">
[00:52:24.246]      // if-block "continueId == 4"
[00:52:24.246]        // =>  FALSE
[00:52:24.246]      // skip if-block "continueId == 4"
[00:52:24.247]    </control>
[00:52:24.247]    <control if="!isProduction" while="" timeout="0" info="">
[00:52:24.247]      // if-block "!isProduction"
[00:52:24.247]        // =>  FALSE
[00:52:24.247]      // skip if-block "!isProduction"
[00:52:24.247]    </control>
[00:52:24.247]  </sequence>
[00:52:24.247]  
[00:56:49.591]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:56:49.591]  
[00:56:49.591]  <debugvars>
[00:56:49.592]    // Pre-defined
[00:56:49.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:49.592]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:49.592]    __dp=0x00000000
[00:56:49.592]    __ap=0x00000000
[00:56:49.592]    __traceout=0x00000000      (Trace Disabled)
[00:56:49.592]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:49.592]    __FlashAddr=0x00000000
[00:56:49.592]    __FlashLen=0x00000000
[00:56:49.592]    __FlashArg=0x00000000
[00:56:49.592]    __FlashOp=0x00000000
[00:56:49.592]    __Result=0x00000000
[00:56:49.593]  </debugvars>
[00:56:49.593]  
[00:56:49.593]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:56:49.593]    <block atomic="false" info="">
[00:56:49.593]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:56:49.593]        // -> [isSWJ <= 0x00000001]
[00:56:49.593]      __var hasDormant = __protocol & 0x00020000;
[00:56:49.594]        // -> [hasDormant <= 0x00000000]
[00:56:49.594]      __var protType   = __protocol & 0x0000FFFF;
[00:56:49.594]        // -> [protType <= 0x00000002]
[00:56:49.594]    </block>
[00:56:49.594]    <control if="protType == 1" while="" timeout="0" info="">
[00:56:49.594]      // if-block "protType == 1"
[00:56:49.594]        // =>  FALSE
[00:56:49.594]      // skip if-block "protType == 1"
[00:56:49.594]    </control>
[00:56:49.594]    <control if="protType == 2" while="" timeout="0" info="">
[00:56:49.594]      // if-block "protType == 2"
[00:56:49.595]        // =>  TRUE
[00:56:49.595]      <control if="isSWJ" while="" timeout="0" info="">
[00:56:49.595]        // if-block "isSWJ"
[00:56:49.595]          // =>  TRUE
[00:56:49.595]        <control if="hasDormant" while="" timeout="0" info="">
[00:56:49.595]          // if-block "hasDormant"
[00:56:49.595]            // =>  FALSE
[00:56:49.595]          // skip if-block "hasDormant"
[00:56:49.595]        </control>
[00:56:49.595]        <control if="!hasDormant" while="" timeout="0" info="">
[00:56:49.595]          // if-block "!hasDormant"
[00:56:49.596]            // =>  TRUE
[00:56:49.596]          <block atomic="false" info="">
[00:56:49.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:56:49.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:49.596]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:56:49.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:56:49.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:56:49.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:49.598]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:56:49.598]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:56:49.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:56:49.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:49.599]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:56:49.599]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:56:49.599]          </block>
[00:56:49.599]          // end if-block "!hasDormant"
[00:56:49.599]        </control>
[00:56:49.599]        // end if-block "isSWJ"
[00:56:49.599]      </control>
[00:56:49.599]      <control if="!isSWJ" while="" timeout="0" info="">
[00:56:49.600]        // if-block "!isSWJ"
[00:56:49.600]          // =>  FALSE
[00:56:49.600]        // skip if-block "!isSWJ"
[00:56:49.600]      </control>
[00:56:49.600]      <block atomic="false" info="">
[00:56:49.600]        ReadDP(0x0);
[00:56:49.600]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:56:49.601]      </block>
[00:56:49.601]      // end if-block "protType == 2"
[00:56:49.601]    </control>
[00:56:49.601]  </sequence>
[00:56:49.601]  
[00:56:49.601]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:56:49.601]  
[00:56:49.601]  <debugvars>
[00:56:49.602]    // Pre-defined
[00:56:49.602]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:49.602]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:49.602]    __dp=0x00000000
[00:56:49.602]    __ap=0x00000000
[00:56:49.602]    __traceout=0x00000000      (Trace Disabled)
[00:56:49.602]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:49.602]    __FlashAddr=0x00000000
[00:56:49.602]    __FlashLen=0x00000000
[00:56:49.602]    __FlashArg=0x00000000
[00:56:49.602]    __FlashOp=0x00000000
[00:56:49.603]    __Result=0x00000000
[00:56:49.603]  </debugvars>
[00:56:49.603]  
[00:56:49.603]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:56:49.603]    <block atomic="false" info="">
[00:56:49.603]      __var SW_DP_ABORT       = 0x0;
[00:56:49.603]        // -> [SW_DP_ABORT <= 0x00000000]
[00:56:49.603]      __var DP_CTRL_STAT      = 0x4;
[00:56:49.603]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:56:49.603]      __var DP_SELECT         = 0x8;
[00:56:49.603]        // -> [DP_SELECT <= 0x00000008]
[00:56:49.604]      __var powered_down      = 0;
[00:56:49.604]        // -> [powered_down <= 0x00000000]
[00:56:49.604]      WriteDP(DP_SELECT, 0x00000000);
[00:56:49.604]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:56:49.604]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:56:49.605]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:56:49.605]        // -> [powered_down <= 0x00000001]
[00:56:49.605]    </block>
[00:56:49.605]    <control if="powered_down" while="" timeout="0" info="">
[00:56:49.605]      // if-block "powered_down"
[00:56:49.605]        // =>  TRUE
[00:56:49.605]      <block atomic="false" info="">
[00:56:49.605]        Message(0, "Debug/System power-up request sent");
[00:56:49.610]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:56:49.611]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:56:49.611]      </block>
[00:56:49.611]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:56:49.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:56:49.612]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:56:49.612]        // while-condition  =>  FALSE
[00:56:49.612]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:56:49.612]      </control>
[00:56:49.612]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:56:49.612]        // if-block "(__protocol & 0xFFFF) == 1"
[00:56:49.612]          // =>  FALSE
[00:56:49.612]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:56:49.612]      </control>
[00:56:49.612]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:56:49.613]        // if-block "(__protocol & 0xFFFF) == 2"
[00:56:49.613]          // =>  TRUE
[00:56:49.613]        <block atomic="false" info="">
[00:56:49.613]          Message(0, "executing SWD power up");
[00:56:49.615]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:56:49.615]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:56:49.615]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:56:49.616]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:56:49.616]        </block>
[00:56:49.616]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:56:49.616]      </control>
[00:56:49.616]      // end if-block "powered_down"
[00:56:49.616]    </control>
[00:56:49.616]    <block atomic="false" info="">
[00:56:49.616]      __var DEBUG_PORT_VAL    = 0;
[00:56:49.616]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:56:49.616]      __var ACCESS_POINT_VAL  = 0;
[00:56:49.617]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:56:49.617]      __ap = 1; 
[00:56:49.617]        // -> [__ap <= 0x00000001]
[00:56:49.617]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:56:49.619]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:56:49.619]      __ap = 4;
[00:56:49.619]        // -> [__ap <= 0x00000004]
[00:56:49.619]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:49.620]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:56:49.620]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:56:49.620]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:49.622]    </block>
[00:56:49.622]    <block atomic="false" info="">
[00:56:49.622]      __var nReset = 0x80;
[00:56:49.622]        // -> [nReset <= 0x00000080]
[00:56:49.622]      __var canReadPins = 0;
[00:56:49.623]        // -> [canReadPins <= 0x00000000]
[00:56:49.623]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:56:49.623]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:56:49.623]        // -> [canReadPins <= 0x00000001]
[00:56:49.623]    </block>
[00:56:49.623]    <control if="" while="1" timeout="200" info="">
[00:56:49.623]      // while "1"  (timeout="200")
[00:56:49.624]      // while-condition  =>  TRUE
[00:56:49.624]      // while "1"  (timeout="200")
[00:56:49.624]      // while-condition  =>  TRUE
[00:56:49.624]      // while "1"  (timeout="200")
[00:56:49.624]      // while-condition  =>  TRUE
[00:56:49.624]      // while "1"  (timeout="200")
[00:56:49.624]      // while-condition  =>  TRUE
[00:56:49.624]      // while "1"  (timeout="200")
[00:56:49.624]      // while-condition  =>  TRUE
[00:56:49.624]      // while "1"  (timeout="200")
[00:56:49.624]      // while-condition  =>  TRUE
[00:56:49.624]      // while "1"  (timeout="200")
[00:56:49.625]      // while-condition  =>  TRUE
[00:56:49.625]      // while "1"  (timeout="200")
[00:56:49.625]      // while-condition  =>  TRUE
[00:56:49.625]      // while "1"  (timeout="200")
[00:56:49.625]      // while-condition  =>  TRUE
[00:56:49.625]      // while "1"  (timeout="200")
[00:56:49.625]      // while-condition  =>  TRUE
[00:56:49.625]      // while "1"  (timeout="200")
[00:56:49.625]      // while-condition  =>  TRUE
[00:56:49.625]      // while "1"  (timeout="200")
[00:56:49.625]      // while-condition  =>  TRUE
[00:56:49.626]      // while "1"  (timeout="200")
[00:56:49.626]      // while-condition  =>  TRUE
[00:56:49.626]      // while "1"  (timeout="200")
[00:56:49.626]      // while-condition  =>  TRUE
[00:56:49.626]      // while "1"  (timeout="200")
[00:56:49.626]      // while-condition  =>  TRUE
[00:56:49.626]      // while "1"  (timeout="200")
[00:56:49.626]      // while-condition  =>  TRUE
[00:56:49.626]      // while "1"  (timeout="200")
[00:56:49.626]      // while-condition  =>  TRUE
[00:56:49.626]      // while "1"  (timeout="200")
[00:56:49.627]      // while-condition  =>  TRUE
[00:56:49.627]      // while "1"  (timeout="200")
[00:56:49.627]      // while-condition  =>  TRUE
[00:56:49.627]      // while "1"  (timeout="200")
[00:56:49.627]      // while-condition  =>  TRUE
[00:56:49.628]      // while "1"  (timeout="200")
[00:56:49.628]      // while-condition  =>  TRUE
[00:56:49.628]      // while "1"  (timeout="200")
[00:56:49.628]      // while-condition  =>  TRUE
[00:56:49.628]      // while "1"  (timeout="200")
[00:56:49.628]      // while-condition  =>  TRUE
[00:56:49.628]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.629]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.629]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.629]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.629]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.629]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.629]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.629]      // while "1"  (timeout="200")
[00:56:49.629]      // while-condition  =>  TRUE
[00:56:49.630]      // while "1"  (timeout="200")
[00:56:49.630]      // while-condition  =>  TRUE
[00:56:49.630]      // while "1"  (timeout="200")
[00:56:49.630]      // while-condition  =>  TRUE
[00:56:49.630]      // while "1"  (timeout="200")
[00:56:49.630]      // while-condition  =>  TRUE
[00:56:49.630]      // while "1"  (timeout="200")
[00:56:49.630]      // while-condition  =>  TRUE
[00:56:49.630]      // while "1"  (timeout="200")
[00:56:49.630]      // while-condition  =>  TRUE
[00:56:49.631]      // while "1"  (timeout="200")
[00:56:49.631]      // while  =>  TIMEOUT
[00:56:49.631]      // end while "1"
[00:56:49.631]    </control>
[00:56:49.631]    <control if="canReadPins" while="" timeout="0" info="">
[00:56:49.631]      // if-block "canReadPins"
[00:56:49.631]        // =>  TRUE
[00:56:49.631]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:56:49.631]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:56:49.632]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:56:49.632]        // while-condition  =>  FALSE
[00:56:49.632]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:56:49.632]      </control>
[00:56:49.632]      // end if-block "canReadPins"
[00:56:49.632]    </control>
[00:56:49.632]    <control if="!canReadPins" while="" timeout="0" info="">
[00:56:49.632]      // if-block "!canReadPins"
[00:56:49.632]        // =>  FALSE
[00:56:49.632]      // skip if-block "!canReadPins"
[00:56:49.632]    </control>
[00:56:49.633]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:56:49.633]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:49.633]        // =>  TRUE
[00:56:49.633]      <block atomic="false" info="">
[00:56:49.633]        WriteAP(0x00, 0x190008);
[00:56:49.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:49.634]        WriteAP(0xF0, 0x01);
[00:56:49.635]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:49.635]      </block>
[00:56:49.635]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:49.635]    </control>
[00:56:49.635]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:56:49.635]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:49.635]        // =>  FALSE
[00:56:49.635]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:49.635]    </control>
[00:56:49.635]    <block atomic="false" info="">
[00:56:49.635]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:49.637]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:56:49.637]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:56:49.637]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:49.639]      __ap = 0; //lets make sure we reset the access point selection
[00:56:49.639]        // -> [__ap <= 0x00000000]
[00:56:49.639]    </block>
[00:56:49.639]  </sequence>
[00:56:49.639]  
[00:56:49.645]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:56:49.645]  
[00:56:49.645]  <debugvars>
[00:56:49.645]    // Pre-defined
[00:56:49.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:49.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:49.646]    __dp=0x00000000
[00:56:49.646]    __ap=0x00000000
[00:56:49.646]    __traceout=0x00000000      (Trace Disabled)
[00:56:49.646]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:49.646]    __FlashAddr=0x00000000
[00:56:49.646]    __FlashLen=0x00000000
[00:56:49.646]    __FlashArg=0x00000000
[00:56:49.646]    __FlashOp=0x00000000
[00:56:49.646]    __Result=0x00000000
[00:56:49.647]  </debugvars>
[00:56:49.647]  
[00:56:49.647]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:56:49.647]    <block atomic="false" info="">
[00:56:49.647]      __var deviceID = 0;
[00:56:49.648]        // -> [deviceID <= 0x00000000]
[00:56:49.648]      __var version = 0;
[00:56:49.648]        // -> [version <= 0x00000000]
[00:56:49.648]      __var partNum = 0;
[00:56:49.648]        // -> [partNum <= 0x00000000]
[00:56:49.648]      __var manuf = 0;
[00:56:49.648]        // -> [manuf <= 0x00000000]
[00:56:49.648]      __var isMSPM0G1X0X_G3X0X = 0;
[00:56:49.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:56:49.649]      __var isProduction = 0;
[00:56:49.649]        // -> [isProduction <= 0x00000000]
[00:56:49.649]      __var continueId = 0;
[00:56:49.649]        // -> [continueId <= 0x00000000]
[00:56:49.649]      deviceID =   Read32(0x41C40004);
[00:56:49.650]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:56:49.650]        // -> [deviceID <= 0x2BB8802F]
[00:56:49.650]      version = deviceID >> 28;
[00:56:49.650]        // -> [version <= 0x00000002]
[00:56:49.650]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:56:49.651]        // -> [partNum <= 0x0000BB88]
[00:56:49.651]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:56:49.651]        // -> [manuf <= 0x00000017]
[00:56:49.651]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:56:49.651]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:56:49.651]      isProduction = (version > 0);
[00:56:49.651]        // -> [isProduction <= 0x00000001]
[00:56:49.651]    </block>
[00:56:49.651]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:56:49.651]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:56:49.651]        // =>  FALSE
[00:56:49.652]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:56:49.652]    </control>
[00:56:49.652]    <control if="continueId == 4" while="" timeout="0" info="">
[00:56:49.652]      // if-block "continueId == 4"
[00:56:49.652]        // =>  FALSE
[00:56:49.652]      // skip if-block "continueId == 4"
[00:56:49.652]    </control>
[00:56:49.652]    <control if="!isProduction" while="" timeout="0" info="">
[00:56:49.652]      // if-block "!isProduction"
[00:56:49.652]        // =>  FALSE
[00:56:49.652]      // skip if-block "!isProduction"
[00:56:49.653]    </control>
[00:56:49.653]  </sequence>
[00:56:49.653]  
[00:57:30.598]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:57:30.598]  
[00:57:30.599]  <debugvars>
[00:57:30.599]    // Pre-defined
[00:57:30.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:30.600]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:30.600]    __dp=0x00000000
[00:57:30.600]    __ap=0x00000000
[00:57:30.600]    __traceout=0x00000000      (Trace Disabled)
[00:57:30.600]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:30.600]    __FlashAddr=0x00000000
[00:57:30.600]    __FlashLen=0x00000000
[00:57:30.600]    __FlashArg=0x00000000
[00:57:30.600]    __FlashOp=0x00000000
[00:57:30.600]    __Result=0x00000000
[00:57:30.600]  </debugvars>
[00:57:30.601]  
[00:57:30.601]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:57:30.601]    <block atomic="false" info="">
[00:57:30.601]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:57:30.601]        // -> [isSWJ <= 0x00000001]
[00:57:30.601]      __var hasDormant = __protocol & 0x00020000;
[00:57:30.601]        // -> [hasDormant <= 0x00000000]
[00:57:30.601]      __var protType   = __protocol & 0x0000FFFF;
[00:57:30.601]        // -> [protType <= 0x00000002]
[00:57:30.601]    </block>
[00:57:30.601]    <control if="protType == 1" while="" timeout="0" info="">
[00:57:30.602]      // if-block "protType == 1"
[00:57:30.602]        // =>  FALSE
[00:57:30.602]      // skip if-block "protType == 1"
[00:57:30.602]    </control>
[00:57:30.602]    <control if="protType == 2" while="" timeout="0" info="">
[00:57:30.602]      // if-block "protType == 2"
[00:57:30.602]        // =>  TRUE
[00:57:30.602]      <control if="isSWJ" while="" timeout="0" info="">
[00:57:30.602]        // if-block "isSWJ"
[00:57:30.602]          // =>  TRUE
[00:57:30.602]        <control if="hasDormant" while="" timeout="0" info="">
[00:57:30.603]          // if-block "hasDormant"
[00:57:30.603]            // =>  FALSE
[00:57:30.603]          // skip if-block "hasDormant"
[00:57:30.603]        </control>
[00:57:30.603]        <control if="!hasDormant" while="" timeout="0" info="">
[00:57:30.603]          // if-block "!hasDormant"
[00:57:30.603]            // =>  TRUE
[00:57:30.603]          <block atomic="false" info="">
[00:57:30.604]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:57:30.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:30.604]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:57:30.604]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:57:30.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:57:30.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:30.605]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:57:30.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:57:30.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:57:30.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:30.607]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:57:30.607]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:57:30.607]          </block>
[00:57:30.607]          // end if-block "!hasDormant"
[00:57:30.607]        </control>
[00:57:30.607]        // end if-block "isSWJ"
[00:57:30.607]      </control>
[00:57:30.607]      <control if="!isSWJ" while="" timeout="0" info="">
[00:57:30.608]        // if-block "!isSWJ"
[00:57:30.608]          // =>  FALSE
[00:57:30.608]        // skip if-block "!isSWJ"
[00:57:30.608]      </control>
[00:57:30.608]      <block atomic="false" info="">
[00:57:30.608]        ReadDP(0x0);
[00:57:30.608]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:57:30.609]      </block>
[00:57:30.609]      // end if-block "protType == 2"
[00:57:30.609]    </control>
[00:57:30.609]  </sequence>
[00:57:30.609]  
[00:57:30.609]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:57:30.609]  
[00:57:30.609]  <debugvars>
[00:57:30.609]    // Pre-defined
[00:57:30.609]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:30.610]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:30.610]    __dp=0x00000000
[00:57:30.610]    __ap=0x00000000
[00:57:30.610]    __traceout=0x00000000      (Trace Disabled)
[00:57:30.610]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:30.610]    __FlashAddr=0x00000000
[00:57:30.610]    __FlashLen=0x00000000
[00:57:30.610]    __FlashArg=0x00000000
[00:57:30.610]    __FlashOp=0x00000000
[00:57:30.610]    __Result=0x00000000
[00:57:30.610]  </debugvars>
[00:57:30.610]  
[00:57:30.611]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:57:30.611]    <block atomic="false" info="">
[00:57:30.611]      __var SW_DP_ABORT       = 0x0;
[00:57:30.611]        // -> [SW_DP_ABORT <= 0x00000000]
[00:57:30.611]      __var DP_CTRL_STAT      = 0x4;
[00:57:30.611]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:57:30.611]      __var DP_SELECT         = 0x8;
[00:57:30.611]        // -> [DP_SELECT <= 0x00000008]
[00:57:30.611]      __var powered_down      = 0;
[00:57:30.611]        // -> [powered_down <= 0x00000000]
[00:57:30.611]      WriteDP(DP_SELECT, 0x00000000);
[00:57:30.612]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:57:30.612]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:57:30.613]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:57:30.613]        // -> [powered_down <= 0x00000001]
[00:57:30.613]    </block>
[00:57:30.613]    <control if="powered_down" while="" timeout="0" info="">
[00:57:30.613]      // if-block "powered_down"
[00:57:30.613]        // =>  TRUE
[00:57:30.613]      <block atomic="false" info="">
[00:57:30.613]        Message(0, "Debug/System power-up request sent");
[00:57:30.615]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:57:30.615]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:57:30.615]      </block>
[00:57:30.615]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:57:30.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:57:30.617]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:57:30.617]        // while-condition  =>  FALSE
[00:57:30.617]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:57:30.617]      </control>
[00:57:30.617]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:57:30.617]        // if-block "(__protocol & 0xFFFF) == 1"
[00:57:30.618]          // =>  FALSE
[00:57:30.618]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:57:30.618]      </control>
[00:57:30.618]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:57:30.618]        // if-block "(__protocol & 0xFFFF) == 2"
[00:57:30.618]          // =>  TRUE
[00:57:30.618]        <block atomic="false" info="">
[00:57:30.618]          Message(0, "executing SWD power up");
[00:57:30.620]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:57:30.621]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:57:30.621]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:57:30.622]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:57:30.622]        </block>
[00:57:30.622]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:57:30.622]      </control>
[00:57:30.622]      // end if-block "powered_down"
[00:57:30.622]    </control>
[00:57:30.622]    <block atomic="false" info="">
[00:57:30.623]      __var DEBUG_PORT_VAL    = 0;
[00:57:30.623]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:57:30.623]      __var ACCESS_POINT_VAL  = 0;
[00:57:30.623]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:57:30.623]      __ap = 1; 
[00:57:30.623]        // -> [__ap <= 0x00000001]
[00:57:30.623]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:57:30.624]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:57:30.624]      __ap = 4;
[00:57:30.625]        // -> [__ap <= 0x00000004]
[00:57:30.625]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:30.627]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:57:30.627]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:57:30.627]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:30.628]    </block>
[00:57:30.629]    <block atomic="false" info="">
[00:57:30.629]      __var nReset = 0x80;
[00:57:30.629]        // -> [nReset <= 0x00000080]
[00:57:30.629]      __var canReadPins = 0;
[00:57:30.629]        // -> [canReadPins <= 0x00000000]
[00:57:30.629]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:57:30.629]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:57:30.630]        // -> [canReadPins <= 0x00000001]
[00:57:30.630]    </block>
[00:57:30.630]    <control if="" while="1" timeout="200" info="">
[00:57:30.630]      // while "1"  (timeout="200")
[00:57:30.630]      // while-condition  =>  TRUE
[00:57:30.630]      // while "1"  (timeout="200")
[00:57:30.630]      // while-condition  =>  TRUE
[00:57:30.630]      // while "1"  (timeout="200")
[00:57:30.631]      // while-condition  =>  TRUE
[00:57:30.631]      // while "1"  (timeout="200")
[00:57:30.631]      // while  =>  TIMEOUT
[00:57:30.631]      // end while "1"
[00:57:30.631]    </control>
[00:57:30.631]    <control if="canReadPins" while="" timeout="0" info="">
[00:57:30.631]      // if-block "canReadPins"
[00:57:30.631]        // =>  TRUE
[00:57:30.631]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:57:30.631]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:57:30.632]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:57:30.632]        // while-condition  =>  FALSE
[00:57:30.632]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:57:30.632]      </control>
[00:57:30.632]      // end if-block "canReadPins"
[00:57:30.633]    </control>
[00:57:30.633]    <control if="!canReadPins" while="" timeout="0" info="">
[00:57:30.633]      // if-block "!canReadPins"
[00:57:30.633]        // =>  FALSE
[00:57:30.633]      // skip if-block "!canReadPins"
[00:57:30.633]    </control>
[00:57:30.633]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:57:30.633]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:30.633]        // =>  TRUE
[00:57:30.633]      <block atomic="false" info="">
[00:57:30.633]        WriteAP(0x00, 0x190008);
[00:57:30.635]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:30.635]        WriteAP(0xF0, 0x01);
[00:57:30.636]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:30.636]      </block>
[00:57:30.636]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:30.636]    </control>
[00:57:30.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:57:30.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:30.636]        // =>  FALSE
[00:57:30.637]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:30.637]    </control>
[00:57:30.637]    <block atomic="false" info="">
[00:57:30.637]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:30.638]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:57:30.638]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:57:30.638]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:30.640]      __ap = 0; //lets make sure we reset the access point selection
[00:57:30.640]        // -> [__ap <= 0x00000000]
[00:57:30.640]    </block>
[00:57:30.640]  </sequence>
[00:57:30.640]  
[00:57:30.647]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:57:30.647]  
[00:57:30.647]  <debugvars>
[00:57:30.647]    // Pre-defined
[00:57:30.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:30.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:30.647]    __dp=0x00000000
[00:57:30.648]    __ap=0x00000000
[00:57:30.648]    __traceout=0x00000000      (Trace Disabled)
[00:57:30.648]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:30.648]    __FlashAddr=0x00000000
[00:57:30.648]    __FlashLen=0x00000000
[00:57:30.648]    __FlashArg=0x00000000
[00:57:30.648]    __FlashOp=0x00000000
[00:57:30.648]    __Result=0x00000000
[00:57:30.648]  </debugvars>
[00:57:30.649]  
[00:57:30.649]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:57:30.649]    <block atomic="false" info="">
[00:57:30.649]      __var deviceID = 0;
[00:57:30.649]        // -> [deviceID <= 0x00000000]
[00:57:30.649]      __var version = 0;
[00:57:30.649]        // -> [version <= 0x00000000]
[00:57:30.649]      __var partNum = 0;
[00:57:30.649]        // -> [partNum <= 0x00000000]
[00:57:30.649]      __var manuf = 0;
[00:57:30.649]        // -> [manuf <= 0x00000000]
[00:57:30.650]      __var isMSPM0G1X0X_G3X0X = 0;
[00:57:30.650]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:57:30.650]      __var isProduction = 0;
[00:57:30.650]        // -> [isProduction <= 0x00000000]
[00:57:30.650]      __var continueId = 0;
[00:57:30.650]        // -> [continueId <= 0x00000000]
[00:57:30.650]      deviceID =   Read32(0x41C40004);
[00:57:30.652]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:57:30.652]        // -> [deviceID <= 0x2BB8802F]
[00:57:30.653]      version = deviceID >> 28;
[00:57:30.653]        // -> [version <= 0x00000002]
[00:57:30.653]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:57:30.653]        // -> [partNum <= 0x0000BB88]
[00:57:30.653]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:57:30.653]        // -> [manuf <= 0x00000017]
[00:57:30.653]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:57:30.653]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:57:30.653]      isProduction = (version > 0);
[00:57:30.653]        // -> [isProduction <= 0x00000001]
[00:57:30.653]    </block>
[00:57:30.654]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:57:30.654]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:57:30.654]        // =>  FALSE
[00:57:30.654]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:57:30.654]    </control>
[00:57:30.654]    <control if="continueId == 4" while="" timeout="0" info="">
[00:57:30.654]      // if-block "continueId == 4"
[00:57:30.654]        // =>  FALSE
[00:57:30.654]      // skip if-block "continueId == 4"
[00:57:30.654]    </control>
[00:57:30.655]    <control if="!isProduction" while="" timeout="0" info="">
[00:57:30.655]      // if-block "!isProduction"
[00:57:30.655]        // =>  FALSE
[00:57:30.655]      // skip if-block "!isProduction"
[00:57:30.655]    </control>
[00:57:30.655]  </sequence>
[00:57:30.655]  
[00:58:13.905]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:58:13.905]  
[00:58:13.905]  <debugvars>
[00:58:13.905]    // Pre-defined
[00:58:13.905]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:13.906]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:13.906]    __dp=0x00000000
[00:58:13.906]    __ap=0x00000000
[00:58:13.906]    __traceout=0x00000000      (Trace Disabled)
[00:58:13.906]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:13.906]    __FlashAddr=0x00000000
[00:58:13.906]    __FlashLen=0x00000000
[00:58:13.906]    __FlashArg=0x00000000
[00:58:13.906]    __FlashOp=0x00000000
[00:58:13.906]    __Result=0x00000000
[00:58:13.906]  </debugvars>
[00:58:13.907]  
[00:58:13.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:58:13.907]    <block atomic="false" info="">
[00:58:13.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:58:13.907]        // -> [isSWJ <= 0x00000001]
[00:58:13.907]      __var hasDormant = __protocol & 0x00020000;
[00:58:13.907]        // -> [hasDormant <= 0x00000000]
[00:58:13.907]      __var protType   = __protocol & 0x0000FFFF;
[00:58:13.907]        // -> [protType <= 0x00000002]
[00:58:13.907]    </block>
[00:58:13.907]    <control if="protType == 1" while="" timeout="0" info="">
[00:58:13.907]      // if-block "protType == 1"
[00:58:13.908]        // =>  FALSE
[00:58:13.908]      // skip if-block "protType == 1"
[00:58:13.908]    </control>
[00:58:13.908]    <control if="protType == 2" while="" timeout="0" info="">
[00:58:13.908]      // if-block "protType == 2"
[00:58:13.908]        // =>  TRUE
[00:58:13.908]      <control if="isSWJ" while="" timeout="0" info="">
[00:58:13.908]        // if-block "isSWJ"
[00:58:13.908]          // =>  TRUE
[00:58:13.908]        <control if="hasDormant" while="" timeout="0" info="">
[00:58:13.908]          // if-block "hasDormant"
[00:58:13.908]            // =>  FALSE
[00:58:13.908]          // skip if-block "hasDormant"
[00:58:13.908]        </control>
[00:58:13.908]        <control if="!hasDormant" while="" timeout="0" info="">
[00:58:13.909]          // if-block "!hasDormant"
[00:58:13.909]            // =>  TRUE
[00:58:13.909]          <block atomic="false" info="">
[00:58:13.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:58:13.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:13.909]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:58:13.910]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:58:13.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:58:13.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:13.910]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:58:13.910]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:58:13.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:58:13.911]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:13.911]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:58:13.911]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:58:13.911]          </block>
[00:58:13.912]          // end if-block "!hasDormant"
[00:58:13.912]        </control>
[00:58:13.912]        // end if-block "isSWJ"
[00:58:13.912]      </control>
[00:58:13.912]      <control if="!isSWJ" while="" timeout="0" info="">
[00:58:13.912]        // if-block "!isSWJ"
[00:58:13.912]          // =>  FALSE
[00:58:13.912]        // skip if-block "!isSWJ"
[00:58:13.912]      </control>
[00:58:13.912]      <block atomic="false" info="">
[00:58:13.912]        ReadDP(0x0);
[00:58:13.913]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:58:13.913]      </block>
[00:58:13.913]      // end if-block "protType == 2"
[00:58:13.913]    </control>
[00:58:13.913]  </sequence>
[00:58:13.913]  
[00:58:13.914]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:58:13.914]  
[00:58:13.914]  <debugvars>
[00:58:13.914]    // Pre-defined
[00:58:13.914]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:13.914]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:13.914]    __dp=0x00000000
[00:58:13.914]    __ap=0x00000000
[00:58:13.916]    __traceout=0x00000000      (Trace Disabled)
[00:58:13.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:13.916]    __FlashAddr=0x00000000
[00:58:13.916]    __FlashLen=0x00000000
[00:58:13.916]    __FlashArg=0x00000000
[00:58:13.916]    __FlashOp=0x00000000
[00:58:13.916]    __Result=0x00000000
[00:58:13.916]  </debugvars>
[00:58:13.916]  
[00:58:13.916]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:58:13.916]    <block atomic="false" info="">
[00:58:13.917]      __var SW_DP_ABORT       = 0x0;
[00:58:13.917]        // -> [SW_DP_ABORT <= 0x00000000]
[00:58:13.917]      __var DP_CTRL_STAT      = 0x4;
[00:58:13.917]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:58:13.917]      __var DP_SELECT         = 0x8;
[00:58:13.917]        // -> [DP_SELECT <= 0x00000008]
[00:58:13.917]      __var powered_down      = 0;
[00:58:13.917]        // -> [powered_down <= 0x00000000]
[00:58:13.917]      WriteDP(DP_SELECT, 0x00000000);
[00:58:13.918]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:58:13.918]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:58:13.918]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:58:13.919]        // -> [powered_down <= 0x00000001]
[00:58:13.919]    </block>
[00:58:13.919]    <control if="powered_down" while="" timeout="0" info="">
[00:58:13.919]      // if-block "powered_down"
[00:58:13.919]        // =>  TRUE
[00:58:13.919]      <block atomic="false" info="">
[00:58:13.919]        Message(0, "Debug/System power-up request sent");
[00:58:13.921]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:58:13.921]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:58:13.921]      </block>
[00:58:13.921]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:58:13.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:58:13.922]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:58:13.922]        // while-condition  =>  FALSE
[00:58:13.922]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:58:13.922]      </control>
[00:58:13.922]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:58:13.922]        // if-block "(__protocol & 0xFFFF) == 1"
[00:58:13.922]          // =>  FALSE
[00:58:13.922]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:58:13.922]      </control>
[00:58:13.922]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:58:13.923]        // if-block "(__protocol & 0xFFFF) == 2"
[00:58:13.923]          // =>  TRUE
[00:58:13.923]        <block atomic="false" info="">
[00:58:13.923]          Message(0, "executing SWD power up");
[00:58:13.924]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:58:13.925]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:58:13.925]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:58:13.926]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:58:13.926]        </block>
[00:58:13.926]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:58:13.926]      </control>
[00:58:13.926]      // end if-block "powered_down"
[00:58:13.926]    </control>
[00:58:13.926]    <block atomic="false" info="">
[00:58:13.926]      __var DEBUG_PORT_VAL    = 0;
[00:58:13.926]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:58:13.926]      __var ACCESS_POINT_VAL  = 0;
[00:58:13.927]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:58:13.927]      __ap = 1; 
[00:58:13.927]        // -> [__ap <= 0x00000001]
[00:58:13.927]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:58:13.928]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:58:13.928]      __ap = 4;
[00:58:13.928]        // -> [__ap <= 0x00000004]
[00:58:13.928]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:13.929]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:58:13.929]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:58:13.929]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:13.932]    </block>
[00:58:13.932]    <block atomic="false" info="">
[00:58:13.932]      __var nReset = 0x80;
[00:58:13.932]        // -> [nReset <= 0x00000080]
[00:58:13.933]      __var canReadPins = 0;
[00:58:13.933]        // -> [canReadPins <= 0x00000000]
[00:58:13.933]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:58:13.933]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:58:13.933]        // -> [canReadPins <= 0x00000001]
[00:58:13.933]    </block>
[00:58:13.933]    <control if="" while="1" timeout="200" info="">
[00:58:13.933]      // while "1"  (timeout="200")
[00:58:13.934]      // while-condition  =>  TRUE
[00:58:13.934]      // while "1"  (timeout="200")
[00:58:13.934]      // while-condition  =>  TRUE
[00:58:13.934]      // while "1"  (timeout="200")
[00:58:13.934]      // while-condition  =>  TRUE
[00:58:13.934]      // while "1"  (timeout="200")
[00:58:13.934]      // while-condition  =>  TRUE
[00:58:13.934]      // while "1"  (timeout="200")
[00:58:13.934]      // while-condition  =>  TRUE
[00:58:13.934]      // while "1"  (timeout="200")
[00:58:13.935]      // while-condition  =>  TRUE
[00:58:13.935]      // while "1"  (timeout="200")
[00:58:13.935]      // while-condition  =>  TRUE
[00:58:13.935]      // while "1"  (timeout="200")
[00:58:13.935]      // while-condition  =>  TRUE
[00:58:13.935]      // while "1"  (timeout="200")
[00:58:13.935]      // while-condition  =>  TRUE
[00:58:13.935]      // while "1"  (timeout="200")
[00:58:13.935]      // while-condition  =>  TRUE
[00:58:13.935]      // while "1"  (timeout="200")
[00:58:13.935]      // while-condition  =>  TRUE
[00:58:13.936]      // while "1"  (timeout="200")
[00:58:13.936]      // while-condition  =>  TRUE
[00:58:13.936]      // while "1"  (timeout="200")
[00:58:13.936]      // while-condition  =>  TRUE
[00:58:13.936]      // while "1"  (timeout="200")
[00:58:13.936]      // while-condition  =>  TRUE
[00:58:13.936]      // while "1"  (timeout="200")
[00:58:13.936]      // while-condition  =>  TRUE
[00:58:13.936]      // while "1"  (timeout="200")
[00:58:13.936]      // while-condition  =>  TRUE
[00:58:13.937]      // while "1"  (timeout="200")
[00:58:13.937]      // while-condition  =>  TRUE
[00:58:13.937]      // while "1"  (timeout="200")
[00:58:13.937]      // while-condition  =>  TRUE
[00:58:13.937]      // while "1"  (timeout="200")
[00:58:13.937]      // while-condition  =>  TRUE
[00:58:13.937]      // while "1"  (timeout="200")
[00:58:13.937]      // while-condition  =>  TRUE
[00:58:13.937]      // while "1"  (timeout="200")
[00:58:13.937]      // while-condition  =>  TRUE
[00:58:13.937]      // while "1"  (timeout="200")
[00:58:13.938]      // while-condition  =>  TRUE
[00:58:13.938]      // while "1"  (timeout="200")
[00:58:13.938]      // while-condition  =>  TRUE
[00:58:13.938]      // while "1"  (timeout="200")
[00:58:13.938]      // while-condition  =>  TRUE
[00:58:13.938]      // while "1"  (timeout="200")
[00:58:13.938]      // while-condition  =>  TRUE
[00:58:13.938]      // while "1"  (timeout="200")
[00:58:13.938]      // while-condition  =>  TRUE
[00:58:13.938]      // while "1"  (timeout="200")
[00:58:13.939]      // while-condition  =>  TRUE
[00:58:13.939]      // while "1"  (timeout="200")
[00:58:13.939]      // while-condition  =>  TRUE
[00:58:13.939]      // while "1"  (timeout="200")
[00:58:13.939]      // while-condition  =>  TRUE
[00:58:13.939]      // while "1"  (timeout="200")
[00:58:13.939]      // while-condition  =>  TRUE
[00:58:13.939]      // while "1"  (timeout="200")
[00:58:13.939]      // while-condition  =>  TRUE
[00:58:13.939]      // while "1"  (timeout="200")
[00:58:13.939]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.940]      // while "1"  (timeout="200")
[00:58:13.940]      // while-condition  =>  TRUE
[00:58:13.942]      // while "1"  (timeout="200")
[00:58:13.942]      // while-condition  =>  TRUE
[00:58:13.942]      // while "1"  (timeout="200")
[00:58:13.942]      // while-condition  =>  TRUE
[00:58:13.942]      // while "1"  (timeout="200")
[00:58:13.942]      // while-condition  =>  TRUE
[00:58:13.942]      // while "1"  (timeout="200")
[00:58:13.942]      // while-condition  =>  TRUE
[00:58:13.942]      // while "1"  (timeout="200")
[00:58:13.942]      // while-condition  =>  TRUE
[00:58:13.942]      // while "1"  (timeout="200")
[00:58:13.943]      // while-condition  =>  TRUE
[00:58:13.943]      // while "1"  (timeout="200")
[00:58:13.943]      // while-condition  =>  TRUE
[00:58:13.943]      // while "1"  (timeout="200")
[00:58:13.943]      // while-condition  =>  TRUE
[00:58:13.943]      // while "1"  (timeout="200")
[00:58:13.943]      // while-condition  =>  TRUE
[00:58:13.943]      // while "1"  (timeout="200")
[00:58:13.943]      // while-condition  =>  TRUE
[00:58:13.943]      // while "1"  (timeout="200")
[00:58:13.944]      // while-condition  =>  TRUE
[00:58:13.944]      // while "1"  (timeout="200")
[00:58:13.944]      // while  =>  TIMEOUT
[00:58:13.944]      // end while "1"
[00:58:13.944]    </control>
[00:58:13.944]    <control if="canReadPins" while="" timeout="0" info="">
[00:58:13.944]      // if-block "canReadPins"
[00:58:13.944]        // =>  TRUE
[00:58:13.944]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:58:13.944]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:58:13.945]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:58:13.945]        // while-condition  =>  FALSE
[00:58:13.945]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:58:13.945]      </control>
[00:58:13.945]      // end if-block "canReadPins"
[00:58:13.945]    </control>
[00:58:13.946]    <control if="!canReadPins" while="" timeout="0" info="">
[00:58:13.946]      // if-block "!canReadPins"
[00:58:13.946]        // =>  FALSE
[00:58:13.946]      // skip if-block "!canReadPins"
[00:58:13.946]    </control>
[00:58:13.946]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:58:13.946]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:13.946]        // =>  TRUE
[00:58:13.946]      <block atomic="false" info="">
[00:58:13.946]        WriteAP(0x00, 0x190008);
[00:58:13.947]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:13.947]        WriteAP(0xF0, 0x01);
[00:58:13.948]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:13.948]      </block>
[00:58:13.948]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:13.948]    </control>
[00:58:13.948]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:58:13.948]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:13.948]        // =>  FALSE
[00:58:13.948]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:13.948]    </control>
[00:58:13.948]    <block atomic="false" info="">
[00:58:13.949]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:13.951]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:58:13.951]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:58:13.951]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:13.952]      __ap = 0; //lets make sure we reset the access point selection
[00:58:13.953]        // -> [__ap <= 0x00000000]
[00:58:13.953]    </block>
[00:58:13.953]  </sequence>
[00:58:13.953]  
[00:58:13.959]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:58:13.959]  
[00:58:13.959]  <debugvars>
[00:58:13.959]    // Pre-defined
[00:58:13.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:13.959]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:13.959]    __dp=0x00000000
[00:58:13.959]    __ap=0x00000000
[00:58:13.960]    __traceout=0x00000000      (Trace Disabled)
[00:58:13.960]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:13.960]    __FlashAddr=0x00000000
[00:58:13.960]    __FlashLen=0x00000000
[00:58:13.960]    __FlashArg=0x00000000
[00:58:13.960]    __FlashOp=0x00000000
[00:58:13.960]    __Result=0x00000000
[00:58:13.960]  </debugvars>
[00:58:13.960]  
[00:58:13.960]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:58:13.961]    <block atomic="false" info="">
[00:58:13.961]      __var deviceID = 0;
[00:58:13.961]        // -> [deviceID <= 0x00000000]
[00:58:13.961]      __var version = 0;
[00:58:13.961]        // -> [version <= 0x00000000]
[00:58:13.961]      __var partNum = 0;
[00:58:13.961]        // -> [partNum <= 0x00000000]
[00:58:13.961]      __var manuf = 0;
[00:58:13.962]        // -> [manuf <= 0x00000000]
[00:58:13.962]      __var isMSPM0G1X0X_G3X0X = 0;
[00:58:13.962]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:58:13.962]      __var isProduction = 0;
[00:58:13.962]        // -> [isProduction <= 0x00000000]
[00:58:13.962]      __var continueId = 0;
[00:58:13.962]        // -> [continueId <= 0x00000000]
[00:58:13.962]      deviceID =   Read32(0x41C40004);
[00:58:13.964]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:58:13.964]        // -> [deviceID <= 0x2BB8802F]
[00:58:13.964]      version = deviceID >> 28;
[00:58:13.964]        // -> [version <= 0x00000002]
[00:58:13.964]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:58:13.964]        // -> [partNum <= 0x0000BB88]
[00:58:13.964]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:58:13.964]        // -> [manuf <= 0x00000017]
[00:58:13.964]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:58:13.965]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:58:13.965]      isProduction = (version > 0);
[00:58:13.965]        // -> [isProduction <= 0x00000001]
[00:58:13.965]    </block>
[00:58:13.965]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:58:13.965]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:58:13.965]        // =>  FALSE
[00:58:13.965]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:58:13.965]    </control>
[00:58:13.965]    <control if="continueId == 4" while="" timeout="0" info="">
[00:58:13.965]      // if-block "continueId == 4"
[00:58:13.966]        // =>  FALSE
[00:58:13.966]      // skip if-block "continueId == 4"
[00:58:13.966]    </control>
[00:58:13.966]    <control if="!isProduction" while="" timeout="0" info="">
[00:58:13.966]      // if-block "!isProduction"
[00:58:13.966]        // =>  FALSE
[00:58:13.966]      // skip if-block "!isProduction"
[00:58:13.966]    </control>
[00:58:13.966]  </sequence>
[00:58:13.966]  
[00:59:11.363]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:59:11.363]  
[00:59:11.363]  <debugvars>
[00:59:11.364]    // Pre-defined
[00:59:11.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:59:11.364]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:59:11.364]    __dp=0x00000000
[00:59:11.364]    __ap=0x00000000
[00:59:11.364]    __traceout=0x00000000      (Trace Disabled)
[00:59:11.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:59:11.364]    __FlashAddr=0x00000000
[00:59:11.364]    __FlashLen=0x00000000
[00:59:11.364]    __FlashArg=0x00000000
[00:59:11.364]    __FlashOp=0x00000000
[00:59:11.365]    __Result=0x00000000
[00:59:11.365]  </debugvars>
[00:59:11.365]  
[00:59:11.365]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:59:11.365]    <block atomic="false" info="">
[00:59:11.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:59:11.365]        // -> [isSWJ <= 0x00000001]
[00:59:11.365]      __var hasDormant = __protocol & 0x00020000;
[00:59:11.365]        // -> [hasDormant <= 0x00000000]
[00:59:11.365]      __var protType   = __protocol & 0x0000FFFF;
[00:59:11.365]        // -> [protType <= 0x00000002]
[00:59:11.365]    </block>
[00:59:11.366]    <control if="protType == 1" while="" timeout="0" info="">
[00:59:11.366]      // if-block "protType == 1"
[00:59:11.367]        // =>  FALSE
[00:59:11.367]      // skip if-block "protType == 1"
[00:59:11.367]    </control>
[00:59:11.367]    <control if="protType == 2" while="" timeout="0" info="">
[00:59:11.367]      // if-block "protType == 2"
[00:59:11.367]        // =>  TRUE
[00:59:11.367]      <control if="isSWJ" while="" timeout="0" info="">
[00:59:11.367]        // if-block "isSWJ"
[00:59:11.367]          // =>  TRUE
[00:59:11.368]        <control if="hasDormant" while="" timeout="0" info="">
[00:59:11.368]          // if-block "hasDormant"
[00:59:11.368]            // =>  FALSE
[00:59:11.368]          // skip if-block "hasDormant"
[00:59:11.368]        </control>
[00:59:11.368]        <control if="!hasDormant" while="" timeout="0" info="">
[00:59:11.368]          // if-block "!hasDormant"
[00:59:11.369]            // =>  TRUE
[00:59:11.369]          <block atomic="false" info="">
[00:59:11.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:59:11.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:59:11.370]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:59:11.370]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:59:11.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:59:11.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:59:11.371]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:59:11.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:59:11.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:59:11.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:59:11.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:59:11.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:59:11.372]          </block>
[00:59:11.372]          // end if-block "!hasDormant"
[00:59:11.372]        </control>
[00:59:11.373]        // end if-block "isSWJ"
[00:59:11.373]      </control>
[00:59:11.373]      <control if="!isSWJ" while="" timeout="0" info="">
[00:59:11.373]        // if-block "!isSWJ"
[00:59:11.373]          // =>  FALSE
[00:59:11.373]        // skip if-block "!isSWJ"
[00:59:11.373]      </control>
[00:59:11.373]      <block atomic="false" info="">
[00:59:11.373]        ReadDP(0x0);
[00:59:11.374]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:59:11.374]      </block>
[00:59:11.374]      // end if-block "protType == 2"
[00:59:11.374]    </control>
[00:59:11.374]  </sequence>
[00:59:11.374]  
[00:59:11.375]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:59:11.375]  
[00:59:11.375]  <debugvars>
[00:59:11.375]    // Pre-defined
[00:59:11.375]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:59:11.375]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:59:11.375]    __dp=0x00000000
[00:59:11.376]    __ap=0x00000000
[00:59:11.376]    __traceout=0x00000000      (Trace Disabled)
[00:59:11.376]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:59:11.376]    __FlashAddr=0x00000000
[00:59:11.376]    __FlashLen=0x00000000
[00:59:11.376]    __FlashArg=0x00000000
[00:59:11.376]    __FlashOp=0x00000000
[00:59:11.376]    __Result=0x00000000
[00:59:11.376]  </debugvars>
[00:59:11.376]  
[00:59:11.376]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:59:11.377]    <block atomic="false" info="">
[00:59:11.377]      __var SW_DP_ABORT       = 0x0;
[00:59:11.377]        // -> [SW_DP_ABORT <= 0x00000000]
[00:59:11.378]      __var DP_CTRL_STAT      = 0x4;
[00:59:11.378]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:59:11.378]      __var DP_SELECT         = 0x8;
[00:59:11.378]        // -> [DP_SELECT <= 0x00000008]
[00:59:11.378]      __var powered_down      = 0;
[00:59:11.378]        // -> [powered_down <= 0x00000000]
[00:59:11.378]      WriteDP(DP_SELECT, 0x00000000);
[00:59:11.378]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:59:11.378]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:59:11.379]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:59:11.379]        // -> [powered_down <= 0x00000001]
[00:59:11.379]    </block>
[00:59:11.379]    <control if="powered_down" while="" timeout="0" info="">
[00:59:11.379]      // if-block "powered_down"
[00:59:11.379]        // =>  TRUE
[00:59:11.379]      <block atomic="false" info="">
[00:59:11.379]        Message(0, "Debug/System power-up request sent");
[00:59:11.381]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:59:11.383]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:59:11.383]      </block>
[00:59:11.383]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:59:11.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:59:11.383]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:59:11.383]        // while-condition  =>  FALSE
[00:59:11.384]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:59:11.384]      </control>
[00:59:11.384]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:59:11.384]        // if-block "(__protocol & 0xFFFF) == 1"
[00:59:11.384]          // =>  FALSE
[00:59:11.384]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:59:11.384]      </control>
[00:59:11.384]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:59:11.384]        // if-block "(__protocol & 0xFFFF) == 2"
[00:59:11.385]          // =>  TRUE
[00:59:11.385]        <block atomic="false" info="">
[00:59:11.385]          Message(0, "executing SWD power up");
[00:59:11.386]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:59:11.388]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:59:11.388]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:59:11.389]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:59:11.389]        </block>
[00:59:11.389]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:59:11.389]      </control>
[00:59:11.389]      // end if-block "powered_down"
[00:59:11.389]    </control>
[00:59:11.389]    <block atomic="false" info="">
[00:59:11.389]      __var DEBUG_PORT_VAL    = 0;
[00:59:11.390]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:59:11.390]      __var ACCESS_POINT_VAL  = 0;
[00:59:11.390]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:59:11.390]      __ap = 1; 
[00:59:11.390]        // -> [__ap <= 0x00000001]
[00:59:11.390]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:59:11.391]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:59:11.391]      __ap = 4;
[00:59:11.392]        // -> [__ap <= 0x00000004]
[00:59:11.392]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:59:11.393]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:59:11.393]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:59:11.393]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:59:11.394]    </block>
[00:59:11.395]    <block atomic="false" info="">
[00:59:11.395]      __var nReset = 0x80;
[00:59:11.395]        // -> [nReset <= 0x00000080]
[00:59:11.395]      __var canReadPins = 0;
[00:59:11.395]        // -> [canReadPins <= 0x00000000]
[00:59:11.395]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:59:11.396]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:59:11.396]        // -> [canReadPins <= 0x00000001]
[00:59:11.396]    </block>
[00:59:11.396]    <control if="" while="1" timeout="200" info="">
[00:59:11.396]      // while "1"  (timeout="200")
[00:59:11.396]      // while-condition  =>  TRUE
[00:59:11.396]      // while "1"  (timeout="200")
[00:59:11.396]      // while-condition  =>  TRUE
[00:59:11.396]      // while "1"  (timeout="200")
[00:59:11.396]      // while-condition  =>  TRUE
[00:59:11.397]      // while "1"  (timeout="200")
[00:59:11.397]      // while  =>  TIMEOUT
[00:59:11.397]      // end while "1"
[00:59:11.397]    </control>
[00:59:11.397]    <control if="canReadPins" while="" timeout="0" info="">
[00:59:11.397]      // if-block "canReadPins"
[00:59:11.398]        // =>  TRUE
[00:59:11.398]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:59:11.398]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:59:11.398]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:59:11.398]        // while-condition  =>  FALSE
[00:59:11.399]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:59:11.399]      </control>
[00:59:11.399]      // end if-block "canReadPins"
[00:59:11.399]    </control>
[00:59:11.399]    <control if="!canReadPins" while="" timeout="0" info="">
[00:59:11.399]      // if-block "!canReadPins"
[00:59:11.399]        // =>  FALSE
[00:59:11.400]      // skip if-block "!canReadPins"
[00:59:11.400]    </control>
[00:59:11.400]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:59:11.400]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:59:11.400]        // =>  TRUE
[00:59:11.400]      <block atomic="false" info="">
[00:59:11.400]        WriteAP(0x00, 0x190008);
[00:59:11.401]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:59:11.401]        WriteAP(0xF0, 0x01);
[00:59:11.402]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:59:11.402]      </block>
[00:59:11.402]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:59:11.402]    </control>
[00:59:11.402]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:59:11.402]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:59:11.403]        // =>  FALSE
[00:59:11.403]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:59:11.403]    </control>
[00:59:11.403]    <block atomic="false" info="">
[00:59:11.403]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:59:11.404]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:59:11.404]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:59:11.404]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:59:11.406]      __ap = 0; //lets make sure we reset the access point selection
[00:59:11.406]        // -> [__ap <= 0x00000000]
[00:59:11.406]    </block>
[00:59:11.406]  </sequence>
[00:59:11.406]  
[00:59:11.412]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:59:11.412]  
[00:59:11.412]  <debugvars>
[00:59:11.412]    // Pre-defined
[00:59:11.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:59:11.412]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:59:11.412]    __dp=0x00000000
[00:59:11.412]    __ap=0x00000000
[00:59:11.413]    __traceout=0x00000000      (Trace Disabled)
[00:59:11.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:59:11.413]    __FlashAddr=0x00000000
[00:59:11.413]    __FlashLen=0x00000000
[00:59:11.413]    __FlashArg=0x00000000
[00:59:11.413]    __FlashOp=0x00000000
[00:59:11.413]    __Result=0x00000000
[00:59:11.413]  </debugvars>
[00:59:11.413]  
[00:59:11.413]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:59:11.413]    <block atomic="false" info="">
[00:59:11.414]      __var deviceID = 0;
[00:59:11.414]        // -> [deviceID <= 0x00000000]
[00:59:11.414]      __var version = 0;
[00:59:11.414]        // -> [version <= 0x00000000]
[00:59:11.414]      __var partNum = 0;
[00:59:11.414]        // -> [partNum <= 0x00000000]
[00:59:11.414]      __var manuf = 0;
[00:59:11.414]        // -> [manuf <= 0x00000000]
[00:59:11.414]      __var isMSPM0G1X0X_G3X0X = 0;
[00:59:11.414]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:59:11.414]      __var isProduction = 0;
[00:59:11.415]        // -> [isProduction <= 0x00000000]
[00:59:11.415]      __var continueId = 0;
[00:59:11.415]        // -> [continueId <= 0x00000000]
[00:59:11.415]      deviceID =   Read32(0x41C40004);
[00:59:11.416]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:59:11.416]        // -> [deviceID <= 0x2BB8802F]
[00:59:11.416]      version = deviceID >> 28;
[00:59:11.417]        // -> [version <= 0x00000002]
[00:59:11.417]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:59:11.417]        // -> [partNum <= 0x0000BB88]
[00:59:11.417]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:59:11.417]        // -> [manuf <= 0x00000017]
[00:59:11.417]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:59:11.417]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:59:11.417]      isProduction = (version > 0);
[00:59:11.417]        // -> [isProduction <= 0x00000001]
[00:59:11.417]    </block>
[00:59:11.417]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:59:11.418]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:59:11.418]        // =>  FALSE
[00:59:11.418]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:59:11.418]    </control>
[00:59:11.418]    <control if="continueId == 4" while="" timeout="0" info="">
[00:59:11.418]      // if-block "continueId == 4"
[00:59:11.418]        // =>  FALSE
[00:59:11.418]      // skip if-block "continueId == 4"
[00:59:11.418]    </control>
[00:59:11.419]    <control if="!isProduction" while="" timeout="0" info="">
[00:59:11.419]      // if-block "!isProduction"
[00:59:11.419]        // =>  FALSE
[00:59:11.419]      // skip if-block "!isProduction"
[00:59:11.419]    </control>
[00:59:11.419]  </sequence>
[00:59:11.419]  
[01:00:22.884]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:00:22.884]  
[01:00:22.893]  <debugvars>
[01:00:22.893]    // Pre-defined
[01:00:22.893]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:22.893]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:22.893]    __dp=0x00000000
[01:00:22.893]    __ap=0x00000000
[01:00:22.893]    __traceout=0x00000000      (Trace Disabled)
[01:00:22.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:22.893]    __FlashAddr=0x00000000
[01:00:22.893]    __FlashLen=0x00000000
[01:00:22.893]    __FlashArg=0x00000000
[01:00:22.894]    __FlashOp=0x00000000
[01:00:22.894]    __Result=0x00000000
[01:00:22.894]  </debugvars>
[01:00:22.894]  
[01:00:22.894]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:00:22.894]    <block atomic="false" info="">
[01:00:22.894]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:00:22.894]        // -> [isSWJ <= 0x00000001]
[01:00:22.894]      __var hasDormant = __protocol & 0x00020000;
[01:00:22.894]        // -> [hasDormant <= 0x00000000]
[01:00:22.895]      __var protType   = __protocol & 0x0000FFFF;
[01:00:22.895]        // -> [protType <= 0x00000002]
[01:00:22.895]    </block>
[01:00:22.895]    <control if="protType == 1" while="" timeout="0" info="">
[01:00:22.895]      // if-block "protType == 1"
[01:00:22.895]        // =>  FALSE
[01:00:22.895]      // skip if-block "protType == 1"
[01:00:22.895]    </control>
[01:00:22.895]    <control if="protType == 2" while="" timeout="0" info="">
[01:00:22.895]      // if-block "protType == 2"
[01:00:22.895]        // =>  TRUE
[01:00:22.895]      <control if="isSWJ" while="" timeout="0" info="">
[01:00:22.896]        // if-block "isSWJ"
[01:00:22.896]          // =>  TRUE
[01:00:22.896]        <control if="hasDormant" while="" timeout="0" info="">
[01:00:22.896]          // if-block "hasDormant"
[01:00:22.896]            // =>  FALSE
[01:00:22.896]          // skip if-block "hasDormant"
[01:00:22.896]        </control>
[01:00:22.896]        <control if="!hasDormant" while="" timeout="0" info="">
[01:00:22.896]          // if-block "!hasDormant"
[01:00:22.896]            // =>  TRUE
[01:00:22.896]          <block atomic="false" info="">
[01:00:22.896]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:00:22.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:22.897]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:00:22.898]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:00:22.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:00:22.898]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:22.898]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:00:22.898]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:00:22.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:00:22.899]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:22.899]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:00:22.899]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:00:22.900]          </block>
[01:00:22.900]          // end if-block "!hasDormant"
[01:00:22.900]        </control>
[01:00:22.900]        // end if-block "isSWJ"
[01:00:22.900]      </control>
[01:00:22.900]      <control if="!isSWJ" while="" timeout="0" info="">
[01:00:22.900]        // if-block "!isSWJ"
[01:00:22.900]          // =>  FALSE
[01:00:22.900]        // skip if-block "!isSWJ"
[01:00:22.900]      </control>
[01:00:22.900]      <block atomic="false" info="">
[01:00:22.901]        ReadDP(0x0);
[01:00:22.901]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:00:22.901]      </block>
[01:00:22.901]      // end if-block "protType == 2"
[01:00:22.901]    </control>
[01:00:22.901]  </sequence>
[01:00:22.901]  
[01:00:22.902]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:00:22.902]  
[01:00:22.902]  <debugvars>
[01:00:22.902]    // Pre-defined
[01:00:22.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:22.902]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:22.902]    __dp=0x00000000
[01:00:22.902]    __ap=0x00000000
[01:00:22.902]    __traceout=0x00000000      (Trace Disabled)
[01:00:22.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:22.903]    __FlashAddr=0x00000000
[01:00:22.903]    __FlashLen=0x00000000
[01:00:22.903]    __FlashArg=0x00000000
[01:00:22.903]    __FlashOp=0x00000000
[01:00:22.903]    __Result=0x00000000
[01:00:22.903]  </debugvars>
[01:00:22.903]  
[01:00:22.903]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:00:22.903]    <block atomic="false" info="">
[01:00:22.903]      __var SW_DP_ABORT       = 0x0;
[01:00:22.904]        // -> [SW_DP_ABORT <= 0x00000000]
[01:00:22.904]      __var DP_CTRL_STAT      = 0x4;
[01:00:22.904]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:00:22.904]      __var DP_SELECT         = 0x8;
[01:00:22.904]        // -> [DP_SELECT <= 0x00000008]
[01:00:22.904]      __var powered_down      = 0;
[01:00:22.904]        // -> [powered_down <= 0x00000000]
[01:00:22.904]      WriteDP(DP_SELECT, 0x00000000);
[01:00:22.904]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:00:22.904]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:00:22.905]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:00:22.905]        // -> [powered_down <= 0x00000001]
[01:00:22.905]    </block>
[01:00:22.905]    <control if="powered_down" while="" timeout="0" info="">
[01:00:22.905]      // if-block "powered_down"
[01:00:22.905]        // =>  TRUE
[01:00:22.905]      <block atomic="false" info="">
[01:00:22.905]        Message(0, "Debug/System power-up request sent");
[01:00:22.907]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:00:22.908]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:00:22.908]      </block>
[01:00:22.908]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:00:22.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:00:22.908]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:00:22.910]        // while-condition  =>  FALSE
[01:00:22.910]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:00:22.910]      </control>
[01:00:22.910]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:00:22.910]        // if-block "(__protocol & 0xFFFF) == 1"
[01:00:22.910]          // =>  FALSE
[01:00:22.910]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:00:22.910]      </control>
[01:00:22.910]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:00:22.911]        // if-block "(__protocol & 0xFFFF) == 2"
[01:00:22.911]          // =>  TRUE
[01:00:22.911]        <block atomic="false" info="">
[01:00:22.911]          Message(0, "executing SWD power up");
[01:00:22.912]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:00:22.913]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:00:22.913]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:00:22.914]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:00:22.914]        </block>
[01:00:22.914]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:00:22.914]      </control>
[01:00:22.914]      // end if-block "powered_down"
[01:00:22.914]    </control>
[01:00:22.915]    <block atomic="false" info="">
[01:00:22.915]      __var DEBUG_PORT_VAL    = 0;
[01:00:22.915]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:00:22.915]      __var ACCESS_POINT_VAL  = 0;
[01:00:22.915]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:00:22.915]      __ap = 1; 
[01:00:22.915]        // -> [__ap <= 0x00000001]
[01:00:22.915]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:00:22.916]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:00:22.916]      __ap = 4;
[01:00:22.917]        // -> [__ap <= 0x00000004]
[01:00:22.917]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:22.918]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:00:22.918]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:00:22.918]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:22.919]    </block>
[01:00:22.920]    <block atomic="false" info="">
[01:00:22.920]      __var nReset = 0x80;
[01:00:22.920]        // -> [nReset <= 0x00000080]
[01:00:22.920]      __var canReadPins = 0;
[01:00:22.920]        // -> [canReadPins <= 0x00000000]
[01:00:22.920]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:00:22.920]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:00:22.920]        // -> [canReadPins <= 0x00000001]
[01:00:22.920]    </block>
[01:00:22.920]    <control if="" while="1" timeout="200" info="">
[01:00:22.920]      // while "1"  (timeout="200")
[01:00:22.920]      // while-condition  =>  TRUE
[01:00:22.921]      // while "1"  (timeout="200")
[01:00:22.921]      // while-condition  =>  TRUE
[01:00:22.921]      // while "1"  (timeout="200")
[01:00:22.921]      // while-condition  =>  TRUE
[01:00:22.921]      // while "1"  (timeout="200")
[01:00:22.921]      // while-condition  =>  TRUE
[01:00:22.921]      // while "1"  (timeout="200")
[01:00:22.921]      // while-condition  =>  TRUE
[01:00:22.921]      // while "1"  (timeout="200")
[01:00:22.921]      // while-condition  =>  TRUE
[01:00:22.921]      // while "1"  (timeout="200")
[01:00:22.922]      // while-condition  =>  TRUE
[01:00:22.922]      // while "1"  (timeout="200")
[01:00:22.922]      // while-condition  =>  TRUE
[01:00:22.922]      // while "1"  (timeout="200")
[01:00:22.922]      // while-condition  =>  TRUE
[01:00:22.922]      // while "1"  (timeout="200")
[01:00:22.922]      // while-condition  =>  TRUE
[01:00:22.922]      // while "1"  (timeout="200")
[01:00:22.922]      // while-condition  =>  TRUE
[01:00:22.922]      // while "1"  (timeout="200")
[01:00:22.923]      // while-condition  =>  TRUE
[01:00:22.923]      // while "1"  (timeout="200")
[01:00:22.923]      // while-condition  =>  TRUE
[01:00:22.923]      // while "1"  (timeout="200")
[01:00:22.923]      // while-condition  =>  TRUE
[01:00:22.923]      // while "1"  (timeout="200")
[01:00:22.923]      // while-condition  =>  TRUE
[01:00:22.923]      // while "1"  (timeout="200")
[01:00:22.923]      // while-condition  =>  TRUE
[01:00:22.923]      // while "1"  (timeout="200")
[01:00:22.925]      // while-condition  =>  TRUE
[01:00:22.925]      // while "1"  (timeout="200")
[01:00:22.925]      // while-condition  =>  TRUE
[01:00:22.925]      // while "1"  (timeout="200")
[01:00:22.925]      // while-condition  =>  TRUE
[01:00:22.925]      // while "1"  (timeout="200")
[01:00:22.925]      // while-condition  =>  TRUE
[01:00:22.925]      // while "1"  (timeout="200")
[01:00:22.925]      // while-condition  =>  TRUE
[01:00:22.926]      // while "1"  (timeout="200")
[01:00:22.926]      // while-condition  =>  TRUE
[01:00:22.926]      // while "1"  (timeout="200")
[01:00:22.926]      // while-condition  =>  TRUE
[01:00:22.926]      // while "1"  (timeout="200")
[01:00:22.926]      // while-condition  =>  TRUE
[01:00:22.926]      // while "1"  (timeout="200")
[01:00:22.926]      // while-condition  =>  TRUE
[01:00:22.926]      // while "1"  (timeout="200")
[01:00:22.926]      // while-condition  =>  TRUE
[01:00:22.926]      // while "1"  (timeout="200")
[01:00:22.927]      // while-condition  =>  TRUE
[01:00:22.927]      // while "1"  (timeout="200")
[01:00:22.927]      // while-condition  =>  TRUE
[01:00:22.927]      // while "1"  (timeout="200")
[01:00:22.927]      // while-condition  =>  TRUE
[01:00:22.927]      // while "1"  (timeout="200")
[01:00:22.927]      // while-condition  =>  TRUE
[01:00:22.927]      // while "1"  (timeout="200")
[01:00:22.927]      // while-condition  =>  TRUE
[01:00:22.928]      // while "1"  (timeout="200")
[01:00:22.928]      // while  =>  TIMEOUT
[01:00:22.928]      // end while "1"
[01:00:22.928]    </control>
[01:00:22.928]    <control if="canReadPins" while="" timeout="0" info="">
[01:00:22.928]      // if-block "canReadPins"
[01:00:22.928]        // =>  TRUE
[01:00:22.928]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:00:22.928]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:00:22.929]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:00:22.929]        // while-condition  =>  FALSE
[01:00:22.929]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:00:22.929]      </control>
[01:00:22.929]      // end if-block "canReadPins"
[01:00:22.929]    </control>
[01:00:22.929]    <control if="!canReadPins" while="" timeout="0" info="">
[01:00:22.929]      // if-block "!canReadPins"
[01:00:22.929]        // =>  FALSE
[01:00:22.930]      // skip if-block "!canReadPins"
[01:00:22.930]    </control>
[01:00:22.930]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:00:22.930]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:22.930]        // =>  TRUE
[01:00:22.930]      <block atomic="false" info="">
[01:00:22.930]        WriteAP(0x00, 0x190008);
[01:00:22.931]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:22.931]        WriteAP(0xF0, 0x01);
[01:00:22.932]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:22.932]      </block>
[01:00:22.933]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:22.933]    </control>
[01:00:22.933]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:00:22.933]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:22.933]        // =>  FALSE
[01:00:22.933]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:22.933]    </control>
[01:00:22.933]    <block atomic="false" info="">
[01:00:22.933]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:22.934]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:00:22.935]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:00:22.935]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:22.936]      __ap = 0; //lets make sure we reset the access point selection
[01:00:22.936]        // -> [__ap <= 0x00000000]
[01:00:22.936]    </block>
[01:00:22.937]  </sequence>
[01:00:22.937]  
[01:00:22.942]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:22.942]  
[01:00:22.942]  <debugvars>
[01:00:22.942]    // Pre-defined
[01:00:22.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:22.943]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:22.943]    __dp=0x00000000
[01:00:22.943]    __ap=0x00000000
[01:00:22.943]    __traceout=0x00000000      (Trace Disabled)
[01:00:22.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:22.943]    __FlashAddr=0x00000000
[01:00:22.943]    __FlashLen=0x00000000
[01:00:22.943]    __FlashArg=0x00000000
[01:00:22.943]    __FlashOp=0x00000000
[01:00:22.944]    __Result=0x00000000
[01:00:22.944]  </debugvars>
[01:00:22.944]  
[01:00:22.944]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:22.944]    <block atomic="false" info="">
[01:00:22.944]      __var deviceID = 0;
[01:00:22.944]        // -> [deviceID <= 0x00000000]
[01:00:22.944]      __var version = 0;
[01:00:22.944]        // -> [version <= 0x00000000]
[01:00:22.944]      __var partNum = 0;
[01:00:22.945]        // -> [partNum <= 0x00000000]
[01:00:22.945]      __var manuf = 0;
[01:00:22.945]        // -> [manuf <= 0x00000000]
[01:00:22.945]      __var isMSPM0G1X0X_G3X0X = 0;
[01:00:22.945]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:00:22.945]      __var isProduction = 0;
[01:00:22.945]        // -> [isProduction <= 0x00000000]
[01:00:22.945]      __var continueId = 0;
[01:00:22.945]        // -> [continueId <= 0x00000000]
[01:00:22.946]      deviceID =   Read32(0x41C40004);
[01:00:22.948]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.948]        // -> [deviceID <= 0x2BB8802F]
[01:00:22.948]      version = deviceID >> 28;
[01:00:22.948]        // -> [version <= 0x00000002]
[01:00:22.948]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:00:22.948]        // -> [partNum <= 0x0000BB88]
[01:00:22.948]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:00:22.948]        // -> [manuf <= 0x00000017]
[01:00:22.948]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:00:22.948]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:00:22.948]      isProduction = (version > 0);
[01:00:22.949]        // -> [isProduction <= 0x00000001]
[01:00:22.949]    </block>
[01:00:22.949]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:00:22.949]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:00:22.949]        // =>  FALSE
[01:00:22.949]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:00:22.949]    </control>
[01:00:22.949]    <control if="continueId == 4" while="" timeout="0" info="">
[01:00:22.949]      // if-block "continueId == 4"
[01:00:22.949]        // =>  FALSE
[01:00:22.949]      // skip if-block "continueId == 4"
[01:00:22.950]    </control>
[01:00:22.950]    <control if="!isProduction" while="" timeout="0" info="">
[01:00:22.950]      // if-block "!isProduction"
[01:00:22.950]        // =>  FALSE
[01:00:22.950]      // skip if-block "!isProduction"
[01:00:22.950]    </control>
[01:00:22.950]  </sequence>
[01:00:22.950]  
[01:03:00.309]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:03:00.309]  
[01:03:00.309]  <debugvars>
[01:03:00.310]    // Pre-defined
[01:03:00.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:03:00.310]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:03:00.310]    __dp=0x00000000
[01:03:00.310]    __ap=0x00000000
[01:03:00.310]    __traceout=0x00000000      (Trace Disabled)
[01:03:00.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:03:00.310]    __FlashAddr=0x00000000
[01:03:00.310]    __FlashLen=0x00000000
[01:03:00.310]    __FlashArg=0x00000000
[01:03:00.310]    __FlashOp=0x00000000
[01:03:00.311]    __Result=0x00000000
[01:03:00.311]  </debugvars>
[01:03:00.311]  
[01:03:00.311]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:03:00.311]    <block atomic="false" info="">
[01:03:00.311]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:03:00.311]        // -> [isSWJ <= 0x00000001]
[01:03:00.311]      __var hasDormant = __protocol & 0x00020000;
[01:03:00.311]        // -> [hasDormant <= 0x00000000]
[01:03:00.311]      __var protType   = __protocol & 0x0000FFFF;
[01:03:00.311]        // -> [protType <= 0x00000002]
[01:03:00.312]    </block>
[01:03:00.312]    <control if="protType == 1" while="" timeout="0" info="">
[01:03:00.312]      // if-block "protType == 1"
[01:03:00.312]        // =>  FALSE
[01:03:00.312]      // skip if-block "protType == 1"
[01:03:00.312]    </control>
[01:03:00.312]    <control if="protType == 2" while="" timeout="0" info="">
[01:03:00.312]      // if-block "protType == 2"
[01:03:00.312]        // =>  TRUE
[01:03:00.313]      <control if="isSWJ" while="" timeout="0" info="">
[01:03:00.313]        // if-block "isSWJ"
[01:03:00.313]          // =>  TRUE
[01:03:00.313]        <control if="hasDormant" while="" timeout="0" info="">
[01:03:00.313]          // if-block "hasDormant"
[01:03:00.313]            // =>  FALSE
[01:03:00.313]          // skip if-block "hasDormant"
[01:03:00.313]        </control>
[01:03:00.313]        <control if="!hasDormant" while="" timeout="0" info="">
[01:03:00.313]          // if-block "!hasDormant"
[01:03:00.314]            // =>  TRUE
[01:03:00.314]          <block atomic="false" info="">
[01:03:00.314]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:03:00.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:03:00.314]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:03:00.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:03:00.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:03:00.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:03:00.315]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:03:00.315]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:03:00.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:03:00.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:03:00.316]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:03:00.316]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:03:00.317]          </block>
[01:03:00.317]          // end if-block "!hasDormant"
[01:03:00.317]        </control>
[01:03:00.317]        // end if-block "isSWJ"
[01:03:00.317]      </control>
[01:03:00.317]      <control if="!isSWJ" while="" timeout="0" info="">
[01:03:00.317]        // if-block "!isSWJ"
[01:03:00.317]          // =>  FALSE
[01:03:00.317]        // skip if-block "!isSWJ"
[01:03:00.317]      </control>
[01:03:00.317]      <block atomic="false" info="">
[01:03:00.318]        ReadDP(0x0);
[01:03:00.318]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:03:00.318]      </block>
[01:03:00.318]      // end if-block "protType == 2"
[01:03:00.318]    </control>
[01:03:00.318]  </sequence>
[01:03:00.318]  
[01:03:00.319]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:03:00.319]  
[01:03:00.319]  <debugvars>
[01:03:00.319]    // Pre-defined
[01:03:00.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:03:00.319]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:03:00.319]    __dp=0x00000000
[01:03:00.320]    __ap=0x00000000
[01:03:00.320]    __traceout=0x00000000      (Trace Disabled)
[01:03:00.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:03:00.320]    __FlashAddr=0x00000000
[01:03:00.320]    __FlashLen=0x00000000
[01:03:00.320]    __FlashArg=0x00000000
[01:03:00.321]    __FlashOp=0x00000000
[01:03:00.321]    __Result=0x00000000
[01:03:00.321]  </debugvars>
[01:03:00.321]  
[01:03:00.321]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:03:00.321]    <block atomic="false" info="">
[01:03:00.322]      __var SW_DP_ABORT       = 0x0;
[01:03:00.322]        // -> [SW_DP_ABORT <= 0x00000000]
[01:03:00.322]      __var DP_CTRL_STAT      = 0x4;
[01:03:00.322]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:03:00.322]      __var DP_SELECT         = 0x8;
[01:03:00.322]        // -> [DP_SELECT <= 0x00000008]
[01:03:00.322]      __var powered_down      = 0;
[01:03:00.322]        // -> [powered_down <= 0x00000000]
[01:03:00.322]      WriteDP(DP_SELECT, 0x00000000);
[01:03:00.323]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:03:00.323]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:03:00.323]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:03:00.323]        // -> [powered_down <= 0x00000001]
[01:03:00.324]    </block>
[01:03:00.324]    <control if="powered_down" while="" timeout="0" info="">
[01:03:00.324]      // if-block "powered_down"
[01:03:00.324]        // =>  TRUE
[01:03:00.324]      <block atomic="false" info="">
[01:03:00.325]        Message(0, "Debug/System power-up request sent");
[01:03:00.328]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:03:00.328]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:03:00.328]      </block>
[01:03:00.329]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:03:00.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:03:00.329]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:03:00.329]        // while-condition  =>  FALSE
[01:03:00.330]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:03:00.330]      </control>
[01:03:00.330]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:03:00.330]        // if-block "(__protocol & 0xFFFF) == 1"
[01:03:00.330]          // =>  FALSE
[01:03:00.330]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:03:00.330]      </control>
[01:03:00.330]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:03:00.331]        // if-block "(__protocol & 0xFFFF) == 2"
[01:03:00.331]          // =>  TRUE
[01:03:00.331]        <block atomic="false" info="">
[01:03:00.331]          Message(0, "executing SWD power up");
[01:03:00.333]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:03:00.334]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:03:00.334]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:03:00.334]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:03:00.335]        </block>
[01:03:00.335]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:03:00.335]      </control>
[01:03:00.335]      // end if-block "powered_down"
[01:03:00.335]    </control>
[01:03:00.335]    <block atomic="false" info="">
[01:03:00.335]      __var DEBUG_PORT_VAL    = 0;
[01:03:00.336]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:03:00.336]      __var ACCESS_POINT_VAL  = 0;
[01:03:00.336]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:03:00.336]      __ap = 1; 
[01:03:00.336]        // -> [__ap <= 0x00000001]
[01:03:00.336]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:03:00.338]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:03:00.338]      __ap = 4;
[01:03:00.338]        // -> [__ap <= 0x00000004]
[01:03:00.338]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:03:00.339]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:03:00.339]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:03:00.339]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:03:00.341]    </block>
[01:03:00.341]    <block atomic="false" info="">
[01:03:00.341]      __var nReset = 0x80;
[01:03:00.341]        // -> [nReset <= 0x00000080]
[01:03:00.341]      __var canReadPins = 0;
[01:03:00.341]        // -> [canReadPins <= 0x00000000]
[01:03:00.342]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:03:00.342]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:03:00.342]        // -> [canReadPins <= 0x00000001]
[01:03:00.342]    </block>
[01:03:00.342]    <control if="" while="1" timeout="200" info="">
[01:03:00.342]      // while "1"  (timeout="200")
[01:03:00.342]      // while-condition  =>  TRUE
[01:03:00.342]      // while "1"  (timeout="200")
[01:03:00.342]      // while-condition  =>  TRUE
[01:03:00.342]      // while "1"  (timeout="200")
[01:03:00.342]      // while-condition  =>  TRUE
[01:03:00.343]      // while "1"  (timeout="200")
[01:03:00.343]      // while-condition  =>  TRUE
[01:03:00.343]      // while "1"  (timeout="200")
[01:03:00.343]      // while-condition  =>  TRUE
[01:03:00.343]      // while "1"  (timeout="200")
[01:03:00.343]      // while-condition  =>  TRUE
[01:03:00.344]      // while "1"  (timeout="200")
[01:03:00.344]      // while-condition  =>  TRUE
[01:03:00.344]      // while "1"  (timeout="200")
[01:03:00.344]      // while-condition  =>  TRUE
[01:03:00.344]      // while "1"  (timeout="200")
[01:03:00.345]      // while-condition  =>  TRUE
[01:03:00.345]      // while "1"  (timeout="200")
[01:03:00.345]      // while-condition  =>  TRUE
[01:03:00.345]      // while "1"  (timeout="200")
[01:03:00.345]      // while-condition  =>  TRUE
[01:03:00.345]      // while "1"  (timeout="200")
[01:03:00.345]      // while-condition  =>  TRUE
[01:03:00.345]      // while "1"  (timeout="200")
[01:03:00.345]      // while-condition  =>  TRUE
[01:03:00.345]      // while "1"  (timeout="200")
[01:03:00.346]      // while-condition  =>  TRUE
[01:03:00.346]      // while "1"  (timeout="200")
[01:03:00.346]      // while-condition  =>  TRUE
[01:03:00.346]      // while "1"  (timeout="200")
[01:03:00.346]      // while-condition  =>  TRUE
[01:03:00.346]      // while "1"  (timeout="200")
[01:03:00.346]      // while-condition  =>  TRUE
[01:03:00.346]      // while "1"  (timeout="200")
[01:03:00.347]      // while-condition  =>  TRUE
[01:03:00.347]      // while "1"  (timeout="200")
[01:03:00.347]      // while-condition  =>  TRUE
[01:03:00.347]      // while "1"  (timeout="200")
[01:03:00.347]      // while-condition  =>  TRUE
[01:03:00.347]      // while "1"  (timeout="200")
[01:03:00.347]      // while-condition  =>  TRUE
[01:03:00.348]      // while "1"  (timeout="200")
[01:03:00.348]      // while-condition  =>  TRUE
[01:03:00.348]      // while "1"  (timeout="200")
[01:03:00.348]      // while-condition  =>  TRUE
[01:03:00.348]      // while "1"  (timeout="200")
[01:03:00.348]      // while-condition  =>  TRUE
[01:03:00.348]      // while "1"  (timeout="200")
[01:03:00.348]      // while-condition  =>  TRUE
[01:03:00.348]      // while "1"  (timeout="200")
[01:03:00.348]      // while-condition  =>  TRUE
[01:03:00.348]      // while "1"  (timeout="200")
[01:03:00.349]      // while-condition  =>  TRUE
[01:03:00.349]      // while "1"  (timeout="200")
[01:03:00.349]      // while  =>  TIMEOUT
[01:03:00.349]      // end while "1"
[01:03:00.349]    </control>
[01:03:00.349]    <control if="canReadPins" while="" timeout="0" info="">
[01:03:00.349]      // if-block "canReadPins"
[01:03:00.349]        // =>  TRUE
[01:03:00.349]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:03:00.349]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:03:00.350]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:03:00.350]        // while-condition  =>  FALSE
[01:03:00.350]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:03:00.350]      </control>
[01:03:00.350]      // end if-block "canReadPins"
[01:03:00.350]    </control>
[01:03:00.351]    <control if="!canReadPins" while="" timeout="0" info="">
[01:03:00.351]      // if-block "!canReadPins"
[01:03:00.351]        // =>  FALSE
[01:03:00.351]      // skip if-block "!canReadPins"
[01:03:00.351]    </control>
[01:03:00.351]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:03:00.351]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:03:00.351]        // =>  TRUE
[01:03:00.353]      <block atomic="false" info="">
[01:03:00.353]        WriteAP(0x00, 0x190008);
[01:03:00.353]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:03:00.353]        WriteAP(0xF0, 0x01);
[01:03:00.354]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:03:00.355]      </block>
[01:03:00.355]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:03:00.355]    </control>
[01:03:00.355]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:03:00.355]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:03:00.355]        // =>  FALSE
[01:03:00.355]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:03:00.355]    </control>
[01:03:00.355]    <block atomic="false" info="">
[01:03:00.355]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:03:00.356]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:03:00.357]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:03:00.357]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:03:00.358]      __ap = 0; //lets make sure we reset the access point selection
[01:03:00.359]        // -> [__ap <= 0x00000000]
[01:03:00.359]    </block>
[01:03:00.359]  </sequence>
[01:03:00.359]  
[01:03:00.365]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:03:00.365]  
[01:03:00.365]  <debugvars>
[01:03:00.365]    // Pre-defined
[01:03:00.365]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:03:00.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:03:00.366]    __dp=0x00000000
[01:03:00.366]    __ap=0x00000000
[01:03:00.366]    __traceout=0x00000000      (Trace Disabled)
[01:03:00.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:03:00.366]    __FlashAddr=0x00000000
[01:03:00.366]    __FlashLen=0x00000000
[01:03:00.366]    __FlashArg=0x00000000
[01:03:00.366]    __FlashOp=0x00000000
[01:03:00.366]    __Result=0x00000000
[01:03:00.367]  </debugvars>
[01:03:00.367]  
[01:03:00.367]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:03:00.367]    <block atomic="false" info="">
[01:03:00.367]      __var deviceID = 0;
[01:03:00.367]        // -> [deviceID <= 0x00000000]
[01:03:00.367]      __var version = 0;
[01:03:00.367]        // -> [version <= 0x00000000]
[01:03:00.368]      __var partNum = 0;
[01:03:00.368]        // -> [partNum <= 0x00000000]
[01:03:00.368]      __var manuf = 0;
[01:03:00.368]        // -> [manuf <= 0x00000000]
[01:03:00.368]      __var isMSPM0G1X0X_G3X0X = 0;
[01:03:00.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:03:00.368]      __var isProduction = 0;
[01:03:00.368]        // -> [isProduction <= 0x00000000]
[01:03:00.368]      __var continueId = 0;
[01:03:00.368]        // -> [continueId <= 0x00000000]
[01:03:00.369]      deviceID =   Read32(0x41C40004);
[01:03:00.370]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:03:00.370]        // -> [deviceID <= 0x2BB8802F]
[01:03:00.370]      version = deviceID >> 28;
[01:03:00.370]        // -> [version <= 0x00000002]
[01:03:00.371]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:03:00.371]        // -> [partNum <= 0x0000BB88]
[01:03:00.371]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:03:00.371]        // -> [manuf <= 0x00000017]
[01:03:00.371]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:03:00.371]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:03:00.371]      isProduction = (version > 0);
[01:03:00.371]        // -> [isProduction <= 0x00000001]
[01:03:00.371]    </block>
[01:03:00.372]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:03:00.372]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:03:00.372]        // =>  FALSE
[01:03:00.372]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:03:00.372]    </control>
[01:03:00.372]    <control if="continueId == 4" while="" timeout="0" info="">
[01:03:00.372]      // if-block "continueId == 4"
[01:03:00.372]        // =>  FALSE
[01:03:00.372]      // skip if-block "continueId == 4"
[01:03:00.372]    </control>
[01:03:00.372]    <control if="!isProduction" while="" timeout="0" info="">
[01:03:00.372]      // if-block "!isProduction"
[01:03:00.372]        // =>  FALSE
[01:03:00.372]      // skip if-block "!isProduction"
[01:03:00.373]    </control>
[01:03:00.373]  </sequence>
[01:03:00.373]  
[01:13:47.755]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:13:47.755]  
[01:13:47.757]  <debugvars>
[01:13:47.757]    // Pre-defined
[01:13:47.757]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:13:47.757]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:13:47.757]    __dp=0x00000000
[01:13:47.757]    __ap=0x00000000
[01:13:47.757]    __traceout=0x00000000      (Trace Disabled)
[01:13:47.757]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:13:47.757]    __FlashAddr=0x00000000
[01:13:47.758]    __FlashLen=0x00000000
[01:13:47.758]    __FlashArg=0x00000000
[01:13:47.758]    __FlashOp=0x00000000
[01:13:47.758]    __Result=0x00000000
[01:13:47.758]  </debugvars>
[01:13:47.758]  
[01:13:47.758]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:13:47.758]    <block atomic="false" info="">
[01:13:47.758]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:13:47.758]        // -> [isSWJ <= 0x00000001]
[01:13:47.758]      __var hasDormant = __protocol & 0x00020000;
[01:13:47.759]        // -> [hasDormant <= 0x00000000]
[01:13:47.759]      __var protType   = __protocol & 0x0000FFFF;
[01:13:47.759]        // -> [protType <= 0x00000002]
[01:13:47.759]    </block>
[01:13:47.759]    <control if="protType == 1" while="" timeout="0" info="">
[01:13:47.759]      // if-block "protType == 1"
[01:13:47.759]        // =>  FALSE
[01:13:47.759]      // skip if-block "protType == 1"
[01:13:47.759]    </control>
[01:13:47.759]    <control if="protType == 2" while="" timeout="0" info="">
[01:13:47.759]      // if-block "protType == 2"
[01:13:47.759]        // =>  TRUE
[01:13:47.759]      <control if="isSWJ" while="" timeout="0" info="">
[01:13:47.760]        // if-block "isSWJ"
[01:13:47.760]          // =>  TRUE
[01:13:47.760]        <control if="hasDormant" while="" timeout="0" info="">
[01:13:47.760]          // if-block "hasDormant"
[01:13:47.760]            // =>  FALSE
[01:13:47.760]          // skip if-block "hasDormant"
[01:13:47.760]        </control>
[01:13:47.760]        <control if="!hasDormant" while="" timeout="0" info="">
[01:13:47.760]          // if-block "!hasDormant"
[01:13:47.760]            // =>  TRUE
[01:13:47.760]          <block atomic="false" info="">
[01:13:47.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:13:47.761]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:13:47.761]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:13:47.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:13:47.762]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:13:47.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:13:47.763]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:13:47.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:13:47.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:13:47.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:13:47.764]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:13:47.764]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:13:47.764]          </block>
[01:13:47.764]          // end if-block "!hasDormant"
[01:13:47.764]        </control>
[01:13:47.764]        // end if-block "isSWJ"
[01:13:47.764]      </control>
[01:13:47.764]      <control if="!isSWJ" while="" timeout="0" info="">
[01:13:47.764]        // if-block "!isSWJ"
[01:13:47.765]          // =>  FALSE
[01:13:47.765]        // skip if-block "!isSWJ"
[01:13:47.765]      </control>
[01:13:47.765]      <block atomic="false" info="">
[01:13:47.765]        ReadDP(0x0);
[01:13:47.765]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:13:47.765]      </block>
[01:13:47.766]      // end if-block "protType == 2"
[01:13:47.766]    </control>
[01:13:47.766]  </sequence>
[01:13:47.766]  
[01:13:47.767]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:13:47.767]  
[01:13:47.767]  <debugvars>
[01:13:47.767]    // Pre-defined
[01:13:47.767]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:13:47.767]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:13:47.767]    __dp=0x00000000
[01:13:47.767]    __ap=0x00000000
[01:13:47.767]    __traceout=0x00000000      (Trace Disabled)
[01:13:47.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:13:47.768]    __FlashAddr=0x00000000
[01:13:47.768]    __FlashLen=0x00000000
[01:13:47.768]    __FlashArg=0x00000000
[01:13:47.768]    __FlashOp=0x00000000
[01:13:47.768]    __Result=0x00000000
[01:13:47.768]  </debugvars>
[01:13:47.768]  
[01:13:47.768]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:13:47.768]    <block atomic="false" info="">
[01:13:47.769]      __var SW_DP_ABORT       = 0x0;
[01:13:47.769]        // -> [SW_DP_ABORT <= 0x00000000]
[01:13:47.769]      __var DP_CTRL_STAT      = 0x4;
[01:13:47.769]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:13:47.769]      __var DP_SELECT         = 0x8;
[01:13:47.769]        // -> [DP_SELECT <= 0x00000008]
[01:13:47.769]      __var powered_down      = 0;
[01:13:47.769]        // -> [powered_down <= 0x00000000]
[01:13:47.769]      WriteDP(DP_SELECT, 0x00000000);
[01:13:47.770]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:13:47.770]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:13:47.770]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:13:47.771]        // -> [powered_down <= 0x00000001]
[01:13:47.771]    </block>
[01:13:47.771]    <control if="powered_down" while="" timeout="0" info="">
[01:13:47.771]      // if-block "powered_down"
[01:13:47.771]        // =>  TRUE
[01:13:47.771]      <block atomic="false" info="">
[01:13:47.771]        Message(0, "Debug/System power-up request sent");
[01:13:47.777]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:13:47.778]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:13:47.778]      </block>
[01:13:47.778]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:13:47.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:13:47.778]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:13:47.779]        // while-condition  =>  FALSE
[01:13:47.779]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:13:47.779]      </control>
[01:13:47.779]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:13:47.779]        // if-block "(__protocol & 0xFFFF) == 1"
[01:13:47.779]          // =>  FALSE
[01:13:47.779]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:13:47.779]      </control>
[01:13:47.779]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:13:47.779]        // if-block "(__protocol & 0xFFFF) == 2"
[01:13:47.779]          // =>  TRUE
[01:13:47.780]        <block atomic="false" info="">
[01:13:47.780]          Message(0, "executing SWD power up");
[01:13:47.781]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:13:47.782]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:13:47.782]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:13:47.783]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:13:47.783]        </block>
[01:13:47.783]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:13:47.783]      </control>
[01:13:47.783]      // end if-block "powered_down"
[01:13:47.783]    </control>
[01:13:47.783]    <block atomic="false" info="">
[01:13:47.783]      __var DEBUG_PORT_VAL    = 0;
[01:13:47.783]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:13:47.783]      __var ACCESS_POINT_VAL  = 0;
[01:13:47.783]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:13:47.783]      __ap = 1; 
[01:13:47.785]        // -> [__ap <= 0x00000001]
[01:13:47.785]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:13:47.786]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:13:47.786]      __ap = 4;
[01:13:47.786]        // -> [__ap <= 0x00000004]
[01:13:47.786]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:13:47.788]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:13:47.788]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:13:47.788]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:13:47.789]    </block>
[01:13:47.789]    <block atomic="false" info="">
[01:13:47.789]      __var nReset = 0x80;
[01:13:47.789]        // -> [nReset <= 0x00000080]
[01:13:47.789]      __var canReadPins = 0;
[01:13:47.789]        // -> [canReadPins <= 0x00000000]
[01:13:47.789]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:13:47.790]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:13:47.790]        // -> [canReadPins <= 0x00000001]
[01:13:47.790]    </block>
[01:13:47.790]    <control if="" while="1" timeout="200" info="">
[01:13:47.791]      // while "1"  (timeout="200")
[01:13:47.791]      // while-condition  =>  TRUE
[01:13:47.791]      // while "1"  (timeout="200")
[01:13:47.791]      // while-condition  =>  TRUE
[01:13:47.791]      // while "1"  (timeout="200")
[01:13:47.791]      // while-condition  =>  TRUE
[01:13:47.791]      // while "1"  (timeout="200")
[01:13:47.791]      // while-condition  =>  TRUE
[01:13:47.791]      // while "1"  (timeout="200")
[01:13:47.793]      // while-condition  =>  TRUE
[01:13:47.793]      // while "1"  (timeout="200")
[01:13:47.793]      // while-condition  =>  TRUE
[01:13:47.793]      // while "1"  (timeout="200")
[01:13:47.793]      // while-condition  =>  TRUE
[01:13:47.793]      // while "1"  (timeout="200")
[01:13:47.793]      // while-condition  =>  TRUE
[01:13:47.793]      // while "1"  (timeout="200")
[01:13:47.793]      // while-condition  =>  TRUE
[01:13:47.793]      // while "1"  (timeout="200")
[01:13:47.793]      // while-condition  =>  TRUE
[01:13:47.793]      // while "1"  (timeout="200")
[01:13:47.794]      // while-condition  =>  TRUE
[01:13:47.794]      // while "1"  (timeout="200")
[01:13:47.794]      // while-condition  =>  TRUE
[01:13:47.794]      // while "1"  (timeout="200")
[01:13:47.794]      // while-condition  =>  TRUE
[01:13:47.794]      // while "1"  (timeout="200")
[01:13:47.794]      // while-condition  =>  TRUE
[01:13:47.794]      // while "1"  (timeout="200")
[01:13:47.794]      // while-condition  =>  TRUE
[01:13:47.794]      // while "1"  (timeout="200")
[01:13:47.794]      // while-condition  =>  TRUE
[01:13:47.794]      // while "1"  (timeout="200")
[01:13:47.795]      // while-condition  =>  TRUE
[01:13:47.795]      // while "1"  (timeout="200")
[01:13:47.795]      // while-condition  =>  TRUE
[01:13:47.795]      // while "1"  (timeout="200")
[01:13:47.795]      // while-condition  =>  TRUE
[01:13:47.795]      // while "1"  (timeout="200")
[01:13:47.795]      // while-condition  =>  TRUE
[01:13:47.796]      // while "1"  (timeout="200")
[01:13:47.796]      // while-condition  =>  TRUE
[01:13:47.796]      // while "1"  (timeout="200")
[01:13:47.796]      // while-condition  =>  TRUE
[01:13:47.796]      // while "1"  (timeout="200")
[01:13:47.796]      // while-condition  =>  TRUE
[01:13:47.796]      // while "1"  (timeout="200")
[01:13:47.796]      // while-condition  =>  TRUE
[01:13:47.796]      // while "1"  (timeout="200")
[01:13:47.796]      // while-condition  =>  TRUE
[01:13:47.797]      // while "1"  (timeout="200")
[01:13:47.797]      // while-condition  =>  TRUE
[01:13:47.797]      // while "1"  (timeout="200")
[01:13:47.797]      // while-condition  =>  TRUE
[01:13:47.797]      // while "1"  (timeout="200")
[01:13:47.797]      // while-condition  =>  TRUE
[01:13:47.797]      // while "1"  (timeout="200")
[01:13:47.797]      // while-condition  =>  TRUE
[01:13:47.797]      // while "1"  (timeout="200")
[01:13:47.797]      // while-condition  =>  TRUE
[01:13:47.797]      // while "1"  (timeout="200")
[01:13:47.797]      // while-condition  =>  TRUE
[01:13:47.798]      // while "1"  (timeout="200")
[01:13:47.798]      // while-condition  =>  TRUE
[01:13:47.798]      // while "1"  (timeout="200")
[01:13:47.798]      // while-condition  =>  TRUE
[01:13:47.798]      // while "1"  (timeout="200")
[01:13:47.798]      // while-condition  =>  TRUE
[01:13:47.798]      // while "1"  (timeout="200")
[01:13:47.798]      // while-condition  =>  TRUE
[01:13:47.798]      // while "1"  (timeout="200")
[01:13:47.798]      // while-condition  =>  TRUE
[01:13:47.798]      // while "1"  (timeout="200")
[01:13:47.798]      // while-condition  =>  TRUE
[01:13:47.799]      // while "1"  (timeout="200")
[01:13:47.799]      // while-condition  =>  TRUE
[01:13:47.799]      // while "1"  (timeout="200")
[01:13:47.799]      // while-condition  =>  TRUE
[01:13:47.799]      // while "1"  (timeout="200")
[01:13:47.799]      // while-condition  =>  TRUE
[01:13:47.799]      // while "1"  (timeout="200")
[01:13:47.799]      // while-condition  =>  TRUE
[01:13:47.799]      // while "1"  (timeout="200")
[01:13:47.800]      // while-condition  =>  TRUE
[01:13:47.800]      // while "1"  (timeout="200")
[01:13:47.800]      // while-condition  =>  TRUE
[01:13:47.800]      // while "1"  (timeout="200")
[01:13:47.800]      // while-condition  =>  TRUE
[01:13:47.800]      // while "1"  (timeout="200")
[01:13:47.800]      // while-condition  =>  TRUE
[01:13:47.800]      // while "1"  (timeout="200")
[01:13:47.801]      // while-condition  =>  TRUE
[01:13:47.801]      // while "1"  (timeout="200")
[01:13:47.801]      // while-condition  =>  TRUE
[01:13:47.801]      // while "1"  (timeout="200")
[01:13:47.801]      // while-condition  =>  TRUE
[01:13:47.801]      // while "1"  (timeout="200")
[01:13:47.801]      // while-condition  =>  TRUE
[01:13:47.801]      // while "1"  (timeout="200")
[01:13:47.802]      // while-condition  =>  TRUE
[01:13:47.802]      // while "1"  (timeout="200")
[01:13:47.802]      // while  =>  TIMEOUT
[01:13:47.802]      // end while "1"
[01:13:47.802]    </control>
[01:13:47.802]    <control if="canReadPins" while="" timeout="0" info="">
[01:13:47.802]      // if-block "canReadPins"
[01:13:47.802]        // =>  TRUE
[01:13:47.802]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:13:47.802]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:13:47.804]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:13:47.804]        // while-condition  =>  FALSE
[01:13:47.804]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:13:47.804]      </control>
[01:13:47.804]      // end if-block "canReadPins"
[01:13:47.804]    </control>
[01:13:47.804]    <control if="!canReadPins" while="" timeout="0" info="">
[01:13:47.804]      // if-block "!canReadPins"
[01:13:47.804]        // =>  FALSE
[01:13:47.805]      // skip if-block "!canReadPins"
[01:13:47.805]    </control>
[01:13:47.805]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:13:47.805]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:13:47.805]        // =>  TRUE
[01:13:47.805]      <block atomic="false" info="">
[01:13:47.805]        WriteAP(0x00, 0x190008);
[01:13:47.806]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:13:47.806]        WriteAP(0xF0, 0x01);
[01:13:47.807]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:13:47.807]      </block>
[01:13:47.807]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:13:47.807]    </control>
[01:13:47.808]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:13:47.808]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:13:47.808]        // =>  FALSE
[01:13:47.808]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:13:47.808]    </control>
[01:13:47.808]    <block atomic="false" info="">
[01:13:47.808]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:13:47.809]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:13:47.809]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:13:47.809]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:13:47.811]      __ap = 0; //lets make sure we reset the access point selection
[01:13:47.811]        // -> [__ap <= 0x00000000]
[01:13:47.811]    </block>
[01:13:47.811]  </sequence>
[01:13:47.811]  
[01:13:47.818]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:13:47.818]  
[01:13:47.818]  <debugvars>
[01:13:47.818]    // Pre-defined
[01:13:47.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:13:47.818]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:13:47.818]    __dp=0x00000000
[01:13:47.818]    __ap=0x00000000
[01:13:47.818]    __traceout=0x00000000      (Trace Disabled)
[01:13:47.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:13:47.818]    __FlashAddr=0x00000000
[01:13:47.819]    __FlashLen=0x00000000
[01:13:47.819]    __FlashArg=0x00000000
[01:13:47.819]    __FlashOp=0x00000000
[01:13:47.819]    __Result=0x00000000
[01:13:47.819]  </debugvars>
[01:13:47.819]  
[01:13:47.820]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:13:47.820]    <block atomic="false" info="">
[01:13:47.820]      __var deviceID = 0;
[01:13:47.820]        // -> [deviceID <= 0x00000000]
[01:13:47.820]      __var version = 0;
[01:13:47.820]        // -> [version <= 0x00000000]
[01:13:47.820]      __var partNum = 0;
[01:13:47.821]        // -> [partNum <= 0x00000000]
[01:13:47.821]      __var manuf = 0;
[01:13:47.821]        // -> [manuf <= 0x00000000]
[01:13:47.821]      __var isMSPM0G1X0X_G3X0X = 0;
[01:13:47.821]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:13:47.821]      __var isProduction = 0;
[01:13:47.821]        // -> [isProduction <= 0x00000000]
[01:13:47.822]      __var continueId = 0;
[01:13:47.822]        // -> [continueId <= 0x00000000]
[01:13:47.822]      deviceID =   Read32(0x41C40004);
[01:13:47.823]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:13:47.823]        // -> [deviceID <= 0x2BB8802F]
[01:13:47.823]      version = deviceID >> 28;
[01:13:47.823]        // -> [version <= 0x00000002]
[01:13:47.824]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:13:47.824]        // -> [partNum <= 0x0000BB88]
[01:13:47.824]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:13:47.824]        // -> [manuf <= 0x00000017]
[01:13:47.824]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:13:47.824]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:13:47.824]      isProduction = (version > 0);
[01:13:47.824]        // -> [isProduction <= 0x00000001]
[01:13:47.824]    </block>
[01:13:47.824]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:13:47.826]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:13:47.826]        // =>  FALSE
[01:13:47.826]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:13:47.826]    </control>
[01:13:47.826]    <control if="continueId == 4" while="" timeout="0" info="">
[01:13:47.826]      // if-block "continueId == 4"
[01:13:47.826]        // =>  FALSE
[01:13:47.826]      // skip if-block "continueId == 4"
[01:13:47.827]    </control>
[01:13:47.827]    <control if="!isProduction" while="" timeout="0" info="">
[01:13:47.827]      // if-block "!isProduction"
[01:13:47.827]        // =>  FALSE
[01:13:47.827]      // skip if-block "!isProduction"
[01:13:47.827]    </control>
[01:13:47.827]  </sequence>
[01:13:47.827]  
[01:15:49.279]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:15:49.279]  
[01:15:49.279]  <debugvars>
[01:15:49.279]    // Pre-defined
[01:15:49.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:49.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:49.279]    __dp=0x00000000
[01:15:49.279]    __ap=0x00000000
[01:15:49.279]    __traceout=0x00000000      (Trace Disabled)
[01:15:49.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:49.279]    __FlashAddr=0x00000000
[01:15:49.279]    __FlashLen=0x00000000
[01:15:49.279]    __FlashArg=0x00000000
[01:15:49.280]    __FlashOp=0x00000000
[01:15:49.280]    __Result=0x00000000
[01:15:49.280]  </debugvars>
[01:15:49.281]  
[01:15:49.281]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:15:49.281]    <block atomic="false" info="">
[01:15:49.281]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:15:49.281]        // -> [isSWJ <= 0x00000001]
[01:15:49.281]      __var hasDormant = __protocol & 0x00020000;
[01:15:49.281]        // -> [hasDormant <= 0x00000000]
[01:15:49.281]      __var protType   = __protocol & 0x0000FFFF;
[01:15:49.281]        // -> [protType <= 0x00000002]
[01:15:49.281]    </block>
[01:15:49.281]    <control if="protType == 1" while="" timeout="0" info="">
[01:15:49.281]      // if-block "protType == 1"
[01:15:49.281]        // =>  FALSE
[01:15:49.281]      // skip if-block "protType == 1"
[01:15:49.283]    </control>
[01:15:49.283]    <control if="protType == 2" while="" timeout="0" info="">
[01:15:49.283]      // if-block "protType == 2"
[01:15:49.283]        // =>  TRUE
[01:15:49.283]      <control if="isSWJ" while="" timeout="0" info="">
[01:15:49.283]        // if-block "isSWJ"
[01:15:49.283]          // =>  TRUE
[01:15:49.283]        <control if="hasDormant" while="" timeout="0" info="">
[01:15:49.283]          // if-block "hasDormant"
[01:15:49.284]            // =>  FALSE
[01:15:49.284]          // skip if-block "hasDormant"
[01:15:49.284]        </control>
[01:15:49.284]        <control if="!hasDormant" while="" timeout="0" info="">
[01:15:49.284]          // if-block "!hasDormant"
[01:15:49.284]            // =>  TRUE
[01:15:49.284]          <block atomic="false" info="">
[01:15:49.284]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:15:49.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:49.285]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:15:49.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:15:49.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:15:49.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:49.286]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:15:49.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:15:49.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:15:49.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:49.286]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:15:49.287]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:15:49.287]          </block>
[01:15:49.287]          // end if-block "!hasDormant"
[01:15:49.287]        </control>
[01:15:49.287]        // end if-block "isSWJ"
[01:15:49.287]      </control>
[01:15:49.287]      <control if="!isSWJ" while="" timeout="0" info="">
[01:15:49.287]        // if-block "!isSWJ"
[01:15:49.287]          // =>  FALSE
[01:15:49.288]        // skip if-block "!isSWJ"
[01:15:49.288]      </control>
[01:15:49.288]      <block atomic="false" info="">
[01:15:49.288]        ReadDP(0x0);
[01:15:49.288]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:15:49.288]      </block>
[01:15:49.288]      // end if-block "protType == 2"
[01:15:49.288]    </control>
[01:15:49.289]  </sequence>
[01:15:49.289]  
[01:15:49.289]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:15:49.289]  
[01:15:49.289]  <debugvars>
[01:15:49.289]    // Pre-defined
[01:15:49.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:49.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:49.289]    __dp=0x00000000
[01:15:49.289]    __ap=0x00000000
[01:15:49.289]    __traceout=0x00000000      (Trace Disabled)
[01:15:49.290]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:49.290]    __FlashAddr=0x00000000
[01:15:49.290]    __FlashLen=0x00000000
[01:15:49.291]    __FlashArg=0x00000000
[01:15:49.291]    __FlashOp=0x00000000
[01:15:49.291]    __Result=0x00000000
[01:15:49.291]  </debugvars>
[01:15:49.291]  
[01:15:49.291]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:15:49.291]    <block atomic="false" info="">
[01:15:49.291]      __var SW_DP_ABORT       = 0x0;
[01:15:49.291]        // -> [SW_DP_ABORT <= 0x00000000]
[01:15:49.291]      __var DP_CTRL_STAT      = 0x4;
[01:15:49.291]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:15:49.291]      __var DP_SELECT         = 0x8;
[01:15:49.291]        // -> [DP_SELECT <= 0x00000008]
[01:15:49.291]      __var powered_down      = 0;
[01:15:49.292]        // -> [powered_down <= 0x00000000]
[01:15:49.292]      WriteDP(DP_SELECT, 0x00000000);
[01:15:49.292]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:15:49.292]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:15:49.294]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:15:49.294]        // -> [powered_down <= 0x00000001]
[01:15:49.294]    </block>
[01:15:49.294]    <control if="powered_down" while="" timeout="0" info="">
[01:15:49.294]      // if-block "powered_down"
[01:15:49.294]        // =>  TRUE
[01:15:49.294]      <block atomic="false" info="">
[01:15:49.294]        Message(0, "Debug/System power-up request sent");
[01:15:49.299]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:15:49.299]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:15:49.300]      </block>
[01:15:49.300]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:15:49.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:15:49.300]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:15:49.300]        // while-condition  =>  FALSE
[01:15:49.300]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:15:49.301]      </control>
[01:15:49.302]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:15:49.302]        // if-block "(__protocol & 0xFFFF) == 1"
[01:15:49.302]          // =>  FALSE
[01:15:49.302]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:15:49.303]      </control>
[01:15:49.303]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:15:49.303]        // if-block "(__protocol & 0xFFFF) == 2"
[01:15:49.303]          // =>  TRUE
[01:15:49.303]        <block atomic="false" info="">
[01:15:49.303]          Message(0, "executing SWD power up");
[01:15:49.305]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:15:49.306]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:15:49.306]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:15:49.306]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:15:49.306]        </block>
[01:15:49.307]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:15:49.307]      </control>
[01:15:49.307]      // end if-block "powered_down"
[01:15:49.307]    </control>
[01:15:49.307]    <block atomic="false" info="">
[01:15:49.307]      __var DEBUG_PORT_VAL    = 0;
[01:15:49.307]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:15:49.307]      __var ACCESS_POINT_VAL  = 0;
[01:15:49.307]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:15:49.308]      __ap = 1; 
[01:15:49.308]        // -> [__ap <= 0x00000001]
[01:15:49.308]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:15:49.309]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:15:49.309]      __ap = 4;
[01:15:49.309]        // -> [__ap <= 0x00000004]
[01:15:49.309]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:49.310]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:15:49.310]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:15:49.310]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:49.312]    </block>
[01:15:49.312]    <block atomic="false" info="">
[01:15:49.312]      __var nReset = 0x80;
[01:15:49.312]        // -> [nReset <= 0x00000080]
[01:15:49.312]      __var canReadPins = 0;
[01:15:49.313]        // -> [canReadPins <= 0x00000000]
[01:15:49.313]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:15:49.313]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:15:49.313]        // -> [canReadPins <= 0x00000001]
[01:15:49.313]    </block>
[01:15:49.313]    <control if="" while="1" timeout="200" info="">
[01:15:49.314]      // while "1"  (timeout="200")
[01:15:49.314]      // while-condition  =>  TRUE
[01:15:49.314]      // while "1"  (timeout="200")
[01:15:49.314]      // while-condition  =>  TRUE
[01:15:49.314]      // while "1"  (timeout="200")
[01:15:49.314]      // while-condition  =>  TRUE
[01:15:49.314]      // while "1"  (timeout="200")
[01:15:49.314]      // while-condition  =>  TRUE
[01:15:49.314]      // while "1"  (timeout="200")
[01:15:49.314]      // while-condition  =>  TRUE
[01:15:49.315]      // while "1"  (timeout="200")
[01:15:49.315]      // while-condition  =>  TRUE
[01:15:49.315]      // while "1"  (timeout="200")
[01:15:49.315]      // while-condition  =>  TRUE
[01:15:49.315]      // while "1"  (timeout="200")
[01:15:49.315]      // while-condition  =>  TRUE
[01:15:49.316]      // while "1"  (timeout="200")
[01:15:49.316]      // while-condition  =>  TRUE
[01:15:49.316]      // while "1"  (timeout="200")
[01:15:49.316]      // while-condition  =>  TRUE
[01:15:49.316]      // while "1"  (timeout="200")
[01:15:49.316]      // while-condition  =>  TRUE
[01:15:49.316]      // while "1"  (timeout="200")
[01:15:49.316]      // while-condition  =>  TRUE
[01:15:49.316]      // while "1"  (timeout="200")
[01:15:49.316]      // while-condition  =>  TRUE
[01:15:49.317]      // while "1"  (timeout="200")
[01:15:49.317]      // while-condition  =>  TRUE
[01:15:49.317]      // while "1"  (timeout="200")
[01:15:49.317]      // while-condition  =>  TRUE
[01:15:49.317]      // while "1"  (timeout="200")
[01:15:49.318]      // while-condition  =>  TRUE
[01:15:49.318]      // while "1"  (timeout="200")
[01:15:49.318]      // while-condition  =>  TRUE
[01:15:49.318]      // while "1"  (timeout="200")
[01:15:49.318]      // while-condition  =>  TRUE
[01:15:49.318]      // while "1"  (timeout="200")
[01:15:49.318]      // while-condition  =>  TRUE
[01:15:49.318]      // while "1"  (timeout="200")
[01:15:49.318]      // while-condition  =>  TRUE
[01:15:49.319]      // while "1"  (timeout="200")
[01:15:49.319]      // while  =>  TIMEOUT
[01:15:49.319]      // end while "1"
[01:15:49.319]    </control>
[01:15:49.319]    <control if="canReadPins" while="" timeout="0" info="">
[01:15:49.319]      // if-block "canReadPins"
[01:15:49.319]        // =>  TRUE
[01:15:49.319]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:15:49.319]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:15:49.320]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:15:49.320]        // while-condition  =>  FALSE
[01:15:49.320]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:15:49.320]      </control>
[01:15:49.320]      // end if-block "canReadPins"
[01:15:49.320]    </control>
[01:15:49.320]    <control if="!canReadPins" while="" timeout="0" info="">
[01:15:49.320]      // if-block "!canReadPins"
[01:15:49.320]        // =>  FALSE
[01:15:49.321]      // skip if-block "!canReadPins"
[01:15:49.321]    </control>
[01:15:49.321]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:15:49.321]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:49.321]        // =>  TRUE
[01:15:49.321]      <block atomic="false" info="">
[01:15:49.321]        WriteAP(0x00, 0x190008);
[01:15:49.323]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:49.323]        WriteAP(0xF0, 0x01);
[01:15:49.324]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:49.324]      </block>
[01:15:49.324]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:49.324]    </control>
[01:15:49.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:15:49.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:49.325]        // =>  FALSE
[01:15:49.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:49.325]    </control>
[01:15:49.325]    <block atomic="false" info="">
[01:15:49.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:49.326]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:15:49.326]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:15:49.326]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:49.328]      __ap = 0; //lets make sure we reset the access point selection
[01:15:49.328]        // -> [__ap <= 0x00000000]
[01:15:49.328]    </block>
[01:15:49.328]  </sequence>
[01:15:49.328]  
[01:15:49.335]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:15:49.335]  
[01:15:49.335]  <debugvars>
[01:15:49.335]    // Pre-defined
[01:15:49.335]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:49.335]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:49.336]    __dp=0x00000000
[01:15:49.336]    __ap=0x00000000
[01:15:49.336]    __traceout=0x00000000      (Trace Disabled)
[01:15:49.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:49.336]    __FlashAddr=0x00000000
[01:15:49.336]    __FlashLen=0x00000000
[01:15:49.336]    __FlashArg=0x00000000
[01:15:49.336]    __FlashOp=0x00000000
[01:15:49.336]    __Result=0x00000000
[01:15:49.337]  </debugvars>
[01:15:49.337]  
[01:15:49.337]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:15:49.337]    <block atomic="false" info="">
[01:15:49.337]      __var deviceID = 0;
[01:15:49.337]        // -> [deviceID <= 0x00000000]
[01:15:49.337]      __var version = 0;
[01:15:49.337]        // -> [version <= 0x00000000]
[01:15:49.337]      __var partNum = 0;
[01:15:49.337]        // -> [partNum <= 0x00000000]
[01:15:49.338]      __var manuf = 0;
[01:15:49.338]        // -> [manuf <= 0x00000000]
[01:15:49.338]      __var isMSPM0G1X0X_G3X0X = 0;
[01:15:49.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:15:49.338]      __var isProduction = 0;
[01:15:49.338]        // -> [isProduction <= 0x00000000]
[01:15:49.338]      __var continueId = 0;
[01:15:49.338]        // -> [continueId <= 0x00000000]
[01:15:49.338]      deviceID =   Read32(0x41C40004);
[01:15:49.339]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:15:49.339]        // -> [deviceID <= 0x2BB8802F]
[01:15:49.339]      version = deviceID >> 28;
[01:15:49.339]        // -> [version <= 0x00000002]
[01:15:49.340]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:15:49.340]        // -> [partNum <= 0x0000BB88]
[01:15:49.340]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:15:49.340]        // -> [manuf <= 0x00000017]
[01:15:49.340]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:15:49.340]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:15:49.340]      isProduction = (version > 0);
[01:15:49.340]        // -> [isProduction <= 0x00000001]
[01:15:49.340]    </block>
[01:15:49.340]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:15:49.341]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:15:49.341]        // =>  FALSE
[01:15:49.341]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:15:49.341]    </control>
[01:15:49.341]    <control if="continueId == 4" while="" timeout="0" info="">
[01:15:49.341]      // if-block "continueId == 4"
[01:15:49.341]        // =>  FALSE
[01:15:49.341]      // skip if-block "continueId == 4"
[01:15:49.341]    </control>
[01:15:49.341]    <control if="!isProduction" while="" timeout="0" info="">
[01:15:49.341]      // if-block "!isProduction"
[01:15:49.341]        // =>  FALSE
[01:15:49.341]      // skip if-block "!isProduction"
[01:15:49.341]    </control>
[01:15:49.343]  </sequence>
[01:15:49.343]  
[01:16:14.808]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:16:14.808]  
[01:16:14.818]  <debugvars>
[01:16:14.818]    // Pre-defined
[01:16:14.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:14.818]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:14.818]    __dp=0x00000000
[01:16:14.818]    __ap=0x00000000
[01:16:14.818]    __traceout=0x00000000      (Trace Disabled)
[01:16:14.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:14.818]    __FlashAddr=0x00000000
[01:16:14.818]    __FlashLen=0x00000000
[01:16:14.818]    __FlashArg=0x00000000
[01:16:14.819]    __FlashOp=0x00000000
[01:16:14.819]    __Result=0x00000000
[01:16:14.819]  </debugvars>
[01:16:14.819]  
[01:16:14.819]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:16:14.819]    <block atomic="false" info="">
[01:16:14.819]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:16:14.819]        // -> [isSWJ <= 0x00000001]
[01:16:14.819]      __var hasDormant = __protocol & 0x00020000;
[01:16:14.820]        // -> [hasDormant <= 0x00000000]
[01:16:14.820]      __var protType   = __protocol & 0x0000FFFF;
[01:16:14.820]        // -> [protType <= 0x00000002]
[01:16:14.820]    </block>
[01:16:14.820]    <control if="protType == 1" while="" timeout="0" info="">
[01:16:14.820]      // if-block "protType == 1"
[01:16:14.820]        // =>  FALSE
[01:16:14.821]      // skip if-block "protType == 1"
[01:16:14.821]    </control>
[01:16:14.822]    <control if="protType == 2" while="" timeout="0" info="">
[01:16:14.822]      // if-block "protType == 2"
[01:16:14.822]        // =>  TRUE
[01:16:14.822]      <control if="isSWJ" while="" timeout="0" info="">
[01:16:14.822]        // if-block "isSWJ"
[01:16:14.822]          // =>  TRUE
[01:16:14.822]        <control if="hasDormant" while="" timeout="0" info="">
[01:16:14.823]          // if-block "hasDormant"
[01:16:14.823]            // =>  FALSE
[01:16:14.823]          // skip if-block "hasDormant"
[01:16:14.823]        </control>
[01:16:14.823]        <control if="!hasDormant" while="" timeout="0" info="">
[01:16:14.823]          // if-block "!hasDormant"
[01:16:14.823]            // =>  TRUE
[01:16:14.823]          <block atomic="false" info="">
[01:16:14.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:16:14.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:14.824]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:16:14.824]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:16:14.824]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:16:14.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:14.825]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:16:14.825]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:16:14.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:16:14.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:14.826]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:16:14.826]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:16:14.826]          </block>
[01:16:14.826]          // end if-block "!hasDormant"
[01:16:14.826]        </control>
[01:16:14.826]        // end if-block "isSWJ"
[01:16:14.826]      </control>
[01:16:14.826]      <control if="!isSWJ" while="" timeout="0" info="">
[01:16:14.826]        // if-block "!isSWJ"
[01:16:14.826]          // =>  FALSE
[01:16:14.827]        // skip if-block "!isSWJ"
[01:16:14.827]      </control>
[01:16:14.827]      <block atomic="false" info="">
[01:16:14.827]        ReadDP(0x0);
[01:16:14.827]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:16:14.828]      </block>
[01:16:14.828]      // end if-block "protType == 2"
[01:16:14.828]    </control>
[01:16:14.828]  </sequence>
[01:16:14.828]  
[01:16:14.829]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:16:14.829]  
[01:16:14.829]  <debugvars>
[01:16:14.829]    // Pre-defined
[01:16:14.829]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:14.829]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:14.829]    __dp=0x00000000
[01:16:14.829]    __ap=0x00000000
[01:16:14.829]    __traceout=0x00000000      (Trace Disabled)
[01:16:14.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:14.829]    __FlashAddr=0x00000000
[01:16:14.829]    __FlashLen=0x00000000
[01:16:14.830]    __FlashArg=0x00000000
[01:16:14.830]    __FlashOp=0x00000000
[01:16:14.830]    __Result=0x00000000
[01:16:14.830]  </debugvars>
[01:16:14.830]  
[01:16:14.830]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:16:14.830]    <block atomic="false" info="">
[01:16:14.830]      __var SW_DP_ABORT       = 0x0;
[01:16:14.830]        // -> [SW_DP_ABORT <= 0x00000000]
[01:16:14.830]      __var DP_CTRL_STAT      = 0x4;
[01:16:14.831]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:16:14.831]      __var DP_SELECT         = 0x8;
[01:16:14.831]        // -> [DP_SELECT <= 0x00000008]
[01:16:14.831]      __var powered_down      = 0;
[01:16:14.831]        // -> [powered_down <= 0x00000000]
[01:16:14.831]      WriteDP(DP_SELECT, 0x00000000);
[01:16:14.832]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:16:14.832]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:16:14.832]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:16:14.832]        // -> [powered_down <= 0x00000001]
[01:16:14.832]    </block>
[01:16:14.833]    <control if="powered_down" while="" timeout="0" info="">
[01:16:14.833]      // if-block "powered_down"
[01:16:14.833]        // =>  TRUE
[01:16:14.833]      <block atomic="false" info="">
[01:16:14.833]        Message(0, "Debug/System power-up request sent");
[01:16:14.837]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:16:14.838]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:16:14.838]      </block>
[01:16:14.839]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:16:14.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:16:14.839]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:16:14.839]        // while-condition  =>  FALSE
[01:16:14.839]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:16:14.840]      </control>
[01:16:14.840]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:16:14.840]        // if-block "(__protocol & 0xFFFF) == 1"
[01:16:14.840]          // =>  FALSE
[01:16:14.840]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:16:14.840]      </control>
[01:16:14.840]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:16:14.841]        // if-block "(__protocol & 0xFFFF) == 2"
[01:16:14.841]          // =>  TRUE
[01:16:14.841]        <block atomic="false" info="">
[01:16:14.841]          Message(0, "executing SWD power up");
[01:16:14.842]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:16:14.842]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:16:14.842]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:16:14.843]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:16:14.843]        </block>
[01:16:14.843]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:16:14.843]      </control>
[01:16:14.843]      // end if-block "powered_down"
[01:16:14.843]    </control>
[01:16:14.844]    <block atomic="false" info="">
[01:16:14.844]      __var DEBUG_PORT_VAL    = 0;
[01:16:14.844]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:16:14.844]      __var ACCESS_POINT_VAL  = 0;
[01:16:14.844]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:16:14.844]      __ap = 1; 
[01:16:14.844]        // -> [__ap <= 0x00000001]
[01:16:14.844]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:16:14.845]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:16:14.845]      __ap = 4;
[01:16:14.846]        // -> [__ap <= 0x00000004]
[01:16:14.846]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:14.847]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:16:14.847]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:16:14.847]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:14.848]    </block>
[01:16:14.848]    <block atomic="false" info="">
[01:16:14.848]      __var nReset = 0x80;
[01:16:14.848]        // -> [nReset <= 0x00000080]
[01:16:14.848]      __var canReadPins = 0;
[01:16:14.849]        // -> [canReadPins <= 0x00000000]
[01:16:14.849]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:16:14.849]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:16:14.849]        // -> [canReadPins <= 0x00000001]
[01:16:14.849]    </block>
[01:16:14.849]    <control if="" while="1" timeout="200" info="">
[01:16:14.849]      // while "1"  (timeout="200")
[01:16:14.850]      // while-condition  =>  TRUE
[01:16:14.850]      // while "1"  (timeout="200")
[01:16:14.850]      // while-condition  =>  TRUE
[01:16:14.850]      // while "1"  (timeout="200")
[01:16:14.850]      // while-condition  =>  TRUE
[01:16:14.850]      // while "1"  (timeout="200")
[01:16:14.850]      // while-condition  =>  TRUE
[01:16:14.850]      // while "1"  (timeout="200")
[01:16:14.850]      // while-condition  =>  TRUE
[01:16:14.851]      // while "1"  (timeout="200")
[01:16:14.851]      // while-condition  =>  TRUE
[01:16:14.851]      // while "1"  (timeout="200")
[01:16:14.851]      // while-condition  =>  TRUE
[01:16:14.851]      // while "1"  (timeout="200")
[01:16:14.851]      // while-condition  =>  TRUE
[01:16:14.851]      // while "1"  (timeout="200")
[01:16:14.851]      // while-condition  =>  TRUE
[01:16:14.852]      // while "1"  (timeout="200")
[01:16:14.852]      // while-condition  =>  TRUE
[01:16:14.853]      // while "1"  (timeout="200")
[01:16:14.853]      // while-condition  =>  TRUE
[01:16:14.853]      // while "1"  (timeout="200")
[01:16:14.853]      // while-condition  =>  TRUE
[01:16:14.853]      // while "1"  (timeout="200")
[01:16:14.853]      // while-condition  =>  TRUE
[01:16:14.853]      // while "1"  (timeout="200")
[01:16:14.853]      // while-condition  =>  TRUE
[01:16:14.853]      // while "1"  (timeout="200")
[01:16:14.853]      // while-condition  =>  TRUE
[01:16:14.854]      // while "1"  (timeout="200")
[01:16:14.854]      // while-condition  =>  TRUE
[01:16:14.854]      // while "1"  (timeout="200")
[01:16:14.854]      // while-condition  =>  TRUE
[01:16:14.854]      // while "1"  (timeout="200")
[01:16:14.854]      // while-condition  =>  TRUE
[01:16:14.854]      // while "1"  (timeout="200")
[01:16:14.854]      // while-condition  =>  TRUE
[01:16:14.854]      // while "1"  (timeout="200")
[01:16:14.854]      // while-condition  =>  TRUE
[01:16:14.854]      // while "1"  (timeout="200")
[01:16:14.855]      // while-condition  =>  TRUE
[01:16:14.855]      // while "1"  (timeout="200")
[01:16:14.855]      // while-condition  =>  TRUE
[01:16:14.855]      // while "1"  (timeout="200")
[01:16:14.855]      // while-condition  =>  TRUE
[01:16:14.855]      // while "1"  (timeout="200")
[01:16:14.855]      // while-condition  =>  TRUE
[01:16:14.855]      // while "1"  (timeout="200")
[01:16:14.855]      // while-condition  =>  TRUE
[01:16:14.855]      // while "1"  (timeout="200")
[01:16:14.855]      // while-condition  =>  TRUE
[01:16:14.855]      // while "1"  (timeout="200")
[01:16:14.856]      // while-condition  =>  TRUE
[01:16:14.856]      // while "1"  (timeout="200")
[01:16:14.856]      // while-condition  =>  TRUE
[01:16:14.856]      // while "1"  (timeout="200")
[01:16:14.856]      // while-condition  =>  TRUE
[01:16:14.856]      // while "1"  (timeout="200")
[01:16:14.856]      // while-condition  =>  TRUE
[01:16:14.856]      // while "1"  (timeout="200")
[01:16:14.856]      // while-condition  =>  TRUE
[01:16:14.856]      // while "1"  (timeout="200")
[01:16:14.857]      // while-condition  =>  TRUE
[01:16:14.857]      // while "1"  (timeout="200")
[01:16:14.857]      // while-condition  =>  TRUE
[01:16:14.857]      // while "1"  (timeout="200")
[01:16:14.857]      // while-condition  =>  TRUE
[01:16:14.857]      // while "1"  (timeout="200")
[01:16:14.857]      // while-condition  =>  TRUE
[01:16:14.857]      // while "1"  (timeout="200")
[01:16:14.857]      // while-condition  =>  TRUE
[01:16:14.857]      // while "1"  (timeout="200")
[01:16:14.857]      // while-condition  =>  TRUE
[01:16:14.857]      // while "1"  (timeout="200")
[01:16:14.857]      // while-condition  =>  TRUE
[01:16:14.857]      // while "1"  (timeout="200")
[01:16:14.858]      // while-condition  =>  TRUE
[01:16:14.858]      // while "1"  (timeout="200")
[01:16:14.858]      // while-condition  =>  TRUE
[01:16:14.858]      // while "1"  (timeout="200")
[01:16:14.858]      // while-condition  =>  TRUE
[01:16:14.858]      // while "1"  (timeout="200")
[01:16:14.858]      // while-condition  =>  TRUE
[01:16:14.858]      // while "1"  (timeout="200")
[01:16:14.858]      // while-condition  =>  TRUE
[01:16:14.858]      // while "1"  (timeout="200")
[01:16:14.858]      // while-condition  =>  TRUE
[01:16:14.859]      // while "1"  (timeout="200")
[01:16:14.859]      // while-condition  =>  TRUE
[01:16:14.859]      // while "1"  (timeout="200")
[01:16:14.859]      // while-condition  =>  TRUE
[01:16:14.859]      // while "1"  (timeout="200")
[01:16:14.859]      // while-condition  =>  TRUE
[01:16:14.859]      // while "1"  (timeout="200")
[01:16:14.859]      // while-condition  =>  TRUE
[01:16:14.859]      // while "1"  (timeout="200")
[01:16:14.859]      // while-condition  =>  TRUE
[01:16:14.859]      // while "1"  (timeout="200")
[01:16:14.860]      // while-condition  =>  TRUE
[01:16:14.860]      // while "1"  (timeout="200")
[01:16:14.860]      // while-condition  =>  TRUE
[01:16:14.860]      // while "1"  (timeout="200")
[01:16:14.860]      // while-condition  =>  TRUE
[01:16:14.860]      // while "1"  (timeout="200")
[01:16:14.861]      // while-condition  =>  TRUE
[01:16:14.861]      // while "1"  (timeout="200")
[01:16:14.861]      // while-condition  =>  TRUE
[01:16:14.861]      // while "1"  (timeout="200")
[01:16:14.861]      // while-condition  =>  TRUE
[01:16:14.861]      // while "1"  (timeout="200")
[01:16:14.861]      // while-condition  =>  TRUE
[01:16:14.861]      // while "1"  (timeout="200")
[01:16:14.861]      // while-condition  =>  TRUE
[01:16:14.861]      // while "1"  (timeout="200")
[01:16:14.861]      // while-condition  =>  TRUE
[01:16:14.861]      // while "1"  (timeout="200")
[01:16:14.863]      // while-condition  =>  TRUE
[01:16:14.863]      // while "1"  (timeout="200")
[01:16:14.863]      // while-condition  =>  TRUE
[01:16:14.863]      // while "1"  (timeout="200")
[01:16:14.863]      // while-condition  =>  TRUE
[01:16:14.863]      // while "1"  (timeout="200")
[01:16:14.863]      // while-condition  =>  TRUE
[01:16:14.863]      // while "1"  (timeout="200")
[01:16:14.863]      // while-condition  =>  TRUE
[01:16:14.863]      // while "1"  (timeout="200")
[01:16:14.863]      // while-condition  =>  TRUE
[01:16:14.863]      // while "1"  (timeout="200")
[01:16:14.864]      // while-condition  =>  TRUE
[01:16:14.864]      // while "1"  (timeout="200")
[01:16:14.864]      // while-condition  =>  TRUE
[01:16:14.864]      // while "1"  (timeout="200")
[01:16:14.864]      // while-condition  =>  TRUE
[01:16:14.864]      // while "1"  (timeout="200")
[01:16:14.864]      // while-condition  =>  TRUE
[01:16:14.864]      // while "1"  (timeout="200")
[01:16:14.864]      // while-condition  =>  TRUE
[01:16:14.864]      // while "1"  (timeout="200")
[01:16:14.864]      // while-condition  =>  TRUE
[01:16:14.864]      // while "1"  (timeout="200")
[01:16:14.864]      // while-condition  =>  TRUE
[01:16:14.864]      // while "1"  (timeout="200")
[01:16:14.865]      // while-condition  =>  TRUE
[01:16:14.865]      // while "1"  (timeout="200")
[01:16:14.865]      // while  =>  TIMEOUT
[01:16:14.865]      // end while "1"
[01:16:14.865]    </control>
[01:16:14.865]    <control if="canReadPins" while="" timeout="0" info="">
[01:16:14.865]      // if-block "canReadPins"
[01:16:14.865]        // =>  TRUE
[01:16:14.865]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:16:14.865]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:16:14.866]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:16:14.866]        // while-condition  =>  FALSE
[01:16:14.866]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:16:14.866]      </control>
[01:16:14.866]      // end if-block "canReadPins"
[01:16:14.866]    </control>
[01:16:14.866]    <control if="!canReadPins" while="" timeout="0" info="">
[01:16:14.866]      // if-block "!canReadPins"
[01:16:14.867]        // =>  FALSE
[01:16:14.867]      // skip if-block "!canReadPins"
[01:16:14.867]    </control>
[01:16:14.867]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:16:14.867]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:14.867]        // =>  TRUE
[01:16:14.867]      <block atomic="false" info="">
[01:16:14.867]        WriteAP(0x00, 0x190008);
[01:16:14.868]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:14.868]        WriteAP(0xF0, 0x01);
[01:16:14.870]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:14.870]      </block>
[01:16:14.870]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:14.870]    </control>
[01:16:14.870]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:16:14.870]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:14.870]        // =>  FALSE
[01:16:14.870]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:14.870]    </control>
[01:16:14.870]    <block atomic="false" info="">
[01:16:14.870]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:14.872]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:16:14.872]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:16:14.872]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:14.874]      __ap = 0; //lets make sure we reset the access point selection
[01:16:14.874]        // -> [__ap <= 0x00000000]
[01:16:14.874]    </block>
[01:16:14.875]  </sequence>
[01:16:14.875]  
[01:16:14.880]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:16:14.880]  
[01:16:14.880]  <debugvars>
[01:16:14.880]    // Pre-defined
[01:16:14.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:14.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:14.881]    __dp=0x00000000
[01:16:14.881]    __ap=0x00000000
[01:16:14.881]    __traceout=0x00000000      (Trace Disabled)
[01:16:14.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:14.881]    __FlashAddr=0x00000000
[01:16:14.881]    __FlashLen=0x00000000
[01:16:14.881]    __FlashArg=0x00000000
[01:16:14.881]    __FlashOp=0x00000000
[01:16:14.882]    __Result=0x00000000
[01:16:14.882]  </debugvars>
[01:16:14.882]  
[01:16:14.882]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:16:14.882]    <block atomic="false" info="">
[01:16:14.882]      __var deviceID = 0;
[01:16:14.882]        // -> [deviceID <= 0x00000000]
[01:16:14.882]      __var version = 0;
[01:16:14.884]        // -> [version <= 0x00000000]
[01:16:14.884]      __var partNum = 0;
[01:16:14.884]        // -> [partNum <= 0x00000000]
[01:16:14.884]      __var manuf = 0;
[01:16:14.884]        // -> [manuf <= 0x00000000]
[01:16:14.884]      __var isMSPM0G1X0X_G3X0X = 0;
[01:16:14.884]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:16:14.884]      __var isProduction = 0;
[01:16:14.885]        // -> [isProduction <= 0x00000000]
[01:16:14.885]      __var continueId = 0;
[01:16:14.885]        // -> [continueId <= 0x00000000]
[01:16:14.885]      deviceID =   Read32(0x41C40004);
[01:16:14.886]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:16:14.886]        // -> [deviceID <= 0x2BB8802F]
[01:16:14.886]      version = deviceID >> 28;
[01:16:14.886]        // -> [version <= 0x00000002]
[01:16:14.886]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:16:14.886]        // -> [partNum <= 0x0000BB88]
[01:16:14.886]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:16:14.886]        // -> [manuf <= 0x00000017]
[01:16:14.887]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:16:14.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:16:14.887]      isProduction = (version > 0);
[01:16:14.887]        // -> [isProduction <= 0x00000001]
[01:16:14.887]    </block>
[01:16:14.887]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:16:14.887]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:16:14.888]        // =>  FALSE
[01:16:14.888]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:16:14.888]    </control>
[01:16:14.888]    <control if="continueId == 4" while="" timeout="0" info="">
[01:16:14.888]      // if-block "continueId == 4"
[01:16:14.889]        // =>  FALSE
[01:16:14.889]      // skip if-block "continueId == 4"
[01:16:14.889]    </control>
[01:16:14.889]    <control if="!isProduction" while="" timeout="0" info="">
[01:16:14.889]      // if-block "!isProduction"
[01:16:14.889]        // =>  FALSE
[01:16:14.889]      // skip if-block "!isProduction"
[01:16:14.889]    </control>
[01:16:14.889]  </sequence>
[01:16:14.889]  
[01:16:34.187]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:16:34.187]  
[01:16:34.188]  <debugvars>
[01:16:34.188]    // Pre-defined
[01:16:34.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:34.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:34.188]    __dp=0x00000000
[01:16:34.188]    __ap=0x00000000
[01:16:34.188]    __traceout=0x00000000      (Trace Disabled)
[01:16:34.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:34.188]    __FlashAddr=0x00000000
[01:16:34.188]    __FlashLen=0x00000000
[01:16:34.188]    __FlashArg=0x00000000
[01:16:34.188]    __FlashOp=0x00000000
[01:16:34.188]    __Result=0x00000000
[01:16:34.189]  </debugvars>
[01:16:34.189]  
[01:16:34.189]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:16:34.189]    <block atomic="false" info="">
[01:16:34.189]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:16:34.189]        // -> [isSWJ <= 0x00000001]
[01:16:34.189]      __var hasDormant = __protocol & 0x00020000;
[01:16:34.189]        // -> [hasDormant <= 0x00000000]
[01:16:34.189]      __var protType   = __protocol & 0x0000FFFF;
[01:16:34.189]        // -> [protType <= 0x00000002]
[01:16:34.189]    </block>
[01:16:34.189]    <control if="protType == 1" while="" timeout="0" info="">
[01:16:34.189]      // if-block "protType == 1"
[01:16:34.189]        // =>  FALSE
[01:16:34.189]      // skip if-block "protType == 1"
[01:16:34.191]    </control>
[01:16:34.191]    <control if="protType == 2" while="" timeout="0" info="">
[01:16:34.191]      // if-block "protType == 2"
[01:16:34.191]        // =>  TRUE
[01:16:34.191]      <control if="isSWJ" while="" timeout="0" info="">
[01:16:34.191]        // if-block "isSWJ"
[01:16:34.191]          // =>  TRUE
[01:16:34.191]        <control if="hasDormant" while="" timeout="0" info="">
[01:16:34.191]          // if-block "hasDormant"
[01:16:34.191]            // =>  FALSE
[01:16:34.191]          // skip if-block "hasDormant"
[01:16:34.191]        </control>
[01:16:34.192]        <control if="!hasDormant" while="" timeout="0" info="">
[01:16:34.192]          // if-block "!hasDormant"
[01:16:34.192]            // =>  TRUE
[01:16:34.192]          <block atomic="false" info="">
[01:16:34.192]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:16:34.192]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:34.193]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:16:34.193]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:16:34.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:16:34.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:34.194]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:16:34.194]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:16:34.194]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:16:34.195]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:34.195]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:16:34.195]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:16:34.195]          </block>
[01:16:34.196]          // end if-block "!hasDormant"
[01:16:34.196]        </control>
[01:16:34.196]        // end if-block "isSWJ"
[01:16:34.196]      </control>
[01:16:34.196]      <control if="!isSWJ" while="" timeout="0" info="">
[01:16:34.196]        // if-block "!isSWJ"
[01:16:34.197]          // =>  FALSE
[01:16:34.197]        // skip if-block "!isSWJ"
[01:16:34.197]      </control>
[01:16:34.197]      <block atomic="false" info="">
[01:16:34.197]        ReadDP(0x0);
[01:16:34.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:16:34.197]      </block>
[01:16:34.197]      // end if-block "protType == 2"
[01:16:34.198]    </control>
[01:16:34.198]  </sequence>
[01:16:34.198]  
[01:16:34.198]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:16:34.198]  
[01:16:34.198]  <debugvars>
[01:16:34.198]    // Pre-defined
[01:16:34.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:34.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:34.199]    __dp=0x00000000
[01:16:34.199]    __ap=0x00000000
[01:16:34.199]    __traceout=0x00000000      (Trace Disabled)
[01:16:34.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:34.199]    __FlashAddr=0x00000000
[01:16:34.199]    __FlashLen=0x00000000
[01:16:34.199]    __FlashArg=0x00000000
[01:16:34.199]    __FlashOp=0x00000000
[01:16:34.199]    __Result=0x00000000
[01:16:34.199]  </debugvars>
[01:16:34.199]  
[01:16:34.200]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:16:34.200]    <block atomic="false" info="">
[01:16:34.200]      __var SW_DP_ABORT       = 0x0;
[01:16:34.200]        // -> [SW_DP_ABORT <= 0x00000000]
[01:16:34.200]      __var DP_CTRL_STAT      = 0x4;
[01:16:34.200]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:16:34.200]      __var DP_SELECT         = 0x8;
[01:16:34.200]        // -> [DP_SELECT <= 0x00000008]
[01:16:34.200]      __var powered_down      = 0;
[01:16:34.201]        // -> [powered_down <= 0x00000000]
[01:16:34.201]      WriteDP(DP_SELECT, 0x00000000);
[01:16:34.201]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:16:34.201]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:16:34.202]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:16:34.202]        // -> [powered_down <= 0x00000001]
[01:16:34.202]    </block>
[01:16:34.202]    <control if="powered_down" while="" timeout="0" info="">
[01:16:34.202]      // if-block "powered_down"
[01:16:34.202]        // =>  TRUE
[01:16:34.202]      <block atomic="false" info="">
[01:16:34.204]        Message(0, "Debug/System power-up request sent");
[01:16:34.207]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:16:34.207]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:16:34.207]      </block>
[01:16:34.208]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:16:34.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:16:34.208]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:16:34.208]        // while-condition  =>  FALSE
[01:16:34.208]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:16:34.208]      </control>
[01:16:34.208]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:16:34.208]        // if-block "(__protocol & 0xFFFF) == 1"
[01:16:34.209]          // =>  FALSE
[01:16:34.209]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:16:34.209]      </control>
[01:16:34.209]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:16:34.209]        // if-block "(__protocol & 0xFFFF) == 2"
[01:16:34.209]          // =>  TRUE
[01:16:34.209]        <block atomic="false" info="">
[01:16:34.209]          Message(0, "executing SWD power up");
[01:16:34.211]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:16:34.212]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:16:34.212]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:16:34.213]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:16:34.213]        </block>
[01:16:34.213]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:16:34.213]      </control>
[01:16:34.213]      // end if-block "powered_down"
[01:16:34.213]    </control>
[01:16:34.213]    <block atomic="false" info="">
[01:16:34.214]      __var DEBUG_PORT_VAL    = 0;
[01:16:34.214]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:16:34.214]      __var ACCESS_POINT_VAL  = 0;
[01:16:34.214]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:16:34.214]      __ap = 1; 
[01:16:34.214]        // -> [__ap <= 0x00000001]
[01:16:34.214]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:16:34.215]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:16:34.215]      __ap = 4;
[01:16:34.215]        // -> [__ap <= 0x00000004]
[01:16:34.215]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:34.216]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:16:34.217]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:16:34.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:34.219]    </block>
[01:16:34.219]    <block atomic="false" info="">
[01:16:34.219]      __var nReset = 0x80;
[01:16:34.219]        // -> [nReset <= 0x00000080]
[01:16:34.219]      __var canReadPins = 0;
[01:16:34.219]        // -> [canReadPins <= 0x00000000]
[01:16:34.219]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:16:34.219]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:16:34.219]        // -> [canReadPins <= 0x00000001]
[01:16:34.219]    </block>
[01:16:34.219]    <control if="" while="1" timeout="200" info="">
[01:16:34.220]      // while "1"  (timeout="200")
[01:16:34.220]      // while-condition  =>  TRUE
[01:16:34.220]      // while "1"  (timeout="200")
[01:16:34.220]      // while-condition  =>  TRUE
[01:16:34.220]      // while "1"  (timeout="200")
[01:16:34.220]      // while-condition  =>  TRUE
[01:16:34.220]      // while "1"  (timeout="200")
[01:16:34.220]      // while-condition  =>  TRUE
[01:16:34.221]      // while "1"  (timeout="200")
[01:16:34.221]      // while-condition  =>  TRUE
[01:16:34.221]      // while "1"  (timeout="200")
[01:16:34.221]      // while-condition  =>  TRUE
[01:16:34.221]      // while "1"  (timeout="200")
[01:16:34.221]      // while-condition  =>  TRUE
[01:16:34.221]      // while "1"  (timeout="200")
[01:16:34.221]      // while-condition  =>  TRUE
[01:16:34.221]      // while "1"  (timeout="200")
[01:16:34.222]      // while-condition  =>  TRUE
[01:16:34.222]      // while "1"  (timeout="200")
[01:16:34.222]      // while-condition  =>  TRUE
[01:16:34.222]      // while "1"  (timeout="200")
[01:16:34.222]      // while-condition  =>  TRUE
[01:16:34.222]      // while "1"  (timeout="200")
[01:16:34.222]      // while-condition  =>  TRUE
[01:16:34.222]      // while "1"  (timeout="200")
[01:16:34.222]      // while-condition  =>  TRUE
[01:16:34.223]      // while "1"  (timeout="200")
[01:16:34.223]      // while-condition  =>  TRUE
[01:16:34.223]      // while "1"  (timeout="200")
[01:16:34.223]      // while-condition  =>  TRUE
[01:16:34.223]      // while "1"  (timeout="200")
[01:16:34.223]      // while-condition  =>  TRUE
[01:16:34.223]      // while "1"  (timeout="200")
[01:16:34.223]      // while-condition  =>  TRUE
[01:16:34.224]      // while "1"  (timeout="200")
[01:16:34.224]      // while-condition  =>  TRUE
[01:16:34.224]      // while "1"  (timeout="200")
[01:16:34.224]      // while-condition  =>  TRUE
[01:16:34.224]      // while "1"  (timeout="200")
[01:16:34.224]      // while-condition  =>  TRUE
[01:16:34.224]      // while "1"  (timeout="200")
[01:16:34.225]      // while-condition  =>  TRUE
[01:16:34.225]      // while "1"  (timeout="200")
[01:16:34.225]      // while  =>  TIMEOUT
[01:16:34.225]      // end while "1"
[01:16:34.225]    </control>
[01:16:34.225]    <control if="canReadPins" while="" timeout="0" info="">
[01:16:34.225]      // if-block "canReadPins"
[01:16:34.225]        // =>  TRUE
[01:16:34.225]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:16:34.225]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:16:34.226]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:16:34.226]        // while-condition  =>  FALSE
[01:16:34.226]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:16:34.226]      </control>
[01:16:34.227]      // end if-block "canReadPins"
[01:16:34.227]    </control>
[01:16:34.227]    <control if="!canReadPins" while="" timeout="0" info="">
[01:16:34.227]      // if-block "!canReadPins"
[01:16:34.227]        // =>  FALSE
[01:16:34.227]      // skip if-block "!canReadPins"
[01:16:34.227]    </control>
[01:16:34.227]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:16:34.227]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:34.227]        // =>  TRUE
[01:16:34.228]      <block atomic="false" info="">
[01:16:34.228]        WriteAP(0x00, 0x190008);
[01:16:34.228]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:34.228]        WriteAP(0xF0, 0x01);
[01:16:34.230]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:34.230]      </block>
[01:16:34.230]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:34.230]    </control>
[01:16:34.230]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:16:34.230]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:34.230]        // =>  FALSE
[01:16:34.231]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:34.231]    </control>
[01:16:34.231]    <block atomic="false" info="">
[01:16:34.231]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:34.232]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:16:34.233]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:16:34.233]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:34.234]      __ap = 0; //lets make sure we reset the access point selection
[01:16:34.234]        // -> [__ap <= 0x00000000]
[01:16:34.234]    </block>
[01:16:34.235]  </sequence>
[01:16:34.235]  
[01:16:34.240]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:16:34.240]  
[01:16:34.240]  <debugvars>
[01:16:34.240]    // Pre-defined
[01:16:34.240]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:34.240]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:34.242]    __dp=0x00000000
[01:16:34.242]    __ap=0x00000000
[01:16:34.242]    __traceout=0x00000000      (Trace Disabled)
[01:16:34.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:34.242]    __FlashAddr=0x00000000
[01:16:34.242]    __FlashLen=0x00000000
[01:16:34.242]    __FlashArg=0x00000000
[01:16:34.242]    __FlashOp=0x00000000
[01:16:34.242]    __Result=0x00000000
[01:16:34.243]  </debugvars>
[01:16:34.243]  
[01:16:34.243]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:16:34.243]    <block atomic="false" info="">
[01:16:34.243]      __var deviceID = 0;
[01:16:34.243]        // -> [deviceID <= 0x00000000]
[01:16:34.243]      __var version = 0;
[01:16:34.243]        // -> [version <= 0x00000000]
[01:16:34.243]      __var partNum = 0;
[01:16:34.243]        // -> [partNum <= 0x00000000]
[01:16:34.243]      __var manuf = 0;
[01:16:34.244]        // -> [manuf <= 0x00000000]
[01:16:34.244]      __var isMSPM0G1X0X_G3X0X = 0;
[01:16:34.244]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:16:34.244]      __var isProduction = 0;
[01:16:34.244]        // -> [isProduction <= 0x00000000]
[01:16:34.244]      __var continueId = 0;
[01:16:34.244]        // -> [continueId <= 0x00000000]
[01:16:34.244]      deviceID =   Read32(0x41C40004);
[01:16:34.245]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:16:34.245]        // -> [deviceID <= 0x2BB8802F]
[01:16:34.246]      version = deviceID >> 28;
[01:16:34.246]        // -> [version <= 0x00000002]
[01:16:34.246]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:16:34.246]        // -> [partNum <= 0x0000BB88]
[01:16:34.246]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:16:34.246]        // -> [manuf <= 0x00000017]
[01:16:34.246]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:16:34.247]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:16:34.247]      isProduction = (version > 0);
[01:16:34.247]        // -> [isProduction <= 0x00000001]
[01:16:34.247]    </block>
[01:16:34.247]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:16:34.247]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:16:34.247]        // =>  FALSE
[01:16:34.247]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:16:34.247]    </control>
[01:16:34.247]    <control if="continueId == 4" while="" timeout="0" info="">
[01:16:34.247]      // if-block "continueId == 4"
[01:16:34.247]        // =>  FALSE
[01:16:34.248]      // skip if-block "continueId == 4"
[01:16:34.248]    </control>
[01:16:34.248]    <control if="!isProduction" while="" timeout="0" info="">
[01:16:34.248]      // if-block "!isProduction"
[01:16:34.248]        // =>  FALSE
[01:16:34.248]      // skip if-block "!isProduction"
[01:16:34.248]    </control>
[01:16:34.249]  </sequence>
[01:16:34.249]  
[01:17:20.240]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:17:20.240]  
[01:17:20.248]  <debugvars>
[01:17:20.248]    // Pre-defined
[01:17:20.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:20.249]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:20.249]    __dp=0x00000000
[01:17:20.249]    __ap=0x00000000
[01:17:20.249]    __traceout=0x00000000      (Trace Disabled)
[01:17:20.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:20.249]    __FlashAddr=0x00000000
[01:17:20.249]    __FlashLen=0x00000000
[01:17:20.249]    __FlashArg=0x00000000
[01:17:20.249]    __FlashOp=0x00000000
[01:17:20.249]    __Result=0x00000000
[01:17:20.249]  </debugvars>
[01:17:20.249]  
[01:17:20.249]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:17:20.249]    <block atomic="false" info="">
[01:17:20.250]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:17:20.250]        // -> [isSWJ <= 0x00000001]
[01:17:20.250]      __var hasDormant = __protocol & 0x00020000;
[01:17:20.250]        // -> [hasDormant <= 0x00000000]
[01:17:20.250]      __var protType   = __protocol & 0x0000FFFF;
[01:17:20.250]        // -> [protType <= 0x00000002]
[01:17:20.250]    </block>
[01:17:20.250]    <control if="protType == 1" while="" timeout="0" info="">
[01:17:20.250]      // if-block "protType == 1"
[01:17:20.250]        // =>  FALSE
[01:17:20.250]      // skip if-block "protType == 1"
[01:17:20.250]    </control>
[01:17:20.252]    <control if="protType == 2" while="" timeout="0" info="">
[01:17:20.252]      // if-block "protType == 2"
[01:17:20.252]        // =>  TRUE
[01:17:20.252]      <control if="isSWJ" while="" timeout="0" info="">
[01:17:20.252]        // if-block "isSWJ"
[01:17:20.252]          // =>  TRUE
[01:17:20.252]        <control if="hasDormant" while="" timeout="0" info="">
[01:17:20.252]          // if-block "hasDormant"
[01:17:20.252]            // =>  FALSE
[01:17:20.252]          // skip if-block "hasDormant"
[01:17:20.252]        </control>
[01:17:20.253]        <control if="!hasDormant" while="" timeout="0" info="">
[01:17:20.253]          // if-block "!hasDormant"
[01:17:20.253]            // =>  TRUE
[01:17:20.253]          <block atomic="false" info="">
[01:17:20.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:17:20.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:20.254]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:17:20.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:17:20.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:17:20.255]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:20.255]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:17:20.255]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:17:20.255]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:17:20.255]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:20.255]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:17:20.256]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:17:20.256]          </block>
[01:17:20.256]          // end if-block "!hasDormant"
[01:17:20.256]        </control>
[01:17:20.256]        // end if-block "isSWJ"
[01:17:20.256]      </control>
[01:17:20.256]      <control if="!isSWJ" while="" timeout="0" info="">
[01:17:20.256]        // if-block "!isSWJ"
[01:17:20.256]          // =>  FALSE
[01:17:20.256]        // skip if-block "!isSWJ"
[01:17:20.256]      </control>
[01:17:20.256]      <block atomic="false" info="">
[01:17:20.256]        ReadDP(0x0);
[01:17:20.257]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:17:20.257]      </block>
[01:17:20.258]      // end if-block "protType == 2"
[01:17:20.258]    </control>
[01:17:20.258]  </sequence>
[01:17:20.258]  
[01:17:20.258]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:17:20.258]  
[01:17:20.258]  <debugvars>
[01:17:20.259]    // Pre-defined
[01:17:20.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:20.259]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:20.259]    __dp=0x00000000
[01:17:20.259]    __ap=0x00000000
[01:17:20.259]    __traceout=0x00000000      (Trace Disabled)
[01:17:20.259]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:20.260]    __FlashAddr=0x00000000
[01:17:20.260]    __FlashLen=0x00000000
[01:17:20.260]    __FlashArg=0x00000000
[01:17:20.260]    __FlashOp=0x00000000
[01:17:20.260]    __Result=0x00000000
[01:17:20.260]  </debugvars>
[01:17:20.260]  
[01:17:20.261]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:17:20.261]    <block atomic="false" info="">
[01:17:20.261]      __var SW_DP_ABORT       = 0x0;
[01:17:20.261]        // -> [SW_DP_ABORT <= 0x00000000]
[01:17:20.261]      __var DP_CTRL_STAT      = 0x4;
[01:17:20.261]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:17:20.261]      __var DP_SELECT         = 0x8;
[01:17:20.261]        // -> [DP_SELECT <= 0x00000008]
[01:17:20.261]      __var powered_down      = 0;
[01:17:20.261]        // -> [powered_down <= 0x00000000]
[01:17:20.261]      WriteDP(DP_SELECT, 0x00000000);
[01:17:20.262]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:17:20.262]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:17:20.262]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:17:20.262]        // -> [powered_down <= 0x00000001]
[01:17:20.262]    </block>
[01:17:20.262]    <control if="powered_down" while="" timeout="0" info="">
[01:17:20.262]      // if-block "powered_down"
[01:17:20.262]        // =>  TRUE
[01:17:20.262]      <block atomic="false" info="">
[01:17:20.264]        Message(0, "Debug/System power-up request sent");
[01:17:20.266]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:17:20.267]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:17:20.267]      </block>
[01:17:20.267]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:17:20.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:17:20.268]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:17:20.268]        // while-condition  =>  FALSE
[01:17:20.268]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:17:20.268]      </control>
[01:17:20.268]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:17:20.268]        // if-block "(__protocol & 0xFFFF) == 1"
[01:17:20.269]          // =>  FALSE
[01:17:20.269]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:17:20.269]      </control>
[01:17:20.269]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:17:20.269]        // if-block "(__protocol & 0xFFFF) == 2"
[01:17:20.269]          // =>  TRUE
[01:17:20.269]        <block atomic="false" info="">
[01:17:20.269]          Message(0, "executing SWD power up");
[01:17:20.271]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:17:20.272]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:17:20.272]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:17:20.272]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:17:20.272]        </block>
[01:17:20.273]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:17:20.273]      </control>
[01:17:20.273]      // end if-block "powered_down"
[01:17:20.273]    </control>
[01:17:20.273]    <block atomic="false" info="">
[01:17:20.273]      __var DEBUG_PORT_VAL    = 0;
[01:17:20.273]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:17:20.273]      __var ACCESS_POINT_VAL  = 0;
[01:17:20.274]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:17:20.274]      __ap = 1; 
[01:17:20.274]        // -> [__ap <= 0x00000001]
[01:17:20.274]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:17:20.275]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:17:20.275]      __ap = 4;
[01:17:20.275]        // -> [__ap <= 0x00000004]
[01:17:20.275]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:20.277]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:17:20.277]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:17:20.277]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:20.278]    </block>
[01:17:20.278]    <block atomic="false" info="">
[01:17:20.278]      __var nReset = 0x80;
[01:17:20.278]        // -> [nReset <= 0x00000080]
[01:17:20.278]      __var canReadPins = 0;
[01:17:20.279]        // -> [canReadPins <= 0x00000000]
[01:17:20.280]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:17:20.280]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:17:20.280]        // -> [canReadPins <= 0x00000001]
[01:17:20.280]    </block>
[01:17:20.280]    <control if="" while="1" timeout="200" info="">
[01:17:20.280]      // while "1"  (timeout="200")
[01:17:20.280]      // while-condition  =>  TRUE
[01:17:20.280]      // while "1"  (timeout="200")
[01:17:20.280]      // while-condition  =>  TRUE
[01:17:20.280]      // while "1"  (timeout="200")
[01:17:20.281]      // while-condition  =>  TRUE
[01:17:20.281]      // while "1"  (timeout="200")
[01:17:20.281]      // while-condition  =>  TRUE
[01:17:20.281]      // while "1"  (timeout="200")
[01:17:20.281]      // while-condition  =>  TRUE
[01:17:20.281]      // while "1"  (timeout="200")
[01:17:20.281]      // while-condition  =>  TRUE
[01:17:20.281]      // while "1"  (timeout="200")
[01:17:20.281]      // while-condition  =>  TRUE
[01:17:20.281]      // while "1"  (timeout="200")
[01:17:20.282]      // while-condition  =>  TRUE
[01:17:20.282]      // while "1"  (timeout="200")
[01:17:20.282]      // while-condition  =>  TRUE
[01:17:20.282]      // while "1"  (timeout="200")
[01:17:20.282]      // while-condition  =>  TRUE
[01:17:20.282]      // while "1"  (timeout="200")
[01:17:20.282]      // while-condition  =>  TRUE
[01:17:20.282]      // while "1"  (timeout="200")
[01:17:20.282]      // while-condition  =>  TRUE
[01:17:20.282]      // while "1"  (timeout="200")
[01:17:20.282]      // while-condition  =>  TRUE
[01:17:20.283]      // while "1"  (timeout="200")
[01:17:20.283]      // while-condition  =>  TRUE
[01:17:20.283]      // while "1"  (timeout="200")
[01:17:20.283]      // while-condition  =>  TRUE
[01:17:20.283]      // while "1"  (timeout="200")
[01:17:20.283]      // while-condition  =>  TRUE
[01:17:20.283]      // while "1"  (timeout="200")
[01:17:20.283]      // while-condition  =>  TRUE
[01:17:20.283]      // while "1"  (timeout="200")
[01:17:20.283]      // while-condition  =>  TRUE
[01:17:20.283]      // while "1"  (timeout="200")
[01:17:20.283]      // while-condition  =>  TRUE
[01:17:20.284]      // while "1"  (timeout="200")
[01:17:20.284]      // while-condition  =>  TRUE
[01:17:20.284]      // while "1"  (timeout="200")
[01:17:20.284]      // while-condition  =>  TRUE
[01:17:20.284]      // while "1"  (timeout="200")
[01:17:20.284]      // while-condition  =>  TRUE
[01:17:20.284]      // while "1"  (timeout="200")
[01:17:20.284]      // while-condition  =>  TRUE
[01:17:20.284]      // while "1"  (timeout="200")
[01:17:20.284]      // while-condition  =>  TRUE
[01:17:20.285]      // while "1"  (timeout="200")
[01:17:20.285]      // while-condition  =>  TRUE
[01:17:20.285]      // while "1"  (timeout="200")
[01:17:20.285]      // while-condition  =>  TRUE
[01:17:20.285]      // while "1"  (timeout="200")
[01:17:20.285]      // while-condition  =>  TRUE
[01:17:20.286]      // while "1"  (timeout="200")
[01:17:20.286]      // while-condition  =>  TRUE
[01:17:20.286]      // while "1"  (timeout="200")
[01:17:20.286]      // while-condition  =>  TRUE
[01:17:20.286]      // while "1"  (timeout="200")
[01:17:20.286]      // while-condition  =>  TRUE
[01:17:20.286]      // while "1"  (timeout="200")
[01:17:20.286]      // while-condition  =>  TRUE
[01:17:20.286]      // while "1"  (timeout="200")
[01:17:20.286]      // while-condition  =>  TRUE
[01:17:20.286]      // while "1"  (timeout="200")
[01:17:20.287]      // while-condition  =>  TRUE
[01:17:20.287]      // while "1"  (timeout="200")
[01:17:20.287]      // while  =>  TIMEOUT
[01:17:20.287]      // end while "1"
[01:17:20.287]    </control>
[01:17:20.287]    <control if="canReadPins" while="" timeout="0" info="">
[01:17:20.287]      // if-block "canReadPins"
[01:17:20.287]        // =>  TRUE
[01:17:20.287]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:17:20.287]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:17:20.288]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:17:20.288]        // while-condition  =>  FALSE
[01:17:20.288]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:17:20.288]      </control>
[01:17:20.288]      // end if-block "canReadPins"
[01:17:20.288]    </control>
[01:17:20.288]    <control if="!canReadPins" while="" timeout="0" info="">
[01:17:20.288]      // if-block "!canReadPins"
[01:17:20.288]        // =>  FALSE
[01:17:20.288]      // skip if-block "!canReadPins"
[01:17:20.289]    </control>
[01:17:20.289]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:17:20.289]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:20.289]        // =>  TRUE
[01:17:20.289]      <block atomic="false" info="">
[01:17:20.289]        WriteAP(0x00, 0x190008);
[01:17:20.290]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:20.290]        WriteAP(0xF0, 0x01);
[01:17:20.291]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:20.291]      </block>
[01:17:20.291]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:20.291]    </control>
[01:17:20.291]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:17:20.292]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:20.292]        // =>  FALSE
[01:17:20.292]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:20.292]    </control>
[01:17:20.292]    <block atomic="false" info="">
[01:17:20.292]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:20.293]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:17:20.293]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:17:20.294]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:20.297]      __ap = 0; //lets make sure we reset the access point selection
[01:17:20.298]        // -> [__ap <= 0x00000000]
[01:17:20.298]    </block>
[01:17:20.298]  </sequence>
[01:17:20.298]  
[01:17:20.304]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:17:20.304]  
[01:17:20.304]  <debugvars>
[01:17:20.304]    // Pre-defined
[01:17:20.304]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:20.305]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:20.305]    __dp=0x00000000
[01:17:20.305]    __ap=0x00000000
[01:17:20.305]    __traceout=0x00000000      (Trace Disabled)
[01:17:20.305]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:20.305]    __FlashAddr=0x00000000
[01:17:20.306]    __FlashLen=0x00000000
[01:17:20.306]    __FlashArg=0x00000000
[01:17:20.306]    __FlashOp=0x00000000
[01:17:20.306]    __Result=0x00000000
[01:17:20.306]  </debugvars>
[01:17:20.306]  
[01:17:20.306]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:17:20.306]    <block atomic="false" info="">
[01:17:20.306]      __var deviceID = 0;
[01:17:20.306]        // -> [deviceID <= 0x00000000]
[01:17:20.306]      __var version = 0;
[01:17:20.307]        // -> [version <= 0x00000000]
[01:17:20.307]      __var partNum = 0;
[01:17:20.307]        // -> [partNum <= 0x00000000]
[01:17:20.307]      __var manuf = 0;
[01:17:20.307]        // -> [manuf <= 0x00000000]
[01:17:20.307]      __var isMSPM0G1X0X_G3X0X = 0;
[01:17:20.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:17:20.307]      __var isProduction = 0;
[01:17:20.307]        // -> [isProduction <= 0x00000000]
[01:17:20.307]      __var continueId = 0;
[01:17:20.307]        // -> [continueId <= 0x00000000]
[01:17:20.308]      deviceID =   Read32(0x41C40004);
[01:17:20.309]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:17:20.310]        // -> [deviceID <= 0x2BB8802F]
[01:17:20.310]      version = deviceID >> 28;
[01:17:20.310]        // -> [version <= 0x00000002]
[01:17:20.310]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:17:20.310]        // -> [partNum <= 0x0000BB88]
[01:17:20.310]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:17:20.310]        // -> [manuf <= 0x00000017]
[01:17:20.310]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:17:20.310]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:17:20.310]      isProduction = (version > 0);
[01:17:20.310]        // -> [isProduction <= 0x00000001]
[01:17:20.311]    </block>
[01:17:20.311]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:17:20.311]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:17:20.311]        // =>  FALSE
[01:17:20.311]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:17:20.311]    </control>
[01:17:20.311]    <control if="continueId == 4" while="" timeout="0" info="">
[01:17:20.311]      // if-block "continueId == 4"
[01:17:20.311]        // =>  FALSE
[01:17:20.311]      // skip if-block "continueId == 4"
[01:17:20.311]    </control>
[01:17:20.312]    <control if="!isProduction" while="" timeout="0" info="">
[01:17:20.312]      // if-block "!isProduction"
[01:17:20.312]        // =>  FALSE
[01:17:20.312]      // skip if-block "!isProduction"
[01:17:20.312]    </control>
[01:17:20.312]  </sequence>
[01:17:20.312]  
[01:18:29.466]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:18:29.466]  
[01:18:29.476]  <debugvars>
[01:18:29.476]    // Pre-defined
[01:18:29.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:29.476]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:29.476]    __dp=0x00000000
[01:18:29.476]    __ap=0x00000000
[01:18:29.476]    __traceout=0x00000000      (Trace Disabled)
[01:18:29.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:29.476]    __FlashAddr=0x00000000
[01:18:29.476]    __FlashLen=0x00000000
[01:18:29.476]    __FlashArg=0x00000000
[01:18:29.477]    __FlashOp=0x00000000
[01:18:29.477]    __Result=0x00000000
[01:18:29.477]  </debugvars>
[01:18:29.477]  
[01:18:29.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:18:29.477]    <block atomic="false" info="">
[01:18:29.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:18:29.477]        // -> [isSWJ <= 0x00000001]
[01:18:29.477]      __var hasDormant = __protocol & 0x00020000;
[01:18:29.477]        // -> [hasDormant <= 0x00000000]
[01:18:29.478]      __var protType   = __protocol & 0x0000FFFF;
[01:18:29.478]        // -> [protType <= 0x00000002]
[01:18:29.478]    </block>
[01:18:29.478]    <control if="protType == 1" while="" timeout="0" info="">
[01:18:29.478]      // if-block "protType == 1"
[01:18:29.478]        // =>  FALSE
[01:18:29.478]      // skip if-block "protType == 1"
[01:18:29.479]    </control>
[01:18:29.479]    <control if="protType == 2" while="" timeout="0" info="">
[01:18:29.480]      // if-block "protType == 2"
[01:18:29.480]        // =>  TRUE
[01:18:29.480]      <control if="isSWJ" while="" timeout="0" info="">
[01:18:29.480]        // if-block "isSWJ"
[01:18:29.480]          // =>  TRUE
[01:18:29.480]        <control if="hasDormant" while="" timeout="0" info="">
[01:18:29.480]          // if-block "hasDormant"
[01:18:29.480]            // =>  FALSE
[01:18:29.480]          // skip if-block "hasDormant"
[01:18:29.480]        </control>
[01:18:29.480]        <control if="!hasDormant" while="" timeout="0" info="">
[01:18:29.480]          // if-block "!hasDormant"
[01:18:29.480]            // =>  TRUE
[01:18:29.480]          <block atomic="false" info="">
[01:18:29.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:18:29.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:29.481]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:18:29.481]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:18:29.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:18:29.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:29.481]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:18:29.483]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:18:29.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:18:29.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:29.483]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:18:29.483]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:18:29.483]          </block>
[01:18:29.483]          // end if-block "!hasDormant"
[01:18:29.484]        </control>
[01:18:29.484]        // end if-block "isSWJ"
[01:18:29.484]      </control>
[01:18:29.484]      <control if="!isSWJ" while="" timeout="0" info="">
[01:18:29.484]        // if-block "!isSWJ"
[01:18:29.484]          // =>  FALSE
[01:18:29.484]        // skip if-block "!isSWJ"
[01:18:29.484]      </control>
[01:18:29.484]      <block atomic="false" info="">
[01:18:29.484]        ReadDP(0x0);
[01:18:29.485]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:18:29.485]      </block>
[01:18:29.485]      // end if-block "protType == 2"
[01:18:29.485]    </control>
[01:18:29.485]  </sequence>
[01:18:29.485]  
[01:18:29.486]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:18:29.486]  
[01:18:29.486]  <debugvars>
[01:18:29.486]    // Pre-defined
[01:18:29.486]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:29.487]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:29.487]    __dp=0x00000000
[01:18:29.487]    __ap=0x00000000
[01:18:29.487]    __traceout=0x00000000      (Trace Disabled)
[01:18:29.487]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:29.487]    __FlashAddr=0x00000000
[01:18:29.488]    __FlashLen=0x00000000
[01:18:29.488]    __FlashArg=0x00000000
[01:18:29.488]    __FlashOp=0x00000000
[01:18:29.488]    __Result=0x00000000
[01:18:29.488]  </debugvars>
[01:18:29.488]  
[01:18:29.488]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:18:29.488]    <block atomic="false" info="">
[01:18:29.488]      __var SW_DP_ABORT       = 0x0;
[01:18:29.488]        // -> [SW_DP_ABORT <= 0x00000000]
[01:18:29.488]      __var DP_CTRL_STAT      = 0x4;
[01:18:29.488]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:18:29.488]      __var DP_SELECT         = 0x8;
[01:18:29.489]        // -> [DP_SELECT <= 0x00000008]
[01:18:29.489]      __var powered_down      = 0;
[01:18:29.489]        // -> [powered_down <= 0x00000000]
[01:18:29.489]      WriteDP(DP_SELECT, 0x00000000);
[01:18:29.489]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:18:29.490]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:18:29.490]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:18:29.490]        // -> [powered_down <= 0x00000001]
[01:18:29.490]    </block>
[01:18:29.491]    <control if="powered_down" while="" timeout="0" info="">
[01:18:29.491]      // if-block "powered_down"
[01:18:29.491]        // =>  TRUE
[01:18:29.491]      <block atomic="false" info="">
[01:18:29.491]        Message(0, "Debug/System power-up request sent");
[01:18:29.494]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:18:29.494]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:18:29.494]      </block>
[01:18:29.494]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:18:29.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:18:29.495]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:18:29.495]        // while-condition  =>  FALSE
[01:18:29.495]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:18:29.495]      </control>
[01:18:29.495]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:18:29.495]        // if-block "(__protocol & 0xFFFF) == 1"
[01:18:29.495]          // =>  FALSE
[01:18:29.495]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:18:29.495]      </control>
[01:18:29.495]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:18:29.495]        // if-block "(__protocol & 0xFFFF) == 2"
[01:18:29.495]          // =>  TRUE
[01:18:29.496]        <block atomic="false" info="">
[01:18:29.496]          Message(0, "executing SWD power up");
[01:18:29.498]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:18:29.498]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:18:29.498]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:18:29.499]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:18:29.499]        </block>
[01:18:29.499]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:18:29.500]      </control>
[01:18:29.500]      // end if-block "powered_down"
[01:18:29.500]    </control>
[01:18:29.500]    <block atomic="false" info="">
[01:18:29.500]      __var DEBUG_PORT_VAL    = 0;
[01:18:29.500]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:18:29.500]      __var ACCESS_POINT_VAL  = 0;
[01:18:29.500]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:18:29.500]      __ap = 1; 
[01:18:29.500]        // -> [__ap <= 0x00000001]
[01:18:29.500]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:18:29.502]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:18:29.502]      __ap = 4;
[01:18:29.502]        // -> [__ap <= 0x00000004]
[01:18:29.502]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:29.503]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:18:29.504]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:18:29.504]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:29.506]    </block>
[01:18:29.506]    <block atomic="false" info="">
[01:18:29.506]      __var nReset = 0x80;
[01:18:29.506]        // -> [nReset <= 0x00000080]
[01:18:29.506]      __var canReadPins = 0;
[01:18:29.506]        // -> [canReadPins <= 0x00000000]
[01:18:29.506]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:18:29.507]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:18:29.507]        // -> [canReadPins <= 0x00000001]
[01:18:29.507]    </block>
[01:18:29.507]    <control if="" while="1" timeout="200" info="">
[01:18:29.507]      // while "1"  (timeout="200")
[01:18:29.507]      // while-condition  =>  TRUE
[01:18:29.507]      // while "1"  (timeout="200")
[01:18:29.507]      // while-condition  =>  TRUE
[01:18:29.507]      // while "1"  (timeout="200")
[01:18:29.507]      // while-condition  =>  TRUE
[01:18:29.507]      // while "1"  (timeout="200")
[01:18:29.507]      // while-condition  =>  TRUE
[01:18:29.507]      // while "1"  (timeout="200")
[01:18:29.507]      // while-condition  =>  TRUE
[01:18:29.507]      // while "1"  (timeout="200")
[01:18:29.508]      // while-condition  =>  TRUE
[01:18:29.508]      // while "1"  (timeout="200")
[01:18:29.508]      // while-condition  =>  TRUE
[01:18:29.508]      // while "1"  (timeout="200")
[01:18:29.508]      // while-condition  =>  TRUE
[01:18:29.508]      // while "1"  (timeout="200")
[01:18:29.508]      // while-condition  =>  TRUE
[01:18:29.508]      // while "1"  (timeout="200")
[01:18:29.508]      // while-condition  =>  TRUE
[01:18:29.508]      // while "1"  (timeout="200")
[01:18:29.508]      // while-condition  =>  TRUE
[01:18:29.509]      // while "1"  (timeout="200")
[01:18:29.509]      // while-condition  =>  TRUE
[01:18:29.509]      // while "1"  (timeout="200")
[01:18:29.509]      // while-condition  =>  TRUE
[01:18:29.509]      // while "1"  (timeout="200")
[01:18:29.509]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.510]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.510]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.510]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.510]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.510]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.510]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.510]      // while-condition  =>  TRUE
[01:18:29.510]      // while "1"  (timeout="200")
[01:18:29.511]      // while-condition  =>  TRUE
[01:18:29.511]      // while "1"  (timeout="200")
[01:18:29.511]      // while-condition  =>  TRUE
[01:18:29.511]      // while "1"  (timeout="200")
[01:18:29.511]      // while-condition  =>  TRUE
[01:18:29.511]      // while "1"  (timeout="200")
[01:18:29.511]      // while-condition  =>  TRUE
[01:18:29.511]      // while "1"  (timeout="200")
[01:18:29.511]      // while-condition  =>  TRUE
[01:18:29.511]      // while "1"  (timeout="200")
[01:18:29.512]      // while-condition  =>  TRUE
[01:18:29.512]      // while "1"  (timeout="200")
[01:18:29.512]      // while-condition  =>  TRUE
[01:18:29.512]      // while "1"  (timeout="200")
[01:18:29.512]      // while-condition  =>  TRUE
[01:18:29.512]      // while "1"  (timeout="200")
[01:18:29.512]      // while-condition  =>  TRUE
[01:18:29.512]      // while "1"  (timeout="200")
[01:18:29.512]      // while-condition  =>  TRUE
[01:18:29.513]      // while "1"  (timeout="200")
[01:18:29.513]      // while-condition  =>  TRUE
[01:18:29.513]      // while "1"  (timeout="200")
[01:18:29.513]      // while-condition  =>  TRUE
[01:18:29.513]      // while "1"  (timeout="200")
[01:18:29.513]      // while-condition  =>  TRUE
[01:18:29.514]      // while "1"  (timeout="200")
[01:18:29.514]      // while-condition  =>  TRUE
[01:18:29.514]      // while "1"  (timeout="200")
[01:18:29.514]      // while-condition  =>  TRUE
[01:18:29.514]      // while "1"  (timeout="200")
[01:18:29.514]      // while-condition  =>  TRUE
[01:18:29.514]      // while "1"  (timeout="200")
[01:18:29.514]      // while-condition  =>  TRUE
[01:18:29.514]      // while "1"  (timeout="200")
[01:18:29.514]      // while-condition  =>  TRUE
[01:18:29.514]      // while "1"  (timeout="200")
[01:18:29.514]      // while-condition  =>  TRUE
[01:18:29.514]      // while "1"  (timeout="200")
[01:18:29.515]      // while-condition  =>  TRUE
[01:18:29.515]      // while "1"  (timeout="200")
[01:18:29.515]      // while-condition  =>  TRUE
[01:18:29.515]      // while "1"  (timeout="200")
[01:18:29.515]      // while-condition  =>  TRUE
[01:18:29.515]      // while "1"  (timeout="200")
[01:18:29.515]      // while-condition  =>  TRUE
[01:18:29.515]      // while "1"  (timeout="200")
[01:18:29.515]      // while-condition  =>  TRUE
[01:18:29.515]      // while "1"  (timeout="200")
[01:18:29.515]      // while-condition  =>  TRUE
[01:18:29.516]      // while "1"  (timeout="200")
[01:18:29.516]      // while-condition  =>  TRUE
[01:18:29.516]      // while "1"  (timeout="200")
[01:18:29.516]      // while-condition  =>  TRUE
[01:18:29.516]      // while "1"  (timeout="200")
[01:18:29.516]      // while-condition  =>  TRUE
[01:18:29.517]      // while "1"  (timeout="200")
[01:18:29.517]      // while-condition  =>  TRUE
[01:18:29.517]      // while "1"  (timeout="200")
[01:18:29.517]      // while-condition  =>  TRUE
[01:18:29.517]      // while "1"  (timeout="200")
[01:18:29.517]      // while-condition  =>  TRUE
[01:18:29.517]      // while "1"  (timeout="200")
[01:18:29.518]      // while-condition  =>  TRUE
[01:18:29.518]      // while "1"  (timeout="200")
[01:18:29.518]      // while-condition  =>  TRUE
[01:18:29.518]      // while "1"  (timeout="200")
[01:18:29.519]      // while-condition  =>  TRUE
[01:18:29.519]      // while "1"  (timeout="200")
[01:18:29.519]      // while-condition  =>  TRUE
[01:18:29.519]      // while "1"  (timeout="200")
[01:18:29.519]      // while-condition  =>  TRUE
[01:18:29.519]      // while "1"  (timeout="200")
[01:18:29.519]      // while-condition  =>  TRUE
[01:18:29.519]      // while "1"  (timeout="200")
[01:18:29.519]      // while-condition  =>  TRUE
[01:18:29.519]      // while "1"  (timeout="200")
[01:18:29.519]      // while-condition  =>  TRUE
[01:18:29.520]      // while "1"  (timeout="200")
[01:18:29.520]      // while-condition  =>  TRUE
[01:18:29.520]      // while "1"  (timeout="200")
[01:18:29.520]      // while-condition  =>  TRUE
[01:18:29.520]      // while "1"  (timeout="200")
[01:18:29.520]      // while-condition  =>  TRUE
[01:18:29.520]      // while "1"  (timeout="200")
[01:18:29.520]      // while-condition  =>  TRUE
[01:18:29.520]      // while "1"  (timeout="200")
[01:18:29.520]      // while-condition  =>  TRUE
[01:18:29.520]      // while "1"  (timeout="200")
[01:18:29.521]      // while-condition  =>  TRUE
[01:18:29.521]      // while "1"  (timeout="200")
[01:18:29.521]      // while-condition  =>  TRUE
[01:18:29.521]      // while "1"  (timeout="200")
[01:18:29.521]      // while-condition  =>  TRUE
[01:18:29.521]      // while "1"  (timeout="200")
[01:18:29.521]      // while-condition  =>  TRUE
[01:18:29.521]      // while "1"  (timeout="200")
[01:18:29.521]      // while-condition  =>  TRUE
[01:18:29.522]      // while "1"  (timeout="200")
[01:18:29.522]      // while  =>  TIMEOUT
[01:18:29.522]      // end while "1"
[01:18:29.522]    </control>
[01:18:29.522]    <control if="canReadPins" while="" timeout="0" info="">
[01:18:29.522]      // if-block "canReadPins"
[01:18:29.522]        // =>  TRUE
[01:18:29.522]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:18:29.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:18:29.523]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:18:29.523]        // while-condition  =>  FALSE
[01:18:29.523]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:18:29.523]      </control>
[01:18:29.523]      // end if-block "canReadPins"
[01:18:29.523]    </control>
[01:18:29.523]    <control if="!canReadPins" while="" timeout="0" info="">
[01:18:29.523]      // if-block "!canReadPins"
[01:18:29.523]        // =>  FALSE
[01:18:29.524]      // skip if-block "!canReadPins"
[01:18:29.524]    </control>
[01:18:29.524]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:18:29.524]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:29.524]        // =>  TRUE
[01:18:29.524]      <block atomic="false" info="">
[01:18:29.524]        WriteAP(0x00, 0x190008);
[01:18:29.525]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:29.525]        WriteAP(0xF0, 0x01);
[01:18:29.526]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:29.526]      </block>
[01:18:29.526]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:29.526]    </control>
[01:18:29.526]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:18:29.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:29.526]        // =>  FALSE
[01:18:29.526]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:29.526]    </control>
[01:18:29.526]    <block atomic="false" info="">
[01:18:29.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:29.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:18:29.528]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:18:29.528]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:29.530]      __ap = 0; //lets make sure we reset the access point selection
[01:18:29.530]        // -> [__ap <= 0x00000000]
[01:18:29.530]    </block>
[01:18:29.530]  </sequence>
[01:18:29.530]  
[01:18:29.536]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:18:29.536]  
[01:18:29.536]  <debugvars>
[01:18:29.536]    // Pre-defined
[01:18:29.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:29.536]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:29.537]    __dp=0x00000000
[01:18:29.537]    __ap=0x00000000
[01:18:29.537]    __traceout=0x00000000      (Trace Disabled)
[01:18:29.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:29.537]    __FlashAddr=0x00000000
[01:18:29.537]    __FlashLen=0x00000000
[01:18:29.537]    __FlashArg=0x00000000
[01:18:29.537]    __FlashOp=0x00000000
[01:18:29.537]    __Result=0x00000000
[01:18:29.537]  </debugvars>
[01:18:29.537]  
[01:18:29.538]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:18:29.538]    <block atomic="false" info="">
[01:18:29.538]      __var deviceID = 0;
[01:18:29.538]        // -> [deviceID <= 0x00000000]
[01:18:29.538]      __var version = 0;
[01:18:29.538]        // -> [version <= 0x00000000]
[01:18:29.538]      __var partNum = 0;
[01:18:29.538]        // -> [partNum <= 0x00000000]
[01:18:29.538]      __var manuf = 0;
[01:18:29.538]        // -> [manuf <= 0x00000000]
[01:18:29.538]      __var isMSPM0G1X0X_G3X0X = 0;
[01:18:29.538]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:18:29.539]      __var isProduction = 0;
[01:18:29.539]        // -> [isProduction <= 0x00000000]
[01:18:29.539]      __var continueId = 0;
[01:18:29.539]        // -> [continueId <= 0x00000000]
[01:18:29.540]      deviceID =   Read32(0x41C40004);
[01:18:29.541]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:18:29.541]        // -> [deviceID <= 0x2BB8802F]
[01:18:29.541]      version = deviceID >> 28;
[01:18:29.541]        // -> [version <= 0x00000002]
[01:18:29.541]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:18:29.541]        // -> [partNum <= 0x0000BB88]
[01:18:29.541]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:18:29.541]        // -> [manuf <= 0x00000017]
[01:18:29.542]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:18:29.542]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:18:29.542]      isProduction = (version > 0);
[01:18:29.542]        // -> [isProduction <= 0x00000001]
[01:18:29.542]    </block>
[01:18:29.542]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:18:29.542]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:18:29.542]        // =>  FALSE
[01:18:29.542]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:18:29.542]    </control>
[01:18:29.542]    <control if="continueId == 4" while="" timeout="0" info="">
[01:18:29.542]      // if-block "continueId == 4"
[01:18:29.543]        // =>  FALSE
[01:18:29.543]      // skip if-block "continueId == 4"
[01:18:29.543]    </control>
[01:18:29.543]    <control if="!isProduction" while="" timeout="0" info="">
[01:18:29.543]      // if-block "!isProduction"
[01:18:29.543]        // =>  FALSE
[01:18:29.543]      // skip if-block "!isProduction"
[01:18:29.544]    </control>
[01:18:29.544]  </sequence>
[01:18:29.544]  
[01:18:42.169]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:18:42.169]  
[01:18:42.178]  <debugvars>
[01:18:42.178]    // Pre-defined
[01:18:42.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:42.178]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:42.178]    __dp=0x00000000
[01:18:42.179]    __ap=0x00000000
[01:18:42.179]    __traceout=0x00000000      (Trace Disabled)
[01:18:42.179]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:42.179]    __FlashAddr=0x00000000
[01:18:42.179]    __FlashLen=0x00000000
[01:18:42.179]    __FlashArg=0x00000000
[01:18:42.179]    __FlashOp=0x00000000
[01:18:42.179]    __Result=0x00000000
[01:18:42.179]  </debugvars>
[01:18:42.179]  
[01:18:42.179]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:18:42.179]    <block atomic="false" info="">
[01:18:42.179]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:18:42.180]        // -> [isSWJ <= 0x00000001]
[01:18:42.180]      __var hasDormant = __protocol & 0x00020000;
[01:18:42.180]        // -> [hasDormant <= 0x00000000]
[01:18:42.180]      __var protType   = __protocol & 0x0000FFFF;
[01:18:42.180]        // -> [protType <= 0x00000002]
[01:18:42.180]    </block>
[01:18:42.180]    <control if="protType == 1" while="" timeout="0" info="">
[01:18:42.180]      // if-block "protType == 1"
[01:18:42.180]        // =>  FALSE
[01:18:42.180]      // skip if-block "protType == 1"
[01:18:42.180]    </control>
[01:18:42.180]    <control if="protType == 2" while="" timeout="0" info="">
[01:18:42.180]      // if-block "protType == 2"
[01:18:42.180]        // =>  TRUE
[01:18:42.181]      <control if="isSWJ" while="" timeout="0" info="">
[01:18:42.181]        // if-block "isSWJ"
[01:18:42.181]          // =>  TRUE
[01:18:42.181]        <control if="hasDormant" while="" timeout="0" info="">
[01:18:42.181]          // if-block "hasDormant"
[01:18:42.181]            // =>  FALSE
[01:18:42.181]          // skip if-block "hasDormant"
[01:18:42.181]        </control>
[01:18:42.181]        <control if="!hasDormant" while="" timeout="0" info="">
[01:18:42.181]          // if-block "!hasDormant"
[01:18:42.181]            // =>  TRUE
[01:18:42.181]          <block atomic="false" info="">
[01:18:42.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:18:42.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:42.182]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:18:42.182]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:18:42.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:18:42.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:42.183]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:18:42.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:18:42.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:18:42.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:42.184]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:18:42.184]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:18:42.184]          </block>
[01:18:42.185]          // end if-block "!hasDormant"
[01:18:42.185]        </control>
[01:18:42.185]        // end if-block "isSWJ"
[01:18:42.185]      </control>
[01:18:42.185]      <control if="!isSWJ" while="" timeout="0" info="">
[01:18:42.185]        // if-block "!isSWJ"
[01:18:42.187]          // =>  FALSE
[01:18:42.187]        // skip if-block "!isSWJ"
[01:18:42.187]      </control>
[01:18:42.187]      <block atomic="false" info="">
[01:18:42.187]        ReadDP(0x0);
[01:18:42.187]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:18:42.187]      </block>
[01:18:42.187]      // end if-block "protType == 2"
[01:18:42.187]    </control>
[01:18:42.187]  </sequence>
[01:18:42.187]  
[01:18:42.188]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:18:42.188]  
[01:18:42.188]  <debugvars>
[01:18:42.188]    // Pre-defined
[01:18:42.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:42.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:42.188]    __dp=0x00000000
[01:18:42.189]    __ap=0x00000000
[01:18:42.189]    __traceout=0x00000000      (Trace Disabled)
[01:18:42.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:42.189]    __FlashAddr=0x00000000
[01:18:42.189]    __FlashLen=0x00000000
[01:18:42.189]    __FlashArg=0x00000000
[01:18:42.189]    __FlashOp=0x00000000
[01:18:42.189]    __Result=0x00000000
[01:18:42.190]  </debugvars>
[01:18:42.190]  
[01:18:42.190]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:18:42.190]    <block atomic="false" info="">
[01:18:42.190]      __var SW_DP_ABORT       = 0x0;
[01:18:42.190]        // -> [SW_DP_ABORT <= 0x00000000]
[01:18:42.190]      __var DP_CTRL_STAT      = 0x4;
[01:18:42.190]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:18:42.190]      __var DP_SELECT         = 0x8;
[01:18:42.190]        // -> [DP_SELECT <= 0x00000008]
[01:18:42.190]      __var powered_down      = 0;
[01:18:42.190]        // -> [powered_down <= 0x00000000]
[01:18:42.190]      WriteDP(DP_SELECT, 0x00000000);
[01:18:42.192]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:18:42.192]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:18:42.193]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:18:42.193]        // -> [powered_down <= 0x00000001]
[01:18:42.193]    </block>
[01:18:42.193]    <control if="powered_down" while="" timeout="0" info="">
[01:18:42.193]      // if-block "powered_down"
[01:18:42.193]        // =>  TRUE
[01:18:42.194]      <block atomic="false" info="">
[01:18:42.194]        Message(0, "Debug/System power-up request sent");
[01:18:42.194]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:18:42.194]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:18:42.195]      </block>
[01:18:42.195]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:18:42.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:18:42.195]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:18:42.195]        // while-condition  =>  FALSE
[01:18:42.195]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:18:42.195]      </control>
[01:18:42.195]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:18:42.196]        // if-block "(__protocol & 0xFFFF) == 1"
[01:18:42.196]          // =>  FALSE
[01:18:42.196]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:18:42.196]      </control>
[01:18:42.196]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:18:42.196]        // if-block "(__protocol & 0xFFFF) == 2"
[01:18:42.196]          // =>  TRUE
[01:18:42.196]        <block atomic="false" info="">
[01:18:42.196]          Message(0, "executing SWD power up");
[01:18:42.196]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:18:42.197]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:18:42.197]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:18:42.198]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:18:42.198]        </block>
[01:18:42.198]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:18:42.198]      </control>
[01:18:42.198]      // end if-block "powered_down"
[01:18:42.198]    </control>
[01:18:42.198]    <block atomic="false" info="">
[01:18:42.198]      __var DEBUG_PORT_VAL    = 0;
[01:18:42.198]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:18:42.198]      __var ACCESS_POINT_VAL  = 0;
[01:18:42.199]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:18:42.199]      __ap = 1; 
[01:18:42.199]        // -> [__ap <= 0x00000001]
[01:18:42.199]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:18:42.200]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:18:42.200]      __ap = 4;
[01:18:42.201]        // -> [__ap <= 0x00000004]
[01:18:42.201]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:42.202]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:18:42.202]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:18:42.202]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:42.202]    </block>
[01:18:42.202]    <block atomic="false" info="">
[01:18:42.202]      __var nReset = 0x80;
[01:18:42.202]        // -> [nReset <= 0x00000080]
[01:18:42.202]      __var canReadPins = 0;
[01:18:42.202]        // -> [canReadPins <= 0x00000000]
[01:18:42.202]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:18:42.203]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:18:42.203]        // -> [canReadPins <= 0x00000001]
[01:18:42.203]    </block>
[01:18:42.203]    <control if="" while="1" timeout="200" info="">
[01:18:42.203]      // while "1"  (timeout="200")
[01:18:42.203]      // while-condition  =>  TRUE
[01:18:42.203]      // while "1"  (timeout="200")
[01:18:42.203]      // while-condition  =>  TRUE
[01:18:42.203]      // while "1"  (timeout="200")
[01:18:42.203]      // while-condition  =>  TRUE
[01:18:42.203]      // while "1"  (timeout="200")
[01:18:42.203]      // while-condition  =>  TRUE
[01:18:42.203]      // while "1"  (timeout="200")
[01:18:42.204]      // while-condition  =>  TRUE
[01:18:42.204]      // while "1"  (timeout="200")
[01:18:42.204]      // while-condition  =>  TRUE
[01:18:42.204]      // while "1"  (timeout="200")
[01:18:42.204]      // while-condition  =>  TRUE
[01:18:42.204]      // while "1"  (timeout="200")
[01:18:42.204]      // while-condition  =>  TRUE
[01:18:42.204]      // while "1"  (timeout="200")
[01:18:42.204]      // while-condition  =>  TRUE
[01:18:42.204]      // while "1"  (timeout="200")
[01:18:42.204]      // while-condition  =>  TRUE
[01:18:42.204]      // while "1"  (timeout="200")
[01:18:42.205]      // while-condition  =>  TRUE
[01:18:42.205]      // while "1"  (timeout="200")
[01:18:42.205]      // while-condition  =>  TRUE
[01:18:42.205]      // while "1"  (timeout="200")
[01:18:42.205]      // while-condition  =>  TRUE
[01:18:42.205]      // while "1"  (timeout="200")
[01:18:42.205]      // while-condition  =>  TRUE
[01:18:42.205]      // while "1"  (timeout="200")
[01:18:42.205]      // while-condition  =>  TRUE
[01:18:42.205]      // while "1"  (timeout="200")
[01:18:42.206]      // while-condition  =>  TRUE
[01:18:42.206]      // while "1"  (timeout="200")
[01:18:42.206]      // while-condition  =>  TRUE
[01:18:42.206]      // while "1"  (timeout="200")
[01:18:42.206]      // while-condition  =>  TRUE
[01:18:42.206]      // while "1"  (timeout="200")
[01:18:42.206]      // while-condition  =>  TRUE
[01:18:42.206]      // while "1"  (timeout="200")
[01:18:42.206]      // while-condition  =>  TRUE
[01:18:42.206]      // while "1"  (timeout="200")
[01:18:42.206]      // while-condition  =>  TRUE
[01:18:42.206]      // while "1"  (timeout="200")
[01:18:42.206]      // while-condition  =>  TRUE
[01:18:42.208]      // while "1"  (timeout="200")
[01:18:42.208]      // while-condition  =>  TRUE
[01:18:42.208]      // while "1"  (timeout="200")
[01:18:42.208]      // while-condition  =>  TRUE
[01:18:42.208]      // while "1"  (timeout="200")
[01:18:42.208]      // while-condition  =>  TRUE
[01:18:42.208]      // while "1"  (timeout="200")
[01:18:42.208]      // while-condition  =>  TRUE
[01:18:42.209]      // while "1"  (timeout="200")
[01:18:42.209]      // while  =>  TIMEOUT
[01:18:42.209]      // end while "1"
[01:18:42.209]    </control>
[01:18:42.209]    <control if="canReadPins" while="" timeout="0" info="">
[01:18:42.209]      // if-block "canReadPins"
[01:18:42.209]        // =>  TRUE
[01:18:42.209]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:18:42.209]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:18:42.210]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:18:42.210]        // while-condition  =>  FALSE
[01:18:42.210]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:18:42.210]      </control>
[01:18:42.210]      // end if-block "canReadPins"
[01:18:42.210]    </control>
[01:18:42.210]    <control if="!canReadPins" while="" timeout="0" info="">
[01:18:42.210]      // if-block "!canReadPins"
[01:18:42.210]        // =>  FALSE
[01:18:42.210]      // skip if-block "!canReadPins"
[01:18:42.210]    </control>
[01:18:42.210]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:18:42.210]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:42.210]        // =>  TRUE
[01:18:42.211]      <block atomic="false" info="">
[01:18:42.211]        WriteAP(0x00, 0x190008);
[01:18:42.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:42.211]        WriteAP(0xF0, 0x01);
[01:18:42.213]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:42.213]      </block>
[01:18:42.214]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:42.214]    </control>
[01:18:42.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:18:42.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:42.214]        // =>  FALSE
[01:18:42.214]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:42.214]    </control>
[01:18:42.214]    <block atomic="false" info="">
[01:18:42.214]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:42.215]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:18:42.215]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:18:42.215]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:42.219]      __ap = 0; //lets make sure we reset the access point selection
[01:18:42.220]        // -> [__ap <= 0x00000000]
[01:18:42.220]    </block>
[01:18:42.220]  </sequence>
[01:18:42.220]  
[01:18:42.226]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:18:42.226]  
[01:18:42.226]  <debugvars>
[01:18:42.226]    // Pre-defined
[01:18:42.226]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:42.226]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:42.227]    __dp=0x00000000
[01:18:42.227]    __ap=0x00000000
[01:18:42.227]    __traceout=0x00000000      (Trace Disabled)
[01:18:42.227]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:42.227]    __FlashAddr=0x00000000
[01:18:42.227]    __FlashLen=0x00000000
[01:18:42.227]    __FlashArg=0x00000000
[01:18:42.227]    __FlashOp=0x00000000
[01:18:42.227]    __Result=0x00000000
[01:18:42.227]  </debugvars>
[01:18:42.227]  
[01:18:42.228]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:18:42.228]    <block atomic="false" info="">
[01:18:42.228]      __var deviceID = 0;
[01:18:42.228]        // -> [deviceID <= 0x00000000]
[01:18:42.228]      __var version = 0;
[01:18:42.228]        // -> [version <= 0x00000000]
[01:18:42.228]      __var partNum = 0;
[01:18:42.229]        // -> [partNum <= 0x00000000]
[01:18:42.229]      __var manuf = 0;
[01:18:42.229]        // -> [manuf <= 0x00000000]
[01:18:42.229]      __var isMSPM0G1X0X_G3X0X = 0;
[01:18:42.229]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:18:42.229]      __var isProduction = 0;
[01:18:42.229]        // -> [isProduction <= 0x00000000]
[01:18:42.229]      __var continueId = 0;
[01:18:42.230]        // -> [continueId <= 0x00000000]
[01:18:42.230]      deviceID =   Read32(0x41C40004);
[01:18:42.231]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:18:42.231]        // -> [deviceID <= 0x2BB8802F]
[01:18:42.231]      version = deviceID >> 28;
[01:18:42.231]        // -> [version <= 0x00000002]
[01:18:42.231]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:18:42.231]        // -> [partNum <= 0x0000BB88]
[01:18:42.231]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:18:42.231]        // -> [manuf <= 0x00000017]
[01:18:42.231]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:18:42.231]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:18:42.231]      isProduction = (version > 0);
[01:18:42.231]        // -> [isProduction <= 0x00000001]
[01:18:42.233]    </block>
[01:18:42.233]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:18:42.233]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:18:42.233]        // =>  FALSE
[01:18:42.233]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:18:42.233]    </control>
[01:18:42.233]    <control if="continueId == 4" while="" timeout="0" info="">
[01:18:42.233]      // if-block "continueId == 4"
[01:18:42.233]        // =>  FALSE
[01:18:42.233]      // skip if-block "continueId == 4"
[01:18:42.233]    </control>
[01:18:42.233]    <control if="!isProduction" while="" timeout="0" info="">
[01:18:42.234]      // if-block "!isProduction"
[01:18:42.234]        // =>  FALSE
[01:18:42.234]      // skip if-block "!isProduction"
[01:18:42.234]    </control>
[01:18:42.234]  </sequence>
[01:18:42.234]  
[01:19:01.777]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:19:01.777]  
[01:19:01.786]  <debugvars>
[01:19:01.786]    // Pre-defined
[01:19:01.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:01.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:01.786]    __dp=0x00000000
[01:19:01.786]    __ap=0x00000000
[01:19:01.786]    __traceout=0x00000000      (Trace Disabled)
[01:19:01.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:01.786]    __FlashAddr=0x00000000
[01:19:01.786]    __FlashLen=0x00000000
[01:19:01.786]    __FlashArg=0x00000000
[01:19:01.786]    __FlashOp=0x00000000
[01:19:01.786]    __Result=0x00000000
[01:19:01.787]  </debugvars>
[01:19:01.787]  
[01:19:01.787]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:19:01.787]    <block atomic="false" info="">
[01:19:01.787]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:19:01.787]        // -> [isSWJ <= 0x00000001]
[01:19:01.787]      __var hasDormant = __protocol & 0x00020000;
[01:19:01.787]        // -> [hasDormant <= 0x00000000]
[01:19:01.787]      __var protType   = __protocol & 0x0000FFFF;
[01:19:01.787]        // -> [protType <= 0x00000002]
[01:19:01.787]    </block>
[01:19:01.787]    <control if="protType == 1" while="" timeout="0" info="">
[01:19:01.788]      // if-block "protType == 1"
[01:19:01.788]        // =>  FALSE
[01:19:01.788]      // skip if-block "protType == 1"
[01:19:01.788]    </control>
[01:19:01.788]    <control if="protType == 2" while="" timeout="0" info="">
[01:19:01.788]      // if-block "protType == 2"
[01:19:01.788]        // =>  TRUE
[01:19:01.788]      <control if="isSWJ" while="" timeout="0" info="">
[01:19:01.789]        // if-block "isSWJ"
[01:19:01.789]          // =>  TRUE
[01:19:01.789]        <control if="hasDormant" while="" timeout="0" info="">
[01:19:01.789]          // if-block "hasDormant"
[01:19:01.789]            // =>  FALSE
[01:19:01.789]          // skip if-block "hasDormant"
[01:19:01.789]        </control>
[01:19:01.789]        <control if="!hasDormant" while="" timeout="0" info="">
[01:19:01.789]          // if-block "!hasDormant"
[01:19:01.789]            // =>  TRUE
[01:19:01.789]          <block atomic="false" info="">
[01:19:01.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:19:01.790]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:01.791]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:19:01.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:19:01.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:19:01.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:01.791]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:19:01.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:19:01.793]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:19:01.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:01.793]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:19:01.794]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:19:01.794]          </block>
[01:19:01.794]          // end if-block "!hasDormant"
[01:19:01.794]        </control>
[01:19:01.794]        // end if-block "isSWJ"
[01:19:01.794]      </control>
[01:19:01.794]      <control if="!isSWJ" while="" timeout="0" info="">
[01:19:01.794]        // if-block "!isSWJ"
[01:19:01.794]          // =>  FALSE
[01:19:01.794]        // skip if-block "!isSWJ"
[01:19:01.794]      </control>
[01:19:01.795]      <block atomic="false" info="">
[01:19:01.795]        ReadDP(0x0);
[01:19:01.795]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:19:01.795]      </block>
[01:19:01.795]      // end if-block "protType == 2"
[01:19:01.795]    </control>
[01:19:01.795]  </sequence>
[01:19:01.795]  
[01:19:01.796]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:19:01.796]  
[01:19:01.796]  <debugvars>
[01:19:01.796]    // Pre-defined
[01:19:01.796]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:01.797]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:01.797]    __dp=0x00000000
[01:19:01.797]    __ap=0x00000000
[01:19:01.797]    __traceout=0x00000000      (Trace Disabled)
[01:19:01.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:01.797]    __FlashAddr=0x00000000
[01:19:01.797]    __FlashLen=0x00000000
[01:19:01.797]    __FlashArg=0x00000000
[01:19:01.798]    __FlashOp=0x00000000
[01:19:01.798]    __Result=0x00000000
[01:19:01.798]  </debugvars>
[01:19:01.798]  
[01:19:01.798]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:19:01.798]    <block atomic="false" info="">
[01:19:01.798]      __var SW_DP_ABORT       = 0x0;
[01:19:01.798]        // -> [SW_DP_ABORT <= 0x00000000]
[01:19:01.798]      __var DP_CTRL_STAT      = 0x4;
[01:19:01.798]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:19:01.799]      __var DP_SELECT         = 0x8;
[01:19:01.799]        // -> [DP_SELECT <= 0x00000008]
[01:19:01.799]      __var powered_down      = 0;
[01:19:01.799]        // -> [powered_down <= 0x00000000]
[01:19:01.799]      WriteDP(DP_SELECT, 0x00000000);
[01:19:01.799]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:19:01.800]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:19:01.800]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:19:01.801]        // -> [powered_down <= 0x00000001]
[01:19:01.801]    </block>
[01:19:01.801]    <control if="powered_down" while="" timeout="0" info="">
[01:19:01.801]      // if-block "powered_down"
[01:19:01.801]        // =>  TRUE
[01:19:01.801]      <block atomic="false" info="">
[01:19:01.801]        Message(0, "Debug/System power-up request sent");
[01:19:01.803]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:19:01.804]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:19:01.804]      </block>
[01:19:01.804]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:19:01.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:19:01.805]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:19:01.805]        // while-condition  =>  FALSE
[01:19:01.805]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:19:01.805]      </control>
[01:19:01.805]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:19:01.805]        // if-block "(__protocol & 0xFFFF) == 1"
[01:19:01.805]          // =>  FALSE
[01:19:01.805]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:19:01.805]      </control>
[01:19:01.805]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:19:01.806]        // if-block "(__protocol & 0xFFFF) == 2"
[01:19:01.806]          // =>  TRUE
[01:19:01.806]        <block atomic="false" info="">
[01:19:01.806]          Message(0, "executing SWD power up");
[01:19:01.807]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:19:01.808]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:19:01.808]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:19:01.808]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:19:01.809]        </block>
[01:19:01.809]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:19:01.809]      </control>
[01:19:01.809]      // end if-block "powered_down"
[01:19:01.809]    </control>
[01:19:01.809]    <block atomic="false" info="">
[01:19:01.809]      __var DEBUG_PORT_VAL    = 0;
[01:19:01.809]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:19:01.809]      __var ACCESS_POINT_VAL  = 0;
[01:19:01.810]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:19:01.810]      __ap = 1; 
[01:19:01.810]        // -> [__ap <= 0x00000001]
[01:19:01.810]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:19:01.812]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:19:01.812]      __ap = 4;
[01:19:01.812]        // -> [__ap <= 0x00000004]
[01:19:01.812]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:01.813]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:19:01.813]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:19:01.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:01.815]    </block>
[01:19:01.815]    <block atomic="false" info="">
[01:19:01.815]      __var nReset = 0x80;
[01:19:01.815]        // -> [nReset <= 0x00000080]
[01:19:01.815]      __var canReadPins = 0;
[01:19:01.815]        // -> [canReadPins <= 0x00000000]
[01:19:01.815]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:19:01.815]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:19:01.815]        // -> [canReadPins <= 0x00000001]
[01:19:01.816]    </block>
[01:19:01.816]    <control if="" while="1" timeout="200" info="">
[01:19:01.816]      // while "1"  (timeout="200")
[01:19:01.816]      // while-condition  =>  TRUE
[01:19:01.816]      // while "1"  (timeout="200")
[01:19:01.816]      // while-condition  =>  TRUE
[01:19:01.816]      // while "1"  (timeout="200")
[01:19:01.816]      // while-condition  =>  TRUE
[01:19:01.816]      // while "1"  (timeout="200")
[01:19:01.816]      // while-condition  =>  TRUE
[01:19:01.816]      // while "1"  (timeout="200")
[01:19:01.816]      // while-condition  =>  TRUE
[01:19:01.817]      // while "1"  (timeout="200")
[01:19:01.817]      // while-condition  =>  TRUE
[01:19:01.817]      // while "1"  (timeout="200")
[01:19:01.817]      // while-condition  =>  TRUE
[01:19:01.817]      // while "1"  (timeout="200")
[01:19:01.817]      // while-condition  =>  TRUE
[01:19:01.817]      // while "1"  (timeout="200")
[01:19:01.817]      // while-condition  =>  TRUE
[01:19:01.817]      // while "1"  (timeout="200")
[01:19:01.817]      // while-condition  =>  TRUE
[01:19:01.817]      // while "1"  (timeout="200")
[01:19:01.817]      // while-condition  =>  TRUE
[01:19:01.818]      // while "1"  (timeout="200")
[01:19:01.818]      // while  =>  TIMEOUT
[01:19:01.818]      // end while "1"
[01:19:01.818]    </control>
[01:19:01.818]    <control if="canReadPins" while="" timeout="0" info="">
[01:19:01.818]      // if-block "canReadPins"
[01:19:01.818]        // =>  TRUE
[01:19:01.818]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:19:01.818]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:19:01.819]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:19:01.819]        // while-condition  =>  FALSE
[01:19:01.819]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:19:01.819]      </control>
[01:19:01.819]      // end if-block "canReadPins"
[01:19:01.819]    </control>
[01:19:01.819]    <control if="!canReadPins" while="" timeout="0" info="">
[01:19:01.819]      // if-block "!canReadPins"
[01:19:01.819]        // =>  FALSE
[01:19:01.819]      // skip if-block "!canReadPins"
[01:19:01.819]    </control>
[01:19:01.819]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:19:01.819]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:01.820]        // =>  TRUE
[01:19:01.820]      <block atomic="false" info="">
[01:19:01.820]        WriteAP(0x00, 0x190008);
[01:19:01.820]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:01.820]        WriteAP(0xF0, 0x01);
[01:19:01.821]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:01.823]      </block>
[01:19:01.823]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:01.823]    </control>
[01:19:01.823]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:19:01.823]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:01.823]        // =>  FALSE
[01:19:01.823]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:01.823]    </control>
[01:19:01.823]    <block atomic="false" info="">
[01:19:01.823]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:01.824]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:19:01.824]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:19:01.824]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:01.827]      __ap = 0; //lets make sure we reset the access point selection
[01:19:01.827]        // -> [__ap <= 0x00000000]
[01:19:01.827]    </block>
[01:19:01.827]  </sequence>
[01:19:01.828]  
[01:19:01.834]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:19:01.834]  
[01:19:01.834]  <debugvars>
[01:19:01.834]    // Pre-defined
[01:19:01.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:01.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:01.834]    __dp=0x00000000
[01:19:01.835]    __ap=0x00000000
[01:19:01.835]    __traceout=0x00000000      (Trace Disabled)
[01:19:01.835]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:01.835]    __FlashAddr=0x00000000
[01:19:01.835]    __FlashLen=0x00000000
[01:19:01.835]    __FlashArg=0x00000000
[01:19:01.835]    __FlashOp=0x00000000
[01:19:01.835]    __Result=0x00000000
[01:19:01.835]  </debugvars>
[01:19:01.835]  
[01:19:01.835]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:19:01.835]    <block atomic="false" info="">
[01:19:01.835]      __var deviceID = 0;
[01:19:01.836]        // -> [deviceID <= 0x00000000]
[01:19:01.836]      __var version = 0;
[01:19:01.836]        // -> [version <= 0x00000000]
[01:19:01.836]      __var partNum = 0;
[01:19:01.836]        // -> [partNum <= 0x00000000]
[01:19:01.836]      __var manuf = 0;
[01:19:01.836]        // -> [manuf <= 0x00000000]
[01:19:01.836]      __var isMSPM0G1X0X_G3X0X = 0;
[01:19:01.836]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:19:01.836]      __var isProduction = 0;
[01:19:01.836]        // -> [isProduction <= 0x00000000]
[01:19:01.837]      __var continueId = 0;
[01:19:01.837]        // -> [continueId <= 0x00000000]
[01:19:01.837]      deviceID =   Read32(0x41C40004);
[01:19:01.839]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:19:01.839]        // -> [deviceID <= 0x2BB8802F]
[01:19:01.839]      version = deviceID >> 28;
[01:19:01.839]        // -> [version <= 0x00000002]
[01:19:01.839]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:19:01.839]        // -> [partNum <= 0x0000BB88]
[01:19:01.839]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:19:01.839]        // -> [manuf <= 0x00000017]
[01:19:01.839]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:19:01.839]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:19:01.839]      isProduction = (version > 0);
[01:19:01.840]        // -> [isProduction <= 0x00000001]
[01:19:01.840]    </block>
[01:19:01.840]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:19:01.840]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:19:01.840]        // =>  FALSE
[01:19:01.840]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:19:01.840]    </control>
[01:19:01.841]    <control if="continueId == 4" while="" timeout="0" info="">
[01:19:01.841]      // if-block "continueId == 4"
[01:19:01.841]        // =>  FALSE
[01:19:01.841]      // skip if-block "continueId == 4"
[01:19:01.841]    </control>
[01:19:01.841]    <control if="!isProduction" while="" timeout="0" info="">
[01:19:01.841]      // if-block "!isProduction"
[01:19:01.841]        // =>  FALSE
[01:19:01.841]      // skip if-block "!isProduction"
[01:19:01.841]    </control>
[01:19:01.841]  </sequence>
[01:19:01.841]  
[01:19:31.218]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:19:31.218]  
[01:19:31.227]  <debugvars>
[01:19:31.227]    // Pre-defined
[01:19:31.227]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:31.227]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:31.227]    __dp=0x00000000
[01:19:31.227]    __ap=0x00000000
[01:19:31.227]    __traceout=0x00000000      (Trace Disabled)
[01:19:31.227]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:31.227]    __FlashAddr=0x00000000
[01:19:31.227]    __FlashLen=0x00000000
[01:19:31.227]    __FlashArg=0x00000000
[01:19:31.228]    __FlashOp=0x00000000
[01:19:31.228]    __Result=0x00000000
[01:19:31.228]  </debugvars>
[01:19:31.229]  
[01:19:31.229]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:19:31.229]    <block atomic="false" info="">
[01:19:31.229]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:19:31.229]        // -> [isSWJ <= 0x00000001]
[01:19:31.229]      __var hasDormant = __protocol & 0x00020000;
[01:19:31.230]        // -> [hasDormant <= 0x00000000]
[01:19:31.230]      __var protType   = __protocol & 0x0000FFFF;
[01:19:31.230]        // -> [protType <= 0x00000002]
[01:19:31.230]    </block>
[01:19:31.230]    <control if="protType == 1" while="" timeout="0" info="">
[01:19:31.230]      // if-block "protType == 1"
[01:19:31.230]        // =>  FALSE
[01:19:31.230]      // skip if-block "protType == 1"
[01:19:31.230]    </control>
[01:19:31.230]    <control if="protType == 2" while="" timeout="0" info="">
[01:19:31.230]      // if-block "protType == 2"
[01:19:31.231]        // =>  TRUE
[01:19:31.231]      <control if="isSWJ" while="" timeout="0" info="">
[01:19:31.231]        // if-block "isSWJ"
[01:19:31.231]          // =>  TRUE
[01:19:31.231]        <control if="hasDormant" while="" timeout="0" info="">
[01:19:31.231]          // if-block "hasDormant"
[01:19:31.231]            // =>  FALSE
[01:19:31.231]          // skip if-block "hasDormant"
[01:19:31.231]        </control>
[01:19:31.231]        <control if="!hasDormant" while="" timeout="0" info="">
[01:19:31.231]          // if-block "!hasDormant"
[01:19:31.231]            // =>  TRUE
[01:19:31.231]          <block atomic="false" info="">
[01:19:31.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:19:31.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:31.233]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:19:31.233]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:19:31.233]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:19:31.233]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:31.233]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:19:31.234]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:19:31.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:19:31.234]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:31.234]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:19:31.234]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:19:31.235]          </block>
[01:19:31.235]          // end if-block "!hasDormant"
[01:19:31.235]        </control>
[01:19:31.235]        // end if-block "isSWJ"
[01:19:31.235]      </control>
[01:19:31.235]      <control if="!isSWJ" while="" timeout="0" info="">
[01:19:31.235]        // if-block "!isSWJ"
[01:19:31.235]          // =>  FALSE
[01:19:31.235]        // skip if-block "!isSWJ"
[01:19:31.235]      </control>
[01:19:31.235]      <block atomic="false" info="">
[01:19:31.235]        ReadDP(0x0);
[01:19:31.236]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:19:31.236]      </block>
[01:19:31.236]      // end if-block "protType == 2"
[01:19:31.236]    </control>
[01:19:31.236]  </sequence>
[01:19:31.237]  
[01:19:31.237]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:19:31.237]  
[01:19:31.237]  <debugvars>
[01:19:31.237]    // Pre-defined
[01:19:31.237]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:31.237]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:31.237]    __dp=0x00000000
[01:19:31.237]    __ap=0x00000000
[01:19:31.237]    __traceout=0x00000000      (Trace Disabled)
[01:19:31.237]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:31.238]    __FlashAddr=0x00000000
[01:19:31.238]    __FlashLen=0x00000000
[01:19:31.238]    __FlashArg=0x00000000
[01:19:31.238]    __FlashOp=0x00000000
[01:19:31.238]    __Result=0x00000000
[01:19:31.238]  </debugvars>
[01:19:31.238]  
[01:19:31.238]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:19:31.238]    <block atomic="false" info="">
[01:19:31.238]      __var SW_DP_ABORT       = 0x0;
[01:19:31.239]        // -> [SW_DP_ABORT <= 0x00000000]
[01:19:31.239]      __var DP_CTRL_STAT      = 0x4;
[01:19:31.239]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:19:31.239]      __var DP_SELECT         = 0x8;
[01:19:31.239]        // -> [DP_SELECT <= 0x00000008]
[01:19:31.239]      __var powered_down      = 0;
[01:19:31.239]        // -> [powered_down <= 0x00000000]
[01:19:31.239]      WriteDP(DP_SELECT, 0x00000000);
[01:19:31.241]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:19:31.241]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:19:31.241]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:19:31.241]        // -> [powered_down <= 0x00000001]
[01:19:31.241]    </block>
[01:19:31.241]    <control if="powered_down" while="" timeout="0" info="">
[01:19:31.242]      // if-block "powered_down"
[01:19:31.242]        // =>  TRUE
[01:19:31.242]      <block atomic="false" info="">
[01:19:31.242]        Message(0, "Debug/System power-up request sent");
[01:19:31.244]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:19:31.244]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:19:31.244]      </block>
[01:19:31.244]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:19:31.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:19:31.245]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:19:31.245]        // while-condition  =>  FALSE
[01:19:31.245]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:19:31.245]      </control>
[01:19:31.245]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:19:31.245]        // if-block "(__protocol & 0xFFFF) == 1"
[01:19:31.245]          // =>  FALSE
[01:19:31.246]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:19:31.246]      </control>
[01:19:31.246]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:19:31.246]        // if-block "(__protocol & 0xFFFF) == 2"
[01:19:31.246]          // =>  TRUE
[01:19:31.246]        <block atomic="false" info="">
[01:19:31.246]          Message(0, "executing SWD power up");
[01:19:31.248]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:19:31.248]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:19:31.249]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:19:31.250]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:19:31.250]        </block>
[01:19:31.250]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:19:31.250]      </control>
[01:19:31.250]      // end if-block "powered_down"
[01:19:31.250]    </control>
[01:19:31.250]    <block atomic="false" info="">
[01:19:31.250]      __var DEBUG_PORT_VAL    = 0;
[01:19:31.250]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:19:31.250]      __var ACCESS_POINT_VAL  = 0;
[01:19:31.250]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:19:31.250]      __ap = 1; 
[01:19:31.251]        // -> [__ap <= 0x00000001]
[01:19:31.251]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:19:31.252]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:19:31.252]      __ap = 4;
[01:19:31.252]        // -> [__ap <= 0x00000004]
[01:19:31.252]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:31.254]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:19:31.254]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:19:31.254]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:31.256]    </block>
[01:19:31.256]    <block atomic="false" info="">
[01:19:31.257]      __var nReset = 0x80;
[01:19:31.257]        // -> [nReset <= 0x00000080]
[01:19:31.257]      __var canReadPins = 0;
[01:19:31.257]        // -> [canReadPins <= 0x00000000]
[01:19:31.257]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:19:31.257]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:19:31.257]        // -> [canReadPins <= 0x00000001]
[01:19:31.257]    </block>
[01:19:31.257]    <control if="" while="1" timeout="200" info="">
[01:19:31.257]      // while "1"  (timeout="200")
[01:19:31.258]      // while-condition  =>  TRUE
[01:19:31.258]      // while "1"  (timeout="200")
[01:19:31.258]      // while-condition  =>  TRUE
[01:19:31.258]      // while "1"  (timeout="200")
[01:19:31.258]      // while-condition  =>  TRUE
[01:19:31.258]      // while "1"  (timeout="200")
[01:19:31.258]      // while-condition  =>  TRUE
[01:19:31.258]      // while "1"  (timeout="200")
[01:19:31.258]      // while-condition  =>  TRUE
[01:19:31.259]      // while "1"  (timeout="200")
[01:19:31.259]      // while-condition  =>  TRUE
[01:19:31.259]      // while "1"  (timeout="200")
[01:19:31.260]      // while-condition  =>  TRUE
[01:19:31.260]      // while "1"  (timeout="200")
[01:19:31.260]      // while-condition  =>  TRUE
[01:19:31.260]      // while "1"  (timeout="200")
[01:19:31.260]      // while-condition  =>  TRUE
[01:19:31.260]      // while "1"  (timeout="200")
[01:19:31.260]      // while-condition  =>  TRUE
[01:19:31.260]      // while "1"  (timeout="200")
[01:19:31.260]      // while-condition  =>  TRUE
[01:19:31.260]      // while "1"  (timeout="200")
[01:19:31.260]      // while-condition  =>  TRUE
[01:19:31.260]      // while "1"  (timeout="200")
[01:19:31.260]      // while-condition  =>  TRUE
[01:19:31.261]      // while "1"  (timeout="200")
[01:19:31.261]      // while-condition  =>  TRUE
[01:19:31.261]      // while "1"  (timeout="200")
[01:19:31.261]      // while-condition  =>  TRUE
[01:19:31.261]      // while "1"  (timeout="200")
[01:19:31.261]      // while-condition  =>  TRUE
[01:19:31.261]      // while "1"  (timeout="200")
[01:19:31.261]      // while-condition  =>  TRUE
[01:19:31.261]      // while "1"  (timeout="200")
[01:19:31.262]      // while-condition  =>  TRUE
[01:19:31.262]      // while "1"  (timeout="200")
[01:19:31.262]      // while-condition  =>  TRUE
[01:19:31.262]      // while "1"  (timeout="200")
[01:19:31.262]      // while-condition  =>  TRUE
[01:19:31.262]      // while "1"  (timeout="200")
[01:19:31.262]      // while-condition  =>  TRUE
[01:19:31.262]      // while "1"  (timeout="200")
[01:19:31.262]      // while-condition  =>  TRUE
[01:19:31.262]      // while "1"  (timeout="200")
[01:19:31.262]      // while-condition  =>  TRUE
[01:19:31.262]      // while "1"  (timeout="200")
[01:19:31.263]      // while-condition  =>  TRUE
[01:19:31.263]      // while "1"  (timeout="200")
[01:19:31.263]      // while-condition  =>  TRUE
[01:19:31.263]      // while "1"  (timeout="200")
[01:19:31.263]      // while-condition  =>  TRUE
[01:19:31.263]      // while "1"  (timeout="200")
[01:19:31.263]      // while-condition  =>  TRUE
[01:19:31.263]      // while "1"  (timeout="200")
[01:19:31.263]      // while-condition  =>  TRUE
[01:19:31.263]      // while "1"  (timeout="200")
[01:19:31.263]      // while-condition  =>  TRUE
[01:19:31.264]      // while "1"  (timeout="200")
[01:19:31.264]      // while-condition  =>  TRUE
[01:19:31.264]      // while "1"  (timeout="200")
[01:19:31.264]      // while-condition  =>  TRUE
[01:19:31.264]      // while "1"  (timeout="200")
[01:19:31.264]      // while-condition  =>  TRUE
[01:19:31.264]      // while "1"  (timeout="200")
[01:19:31.264]      // while-condition  =>  TRUE
[01:19:31.264]      // while "1"  (timeout="200")
[01:19:31.264]      // while-condition  =>  TRUE
[01:19:31.264]      // while "1"  (timeout="200")
[01:19:31.265]      // while-condition  =>  TRUE
[01:19:31.265]      // while "1"  (timeout="200")
[01:19:31.265]      // while-condition  =>  TRUE
[01:19:31.265]      // while "1"  (timeout="200")
[01:19:31.265]      // while-condition  =>  TRUE
[01:19:31.265]      // while "1"  (timeout="200")
[01:19:31.265]      // while-condition  =>  TRUE
[01:19:31.265]      // while "1"  (timeout="200")
[01:19:31.265]      // while-condition  =>  TRUE
[01:19:31.265]      // while "1"  (timeout="200")
[01:19:31.265]      // while-condition  =>  TRUE
[01:19:31.266]      // while "1"  (timeout="200")
[01:19:31.266]      // while-condition  =>  TRUE
[01:19:31.266]      // while "1"  (timeout="200")
[01:19:31.266]      // while-condition  =>  TRUE
[01:19:31.266]      // while "1"  (timeout="200")
[01:19:31.266]      // while-condition  =>  TRUE
[01:19:31.266]      // while "1"  (timeout="200")
[01:19:31.266]      // while-condition  =>  TRUE
[01:19:31.266]      // while "1"  (timeout="200")
[01:19:31.266]      // while-condition  =>  TRUE
[01:19:31.266]      // while "1"  (timeout="200")
[01:19:31.267]      // while-condition  =>  TRUE
[01:19:31.267]      // while "1"  (timeout="200")
[01:19:31.267]      // while-condition  =>  TRUE
[01:19:31.267]      // while "1"  (timeout="200")
[01:19:31.267]      // while-condition  =>  TRUE
[01:19:31.267]      // while "1"  (timeout="200")
[01:19:31.267]      // while-condition  =>  TRUE
[01:19:31.267]      // while "1"  (timeout="200")
[01:19:31.267]      // while-condition  =>  TRUE
[01:19:31.267]      // while "1"  (timeout="200")
[01:19:31.267]      // while-condition  =>  TRUE
[01:19:31.268]      // while "1"  (timeout="200")
[01:19:31.268]      // while-condition  =>  TRUE
[01:19:31.268]      // while "1"  (timeout="200")
[01:19:31.269]      // while-condition  =>  TRUE
[01:19:31.269]      // while "1"  (timeout="200")
[01:19:31.269]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.270]      // while-condition  =>  TRUE
[01:19:31.270]      // while "1"  (timeout="200")
[01:19:31.271]      // while-condition  =>  TRUE
[01:19:31.271]      // while "1"  (timeout="200")
[01:19:31.271]      // while-condition  =>  TRUE
[01:19:31.271]      // while "1"  (timeout="200")
[01:19:31.271]      // while-condition  =>  TRUE
[01:19:31.271]      // while "1"  (timeout="200")
[01:19:31.271]      // while-condition  =>  TRUE
[01:19:31.271]      // while "1"  (timeout="200")
[01:19:31.271]      // while-condition  =>  TRUE
[01:19:31.271]      // while "1"  (timeout="200")
[01:19:31.271]      // while-condition  =>  TRUE
[01:19:31.271]      // while "1"  (timeout="200")
[01:19:31.272]      // while-condition  =>  TRUE
[01:19:31.272]      // while "1"  (timeout="200")
[01:19:31.272]      // while  =>  TIMEOUT
[01:19:31.272]      // end while "1"
[01:19:31.272]    </control>
[01:19:31.272]    <control if="canReadPins" while="" timeout="0" info="">
[01:19:31.272]      // if-block "canReadPins"
[01:19:31.272]        // =>  TRUE
[01:19:31.273]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:19:31.273]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:19:31.273]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:19:31.273]        // while-condition  =>  FALSE
[01:19:31.273]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:19:31.273]      </control>
[01:19:31.274]      // end if-block "canReadPins"
[01:19:31.274]    </control>
[01:19:31.274]    <control if="!canReadPins" while="" timeout="0" info="">
[01:19:31.274]      // if-block "!canReadPins"
[01:19:31.274]        // =>  FALSE
[01:19:31.274]      // skip if-block "!canReadPins"
[01:19:31.274]    </control>
[01:19:31.274]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:19:31.274]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:31.275]        // =>  TRUE
[01:19:31.275]      <block atomic="false" info="">
[01:19:31.275]        WriteAP(0x00, 0x190008);
[01:19:31.276]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:31.276]        WriteAP(0xF0, 0x01);
[01:19:31.278]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:31.278]      </block>
[01:19:31.278]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:31.278]    </control>
[01:19:31.278]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:19:31.278]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:31.278]        // =>  FALSE
[01:19:31.278]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:31.278]    </control>
[01:19:31.278]    <block atomic="false" info="">
[01:19:31.278]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:31.279]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:19:31.280]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:19:31.280]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:31.281]      __ap = 0; //lets make sure we reset the access point selection
[01:19:31.281]        // -> [__ap <= 0x00000000]
[01:19:31.281]    </block>
[01:19:31.281]  </sequence>
[01:19:31.281]  
[01:19:31.288]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:19:31.288]  
[01:19:31.288]  <debugvars>
[01:19:31.288]    // Pre-defined
[01:19:31.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:31.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:31.288]    __dp=0x00000000
[01:19:31.288]    __ap=0x00000000
[01:19:31.288]    __traceout=0x00000000      (Trace Disabled)
[01:19:31.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:31.288]    __FlashAddr=0x00000000
[01:19:31.289]    __FlashLen=0x00000000
[01:19:31.289]    __FlashArg=0x00000000
[01:19:31.289]    __FlashOp=0x00000000
[01:19:31.289]    __Result=0x00000000
[01:19:31.289]  </debugvars>
[01:19:31.289]  
[01:19:31.289]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:19:31.290]    <block atomic="false" info="">
[01:19:31.290]      __var deviceID = 0;
[01:19:31.290]        // -> [deviceID <= 0x00000000]
[01:19:31.290]      __var version = 0;
[01:19:31.290]        // -> [version <= 0x00000000]
[01:19:31.290]      __var partNum = 0;
[01:19:31.290]        // -> [partNum <= 0x00000000]
[01:19:31.290]      __var manuf = 0;
[01:19:31.290]        // -> [manuf <= 0x00000000]
[01:19:31.290]      __var isMSPM0G1X0X_G3X0X = 0;
[01:19:31.290]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:19:31.291]      __var isProduction = 0;
[01:19:31.291]        // -> [isProduction <= 0x00000000]
[01:19:31.291]      __var continueId = 0;
[01:19:31.291]        // -> [continueId <= 0x00000000]
[01:19:31.291]      deviceID =   Read32(0x41C40004);
[01:19:31.292]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:19:31.293]        // -> [deviceID <= 0x2BB8802F]
[01:19:31.293]      version = deviceID >> 28;
[01:19:31.293]        // -> [version <= 0x00000002]
[01:19:31.293]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:19:31.293]        // -> [partNum <= 0x0000BB88]
[01:19:31.293]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:19:31.293]        // -> [manuf <= 0x00000017]
[01:19:31.294]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:19:31.294]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:19:31.294]      isProduction = (version > 0);
[01:19:31.294]        // -> [isProduction <= 0x00000001]
[01:19:31.294]    </block>
[01:19:31.294]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:19:31.294]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:19:31.294]        // =>  FALSE
[01:19:31.294]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:19:31.295]    </control>
[01:19:31.295]    <control if="continueId == 4" while="" timeout="0" info="">
[01:19:31.295]      // if-block "continueId == 4"
[01:19:31.295]        // =>  FALSE
[01:19:31.295]      // skip if-block "continueId == 4"
[01:19:31.295]    </control>
[01:19:31.295]    <control if="!isProduction" while="" timeout="0" info="">
[01:19:31.295]      // if-block "!isProduction"
[01:19:31.295]        // =>  FALSE
[01:19:31.295]      // skip if-block "!isProduction"
[01:19:31.295]    </control>
[01:19:31.295]  </sequence>
[01:19:31.296]  
[01:23:28.597]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:23:28.597]  
[01:23:28.597]  <debugvars>
[01:23:28.597]    // Pre-defined
[01:23:28.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:28.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:28.597]    __dp=0x00000000
[01:23:28.597]    __ap=0x00000000
[01:23:28.598]    __traceout=0x00000000      (Trace Disabled)
[01:23:28.598]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:28.598]    __FlashAddr=0x00000000
[01:23:28.598]    __FlashLen=0x00000000
[01:23:28.598]    __FlashArg=0x00000000
[01:23:28.598]    __FlashOp=0x00000000
[01:23:28.598]    __Result=0x00000000
[01:23:28.598]  </debugvars>
[01:23:28.599]  
[01:23:28.599]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:23:28.599]    <block atomic="false" info="">
[01:23:28.599]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:23:28.599]        // -> [isSWJ <= 0x00000001]
[01:23:28.599]      __var hasDormant = __protocol & 0x00020000;
[01:23:28.599]        // -> [hasDormant <= 0x00000000]
[01:23:28.599]      __var protType   = __protocol & 0x0000FFFF;
[01:23:28.599]        // -> [protType <= 0x00000002]
[01:23:28.599]    </block>
[01:23:28.599]    <control if="protType == 1" while="" timeout="0" info="">
[01:23:28.599]      // if-block "protType == 1"
[01:23:28.601]        // =>  FALSE
[01:23:28.601]      // skip if-block "protType == 1"
[01:23:28.601]    </control>
[01:23:28.601]    <control if="protType == 2" while="" timeout="0" info="">
[01:23:28.601]      // if-block "protType == 2"
[01:23:28.601]        // =>  TRUE
[01:23:28.601]      <control if="isSWJ" while="" timeout="0" info="">
[01:23:28.601]        // if-block "isSWJ"
[01:23:28.601]          // =>  TRUE
[01:23:28.601]        <control if="hasDormant" while="" timeout="0" info="">
[01:23:28.601]          // if-block "hasDormant"
[01:23:28.602]            // =>  FALSE
[01:23:28.602]          // skip if-block "hasDormant"
[01:23:28.602]        </control>
[01:23:28.602]        <control if="!hasDormant" while="" timeout="0" info="">
[01:23:28.602]          // if-block "!hasDormant"
[01:23:28.602]            // =>  TRUE
[01:23:28.602]          <block atomic="false" info="">
[01:23:28.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:23:28.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:28.603]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:23:28.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:23:28.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:23:28.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:28.603]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:23:28.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:23:28.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:23:28.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:28.604]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:23:28.604]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:23:28.604]          </block>
[01:23:28.604]          // end if-block "!hasDormant"
[01:23:28.604]        </control>
[01:23:28.605]        // end if-block "isSWJ"
[01:23:28.605]      </control>
[01:23:28.605]      <control if="!isSWJ" while="" timeout="0" info="">
[01:23:28.605]        // if-block "!isSWJ"
[01:23:28.605]          // =>  FALSE
[01:23:28.605]        // skip if-block "!isSWJ"
[01:23:28.605]      </control>
[01:23:28.605]      <block atomic="false" info="">
[01:23:28.605]        ReadDP(0x0);
[01:23:28.606]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:23:28.606]      </block>
[01:23:28.606]      // end if-block "protType == 2"
[01:23:28.606]    </control>
[01:23:28.606]  </sequence>
[01:23:28.606]  
[01:23:28.607]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:23:28.607]  
[01:23:28.607]  <debugvars>
[01:23:28.607]    // Pre-defined
[01:23:28.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:28.607]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:28.607]    __dp=0x00000000
[01:23:28.607]    __ap=0x00000000
[01:23:28.608]    __traceout=0x00000000      (Trace Disabled)
[01:23:28.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:28.608]    __FlashAddr=0x00000000
[01:23:28.608]    __FlashLen=0x00000000
[01:23:28.608]    __FlashArg=0x00000000
[01:23:28.608]    __FlashOp=0x00000000
[01:23:28.608]    __Result=0x00000000
[01:23:28.608]  </debugvars>
[01:23:28.608]  
[01:23:28.608]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:23:28.608]    <block atomic="false" info="">
[01:23:28.608]      __var SW_DP_ABORT       = 0x0;
[01:23:28.608]        // -> [SW_DP_ABORT <= 0x00000000]
[01:23:28.608]      __var DP_CTRL_STAT      = 0x4;
[01:23:28.608]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:23:28.610]      __var DP_SELECT         = 0x8;
[01:23:28.610]        // -> [DP_SELECT <= 0x00000008]
[01:23:28.610]      __var powered_down      = 0;
[01:23:28.610]        // -> [powered_down <= 0x00000000]
[01:23:28.610]      WriteDP(DP_SELECT, 0x00000000);
[01:23:28.611]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:23:28.611]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:23:28.611]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:23:28.611]        // -> [powered_down <= 0x00000001]
[01:23:28.611]    </block>
[01:23:28.611]    <control if="powered_down" while="" timeout="0" info="">
[01:23:28.611]      // if-block "powered_down"
[01:23:28.611]        // =>  TRUE
[01:23:28.611]      <block atomic="false" info="">
[01:23:28.611]        Message(0, "Debug/System power-up request sent");
[01:23:28.614]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:23:28.615]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:23:28.615]      </block>
[01:23:28.615]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:23:28.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:23:28.615]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:23:28.615]        // while-condition  =>  FALSE
[01:23:28.615]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:23:28.615]      </control>
[01:23:28.616]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:23:28.616]        // if-block "(__protocol & 0xFFFF) == 1"
[01:23:28.616]          // =>  FALSE
[01:23:28.616]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:23:28.616]      </control>
[01:23:28.616]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:23:28.616]        // if-block "(__protocol & 0xFFFF) == 2"
[01:23:28.616]          // =>  TRUE
[01:23:28.616]        <block atomic="false" info="">
[01:23:28.616]          Message(0, "executing SWD power up");
[01:23:28.619]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:23:28.619]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:23:28.619]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:23:28.620]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:23:28.620]        </block>
[01:23:28.620]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:23:28.620]      </control>
[01:23:28.620]      // end if-block "powered_down"
[01:23:28.621]    </control>
[01:23:28.621]    <block atomic="false" info="">
[01:23:28.621]      __var DEBUG_PORT_VAL    = 0;
[01:23:28.621]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:23:28.621]      __var ACCESS_POINT_VAL  = 0;
[01:23:28.621]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:23:28.621]      __ap = 1; 
[01:23:28.621]        // -> [__ap <= 0x00000001]
[01:23:28.622]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:23:28.623]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:23:28.623]      __ap = 4;
[01:23:28.623]        // -> [__ap <= 0x00000004]
[01:23:28.623]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:28.624]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.624]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:23:28.624]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:28.627]    </block>
[01:23:28.627]    <block atomic="false" info="">
[01:23:28.627]      __var nReset = 0x80;
[01:23:28.627]        // -> [nReset <= 0x00000080]
[01:23:28.627]      __var canReadPins = 0;
[01:23:28.627]        // -> [canReadPins <= 0x00000000]
[01:23:28.627]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:23:28.628]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:23:28.628]        // -> [canReadPins <= 0x00000001]
[01:23:28.628]    </block>
[01:23:28.628]    <control if="" while="1" timeout="200" info="">
[01:23:28.628]      // while "1"  (timeout="200")
[01:23:28.628]      // while-condition  =>  TRUE
[01:23:28.629]      // while "1"  (timeout="200")
[01:23:28.629]      // while-condition  =>  TRUE
[01:23:28.629]      // while "1"  (timeout="200")
[01:23:28.629]      // while-condition  =>  TRUE
[01:23:28.629]      // while "1"  (timeout="200")
[01:23:28.629]      // while-condition  =>  TRUE
[01:23:28.629]      // while "1"  (timeout="200")
[01:23:28.629]      // while-condition  =>  TRUE
[01:23:28.629]      // while "1"  (timeout="200")
[01:23:28.629]      // while-condition  =>  TRUE
[01:23:28.629]      // while "1"  (timeout="200")
[01:23:28.630]      // while-condition  =>  TRUE
[01:23:28.630]      // while "1"  (timeout="200")
[01:23:28.630]      // while-condition  =>  TRUE
[01:23:28.630]      // while "1"  (timeout="200")
[01:23:28.630]      // while-condition  =>  TRUE
[01:23:28.631]      // while "1"  (timeout="200")
[01:23:28.631]      // while  =>  TIMEOUT
[01:23:28.631]      // end while "1"
[01:23:28.631]    </control>
[01:23:28.631]    <control if="canReadPins" while="" timeout="0" info="">
[01:23:28.631]      // if-block "canReadPins"
[01:23:28.631]        // =>  TRUE
[01:23:28.631]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:23:28.631]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:23:28.632]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:23:28.632]        // while-condition  =>  FALSE
[01:23:28.632]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:23:28.632]      </control>
[01:23:28.632]      // end if-block "canReadPins"
[01:23:28.632]    </control>
[01:23:28.632]    <control if="!canReadPins" while="" timeout="0" info="">
[01:23:28.632]      // if-block "!canReadPins"
[01:23:28.633]        // =>  FALSE
[01:23:28.633]      // skip if-block "!canReadPins"
[01:23:28.633]    </control>
[01:23:28.633]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:23:28.633]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:28.633]        // =>  TRUE
[01:23:28.633]      <block atomic="false" info="">
[01:23:28.633]        WriteAP(0x00, 0x190008);
[01:23:28.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.634]        WriteAP(0xF0, 0x01);
[01:23:28.635]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.635]      </block>
[01:23:28.635]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:28.635]    </control>
[01:23:28.635]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:23:28.635]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:28.637]        // =>  FALSE
[01:23:28.637]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:28.637]    </control>
[01:23:28.637]    <block atomic="false" info="">
[01:23:28.637]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:28.638]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.638]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:23:28.638]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:28.640]      __ap = 0; //lets make sure we reset the access point selection
[01:23:28.640]        // -> [__ap <= 0x00000000]
[01:23:28.640]    </block>
[01:23:28.640]  </sequence>
[01:23:28.640]  
[01:23:28.646]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:23:28.646]  
[01:23:28.646]  <debugvars>
[01:23:28.647]    // Pre-defined
[01:23:28.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:28.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:28.647]    __dp=0x00000000
[01:23:28.647]    __ap=0x00000000
[01:23:28.647]    __traceout=0x00000000      (Trace Disabled)
[01:23:28.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:28.647]    __FlashAddr=0x00000000
[01:23:28.647]    __FlashLen=0x00000000
[01:23:28.647]    __FlashArg=0x00000000
[01:23:28.647]    __FlashOp=0x00000000
[01:23:28.648]    __Result=0x00000000
[01:23:28.648]  </debugvars>
[01:23:28.648]  
[01:23:28.648]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:23:28.648]    <block atomic="false" info="">
[01:23:28.648]      __var deviceID = 0;
[01:23:28.648]        // -> [deviceID <= 0x00000000]
[01:23:28.648]      __var version = 0;
[01:23:28.649]        // -> [version <= 0x00000000]
[01:23:28.649]      __var partNum = 0;
[01:23:28.649]        // -> [partNum <= 0x00000000]
[01:23:28.649]      __var manuf = 0;
[01:23:28.649]        // -> [manuf <= 0x00000000]
[01:23:28.649]      __var isMSPM0G1X0X_G3X0X = 0;
[01:23:28.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:23:28.649]      __var isProduction = 0;
[01:23:28.650]        // -> [isProduction <= 0x00000000]
[01:23:28.650]      __var continueId = 0;
[01:23:28.650]        // -> [continueId <= 0x00000000]
[01:23:28.650]      deviceID =   Read32(0x41C40004);
[01:23:28.651]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:23:28.651]        // -> [deviceID <= 0x2BB8802F]
[01:23:28.651]      version = deviceID >> 28;
[01:23:28.651]        // -> [version <= 0x00000002]
[01:23:28.651]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:23:28.651]        // -> [partNum <= 0x0000BB88]
[01:23:28.652]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:23:28.652]        // -> [manuf <= 0x00000017]
[01:23:28.652]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:23:28.652]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:23:28.652]      isProduction = (version > 0);
[01:23:28.652]        // -> [isProduction <= 0x00000001]
[01:23:28.652]    </block>
[01:23:28.652]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:23:28.652]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:23:28.652]        // =>  FALSE
[01:23:28.652]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:23:28.652]    </control>
[01:23:28.653]    <control if="continueId == 4" while="" timeout="0" info="">
[01:23:28.653]      // if-block "continueId == 4"
[01:23:28.653]        // =>  FALSE
[01:23:28.653]      // skip if-block "continueId == 4"
[01:23:28.653]    </control>
[01:23:28.653]    <control if="!isProduction" while="" timeout="0" info="">
[01:23:28.653]      // if-block "!isProduction"
[01:23:28.653]        // =>  FALSE
[01:23:28.653]      // skip if-block "!isProduction"
[01:23:28.653]    </control>
[01:23:28.653]  </sequence>
[01:23:28.654]  
[01:24:52.439]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:24:52.439]  
[01:24:52.447]  <debugvars>
[01:24:52.447]    // Pre-defined
[01:24:52.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:52.447]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:52.447]    __dp=0x00000000
[01:24:52.447]    __ap=0x00000000
[01:24:52.447]    __traceout=0x00000000      (Trace Disabled)
[01:24:52.447]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:52.447]    __FlashAddr=0x00000000
[01:24:52.447]    __FlashLen=0x00000000
[01:24:52.447]    __FlashArg=0x00000000
[01:24:52.447]    __FlashOp=0x00000000
[01:24:52.447]    __Result=0x00000000
[01:24:52.449]  </debugvars>
[01:24:52.449]  
[01:24:52.449]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:24:52.449]    <block atomic="false" info="">
[01:24:52.449]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:24:52.449]        // -> [isSWJ <= 0x00000001]
[01:24:52.449]      __var hasDormant = __protocol & 0x00020000;
[01:24:52.449]        // -> [hasDormant <= 0x00000000]
[01:24:52.449]      __var protType   = __protocol & 0x0000FFFF;
[01:24:52.449]        // -> [protType <= 0x00000002]
[01:24:52.449]    </block>
[01:24:52.449]    <control if="protType == 1" while="" timeout="0" info="">
[01:24:52.449]      // if-block "protType == 1"
[01:24:52.449]        // =>  FALSE
[01:24:52.450]      // skip if-block "protType == 1"
[01:24:52.450]    </control>
[01:24:52.450]    <control if="protType == 2" while="" timeout="0" info="">
[01:24:52.450]      // if-block "protType == 2"
[01:24:52.450]        // =>  TRUE
[01:24:52.450]      <control if="isSWJ" while="" timeout="0" info="">
[01:24:52.450]        // if-block "isSWJ"
[01:24:52.450]          // =>  TRUE
[01:24:52.450]        <control if="hasDormant" while="" timeout="0" info="">
[01:24:52.450]          // if-block "hasDormant"
[01:24:52.450]            // =>  FALSE
[01:24:52.450]          // skip if-block "hasDormant"
[01:24:52.451]        </control>
[01:24:52.451]        <control if="!hasDormant" while="" timeout="0" info="">
[01:24:52.451]          // if-block "!hasDormant"
[01:24:52.451]            // =>  TRUE
[01:24:52.451]          <block atomic="false" info="">
[01:24:52.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:24:52.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:52.452]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:24:52.452]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:24:52.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:24:52.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:52.453]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:24:52.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:24:52.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:24:52.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:52.455]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:24:52.455]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:24:52.455]          </block>
[01:24:52.455]          // end if-block "!hasDormant"
[01:24:52.455]        </control>
[01:24:52.455]        // end if-block "isSWJ"
[01:24:52.455]      </control>
[01:24:52.455]      <control if="!isSWJ" while="" timeout="0" info="">
[01:24:52.455]        // if-block "!isSWJ"
[01:24:52.455]          // =>  FALSE
[01:24:52.455]        // skip if-block "!isSWJ"
[01:24:52.455]      </control>
[01:24:52.455]      <block atomic="false" info="">
[01:24:52.455]        ReadDP(0x0);
[01:24:52.456]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:24:52.456]      </block>
[01:24:52.456]      // end if-block "protType == 2"
[01:24:52.456]    </control>
[01:24:52.456]  </sequence>
[01:24:52.456]  
[01:24:52.458]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:24:52.458]  
[01:24:52.458]  <debugvars>
[01:24:52.458]    // Pre-defined
[01:24:52.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:52.458]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:52.458]    __dp=0x00000000
[01:24:52.458]    __ap=0x00000000
[01:24:52.458]    __traceout=0x00000000      (Trace Disabled)
[01:24:52.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:52.458]    __FlashAddr=0x00000000
[01:24:52.458]    __FlashLen=0x00000000
[01:24:52.459]    __FlashArg=0x00000000
[01:24:52.459]    __FlashOp=0x00000000
[01:24:52.459]    __Result=0x00000000
[01:24:52.459]  </debugvars>
[01:24:52.459]  
[01:24:52.459]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:24:52.459]    <block atomic="false" info="">
[01:24:52.459]      __var SW_DP_ABORT       = 0x0;
[01:24:52.459]        // -> [SW_DP_ABORT <= 0x00000000]
[01:24:52.459]      __var DP_CTRL_STAT      = 0x4;
[01:24:52.459]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:24:52.460]      __var DP_SELECT         = 0x8;
[01:24:52.460]        // -> [DP_SELECT <= 0x00000008]
[01:24:52.460]      __var powered_down      = 0;
[01:24:52.460]        // -> [powered_down <= 0x00000000]
[01:24:52.460]      WriteDP(DP_SELECT, 0x00000000);
[01:24:52.460]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:24:52.461]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:24:52.461]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:24:52.461]        // -> [powered_down <= 0x00000001]
[01:24:52.461]    </block>
[01:24:52.461]    <control if="powered_down" while="" timeout="0" info="">
[01:24:52.461]      // if-block "powered_down"
[01:24:52.462]        // =>  TRUE
[01:24:52.462]      <block atomic="false" info="">
[01:24:52.462]        Message(0, "Debug/System power-up request sent");
[01:24:52.465]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:24:52.466]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:24:52.466]      </block>
[01:24:52.466]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:24:52.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:24:52.467]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:24:52.467]        // while-condition  =>  FALSE
[01:24:52.467]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:24:52.467]      </control>
[01:24:52.467]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:24:52.467]        // if-block "(__protocol & 0xFFFF) == 1"
[01:24:52.467]          // =>  FALSE
[01:24:52.467]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:24:52.467]      </control>
[01:24:52.467]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:24:52.467]        // if-block "(__protocol & 0xFFFF) == 2"
[01:24:52.468]          // =>  TRUE
[01:24:52.468]        <block atomic="false" info="">
[01:24:52.468]          Message(0, "executing SWD power up");
[01:24:52.469]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:24:52.471]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:24:52.471]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:24:52.471]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:24:52.472]        </block>
[01:24:52.472]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:24:52.472]      </control>
[01:24:52.472]      // end if-block "powered_down"
[01:24:52.472]    </control>
[01:24:52.472]    <block atomic="false" info="">
[01:24:52.472]      __var DEBUG_PORT_VAL    = 0;
[01:24:52.473]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:24:52.473]      __var ACCESS_POINT_VAL  = 0;
[01:24:52.473]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:24:52.473]      __ap = 1; 
[01:24:52.473]        // -> [__ap <= 0x00000001]
[01:24:52.473]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:24:52.475]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:24:52.475]      __ap = 4;
[01:24:52.475]        // -> [__ap <= 0x00000004]
[01:24:52.475]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:52.476]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:24:52.476]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:24:52.476]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:52.479]    </block>
[01:24:52.479]    <block atomic="false" info="">
[01:24:52.479]      __var nReset = 0x80;
[01:24:52.479]        // -> [nReset <= 0x00000080]
[01:24:52.479]      __var canReadPins = 0;
[01:24:52.479]        // -> [canReadPins <= 0x00000000]
[01:24:52.479]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:24:52.480]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:24:52.480]        // -> [canReadPins <= 0x00000001]
[01:24:52.480]    </block>
[01:24:52.480]    <control if="" while="1" timeout="200" info="">
[01:24:52.480]      // while "1"  (timeout="200")
[01:24:52.480]      // while-condition  =>  TRUE
[01:24:52.480]      // while "1"  (timeout="200")
[01:24:52.480]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.481]      // while "1"  (timeout="200")
[01:24:52.481]      // while-condition  =>  TRUE
[01:24:52.482]      // while "1"  (timeout="200")
[01:24:52.482]      // while-condition  =>  TRUE
[01:24:52.482]      // while "1"  (timeout="200")
[01:24:52.482]      // while-condition  =>  TRUE
[01:24:52.482]      // while "1"  (timeout="200")
[01:24:52.482]      // while-condition  =>  TRUE
[01:24:52.482]      // while "1"  (timeout="200")
[01:24:52.482]      // while-condition  =>  TRUE
[01:24:52.483]      // while "1"  (timeout="200")
[01:24:52.483]      // while-condition  =>  TRUE
[01:24:52.483]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.484]      // while-condition  =>  TRUE
[01:24:52.484]      // while "1"  (timeout="200")
[01:24:52.485]      // while-condition  =>  TRUE
[01:24:52.485]      // while "1"  (timeout="200")
[01:24:52.485]      // while-condition  =>  TRUE
[01:24:52.485]      // while "1"  (timeout="200")
[01:24:52.485]      // while-condition  =>  TRUE
[01:24:52.485]      // while "1"  (timeout="200")
[01:24:52.485]      // while-condition  =>  TRUE
[01:24:52.485]      // while "1"  (timeout="200")
[01:24:52.485]      // while-condition  =>  TRUE
[01:24:52.485]      // while "1"  (timeout="200")
[01:24:52.485]      // while-condition  =>  TRUE
[01:24:52.485]      // while "1"  (timeout="200")
[01:24:52.486]      // while-condition  =>  TRUE
[01:24:52.486]      // while "1"  (timeout="200")
[01:24:52.486]      // while-condition  =>  TRUE
[01:24:52.486]      // while "1"  (timeout="200")
[01:24:52.486]      // while-condition  =>  TRUE
[01:24:52.486]      // while "1"  (timeout="200")
[01:24:52.486]      // while-condition  =>  TRUE
[01:24:52.486]      // while "1"  (timeout="200")
[01:24:52.486]      // while-condition  =>  TRUE
[01:24:52.486]      // while "1"  (timeout="200")
[01:24:52.486]      // while-condition  =>  TRUE
[01:24:52.487]      // while "1"  (timeout="200")
[01:24:52.487]      // while-condition  =>  TRUE
[01:24:52.487]      // while "1"  (timeout="200")
[01:24:52.487]      // while-condition  =>  TRUE
[01:24:52.487]      // while "1"  (timeout="200")
[01:24:52.487]      // while-condition  =>  TRUE
[01:24:52.487]      // while "1"  (timeout="200")
[01:24:52.487]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.488]      // while "1"  (timeout="200")
[01:24:52.488]      // while-condition  =>  TRUE
[01:24:52.490]      // while "1"  (timeout="200")
[01:24:52.490]      // while-condition  =>  TRUE
[01:24:52.490]      // while "1"  (timeout="200")
[01:24:52.490]      // while-condition  =>  TRUE
[01:24:52.490]      // while "1"  (timeout="200")
[01:24:52.490]      // while-condition  =>  TRUE
[01:24:52.490]      // while "1"  (timeout="200")
[01:24:52.490]      // while-condition  =>  TRUE
[01:24:52.490]      // while "1"  (timeout="200")
[01:24:52.490]      // while-condition  =>  TRUE
[01:24:52.490]      // while "1"  (timeout="200")
[01:24:52.491]      // while-condition  =>  TRUE
[01:24:52.491]      // while "1"  (timeout="200")
[01:24:52.491]      // while  =>  TIMEOUT
[01:24:52.491]      // end while "1"
[01:24:52.491]    </control>
[01:24:52.491]    <control if="canReadPins" while="" timeout="0" info="">
[01:24:52.491]      // if-block "canReadPins"
[01:24:52.491]        // =>  TRUE
[01:24:52.491]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:24:52.491]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:24:52.491]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:24:52.491]        // while-condition  =>  FALSE
[01:24:52.492]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:24:52.492]      </control>
[01:24:52.492]      // end if-block "canReadPins"
[01:24:52.492]    </control>
[01:24:52.492]    <control if="!canReadPins" while="" timeout="0" info="">
[01:24:52.492]      // if-block "!canReadPins"
[01:24:52.492]        // =>  FALSE
[01:24:52.492]      // skip if-block "!canReadPins"
[01:24:52.492]    </control>
[01:24:52.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:24:52.493]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:52.493]        // =>  TRUE
[01:24:52.493]      <block atomic="false" info="">
[01:24:52.493]        WriteAP(0x00, 0x190008);
[01:24:52.493]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:52.494]        WriteAP(0xF0, 0x01);
[01:24:52.494]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:52.494]      </block>
[01:24:52.496]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:52.496]    </control>
[01:24:52.496]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:24:52.496]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:52.496]        // =>  FALSE
[01:24:52.496]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:52.496]    </control>
[01:24:52.496]    <block atomic="false" info="">
[01:24:52.496]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:52.497]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:24:52.497]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:24:52.497]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:52.501]      __ap = 0; //lets make sure we reset the access point selection
[01:24:52.501]        // -> [__ap <= 0x00000000]
[01:24:52.501]    </block>
[01:24:52.501]  </sequence>
[01:24:52.501]  
[01:24:52.507]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:24:52.507]  
[01:24:52.508]  <debugvars>
[01:24:52.508]    // Pre-defined
[01:24:52.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:52.508]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:52.508]    __dp=0x00000000
[01:24:52.508]    __ap=0x00000000
[01:24:52.508]    __traceout=0x00000000      (Trace Disabled)
[01:24:52.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:52.508]    __FlashAddr=0x00000000
[01:24:52.508]    __FlashLen=0x00000000
[01:24:52.509]    __FlashArg=0x00000000
[01:24:52.509]    __FlashOp=0x00000000
[01:24:52.509]    __Result=0x00000000
[01:24:52.509]  </debugvars>
[01:24:52.509]  
[01:24:52.509]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:24:52.509]    <block atomic="false" info="">
[01:24:52.509]      __var deviceID = 0;
[01:24:52.509]        // -> [deviceID <= 0x00000000]
[01:24:52.509]      __var version = 0;
[01:24:52.509]        // -> [version <= 0x00000000]
[01:24:52.510]      __var partNum = 0;
[01:24:52.510]        // -> [partNum <= 0x00000000]
[01:24:52.510]      __var manuf = 0;
[01:24:52.510]        // -> [manuf <= 0x00000000]
[01:24:52.510]      __var isMSPM0G1X0X_G3X0X = 0;
[01:24:52.510]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:24:52.510]      __var isProduction = 0;
[01:24:52.510]        // -> [isProduction <= 0x00000000]
[01:24:52.510]      __var continueId = 0;
[01:24:52.511]        // -> [continueId <= 0x00000000]
[01:24:52.511]      deviceID =   Read32(0x41C40004);
[01:24:52.512]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:24:52.512]        // -> [deviceID <= 0x2BB8802F]
[01:24:52.512]      version = deviceID >> 28;
[01:24:52.512]        // -> [version <= 0x00000002]
[01:24:52.513]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:24:52.513]        // -> [partNum <= 0x0000BB88]
[01:24:52.513]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:24:52.513]        // -> [manuf <= 0x00000017]
[01:24:52.513]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:24:52.513]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:24:52.513]      isProduction = (version > 0);
[01:24:52.513]        // -> [isProduction <= 0x00000001]
[01:24:52.515]    </block>
[01:24:52.515]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:24:52.515]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:24:52.515]        // =>  FALSE
[01:24:52.515]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:24:52.515]    </control>
[01:24:52.515]    <control if="continueId == 4" while="" timeout="0" info="">
[01:24:52.515]      // if-block "continueId == 4"
[01:24:52.515]        // =>  FALSE
[01:24:52.515]      // skip if-block "continueId == 4"
[01:24:52.515]    </control>
[01:24:52.515]    <control if="!isProduction" while="" timeout="0" info="">
[01:24:52.515]      // if-block "!isProduction"
[01:24:52.516]        // =>  FALSE
[01:24:52.516]      // skip if-block "!isProduction"
[01:24:52.516]    </control>
[01:24:52.516]  </sequence>
[01:24:52.516]  
[01:27:38.901]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:27:38.901]  
[01:27:38.910]  <debugvars>
[01:27:38.910]    // Pre-defined
[01:27:38.910]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:38.910]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:27:38.910]    __dp=0x00000000
[01:27:38.910]    __ap=0x00000000
[01:27:38.910]    __traceout=0x00000000      (Trace Disabled)
[01:27:38.910]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:38.910]    __FlashAddr=0x00000000
[01:27:38.910]    __FlashLen=0x00000000
[01:27:38.911]    __FlashArg=0x00000000
[01:27:38.911]    __FlashOp=0x00000000
[01:27:38.911]    __Result=0x00000000
[01:27:38.911]  </debugvars>
[01:27:38.911]  
[01:27:38.911]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:27:38.911]    <block atomic="false" info="">
[01:27:38.911]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:27:38.911]        // -> [isSWJ <= 0x00000001]
[01:27:38.911]      __var hasDormant = __protocol & 0x00020000;
[01:27:38.911]        // -> [hasDormant <= 0x00000000]
[01:27:38.912]      __var protType   = __protocol & 0x0000FFFF;
[01:27:38.912]        // -> [protType <= 0x00000002]
[01:27:38.912]    </block>
[01:27:38.912]    <control if="protType == 1" while="" timeout="0" info="">
[01:27:38.912]      // if-block "protType == 1"
[01:27:38.912]        // =>  FALSE
[01:27:38.912]      // skip if-block "protType == 1"
[01:27:38.912]    </control>
[01:27:38.912]    <control if="protType == 2" while="" timeout="0" info="">
[01:27:38.913]      // if-block "protType == 2"
[01:27:38.913]        // =>  TRUE
[01:27:38.913]      <control if="isSWJ" while="" timeout="0" info="">
[01:27:38.913]        // if-block "isSWJ"
[01:27:38.913]          // =>  TRUE
[01:27:38.913]        <control if="hasDormant" while="" timeout="0" info="">
[01:27:38.913]          // if-block "hasDormant"
[01:27:38.913]            // =>  FALSE
[01:27:38.913]          // skip if-block "hasDormant"
[01:27:38.913]        </control>
[01:27:38.913]        <control if="!hasDormant" while="" timeout="0" info="">
[01:27:38.913]          // if-block "!hasDormant"
[01:27:38.914]            // =>  TRUE
[01:27:38.914]          <block atomic="false" info="">
[01:27:38.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:27:38.914]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:38.914]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:27:38.915]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:27:38.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:27:38.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:38.915]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:27:38.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:27:38.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:27:38.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:38.916]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:27:38.918]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:27:38.918]          </block>
[01:27:38.918]          // end if-block "!hasDormant"
[01:27:38.918]        </control>
[01:27:38.918]        // end if-block "isSWJ"
[01:27:38.918]      </control>
[01:27:38.918]      <control if="!isSWJ" while="" timeout="0" info="">
[01:27:38.918]        // if-block "!isSWJ"
[01:27:38.918]          // =>  FALSE
[01:27:38.918]        // skip if-block "!isSWJ"
[01:27:38.918]      </control>
[01:27:38.918]      <block atomic="false" info="">
[01:27:38.918]        ReadDP(0x0);
[01:27:38.919]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:27:38.919]      </block>
[01:27:38.919]      // end if-block "protType == 2"
[01:27:38.919]    </control>
[01:27:38.919]  </sequence>
[01:27:38.919]  
[01:27:38.920]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:27:38.920]  
[01:27:38.920]  <debugvars>
[01:27:38.920]    // Pre-defined
[01:27:38.920]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:38.920]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:27:38.920]    __dp=0x00000000
[01:27:38.920]    __ap=0x00000000
[01:27:38.920]    __traceout=0x00000000      (Trace Disabled)
[01:27:38.920]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:38.921]    __FlashAddr=0x00000000
[01:27:38.921]    __FlashLen=0x00000000
[01:27:38.921]    __FlashArg=0x00000000
[01:27:38.921]    __FlashOp=0x00000000
[01:27:38.921]    __Result=0x00000000
[01:27:38.921]  </debugvars>
[01:27:38.921]  
[01:27:38.921]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:27:38.921]    <block atomic="false" info="">
[01:27:38.921]      __var SW_DP_ABORT       = 0x0;
[01:27:38.921]        // -> [SW_DP_ABORT <= 0x00000000]
[01:27:38.921]      __var DP_CTRL_STAT      = 0x4;
[01:27:38.921]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:27:38.921]      __var DP_SELECT         = 0x8;
[01:27:38.921]        // -> [DP_SELECT <= 0x00000008]
[01:27:38.921]      __var powered_down      = 0;
[01:27:38.922]        // -> [powered_down <= 0x00000000]
[01:27:38.922]      WriteDP(DP_SELECT, 0x00000000);
[01:27:38.922]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:27:38.922]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:27:38.923]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:27:38.923]        // -> [powered_down <= 0x00000001]
[01:27:38.923]    </block>
[01:27:38.923]    <control if="powered_down" while="" timeout="0" info="">
[01:27:38.923]      // if-block "powered_down"
[01:27:38.923]        // =>  TRUE
[01:27:38.923]      <block atomic="false" info="">
[01:27:38.924]        Message(0, "Debug/System power-up request sent");
[01:27:38.926]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:27:38.927]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:27:38.927]      </block>
[01:27:38.927]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:27:38.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:27:38.927]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:27:38.927]        // while-condition  =>  FALSE
[01:27:38.927]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:27:38.928]      </control>
[01:27:38.928]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:27:38.928]        // if-block "(__protocol & 0xFFFF) == 1"
[01:27:38.928]          // =>  FALSE
[01:27:38.928]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:27:38.928]      </control>
[01:27:38.928]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:27:38.928]        // if-block "(__protocol & 0xFFFF) == 2"
[01:27:38.928]          // =>  TRUE
[01:27:38.928]        <block atomic="false" info="">
[01:27:38.928]          Message(0, "executing SWD power up");
[01:27:38.930]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:27:38.930]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:27:38.930]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:27:38.931]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:27:38.931]        </block>
[01:27:38.931]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:27:38.931]      </control>
[01:27:38.931]      // end if-block "powered_down"
[01:27:38.931]    </control>
[01:27:38.931]    <block atomic="false" info="">
[01:27:38.931]      __var DEBUG_PORT_VAL    = 0;
[01:27:38.931]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:27:38.931]      __var ACCESS_POINT_VAL  = 0;
[01:27:38.931]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:27:38.932]      __ap = 1; 
[01:27:38.932]        // -> [__ap <= 0x00000001]
[01:27:38.932]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:27:38.933]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:27:38.933]      __ap = 4;
[01:27:38.933]        // -> [__ap <= 0x00000004]
[01:27:38.933]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:27:38.934]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:27:38.934]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:27:38.936]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:27:38.937]    </block>
[01:27:38.937]    <block atomic="false" info="">
[01:27:38.937]      __var nReset = 0x80;
[01:27:38.937]        // -> [nReset <= 0x00000080]
[01:27:38.938]      __var canReadPins = 0;
[01:27:38.938]        // -> [canReadPins <= 0x00000000]
[01:27:38.938]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:27:38.938]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:27:38.938]        // -> [canReadPins <= 0x00000001]
[01:27:38.938]    </block>
[01:27:38.938]    <control if="" while="1" timeout="200" info="">
[01:27:38.939]      // while "1"  (timeout="200")
[01:27:38.939]      // while-condition  =>  TRUE
[01:27:38.939]      // while "1"  (timeout="200")
[01:27:38.939]      // while-condition  =>  TRUE
[01:27:38.939]      // while "1"  (timeout="200")
[01:27:38.939]      // while-condition  =>  TRUE
[01:27:38.939]      // while "1"  (timeout="200")
[01:27:38.939]      // while-condition  =>  TRUE
[01:27:38.940]      // while "1"  (timeout="200")
[01:27:38.940]      // while-condition  =>  TRUE
[01:27:38.940]      // while "1"  (timeout="200")
[01:27:38.940]      // while-condition  =>  TRUE
[01:27:38.940]      // while "1"  (timeout="200")
[01:27:38.940]      // while-condition  =>  TRUE
[01:27:38.940]      // while "1"  (timeout="200")
[01:27:38.940]      // while-condition  =>  TRUE
[01:27:38.940]      // while "1"  (timeout="200")
[01:27:38.940]      // while-condition  =>  TRUE
[01:27:38.941]      // while "1"  (timeout="200")
[01:27:38.941]      // while-condition  =>  TRUE
[01:27:38.941]      // while "1"  (timeout="200")
[01:27:38.941]      // while-condition  =>  TRUE
[01:27:38.941]      // while "1"  (timeout="200")
[01:27:38.941]      // while-condition  =>  TRUE
[01:27:38.941]      // while "1"  (timeout="200")
[01:27:38.941]      // while-condition  =>  TRUE
[01:27:38.941]      // while "1"  (timeout="200")
[01:27:38.941]      // while-condition  =>  TRUE
[01:27:38.941]      // while "1"  (timeout="200")
[01:27:38.941]      // while-condition  =>  TRUE
[01:27:38.942]      // while "1"  (timeout="200")
[01:27:38.942]      // while-condition  =>  TRUE
[01:27:38.942]      // while "1"  (timeout="200")
[01:27:38.942]      // while-condition  =>  TRUE
[01:27:38.942]      // while "1"  (timeout="200")
[01:27:38.942]      // while-condition  =>  TRUE
[01:27:38.942]      // while "1"  (timeout="200")
[01:27:38.942]      // while-condition  =>  TRUE
[01:27:38.942]      // while "1"  (timeout="200")
[01:27:38.942]      // while-condition  =>  TRUE
[01:27:38.942]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.943]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.943]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.943]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.943]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.943]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.943]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.943]      // while "1"  (timeout="200")
[01:27:38.943]      // while-condition  =>  TRUE
[01:27:38.944]      // while "1"  (timeout="200")
[01:27:38.944]      // while  =>  TIMEOUT
[01:27:38.944]      // end while "1"
[01:27:38.944]    </control>
[01:27:38.944]    <control if="canReadPins" while="" timeout="0" info="">
[01:27:38.944]      // if-block "canReadPins"
[01:27:38.944]        // =>  TRUE
[01:27:38.945]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:27:38.945]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:27:38.945]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:27:38.945]        // while-condition  =>  FALSE
[01:27:38.945]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:27:38.945]      </control>
[01:27:38.946]      // end if-block "canReadPins"
[01:27:38.946]    </control>
[01:27:38.946]    <control if="!canReadPins" while="" timeout="0" info="">
[01:27:38.946]      // if-block "!canReadPins"
[01:27:38.946]        // =>  FALSE
[01:27:38.946]      // skip if-block "!canReadPins"
[01:27:38.946]    </control>
[01:27:38.946]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:27:38.946]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:27:38.946]        // =>  TRUE
[01:27:38.946]      <block atomic="false" info="">
[01:27:38.946]        WriteAP(0x00, 0x190008);
[01:27:38.947]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:27:38.947]        WriteAP(0xF0, 0x01);
[01:27:38.948]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:27:38.948]      </block>
[01:27:38.949]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:27:38.949]    </control>
[01:27:38.949]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:27:38.949]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:27:38.949]        // =>  FALSE
[01:27:38.950]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:27:38.950]    </control>
[01:27:38.950]    <block atomic="false" info="">
[01:27:38.950]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:27:38.951]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:27:38.951]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:27:38.951]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:27:38.953]      __ap = 0; //lets make sure we reset the access point selection
[01:27:38.953]        // -> [__ap <= 0x00000000]
[01:27:38.953]    </block>
[01:27:38.953]  </sequence>
[01:27:38.953]  
[01:27:38.959]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:27:38.959]  
[01:27:38.959]  <debugvars>
[01:27:38.960]    // Pre-defined
[01:27:38.960]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:38.960]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:27:38.960]    __dp=0x00000000
[01:27:38.960]    __ap=0x00000000
[01:27:38.960]    __traceout=0x00000000      (Trace Disabled)
[01:27:38.960]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:38.960]    __FlashAddr=0x00000000
[01:27:38.960]    __FlashLen=0x00000000
[01:27:38.960]    __FlashArg=0x00000000
[01:27:38.960]    __FlashOp=0x00000000
[01:27:38.960]    __Result=0x00000000
[01:27:38.960]  </debugvars>
[01:27:38.961]  
[01:27:38.961]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:27:38.961]    <block atomic="false" info="">
[01:27:38.961]      __var deviceID = 0;
[01:27:38.961]        // -> [deviceID <= 0x00000000]
[01:27:38.961]      __var version = 0;
[01:27:38.961]        // -> [version <= 0x00000000]
[01:27:38.961]      __var partNum = 0;
[01:27:38.961]        // -> [partNum <= 0x00000000]
[01:27:38.961]      __var manuf = 0;
[01:27:38.961]        // -> [manuf <= 0x00000000]
[01:27:38.962]      __var isMSPM0G1X0X_G3X0X = 0;
[01:27:38.962]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:27:38.962]      __var isProduction = 0;
[01:27:38.962]        // -> [isProduction <= 0x00000000]
[01:27:38.962]      __var continueId = 0;
[01:27:38.962]        // -> [continueId <= 0x00000000]
[01:27:38.962]      deviceID =   Read32(0x41C40004);
[01:27:38.964]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:27:38.964]        // -> [deviceID <= 0x2BB8802F]
[01:27:38.964]      version = deviceID >> 28;
[01:27:38.964]        // -> [version <= 0x00000002]
[01:27:38.964]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:27:38.964]        // -> [partNum <= 0x0000BB88]
[01:27:38.965]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:27:38.965]        // -> [manuf <= 0x00000017]
[01:27:38.965]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:27:38.965]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:27:38.965]      isProduction = (version > 0);
[01:27:38.965]        // -> [isProduction <= 0x00000001]
[01:27:38.965]    </block>
[01:27:38.965]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:27:38.965]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:27:38.965]        // =>  FALSE
[01:27:38.965]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:27:38.965]    </control>
[01:27:38.967]    <control if="continueId == 4" while="" timeout="0" info="">
[01:27:38.967]      // if-block "continueId == 4"
[01:27:38.967]        // =>  FALSE
[01:27:38.967]      // skip if-block "continueId == 4"
[01:27:38.967]    </control>
[01:27:38.967]    <control if="!isProduction" while="" timeout="0" info="">
[01:27:38.967]      // if-block "!isProduction"
[01:27:38.967]        // =>  FALSE
[01:27:38.967]      // skip if-block "!isProduction"
[01:27:38.967]    </control>
[01:27:38.968]  </sequence>
[01:27:38.968]  
