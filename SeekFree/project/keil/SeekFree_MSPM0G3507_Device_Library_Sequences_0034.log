/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\cao\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0034.log
 *  Created     : 15:40:25 (29/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:40:25.206]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:40:25.206]  
[15:40:25.206]  <debugvars>
[15:40:25.206]    // Pre-defined
[15:40:25.206]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:40:25.206]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:40:25.206]    __dp=0x00000000
[15:40:25.206]    __ap=0x00000000
[15:40:25.208]    __traceout=0x00000000      (Trace Disabled)
[15:40:25.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:40:25.208]    __FlashAddr=0x00000000
[15:40:25.208]    __FlashLen=0x00000000
[15:40:25.208]    __FlashArg=0x00000000
[15:40:25.208]    __FlashOp=0x00000000
[15:40:25.208]    __Result=0x00000000
[15:40:25.208]  </debugvars>
[15:40:25.208]  
[15:40:25.209]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:40:25.209]    <block atomic="false" info="">
[15:40:25.209]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:40:25.209]        // -> [isSWJ <= 0x00000001]
[15:40:25.210]      __var hasDormant = __protocol & 0x00020000;
[15:40:25.210]        // -> [hasDormant <= 0x00000000]
[15:40:25.210]      __var protType   = __protocol & 0x0000FFFF;
[15:40:25.210]        // -> [protType <= 0x00000002]
[15:40:25.210]    </block>
[15:40:25.210]    <control if="protType == 1" while="" timeout="0" info="">
[15:40:25.210]      // if-block "protType == 1"
[15:40:25.210]        // =>  FALSE
[15:40:25.210]      // skip if-block "protType == 1"
[15:40:25.210]    </control>
[15:40:25.210]    <control if="protType == 2" while="" timeout="0" info="">
[15:40:25.210]      // if-block "protType == 2"
[15:40:25.210]        // =>  TRUE
[15:40:25.210]      <control if="isSWJ" while="" timeout="0" info="">
[15:40:25.210]        // if-block "isSWJ"
[15:40:25.210]          // =>  TRUE
[15:40:25.210]        <control if="hasDormant" while="" timeout="0" info="">
[15:40:25.210]          // if-block "hasDormant"
[15:40:25.210]            // =>  FALSE
[15:40:25.210]          // skip if-block "hasDormant"
[15:40:25.210]        </control>
[15:40:25.210]        <control if="!hasDormant" while="" timeout="0" info="">
[15:40:25.210]          // if-block "!hasDormant"
[15:40:25.210]            // =>  TRUE
[15:40:25.210]          <block atomic="false" info="">
[15:40:25.210]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:40:25.215]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:40:25.215]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:40:25.219]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:40:25.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:40:25.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:40:25.221]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:40:25.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:40:25.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:40:25.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:40:25.225]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:40:25.225]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:40:25.225]          </block>
[15:40:25.225]          // end if-block "!hasDormant"
[15:40:25.225]        </control>
[15:40:25.225]        // end if-block "isSWJ"
[15:40:25.225]      </control>
[15:40:25.225]      <control if="!isSWJ" while="" timeout="0" info="">
[15:40:25.225]        // if-block "!isSWJ"
[15:40:25.225]          // =>  FALSE
[15:40:25.225]        // skip if-block "!isSWJ"
[15:40:25.225]      </control>
[15:40:25.225]      <block atomic="false" info="">
[15:40:25.225]        ReadDP(0x0);
[15:40:25.229]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:40:25.229]      </block>
[15:40:25.229]      // end if-block "protType == 2"
[15:40:25.230]    </control>
[15:40:25.230]  </sequence>
[15:40:25.230]  
[15:40:25.230]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:40:25.230]  
[15:40:25.230]  <debugvars>
[15:40:25.230]    // Pre-defined
[15:40:25.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:40:25.230]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:40:25.230]    __dp=0x00000000
[15:40:25.234]    __ap=0x00000000
[15:40:25.234]    __traceout=0x00000000      (Trace Disabled)
[15:40:25.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:40:25.234]    __FlashAddr=0x00000000
[15:40:25.234]    __FlashLen=0x00000000
[15:40:25.234]    __FlashArg=0x00000000
[15:40:25.234]    __FlashOp=0x00000000
[15:40:25.234]    __Result=0x00000000
[15:40:25.234]  </debugvars>
[15:40:25.234]  
[15:40:25.234]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:40:25.234]    <block atomic="false" info="">
[15:40:25.234]      __var SW_DP_ABORT       = 0x0;
[15:40:25.234]        // -> [SW_DP_ABORT <= 0x00000000]
[15:40:25.234]      __var DP_CTRL_STAT      = 0x4;
[15:40:25.234]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:40:25.234]      __var DP_SELECT         = 0x8;
[15:40:25.234]        // -> [DP_SELECT <= 0x00000008]
[15:40:25.234]      __var powered_down      = 0;
[15:40:25.234]        // -> [powered_down <= 0x00000000]
[15:40:25.234]      WriteDP(DP_SELECT, 0x00000000);
[15:40:25.234]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:40:25.234]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:40:25.241]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:40:25.244]        // -> [powered_down <= 0x00000001]
[15:40:25.244]    </block>
[15:40:25.244]    <control if="powered_down" while="" timeout="0" info="">
[15:40:25.244]      // if-block "powered_down"
[15:40:25.244]        // =>  TRUE
[15:40:25.244]      <block atomic="false" info="">
[15:40:25.244]        Message(0, "Debug/System power-up request sent");
[15:40:25.244]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:40:25.249]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:40:25.249]      </block>
[15:40:25.249]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:40:25.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:40:25.250]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:40:25.250]        // while-condition  =>  FALSE
[15:40:25.250]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:40:25.250]      </control>
[15:40:25.250]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:40:25.250]        // if-block "(__protocol & 0xFFFF) == 1"
[15:40:25.250]          // =>  FALSE
[15:40:25.250]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:40:25.250]      </control>
[15:40:25.250]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:40:25.250]        // if-block "(__protocol & 0xFFFF) == 2"
[15:40:25.250]          // =>  TRUE
[15:40:25.250]        <block atomic="false" info="">
[15:40:25.250]          Message(0, "executing SWD power up");
[15:40:25.254]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:40:25.254]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:40:25.254]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:40:25.260]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:40:25.260]        </block>
[15:40:25.260]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:40:25.260]      </control>
[15:40:25.260]      // end if-block "powered_down"
[15:40:25.260]    </control>
[15:40:25.260]    <block atomic="false" info="">
[15:40:25.260]      __var DEBUG_PORT_VAL    = 0;
[15:40:25.260]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:40:25.260]      __var ACCESS_POINT_VAL  = 0;
[15:40:25.260]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:40:25.260]      __ap = 1; 
[15:40:25.260]        // -> [__ap <= 0x00000001]
[15:40:25.260]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:40:25.264]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:40:25.264]      __ap = 4;
[15:40:25.264]        // -> [__ap <= 0x00000004]
[15:40:25.264]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:40:25.269]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:40:25.270]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:40:25.270]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:40:25.271]    </block>
[15:40:25.271]    <block atomic="false" info="">
[15:40:25.271]      __var nReset = 0x80;
[15:40:25.271]        // -> [nReset <= 0x00000080]
[15:40:25.271]      __var canReadPins = 0;
[15:40:25.271]        // -> [canReadPins <= 0x00000000]
[15:40:25.271]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:40:25.275]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:40:25.275]        // -> [canReadPins <= 0x00000001]
[15:40:25.275]    </block>
[15:40:25.275]    <control if="" while="1" timeout="200" info="">
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.275]      // while-condition  =>  TRUE
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.275]      // while-condition  =>  TRUE
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.275]      // while-condition  =>  TRUE
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.275]      // while-condition  =>  TRUE
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.275]      // while-condition  =>  TRUE
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.275]      // while-condition  =>  TRUE
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.275]      // while-condition  =>  TRUE
[15:40:25.275]      // while "1"  (timeout="200")
[15:40:25.278]      // while-condition  =>  TRUE
[15:40:25.278]      // while "1"  (timeout="200")
[15:40:25.278]      // while-condition  =>  TRUE
[15:40:25.278]      // while "1"  (timeout="200")
[15:40:25.278]      // while-condition  =>  TRUE
[15:40:25.278]      // while "1"  (timeout="200")
[15:40:25.278]      // while-condition  =>  TRUE
[15:40:25.278]      // while "1"  (timeout="200")
[15:40:25.278]      // while-condition  =>  TRUE
[15:40:25.279]      // while "1"  (timeout="200")
[15:40:25.279]      // while-condition  =>  TRUE
[15:40:25.279]      // while "1"  (timeout="200")
[15:40:25.279]      // while-condition  =>  TRUE
[15:40:25.280]      // while "1"  (timeout="200")
[15:40:25.280]      // while-condition  =>  TRUE
[15:40:25.280]      // while "1"  (timeout="200")
[15:40:25.280]      // while-condition  =>  TRUE
[15:40:25.280]      // while "1"  (timeout="200")
[15:40:25.280]      // while-condition  =>  TRUE
[15:40:25.280]      // while "1"  (timeout="200")
[15:40:25.280]      // while-condition  =>  TRUE
[15:40:25.280]      // while "1"  (timeout="200")
[15:40:25.281]      // while-condition  =>  TRUE
[15:40:25.281]      // while "1"  (timeout="200")
[15:40:25.281]      // while-condition  =>  TRUE
[15:40:25.281]      // while "1"  (timeout="200")
[15:40:25.281]      // while-condition  =>  TRUE
[15:40:25.281]      // while "1"  (timeout="200")
[15:40:25.281]      // while-condition  =>  TRUE
[15:40:25.281]      // while "1"  (timeout="200")
[15:40:25.281]      // while-condition  =>  TRUE
[15:40:25.281]      // while "1"  (timeout="200")
[15:40:25.283]      // while-condition  =>  TRUE
[15:40:25.283]      // while "1"  (timeout="200")
[15:40:25.283]      // while-condition  =>  TRUE
[15:40:25.283]      // while "1"  (timeout="200")
[15:40:25.283]      // while-condition  =>  TRUE
[15:40:25.283]      // while "1"  (timeout="200")
[15:40:25.283]      // while-condition  =>  TRUE
[15:40:25.283]      // while "1"  (timeout="200")
[15:40:25.283]      // while-condition  =>  TRUE
[15:40:25.283]      // while "1"  (timeout="200")
[15:40:25.283]      // while-condition  =>  TRUE
[15:40:25.283]      // while "1"  (timeout="200")
[15:40:25.283]      // while-condition  =>  TRUE
[15:40:25.284]      // while "1"  (timeout="200")
[15:40:25.284]      // while  =>  TIMEOUT
[15:40:25.284]      // end while "1"
[15:40:25.284]    </control>
[15:40:25.284]    <control if="canReadPins" while="" timeout="0" info="">
[15:40:25.284]      // if-block "canReadPins"
[15:40:25.284]        // =>  TRUE
[15:40:25.284]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:40:25.284]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:40:25.285]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:40:25.285]        // while-condition  =>  FALSE
[15:40:25.287]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:40:25.287]      </control>
[15:40:25.287]      // end if-block "canReadPins"
[15:40:25.287]    </control>
[15:40:25.287]    <control if="!canReadPins" while="" timeout="0" info="">
[15:40:25.287]      // if-block "!canReadPins"
[15:40:25.287]        // =>  FALSE
[15:40:25.287]      // skip if-block "!canReadPins"
[15:40:25.287]    </control>
[15:40:25.287]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:40:25.288]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:40:25.288]        // =>  TRUE
[15:40:25.288]      <block atomic="false" info="">
[15:40:25.288]        WriteAP(0x00, 0x190008);
[15:40:25.290]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:40:25.290]        WriteAP(0xF0, 0x01);
[15:40:25.295]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:40:25.296]      </block>
[15:40:25.297]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:40:25.297]    </control>
[15:40:25.297]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:40:25.297]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:40:25.297]        // =>  FALSE
[15:40:25.297]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:40:25.297]    </control>
[15:40:25.297]    <block atomic="false" info="">
[15:40:25.297]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:40:25.300]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:40:25.300]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:40:25.301]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:40:25.302]      __ap = 0; //lets make sure we reset the access point selection
[15:40:25.303]        // -> [__ap <= 0x00000000]
[15:40:25.303]    </block>
[15:40:25.303]  </sequence>
[15:40:25.303]  
[15:40:25.324]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:40:25.324]  
[15:40:25.324]  <debugvars>
[15:40:25.324]    // Pre-defined
[15:40:25.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:40:25.324]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:40:25.324]    __dp=0x00000000
[15:40:25.326]    __ap=0x00000000
[15:40:25.326]    __traceout=0x00000000      (Trace Disabled)
[15:40:25.326]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:40:25.326]    __FlashAddr=0x00000000
[15:40:25.326]    __FlashLen=0x00000000
[15:40:25.326]    __FlashArg=0x00000000
[15:40:25.326]    __FlashOp=0x00000000
[15:40:25.326]    __Result=0x00000000
[15:40:25.327]  </debugvars>
[15:40:25.327]  
[15:40:25.327]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:40:25.327]    <block atomic="false" info="">
[15:40:25.327]      __var deviceID = 0;
[15:40:25.327]        // -> [deviceID <= 0x00000000]
[15:40:25.328]      __var version = 0;
[15:40:25.328]        // -> [version <= 0x00000000]
[15:40:25.328]      __var partNum = 0;
[15:40:25.328]        // -> [partNum <= 0x00000000]
[15:40:25.328]      __var manuf = 0;
[15:40:25.328]        // -> [manuf <= 0x00000000]
[15:40:25.328]      __var isMSPM0G1X0X_G3X0X = 0;
[15:40:25.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:40:25.328]      __var isProduction = 0;
[15:40:25.328]        // -> [isProduction <= 0x00000000]
[15:40:25.328]      __var continueId = 0;
[15:40:25.328]        // -> [continueId <= 0x00000000]
[15:40:25.328]      deviceID =   Read32(0x41C40004);
[15:40:25.334]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:40:25.334]        // -> [deviceID <= 0x2BB8802F]
[15:40:25.335]      version = deviceID >> 28;
[15:40:25.335]        // -> [version <= 0x00000002]
[15:40:25.335]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:40:25.335]        // -> [partNum <= 0x0000BB88]
[15:40:25.335]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:40:25.335]        // -> [manuf <= 0x00000017]
[15:40:25.335]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:40:25.335]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:40:25.336]      isProduction = (version > 0);
[15:40:25.336]        // -> [isProduction <= 0x00000001]
[15:40:25.336]    </block>
[15:40:25.336]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:40:25.336]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:40:25.336]        // =>  FALSE
[15:40:25.336]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:40:25.336]    </control>
[15:40:25.336]    <control if="continueId == 4" while="" timeout="0" info="">
[15:40:25.336]      // if-block "continueId == 4"
[15:40:25.336]        // =>  FALSE
[15:40:25.336]      // skip if-block "continueId == 4"
[15:40:25.336]    </control>
[15:40:25.336]    <control if="!isProduction" while="" timeout="0" info="">
[15:40:25.337]      // if-block "!isProduction"
[15:40:25.337]        // =>  FALSE
[15:40:25.337]      // skip if-block "!isProduction"
[15:40:25.337]    </control>
[15:40:25.337]  </sequence>
[15:40:25.337]  
[15:41:10.140]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:41:10.140]  
[15:41:10.140]  <debugvars>
[15:41:10.140]    // Pre-defined
[15:41:10.140]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:10.140]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:10.140]    __dp=0x00000000
[15:41:10.140]    __ap=0x00000000
[15:41:10.140]    __traceout=0x00000000      (Trace Disabled)
[15:41:10.140]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:10.140]    __FlashAddr=0x00000000
[15:41:10.140]    __FlashLen=0x00000000
[15:41:10.140]    __FlashArg=0x00000000
[15:41:10.140]    __FlashOp=0x00000000
[15:41:10.140]    __Result=0x00000000
[15:41:10.140]  </debugvars>
[15:41:10.140]  
[15:41:10.140]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:41:10.140]    <block atomic="false" info="">
[15:41:10.140]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:41:10.140]        // -> [isSWJ <= 0x00000001]
[15:41:10.140]      __var hasDormant = __protocol & 0x00020000;
[15:41:10.140]        // -> [hasDormant <= 0x00000000]
[15:41:10.140]      __var protType   = __protocol & 0x0000FFFF;
[15:41:10.140]        // -> [protType <= 0x00000002]
[15:41:10.140]    </block>
[15:41:10.145]    <control if="protType == 1" while="" timeout="0" info="">
[15:41:10.145]      // if-block "protType == 1"
[15:41:10.145]        // =>  FALSE
[15:41:10.145]      // skip if-block "protType == 1"
[15:41:10.145]    </control>
[15:41:10.145]    <control if="protType == 2" while="" timeout="0" info="">
[15:41:10.145]      // if-block "protType == 2"
[15:41:10.145]        // =>  TRUE
[15:41:10.145]      <control if="isSWJ" while="" timeout="0" info="">
[15:41:10.145]        // if-block "isSWJ"
[15:41:10.145]          // =>  TRUE
[15:41:10.145]        <control if="hasDormant" while="" timeout="0" info="">
[15:41:10.145]          // if-block "hasDormant"
[15:41:10.145]            // =>  FALSE
[15:41:10.145]          // skip if-block "hasDormant"
[15:41:10.145]        </control>
[15:41:10.145]        <control if="!hasDormant" while="" timeout="0" info="">
[15:41:10.145]          // if-block "!hasDormant"
[15:41:10.145]            // =>  TRUE
[15:41:10.145]          <block atomic="false" info="">
[15:41:10.145]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:41:10.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:10.150]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:41:10.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:41:10.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:41:10.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:10.151]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:41:10.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:41:10.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:41:10.156]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:10.156]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:41:10.159]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:41:10.159]          </block>
[15:41:10.159]          // end if-block "!hasDormant"
[15:41:10.159]        </control>
[15:41:10.159]        // end if-block "isSWJ"
[15:41:10.159]      </control>
[15:41:10.160]      <control if="!isSWJ" while="" timeout="0" info="">
[15:41:10.160]        // if-block "!isSWJ"
[15:41:10.160]          // =>  FALSE
[15:41:10.160]        // skip if-block "!isSWJ"
[15:41:10.160]      </control>
[15:41:10.160]      <block atomic="false" info="">
[15:41:10.160]        ReadDP(0x0);
[15:41:10.160]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:41:10.160]      </block>
[15:41:10.160]      // end if-block "protType == 2"
[15:41:10.160]    </control>
[15:41:10.160]  </sequence>
[15:41:10.160]  
[15:41:10.165]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:41:10.165]  
[15:41:10.165]  <debugvars>
[15:41:10.166]    // Pre-defined
[15:41:10.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:10.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:10.166]    __dp=0x00000000
[15:41:10.166]    __ap=0x00000000
[15:41:10.166]    __traceout=0x00000000      (Trace Disabled)
[15:41:10.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:10.166]    __FlashAddr=0x00000000
[15:41:10.166]    __FlashLen=0x00000000
[15:41:10.166]    __FlashArg=0x00000000
[15:41:10.166]    __FlashOp=0x00000000
[15:41:10.166]    __Result=0x00000000
[15:41:10.166]  </debugvars>
[15:41:10.166]  
[15:41:10.166]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:41:10.166]    <block atomic="false" info="">
[15:41:10.167]      __var SW_DP_ABORT       = 0x0;
[15:41:10.167]        // -> [SW_DP_ABORT <= 0x00000000]
[15:41:10.167]      __var DP_CTRL_STAT      = 0x4;
[15:41:10.167]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:41:10.167]      __var DP_SELECT         = 0x8;
[15:41:10.167]        // -> [DP_SELECT <= 0x00000008]
[15:41:10.167]      __var powered_down      = 0;
[15:41:10.167]        // -> [powered_down <= 0x00000000]
[15:41:10.167]      WriteDP(DP_SELECT, 0x00000000);
[15:41:10.170]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:41:10.170]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:41:10.171]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:41:10.171]        // -> [powered_down <= 0x00000001]
[15:41:10.171]    </block>
[15:41:10.171]    <control if="powered_down" while="" timeout="0" info="">
[15:41:10.171]      // if-block "powered_down"
[15:41:10.171]        // =>  TRUE
[15:41:10.171]      <block atomic="false" info="">
[15:41:10.171]        Message(0, "Debug/System power-up request sent");
[15:41:10.171]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:41:10.175]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:41:10.175]      </block>
[15:41:10.175]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:41:10.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:41:10.180]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:41:10.180]        // while-condition  =>  FALSE
[15:41:10.180]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:41:10.180]      </control>
[15:41:10.180]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:41:10.180]        // if-block "(__protocol & 0xFFFF) == 1"
[15:41:10.180]          // =>  FALSE
[15:41:10.180]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:41:10.180]      </control>
[15:41:10.180]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:41:10.180]        // if-block "(__protocol & 0xFFFF) == 2"
[15:41:10.180]          // =>  TRUE
[15:41:10.180]        <block atomic="false" info="">
[15:41:10.180]          Message(0, "executing SWD power up");
[15:41:10.184]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:41:10.186]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:41:10.186]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:41:10.186]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:41:10.186]        </block>
[15:41:10.186]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:41:10.189]      </control>
[15:41:10.189]      // end if-block "powered_down"
[15:41:10.189]    </control>
[15:41:10.189]    <block atomic="false" info="">
[15:41:10.189]      __var DEBUG_PORT_VAL    = 0;
[15:41:10.189]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:41:10.189]      __var ACCESS_POINT_VAL  = 0;
[15:41:10.189]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:41:10.189]      __ap = 1; 
[15:41:10.190]        // -> [__ap <= 0x00000001]
[15:41:10.190]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:41:10.208]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:41:10.208]      __ap = 4;
[15:41:10.208]        // -> [__ap <= 0x00000004]
[15:41:10.208]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:10.216]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:41:10.218]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:41:10.218]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:10.220]    </block>
[15:41:10.220]    <block atomic="false" info="">
[15:41:10.220]      __var nReset = 0x80;
[15:41:10.221]        // -> [nReset <= 0x00000080]
[15:41:10.221]      __var canReadPins = 0;
[15:41:10.221]        // -> [canReadPins <= 0x00000000]
[15:41:10.221]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:41:10.223]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:41:10.223]        // -> [canReadPins <= 0x00000001]
[15:41:10.223]    </block>
[15:41:10.223]    <control if="" while="1" timeout="200" info="">
[15:41:10.223]      // while "1"  (timeout="200")
[15:41:10.223]      // while-condition  =>  TRUE
[15:41:10.223]      // while "1"  (timeout="200")
[15:41:10.223]      // while-condition  =>  TRUE
[15:41:10.223]      // while "1"  (timeout="200")
[15:41:10.223]      // while-condition  =>  TRUE
[15:41:10.223]      // while "1"  (timeout="200")
[15:41:10.223]      // while-condition  =>  TRUE
[15:41:10.223]      // while "1"  (timeout="200")
[15:41:10.223]      // while-condition  =>  TRUE
[15:41:10.223]      // while "1"  (timeout="200")
[15:41:10.223]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.225]      // while-condition  =>  TRUE
[15:41:10.225]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.227]      // while-condition  =>  TRUE
[15:41:10.227]      // while "1"  (timeout="200")
[15:41:10.229]      // while-condition  =>  TRUE
[15:41:10.229]      // while "1"  (timeout="200")
[15:41:10.229]      // while-condition  =>  TRUE
[15:41:10.229]      // while "1"  (timeout="200")
[15:41:10.229]      // while-condition  =>  TRUE
[15:41:10.229]      // while "1"  (timeout="200")
[15:41:10.229]      // while-condition  =>  TRUE
[15:41:10.229]      // while "1"  (timeout="200")
[15:41:10.229]      // while-condition  =>  TRUE
[15:41:10.229]      // while "1"  (timeout="200")
[15:41:10.229]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.230]      // while-condition  =>  TRUE
[15:41:10.230]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.234]      // while-condition  =>  TRUE
[15:41:10.234]      // while "1"  (timeout="200")
[15:41:10.237]      // while-condition  =>  TRUE
[15:41:10.237]      // while "1"  (timeout="200")
[15:41:10.237]      // while  =>  TIMEOUT
[15:41:10.237]      // end while "1"
[15:41:10.237]    </control>
[15:41:10.237]    <control if="canReadPins" while="" timeout="0" info="">
[15:41:10.237]      // if-block "canReadPins"
[15:41:10.237]        // =>  TRUE
[15:41:10.237]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:41:10.237]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:41:10.242]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:41:10.242]        // while-condition  =>  FALSE
[15:41:10.242]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:41:10.242]      </control>
[15:41:10.242]      // end if-block "canReadPins"
[15:41:10.242]    </control>
[15:41:10.242]    <control if="!canReadPins" while="" timeout="0" info="">
[15:41:10.242]      // if-block "!canReadPins"
[15:41:10.242]        // =>  FALSE
[15:41:10.242]      // skip if-block "!canReadPins"
[15:41:10.242]    </control>
[15:41:10.247]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:41:10.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:10.247]        // =>  TRUE
[15:41:10.247]      <block atomic="false" info="">
[15:41:10.247]        WriteAP(0x00, 0x190008);
[15:41:10.249]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:10.249]        WriteAP(0xF0, 0x01);
[15:41:10.259]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:10.259]      </block>
[15:41:10.259]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:10.259]    </control>
[15:41:10.260]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:41:10.260]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:10.260]        // =>  FALSE
[15:41:10.260]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:10.260]    </control>
[15:41:10.260]    <block atomic="false" info="">
[15:41:10.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:10.261]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:41:10.261]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:41:10.261]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:10.261]      __ap = 0; //lets make sure we reset the access point selection
[15:41:10.261]        // -> [__ap <= 0x00000000]
[15:41:10.261]    </block>
[15:41:10.261]  </sequence>
[15:41:10.261]  
[15:41:10.299]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:41:10.299]  
[15:41:10.299]  <debugvars>
[15:41:10.300]    // Pre-defined
[15:41:10.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:10.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:10.300]    __dp=0x00000000
[15:41:10.300]    __ap=0x00000000
[15:41:10.300]    __traceout=0x00000000      (Trace Disabled)
[15:41:10.300]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:10.300]    __FlashAddr=0x00000000
[15:41:10.301]    __FlashLen=0x00000000
[15:41:10.301]    __FlashArg=0x00000000
[15:41:10.301]    __FlashOp=0x00000000
[15:41:10.301]    __Result=0x00000000
[15:41:10.301]  </debugvars>
[15:41:10.301]  
[15:41:10.301]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:41:10.301]    <block atomic="false" info="">
[15:41:10.301]      __var deviceID = 0;
[15:41:10.301]        // -> [deviceID <= 0x00000000]
[15:41:10.301]      __var version = 0;
[15:41:10.302]        // -> [version <= 0x00000000]
[15:41:10.302]      __var partNum = 0;
[15:41:10.302]        // -> [partNum <= 0x00000000]
[15:41:10.302]      __var manuf = 0;
[15:41:10.302]        // -> [manuf <= 0x00000000]
[15:41:10.302]      __var isMSPM0G1X0X_G3X0X = 0;
[15:41:10.302]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:41:10.302]      __var isProduction = 0;
[15:41:10.302]        // -> [isProduction <= 0x00000000]
[15:41:10.302]      __var continueId = 0;
[15:41:10.302]        // -> [continueId <= 0x00000000]
[15:41:10.302]      deviceID =   Read32(0x41C40004);
[15:41:10.310]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:41:10.310]        // -> [deviceID <= 0x2BB8802F]
[15:41:10.310]      version = deviceID >> 28;
[15:41:10.310]        // -> [version <= 0x00000002]
[15:41:10.310]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:41:10.310]        // -> [partNum <= 0x0000BB88]
[15:41:10.310]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:41:10.310]        // -> [manuf <= 0x00000017]
[15:41:10.310]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:41:10.310]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:41:10.310]      isProduction = (version > 0);
[15:41:10.310]        // -> [isProduction <= 0x00000001]
[15:41:10.310]    </block>
[15:41:10.310]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:41:10.310]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:41:10.310]        // =>  FALSE
[15:41:10.310]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:41:10.310]    </control>
[15:41:10.310]    <control if="continueId == 4" while="" timeout="0" info="">
[15:41:10.310]      // if-block "continueId == 4"
[15:41:10.310]        // =>  FALSE
[15:41:10.310]      // skip if-block "continueId == 4"
[15:41:10.310]    </control>
[15:41:10.310]    <control if="!isProduction" while="" timeout="0" info="">
[15:41:10.310]      // if-block "!isProduction"
[15:41:10.310]        // =>  FALSE
[15:41:10.310]      // skip if-block "!isProduction"
[15:41:10.310]    </control>
[15:41:10.310]  </sequence>
[15:41:10.310]  
[15:42:40.045]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:42:40.045]  
[15:42:40.045]  <debugvars>
[15:42:40.045]    // Pre-defined
[15:42:40.045]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:40.045]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:42:40.045]    __dp=0x00000000
[15:42:40.045]    __ap=0x00000000
[15:42:40.045]    __traceout=0x00000000      (Trace Disabled)
[15:42:40.045]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:40.045]    __FlashAddr=0x00000000
[15:42:40.045]    __FlashLen=0x00000000
[15:42:40.045]    __FlashArg=0x00000000
[15:42:40.045]    __FlashOp=0x00000000
[15:42:40.045]    __Result=0x00000000
[15:42:40.045]  </debugvars>
[15:42:40.045]  
[15:42:40.045]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:42:40.045]    <block atomic="false" info="">
[15:42:40.045]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:42:40.045]        // -> [isSWJ <= 0x00000001]
[15:42:40.045]      __var hasDormant = __protocol & 0x00020000;
[15:42:40.045]        // -> [hasDormant <= 0x00000000]
[15:42:40.045]      __var protType   = __protocol & 0x0000FFFF;
[15:42:40.045]        // -> [protType <= 0x00000002]
[15:42:40.045]    </block>
[15:42:40.045]    <control if="protType == 1" while="" timeout="0" info="">
[15:42:40.045]      // if-block "protType == 1"
[15:42:40.045]        // =>  FALSE
[15:42:40.045]      // skip if-block "protType == 1"
[15:42:40.049]    </control>
[15:42:40.049]    <control if="protType == 2" while="" timeout="0" info="">
[15:42:40.049]      // if-block "protType == 2"
[15:42:40.049]        // =>  TRUE
[15:42:40.049]      <control if="isSWJ" while="" timeout="0" info="">
[15:42:40.049]        // if-block "isSWJ"
[15:42:40.049]          // =>  TRUE
[15:42:40.049]        <control if="hasDormant" while="" timeout="0" info="">
[15:42:40.049]          // if-block "hasDormant"
[15:42:40.049]            // =>  FALSE
[15:42:40.049]          // skip if-block "hasDormant"
[15:42:40.050]        </control>
[15:42:40.050]        <control if="!hasDormant" while="" timeout="0" info="">
[15:42:40.050]          // if-block "!hasDormant"
[15:42:40.050]            // =>  TRUE
[15:42:40.050]          <block atomic="false" info="">
[15:42:40.050]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:42:40.052]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:40.052]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:42:40.055]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:42:40.055]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:42:40.055]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:40.059]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:42:40.060]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:42:40.060]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:42:40.060]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:40.060]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:42:40.060]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:42:40.060]          </block>
[15:42:40.060]          // end if-block "!hasDormant"
[15:42:40.060]        </control>
[15:42:40.060]        // end if-block "isSWJ"
[15:42:40.060]      </control>
[15:42:40.060]      <control if="!isSWJ" while="" timeout="0" info="">
[15:42:40.060]        // if-block "!isSWJ"
[15:42:40.060]          // =>  FALSE
[15:42:40.060]        // skip if-block "!isSWJ"
[15:42:40.060]      </control>
[15:42:40.060]      <block atomic="false" info="">
[15:42:40.060]        ReadDP(0x0);
[15:42:40.067]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:42:40.067]      </block>
[15:42:40.067]      // end if-block "protType == 2"
[15:42:40.067]    </control>
[15:42:40.067]  </sequence>
[15:42:40.067]  
[15:42:40.071]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:42:40.071]  
[15:42:40.071]  <debugvars>
[15:42:40.071]    // Pre-defined
[15:42:40.071]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:40.071]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:42:40.071]    __dp=0x00000000
[15:42:40.071]    __ap=0x00000000
[15:42:40.071]    __traceout=0x00000000      (Trace Disabled)
[15:42:40.071]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:40.073]    __FlashAddr=0x00000000
[15:42:40.073]    __FlashLen=0x00000000
[15:42:40.073]    __FlashArg=0x00000000
[15:42:40.073]    __FlashOp=0x00000000
[15:42:40.073]    __Result=0x00000000
[15:42:40.073]  </debugvars>
[15:42:40.073]  
[15:42:40.073]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:42:40.073]    <block atomic="false" info="">
[15:42:40.073]      __var SW_DP_ABORT       = 0x0;
[15:42:40.073]        // -> [SW_DP_ABORT <= 0x00000000]
[15:42:40.073]      __var DP_CTRL_STAT      = 0x4;
[15:42:40.073]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:42:40.073]      __var DP_SELECT         = 0x8;
[15:42:40.073]        // -> [DP_SELECT <= 0x00000008]
[15:42:40.073]      __var powered_down      = 0;
[15:42:40.073]        // -> [powered_down <= 0x00000000]
[15:42:40.073]      WriteDP(DP_SELECT, 0x00000000);
[15:42:40.076]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:42:40.076]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:42:40.076]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:42:40.076]        // -> [powered_down <= 0x00000001]
[15:42:40.076]    </block>
[15:42:40.076]    <control if="powered_down" while="" timeout="0" info="">
[15:42:40.076]      // if-block "powered_down"
[15:42:40.076]        // =>  TRUE
[15:42:40.076]      <block atomic="false" info="">
[15:42:40.076]        Message(0, "Debug/System power-up request sent");
[15:42:40.076]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:42:40.085]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:42:40.085]      </block>
[15:42:40.085]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:42:40.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:42:40.087]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:42:40.087]        // while-condition  =>  FALSE
[15:42:40.087]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:42:40.087]      </control>
[15:42:40.087]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:42:40.087]        // if-block "(__protocol & 0xFFFF) == 1"
[15:42:40.087]          // =>  FALSE
[15:42:40.087]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:42:40.087]      </control>
[15:42:40.087]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:42:40.087]        // if-block "(__protocol & 0xFFFF) == 2"
[15:42:40.088]          // =>  TRUE
[15:42:40.088]        <block atomic="false" info="">
[15:42:40.088]          Message(0, "executing SWD power up");
[15:42:40.091]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:42:40.093]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:42:40.093]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:42:40.094]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:42:40.094]        </block>
[15:42:40.095]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:42:40.095]      </control>
[15:42:40.095]      // end if-block "powered_down"
[15:42:40.095]    </control>
[15:42:40.095]    <block atomic="false" info="">
[15:42:40.095]      __var DEBUG_PORT_VAL    = 0;
[15:42:40.095]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:42:40.095]      __var ACCESS_POINT_VAL  = 0;
[15:42:40.095]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:42:40.095]      __ap = 1; 
[15:42:40.095]        // -> [__ap <= 0x00000001]
[15:42:40.096]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:42:40.102]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:42:40.102]      __ap = 4;
[15:42:40.102]        // -> [__ap <= 0x00000004]
[15:42:40.102]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:42:40.108]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:42:40.108]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:42:40.108]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:42:40.111]    </block>
[15:42:40.111]    <block atomic="false" info="">
[15:42:40.111]      __var nReset = 0x80;
[15:42:40.111]        // -> [nReset <= 0x00000080]
[15:42:40.111]      __var canReadPins = 0;
[15:42:40.111]        // -> [canReadPins <= 0x00000000]
[15:42:40.111]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:42:40.112]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:42:40.112]        // -> [canReadPins <= 0x00000001]
[15:42:40.112]    </block>
[15:42:40.112]    <control if="" while="1" timeout="200" info="">
[15:42:40.112]      // while "1"  (timeout="200")
[15:42:40.112]      // while-condition  =>  TRUE
[15:42:40.112]      // while "1"  (timeout="200")
[15:42:40.112]      // while-condition  =>  TRUE
[15:42:40.112]      // while "1"  (timeout="200")
[15:42:40.112]      // while-condition  =>  TRUE
[15:42:40.112]      // while "1"  (timeout="200")
[15:42:40.112]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.115]      // while "1"  (timeout="200")
[15:42:40.115]      // while-condition  =>  TRUE
[15:42:40.119]      // while "1"  (timeout="200")
[15:42:40.119]      // while-condition  =>  TRUE
[15:42:40.119]      // while "1"  (timeout="200")
[15:42:40.119]      // while-condition  =>  TRUE
[15:42:40.119]      // while "1"  (timeout="200")
[15:42:40.119]      // while-condition  =>  TRUE
[15:42:40.119]      // while "1"  (timeout="200")
[15:42:40.119]      // while-condition  =>  TRUE
[15:42:40.119]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.120]      // while "1"  (timeout="200")
[15:42:40.120]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.125]      // while "1"  (timeout="200")
[15:42:40.125]      // while-condition  =>  TRUE
[15:42:40.129]      // while "1"  (timeout="200")
[15:42:40.129]      // while  =>  TIMEOUT
[15:42:40.129]      // end while "1"
[15:42:40.129]    </control>
[15:42:40.129]    <control if="canReadPins" while="" timeout="0" info="">
[15:42:40.129]      // if-block "canReadPins"
[15:42:40.129]        // =>  TRUE
[15:42:40.129]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:42:40.129]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:42:40.131]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:42:40.131]        // while-condition  =>  FALSE
[15:42:40.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:42:40.131]      </control>
[15:42:40.131]      // end if-block "canReadPins"
[15:42:40.131]    </control>
[15:42:40.131]    <control if="!canReadPins" while="" timeout="0" info="">
[15:42:40.131]      // if-block "!canReadPins"
[15:42:40.131]        // =>  FALSE
[15:42:40.131]      // skip if-block "!canReadPins"
[15:42:40.131]    </control>
[15:42:40.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:42:40.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:42:40.131]        // =>  TRUE
[15:42:40.131]      <block atomic="false" info="">
[15:42:40.131]        WriteAP(0x00, 0x190008);
[15:42:40.131]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:42:40.131]        WriteAP(0xF0, 0x01);
[15:42:40.140]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:42:40.140]      </block>
[15:42:40.140]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:42:40.140]    </control>
[15:42:40.140]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:42:40.140]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:42:40.140]        // =>  FALSE
[15:42:40.140]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:42:40.140]    </control>
[15:42:40.140]    <block atomic="false" info="">
[15:42:40.140]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:42:40.146]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:42:40.146]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:42:40.146]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:42:40.146]      __ap = 0; //lets make sure we reset the access point selection
[15:42:40.146]        // -> [__ap <= 0x00000000]
[15:42:40.146]    </block>
[15:42:40.146]  </sequence>
[15:42:40.146]  
[15:42:40.170]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:42:40.170]  
[15:42:40.170]  <debugvars>
[15:42:40.170]    // Pre-defined
[15:42:40.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:40.170]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:42:40.170]    __dp=0x00000000
[15:42:40.170]    __ap=0x00000000
[15:42:40.170]    __traceout=0x00000000      (Trace Disabled)
[15:42:40.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:40.177]    __FlashAddr=0x00000000
[15:42:40.177]    __FlashLen=0x00000000
[15:42:40.177]    __FlashArg=0x00000000
[15:42:40.177]    __FlashOp=0x00000000
[15:42:40.177]    __Result=0x00000000
[15:42:40.177]  </debugvars>
[15:42:40.177]  
[15:42:40.177]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:42:40.177]    <block atomic="false" info="">
[15:42:40.177]      __var deviceID = 0;
[15:42:40.177]        // -> [deviceID <= 0x00000000]
[15:42:40.177]      __var version = 0;
[15:42:40.177]        // -> [version <= 0x00000000]
[15:42:40.177]      __var partNum = 0;
[15:42:40.177]        // -> [partNum <= 0x00000000]
[15:42:40.177]      __var manuf = 0;
[15:42:40.177]        // -> [manuf <= 0x00000000]
[15:42:40.177]      __var isMSPM0G1X0X_G3X0X = 0;
[15:42:40.177]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:42:40.177]      __var isProduction = 0;
[15:42:40.177]        // -> [isProduction <= 0x00000000]
[15:42:40.177]      __var continueId = 0;
[15:42:40.177]        // -> [continueId <= 0x00000000]
[15:42:40.179]      deviceID =   Read32(0x41C40004);
[15:42:40.182]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:42:40.182]        // -> [deviceID <= 0x2BB8802F]
[15:42:40.182]      version = deviceID >> 28;
[15:42:40.182]        // -> [version <= 0x00000002]
[15:42:40.182]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:42:40.182]        // -> [partNum <= 0x0000BB88]
[15:42:40.182]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:42:40.182]        // -> [manuf <= 0x00000017]
[15:42:40.182]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:42:40.182]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:42:40.182]      isProduction = (version > 0);
[15:42:40.182]        // -> [isProduction <= 0x00000001]
[15:42:40.182]    </block>
[15:42:40.182]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:42:40.182]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:42:40.182]        // =>  FALSE
[15:42:40.182]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:42:40.182]    </control>
[15:42:40.182]    <control if="continueId == 4" while="" timeout="0" info="">
[15:42:40.182]      // if-block "continueId == 4"
[15:42:40.182]        // =>  FALSE
[15:42:40.182]      // skip if-block "continueId == 4"
[15:42:40.182]    </control>
[15:42:40.182]    <control if="!isProduction" while="" timeout="0" info="">
[15:42:40.182]      // if-block "!isProduction"
[15:42:40.182]        // =>  FALSE
[15:42:40.182]      // skip if-block "!isProduction"
[15:42:40.187]    </control>
[15:42:40.187]  </sequence>
[15:42:40.187]  
[15:42:52.761]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:42:52.761]  
[15:42:52.770]  <debugvars>
[15:42:52.770]    // Pre-defined
[15:42:52.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:52.770]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:42:52.770]    __dp=0x00000000
[15:42:52.770]    __ap=0x00000000
[15:42:52.770]    __traceout=0x00000000      (Trace Disabled)
[15:42:52.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:52.770]    __FlashAddr=0x00000000
[15:42:52.770]    __FlashLen=0x00000000
[15:42:52.770]    __FlashArg=0x00000000
[15:42:52.770]    __FlashOp=0x00000000
[15:42:52.770]    __Result=0x00000000
[15:42:52.770]  </debugvars>
[15:42:52.770]  
[15:42:52.770]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:42:52.770]    <block atomic="false" info="">
[15:42:52.770]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:42:52.770]        // -> [isSWJ <= 0x00000001]
[15:42:52.770]      __var hasDormant = __protocol & 0x00020000;
[15:42:52.770]        // -> [hasDormant <= 0x00000000]
[15:42:52.770]      __var protType   = __protocol & 0x0000FFFF;
[15:42:52.770]        // -> [protType <= 0x00000002]
[15:42:52.770]    </block>
[15:42:52.772]    <control if="protType == 1" while="" timeout="0" info="">
[15:42:52.772]      // if-block "protType == 1"
[15:42:52.772]        // =>  FALSE
[15:42:52.772]      // skip if-block "protType == 1"
[15:42:52.772]    </control>
[15:42:52.772]    <control if="protType == 2" while="" timeout="0" info="">
[15:42:52.772]      // if-block "protType == 2"
[15:42:52.772]        // =>  TRUE
[15:42:52.772]      <control if="isSWJ" while="" timeout="0" info="">
[15:42:52.772]        // if-block "isSWJ"
[15:42:52.772]          // =>  TRUE
[15:42:52.772]        <control if="hasDormant" while="" timeout="0" info="">
[15:42:52.772]          // if-block "hasDormant"
[15:42:52.772]            // =>  FALSE
[15:42:52.772]          // skip if-block "hasDormant"
[15:42:52.772]        </control>
[15:42:52.772]        <control if="!hasDormant" while="" timeout="0" info="">
[15:42:52.772]          // if-block "!hasDormant"
[15:42:52.772]            // =>  TRUE
[15:42:52.772]          <block atomic="false" info="">
[15:42:52.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:42:52.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:52.776]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:42:52.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:42:52.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:42:52.781]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:52.781]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:42:52.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:42:52.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:42:52.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:52.785]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:42:52.785]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:42:52.787]          </block>
[15:42:52.787]          // end if-block "!hasDormant"
[15:42:52.787]        </control>
[15:42:52.787]        // end if-block "isSWJ"
[15:42:52.787]      </control>
[15:42:52.787]      <control if="!isSWJ" while="" timeout="0" info="">
[15:42:52.787]        // if-block "!isSWJ"
[15:42:52.787]          // =>  FALSE
[15:42:52.787]        // skip if-block "!isSWJ"
[15:42:52.787]      </control>
[15:42:52.787]      <block atomic="false" info="">
[15:42:52.787]        ReadDP(0x0);
[15:42:52.789]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:42:52.789]      </block>
[15:42:52.790]      // end if-block "protType == 2"
[15:42:52.790]    </control>
[15:42:52.790]  </sequence>
[15:42:52.790]  
[15:42:52.792]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:42:52.792]  
[15:42:52.792]  <debugvars>
[15:42:52.792]    // Pre-defined
[15:42:52.792]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:52.792]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:42:52.792]    __dp=0x00000000
[15:42:52.792]    __ap=0x00000000
[15:42:52.792]    __traceout=0x00000000      (Trace Disabled)
[15:42:52.792]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:52.792]    __FlashAddr=0x00000000
[15:42:52.792]    __FlashLen=0x00000000
[15:42:52.792]    __FlashArg=0x00000000
[15:42:52.792]    __FlashOp=0x00000000
[15:42:52.792]    __Result=0x00000000
[15:42:52.792]  </debugvars>
[15:42:52.792]  
[15:42:52.792]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:42:52.792]    <block atomic="false" info="">
[15:42:52.795]      __var SW_DP_ABORT       = 0x0;
[15:42:52.795]        // -> [SW_DP_ABORT <= 0x00000000]
[15:42:52.795]      __var DP_CTRL_STAT      = 0x4;
[15:42:52.795]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:42:52.795]      __var DP_SELECT         = 0x8;
[15:42:52.795]        // -> [DP_SELECT <= 0x00000008]
[15:42:52.795]      __var powered_down      = 0;
[15:42:52.795]        // -> [powered_down <= 0x00000000]
[15:42:52.795]      WriteDP(DP_SELECT, 0x00000000);
[15:42:52.799]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:42:52.799]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:42:52.800]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:42:52.800]        // -> [powered_down <= 0x00000001]
[15:42:52.800]    </block>
[15:42:52.800]    <control if="powered_down" while="" timeout="0" info="">
[15:42:52.800]      // if-block "powered_down"
[15:42:52.800]        // =>  TRUE
[15:42:52.800]      <block atomic="false" info="">
[15:42:52.800]        Message(0, "Debug/System power-up request sent");
[15:42:52.802]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:42:52.806]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:42:52.806]      </block>
[15:42:52.806]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:42:52.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:42:52.810]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:42:52.810]        // while-condition  =>  FALSE
[15:42:52.810]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:42:52.811]      </control>
[15:42:52.811]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:42:52.811]        // if-block "(__protocol & 0xFFFF) == 1"
[15:42:52.811]          // =>  FALSE
[15:42:52.811]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:42:52.811]      </control>
[15:42:52.811]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:42:52.811]        // if-block "(__protocol & 0xFFFF) == 2"
[15:42:52.811]          // =>  TRUE
[15:42:52.811]        <block atomic="false" info="">
[15:42:52.811]          Message(0, "executing SWD power up");
[15:42:52.813]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:42:52.814]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:42:52.814]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:42:52.822]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:42:52.822]        </block>
[15:42:52.822]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:42:52.822]      </control>
[15:42:52.822]      // end if-block "powered_down"
[15:42:52.822]    </control>
[15:42:52.822]    <block atomic="false" info="">
[15:42:52.822]      __var DEBUG_PORT_VAL    = 0;
[15:42:52.822]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:42:52.822]      __var ACCESS_POINT_VAL  = 0;
[15:42:52.822]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:42:52.822]      __ap = 1; 
[15:42:52.822]        // -> [__ap <= 0x00000001]
[15:42:52.822]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:42:52.829]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:42:52.829]      __ap = 4;
[15:42:52.829]        // -> [__ap <= 0x00000004]
[15:42:52.829]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:42:52.832]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:42:52.832]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:42:52.832]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:42:52.835]    </block>
[15:42:52.835]    <block atomic="false" info="">
[15:42:52.835]      __var nReset = 0x80;
[15:42:52.835]        // -> [nReset <= 0x00000080]
[15:42:52.835]      __var canReadPins = 0;
[15:42:52.835]        // -> [canReadPins <= 0x00000000]
[15:42:52.835]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:42:52.839]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:42:52.839]        // -> [canReadPins <= 0x00000001]
[15:42:52.839]    </block>
[15:42:52.839]    <control if="" while="1" timeout="200" info="">
[15:42:52.839]      // while "1"  (timeout="200")
[15:42:52.839]      // while-condition  =>  TRUE
[15:42:52.839]      // while "1"  (timeout="200")
[15:42:52.839]      // while-condition  =>  TRUE
[15:42:52.839]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.840]      // while-condition  =>  TRUE
[15:42:52.840]      // while "1"  (timeout="200")
[15:42:52.844]      // while-condition  =>  TRUE
[15:42:52.844]      // while "1"  (timeout="200")
[15:42:52.844]      // while-condition  =>  TRUE
[15:42:52.844]      // while "1"  (timeout="200")
[15:42:52.844]      // while-condition  =>  TRUE
[15:42:52.844]      // while "1"  (timeout="200")
[15:42:52.844]      // while-condition  =>  TRUE
[15:42:52.844]      // while "1"  (timeout="200")
[15:42:52.845]      // while-condition  =>  TRUE
[15:42:52.845]      // while "1"  (timeout="200")
[15:42:52.845]      // while-condition  =>  TRUE
[15:42:52.845]      // while "1"  (timeout="200")
[15:42:52.845]      // while-condition  =>  TRUE
[15:42:52.845]      // while "1"  (timeout="200")
[15:42:52.845]      // while-condition  =>  TRUE
[15:42:52.845]      // while "1"  (timeout="200")
[15:42:52.846]      // while-condition  =>  TRUE
[15:42:52.846]      // while "1"  (timeout="200")
[15:42:52.846]      // while-condition  =>  TRUE
[15:42:52.846]      // while "1"  (timeout="200")
[15:42:52.846]      // while-condition  =>  TRUE
[15:42:52.846]      // while "1"  (timeout="200")
[15:42:52.846]      // while-condition  =>  TRUE
[15:42:52.846]      // while "1"  (timeout="200")
[15:42:52.846]      // while-condition  =>  TRUE
[15:42:52.846]      // while "1"  (timeout="200")
[15:42:52.846]      // while-condition  =>  TRUE
[15:42:52.846]      // while "1"  (timeout="200")
[15:42:52.846]      // while-condition  =>  TRUE
[15:42:52.846]      // while "1"  (timeout="200")
[15:42:52.847]      // while-condition  =>  TRUE
[15:42:52.847]      // while "1"  (timeout="200")
[15:42:52.847]      // while  =>  TIMEOUT
[15:42:52.847]      // end while "1"
[15:42:52.848]    </control>
[15:42:52.848]    <control if="canReadPins" while="" timeout="0" info="">
[15:42:52.848]      // if-block "canReadPins"
[15:42:52.848]        // =>  TRUE
[15:42:52.848]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:42:52.848]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:42:52.857]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:42:52.857]        // while-condition  =>  FALSE
[15:42:52.860]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:42:52.860]      </control>
[15:42:52.860]      // end if-block "canReadPins"
[15:42:52.860]    </control>
[15:42:52.860]    <control if="!canReadPins" while="" timeout="0" info="">
[15:42:52.860]      // if-block "!canReadPins"
[15:42:52.860]        // =>  FALSE
[15:42:52.860]      // skip if-block "!canReadPins"
[15:42:52.860]    </control>
[15:42:52.860]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:42:52.860]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:42:52.860]        // =>  TRUE
[15:42:52.860]      <block atomic="false" info="">
[15:42:52.860]        WriteAP(0x00, 0x190008);
[15:42:52.862]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:42:52.862]        WriteAP(0xF0, 0x01);
[15:42:52.873]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:42:52.873]      </block>
[15:42:52.873]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:42:52.873]    </control>
[15:42:52.873]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:42:52.873]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:42:52.873]        // =>  FALSE
[15:42:52.873]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:42:52.873]    </control>
[15:42:52.873]    <block atomic="false" info="">
[15:42:52.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:42:52.888]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:42:52.888]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:42:52.889]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:42:52.890]      __ap = 0; //lets make sure we reset the access point selection
[15:42:52.891]        // -> [__ap <= 0x00000000]
[15:42:52.891]    </block>
[15:42:52.891]  </sequence>
[15:42:52.891]  
[15:42:52.911]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:42:52.911]  
[15:42:52.911]  <debugvars>
[15:42:52.911]    // Pre-defined
[15:42:52.911]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:52.911]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:42:52.911]    __dp=0x00000000
[15:42:52.911]    __ap=0x00000000
[15:42:52.914]    __traceout=0x00000000      (Trace Disabled)
[15:42:52.914]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:52.914]    __FlashAddr=0x00000000
[15:42:52.914]    __FlashLen=0x00000000
[15:42:52.914]    __FlashArg=0x00000000
[15:42:52.914]    __FlashOp=0x00000000
[15:42:52.914]    __Result=0x00000000
[15:42:52.914]  </debugvars>
[15:42:52.914]  
[15:42:52.914]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:42:52.914]    <block atomic="false" info="">
[15:42:52.914]      __var deviceID = 0;
[15:42:52.914]        // -> [deviceID <= 0x00000000]
[15:42:52.914]      __var version = 0;
[15:42:52.914]        // -> [version <= 0x00000000]
[15:42:52.914]      __var partNum = 0;
[15:42:52.914]        // -> [partNum <= 0x00000000]
[15:42:52.917]      __var manuf = 0;
[15:42:52.917]        // -> [manuf <= 0x00000000]
[15:42:52.917]      __var isMSPM0G1X0X_G3X0X = 0;
[15:42:52.917]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:42:52.917]      __var isProduction = 0;
[15:42:52.917]        // -> [isProduction <= 0x00000000]
[15:42:52.917]      __var continueId = 0;
[15:42:52.917]        // -> [continueId <= 0x00000000]
[15:42:52.917]      deviceID =   Read32(0x41C40004);
[15:42:52.923]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:42:52.923]        // -> [deviceID <= 0x2BB8802F]
[15:42:52.923]      version = deviceID >> 28;
[15:42:52.923]        // -> [version <= 0x00000002]
[15:42:52.923]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:42:52.923]        // -> [partNum <= 0x0000BB88]
[15:42:52.923]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:42:52.923]        // -> [manuf <= 0x00000017]
[15:42:52.923]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:42:52.923]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:42:52.923]      isProduction = (version > 0);
[15:42:52.923]        // -> [isProduction <= 0x00000001]
[15:42:52.923]    </block>
[15:42:52.923]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:42:52.923]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:42:52.923]        // =>  FALSE
[15:42:52.923]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:42:52.925]    </control>
[15:42:52.925]    <control if="continueId == 4" while="" timeout="0" info="">
[15:42:52.925]      // if-block "continueId == 4"
[15:42:52.925]        // =>  FALSE
[15:42:52.925]      // skip if-block "continueId == 4"
[15:42:52.925]    </control>
[15:42:52.925]    <control if="!isProduction" while="" timeout="0" info="">
[15:42:52.925]      // if-block "!isProduction"
[15:42:52.925]        // =>  FALSE
[15:42:52.925]      // skip if-block "!isProduction"
[15:42:52.925]    </control>
[15:42:52.925]  </sequence>
[15:42:52.925]  
[15:44:10.288]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:44:10.288]  
[15:44:10.297]  <debugvars>
[15:44:10.297]    // Pre-defined
[15:44:10.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:10.297]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:10.297]    __dp=0x00000000
[15:44:10.297]    __ap=0x00000000
[15:44:10.297]    __traceout=0x00000000      (Trace Disabled)
[15:44:10.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:10.297]    __FlashAddr=0x00000000
[15:44:10.297]    __FlashLen=0x00000000
[15:44:10.297]    __FlashArg=0x00000000
[15:44:10.297]    __FlashOp=0x00000000
[15:44:10.297]    __Result=0x00000000
[15:44:10.297]  </debugvars>
[15:44:10.297]  
[15:44:10.297]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:44:10.297]    <block atomic="false" info="">
[15:44:10.297]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:44:10.297]        // -> [isSWJ <= 0x00000001]
[15:44:10.297]      __var hasDormant = __protocol & 0x00020000;
[15:44:10.297]        // -> [hasDormant <= 0x00000000]
[15:44:10.297]      __var protType   = __protocol & 0x0000FFFF;
[15:44:10.297]        // -> [protType <= 0x00000002]
[15:44:10.297]    </block>
[15:44:10.297]    <control if="protType == 1" while="" timeout="0" info="">
[15:44:10.297]      // if-block "protType == 1"
[15:44:10.299]        // =>  FALSE
[15:44:10.299]      // skip if-block "protType == 1"
[15:44:10.299]    </control>
[15:44:10.299]    <control if="protType == 2" while="" timeout="0" info="">
[15:44:10.299]      // if-block "protType == 2"
[15:44:10.299]        // =>  TRUE
[15:44:10.300]      <control if="isSWJ" while="" timeout="0" info="">
[15:44:10.300]        // if-block "isSWJ"
[15:44:10.300]          // =>  TRUE
[15:44:10.300]        <control if="hasDormant" while="" timeout="0" info="">
[15:44:10.300]          // if-block "hasDormant"
[15:44:10.300]            // =>  FALSE
[15:44:10.300]          // skip if-block "hasDormant"
[15:44:10.300]        </control>
[15:44:10.300]        <control if="!hasDormant" while="" timeout="0" info="">
[15:44:10.300]          // if-block "!hasDormant"
[15:44:10.301]            // =>  TRUE
[15:44:10.301]          <block atomic="false" info="">
[15:44:10.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:44:10.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:10.301]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:44:10.318]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:44:10.318]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:44:10.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:10.320]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:44:10.327]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:44:10.327]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:44:10.331]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:10.331]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:44:10.331]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:44:10.331]          </block>
[15:44:10.331]          // end if-block "!hasDormant"
[15:44:10.331]        </control>
[15:44:10.336]        // end if-block "isSWJ"
[15:44:10.336]      </control>
[15:44:10.336]      <control if="!isSWJ" while="" timeout="0" info="">
[15:44:10.336]        // if-block "!isSWJ"
[15:44:10.336]          // =>  FALSE
[15:44:10.336]        // skip if-block "!isSWJ"
[15:44:10.336]      </control>
[15:44:10.336]      <block atomic="false" info="">
[15:44:10.336]        ReadDP(0x0);
[15:44:10.339]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:44:10.339]      </block>
[15:44:10.339]      // end if-block "protType == 2"
[15:44:10.339]    </control>
[15:44:10.340]  </sequence>
[15:44:10.340]  
[15:44:10.349]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:44:10.349]  
[15:44:10.349]  <debugvars>
[15:44:10.349]    // Pre-defined
[15:44:10.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:10.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:10.349]    __dp=0x00000000
[15:44:10.349]    __ap=0x00000000
[15:44:10.350]    __traceout=0x00000000      (Trace Disabled)
[15:44:10.350]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:10.350]    __FlashAddr=0x00000000
[15:44:10.350]    __FlashLen=0x00000000
[15:44:10.350]    __FlashArg=0x00000000
[15:44:10.350]    __FlashOp=0x00000000
[15:44:10.350]    __Result=0x00000000
[15:44:10.350]  </debugvars>
[15:44:10.350]  
[15:44:10.350]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:44:10.351]    <block atomic="false" info="">
[15:44:10.351]      __var SW_DP_ABORT       = 0x0;
[15:44:10.351]        // -> [SW_DP_ABORT <= 0x00000000]
[15:44:10.351]      __var DP_CTRL_STAT      = 0x4;
[15:44:10.351]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:44:10.351]      __var DP_SELECT         = 0x8;
[15:44:10.351]        // -> [DP_SELECT <= 0x00000008]
[15:44:10.351]      __var powered_down      = 0;
[15:44:10.351]        // -> [powered_down <= 0x00000000]
[15:44:10.351]      WriteDP(DP_SELECT, 0x00000000);
[15:44:10.351]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:44:10.351]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:44:10.357]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:44:10.357]        // -> [powered_down <= 0x00000001]
[15:44:10.357]    </block>
[15:44:10.357]    <control if="powered_down" while="" timeout="0" info="">
[15:44:10.357]      // if-block "powered_down"
[15:44:10.357]        // =>  TRUE
[15:44:10.357]      <block atomic="false" info="">
[15:44:10.357]        Message(0, "Debug/System power-up request sent");
[15:44:10.357]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:44:10.364]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:44:10.364]      </block>
[15:44:10.364]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:44:10.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:44:10.366]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:44:10.366]        // while-condition  =>  FALSE
[15:44:10.366]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:44:10.366]      </control>
[15:44:10.366]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:44:10.366]        // if-block "(__protocol & 0xFFFF) == 1"
[15:44:10.366]          // =>  FALSE
[15:44:10.366]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:44:10.366]      </control>
[15:44:10.367]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:44:10.367]        // if-block "(__protocol & 0xFFFF) == 2"
[15:44:10.367]          // =>  TRUE
[15:44:10.367]        <block atomic="false" info="">
[15:44:10.367]          Message(0, "executing SWD power up");
[15:44:10.370]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:44:10.371]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:44:10.371]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:44:10.371]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:44:10.371]        </block>
[15:44:10.371]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:44:10.371]      </control>
[15:44:10.371]      // end if-block "powered_down"
[15:44:10.371]    </control>
[15:44:10.371]    <block atomic="false" info="">
[15:44:10.371]      __var DEBUG_PORT_VAL    = 0;
[15:44:10.371]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:44:10.371]      __var ACCESS_POINT_VAL  = 0;
[15:44:10.371]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:44:10.371]      __ap = 1; 
[15:44:10.371]        // -> [__ap <= 0x00000001]
[15:44:10.371]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:44:10.380]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:44:10.387]      __ap = 4;
[15:44:10.387]        // -> [__ap <= 0x00000004]
[15:44:10.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:10.392]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:44:10.392]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:44:10.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:10.395]    </block>
[15:44:10.395]    <block atomic="false" info="">
[15:44:10.395]      __var nReset = 0x80;
[15:44:10.395]        // -> [nReset <= 0x00000080]
[15:44:10.395]      __var canReadPins = 0;
[15:44:10.395]        // -> [canReadPins <= 0x00000000]
[15:44:10.395]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:44:10.396]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:44:10.396]        // -> [canReadPins <= 0x00000001]
[15:44:10.396]    </block>
[15:44:10.396]    <control if="" while="1" timeout="200" info="">
[15:44:10.398]      // while "1"  (timeout="200")
[15:44:10.398]      // while-condition  =>  TRUE
[15:44:10.398]      // while "1"  (timeout="200")
[15:44:10.398]      // while-condition  =>  TRUE
[15:44:10.398]      // while "1"  (timeout="200")
[15:44:10.398]      // while-condition  =>  TRUE
[15:44:10.398]      // while "1"  (timeout="200")
[15:44:10.398]      // while-condition  =>  TRUE
[15:44:10.398]      // while "1"  (timeout="200")
[15:44:10.398]      // while-condition  =>  TRUE
[15:44:10.398]      // while "1"  (timeout="200")
[15:44:10.398]      // while-condition  =>  TRUE
[15:44:10.398]      // while "1"  (timeout="200")
[15:44:10.399]      // while-condition  =>  TRUE
[15:44:10.399]      // while "1"  (timeout="200")
[15:44:10.399]      // while-condition  =>  TRUE
[15:44:10.399]      // while "1"  (timeout="200")
[15:44:10.399]      // while-condition  =>  TRUE
[15:44:10.399]      // while "1"  (timeout="200")
[15:44:10.399]      // while-condition  =>  TRUE
[15:44:10.399]      // while "1"  (timeout="200")
[15:44:10.399]      // while-condition  =>  TRUE
[15:44:10.399]      // while "1"  (timeout="200")
[15:44:10.400]      // while-condition  =>  TRUE
[15:44:10.400]      // while "1"  (timeout="200")
[15:44:10.400]      // while-condition  =>  TRUE
[15:44:10.400]      // while "1"  (timeout="200")
[15:44:10.400]      // while-condition  =>  TRUE
[15:44:10.400]      // while "1"  (timeout="200")
[15:44:10.400]      // while-condition  =>  TRUE
[15:44:10.400]      // while "1"  (timeout="200")
[15:44:10.400]      // while-condition  =>  TRUE
[15:44:10.401]      // while "1"  (timeout="200")
[15:44:10.401]      // while-condition  =>  TRUE
[15:44:10.401]      // while "1"  (timeout="200")
[15:44:10.401]      // while-condition  =>  TRUE
[15:44:10.401]      // while "1"  (timeout="200")
[15:44:10.401]      // while-condition  =>  TRUE
[15:44:10.401]      // while "1"  (timeout="200")
[15:44:10.401]      // while-condition  =>  TRUE
[15:44:10.401]      // while "1"  (timeout="200")
[15:44:10.401]      // while-condition  =>  TRUE
[15:44:10.401]      // while "1"  (timeout="200")
[15:44:10.401]      // while-condition  =>  TRUE
[15:44:10.401]      // while "1"  (timeout="200")
[15:44:10.401]      // while-condition  =>  TRUE
[15:44:10.403]      // while "1"  (timeout="200")
[15:44:10.403]      // while-condition  =>  TRUE
[15:44:10.403]      // while "1"  (timeout="200")
[15:44:10.403]      // while-condition  =>  TRUE
[15:44:10.403]      // while "1"  (timeout="200")
[15:44:10.403]      // while-condition  =>  TRUE
[15:44:10.403]      // while "1"  (timeout="200")
[15:44:10.403]      // while-condition  =>  TRUE
[15:44:10.403]      // while "1"  (timeout="200")
[15:44:10.403]      // while-condition  =>  TRUE
[15:44:10.403]      // while "1"  (timeout="200")
[15:44:10.403]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.404]      // while-condition  =>  TRUE
[15:44:10.404]      // while "1"  (timeout="200")
[15:44:10.406]      // while-condition  =>  TRUE
[15:44:10.406]      // while "1"  (timeout="200")
[15:44:10.406]      // while-condition  =>  TRUE
[15:44:10.406]      // while "1"  (timeout="200")
[15:44:10.406]      // while-condition  =>  TRUE
[15:44:10.406]      // while "1"  (timeout="200")
[15:44:10.406]      // while-condition  =>  TRUE
[15:44:10.406]      // while "1"  (timeout="200")
[15:44:10.406]      // while-condition  =>  TRUE
[15:44:10.406]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.408]      // while-condition  =>  TRUE
[15:44:10.408]      // while "1"  (timeout="200")
[15:44:10.409]      // while-condition  =>  TRUE
[15:44:10.409]      // while "1"  (timeout="200")
[15:44:10.409]      // while  =>  TIMEOUT
[15:44:10.409]      // end while "1"
[15:44:10.409]    </control>
[15:44:10.409]    <control if="canReadPins" while="" timeout="0" info="">
[15:44:10.409]      // if-block "canReadPins"
[15:44:10.409]        // =>  TRUE
[15:44:10.409]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:44:10.409]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:44:10.412]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:44:10.412]        // while-condition  =>  FALSE
[15:44:10.412]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:44:10.412]      </control>
[15:44:10.412]      // end if-block "canReadPins"
[15:44:10.412]    </control>
[15:44:10.412]    <control if="!canReadPins" while="" timeout="0" info="">
[15:44:10.412]      // if-block "!canReadPins"
[15:44:10.412]        // =>  FALSE
[15:44:10.412]      // skip if-block "!canReadPins"
[15:44:10.412]    </control>
[15:44:10.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:44:10.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:10.412]        // =>  TRUE
[15:44:10.412]      <block atomic="false" info="">
[15:44:10.412]        WriteAP(0x00, 0x190008);
[15:44:10.412]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:10.412]        WriteAP(0xF0, 0x01);
[15:44:10.419]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:10.419]      </block>
[15:44:10.420]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:10.420]    </control>
[15:44:10.420]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:44:10.420]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:10.420]        // =>  FALSE
[15:44:10.420]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:10.420]    </control>
[15:44:10.420]    <block atomic="false" info="">
[15:44:10.421]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:10.433]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:44:10.433]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:44:10.433]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:10.435]      __ap = 0; //lets make sure we reset the access point selection
[15:44:10.435]        // -> [__ap <= 0x00000000]
[15:44:10.435]    </block>
[15:44:10.435]  </sequence>
[15:44:10.435]  
[15:44:10.472]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:44:10.472]  
[15:44:10.472]  <debugvars>
[15:44:10.475]    // Pre-defined
[15:44:10.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:10.475]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:10.475]    __dp=0x00000000
[15:44:10.475]    __ap=0x00000000
[15:44:10.475]    __traceout=0x00000000      (Trace Disabled)
[15:44:10.475]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:10.475]    __FlashAddr=0x00000000
[15:44:10.475]    __FlashLen=0x00000000
[15:44:10.475]    __FlashArg=0x00000000
[15:44:10.475]    __FlashOp=0x00000000
[15:44:10.475]    __Result=0x00000000
[15:44:10.475]  </debugvars>
[15:44:10.475]  
[15:44:10.475]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:44:10.475]    <block atomic="false" info="">
[15:44:10.477]      __var deviceID = 0;
[15:44:10.477]        // -> [deviceID <= 0x00000000]
[15:44:10.477]      __var version = 0;
[15:44:10.477]        // -> [version <= 0x00000000]
[15:44:10.477]      __var partNum = 0;
[15:44:10.477]        // -> [partNum <= 0x00000000]
[15:44:10.477]      __var manuf = 0;
[15:44:10.477]        // -> [manuf <= 0x00000000]
[15:44:10.477]      __var isMSPM0G1X0X_G3X0X = 0;
[15:44:10.477]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:44:10.477]      __var isProduction = 0;
[15:44:10.477]        // -> [isProduction <= 0x00000000]
[15:44:10.477]      __var continueId = 0;
[15:44:10.477]        // -> [continueId <= 0x00000000]
[15:44:10.477]      deviceID =   Read32(0x41C40004);
[15:44:10.481]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:44:10.481]        // -> [deviceID <= 0x2BB8802F]
[15:44:10.481]      version = deviceID >> 28;
[15:44:10.481]        // -> [version <= 0x00000002]
[15:44:10.481]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:44:10.481]        // -> [partNum <= 0x0000BB88]
[15:44:10.481]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:44:10.481]        // -> [manuf <= 0x00000017]
[15:44:10.481]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:44:10.481]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:44:10.481]      isProduction = (version > 0);
[15:44:10.481]        // -> [isProduction <= 0x00000001]
[15:44:10.481]    </block>
[15:44:10.481]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:44:10.481]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:44:10.481]        // =>  FALSE
[15:44:10.481]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:44:10.481]    </control>
[15:44:10.481]    <control if="continueId == 4" while="" timeout="0" info="">
[15:44:10.481]      // if-block "continueId == 4"
[15:44:10.481]        // =>  FALSE
[15:44:10.481]      // skip if-block "continueId == 4"
[15:44:10.481]    </control>
[15:44:10.481]    <control if="!isProduction" while="" timeout="0" info="">
[15:44:10.481]      // if-block "!isProduction"
[15:44:10.481]        // =>  FALSE
[15:44:10.481]      // skip if-block "!isProduction"
[15:44:10.481]    </control>
[15:44:10.481]  </sequence>
[15:44:10.481]  
[15:44:17.725]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:44:17.725]  
[15:44:17.741]  <debugvars>
[15:44:17.741]    // Pre-defined
[15:44:17.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:17.741]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:44:17.741]    __dp=0x00000000
[15:44:17.741]    __ap=0x00000000
[15:44:17.741]    __traceout=0x00000000      (Trace Disabled)
[15:44:17.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:17.741]    __FlashAddr=0x00000000
[15:44:17.741]    __FlashLen=0x00000000
[15:44:17.741]    __FlashArg=0x00000000
[15:44:17.741]    __FlashOp=0x00000000
[15:44:17.741]    __Result=0x00000000
[15:44:17.741]  </debugvars>
[15:44:17.741]  
[15:44:17.741]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:44:17.741]    <block atomic="false" info="">
[15:44:17.741]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:44:17.741]        // -> [isSWJ <= 0x00000001]
[15:44:17.741]      __var hasDormant = __protocol & 0x00020000;
[15:44:17.741]        // -> [hasDormant <= 0x00000000]
[15:44:17.741]      __var protType   = __protocol & 0x0000FFFF;
[15:44:17.741]        // -> [protType <= 0x00000002]
[15:44:17.741]    </block>
[15:44:17.741]    <control if="protType == 1" while="" timeout="0" info="">
[15:44:17.741]      // if-block "protType == 1"
[15:44:17.741]        // =>  FALSE
[15:44:17.741]      // skip if-block "protType == 1"
[15:44:17.741]    </control>
[15:44:17.741]    <control if="protType == 2" while="" timeout="0" info="">
[15:44:17.741]      // if-block "protType == 2"
[15:44:17.741]        // =>  TRUE
[15:44:17.741]      <control if="isSWJ" while="" timeout="0" info="">
[15:44:17.741]        // if-block "isSWJ"
[15:44:17.741]          // =>  TRUE
[15:44:17.741]        <control if="hasDormant" while="" timeout="0" info="">
[15:44:17.744]          // if-block "hasDormant"
[15:44:17.744]            // =>  FALSE
[15:44:17.744]          // skip if-block "hasDormant"
[15:44:17.745]        </control>
[15:44:17.745]        <control if="!hasDormant" while="" timeout="0" info="">
[15:44:17.745]          // if-block "!hasDormant"
[15:44:17.745]            // =>  TRUE
[15:44:17.745]          <block atomic="false" info="">
[15:44:17.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:44:17.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:17.748]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:44:17.748]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:44:17.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:44:17.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:17.748]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:44:17.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:44:17.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:44:17.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:17.755]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:44:17.755]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:44:17.755]          </block>
[15:44:17.755]          // end if-block "!hasDormant"
[15:44:17.755]        </control>
[15:44:17.755]        // end if-block "isSWJ"
[15:44:17.755]      </control>
[15:44:17.755]      <control if="!isSWJ" while="" timeout="0" info="">
[15:44:17.755]        // if-block "!isSWJ"
[15:44:17.755]          // =>  FALSE
[15:44:17.755]        // skip if-block "!isSWJ"
[15:44:17.755]      </control>
[15:44:17.755]      <block atomic="false" info="">
[15:44:17.755]        ReadDP(0x0);
[15:44:17.765]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:44:17.765]      </block>
[15:44:17.765]      // end if-block "protType == 2"
[15:44:17.765]    </control>
[15:44:17.766]  </sequence>
[15:44:17.766]  
[15:44:17.766]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:44:17.766]  
[15:44:17.766]  <debugvars>
[15:44:17.766]    // Pre-defined
[15:44:17.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:17.766]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:44:17.766]    __dp=0x00000000
[15:44:17.766]    __ap=0x00000000
[15:44:17.766]    __traceout=0x00000000      (Trace Disabled)
[15:44:17.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:17.766]    __FlashAddr=0x00000000
[15:44:17.766]    __FlashLen=0x00000000
[15:44:17.766]    __FlashArg=0x00000000
[15:44:17.766]    __FlashOp=0x00000000
[15:44:17.766]    __Result=0x00000000
[15:44:17.766]  </debugvars>
[15:44:17.766]  
[15:44:17.766]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:44:17.766]    <block atomic="false" info="">
[15:44:17.766]      __var SW_DP_ABORT       = 0x0;
[15:44:17.766]        // -> [SW_DP_ABORT <= 0x00000000]
[15:44:17.766]      __var DP_CTRL_STAT      = 0x4;
[15:44:17.766]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:44:17.766]      __var DP_SELECT         = 0x8;
[15:44:17.766]        // -> [DP_SELECT <= 0x00000008]
[15:44:17.766]      __var powered_down      = 0;
[15:44:17.766]        // -> [powered_down <= 0x00000000]
[15:44:17.766]      WriteDP(DP_SELECT, 0x00000000);
[15:44:17.776]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:44:17.776]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:44:17.776]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:44:17.776]        // -> [powered_down <= 0x00000001]
[15:44:17.776]    </block>
[15:44:17.776]    <control if="powered_down" while="" timeout="0" info="">
[15:44:17.776]      // if-block "powered_down"
[15:44:17.776]        // =>  TRUE
[15:44:17.776]      <block atomic="false" info="">
[15:44:17.776]        Message(0, "Debug/System power-up request sent");
[15:44:17.784]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:44:17.788]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:44:17.788]      </block>
[15:44:17.788]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:44:17.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:44:17.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:44:17.788]        // while-condition  =>  FALSE
[15:44:17.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:44:17.788]      </control>
[15:44:17.788]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:44:17.788]        // if-block "(__protocol & 0xFFFF) == 1"
[15:44:17.788]          // =>  FALSE
[15:44:17.788]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:44:17.788]      </control>
[15:44:17.788]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:44:17.788]        // if-block "(__protocol & 0xFFFF) == 2"
[15:44:17.788]          // =>  TRUE
[15:44:17.788]        <block atomic="false" info="">
[15:44:17.788]          Message(0, "executing SWD power up");
[15:44:17.788]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:44:17.795]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:44:17.795]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:44:17.795]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:44:17.795]        </block>
[15:44:17.795]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:44:17.795]      </control>
[15:44:17.795]      // end if-block "powered_down"
[15:44:17.795]    </control>
[15:44:17.795]    <block atomic="false" info="">
[15:44:17.795]      __var DEBUG_PORT_VAL    = 0;
[15:44:17.795]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:44:17.795]      __var ACCESS_POINT_VAL  = 0;
[15:44:17.795]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:44:17.795]      __ap = 1; 
[15:44:17.795]        // -> [__ap <= 0x00000001]
[15:44:17.795]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:44:17.805]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:44:17.805]      __ap = 4;
[15:44:17.805]        // -> [__ap <= 0x00000004]
[15:44:17.805]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:17.806]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:44:17.806]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:44:17.806]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:17.806]    </block>
[15:44:17.806]    <block atomic="false" info="">
[15:44:17.806]      __var nReset = 0x80;
[15:44:17.806]        // -> [nReset <= 0x00000080]
[15:44:17.806]      __var canReadPins = 0;
[15:44:17.806]        // -> [canReadPins <= 0x00000000]
[15:44:17.806]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:44:17.806]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:44:17.806]        // -> [canReadPins <= 0x00000001]
[15:44:17.806]    </block>
[15:44:17.806]    <control if="" while="1" timeout="200" info="">
[15:44:17.806]      // while "1"  (timeout="200")
[15:44:17.806]      // while-condition  =>  TRUE
[15:44:17.806]      // while "1"  (timeout="200")
[15:44:17.806]      // while-condition  =>  TRUE
[15:44:17.806]      // while "1"  (timeout="200")
[15:44:17.806]      // while-condition  =>  TRUE
[15:44:17.806]      // while "1"  (timeout="200")
[15:44:17.806]      // while-condition  =>  TRUE
[15:44:17.806]      // while "1"  (timeout="200")
[15:44:17.806]      // while-condition  =>  TRUE
[15:44:17.806]      // while "1"  (timeout="200")
[15:44:17.806]      // while-condition  =>  TRUE
[15:44:17.806]      // while "1"  (timeout="200")
[15:44:17.806]      // while-condition  =>  TRUE
[15:44:17.814]      // while "1"  (timeout="200")
[15:44:17.814]      // while-condition  =>  TRUE
[15:44:17.814]      // while "1"  (timeout="200")
[15:44:17.815]      // while-condition  =>  TRUE
[15:44:17.815]      // while "1"  (timeout="200")
[15:44:17.815]      // while  =>  TIMEOUT
[15:44:17.815]      // end while "1"
[15:44:17.815]    </control>
[15:44:17.815]    <control if="canReadPins" while="" timeout="0" info="">
[15:44:17.815]      // if-block "canReadPins"
[15:44:17.815]        // =>  TRUE
[15:44:17.815]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:44:17.815]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:44:17.815]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:44:17.815]        // while-condition  =>  FALSE
[15:44:17.815]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:44:17.815]      </control>
[15:44:17.815]      // end if-block "canReadPins"
[15:44:17.815]    </control>
[15:44:17.815]    <control if="!canReadPins" while="" timeout="0" info="">
[15:44:17.815]      // if-block "!canReadPins"
[15:44:17.815]        // =>  FALSE
[15:44:17.815]      // skip if-block "!canReadPins"
[15:44:17.815]    </control>
[15:44:17.815]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:44:17.815]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:17.815]        // =>  TRUE
[15:44:17.815]      <block atomic="false" info="">
[15:44:17.815]        WriteAP(0x00, 0x190008);
[15:44:17.815]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:17.815]        WriteAP(0xF0, 0x01);
[15:44:17.826]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:17.826]      </block>
[15:44:17.826]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:17.826]    </control>
[15:44:17.826]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:44:17.826]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:17.826]        // =>  FALSE
[15:44:17.826]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:17.826]    </control>
[15:44:17.826]    <block atomic="false" info="">
[15:44:17.826]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:17.836]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:44:17.836]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:44:17.836]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:17.837]      __ap = 0; //lets make sure we reset the access point selection
[15:44:17.837]        // -> [__ap <= 0x00000000]
[15:44:17.837]    </block>
[15:44:17.837]  </sequence>
[15:44:17.837]  
[15:44:17.866]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:44:17.866]  
[15:44:17.866]  <debugvars>
[15:44:17.866]    // Pre-defined
[15:44:17.866]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:17.866]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:44:17.866]    __dp=0x00000000
[15:44:17.866]    __ap=0x00000000
[15:44:17.866]    __traceout=0x00000000      (Trace Disabled)
[15:44:17.866]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:17.866]    __FlashAddr=0x00000000
[15:44:17.866]    __FlashLen=0x00000000
[15:44:17.866]    __FlashArg=0x00000000
[15:44:17.866]    __FlashOp=0x00000000
[15:44:17.866]    __Result=0x00000000
[15:44:17.866]  </debugvars>
[15:44:17.866]  
[15:44:17.866]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:44:17.866]    <block atomic="false" info="">
[15:44:17.874]      __var deviceID = 0;
[15:44:17.874]        // -> [deviceID <= 0x00000000]
[15:44:17.874]      __var version = 0;
[15:44:17.874]        // -> [version <= 0x00000000]
[15:44:17.874]      __var partNum = 0;
[15:44:17.874]        // -> [partNum <= 0x00000000]
[15:44:17.874]      __var manuf = 0;
[15:44:17.874]        // -> [manuf <= 0x00000000]
[15:44:17.874]      __var isMSPM0G1X0X_G3X0X = 0;
[15:44:17.874]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:44:17.875]      __var isProduction = 0;
[15:44:17.875]        // -> [isProduction <= 0x00000000]
[15:44:17.875]      __var continueId = 0;
[15:44:17.875]        // -> [continueId <= 0x00000000]
[15:44:17.875]      deviceID =   Read32(0x41C40004);
[15:44:17.886]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:44:17.886]        // -> [deviceID <= 0x2BB8802F]
[15:44:17.887]      version = deviceID >> 28;
[15:44:17.887]        // -> [version <= 0x00000002]
[15:44:17.887]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:44:17.887]        // -> [partNum <= 0x0000BB88]
[15:44:17.887]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:44:17.887]        // -> [manuf <= 0x00000017]
[15:44:17.887]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:44:17.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:44:17.887]      isProduction = (version > 0);
[15:44:17.887]        // -> [isProduction <= 0x00000001]
[15:44:17.887]    </block>
[15:44:17.887]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:44:17.887]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:44:17.887]        // =>  FALSE
[15:44:17.887]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:44:17.887]    </control>
[15:44:17.887]    <control if="continueId == 4" while="" timeout="0" info="">
[15:44:17.887]      // if-block "continueId == 4"
[15:44:17.887]        // =>  FALSE
[15:44:17.887]      // skip if-block "continueId == 4"
[15:44:17.887]    </control>
[15:44:17.887]    <control if="!isProduction" while="" timeout="0" info="">
[15:44:17.887]      // if-block "!isProduction"
[15:44:17.887]        // =>  FALSE
[15:44:17.887]      // skip if-block "!isProduction"
[15:44:17.887]    </control>
[15:44:17.887]  </sequence>
[15:44:17.887]  
[15:45:04.636]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:45:04.636]  
[15:45:04.636]  <debugvars>
[15:45:04.636]    // Pre-defined
[15:45:04.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:04.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:04.636]    __dp=0x00000000
[15:45:04.636]    __ap=0x00000000
[15:45:04.636]    __traceout=0x00000000      (Trace Disabled)
[15:45:04.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:04.636]    __FlashAddr=0x00000000
[15:45:04.636]    __FlashLen=0x00000000
[15:45:04.636]    __FlashArg=0x00000000
[15:45:04.636]    __FlashOp=0x00000000
[15:45:04.636]    __Result=0x00000000
[15:45:04.636]  </debugvars>
[15:45:04.636]  
[15:45:04.636]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:45:04.636]    <block atomic="false" info="">
[15:45:04.636]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:45:04.643]        // -> [isSWJ <= 0x00000001]
[15:45:04.643]      __var hasDormant = __protocol & 0x00020000;
[15:45:04.643]        // -> [hasDormant <= 0x00000000]
[15:45:04.643]      __var protType   = __protocol & 0x0000FFFF;
[15:45:04.643]        // -> [protType <= 0x00000002]
[15:45:04.643]    </block>
[15:45:04.643]    <control if="protType == 1" while="" timeout="0" info="">
[15:45:04.643]      // if-block "protType == 1"
[15:45:04.644]        // =>  FALSE
[15:45:04.644]      // skip if-block "protType == 1"
[15:45:04.644]    </control>
[15:45:04.644]    <control if="protType == 2" while="" timeout="0" info="">
[15:45:04.644]      // if-block "protType == 2"
[15:45:04.644]        // =>  TRUE
[15:45:04.644]      <control if="isSWJ" while="" timeout="0" info="">
[15:45:04.644]        // if-block "isSWJ"
[15:45:04.644]          // =>  TRUE
[15:45:04.644]        <control if="hasDormant" while="" timeout="0" info="">
[15:45:04.644]          // if-block "hasDormant"
[15:45:04.645]            // =>  FALSE
[15:45:04.645]          // skip if-block "hasDormant"
[15:45:04.645]        </control>
[15:45:04.645]        <control if="!hasDormant" while="" timeout="0" info="">
[15:45:04.645]          // if-block "!hasDormant"
[15:45:04.645]            // =>  TRUE
[15:45:04.645]          <block atomic="false" info="">
[15:45:04.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:45:04.646]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:04.646]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:45:04.648]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:45:04.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:45:04.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:04.648]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:45:04.648]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:45:04.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:45:04.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:04.660]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:45:04.665]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:45:04.665]          </block>
[15:45:04.665]          // end if-block "!hasDormant"
[15:45:04.665]        </control>
[15:45:04.665]        // end if-block "isSWJ"
[15:45:04.665]      </control>
[15:45:04.665]      <control if="!isSWJ" while="" timeout="0" info="">
[15:45:04.665]        // if-block "!isSWJ"
[15:45:04.665]          // =>  FALSE
[15:45:04.665]        // skip if-block "!isSWJ"
[15:45:04.665]      </control>
[15:45:04.665]      <block atomic="false" info="">
[15:45:04.669]        ReadDP(0x0);
[15:45:04.669]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:45:04.669]      </block>
[15:45:04.669]      // end if-block "protType == 2"
[15:45:04.669]    </control>
[15:45:04.669]  </sequence>
[15:45:04.669]  
[15:45:04.676]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:45:04.676]  
[15:45:04.676]  <debugvars>
[15:45:04.676]    // Pre-defined
[15:45:04.676]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:04.676]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:04.676]    __dp=0x00000000
[15:45:04.676]    __ap=0x00000000
[15:45:04.676]    __traceout=0x00000000      (Trace Disabled)
[15:45:04.676]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:04.676]    __FlashAddr=0x00000000
[15:45:04.676]    __FlashLen=0x00000000
[15:45:04.676]    __FlashArg=0x00000000
[15:45:04.676]    __FlashOp=0x00000000
[15:45:04.676]    __Result=0x00000000
[15:45:04.676]  </debugvars>
[15:45:04.676]  
[15:45:04.676]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:45:04.676]    <block atomic="false" info="">
[15:45:04.676]      __var SW_DP_ABORT       = 0x0;
[15:45:04.676]        // -> [SW_DP_ABORT <= 0x00000000]
[15:45:04.676]      __var DP_CTRL_STAT      = 0x4;
[15:45:04.676]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:45:04.676]      __var DP_SELECT         = 0x8;
[15:45:04.676]        // -> [DP_SELECT <= 0x00000008]
[15:45:04.676]      __var powered_down      = 0;
[15:45:04.676]        // -> [powered_down <= 0x00000000]
[15:45:04.676]      WriteDP(DP_SELECT, 0x00000000);
[15:45:04.685]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:45:04.685]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:45:04.694]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:45:04.695]        // -> [powered_down <= 0x00000001]
[15:45:04.695]    </block>
[15:45:04.695]    <control if="powered_down" while="" timeout="0" info="">
[15:45:04.695]      // if-block "powered_down"
[15:45:04.695]        // =>  TRUE
[15:45:04.695]      <block atomic="false" info="">
[15:45:04.695]        Message(0, "Debug/System power-up request sent");
[15:45:04.696]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:45:04.696]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:45:04.696]      </block>
[15:45:04.696]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:45:04.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:45:04.708]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:45:04.708]        // while-condition  =>  FALSE
[15:45:04.708]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:45:04.708]      </control>
[15:45:04.708]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:45:04.708]        // if-block "(__protocol & 0xFFFF) == 1"
[15:45:04.708]          // =>  FALSE
[15:45:04.708]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:45:04.708]      </control>
[15:45:04.708]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:45:04.708]        // if-block "(__protocol & 0xFFFF) == 2"
[15:45:04.708]          // =>  TRUE
[15:45:04.708]        <block atomic="false" info="">
[15:45:04.708]          Message(0, "executing SWD power up");
[15:45:04.711]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:45:04.714]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:45:04.715]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:45:04.716]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:45:04.716]        </block>
[15:45:04.716]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:45:04.716]      </control>
[15:45:04.716]      // end if-block "powered_down"
[15:45:04.716]    </control>
[15:45:04.716]    <block atomic="false" info="">
[15:45:04.716]      __var DEBUG_PORT_VAL    = 0;
[15:45:04.716]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:45:04.716]      __var ACCESS_POINT_VAL  = 0;
[15:45:04.716]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:45:04.719]      __ap = 1; 
[15:45:04.719]        // -> [__ap <= 0x00000001]
[15:45:04.719]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:45:04.725]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:45:04.734]      __ap = 4;
[15:45:04.734]        // -> [__ap <= 0x00000004]
[15:45:04.734]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:04.741]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:45:04.741]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:45:04.741]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:04.741]    </block>
[15:45:04.741]    <block atomic="false" info="">
[15:45:04.741]      __var nReset = 0x80;
[15:45:04.741]        // -> [nReset <= 0x00000080]
[15:45:04.741]      __var canReadPins = 0;
[15:45:04.741]        // -> [canReadPins <= 0x00000000]
[15:45:04.741]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:45:04.745]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:45:04.745]        // -> [canReadPins <= 0x00000001]
[15:45:04.745]    </block>
[15:45:04.745]    <control if="" while="1" timeout="200" info="">
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.745]      // while "1"  (timeout="200")
[15:45:04.745]      // while-condition  =>  TRUE
[15:45:04.754]      // while "1"  (timeout="200")
[15:45:04.754]      // while  =>  TIMEOUT
[15:45:04.754]      // end while "1"
[15:45:04.754]    </control>
[15:45:04.754]    <control if="canReadPins" while="" timeout="0" info="">
[15:45:04.755]      // if-block "canReadPins"
[15:45:04.755]        // =>  TRUE
[15:45:04.755]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:45:04.755]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:45:04.767]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:45:04.767]        // while-condition  =>  FALSE
[15:45:04.767]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:45:04.767]      </control>
[15:45:04.767]      // end if-block "canReadPins"
[15:45:04.767]    </control>
[15:45:04.767]    <control if="!canReadPins" while="" timeout="0" info="">
[15:45:04.767]      // if-block "!canReadPins"
[15:45:04.767]        // =>  FALSE
[15:45:04.772]      // skip if-block "!canReadPins"
[15:45:04.772]    </control>
[15:45:04.772]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:45:04.772]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:04.772]        // =>  TRUE
[15:45:04.772]      <block atomic="false" info="">
[15:45:04.773]        WriteAP(0x00, 0x190008);
[15:45:04.775]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:04.775]        WriteAP(0xF0, 0x01);
[15:45:04.777]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:04.777]      </block>
[15:45:04.777]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:04.777]    </control>
[15:45:04.777]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:45:04.777]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:04.777]        // =>  FALSE
[15:45:04.777]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:04.777]    </control>
[15:45:04.784]    <block atomic="false" info="">
[15:45:04.784]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:04.788]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:45:04.788]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:45:04.788]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:04.791]      __ap = 0; //lets make sure we reset the access point selection
[15:45:04.791]        // -> [__ap <= 0x00000000]
[15:45:04.791]    </block>
[15:45:04.791]  </sequence>
[15:45:04.791]  
[15:45:04.836]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:45:04.836]  
[15:45:04.836]  <debugvars>
[15:45:04.836]    // Pre-defined
[15:45:04.836]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:04.836]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:04.836]    __dp=0x00000000
[15:45:04.836]    __ap=0x00000000
[15:45:04.836]    __traceout=0x00000000      (Trace Disabled)
[15:45:04.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:04.836]    __FlashAddr=0x00000000
[15:45:04.836]    __FlashLen=0x00000000
[15:45:04.836]    __FlashArg=0x00000000
[15:45:04.836]    __FlashOp=0x00000000
[15:45:04.836]    __Result=0x00000000
[15:45:04.836]  </debugvars>
[15:45:04.836]  
[15:45:04.836]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:45:04.836]    <block atomic="false" info="">
[15:45:04.836]      __var deviceID = 0;
[15:45:04.836]        // -> [deviceID <= 0x00000000]
[15:45:04.836]      __var version = 0;
[15:45:04.836]        // -> [version <= 0x00000000]
[15:45:04.836]      __var partNum = 0;
[15:45:04.836]        // -> [partNum <= 0x00000000]
[15:45:04.836]      __var manuf = 0;
[15:45:04.836]        // -> [manuf <= 0x00000000]
[15:45:04.836]      __var isMSPM0G1X0X_G3X0X = 0;
[15:45:04.836]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:45:04.836]      __var isProduction = 0;
[15:45:04.836]        // -> [isProduction <= 0x00000000]
[15:45:04.836]      __var continueId = 0;
[15:45:04.836]        // -> [continueId <= 0x00000000]
[15:45:04.836]      deviceID =   Read32(0x41C40004);
[15:45:04.846]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:45:04.854]        // -> [deviceID <= 0x2BB8802F]
[15:45:04.854]      version = deviceID >> 28;
[15:45:04.855]        // -> [version <= 0x00000002]
[15:45:04.855]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:45:04.855]        // -> [partNum <= 0x0000BB88]
[15:45:04.855]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:45:04.855]        // -> [manuf <= 0x00000017]
[15:45:04.855]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:45:04.855]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:45:04.855]      isProduction = (version > 0);
[15:45:04.855]        // -> [isProduction <= 0x00000001]
[15:45:04.855]    </block>
[15:45:04.855]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:45:04.855]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:45:04.855]        // =>  FALSE
[15:45:04.855]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:45:04.855]    </control>
[15:45:04.855]    <control if="continueId == 4" while="" timeout="0" info="">
[15:45:04.855]      // if-block "continueId == 4"
[15:45:04.855]        // =>  FALSE
[15:45:04.855]      // skip if-block "continueId == 4"
[15:45:04.855]    </control>
[15:45:04.855]    <control if="!isProduction" while="" timeout="0" info="">
[15:45:04.855]      // if-block "!isProduction"
[15:45:04.855]        // =>  FALSE
[15:45:04.855]      // skip if-block "!isProduction"
[15:45:04.855]    </control>
[15:45:04.855]  </sequence>
[15:45:04.855]  
[15:45:10.204]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:45:10.204]  
[15:45:10.212]  <debugvars>
[15:45:10.212]    // Pre-defined
[15:45:10.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:10.212]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:45:10.212]    __dp=0x00000000
[15:45:10.212]    __ap=0x00000000
[15:45:10.212]    __traceout=0x00000000      (Trace Disabled)
[15:45:10.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:10.212]    __FlashAddr=0x00000000
[15:45:10.212]    __FlashLen=0x00000000
[15:45:10.212]    __FlashArg=0x00000000
[15:45:10.212]    __FlashOp=0x00000000
[15:45:10.212]    __Result=0x00000000
[15:45:10.212]  </debugvars>
[15:45:10.212]  
[15:45:10.212]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:45:10.212]    <block atomic="false" info="">
[15:45:10.212]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:45:10.212]        // -> [isSWJ <= 0x00000001]
[15:45:10.212]      __var hasDormant = __protocol & 0x00020000;
[15:45:10.212]        // -> [hasDormant <= 0x00000000]
[15:45:10.214]      __var protType   = __protocol & 0x0000FFFF;
[15:45:10.214]        // -> [protType <= 0x00000002]
[15:45:10.214]    </block>
[15:45:10.214]    <control if="protType == 1" while="" timeout="0" info="">
[15:45:10.214]      // if-block "protType == 1"
[15:45:10.214]        // =>  FALSE
[15:45:10.215]      // skip if-block "protType == 1"
[15:45:10.215]    </control>
[15:45:10.215]    <control if="protType == 2" while="" timeout="0" info="">
[15:45:10.215]      // if-block "protType == 2"
[15:45:10.215]        // =>  TRUE
[15:45:10.215]      <control if="isSWJ" while="" timeout="0" info="">
[15:45:10.215]        // if-block "isSWJ"
[15:45:10.215]          // =>  TRUE
[15:45:10.215]        <control if="hasDormant" while="" timeout="0" info="">
[15:45:10.215]          // if-block "hasDormant"
[15:45:10.215]            // =>  FALSE
[15:45:10.215]          // skip if-block "hasDormant"
[15:45:10.215]        </control>
[15:45:10.215]        <control if="!hasDormant" while="" timeout="0" info="">
[15:45:10.215]          // if-block "!hasDormant"
[15:45:10.215]            // =>  TRUE
[15:45:10.215]          <block atomic="false" info="">
[15:45:10.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:45:10.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:10.220]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:45:10.220]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:45:10.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:45:10.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:10.224]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:45:10.226]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:45:10.226]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:45:10.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:10.226]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:45:10.226]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:45:10.226]          </block>
[15:45:10.226]          // end if-block "!hasDormant"
[15:45:10.226]        </control>
[15:45:10.226]        // end if-block "isSWJ"
[15:45:10.226]      </control>
[15:45:10.226]      <control if="!isSWJ" while="" timeout="0" info="">
[15:45:10.226]        // if-block "!isSWJ"
[15:45:10.226]          // =>  FALSE
[15:45:10.226]        // skip if-block "!isSWJ"
[15:45:10.226]      </control>
[15:45:10.226]      <block atomic="false" info="">
[15:45:10.226]        ReadDP(0x0);
[15:45:10.235]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:45:10.235]      </block>
[15:45:10.235]      // end if-block "protType == 2"
[15:45:10.235]    </control>
[15:45:10.235]  </sequence>
[15:45:10.235]  
[15:45:10.235]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:45:10.235]  
[15:45:10.235]  <debugvars>
[15:45:10.235]    // Pre-defined
[15:45:10.235]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:10.235]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:45:10.235]    __dp=0x00000000
[15:45:10.235]    __ap=0x00000000
[15:45:10.235]    __traceout=0x00000000      (Trace Disabled)
[15:45:10.235]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:10.235]    __FlashAddr=0x00000000
[15:45:10.235]    __FlashLen=0x00000000
[15:45:10.235]    __FlashArg=0x00000000
[15:45:10.235]    __FlashOp=0x00000000
[15:45:10.235]    __Result=0x00000000
[15:45:10.235]  </debugvars>
[15:45:10.235]  
[15:45:10.235]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:45:10.235]    <block atomic="false" info="">
[15:45:10.235]      __var SW_DP_ABORT       = 0x0;
[15:45:10.235]        // -> [SW_DP_ABORT <= 0x00000000]
[15:45:10.235]      __var DP_CTRL_STAT      = 0x4;
[15:45:10.235]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:45:10.235]      __var DP_SELECT         = 0x8;
[15:45:10.235]        // -> [DP_SELECT <= 0x00000008]
[15:45:10.244]      __var powered_down      = 0;
[15:45:10.244]        // -> [powered_down <= 0x00000000]
[15:45:10.244]      WriteDP(DP_SELECT, 0x00000000);
[15:45:10.246]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:45:10.246]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:45:10.246]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:45:10.246]        // -> [powered_down <= 0x00000001]
[15:45:10.246]    </block>
[15:45:10.246]    <control if="powered_down" while="" timeout="0" info="">
[15:45:10.246]      // if-block "powered_down"
[15:45:10.246]        // =>  TRUE
[15:45:10.246]      <block atomic="false" info="">
[15:45:10.246]        Message(0, "Debug/System power-up request sent");
[15:45:10.246]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:45:10.256]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:45:10.256]      </block>
[15:45:10.256]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:45:10.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:45:10.256]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:45:10.256]        // while-condition  =>  FALSE
[15:45:10.256]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:45:10.256]      </control>
[15:45:10.256]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:45:10.256]        // if-block "(__protocol & 0xFFFF) == 1"
[15:45:10.256]          // =>  FALSE
[15:45:10.256]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:45:10.256]      </control>
[15:45:10.256]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:45:10.256]        // if-block "(__protocol & 0xFFFF) == 2"
[15:45:10.256]          // =>  TRUE
[15:45:10.256]        <block atomic="false" info="">
[15:45:10.256]          Message(0, "executing SWD power up");
[15:45:10.256]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:45:10.256]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:45:10.256]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:45:10.265]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:45:10.265]        </block>
[15:45:10.265]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:45:10.265]      </control>
[15:45:10.265]      // end if-block "powered_down"
[15:45:10.265]    </control>
[15:45:10.265]    <block atomic="false" info="">
[15:45:10.265]      __var DEBUG_PORT_VAL    = 0;
[15:45:10.266]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:45:10.266]      __var ACCESS_POINT_VAL  = 0;
[15:45:10.266]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:45:10.266]      __ap = 1; 
[15:45:10.266]        // -> [__ap <= 0x00000001]
[15:45:10.266]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:45:10.266]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:45:10.266]      __ap = 4;
[15:45:10.266]        // -> [__ap <= 0x00000004]
[15:45:10.266]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:10.275]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:45:10.275]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:45:10.275]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:10.275]    </block>
[15:45:10.275]    <block atomic="false" info="">
[15:45:10.275]      __var nReset = 0x80;
[15:45:10.275]        // -> [nReset <= 0x00000080]
[15:45:10.275]      __var canReadPins = 0;
[15:45:10.275]        // -> [canReadPins <= 0x00000000]
[15:45:10.275]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:45:10.275]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:45:10.275]        // -> [canReadPins <= 0x00000001]
[15:45:10.275]    </block>
[15:45:10.275]    <control if="" while="1" timeout="200" info="">
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.275]      // while "1"  (timeout="200")
[15:45:10.275]      // while-condition  =>  TRUE
[15:45:10.284]      // while "1"  (timeout="200")
[15:45:10.284]      // while  =>  TIMEOUT
[15:45:10.284]      // end while "1"
[15:45:10.284]    </control>
[15:45:10.284]    <control if="canReadPins" while="" timeout="0" info="">
[15:45:10.284]      // if-block "canReadPins"
[15:45:10.284]        // =>  TRUE
[15:45:10.284]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:45:10.284]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:45:10.286]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:45:10.286]        // while-condition  =>  FALSE
[15:45:10.286]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:45:10.286]      </control>
[15:45:10.286]      // end if-block "canReadPins"
[15:45:10.286]    </control>
[15:45:10.286]    <control if="!canReadPins" while="" timeout="0" info="">
[15:45:10.286]      // if-block "!canReadPins"
[15:45:10.286]        // =>  FALSE
[15:45:10.286]      // skip if-block "!canReadPins"
[15:45:10.286]    </control>
[15:45:10.286]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:45:10.286]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:10.286]        // =>  TRUE
[15:45:10.286]      <block atomic="false" info="">
[15:45:10.286]        WriteAP(0x00, 0x190008);
[15:45:10.295]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:10.295]        WriteAP(0xF0, 0x01);
[15:45:10.295]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:10.295]      </block>
[15:45:10.304]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:10.304]    </control>
[15:45:10.305]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:45:10.305]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:10.305]        // =>  FALSE
[15:45:10.305]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:10.305]    </control>
[15:45:10.306]    <block atomic="false" info="">
[15:45:10.306]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:10.315]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:45:10.315]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:45:10.315]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:10.315]      __ap = 0; //lets make sure we reset the access point selection
[15:45:10.315]        // -> [__ap <= 0x00000000]
[15:45:10.315]    </block>
[15:45:10.315]  </sequence>
[15:45:10.315]  
[15:45:10.336]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:45:10.336]  
[15:45:10.336]  <debugvars>
[15:45:10.336]    // Pre-defined
[15:45:10.336]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:10.336]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:45:10.336]    __dp=0x00000000
[15:45:10.336]    __ap=0x00000000
[15:45:10.336]    __traceout=0x00000000      (Trace Disabled)
[15:45:10.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:10.336]    __FlashAddr=0x00000000
[15:45:10.336]    __FlashLen=0x00000000
[15:45:10.336]    __FlashArg=0x00000000
[15:45:10.336]    __FlashOp=0x00000000
[15:45:10.336]    __Result=0x00000000
[15:45:10.336]  </debugvars>
[15:45:10.336]  
[15:45:10.336]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:45:10.336]    <block atomic="false" info="">
[15:45:10.336]      __var deviceID = 0;
[15:45:10.336]        // -> [deviceID <= 0x00000000]
[15:45:10.336]      __var version = 0;
[15:45:10.336]        // -> [version <= 0x00000000]
[15:45:10.336]      __var partNum = 0;
[15:45:10.336]        // -> [partNum <= 0x00000000]
[15:45:10.336]      __var manuf = 0;
[15:45:10.336]        // -> [manuf <= 0x00000000]
[15:45:10.336]      __var isMSPM0G1X0X_G3X0X = 0;
[15:45:10.336]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:45:10.336]      __var isProduction = 0;
[15:45:10.336]        // -> [isProduction <= 0x00000000]
[15:45:10.336]      __var continueId = 0;
[15:45:10.336]        // -> [continueId <= 0x00000000]
[15:45:10.336]      deviceID =   Read32(0x41C40004);
[15:45:10.354]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:45:10.354]        // -> [deviceID <= 0x2BB8802F]
[15:45:10.354]      version = deviceID >> 28;
[15:45:10.354]        // -> [version <= 0x00000002]
[15:45:10.354]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:45:10.354]        // -> [partNum <= 0x0000BB88]
[15:45:10.354]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:45:10.354]        // -> [manuf <= 0x00000017]
[15:45:10.354]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:45:10.355]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:45:10.355]      isProduction = (version > 0);
[15:45:10.355]        // -> [isProduction <= 0x00000001]
[15:45:10.355]    </block>
[15:45:10.355]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:45:10.355]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:45:10.355]        // =>  FALSE
[15:45:10.355]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:45:10.355]    </control>
[15:45:10.355]    <control if="continueId == 4" while="" timeout="0" info="">
[15:45:10.355]      // if-block "continueId == 4"
[15:45:10.355]        // =>  FALSE
[15:45:10.355]      // skip if-block "continueId == 4"
[15:45:10.355]    </control>
[15:45:10.355]    <control if="!isProduction" while="" timeout="0" info="">
[15:45:10.355]      // if-block "!isProduction"
[15:45:10.355]        // =>  FALSE
[15:45:10.355]      // skip if-block "!isProduction"
[15:45:10.355]    </control>
[15:45:10.355]  </sequence>
[15:45:10.355]  
[15:46:35.636]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:46:35.636]  
[15:46:35.636]  <debugvars>
[15:46:35.636]    // Pre-defined
[15:46:35.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:35.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:46:35.643]    __dp=0x00000000
[15:46:35.643]    __ap=0x00000000
[15:46:35.643]    __traceout=0x00000000      (Trace Disabled)
[15:46:35.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:35.643]    __FlashAddr=0x00000000
[15:46:35.643]    __FlashLen=0x00000000
[15:46:35.643]    __FlashArg=0x00000000
[15:46:35.643]    __FlashOp=0x00000000
[15:46:35.644]    __Result=0x00000000
[15:46:35.644]  </debugvars>
[15:46:35.644]  
[15:46:35.644]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:46:35.644]    <block atomic="false" info="">
[15:46:35.644]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:46:35.644]        // -> [isSWJ <= 0x00000001]
[15:46:35.644]      __var hasDormant = __protocol & 0x00020000;
[15:46:35.645]        // -> [hasDormant <= 0x00000000]
[15:46:35.645]      __var protType   = __protocol & 0x0000FFFF;
[15:46:35.645]        // -> [protType <= 0x00000002]
[15:46:35.645]    </block>
[15:46:35.645]    <control if="protType == 1" while="" timeout="0" info="">
[15:46:35.645]      // if-block "protType == 1"
[15:46:35.645]        // =>  FALSE
[15:46:35.645]      // skip if-block "protType == 1"
[15:46:35.645]    </control>
[15:46:35.645]    <control if="protType == 2" while="" timeout="0" info="">
[15:46:35.645]      // if-block "protType == 2"
[15:46:35.645]        // =>  TRUE
[15:46:35.645]      <control if="isSWJ" while="" timeout="0" info="">
[15:46:35.645]        // if-block "isSWJ"
[15:46:35.645]          // =>  TRUE
[15:46:35.645]        <control if="hasDormant" while="" timeout="0" info="">
[15:46:35.645]          // if-block "hasDormant"
[15:46:35.645]            // =>  FALSE
[15:46:35.645]          // skip if-block "hasDormant"
[15:46:35.645]        </control>
[15:46:35.645]        <control if="!hasDormant" while="" timeout="0" info="">
[15:46:35.645]          // if-block "!hasDormant"
[15:46:35.645]            // =>  TRUE
[15:46:35.645]          <block atomic="false" info="">
[15:46:35.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:46:35.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:35.648]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:46:35.648]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:46:35.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:46:35.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:35.655]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:46:35.655]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:46:35.655]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:46:35.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:35.655]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:46:35.655]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:46:35.655]          </block>
[15:46:35.655]          // end if-block "!hasDormant"
[15:46:35.655]        </control>
[15:46:35.655]        // end if-block "isSWJ"
[15:46:35.655]      </control>
[15:46:35.655]      <control if="!isSWJ" while="" timeout="0" info="">
[15:46:35.655]        // if-block "!isSWJ"
[15:46:35.655]          // =>  FALSE
[15:46:35.655]        // skip if-block "!isSWJ"
[15:46:35.655]      </control>
[15:46:35.655]      <block atomic="false" info="">
[15:46:35.655]        ReadDP(0x0);
[15:46:35.666]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:46:35.666]      </block>
[15:46:35.666]      // end if-block "protType == 2"
[15:46:35.666]    </control>
[15:46:35.666]  </sequence>
[15:46:35.666]  
[15:46:35.676]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:46:35.676]  
[15:46:35.676]  <debugvars>
[15:46:35.676]    // Pre-defined
[15:46:35.676]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:35.676]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:46:35.676]    __dp=0x00000000
[15:46:35.676]    __ap=0x00000000
[15:46:35.676]    __traceout=0x00000000      (Trace Disabled)
[15:46:35.676]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:35.676]    __FlashAddr=0x00000000
[15:46:35.677]    __FlashLen=0x00000000
[15:46:35.677]    __FlashArg=0x00000000
[15:46:35.677]    __FlashOp=0x00000000
[15:46:35.677]    __Result=0x00000000
[15:46:35.677]  </debugvars>
[15:46:35.677]  
[15:46:35.677]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:46:35.677]    <block atomic="false" info="">
[15:46:35.677]      __var SW_DP_ABORT       = 0x0;
[15:46:35.677]        // -> [SW_DP_ABORT <= 0x00000000]
[15:46:35.677]      __var DP_CTRL_STAT      = 0x4;
[15:46:35.677]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:46:35.677]      __var DP_SELECT         = 0x8;
[15:46:35.677]        // -> [DP_SELECT <= 0x00000008]
[15:46:35.677]      __var powered_down      = 0;
[15:46:35.677]        // -> [powered_down <= 0x00000000]
[15:46:35.677]      WriteDP(DP_SELECT, 0x00000000);
[15:46:35.677]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:46:35.683]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:46:35.684]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:46:35.685]        // -> [powered_down <= 0x00000001]
[15:46:35.685]    </block>
[15:46:35.685]    <control if="powered_down" while="" timeout="0" info="">
[15:46:35.685]      // if-block "powered_down"
[15:46:35.685]        // =>  TRUE
[15:46:35.685]      <block atomic="false" info="">
[15:46:35.685]        Message(0, "Debug/System power-up request sent");
[15:46:35.687]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:46:35.687]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:46:35.687]      </block>
[15:46:35.694]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:46:35.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:46:35.695]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:46:35.697]        // while-condition  =>  FALSE
[15:46:35.697]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:46:35.697]      </control>
[15:46:35.697]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:46:35.697]        // if-block "(__protocol & 0xFFFF) == 1"
[15:46:35.697]          // =>  FALSE
[15:46:35.697]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:46:35.697]      </control>
[15:46:35.697]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:46:35.697]        // if-block "(__protocol & 0xFFFF) == 2"
[15:46:35.697]          // =>  TRUE
[15:46:35.697]        <block atomic="false" info="">
[15:46:35.697]          Message(0, "executing SWD power up");
[15:46:35.699]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:46:35.704]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:46:35.704]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:46:35.706]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:46:35.706]        </block>
[15:46:35.706]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:46:35.706]      </control>
[15:46:35.706]      // end if-block "powered_down"
[15:46:35.706]    </control>
[15:46:35.706]    <block atomic="false" info="">
[15:46:35.706]      __var DEBUG_PORT_VAL    = 0;
[15:46:35.706]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:46:35.706]      __var ACCESS_POINT_VAL  = 0;
[15:46:35.706]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:46:35.706]      __ap = 1; 
[15:46:35.706]        // -> [__ap <= 0x00000001]
[15:46:35.706]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:46:35.706]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:46:35.706]      __ap = 4;
[15:46:35.706]        // -> [__ap <= 0x00000004]
[15:46:35.706]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:46:35.716]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:46:35.716]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:46:35.716]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:46:35.716]    </block>
[15:46:35.716]    <block atomic="false" info="">
[15:46:35.716]      __var nReset = 0x80;
[15:46:35.716]        // -> [nReset <= 0x00000080]
[15:46:35.716]      __var canReadPins = 0;
[15:46:35.716]        // -> [canReadPins <= 0x00000000]
[15:46:35.716]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:46:35.716]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:46:35.716]        // -> [canReadPins <= 0x00000001]
[15:46:35.716]    </block>
[15:46:35.716]    <control if="" while="1" timeout="200" info="">
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.716]      // while-condition  =>  TRUE
[15:46:35.716]      // while "1"  (timeout="200")
[15:46:35.724]      // while-condition  =>  TRUE
[15:46:35.724]      // while "1"  (timeout="200")
[15:46:35.724]      // while  =>  TIMEOUT
[15:46:35.724]      // end while "1"
[15:46:35.724]    </control>
[15:46:35.724]    <control if="canReadPins" while="" timeout="0" info="">
[15:46:35.724]      // if-block "canReadPins"
[15:46:35.724]        // =>  TRUE
[15:46:35.725]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:46:35.725]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:46:35.727]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:46:35.727]        // while-condition  =>  FALSE
[15:46:35.727]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:46:35.727]      </control>
[15:46:35.727]      // end if-block "canReadPins"
[15:46:35.727]    </control>
[15:46:35.727]    <control if="!canReadPins" while="" timeout="0" info="">
[15:46:35.727]      // if-block "!canReadPins"
[15:46:35.727]        // =>  FALSE
[15:46:35.727]      // skip if-block "!canReadPins"
[15:46:35.727]    </control>
[15:46:35.727]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:46:35.727]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:46:35.727]        // =>  TRUE
[15:46:35.727]      <block atomic="false" info="">
[15:46:35.727]        WriteAP(0x00, 0x190008);
[15:46:35.727]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:46:35.727]        WriteAP(0xF0, 0x01);
[15:46:35.735]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:46:35.735]      </block>
[15:46:35.735]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:46:35.735]    </control>
[15:46:35.735]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:46:35.735]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:46:35.735]        // =>  FALSE
[15:46:35.735]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:46:35.735]    </control>
[15:46:35.735]    <block atomic="false" info="">
[15:46:35.735]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:46:35.735]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:46:35.735]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:46:35.735]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:46:35.735]      __ap = 0; //lets make sure we reset the access point selection
[15:46:35.735]        // -> [__ap <= 0x00000000]
[15:46:35.735]    </block>
[15:46:35.735]  </sequence>
[15:46:35.735]  
[15:46:35.755]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:46:35.755]  
[15:46:35.755]  <debugvars>
[15:46:35.755]    // Pre-defined
[15:46:35.764]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:35.764]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:46:35.764]    __dp=0x00000000
[15:46:35.764]    __ap=0x00000000
[15:46:35.764]    __traceout=0x00000000      (Trace Disabled)
[15:46:35.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:35.765]    __FlashAddr=0x00000000
[15:46:35.765]    __FlashLen=0x00000000
[15:46:35.765]    __FlashArg=0x00000000
[15:46:35.765]    __FlashOp=0x00000000
[15:46:35.765]    __Result=0x00000000
[15:46:35.765]  </debugvars>
[15:46:35.765]  
[15:46:35.766]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:46:35.766]    <block atomic="false" info="">
[15:46:35.766]      __var deviceID = 0;
[15:46:35.766]        // -> [deviceID <= 0x00000000]
[15:46:35.766]      __var version = 0;
[15:46:35.766]        // -> [version <= 0x00000000]
[15:46:35.766]      __var partNum = 0;
[15:46:35.766]        // -> [partNum <= 0x00000000]
[15:46:35.766]      __var manuf = 0;
[15:46:35.766]        // -> [manuf <= 0x00000000]
[15:46:35.766]      __var isMSPM0G1X0X_G3X0X = 0;
[15:46:35.766]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:46:35.766]      __var isProduction = 0;
[15:46:35.766]        // -> [isProduction <= 0x00000000]
[15:46:35.766]      __var continueId = 0;
[15:46:35.766]        // -> [continueId <= 0x00000000]
[15:46:35.766]      deviceID =   Read32(0x41C40004);
[15:46:35.766]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:46:35.766]        // -> [deviceID <= 0x2BB8802F]
[15:46:35.766]      version = deviceID >> 28;
[15:46:35.766]        // -> [version <= 0x00000002]
[15:46:35.774]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:46:35.774]        // -> [partNum <= 0x0000BB88]
[15:46:35.774]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:46:35.775]        // -> [manuf <= 0x00000017]
[15:46:35.775]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:46:35.775]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:46:35.775]      isProduction = (version > 0);
[15:46:35.775]        // -> [isProduction <= 0x00000001]
[15:46:35.775]    </block>
[15:46:35.775]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:46:35.775]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:46:35.776]        // =>  FALSE
[15:46:35.776]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:46:35.776]    </control>
[15:46:35.776]    <control if="continueId == 4" while="" timeout="0" info="">
[15:46:35.776]      // if-block "continueId == 4"
[15:46:35.776]        // =>  FALSE
[15:46:35.776]      // skip if-block "continueId == 4"
[15:46:35.776]    </control>
[15:46:35.776]    <control if="!isProduction" while="" timeout="0" info="">
[15:46:35.776]      // if-block "!isProduction"
[15:46:35.776]        // =>  FALSE
[15:46:35.776]      // skip if-block "!isProduction"
[15:46:35.776]    </control>
[15:46:35.776]  </sequence>
[15:46:35.776]  
[15:46:41.204]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:46:41.204]  
[15:46:41.212]  <debugvars>
[15:46:41.212]    // Pre-defined
[15:46:41.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:41.212]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:46:41.212]    __dp=0x00000000
[15:46:41.212]    __ap=0x00000000
[15:46:41.212]    __traceout=0x00000000      (Trace Disabled)
[15:46:41.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:41.214]    __FlashAddr=0x00000000
[15:46:41.214]    __FlashLen=0x00000000
[15:46:41.214]    __FlashArg=0x00000000
[15:46:41.214]    __FlashOp=0x00000000
[15:46:41.214]    __Result=0x00000000
[15:46:41.214]  </debugvars>
[15:46:41.214]  
[15:46:41.214]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:46:41.215]    <block atomic="false" info="">
[15:46:41.215]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:46:41.215]        // -> [isSWJ <= 0x00000001]
[15:46:41.215]      __var hasDormant = __protocol & 0x00020000;
[15:46:41.215]        // -> [hasDormant <= 0x00000000]
[15:46:41.215]      __var protType   = __protocol & 0x0000FFFF;
[15:46:41.215]        // -> [protType <= 0x00000002]
[15:46:41.215]    </block>
[15:46:41.215]    <control if="protType == 1" while="" timeout="0" info="">
[15:46:41.215]      // if-block "protType == 1"
[15:46:41.215]        // =>  FALSE
[15:46:41.215]      // skip if-block "protType == 1"
[15:46:41.215]    </control>
[15:46:41.215]    <control if="protType == 2" while="" timeout="0" info="">
[15:46:41.215]      // if-block "protType == 2"
[15:46:41.215]        // =>  TRUE
[15:46:41.215]      <control if="isSWJ" while="" timeout="0" info="">
[15:46:41.215]        // if-block "isSWJ"
[15:46:41.215]          // =>  TRUE
[15:46:41.217]        <control if="hasDormant" while="" timeout="0" info="">
[15:46:41.217]          // if-block "hasDormant"
[15:46:41.217]            // =>  FALSE
[15:46:41.217]          // skip if-block "hasDormant"
[15:46:41.217]        </control>
[15:46:41.217]        <control if="!hasDormant" while="" timeout="0" info="">
[15:46:41.217]          // if-block "!hasDormant"
[15:46:41.217]            // =>  TRUE
[15:46:41.217]          <block atomic="false" info="">
[15:46:41.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:46:41.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:41.226]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:46:41.234]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:46:41.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:46:41.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:41.235]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:46:41.235]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:46:41.235]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:46:41.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:41.242]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:46:41.246]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:46:41.246]          </block>
[15:46:41.246]          // end if-block "!hasDormant"
[15:46:41.246]        </control>
[15:46:41.246]        // end if-block "isSWJ"
[15:46:41.246]      </control>
[15:46:41.246]      <control if="!isSWJ" while="" timeout="0" info="">
[15:46:41.246]        // if-block "!isSWJ"
[15:46:41.246]          // =>  FALSE
[15:46:41.246]        // skip if-block "!isSWJ"
[15:46:41.246]      </control>
[15:46:41.246]      <block atomic="false" info="">
[15:46:41.246]        ReadDP(0x0);
[15:46:41.257]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:46:41.257]      </block>
[15:46:41.257]      // end if-block "protType == 2"
[15:46:41.261]    </control>
[15:46:41.261]  </sequence>
[15:46:41.261]  
[15:46:41.292]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:46:41.292]  
[15:46:41.292]  <debugvars>
[15:46:41.292]    // Pre-defined
[15:46:41.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:41.292]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:46:41.292]    __dp=0x00000000
[15:46:41.294]    __ap=0x00000000
[15:46:41.294]    __traceout=0x00000000      (Trace Disabled)
[15:46:41.294]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:41.294]    __FlashAddr=0x00000000
[15:46:41.294]    __FlashLen=0x00000000
[15:46:41.294]    __FlashArg=0x00000000
[15:46:41.294]    __FlashOp=0x00000000
[15:46:41.294]    __Result=0x00000000
[15:46:41.294]  </debugvars>
[15:46:41.295]  
[15:46:41.295]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:46:41.295]    <block atomic="false" info="">
[15:46:41.295]      __var SW_DP_ABORT       = 0x0;
[15:46:41.295]        // -> [SW_DP_ABORT <= 0x00000000]
[15:46:41.295]      __var DP_CTRL_STAT      = 0x4;
[15:46:41.295]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:46:41.295]      __var DP_SELECT         = 0x8;
[15:46:41.296]        // -> [DP_SELECT <= 0x00000008]
[15:46:41.296]      __var powered_down      = 0;
[15:46:41.296]        // -> [powered_down <= 0x00000000]
[15:46:41.296]      WriteDP(DP_SELECT, 0x00000000);
[15:46:41.296]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:46:41.296]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:46:41.296]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:46:41.296]        // -> [powered_down <= 0x00000001]
[15:46:41.296]    </block>
[15:46:41.296]    <control if="powered_down" while="" timeout="0" info="">
[15:46:41.296]      // if-block "powered_down"
[15:46:41.302]        // =>  TRUE
[15:46:41.302]      <block atomic="false" info="">
[15:46:41.302]        Message(0, "Debug/System power-up request sent");
[15:46:41.305]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:46:41.307]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:46:41.307]      </block>
[15:46:41.307]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:46:41.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:46:41.314]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:46:41.315]        // while-condition  =>  FALSE
[15:46:41.315]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:46:41.315]      </control>
[15:46:41.315]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:46:41.315]        // if-block "(__protocol & 0xFFFF) == 1"
[15:46:41.315]          // =>  FALSE
[15:46:41.316]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:46:41.316]      </control>
[15:46:41.316]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:46:41.316]        // if-block "(__protocol & 0xFFFF) == 2"
[15:46:41.316]          // =>  TRUE
[15:46:41.316]        <block atomic="false" info="">
[15:46:41.316]          Message(0, "executing SWD power up");
[15:46:41.316]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:46:41.316]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:46:41.316]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:46:41.316]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:46:41.316]        </block>
[15:46:41.316]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:46:41.316]      </control>
[15:46:41.323]      // end if-block "powered_down"
[15:46:41.323]    </control>
[15:46:41.323]    <block atomic="false" info="">
[15:46:41.323]      __var DEBUG_PORT_VAL    = 0;
[15:46:41.323]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:46:41.323]      __var ACCESS_POINT_VAL  = 0;
[15:46:41.323]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:46:41.323]      __ap = 1; 
[15:46:41.324]        // -> [__ap <= 0x00000001]
[15:46:41.324]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:46:41.325]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:46:41.325]      __ap = 4;
[15:46:41.325]        // -> [__ap <= 0x00000004]
[15:46:41.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:46:41.335]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:46:41.335]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:46:41.336]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:46:41.337]    </block>
[15:46:41.337]    <block atomic="false" info="">
[15:46:41.337]      __var nReset = 0x80;
[15:46:41.337]        // -> [nReset <= 0x00000080]
[15:46:41.337]      __var canReadPins = 0;
[15:46:41.337]        // -> [canReadPins <= 0x00000000]
[15:46:41.337]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:46:41.337]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:46:41.337]        // -> [canReadPins <= 0x00000001]
[15:46:41.337]    </block>
[15:46:41.337]    <control if="" while="1" timeout="200" info="">
[15:46:41.337]      // while "1"  (timeout="200")
[15:46:41.337]      // while-condition  =>  TRUE
[15:46:41.337]      // while "1"  (timeout="200")
[15:46:41.337]      // while-condition  =>  TRUE
[15:46:41.337]      // while "1"  (timeout="200")
[15:46:41.337]      // while-condition  =>  TRUE
[15:46:41.337]      // while "1"  (timeout="200")
[15:46:41.337]      // while-condition  =>  TRUE
[15:46:41.343]      // while "1"  (timeout="200")
[15:46:41.343]      // while-condition  =>  TRUE
[15:46:41.344]      // while "1"  (timeout="200")
[15:46:41.344]      // while-condition  =>  TRUE
[15:46:41.344]      // while "1"  (timeout="200")
[15:46:41.344]      // while-condition  =>  TRUE
[15:46:41.344]      // while "1"  (timeout="200")
[15:46:41.344]      // while-condition  =>  TRUE
[15:46:41.344]      // while "1"  (timeout="200")
[15:46:41.344]      // while-condition  =>  TRUE
[15:46:41.345]      // while "1"  (timeout="200")
[15:46:41.345]      // while-condition  =>  TRUE
[15:46:41.345]      // while "1"  (timeout="200")
[15:46:41.345]      // while-condition  =>  TRUE
[15:46:41.345]      // while "1"  (timeout="200")
[15:46:41.345]      // while-condition  =>  TRUE
[15:46:41.345]      // while "1"  (timeout="200")
[15:46:41.345]      // while-condition  =>  TRUE
[15:46:41.345]      // while "1"  (timeout="200")
[15:46:41.345]      // while-condition  =>  TRUE
[15:46:41.345]      // while "1"  (timeout="200")
[15:46:41.346]      // while-condition  =>  TRUE
[15:46:41.346]      // while "1"  (timeout="200")
[15:46:41.346]      // while  =>  TIMEOUT
[15:46:41.346]      // end while "1"
[15:46:41.346]    </control>
[15:46:41.346]    <control if="canReadPins" while="" timeout="0" info="">
[15:46:41.346]      // if-block "canReadPins"
[15:46:41.346]        // =>  TRUE
[15:46:41.346]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:46:41.346]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:46:41.350]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:46:41.350]        // while-condition  =>  FALSE
[15:46:41.351]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:46:41.351]      </control>
[15:46:41.351]      // end if-block "canReadPins"
[15:46:41.351]    </control>
[15:46:41.351]    <control if="!canReadPins" while="" timeout="0" info="">
[15:46:41.351]      // if-block "!canReadPins"
[15:46:41.351]        // =>  FALSE
[15:46:41.351]      // skip if-block "!canReadPins"
[15:46:41.351]    </control>
[15:46:41.351]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:46:41.351]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:46:41.351]        // =>  TRUE
[15:46:41.351]      <block atomic="false" info="">
[15:46:41.351]        WriteAP(0x00, 0x190008);
[15:46:41.354]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:46:41.355]        WriteAP(0xF0, 0x01);
[15:46:41.359]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:46:41.359]      </block>
[15:46:41.359]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:46:41.359]    </control>
[15:46:41.359]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:46:41.359]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:46:41.359]        // =>  FALSE
[15:46:41.362]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:46:41.362]    </control>
[15:46:41.362]    <block atomic="false" info="">
[15:46:41.362]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:46:41.365]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:46:41.365]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:46:41.365]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:46:41.367]      __ap = 0; //lets make sure we reset the access point selection
[15:46:41.367]        // -> [__ap <= 0x00000000]
[15:46:41.367]    </block>
[15:46:41.367]  </sequence>
[15:46:41.367]  
[15:46:41.421]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:46:41.421]  
[15:46:41.421]  <debugvars>
[15:46:41.421]    // Pre-defined
[15:46:41.421]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:41.421]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:46:41.421]    __dp=0x00000000
[15:46:41.421]    __ap=0x00000000
[15:46:41.421]    __traceout=0x00000000      (Trace Disabled)
[15:46:41.421]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:41.421]    __FlashAddr=0x00000000
[15:46:41.421]    __FlashLen=0x00000000
[15:46:41.421]    __FlashArg=0x00000000
[15:46:41.421]    __FlashOp=0x00000000
[15:46:41.424]    __Result=0x00000000
[15:46:41.424]  </debugvars>
[15:46:41.424]  
[15:46:41.425]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:46:41.425]    <block atomic="false" info="">
[15:46:41.425]      __var deviceID = 0;
[15:46:41.425]        // -> [deviceID <= 0x00000000]
[15:46:41.425]      __var version = 0;
[15:46:41.425]        // -> [version <= 0x00000000]
[15:46:41.425]      __var partNum = 0;
[15:46:41.426]        // -> [partNum <= 0x00000000]
[15:46:41.426]      __var manuf = 0;
[15:46:41.426]        // -> [manuf <= 0x00000000]
[15:46:41.426]      __var isMSPM0G1X0X_G3X0X = 0;
[15:46:41.426]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:46:41.426]      __var isProduction = 0;
[15:46:41.426]        // -> [isProduction <= 0x00000000]
[15:46:41.426]      __var continueId = 0;
[15:46:41.426]        // -> [continueId <= 0x00000000]
[15:46:41.426]      deviceID =   Read32(0x41C40004);
[15:46:41.435]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:46:41.435]        // -> [deviceID <= 0x2BB8802F]
[15:46:41.435]      version = deviceID >> 28;
[15:46:41.435]        // -> [version <= 0x00000002]
[15:46:41.435]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:46:41.435]        // -> [partNum <= 0x0000BB88]
[15:46:41.435]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:46:41.435]        // -> [manuf <= 0x00000017]
[15:46:41.435]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:46:41.435]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:46:41.435]      isProduction = (version > 0);
[15:46:41.435]        // -> [isProduction <= 0x00000001]
[15:46:41.435]    </block>
[15:46:41.435]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:46:41.435]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:46:41.435]        // =>  FALSE
[15:46:41.435]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:46:41.435]    </control>
[15:46:41.435]    <control if="continueId == 4" while="" timeout="0" info="">
[15:46:41.435]      // if-block "continueId == 4"
[15:46:41.435]        // =>  FALSE
[15:46:41.435]      // skip if-block "continueId == 4"
[15:46:41.435]    </control>
[15:46:41.435]    <control if="!isProduction" while="" timeout="0" info="">
[15:46:41.435]      // if-block "!isProduction"
[15:46:41.435]        // =>  FALSE
[15:46:41.435]      // skip if-block "!isProduction"
[15:46:41.435]    </control>
[15:46:41.435]  </sequence>
[15:46:41.435]  
[15:52:48.032]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:52:48.032]  
[15:52:48.032]  <debugvars>
[15:52:48.032]    // Pre-defined
[15:52:48.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:52:48.032]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:52:48.032]    __dp=0x00000000
[15:52:48.032]    __ap=0x00000000
[15:52:48.032]    __traceout=0x00000000      (Trace Disabled)
[15:52:48.032]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:52:48.032]    __FlashAddr=0x00000000
[15:52:48.032]    __FlashLen=0x00000000
[15:52:48.032]    __FlashArg=0x00000000
[15:52:48.032]    __FlashOp=0x00000000
[15:52:48.032]    __Result=0x00000000
[15:52:48.032]  </debugvars>
[15:52:48.032]  
[15:52:48.032]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:52:48.032]    <block atomic="false" info="">
[15:52:48.032]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:52:48.037]        // -> [isSWJ <= 0x00000001]
[15:52:48.037]      __var hasDormant = __protocol & 0x00020000;
[15:52:48.037]        // -> [hasDormant <= 0x00000000]
[15:52:48.037]      __var protType   = __protocol & 0x0000FFFF;
[15:52:48.037]        // -> [protType <= 0x00000002]
[15:52:48.037]    </block>
[15:52:48.037]    <control if="protType == 1" while="" timeout="0" info="">
[15:52:48.037]      // if-block "protType == 1"
[15:52:48.037]        // =>  FALSE
[15:52:48.037]      // skip if-block "protType == 1"
[15:52:48.037]    </control>
[15:52:48.037]    <control if="protType == 2" while="" timeout="0" info="">
[15:52:48.038]      // if-block "protType == 2"
[15:52:48.038]        // =>  TRUE
[15:52:48.038]      <control if="isSWJ" while="" timeout="0" info="">
[15:52:48.038]        // if-block "isSWJ"
[15:52:48.038]          // =>  TRUE
[15:52:48.038]        <control if="hasDormant" while="" timeout="0" info="">
[15:52:48.038]          // if-block "hasDormant"
[15:52:48.038]            // =>  FALSE
[15:52:48.038]          // skip if-block "hasDormant"
[15:52:48.038]        </control>
[15:52:48.038]        <control if="!hasDormant" while="" timeout="0" info="">
[15:52:48.038]          // if-block "!hasDormant"
[15:52:48.038]            // =>  TRUE
[15:52:48.038]          <block atomic="false" info="">
[15:52:48.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:52:48.038]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:52:48.038]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:52:48.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:52:48.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:52:48.052]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:52:48.052]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:52:48.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:52:48.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:52:48.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:52:48.062]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:52:48.062]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:52:48.062]          </block>
[15:52:48.062]          // end if-block "!hasDormant"
[15:52:48.062]        </control>
[15:52:48.062]        // end if-block "isSWJ"
[15:52:48.062]      </control>
[15:52:48.062]      <control if="!isSWJ" while="" timeout="0" info="">
[15:52:48.062]        // if-block "!isSWJ"
[15:52:48.062]          // =>  FALSE
[15:52:48.062]        // skip if-block "!isSWJ"
[15:52:48.062]      </control>
[15:52:48.067]      <block atomic="false" info="">
[15:52:48.067]        ReadDP(0x0);
[15:52:48.069]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:52:48.069]      </block>
[15:52:48.069]      // end if-block "protType == 2"
[15:52:48.069]    </control>
[15:52:48.069]  </sequence>
[15:52:48.069]  
[15:52:48.073]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:52:48.073]  
[15:52:48.073]  <debugvars>
[15:52:48.073]    // Pre-defined
[15:52:48.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:52:48.073]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:52:48.073]    __dp=0x00000000
[15:52:48.073]    __ap=0x00000000
[15:52:48.073]    __traceout=0x00000000      (Trace Disabled)
[15:52:48.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:52:48.073]    __FlashAddr=0x00000000
[15:52:48.073]    __FlashLen=0x00000000
[15:52:48.073]    __FlashArg=0x00000000
[15:52:48.073]    __FlashOp=0x00000000
[15:52:48.073]    __Result=0x00000000
[15:52:48.073]  </debugvars>
[15:52:48.073]  
[15:52:48.073]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:52:48.073]    <block atomic="false" info="">
[15:52:48.073]      __var SW_DP_ABORT       = 0x0;
[15:52:48.073]        // -> [SW_DP_ABORT <= 0x00000000]
[15:52:48.073]      __var DP_CTRL_STAT      = 0x4;
[15:52:48.073]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:52:48.073]      __var DP_SELECT         = 0x8;
[15:52:48.073]        // -> [DP_SELECT <= 0x00000008]
[15:52:48.073]      __var powered_down      = 0;
[15:52:48.073]        // -> [powered_down <= 0x00000000]
[15:52:48.073]      WriteDP(DP_SELECT, 0x00000000);
[15:52:48.083]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:52:48.083]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:52:48.091]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:52:48.091]        // -> [powered_down <= 0x00000001]
[15:52:48.091]    </block>
[15:52:48.091]    <control if="powered_down" while="" timeout="0" info="">
[15:52:48.091]      // if-block "powered_down"
[15:52:48.091]        // =>  TRUE
[15:52:48.091]      <block atomic="false" info="">
[15:52:48.091]        Message(0, "Debug/System power-up request sent");
[15:52:48.093]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:52:48.093]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:52:48.093]      </block>
[15:52:48.093]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:52:48.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:52:48.098]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:52:48.098]        // while-condition  =>  FALSE
[15:52:48.098]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:52:48.098]      </control>
[15:52:48.098]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:52:48.098]        // if-block "(__protocol & 0xFFFF) == 1"
[15:52:48.098]          // =>  FALSE
[15:52:48.101]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:52:48.101]      </control>
[15:52:48.101]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:52:48.101]        // if-block "(__protocol & 0xFFFF) == 2"
[15:52:48.101]          // =>  TRUE
[15:52:48.101]        <block atomic="false" info="">
[15:52:48.101]          Message(0, "executing SWD power up");
[15:52:48.103]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:52:48.108]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:52:48.108]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:52:48.112]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:52:48.112]        </block>
[15:52:48.112]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:52:48.112]      </control>
[15:52:48.112]      // end if-block "powered_down"
[15:52:48.112]    </control>
[15:52:48.112]    <block atomic="false" info="">
[15:52:48.113]      __var DEBUG_PORT_VAL    = 0;
[15:52:48.113]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:52:48.114]      __var ACCESS_POINT_VAL  = 0;
[15:52:48.114]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:52:48.114]      __ap = 1; 
[15:52:48.114]        // -> [__ap <= 0x00000001]
[15:52:48.114]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:52:48.119]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:52:48.119]      __ap = 4;
[15:52:48.119]        // -> [__ap <= 0x00000004]
[15:52:48.119]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:52:48.128]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:52:48.128]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:52:48.128]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:52:48.131]    </block>
[15:52:48.131]    <block atomic="false" info="">
[15:52:48.131]      __var nReset = 0x80;
[15:52:48.131]        // -> [nReset <= 0x00000080]
[15:52:48.131]      __var canReadPins = 0;
[15:52:48.131]        // -> [canReadPins <= 0x00000000]
[15:52:48.131]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:52:48.134]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:52:48.134]        // -> [canReadPins <= 0x00000001]
[15:52:48.135]    </block>
[15:52:48.135]    <control if="" while="1" timeout="200" info="">
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.135]      // while-condition  =>  TRUE
[15:52:48.135]      // while "1"  (timeout="200")
[15:52:48.137]      // while-condition  =>  TRUE
[15:52:48.137]      // while "1"  (timeout="200")
[15:52:48.137]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.138]      // while "1"  (timeout="200")
[15:52:48.138]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.139]      // while-condition  =>  TRUE
[15:52:48.139]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.142]      // while-condition  =>  TRUE
[15:52:48.142]      // while "1"  (timeout="200")
[15:52:48.144]      // while-condition  =>  TRUE
[15:52:48.144]      // while "1"  (timeout="200")
[15:52:48.144]      // while  =>  TIMEOUT
[15:52:48.144]      // end while "1"
[15:52:48.144]    </control>
[15:52:48.144]    <control if="canReadPins" while="" timeout="0" info="">
[15:52:48.144]      // if-block "canReadPins"
[15:52:48.145]        // =>  TRUE
[15:52:48.145]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:52:48.145]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:52:48.149]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:52:48.149]        // while-condition  =>  FALSE
[15:52:48.149]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:52:48.149]      </control>
[15:52:48.149]      // end if-block "canReadPins"
[15:52:48.149]    </control>
[15:52:48.149]    <control if="!canReadPins" while="" timeout="0" info="">
[15:52:48.149]      // if-block "!canReadPins"
[15:52:48.149]        // =>  FALSE
[15:52:48.149]      // skip if-block "!canReadPins"
[15:52:48.149]    </control>
[15:52:48.150]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:52:48.150]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:52:48.150]        // =>  TRUE
[15:52:48.150]      <block atomic="false" info="">
[15:52:48.150]        WriteAP(0x00, 0x190008);
[15:52:48.152]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:52:48.152]        WriteAP(0xF0, 0x01);
[15:52:48.155]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:52:48.156]      </block>
[15:52:48.156]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:52:48.157]    </control>
[15:52:48.157]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:52:48.157]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:52:48.157]        // =>  FALSE
[15:52:48.157]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:52:48.157]    </control>
[15:52:48.157]    <block atomic="false" info="">
[15:52:48.157]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:52:48.168]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:52:48.168]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:52:48.168]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:52:48.174]      __ap = 0; //lets make sure we reset the access point selection
[15:52:48.174]        // -> [__ap <= 0x00000000]
[15:52:48.174]    </block>
[15:52:48.174]  </sequence>
[15:52:48.174]  
[15:52:48.199]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:52:48.199]  
[15:52:48.199]  <debugvars>
[15:52:48.199]    // Pre-defined
[15:52:48.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:52:48.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:52:48.199]    __dp=0x00000000
[15:52:48.199]    __ap=0x00000000
[15:52:48.199]    __traceout=0x00000000      (Trace Disabled)
[15:52:48.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:52:48.204]    __FlashAddr=0x00000000
[15:52:48.204]    __FlashLen=0x00000000
[15:52:48.204]    __FlashArg=0x00000000
[15:52:48.204]    __FlashOp=0x00000000
[15:52:48.204]    __Result=0x00000000
[15:52:48.204]  </debugvars>
[15:52:48.204]  
[15:52:48.204]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:52:48.204]    <block atomic="false" info="">
[15:52:48.205]      __var deviceID = 0;
[15:52:48.205]        // -> [deviceID <= 0x00000000]
[15:52:48.205]      __var version = 0;
[15:52:48.205]        // -> [version <= 0x00000000]
[15:52:48.205]      __var partNum = 0;
[15:52:48.205]        // -> [partNum <= 0x00000000]
[15:52:48.205]      __var manuf = 0;
[15:52:48.205]        // -> [manuf <= 0x00000000]
[15:52:48.205]      __var isMSPM0G1X0X_G3X0X = 0;
[15:52:48.205]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:52:48.205]      __var isProduction = 0;
[15:52:48.205]        // -> [isProduction <= 0x00000000]
[15:52:48.206]      __var continueId = 0;
[15:52:48.206]        // -> [continueId <= 0x00000000]
[15:52:48.207]      deviceID =   Read32(0x41C40004);
[15:52:48.211]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:52:48.211]        // -> [deviceID <= 0x2BB8802F]
[15:52:48.211]      version = deviceID >> 28;
[15:52:48.211]        // -> [version <= 0x00000002]
[15:52:48.211]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:52:48.211]        // -> [partNum <= 0x0000BB88]
[15:52:48.211]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:52:48.211]        // -> [manuf <= 0x00000017]
[15:52:48.211]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:52:48.211]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:52:48.211]      isProduction = (version > 0);
[15:52:48.211]        // -> [isProduction <= 0x00000001]
[15:52:48.213]    </block>
[15:52:48.213]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:52:48.213]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:52:48.213]        // =>  FALSE
[15:52:48.213]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:52:48.213]    </control>
[15:52:48.213]    <control if="continueId == 4" while="" timeout="0" info="">
[15:52:48.213]      // if-block "continueId == 4"
[15:52:48.213]        // =>  FALSE
[15:52:48.213]      // skip if-block "continueId == 4"
[15:52:48.213]    </control>
[15:52:48.213]    <control if="!isProduction" while="" timeout="0" info="">
[15:52:48.213]      // if-block "!isProduction"
[15:52:48.213]        // =>  FALSE
[15:52:48.213]      // skip if-block "!isProduction"
[15:52:48.213]    </control>
[15:52:48.213]  </sequence>
[15:52:48.213]  
[15:52:54.449]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:52:54.449]  
[15:52:54.459]  <debugvars>
[15:52:54.459]    // Pre-defined
[15:52:54.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:52:54.459]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:52:54.459]    __dp=0x00000000
[15:52:54.459]    __ap=0x00000000
[15:52:54.459]    __traceout=0x00000000      (Trace Disabled)
[15:52:54.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:52:54.459]    __FlashAddr=0x00000000
[15:52:54.459]    __FlashLen=0x00000000
[15:52:54.459]    __FlashArg=0x00000000
[15:52:54.459]    __FlashOp=0x00000000
[15:52:54.459]    __Result=0x00000000
[15:52:54.459]  </debugvars>
[15:52:54.459]  
[15:52:54.459]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:52:54.459]    <block atomic="false" info="">
[15:52:54.459]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:52:54.459]        // -> [isSWJ <= 0x00000001]
[15:52:54.459]      __var hasDormant = __protocol & 0x00020000;
[15:52:54.459]        // -> [hasDormant <= 0x00000000]
[15:52:54.459]      __var protType   = __protocol & 0x0000FFFF;
[15:52:54.459]        // -> [protType <= 0x00000002]
[15:52:54.459]    </block>
[15:52:54.459]    <control if="protType == 1" while="" timeout="0" info="">
[15:52:54.459]      // if-block "protType == 1"
[15:52:54.459]        // =>  FALSE
[15:52:54.459]      // skip if-block "protType == 1"
[15:52:54.459]    </control>
[15:52:54.459]    <control if="protType == 2" while="" timeout="0" info="">
[15:52:54.459]      // if-block "protType == 2"
[15:52:54.459]        // =>  TRUE
[15:52:54.459]      <control if="isSWJ" while="" timeout="0" info="">
[15:52:54.459]        // if-block "isSWJ"
[15:52:54.459]          // =>  TRUE
[15:52:54.459]        <control if="hasDormant" while="" timeout="0" info="">
[15:52:54.459]          // if-block "hasDormant"
[15:52:54.459]            // =>  FALSE
[15:52:54.459]          // skip if-block "hasDormant"
[15:52:54.459]        </control>
[15:52:54.459]        <control if="!hasDormant" while="" timeout="0" info="">
[15:52:54.459]          // if-block "!hasDormant"
[15:52:54.459]            // =>  TRUE
[15:52:54.459]          <block atomic="false" info="">
[15:52:54.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:52:54.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:52:54.459]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:52:54.469]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:52:54.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:52:54.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:52:54.469]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:52:54.469]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:52:54.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:52:54.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:52:54.478]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:52:54.478]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:52:54.478]          </block>
[15:52:54.478]          // end if-block "!hasDormant"
[15:52:54.487]        </control>
[15:52:54.487]        // end if-block "isSWJ"
[15:52:54.487]      </control>
[15:52:54.487]      <control if="!isSWJ" while="" timeout="0" info="">
[15:52:54.488]        // if-block "!isSWJ"
[15:52:54.488]          // =>  FALSE
[15:52:54.488]        // skip if-block "!isSWJ"
[15:52:54.488]      </control>
[15:52:54.488]      <block atomic="false" info="">
[15:52:54.488]        ReadDP(0x0);
[15:52:54.498]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:52:54.498]      </block>
[15:52:54.498]      // end if-block "protType == 2"
[15:52:54.498]    </control>
[15:52:54.498]  </sequence>
[15:52:54.498]  
[15:52:54.502]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:52:54.502]  
[15:52:54.502]  <debugvars>
[15:52:54.502]    // Pre-defined
[15:52:54.502]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:52:54.502]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:52:54.502]    __dp=0x00000000
[15:52:54.502]    __ap=0x00000000
[15:52:54.502]    __traceout=0x00000000      (Trace Disabled)
[15:52:54.502]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:52:54.502]    __FlashAddr=0x00000000
[15:52:54.502]    __FlashLen=0x00000000
[15:52:54.502]    __FlashArg=0x00000000
[15:52:54.502]    __FlashOp=0x00000000
[15:52:54.502]    __Result=0x00000000
[15:52:54.502]  </debugvars>
[15:52:54.502]  
[15:52:54.502]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:52:54.502]    <block atomic="false" info="">
[15:52:54.502]      __var SW_DP_ABORT       = 0x0;
[15:52:54.502]        // -> [SW_DP_ABORT <= 0x00000000]
[15:52:54.502]      __var DP_CTRL_STAT      = 0x4;
[15:52:54.502]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:52:54.502]      __var DP_SELECT         = 0x8;
[15:52:54.502]        // -> [DP_SELECT <= 0x00000008]
[15:52:54.502]      __var powered_down      = 0;
[15:52:54.502]        // -> [powered_down <= 0x00000000]
[15:52:54.502]      WriteDP(DP_SELECT, 0x00000000);
[15:52:54.507]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:52:54.507]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:52:54.509]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:52:54.509]        // -> [powered_down <= 0x00000001]
[15:52:54.509]    </block>
[15:52:54.509]    <control if="powered_down" while="" timeout="0" info="">
[15:52:54.509]      // if-block "powered_down"
[15:52:54.509]        // =>  TRUE
[15:52:54.509]      <block atomic="false" info="">
[15:52:54.509]        Message(0, "Debug/System power-up request sent");
[15:52:54.509]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:52:54.509]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:52:54.509]      </block>
[15:52:54.509]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:52:54.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:52:54.517]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:52:54.517]        // while-condition  =>  FALSE
[15:52:54.518]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:52:54.518]      </control>
[15:52:54.518]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:52:54.518]        // if-block "(__protocol & 0xFFFF) == 1"
[15:52:54.518]          // =>  FALSE
[15:52:54.518]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:52:54.518]      </control>
[15:52:54.518]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:52:54.518]        // if-block "(__protocol & 0xFFFF) == 2"
[15:52:54.518]          // =>  TRUE
[15:52:54.518]        <block atomic="false" info="">
[15:52:54.518]          Message(0, "executing SWD power up");
[15:52:54.518]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:52:54.518]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:52:54.522]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:52:54.524]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:52:54.524]        </block>
[15:52:54.524]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:52:54.524]      </control>
[15:52:54.524]      // end if-block "powered_down"
[15:52:54.524]    </control>
[15:52:54.524]    <block atomic="false" info="">
[15:52:54.524]      __var DEBUG_PORT_VAL    = 0;
[15:52:54.524]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:52:54.524]      __var ACCESS_POINT_VAL  = 0;
[15:52:54.524]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:52:54.524]      __ap = 1; 
[15:52:54.524]        // -> [__ap <= 0x00000001]
[15:52:54.524]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:52:54.532]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:52:54.532]      __ap = 4;
[15:52:54.532]        // -> [__ap <= 0x00000004]
[15:52:54.532]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:52:54.539]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:52:54.539]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:52:54.539]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:52:54.539]    </block>
[15:52:54.539]    <block atomic="false" info="">
[15:52:54.539]      __var nReset = 0x80;
[15:52:54.539]        // -> [nReset <= 0x00000080]
[15:52:54.539]      __var canReadPins = 0;
[15:52:54.539]        // -> [canReadPins <= 0x00000000]
[15:52:54.539]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:52:54.539]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:52:54.539]        // -> [canReadPins <= 0x00000001]
[15:52:54.539]    </block>
[15:52:54.539]    <control if="" while="1" timeout="200" info="">
[15:52:54.539]      // while "1"  (timeout="200")
[15:52:54.539]      // while-condition  =>  TRUE
[15:52:54.539]      // while "1"  (timeout="200")
[15:52:54.539]      // while-condition  =>  TRUE
[15:52:54.539]      // while "1"  (timeout="200")
[15:52:54.547]      // while-condition  =>  TRUE
[15:52:54.547]      // while "1"  (timeout="200")
[15:52:54.547]      // while-condition  =>  TRUE
[15:52:54.547]      // while "1"  (timeout="200")
[15:52:54.548]      // while-condition  =>  TRUE
[15:52:54.548]      // while "1"  (timeout="200")
[15:52:54.548]      // while-condition  =>  TRUE
[15:52:54.548]      // while "1"  (timeout="200")
[15:52:54.548]      // while-condition  =>  TRUE
[15:52:54.548]      // while "1"  (timeout="200")
[15:52:54.548]      // while-condition  =>  TRUE
[15:52:54.548]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.549]      // while "1"  (timeout="200")
[15:52:54.549]      // while-condition  =>  TRUE
[15:52:54.557]      // while "1"  (timeout="200")
[15:52:54.557]      // while  =>  TIMEOUT
[15:52:54.557]      // end while "1"
[15:52:54.557]    </control>
[15:52:54.557]    <control if="canReadPins" while="" timeout="0" info="">
[15:52:54.557]      // if-block "canReadPins"
[15:52:54.557]        // =>  TRUE
[15:52:54.557]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:52:54.557]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:52:54.559]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:52:54.559]        // while-condition  =>  FALSE
[15:52:54.559]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:52:54.559]      </control>
[15:52:54.559]      // end if-block "canReadPins"
[15:52:54.559]    </control>
[15:52:54.559]    <control if="!canReadPins" while="" timeout="0" info="">
[15:52:54.559]      // if-block "!canReadPins"
[15:52:54.560]        // =>  FALSE
[15:52:54.560]      // skip if-block "!canReadPins"
[15:52:54.560]    </control>
[15:52:54.560]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:52:54.560]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:52:54.560]        // =>  TRUE
[15:52:54.560]      <block atomic="false" info="">
[15:52:54.560]        WriteAP(0x00, 0x190008);
[15:52:54.560]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:52:54.560]        WriteAP(0xF0, 0x01);
[15:52:54.568]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:52:54.568]      </block>
[15:52:54.568]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:52:54.568]    </control>
[15:52:54.568]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:52:54.568]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:52:54.568]        // =>  FALSE
[15:52:54.568]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:52:54.568]    </control>
[15:52:54.568]    <block atomic="false" info="">
[15:52:54.568]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:52:54.568]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:52:54.568]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:52:54.568]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:52:54.568]      __ap = 0; //lets make sure we reset the access point selection
[15:52:54.568]        // -> [__ap <= 0x00000000]
[15:52:54.568]    </block>
[15:52:54.568]  </sequence>
[15:52:54.568]  
[15:52:54.598]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:52:54.598]  
[15:52:54.598]  <debugvars>
[15:52:54.598]    // Pre-defined
[15:52:54.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:52:54.598]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:52:54.598]    __dp=0x00000000
[15:52:54.599]    __ap=0x00000000
[15:52:54.599]    __traceout=0x00000000      (Trace Disabled)
[15:52:54.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:52:54.599]    __FlashAddr=0x00000000
[15:52:54.599]    __FlashLen=0x00000000
[15:52:54.599]    __FlashArg=0x00000000
[15:52:54.599]    __FlashOp=0x00000000
[15:52:54.599]    __Result=0x00000000
[15:52:54.599]  </debugvars>
[15:52:54.599]  
[15:52:54.599]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:52:54.599]    <block atomic="false" info="">
[15:52:54.599]      __var deviceID = 0;
[15:52:54.599]        // -> [deviceID <= 0x00000000]
[15:52:54.599]      __var version = 0;
[15:52:54.599]        // -> [version <= 0x00000000]
[15:52:54.599]      __var partNum = 0;
[15:52:54.599]        // -> [partNum <= 0x00000000]
[15:52:54.599]      __var manuf = 0;
[15:52:54.599]        // -> [manuf <= 0x00000000]
[15:52:54.599]      __var isMSPM0G1X0X_G3X0X = 0;
[15:52:54.599]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:52:54.599]      __var isProduction = 0;
[15:52:54.599]        // -> [isProduction <= 0x00000000]
[15:52:54.599]      __var continueId = 0;
[15:52:54.599]        // -> [continueId <= 0x00000000]
[15:52:54.599]      deviceID =   Read32(0x41C40004);
[15:52:54.607]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:52:54.607]        // -> [deviceID <= 0x2BB8802F]
[15:52:54.608]      version = deviceID >> 28;
[15:52:54.608]        // -> [version <= 0x00000002]
[15:52:54.608]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:52:54.608]        // -> [partNum <= 0x0000BB88]
[15:52:54.608]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:52:54.608]        // -> [manuf <= 0x00000017]
[15:52:54.608]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:52:54.608]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:52:54.608]      isProduction = (version > 0);
[15:52:54.608]        // -> [isProduction <= 0x00000001]
[15:52:54.608]    </block>
[15:52:54.608]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:52:54.608]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:52:54.608]        // =>  FALSE
[15:52:54.608]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:52:54.608]    </control>
[15:52:54.608]    <control if="continueId == 4" while="" timeout="0" info="">
[15:52:54.608]      // if-block "continueId == 4"
[15:52:54.608]        // =>  FALSE
[15:52:54.608]      // skip if-block "continueId == 4"
[15:52:54.608]    </control>
[15:52:54.608]    <control if="!isProduction" while="" timeout="0" info="">
[15:52:54.608]      // if-block "!isProduction"
[15:52:54.608]        // =>  FALSE
[15:52:54.608]      // skip if-block "!isProduction"
[15:52:54.608]    </control>
[15:52:54.608]  </sequence>
[15:52:54.608]  
[15:57:04.123]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:57:04.123]  
[15:57:04.123]  <debugvars>
[15:57:04.123]    // Pre-defined
[15:57:04.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:04.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:04.123]    __dp=0x00000000
[15:57:04.123]    __ap=0x00000000
[15:57:04.123]    __traceout=0x00000000      (Trace Disabled)
[15:57:04.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:04.123]    __FlashAddr=0x00000000
[15:57:04.123]    __FlashLen=0x00000000
[15:57:04.131]    __FlashArg=0x00000000
[15:57:04.131]    __FlashOp=0x00000000
[15:57:04.131]    __Result=0x00000000
[15:57:04.131]  </debugvars>
[15:57:04.131]  
[15:57:04.131]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:57:04.131]    <block atomic="false" info="">
[15:57:04.131]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:57:04.132]        // -> [isSWJ <= 0x00000001]
[15:57:04.132]      __var hasDormant = __protocol & 0x00020000;
[15:57:04.132]        // -> [hasDormant <= 0x00000000]
[15:57:04.132]      __var protType   = __protocol & 0x0000FFFF;
[15:57:04.132]        // -> [protType <= 0x00000002]
[15:57:04.132]    </block>
[15:57:04.132]    <control if="protType == 1" while="" timeout="0" info="">
[15:57:04.132]      // if-block "protType == 1"
[15:57:04.132]        // =>  FALSE
[15:57:04.132]      // skip if-block "protType == 1"
[15:57:04.132]    </control>
[15:57:04.132]    <control if="protType == 2" while="" timeout="0" info="">
[15:57:04.132]      // if-block "protType == 2"
[15:57:04.132]        // =>  TRUE
[15:57:04.132]      <control if="isSWJ" while="" timeout="0" info="">
[15:57:04.132]        // if-block "isSWJ"
[15:57:04.132]          // =>  TRUE
[15:57:04.132]        <control if="hasDormant" while="" timeout="0" info="">
[15:57:04.132]          // if-block "hasDormant"
[15:57:04.132]            // =>  FALSE
[15:57:04.132]          // skip if-block "hasDormant"
[15:57:04.132]        </control>
[15:57:04.132]        <control if="!hasDormant" while="" timeout="0" info="">
[15:57:04.132]          // if-block "!hasDormant"
[15:57:04.132]            // =>  TRUE
[15:57:04.132]          <block atomic="false" info="">
[15:57:04.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:57:04.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:04.132]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:57:04.144]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:57:04.144]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:57:04.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:04.144]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:57:04.144]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:57:04.144]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:57:04.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:04.152]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:57:04.152]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:57:04.152]          </block>
[15:57:04.152]          // end if-block "!hasDormant"
[15:57:04.152]        </control>
[15:57:04.152]        // end if-block "isSWJ"
[15:57:04.152]      </control>
[15:57:04.152]      <control if="!isSWJ" while="" timeout="0" info="">
[15:57:04.152]        // if-block "!isSWJ"
[15:57:04.152]          // =>  FALSE
[15:57:04.152]        // skip if-block "!isSWJ"
[15:57:04.152]      </control>
[15:57:04.152]      <block atomic="false" info="">
[15:57:04.152]        ReadDP(0x0);
[15:57:04.152]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:57:04.152]      </block>
[15:57:04.152]      // end if-block "protType == 2"
[15:57:04.152]    </control>
[15:57:04.152]  </sequence>
[15:57:04.152]  
[15:57:04.162]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:57:04.162]  
[15:57:04.162]  <debugvars>
[15:57:04.162]    // Pre-defined
[15:57:04.162]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:04.162]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:04.162]    __dp=0x00000000
[15:57:04.162]    __ap=0x00000000
[15:57:04.162]    __traceout=0x00000000      (Trace Disabled)
[15:57:04.162]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:04.162]    __FlashAddr=0x00000000
[15:57:04.162]    __FlashLen=0x00000000
[15:57:04.162]    __FlashArg=0x00000000
[15:57:04.162]    __FlashOp=0x00000000
[15:57:04.162]    __Result=0x00000000
[15:57:04.162]  </debugvars>
[15:57:04.162]  
[15:57:04.164]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:57:04.164]    <block atomic="false" info="">
[15:57:04.164]      __var SW_DP_ABORT       = 0x0;
[15:57:04.164]        // -> [SW_DP_ABORT <= 0x00000000]
[15:57:04.164]      __var DP_CTRL_STAT      = 0x4;
[15:57:04.164]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:57:04.164]      __var DP_SELECT         = 0x8;
[15:57:04.164]        // -> [DP_SELECT <= 0x00000008]
[15:57:04.164]      __var powered_down      = 0;
[15:57:04.164]        // -> [powered_down <= 0x00000000]
[15:57:04.164]      WriteDP(DP_SELECT, 0x00000000);
[15:57:04.164]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:57:04.164]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:57:04.164]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:57:04.164]        // -> [powered_down <= 0x00000001]
[15:57:04.164]    </block>
[15:57:04.164]    <control if="powered_down" while="" timeout="0" info="">
[15:57:04.164]      // if-block "powered_down"
[15:57:04.164]        // =>  TRUE
[15:57:04.164]      <block atomic="false" info="">
[15:57:04.164]        Message(0, "Debug/System power-up request sent");
[15:57:04.172]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:57:04.173]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:57:04.173]      </block>
[15:57:04.173]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:57:04.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:57:04.173]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:57:04.173]        // while-condition  =>  FALSE
[15:57:04.173]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:57:04.173]      </control>
[15:57:04.173]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:57:04.173]        // if-block "(__protocol & 0xFFFF) == 1"
[15:57:04.173]          // =>  FALSE
[15:57:04.173]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:57:04.173]      </control>
[15:57:04.173]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:57:04.173]        // if-block "(__protocol & 0xFFFF) == 2"
[15:57:04.173]          // =>  TRUE
[15:57:04.173]        <block atomic="false" info="">
[15:57:04.173]          Message(0, "executing SWD power up");
[15:57:04.180]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:57:04.182]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:57:04.182]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:57:04.182]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:57:04.182]        </block>
[15:57:04.182]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:57:04.182]      </control>
[15:57:04.182]      // end if-block "powered_down"
[15:57:04.182]    </control>
[15:57:04.182]    <block atomic="false" info="">
[15:57:04.182]      __var DEBUG_PORT_VAL    = 0;
[15:57:04.182]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:57:04.182]      __var ACCESS_POINT_VAL  = 0;
[15:57:04.182]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:57:04.182]      __ap = 1; 
[15:57:04.182]        // -> [__ap <= 0x00000001]
[15:57:04.182]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:57:04.182]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:57:04.182]      __ap = 4;
[15:57:04.182]        // -> [__ap <= 0x00000004]
[15:57:04.182]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:57:04.193]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:57:04.193]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:57:04.193]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:57:04.193]    </block>
[15:57:04.193]    <block atomic="false" info="">
[15:57:04.193]      __var nReset = 0x80;
[15:57:04.199]        // -> [nReset <= 0x00000080]
[15:57:04.199]      __var canReadPins = 0;
[15:57:04.199]        // -> [canReadPins <= 0x00000000]
[15:57:04.199]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:57:04.201]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:57:04.201]        // -> [canReadPins <= 0x00000001]
[15:57:04.201]    </block>
[15:57:04.201]    <control if="" while="1" timeout="200" info="">
[15:57:04.201]      // while "1"  (timeout="200")
[15:57:04.201]      // while-condition  =>  TRUE
[15:57:04.201]      // while "1"  (timeout="200")
[15:57:04.201]      // while-condition  =>  TRUE
[15:57:04.201]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.202]      // while-condition  =>  TRUE
[15:57:04.202]      // while "1"  (timeout="200")
[15:57:04.211]      // while-condition  =>  TRUE
[15:57:04.211]      // while "1"  (timeout="200")
[15:57:04.211]      // while  =>  TIMEOUT
[15:57:04.212]      // end while "1"
[15:57:04.212]    </control>
[15:57:04.212]    <control if="canReadPins" while="" timeout="0" info="">
[15:57:04.212]      // if-block "canReadPins"
[15:57:04.212]        // =>  TRUE
[15:57:04.212]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:57:04.212]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:57:04.213]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:57:04.213]        // while-condition  =>  FALSE
[15:57:04.213]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:57:04.213]      </control>
[15:57:04.213]      // end if-block "canReadPins"
[15:57:04.213]    </control>
[15:57:04.213]    <control if="!canReadPins" while="" timeout="0" info="">
[15:57:04.213]      // if-block "!canReadPins"
[15:57:04.213]        // =>  FALSE
[15:57:04.213]      // skip if-block "!canReadPins"
[15:57:04.213]    </control>
[15:57:04.213]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:57:04.213]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:57:04.213]        // =>  TRUE
[15:57:04.213]      <block atomic="false" info="">
[15:57:04.213]        WriteAP(0x00, 0x190008);
[15:57:04.213]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:57:04.213]        WriteAP(0xF0, 0x01);
[15:57:04.220]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:57:04.220]      </block>
[15:57:04.220]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:57:04.221]    </control>
[15:57:04.221]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:57:04.221]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:57:04.221]        // =>  FALSE
[15:57:04.221]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:57:04.221]    </control>
[15:57:04.221]    <block atomic="false" info="">
[15:57:04.221]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:57:04.222]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:57:04.222]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:57:04.222]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:57:04.222]      __ap = 0; //lets make sure we reset the access point selection
[15:57:04.222]        // -> [__ap <= 0x00000000]
[15:57:04.222]    </block>
[15:57:04.222]  </sequence>
[15:57:04.222]  
[15:57:04.273]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:57:04.273]  
[15:57:04.273]  <debugvars>
[15:57:04.273]    // Pre-defined
[15:57:04.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:04.273]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:04.273]    __dp=0x00000000
[15:57:04.273]    __ap=0x00000000
[15:57:04.273]    __traceout=0x00000000      (Trace Disabled)
[15:57:04.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:04.274]    __FlashAddr=0x00000000
[15:57:04.274]    __FlashLen=0x00000000
[15:57:04.274]    __FlashArg=0x00000000
[15:57:04.274]    __FlashOp=0x00000000
[15:57:04.274]    __Result=0x00000000
[15:57:04.274]  </debugvars>
[15:57:04.274]  
[15:57:04.274]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:57:04.274]    <block atomic="false" info="">
[15:57:04.274]      __var deviceID = 0;
[15:57:04.274]        // -> [deviceID <= 0x00000000]
[15:57:04.274]      __var version = 0;
[15:57:04.276]        // -> [version <= 0x00000000]
[15:57:04.276]      __var partNum = 0;
[15:57:04.276]        // -> [partNum <= 0x00000000]
[15:57:04.276]      __var manuf = 0;
[15:57:04.276]        // -> [manuf <= 0x00000000]
[15:57:04.276]      __var isMSPM0G1X0X_G3X0X = 0;
[15:57:04.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:57:04.276]      __var isProduction = 0;
[15:57:04.276]        // -> [isProduction <= 0x00000000]
[15:57:04.276]      __var continueId = 0;
[15:57:04.276]        // -> [continueId <= 0x00000000]
[15:57:04.277]      deviceID =   Read32(0x41C40004);
[15:57:04.282]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:57:04.282]        // -> [deviceID <= 0x2BB8802F]
[15:57:04.282]      version = deviceID >> 28;
[15:57:04.282]        // -> [version <= 0x00000002]
[15:57:04.282]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:57:04.282]        // -> [partNum <= 0x0000BB88]
[15:57:04.282]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:57:04.282]        // -> [manuf <= 0x00000017]
[15:57:04.282]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:57:04.282]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:57:04.282]      isProduction = (version > 0);
[15:57:04.282]        // -> [isProduction <= 0x00000001]
[15:57:04.282]    </block>
[15:57:04.282]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:57:04.282]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:57:04.282]        // =>  FALSE
[15:57:04.282]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:57:04.282]    </control>
[15:57:04.282]    <control if="continueId == 4" while="" timeout="0" info="">
[15:57:04.282]      // if-block "continueId == 4"
[15:57:04.282]        // =>  FALSE
[15:57:04.289]      // skip if-block "continueId == 4"
[15:57:04.289]    </control>
[15:57:04.289]    <control if="!isProduction" while="" timeout="0" info="">
[15:57:04.289]      // if-block "!isProduction"
[15:57:04.289]        // =>  FALSE
[15:57:04.289]      // skip if-block "!isProduction"
[15:57:04.289]    </control>
[15:57:04.289]  </sequence>
[15:57:04.289]  
[15:57:27.947]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:57:27.947]  
[15:57:27.959]  <debugvars>
[15:57:27.959]    // Pre-defined
[15:57:27.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:27.959]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:27.959]    __dp=0x00000000
[15:57:27.959]    __ap=0x00000000
[15:57:27.959]    __traceout=0x00000000      (Trace Disabled)
[15:57:27.959]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:27.959]    __FlashAddr=0x00000000
[15:57:27.959]    __FlashLen=0x00000000
[15:57:27.959]    __FlashArg=0x00000000
[15:57:27.959]    __FlashOp=0x00000000
[15:57:27.959]    __Result=0x00000000
[15:57:27.959]  </debugvars>
[15:57:27.959]  
[15:57:27.959]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:57:27.959]    <block atomic="false" info="">
[15:57:27.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:57:27.961]        // -> [isSWJ <= 0x00000001]
[15:57:27.961]      __var hasDormant = __protocol & 0x00020000;
[15:57:27.961]        // -> [hasDormant <= 0x00000000]
[15:57:27.961]      __var protType   = __protocol & 0x0000FFFF;
[15:57:27.961]        // -> [protType <= 0x00000002]
[15:57:27.961]    </block>
[15:57:27.961]    <control if="protType == 1" while="" timeout="0" info="">
[15:57:27.961]      // if-block "protType == 1"
[15:57:27.961]        // =>  FALSE
[15:57:27.961]      // skip if-block "protType == 1"
[15:57:27.962]    </control>
[15:57:27.962]    <control if="protType == 2" while="" timeout="0" info="">
[15:57:27.962]      // if-block "protType == 2"
[15:57:27.962]        // =>  TRUE
[15:57:27.962]      <control if="isSWJ" while="" timeout="0" info="">
[15:57:27.962]        // if-block "isSWJ"
[15:57:27.962]          // =>  TRUE
[15:57:27.962]        <control if="hasDormant" while="" timeout="0" info="">
[15:57:27.962]          // if-block "hasDormant"
[15:57:27.962]            // =>  FALSE
[15:57:27.962]          // skip if-block "hasDormant"
[15:57:27.963]        </control>
[15:57:27.963]        <control if="!hasDormant" while="" timeout="0" info="">
[15:57:27.963]          // if-block "!hasDormant"
[15:57:27.963]            // =>  TRUE
[15:57:27.963]          <block atomic="false" info="">
[15:57:27.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:57:27.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:27.963]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:57:27.967]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:57:27.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:57:27.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:27.967]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:57:27.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:57:27.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:57:27.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:27.988]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:57:27.992]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:57:27.992]          </block>
[15:57:27.992]          // end if-block "!hasDormant"
[15:57:27.992]        </control>
[15:57:27.992]        // end if-block "isSWJ"
[15:57:27.992]      </control>
[15:57:27.992]      <control if="!isSWJ" while="" timeout="0" info="">
[15:57:27.992]        // if-block "!isSWJ"
[15:57:27.992]          // =>  FALSE
[15:57:27.992]        // skip if-block "!isSWJ"
[15:57:27.992]      </control>
[15:57:27.992]      <block atomic="false" info="">
[15:57:27.997]        ReadDP(0x0);
[15:57:27.997]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:57:27.997]      </block>
[15:57:27.997]      // end if-block "protType == 2"
[15:57:27.997]    </control>
[15:57:27.997]  </sequence>
[15:57:27.997]  
[15:57:28.003]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:57:28.003]  
[15:57:28.003]  <debugvars>
[15:57:28.003]    // Pre-defined
[15:57:28.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:28.007]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:28.008]    __dp=0x00000000
[15:57:28.008]    __ap=0x00000000
[15:57:28.008]    __traceout=0x00000000      (Trace Disabled)
[15:57:28.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:28.008]    __FlashAddr=0x00000000
[15:57:28.008]    __FlashLen=0x00000000
[15:57:28.008]    __FlashArg=0x00000000
[15:57:28.008]    __FlashOp=0x00000000
[15:57:28.008]    __Result=0x00000000
[15:57:28.008]  </debugvars>
[15:57:28.008]  
[15:57:28.008]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:57:28.008]    <block atomic="false" info="">
[15:57:28.008]      __var SW_DP_ABORT       = 0x0;
[15:57:28.009]        // -> [SW_DP_ABORT <= 0x00000000]
[15:57:28.009]      __var DP_CTRL_STAT      = 0x4;
[15:57:28.009]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:57:28.009]      __var DP_SELECT         = 0x8;
[15:57:28.009]        // -> [DP_SELECT <= 0x00000008]
[15:57:28.009]      __var powered_down      = 0;
[15:57:28.009]        // -> [powered_down <= 0x00000000]
[15:57:28.009]      WriteDP(DP_SELECT, 0x00000000);
[15:57:28.011]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:57:28.011]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:57:28.018]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:57:28.018]        // -> [powered_down <= 0x00000001]
[15:57:28.018]    </block>
[15:57:28.018]    <control if="powered_down" while="" timeout="0" info="">
[15:57:28.018]      // if-block "powered_down"
[15:57:28.018]        // =>  TRUE
[15:57:28.018]      <block atomic="false" info="">
[15:57:28.018]        Message(0, "Debug/System power-up request sent");
[15:57:28.021]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:57:28.023]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:57:28.023]      </block>
[15:57:28.023]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:57:28.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:57:28.024]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:57:28.024]        // while-condition  =>  FALSE
[15:57:28.024]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:57:28.024]      </control>
[15:57:28.024]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:57:28.024]        // if-block "(__protocol & 0xFFFF) == 1"
[15:57:28.025]          // =>  FALSE
[15:57:28.025]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:57:28.025]      </control>
[15:57:28.025]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:57:28.025]        // if-block "(__protocol & 0xFFFF) == 2"
[15:57:28.025]          // =>  TRUE
[15:57:28.025]        <block atomic="false" info="">
[15:57:28.025]          Message(0, "executing SWD power up");
[15:57:28.029]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:57:28.032]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:57:28.032]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:57:28.041]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:57:28.041]        </block>
[15:57:28.041]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:57:28.041]      </control>
[15:57:28.041]      // end if-block "powered_down"
[15:57:28.042]    </control>
[15:57:28.042]    <block atomic="false" info="">
[15:57:28.042]      __var DEBUG_PORT_VAL    = 0;
[15:57:28.042]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:57:28.042]      __var ACCESS_POINT_VAL  = 0;
[15:57:28.042]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:57:28.042]      __ap = 1; 
[15:57:28.042]        // -> [__ap <= 0x00000001]
[15:57:28.042]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:57:28.055]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:57:28.055]      __ap = 4;
[15:57:28.055]        // -> [__ap <= 0x00000004]
[15:57:28.055]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:57:28.057]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:57:28.057]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:57:28.057]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:57:28.062]    </block>
[15:57:28.062]    <block atomic="false" info="">
[15:57:28.062]      __var nReset = 0x80;
[15:57:28.062]        // -> [nReset <= 0x00000080]
[15:57:28.062]      __var canReadPins = 0;
[15:57:28.062]        // -> [canReadPins <= 0x00000000]
[15:57:28.062]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:57:28.069]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:57:28.069]        // -> [canReadPins <= 0x00000001]
[15:57:28.069]    </block>
[15:57:28.069]    <control if="" while="1" timeout="200" info="">
[15:57:28.069]      // while "1"  (timeout="200")
[15:57:28.069]      // while-condition  =>  TRUE
[15:57:28.069]      // while "1"  (timeout="200")
[15:57:28.069]      // while-condition  =>  TRUE
[15:57:28.069]      // while "1"  (timeout="200")
[15:57:28.071]      // while-condition  =>  TRUE
[15:57:28.071]      // while "1"  (timeout="200")
[15:57:28.071]      // while-condition  =>  TRUE
[15:57:28.071]      // while "1"  (timeout="200")
[15:57:28.071]      // while-condition  =>  TRUE
[15:57:28.071]      // while "1"  (timeout="200")
[15:57:28.071]      // while-condition  =>  TRUE
[15:57:28.071]      // while "1"  (timeout="200")
[15:57:28.071]      // while-condition  =>  TRUE
[15:57:28.071]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.072]      // while-condition  =>  TRUE
[15:57:28.072]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.078]      // while "1"  (timeout="200")
[15:57:28.078]      // while-condition  =>  TRUE
[15:57:28.081]      // while "1"  (timeout="200")
[15:57:28.081]      // while  =>  TIMEOUT
[15:57:28.081]      // end while "1"
[15:57:28.081]    </control>
[15:57:28.081]    <control if="canReadPins" while="" timeout="0" info="">
[15:57:28.081]      // if-block "canReadPins"
[15:57:28.081]        // =>  TRUE
[15:57:28.081]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:57:28.081]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:57:28.083]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:57:28.083]        // while-condition  =>  FALSE
[15:57:28.083]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:57:28.083]      </control>
[15:57:28.083]      // end if-block "canReadPins"
[15:57:28.083]    </control>
[15:57:28.083]    <control if="!canReadPins" while="" timeout="0" info="">
[15:57:28.083]      // if-block "!canReadPins"
[15:57:28.083]        // =>  FALSE
[15:57:28.083]      // skip if-block "!canReadPins"
[15:57:28.083]    </control>
[15:57:28.083]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:57:28.083]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:57:28.083]        // =>  TRUE
[15:57:28.083]      <block atomic="false" info="">
[15:57:28.083]        WriteAP(0x00, 0x190008);
[15:57:28.083]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:57:28.083]        WriteAP(0xF0, 0x01);
[15:57:28.089]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:57:28.091]      </block>
[15:57:28.091]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:57:28.091]    </control>
[15:57:28.091]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:57:28.091]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:57:28.091]        // =>  FALSE
[15:57:28.092]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:57:28.092]    </control>
[15:57:28.092]    <block atomic="false" info="">
[15:57:28.092]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:57:28.094]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:57:28.094]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:57:28.094]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:57:28.094]      __ap = 0; //lets make sure we reset the access point selection
[15:57:28.094]        // -> [__ap <= 0x00000000]
[15:57:28.094]    </block>
[15:57:28.094]  </sequence>
[15:57:28.094]  
[15:57:28.132]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:57:28.132]  
[15:57:28.132]  <debugvars>
[15:57:28.132]    // Pre-defined
[15:57:28.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:28.132]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:28.132]    __dp=0x00000000
[15:57:28.132]    __ap=0x00000000
[15:57:28.132]    __traceout=0x00000000      (Trace Disabled)
[15:57:28.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:28.132]    __FlashAddr=0x00000000
[15:57:28.132]    __FlashLen=0x00000000
[15:57:28.132]    __FlashArg=0x00000000
[15:57:28.132]    __FlashOp=0x00000000
[15:57:28.132]    __Result=0x00000000
[15:57:28.132]  </debugvars>
[15:57:28.132]  
[15:57:28.132]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:57:28.132]    <block atomic="false" info="">
[15:57:28.132]      __var deviceID = 0;
[15:57:28.132]        // -> [deviceID <= 0x00000000]
[15:57:28.132]      __var version = 0;
[15:57:28.132]        // -> [version <= 0x00000000]
[15:57:28.132]      __var partNum = 0;
[15:57:28.132]        // -> [partNum <= 0x00000000]
[15:57:28.132]      __var manuf = 0;
[15:57:28.132]        // -> [manuf <= 0x00000000]
[15:57:28.132]      __var isMSPM0G1X0X_G3X0X = 0;
[15:57:28.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:57:28.132]      __var isProduction = 0;
[15:57:28.132]        // -> [isProduction <= 0x00000000]
[15:57:28.132]      __var continueId = 0;
[15:57:28.132]        // -> [continueId <= 0x00000000]
[15:57:28.132]      deviceID =   Read32(0x41C40004);
[15:57:28.146]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:57:28.146]        // -> [deviceID <= 0x2BB8802F]
[15:57:28.146]      version = deviceID >> 28;
[15:57:28.146]        // -> [version <= 0x00000002]
[15:57:28.146]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:57:28.146]        // -> [partNum <= 0x0000BB88]
[15:57:28.146]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:57:28.146]        // -> [manuf <= 0x00000017]
[15:57:28.146]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:57:28.146]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:57:28.146]      isProduction = (version > 0);
[15:57:28.146]        // -> [isProduction <= 0x00000001]
[15:57:28.146]    </block>
[15:57:28.146]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:57:28.146]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:57:28.146]        // =>  FALSE
[15:57:28.146]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:57:28.150]    </control>
[15:57:28.150]    <control if="continueId == 4" while="" timeout="0" info="">
[15:57:28.150]      // if-block "continueId == 4"
[15:57:28.150]        // =>  FALSE
[15:57:28.150]      // skip if-block "continueId == 4"
[15:57:28.150]    </control>
[15:57:28.151]    <control if="!isProduction" while="" timeout="0" info="">
[15:57:28.151]      // if-block "!isProduction"
[15:57:28.151]        // =>  FALSE
[15:57:28.151]      // skip if-block "!isProduction"
[15:57:28.151]    </control>
[15:57:28.151]  </sequence>
[15:57:28.151]  
[15:58:42.280]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:58:42.280]  
[15:58:42.291]  <debugvars>
[15:58:42.291]    // Pre-defined
[15:58:42.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:58:42.291]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:58:42.291]    __dp=0x00000000
[15:58:42.291]    __ap=0x00000000
[15:58:42.291]    __traceout=0x00000000      (Trace Disabled)
[15:58:42.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:58:42.291]    __FlashAddr=0x00000000
[15:58:42.292]    __FlashLen=0x00000000
[15:58:42.292]    __FlashArg=0x00000000
[15:58:42.292]    __FlashOp=0x00000000
[15:58:42.292]    __Result=0x00000000
[15:58:42.292]  </debugvars>
[15:58:42.293]  
[15:58:42.293]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:58:42.293]    <block atomic="false" info="">
[15:58:42.293]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:58:42.293]        // -> [isSWJ <= 0x00000001]
[15:58:42.293]      __var hasDormant = __protocol & 0x00020000;
[15:58:42.293]        // -> [hasDormant <= 0x00000000]
[15:58:42.293]      __var protType   = __protocol & 0x0000FFFF;
[15:58:42.293]        // -> [protType <= 0x00000002]
[15:58:42.293]    </block>
[15:58:42.293]    <control if="protType == 1" while="" timeout="0" info="">
[15:58:42.293]      // if-block "protType == 1"
[15:58:42.294]        // =>  FALSE
[15:58:42.294]      // skip if-block "protType == 1"
[15:58:42.294]    </control>
[15:58:42.294]    <control if="protType == 2" while="" timeout="0" info="">
[15:58:42.294]      // if-block "protType == 2"
[15:58:42.294]        // =>  TRUE
[15:58:42.294]      <control if="isSWJ" while="" timeout="0" info="">
[15:58:42.294]        // if-block "isSWJ"
[15:58:42.294]          // =>  TRUE
[15:58:42.294]        <control if="hasDormant" while="" timeout="0" info="">
[15:58:42.294]          // if-block "hasDormant"
[15:58:42.294]            // =>  FALSE
[15:58:42.294]          // skip if-block "hasDormant"
[15:58:42.294]        </control>
[15:58:42.294]        <control if="!hasDormant" while="" timeout="0" info="">
[15:58:42.294]          // if-block "!hasDormant"
[15:58:42.294]            // =>  TRUE
[15:58:42.294]          <block atomic="false" info="">
[15:58:42.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:58:42.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:58:42.294]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:58:42.294]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:58:42.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:58:42.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:58:42.300]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:58:42.302]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:58:42.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:58:42.303]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:58:42.304]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:58:42.304]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:58:42.304]          </block>
[15:58:42.304]          // end if-block "!hasDormant"
[15:58:42.304]        </control>
[15:58:42.304]        // end if-block "isSWJ"
[15:58:42.304]      </control>
[15:58:42.304]      <control if="!isSWJ" while="" timeout="0" info="">
[15:58:42.304]        // if-block "!isSWJ"
[15:58:42.304]          // =>  FALSE
[15:58:42.304]        // skip if-block "!isSWJ"
[15:58:42.304]      </control>
[15:58:42.304]      <block atomic="false" info="">
[15:58:42.304]        ReadDP(0x0);
[15:58:42.312]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:58:42.312]      </block>
[15:58:42.312]      // end if-block "protType == 2"
[15:58:42.312]    </control>
[15:58:42.313]  </sequence>
[15:58:42.313]  
[15:58:42.315]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:58:42.315]  
[15:58:42.315]  <debugvars>
[15:58:42.315]    // Pre-defined
[15:58:42.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:58:42.315]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:58:42.315]    __dp=0x00000000
[15:58:42.315]    __ap=0x00000000
[15:58:42.315]    __traceout=0x00000000      (Trace Disabled)
[15:58:42.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:58:42.315]    __FlashAddr=0x00000000
[15:58:42.315]    __FlashLen=0x00000000
[15:58:42.315]    __FlashArg=0x00000000
[15:58:42.315]    __FlashOp=0x00000000
[15:58:42.315]    __Result=0x00000000
[15:58:42.315]  </debugvars>
[15:58:42.315]  
[15:58:42.315]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:58:42.315]    <block atomic="false" info="">
[15:58:42.315]      __var SW_DP_ABORT       = 0x0;
[15:58:42.315]        // -> [SW_DP_ABORT <= 0x00000000]
[15:58:42.315]      __var DP_CTRL_STAT      = 0x4;
[15:58:42.315]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:58:42.315]      __var DP_SELECT         = 0x8;
[15:58:42.315]        // -> [DP_SELECT <= 0x00000008]
[15:58:42.315]      __var powered_down      = 0;
[15:58:42.315]        // -> [powered_down <= 0x00000000]
[15:58:42.315]      WriteDP(DP_SELECT, 0x00000000);
[15:58:42.323]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:58:42.323]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:58:42.327]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:58:42.327]        // -> [powered_down <= 0x00000001]
[15:58:42.327]    </block>
[15:58:42.327]    <control if="powered_down" while="" timeout="0" info="">
[15:58:42.327]      // if-block "powered_down"
[15:58:42.327]        // =>  TRUE
[15:58:42.327]      <block atomic="false" info="">
[15:58:42.327]        Message(0, "Debug/System power-up request sent");
[15:58:42.333]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:58:42.334]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:58:42.334]      </block>
[15:58:42.334]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:58:42.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:58:42.334]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:58:42.334]        // while-condition  =>  FALSE
[15:58:42.334]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:58:42.334]      </control>
[15:58:42.334]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:58:42.334]        // if-block "(__protocol & 0xFFFF) == 1"
[15:58:42.334]          // =>  FALSE
[15:58:42.334]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:58:42.334]      </control>
[15:58:42.334]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:58:42.334]        // if-block "(__protocol & 0xFFFF) == 2"
[15:58:42.334]          // =>  TRUE
[15:58:42.334]        <block atomic="false" info="">
[15:58:42.334]          Message(0, "executing SWD power up");
[15:58:42.341]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:58:42.343]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:58:42.343]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:58:42.343]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:58:42.343]        </block>
[15:58:42.343]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:58:42.343]      </control>
[15:58:42.343]      // end if-block "powered_down"
[15:58:42.343]    </control>
[15:58:42.343]    <block atomic="false" info="">
[15:58:42.343]      __var DEBUG_PORT_VAL    = 0;
[15:58:42.343]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:58:42.343]      __var ACCESS_POINT_VAL  = 0;
[15:58:42.343]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:58:42.343]      __ap = 1; 
[15:58:42.347]        // -> [__ap <= 0x00000001]
[15:58:42.347]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:58:42.348]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:58:42.348]      __ap = 4;
[15:58:42.348]        // -> [__ap <= 0x00000004]
[15:58:42.348]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:58:42.354]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:58:42.354]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:58:42.354]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:58:42.354]    </block>
[15:58:42.354]    <block atomic="false" info="">
[15:58:42.354]      __var nReset = 0x80;
[15:58:42.354]        // -> [nReset <= 0x00000080]
[15:58:42.354]      __var canReadPins = 0;
[15:58:42.354]        // -> [canReadPins <= 0x00000000]
[15:58:42.354]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:58:42.354]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:58:42.354]        // -> [canReadPins <= 0x00000001]
[15:58:42.354]    </block>
[15:58:42.354]    <control if="" while="1" timeout="200" info="">
[15:58:42.354]      // while "1"  (timeout="200")
[15:58:42.354]      // while-condition  =>  TRUE
[15:58:42.354]      // while "1"  (timeout="200")
[15:58:42.354]      // while-condition  =>  TRUE
[15:58:42.354]      // while "1"  (timeout="200")
[15:58:42.354]      // while-condition  =>  TRUE
[15:58:42.354]      // while "1"  (timeout="200")
[15:58:42.354]      // while-condition  =>  TRUE
[15:58:42.354]      // while "1"  (timeout="200")
[15:58:42.354]      // while-condition  =>  TRUE
[15:58:42.354]      // while "1"  (timeout="200")
[15:58:42.354]      // while-condition  =>  TRUE
[15:58:42.362]      // while "1"  (timeout="200")
[15:58:42.362]      // while-condition  =>  TRUE
[15:58:42.362]      // while "1"  (timeout="200")
[15:58:42.362]      // while  =>  TIMEOUT
[15:58:42.362]      // end while "1"
[15:58:42.362]    </control>
[15:58:42.362]    <control if="canReadPins" while="" timeout="0" info="">
[15:58:42.362]      // if-block "canReadPins"
[15:58:42.363]        // =>  TRUE
[15:58:42.363]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:58:42.363]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:58:42.367]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:58:42.367]        // while-condition  =>  FALSE
[15:58:42.367]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:58:42.367]      </control>
[15:58:42.367]      // end if-block "canReadPins"
[15:58:42.367]    </control>
[15:58:42.367]    <control if="!canReadPins" while="" timeout="0" info="">
[15:58:42.367]      // if-block "!canReadPins"
[15:58:42.367]        // =>  FALSE
[15:58:42.367]      // skip if-block "!canReadPins"
[15:58:42.367]    </control>
[15:58:42.367]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:58:42.367]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:58:42.367]        // =>  TRUE
[15:58:42.367]      <block atomic="false" info="">
[15:58:42.367]        WriteAP(0x00, 0x190008);
[15:58:42.367]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:58:42.367]        WriteAP(0xF0, 0x01);
[15:58:42.374]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:58:42.374]      </block>
[15:58:42.374]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:58:42.374]    </control>
[15:58:42.374]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:58:42.374]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:58:42.374]        // =>  FALSE
[15:58:42.374]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:58:42.374]    </control>
[15:58:42.374]    <block atomic="false" info="">
[15:58:42.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:58:42.383]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:58:42.383]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:58:42.383]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:58:42.385]      __ap = 0; //lets make sure we reset the access point selection
[15:58:42.385]        // -> [__ap <= 0x00000000]
[15:58:42.385]    </block>
[15:58:42.385]  </sequence>
[15:58:42.385]  
[15:58:42.414]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:58:42.414]  
[15:58:42.414]  <debugvars>
[15:58:42.414]    // Pre-defined
[15:58:42.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:58:42.414]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:58:42.414]    __dp=0x00000000
[15:58:42.414]    __ap=0x00000000
[15:58:42.414]    __traceout=0x00000000      (Trace Disabled)
[15:58:42.414]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:58:42.414]    __FlashAddr=0x00000000
[15:58:42.414]    __FlashLen=0x00000000
[15:58:42.414]    __FlashArg=0x00000000
[15:58:42.414]    __FlashOp=0x00000000
[15:58:42.414]    __Result=0x00000000
[15:58:42.414]  </debugvars>
[15:58:42.414]  
[15:58:42.414]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:58:42.414]    <block atomic="false" info="">
[15:58:42.414]      __var deviceID = 0;
[15:58:42.414]        // -> [deviceID <= 0x00000000]
[15:58:42.414]      __var version = 0;
[15:58:42.414]        // -> [version <= 0x00000000]
[15:58:42.414]      __var partNum = 0;
[15:58:42.414]        // -> [partNum <= 0x00000000]
[15:58:42.414]      __var manuf = 0;
[15:58:42.414]        // -> [manuf <= 0x00000000]
[15:58:42.414]      __var isMSPM0G1X0X_G3X0X = 0;
[15:58:42.414]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:58:42.414]      __var isProduction = 0;
[15:58:42.414]        // -> [isProduction <= 0x00000000]
[15:58:42.414]      __var continueId = 0;
[15:58:42.414]        // -> [continueId <= 0x00000000]
[15:58:42.414]      deviceID =   Read32(0x41C40004);
[15:58:42.429]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:58:42.429]        // -> [deviceID <= 0x2BB8802F]
[15:58:42.429]      version = deviceID >> 28;
[15:58:42.429]        // -> [version <= 0x00000002]
[15:58:42.429]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:58:42.429]        // -> [partNum <= 0x0000BB88]
[15:58:42.429]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:58:42.429]        // -> [manuf <= 0x00000017]
[15:58:42.429]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:58:42.429]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:58:42.429]      isProduction = (version > 0);
[15:58:42.429]        // -> [isProduction <= 0x00000001]
[15:58:42.429]    </block>
[15:58:42.429]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:58:42.429]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:58:42.429]        // =>  FALSE
[15:58:42.429]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:58:42.429]    </control>
[15:58:42.429]    <control if="continueId == 4" while="" timeout="0" info="">
[15:58:42.429]      // if-block "continueId == 4"
[15:58:42.429]        // =>  FALSE
[15:58:42.429]      // skip if-block "continueId == 4"
[15:58:42.429]    </control>
[15:58:42.429]    <control if="!isProduction" while="" timeout="0" info="">
[15:58:42.429]      // if-block "!isProduction"
[15:58:42.429]        // =>  FALSE
[15:58:42.429]      // skip if-block "!isProduction"
[15:58:42.429]    </control>
[15:58:42.432]  </sequence>
[15:58:42.432]  
[15:59:09.283]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:59:09.283]  
[15:59:09.293]  <debugvars>
[15:59:09.293]    // Pre-defined
[15:59:09.293]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:09.293]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:09.293]    __dp=0x00000000
[15:59:09.293]    __ap=0x00000000
[15:59:09.293]    __traceout=0x00000000      (Trace Disabled)
[15:59:09.293]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:09.293]    __FlashAddr=0x00000000
[15:59:09.293]    __FlashLen=0x00000000
[15:59:09.294]    __FlashArg=0x00000000
[15:59:09.294]    __FlashOp=0x00000000
[15:59:09.294]    __Result=0x00000000
[15:59:09.294]  </debugvars>
[15:59:09.294]  
[15:59:09.294]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:59:09.294]    <block atomic="false" info="">
[15:59:09.294]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:59:09.294]        // -> [isSWJ <= 0x00000001]
[15:59:09.294]      __var hasDormant = __protocol & 0x00020000;
[15:59:09.294]        // -> [hasDormant <= 0x00000000]
[15:59:09.294]      __var protType   = __protocol & 0x0000FFFF;
[15:59:09.294]        // -> [protType <= 0x00000002]
[15:59:09.294]    </block>
[15:59:09.294]    <control if="protType == 1" while="" timeout="0" info="">
[15:59:09.294]      // if-block "protType == 1"
[15:59:09.294]        // =>  FALSE
[15:59:09.294]      // skip if-block "protType == 1"
[15:59:09.294]    </control>
[15:59:09.294]    <control if="protType == 2" while="" timeout="0" info="">
[15:59:09.294]      // if-block "protType == 2"
[15:59:09.294]        // =>  TRUE
[15:59:09.294]      <control if="isSWJ" while="" timeout="0" info="">
[15:59:09.294]        // if-block "isSWJ"
[15:59:09.294]          // =>  TRUE
[15:59:09.294]        <control if="hasDormant" while="" timeout="0" info="">
[15:59:09.294]          // if-block "hasDormant"
[15:59:09.294]            // =>  FALSE
[15:59:09.294]          // skip if-block "hasDormant"
[15:59:09.294]        </control>
[15:59:09.294]        <control if="!hasDormant" while="" timeout="0" info="">
[15:59:09.294]          // if-block "!hasDormant"
[15:59:09.294]            // =>  TRUE
[15:59:09.294]          <block atomic="false" info="">
[15:59:09.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:59:09.300]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:09.300]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:59:09.303]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:59:09.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:59:09.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:09.308]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:59:09.308]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:59:09.308]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:59:09.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:09.321]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:59:09.323]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:59:09.323]          </block>
[15:59:09.323]          // end if-block "!hasDormant"
[15:59:09.323]        </control>
[15:59:09.326]        // end if-block "isSWJ"
[15:59:09.326]      </control>
[15:59:09.326]      <control if="!isSWJ" while="" timeout="0" info="">
[15:59:09.326]        // if-block "!isSWJ"
[15:59:09.326]          // =>  FALSE
[15:59:09.326]        // skip if-block "!isSWJ"
[15:59:09.326]      </control>
[15:59:09.326]      <block atomic="false" info="">
[15:59:09.326]        ReadDP(0x0);
[15:59:09.333]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:59:09.333]      </block>
[15:59:09.333]      // end if-block "protType == 2"
[15:59:09.334]    </control>
[15:59:09.334]  </sequence>
[15:59:09.334]  
[15:59:09.341]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:59:09.341]  
[15:59:09.341]  <debugvars>
[15:59:09.341]    // Pre-defined
[15:59:09.342]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:09.342]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:09.342]    __dp=0x00000000
[15:59:09.342]    __ap=0x00000000
[15:59:09.342]    __traceout=0x00000000      (Trace Disabled)
[15:59:09.342]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:09.342]    __FlashAddr=0x00000000
[15:59:09.342]    __FlashLen=0x00000000
[15:59:09.342]    __FlashArg=0x00000000
[15:59:09.342]    __FlashOp=0x00000000
[15:59:09.343]    __Result=0x00000000
[15:59:09.343]  </debugvars>
[15:59:09.343]  
[15:59:09.343]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:59:09.343]    <block atomic="false" info="">
[15:59:09.343]      __var SW_DP_ABORT       = 0x0;
[15:59:09.343]        // -> [SW_DP_ABORT <= 0x00000000]
[15:59:09.343]      __var DP_CTRL_STAT      = 0x4;
[15:59:09.343]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:59:09.343]      __var DP_SELECT         = 0x8;
[15:59:09.343]        // -> [DP_SELECT <= 0x00000008]
[15:59:09.343]      __var powered_down      = 0;
[15:59:09.343]        // -> [powered_down <= 0x00000000]
[15:59:09.343]      WriteDP(DP_SELECT, 0x00000000);
[15:59:09.347]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:59:09.347]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:59:09.352]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:59:09.352]        // -> [powered_down <= 0x00000001]
[15:59:09.353]    </block>
[15:59:09.353]    <control if="powered_down" while="" timeout="0" info="">
[15:59:09.353]      // if-block "powered_down"
[15:59:09.353]        // =>  TRUE
[15:59:09.353]      <block atomic="false" info="">
[15:59:09.353]        Message(0, "Debug/System power-up request sent");
[15:59:09.353]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:59:09.355]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:59:09.355]      </block>
[15:59:09.355]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:59:09.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:59:09.356]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:59:09.356]        // while-condition  =>  FALSE
[15:59:09.358]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:59:09.358]      </control>
[15:59:09.358]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:59:09.358]        // if-block "(__protocol & 0xFFFF) == 1"
[15:59:09.358]          // =>  FALSE
[15:59:09.358]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:59:09.358]      </control>
[15:59:09.358]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:59:09.358]        // if-block "(__protocol & 0xFFFF) == 2"
[15:59:09.358]          // =>  TRUE
[15:59:09.359]        <block atomic="false" info="">
[15:59:09.359]          Message(0, "executing SWD power up");
[15:59:09.361]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:59:09.363]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:59:09.363]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:59:09.363]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:59:09.363]        </block>
[15:59:09.363]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:59:09.363]      </control>
[15:59:09.363]      // end if-block "powered_down"
[15:59:09.363]    </control>
[15:59:09.363]    <block atomic="false" info="">
[15:59:09.363]      __var DEBUG_PORT_VAL    = 0;
[15:59:09.363]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:59:09.363]      __var ACCESS_POINT_VAL  = 0;
[15:59:09.363]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:59:09.363]      __ap = 1; 
[15:59:09.363]        // -> [__ap <= 0x00000001]
[15:59:09.363]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:59:09.374]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:59:09.374]      __ap = 4;
[15:59:09.374]        // -> [__ap <= 0x00000004]
[15:59:09.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:59:09.386]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:59:09.386]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:59:09.386]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:59:09.388]    </block>
[15:59:09.388]    <block atomic="false" info="">
[15:59:09.388]      __var nReset = 0x80;
[15:59:09.388]        // -> [nReset <= 0x00000080]
[15:59:09.388]      __var canReadPins = 0;
[15:59:09.388]        // -> [canReadPins <= 0x00000000]
[15:59:09.388]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:59:09.393]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:59:09.393]        // -> [canReadPins <= 0x00000001]
[15:59:09.394]    </block>
[15:59:09.394]    <control if="" while="1" timeout="200" info="">
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.394]      // while "1"  (timeout="200")
[15:59:09.394]      // while-condition  =>  TRUE
[15:59:09.402]      // while "1"  (timeout="200")
[15:59:09.402]      // while-condition  =>  TRUE
[15:59:09.402]      // while "1"  (timeout="200")
[15:59:09.402]      // while-condition  =>  TRUE
[15:59:09.402]      // while "1"  (timeout="200")
[15:59:09.402]      // while-condition  =>  TRUE
[15:59:09.402]      // while "1"  (timeout="200")
[15:59:09.402]      // while-condition  =>  TRUE
[15:59:09.402]      // while "1"  (timeout="200")
[15:59:09.402]      // while-condition  =>  TRUE
[15:59:09.403]      // while "1"  (timeout="200")
[15:59:09.403]      // while-condition  =>  TRUE
[15:59:09.403]      // while "1"  (timeout="200")
[15:59:09.403]      // while-condition  =>  TRUE
[15:59:09.403]      // while "1"  (timeout="200")
[15:59:09.403]      // while-condition  =>  TRUE
[15:59:09.403]      // while "1"  (timeout="200")
[15:59:09.403]      // while-condition  =>  TRUE
[15:59:09.403]      // while "1"  (timeout="200")
[15:59:09.403]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.404]      // while-condition  =>  TRUE
[15:59:09.404]      // while "1"  (timeout="200")
[15:59:09.412]      // while-condition  =>  TRUE
[15:59:09.412]      // while "1"  (timeout="200")
[15:59:09.412]      // while  =>  TIMEOUT
[15:59:09.412]      // end while "1"
[15:59:09.412]    </control>
[15:59:09.412]    <control if="canReadPins" while="" timeout="0" info="">
[15:59:09.412]      // if-block "canReadPins"
[15:59:09.412]        // =>  TRUE
[15:59:09.412]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:59:09.412]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:59:09.416]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:59:09.416]        // while-condition  =>  FALSE
[15:59:09.416]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:59:09.416]      </control>
[15:59:09.417]      // end if-block "canReadPins"
[15:59:09.417]    </control>
[15:59:09.417]    <control if="!canReadPins" while="" timeout="0" info="">
[15:59:09.417]      // if-block "!canReadPins"
[15:59:09.417]        // =>  FALSE
[15:59:09.417]      // skip if-block "!canReadPins"
[15:59:09.417]    </control>
[15:59:09.417]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:59:09.417]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:59:09.417]        // =>  TRUE
[15:59:09.417]      <block atomic="false" info="">
[15:59:09.417]        WriteAP(0x00, 0x190008);
[15:59:09.422]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:59:09.422]        WriteAP(0xF0, 0x01);
[15:59:09.424]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:59:09.424]      </block>
[15:59:09.424]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:59:09.426]    </control>
[15:59:09.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:59:09.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:59:09.426]        // =>  FALSE
[15:59:09.426]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:59:09.426]    </control>
[15:59:09.426]    <block atomic="false" info="">
[15:59:09.426]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:59:09.426]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:59:09.426]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:59:09.426]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:59:09.431]      __ap = 0; //lets make sure we reset the access point selection
[15:59:09.432]        // -> [__ap <= 0x00000000]
[15:59:09.432]    </block>
[15:59:09.432]  </sequence>
[15:59:09.432]  
[15:59:09.457]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:59:09.457]  
[15:59:09.457]  <debugvars>
[15:59:09.457]    // Pre-defined
[15:59:09.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:09.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:09.457]    __dp=0x00000000
[15:59:09.457]    __ap=0x00000000
[15:59:09.457]    __traceout=0x00000000      (Trace Disabled)
[15:59:09.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:09.459]    __FlashAddr=0x00000000
[15:59:09.459]    __FlashLen=0x00000000
[15:59:09.459]    __FlashArg=0x00000000
[15:59:09.459]    __FlashOp=0x00000000
[15:59:09.459]    __Result=0x00000000
[15:59:09.459]  </debugvars>
[15:59:09.459]  
[15:59:09.459]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:59:09.459]    <block atomic="false" info="">
[15:59:09.459]      __var deviceID = 0;
[15:59:09.459]        // -> [deviceID <= 0x00000000]
[15:59:09.459]      __var version = 0;
[15:59:09.459]        // -> [version <= 0x00000000]
[15:59:09.459]      __var partNum = 0;
[15:59:09.459]        // -> [partNum <= 0x00000000]
[15:59:09.459]      __var manuf = 0;
[15:59:09.459]        // -> [manuf <= 0x00000000]
[15:59:09.459]      __var isMSPM0G1X0X_G3X0X = 0;
[15:59:09.459]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:59:09.459]      __var isProduction = 0;
[15:59:09.459]        // -> [isProduction <= 0x00000000]
[15:59:09.459]      __var continueId = 0;
[15:59:09.459]        // -> [continueId <= 0x00000000]
[15:59:09.459]      deviceID =   Read32(0x41C40004);
[15:59:09.466]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:59:09.466]        // -> [deviceID <= 0x2BB8802F]
[15:59:09.466]      version = deviceID >> 28;
[15:59:09.466]        // -> [version <= 0x00000002]
[15:59:09.466]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:59:09.466]        // -> [partNum <= 0x0000BB88]
[15:59:09.466]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:59:09.466]        // -> [manuf <= 0x00000017]
[15:59:09.466]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:59:09.466]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:59:09.466]      isProduction = (version > 0);
[15:59:09.466]        // -> [isProduction <= 0x00000001]
[15:59:09.468]    </block>
[15:59:09.468]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:59:09.468]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:59:09.468]        // =>  FALSE
[15:59:09.468]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:59:09.468]    </control>
[15:59:09.468]    <control if="continueId == 4" while="" timeout="0" info="">
[15:59:09.468]      // if-block "continueId == 4"
[15:59:09.468]        // =>  FALSE
[15:59:09.468]      // skip if-block "continueId == 4"
[15:59:09.468]    </control>
[15:59:09.469]    <control if="!isProduction" while="" timeout="0" info="">
[15:59:09.469]      // if-block "!isProduction"
[15:59:09.469]        // =>  FALSE
[15:59:09.469]      // skip if-block "!isProduction"
[15:59:09.469]    </control>
[15:59:09.469]  </sequence>
[15:59:09.469]  
[15:59:58.434]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:59:58.434]  
[15:59:58.434]  <debugvars>
[15:59:58.434]    // Pre-defined
[15:59:58.434]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:58.442]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:58.442]    __dp=0x00000000
[15:59:58.443]    __ap=0x00000000
[15:59:58.443]    __traceout=0x00000000      (Trace Disabled)
[15:59:58.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:58.443]    __FlashAddr=0x00000000
[15:59:58.443]    __FlashLen=0x00000000
[15:59:58.443]    __FlashArg=0x00000000
[15:59:58.443]    __FlashOp=0x00000000
[15:59:58.443]    __Result=0x00000000
[15:59:58.443]  </debugvars>
[15:59:58.444]  
[15:59:58.444]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:59:58.444]    <block atomic="false" info="">
[15:59:58.444]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:59:58.444]        // -> [isSWJ <= 0x00000001]
[15:59:58.444]      __var hasDormant = __protocol & 0x00020000;
[15:59:58.444]        // -> [hasDormant <= 0x00000000]
[15:59:58.444]      __var protType   = __protocol & 0x0000FFFF;
[15:59:58.444]        // -> [protType <= 0x00000002]
[15:59:58.444]    </block>
[15:59:58.444]    <control if="protType == 1" while="" timeout="0" info="">
[15:59:58.444]      // if-block "protType == 1"
[15:59:58.444]        // =>  FALSE
[15:59:58.444]      // skip if-block "protType == 1"
[15:59:58.444]    </control>
[15:59:58.444]    <control if="protType == 2" while="" timeout="0" info="">
[15:59:58.444]      // if-block "protType == 2"
[15:59:58.444]        // =>  TRUE
[15:59:58.444]      <control if="isSWJ" while="" timeout="0" info="">
[15:59:58.444]        // if-block "isSWJ"
[15:59:58.444]          // =>  TRUE
[15:59:58.444]        <control if="hasDormant" while="" timeout="0" info="">
[15:59:58.444]          // if-block "hasDormant"
[15:59:58.444]            // =>  FALSE
[15:59:58.444]          // skip if-block "hasDormant"
[15:59:58.444]        </control>
[15:59:58.444]        <control if="!hasDormant" while="" timeout="0" info="">
[15:59:58.444]          // if-block "!hasDormant"
[15:59:58.444]            // =>  TRUE
[15:59:58.444]          <block atomic="false" info="">
[15:59:58.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:59:58.444]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:58.444]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:59:58.444]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:59:58.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:59:58.444]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:58.444]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:59:58.453]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:59:58.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:59:58.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:58.454]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:59:58.454]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:59:58.454]          </block>
[15:59:58.454]          // end if-block "!hasDormant"
[15:59:58.454]        </control>
[15:59:58.454]        // end if-block "isSWJ"
[15:59:58.454]      </control>
[15:59:58.454]      <control if="!isSWJ" while="" timeout="0" info="">
[15:59:58.454]        // if-block "!isSWJ"
[15:59:58.454]          // =>  FALSE
[15:59:58.454]        // skip if-block "!isSWJ"
[15:59:58.454]      </control>
[15:59:58.454]      <block atomic="false" info="">
[15:59:58.454]        ReadDP(0x0);
[15:59:58.454]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:59:58.454]      </block>
[15:59:58.454]      // end if-block "protType == 2"
[15:59:58.454]    </control>
[15:59:58.454]  </sequence>
[15:59:58.454]  
[15:59:58.464]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:59:58.464]  
[15:59:58.464]  <debugvars>
[15:59:58.464]    // Pre-defined
[15:59:58.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:58.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:58.464]    __dp=0x00000000
[15:59:58.464]    __ap=0x00000000
[15:59:58.464]    __traceout=0x00000000      (Trace Disabled)
[15:59:58.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:58.464]    __FlashAddr=0x00000000
[15:59:58.464]    __FlashLen=0x00000000
[15:59:58.464]    __FlashArg=0x00000000
[15:59:58.464]    __FlashOp=0x00000000
[15:59:58.464]    __Result=0x00000000
[15:59:58.464]  </debugvars>
[15:59:58.464]  
[15:59:58.464]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:59:58.464]    <block atomic="false" info="">
[15:59:58.464]      __var SW_DP_ABORT       = 0x0;
[15:59:58.464]        // -> [SW_DP_ABORT <= 0x00000000]
[15:59:58.464]      __var DP_CTRL_STAT      = 0x4;
[15:59:58.464]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:59:58.464]      __var DP_SELECT         = 0x8;
[15:59:58.464]        // -> [DP_SELECT <= 0x00000008]
[15:59:58.464]      __var powered_down      = 0;
[15:59:58.464]        // -> [powered_down <= 0x00000000]
[15:59:58.464]      WriteDP(DP_SELECT, 0x00000000);
[15:59:58.464]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:59:58.470]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:59:58.476]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:59:58.476]        // -> [powered_down <= 0x00000001]
[15:59:58.476]    </block>
[15:59:58.476]    <control if="powered_down" while="" timeout="0" info="">
[15:59:58.476]      // if-block "powered_down"
[15:59:58.476]        // =>  TRUE
[15:59:58.476]      <block atomic="false" info="">
[15:59:58.476]        Message(0, "Debug/System power-up request sent");
[15:59:58.476]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:59:58.485]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:59:58.485]      </block>
[15:59:58.485]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:59:58.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:59:58.494]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:59:58.494]        // while-condition  =>  FALSE
[15:59:58.494]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:59:58.494]      </control>
[15:59:58.495]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:59:58.495]        // if-block "(__protocol & 0xFFFF) == 1"
[15:59:58.495]          // =>  FALSE
[15:59:58.495]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:59:58.495]      </control>
[15:59:58.495]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:59:58.495]        // if-block "(__protocol & 0xFFFF) == 2"
[15:59:58.495]          // =>  TRUE
[15:59:58.495]        <block atomic="false" info="">
[15:59:58.495]          Message(0, "executing SWD power up");
[15:59:58.495]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:59:58.495]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:59:58.495]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:59:58.502]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:59:58.502]        </block>
[15:59:58.502]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:59:58.502]      </control>
[15:59:58.502]      // end if-block "powered_down"
[15:59:58.502]    </control>
[15:59:58.502]    <block atomic="false" info="">
[15:59:58.502]      __var DEBUG_PORT_VAL    = 0;
[15:59:58.502]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:59:58.503]      __var ACCESS_POINT_VAL  = 0;
[15:59:58.503]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:59:58.503]      __ap = 1; 
[15:59:58.503]        // -> [__ap <= 0x00000001]
[15:59:58.503]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:59:58.505]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:59:58.505]      __ap = 4;
[15:59:58.505]        // -> [__ap <= 0x00000004]
[15:59:58.505]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:59:58.512]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:59:58.512]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:59:58.513]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:59:58.514]    </block>
[15:59:58.514]    <block atomic="false" info="">
[15:59:58.514]      __var nReset = 0x80;
[15:59:58.515]        // -> [nReset <= 0x00000080]
[15:59:58.515]      __var canReadPins = 0;
[15:59:58.515]        // -> [canReadPins <= 0x00000000]
[15:59:58.515]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:59:58.515]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:59:58.515]        // -> [canReadPins <= 0x00000001]
[15:59:58.515]    </block>
[15:59:58.515]    <control if="" while="1" timeout="200" info="">
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.515]      // while-condition  =>  TRUE
[15:59:58.515]      // while "1"  (timeout="200")
[15:59:58.522]      // while-condition  =>  TRUE
[15:59:58.522]      // while "1"  (timeout="200")
[15:59:58.522]      // while  =>  TIMEOUT
[15:59:58.522]      // end while "1"
[15:59:58.522]    </control>
[15:59:58.522]    <control if="canReadPins" while="" timeout="0" info="">
[15:59:58.522]      // if-block "canReadPins"
[15:59:58.522]        // =>  TRUE
[15:59:58.522]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:59:58.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:59:58.523]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:59:58.523]        // while-condition  =>  FALSE
[15:59:58.523]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:59:58.523]      </control>
[15:59:58.523]      // end if-block "canReadPins"
[15:59:58.523]    </control>
[15:59:58.523]    <control if="!canReadPins" while="" timeout="0" info="">
[15:59:58.523]      // if-block "!canReadPins"
[15:59:58.523]        // =>  FALSE
[15:59:58.523]      // skip if-block "!canReadPins"
[15:59:58.523]    </control>
[15:59:58.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:59:58.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:59:58.525]        // =>  TRUE
[15:59:58.525]      <block atomic="false" info="">
[15:59:58.525]        WriteAP(0x00, 0x190008);
[15:59:58.525]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:59:58.525]        WriteAP(0xF0, 0x01);
[15:59:58.535]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:59:58.535]      </block>
[15:59:58.535]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:59:58.535]    </control>
[15:59:58.535]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:59:58.535]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:59:58.535]        // =>  FALSE
[15:59:58.535]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:59:58.535]    </control>
[15:59:58.535]    <block atomic="false" info="">
[15:59:58.535]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:59:58.542]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:59:58.542]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:59:58.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:59:58.543]      __ap = 0; //lets make sure we reset the access point selection
[15:59:58.543]        // -> [__ap <= 0x00000000]
[15:59:58.543]    </block>
[15:59:58.543]  </sequence>
[15:59:58.543]  
[15:59:58.572]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:59:58.572]  
[15:59:58.572]  <debugvars>
[15:59:58.572]    // Pre-defined
[15:59:58.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:58.572]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:58.573]    __dp=0x00000000
[15:59:58.573]    __ap=0x00000000
[15:59:58.573]    __traceout=0x00000000      (Trace Disabled)
[15:59:58.573]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:58.573]    __FlashAddr=0x00000000
[15:59:58.573]    __FlashLen=0x00000000
[15:59:58.573]    __FlashArg=0x00000000
[15:59:58.573]    __FlashOp=0x00000000
[15:59:58.573]    __Result=0x00000000
[15:59:58.573]  </debugvars>
[15:59:58.573]  
[15:59:58.573]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:59:58.573]    <block atomic="false" info="">
[15:59:58.574]      __var deviceID = 0;
[15:59:58.574]        // -> [deviceID <= 0x00000000]
[15:59:58.574]      __var version = 0;
[15:59:58.574]        // -> [version <= 0x00000000]
[15:59:58.574]      __var partNum = 0;
[15:59:58.574]        // -> [partNum <= 0x00000000]
[15:59:58.574]      __var manuf = 0;
[15:59:58.574]        // -> [manuf <= 0x00000000]
[15:59:58.574]      __var isMSPM0G1X0X_G3X0X = 0;
[15:59:58.574]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:59:58.574]      __var isProduction = 0;
[15:59:58.574]        // -> [isProduction <= 0x00000000]
[15:59:58.574]      __var continueId = 0;
[15:59:58.574]        // -> [continueId <= 0x00000000]
[15:59:58.574]      deviceID =   Read32(0x41C40004);
[15:59:58.576]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:59:58.576]        // -> [deviceID <= 0x2BB8802F]
[15:59:58.576]      version = deviceID >> 28;
[15:59:58.576]        // -> [version <= 0x00000002]
[15:59:58.576]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:59:58.576]        // -> [partNum <= 0x0000BB88]
[15:59:58.576]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:59:58.576]        // -> [manuf <= 0x00000017]
[15:59:58.576]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:59:58.576]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:59:58.576]      isProduction = (version > 0);
[15:59:58.576]        // -> [isProduction <= 0x00000001]
[15:59:58.576]    </block>
[15:59:58.576]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:59:58.576]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:59:58.576]        // =>  FALSE
[15:59:58.582]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:59:58.582]    </control>
[15:59:58.582]    <control if="continueId == 4" while="" timeout="0" info="">
[15:59:58.582]      // if-block "continueId == 4"
[15:59:58.582]        // =>  FALSE
[15:59:58.582]      // skip if-block "continueId == 4"
[15:59:58.582]    </control>
[15:59:58.582]    <control if="!isProduction" while="" timeout="0" info="">
[15:59:58.582]      // if-block "!isProduction"
[15:59:58.583]        // =>  FALSE
[15:59:58.583]      // skip if-block "!isProduction"
[15:59:58.583]    </control>
[15:59:58.583]  </sequence>
[15:59:58.583]  
[16:16:01.839]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:16:01.839]  
[16:16:01.847]  <debugvars>
[16:16:01.847]    // Pre-defined
[16:16:01.847]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:01.847]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:01.847]    __dp=0x00000000
[16:16:01.847]    __ap=0x00000000
[16:16:01.847]    __traceout=0x00000000      (Trace Disabled)
[16:16:01.847]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:01.847]    __FlashAddr=0x00000000
[16:16:01.847]    __FlashLen=0x00000000
[16:16:01.847]    __FlashArg=0x00000000
[16:16:01.847]    __FlashOp=0x00000000
[16:16:01.847]    __Result=0x00000000
[16:16:01.847]  </debugvars>
[16:16:01.847]  
[16:16:01.847]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:16:01.847]    <block atomic="false" info="">
[16:16:01.847]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:16:01.847]        // -> [isSWJ <= 0x00000001]
[16:16:01.849]      __var hasDormant = __protocol & 0x00020000;
[16:16:01.849]        // -> [hasDormant <= 0x00000000]
[16:16:01.849]      __var protType   = __protocol & 0x0000FFFF;
[16:16:01.849]        // -> [protType <= 0x00000002]
[16:16:01.849]    </block>
[16:16:01.849]    <control if="protType == 1" while="" timeout="0" info="">
[16:16:01.849]      // if-block "protType == 1"
[16:16:01.849]        // =>  FALSE
[16:16:01.849]      // skip if-block "protType == 1"
[16:16:01.850]    </control>
[16:16:01.850]    <control if="protType == 2" while="" timeout="0" info="">
[16:16:01.850]      // if-block "protType == 2"
[16:16:01.850]        // =>  TRUE
[16:16:01.850]      <control if="isSWJ" while="" timeout="0" info="">
[16:16:01.850]        // if-block "isSWJ"
[16:16:01.850]          // =>  TRUE
[16:16:01.850]        <control if="hasDormant" while="" timeout="0" info="">
[16:16:01.850]          // if-block "hasDormant"
[16:16:01.850]            // =>  FALSE
[16:16:01.850]          // skip if-block "hasDormant"
[16:16:01.850]        </control>
[16:16:01.850]        <control if="!hasDormant" while="" timeout="0" info="">
[16:16:01.850]          // if-block "!hasDormant"
[16:16:01.850]            // =>  TRUE
[16:16:01.850]          <block atomic="false" info="">
[16:16:01.850]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:16:01.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:01.852]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:16:01.862]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:16:01.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:16:01.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:01.862]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:16:01.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:16:01.872]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:16:01.874]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:01.874]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:16:01.876]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:16:01.876]          </block>
[16:16:01.876]          // end if-block "!hasDormant"
[16:16:01.876]        </control>
[16:16:01.876]        // end if-block "isSWJ"
[16:16:01.876]      </control>
[16:16:01.876]      <control if="!isSWJ" while="" timeout="0" info="">
[16:16:01.876]        // if-block "!isSWJ"
[16:16:01.876]          // =>  FALSE
[16:16:01.876]        // skip if-block "!isSWJ"
[16:16:01.876]      </control>
[16:16:01.876]      <block atomic="false" info="">
[16:16:01.876]        ReadDP(0x0);
[16:16:01.881]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:16:01.881]      </block>
[16:16:01.881]      // end if-block "protType == 2"
[16:16:01.881]    </control>
[16:16:01.881]  </sequence>
[16:16:01.881]  
[16:16:01.885]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:16:01.885]  
[16:16:01.885]  <debugvars>
[16:16:01.885]    // Pre-defined
[16:16:01.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:01.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:01.885]    __dp=0x00000000
[16:16:01.885]    __ap=0x00000000
[16:16:01.885]    __traceout=0x00000000      (Trace Disabled)
[16:16:01.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:01.885]    __FlashAddr=0x00000000
[16:16:01.885]    __FlashLen=0x00000000
[16:16:01.885]    __FlashArg=0x00000000
[16:16:01.885]    __FlashOp=0x00000000
[16:16:01.885]    __Result=0x00000000
[16:16:01.885]  </debugvars>
[16:16:01.885]  
[16:16:01.885]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:16:01.885]    <block atomic="false" info="">
[16:16:01.885]      __var SW_DP_ABORT       = 0x0;
[16:16:01.885]        // -> [SW_DP_ABORT <= 0x00000000]
[16:16:01.885]      __var DP_CTRL_STAT      = 0x4;
[16:16:01.887]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:16:01.887]      __var DP_SELECT         = 0x8;
[16:16:01.887]        // -> [DP_SELECT <= 0x00000008]
[16:16:01.887]      __var powered_down      = 0;
[16:16:01.887]        // -> [powered_down <= 0x00000000]
[16:16:01.887]      WriteDP(DP_SELECT, 0x00000000);
[16:16:01.889]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:16:01.889]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:16:01.891]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:16:01.891]        // -> [powered_down <= 0x00000001]
[16:16:01.891]    </block>
[16:16:01.891]    <control if="powered_down" while="" timeout="0" info="">
[16:16:01.891]      // if-block "powered_down"
[16:16:01.891]        // =>  TRUE
[16:16:01.891]      <block atomic="false" info="">
[16:16:01.891]        Message(0, "Debug/System power-up request sent");
[16:16:01.891]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:16:01.891]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:16:01.891]      </block>
[16:16:01.891]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:16:01.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:01.899]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:16:01.899]        // while-condition  =>  FALSE
[16:16:01.899]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:16:01.899]      </control>
[16:16:01.899]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:16:01.900]        // if-block "(__protocol & 0xFFFF) == 1"
[16:16:01.900]          // =>  FALSE
[16:16:01.900]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:16:01.900]      </control>
[16:16:01.900]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:16:01.900]        // if-block "(__protocol & 0xFFFF) == 2"
[16:16:01.900]          // =>  TRUE
[16:16:01.900]        <block atomic="false" info="">
[16:16:01.901]          Message(0, "executing SWD power up");
[16:16:01.901]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:16:01.923]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:16:01.923]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:16:01.934]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:16:01.934]        </block>
[16:16:01.934]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:16:01.934]      </control>
[16:16:01.934]      // end if-block "powered_down"
[16:16:01.934]    </control>
[16:16:01.936]    <block atomic="false" info="">
[16:16:01.936]      __var DEBUG_PORT_VAL    = 0;
[16:16:01.936]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:16:01.936]      __var ACCESS_POINT_VAL  = 0;
[16:16:01.936]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:16:01.936]      __ap = 1; 
[16:16:01.936]        // -> [__ap <= 0x00000001]
[16:16:01.936]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:16:01.957]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:16:01.957]      __ap = 4;
[16:16:01.957]        // -> [__ap <= 0x00000004]
[16:16:01.957]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:16:01.960]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:16:01.960]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:16:01.960]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:16:01.960]    </block>
[16:16:01.960]    <block atomic="false" info="">
[16:16:01.960]      __var nReset = 0x80;
[16:16:01.960]        // -> [nReset <= 0x00000080]
[16:16:01.960]      __var canReadPins = 0;
[16:16:01.960]        // -> [canReadPins <= 0x00000000]
[16:16:01.960]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:16:01.960]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:16:01.960]        // -> [canReadPins <= 0x00000001]
[16:16:01.960]    </block>
[16:16:01.960]    <control if="" while="1" timeout="200" info="">
[16:16:01.960]      // while "1"  (timeout="200")
[16:16:01.960]      // while-condition  =>  TRUE
[16:16:01.960]      // while "1"  (timeout="200")
[16:16:01.960]      // while-condition  =>  TRUE
[16:16:01.960]      // while "1"  (timeout="200")
[16:16:01.960]      // while-condition  =>  TRUE
[16:16:01.960]      // while "1"  (timeout="200")
[16:16:01.969]      // while-condition  =>  TRUE
[16:16:01.969]      // while "1"  (timeout="200")
[16:16:01.969]      // while-condition  =>  TRUE
[16:16:01.970]      // while "1"  (timeout="200")
[16:16:01.970]      // while-condition  =>  TRUE
[16:16:01.970]      // while "1"  (timeout="200")
[16:16:01.970]      // while-condition  =>  TRUE
[16:16:01.970]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.971]      // while-condition  =>  TRUE
[16:16:01.971]      // while "1"  (timeout="200")
[16:16:01.979]      // while-condition  =>  TRUE
[16:16:01.979]      // while "1"  (timeout="200")
[16:16:01.979]      // while  =>  TIMEOUT
[16:16:01.979]      // end while "1"
[16:16:01.979]    </control>
[16:16:01.980]    <control if="canReadPins" while="" timeout="0" info="">
[16:16:01.980]      // if-block "canReadPins"
[16:16:01.980]        // =>  TRUE
[16:16:01.980]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:16:01.980]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:16:01.980]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:16:01.980]        // while-condition  =>  FALSE
[16:16:01.980]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:16:01.980]      </control>
[16:16:01.980]      // end if-block "canReadPins"
[16:16:01.980]    </control>
[16:16:01.980]    <control if="!canReadPins" while="" timeout="0" info="">
[16:16:01.985]      // if-block "!canReadPins"
[16:16:01.985]        // =>  FALSE
[16:16:01.985]      // skip if-block "!canReadPins"
[16:16:01.985]    </control>
[16:16:01.985]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:16:01.985]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:16:01.985]        // =>  TRUE
[16:16:01.985]      <block atomic="false" info="">
[16:16:01.985]        WriteAP(0x00, 0x190008);
[16:16:01.985]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:16:01.985]        WriteAP(0xF0, 0x01);
[16:16:01.991]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:16:01.991]      </block>
[16:16:01.991]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:16:01.991]    </control>
[16:16:01.991]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:16:01.991]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:16:01.991]        // =>  FALSE
[16:16:01.991]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:16:01.991]    </control>
[16:16:01.991]    <block atomic="false" info="">
[16:16:01.991]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:16:02.010]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:16:02.011]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:16:02.011]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:16:02.011]      __ap = 0; //lets make sure we reset the access point selection
[16:16:02.011]        // -> [__ap <= 0x00000000]
[16:16:02.011]    </block>
[16:16:02.011]  </sequence>
[16:16:02.011]  
[16:16:02.083]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:16:02.083]  
[16:16:02.085]  <debugvars>
[16:16:02.085]    // Pre-defined
[16:16:02.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:02.085]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:02.085]    __dp=0x00000000
[16:16:02.085]    __ap=0x00000000
[16:16:02.086]    __traceout=0x00000000      (Trace Disabled)
[16:16:02.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:02.086]    __FlashAddr=0x00000000
[16:16:02.086]    __FlashLen=0x00000000
[16:16:02.086]    __FlashArg=0x00000000
[16:16:02.086]    __FlashOp=0x00000000
[16:16:02.086]    __Result=0x00000000
[16:16:02.087]  </debugvars>
[16:16:02.087]  
[16:16:02.087]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:16:02.087]    <block atomic="false" info="">
[16:16:02.087]      __var deviceID = 0;
[16:16:02.087]        // -> [deviceID <= 0x00000000]
[16:16:02.087]      __var version = 0;
[16:16:02.087]        // -> [version <= 0x00000000]
[16:16:02.087]      __var partNum = 0;
[16:16:02.087]        // -> [partNum <= 0x00000000]
[16:16:02.087]      __var manuf = 0;
[16:16:02.087]        // -> [manuf <= 0x00000000]
[16:16:02.087]      __var isMSPM0G1X0X_G3X0X = 0;
[16:16:02.087]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:16:02.087]      __var isProduction = 0;
[16:16:02.089]        // -> [isProduction <= 0x00000000]
[16:16:02.089]      __var continueId = 0;
[16:16:02.089]        // -> [continueId <= 0x00000000]
[16:16:02.089]      deviceID =   Read32(0x41C40004);
[16:16:02.100]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:16:02.100]        // -> [deviceID <= 0x2BB8802F]
[16:16:02.100]      version = deviceID >> 28;
[16:16:02.100]        // -> [version <= 0x00000002]
[16:16:02.100]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:16:02.100]        // -> [partNum <= 0x0000BB88]
[16:16:02.100]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:16:02.102]        // -> [manuf <= 0x00000017]
[16:16:02.102]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:16:02.102]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:16:02.102]      isProduction = (version > 0);
[16:16:02.102]        // -> [isProduction <= 0x00000001]
[16:16:02.102]    </block>
[16:16:02.102]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:16:02.102]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:16:02.102]        // =>  FALSE
[16:16:02.102]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:16:02.103]    </control>
[16:16:02.103]    <control if="continueId == 4" while="" timeout="0" info="">
[16:16:02.103]      // if-block "continueId == 4"
[16:16:02.103]        // =>  FALSE
[16:16:02.103]      // skip if-block "continueId == 4"
[16:16:02.103]    </control>
[16:16:02.103]    <control if="!isProduction" while="" timeout="0" info="">
[16:16:02.104]      // if-block "!isProduction"
[16:16:02.104]        // =>  FALSE
[16:16:02.104]      // skip if-block "!isProduction"
[16:16:02.104]    </control>
[16:16:02.104]  </sequence>
[16:16:02.104]  
[16:18:13.958]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:18:13.958]  
[16:18:13.972]  <debugvars>
[16:18:13.972]    // Pre-defined
[16:18:13.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:13.972]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:13.972]    __dp=0x00000000
[16:18:13.972]    __ap=0x00000000
[16:18:13.972]    __traceout=0x00000000      (Trace Disabled)
[16:18:13.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:13.973]    __FlashAddr=0x00000000
[16:18:13.973]    __FlashLen=0x00000000
[16:18:13.973]    __FlashArg=0x00000000
[16:18:13.973]    __FlashOp=0x00000000
[16:18:13.973]    __Result=0x00000000
[16:18:13.973]  </debugvars>
[16:18:13.973]  
[16:18:13.973]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:18:13.973]    <block atomic="false" info="">
[16:18:13.973]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:18:13.973]        // -> [isSWJ <= 0x00000001]
[16:18:13.973]      __var hasDormant = __protocol & 0x00020000;
[16:18:13.973]        // -> [hasDormant <= 0x00000000]
[16:18:13.973]      __var protType   = __protocol & 0x0000FFFF;
[16:18:13.973]        // -> [protType <= 0x00000002]
[16:18:13.973]    </block>
[16:18:13.975]    <control if="protType == 1" while="" timeout="0" info="">
[16:18:13.975]      // if-block "protType == 1"
[16:18:13.975]        // =>  FALSE
[16:18:13.975]      // skip if-block "protType == 1"
[16:18:13.975]    </control>
[16:18:13.975]    <control if="protType == 2" while="" timeout="0" info="">
[16:18:13.975]      // if-block "protType == 2"
[16:18:13.975]        // =>  TRUE
[16:18:13.975]      <control if="isSWJ" while="" timeout="0" info="">
[16:18:13.975]        // if-block "isSWJ"
[16:18:13.975]          // =>  TRUE
[16:18:13.975]        <control if="hasDormant" while="" timeout="0" info="">
[16:18:13.975]          // if-block "hasDormant"
[16:18:13.975]            // =>  FALSE
[16:18:13.975]          // skip if-block "hasDormant"
[16:18:13.977]        </control>
[16:18:13.977]        <control if="!hasDormant" while="" timeout="0" info="">
[16:18:13.977]          // if-block "!hasDormant"
[16:18:13.977]            // =>  TRUE
[16:18:13.977]          <block atomic="false" info="">
[16:18:13.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:18:13.979]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:13.979]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:18:13.979]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:18:13.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:18:13.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:13.991]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:18:13.994]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:18:13.994]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:18:13.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:13.998]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:18:13.998]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:18:13.998]          </block>
[16:18:13.998]          // end if-block "!hasDormant"
[16:18:13.998]        </control>
[16:18:13.998]        // end if-block "isSWJ"
[16:18:13.998]      </control>
[16:18:13.998]      <control if="!isSWJ" while="" timeout="0" info="">
[16:18:14.004]        // if-block "!isSWJ"
[16:18:14.004]          // =>  FALSE
[16:18:14.004]        // skip if-block "!isSWJ"
[16:18:14.004]      </control>
[16:18:14.004]      <block atomic="false" info="">
[16:18:14.004]        ReadDP(0x0);
[16:18:14.006]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:18:14.006]      </block>
[16:18:14.007]      // end if-block "protType == 2"
[16:18:14.007]    </control>
[16:18:14.007]  </sequence>
[16:18:14.007]  
[16:18:14.019]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:18:14.019]  
[16:18:14.019]  <debugvars>
[16:18:14.019]    // Pre-defined
[16:18:14.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:14.019]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:14.019]    __dp=0x00000000
[16:18:14.019]    __ap=0x00000000
[16:18:14.019]    __traceout=0x00000000      (Trace Disabled)
[16:18:14.019]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:14.019]    __FlashAddr=0x00000000
[16:18:14.019]    __FlashLen=0x00000000
[16:18:14.019]    __FlashArg=0x00000000
[16:18:14.019]    __FlashOp=0x00000000
[16:18:14.019]    __Result=0x00000000
[16:18:14.019]  </debugvars>
[16:18:14.019]  
[16:18:14.019]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:18:14.019]    <block atomic="false" info="">
[16:18:14.019]      __var SW_DP_ABORT       = 0x0;
[16:18:14.019]        // -> [SW_DP_ABORT <= 0x00000000]
[16:18:14.019]      __var DP_CTRL_STAT      = 0x4;
[16:18:14.019]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:18:14.019]      __var DP_SELECT         = 0x8;
[16:18:14.019]        // -> [DP_SELECT <= 0x00000008]
[16:18:14.019]      __var powered_down      = 0;
[16:18:14.019]        // -> [powered_down <= 0x00000000]
[16:18:14.019]      WriteDP(DP_SELECT, 0x00000000);
[16:18:14.030]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:18:14.030]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:18:14.030]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:18:14.030]        // -> [powered_down <= 0x00000001]
[16:18:14.030]    </block>
[16:18:14.030]    <control if="powered_down" while="" timeout="0" info="">
[16:18:14.030]      // if-block "powered_down"
[16:18:14.030]        // =>  TRUE
[16:18:14.030]      <block atomic="false" info="">
[16:18:14.030]        Message(0, "Debug/System power-up request sent");
[16:18:14.030]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:18:14.042]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:18:14.042]      </block>
[16:18:14.042]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:18:14.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:18:14.042]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:18:14.042]        // while-condition  =>  FALSE
[16:18:14.047]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:18:14.047]      </control>
[16:18:14.047]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:18:14.047]        // if-block "(__protocol & 0xFFFF) == 1"
[16:18:14.047]          // =>  FALSE
[16:18:14.047]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:18:14.047]      </control>
[16:18:14.048]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:18:14.048]        // if-block "(__protocol & 0xFFFF) == 2"
[16:18:14.048]          // =>  TRUE
[16:18:14.048]        <block atomic="false" info="">
[16:18:14.048]          Message(0, "executing SWD power up");
[16:18:14.051]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:18:14.060]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:18:14.060]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:18:14.069]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:18:14.069]        </block>
[16:18:14.069]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:18:14.069]      </control>
[16:18:14.069]      // end if-block "powered_down"
[16:18:14.069]    </control>
[16:18:14.069]    <block atomic="false" info="">
[16:18:14.069]      __var DEBUG_PORT_VAL    = 0;
[16:18:14.069]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:18:14.069]      __var ACCESS_POINT_VAL  = 0;
[16:18:14.069]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:18:14.070]      __ap = 1; 
[16:18:14.070]        // -> [__ap <= 0x00000001]
[16:18:14.070]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:18:14.077]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:18:14.077]      __ap = 4;
[16:18:14.077]        // -> [__ap <= 0x00000004]
[16:18:14.078]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:14.087]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:18:14.087]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:18:14.087]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:14.089]    </block>
[16:18:14.089]    <block atomic="false" info="">
[16:18:14.089]      __var nReset = 0x80;
[16:18:14.089]        // -> [nReset <= 0x00000080]
[16:18:14.089]      __var canReadPins = 0;
[16:18:14.089]        // -> [canReadPins <= 0x00000000]
[16:18:14.089]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:18:14.089]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:18:14.089]        // -> [canReadPins <= 0x00000001]
[16:18:14.089]    </block>
[16:18:14.089]    <control if="" while="1" timeout="200" info="">
[16:18:14.089]      // while "1"  (timeout="200")
[16:18:14.089]      // while-condition  =>  TRUE
[16:18:14.089]      // while "1"  (timeout="200")
[16:18:14.089]      // while-condition  =>  TRUE
[16:18:14.093]      // while "1"  (timeout="200")
[16:18:14.093]      // while-condition  =>  TRUE
[16:18:14.093]      // while "1"  (timeout="200")
[16:18:14.093]      // while-condition  =>  TRUE
[16:18:14.093]      // while "1"  (timeout="200")
[16:18:14.093]      // while-condition  =>  TRUE
[16:18:14.093]      // while "1"  (timeout="200")
[16:18:14.093]      // while-condition  =>  TRUE
[16:18:14.093]      // while "1"  (timeout="200")
[16:18:14.093]      // while-condition  =>  TRUE
[16:18:14.093]      // while "1"  (timeout="200")
[16:18:14.094]      // while-condition  =>  TRUE
[16:18:14.094]      // while "1"  (timeout="200")
[16:18:14.094]      // while-condition  =>  TRUE
[16:18:14.094]      // while "1"  (timeout="200")
[16:18:14.094]      // while-condition  =>  TRUE
[16:18:14.094]      // while "1"  (timeout="200")
[16:18:14.094]      // while-condition  =>  TRUE
[16:18:14.094]      // while "1"  (timeout="200")
[16:18:14.094]      // while-condition  =>  TRUE
[16:18:14.094]      // while "1"  (timeout="200")
[16:18:14.094]      // while-condition  =>  TRUE
[16:18:14.094]      // while "1"  (timeout="200")
[16:18:14.094]      // while-condition  =>  TRUE
[16:18:14.094]      // while "1"  (timeout="200")
[16:18:14.096]      // while-condition  =>  TRUE
[16:18:14.096]      // while "1"  (timeout="200")
[16:18:14.096]      // while  =>  TIMEOUT
[16:18:14.097]      // end while "1"
[16:18:14.097]    </control>
[16:18:14.097]    <control if="canReadPins" while="" timeout="0" info="">
[16:18:14.097]      // if-block "canReadPins"
[16:18:14.097]        // =>  TRUE
[16:18:14.097]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:18:14.097]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:18:14.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:18:14.099]        // while-condition  =>  FALSE
[16:18:14.099]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:18:14.099]      </control>
[16:18:14.099]      // end if-block "canReadPins"
[16:18:14.099]    </control>
[16:18:14.099]    <control if="!canReadPins" while="" timeout="0" info="">
[16:18:14.099]      // if-block "!canReadPins"
[16:18:14.099]        // =>  FALSE
[16:18:14.099]      // skip if-block "!canReadPins"
[16:18:14.099]    </control>
[16:18:14.099]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:18:14.099]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:14.099]        // =>  TRUE
[16:18:14.099]      <block atomic="false" info="">
[16:18:14.099]        WriteAP(0x00, 0x190008);
[16:18:14.099]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:14.099]        WriteAP(0xF0, 0x01);
[16:18:14.111]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:14.111]      </block>
[16:18:14.111]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:14.111]    </control>
[16:18:14.111]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:18:14.111]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:14.111]        // =>  FALSE
[16:18:14.111]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:14.111]    </control>
[16:18:14.111]    <block atomic="false" info="">
[16:18:14.111]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:14.119]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:18:14.119]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:18:14.120]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:14.120]      __ap = 0; //lets make sure we reset the access point selection
[16:18:14.120]        // -> [__ap <= 0x00000000]
[16:18:14.120]    </block>
[16:18:14.120]  </sequence>
[16:18:14.120]  
[16:18:14.147]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:18:14.147]  
[16:18:14.148]  <debugvars>
[16:18:14.148]    // Pre-defined
[16:18:14.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:14.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:14.148]    __dp=0x00000000
[16:18:14.148]    __ap=0x00000000
[16:18:14.148]    __traceout=0x00000000      (Trace Disabled)
[16:18:14.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:14.148]    __FlashAddr=0x00000000
[16:18:14.148]    __FlashLen=0x00000000
[16:18:14.148]    __FlashArg=0x00000000
[16:18:14.148]    __FlashOp=0x00000000
[16:18:14.148]    __Result=0x00000000
[16:18:14.148]  </debugvars>
[16:18:14.148]  
[16:18:14.148]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:18:14.148]    <block atomic="false" info="">
[16:18:14.148]      __var deviceID = 0;
[16:18:14.148]        // -> [deviceID <= 0x00000000]
[16:18:14.148]      __var version = 0;
[16:18:14.148]        // -> [version <= 0x00000000]
[16:18:14.148]      __var partNum = 0;
[16:18:14.148]        // -> [partNum <= 0x00000000]
[16:18:14.148]      __var manuf = 0;
[16:18:14.148]        // -> [manuf <= 0x00000000]
[16:18:14.148]      __var isMSPM0G1X0X_G3X0X = 0;
[16:18:14.148]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:18:14.148]      __var isProduction = 0;
[16:18:14.148]        // -> [isProduction <= 0x00000000]
[16:18:14.148]      __var continueId = 0;
[16:18:14.148]        // -> [continueId <= 0x00000000]
[16:18:14.148]      deviceID =   Read32(0x41C40004);
[16:18:14.158]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:18:14.158]        // -> [deviceID <= 0x2BB8802F]
[16:18:14.158]      version = deviceID >> 28;
[16:18:14.158]        // -> [version <= 0x00000002]
[16:18:14.158]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:18:14.158]        // -> [partNum <= 0x0000BB88]
[16:18:14.158]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:18:14.158]        // -> [manuf <= 0x00000017]
[16:18:14.158]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:18:14.158]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:18:14.158]      isProduction = (version > 0);
[16:18:14.158]        // -> [isProduction <= 0x00000001]
[16:18:14.158]    </block>
[16:18:14.158]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:18:14.158]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:18:14.158]        // =>  FALSE
[16:18:14.158]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:18:14.158]    </control>
[16:18:14.158]    <control if="continueId == 4" while="" timeout="0" info="">
[16:18:14.158]      // if-block "continueId == 4"
[16:18:14.158]        // =>  FALSE
[16:18:14.158]      // skip if-block "continueId == 4"
[16:18:14.158]    </control>
[16:18:14.158]    <control if="!isProduction" while="" timeout="0" info="">
[16:18:14.158]      // if-block "!isProduction"
[16:18:14.158]        // =>  FALSE
[16:18:14.158]      // skip if-block "!isProduction"
[16:18:14.158]    </control>
[16:18:14.158]  </sequence>
[16:18:14.158]  
[16:46:32.171]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:32.171]  
[16:46:32.179]  <debugvars>
[16:46:32.179]    // Pre-defined
[16:46:32.179]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:32.179]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:32.179]    __dp=0x00000000
[16:46:32.179]    __ap=0x00000000
[16:46:32.179]    __traceout=0x00000000      (Trace Disabled)
[16:46:32.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:32.181]    __FlashAddr=0x00000000
[16:46:32.181]    __FlashLen=0x00000000
[16:46:32.181]    __FlashArg=0x00000000
[16:46:32.181]    __FlashOp=0x00000000
[16:46:32.181]    __Result=0x00000000
[16:46:32.181]  </debugvars>
[16:46:32.181]  
[16:46:32.181]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:32.181]    <block atomic="false" info="">
[16:46:32.181]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:32.182]        // -> [isSWJ <= 0x00000001]
[16:46:32.182]      __var hasDormant = __protocol & 0x00020000;
[16:46:32.182]        // -> [hasDormant <= 0x00000000]
[16:46:32.182]      __var protType   = __protocol & 0x0000FFFF;
[16:46:32.182]        // -> [protType <= 0x00000002]
[16:46:32.182]    </block>
[16:46:32.182]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:32.182]      // if-block "protType == 1"
[16:46:32.182]        // =>  FALSE
[16:46:32.182]      // skip if-block "protType == 1"
[16:46:32.182]    </control>
[16:46:32.182]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:32.183]      // if-block "protType == 2"
[16:46:32.183]        // =>  TRUE
[16:46:32.183]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:32.183]        // if-block "isSWJ"
[16:46:32.183]          // =>  TRUE
[16:46:32.183]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:32.183]          // if-block "hasDormant"
[16:46:32.183]            // =>  FALSE
[16:46:32.183]          // skip if-block "hasDormant"
[16:46:32.183]        </control>
[16:46:32.183]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:32.183]          // if-block "!hasDormant"
[16:46:32.184]            // =>  TRUE
[16:46:32.184]          <block atomic="false" info="">
[16:46:32.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:32.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:32.185]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:32.187]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:32.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:32.188]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:32.188]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:32.188]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:32.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:32.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:32.193]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:32.196]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:32.196]          </block>
[16:46:32.196]          // end if-block "!hasDormant"
[16:46:32.196]        </control>
[16:46:32.196]        // end if-block "isSWJ"
[16:46:32.196]      </control>
[16:46:32.196]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:32.196]        // if-block "!isSWJ"
[16:46:32.196]          // =>  FALSE
[16:46:32.196]        // skip if-block "!isSWJ"
[16:46:32.196]      </control>
[16:46:32.196]      <block atomic="false" info="">
[16:46:32.196]        ReadDP(0x0);
[16:46:32.202]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:32.202]      </block>
[16:46:32.202]      // end if-block "protType == 2"
[16:46:32.202]    </control>
[16:46:32.202]  </sequence>
[16:46:32.202]  
[16:46:32.208]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:32.208]  
[16:46:32.208]  <debugvars>
[16:46:32.208]    // Pre-defined
[16:46:32.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:32.208]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:32.208]    __dp=0x00000000
[16:46:32.208]    __ap=0x00000000
[16:46:32.208]    __traceout=0x00000000      (Trace Disabled)
[16:46:32.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:32.211]    __FlashAddr=0x00000000
[16:46:32.211]    __FlashLen=0x00000000
[16:46:32.211]    __FlashArg=0x00000000
[16:46:32.211]    __FlashOp=0x00000000
[16:46:32.211]    __Result=0x00000000
[16:46:32.211]  </debugvars>
[16:46:32.211]  
[16:46:32.211]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:32.211]    <block atomic="false" info="">
[16:46:32.211]      __var SW_DP_ABORT       = 0x0;
[16:46:32.212]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:32.212]      __var DP_CTRL_STAT      = 0x4;
[16:46:32.212]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:32.212]      __var DP_SELECT         = 0x8;
[16:46:32.212]        // -> [DP_SELECT <= 0x00000008]
[16:46:32.212]      __var powered_down      = 0;
[16:46:32.212]        // -> [powered_down <= 0x00000000]
[16:46:32.212]      WriteDP(DP_SELECT, 0x00000000);
[16:46:32.213]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:32.213]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:46:32.216]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:46:32.216]        // -> [powered_down <= 0x00000001]
[16:46:32.216]    </block>
[16:46:32.216]    <control if="powered_down" while="" timeout="0" info="">
[16:46:32.216]      // if-block "powered_down"
[16:46:32.216]        // =>  TRUE
[16:46:32.216]      <block atomic="false" info="">
[16:46:32.216]        Message(0, "Debug/System power-up request sent");
[16:46:32.218]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:46:32.222]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:46:32.222]      </block>
[16:46:32.222]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:46:32.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:46:32.224]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:46:32.224]        // while-condition  =>  FALSE
[16:46:32.224]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:46:32.224]      </control>
[16:46:32.224]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:46:32.224]        // if-block "(__protocol & 0xFFFF) == 1"
[16:46:32.224]          // =>  FALSE
[16:46:32.224]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:46:32.224]      </control>
[16:46:32.224]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:46:32.224]        // if-block "(__protocol & 0xFFFF) == 2"
[16:46:32.224]          // =>  TRUE
[16:46:32.226]        <block atomic="false" info="">
[16:46:32.226]          Message(0, "executing SWD power up");
[16:46:32.227]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:46:32.233]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:46:32.233]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:46:32.236]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:46:32.236]        </block>
[16:46:32.236]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:46:32.236]      </control>
[16:46:32.236]      // end if-block "powered_down"
[16:46:32.236]    </control>
[16:46:32.236]    <block atomic="false" info="">
[16:46:32.236]      __var DEBUG_PORT_VAL    = 0;
[16:46:32.236]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:46:32.236]      __var ACCESS_POINT_VAL  = 0;
[16:46:32.236]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:46:32.236]      __ap = 1; 
[16:46:32.236]        // -> [__ap <= 0x00000001]
[16:46:32.236]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:46:32.244]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:46:32.244]      __ap = 4;
[16:46:32.244]        // -> [__ap <= 0x00000004]
[16:46:32.244]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:32.247]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:46:32.247]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:46:32.247]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:32.251]    </block>
[16:46:32.251]    <block atomic="false" info="">
[16:46:32.252]      __var nReset = 0x80;
[16:46:32.252]        // -> [nReset <= 0x00000080]
[16:46:32.252]      __var canReadPins = 0;
[16:46:32.252]        // -> [canReadPins <= 0x00000000]
[16:46:32.252]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:46:32.252]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:46:32.252]        // -> [canReadPins <= 0x00000001]
[16:46:32.252]    </block>
[16:46:32.252]    <control if="" while="1" timeout="200" info="">
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.252]      // while "1"  (timeout="200")
[16:46:32.252]      // while-condition  =>  TRUE
[16:46:32.257]      // while "1"  (timeout="200")
[16:46:32.257]      // while  =>  TIMEOUT
[16:46:32.257]      // end while "1"
[16:46:32.257]    </control>
[16:46:32.257]    <control if="canReadPins" while="" timeout="0" info="">
[16:46:32.257]      // if-block "canReadPins"
[16:46:32.257]        // =>  TRUE
[16:46:32.258]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:46:32.258]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:46:32.259]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:46:32.259]        // while-condition  =>  FALSE
[16:46:32.259]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:46:32.259]      </control>
[16:46:32.259]      // end if-block "canReadPins"
[16:46:32.261]    </control>
[16:46:32.261]    <control if="!canReadPins" while="" timeout="0" info="">
[16:46:32.261]      // if-block "!canReadPins"
[16:46:32.261]        // =>  FALSE
[16:46:32.261]      // skip if-block "!canReadPins"
[16:46:32.261]    </control>
[16:46:32.261]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:46:32.261]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:32.261]        // =>  TRUE
[16:46:32.261]      <block atomic="false" info="">
[16:46:32.261]        WriteAP(0x00, 0x190008);
[16:46:32.263]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:32.263]        WriteAP(0xF0, 0x01);
[16:46:32.268]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:32.268]      </block>
[16:46:32.269]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:32.269]    </control>
[16:46:32.269]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:46:32.269]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:32.269]        // =>  FALSE
[16:46:32.269]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:32.269]    </control>
[16:46:32.269]    <block atomic="false" info="">
[16:46:32.269]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:32.272]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:46:32.272]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:46:32.272]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:32.272]      __ap = 0; //lets make sure we reset the access point selection
[16:46:32.272]        // -> [__ap <= 0x00000000]
[16:46:32.272]    </block>
[16:46:32.272]  </sequence>
[16:46:32.272]  
[16:46:32.303]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:46:32.303]  
[16:46:32.303]  <debugvars>
[16:46:32.303]    // Pre-defined
[16:46:32.303]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:32.303]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:32.303]    __dp=0x00000000
[16:46:32.303]    __ap=0x00000000
[16:46:32.303]    __traceout=0x00000000      (Trace Disabled)
[16:46:32.303]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:32.303]    __FlashAddr=0x00000000
[16:46:32.303]    __FlashLen=0x00000000
[16:46:32.303]    __FlashArg=0x00000000
[16:46:32.303]    __FlashOp=0x00000000
[16:46:32.303]    __Result=0x00000000
[16:46:32.303]  </debugvars>
[16:46:32.303]  
[16:46:32.303]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:46:32.303]    <block atomic="false" info="">
[16:46:32.303]      __var deviceID = 0;
[16:46:32.303]        // -> [deviceID <= 0x00000000]
[16:46:32.303]      __var version = 0;
[16:46:32.303]        // -> [version <= 0x00000000]
[16:46:32.303]      __var partNum = 0;
[16:46:32.303]        // -> [partNum <= 0x00000000]
[16:46:32.303]      __var manuf = 0;
[16:46:32.303]        // -> [manuf <= 0x00000000]
[16:46:32.303]      __var isMSPM0G1X0X_G3X0X = 0;
[16:46:32.308]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:46:32.308]      __var isProduction = 0;
[16:46:32.308]        // -> [isProduction <= 0x00000000]
[16:46:32.308]      __var continueId = 0;
[16:46:32.308]        // -> [continueId <= 0x00000000]
[16:46:32.308]      deviceID =   Read32(0x41C40004);
[16:46:32.312]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:46:32.312]        // -> [deviceID <= 0x2BB8802F]
[16:46:32.312]      version = deviceID >> 28;
[16:46:32.312]        // -> [version <= 0x00000002]
[16:46:32.312]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:46:32.312]        // -> [partNum <= 0x0000BB88]
[16:46:32.312]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:46:32.312]        // -> [manuf <= 0x00000017]
[16:46:32.312]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:46:32.312]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:46:32.312]      isProduction = (version > 0);
[16:46:32.312]        // -> [isProduction <= 0x00000001]
[16:46:32.312]    </block>
[16:46:32.312]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:46:32.312]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:46:32.312]        // =>  FALSE
[16:46:32.312]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:46:32.312]    </control>
[16:46:32.312]    <control if="continueId == 4" while="" timeout="0" info="">
[16:46:32.312]      // if-block "continueId == 4"
[16:46:32.312]        // =>  FALSE
[16:46:32.312]      // skip if-block "continueId == 4"
[16:46:32.312]    </control>
[16:46:32.312]    <control if="!isProduction" while="" timeout="0" info="">
[16:46:32.312]      // if-block "!isProduction"
[16:46:32.312]        // =>  FALSE
[16:46:32.312]      // skip if-block "!isProduction"
[16:46:32.312]    </control>
[16:46:32.312]  </sequence>
[16:46:32.318]  
[16:47:21.952]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:47:21.952]  
[16:47:21.962]  <debugvars>
[16:47:21.962]    // Pre-defined
[16:47:21.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:47:21.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:47:21.962]    __dp=0x00000000
[16:47:21.962]    __ap=0x00000000
[16:47:21.962]    __traceout=0x00000000      (Trace Disabled)
[16:47:21.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:47:21.963]    __FlashAddr=0x00000000
[16:47:21.963]    __FlashLen=0x00000000
[16:47:21.963]    __FlashArg=0x00000000
[16:47:21.963]    __FlashOp=0x00000000
[16:47:21.963]    __Result=0x00000000
[16:47:21.963]  </debugvars>
[16:47:21.963]  
[16:47:21.963]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:47:21.963]    <block atomic="false" info="">
[16:47:21.963]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:47:21.963]        // -> [isSWJ <= 0x00000001]
[16:47:21.963]      __var hasDormant = __protocol & 0x00020000;
[16:47:21.963]        // -> [hasDormant <= 0x00000000]
[16:47:21.963]      __var protType   = __protocol & 0x0000FFFF;
[16:47:21.963]        // -> [protType <= 0x00000002]
[16:47:21.963]    </block>
[16:47:21.963]    <control if="protType == 1" while="" timeout="0" info="">
[16:47:21.963]      // if-block "protType == 1"
[16:47:21.963]        // =>  FALSE
[16:47:21.963]      // skip if-block "protType == 1"
[16:47:21.963]    </control>
[16:47:21.963]    <control if="protType == 2" while="" timeout="0" info="">
[16:47:21.963]      // if-block "protType == 2"
[16:47:21.963]        // =>  TRUE
[16:47:21.963]      <control if="isSWJ" while="" timeout="0" info="">
[16:47:21.963]        // if-block "isSWJ"
[16:47:21.963]          // =>  TRUE
[16:47:21.963]        <control if="hasDormant" while="" timeout="0" info="">
[16:47:21.963]          // if-block "hasDormant"
[16:47:21.963]            // =>  FALSE
[16:47:21.963]          // skip if-block "hasDormant"
[16:47:21.963]        </control>
[16:47:21.963]        <control if="!hasDormant" while="" timeout="0" info="">
[16:47:21.963]          // if-block "!hasDormant"
[16:47:21.963]            // =>  TRUE
[16:47:21.963]          <block atomic="false" info="">
[16:47:21.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:47:21.971]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:47:21.971]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:47:21.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:47:21.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:47:21.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:47:21.974]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:47:21.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:47:21.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:47:21.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:47:21.974]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:47:21.981]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:47:21.981]          </block>
[16:47:21.981]          // end if-block "!hasDormant"
[16:47:21.981]        </control>
[16:47:21.981]        // end if-block "isSWJ"
[16:47:21.981]      </control>
[16:47:21.981]      <control if="!isSWJ" while="" timeout="0" info="">
[16:47:21.981]        // if-block "!isSWJ"
[16:47:21.982]          // =>  FALSE
[16:47:21.982]        // skip if-block "!isSWJ"
[16:47:21.982]      </control>
[16:47:21.982]      <block atomic="false" info="">
[16:47:21.983]        ReadDP(0x0);
[16:47:21.984]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:47:21.984]      </block>
[16:47:21.984]      // end if-block "protType == 2"
[16:47:21.984]    </control>
[16:47:21.984]  </sequence>
[16:47:21.984]  
[16:47:21.991]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:47:21.991]  
[16:47:21.991]  <debugvars>
[16:47:21.991]    // Pre-defined
[16:47:21.991]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:47:21.991]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:47:21.991]    __dp=0x00000000
[16:47:21.991]    __ap=0x00000000
[16:47:21.991]    __traceout=0x00000000      (Trace Disabled)
[16:47:21.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:47:21.992]    __FlashAddr=0x00000000
[16:47:21.992]    __FlashLen=0x00000000
[16:47:21.992]    __FlashArg=0x00000000
[16:47:21.992]    __FlashOp=0x00000000
[16:47:21.992]    __Result=0x00000000
[16:47:21.992]  </debugvars>
[16:47:21.992]  
[16:47:21.992]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:47:21.992]    <block atomic="false" info="">
[16:47:21.992]      __var SW_DP_ABORT       = 0x0;
[16:47:21.992]        // -> [SW_DP_ABORT <= 0x00000000]
[16:47:21.992]      __var DP_CTRL_STAT      = 0x4;
[16:47:21.992]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:47:21.992]      __var DP_SELECT         = 0x8;
[16:47:21.992]        // -> [DP_SELECT <= 0x00000008]
[16:47:21.992]      __var powered_down      = 0;
[16:47:21.992]        // -> [powered_down <= 0x00000000]
[16:47:21.992]      WriteDP(DP_SELECT, 0x00000000);
[16:47:22.004]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:47:22.004]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:47:22.011]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:47:22.012]        // -> [powered_down <= 0x00000001]
[16:47:22.012]    </block>
[16:47:22.012]    <control if="powered_down" while="" timeout="0" info="">
[16:47:22.012]      // if-block "powered_down"
[16:47:22.012]        // =>  TRUE
[16:47:22.012]      <block atomic="false" info="">
[16:47:22.012]        Message(0, "Debug/System power-up request sent");
[16:47:22.012]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:47:22.016]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:47:22.016]      </block>
[16:47:22.016]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:47:22.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:47:22.016]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:47:22.016]        // while-condition  =>  FALSE
[16:47:22.016]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:47:22.016]      </control>
[16:47:22.016]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:47:22.016]        // if-block "(__protocol & 0xFFFF) == 1"
[16:47:22.016]          // =>  FALSE
[16:47:22.016]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:47:22.021]      </control>
[16:47:22.021]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:47:22.021]        // if-block "(__protocol & 0xFFFF) == 2"
[16:47:22.021]          // =>  TRUE
[16:47:22.022]        <block atomic="false" info="">
[16:47:22.022]          Message(0, "executing SWD power up");
[16:47:22.022]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:47:22.022]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:47:22.022]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:47:22.031]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:47:22.032]        </block>
[16:47:22.032]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:47:22.032]      </control>
[16:47:22.032]      // end if-block "powered_down"
[16:47:22.032]    </control>
[16:47:22.032]    <block atomic="false" info="">
[16:47:22.032]      __var DEBUG_PORT_VAL    = 0;
[16:47:22.032]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:47:22.032]      __var ACCESS_POINT_VAL  = 0;
[16:47:22.033]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:47:22.033]      __ap = 1; 
[16:47:22.033]        // -> [__ap <= 0x00000001]
[16:47:22.033]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:47:22.042]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:47:22.042]      __ap = 4;
[16:47:22.042]        // -> [__ap <= 0x00000004]
[16:47:22.042]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:47:22.054]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:47:22.054]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:47:22.054]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:47:22.054]    </block>
[16:47:22.054]    <block atomic="false" info="">
[16:47:22.054]      __var nReset = 0x80;
[16:47:22.054]        // -> [nReset <= 0x00000080]
[16:47:22.054]      __var canReadPins = 0;
[16:47:22.054]        // -> [canReadPins <= 0x00000000]
[16:47:22.054]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:47:22.054]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:47:22.054]        // -> [canReadPins <= 0x00000001]
[16:47:22.054]    </block>
[16:47:22.054]    <control if="" while="1" timeout="200" info="">
[16:47:22.054]      // while "1"  (timeout="200")
[16:47:22.054]      // while-condition  =>  TRUE
[16:47:22.054]      // while "1"  (timeout="200")
[16:47:22.061]      // while-condition  =>  TRUE
[16:47:22.061]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.062]      // while "1"  (timeout="200")
[16:47:22.062]      // while-condition  =>  TRUE
[16:47:22.064]      // while "1"  (timeout="200")
[16:47:22.064]      // while-condition  =>  TRUE
[16:47:22.064]      // while "1"  (timeout="200")
[16:47:22.064]      // while-condition  =>  TRUE
[16:47:22.064]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.065]      // while-condition  =>  TRUE
[16:47:22.065]      // while "1"  (timeout="200")
[16:47:22.071]      // while-condition  =>  TRUE
[16:47:22.071]      // while "1"  (timeout="200")
[16:47:22.071]      // while  =>  TIMEOUT
[16:47:22.071]      // end while "1"
[16:47:22.071]    </control>
[16:47:22.072]    <control if="canReadPins" while="" timeout="0" info="">
[16:47:22.072]      // if-block "canReadPins"
[16:47:22.072]        // =>  TRUE
[16:47:22.072]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:47:22.072]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:47:22.082]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:47:22.082]        // while-condition  =>  FALSE
[16:47:22.082]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:47:22.082]      </control>
[16:47:22.082]      // end if-block "canReadPins"
[16:47:22.082]    </control>
[16:47:22.082]    <control if="!canReadPins" while="" timeout="0" info="">
[16:47:22.082]      // if-block "!canReadPins"
[16:47:22.082]        // =>  FALSE
[16:47:22.082]      // skip if-block "!canReadPins"
[16:47:22.082]    </control>
[16:47:22.082]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:47:22.082]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:47:22.082]        // =>  TRUE
[16:47:22.082]      <block atomic="false" info="">
[16:47:22.082]        WriteAP(0x00, 0x190008);
[16:47:22.082]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:47:22.082]        WriteAP(0xF0, 0x01);
[16:47:22.091]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:47:22.091]      </block>
[16:47:22.091]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:47:22.091]    </control>
[16:47:22.092]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:47:22.092]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:47:22.092]        // =>  FALSE
[16:47:22.092]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:47:22.092]    </control>
[16:47:22.092]    <block atomic="false" info="">
[16:47:22.092]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:47:22.093]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:47:22.093]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:47:22.093]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:47:22.099]      __ap = 0; //lets make sure we reset the access point selection
[16:47:22.099]        // -> [__ap <= 0x00000000]
[16:47:22.099]    </block>
[16:47:22.099]  </sequence>
[16:47:22.099]  
[16:47:22.123]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:47:22.123]  
[16:47:22.123]  <debugvars>
[16:47:22.123]    // Pre-defined
[16:47:22.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:47:22.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:47:22.123]    __dp=0x00000000
[16:47:22.123]    __ap=0x00000000
[16:47:22.123]    __traceout=0x00000000      (Trace Disabled)
[16:47:22.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:47:22.123]    __FlashAddr=0x00000000
[16:47:22.123]    __FlashLen=0x00000000
[16:47:22.123]    __FlashArg=0x00000000
[16:47:22.123]    __FlashOp=0x00000000
[16:47:22.123]    __Result=0x00000000
[16:47:22.123]  </debugvars>
[16:47:22.131]  
[16:47:22.131]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:47:22.131]    <block atomic="false" info="">
[16:47:22.131]      __var deviceID = 0;
[16:47:22.131]        // -> [deviceID <= 0x00000000]
[16:47:22.131]      __var version = 0;
[16:47:22.131]        // -> [version <= 0x00000000]
[16:47:22.131]      __var partNum = 0;
[16:47:22.131]        // -> [partNum <= 0x00000000]
[16:47:22.131]      __var manuf = 0;
[16:47:22.132]        // -> [manuf <= 0x00000000]
[16:47:22.132]      __var isMSPM0G1X0X_G3X0X = 0;
[16:47:22.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:47:22.132]      __var isProduction = 0;
[16:47:22.132]        // -> [isProduction <= 0x00000000]
[16:47:22.132]      __var continueId = 0;
[16:47:22.133]        // -> [continueId <= 0x00000000]
[16:47:22.133]      deviceID =   Read32(0x41C40004);
[16:47:22.142]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:47:22.142]        // -> [deviceID <= 0x2BB8802F]
[16:47:22.142]      version = deviceID >> 28;
[16:47:22.142]        // -> [version <= 0x00000002]
[16:47:22.142]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:47:22.142]        // -> [partNum <= 0x0000BB88]
[16:47:22.142]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:47:22.142]        // -> [manuf <= 0x00000017]
[16:47:22.142]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:47:22.142]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:47:22.142]      isProduction = (version > 0);
[16:47:22.142]        // -> [isProduction <= 0x00000001]
[16:47:22.142]    </block>
[16:47:22.142]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:47:22.142]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:47:22.142]        // =>  FALSE
[16:47:22.142]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:47:22.142]    </control>
[16:47:22.142]    <control if="continueId == 4" while="" timeout="0" info="">
[16:47:22.142]      // if-block "continueId == 4"
[16:47:22.142]        // =>  FALSE
[16:47:22.142]      // skip if-block "continueId == 4"
[16:47:22.142]    </control>
[16:47:22.142]    <control if="!isProduction" while="" timeout="0" info="">
[16:47:22.142]      // if-block "!isProduction"
[16:47:22.142]        // =>  FALSE
[16:47:22.142]      // skip if-block "!isProduction"
[16:47:22.142]    </control>
[16:47:22.142]  </sequence>
[16:47:22.142]  
