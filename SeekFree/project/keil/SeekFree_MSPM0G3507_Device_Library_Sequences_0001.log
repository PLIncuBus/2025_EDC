/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0001.log
 *  Created     : 15:15:55 (21/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:15:55.194]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:15:55.194]  
[15:15:55.194]  <debugvars>
[15:15:55.195]    // Pre-defined
[15:15:55.195]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:55.195]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:15:55.195]    __dp=0x00000000
[15:15:55.195]    __ap=0x00000000
[15:15:55.195]    __traceout=0x00000000      (Trace Disabled)
[15:15:55.195]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:55.195]    __FlashAddr=0x00000000
[15:15:55.195]    __FlashLen=0x00000000
[15:15:55.195]    __FlashArg=0x00000000
[15:15:55.195]    __FlashOp=0x00000000
[15:15:55.197]    __Result=0x00000000
[15:15:55.197]  </debugvars>
[15:15:55.197]  
[15:15:55.197]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:15:55.197]    <block atomic="false" info="">
[15:15:55.197]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:15:55.197]        // -> [isSWJ <= 0x00000001]
[15:15:55.197]      __var hasDormant = __protocol & 0x00020000;
[15:15:55.197]        // -> [hasDormant <= 0x00000000]
[15:15:55.198]      __var protType   = __protocol & 0x0000FFFF;
[15:15:55.198]        // -> [protType <= 0x00000002]
[15:15:55.198]    </block>
[15:15:55.198]    <control if="protType == 1" while="" timeout="0" info="">
[15:15:55.198]      // if-block "protType == 1"
[15:15:55.198]        // =>  FALSE
[15:15:55.198]      // skip if-block "protType == 1"
[15:15:55.198]    </control>
[15:15:55.198]    <control if="protType == 2" while="" timeout="0" info="">
[15:15:55.198]      // if-block "protType == 2"
[15:15:55.198]        // =>  TRUE
[15:15:55.199]      <control if="isSWJ" while="" timeout="0" info="">
[15:15:55.199]        // if-block "isSWJ"
[15:15:55.199]          // =>  TRUE
[15:15:55.199]        <control if="hasDormant" while="" timeout="0" info="">
[15:15:55.199]          // if-block "hasDormant"
[15:15:55.199]            // =>  FALSE
[15:15:55.199]          // skip if-block "hasDormant"
[15:15:55.199]        </control>
[15:15:55.200]        <control if="!hasDormant" while="" timeout="0" info="">
[15:15:55.200]          // if-block "!hasDormant"
[15:15:55.200]            // =>  TRUE
[15:15:55.200]          <block atomic="false" info="">
[15:15:55.200]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:15:55.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:55.201]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:15:55.201]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:15:55.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:15:55.202]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:55.202]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:15:55.202]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:15:55.202]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:15:55.203]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:55.203]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:15:55.203]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:15:55.203]          </block>
[15:15:55.203]          // end if-block "!hasDormant"
[15:15:55.204]        </control>
[15:15:55.204]        // end if-block "isSWJ"
[15:15:55.204]      </control>
[15:15:55.204]      <control if="!isSWJ" while="" timeout="0" info="">
[15:15:55.204]        // if-block "!isSWJ"
[15:15:55.204]          // =>  FALSE
[15:15:55.204]        // skip if-block "!isSWJ"
[15:15:55.204]      </control>
[15:15:55.204]      <block atomic="false" info="">
[15:15:55.205]        ReadDP(0x0);
[15:15:55.205]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:15:55.205]      </block>
[15:15:55.206]      // end if-block "protType == 2"
[15:15:55.206]    </control>
[15:15:55.206]  </sequence>
[15:15:55.206]  
[15:15:55.207]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:15:55.207]  
[15:15:55.207]  <debugvars>
[15:15:55.207]    // Pre-defined
[15:15:55.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:55.207]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:15:55.207]    __dp=0x00000000
[15:15:55.208]    __ap=0x00000000
[15:15:55.208]    __traceout=0x00000000      (Trace Disabled)
[15:15:55.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:55.208]    __FlashAddr=0x00000000
[15:15:55.208]    __FlashLen=0x00000000
[15:15:55.208]    __FlashArg=0x00000000
[15:15:55.208]    __FlashOp=0x00000000
[15:15:55.208]    __Result=0x00000000
[15:15:55.208]  </debugvars>
[15:15:55.208]  
[15:15:55.208]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:15:55.209]    <block atomic="false" info="">
[15:15:55.209]      __var SW_DP_ABORT       = 0x0;
[15:15:55.209]        // -> [SW_DP_ABORT <= 0x00000000]
[15:15:55.209]      __var DP_CTRL_STAT      = 0x4;
[15:15:55.209]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:15:55.209]      __var DP_SELECT         = 0x8;
[15:15:55.209]        // -> [DP_SELECT <= 0x00000008]
[15:15:55.209]      __var powered_down      = 0;
[15:15:55.209]        // -> [powered_down <= 0x00000000]
[15:15:55.210]      WriteDP(DP_SELECT, 0x00000000);
[15:15:55.210]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:15:55.210]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:15:55.211]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:15:55.211]        // -> [powered_down <= 0x00000001]
[15:15:55.211]    </block>
[15:15:55.211]    <control if="powered_down" while="" timeout="0" info="">
[15:15:55.211]      // if-block "powered_down"
[15:15:55.212]        // =>  TRUE
[15:15:55.212]      <block atomic="false" info="">
[15:15:55.212]        Message(0, "Debug/System power-up request sent");
[15:15:55.214]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:15:55.215]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:15:55.215]      </block>
[15:15:55.215]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:15:55.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:15:55.216]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:15:55.216]        // while-condition  =>  FALSE
[15:15:55.216]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:15:55.216]      </control>
[15:15:55.216]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:15:55.216]        // if-block "(__protocol & 0xFFFF) == 1"
[15:15:55.216]          // =>  FALSE
[15:15:55.216]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:15:55.216]      </control>
[15:15:55.216]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:15:55.216]        // if-block "(__protocol & 0xFFFF) == 2"
[15:15:55.216]          // =>  TRUE
[15:15:55.217]        <block atomic="false" info="">
[15:15:55.217]          Message(0, "executing SWD power up");
[15:15:55.219]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:15:55.219]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:15:55.219]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:15:55.220]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:15:55.220]        </block>
[15:15:55.220]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:15:55.220]      </control>
[15:15:55.220]      // end if-block "powered_down"
[15:15:55.221]    </control>
[15:15:55.221]    <block atomic="false" info="">
[15:15:55.221]      __var DEBUG_PORT_VAL    = 0;
[15:15:55.221]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:15:55.221]      __var ACCESS_POINT_VAL  = 0;
[15:15:55.221]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:15:55.221]      __ap = 1; 
[15:15:55.221]        // -> [__ap <= 0x00000001]
[15:15:55.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:15:55.223]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:15:55.223]      __ap = 4;
[15:15:55.223]        // -> [__ap <= 0x00000004]
[15:15:55.223]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:15:55.225]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:15:55.225]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:15:55.225]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:15:55.226]    </block>
[15:15:55.226]    <block atomic="false" info="">
[15:15:55.226]      __var nReset = 0x80;
[15:15:55.226]        // -> [nReset <= 0x00000080]
[15:15:55.226]      __var canReadPins = 0;
[15:15:55.226]        // -> [canReadPins <= 0x00000000]
[15:15:55.226]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:15:55.227]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:15:55.227]        // -> [canReadPins <= 0x00000001]
[15:15:55.227]    </block>
[15:15:55.227]    <control if="" while="1" timeout="200" info="">
[15:15:55.227]      // while "1"  (timeout="200")
[15:15:55.227]      // while-condition  =>  TRUE
[15:15:55.227]      // while "1"  (timeout="200")
[15:15:55.228]      // while-condition  =>  TRUE
[15:15:55.228]      // while "1"  (timeout="200")
[15:15:55.228]      // while-condition  =>  TRUE
[15:15:55.228]      // while "1"  (timeout="200")
[15:15:55.228]      // while-condition  =>  TRUE
[15:15:55.228]      // while "1"  (timeout="200")
[15:15:55.228]      // while-condition  =>  TRUE
[15:15:55.228]      // while "1"  (timeout="200")
[15:15:55.229]      // while-condition  =>  TRUE
[15:15:55.229]      // while "1"  (timeout="200")
[15:15:55.229]      // while-condition  =>  TRUE
[15:15:55.229]      // while "1"  (timeout="200")
[15:15:55.229]      // while-condition  =>  TRUE
[15:15:55.229]      // while "1"  (timeout="200")
[15:15:55.229]      // while-condition  =>  TRUE
[15:15:55.229]      // while "1"  (timeout="200")
[15:15:55.229]      // while-condition  =>  TRUE
[15:15:55.229]      // while "1"  (timeout="200")
[15:15:55.229]      // while-condition  =>  TRUE
[15:15:55.230]      // while "1"  (timeout="200")
[15:15:55.230]      // while-condition  =>  TRUE
[15:15:55.230]      // while "1"  (timeout="200")
[15:15:55.230]      // while-condition  =>  TRUE
[15:15:55.230]      // while "1"  (timeout="200")
[15:15:55.230]      // while-condition  =>  TRUE
[15:15:55.230]      // while "1"  (timeout="200")
[15:15:55.230]      // while-condition  =>  TRUE
[15:15:55.230]      // while "1"  (timeout="200")
[15:15:55.230]      // while-condition  =>  TRUE
[15:15:55.230]      // while "1"  (timeout="200")
[15:15:55.231]      // while-condition  =>  TRUE
[15:15:55.231]      // while "1"  (timeout="200")
[15:15:55.231]      // while-condition  =>  TRUE
[15:15:55.231]      // while "1"  (timeout="200")
[15:15:55.231]      // while-condition  =>  TRUE
[15:15:55.231]      // while "1"  (timeout="200")
[15:15:55.231]      // while-condition  =>  TRUE
[15:15:55.231]      // while "1"  (timeout="200")
[15:15:55.231]      // while-condition  =>  TRUE
[15:15:55.232]      // while "1"  (timeout="200")
[15:15:55.232]      // while-condition  =>  TRUE
[15:15:55.232]      // while "1"  (timeout="200")
[15:15:55.232]      // while-condition  =>  TRUE
[15:15:55.232]      // while "1"  (timeout="200")
[15:15:55.232]      // while-condition  =>  TRUE
[15:15:55.232]      // while "1"  (timeout="200")
[15:15:55.232]      // while-condition  =>  TRUE
[15:15:55.232]      // while "1"  (timeout="200")
[15:15:55.232]      // while-condition  =>  TRUE
[15:15:55.233]      // while "1"  (timeout="200")
[15:15:55.233]      // while-condition  =>  TRUE
[15:15:55.233]      // while "1"  (timeout="200")
[15:15:55.233]      // while-condition  =>  TRUE
[15:15:55.233]      // while "1"  (timeout="200")
[15:15:55.233]      // while-condition  =>  TRUE
[15:15:55.233]      // while "1"  (timeout="200")
[15:15:55.233]      // while-condition  =>  TRUE
[15:15:55.233]      // while "1"  (timeout="200")
[15:15:55.233]      // while-condition  =>  TRUE
[15:15:55.233]      // while "1"  (timeout="200")
[15:15:55.234]      // while-condition  =>  TRUE
[15:15:55.234]      // while "1"  (timeout="200")
[15:15:55.234]      // while-condition  =>  TRUE
[15:15:55.234]      // while "1"  (timeout="200")
[15:15:55.234]      // while-condition  =>  TRUE
[15:15:55.234]      // while "1"  (timeout="200")
[15:15:55.234]      // while-condition  =>  TRUE
[15:15:55.234]      // while "1"  (timeout="200")
[15:15:55.234]      // while-condition  =>  TRUE
[15:15:55.234]      // while "1"  (timeout="200")
[15:15:55.234]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.235]      // while-condition  =>  TRUE
[15:15:55.235]      // while "1"  (timeout="200")
[15:15:55.237]      // while-condition  =>  TRUE
[15:15:55.237]      // while "1"  (timeout="200")
[15:15:55.237]      // while-condition  =>  TRUE
[15:15:55.237]      // while "1"  (timeout="200")
[15:15:55.237]      // while-condition  =>  TRUE
[15:15:55.237]      // while "1"  (timeout="200")
[15:15:55.237]      // while-condition  =>  TRUE
[15:15:55.237]      // while "1"  (timeout="200")
[15:15:55.237]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.238]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.238]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.238]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.238]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.238]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.238]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.238]      // while-condition  =>  TRUE
[15:15:55.238]      // while "1"  (timeout="200")
[15:15:55.239]      // while-condition  =>  TRUE
[15:15:55.239]      // while "1"  (timeout="200")
[15:15:55.239]      // while  =>  TIMEOUT
[15:15:55.239]      // end while "1"
[15:15:55.239]    </control>
[15:15:55.239]    <control if="canReadPins" while="" timeout="0" info="">
[15:15:55.239]      // if-block "canReadPins"
[15:15:55.239]        // =>  TRUE
[15:15:55.239]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:15:55.239]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:15:55.240]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:15:55.240]        // while-condition  =>  FALSE
[15:15:55.240]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:15:55.240]      </control>
[15:15:55.240]      // end if-block "canReadPins"
[15:15:55.240]    </control>
[15:15:55.240]    <control if="!canReadPins" while="" timeout="0" info="">
[15:15:55.241]      // if-block "!canReadPins"
[15:15:55.241]        // =>  FALSE
[15:15:55.241]      // skip if-block "!canReadPins"
[15:15:55.241]    </control>
[15:15:55.241]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:15:55.241]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:15:55.241]        // =>  TRUE
[15:15:55.241]      <block atomic="false" info="">
[15:15:55.241]        WriteAP(0x00, 0x190008);
[15:15:55.242]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:15:55.242]        WriteAP(0xF0, 0x01);
[15:15:55.243]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:15:55.243]      </block>
[15:15:55.243]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:15:55.243]    </control>
[15:15:55.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:15:55.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:15:55.243]        // =>  FALSE
[15:15:55.243]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:15:55.243]    </control>
[15:15:55.245]    <block atomic="false" info="">
[15:15:55.245]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:15:55.245]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:15:55.245]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:15:55.245]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:15:55.247]      __ap = 0; //lets make sure we reset the access point selection
[15:15:55.247]        // -> [__ap <= 0x00000000]
[15:15:55.248]    </block>
[15:15:55.248]  </sequence>
[15:15:55.248]  
[15:15:55.253]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:15:55.253]  
[15:15:55.254]  <debugvars>
[15:15:55.254]    // Pre-defined
[15:15:55.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:55.254]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:15:55.254]    __dp=0x00000000
[15:15:55.254]    __ap=0x00000000
[15:15:55.254]    __traceout=0x00000000      (Trace Disabled)
[15:15:55.254]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:55.254]    __FlashAddr=0x00000000
[15:15:55.254]    __FlashLen=0x00000000
[15:15:55.255]    __FlashArg=0x00000000
[15:15:55.255]    __FlashOp=0x00000000
[15:15:55.255]    __Result=0x00000000
[15:15:55.255]  </debugvars>
[15:15:55.255]  
[15:15:55.255]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:15:55.255]    <block atomic="false" info="">
[15:15:55.255]      __var deviceID = 0;
[15:15:55.255]        // -> [deviceID <= 0x00000000]
[15:15:55.255]      __var version = 0;
[15:15:55.255]        // -> [version <= 0x00000000]
[15:15:55.255]      __var partNum = 0;
[15:15:55.255]        // -> [partNum <= 0x00000000]
[15:15:55.255]      __var manuf = 0;
[15:15:55.255]        // -> [manuf <= 0x00000000]
[15:15:55.257]      __var isMSPM0G1X0X_G3X0X = 0;
[15:15:55.257]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:15:55.257]      __var isProduction = 0;
[15:15:55.257]        // -> [isProduction <= 0x00000000]
[15:15:55.257]      __var continueId = 0;
[15:15:55.257]        // -> [continueId <= 0x00000000]
[15:15:55.257]      deviceID =   Read32(0x41C40004);
[15:15:55.259]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:15:55.259]        // -> [deviceID <= 0x2BB8802F]
[15:15:55.259]      version = deviceID >> 28;
[15:15:55.259]        // -> [version <= 0x00000002]
[15:15:55.259]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:15:55.259]        // -> [partNum <= 0x0000BB88]
[15:15:55.259]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:15:55.259]        // -> [manuf <= 0x00000017]
[15:15:55.259]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:15:55.259]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:15:55.259]      isProduction = (version > 0);
[15:15:55.259]        // -> [isProduction <= 0x00000001]
[15:15:55.259]    </block>
[15:15:55.259]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:15:55.259]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:15:55.260]        // =>  FALSE
[15:15:55.260]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:15:55.260]    </control>
[15:15:55.260]    <control if="continueId == 4" while="" timeout="0" info="">
[15:15:55.260]      // if-block "continueId == 4"
[15:15:55.260]        // =>  FALSE
[15:15:55.260]      // skip if-block "continueId == 4"
[15:15:55.260]    </control>
[15:15:55.260]    <control if="!isProduction" while="" timeout="0" info="">
[15:15:55.260]      // if-block "!isProduction"
[15:15:55.261]        // =>  FALSE
[15:15:55.261]      // skip if-block "!isProduction"
[15:15:55.261]    </control>
[15:15:55.261]  </sequence>
[15:15:55.261]  
[15:17:30.439]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:17:30.439]  
[15:17:30.439]  <debugvars>
[15:17:30.439]    // Pre-defined
[15:17:30.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:17:30.439]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:17:30.439]    __dp=0x00000000
[15:17:30.439]    __ap=0x00000000
[15:17:30.439]    __traceout=0x00000000      (Trace Disabled)
[15:17:30.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:17:30.440]    __FlashAddr=0x00000000
[15:17:30.440]    __FlashLen=0x00000000
[15:17:30.440]    __FlashArg=0x00000000
[15:17:30.440]    __FlashOp=0x00000000
[15:17:30.440]    __Result=0x00000000
[15:17:30.440]  </debugvars>
[15:17:30.440]  
[15:17:30.440]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:17:30.440]    <block atomic="false" info="">
[15:17:30.440]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:17:30.440]        // -> [isSWJ <= 0x00000001]
[15:17:30.441]      __var hasDormant = __protocol & 0x00020000;
[15:17:30.441]        // -> [hasDormant <= 0x00000000]
[15:17:30.441]      __var protType   = __protocol & 0x0000FFFF;
[15:17:30.441]        // -> [protType <= 0x00000002]
[15:17:30.441]    </block>
[15:17:30.441]    <control if="protType == 1" while="" timeout="0" info="">
[15:17:30.441]      // if-block "protType == 1"
[15:17:30.441]        // =>  FALSE
[15:17:30.441]      // skip if-block "protType == 1"
[15:17:30.441]    </control>
[15:17:30.441]    <control if="protType == 2" while="" timeout="0" info="">
[15:17:30.442]      // if-block "protType == 2"
[15:17:30.442]        // =>  TRUE
[15:17:30.442]      <control if="isSWJ" while="" timeout="0" info="">
[15:17:30.442]        // if-block "isSWJ"
[15:17:30.442]          // =>  TRUE
[15:17:30.442]        <control if="hasDormant" while="" timeout="0" info="">
[15:17:30.442]          // if-block "hasDormant"
[15:17:30.443]            // =>  FALSE
[15:17:30.444]          // skip if-block "hasDormant"
[15:17:30.444]        </control>
[15:17:30.444]        <control if="!hasDormant" while="" timeout="0" info="">
[15:17:30.444]          // if-block "!hasDormant"
[15:17:30.444]            // =>  TRUE
[15:17:30.444]          <block atomic="false" info="">
[15:17:30.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:17:30.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:17:30.445]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:17:30.445]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:17:30.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:17:30.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:17:30.445]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:17:30.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:17:30.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:17:30.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:17:30.446]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:17:30.447]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:17:30.447]          </block>
[15:17:30.447]          // end if-block "!hasDormant"
[15:17:30.447]        </control>
[15:17:30.447]        // end if-block "isSWJ"
[15:17:30.447]      </control>
[15:17:30.447]      <control if="!isSWJ" while="" timeout="0" info="">
[15:17:30.447]        // if-block "!isSWJ"
[15:17:30.448]          // =>  FALSE
[15:17:30.448]        // skip if-block "!isSWJ"
[15:17:30.448]      </control>
[15:17:30.448]      <block atomic="false" info="">
[15:17:30.448]        ReadDP(0x0);
[15:17:30.449]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:17:30.449]      </block>
[15:17:30.449]      // end if-block "protType == 2"
[15:17:30.449]    </control>
[15:17:30.449]  </sequence>
[15:17:30.449]  
[15:17:30.450]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:17:30.450]  
[15:17:30.450]  <debugvars>
[15:17:30.450]    // Pre-defined
[15:17:30.450]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:17:30.450]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:17:30.450]    __dp=0x00000000
[15:17:30.450]    __ap=0x00000000
[15:17:30.450]    __traceout=0x00000000      (Trace Disabled)
[15:17:30.450]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:17:30.451]    __FlashAddr=0x00000000
[15:17:30.451]    __FlashLen=0x00000000
[15:17:30.451]    __FlashArg=0x00000000
[15:17:30.451]    __FlashOp=0x00000000
[15:17:30.451]    __Result=0x00000000
[15:17:30.451]  </debugvars>
[15:17:30.451]  
[15:17:30.451]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:17:30.451]    <block atomic="false" info="">
[15:17:30.452]      __var SW_DP_ABORT       = 0x0;
[15:17:30.452]        // -> [SW_DP_ABORT <= 0x00000000]
[15:17:30.452]      __var DP_CTRL_STAT      = 0x4;
[15:17:30.452]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:17:30.452]      __var DP_SELECT         = 0x8;
[15:17:30.452]        // -> [DP_SELECT <= 0x00000008]
[15:17:30.452]      __var powered_down      = 0;
[15:17:30.452]        // -> [powered_down <= 0x00000000]
[15:17:30.452]      WriteDP(DP_SELECT, 0x00000000);
[15:17:30.453]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:17:30.453]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:17:30.454]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:17:30.454]        // -> [powered_down <= 0x00000001]
[15:17:30.454]    </block>
[15:17:30.454]    <control if="powered_down" while="" timeout="0" info="">
[15:17:30.454]      // if-block "powered_down"
[15:17:30.454]        // =>  TRUE
[15:17:30.454]      <block atomic="false" info="">
[15:17:30.454]        Message(0, "Debug/System power-up request sent");
[15:17:30.456]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:17:30.456]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:17:30.456]      </block>
[15:17:30.457]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:17:30.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:17:30.457]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:17:30.457]        // while-condition  =>  FALSE
[15:17:30.457]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:17:30.457]      </control>
[15:17:30.457]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:17:30.457]        // if-block "(__protocol & 0xFFFF) == 1"
[15:17:30.458]          // =>  FALSE
[15:17:30.458]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:17:30.458]      </control>
[15:17:30.458]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:17:30.458]        // if-block "(__protocol & 0xFFFF) == 2"
[15:17:30.458]          // =>  TRUE
[15:17:30.458]        <block atomic="false" info="">
[15:17:30.458]          Message(0, "executing SWD power up");
[15:17:30.460]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:17:30.460]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:17:30.461]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:17:30.462]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:17:30.462]        </block>
[15:17:30.462]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:17:30.462]      </control>
[15:17:30.462]      // end if-block "powered_down"
[15:17:30.463]    </control>
[15:17:30.463]    <block atomic="false" info="">
[15:17:30.463]      __var DEBUG_PORT_VAL    = 0;
[15:17:30.463]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:17:30.463]      __var ACCESS_POINT_VAL  = 0;
[15:17:30.463]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:17:30.463]      __ap = 1; 
[15:17:30.463]        // -> [__ap <= 0x00000001]
[15:17:30.463]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:17:30.464]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:17:30.465]      __ap = 4;
[15:17:30.465]        // -> [__ap <= 0x00000004]
[15:17:30.465]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:17:30.466]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:17:30.466]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:17:30.466]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:17:30.468]    </block>
[15:17:30.468]    <block atomic="false" info="">
[15:17:30.468]      __var nReset = 0x80;
[15:17:30.468]        // -> [nReset <= 0x00000080]
[15:17:30.468]      __var canReadPins = 0;
[15:17:30.469]        // -> [canReadPins <= 0x00000000]
[15:17:30.469]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:17:30.469]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:17:30.469]        // -> [canReadPins <= 0x00000001]
[15:17:30.469]    </block>
[15:17:30.469]    <control if="" while="1" timeout="200" info="">
[15:17:30.470]      // while "1"  (timeout="200")
[15:17:30.470]      // while-condition  =>  TRUE
[15:17:30.470]      // while "1"  (timeout="200")
[15:17:30.470]      // while-condition  =>  TRUE
[15:17:30.470]      // while "1"  (timeout="200")
[15:17:30.470]      // while-condition  =>  TRUE
[15:17:30.470]      // while "1"  (timeout="200")
[15:17:30.470]      // while-condition  =>  TRUE
[15:17:30.470]      // while "1"  (timeout="200")
[15:17:30.470]      // while-condition  =>  TRUE
[15:17:30.470]      // while "1"  (timeout="200")
[15:17:30.471]      // while-condition  =>  TRUE
[15:17:30.471]      // while "1"  (timeout="200")
[15:17:30.471]      // while-condition  =>  TRUE
[15:17:30.471]      // while "1"  (timeout="200")
[15:17:30.471]      // while-condition  =>  TRUE
[15:17:30.471]      // while "1"  (timeout="200")
[15:17:30.471]      // while-condition  =>  TRUE
[15:17:30.471]      // while "1"  (timeout="200")
[15:17:30.471]      // while-condition  =>  TRUE
[15:17:30.471]      // while "1"  (timeout="200")
[15:17:30.472]      // while-condition  =>  TRUE
[15:17:30.472]      // while "1"  (timeout="200")
[15:17:30.472]      // while-condition  =>  TRUE
[15:17:30.472]      // while "1"  (timeout="200")
[15:17:30.472]      // while-condition  =>  TRUE
[15:17:30.472]      // while "1"  (timeout="200")
[15:17:30.472]      // while-condition  =>  TRUE
[15:17:30.472]      // while "1"  (timeout="200")
[15:17:30.472]      // while-condition  =>  TRUE
[15:17:30.472]      // while "1"  (timeout="200")
[15:17:30.472]      // while-condition  =>  TRUE
[15:17:30.473]      // while "1"  (timeout="200")
[15:17:30.473]      // while  =>  TIMEOUT
[15:17:30.473]      // end while "1"
[15:17:30.473]    </control>
[15:17:30.473]    <control if="canReadPins" while="" timeout="0" info="">
[15:17:30.473]      // if-block "canReadPins"
[15:17:30.473]        // =>  TRUE
[15:17:30.474]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:17:30.474]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:17:30.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:17:30.474]        // while-condition  =>  FALSE
[15:17:30.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:17:30.474]      </control>
[15:17:30.474]      // end if-block "canReadPins"
[15:17:30.474]    </control>
[15:17:30.475]    <control if="!canReadPins" while="" timeout="0" info="">
[15:17:30.475]      // if-block "!canReadPins"
[15:17:30.475]        // =>  FALSE
[15:17:30.475]      // skip if-block "!canReadPins"
[15:17:30.475]    </control>
[15:17:30.475]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:17:30.475]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:17:30.475]        // =>  TRUE
[15:17:30.475]      <block atomic="false" info="">
[15:17:30.476]        WriteAP(0x00, 0x190008);
[15:17:30.476]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:17:30.476]        WriteAP(0xF0, 0x01);
[15:17:30.477]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:17:30.478]      </block>
[15:17:30.478]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:17:30.478]    </control>
[15:17:30.478]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:17:30.478]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:17:30.478]        // =>  FALSE
[15:17:30.478]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:17:30.478]    </control>
[15:17:30.478]    <block atomic="false" info="">
[15:17:30.478]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:17:30.479]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:17:30.479]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:17:30.479]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:17:30.481]      __ap = 0; //lets make sure we reset the access point selection
[15:17:30.481]        // -> [__ap <= 0x00000000]
[15:17:30.481]    </block>
[15:17:30.481]  </sequence>
[15:17:30.481]  
[15:17:30.487]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:17:30.487]  
[15:17:30.488]  <debugvars>
[15:17:30.488]    // Pre-defined
[15:17:30.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:17:30.488]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:17:30.488]    __dp=0x00000000
[15:17:30.488]    __ap=0x00000000
[15:17:30.488]    __traceout=0x00000000      (Trace Disabled)
[15:17:30.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:17:30.489]    __FlashAddr=0x00000000
[15:17:30.489]    __FlashLen=0x00000000
[15:17:30.489]    __FlashArg=0x00000000
[15:17:30.489]    __FlashOp=0x00000000
[15:17:30.489]    __Result=0x00000000
[15:17:30.489]  </debugvars>
[15:17:30.489]  
[15:17:30.489]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:17:30.489]    <block atomic="false" info="">
[15:17:30.490]      __var deviceID = 0;
[15:17:30.490]        // -> [deviceID <= 0x00000000]
[15:17:30.490]      __var version = 0;
[15:17:30.490]        // -> [version <= 0x00000000]
[15:17:30.490]      __var partNum = 0;
[15:17:30.490]        // -> [partNum <= 0x00000000]
[15:17:30.490]      __var manuf = 0;
[15:17:30.490]        // -> [manuf <= 0x00000000]
[15:17:30.490]      __var isMSPM0G1X0X_G3X0X = 0;
[15:17:30.490]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:17:30.491]      __var isProduction = 0;
[15:17:30.491]        // -> [isProduction <= 0x00000000]
[15:17:30.491]      __var continueId = 0;
[15:17:30.491]        // -> [continueId <= 0x00000000]
[15:17:30.491]      deviceID =   Read32(0x41C40004);
[15:17:30.492]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:17:30.492]        // -> [deviceID <= 0x2BB8802F]
[15:17:30.493]      version = deviceID >> 28;
[15:17:30.493]        // -> [version <= 0x00000002]
[15:17:30.493]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:17:30.493]        // -> [partNum <= 0x0000BB88]
[15:17:30.493]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:17:30.493]        // -> [manuf <= 0x00000017]
[15:17:30.493]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:17:30.494]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:17:30.494]      isProduction = (version > 0);
[15:17:30.494]        // -> [isProduction <= 0x00000001]
[15:17:30.494]    </block>
[15:17:30.494]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:17:30.494]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:17:30.494]        // =>  FALSE
[15:17:30.494]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:17:30.495]    </control>
[15:17:30.495]    <control if="continueId == 4" while="" timeout="0" info="">
[15:17:30.495]      // if-block "continueId == 4"
[15:17:30.495]        // =>  FALSE
[15:17:30.495]      // skip if-block "continueId == 4"
[15:17:30.495]    </control>
[15:17:30.496]    <control if="!isProduction" while="" timeout="0" info="">
[15:17:30.496]      // if-block "!isProduction"
[15:17:30.496]        // =>  FALSE
[15:17:30.496]      // skip if-block "!isProduction"
[15:17:30.496]    </control>
[15:17:30.496]  </sequence>
[15:17:30.496]  
[18:18:21.203]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:18:21.203]  
[18:18:21.213]  <debugvars>
[18:18:21.213]    // Pre-defined
[18:18:21.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:18:21.213]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:18:21.214]    __dp=0x00000000
[18:18:21.214]    __ap=0x00000000
[18:18:21.214]    __traceout=0x00000000      (Trace Disabled)
[18:18:21.214]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:18:21.214]    __FlashAddr=0x00000000
[18:18:21.214]    __FlashLen=0x00000000
[18:18:21.214]    __FlashArg=0x00000000
[18:18:21.214]    __FlashOp=0x00000000
[18:18:21.214]    __Result=0x00000000
[18:18:21.214]  </debugvars>
[18:18:21.214]  
[18:18:21.214]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:18:21.214]    <block atomic="false" info="">
[18:18:21.214]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:18:21.214]        // -> [isSWJ <= 0x00000001]
[18:18:21.214]      __var hasDormant = __protocol & 0x00020000;
[18:18:21.214]        // -> [hasDormant <= 0x00000000]
[18:18:21.214]      __var protType   = __protocol & 0x0000FFFF;
[18:18:21.214]        // -> [protType <= 0x00000002]
[18:18:21.214]    </block>
[18:18:21.214]    <control if="protType == 1" while="" timeout="0" info="">
[18:18:21.214]      // if-block "protType == 1"
[18:18:21.214]        // =>  FALSE
[18:18:21.214]      // skip if-block "protType == 1"
[18:18:21.214]    </control>
[18:18:21.214]    <control if="protType == 2" while="" timeout="0" info="">
[18:18:21.214]      // if-block "protType == 2"
[18:18:21.214]        // =>  TRUE
[18:18:21.214]      <control if="isSWJ" while="" timeout="0" info="">
[18:18:21.214]        // if-block "isSWJ"
[18:18:21.214]          // =>  TRUE
[18:18:21.214]        <control if="hasDormant" while="" timeout="0" info="">
[18:18:21.214]          // if-block "hasDormant"
[18:18:21.214]            // =>  FALSE
[18:18:21.214]          // skip if-block "hasDormant"
[18:18:21.214]        </control>
[18:18:21.214]        <control if="!hasDormant" while="" timeout="0" info="">
[18:18:21.214]          // if-block "!hasDormant"
[18:18:21.214]            // =>  TRUE
[18:18:21.214]          <block atomic="false" info="">
[18:18:21.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:18:21.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:18:21.218]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:18:21.218]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:18:21.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:18:21.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:18:21.218]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:18:21.218]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:18:21.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:18:21.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:18:21.218]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:18:21.218]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:18:21.218]          </block>
[18:18:21.218]          // end if-block "!hasDormant"
[18:18:21.218]        </control>
[18:18:21.218]        // end if-block "isSWJ"
[18:18:21.218]      </control>
[18:18:21.218]      <control if="!isSWJ" while="" timeout="0" info="">
[18:18:21.218]        // if-block "!isSWJ"
[18:18:21.218]          // =>  FALSE
[18:18:21.218]        // skip if-block "!isSWJ"
[18:18:21.218]      </control>
[18:18:21.218]      <block atomic="false" info="">
[18:18:21.218]        ReadDP(0x0);
[18:18:21.218]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:18:21.218]      </block>
[18:18:21.223]      // end if-block "protType == 2"
[18:18:21.223]    </control>
[18:18:21.223]  </sequence>
[18:18:21.223]  
[18:18:21.223]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:18:21.223]  
[18:18:21.223]  <debugvars>
[18:18:21.223]    // Pre-defined
[18:18:21.223]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:18:21.223]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:18:21.223]    __dp=0x00000000
[18:18:21.223]    __ap=0x00000000
[18:18:21.223]    __traceout=0x00000000      (Trace Disabled)
[18:18:21.223]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:18:21.223]    __FlashAddr=0x00000000
[18:18:21.223]    __FlashLen=0x00000000
[18:18:21.223]    __FlashArg=0x00000000
[18:18:21.223]    __FlashOp=0x00000000
[18:18:21.223]    __Result=0x00000000
[18:18:21.223]  </debugvars>
[18:18:21.223]  
[18:18:21.223]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:18:21.223]    <block atomic="false" info="">
[18:18:21.223]      __var SW_DP_ABORT       = 0x0;
[18:18:21.223]        // -> [SW_DP_ABORT <= 0x00000000]
[18:18:21.223]      __var DP_CTRL_STAT      = 0x4;
[18:18:21.223]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:18:21.223]      __var DP_SELECT         = 0x8;
[18:18:21.223]        // -> [DP_SELECT <= 0x00000008]
[18:18:21.223]      __var powered_down      = 0;
[18:18:21.223]        // -> [powered_down <= 0x00000000]
[18:18:21.223]      WriteDP(DP_SELECT, 0x00000000);
[18:18:21.223]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:18:21.223]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:18:21.223]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:18:21.223]        // -> [powered_down <= 0x00000001]
[18:18:21.223]    </block>
[18:18:21.223]    <control if="powered_down" while="" timeout="0" info="">
[18:18:21.223]      // if-block "powered_down"
[18:18:21.223]        // =>  TRUE
[18:18:21.223]      <block atomic="false" info="">
[18:18:21.228]        Message(0, "Debug/System power-up request sent");
[18:18:21.228]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:18:21.228]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:18:21.228]      </block>
[18:18:21.228]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:18:21.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:18:21.228]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:18:21.228]        // while-condition  =>  FALSE
[18:18:21.228]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:18:21.228]      </control>
[18:18:21.228]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:18:21.228]        // if-block "(__protocol & 0xFFFF) == 1"
[18:18:21.228]          // =>  FALSE
[18:18:21.228]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:18:21.228]      </control>
[18:18:21.228]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:18:21.228]        // if-block "(__protocol & 0xFFFF) == 2"
[18:18:21.228]          // =>  TRUE
[18:18:21.228]        <block atomic="false" info="">
[18:18:21.228]          Message(0, "executing SWD power up");
[18:18:21.233]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:18:21.233]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:18:21.233]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:18:21.233]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:18:21.233]        </block>
[18:18:21.233]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:18:21.233]      </control>
[18:18:21.233]      // end if-block "powered_down"
[18:18:21.233]    </control>
[18:18:21.233]    <block atomic="false" info="">
[18:18:21.233]      __var DEBUG_PORT_VAL    = 0;
[18:18:21.233]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:18:21.233]      __var ACCESS_POINT_VAL  = 0;
[18:18:21.233]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:18:21.233]      __ap = 1; 
[18:18:21.233]        // -> [__ap <= 0x00000001]
[18:18:21.233]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:18:21.233]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:18:21.233]      __ap = 4;
[18:18:21.233]        // -> [__ap <= 0x00000004]
[18:18:21.238]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:18:21.238]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:18:21.238]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:18:21.238]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:18:21.238]    </block>
[18:18:21.238]    <block atomic="false" info="">
[18:18:21.238]      __var nReset = 0x80;
[18:18:21.238]        // -> [nReset <= 0x00000080]
[18:18:21.238]      __var canReadPins = 0;
[18:18:21.238]        // -> [canReadPins <= 0x00000000]
[18:18:21.238]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:18:21.238]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:18:21.238]        // -> [canReadPins <= 0x00000001]
[18:18:21.238]    </block>
[18:18:21.238]    <control if="" while="1" timeout="200" info="">
[18:18:21.238]      // while "1"  (timeout="200")
[18:18:21.238]      // while-condition  =>  TRUE
[18:18:21.238]      // while "1"  (timeout="200")
[18:18:21.238]      // while-condition  =>  TRUE
[18:18:21.238]      // while "1"  (timeout="200")
[18:18:21.238]      // while-condition  =>  TRUE
[18:18:21.238]      // while "1"  (timeout="200")
[18:18:21.238]      // while-condition  =>  TRUE
[18:18:21.238]      // while "1"  (timeout="200")
[18:18:21.243]      // while-condition  =>  TRUE
[18:18:21.243]      // while "1"  (timeout="200")
[18:18:21.243]      // while  =>  TIMEOUT
[18:18:21.243]      // end while "1"
[18:18:21.243]    </control>
[18:18:21.243]    <control if="canReadPins" while="" timeout="0" info="">
[18:18:21.243]      // if-block "canReadPins"
[18:18:21.243]        // =>  TRUE
[18:18:21.243]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:18:21.243]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:18:21.243]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:18:21.243]        // while-condition  =>  FALSE
[18:18:21.243]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:18:21.243]      </control>
[18:18:21.245]      // end if-block "canReadPins"
[18:18:21.245]    </control>
[18:18:21.245]    <control if="!canReadPins" while="" timeout="0" info="">
[18:18:21.245]      // if-block "!canReadPins"
[18:18:21.245]        // =>  FALSE
[18:18:21.245]      // skip if-block "!canReadPins"
[18:18:21.245]    </control>
[18:18:21.245]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:18:21.245]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:18:21.245]        // =>  TRUE
[18:18:21.245]      <block atomic="false" info="">
[18:18:21.245]        WriteAP(0x00, 0x190008);
[18:18:21.245]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:18:21.245]        WriteAP(0xF0, 0x01);
[18:18:21.247]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:18:21.247]      </block>
[18:18:21.247]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:18:21.247]    </control>
[18:18:21.247]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:18:21.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:18:21.247]        // =>  FALSE
[18:18:21.247]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:18:21.247]    </control>
[18:18:21.247]    <block atomic="false" info="">
[18:18:21.247]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:18:21.247]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:18:21.247]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:18:21.247]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:18:21.247]      __ap = 0; //lets make sure we reset the access point selection
[18:18:21.247]        // -> [__ap <= 0x00000000]
[18:18:21.247]    </block>
[18:18:21.247]  </sequence>
[18:18:21.247]  
[18:18:21.253]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:18:21.253]  
[18:18:21.253]  <debugvars>
[18:18:21.253]    // Pre-defined
[18:18:21.253]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:18:21.253]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:18:21.253]    __dp=0x00000000
[18:18:21.253]    __ap=0x00000000
[18:18:21.253]    __traceout=0x00000000      (Trace Disabled)
[18:18:21.253]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:18:21.253]    __FlashAddr=0x00000000
[18:18:21.253]    __FlashLen=0x00000000
[18:18:21.253]    __FlashArg=0x00000000
[18:18:21.253]    __FlashOp=0x00000000
[18:18:21.253]    __Result=0x00000000
[18:18:21.253]  </debugvars>
[18:18:21.253]  
[18:18:21.253]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:18:21.253]    <block atomic="false" info="">
[18:18:21.253]      __var deviceID = 0;
[18:18:21.253]        // -> [deviceID <= 0x00000000]
[18:18:21.253]      __var version = 0;
[18:18:21.253]        // -> [version <= 0x00000000]
[18:18:21.253]      __var partNum = 0;
[18:18:21.261]        // -> [partNum <= 0x00000000]
[18:18:21.261]      __var manuf = 0;
[18:18:21.261]        // -> [manuf <= 0x00000000]
[18:18:21.261]      __var isMSPM0G1X0X_G3X0X = 0;
[18:18:21.261]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:18:21.261]      __var isProduction = 0;
[18:18:21.261]        // -> [isProduction <= 0x00000000]
[18:18:21.261]      __var continueId = 0;
[18:18:21.261]        // -> [continueId <= 0x00000000]
[18:18:21.261]      deviceID =   Read32(0x41C40004);
[18:18:21.263]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:18:21.263]        // -> [deviceID <= 0x2BB8802F]
[18:18:21.263]      version = deviceID >> 28;
[18:18:21.263]        // -> [version <= 0x00000002]
[18:18:21.263]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:18:21.263]        // -> [partNum <= 0x0000BB88]
[18:18:21.263]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:18:21.263]        // -> [manuf <= 0x00000017]
[18:18:21.263]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:18:21.263]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:18:21.263]      isProduction = (version > 0);
[18:18:21.265]        // -> [isProduction <= 0x00000001]
[18:18:21.265]    </block>
[18:18:21.265]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:18:21.265]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:18:21.265]        // =>  FALSE
[18:18:21.265]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:18:21.265]    </control>
[18:18:21.265]    <control if="continueId == 4" while="" timeout="0" info="">
[18:18:21.265]      // if-block "continueId == 4"
[18:18:21.265]        // =>  FALSE
[18:18:21.265]      // skip if-block "continueId == 4"
[18:18:21.265]    </control>
[18:18:21.266]    <control if="!isProduction" while="" timeout="0" info="">
[18:18:21.266]      // if-block "!isProduction"
[18:18:21.266]        // =>  FALSE
[18:18:21.266]      // skip if-block "!isProduction"
[18:18:21.266]    </control>
[18:18:21.266]  </sequence>
[18:18:21.266]  
[18:20:05.202]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:20:05.202]  
[18:20:05.202]  <debugvars>
[18:20:05.202]    // Pre-defined
[18:20:05.202]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:20:05.202]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:20:05.202]    __dp=0x00000000
[18:20:05.202]    __ap=0x00000000
[18:20:05.202]    __traceout=0x00000000      (Trace Disabled)
[18:20:05.202]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:20:05.202]    __FlashAddr=0x00000000
[18:20:05.202]    __FlashLen=0x00000000
[18:20:05.202]    __FlashArg=0x00000000
[18:20:05.202]    __FlashOp=0x00000000
[18:20:05.202]    __Result=0x00000000
[18:20:05.202]  </debugvars>
[18:20:05.202]  
[18:20:05.202]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:20:05.202]    <block atomic="false" info="">
[18:20:05.202]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:20:05.202]        // -> [isSWJ <= 0x00000001]
[18:20:05.202]      __var hasDormant = __protocol & 0x00020000;
[18:20:05.202]        // -> [hasDormant <= 0x00000000]
[18:20:05.202]      __var protType   = __protocol & 0x0000FFFF;
[18:20:05.202]        // -> [protType <= 0x00000002]
[18:20:05.202]    </block>
[18:20:05.202]    <control if="protType == 1" while="" timeout="0" info="">
[18:20:05.202]      // if-block "protType == 1"
[18:20:05.202]        // =>  FALSE
[18:20:05.202]      // skip if-block "protType == 1"
[18:20:05.202]    </control>
[18:20:05.202]    <control if="protType == 2" while="" timeout="0" info="">
[18:20:05.202]      // if-block "protType == 2"
[18:20:05.202]        // =>  TRUE
[18:20:05.202]      <control if="isSWJ" while="" timeout="0" info="">
[18:20:05.202]        // if-block "isSWJ"
[18:20:05.202]          // =>  TRUE
[18:20:05.202]        <control if="hasDormant" while="" timeout="0" info="">
[18:20:05.202]          // if-block "hasDormant"
[18:20:05.202]            // =>  FALSE
[18:20:05.202]          // skip if-block "hasDormant"
[18:20:05.202]        </control>
[18:20:05.212]        <control if="!hasDormant" while="" timeout="0" info="">
[18:20:05.212]          // if-block "!hasDormant"
[18:20:05.212]            // =>  TRUE
[18:20:05.212]          <block atomic="false" info="">
[18:20:05.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:20:05.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:20:05.212]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:20:05.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:20:05.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:20:05.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:20:05.212]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:20:05.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:20:05.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:20:05.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:20:05.212]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:20:05.212]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:20:05.212]          </block>
[18:20:05.212]          // end if-block "!hasDormant"
[18:20:05.212]        </control>
[18:20:05.212]        // end if-block "isSWJ"
[18:20:05.212]      </control>
[18:20:05.212]      <control if="!isSWJ" while="" timeout="0" info="">
[18:20:05.212]        // if-block "!isSWJ"
[18:20:05.212]          // =>  FALSE
[18:20:05.212]        // skip if-block "!isSWJ"
[18:20:05.212]      </control>
[18:20:05.212]      <block atomic="false" info="">
[18:20:05.212]        ReadDP(0x0);
[18:20:05.212]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:20:05.212]      </block>
[18:20:05.212]      // end if-block "protType == 2"
[18:20:05.212]    </control>
[18:20:05.212]  </sequence>
[18:20:05.212]  
[18:20:05.212]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:20:05.212]  
[18:20:05.212]  <debugvars>
[18:20:05.212]    // Pre-defined
[18:20:05.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:20:05.212]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:20:05.212]    __dp=0x00000000
[18:20:05.212]    __ap=0x00000000
[18:20:05.212]    __traceout=0x00000000      (Trace Disabled)
[18:20:05.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:20:05.212]    __FlashAddr=0x00000000
[18:20:05.212]    __FlashLen=0x00000000
[18:20:05.212]    __FlashArg=0x00000000
[18:20:05.212]    __FlashOp=0x00000000
[18:20:05.212]    __Result=0x00000000
[18:20:05.212]  </debugvars>
[18:20:05.212]  
[18:20:05.212]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:20:05.212]    <block atomic="false" info="">
[18:20:05.212]      __var SW_DP_ABORT       = 0x0;
[18:20:05.212]        // -> [SW_DP_ABORT <= 0x00000000]
[18:20:05.212]      __var DP_CTRL_STAT      = 0x4;
[18:20:05.212]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:20:05.212]      __var DP_SELECT         = 0x8;
[18:20:05.212]        // -> [DP_SELECT <= 0x00000008]
[18:20:05.212]      __var powered_down      = 0;
[18:20:05.212]        // -> [powered_down <= 0x00000000]
[18:20:05.212]      WriteDP(DP_SELECT, 0x00000000);
[18:20:05.212]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:20:05.212]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:20:05.222]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:20:05.222]        // -> [powered_down <= 0x00000001]
[18:20:05.222]    </block>
[18:20:05.222]    <control if="powered_down" while="" timeout="0" info="">
[18:20:05.222]      // if-block "powered_down"
[18:20:05.222]        // =>  TRUE
[18:20:05.222]      <block atomic="false" info="">
[18:20:05.222]        Message(0, "Debug/System power-up request sent");
[18:20:05.222]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:20:05.222]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:20:05.222]      </block>
[18:20:05.222]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:20:05.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:20:05.222]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:20:05.222]        // while-condition  =>  FALSE
[18:20:05.222]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:20:05.222]      </control>
[18:20:05.222]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:20:05.222]        // if-block "(__protocol & 0xFFFF) == 1"
[18:20:05.222]          // =>  FALSE
[18:20:05.222]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:20:05.222]      </control>
[18:20:05.222]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:20:05.222]        // if-block "(__protocol & 0xFFFF) == 2"
[18:20:05.222]          // =>  TRUE
[18:20:05.222]        <block atomic="false" info="">
[18:20:05.222]          Message(0, "executing SWD power up");
[18:20:05.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:20:05.222]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:20:05.222]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:20:05.222]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:20:05.222]        </block>
[18:20:05.222]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:20:05.222]      </control>
[18:20:05.222]      // end if-block "powered_down"
[18:20:05.222]    </control>
[18:20:05.222]    <block atomic="false" info="">
[18:20:05.222]      __var DEBUG_PORT_VAL    = 0;
[18:20:05.232]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:20:05.232]      __var ACCESS_POINT_VAL  = 0;
[18:20:05.232]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:20:05.232]      __ap = 1; 
[18:20:05.232]        // -> [__ap <= 0x00000001]
[18:20:05.232]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:20:05.233]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:20:05.233]      __ap = 4;
[18:20:05.233]        // -> [__ap <= 0x00000004]
[18:20:05.233]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:20:05.235]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:20:05.236]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:20:05.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:20:05.236]    </block>
[18:20:05.236]    <block atomic="false" info="">
[18:20:05.236]      __var nReset = 0x80;
[18:20:05.236]        // -> [nReset <= 0x00000080]
[18:20:05.236]      __var canReadPins = 0;
[18:20:05.236]        // -> [canReadPins <= 0x00000000]
[18:20:05.238]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:20:05.238]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:20:05.238]        // -> [canReadPins <= 0x00000001]
[18:20:05.238]    </block>
[18:20:05.238]    <control if="" while="1" timeout="200" info="">
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.238]      // while "1"  (timeout="200")
[18:20:05.238]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.242]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.242]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.242]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.242]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.242]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.242]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.242]      // while-condition  =>  TRUE
[18:20:05.242]      // while "1"  (timeout="200")
[18:20:05.244]      // while-condition  =>  TRUE
[18:20:05.244]      // while "1"  (timeout="200")
[18:20:05.244]      // while-condition  =>  TRUE
[18:20:05.244]      // while "1"  (timeout="200")
[18:20:05.244]      // while-condition  =>  TRUE
[18:20:05.244]      // while "1"  (timeout="200")
[18:20:05.244]      // while-condition  =>  TRUE
[18:20:05.244]      // while "1"  (timeout="200")
[18:20:05.244]      // while-condition  =>  TRUE
[18:20:05.244]      // while "1"  (timeout="200")
[18:20:05.244]      // while-condition  =>  TRUE
[18:20:05.244]      // while "1"  (timeout="200")
[18:20:05.244]      // while-condition  =>  TRUE
[18:20:05.244]      // while "1"  (timeout="200")
[18:20:05.245]      // while-condition  =>  TRUE
[18:20:05.245]      // while "1"  (timeout="200")
[18:20:05.245]      // while-condition  =>  TRUE
[18:20:05.245]      // while "1"  (timeout="200")
[18:20:05.245]      // while-condition  =>  TRUE
[18:20:05.245]      // while "1"  (timeout="200")
[18:20:05.245]      // while-condition  =>  TRUE
[18:20:05.245]      // while "1"  (timeout="200")
[18:20:05.245]      // while-condition  =>  TRUE
[18:20:05.245]      // while "1"  (timeout="200")
[18:20:05.245]      // while-condition  =>  TRUE
[18:20:05.245]      // while "1"  (timeout="200")
[18:20:05.246]      // while-condition  =>  TRUE
[18:20:05.246]      // while "1"  (timeout="200")
[18:20:05.246]      // while-condition  =>  TRUE
[18:20:05.246]      // while "1"  (timeout="200")
[18:20:05.246]      // while-condition  =>  TRUE
[18:20:05.246]      // while "1"  (timeout="200")
[18:20:05.246]      // while-condition  =>  TRUE
[18:20:05.246]      // while "1"  (timeout="200")
[18:20:05.246]      // while-condition  =>  TRUE
[18:20:05.246]      // while "1"  (timeout="200")
[18:20:05.246]      // while-condition  =>  TRUE
[18:20:05.246]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.248]      // while-condition  =>  TRUE
[18:20:05.248]      // while "1"  (timeout="200")
[18:20:05.250]      // while-condition  =>  TRUE
[18:20:05.250]      // while "1"  (timeout="200")
[18:20:05.250]      // while-condition  =>  TRUE
[18:20:05.250]      // while "1"  (timeout="200")
[18:20:05.250]      // while-condition  =>  TRUE
[18:20:05.250]      // while "1"  (timeout="200")
[18:20:05.250]      // while-condition  =>  TRUE
[18:20:05.250]      // while "1"  (timeout="200")
[18:20:05.250]      // while-condition  =>  TRUE
[18:20:05.250]      // while "1"  (timeout="200")
[18:20:05.250]      // while-condition  =>  TRUE
[18:20:05.250]      // while "1"  (timeout="200")
[18:20:05.250]      // while-condition  =>  TRUE
[18:20:05.251]      // while "1"  (timeout="200")
[18:20:05.251]      // while-condition  =>  TRUE
[18:20:05.251]      // while "1"  (timeout="200")
[18:20:05.251]      // while-condition  =>  TRUE
[18:20:05.251]      // while "1"  (timeout="200")
[18:20:05.251]      // while-condition  =>  TRUE
[18:20:05.252]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.253]      // while "1"  (timeout="200")
[18:20:05.253]      // while-condition  =>  TRUE
[18:20:05.255]      // while "1"  (timeout="200")
[18:20:05.255]      // while  =>  TIMEOUT
[18:20:05.255]      // end while "1"
[18:20:05.255]    </control>
[18:20:05.255]    <control if="canReadPins" while="" timeout="0" info="">
[18:20:05.255]      // if-block "canReadPins"
[18:20:05.255]        // =>  TRUE
[18:20:05.255]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:20:05.255]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:20:05.255]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:20:05.255]        // while-condition  =>  FALSE
[18:20:05.256]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:20:05.256]      </control>
[18:20:05.256]      // end if-block "canReadPins"
[18:20:05.256]    </control>
[18:20:05.256]    <control if="!canReadPins" while="" timeout="0" info="">
[18:20:05.256]      // if-block "!canReadPins"
[18:20:05.256]        // =>  FALSE
[18:20:05.256]      // skip if-block "!canReadPins"
[18:20:05.256]    </control>
[18:20:05.256]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:20:05.256]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:20:05.256]        // =>  TRUE
[18:20:05.256]      <block atomic="false" info="">
[18:20:05.256]        WriteAP(0x00, 0x190008);
[18:20:05.257]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:20:05.257]        WriteAP(0xF0, 0x01);
[18:20:05.259]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:20:05.259]      </block>
[18:20:05.259]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:20:05.259]    </control>
[18:20:05.259]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:20:05.259]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:20:05.259]        // =>  FALSE
[18:20:05.259]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:20:05.259]    </control>
[18:20:05.259]    <block atomic="false" info="">
[18:20:05.259]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:20:05.260]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:20:05.260]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:20:05.260]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:20:05.263]      __ap = 0; //lets make sure we reset the access point selection
[18:20:05.263]        // -> [__ap <= 0x00000000]
[18:20:05.263]    </block>
[18:20:05.263]  </sequence>
[18:20:05.263]  
[18:20:05.269]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:20:05.269]  
[18:20:05.270]  <debugvars>
[18:20:05.270]    // Pre-defined
[18:20:05.270]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:20:05.270]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:20:05.270]    __dp=0x00000000
[18:20:05.270]    __ap=0x00000000
[18:20:05.270]    __traceout=0x00000000      (Trace Disabled)
[18:20:05.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:20:05.270]    __FlashAddr=0x00000000
[18:20:05.270]    __FlashLen=0x00000000
[18:20:05.270]    __FlashArg=0x00000000
[18:20:05.270]    __FlashOp=0x00000000
[18:20:05.270]    __Result=0x00000000
[18:20:05.270]  </debugvars>
[18:20:05.270]  
[18:20:05.270]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:20:05.270]    <block atomic="false" info="">
[18:20:05.272]      __var deviceID = 0;
[18:20:05.272]        // -> [deviceID <= 0x00000000]
[18:20:05.272]      __var version = 0;
[18:20:05.272]        // -> [version <= 0x00000000]
[18:20:05.272]      __var partNum = 0;
[18:20:05.272]        // -> [partNum <= 0x00000000]
[18:20:05.272]      __var manuf = 0;
[18:20:05.272]        // -> [manuf <= 0x00000000]
[18:20:05.272]      __var isMSPM0G1X0X_G3X0X = 0;
[18:20:05.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:20:05.272]      __var isProduction = 0;
[18:20:05.272]        // -> [isProduction <= 0x00000000]
[18:20:05.272]      __var continueId = 0;
[18:20:05.272]        // -> [continueId <= 0x00000000]
[18:20:05.272]      deviceID =   Read32(0x41C40004);
[18:20:05.274]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:20:05.274]        // -> [deviceID <= 0x2BB8802F]
[18:20:05.274]      version = deviceID >> 28;
[18:20:05.274]        // -> [version <= 0x00000002]
[18:20:05.274]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:20:05.274]        // -> [partNum <= 0x0000BB88]
[18:20:05.274]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:20:05.274]        // -> [manuf <= 0x00000017]
[18:20:05.276]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:20:05.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:20:05.276]      isProduction = (version > 0);
[18:20:05.276]        // -> [isProduction <= 0x00000001]
[18:20:05.276]    </block>
[18:20:05.276]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:20:05.276]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:20:05.276]        // =>  FALSE
[18:20:05.276]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:20:05.276]    </control>
[18:20:05.276]    <control if="continueId == 4" while="" timeout="0" info="">
[18:20:05.276]      // if-block "continueId == 4"
[18:20:05.276]        // =>  FALSE
[18:20:05.276]      // skip if-block "continueId == 4"
[18:20:05.276]    </control>
[18:20:05.276]    <control if="!isProduction" while="" timeout="0" info="">
[18:20:05.276]      // if-block "!isProduction"
[18:20:05.276]        // =>  FALSE
[18:20:05.276]      // skip if-block "!isProduction"
[18:20:05.276]    </control>
[18:20:05.276]  </sequence>
[18:20:05.276]  
[18:22:03.273]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:22:03.273]  
[18:22:03.273]  <debugvars>
[18:22:03.273]    // Pre-defined
[18:22:03.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:22:03.273]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:22:03.273]    __dp=0x00000000
[18:22:03.273]    __ap=0x00000000
[18:22:03.273]    __traceout=0x00000000      (Trace Disabled)
[18:22:03.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:22:03.273]    __FlashAddr=0x00000000
[18:22:03.273]    __FlashLen=0x00000000
[18:22:03.273]    __FlashArg=0x00000000
[18:22:03.273]    __FlashOp=0x00000000
[18:22:03.273]    __Result=0x00000000
[18:22:03.273]  </debugvars>
[18:22:03.273]  
[18:22:03.273]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:22:03.273]    <block atomic="false" info="">
[18:22:03.273]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:22:03.273]        // -> [isSWJ <= 0x00000001]
[18:22:03.273]      __var hasDormant = __protocol & 0x00020000;
[18:22:03.273]        // -> [hasDormant <= 0x00000000]
[18:22:03.273]      __var protType   = __protocol & 0x0000FFFF;
[18:22:03.273]        // -> [protType <= 0x00000002]
[18:22:03.273]    </block>
[18:22:03.273]    <control if="protType == 1" while="" timeout="0" info="">
[18:22:03.273]      // if-block "protType == 1"
[18:22:03.273]        // =>  FALSE
[18:22:03.273]      // skip if-block "protType == 1"
[18:22:03.273]    </control>
[18:22:03.273]    <control if="protType == 2" while="" timeout="0" info="">
[18:22:03.277]      // if-block "protType == 2"
[18:22:03.277]        // =>  TRUE
[18:22:03.277]      <control if="isSWJ" while="" timeout="0" info="">
[18:22:03.277]        // if-block "isSWJ"
[18:22:03.277]          // =>  TRUE
[18:22:03.277]        <control if="hasDormant" while="" timeout="0" info="">
[18:22:03.277]          // if-block "hasDormant"
[18:22:03.277]            // =>  FALSE
[18:22:03.278]          // skip if-block "hasDormant"
[18:22:03.278]        </control>
[18:22:03.278]        <control if="!hasDormant" while="" timeout="0" info="">
[18:22:03.278]          // if-block "!hasDormant"
[18:22:03.278]            // =>  TRUE
[18:22:03.278]          <block atomic="false" info="">
[18:22:03.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:22:03.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:22:03.279]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:22:03.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:22:03.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:22:03.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:22:03.279]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:22:03.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:22:03.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:22:03.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:22:03.279]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:22:03.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:22:03.279]          </block>
[18:22:03.279]          // end if-block "!hasDormant"
[18:22:03.279]        </control>
[18:22:03.279]        // end if-block "isSWJ"
[18:22:03.279]      </control>
[18:22:03.279]      <control if="!isSWJ" while="" timeout="0" info="">
[18:22:03.279]        // if-block "!isSWJ"
[18:22:03.279]          // =>  FALSE
[18:22:03.279]        // skip if-block "!isSWJ"
[18:22:03.279]      </control>
[18:22:03.279]      <block atomic="false" info="">
[18:22:03.279]        ReadDP(0x0);
[18:22:03.279]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:22:03.279]      </block>
[18:22:03.279]      // end if-block "protType == 2"
[18:22:03.279]    </control>
[18:22:03.279]  </sequence>
[18:22:03.279]  
[18:22:03.279]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:22:03.279]  
[18:22:03.279]  <debugvars>
[18:22:03.279]    // Pre-defined
[18:22:03.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:22:03.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:22:03.279]    __dp=0x00000000
[18:22:03.279]    __ap=0x00000000
[18:22:03.279]    __traceout=0x00000000      (Trace Disabled)
[18:22:03.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:22:03.279]    __FlashAddr=0x00000000
[18:22:03.279]    __FlashLen=0x00000000
[18:22:03.279]    __FlashArg=0x00000000
[18:22:03.279]    __FlashOp=0x00000000
[18:22:03.279]    __Result=0x00000000
[18:22:03.279]  </debugvars>
[18:22:03.279]  
[18:22:03.279]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:22:03.279]    <block atomic="false" info="">
[18:22:03.279]      __var SW_DP_ABORT       = 0x0;
[18:22:03.279]        // -> [SW_DP_ABORT <= 0x00000000]
[18:22:03.279]      __var DP_CTRL_STAT      = 0x4;
[18:22:03.279]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:22:03.279]      __var DP_SELECT         = 0x8;
[18:22:03.279]        // -> [DP_SELECT <= 0x00000008]
[18:22:03.279]      __var powered_down      = 0;
[18:22:03.279]        // -> [powered_down <= 0x00000000]
[18:22:03.279]      WriteDP(DP_SELECT, 0x00000000);
[18:22:03.279]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:22:03.279]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:22:03.287]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:22:03.287]        // -> [powered_down <= 0x00000001]
[18:22:03.287]    </block>
[18:22:03.287]    <control if="powered_down" while="" timeout="0" info="">
[18:22:03.287]      // if-block "powered_down"
[18:22:03.287]        // =>  TRUE
[18:22:03.287]      <block atomic="false" info="">
[18:22:03.287]        Message(0, "Debug/System power-up request sent");
[18:22:03.289]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:22:03.289]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:22:03.289]      </block>
[18:22:03.289]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:22:03.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:22:03.289]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:22:03.289]        // while-condition  =>  FALSE
[18:22:03.289]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:22:03.289]      </control>
[18:22:03.289]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:22:03.289]        // if-block "(__protocol & 0xFFFF) == 1"
[18:22:03.289]          // =>  FALSE
[18:22:03.289]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:22:03.289]      </control>
[18:22:03.289]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:22:03.289]        // if-block "(__protocol & 0xFFFF) == 2"
[18:22:03.289]          // =>  TRUE
[18:22:03.289]        <block atomic="false" info="">
[18:22:03.289]          Message(0, "executing SWD power up");
[18:22:03.289]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:22:03.289]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:22:03.289]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:22:03.289]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:22:03.289]        </block>
[18:22:03.289]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:22:03.289]      </control>
[18:22:03.289]      // end if-block "powered_down"
[18:22:03.289]    </control>
[18:22:03.289]    <block atomic="false" info="">
[18:22:03.289]      __var DEBUG_PORT_VAL    = 0;
[18:22:03.289]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:22:03.289]      __var ACCESS_POINT_VAL  = 0;
[18:22:03.289]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:22:03.289]      __ap = 1; 
[18:22:03.289]        // -> [__ap <= 0x00000001]
[18:22:03.289]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:22:03.297]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:22:03.297]      __ap = 4;
[18:22:03.297]        // -> [__ap <= 0x00000004]
[18:22:03.298]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:22:03.299]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:22:03.299]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:22:03.299]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:22:03.299]    </block>
[18:22:03.299]    <block atomic="false" info="">
[18:22:03.299]      __var nReset = 0x80;
[18:22:03.299]        // -> [nReset <= 0x00000080]
[18:22:03.299]      __var canReadPins = 0;
[18:22:03.299]        // -> [canReadPins <= 0x00000000]
[18:22:03.299]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:22:03.299]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:22:03.299]        // -> [canReadPins <= 0x00000001]
[18:22:03.299]    </block>
[18:22:03.299]    <control if="" while="1" timeout="200" info="">
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.299]      // while-condition  =>  TRUE
[18:22:03.299]      // while "1"  (timeout="200")
[18:22:03.307]      // while-condition  =>  TRUE
[18:22:03.307]      // while "1"  (timeout="200")
[18:22:03.307]      // while  =>  TIMEOUT
[18:22:03.307]      // end while "1"
[18:22:03.307]    </control>
[18:22:03.307]    <control if="canReadPins" while="" timeout="0" info="">
[18:22:03.308]      // if-block "canReadPins"
[18:22:03.308]        // =>  TRUE
[18:22:03.308]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:22:03.309]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:22:03.309]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:22:03.309]        // while-condition  =>  FALSE
[18:22:03.309]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:22:03.309]      </control>
[18:22:03.309]      // end if-block "canReadPins"
[18:22:03.309]    </control>
[18:22:03.309]    <control if="!canReadPins" while="" timeout="0" info="">
[18:22:03.309]      // if-block "!canReadPins"
[18:22:03.309]        // =>  FALSE
[18:22:03.309]      // skip if-block "!canReadPins"
[18:22:03.309]    </control>
[18:22:03.309]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:22:03.309]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:22:03.309]        // =>  TRUE
[18:22:03.309]      <block atomic="false" info="">
[18:22:03.309]        WriteAP(0x00, 0x190008);
[18:22:03.311]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:22:03.311]        WriteAP(0xF0, 0x01);
[18:22:03.311]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:22:03.311]      </block>
[18:22:03.311]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:22:03.311]    </control>
[18:22:03.311]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:22:03.311]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:22:03.311]        // =>  FALSE
[18:22:03.311]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:22:03.311]    </control>
[18:22:03.311]    <block atomic="false" info="">
[18:22:03.311]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:22:03.311]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:22:03.311]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:22:03.311]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:22:03.311]      __ap = 0; //lets make sure we reset the access point selection
[18:22:03.311]        // -> [__ap <= 0x00000000]
[18:22:03.311]    </block>
[18:22:03.311]  </sequence>
[18:22:03.311]  
[18:22:03.321]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:22:03.321]  
[18:22:03.321]  <debugvars>
[18:22:03.321]    // Pre-defined
[18:22:03.321]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:22:03.321]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:22:03.321]    __dp=0x00000000
[18:22:03.321]    __ap=0x00000000
[18:22:03.321]    __traceout=0x00000000      (Trace Disabled)
[18:22:03.321]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:22:03.321]    __FlashAddr=0x00000000
[18:22:03.321]    __FlashLen=0x00000000
[18:22:03.321]    __FlashArg=0x00000000
[18:22:03.321]    __FlashOp=0x00000000
[18:22:03.321]    __Result=0x00000000
[18:22:03.321]  </debugvars>
[18:22:03.321]  
[18:22:03.321]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:22:03.321]    <block atomic="false" info="">
[18:22:03.321]      __var deviceID = 0;
[18:22:03.321]        // -> [deviceID <= 0x00000000]
[18:22:03.321]      __var version = 0;
[18:22:03.321]        // -> [version <= 0x00000000]
[18:22:03.321]      __var partNum = 0;
[18:22:03.321]        // -> [partNum <= 0x00000000]
[18:22:03.321]      __var manuf = 0;
[18:22:03.321]        // -> [manuf <= 0x00000000]
[18:22:03.321]      __var isMSPM0G1X0X_G3X0X = 0;
[18:22:03.321]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:22:03.321]      __var isProduction = 0;
[18:22:03.321]        // -> [isProduction <= 0x00000000]
[18:22:03.321]      __var continueId = 0;
[18:22:03.321]        // -> [continueId <= 0x00000000]
[18:22:03.321]      deviceID =   Read32(0x41C40004);
[18:22:03.327]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:22:03.328]        // -> [deviceID <= 0x2BB8802F]
[18:22:03.328]      version = deviceID >> 28;
[18:22:03.328]        // -> [version <= 0x00000002]
[18:22:03.328]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:22:03.328]        // -> [partNum <= 0x0000BB88]
[18:22:03.328]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:22:03.328]        // -> [manuf <= 0x00000017]
[18:22:03.328]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:22:03.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:22:03.328]      isProduction = (version > 0);
[18:22:03.328]        // -> [isProduction <= 0x00000001]
[18:22:03.328]    </block>
[18:22:03.328]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:22:03.328]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:22:03.328]        // =>  FALSE
[18:22:03.328]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:22:03.328]    </control>
[18:22:03.330]    <control if="continueId == 4" while="" timeout="0" info="">
[18:22:03.330]      // if-block "continueId == 4"
[18:22:03.330]        // =>  FALSE
[18:22:03.330]      // skip if-block "continueId == 4"
[18:22:03.330]    </control>
[18:22:03.330]    <control if="!isProduction" while="" timeout="0" info="">
[18:22:03.330]      // if-block "!isProduction"
[18:22:03.330]        // =>  FALSE
[18:22:03.330]      // skip if-block "!isProduction"
[18:22:03.330]    </control>
[18:22:03.330]  </sequence>
[18:22:03.330]  
[18:22:48.003]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:22:48.003]  
[18:22:48.003]  <debugvars>
[18:22:48.003]    // Pre-defined
[18:22:48.003]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:22:48.003]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:22:48.003]    __dp=0x00000000
[18:22:48.003]    __ap=0x00000000
[18:22:48.003]    __traceout=0x00000000      (Trace Disabled)
[18:22:48.003]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:22:48.003]    __FlashAddr=0x00000000
[18:22:48.003]    __FlashLen=0x00000000
[18:22:48.003]    __FlashArg=0x00000000
[18:22:48.003]    __FlashOp=0x00000000
[18:22:48.003]    __Result=0x00000000
[18:22:48.003]  </debugvars>
[18:22:48.003]  
[18:22:48.003]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:22:48.003]    <block atomic="false" info="">
[18:22:48.003]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:22:48.003]        // -> [isSWJ <= 0x00000001]
[18:22:48.003]      __var hasDormant = __protocol & 0x00020000;
[18:22:48.003]        // -> [hasDormant <= 0x00000000]
[18:22:48.003]      __var protType   = __protocol & 0x0000FFFF;
[18:22:48.013]        // -> [protType <= 0x00000002]
[18:22:48.013]    </block>
[18:22:48.013]    <control if="protType == 1" while="" timeout="0" info="">
[18:22:48.013]      // if-block "protType == 1"
[18:22:48.013]        // =>  FALSE
[18:22:48.013]      // skip if-block "protType == 1"
[18:22:48.013]    </control>
[18:22:48.013]    <control if="protType == 2" while="" timeout="0" info="">
[18:22:48.013]      // if-block "protType == 2"
[18:22:48.013]        // =>  TRUE
[18:22:48.013]      <control if="isSWJ" while="" timeout="0" info="">
[18:22:48.013]        // if-block "isSWJ"
[18:22:48.013]          // =>  TRUE
[18:22:48.013]        <control if="hasDormant" while="" timeout="0" info="">
[18:22:48.013]          // if-block "hasDormant"
[18:22:48.013]            // =>  FALSE
[18:22:48.013]          // skip if-block "hasDormant"
[18:22:48.013]        </control>
[18:22:48.013]        <control if="!hasDormant" while="" timeout="0" info="">
[18:22:48.013]          // if-block "!hasDormant"
[18:22:48.013]            // =>  TRUE
[18:22:48.013]          <block atomic="false" info="">
[18:22:48.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:22:48.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:22:48.013]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:22:48.013]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:22:48.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:22:48.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:22:48.013]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:22:48.013]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:22:48.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:22:48.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:22:48.013]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:22:48.013]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:22:48.013]          </block>
[18:22:48.013]          // end if-block "!hasDormant"
[18:22:48.013]        </control>
[18:22:48.013]        // end if-block "isSWJ"
[18:22:48.013]      </control>
[18:22:48.013]      <control if="!isSWJ" while="" timeout="0" info="">
[18:22:48.013]        // if-block "!isSWJ"
[18:22:48.013]          // =>  FALSE
[18:22:48.013]        // skip if-block "!isSWJ"
[18:22:48.013]      </control>
[18:22:48.013]      <block atomic="false" info="">
[18:22:48.013]        ReadDP(0x0);
[18:22:48.013]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:22:48.013]      </block>
[18:22:48.013]      // end if-block "protType == 2"
[18:22:48.013]    </control>
[18:22:48.013]  </sequence>
[18:22:48.013]  
[18:22:48.013]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:22:48.013]  
[18:22:48.013]  <debugvars>
[18:22:48.013]    // Pre-defined
[18:22:48.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:22:48.013]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:22:48.013]    __dp=0x00000000
[18:22:48.013]    __ap=0x00000000
[18:22:48.013]    __traceout=0x00000000      (Trace Disabled)
[18:22:48.013]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:22:48.013]    __FlashAddr=0x00000000
[18:22:48.013]    __FlashLen=0x00000000
[18:22:48.013]    __FlashArg=0x00000000
[18:22:48.013]    __FlashOp=0x00000000
[18:22:48.013]    __Result=0x00000000
[18:22:48.013]  </debugvars>
[18:22:48.013]  
[18:22:48.013]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:22:48.013]    <block atomic="false" info="">
[18:22:48.013]      __var SW_DP_ABORT       = 0x0;
[18:22:48.013]        // -> [SW_DP_ABORT <= 0x00000000]
[18:22:48.023]      __var DP_CTRL_STAT      = 0x4;
[18:22:48.023]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:22:48.023]      __var DP_SELECT         = 0x8;
[18:22:48.023]        // -> [DP_SELECT <= 0x00000008]
[18:22:48.023]      __var powered_down      = 0;
[18:22:48.023]        // -> [powered_down <= 0x00000000]
[18:22:48.023]      WriteDP(DP_SELECT, 0x00000000);
[18:22:48.023]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:22:48.023]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:22:48.023]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:22:48.023]        // -> [powered_down <= 0x00000001]
[18:22:48.023]    </block>
[18:22:48.023]    <control if="powered_down" while="" timeout="0" info="">
[18:22:48.023]      // if-block "powered_down"
[18:22:48.023]        // =>  TRUE
[18:22:48.023]      <block atomic="false" info="">
[18:22:48.023]        Message(0, "Debug/System power-up request sent");
[18:22:48.023]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:22:48.023]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:22:48.023]      </block>
[18:22:48.023]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:22:48.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:22:48.023]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:22:48.023]        // while-condition  =>  FALSE
[18:22:48.023]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:22:48.023]      </control>
[18:22:48.023]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:22:48.023]        // if-block "(__protocol & 0xFFFF) == 1"
[18:22:48.023]          // =>  FALSE
[18:22:48.023]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:22:48.023]      </control>
[18:22:48.023]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:22:48.023]        // if-block "(__protocol & 0xFFFF) == 2"
[18:22:48.023]          // =>  TRUE
[18:22:48.023]        <block atomic="false" info="">
[18:22:48.023]          Message(0, "executing SWD power up");
[18:22:48.023]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:22:48.023]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:22:48.023]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:22:48.023]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:22:48.023]        </block>
[18:22:48.023]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:22:48.023]      </control>
[18:22:48.023]      // end if-block "powered_down"
[18:22:48.023]    </control>
[18:22:48.023]    <block atomic="false" info="">
[18:22:48.023]      __var DEBUG_PORT_VAL    = 0;
[18:22:48.033]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:22:48.033]      __var ACCESS_POINT_VAL  = 0;
[18:22:48.033]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:22:48.033]      __ap = 1; 
[18:22:48.033]        // -> [__ap <= 0x00000001]
[18:22:48.033]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:22:48.033]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:22:48.033]      __ap = 4;
[18:22:48.033]        // -> [__ap <= 0x00000004]
[18:22:48.033]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:22:48.033]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:22:48.033]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:22:48.033]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:22:48.033]    </block>
[18:22:48.033]    <block atomic="false" info="">
[18:22:48.033]      __var nReset = 0x80;
[18:22:48.033]        // -> [nReset <= 0x00000080]
[18:22:48.033]      __var canReadPins = 0;
[18:22:48.033]        // -> [canReadPins <= 0x00000000]
[18:22:48.033]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:22:48.033]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:22:48.033]        // -> [canReadPins <= 0x00000001]
[18:22:48.033]    </block>
[18:22:48.033]    <control if="" while="1" timeout="200" info="">
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.033]      // while "1"  (timeout="200")
[18:22:48.033]      // while-condition  =>  TRUE
[18:22:48.043]      // while "1"  (timeout="200")
[18:22:48.043]      // while  =>  TIMEOUT
[18:22:48.043]      // end while "1"
[18:22:48.043]    </control>
[18:22:48.043]    <control if="canReadPins" while="" timeout="0" info="">
[18:22:48.043]      // if-block "canReadPins"
[18:22:48.043]        // =>  TRUE
[18:22:48.043]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:22:48.043]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:22:48.043]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:22:48.043]        // while-condition  =>  FALSE
[18:22:48.043]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:22:48.045]      </control>
[18:22:48.045]      // end if-block "canReadPins"
[18:22:48.045]    </control>
[18:22:48.045]    <control if="!canReadPins" while="" timeout="0" info="">
[18:22:48.045]      // if-block "!canReadPins"
[18:22:48.045]        // =>  FALSE
[18:22:48.046]      // skip if-block "!canReadPins"
[18:22:48.046]    </control>
[18:22:48.046]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:22:48.046]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:22:48.046]        // =>  TRUE
[18:22:48.046]      <block atomic="false" info="">
[18:22:48.046]        WriteAP(0x00, 0x190008);
[18:22:48.046]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:22:48.046]        WriteAP(0xF0, 0x01);
[18:22:48.046]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:22:48.046]      </block>
[18:22:48.046]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:22:48.046]    </control>
[18:22:48.046]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:22:48.046]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:22:48.046]        // =>  FALSE
[18:22:48.046]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:22:48.046]    </control>
[18:22:48.046]    <block atomic="false" info="">
[18:22:48.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:22:48.046]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:22:48.046]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:22:48.046]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:22:48.046]      __ap = 0; //lets make sure we reset the access point selection
[18:22:48.046]        // -> [__ap <= 0x00000000]
[18:22:48.046]    </block>
[18:22:48.046]  </sequence>
[18:22:48.046]  
[18:22:48.056]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:22:48.056]  
[18:22:48.056]  <debugvars>
[18:22:48.056]    // Pre-defined
[18:22:48.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:22:48.056]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:22:48.056]    __dp=0x00000000
[18:22:48.056]    __ap=0x00000000
[18:22:48.056]    __traceout=0x00000000      (Trace Disabled)
[18:22:48.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:22:48.056]    __FlashAddr=0x00000000
[18:22:48.056]    __FlashLen=0x00000000
[18:22:48.056]    __FlashArg=0x00000000
[18:22:48.056]    __FlashOp=0x00000000
[18:22:48.056]    __Result=0x00000000
[18:22:48.056]  </debugvars>
[18:22:48.056]  
[18:22:48.056]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:22:48.056]    <block atomic="false" info="">
[18:22:48.056]      __var deviceID = 0;
[18:22:48.056]        // -> [deviceID <= 0x00000000]
[18:22:48.056]      __var version = 0;
[18:22:48.056]        // -> [version <= 0x00000000]
[18:22:48.056]      __var partNum = 0;
[18:22:48.056]        // -> [partNum <= 0x00000000]
[18:22:48.056]      __var manuf = 0;
[18:22:48.056]        // -> [manuf <= 0x00000000]
[18:22:48.056]      __var isMSPM0G1X0X_G3X0X = 0;
[18:22:48.056]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:22:48.056]      __var isProduction = 0;
[18:22:48.056]        // -> [isProduction <= 0x00000000]
[18:22:48.056]      __var continueId = 0;
[18:22:48.056]        // -> [continueId <= 0x00000000]
[18:22:48.056]      deviceID =   Read32(0x41C40004);
[18:22:48.056]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:22:48.056]        // -> [deviceID <= 0x2BB8802F]
[18:22:48.056]      version = deviceID >> 28;
[18:22:48.056]        // -> [version <= 0x00000002]
[18:22:48.056]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:22:48.056]        // -> [partNum <= 0x0000BB88]
[18:22:48.056]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:22:48.056]        // -> [manuf <= 0x00000017]
[18:22:48.056]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:22:48.056]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:22:48.056]      isProduction = (version > 0);
[18:22:48.056]        // -> [isProduction <= 0x00000001]
[18:22:48.056]    </block>
[18:22:48.064]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:22:48.064]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:22:48.064]        // =>  FALSE
[18:22:48.064]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:22:48.064]    </control>
[18:22:48.064]    <control if="continueId == 4" while="" timeout="0" info="">
[18:22:48.064]      // if-block "continueId == 4"
[18:22:48.064]        // =>  FALSE
[18:22:48.064]      // skip if-block "continueId == 4"
[18:22:48.064]    </control>
[18:22:48.064]    <control if="!isProduction" while="" timeout="0" info="">
[18:22:48.064]      // if-block "!isProduction"
[18:22:48.064]        // =>  FALSE
[18:22:48.064]      // skip if-block "!isProduction"
[18:22:48.064]    </control>
[18:22:48.064]  </sequence>
[18:22:48.064]  
[18:25:00.413]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:25:00.413]  
[18:25:00.423]  <debugvars>
[18:25:00.423]    // Pre-defined
[18:25:00.423]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:25:00.423]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:25:00.423]    __dp=0x00000000
[18:25:00.423]    __ap=0x00000000
[18:25:00.423]    __traceout=0x00000000      (Trace Disabled)
[18:25:00.423]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:25:00.423]    __FlashAddr=0x00000000
[18:25:00.423]    __FlashLen=0x00000000
[18:25:00.423]    __FlashArg=0x00000000
[18:25:00.423]    __FlashOp=0x00000000
[18:25:00.423]    __Result=0x00000000
[18:25:00.423]  </debugvars>
[18:25:00.423]  
[18:25:00.423]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:25:00.423]    <block atomic="false" info="">
[18:25:00.423]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:25:00.423]        // -> [isSWJ <= 0x00000001]
[18:25:00.423]      __var hasDormant = __protocol & 0x00020000;
[18:25:00.423]        // -> [hasDormant <= 0x00000000]
[18:25:00.423]      __var protType   = __protocol & 0x0000FFFF;
[18:25:00.423]        // -> [protType <= 0x00000002]
[18:25:00.423]    </block>
[18:25:00.423]    <control if="protType == 1" while="" timeout="0" info="">
[18:25:00.423]      // if-block "protType == 1"
[18:25:00.426]        // =>  FALSE
[18:25:00.426]      // skip if-block "protType == 1"
[18:25:00.426]    </control>
[18:25:00.426]    <control if="protType == 2" while="" timeout="0" info="">
[18:25:00.426]      // if-block "protType == 2"
[18:25:00.426]        // =>  TRUE
[18:25:00.426]      <control if="isSWJ" while="" timeout="0" info="">
[18:25:00.426]        // if-block "isSWJ"
[18:25:00.426]          // =>  TRUE
[18:25:00.426]        <control if="hasDormant" while="" timeout="0" info="">
[18:25:00.426]          // if-block "hasDormant"
[18:25:00.426]            // =>  FALSE
[18:25:00.426]          // skip if-block "hasDormant"
[18:25:00.426]        </control>
[18:25:00.426]        <control if="!hasDormant" while="" timeout="0" info="">
[18:25:00.426]          // if-block "!hasDormant"
[18:25:00.426]            // =>  TRUE
[18:25:00.426]          <block atomic="false" info="">
[18:25:00.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:25:00.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:25:00.426]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:25:00.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:25:00.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:25:00.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:25:00.426]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:25:00.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:25:00.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:25:00.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:25:00.426]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:25:00.426]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:25:00.426]          </block>
[18:25:00.426]          // end if-block "!hasDormant"
[18:25:00.426]        </control>
[18:25:00.426]        // end if-block "isSWJ"
[18:25:00.426]      </control>
[18:25:00.426]      <control if="!isSWJ" while="" timeout="0" info="">
[18:25:00.426]        // if-block "!isSWJ"
[18:25:00.426]          // =>  FALSE
[18:25:00.426]        // skip if-block "!isSWJ"
[18:25:00.426]      </control>
[18:25:00.426]      <block atomic="false" info="">
[18:25:00.426]        ReadDP(0x0);
[18:25:00.426]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:25:00.426]      </block>
[18:25:00.426]      // end if-block "protType == 2"
[18:25:00.426]    </control>
[18:25:00.433]  </sequence>
[18:25:00.433]  
[18:25:00.433]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:25:00.433]  
[18:25:00.433]  <debugvars>
[18:25:00.433]    // Pre-defined
[18:25:00.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:25:00.433]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:25:00.433]    __dp=0x00000000
[18:25:00.433]    __ap=0x00000000
[18:25:00.433]    __traceout=0x00000000      (Trace Disabled)
[18:25:00.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:25:00.433]    __FlashAddr=0x00000000
[18:25:00.433]    __FlashLen=0x00000000
[18:25:00.433]    __FlashArg=0x00000000
[18:25:00.433]    __FlashOp=0x00000000
[18:25:00.433]    __Result=0x00000000
[18:25:00.433]  </debugvars>
[18:25:00.433]  
[18:25:00.433]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:25:00.433]    <block atomic="false" info="">
[18:25:00.433]      __var SW_DP_ABORT       = 0x0;
[18:25:00.433]        // -> [SW_DP_ABORT <= 0x00000000]
[18:25:00.433]      __var DP_CTRL_STAT      = 0x4;
[18:25:00.436]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:25:00.436]      __var DP_SELECT         = 0x8;
[18:25:00.436]        // -> [DP_SELECT <= 0x00000008]
[18:25:00.436]      __var powered_down      = 0;
[18:25:00.436]        // -> [powered_down <= 0x00000000]
[18:25:00.436]      WriteDP(DP_SELECT, 0x00000000);
[18:25:00.436]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:25:00.436]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:25:00.436]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:25:00.436]        // -> [powered_down <= 0x00000001]
[18:25:00.436]    </block>
[18:25:00.436]    <control if="powered_down" while="" timeout="0" info="">
[18:25:00.436]      // if-block "powered_down"
[18:25:00.436]        // =>  TRUE
[18:25:00.436]      <block atomic="false" info="">
[18:25:00.436]        Message(0, "Debug/System power-up request sent");
[18:25:00.436]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:25:00.436]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:25:00.436]      </block>
[18:25:00.436]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:25:00.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:25:00.436]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:25:00.436]        // while-condition  =>  FALSE
[18:25:00.436]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:25:00.436]      </control>
[18:25:00.436]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:25:00.436]        // if-block "(__protocol & 0xFFFF) == 1"
[18:25:00.443]          // =>  FALSE
[18:25:00.443]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:25:00.443]      </control>
[18:25:00.443]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:25:00.444]        // if-block "(__protocol & 0xFFFF) == 2"
[18:25:00.444]          // =>  TRUE
[18:25:00.444]        <block atomic="false" info="">
[18:25:00.444]          Message(0, "executing SWD power up");
[18:25:00.445]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:25:00.446]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:25:00.446]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:25:00.447]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:25:00.447]        </block>
[18:25:00.448]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:25:00.448]      </control>
[18:25:00.448]      // end if-block "powered_down"
[18:25:00.448]    </control>
[18:25:00.448]    <block atomic="false" info="">
[18:25:00.448]      __var DEBUG_PORT_VAL    = 0;
[18:25:00.448]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:25:00.448]      __var ACCESS_POINT_VAL  = 0;
[18:25:00.448]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:25:00.448]      __ap = 1; 
[18:25:00.448]        // -> [__ap <= 0x00000001]
[18:25:00.448]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:25:00.449]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:25:00.449]      __ap = 4;
[18:25:00.449]        // -> [__ap <= 0x00000004]
[18:25:00.450]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:25:00.451]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:25:00.451]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:25:00.451]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:25:00.452]    </block>
[18:25:00.452]    <block atomic="false" info="">
[18:25:00.452]      __var nReset = 0x80;
[18:25:00.452]        // -> [nReset <= 0x00000080]
[18:25:00.453]      __var canReadPins = 0;
[18:25:00.453]        // -> [canReadPins <= 0x00000000]
[18:25:00.453]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:25:00.453]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:25:00.453]        // -> [canReadPins <= 0x00000001]
[18:25:00.453]    </block>
[18:25:00.453]    <control if="" while="1" timeout="200" info="">
[18:25:00.453]      // while "1"  (timeout="200")
[18:25:00.453]      // while-condition  =>  TRUE
[18:25:00.453]      // while "1"  (timeout="200")
[18:25:00.453]      // while-condition  =>  TRUE
[18:25:00.453]      // while "1"  (timeout="200")
[18:25:00.453]      // while-condition  =>  TRUE
[18:25:00.453]      // while "1"  (timeout="200")
[18:25:00.453]      // while-condition  =>  TRUE
[18:25:00.453]      // while "1"  (timeout="200")
[18:25:00.453]      // while-condition  =>  TRUE
[18:25:00.453]      // while "1"  (timeout="200")
[18:25:00.453]      // while-condition  =>  TRUE
[18:25:00.453]      // while "1"  (timeout="200")
[18:25:00.453]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.456]      // while "1"  (timeout="200")
[18:25:00.456]      // while-condition  =>  TRUE
[18:25:00.458]      // while "1"  (timeout="200")
[18:25:00.458]      // while  =>  TIMEOUT
[18:25:00.458]      // end while "1"
[18:25:00.458]    </control>
[18:25:00.458]    <control if="canReadPins" while="" timeout="0" info="">
[18:25:00.458]      // if-block "canReadPins"
[18:25:00.458]        // =>  TRUE
[18:25:00.458]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:25:00.458]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:25:00.459]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:25:00.459]        // while-condition  =>  FALSE
[18:25:00.459]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:25:00.459]      </control>
[18:25:00.459]      // end if-block "canReadPins"
[18:25:00.459]    </control>
[18:25:00.459]    <control if="!canReadPins" while="" timeout="0" info="">
[18:25:00.459]      // if-block "!canReadPins"
[18:25:00.459]        // =>  FALSE
[18:25:00.459]      // skip if-block "!canReadPins"
[18:25:00.459]    </control>
[18:25:00.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:25:00.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:25:00.459]        // =>  TRUE
[18:25:00.459]      <block atomic="false" info="">
[18:25:00.459]        WriteAP(0x00, 0x190008);
[18:25:00.459]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:25:00.461]        WriteAP(0xF0, 0x01);
[18:25:00.462]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:25:00.462]      </block>
[18:25:00.462]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:25:00.462]    </control>
[18:25:00.462]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:25:00.462]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:25:00.462]        // =>  FALSE
[18:25:00.462]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:25:00.462]    </control>
[18:25:00.462]    <block atomic="false" info="">
[18:25:00.462]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:25:00.463]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:25:00.464]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:25:00.464]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:25:00.466]      __ap = 0; //lets make sure we reset the access point selection
[18:25:00.466]        // -> [__ap <= 0x00000000]
[18:25:00.466]    </block>
[18:25:00.466]  </sequence>
[18:25:00.466]  
[18:25:00.471]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:25:00.471]  
[18:25:00.472]  <debugvars>
[18:25:00.472]    // Pre-defined
[18:25:00.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:25:00.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:25:00.472]    __dp=0x00000000
[18:25:00.472]    __ap=0x00000000
[18:25:00.472]    __traceout=0x00000000      (Trace Disabled)
[18:25:00.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:25:00.472]    __FlashAddr=0x00000000
[18:25:00.472]    __FlashLen=0x00000000
[18:25:00.472]    __FlashArg=0x00000000
[18:25:00.472]    __FlashOp=0x00000000
[18:25:00.472]    __Result=0x00000000
[18:25:00.472]  </debugvars>
[18:25:00.472]  
[18:25:00.472]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:25:00.472]    <block atomic="false" info="">
[18:25:00.474]      __var deviceID = 0;
[18:25:00.474]        // -> [deviceID <= 0x00000000]
[18:25:00.474]      __var version = 0;
[18:25:00.474]        // -> [version <= 0x00000000]
[18:25:00.474]      __var partNum = 0;
[18:25:00.474]        // -> [partNum <= 0x00000000]
[18:25:00.474]      __var manuf = 0;
[18:25:00.474]        // -> [manuf <= 0x00000000]
[18:25:00.474]      __var isMSPM0G1X0X_G3X0X = 0;
[18:25:00.474]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:25:00.474]      __var isProduction = 0;
[18:25:00.474]        // -> [isProduction <= 0x00000000]
[18:25:00.474]      __var continueId = 0;
[18:25:00.476]        // -> [continueId <= 0x00000000]
[18:25:00.476]      deviceID =   Read32(0x41C40004);
[18:25:00.476]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:25:00.476]        // -> [deviceID <= 0x2BB8802F]
[18:25:00.478]      version = deviceID >> 28;
[18:25:00.478]        // -> [version <= 0x00000002]
[18:25:00.478]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:25:00.478]        // -> [partNum <= 0x0000BB88]
[18:25:00.478]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:25:00.478]        // -> [manuf <= 0x00000017]
[18:25:00.478]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:25:00.478]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:25:00.478]      isProduction = (version > 0);
[18:25:00.478]        // -> [isProduction <= 0x00000001]
[18:25:00.478]    </block>
[18:25:00.479]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:25:00.479]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:25:00.479]        // =>  FALSE
[18:25:00.479]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:25:00.479]    </control>
[18:25:00.479]    <control if="continueId == 4" while="" timeout="0" info="">
[18:25:00.479]      // if-block "continueId == 4"
[18:25:00.479]        // =>  FALSE
[18:25:00.479]      // skip if-block "continueId == 4"
[18:25:00.479]    </control>
[18:25:00.479]    <control if="!isProduction" while="" timeout="0" info="">
[18:25:00.479]      // if-block "!isProduction"
[18:25:00.480]        // =>  FALSE
[18:25:00.480]      // skip if-block "!isProduction"
[18:25:00.480]    </control>
[18:25:00.480]  </sequence>
[18:25:00.480]  
[18:26:46.996]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:26:46.996]  
[18:26:47.009]  <debugvars>
[18:26:47.009]    // Pre-defined
[18:26:47.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:26:47.009]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:26:47.009]    __dp=0x00000000
[18:26:47.009]    __ap=0x00000000
[18:26:47.009]    __traceout=0x00000000      (Trace Disabled)
[18:26:47.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:26:47.009]    __FlashAddr=0x00000000
[18:26:47.009]    __FlashLen=0x00000000
[18:26:47.009]    __FlashArg=0x00000000
[18:26:47.009]    __FlashOp=0x00000000
[18:26:47.009]    __Result=0x00000000
[18:26:47.009]  </debugvars>
[18:26:47.009]  
[18:26:47.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:26:47.009]    <block atomic="false" info="">
[18:26:47.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:26:47.009]        // -> [isSWJ <= 0x00000001]
[18:26:47.009]      __var hasDormant = __protocol & 0x00020000;
[18:26:47.009]        // -> [hasDormant <= 0x00000000]
[18:26:47.009]      __var protType   = __protocol & 0x0000FFFF;
[18:26:47.009]        // -> [protType <= 0x00000002]
[18:26:47.009]    </block>
[18:26:47.009]    <control if="protType == 1" while="" timeout="0" info="">
[18:26:47.009]      // if-block "protType == 1"
[18:26:47.009]        // =>  FALSE
[18:26:47.009]      // skip if-block "protType == 1"
[18:26:47.009]    </control>
[18:26:47.009]    <control if="protType == 2" while="" timeout="0" info="">
[18:26:47.009]      // if-block "protType == 2"
[18:26:47.009]        // =>  TRUE
[18:26:47.009]      <control if="isSWJ" while="" timeout="0" info="">
[18:26:47.009]        // if-block "isSWJ"
[18:26:47.009]          // =>  TRUE
[18:26:47.009]        <control if="hasDormant" while="" timeout="0" info="">
[18:26:47.009]          // if-block "hasDormant"
[18:26:47.009]            // =>  FALSE
[18:26:47.009]          // skip if-block "hasDormant"
[18:26:47.009]        </control>
[18:26:47.009]        <control if="!hasDormant" while="" timeout="0" info="">
[18:26:47.009]          // if-block "!hasDormant"
[18:26:47.009]            // =>  TRUE
[18:26:47.009]          <block atomic="false" info="">
[18:26:47.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:26:47.009]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:26:47.009]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:26:47.014]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:26:47.014]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:26:47.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:26:47.015]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:26:47.015]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:26:47.015]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:26:47.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:26:47.015]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:26:47.015]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:26:47.015]          </block>
[18:26:47.015]          // end if-block "!hasDormant"
[18:26:47.015]        </control>
[18:26:47.016]        // end if-block "isSWJ"
[18:26:47.016]      </control>
[18:26:47.016]      <control if="!isSWJ" while="" timeout="0" info="">
[18:26:47.016]        // if-block "!isSWJ"
[18:26:47.016]          // =>  FALSE
[18:26:47.016]        // skip if-block "!isSWJ"
[18:26:47.016]      </control>
[18:26:47.016]      <block atomic="false" info="">
[18:26:47.016]        ReadDP(0x0);
[18:26:47.016]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:26:47.016]      </block>
[18:26:47.016]      // end if-block "protType == 2"
[18:26:47.016]    </control>
[18:26:47.018]  </sequence>
[18:26:47.018]  
[18:26:47.018]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:26:47.018]  
[18:26:47.018]  <debugvars>
[18:26:47.018]    // Pre-defined
[18:26:47.018]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:26:47.018]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:26:47.018]    __dp=0x00000000
[18:26:47.020]    __ap=0x00000000
[18:26:47.020]    __traceout=0x00000000      (Trace Disabled)
[18:26:47.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:26:47.020]    __FlashAddr=0x00000000
[18:26:47.020]    __FlashLen=0x00000000
[18:26:47.020]    __FlashArg=0x00000000
[18:26:47.020]    __FlashOp=0x00000000
[18:26:47.020]    __Result=0x00000000
[18:26:47.020]  </debugvars>
[18:26:47.020]  
[18:26:47.020]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:26:47.021]    <block atomic="false" info="">
[18:26:47.021]      __var SW_DP_ABORT       = 0x0;
[18:26:47.021]        // -> [SW_DP_ABORT <= 0x00000000]
[18:26:47.021]      __var DP_CTRL_STAT      = 0x4;
[18:26:47.021]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:26:47.021]      __var DP_SELECT         = 0x8;
[18:26:47.021]        // -> [DP_SELECT <= 0x00000008]
[18:26:47.021]      __var powered_down      = 0;
[18:26:47.021]        // -> [powered_down <= 0x00000000]
[18:26:47.021]      WriteDP(DP_SELECT, 0x00000000);
[18:26:47.022]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:26:47.022]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:26:47.022]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:26:47.022]        // -> [powered_down <= 0x00000001]
[18:26:47.022]    </block>
[18:26:47.022]    <control if="powered_down" while="" timeout="0" info="">
[18:26:47.022]      // if-block "powered_down"
[18:26:47.022]        // =>  TRUE
[18:26:47.022]      <block atomic="false" info="">
[18:26:47.024]        Message(0, "Debug/System power-up request sent");
[18:26:47.026]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:26:47.027]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:26:47.027]      </block>
[18:26:47.027]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:26:47.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:26:47.029]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:26:47.029]        // while-condition  =>  FALSE
[18:26:47.029]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:26:47.029]      </control>
[18:26:47.029]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:26:47.029]        // if-block "(__protocol & 0xFFFF) == 1"
[18:26:47.029]          // =>  FALSE
[18:26:47.029]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:26:47.029]      </control>
[18:26:47.029]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:26:47.029]        // if-block "(__protocol & 0xFFFF) == 2"
[18:26:47.030]          // =>  TRUE
[18:26:47.030]        <block atomic="false" info="">
[18:26:47.030]          Message(0, "executing SWD power up");
[18:26:47.031]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:26:47.031]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:26:47.031]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:26:47.033]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:26:47.033]        </block>
[18:26:47.033]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:26:47.033]      </control>
[18:26:47.033]      // end if-block "powered_down"
[18:26:47.033]    </control>
[18:26:47.033]    <block atomic="false" info="">
[18:26:47.033]      __var DEBUG_PORT_VAL    = 0;
[18:26:47.033]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:26:47.033]      __var ACCESS_POINT_VAL  = 0;
[18:26:47.033]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:26:47.033]      __ap = 1; 
[18:26:47.033]        // -> [__ap <= 0x00000001]
[18:26:47.033]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:26:47.035]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:26:47.035]      __ap = 4;
[18:26:47.035]        // -> [__ap <= 0x00000004]
[18:26:47.035]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:26:47.035]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:26:47.035]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:26:47.037]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:26:47.038]    </block>
[18:26:47.038]    <block atomic="false" info="">
[18:26:47.038]      __var nReset = 0x80;
[18:26:47.038]        // -> [nReset <= 0x00000080]
[18:26:47.038]      __var canReadPins = 0;
[18:26:47.038]        // -> [canReadPins <= 0x00000000]
[18:26:47.038]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:26:47.038]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:26:47.039]        // -> [canReadPins <= 0x00000001]
[18:26:47.039]    </block>
[18:26:47.039]    <control if="" while="1" timeout="200" info="">
[18:26:47.039]      // while "1"  (timeout="200")
[18:26:47.039]      // while-condition  =>  TRUE
[18:26:47.039]      // while "1"  (timeout="200")
[18:26:47.039]      // while-condition  =>  TRUE
[18:26:47.039]      // while "1"  (timeout="200")
[18:26:47.039]      // while-condition  =>  TRUE
[18:26:47.039]      // while "1"  (timeout="200")
[18:26:47.039]      // while-condition  =>  TRUE
[18:26:47.039]      // while "1"  (timeout="200")
[18:26:47.039]      // while-condition  =>  TRUE
[18:26:47.039]      // while "1"  (timeout="200")
[18:26:47.039]      // while-condition  =>  TRUE
[18:26:47.039]      // while "1"  (timeout="200")
[18:26:47.039]      // while-condition  =>  TRUE
[18:26:47.041]      // while "1"  (timeout="200")
[18:26:47.041]      // while-condition  =>  TRUE
[18:26:47.041]      // while "1"  (timeout="200")
[18:26:47.041]      // while-condition  =>  TRUE
[18:26:47.041]      // while "1"  (timeout="200")
[18:26:47.041]      // while-condition  =>  TRUE
[18:26:47.041]      // while "1"  (timeout="200")
[18:26:47.041]      // while-condition  =>  TRUE
[18:26:47.041]      // while "1"  (timeout="200")
[18:26:47.041]      // while-condition  =>  TRUE
[18:26:47.041]      // while "1"  (timeout="200")
[18:26:47.041]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.043]      // while-condition  =>  TRUE
[18:26:47.043]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.044]      // while "1"  (timeout="200")
[18:26:47.044]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.046]      // while "1"  (timeout="200")
[18:26:47.046]      // while-condition  =>  TRUE
[18:26:47.048]      // while "1"  (timeout="200")
[18:26:47.048]      // while-condition  =>  TRUE
[18:26:47.048]      // while "1"  (timeout="200")
[18:26:47.048]      // while-condition  =>  TRUE
[18:26:47.048]      // while "1"  (timeout="200")
[18:26:47.048]      // while-condition  =>  TRUE
[18:26:47.048]      // while "1"  (timeout="200")
[18:26:47.048]      // while-condition  =>  TRUE
[18:26:47.048]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.050]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.050]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.050]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.050]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.050]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.050]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.050]      // while "1"  (timeout="200")
[18:26:47.050]      // while-condition  =>  TRUE
[18:26:47.051]      // while "1"  (timeout="200")
[18:26:47.051]      // while  =>  TIMEOUT
[18:26:47.051]      // end while "1"
[18:26:47.051]    </control>
[18:26:47.051]    <control if="canReadPins" while="" timeout="0" info="">
[18:26:47.051]      // if-block "canReadPins"
[18:26:47.051]        // =>  TRUE
[18:26:47.051]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:26:47.051]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:26:47.051]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:26:47.052]        // while-condition  =>  FALSE
[18:26:47.052]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:26:47.052]      </control>
[18:26:47.052]      // end if-block "canReadPins"
[18:26:47.052]    </control>
[18:26:47.052]    <control if="!canReadPins" while="" timeout="0" info="">
[18:26:47.052]      // if-block "!canReadPins"
[18:26:47.052]        // =>  FALSE
[18:26:47.052]      // skip if-block "!canReadPins"
[18:26:47.052]    </control>
[18:26:47.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:26:47.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:26:47.052]        // =>  TRUE
[18:26:47.052]      <block atomic="false" info="">
[18:26:47.052]        WriteAP(0x00, 0x190008);
[18:26:47.055]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:26:47.055]        WriteAP(0xF0, 0x01);
[18:26:47.055]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:26:47.055]      </block>
[18:26:47.055]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:26:47.055]    </control>
[18:26:47.055]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:26:47.056]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:26:47.056]        // =>  FALSE
[18:26:47.056]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:26:47.056]    </control>
[18:26:47.056]    <block atomic="false" info="">
[18:26:47.056]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:26:47.057]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:26:47.057]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:26:47.057]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:26:47.059]      __ap = 0; //lets make sure we reset the access point selection
[18:26:47.059]        // -> [__ap <= 0x00000000]
[18:26:47.059]    </block>
[18:26:47.060]  </sequence>
[18:26:47.060]  
[18:26:47.065]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:26:47.065]  
[18:26:47.065]  <debugvars>
[18:26:47.065]    // Pre-defined
[18:26:47.065]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:26:47.065]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:26:47.065]    __dp=0x00000000
[18:26:47.065]    __ap=0x00000000
[18:26:47.065]    __traceout=0x00000000      (Trace Disabled)
[18:26:47.065]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:26:47.067]    __FlashAddr=0x00000000
[18:26:47.067]    __FlashLen=0x00000000
[18:26:47.067]    __FlashArg=0x00000000
[18:26:47.067]    __FlashOp=0x00000000
[18:26:47.067]    __Result=0x00000000
[18:26:47.067]  </debugvars>
[18:26:47.067]  
[18:26:47.067]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:26:47.067]    <block atomic="false" info="">
[18:26:47.067]      __var deviceID = 0;
[18:26:47.067]        // -> [deviceID <= 0x00000000]
[18:26:47.067]      __var version = 0;
[18:26:47.067]        // -> [version <= 0x00000000]
[18:26:47.067]      __var partNum = 0;
[18:26:47.067]        // -> [partNum <= 0x00000000]
[18:26:47.067]      __var manuf = 0;
[18:26:47.067]        // -> [manuf <= 0x00000000]
[18:26:47.067]      __var isMSPM0G1X0X_G3X0X = 0;
[18:26:47.067]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:26:47.067]      __var isProduction = 0;
[18:26:47.067]        // -> [isProduction <= 0x00000000]
[18:26:47.067]      __var continueId = 0;
[18:26:47.067]        // -> [continueId <= 0x00000000]
[18:26:47.067]      deviceID =   Read32(0x41C40004);
[18:26:47.067]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:26:47.067]        // -> [deviceID <= 0x2BB8802F]
[18:26:47.067]      version = deviceID >> 28;
[18:26:47.067]        // -> [version <= 0x00000002]
[18:26:47.067]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:26:47.067]        // -> [partNum <= 0x0000BB88]
[18:26:47.067]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:26:47.067]        // -> [manuf <= 0x00000017]
[18:26:47.067]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:26:47.067]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:26:47.067]      isProduction = (version > 0);
[18:26:47.067]        // -> [isProduction <= 0x00000001]
[18:26:47.067]    </block>
[18:26:47.067]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:26:47.067]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:26:47.067]        // =>  FALSE
[18:26:47.067]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:26:47.067]    </control>
[18:26:47.067]    <control if="continueId == 4" while="" timeout="0" info="">
[18:26:47.067]      // if-block "continueId == 4"
[18:26:47.067]        // =>  FALSE
[18:26:47.067]      // skip if-block "continueId == 4"
[18:26:47.067]    </control>
[18:26:47.067]    <control if="!isProduction" while="" timeout="0" info="">
[18:26:47.067]      // if-block "!isProduction"
[18:26:47.067]        // =>  FALSE
[18:26:47.067]      // skip if-block "!isProduction"
[18:26:47.067]    </control>
[18:26:47.067]  </sequence>
[18:26:47.067]  
[18:27:44.422]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:27:44.422]  
[18:27:44.432]  <debugvars>
[18:27:44.432]    // Pre-defined
[18:27:44.432]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:27:44.432]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:27:44.432]    __dp=0x00000000
[18:27:44.432]    __ap=0x00000000
[18:27:44.432]    __traceout=0x00000000      (Trace Disabled)
[18:27:44.432]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:27:44.432]    __FlashAddr=0x00000000
[18:27:44.432]    __FlashLen=0x00000000
[18:27:44.432]    __FlashArg=0x00000000
[18:27:44.432]    __FlashOp=0x00000000
[18:27:44.432]    __Result=0x00000000
[18:27:44.432]  </debugvars>
[18:27:44.432]  
[18:27:44.432]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:27:44.432]    <block atomic="false" info="">
[18:27:44.432]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:27:44.432]        // -> [isSWJ <= 0x00000001]
[18:27:44.432]      __var hasDormant = __protocol & 0x00020000;
[18:27:44.432]        // -> [hasDormant <= 0x00000000]
[18:27:44.432]      __var protType   = __protocol & 0x0000FFFF;
[18:27:44.432]        // -> [protType <= 0x00000002]
[18:27:44.432]    </block>
[18:27:44.432]    <control if="protType == 1" while="" timeout="0" info="">
[18:27:44.432]      // if-block "protType == 1"
[18:27:44.432]        // =>  FALSE
[18:27:44.432]      // skip if-block "protType == 1"
[18:27:44.432]    </control>
[18:27:44.432]    <control if="protType == 2" while="" timeout="0" info="">
[18:27:44.432]      // if-block "protType == 2"
[18:27:44.432]        // =>  TRUE
[18:27:44.432]      <control if="isSWJ" while="" timeout="0" info="">
[18:27:44.432]        // if-block "isSWJ"
[18:27:44.432]          // =>  TRUE
[18:27:44.432]        <control if="hasDormant" while="" timeout="0" info="">
[18:27:44.432]          // if-block "hasDormant"
[18:27:44.432]            // =>  FALSE
[18:27:44.432]          // skip if-block "hasDormant"
[18:27:44.432]        </control>
[18:27:44.432]        <control if="!hasDormant" while="" timeout="0" info="">
[18:27:44.432]          // if-block "!hasDormant"
[18:27:44.432]            // =>  TRUE
[18:27:44.432]          <block atomic="false" info="">
[18:27:44.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:27:44.432]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:27:44.432]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:27:44.432]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:27:44.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:27:44.432]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:27:44.432]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:27:44.432]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:27:44.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:27:44.432]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:27:44.432]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:27:44.440]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:27:44.440]          </block>
[18:27:44.440]          // end if-block "!hasDormant"
[18:27:44.440]        </control>
[18:27:44.440]        // end if-block "isSWJ"
[18:27:44.440]      </control>
[18:27:44.441]      <control if="!isSWJ" while="" timeout="0" info="">
[18:27:44.441]        // if-block "!isSWJ"
[18:27:44.441]          // =>  FALSE
[18:27:44.441]        // skip if-block "!isSWJ"
[18:27:44.441]      </control>
[18:27:44.441]      <block atomic="false" info="">
[18:27:44.441]        ReadDP(0x0);
[18:27:44.441]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:27:44.441]      </block>
[18:27:44.441]      // end if-block "protType == 2"
[18:27:44.441]    </control>
[18:27:44.441]  </sequence>
[18:27:44.441]  
[18:27:44.441]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:27:44.441]  
[18:27:44.441]  <debugvars>
[18:27:44.441]    // Pre-defined
[18:27:44.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:27:44.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:27:44.441]    __dp=0x00000000
[18:27:44.441]    __ap=0x00000000
[18:27:44.441]    __traceout=0x00000000      (Trace Disabled)
[18:27:44.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:27:44.441]    __FlashAddr=0x00000000
[18:27:44.441]    __FlashLen=0x00000000
[18:27:44.441]    __FlashArg=0x00000000
[18:27:44.441]    __FlashOp=0x00000000
[18:27:44.441]    __Result=0x00000000
[18:27:44.441]  </debugvars>
[18:27:44.441]  
[18:27:44.441]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:27:44.441]    <block atomic="false" info="">
[18:27:44.441]      __var SW_DP_ABORT       = 0x0;
[18:27:44.441]        // -> [SW_DP_ABORT <= 0x00000000]
[18:27:44.441]      __var DP_CTRL_STAT      = 0x4;
[18:27:44.441]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:27:44.441]      __var DP_SELECT         = 0x8;
[18:27:44.441]        // -> [DP_SELECT <= 0x00000008]
[18:27:44.441]      __var powered_down      = 0;
[18:27:44.441]        // -> [powered_down <= 0x00000000]
[18:27:44.441]      WriteDP(DP_SELECT, 0x00000000);
[18:27:44.441]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:27:44.441]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:27:44.441]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:27:44.441]        // -> [powered_down <= 0x00000001]
[18:27:44.441]    </block>
[18:27:44.441]    <control if="powered_down" while="" timeout="0" info="">
[18:27:44.441]      // if-block "powered_down"
[18:27:44.441]        // =>  TRUE
[18:27:44.441]      <block atomic="false" info="">
[18:27:44.441]        Message(0, "Debug/System power-up request sent");
[18:27:44.450]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:27:44.450]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:27:44.450]      </block>
[18:27:44.450]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:27:44.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:27:44.452]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:27:44.452]        // while-condition  =>  FALSE
[18:27:44.452]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:27:44.452]      </control>
[18:27:44.452]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:27:44.452]        // if-block "(__protocol & 0xFFFF) == 1"
[18:27:44.452]          // =>  FALSE
[18:27:44.452]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:27:44.452]      </control>
[18:27:44.452]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:27:44.452]        // if-block "(__protocol & 0xFFFF) == 2"
[18:27:44.452]          // =>  TRUE
[18:27:44.452]        <block atomic="false" info="">
[18:27:44.452]          Message(0, "executing SWD power up");
[18:27:44.454]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:27:44.454]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:27:44.454]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:27:44.454]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:27:44.454]        </block>
[18:27:44.454]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:27:44.454]      </control>
[18:27:44.454]      // end if-block "powered_down"
[18:27:44.454]    </control>
[18:27:44.454]    <block atomic="false" info="">
[18:27:44.454]      __var DEBUG_PORT_VAL    = 0;
[18:27:44.454]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:27:44.454]      __var ACCESS_POINT_VAL  = 0;
[18:27:44.454]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:27:44.454]      __ap = 1; 
[18:27:44.454]        // -> [__ap <= 0x00000001]
[18:27:44.454]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:27:44.454]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:27:44.454]      __ap = 4;
[18:27:44.454]        // -> [__ap <= 0x00000004]
[18:27:44.460]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:27:44.460]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:27:44.461]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:27:44.461]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:27:44.461]    </block>
[18:27:44.461]    <block atomic="false" info="">
[18:27:44.461]      __var nReset = 0x80;
[18:27:44.461]        // -> [nReset <= 0x00000080]
[18:27:44.461]      __var canReadPins = 0;
[18:27:44.461]        // -> [canReadPins <= 0x00000000]
[18:27:44.461]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:27:44.461]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:27:44.461]        // -> [canReadPins <= 0x00000001]
[18:27:44.461]    </block>
[18:27:44.461]    <control if="" while="1" timeout="200" info="">
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.461]      // while-condition  =>  TRUE
[18:27:44.461]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.467]      // while "1"  (timeout="200")
[18:27:44.467]      // while-condition  =>  TRUE
[18:27:44.469]      // while "1"  (timeout="200")
[18:27:44.469]      // while-condition  =>  TRUE
[18:27:44.469]      // while "1"  (timeout="200")
[18:27:44.469]      // while-condition  =>  TRUE
[18:27:44.469]      // while "1"  (timeout="200")
[18:27:44.469]      // while-condition  =>  TRUE
[18:27:44.469]      // while "1"  (timeout="200")
[18:27:44.469]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.470]      // while "1"  (timeout="200")
[18:27:44.470]      // while-condition  =>  TRUE
[18:27:44.473]      // while "1"  (timeout="200")
[18:27:44.473]      // while  =>  TIMEOUT
[18:27:44.473]      // end while "1"
[18:27:44.473]    </control>
[18:27:44.473]    <control if="canReadPins" while="" timeout="0" info="">
[18:27:44.473]      // if-block "canReadPins"
[18:27:44.473]        // =>  TRUE
[18:27:44.473]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:27:44.473]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:27:44.473]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:27:44.473]        // while-condition  =>  FALSE
[18:27:44.473]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:27:44.473]      </control>
[18:27:44.473]      // end if-block "canReadPins"
[18:27:44.475]    </control>
[18:27:44.475]    <control if="!canReadPins" while="" timeout="0" info="">
[18:27:44.475]      // if-block "!canReadPins"
[18:27:44.475]        // =>  FALSE
[18:27:44.475]      // skip if-block "!canReadPins"
[18:27:44.475]    </control>
[18:27:44.475]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:27:44.475]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:27:44.475]        // =>  TRUE
[18:27:44.475]      <block atomic="false" info="">
[18:27:44.475]        WriteAP(0x00, 0x190008);
[18:27:44.476]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:27:44.476]        WriteAP(0xF0, 0x01);
[18:27:44.476]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:27:44.476]      </block>
[18:27:44.476]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:27:44.476]    </control>
[18:27:44.476]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:27:44.476]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:27:44.476]        // =>  FALSE
[18:27:44.476]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:27:44.476]    </control>
[18:27:44.476]    <block atomic="false" info="">
[18:27:44.476]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:27:44.480]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:27:44.480]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:27:44.480]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:27:44.481]      __ap = 0; //lets make sure we reset the access point selection
[18:27:44.481]        // -> [__ap <= 0x00000000]
[18:27:44.481]    </block>
[18:27:44.481]  </sequence>
[18:27:44.481]  
[18:27:44.484]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:27:44.484]  
[18:27:44.484]  <debugvars>
[18:27:44.484]    // Pre-defined
[18:27:44.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:27:44.484]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:27:44.484]    __dp=0x00000000
[18:27:44.484]    __ap=0x00000000
[18:27:44.484]    __traceout=0x00000000      (Trace Disabled)
[18:27:44.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:27:44.490]    __FlashAddr=0x00000000
[18:27:44.490]    __FlashLen=0x00000000
[18:27:44.490]    __FlashArg=0x00000000
[18:27:44.490]    __FlashOp=0x00000000
[18:27:44.490]    __Result=0x00000000
[18:27:44.490]  </debugvars>
[18:27:44.490]  
[18:27:44.490]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:27:44.491]    <block atomic="false" info="">
[18:27:44.491]      __var deviceID = 0;
[18:27:44.491]        // -> [deviceID <= 0x00000000]
[18:27:44.491]      __var version = 0;
[18:27:44.491]        // -> [version <= 0x00000000]
[18:27:44.491]      __var partNum = 0;
[18:27:44.491]        // -> [partNum <= 0x00000000]
[18:27:44.491]      __var manuf = 0;
[18:27:44.491]        // -> [manuf <= 0x00000000]
[18:27:44.491]      __var isMSPM0G1X0X_G3X0X = 0;
[18:27:44.491]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:27:44.491]      __var isProduction = 0;
[18:27:44.491]        // -> [isProduction <= 0x00000000]
[18:27:44.491]      __var continueId = 0;
[18:27:44.491]        // -> [continueId <= 0x00000000]
[18:27:44.491]      deviceID =   Read32(0x41C40004);
[18:27:44.495]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:27:44.495]        // -> [deviceID <= 0x2BB8802F]
[18:27:44.495]      version = deviceID >> 28;
[18:27:44.495]        // -> [version <= 0x00000002]
[18:27:44.495]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:27:44.495]        // -> [partNum <= 0x0000BB88]
[18:27:44.495]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:27:44.495]        // -> [manuf <= 0x00000017]
[18:27:44.495]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:27:44.495]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:27:44.496]      isProduction = (version > 0);
[18:27:44.496]        // -> [isProduction <= 0x00000001]
[18:27:44.496]    </block>
[18:27:44.496]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:27:44.496]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:27:44.496]        // =>  FALSE
[18:27:44.496]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:27:44.496]    </control>
[18:27:44.496]    <control if="continueId == 4" while="" timeout="0" info="">
[18:27:44.496]      // if-block "continueId == 4"
[18:27:44.496]        // =>  FALSE
[18:27:44.496]      // skip if-block "continueId == 4"
[18:27:44.496]    </control>
[18:27:44.496]    <control if="!isProduction" while="" timeout="0" info="">
[18:27:44.496]      // if-block "!isProduction"
[18:27:44.496]        // =>  FALSE
[18:27:44.496]      // skip if-block "!isProduction"
[18:27:44.496]    </control>
[18:27:44.496]  </sequence>
[18:27:44.496]  
[18:27:56.985]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:27:56.985]  
[18:27:57.002]  <debugvars>
[18:27:57.002]    // Pre-defined
[18:27:57.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:27:57.002]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:27:57.002]    __dp=0x00000000
[18:27:57.002]    __ap=0x00000000
[18:27:57.002]    __traceout=0x00000000      (Trace Disabled)
[18:27:57.002]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:27:57.002]    __FlashAddr=0x00000000
[18:27:57.002]    __FlashLen=0x00000000
[18:27:57.002]    __FlashArg=0x00000000
[18:27:57.002]    __FlashOp=0x00000000
[18:27:57.002]    __Result=0x00000000
[18:27:57.002]  </debugvars>
[18:27:57.002]  
[18:27:57.002]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:27:57.002]    <block atomic="false" info="">
[18:27:57.002]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:27:57.002]        // -> [isSWJ <= 0x00000001]
[18:27:57.002]      __var hasDormant = __protocol & 0x00020000;
[18:27:57.002]        // -> [hasDormant <= 0x00000000]
[18:27:57.002]      __var protType   = __protocol & 0x0000FFFF;
[18:27:57.002]        // -> [protType <= 0x00000002]
[18:27:57.002]    </block>
[18:27:57.002]    <control if="protType == 1" while="" timeout="0" info="">
[18:27:57.002]      // if-block "protType == 1"
[18:27:57.002]        // =>  FALSE
[18:27:57.002]      // skip if-block "protType == 1"
[18:27:57.002]    </control>
[18:27:57.002]    <control if="protType == 2" while="" timeout="0" info="">
[18:27:57.002]      // if-block "protType == 2"
[18:27:57.002]        // =>  TRUE
[18:27:57.002]      <control if="isSWJ" while="" timeout="0" info="">
[18:27:57.002]        // if-block "isSWJ"
[18:27:57.002]          // =>  TRUE
[18:27:57.002]        <control if="hasDormant" while="" timeout="0" info="">
[18:27:57.002]          // if-block "hasDormant"
[18:27:57.002]            // =>  FALSE
[18:27:57.006]          // skip if-block "hasDormant"
[18:27:57.006]        </control>
[18:27:57.006]        <control if="!hasDormant" while="" timeout="0" info="">
[18:27:57.006]          // if-block "!hasDormant"
[18:27:57.006]            // =>  TRUE
[18:27:57.006]          <block atomic="false" info="">
[18:27:57.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:27:57.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:27:57.007]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:27:57.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:27:57.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:27:57.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:27:57.007]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:27:57.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:27:57.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:27:57.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:27:57.007]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:27:57.007]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:27:57.007]          </block>
[18:27:57.007]          // end if-block "!hasDormant"
[18:27:57.007]        </control>
[18:27:57.007]        // end if-block "isSWJ"
[18:27:57.007]      </control>
[18:27:57.007]      <control if="!isSWJ" while="" timeout="0" info="">
[18:27:57.007]        // if-block "!isSWJ"
[18:27:57.007]          // =>  FALSE
[18:27:57.007]        // skip if-block "!isSWJ"
[18:27:57.007]      </control>
[18:27:57.007]      <block atomic="false" info="">
[18:27:57.007]        ReadDP(0x0);
[18:27:57.007]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:27:57.007]      </block>
[18:27:57.007]      // end if-block "protType == 2"
[18:27:57.007]    </control>
[18:27:57.007]  </sequence>
[18:27:57.007]  
[18:27:57.007]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:27:57.007]  
[18:27:57.007]  <debugvars>
[18:27:57.007]    // Pre-defined
[18:27:57.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:27:57.007]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:27:57.007]    __dp=0x00000000
[18:27:57.007]    __ap=0x00000000
[18:27:57.007]    __traceout=0x00000000      (Trace Disabled)
[18:27:57.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:27:57.007]    __FlashAddr=0x00000000
[18:27:57.007]    __FlashLen=0x00000000
[18:27:57.007]    __FlashArg=0x00000000
[18:27:57.007]    __FlashOp=0x00000000
[18:27:57.007]    __Result=0x00000000
[18:27:57.007]  </debugvars>
[18:27:57.007]  
[18:27:57.007]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:27:57.007]    <block atomic="false" info="">
[18:27:57.007]      __var SW_DP_ABORT       = 0x0;
[18:27:57.007]        // -> [SW_DP_ABORT <= 0x00000000]
[18:27:57.007]      __var DP_CTRL_STAT      = 0x4;
[18:27:57.007]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:27:57.007]      __var DP_SELECT         = 0x8;
[18:27:57.007]        // -> [DP_SELECT <= 0x00000008]
[18:27:57.007]      __var powered_down      = 0;
[18:27:57.007]        // -> [powered_down <= 0x00000000]
[18:27:57.007]      WriteDP(DP_SELECT, 0x00000000);
[18:27:57.016]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:27:57.016]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:27:57.016]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:27:57.016]        // -> [powered_down <= 0x00000001]
[18:27:57.016]    </block>
[18:27:57.016]    <control if="powered_down" while="" timeout="0" info="">
[18:27:57.016]      // if-block "powered_down"
[18:27:57.016]        // =>  TRUE
[18:27:57.016]      <block atomic="false" info="">
[18:27:57.016]        Message(0, "Debug/System power-up request sent");
[18:27:57.018]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:27:57.018]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:27:57.018]      </block>
[18:27:57.018]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:27:57.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:27:57.018]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:27:57.018]        // while-condition  =>  FALSE
[18:27:57.018]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:27:57.018]      </control>
[18:27:57.018]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:27:57.018]        // if-block "(__protocol & 0xFFFF) == 1"
[18:27:57.018]          // =>  FALSE
[18:27:57.018]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:27:57.018]      </control>
[18:27:57.018]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:27:57.018]        // if-block "(__protocol & 0xFFFF) == 2"
[18:27:57.018]          // =>  TRUE
[18:27:57.018]        <block atomic="false" info="">
[18:27:57.018]          Message(0, "executing SWD power up");
[18:27:57.018]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:27:57.018]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:27:57.018]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:27:57.018]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:27:57.018]        </block>
[18:27:57.018]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:27:57.018]      </control>
[18:27:57.018]      // end if-block "powered_down"
[18:27:57.018]    </control>
[18:27:57.018]    <block atomic="false" info="">
[18:27:57.018]      __var DEBUG_PORT_VAL    = 0;
[18:27:57.018]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:27:57.018]      __var ACCESS_POINT_VAL  = 0;
[18:27:57.018]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:27:57.018]      __ap = 1; 
[18:27:57.018]        // -> [__ap <= 0x00000001]
[18:27:57.026]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:27:57.026]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:27:57.026]      __ap = 4;
[18:27:57.026]        // -> [__ap <= 0x00000004]
[18:27:57.026]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:27:57.028]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:27:57.028]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:27:57.028]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:27:57.028]    </block>
[18:27:57.028]    <block atomic="false" info="">
[18:27:57.028]      __var nReset = 0x80;
[18:27:57.028]        // -> [nReset <= 0x00000080]
[18:27:57.028]      __var canReadPins = 0;
[18:27:57.028]        // -> [canReadPins <= 0x00000000]
[18:27:57.028]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:27:57.028]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:27:57.028]        // -> [canReadPins <= 0x00000001]
[18:27:57.028]    </block>
[18:27:57.028]    <control if="" while="1" timeout="200" info="">
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.028]      // while "1"  (timeout="200")
[18:27:57.028]      // while-condition  =>  TRUE
[18:27:57.036]      // while "1"  (timeout="200")
[18:27:57.036]      // while  =>  TIMEOUT
[18:27:57.036]      // end while "1"
[18:27:57.036]    </control>
[18:27:57.036]    <control if="canReadPins" while="" timeout="0" info="">
[18:27:57.036]      // if-block "canReadPins"
[18:27:57.037]        // =>  TRUE
[18:27:57.037]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:27:57.037]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:27:57.037]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:27:57.037]        // while-condition  =>  FALSE
[18:27:57.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:27:57.038]      </control>
[18:27:57.038]      // end if-block "canReadPins"
[18:27:57.038]    </control>
[18:27:57.038]    <control if="!canReadPins" while="" timeout="0" info="">
[18:27:57.038]      // if-block "!canReadPins"
[18:27:57.039]        // =>  FALSE
[18:27:57.039]      // skip if-block "!canReadPins"
[18:27:57.039]    </control>
[18:27:57.039]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:27:57.039]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:27:57.039]        // =>  TRUE
[18:27:57.039]      <block atomic="false" info="">
[18:27:57.039]        WriteAP(0x00, 0x190008);
[18:27:57.039]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:27:57.039]        WriteAP(0xF0, 0x01);
[18:27:57.039]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:27:57.042]      </block>
[18:27:57.042]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:27:57.042]    </control>
[18:27:57.042]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:27:57.042]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:27:57.042]        // =>  FALSE
[18:27:57.042]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:27:57.042]    </control>
[18:27:57.042]    <block atomic="false" info="">
[18:27:57.042]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:27:57.043]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:27:57.044]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:27:57.044]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:27:57.045]      __ap = 0; //lets make sure we reset the access point selection
[18:27:57.045]        // -> [__ap <= 0x00000000]
[18:27:57.045]    </block>
[18:27:57.045]  </sequence>
[18:27:57.045]  
[18:27:57.052]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:27:57.052]  
[18:27:57.052]  <debugvars>
[18:27:57.052]    // Pre-defined
[18:27:57.052]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:27:57.052]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:27:57.053]    __dp=0x00000000
[18:27:57.053]    __ap=0x00000000
[18:27:57.053]    __traceout=0x00000000      (Trace Disabled)
[18:27:57.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:27:57.053]    __FlashAddr=0x00000000
[18:27:57.053]    __FlashLen=0x00000000
[18:27:57.053]    __FlashArg=0x00000000
[18:27:57.053]    __FlashOp=0x00000000
[18:27:57.053]    __Result=0x00000000
[18:27:57.053]  </debugvars>
[18:27:57.053]  
[18:27:57.053]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:27:57.054]    <block atomic="false" info="">
[18:27:57.054]      __var deviceID = 0;
[18:27:57.054]        // -> [deviceID <= 0x00000000]
[18:27:57.054]      __var version = 0;
[18:27:57.054]        // -> [version <= 0x00000000]
[18:27:57.054]      __var partNum = 0;
[18:27:57.054]        // -> [partNum <= 0x00000000]
[18:27:57.054]      __var manuf = 0;
[18:27:57.054]        // -> [manuf <= 0x00000000]
[18:27:57.054]      __var isMSPM0G1X0X_G3X0X = 0;
[18:27:57.054]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:27:57.055]      __var isProduction = 0;
[18:27:57.055]        // -> [isProduction <= 0x00000000]
[18:27:57.055]      __var continueId = 0;
[18:27:57.055]        // -> [continueId <= 0x00000000]
[18:27:57.055]      deviceID =   Read32(0x41C40004);
[18:27:57.057]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:27:57.057]        // -> [deviceID <= 0x2BB8802F]
[18:27:57.057]      version = deviceID >> 28;
[18:27:57.057]        // -> [version <= 0x00000002]
[18:27:57.058]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:27:57.058]        // -> [partNum <= 0x0000BB88]
[18:27:57.058]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:27:57.058]        // -> [manuf <= 0x00000017]
[18:27:57.058]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:27:57.058]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:27:57.058]      isProduction = (version > 0);
[18:27:57.058]        // -> [isProduction <= 0x00000001]
[18:27:57.058]    </block>
[18:27:57.058]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:27:57.058]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:27:57.058]        // =>  FALSE
[18:27:57.058]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:27:57.059]    </control>
[18:27:57.059]    <control if="continueId == 4" while="" timeout="0" info="">
[18:27:57.059]      // if-block "continueId == 4"
[18:27:57.059]        // =>  FALSE
[18:27:57.059]      // skip if-block "continueId == 4"
[18:27:57.059]    </control>
[18:27:57.059]    <control if="!isProduction" while="" timeout="0" info="">
[18:27:57.059]      // if-block "!isProduction"
[18:27:57.059]        // =>  FALSE
[18:27:57.059]      // skip if-block "!isProduction"
[18:27:57.059]    </control>
[18:27:57.059]  </sequence>
[18:27:57.059]  
[18:29:37.746]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:29:37.746]  
[18:29:37.746]  <debugvars>
[18:29:37.746]    // Pre-defined
[18:29:37.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:37.746]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:29:37.746]    __dp=0x00000000
[18:29:37.746]    __ap=0x00000000
[18:29:37.746]    __traceout=0x00000000      (Trace Disabled)
[18:29:37.755]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:37.755]    __FlashAddr=0x00000000
[18:29:37.755]    __FlashLen=0x00000000
[18:29:37.755]    __FlashArg=0x00000000
[18:29:37.755]    __FlashOp=0x00000000
[18:29:37.755]    __Result=0x00000000
[18:29:37.755]  </debugvars>
[18:29:37.755]  
[18:29:37.755]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:29:37.755]    <block atomic="false" info="">
[18:29:37.755]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:29:37.755]        // -> [isSWJ <= 0x00000001]
[18:29:37.755]      __var hasDormant = __protocol & 0x00020000;
[18:29:37.755]        // -> [hasDormant <= 0x00000000]
[18:29:37.755]      __var protType   = __protocol & 0x0000FFFF;
[18:29:37.755]        // -> [protType <= 0x00000002]
[18:29:37.755]    </block>
[18:29:37.755]    <control if="protType == 1" while="" timeout="0" info="">
[18:29:37.755]      // if-block "protType == 1"
[18:29:37.755]        // =>  FALSE
[18:29:37.755]      // skip if-block "protType == 1"
[18:29:37.755]    </control>
[18:29:37.755]    <control if="protType == 2" while="" timeout="0" info="">
[18:29:37.755]      // if-block "protType == 2"
[18:29:37.755]        // =>  TRUE
[18:29:37.755]      <control if="isSWJ" while="" timeout="0" info="">
[18:29:37.755]        // if-block "isSWJ"
[18:29:37.755]          // =>  TRUE
[18:29:37.755]        <control if="hasDormant" while="" timeout="0" info="">
[18:29:37.755]          // if-block "hasDormant"
[18:29:37.755]            // =>  FALSE
[18:29:37.755]          // skip if-block "hasDormant"
[18:29:37.755]        </control>
[18:29:37.755]        <control if="!hasDormant" while="" timeout="0" info="">
[18:29:37.755]          // if-block "!hasDormant"
[18:29:37.755]            // =>  TRUE
[18:29:37.755]          <block atomic="false" info="">
[18:29:37.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:29:37.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:37.759]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:29:37.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:29:37.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:29:37.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:37.759]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:29:37.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:29:37.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:29:37.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:37.759]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:29:37.759]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:29:37.759]          </block>
[18:29:37.759]          // end if-block "!hasDormant"
[18:29:37.762]        </control>
[18:29:37.762]        // end if-block "isSWJ"
[18:29:37.762]      </control>
[18:29:37.762]      <control if="!isSWJ" while="" timeout="0" info="">
[18:29:37.762]        // if-block "!isSWJ"
[18:29:37.762]          // =>  FALSE
[18:29:37.762]        // skip if-block "!isSWJ"
[18:29:37.762]      </control>
[18:29:37.762]      <block atomic="false" info="">
[18:29:37.762]        ReadDP(0x0);
[18:29:37.762]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:29:37.762]      </block>
[18:29:37.762]      // end if-block "protType == 2"
[18:29:37.762]    </control>
[18:29:37.762]  </sequence>
[18:29:37.762]  
[18:29:37.762]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:29:37.762]  
[18:29:37.762]  <debugvars>
[18:29:37.765]    // Pre-defined
[18:29:37.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:37.765]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:29:37.765]    __dp=0x00000000
[18:29:37.765]    __ap=0x00000000
[18:29:37.765]    __traceout=0x00000000      (Trace Disabled)
[18:29:37.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:37.765]    __FlashAddr=0x00000000
[18:29:37.765]    __FlashLen=0x00000000
[18:29:37.765]    __FlashArg=0x00000000
[18:29:37.765]    __FlashOp=0x00000000
[18:29:37.765]    __Result=0x00000000
[18:29:37.765]  </debugvars>
[18:29:37.765]  
[18:29:37.765]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:29:37.765]    <block atomic="false" info="">
[18:29:37.765]      __var SW_DP_ABORT       = 0x0;
[18:29:37.765]        // -> [SW_DP_ABORT <= 0x00000000]
[18:29:37.765]      __var DP_CTRL_STAT      = 0x4;
[18:29:37.765]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:29:37.765]      __var DP_SELECT         = 0x8;
[18:29:37.765]        // -> [DP_SELECT <= 0x00000008]
[18:29:37.765]      __var powered_down      = 0;
[18:29:37.765]        // -> [powered_down <= 0x00000000]
[18:29:37.765]      WriteDP(DP_SELECT, 0x00000000);
[18:29:37.765]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:29:37.765]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:29:37.765]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:29:37.765]        // -> [powered_down <= 0x00000001]
[18:29:37.765]    </block>
[18:29:37.765]    <control if="powered_down" while="" timeout="0" info="">
[18:29:37.765]      // if-block "powered_down"
[18:29:37.765]        // =>  TRUE
[18:29:37.765]      <block atomic="false" info="">
[18:29:37.765]        Message(0, "Debug/System power-up request sent");
[18:29:37.765]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:29:37.765]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:29:37.765]      </block>
[18:29:37.765]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:29:37.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:29:37.765]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:29:37.765]        // while-condition  =>  FALSE
[18:29:37.765]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:29:37.765]      </control>
[18:29:37.765]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:29:37.765]        // if-block "(__protocol & 0xFFFF) == 1"
[18:29:37.765]          // =>  FALSE
[18:29:37.765]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:29:37.765]      </control>
[18:29:37.765]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:29:37.765]        // if-block "(__protocol & 0xFFFF) == 2"
[18:29:37.765]          // =>  TRUE
[18:29:37.765]        <block atomic="false" info="">
[18:29:37.765]          Message(0, "executing SWD power up");
[18:29:37.775]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:29:37.775]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:29:37.775]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:29:37.775]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:29:37.775]        </block>
[18:29:37.775]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:29:37.777]      </control>
[18:29:37.778]      // end if-block "powered_down"
[18:29:37.778]    </control>
[18:29:37.778]    <block atomic="false" info="">
[18:29:37.778]      __var DEBUG_PORT_VAL    = 0;
[18:29:37.778]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:29:37.778]      __var ACCESS_POINT_VAL  = 0;
[18:29:37.778]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:29:37.778]      __ap = 1; 
[18:29:37.779]        // -> [__ap <= 0x00000001]
[18:29:37.779]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:29:37.779]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:29:37.779]      __ap = 4;
[18:29:37.779]        // -> [__ap <= 0x00000004]
[18:29:37.779]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:29:37.781]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:29:37.781]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:29:37.781]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:29:37.783]    </block>
[18:29:37.783]    <block atomic="false" info="">
[18:29:37.783]      __var nReset = 0x80;
[18:29:37.783]        // -> [nReset <= 0x00000080]
[18:29:37.783]      __var canReadPins = 0;
[18:29:37.784]        // -> [canReadPins <= 0x00000000]
[18:29:37.784]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:29:37.784]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:29:37.784]        // -> [canReadPins <= 0x00000001]
[18:29:37.784]    </block>
[18:29:37.784]    <control if="" while="1" timeout="200" info="">
[18:29:37.784]      // while "1"  (timeout="200")
[18:29:37.784]      // while-condition  =>  TRUE
[18:29:37.784]      // while "1"  (timeout="200")
[18:29:37.784]      // while-condition  =>  TRUE
[18:29:37.786]      // while "1"  (timeout="200")
[18:29:37.786]      // while  =>  TIMEOUT
[18:29:37.786]      // end while "1"
[18:29:37.786]    </control>
[18:29:37.786]    <control if="canReadPins" while="" timeout="0" info="">
[18:29:37.786]      // if-block "canReadPins"
[18:29:37.786]        // =>  TRUE
[18:29:37.786]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:29:37.786]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:29:37.786]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:29:37.786]        // while-condition  =>  FALSE
[18:29:37.787]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:29:37.787]      </control>
[18:29:37.787]      // end if-block "canReadPins"
[18:29:37.787]    </control>
[18:29:37.787]    <control if="!canReadPins" while="" timeout="0" info="">
[18:29:37.787]      // if-block "!canReadPins"
[18:29:37.787]        // =>  FALSE
[18:29:37.787]      // skip if-block "!canReadPins"
[18:29:37.787]    </control>
[18:29:37.787]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:29:37.787]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:29:37.787]        // =>  TRUE
[18:29:37.787]      <block atomic="false" info="">
[18:29:37.787]        WriteAP(0x00, 0x190008);
[18:29:37.787]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:29:37.789]        WriteAP(0xF0, 0x01);
[18:29:37.791]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:29:37.791]      </block>
[18:29:37.791]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:29:37.791]    </control>
[18:29:37.791]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:29:37.791]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:29:37.791]        // =>  FALSE
[18:29:37.791]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:29:37.791]    </control>
[18:29:37.791]    <block atomic="false" info="">
[18:29:37.792]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:29:37.793]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:29:37.793]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:29:37.793]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:29:37.794]      __ap = 0; //lets make sure we reset the access point selection
[18:29:37.794]        // -> [__ap <= 0x00000000]
[18:29:37.794]    </block>
[18:29:37.794]  </sequence>
[18:29:37.794]  
[18:29:37.797]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:29:37.797]  
[18:29:37.797]  <debugvars>
[18:29:37.797]    // Pre-defined
[18:29:37.797]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:37.797]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:29:37.797]    __dp=0x00000000
[18:29:37.797]    __ap=0x00000000
[18:29:37.797]    __traceout=0x00000000      (Trace Disabled)
[18:29:37.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:37.797]    __FlashAddr=0x00000000
[18:29:37.797]    __FlashLen=0x00000000
[18:29:37.797]    __FlashArg=0x00000000
[18:29:37.797]    __FlashOp=0x00000000
[18:29:37.797]    __Result=0x00000000
[18:29:37.797]  </debugvars>
[18:29:37.797]  
[18:29:37.797]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:29:37.804]    <block atomic="false" info="">
[18:29:37.804]      __var deviceID = 0;
[18:29:37.804]        // -> [deviceID <= 0x00000000]
[18:29:37.804]      __var version = 0;
[18:29:37.804]        // -> [version <= 0x00000000]
[18:29:37.804]      __var partNum = 0;
[18:29:37.804]        // -> [partNum <= 0x00000000]
[18:29:37.804]      __var manuf = 0;
[18:29:37.804]        // -> [manuf <= 0x00000000]
[18:29:37.804]      __var isMSPM0G1X0X_G3X0X = 0;
[18:29:37.804]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:29:37.804]      __var isProduction = 0;
[18:29:37.804]        // -> [isProduction <= 0x00000000]
[18:29:37.804]      __var continueId = 0;
[18:29:37.804]        // -> [continueId <= 0x00000000]
[18:29:37.805]      deviceID =   Read32(0x41C40004);
[18:29:37.806]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:29:37.806]        // -> [deviceID <= 0x2BB8802F]
[18:29:37.806]      version = deviceID >> 28;
[18:29:37.806]        // -> [version <= 0x00000002]
[18:29:37.806]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:29:37.806]        // -> [partNum <= 0x0000BB88]
[18:29:37.806]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:29:37.806]        // -> [manuf <= 0x00000017]
[18:29:37.806]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:29:37.806]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:29:37.806]      isProduction = (version > 0);
[18:29:37.806]        // -> [isProduction <= 0x00000001]
[18:29:37.806]    </block>
[18:29:37.806]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:29:37.806]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:29:37.806]        // =>  FALSE
[18:29:37.806]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:29:37.806]    </control>
[18:29:37.806]    <control if="continueId == 4" while="" timeout="0" info="">
[18:29:37.806]      // if-block "continueId == 4"
[18:29:37.806]        // =>  FALSE
[18:29:37.806]      // skip if-block "continueId == 4"
[18:29:37.806]    </control>
[18:29:37.806]    <control if="!isProduction" while="" timeout="0" info="">
[18:29:37.806]      // if-block "!isProduction"
[18:29:37.806]        // =>  FALSE
[18:29:37.806]      // skip if-block "!isProduction"
[18:29:37.806]    </control>
[18:29:37.806]  </sequence>
[18:29:37.806]  
[18:31:13.260]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:31:13.260]  
[18:31:13.274]  <debugvars>
[18:31:13.274]    // Pre-defined
[18:31:13.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:13.274]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:31:13.274]    __dp=0x00000000
[18:31:13.274]    __ap=0x00000000
[18:31:13.274]    __traceout=0x00000000      (Trace Disabled)
[18:31:13.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:13.274]    __FlashAddr=0x00000000
[18:31:13.274]    __FlashLen=0x00000000
[18:31:13.274]    __FlashArg=0x00000000
[18:31:13.274]    __FlashOp=0x00000000
[18:31:13.274]    __Result=0x00000000
[18:31:13.274]  </debugvars>
[18:31:13.274]  
[18:31:13.274]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:31:13.274]    <block atomic="false" info="">
[18:31:13.274]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:31:13.274]        // -> [isSWJ <= 0x00000001]
[18:31:13.274]      __var hasDormant = __protocol & 0x00020000;
[18:31:13.274]        // -> [hasDormant <= 0x00000000]
[18:31:13.274]      __var protType   = __protocol & 0x0000FFFF;
[18:31:13.276]        // -> [protType <= 0x00000002]
[18:31:13.276]    </block>
[18:31:13.276]    <control if="protType == 1" while="" timeout="0" info="">
[18:31:13.276]      // if-block "protType == 1"
[18:31:13.276]        // =>  FALSE
[18:31:13.276]      // skip if-block "protType == 1"
[18:31:13.276]    </control>
[18:31:13.277]    <control if="protType == 2" while="" timeout="0" info="">
[18:31:13.277]      // if-block "protType == 2"
[18:31:13.277]        // =>  TRUE
[18:31:13.277]      <control if="isSWJ" while="" timeout="0" info="">
[18:31:13.277]        // if-block "isSWJ"
[18:31:13.277]          // =>  TRUE
[18:31:13.277]        <control if="hasDormant" while="" timeout="0" info="">
[18:31:13.277]          // if-block "hasDormant"
[18:31:13.277]            // =>  FALSE
[18:31:13.277]          // skip if-block "hasDormant"
[18:31:13.277]        </control>
[18:31:13.277]        <control if="!hasDormant" while="" timeout="0" info="">
[18:31:13.277]          // if-block "!hasDormant"
[18:31:13.277]            // =>  TRUE
[18:31:13.277]          <block atomic="false" info="">
[18:31:13.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:31:13.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:13.277]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:31:13.277]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:31:13.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:31:13.280]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:13.280]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:31:13.281]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:31:13.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:31:13.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:13.281]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:31:13.281]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:31:13.281]          </block>
[18:31:13.281]          // end if-block "!hasDormant"
[18:31:13.281]        </control>
[18:31:13.281]        // end if-block "isSWJ"
[18:31:13.281]      </control>
[18:31:13.281]      <control if="!isSWJ" while="" timeout="0" info="">
[18:31:13.281]        // if-block "!isSWJ"
[18:31:13.281]          // =>  FALSE
[18:31:13.281]        // skip if-block "!isSWJ"
[18:31:13.281]      </control>
[18:31:13.281]      <block atomic="false" info="">
[18:31:13.281]        ReadDP(0x0);
[18:31:13.283]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:31:13.283]      </block>
[18:31:13.283]      // end if-block "protType == 2"
[18:31:13.283]    </control>
[18:31:13.283]  </sequence>
[18:31:13.284]  
[18:31:13.284]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:31:13.284]  
[18:31:13.284]  <debugvars>
[18:31:13.284]    // Pre-defined
[18:31:13.284]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:13.284]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:31:13.284]    __dp=0x00000000
[18:31:13.285]    __ap=0x00000000
[18:31:13.285]    __traceout=0x00000000      (Trace Disabled)
[18:31:13.285]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:13.285]    __FlashAddr=0x00000000
[18:31:13.285]    __FlashLen=0x00000000
[18:31:13.285]    __FlashArg=0x00000000
[18:31:13.285]    __FlashOp=0x00000000
[18:31:13.285]    __Result=0x00000000
[18:31:13.285]  </debugvars>
[18:31:13.285]  
[18:31:13.285]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:31:13.285]    <block atomic="false" info="">
[18:31:13.285]      __var SW_DP_ABORT       = 0x0;
[18:31:13.285]        // -> [SW_DP_ABORT <= 0x00000000]
[18:31:13.285]      __var DP_CTRL_STAT      = 0x4;
[18:31:13.285]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:31:13.285]      __var DP_SELECT         = 0x8;
[18:31:13.285]        // -> [DP_SELECT <= 0x00000008]
[18:31:13.285]      __var powered_down      = 0;
[18:31:13.285]        // -> [powered_down <= 0x00000000]
[18:31:13.285]      WriteDP(DP_SELECT, 0x00000000);
[18:31:13.287]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:31:13.287]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:31:13.287]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:31:13.287]        // -> [powered_down <= 0x00000001]
[18:31:13.288]    </block>
[18:31:13.288]    <control if="powered_down" while="" timeout="0" info="">
[18:31:13.289]      // if-block "powered_down"
[18:31:13.289]        // =>  TRUE
[18:31:13.289]      <block atomic="false" info="">
[18:31:13.289]        Message(0, "Debug/System power-up request sent");
[18:31:13.290]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:31:13.290]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:31:13.290]      </block>
[18:31:13.290]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:31:13.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:31:13.290]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:31:13.290]        // while-condition  =>  FALSE
[18:31:13.290]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:31:13.290]      </control>
[18:31:13.290]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:31:13.290]        // if-block "(__protocol & 0xFFFF) == 1"
[18:31:13.290]          // =>  FALSE
[18:31:13.290]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:31:13.290]      </control>
[18:31:13.290]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:31:13.290]        // if-block "(__protocol & 0xFFFF) == 2"
[18:31:13.290]          // =>  TRUE
[18:31:13.290]        <block atomic="false" info="">
[18:31:13.290]          Message(0, "executing SWD power up");
[18:31:13.294]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:31:13.294]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:31:13.294]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:31:13.295]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:31:13.295]        </block>
[18:31:13.295]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:31:13.295]      </control>
[18:31:13.295]      // end if-block "powered_down"
[18:31:13.295]    </control>
[18:31:13.295]    <block atomic="false" info="">
[18:31:13.295]      __var DEBUG_PORT_VAL    = 0;
[18:31:13.295]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:31:13.295]      __var ACCESS_POINT_VAL  = 0;
[18:31:13.295]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:31:13.295]      __ap = 1; 
[18:31:13.295]        // -> [__ap <= 0x00000001]
[18:31:13.297]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:31:13.297]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:31:13.297]      __ap = 4;
[18:31:13.297]        // -> [__ap <= 0x00000004]
[18:31:13.297]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:31:13.299]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:31:13.299]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:31:13.299]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:31:13.302]    </block>
[18:31:13.302]    <block atomic="false" info="">
[18:31:13.302]      __var nReset = 0x80;
[18:31:13.302]        // -> [nReset <= 0x00000080]
[18:31:13.302]      __var canReadPins = 0;
[18:31:13.302]        // -> [canReadPins <= 0x00000000]
[18:31:13.302]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:31:13.302]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:31:13.302]        // -> [canReadPins <= 0x00000001]
[18:31:13.302]    </block>
[18:31:13.303]    <control if="" while="1" timeout="200" info="">
[18:31:13.303]      // while "1"  (timeout="200")
[18:31:13.303]      // while-condition  =>  TRUE
[18:31:13.303]      // while "1"  (timeout="200")
[18:31:13.303]      // while-condition  =>  TRUE
[18:31:13.303]      // while "1"  (timeout="200")
[18:31:13.303]      // while-condition  =>  TRUE
[18:31:13.303]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.305]      // while-condition  =>  TRUE
[18:31:13.305]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.307]      // while "1"  (timeout="200")
[18:31:13.307]      // while-condition  =>  TRUE
[18:31:13.309]      // while "1"  (timeout="200")
[18:31:13.309]      // while-condition  =>  TRUE
[18:31:13.309]      // while "1"  (timeout="200")
[18:31:13.309]      // while-condition  =>  TRUE
[18:31:13.309]      // while "1"  (timeout="200")
[18:31:13.309]      // while-condition  =>  TRUE
[18:31:13.309]      // while "1"  (timeout="200")
[18:31:13.309]      // while-condition  =>  TRUE
[18:31:13.309]      // while "1"  (timeout="200")
[18:31:13.309]      // while-condition  =>  TRUE
[18:31:13.309]      // while "1"  (timeout="200")
[18:31:13.309]      // while-condition  =>  TRUE
[18:31:13.309]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.310]      // while-condition  =>  TRUE
[18:31:13.310]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.313]      // while "1"  (timeout="200")
[18:31:13.313]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.315]      // while "1"  (timeout="200")
[18:31:13.315]      // while-condition  =>  TRUE
[18:31:13.317]      // while "1"  (timeout="200")
[18:31:13.317]      // while  =>  TIMEOUT
[18:31:13.317]      // end while "1"
[18:31:13.317]    </control>
[18:31:13.317]    <control if="canReadPins" while="" timeout="0" info="">
[18:31:13.317]      // if-block "canReadPins"
[18:31:13.317]        // =>  TRUE
[18:31:13.317]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:31:13.317]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:31:13.317]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:31:13.317]        // while-condition  =>  FALSE
[18:31:13.317]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:31:13.317]      </control>
[18:31:13.317]      // end if-block "canReadPins"
[18:31:13.317]    </control>
[18:31:13.317]    <control if="!canReadPins" while="" timeout="0" info="">
[18:31:13.317]      // if-block "!canReadPins"
[18:31:13.317]        // =>  FALSE
[18:31:13.317]      // skip if-block "!canReadPins"
[18:31:13.317]    </control>
[18:31:13.317]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:31:13.317]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:31:13.317]        // =>  TRUE
[18:31:13.317]      <block atomic="false" info="">
[18:31:13.317]        WriteAP(0x00, 0x190008);
[18:31:13.320]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:31:13.320]        WriteAP(0xF0, 0x01);
[18:31:13.320]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:31:13.320]      </block>
[18:31:13.320]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:31:13.320]    </control>
[18:31:13.320]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:31:13.320]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:31:13.320]        // =>  FALSE
[18:31:13.320]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:31:13.320]    </control>
[18:31:13.320]    <block atomic="false" info="">
[18:31:13.320]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:31:13.320]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:31:13.320]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:31:13.320]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:31:13.325]      __ap = 0; //lets make sure we reset the access point selection
[18:31:13.325]        // -> [__ap <= 0x00000000]
[18:31:13.325]    </block>
[18:31:13.325]  </sequence>
[18:31:13.325]  
[18:31:13.327]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:31:13.327]  
[18:31:13.327]  <debugvars>
[18:31:13.332]    // Pre-defined
[18:31:13.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:13.332]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:31:13.332]    __dp=0x00000000
[18:31:13.332]    __ap=0x00000000
[18:31:13.332]    __traceout=0x00000000      (Trace Disabled)
[18:31:13.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:13.332]    __FlashAddr=0x00000000
[18:31:13.332]    __FlashLen=0x00000000
[18:31:13.332]    __FlashArg=0x00000000
[18:31:13.332]    __FlashOp=0x00000000
[18:31:13.332]    __Result=0x00000000
[18:31:13.332]  </debugvars>
[18:31:13.332]  
[18:31:13.332]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:31:13.332]    <block atomic="false" info="">
[18:31:13.332]      __var deviceID = 0;
[18:31:13.332]        // -> [deviceID <= 0x00000000]
[18:31:13.332]      __var version = 0;
[18:31:13.332]        // -> [version <= 0x00000000]
[18:31:13.332]      __var partNum = 0;
[18:31:13.332]        // -> [partNum <= 0x00000000]
[18:31:13.332]      __var manuf = 0;
[18:31:13.332]        // -> [manuf <= 0x00000000]
[18:31:13.332]      __var isMSPM0G1X0X_G3X0X = 0;
[18:31:13.332]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:31:13.332]      __var isProduction = 0;
[18:31:13.332]        // -> [isProduction <= 0x00000000]
[18:31:13.332]      __var continueId = 0;
[18:31:13.332]        // -> [continueId <= 0x00000000]
[18:31:13.332]      deviceID =   Read32(0x41C40004);
[18:31:13.337]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:31:13.337]        // -> [deviceID <= 0x2BB8802F]
[18:31:13.338]      version = deviceID >> 28;
[18:31:13.338]        // -> [version <= 0x00000002]
[18:31:13.338]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:31:13.338]        // -> [partNum <= 0x0000BB88]
[18:31:13.338]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:31:13.338]        // -> [manuf <= 0x00000017]
[18:31:13.338]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:31:13.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:31:13.338]      isProduction = (version > 0);
[18:31:13.338]        // -> [isProduction <= 0x00000001]
[18:31:13.338]    </block>
[18:31:13.338]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:31:13.338]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:31:13.338]        // =>  FALSE
[18:31:13.338]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:31:13.338]    </control>
[18:31:13.338]    <control if="continueId == 4" while="" timeout="0" info="">
[18:31:13.338]      // if-block "continueId == 4"
[18:31:13.339]        // =>  FALSE
[18:31:13.339]      // skip if-block "continueId == 4"
[18:31:13.339]    </control>
[18:31:13.339]    <control if="!isProduction" while="" timeout="0" info="">
[18:31:13.339]      // if-block "!isProduction"
[18:31:13.339]        // =>  FALSE
[18:31:13.339]      // skip if-block "!isProduction"
[18:31:13.339]    </control>
[18:31:13.339]  </sequence>
[18:31:13.339]  
[18:31:23.267]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:31:23.267]  
[18:31:23.267]  <debugvars>
[18:31:23.267]    // Pre-defined
[18:31:23.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:23.267]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:31:23.267]    __dp=0x00000000
[18:31:23.267]    __ap=0x00000000
[18:31:23.267]    __traceout=0x00000000      (Trace Disabled)
[18:31:23.267]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:23.267]    __FlashAddr=0x00000000
[18:31:23.267]    __FlashLen=0x00000000
[18:31:23.267]    __FlashArg=0x00000000
[18:31:23.267]    __FlashOp=0x00000000
[18:31:23.267]    __Result=0x00000000
[18:31:23.267]  </debugvars>
[18:31:23.267]  
[18:31:23.271]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:31:23.271]    <block atomic="false" info="">
[18:31:23.271]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:31:23.271]        // -> [isSWJ <= 0x00000001]
[18:31:23.271]      __var hasDormant = __protocol & 0x00020000;
[18:31:23.271]        // -> [hasDormant <= 0x00000000]
[18:31:23.271]      __var protType   = __protocol & 0x0000FFFF;
[18:31:23.271]        // -> [protType <= 0x00000002]
[18:31:23.271]    </block>
[18:31:23.271]    <control if="protType == 1" while="" timeout="0" info="">
[18:31:23.271]      // if-block "protType == 1"
[18:31:23.271]        // =>  FALSE
[18:31:23.271]      // skip if-block "protType == 1"
[18:31:23.272]    </control>
[18:31:23.272]    <control if="protType == 2" while="" timeout="0" info="">
[18:31:23.272]      // if-block "protType == 2"
[18:31:23.272]        // =>  TRUE
[18:31:23.272]      <control if="isSWJ" while="" timeout="0" info="">
[18:31:23.272]        // if-block "isSWJ"
[18:31:23.272]          // =>  TRUE
[18:31:23.272]        <control if="hasDormant" while="" timeout="0" info="">
[18:31:23.272]          // if-block "hasDormant"
[18:31:23.272]            // =>  FALSE
[18:31:23.272]          // skip if-block "hasDormant"
[18:31:23.272]        </control>
[18:31:23.273]        <control if="!hasDormant" while="" timeout="0" info="">
[18:31:23.273]          // if-block "!hasDormant"
[18:31:23.273]            // =>  TRUE
[18:31:23.273]          <block atomic="false" info="">
[18:31:23.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:31:23.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:23.273]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:31:23.275]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:31:23.275]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:31:23.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:23.275]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:31:23.275]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:31:23.275]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:31:23.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:23.275]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:31:23.275]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:31:23.275]          </block>
[18:31:23.275]          // end if-block "!hasDormant"
[18:31:23.275]        </control>
[18:31:23.275]        // end if-block "isSWJ"
[18:31:23.275]      </control>
[18:31:23.275]      <control if="!isSWJ" while="" timeout="0" info="">
[18:31:23.278]        // if-block "!isSWJ"
[18:31:23.278]          // =>  FALSE
[18:31:23.278]        // skip if-block "!isSWJ"
[18:31:23.278]      </control>
[18:31:23.278]      <block atomic="false" info="">
[18:31:23.278]        ReadDP(0x0);
[18:31:23.278]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:31:23.278]      </block>
[18:31:23.278]      // end if-block "protType == 2"
[18:31:23.278]    </control>
[18:31:23.278]  </sequence>
[18:31:23.278]  
[18:31:23.278]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:31:23.278]  
[18:31:23.278]  <debugvars>
[18:31:23.278]    // Pre-defined
[18:31:23.278]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:23.278]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:31:23.278]    __dp=0x00000000
[18:31:23.278]    __ap=0x00000000
[18:31:23.278]    __traceout=0x00000000      (Trace Disabled)
[18:31:23.278]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:23.278]    __FlashAddr=0x00000000
[18:31:23.278]    __FlashLen=0x00000000
[18:31:23.278]    __FlashArg=0x00000000
[18:31:23.278]    __FlashOp=0x00000000
[18:31:23.278]    __Result=0x00000000
[18:31:23.278]  </debugvars>
[18:31:23.278]  
[18:31:23.278]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:31:23.278]    <block atomic="false" info="">
[18:31:23.278]      __var SW_DP_ABORT       = 0x0;
[18:31:23.278]        // -> [SW_DP_ABORT <= 0x00000000]
[18:31:23.278]      __var DP_CTRL_STAT      = 0x4;
[18:31:23.278]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:31:23.278]      __var DP_SELECT         = 0x8;
[18:31:23.278]        // -> [DP_SELECT <= 0x00000008]
[18:31:23.278]      __var powered_down      = 0;
[18:31:23.278]        // -> [powered_down <= 0x00000000]
[18:31:23.278]      WriteDP(DP_SELECT, 0x00000000);
[18:31:23.278]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:31:23.278]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:31:23.278]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:31:23.278]        // -> [powered_down <= 0x00000001]
[18:31:23.284]    </block>
[18:31:23.284]    <control if="powered_down" while="" timeout="0" info="">
[18:31:23.284]      // if-block "powered_down"
[18:31:23.284]        // =>  TRUE
[18:31:23.284]      <block atomic="false" info="">
[18:31:23.284]        Message(0, "Debug/System power-up request sent");
[18:31:23.286]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:31:23.286]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:31:23.286]      </block>
[18:31:23.286]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:31:23.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:31:23.288]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:31:23.288]        // while-condition  =>  FALSE
[18:31:23.288]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:31:23.288]      </control>
[18:31:23.288]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:31:23.288]        // if-block "(__protocol & 0xFFFF) == 1"
[18:31:23.288]          // =>  FALSE
[18:31:23.288]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:31:23.288]      </control>
[18:31:23.288]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:31:23.288]        // if-block "(__protocol & 0xFFFF) == 2"
[18:31:23.288]          // =>  TRUE
[18:31:23.288]        <block atomic="false" info="">
[18:31:23.288]          Message(0, "executing SWD power up");
[18:31:23.288]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:31:23.288]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:31:23.288]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:31:23.288]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:31:23.288]        </block>
[18:31:23.288]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:31:23.288]      </control>
[18:31:23.288]      // end if-block "powered_down"
[18:31:23.288]    </control>
[18:31:23.288]    <block atomic="false" info="">
[18:31:23.288]      __var DEBUG_PORT_VAL    = 0;
[18:31:23.288]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:31:23.288]      __var ACCESS_POINT_VAL  = 0;
[18:31:23.288]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:31:23.294]      __ap = 1; 
[18:31:23.294]        // -> [__ap <= 0x00000001]
[18:31:23.294]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:31:23.295]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:31:23.295]      __ap = 4;
[18:31:23.295]        // -> [__ap <= 0x00000004]
[18:31:23.295]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:31:23.295]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:31:23.297]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:31:23.297]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:31:23.299]    </block>
[18:31:23.299]    <block atomic="false" info="">
[18:31:23.299]      __var nReset = 0x80;
[18:31:23.299]        // -> [nReset <= 0x00000080]
[18:31:23.299]      __var canReadPins = 0;
[18:31:23.299]        // -> [canReadPins <= 0x00000000]
[18:31:23.299]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:31:23.299]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:31:23.300]        // -> [canReadPins <= 0x00000001]
[18:31:23.300]    </block>
[18:31:23.300]    <control if="" while="1" timeout="200" info="">
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.300]      // while-condition  =>  TRUE
[18:31:23.300]      // while "1"  (timeout="200")
[18:31:23.308]      // while-condition  =>  TRUE
[18:31:23.308]      // while "1"  (timeout="200")
[18:31:23.308]      // while  =>  TIMEOUT
[18:31:23.308]      // end while "1"
[18:31:23.308]    </control>
[18:31:23.308]    <control if="canReadPins" while="" timeout="0" info="">
[18:31:23.308]      // if-block "canReadPins"
[18:31:23.308]        // =>  TRUE
[18:31:23.309]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:31:23.309]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:31:23.309]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:31:23.309]        // while-condition  =>  FALSE
[18:31:23.309]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:31:23.309]      </control>
[18:31:23.309]      // end if-block "canReadPins"
[18:31:23.309]    </control>
[18:31:23.309]    <control if="!canReadPins" while="" timeout="0" info="">
[18:31:23.309]      // if-block "!canReadPins"
[18:31:23.309]        // =>  FALSE
[18:31:23.309]      // skip if-block "!canReadPins"
[18:31:23.309]    </control>
[18:31:23.309]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:31:23.309]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:31:23.309]        // =>  TRUE
[18:31:23.309]      <block atomic="false" info="">
[18:31:23.309]        WriteAP(0x00, 0x190008);
[18:31:23.309]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:31:23.309]        WriteAP(0xF0, 0x01);
[18:31:23.313]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:31:23.313]      </block>
[18:31:23.313]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:31:23.313]    </control>
[18:31:23.313]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:31:23.313]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:31:23.313]        // =>  FALSE
[18:31:23.313]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:31:23.313]    </control>
[18:31:23.313]    <block atomic="false" info="">
[18:31:23.313]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:31:23.313]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:31:23.313]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:31:23.313]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:31:23.313]      __ap = 0; //lets make sure we reset the access point selection
[18:31:23.313]        // -> [__ap <= 0x00000000]
[18:31:23.313]    </block>
[18:31:23.318]  </sequence>
[18:31:23.318]  
[18:31:23.319]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:31:23.319]  
[18:31:23.319]  <debugvars>
[18:31:23.319]    // Pre-defined
[18:31:23.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:23.319]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:31:23.319]    __dp=0x00000000
[18:31:23.319]    __ap=0x00000000
[18:31:23.319]    __traceout=0x00000000      (Trace Disabled)
[18:31:23.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:23.319]    __FlashAddr=0x00000000
[18:31:23.319]    __FlashLen=0x00000000
[18:31:23.319]    __FlashArg=0x00000000
[18:31:23.319]    __FlashOp=0x00000000
[18:31:23.319]    __Result=0x00000000
[18:31:23.319]  </debugvars>
[18:31:23.319]  
[18:31:23.319]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:31:23.319]    <block atomic="false" info="">
[18:31:23.319]      __var deviceID = 0;
[18:31:23.319]        // -> [deviceID <= 0x00000000]
[18:31:23.319]      __var version = 0;
[18:31:23.319]        // -> [version <= 0x00000000]
[18:31:23.319]      __var partNum = 0;
[18:31:23.319]        // -> [partNum <= 0x00000000]
[18:31:23.319]      __var manuf = 0;
[18:31:23.319]        // -> [manuf <= 0x00000000]
[18:31:23.319]      __var isMSPM0G1X0X_G3X0X = 0;
[18:31:23.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:31:23.328]      __var isProduction = 0;
[18:31:23.328]        // -> [isProduction <= 0x00000000]
[18:31:23.328]      __var continueId = 0;
[18:31:23.328]        // -> [continueId <= 0x00000000]
[18:31:23.328]      deviceID =   Read32(0x41C40004);
[18:31:23.328]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:31:23.328]        // -> [deviceID <= 0x2BB8802F]
[18:31:23.328]      version = deviceID >> 28;
[18:31:23.328]        // -> [version <= 0x00000002]
[18:31:23.328]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:31:23.328]        // -> [partNum <= 0x0000BB88]
[18:31:23.328]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:31:23.328]        // -> [manuf <= 0x00000017]
[18:31:23.328]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:31:23.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:31:23.328]      isProduction = (version > 0);
[18:31:23.328]        // -> [isProduction <= 0x00000001]
[18:31:23.328]    </block>
[18:31:23.328]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:31:23.328]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:31:23.328]        // =>  FALSE
[18:31:23.328]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:31:23.332]    </control>
[18:31:23.332]    <control if="continueId == 4" while="" timeout="0" info="">
[18:31:23.332]      // if-block "continueId == 4"
[18:31:23.332]        // =>  FALSE
[18:31:23.332]      // skip if-block "continueId == 4"
[18:31:23.332]    </control>
[18:31:23.332]    <control if="!isProduction" while="" timeout="0" info="">
[18:31:23.332]      // if-block "!isProduction"
[18:31:23.332]        // =>  FALSE
[18:31:23.332]      // skip if-block "!isProduction"
[18:31:23.334]    </control>
[18:31:23.334]  </sequence>
[18:31:23.334]  
[18:34:43.001]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:34:43.001]  
[18:34:43.001]  <debugvars>
[18:34:43.001]    // Pre-defined
[18:34:43.001]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:43.001]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:34:43.001]    __dp=0x00000000
[18:34:43.001]    __ap=0x00000000
[18:34:43.001]    __traceout=0x00000000      (Trace Disabled)
[18:34:43.001]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:43.001]    __FlashAddr=0x00000000
[18:34:43.004]    __FlashLen=0x00000000
[18:34:43.004]    __FlashArg=0x00000000
[18:34:43.004]    __FlashOp=0x00000000
[18:34:43.004]    __Result=0x00000000
[18:34:43.004]  </debugvars>
[18:34:43.004]  
[18:34:43.004]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:34:43.004]    <block atomic="false" info="">
[18:34:43.004]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:34:43.004]        // -> [isSWJ <= 0x00000001]
[18:34:43.006]      __var hasDormant = __protocol & 0x00020000;
[18:34:43.006]        // -> [hasDormant <= 0x00000000]
[18:34:43.006]      __var protType   = __protocol & 0x0000FFFF;
[18:34:43.006]        // -> [protType <= 0x00000002]
[18:34:43.006]    </block>
[18:34:43.006]    <control if="protType == 1" while="" timeout="0" info="">
[18:34:43.006]      // if-block "protType == 1"
[18:34:43.006]        // =>  FALSE
[18:34:43.006]      // skip if-block "protType == 1"
[18:34:43.006]    </control>
[18:34:43.006]    <control if="protType == 2" while="" timeout="0" info="">
[18:34:43.006]      // if-block "protType == 2"
[18:34:43.006]        // =>  TRUE
[18:34:43.006]      <control if="isSWJ" while="" timeout="0" info="">
[18:34:43.006]        // if-block "isSWJ"
[18:34:43.006]          // =>  TRUE
[18:34:43.006]        <control if="hasDormant" while="" timeout="0" info="">
[18:34:43.006]          // if-block "hasDormant"
[18:34:43.006]            // =>  FALSE
[18:34:43.006]          // skip if-block "hasDormant"
[18:34:43.006]        </control>
[18:34:43.006]        <control if="!hasDormant" while="" timeout="0" info="">
[18:34:43.006]          // if-block "!hasDormant"
[18:34:43.006]            // =>  TRUE
[18:34:43.006]          <block atomic="false" info="">
[18:34:43.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:34:43.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:43.006]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:34:43.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:34:43.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:34:43.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:43.006]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:34:43.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:34:43.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:34:43.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:43.006]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:34:43.011]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:34:43.011]          </block>
[18:34:43.011]          // end if-block "!hasDormant"
[18:34:43.011]        </control>
[18:34:43.011]        // end if-block "isSWJ"
[18:34:43.011]      </control>
[18:34:43.011]      <control if="!isSWJ" while="" timeout="0" info="">
[18:34:43.011]        // if-block "!isSWJ"
[18:34:43.011]          // =>  FALSE
[18:34:43.011]        // skip if-block "!isSWJ"
[18:34:43.011]      </control>
[18:34:43.011]      <block atomic="false" info="">
[18:34:43.011]        ReadDP(0x0);
[18:34:43.011]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:34:43.011]      </block>
[18:34:43.011]      // end if-block "protType == 2"
[18:34:43.011]    </control>
[18:34:43.011]  </sequence>
[18:34:43.011]  
[18:34:43.011]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:34:43.011]  
[18:34:43.011]  <debugvars>
[18:34:43.011]    // Pre-defined
[18:34:43.011]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:43.011]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:34:43.011]    __dp=0x00000000
[18:34:43.011]    __ap=0x00000000
[18:34:43.011]    __traceout=0x00000000      (Trace Disabled)
[18:34:43.011]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:43.011]    __FlashAddr=0x00000000
[18:34:43.011]    __FlashLen=0x00000000
[18:34:43.011]    __FlashArg=0x00000000
[18:34:43.011]    __FlashOp=0x00000000
[18:34:43.015]    __Result=0x00000000
[18:34:43.015]  </debugvars>
[18:34:43.015]  
[18:34:43.015]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:34:43.015]    <block atomic="false" info="">
[18:34:43.015]      __var SW_DP_ABORT       = 0x0;
[18:34:43.015]        // -> [SW_DP_ABORT <= 0x00000000]
[18:34:43.015]      __var DP_CTRL_STAT      = 0x4;
[18:34:43.015]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:34:43.015]      __var DP_SELECT         = 0x8;
[18:34:43.015]        // -> [DP_SELECT <= 0x00000008]
[18:34:43.015]      __var powered_down      = 0;
[18:34:43.015]        // -> [powered_down <= 0x00000000]
[18:34:43.015]      WriteDP(DP_SELECT, 0x00000000);
[18:34:43.015]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:34:43.015]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:34:43.015]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:34:43.015]        // -> [powered_down <= 0x00000001]
[18:34:43.015]    </block>
[18:34:43.015]    <control if="powered_down" while="" timeout="0" info="">
[18:34:43.015]      // if-block "powered_down"
[18:34:43.015]        // =>  TRUE
[18:34:43.015]      <block atomic="false" info="">
[18:34:43.015]        Message(0, "Debug/System power-up request sent");
[18:34:43.015]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:34:43.021]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:34:43.021]      </block>
[18:34:43.021]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:34:43.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:34:43.021]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:34:43.021]        // while-condition  =>  FALSE
[18:34:43.021]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:34:43.021]      </control>
[18:34:43.021]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:34:43.021]        // if-block "(__protocol & 0xFFFF) == 1"
[18:34:43.021]          // =>  FALSE
[18:34:43.021]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:34:43.021]      </control>
[18:34:43.021]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:34:43.021]        // if-block "(__protocol & 0xFFFF) == 2"
[18:34:43.021]          // =>  TRUE
[18:34:43.021]        <block atomic="false" info="">
[18:34:43.021]          Message(0, "executing SWD power up");
[18:34:43.021]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:34:43.025]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:34:43.025]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:34:43.026]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:34:43.026]        </block>
[18:34:43.026]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:34:43.026]      </control>
[18:34:43.026]      // end if-block "powered_down"
[18:34:43.026]    </control>
[18:34:43.026]    <block atomic="false" info="">
[18:34:43.026]      __var DEBUG_PORT_VAL    = 0;
[18:34:43.026]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:34:43.026]      __var ACCESS_POINT_VAL  = 0;
[18:34:43.026]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:34:43.026]      __ap = 1; 
[18:34:43.026]        // -> [__ap <= 0x00000001]
[18:34:43.026]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:34:43.028]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:34:43.028]      __ap = 4;
[18:34:43.028]        // -> [__ap <= 0x00000004]
[18:34:43.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:34:43.030]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:34:43.031]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:34:43.031]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:34:43.032]    </block>
[18:34:43.032]    <block atomic="false" info="">
[18:34:43.032]      __var nReset = 0x80;
[18:34:43.032]        // -> [nReset <= 0x00000080]
[18:34:43.032]      __var canReadPins = 0;
[18:34:43.032]        // -> [canReadPins <= 0x00000000]
[18:34:43.032]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:34:43.032]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:34:43.032]        // -> [canReadPins <= 0x00000001]
[18:34:43.034]    </block>
[18:34:43.034]    <control if="" while="1" timeout="200" info="">
[18:34:43.034]      // while "1"  (timeout="200")
[18:34:43.034]      // while-condition  =>  TRUE
[18:34:43.034]      // while "1"  (timeout="200")
[18:34:43.034]      // while-condition  =>  TRUE
[18:34:43.034]      // while "1"  (timeout="200")
[18:34:43.034]      // while-condition  =>  TRUE
[18:34:43.034]      // while "1"  (timeout="200")
[18:34:43.034]      // while-condition  =>  TRUE
[18:34:43.034]      // while "1"  (timeout="200")
[18:34:43.034]      // while-condition  =>  TRUE
[18:34:43.034]      // while "1"  (timeout="200")
[18:34:43.035]      // while-condition  =>  TRUE
[18:34:43.035]      // while "1"  (timeout="200")
[18:34:43.035]      // while-condition  =>  TRUE
[18:34:43.035]      // while "1"  (timeout="200")
[18:34:43.035]      // while-condition  =>  TRUE
[18:34:43.035]      // while "1"  (timeout="200")
[18:34:43.036]      // while-condition  =>  TRUE
[18:34:43.036]      // while "1"  (timeout="200")
[18:34:43.036]      // while  =>  TIMEOUT
[18:34:43.036]      // end while "1"
[18:34:43.036]    </control>
[18:34:43.036]    <control if="canReadPins" while="" timeout="0" info="">
[18:34:43.036]      // if-block "canReadPins"
[18:34:43.036]        // =>  TRUE
[18:34:43.036]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:34:43.036]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:34:43.036]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:34:43.036]        // while-condition  =>  FALSE
[18:34:43.036]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:34:43.036]      </control>
[18:34:43.038]      // end if-block "canReadPins"
[18:34:43.038]    </control>
[18:34:43.038]    <control if="!canReadPins" while="" timeout="0" info="">
[18:34:43.038]      // if-block "!canReadPins"
[18:34:43.038]        // =>  FALSE
[18:34:43.038]      // skip if-block "!canReadPins"
[18:34:43.038]    </control>
[18:34:43.038]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:34:43.038]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:34:43.038]        // =>  TRUE
[18:34:43.038]      <block atomic="false" info="">
[18:34:43.038]        WriteAP(0x00, 0x190008);
[18:34:43.039]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:34:43.039]        WriteAP(0xF0, 0x01);
[18:34:43.041]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:34:43.041]      </block>
[18:34:43.041]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:34:43.041]    </control>
[18:34:43.041]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:34:43.042]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:34:43.042]        // =>  FALSE
[18:34:43.042]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:34:43.042]    </control>
[18:34:43.042]    <block atomic="false" info="">
[18:34:43.042]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:34:43.043]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:34:43.043]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:34:43.043]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:34:43.045]      __ap = 0; //lets make sure we reset the access point selection
[18:34:43.045]        // -> [__ap <= 0x00000000]
[18:34:43.045]    </block>
[18:34:43.045]  </sequence>
[18:34:43.045]  
[18:34:43.051]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:34:43.051]  
[18:34:43.051]  <debugvars>
[18:34:43.051]    // Pre-defined
[18:34:43.051]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:43.051]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:34:43.051]    __dp=0x00000000
[18:34:43.051]    __ap=0x00000000
[18:34:43.051]    __traceout=0x00000000      (Trace Disabled)
[18:34:43.051]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:43.051]    __FlashAddr=0x00000000
[18:34:43.051]    __FlashLen=0x00000000
[18:34:43.051]    __FlashArg=0x00000000
[18:34:43.051]    __FlashOp=0x00000000
[18:34:43.051]    __Result=0x00000000
[18:34:43.051]  </debugvars>
[18:34:43.051]  
[18:34:43.051]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:34:43.051]    <block atomic="false" info="">
[18:34:43.051]      __var deviceID = 0;
[18:34:43.051]        // -> [deviceID <= 0x00000000]
[18:34:43.051]      __var version = 0;
[18:34:43.051]        // -> [version <= 0x00000000]
[18:34:43.051]      __var partNum = 0;
[18:34:43.051]        // -> [partNum <= 0x00000000]
[18:34:43.051]      __var manuf = 0;
[18:34:43.051]        // -> [manuf <= 0x00000000]
[18:34:43.051]      __var isMSPM0G1X0X_G3X0X = 0;
[18:34:43.051]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:34:43.051]      __var isProduction = 0;
[18:34:43.051]        // -> [isProduction <= 0x00000000]
[18:34:43.051]      __var continueId = 0;
[18:34:43.051]        // -> [continueId <= 0x00000000]
[18:34:43.051]      deviceID =   Read32(0x41C40004);
[18:34:43.056]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:34:43.056]        // -> [deviceID <= 0x2BB8802F]
[18:34:43.056]      version = deviceID >> 28;
[18:34:43.056]        // -> [version <= 0x00000002]
[18:34:43.056]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:34:43.056]        // -> [partNum <= 0x0000BB88]
[18:34:43.056]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:34:43.056]        // -> [manuf <= 0x00000017]
[18:34:43.056]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:34:43.056]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:34:43.056]      isProduction = (version > 0);
[18:34:43.056]        // -> [isProduction <= 0x00000001]
[18:34:43.056]    </block>
[18:34:43.056]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:34:43.056]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:34:43.056]        // =>  FALSE
[18:34:43.056]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:34:43.056]    </control>
[18:34:43.056]    <control if="continueId == 4" while="" timeout="0" info="">
[18:34:43.056]      // if-block "continueId == 4"
[18:34:43.056]        // =>  FALSE
[18:34:43.056]      // skip if-block "continueId == 4"
[18:34:43.056]    </control>
[18:34:43.056]    <control if="!isProduction" while="" timeout="0" info="">
[18:34:43.056]      // if-block "!isProduction"
[18:34:43.056]        // =>  FALSE
[18:34:43.056]      // skip if-block "!isProduction"
[18:34:43.056]    </control>
[18:34:43.056]  </sequence>
[18:34:43.056]  
[18:34:54.580]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:34:54.580]  
[18:34:54.580]  <debugvars>
[18:34:54.580]    // Pre-defined
[18:34:54.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:54.580]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:34:54.580]    __dp=0x00000000
[18:34:54.580]    __ap=0x00000000
[18:34:54.580]    __traceout=0x00000000      (Trace Disabled)
[18:34:54.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:54.580]    __FlashAddr=0x00000000
[18:34:54.580]    __FlashLen=0x00000000
[18:34:54.580]    __FlashArg=0x00000000
[18:34:54.580]    __FlashOp=0x00000000
[18:34:54.580]    __Result=0x00000000
[18:34:54.580]  </debugvars>
[18:34:54.580]  
[18:34:54.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:34:54.580]    <block atomic="false" info="">
[18:34:54.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:34:54.580]        // -> [isSWJ <= 0x00000001]
[18:34:54.580]      __var hasDormant = __protocol & 0x00020000;
[18:34:54.580]        // -> [hasDormant <= 0x00000000]
[18:34:54.580]      __var protType   = __protocol & 0x0000FFFF;
[18:34:54.580]        // -> [protType <= 0x00000002]
[18:34:54.580]    </block>
[18:34:54.580]    <control if="protType == 1" while="" timeout="0" info="">
[18:34:54.580]      // if-block "protType == 1"
[18:34:54.580]        // =>  FALSE
[18:34:54.580]      // skip if-block "protType == 1"
[18:34:54.580]    </control>
[18:34:54.580]    <control if="protType == 2" while="" timeout="0" info="">
[18:34:54.580]      // if-block "protType == 2"
[18:34:54.580]        // =>  TRUE
[18:34:54.580]      <control if="isSWJ" while="" timeout="0" info="">
[18:34:54.580]        // if-block "isSWJ"
[18:34:54.580]          // =>  TRUE
[18:34:54.580]        <control if="hasDormant" while="" timeout="0" info="">
[18:34:54.580]          // if-block "hasDormant"
[18:34:54.580]            // =>  FALSE
[18:34:54.580]          // skip if-block "hasDormant"
[18:34:54.580]        </control>
[18:34:54.580]        <control if="!hasDormant" while="" timeout="0" info="">
[18:34:54.580]          // if-block "!hasDormant"
[18:34:54.580]            // =>  TRUE
[18:34:54.580]          <block atomic="false" info="">
[18:34:54.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:34:54.580]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:54.580]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:34:54.580]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:34:54.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:34:54.580]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:54.580]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:34:54.580]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:34:54.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:34:54.580]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:54.580]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:34:54.580]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:34:54.580]          </block>
[18:34:54.580]          // end if-block "!hasDormant"
[18:34:54.580]        </control>
[18:34:54.580]        // end if-block "isSWJ"
[18:34:54.580]      </control>
[18:34:54.580]      <control if="!isSWJ" while="" timeout="0" info="">
[18:34:54.580]        // if-block "!isSWJ"
[18:34:54.580]          // =>  FALSE
[18:34:54.580]        // skip if-block "!isSWJ"
[18:34:54.580]      </control>
[18:34:54.580]      <block atomic="false" info="">
[18:34:54.580]        ReadDP(0x0);
[18:34:54.590]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:34:54.590]      </block>
[18:34:54.590]      // end if-block "protType == 2"
[18:34:54.590]    </control>
[18:34:54.590]  </sequence>
[18:34:54.590]  
[18:34:54.590]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:34:54.590]  
[18:34:54.590]  <debugvars>
[18:34:54.591]    // Pre-defined
[18:34:54.591]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:54.591]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:34:54.591]    __dp=0x00000000
[18:34:54.591]    __ap=0x00000000
[18:34:54.591]    __traceout=0x00000000      (Trace Disabled)
[18:34:54.591]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:54.591]    __FlashAddr=0x00000000
[18:34:54.591]    __FlashLen=0x00000000
[18:34:54.591]    __FlashArg=0x00000000
[18:34:54.591]    __FlashOp=0x00000000
[18:34:54.591]    __Result=0x00000000
[18:34:54.591]  </debugvars>
[18:34:54.591]  
[18:34:54.591]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:34:54.591]    <block atomic="false" info="">
[18:34:54.591]      __var SW_DP_ABORT       = 0x0;
[18:34:54.591]        // -> [SW_DP_ABORT <= 0x00000000]
[18:34:54.591]      __var DP_CTRL_STAT      = 0x4;
[18:34:54.591]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:34:54.591]      __var DP_SELECT         = 0x8;
[18:34:54.591]        // -> [DP_SELECT <= 0x00000008]
[18:34:54.591]      __var powered_down      = 0;
[18:34:54.591]        // -> [powered_down <= 0x00000000]
[18:34:54.591]      WriteDP(DP_SELECT, 0x00000000);
[18:34:54.591]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:34:54.591]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:34:54.591]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:34:54.591]        // -> [powered_down <= 0x00000001]
[18:34:54.591]    </block>
[18:34:54.591]    <control if="powered_down" while="" timeout="0" info="">
[18:34:54.591]      // if-block "powered_down"
[18:34:54.591]        // =>  TRUE
[18:34:54.591]      <block atomic="false" info="">
[18:34:54.591]        Message(0, "Debug/System power-up request sent");
[18:34:54.591]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:34:54.591]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:34:54.591]      </block>
[18:34:54.591]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:34:54.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:34:54.591]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:34:54.591]        // while-condition  =>  FALSE
[18:34:54.591]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:34:54.591]      </control>
[18:34:54.591]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:34:54.591]        // if-block "(__protocol & 0xFFFF) == 1"
[18:34:54.591]          // =>  FALSE
[18:34:54.591]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:34:54.600]      </control>
[18:34:54.600]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:34:54.600]        // if-block "(__protocol & 0xFFFF) == 2"
[18:34:54.600]          // =>  TRUE
[18:34:54.600]        <block atomic="false" info="">
[18:34:54.600]          Message(0, "executing SWD power up");
[18:34:54.600]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:34:54.600]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:34:54.600]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:34:54.600]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:34:54.600]        </block>
[18:34:54.600]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:34:54.600]      </control>
[18:34:54.600]      // end if-block "powered_down"
[18:34:54.600]    </control>
[18:34:54.600]    <block atomic="false" info="">
[18:34:54.600]      __var DEBUG_PORT_VAL    = 0;
[18:34:54.600]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:34:54.600]      __var ACCESS_POINT_VAL  = 0;
[18:34:54.600]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:34:54.600]      __ap = 1; 
[18:34:54.600]        // -> [__ap <= 0x00000001]
[18:34:54.600]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:34:54.600]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:34:54.600]      __ap = 4;
[18:34:54.600]        // -> [__ap <= 0x00000004]
[18:34:54.600]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:34:54.600]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:34:54.600]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:34:54.600]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:34:54.610]    </block>
[18:34:54.610]    <block atomic="false" info="">
[18:34:54.610]      __var nReset = 0x80;
[18:34:54.610]        // -> [nReset <= 0x00000080]
[18:34:54.610]      __var canReadPins = 0;
[18:34:54.610]        // -> [canReadPins <= 0x00000000]
[18:34:54.610]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:34:54.610]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:34:54.610]        // -> [canReadPins <= 0x00000001]
[18:34:54.610]    </block>
[18:34:54.610]    <control if="" while="1" timeout="200" info="">
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.610]      // while-condition  =>  TRUE
[18:34:54.610]      // while "1"  (timeout="200")
[18:34:54.620]      // while-condition  =>  TRUE
[18:34:54.620]      // while "1"  (timeout="200")
[18:34:54.620]      // while  =>  TIMEOUT
[18:34:54.620]      // end while "1"
[18:34:54.620]    </control>
[18:34:54.620]    <control if="canReadPins" while="" timeout="0" info="">
[18:34:54.620]      // if-block "canReadPins"
[18:34:54.620]        // =>  TRUE
[18:34:54.620]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:34:54.620]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:34:54.620]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:34:54.620]        // while-condition  =>  FALSE
[18:34:54.620]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:34:54.620]      </control>
[18:34:54.622]      // end if-block "canReadPins"
[18:34:54.622]    </control>
[18:34:54.622]    <control if="!canReadPins" while="" timeout="0" info="">
[18:34:54.622]      // if-block "!canReadPins"
[18:34:54.622]        // =>  FALSE
[18:34:54.622]      // skip if-block "!canReadPins"
[18:34:54.622]    </control>
[18:34:54.622]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:34:54.622]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:34:54.622]        // =>  TRUE
[18:34:54.622]      <block atomic="false" info="">
[18:34:54.622]        WriteAP(0x00, 0x190008);
[18:34:54.622]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:34:54.622]        WriteAP(0xF0, 0x01);
[18:34:54.622]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:34:54.622]      </block>
[18:34:54.622]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:34:54.622]    </control>
[18:34:54.622]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:34:54.622]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:34:54.622]        // =>  FALSE
[18:34:54.622]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:34:54.622]    </control>
[18:34:54.622]    <block atomic="false" info="">
[18:34:54.622]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:34:54.622]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:34:54.622]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:34:54.622]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:34:54.622]      __ap = 0; //lets make sure we reset the access point selection
[18:34:54.622]        // -> [__ap <= 0x00000000]
[18:34:54.622]    </block>
[18:34:54.622]  </sequence>
[18:34:54.622]  
[18:34:54.632]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:34:54.632]  
[18:34:54.632]  <debugvars>
[18:34:54.632]    // Pre-defined
[18:34:54.632]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:54.632]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:34:54.632]    __dp=0x00000000
[18:34:54.632]    __ap=0x00000000
[18:34:54.632]    __traceout=0x00000000      (Trace Disabled)
[18:34:54.632]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:54.632]    __FlashAddr=0x00000000
[18:34:54.632]    __FlashLen=0x00000000
[18:34:54.632]    __FlashArg=0x00000000
[18:34:54.632]    __FlashOp=0x00000000
[18:34:54.632]    __Result=0x00000000
[18:34:54.632]  </debugvars>
[18:34:54.632]  
[18:34:54.632]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:34:54.632]    <block atomic="false" info="">
[18:34:54.632]      __var deviceID = 0;
[18:34:54.632]        // -> [deviceID <= 0x00000000]
[18:34:54.632]      __var version = 0;
[18:34:54.632]        // -> [version <= 0x00000000]
[18:34:54.632]      __var partNum = 0;
[18:34:54.632]        // -> [partNum <= 0x00000000]
[18:34:54.632]      __var manuf = 0;
[18:34:54.632]        // -> [manuf <= 0x00000000]
[18:34:54.632]      __var isMSPM0G1X0X_G3X0X = 0;
[18:34:54.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:34:54.632]      __var isProduction = 0;
[18:34:54.632]        // -> [isProduction <= 0x00000000]
[18:34:54.632]      __var continueId = 0;
[18:34:54.641]        // -> [continueId <= 0x00000000]
[18:34:54.641]      deviceID =   Read32(0x41C40004);
[18:34:54.641]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:34:54.641]        // -> [deviceID <= 0x2BB8802F]
[18:34:54.641]      version = deviceID >> 28;
[18:34:54.641]        // -> [version <= 0x00000002]
[18:34:54.641]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:34:54.641]        // -> [partNum <= 0x0000BB88]
[18:34:54.641]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:34:54.641]        // -> [manuf <= 0x00000017]
[18:34:54.641]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:34:54.641]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:34:54.641]      isProduction = (version > 0);
[18:34:54.641]        // -> [isProduction <= 0x00000001]
[18:34:54.641]    </block>
[18:34:54.641]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:34:54.641]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:34:54.641]        // =>  FALSE
[18:34:54.641]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:34:54.641]    </control>
[18:34:54.641]    <control if="continueId == 4" while="" timeout="0" info="">
[18:34:54.641]      // if-block "continueId == 4"
[18:34:54.641]        // =>  FALSE
[18:34:54.641]      // skip if-block "continueId == 4"
[18:34:54.641]    </control>
[18:34:54.641]    <control if="!isProduction" while="" timeout="0" info="">
[18:34:54.641]      // if-block "!isProduction"
[18:34:54.641]        // =>  FALSE
[18:34:54.641]      // skip if-block "!isProduction"
[18:34:54.641]    </control>
[18:34:54.641]  </sequence>
[18:34:54.641]  
[18:35:11.198]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[18:35:11.198]  
[18:35:11.198]  <debugvars>
[18:35:11.198]    // Pre-defined
[18:35:11.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:35:11.198]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:35:11.198]    __dp=0x00000000
[18:35:11.198]    __ap=0x00000000
[18:35:11.198]    __traceout=0x00000000      (Trace Disabled)
[18:35:11.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:35:11.198]    __FlashAddr=0x00000000
[18:35:11.198]    __FlashLen=0x00000000
[18:35:11.198]    __FlashArg=0x00000000
[18:35:11.198]    __FlashOp=0x00000000
[18:35:11.198]    __Result=0x00000000
[18:35:11.198]  </debugvars>
[18:35:11.198]  
[18:35:11.198]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:35:11.198]    <block atomic="false" info="">
[18:35:11.198]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:35:11.198]        // -> [isSWJ <= 0x00000001]
[18:35:11.198]      __var hasDormant = __protocol & 0x00020000;
[18:35:11.198]        // -> [hasDormant <= 0x00000000]
[18:35:11.198]      __var protType   = __protocol & 0x0000FFFF;
[18:35:11.198]        // -> [protType <= 0x00000002]
[18:35:11.198]    </block>
[18:35:11.198]    <control if="protType == 1" while="" timeout="0" info="">
[18:35:11.198]      // if-block "protType == 1"
[18:35:11.198]        // =>  FALSE
[18:35:11.198]      // skip if-block "protType == 1"
[18:35:11.198]    </control>
[18:35:11.198]    <control if="protType == 2" while="" timeout="0" info="">
[18:35:11.198]      // if-block "protType == 2"
[18:35:11.198]        // =>  TRUE
[18:35:11.198]      <control if="isSWJ" while="" timeout="0" info="">
[18:35:11.198]        // if-block "isSWJ"
[18:35:11.198]          // =>  TRUE
[18:35:11.198]        <control if="hasDormant" while="" timeout="0" info="">
[18:35:11.198]          // if-block "hasDormant"
[18:35:11.198]            // =>  FALSE
[18:35:11.198]          // skip if-block "hasDormant"
[18:35:11.198]        </control>
[18:35:11.198]        <control if="!hasDormant" while="" timeout="0" info="">
[18:35:11.198]          // if-block "!hasDormant"
[18:35:11.198]            // =>  TRUE
[18:35:11.198]          <block atomic="false" info="">
[18:35:11.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:35:11.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:35:11.198]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:35:11.198]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:35:11.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:35:11.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:35:11.198]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:35:11.198]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:35:11.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:35:11.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:35:11.198]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:35:11.198]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:35:11.198]          </block>
[18:35:11.198]          // end if-block "!hasDormant"
[18:35:11.198]        </control>
[18:35:11.198]        // end if-block "isSWJ"
[18:35:11.198]      </control>
[18:35:11.198]      <control if="!isSWJ" while="" timeout="0" info="">
[18:35:11.198]        // if-block "!isSWJ"
[18:35:11.198]          // =>  FALSE
[18:35:11.198]        // skip if-block "!isSWJ"
[18:35:11.198]      </control>
[18:35:11.198]      <block atomic="false" info="">
[18:35:11.198]        ReadDP(0x0);
[18:35:11.198]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:35:11.198]      </block>
[18:35:11.198]      // end if-block "protType == 2"
[18:35:11.208]    </control>
[18:35:11.208]  </sequence>
[18:35:11.208]  
[18:35:11.208]  **********  Sequence "DebugPortStart"  (Context="Recovery", Pname="", info="")
[18:35:11.208]  
[18:35:11.208]  <debugvars>
[18:35:11.208]    // Pre-defined
[18:35:11.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:35:11.210]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:35:11.210]    __dp=0x00000000
[18:35:11.211]    __ap=0x00000000
[18:35:11.211]    __traceout=0x00000000      (Trace Disabled)
[18:35:11.211]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:35:11.211]    __FlashAddr=0x00000000
[18:35:11.211]    __FlashLen=0x00000000
[18:35:11.211]    __FlashArg=0x00000000
[18:35:11.211]    __FlashOp=0x00000000
[18:35:11.211]    __Result=0x00000000
[18:35:11.211]  </debugvars>
[18:35:11.211]  
[18:35:11.211]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:35:11.211]    <block atomic="false" info="">
[18:35:11.211]      __var SW_DP_ABORT       = 0x0;
[18:35:11.211]        // -> [SW_DP_ABORT <= 0x00000000]
[18:35:11.211]      __var DP_CTRL_STAT      = 0x4;
[18:35:11.211]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:35:11.211]      __var DP_SELECT         = 0x8;
[18:35:11.211]        // -> [DP_SELECT <= 0x00000008]
[18:35:11.211]      __var powered_down      = 0;
[18:35:11.211]        // -> [powered_down <= 0x00000000]
[18:35:11.211]      WriteDP(DP_SELECT, 0x00000000);
[18:35:11.211]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:35:11.211]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:35:11.211]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:35:11.211]        // -> [powered_down <= 0x00000001]
[18:35:11.211]    </block>
[18:35:11.211]    <control if="powered_down" while="" timeout="0" info="">
[18:35:11.211]      // if-block "powered_down"
[18:35:11.211]        // =>  TRUE
[18:35:11.211]      <block atomic="false" info="">
[18:35:11.211]        Message(0, "Debug/System power-up request sent");
[18:35:11.211]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:35:11.211]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:35:11.211]      </block>
[18:35:11.211]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:35:11.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:35:11.211]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:35:11.211]        // while-condition  =>  FALSE
[18:35:11.211]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:35:11.211]      </control>
[18:35:11.211]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:35:11.211]        // if-block "(__protocol & 0xFFFF) == 1"
[18:35:11.211]          // =>  FALSE
[18:35:11.211]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:35:11.211]      </control>
[18:35:11.211]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:35:11.211]        // if-block "(__protocol & 0xFFFF) == 2"
[18:35:11.211]          // =>  TRUE
[18:35:11.211]        <block atomic="false" info="">
[18:35:11.211]          Message(0, "executing SWD power up");
[18:35:11.211]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:35:11.219]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:35:11.219]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:35:11.219]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:35:11.219]        </block>
[18:35:11.219]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:35:11.219]      </control>
[18:35:11.219]      // end if-block "powered_down"
[18:35:11.219]    </control>
[18:35:11.220]    <block atomic="false" info="">
[18:35:11.220]      __var DEBUG_PORT_VAL    = 0;
[18:35:11.220]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:35:11.220]      __var ACCESS_POINT_VAL  = 0;
[18:35:11.221]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:35:11.221]      __ap = 1; 
[18:35:11.221]        // -> [__ap <= 0x00000001]
[18:35:11.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:35:11.222]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:35:11.222]      __ap = 4;
[18:35:11.222]        // -> [__ap <= 0x00000004]
[18:35:11.222]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:35:11.223]        // -> [ReadAP(0x00000000) => 0x00000000]   (__dp=0x00000000, __ap=0x00000004)
[18:35:11.223]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:35:11.224]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:35:11.224]    </block>
[18:35:11.224]    <block atomic="false" info="">
[18:35:11.224]      __var nReset = 0x80;
[18:35:11.224]        // -> [nReset <= 0x00000080]
[18:35:11.224]      __var canReadPins = 0;
[18:35:11.224]        // -> [canReadPins <= 0x00000000]
[18:35:11.224]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:35:11.225]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:35:11.225]        // -> [canReadPins <= 0x00000001]
[18:35:11.225]    </block>
[18:35:11.225]    <control if="" while="1" timeout="200" info="">
[18:35:11.225]      // while "1"  (timeout="200")
[18:35:11.225]      // while-condition  =>  TRUE
[18:35:11.225]      // while "1"  (timeout="200")
[18:35:11.225]      // while-condition  =>  TRUE
[18:35:11.225]      // while "1"  (timeout="200")
[18:35:11.225]      // while-condition  =>  TRUE
[18:35:11.226]      // while "1"  (timeout="200")
[18:35:11.226]      // while-condition  =>  TRUE
[18:35:11.226]      // while "1"  (timeout="200")
[18:35:11.226]      // while-condition  =>  TRUE
[18:35:11.226]      // while "1"  (timeout="200")
[18:35:11.227]      // while-condition  =>  TRUE
[18:35:11.227]      // while "1"  (timeout="200")
[18:35:11.227]      // while-condition  =>  TRUE
[18:35:11.227]      // while "1"  (timeout="200")
[18:35:11.227]      // while-condition  =>  TRUE
[18:35:11.227]      // while "1"  (timeout="200")
[18:35:11.227]      // while-condition  =>  TRUE
[18:35:11.227]      // while "1"  (timeout="200")
[18:35:11.227]      // while-condition  =>  TRUE
[18:35:11.227]      // while "1"  (timeout="200")
[18:35:11.228]      // while-condition  =>  TRUE
[18:35:11.228]      // while "1"  (timeout="200")
[18:35:11.228]      // while-condition  =>  TRUE
[18:35:11.228]      // while "1"  (timeout="200")
[18:35:11.228]      // while-condition  =>  TRUE
[18:35:11.228]      // while "1"  (timeout="200")
[18:35:11.228]      // while-condition  =>  TRUE
[18:35:11.228]      // while "1"  (timeout="200")
[18:35:11.228]      // while-condition  =>  TRUE
[18:35:11.229]      // while "1"  (timeout="200")
[18:35:11.229]      // while-condition  =>  TRUE
[18:35:11.229]      // while "1"  (timeout="200")
[18:35:11.229]      // while-condition  =>  TRUE
[18:35:11.229]      // while "1"  (timeout="200")
[18:35:11.229]      // while-condition  =>  TRUE
[18:35:11.230]      // while "1"  (timeout="200")
[18:35:11.230]      // while-condition  =>  TRUE
[18:35:11.230]      // while "1"  (timeout="200")
[18:35:11.230]      // while-condition  =>  TRUE
[18:35:11.230]      // while "1"  (timeout="200")
[18:35:11.230]      // while-condition  =>  TRUE
[18:35:11.230]      // while "1"  (timeout="200")
[18:35:11.231]      // while-condition  =>  TRUE
[18:35:11.231]      // while "1"  (timeout="200")
[18:35:11.231]      // while-condition  =>  TRUE
[18:35:11.231]      // while "1"  (timeout="200")
[18:35:11.231]      // while-condition  =>  TRUE
[18:35:11.231]      // while "1"  (timeout="200")
[18:35:11.231]      // while-condition  =>  TRUE
[18:35:11.231]      // while "1"  (timeout="200")
[18:35:11.232]      // while-condition  =>  TRUE
[18:35:11.232]      // while "1"  (timeout="200")
[18:35:11.232]      // while-condition  =>  TRUE
[18:35:11.232]      // while "1"  (timeout="200")
[18:35:11.232]      // while-condition  =>  TRUE
[18:35:11.232]      // while "1"  (timeout="200")
[18:35:11.232]      // while-condition  =>  TRUE
[18:35:11.232]      // while "1"  (timeout="200")
[18:35:11.232]      // while-condition  =>  TRUE
[18:35:11.233]      // while "1"  (timeout="200")
[18:35:11.233]      // while-condition  =>  TRUE
[18:35:11.233]      // while "1"  (timeout="200")
[18:35:11.233]      // while-condition  =>  TRUE
[18:35:11.233]      // while "1"  (timeout="200")
[18:35:11.234]      // while-condition  =>  TRUE
[18:35:11.234]      // while "1"  (timeout="200")
[18:35:11.234]      // while-condition  =>  TRUE
[18:35:11.234]      // while "1"  (timeout="200")
[18:35:11.234]      // while-condition  =>  TRUE
[18:35:11.234]      // while "1"  (timeout="200")
[18:35:11.234]      // while-condition  =>  TRUE
[18:35:11.234]      // while "1"  (timeout="200")
[18:35:11.234]      // while-condition  =>  TRUE
[18:35:11.234]      // while "1"  (timeout="200")
[18:35:11.235]      // while-condition  =>  TRUE
[18:35:11.235]      // while "1"  (timeout="200")
[18:35:11.235]      // while-condition  =>  TRUE
[18:35:11.236]      // while "1"  (timeout="200")
[18:35:11.236]      // while-condition  =>  TRUE
[18:35:11.236]      // while "1"  (timeout="200")
[18:35:11.236]      // while-condition  =>  TRUE
[18:35:11.236]      // while "1"  (timeout="200")
[18:35:11.236]      // while-condition  =>  TRUE
[18:35:11.236]      // while "1"  (timeout="200")
[18:35:11.236]      // while-condition  =>  TRUE
[18:35:11.237]      // while "1"  (timeout="200")
[18:35:11.237]      // while-condition  =>  TRUE
[18:35:11.237]      // while "1"  (timeout="200")
[18:35:11.237]      // while-condition  =>  TRUE
[18:35:11.237]      // while "1"  (timeout="200")
[18:35:11.237]      // while-condition  =>  TRUE
[18:35:11.237]      // while "1"  (timeout="200")
[18:35:11.237]      // while-condition  =>  TRUE
[18:35:11.237]      // while "1"  (timeout="200")
[18:35:11.238]      // while-condition  =>  TRUE
[18:35:11.238]      // while "1"  (timeout="200")
[18:35:11.238]      // while-condition  =>  TRUE
[18:35:11.238]      // while "1"  (timeout="200")
[18:35:11.238]      // while-condition  =>  TRUE
[18:35:11.238]      // while "1"  (timeout="200")
[18:35:11.239]      // while-condition  =>  TRUE
[18:35:11.239]      // while "1"  (timeout="200")
[18:35:11.239]      // while  =>  TIMEOUT
[18:35:11.239]      // end while "1"
[18:35:11.239]    </control>
[18:35:11.239]    <control if="canReadPins" while="" timeout="0" info="">
[18:35:11.239]      // if-block "canReadPins"
[18:35:11.239]        // =>  TRUE
[18:35:11.240]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:35:11.240]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:35:11.240]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:35:11.241]        // while-condition  =>  FALSE
[18:35:11.241]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:35:11.241]      </control>
[18:35:11.241]      // end if-block "canReadPins"
[18:35:11.241]    </control>
[18:35:11.241]    <control if="!canReadPins" while="" timeout="0" info="">
[18:35:11.241]      // if-block "!canReadPins"
[18:35:11.241]        // =>  FALSE
[18:35:11.241]      // skip if-block "!canReadPins"
[18:35:11.242]    </control>
[18:35:11.242]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:35:11.242]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:35:11.242]        // =>  TRUE
[18:35:11.243]      <block atomic="false" info="">
[18:35:11.243]        WriteAP(0x00, 0x190008);
[18:35:11.243]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:35:11.243]        WriteAP(0xF0, 0x01);
[18:35:11.244]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:35:11.245]      </block>
[18:35:11.245]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:35:11.245]    </control>
[18:35:11.245]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:35:11.245]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:35:11.245]        // =>  FALSE
[18:35:11.245]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:35:11.245]    </control>
[18:35:11.245]    <block atomic="false" info="">
[18:35:11.246]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:35:11.247]        // -> [ReadAP(0x00000000) => 0x00000000]   (__dp=0x00000000, __ap=0x00000004)
[18:35:11.247]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:35:11.247]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:35:11.247]      __ap = 0; //lets make sure we reset the access point selection
[18:35:11.247]        // -> [__ap <= 0x00000000]
[18:35:11.247]    </block>
[18:35:11.247]  </sequence>
[18:35:11.248]  
[18:35:46.621]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:35:46.621]  
[18:35:46.630]  <debugvars>
[18:35:46.630]    // Pre-defined
[18:35:46.630]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:35:46.630]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:35:46.630]    __dp=0x00000000
[18:35:46.630]    __ap=0x00000000
[18:35:46.630]    __traceout=0x00000000      (Trace Disabled)
[18:35:46.630]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:35:46.630]    __FlashAddr=0x00000000
[18:35:46.630]    __FlashLen=0x00000000
[18:35:46.630]    __FlashArg=0x00000000
[18:35:46.630]    __FlashOp=0x00000000
[18:35:46.630]    __Result=0x00000000
[18:35:46.630]  </debugvars>
[18:35:46.631]  
[18:35:46.631]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:35:46.631]    <block atomic="false" info="">
[18:35:46.631]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:35:46.631]        // -> [isSWJ <= 0x00000001]
[18:35:46.631]      __var hasDormant = __protocol & 0x00020000;
[18:35:46.631]        // -> [hasDormant <= 0x00000000]
[18:35:46.631]      __var protType   = __protocol & 0x0000FFFF;
[18:35:46.631]        // -> [protType <= 0x00000002]
[18:35:46.631]    </block>
[18:35:46.631]    <control if="protType == 1" while="" timeout="0" info="">
[18:35:46.631]      // if-block "protType == 1"
[18:35:46.631]        // =>  FALSE
[18:35:46.631]      // skip if-block "protType == 1"
[18:35:46.633]    </control>
[18:35:46.633]    <control if="protType == 2" while="" timeout="0" info="">
[18:35:46.633]      // if-block "protType == 2"
[18:35:46.633]        // =>  TRUE
[18:35:46.633]      <control if="isSWJ" while="" timeout="0" info="">
[18:35:46.633]        // if-block "isSWJ"
[18:35:46.633]          // =>  TRUE
[18:35:46.633]        <control if="hasDormant" while="" timeout="0" info="">
[18:35:46.633]          // if-block "hasDormant"
[18:35:46.633]            // =>  FALSE
[18:35:46.633]          // skip if-block "hasDormant"
[18:35:46.633]        </control>
[18:35:46.633]        <control if="!hasDormant" while="" timeout="0" info="">
[18:35:46.633]          // if-block "!hasDormant"
[18:35:46.633]            // =>  TRUE
[18:35:46.633]          <block atomic="false" info="">
[18:35:46.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:35:46.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:35:46.633]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:35:46.633]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:35:46.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:35:46.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:35:46.633]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:35:46.633]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:35:46.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:35:46.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:35:46.633]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:35:46.633]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:35:46.633]          </block>
[18:35:46.633]          // end if-block "!hasDormant"
[18:35:46.633]        </control>
[18:35:46.633]        // end if-block "isSWJ"
[18:35:46.633]      </control>
[18:35:46.633]      <control if="!isSWJ" while="" timeout="0" info="">
[18:35:46.633]        // if-block "!isSWJ"
[18:35:46.633]          // =>  FALSE
[18:35:46.633]        // skip if-block "!isSWJ"
[18:35:46.633]      </control>
[18:35:46.633]      <block atomic="false" info="">
[18:35:46.633]        ReadDP(0x0);
[18:35:46.633]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:35:46.633]      </block>
[18:35:46.633]      // end if-block "protType == 2"
[18:35:46.633]    </control>
[18:35:46.633]  </sequence>
[18:35:46.633]  
[18:35:46.633]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:35:46.633]  
[18:35:46.633]  <debugvars>
[18:35:46.633]    // Pre-defined
[18:35:46.633]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:35:46.633]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:35:46.633]    __dp=0x00000000
[18:35:46.633]    __ap=0x00000000
[18:35:46.633]    __traceout=0x00000000      (Trace Disabled)
[18:35:46.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:35:46.633]    __FlashAddr=0x00000000
[18:35:46.642]    __FlashLen=0x00000000
[18:35:46.642]    __FlashArg=0x00000000
[18:35:46.642]    __FlashOp=0x00000000
[18:35:46.642]    __Result=0x00000000
[18:35:46.642]  </debugvars>
[18:35:46.642]  
[18:35:46.642]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:35:46.642]    <block atomic="false" info="">
[18:35:46.642]      __var SW_DP_ABORT       = 0x0;
[18:35:46.642]        // -> [SW_DP_ABORT <= 0x00000000]
[18:35:46.642]      __var DP_CTRL_STAT      = 0x4;
[18:35:46.642]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:35:46.642]      __var DP_SELECT         = 0x8;
[18:35:46.642]        // -> [DP_SELECT <= 0x00000008]
[18:35:46.642]      __var powered_down      = 0;
[18:35:46.642]        // -> [powered_down <= 0x00000000]
[18:35:46.642]      WriteDP(DP_SELECT, 0x00000000);
[18:35:46.642]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:35:46.642]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:35:46.642]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:35:46.642]        // -> [powered_down <= 0x00000001]
[18:35:46.642]    </block>
[18:35:46.642]    <control if="powered_down" while="" timeout="0" info="">
[18:35:46.642]      // if-block "powered_down"
[18:35:46.642]        // =>  TRUE
[18:35:46.642]      <block atomic="false" info="">
[18:35:46.642]        Message(0, "Debug/System power-up request sent");
[18:35:46.642]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:35:46.642]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:35:46.642]      </block>
[18:35:46.642]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:35:46.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:35:46.642]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:35:46.642]        // while-condition  =>  FALSE
[18:35:46.642]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:35:46.642]      </control>
[18:35:46.642]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:35:46.642]        // if-block "(__protocol & 0xFFFF) == 1"
[18:35:46.642]          // =>  FALSE
[18:35:46.642]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:35:46.642]      </control>
[18:35:46.642]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:35:46.642]        // if-block "(__protocol & 0xFFFF) == 2"
[18:35:46.642]          // =>  TRUE
[18:35:46.642]        <block atomic="false" info="">
[18:35:46.642]          Message(0, "executing SWD power up");
[18:35:46.642]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:35:46.652]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:35:46.652]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:35:46.652]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:35:46.652]        </block>
[18:35:46.652]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:35:46.652]      </control>
[18:35:46.652]      // end if-block "powered_down"
[18:35:46.653]    </control>
[18:35:46.653]    <block atomic="false" info="">
[18:35:46.653]      __var DEBUG_PORT_VAL    = 0;
[18:35:46.653]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:35:46.653]      __var ACCESS_POINT_VAL  = 0;
[18:35:46.654]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:35:46.654]      __ap = 1; 
[18:35:46.654]        // -> [__ap <= 0x00000001]
[18:35:46.654]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:35:46.654]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:35:46.654]      __ap = 4;
[18:35:46.654]        // -> [__ap <= 0x00000004]
[18:35:46.654]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:35:46.656]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:35:46.656]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:35:46.656]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:35:46.657]    </block>
[18:35:46.657]    <block atomic="false" info="">
[18:35:46.657]      __var nReset = 0x80;
[18:35:46.657]        // -> [nReset <= 0x00000080]
[18:35:46.657]      __var canReadPins = 0;
[18:35:46.657]        // -> [canReadPins <= 0x00000000]
[18:35:46.657]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:35:46.657]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:35:46.659]        // -> [canReadPins <= 0x00000001]
[18:35:46.659]    </block>
[18:35:46.659]    <control if="" while="1" timeout="200" info="">
[18:35:46.659]      // while "1"  (timeout="200")
[18:35:46.659]      // while-condition  =>  TRUE
[18:35:46.659]      // while "1"  (timeout="200")
[18:35:46.659]      // while-condition  =>  TRUE
[18:35:46.659]      // while "1"  (timeout="200")
[18:35:46.659]      // while-condition  =>  TRUE
[18:35:46.660]      // while "1"  (timeout="200")
[18:35:46.660]      // while  =>  TIMEOUT
[18:35:46.660]      // end while "1"
[18:35:46.660]    </control>
[18:35:46.660]    <control if="canReadPins" while="" timeout="0" info="">
[18:35:46.660]      // if-block "canReadPins"
[18:35:46.660]        // =>  TRUE
[18:35:46.660]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:35:46.660]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:35:46.660]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:35:46.660]        // while-condition  =>  FALSE
[18:35:46.662]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:35:46.662]      </control>
[18:35:46.662]      // end if-block "canReadPins"
[18:35:46.662]    </control>
[18:35:46.662]    <control if="!canReadPins" while="" timeout="0" info="">
[18:35:46.662]      // if-block "!canReadPins"
[18:35:46.663]        // =>  FALSE
[18:35:46.663]      // skip if-block "!canReadPins"
[18:35:46.663]    </control>
[18:35:46.663]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:35:46.663]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:35:46.663]        // =>  TRUE
[18:35:46.663]      <block atomic="false" info="">
[18:35:46.663]        WriteAP(0x00, 0x190008);
[18:35:46.664]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:35:46.664]        WriteAP(0xF0, 0x01);
[18:35:46.666]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:35:46.666]      </block>
[18:35:46.666]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:35:46.666]    </control>
[18:35:46.666]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:35:46.666]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:35:46.666]        // =>  FALSE
[18:35:46.666]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:35:46.666]    </control>
[18:35:46.666]    <block atomic="false" info="">
[18:35:46.666]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:35:46.667]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:35:46.667]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:35:46.667]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:35:46.669]      __ap = 0; //lets make sure we reset the access point selection
[18:35:46.669]        // -> [__ap <= 0x00000000]
[18:35:46.669]    </block>
[18:35:46.669]  </sequence>
[18:35:46.669]  
[18:35:46.674]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:35:46.674]  
[18:35:46.674]  <debugvars>
[18:35:46.674]    // Pre-defined
[18:35:46.674]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:35:46.674]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:35:46.674]    __dp=0x00000000
[18:35:46.674]    __ap=0x00000000
[18:35:46.674]    __traceout=0x00000000      (Trace Disabled)
[18:35:46.674]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:35:46.674]    __FlashAddr=0x00000000
[18:35:46.674]    __FlashLen=0x00000000
[18:35:46.674]    __FlashArg=0x00000000
[18:35:46.674]    __FlashOp=0x00000000
[18:35:46.674]    __Result=0x00000000
[18:35:46.674]  </debugvars>
[18:35:46.674]  
[18:35:46.674]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:35:46.674]    <block atomic="false" info="">
[18:35:46.674]      __var deviceID = 0;
[18:35:46.674]        // -> [deviceID <= 0x00000000]
[18:35:46.674]      __var version = 0;
[18:35:46.674]        // -> [version <= 0x00000000]
[18:35:46.674]      __var partNum = 0;
[18:35:46.674]        // -> [partNum <= 0x00000000]
[18:35:46.674]      __var manuf = 0;
[18:35:46.674]        // -> [manuf <= 0x00000000]
[18:35:46.674]      __var isMSPM0G1X0X_G3X0X = 0;
[18:35:46.674]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:35:46.674]      __var isProduction = 0;
[18:35:46.674]        // -> [isProduction <= 0x00000000]
[18:35:46.674]      __var continueId = 0;
[18:35:46.674]        // -> [continueId <= 0x00000000]
[18:35:46.674]      deviceID =   Read32(0x41C40004);
[18:35:46.674]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:35:46.674]        // -> [deviceID <= 0x2BB8802F]
[18:35:46.682]      version = deviceID >> 28;
[18:35:46.682]        // -> [version <= 0x00000002]
[18:35:46.682]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:35:46.682]        // -> [partNum <= 0x0000BB88]
[18:35:46.682]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:35:46.682]        // -> [manuf <= 0x00000017]
[18:35:46.682]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:35:46.682]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:35:46.682]      isProduction = (version > 0);
[18:35:46.682]        // -> [isProduction <= 0x00000001]
[18:35:46.682]    </block>
[18:35:46.682]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:35:46.682]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:35:46.682]        // =>  FALSE
[18:35:46.682]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:35:46.682]    </control>
[18:35:46.682]    <control if="continueId == 4" while="" timeout="0" info="">
[18:35:46.682]      // if-block "continueId == 4"
[18:35:46.682]        // =>  FALSE
[18:35:46.682]      // skip if-block "continueId == 4"
[18:35:46.682]    </control>
[18:35:46.682]    <control if="!isProduction" while="" timeout="0" info="">
[18:35:46.682]      // if-block "!isProduction"
[18:35:46.682]        // =>  FALSE
[18:35:46.682]      // skip if-block "!isProduction"
[18:35:46.682]    </control>
[18:35:46.682]  </sequence>
[18:35:46.682]  
[18:41:51.104]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:41:51.104]  
[18:41:51.115]  <debugvars>
[18:41:51.115]    // Pre-defined
[18:41:51.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:41:51.115]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:41:51.115]    __dp=0x00000000
[18:41:51.115]    __ap=0x00000000
[18:41:51.115]    __traceout=0x00000000      (Trace Disabled)
[18:41:51.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:41:51.115]    __FlashAddr=0x00000000
[18:41:51.115]    __FlashLen=0x00000000
[18:41:51.115]    __FlashArg=0x00000000
[18:41:51.115]    __FlashOp=0x00000000
[18:41:51.115]    __Result=0x00000000
[18:41:51.115]  </debugvars>
[18:41:51.115]  
[18:41:51.115]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:41:51.115]    <block atomic="false" info="">
[18:41:51.115]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:41:51.115]        // -> [isSWJ <= 0x00000001]
[18:41:51.115]      __var hasDormant = __protocol & 0x00020000;
[18:41:51.115]        // -> [hasDormant <= 0x00000000]
[18:41:51.115]      __var protType   = __protocol & 0x0000FFFF;
[18:41:51.115]        // -> [protType <= 0x00000002]
[18:41:51.115]    </block>
[18:41:51.115]    <control if="protType == 1" while="" timeout="0" info="">
[18:41:51.115]      // if-block "protType == 1"
[18:41:51.115]        // =>  FALSE
[18:41:51.115]      // skip if-block "protType == 1"
[18:41:51.115]    </control>
[18:41:51.115]    <control if="protType == 2" while="" timeout="0" info="">
[18:41:51.115]      // if-block "protType == 2"
[18:41:51.115]        // =>  TRUE
[18:41:51.115]      <control if="isSWJ" while="" timeout="0" info="">
[18:41:51.115]        // if-block "isSWJ"
[18:41:51.118]          // =>  TRUE
[18:41:51.118]        <control if="hasDormant" while="" timeout="0" info="">
[18:41:51.118]          // if-block "hasDormant"
[18:41:51.118]            // =>  FALSE
[18:41:51.118]          // skip if-block "hasDormant"
[18:41:51.118]        </control>
[18:41:51.118]        <control if="!hasDormant" while="" timeout="0" info="">
[18:41:51.118]          // if-block "!hasDormant"
[18:41:51.118]            // =>  TRUE
[18:41:51.118]          <block atomic="false" info="">
[18:41:51.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:41:51.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:41:51.120]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:41:51.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:41:51.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:41:51.121]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:41:51.121]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:41:51.121]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:41:51.121]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:41:51.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:41:51.122]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:41:51.122]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:41:51.122]          </block>
[18:41:51.122]          // end if-block "!hasDormant"
[18:41:51.122]        </control>
[18:41:51.122]        // end if-block "isSWJ"
[18:41:51.122]      </control>
[18:41:51.122]      <control if="!isSWJ" while="" timeout="0" info="">
[18:41:51.122]        // if-block "!isSWJ"
[18:41:51.123]          // =>  FALSE
[18:41:51.123]        // skip if-block "!isSWJ"
[18:41:51.123]      </control>
[18:41:51.123]      <block atomic="false" info="">
[18:41:51.123]        ReadDP(0x0);
[18:41:51.123]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:41:51.123]      </block>
[18:41:51.123]      // end if-block "protType == 2"
[18:41:51.123]    </control>
[18:41:51.123]  </sequence>
[18:41:51.123]  
[18:41:51.123]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:41:51.123]  
[18:41:51.123]  <debugvars>
[18:41:51.123]    // Pre-defined
[18:41:51.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:41:51.123]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:41:51.123]    __dp=0x00000000
[18:41:51.123]    __ap=0x00000000
[18:41:51.123]    __traceout=0x00000000      (Trace Disabled)
[18:41:51.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:41:51.123]    __FlashAddr=0x00000000
[18:41:51.123]    __FlashLen=0x00000000
[18:41:51.123]    __FlashArg=0x00000000
[18:41:51.123]    __FlashOp=0x00000000
[18:41:51.123]    __Result=0x00000000
[18:41:51.123]  </debugvars>
[18:41:51.123]  
[18:41:51.123]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:41:51.123]    <block atomic="false" info="">
[18:41:51.123]      __var SW_DP_ABORT       = 0x0;
[18:41:51.123]        // -> [SW_DP_ABORT <= 0x00000000]
[18:41:51.123]      __var DP_CTRL_STAT      = 0x4;
[18:41:51.123]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:41:51.123]      __var DP_SELECT         = 0x8;
[18:41:51.123]        // -> [DP_SELECT <= 0x00000008]
[18:41:51.123]      __var powered_down      = 0;
[18:41:51.123]        // -> [powered_down <= 0x00000000]
[18:41:51.123]      WriteDP(DP_SELECT, 0x00000000);
[18:41:51.123]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:41:51.123]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:41:51.123]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:41:51.130]        // -> [powered_down <= 0x00000001]
[18:41:51.130]    </block>
[18:41:51.130]    <control if="powered_down" while="" timeout="0" info="">
[18:41:51.130]      // if-block "powered_down"
[18:41:51.131]        // =>  TRUE
[18:41:51.131]      <block atomic="false" info="">
[18:41:51.131]        Message(0, "Debug/System power-up request sent");
[18:41:51.132]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:41:51.132]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:41:51.132]      </block>
[18:41:51.132]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:41:51.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:41:51.132]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:41:51.132]        // while-condition  =>  FALSE
[18:41:51.132]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:41:51.132]      </control>
[18:41:51.132]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:41:51.132]        // if-block "(__protocol & 0xFFFF) == 1"
[18:41:51.132]          // =>  FALSE
[18:41:51.132]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:41:51.132]      </control>
[18:41:51.132]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:41:51.132]        // if-block "(__protocol & 0xFFFF) == 2"
[18:41:51.132]          // =>  TRUE
[18:41:51.132]        <block atomic="false" info="">
[18:41:51.132]          Message(0, "executing SWD power up");
[18:41:51.132]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:41:51.132]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:41:51.132]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:41:51.132]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:41:51.132]        </block>
[18:41:51.132]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:41:51.132]      </control>
[18:41:51.132]      // end if-block "powered_down"
[18:41:51.132]    </control>
[18:41:51.132]    <block atomic="false" info="">
[18:41:51.132]      __var DEBUG_PORT_VAL    = 0;
[18:41:51.132]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:41:51.132]      __var ACCESS_POINT_VAL  = 0;
[18:41:51.132]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:41:51.132]      __ap = 1; 
[18:41:51.132]        // -> [__ap <= 0x00000001]
[18:41:51.132]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:41:51.132]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:41:51.132]      __ap = 4;
[18:41:51.132]        // -> [__ap <= 0x00000004]
[18:41:51.132]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:41:51.140]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:41:51.140]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:41:51.140]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:41:51.141]    </block>
[18:41:51.141]    <block atomic="false" info="">
[18:41:51.141]      __var nReset = 0x80;
[18:41:51.141]        // -> [nReset <= 0x00000080]
[18:41:51.141]      __var canReadPins = 0;
[18:41:51.141]        // -> [canReadPins <= 0x00000000]
[18:41:51.141]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:41:51.142]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:41:51.142]        // -> [canReadPins <= 0x00000001]
[18:41:51.142]    </block>
[18:41:51.142]    <control if="" while="1" timeout="200" info="">
[18:41:51.142]      // while "1"  (timeout="200")
[18:41:51.142]      // while-condition  =>  TRUE
[18:41:51.142]      // while "1"  (timeout="200")
[18:41:51.142]      // while-condition  =>  TRUE
[18:41:51.142]      // while "1"  (timeout="200")
[18:41:51.142]      // while-condition  =>  TRUE
[18:41:51.142]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.144]      // while "1"  (timeout="200")
[18:41:51.144]      // while-condition  =>  TRUE
[18:41:51.151]      // while "1"  (timeout="200")
[18:41:51.151]      // while  =>  TIMEOUT
[18:41:51.151]      // end while "1"
[18:41:51.151]    </control>
[18:41:51.151]    <control if="canReadPins" while="" timeout="0" info="">
[18:41:51.151]      // if-block "canReadPins"
[18:41:51.151]        // =>  TRUE
[18:41:51.151]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:41:51.151]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:41:51.152]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:41:51.152]        // while-condition  =>  FALSE
[18:41:51.152]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:41:51.152]      </control>
[18:41:51.152]      // end if-block "canReadPins"
[18:41:51.152]    </control>
[18:41:51.152]    <control if="!canReadPins" while="" timeout="0" info="">
[18:41:51.152]      // if-block "!canReadPins"
[18:41:51.152]        // =>  FALSE
[18:41:51.152]      // skip if-block "!canReadPins"
[18:41:51.152]    </control>
[18:41:51.152]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:41:51.152]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:41:51.152]        // =>  TRUE
[18:41:51.152]      <block atomic="false" info="">
[18:41:51.152]        WriteAP(0x00, 0x190008);
[18:41:51.152]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:41:51.152]        WriteAP(0xF0, 0x01);
[18:41:51.152]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:41:51.152]      </block>
[18:41:51.152]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:41:51.152]    </control>
[18:41:51.152]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:41:51.152]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:41:51.152]        // =>  FALSE
[18:41:51.152]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:41:51.152]    </control>
[18:41:51.152]    <block atomic="false" info="">
[18:41:51.152]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:41:51.152]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:41:51.152]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:41:51.152]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:41:51.152]      __ap = 0; //lets make sure we reset the access point selection
[18:41:51.152]        // -> [__ap <= 0x00000000]
[18:41:51.152]    </block>
[18:41:51.152]  </sequence>
[18:41:51.152]  
[18:41:51.163]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:41:51.163]  
[18:41:51.163]  <debugvars>
[18:41:51.163]    // Pre-defined
[18:41:51.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:41:51.163]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:41:51.163]    __dp=0x00000000
[18:41:51.163]    __ap=0x00000000
[18:41:51.163]    __traceout=0x00000000      (Trace Disabled)
[18:41:51.163]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:41:51.163]    __FlashAddr=0x00000000
[18:41:51.163]    __FlashLen=0x00000000
[18:41:51.163]    __FlashArg=0x00000000
[18:41:51.163]    __FlashOp=0x00000000
[18:41:51.163]    __Result=0x00000000
[18:41:51.163]  </debugvars>
[18:41:51.163]  
[18:41:51.163]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:41:51.163]    <block atomic="false" info="">
[18:41:51.163]      __var deviceID = 0;
[18:41:51.163]        // -> [deviceID <= 0x00000000]
[18:41:51.163]      __var version = 0;
[18:41:51.163]        // -> [version <= 0x00000000]
[18:41:51.163]      __var partNum = 0;
[18:41:51.163]        // -> [partNum <= 0x00000000]
[18:41:51.163]      __var manuf = 0;
[18:41:51.163]        // -> [manuf <= 0x00000000]
[18:41:51.163]      __var isMSPM0G1X0X_G3X0X = 0;
[18:41:51.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:41:51.171]      __var isProduction = 0;
[18:41:51.171]        // -> [isProduction <= 0x00000000]
[18:41:51.171]      __var continueId = 0;
[18:41:51.171]        // -> [continueId <= 0x00000000]
[18:41:51.171]      deviceID =   Read32(0x41C40004);
[18:41:51.172]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:41:51.172]        // -> [deviceID <= 0x2BB8802F]
[18:41:51.172]      version = deviceID >> 28;
[18:41:51.172]        // -> [version <= 0x00000002]
[18:41:51.172]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:41:51.172]        // -> [partNum <= 0x0000BB88]
[18:41:51.172]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:41:51.172]        // -> [manuf <= 0x00000017]
[18:41:51.172]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:41:51.172]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:41:51.172]      isProduction = (version > 0);
[18:41:51.172]        // -> [isProduction <= 0x00000001]
[18:41:51.172]    </block>
[18:41:51.172]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:41:51.172]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:41:51.172]        // =>  FALSE
[18:41:51.172]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:41:51.172]    </control>
[18:41:51.172]    <control if="continueId == 4" while="" timeout="0" info="">
[18:41:51.172]      // if-block "continueId == 4"
[18:41:51.172]        // =>  FALSE
[18:41:51.172]      // skip if-block "continueId == 4"
[18:41:51.172]    </control>
[18:41:51.172]    <control if="!isProduction" while="" timeout="0" info="">
[18:41:51.172]      // if-block "!isProduction"
[18:41:51.172]        // =>  FALSE
[18:41:51.172]      // skip if-block "!isProduction"
[18:41:51.172]    </control>
[18:41:51.172]  </sequence>
[18:41:51.172]  
[18:46:07.867]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:46:07.867]  
[18:46:07.867]  <debugvars>
[18:46:07.867]    // Pre-defined
[18:46:07.867]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:07.867]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:46:07.867]    __dp=0x00000000
[18:46:07.867]    __ap=0x00000000
[18:46:07.867]    __traceout=0x00000000      (Trace Disabled)
[18:46:07.867]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:07.867]    __FlashAddr=0x00000000
[18:46:07.867]    __FlashLen=0x00000000
[18:46:07.867]    __FlashArg=0x00000000
[18:46:07.867]    __FlashOp=0x00000000
[18:46:07.867]    __Result=0x00000000
[18:46:07.875]  </debugvars>
[18:46:07.875]  
[18:46:07.875]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:46:07.875]    <block atomic="false" info="">
[18:46:07.875]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:46:07.875]        // -> [isSWJ <= 0x00000001]
[18:46:07.875]      __var hasDormant = __protocol & 0x00020000;
[18:46:07.875]        // -> [hasDormant <= 0x00000000]
[18:46:07.875]      __var protType   = __protocol & 0x0000FFFF;
[18:46:07.875]        // -> [protType <= 0x00000002]
[18:46:07.876]    </block>
[18:46:07.876]    <control if="protType == 1" while="" timeout="0" info="">
[18:46:07.876]      // if-block "protType == 1"
[18:46:07.876]        // =>  FALSE
[18:46:07.876]      // skip if-block "protType == 1"
[18:46:07.876]    </control>
[18:46:07.876]    <control if="protType == 2" while="" timeout="0" info="">
[18:46:07.876]      // if-block "protType == 2"
[18:46:07.876]        // =>  TRUE
[18:46:07.876]      <control if="isSWJ" while="" timeout="0" info="">
[18:46:07.877]        // if-block "isSWJ"
[18:46:07.877]          // =>  TRUE
[18:46:07.877]        <control if="hasDormant" while="" timeout="0" info="">
[18:46:07.877]          // if-block "hasDormant"
[18:46:07.877]            // =>  FALSE
[18:46:07.877]          // skip if-block "hasDormant"
[18:46:07.877]        </control>
[18:46:07.877]        <control if="!hasDormant" while="" timeout="0" info="">
[18:46:07.877]          // if-block "!hasDormant"
[18:46:07.877]            // =>  TRUE
[18:46:07.877]          <block atomic="false" info="">
[18:46:07.877]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:46:07.878]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:07.878]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:46:07.878]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:46:07.878]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:46:07.878]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:07.878]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:46:07.878]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:46:07.878]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:46:07.878]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:07.878]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:46:07.878]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:46:07.878]          </block>
[18:46:07.878]          // end if-block "!hasDormant"
[18:46:07.878]        </control>
[18:46:07.878]        // end if-block "isSWJ"
[18:46:07.878]      </control>
[18:46:07.878]      <control if="!isSWJ" while="" timeout="0" info="">
[18:46:07.878]        // if-block "!isSWJ"
[18:46:07.878]          // =>  FALSE
[18:46:07.878]        // skip if-block "!isSWJ"
[18:46:07.878]      </control>
[18:46:07.878]      <block atomic="false" info="">
[18:46:07.878]        ReadDP(0x0);
[18:46:07.878]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:46:07.878]      </block>
[18:46:07.878]      // end if-block "protType == 2"
[18:46:07.878]    </control>
[18:46:07.878]  </sequence>
[18:46:07.878]  
[18:46:07.878]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:46:07.878]  
[18:46:07.878]  <debugvars>
[18:46:07.878]    // Pre-defined
[18:46:07.878]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:07.878]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:46:07.878]    __dp=0x00000000
[18:46:07.878]    __ap=0x00000000
[18:46:07.878]    __traceout=0x00000000      (Trace Disabled)
[18:46:07.878]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:07.878]    __FlashAddr=0x00000000
[18:46:07.878]    __FlashLen=0x00000000
[18:46:07.878]    __FlashArg=0x00000000
[18:46:07.878]    __FlashOp=0x00000000
[18:46:07.878]    __Result=0x00000000
[18:46:07.878]  </debugvars>
[18:46:07.878]  
[18:46:07.878]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:46:07.878]    <block atomic="false" info="">
[18:46:07.878]      __var SW_DP_ABORT       = 0x0;
[18:46:07.878]        // -> [SW_DP_ABORT <= 0x00000000]
[18:46:07.878]      __var DP_CTRL_STAT      = 0x4;
[18:46:07.885]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:46:07.885]      __var DP_SELECT         = 0x8;
[18:46:07.885]        // -> [DP_SELECT <= 0x00000008]
[18:46:07.885]      __var powered_down      = 0;
[18:46:07.885]        // -> [powered_down <= 0x00000000]
[18:46:07.885]      WriteDP(DP_SELECT, 0x00000000);
[18:46:07.886]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:46:07.886]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:46:07.886]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:46:07.887]        // -> [powered_down <= 0x00000001]
[18:46:07.887]    </block>
[18:46:07.887]    <control if="powered_down" while="" timeout="0" info="">
[18:46:07.887]      // if-block "powered_down"
[18:46:07.887]        // =>  TRUE
[18:46:07.887]      <block atomic="false" info="">
[18:46:07.887]        Message(0, "Debug/System power-up request sent");
[18:46:07.889]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:46:07.889]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:46:07.889]      </block>
[18:46:07.889]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:46:07.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:46:07.889]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:46:07.889]        // while-condition  =>  FALSE
[18:46:07.889]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:46:07.889]      </control>
[18:46:07.889]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:46:07.889]        // if-block "(__protocol & 0xFFFF) == 1"
[18:46:07.889]          // =>  FALSE
[18:46:07.889]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:46:07.889]      </control>
[18:46:07.889]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:46:07.889]        // if-block "(__protocol & 0xFFFF) == 2"
[18:46:07.889]          // =>  TRUE
[18:46:07.889]        <block atomic="false" info="">
[18:46:07.889]          Message(0, "executing SWD power up");
[18:46:07.889]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:46:07.889]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:46:07.889]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:46:07.894]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:46:07.894]        </block>
[18:46:07.894]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:46:07.894]      </control>
[18:46:07.894]      // end if-block "powered_down"
[18:46:07.894]    </control>
[18:46:07.895]    <block atomic="false" info="">
[18:46:07.895]      __var DEBUG_PORT_VAL    = 0;
[18:46:07.895]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:46:07.895]      __var ACCESS_POINT_VAL  = 0;
[18:46:07.895]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:46:07.895]      __ap = 1; 
[18:46:07.896]        // -> [__ap <= 0x00000001]
[18:46:07.896]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:46:07.897]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:46:07.897]      __ap = 4;
[18:46:07.897]        // -> [__ap <= 0x00000004]
[18:46:07.897]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:46:07.897]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:46:07.897]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:46:07.897]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:46:07.897]    </block>
[18:46:07.897]    <block atomic="false" info="">
[18:46:07.897]      __var nReset = 0x80;
[18:46:07.897]        // -> [nReset <= 0x00000080]
[18:46:07.897]      __var canReadPins = 0;
[18:46:07.901]        // -> [canReadPins <= 0x00000000]
[18:46:07.901]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:46:07.901]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:46:07.901]        // -> [canReadPins <= 0x00000001]
[18:46:07.901]    </block>
[18:46:07.901]    <control if="" while="1" timeout="200" info="">
[18:46:07.901]      // while "1"  (timeout="200")
[18:46:07.901]      // while-condition  =>  TRUE
[18:46:07.902]      // while "1"  (timeout="200")
[18:46:07.902]      // while-condition  =>  TRUE
[18:46:07.902]      // while "1"  (timeout="200")
[18:46:07.902]      // while-condition  =>  TRUE
[18:46:07.902]      // while "1"  (timeout="200")
[18:46:07.902]      // while-condition  =>  TRUE
[18:46:07.902]      // while "1"  (timeout="200")
[18:46:07.902]      // while-condition  =>  TRUE
[18:46:07.902]      // while "1"  (timeout="200")
[18:46:07.902]      // while-condition  =>  TRUE
[18:46:07.902]      // while "1"  (timeout="200")
[18:46:07.902]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.903]      // while "1"  (timeout="200")
[18:46:07.903]      // while-condition  =>  TRUE
[18:46:07.905]      // while "1"  (timeout="200")
[18:46:07.905]      // while-condition  =>  TRUE
[18:46:07.905]      // while "1"  (timeout="200")
[18:46:07.905]      // while-condition  =>  TRUE
[18:46:07.905]      // while "1"  (timeout="200")
[18:46:07.906]      // while-condition  =>  TRUE
[18:46:07.906]      // while "1"  (timeout="200")
[18:46:07.906]      // while-condition  =>  TRUE
[18:46:07.906]      // while "1"  (timeout="200")
[18:46:07.906]      // while-condition  =>  TRUE
[18:46:07.906]      // while "1"  (timeout="200")
[18:46:07.906]      // while-condition  =>  TRUE
[18:46:07.906]      // while "1"  (timeout="200")
[18:46:07.906]      // while-condition  =>  TRUE
[18:46:07.906]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.907]      // while-condition  =>  TRUE
[18:46:07.907]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.909]      // while "1"  (timeout="200")
[18:46:07.909]      // while-condition  =>  TRUE
[18:46:07.912]      // while "1"  (timeout="200")
[18:46:07.912]      // while  =>  TIMEOUT
[18:46:07.912]      // end while "1"
[18:46:07.912]    </control>
[18:46:07.912]    <control if="canReadPins" while="" timeout="0" info="">
[18:46:07.912]      // if-block "canReadPins"
[18:46:07.912]        // =>  TRUE
[18:46:07.912]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:46:07.912]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:46:07.913]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:46:07.913]        // while-condition  =>  FALSE
[18:46:07.913]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:46:07.913]      </control>
[18:46:07.913]      // end if-block "canReadPins"
[18:46:07.913]    </control>
[18:46:07.913]    <control if="!canReadPins" while="" timeout="0" info="">
[18:46:07.913]      // if-block "!canReadPins"
[18:46:07.913]        // =>  FALSE
[18:46:07.913]      // skip if-block "!canReadPins"
[18:46:07.913]    </control>
[18:46:07.913]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:46:07.914]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:46:07.914]        // =>  TRUE
[18:46:07.914]      <block atomic="false" info="">
[18:46:07.915]        WriteAP(0x00, 0x190008);
[18:46:07.915]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:46:07.915]        WriteAP(0xF0, 0x01);
[18:46:07.917]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:46:07.917]      </block>
[18:46:07.917]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:46:07.917]    </control>
[18:46:07.917]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:46:07.917]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:46:07.917]        // =>  FALSE
[18:46:07.917]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:46:07.917]    </control>
[18:46:07.917]    <block atomic="false" info="">
[18:46:07.917]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:46:07.918]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:46:07.918]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:46:07.918]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:46:07.919]      __ap = 0; //lets make sure we reset the access point selection
[18:46:07.919]        // -> [__ap <= 0x00000000]
[18:46:07.919]    </block>
[18:46:07.919]  </sequence>
[18:46:07.919]  
[18:46:07.926]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:46:07.926]  
[18:46:07.927]  <debugvars>
[18:46:07.927]    // Pre-defined
[18:46:07.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:07.927]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:46:07.927]    __dp=0x00000000
[18:46:07.927]    __ap=0x00000000
[18:46:07.927]    __traceout=0x00000000      (Trace Disabled)
[18:46:07.927]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:07.927]    __FlashAddr=0x00000000
[18:46:07.927]    __FlashLen=0x00000000
[18:46:07.927]    __FlashArg=0x00000000
[18:46:07.927]    __FlashOp=0x00000000
[18:46:07.927]    __Result=0x00000000
[18:46:07.927]  </debugvars>
[18:46:07.928]  
[18:46:07.928]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:46:07.928]    <block atomic="false" info="">
[18:46:07.928]      __var deviceID = 0;
[18:46:07.928]        // -> [deviceID <= 0x00000000]
[18:46:07.928]      __var version = 0;
[18:46:07.928]        // -> [version <= 0x00000000]
[18:46:07.928]      __var partNum = 0;
[18:46:07.928]        // -> [partNum <= 0x00000000]
[18:46:07.928]      __var manuf = 0;
[18:46:07.928]        // -> [manuf <= 0x00000000]
[18:46:07.928]      __var isMSPM0G1X0X_G3X0X = 0;
[18:46:07.928]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:46:07.928]      __var isProduction = 0;
[18:46:07.928]        // -> [isProduction <= 0x00000000]
[18:46:07.928]      __var continueId = 0;
[18:46:07.928]        // -> [continueId <= 0x00000000]
[18:46:07.928]      deviceID =   Read32(0x41C40004);
[18:46:07.930]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:46:07.930]        // -> [deviceID <= 0x2BB8802F]
[18:46:07.930]      version = deviceID >> 28;
[18:46:07.930]        // -> [version <= 0x00000002]
[18:46:07.930]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:46:07.930]        // -> [partNum <= 0x0000BB88]
[18:46:07.930]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:46:07.930]        // -> [manuf <= 0x00000017]
[18:46:07.930]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:46:07.930]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:46:07.930]      isProduction = (version > 0);
[18:46:07.930]        // -> [isProduction <= 0x00000001]
[18:46:07.930]    </block>
[18:46:07.930]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:46:07.930]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:46:07.932]        // =>  FALSE
[18:46:07.932]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:46:07.932]    </control>
[18:46:07.932]    <control if="continueId == 4" while="" timeout="0" info="">
[18:46:07.932]      // if-block "continueId == 4"
[18:46:07.932]        // =>  FALSE
[18:46:07.932]      // skip if-block "continueId == 4"
[18:46:07.932]    </control>
[18:46:07.932]    <control if="!isProduction" while="" timeout="0" info="">
[18:46:07.932]      // if-block "!isProduction"
[18:46:07.932]        // =>  FALSE
[18:46:07.932]      // skip if-block "!isProduction"
[18:46:07.932]    </control>
[18:46:07.932]  </sequence>
[18:46:07.932]  
[18:46:16.127]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:46:16.127]  
[18:46:16.127]  <debugvars>
[18:46:16.127]    // Pre-defined
[18:46:16.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:16.127]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:46:16.127]    __dp=0x00000000
[18:46:16.127]    __ap=0x00000000
[18:46:16.127]    __traceout=0x00000000      (Trace Disabled)
[18:46:16.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:16.127]    __FlashAddr=0x00000000
[18:46:16.127]    __FlashLen=0x00000000
[18:46:16.127]    __FlashArg=0x00000000
[18:46:16.127]    __FlashOp=0x00000000
[18:46:16.127]    __Result=0x00000000
[18:46:16.127]  </debugvars>
[18:46:16.127]  
[18:46:16.127]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:46:16.127]    <block atomic="false" info="">
[18:46:16.127]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:46:16.127]        // -> [isSWJ <= 0x00000001]
[18:46:16.135]      __var hasDormant = __protocol & 0x00020000;
[18:46:16.135]        // -> [hasDormant <= 0x00000000]
[18:46:16.135]      __var protType   = __protocol & 0x0000FFFF;
[18:46:16.135]        // -> [protType <= 0x00000002]
[18:46:16.135]    </block>
[18:46:16.136]    <control if="protType == 1" while="" timeout="0" info="">
[18:46:16.136]      // if-block "protType == 1"
[18:46:16.136]        // =>  FALSE
[18:46:16.136]      // skip if-block "protType == 1"
[18:46:16.136]    </control>
[18:46:16.136]    <control if="protType == 2" while="" timeout="0" info="">
[18:46:16.136]      // if-block "protType == 2"
[18:46:16.136]        // =>  TRUE
[18:46:16.136]      <control if="isSWJ" while="" timeout="0" info="">
[18:46:16.136]        // if-block "isSWJ"
[18:46:16.137]          // =>  TRUE
[18:46:16.137]        <control if="hasDormant" while="" timeout="0" info="">
[18:46:16.137]          // if-block "hasDormant"
[18:46:16.137]            // =>  FALSE
[18:46:16.137]          // skip if-block "hasDormant"
[18:46:16.137]        </control>
[18:46:16.137]        <control if="!hasDormant" while="" timeout="0" info="">
[18:46:16.137]          // if-block "!hasDormant"
[18:46:16.137]            // =>  TRUE
[18:46:16.137]          <block atomic="false" info="">
[18:46:16.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:46:16.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:16.139]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:46:16.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:46:16.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:46:16.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:16.140]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:46:16.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:46:16.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:46:16.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:16.140]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:46:16.142]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:46:16.142]          </block>
[18:46:16.142]          // end if-block "!hasDormant"
[18:46:16.142]        </control>
[18:46:16.142]        // end if-block "isSWJ"
[18:46:16.142]      </control>
[18:46:16.142]      <control if="!isSWJ" while="" timeout="0" info="">
[18:46:16.142]        // if-block "!isSWJ"
[18:46:16.142]          // =>  FALSE
[18:46:16.142]        // skip if-block "!isSWJ"
[18:46:16.143]      </control>
[18:46:16.143]      <block atomic="false" info="">
[18:46:16.143]        ReadDP(0x0);
[18:46:16.143]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:46:16.143]      </block>
[18:46:16.143]      // end if-block "protType == 2"
[18:46:16.143]    </control>
[18:46:16.143]  </sequence>
[18:46:16.143]  
[18:46:16.143]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:46:16.143]  
[18:46:16.143]  <debugvars>
[18:46:16.145]    // Pre-defined
[18:46:16.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:16.145]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:46:16.145]    __dp=0x00000000
[18:46:16.145]    __ap=0x00000000
[18:46:16.145]    __traceout=0x00000000      (Trace Disabled)
[18:46:16.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:16.146]    __FlashAddr=0x00000000
[18:46:16.146]    __FlashLen=0x00000000
[18:46:16.146]    __FlashArg=0x00000000
[18:46:16.146]    __FlashOp=0x00000000
[18:46:16.146]    __Result=0x00000000
[18:46:16.146]  </debugvars>
[18:46:16.146]  
[18:46:16.146]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:46:16.146]    <block atomic="false" info="">
[18:46:16.146]      __var SW_DP_ABORT       = 0x0;
[18:46:16.146]        // -> [SW_DP_ABORT <= 0x00000000]
[18:46:16.146]      __var DP_CTRL_STAT      = 0x4;
[18:46:16.146]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:46:16.146]      __var DP_SELECT         = 0x8;
[18:46:16.147]        // -> [DP_SELECT <= 0x00000008]
[18:46:16.147]      __var powered_down      = 0;
[18:46:16.147]        // -> [powered_down <= 0x00000000]
[18:46:16.147]      WriteDP(DP_SELECT, 0x00000000);
[18:46:16.147]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:46:16.147]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:46:16.149]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:46:16.149]        // -> [powered_down <= 0x00000001]
[18:46:16.149]    </block>
[18:46:16.149]    <control if="powered_down" while="" timeout="0" info="">
[18:46:16.149]      // if-block "powered_down"
[18:46:16.149]        // =>  TRUE
[18:46:16.149]      <block atomic="false" info="">
[18:46:16.149]        Message(0, "Debug/System power-up request sent");
[18:46:16.150]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:46:16.150]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:46:16.150]      </block>
[18:46:16.150]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:46:16.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:46:16.152]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:46:16.152]        // while-condition  =>  FALSE
[18:46:16.152]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:46:16.152]      </control>
[18:46:16.152]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:46:16.152]        // if-block "(__protocol & 0xFFFF) == 1"
[18:46:16.152]          // =>  FALSE
[18:46:16.152]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:46:16.152]      </control>
[18:46:16.153]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:46:16.153]        // if-block "(__protocol & 0xFFFF) == 2"
[18:46:16.153]          // =>  TRUE
[18:46:16.153]        <block atomic="false" info="">
[18:46:16.153]          Message(0, "executing SWD power up");
[18:46:16.155]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:46:16.156]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:46:16.156]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:46:16.157]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:46:16.157]        </block>
[18:46:16.157]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:46:16.157]      </control>
[18:46:16.157]      // end if-block "powered_down"
[18:46:16.157]    </control>
[18:46:16.157]    <block atomic="false" info="">
[18:46:16.157]      __var DEBUG_PORT_VAL    = 0;
[18:46:16.157]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:46:16.157]      __var ACCESS_POINT_VAL  = 0;
[18:46:16.158]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:46:16.158]      __ap = 1; 
[18:46:16.158]        // -> [__ap <= 0x00000001]
[18:46:16.158]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:46:16.159]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:46:16.159]      __ap = 4;
[18:46:16.159]        // -> [__ap <= 0x00000004]
[18:46:16.159]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:46:16.161]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:46:16.161]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:46:16.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:46:16.162]    </block>
[18:46:16.162]    <block atomic="false" info="">
[18:46:16.162]      __var nReset = 0x80;
[18:46:16.162]        // -> [nReset <= 0x00000080]
[18:46:16.162]      __var canReadPins = 0;
[18:46:16.162]        // -> [canReadPins <= 0x00000000]
[18:46:16.162]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:46:16.162]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:46:16.164]        // -> [canReadPins <= 0x00000001]
[18:46:16.164]    </block>
[18:46:16.164]    <control if="" while="1" timeout="200" info="">
[18:46:16.164]      // while "1"  (timeout="200")
[18:46:16.164]      // while-condition  =>  TRUE
[18:46:16.165]      // while "1"  (timeout="200")
[18:46:16.165]      // while-condition  =>  TRUE
[18:46:16.165]      // while "1"  (timeout="200")
[18:46:16.165]      // while-condition  =>  TRUE
[18:46:16.165]      // while "1"  (timeout="200")
[18:46:16.165]      // while-condition  =>  TRUE
[18:46:16.165]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.166]      // while-condition  =>  TRUE
[18:46:16.166]      // while "1"  (timeout="200")
[18:46:16.168]      // while-condition  =>  TRUE
[18:46:16.168]      // while "1"  (timeout="200")
[18:46:16.168]      // while-condition  =>  TRUE
[18:46:16.168]      // while "1"  (timeout="200")
[18:46:16.168]      // while-condition  =>  TRUE
[18:46:16.168]      // while "1"  (timeout="200")
[18:46:16.168]      // while-condition  =>  TRUE
[18:46:16.170]      // while "1"  (timeout="200")
[18:46:16.170]      // while-condition  =>  TRUE
[18:46:16.170]      // while "1"  (timeout="200")
[18:46:16.170]      // while-condition  =>  TRUE
[18:46:16.170]      // while "1"  (timeout="200")
[18:46:16.170]      // while-condition  =>  TRUE
[18:46:16.170]      // while "1"  (timeout="200")
[18:46:16.170]      // while-condition  =>  TRUE
[18:46:16.170]      // while "1"  (timeout="200")
[18:46:16.170]      // while-condition  =>  TRUE
[18:46:16.170]      // while "1"  (timeout="200")
[18:46:16.170]      // while-condition  =>  TRUE
[18:46:16.170]      // while "1"  (timeout="200")
[18:46:16.170]      // while-condition  =>  TRUE
[18:46:16.171]      // while "1"  (timeout="200")
[18:46:16.171]      // while-condition  =>  TRUE
[18:46:16.171]      // while "1"  (timeout="200")
[18:46:16.171]      // while-condition  =>  TRUE
[18:46:16.171]      // while "1"  (timeout="200")
[18:46:16.171]      // while-condition  =>  TRUE
[18:46:16.171]      // while "1"  (timeout="200")
[18:46:16.171]      // while-condition  =>  TRUE
[18:46:16.171]      // while "1"  (timeout="200")
[18:46:16.171]      // while-condition  =>  TRUE
[18:46:16.171]      // while "1"  (timeout="200")
[18:46:16.173]      // while-condition  =>  TRUE
[18:46:16.173]      // while "1"  (timeout="200")
[18:46:16.173]      // while-condition  =>  TRUE
[18:46:16.173]      // while "1"  (timeout="200")
[18:46:16.173]      // while-condition  =>  TRUE
[18:46:16.173]      // while "1"  (timeout="200")
[18:46:16.173]      // while-condition  =>  TRUE
[18:46:16.173]      // while "1"  (timeout="200")
[18:46:16.173]      // while-condition  =>  TRUE
[18:46:16.173]      // while "1"  (timeout="200")
[18:46:16.173]      // while-condition  =>  TRUE
[18:46:16.174]      // while "1"  (timeout="200")
[18:46:16.174]      // while-condition  =>  TRUE
[18:46:16.174]      // while "1"  (timeout="200")
[18:46:16.174]      // while-condition  =>  TRUE
[18:46:16.174]      // while "1"  (timeout="200")
[18:46:16.174]      // while-condition  =>  TRUE
[18:46:16.174]      // while "1"  (timeout="200")
[18:46:16.174]      // while-condition  =>  TRUE
[18:46:16.174]      // while "1"  (timeout="200")
[18:46:16.174]      // while-condition  =>  TRUE
[18:46:16.175]      // while "1"  (timeout="200")
[18:46:16.175]      // while-condition  =>  TRUE
[18:46:16.175]      // while "1"  (timeout="200")
[18:46:16.175]      // while-condition  =>  TRUE
[18:46:16.175]      // while "1"  (timeout="200")
[18:46:16.175]      // while-condition  =>  TRUE
[18:46:16.175]      // while "1"  (timeout="200")
[18:46:16.175]      // while-condition  =>  TRUE
[18:46:16.176]      // while "1"  (timeout="200")
[18:46:16.176]      // while  =>  TIMEOUT
[18:46:16.176]      // end while "1"
[18:46:16.176]    </control>
[18:46:16.176]    <control if="canReadPins" while="" timeout="0" info="">
[18:46:16.177]      // if-block "canReadPins"
[18:46:16.177]        // =>  TRUE
[18:46:16.177]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:46:16.177]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:46:16.177]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:46:16.177]        // while-condition  =>  FALSE
[18:46:16.177]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:46:16.177]      </control>
[18:46:16.177]      // end if-block "canReadPins"
[18:46:16.177]    </control>
[18:46:16.177]    <control if="!canReadPins" while="" timeout="0" info="">
[18:46:16.177]      // if-block "!canReadPins"
[18:46:16.177]        // =>  FALSE
[18:46:16.177]      // skip if-block "!canReadPins"
[18:46:16.177]    </control>
[18:46:16.178]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:46:16.178]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:46:16.178]        // =>  TRUE
[18:46:16.178]      <block atomic="false" info="">
[18:46:16.178]        WriteAP(0x00, 0x190008);
[18:46:16.178]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:46:16.180]        WriteAP(0xF0, 0x01);
[18:46:16.181]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:46:16.181]      </block>
[18:46:16.181]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:46:16.181]    </control>
[18:46:16.181]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:46:16.181]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:46:16.181]        // =>  FALSE
[18:46:16.181]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:46:16.181]    </control>
[18:46:16.181]    <block atomic="false" info="">
[18:46:16.181]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:46:16.182]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:46:16.183]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:46:16.183]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:46:16.185]      __ap = 0; //lets make sure we reset the access point selection
[18:46:16.185]        // -> [__ap <= 0x00000000]
[18:46:16.185]    </block>
[18:46:16.185]  </sequence>
[18:46:16.186]  
[18:46:16.192]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:46:16.192]  
[18:46:16.192]  <debugvars>
[18:46:16.192]    // Pre-defined
[18:46:16.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:16.192]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:46:16.192]    __dp=0x00000000
[18:46:16.192]    __ap=0x00000000
[18:46:16.192]    __traceout=0x00000000      (Trace Disabled)
[18:46:16.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:16.192]    __FlashAddr=0x00000000
[18:46:16.192]    __FlashLen=0x00000000
[18:46:16.192]    __FlashArg=0x00000000
[18:46:16.192]    __FlashOp=0x00000000
[18:46:16.192]    __Result=0x00000000
[18:46:16.192]  </debugvars>
[18:46:16.192]  
[18:46:16.192]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:46:16.192]    <block atomic="false" info="">
[18:46:16.194]      __var deviceID = 0;
[18:46:16.194]        // -> [deviceID <= 0x00000000]
[18:46:16.194]      __var version = 0;
[18:46:16.195]        // -> [version <= 0x00000000]
[18:46:16.195]      __var partNum = 0;
[18:46:16.195]        // -> [partNum <= 0x00000000]
[18:46:16.195]      __var manuf = 0;
[18:46:16.195]        // -> [manuf <= 0x00000000]
[18:46:16.195]      __var isMSPM0G1X0X_G3X0X = 0;
[18:46:16.195]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:46:16.195]      __var isProduction = 0;
[18:46:16.196]        // -> [isProduction <= 0x00000000]
[18:46:16.196]      __var continueId = 0;
[18:46:16.196]        // -> [continueId <= 0x00000000]
[18:46:16.196]      deviceID =   Read32(0x41C40004);
[18:46:16.197]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:46:16.197]        // -> [deviceID <= 0x2BB8802F]
[18:46:16.197]      version = deviceID >> 28;
[18:46:16.197]        // -> [version <= 0x00000002]
[18:46:16.197]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:46:16.197]        // -> [partNum <= 0x0000BB88]
[18:46:16.197]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:46:16.197]        // -> [manuf <= 0x00000017]
[18:46:16.197]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:46:16.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:46:16.197]      isProduction = (version > 0);
[18:46:16.197]        // -> [isProduction <= 0x00000001]
[18:46:16.197]    </block>
[18:46:16.197]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:46:16.197]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:46:16.197]        // =>  FALSE
[18:46:16.197]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:46:16.197]    </control>
[18:46:16.197]    <control if="continueId == 4" while="" timeout="0" info="">
[18:46:16.197]      // if-block "continueId == 4"
[18:46:16.197]        // =>  FALSE
[18:46:16.197]      // skip if-block "continueId == 4"
[18:46:16.200]    </control>
[18:46:16.200]    <control if="!isProduction" while="" timeout="0" info="">
[18:46:16.200]      // if-block "!isProduction"
[18:46:16.200]        // =>  FALSE
[18:46:16.200]      // skip if-block "!isProduction"
[18:46:16.200]    </control>
[18:46:16.200]  </sequence>
[18:46:16.200]  
[18:47:04.138]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:47:04.138]  
[18:47:04.153]  <debugvars>
[18:47:04.153]    // Pre-defined
[18:47:04.153]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:04.153]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:47:04.153]    __dp=0x00000000
[18:47:04.153]    __ap=0x00000000
[18:47:04.153]    __traceout=0x00000000      (Trace Disabled)
[18:47:04.153]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:04.153]    __FlashAddr=0x00000000
[18:47:04.153]    __FlashLen=0x00000000
[18:47:04.153]    __FlashArg=0x00000000
[18:47:04.153]    __FlashOp=0x00000000
[18:47:04.153]    __Result=0x00000000
[18:47:04.153]  </debugvars>
[18:47:04.153]  
[18:47:04.153]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:47:04.153]    <block atomic="false" info="">
[18:47:04.153]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:47:04.153]        // -> [isSWJ <= 0x00000001]
[18:47:04.153]      __var hasDormant = __protocol & 0x00020000;
[18:47:04.155]        // -> [hasDormant <= 0x00000000]
[18:47:04.155]      __var protType   = __protocol & 0x0000FFFF;
[18:47:04.155]        // -> [protType <= 0x00000002]
[18:47:04.155]    </block>
[18:47:04.155]    <control if="protType == 1" while="" timeout="0" info="">
[18:47:04.155]      // if-block "protType == 1"
[18:47:04.155]        // =>  FALSE
[18:47:04.155]      // skip if-block "protType == 1"
[18:47:04.155]    </control>
[18:47:04.155]    <control if="protType == 2" while="" timeout="0" info="">
[18:47:04.155]      // if-block "protType == 2"
[18:47:04.156]        // =>  TRUE
[18:47:04.156]      <control if="isSWJ" while="" timeout="0" info="">
[18:47:04.156]        // if-block "isSWJ"
[18:47:04.156]          // =>  TRUE
[18:47:04.156]        <control if="hasDormant" while="" timeout="0" info="">
[18:47:04.156]          // if-block "hasDormant"
[18:47:04.156]            // =>  FALSE
[18:47:04.156]          // skip if-block "hasDormant"
[18:47:04.156]        </control>
[18:47:04.157]        <control if="!hasDormant" while="" timeout="0" info="">
[18:47:04.157]          // if-block "!hasDormant"
[18:47:04.157]            // =>  TRUE
[18:47:04.157]          <block atomic="false" info="">
[18:47:04.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:47:04.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:04.157]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:47:04.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:47:04.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:47:04.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:04.157]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:47:04.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:47:04.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:47:04.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:04.157]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:47:04.157]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:47:04.157]          </block>
[18:47:04.157]          // end if-block "!hasDormant"
[18:47:04.157]        </control>
[18:47:04.157]        // end if-block "isSWJ"
[18:47:04.157]      </control>
[18:47:04.157]      <control if="!isSWJ" while="" timeout="0" info="">
[18:47:04.157]        // if-block "!isSWJ"
[18:47:04.157]          // =>  FALSE
[18:47:04.157]        // skip if-block "!isSWJ"
[18:47:04.157]      </control>
[18:47:04.157]      <block atomic="false" info="">
[18:47:04.157]        ReadDP(0x0);
[18:47:04.157]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:47:04.157]      </block>
[18:47:04.157]      // end if-block "protType == 2"
[18:47:04.157]    </control>
[18:47:04.157]  </sequence>
[18:47:04.157]  
[18:47:04.157]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:47:04.157]  
[18:47:04.157]  <debugvars>
[18:47:04.157]    // Pre-defined
[18:47:04.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:04.157]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:47:04.157]    __dp=0x00000000
[18:47:04.157]    __ap=0x00000000
[18:47:04.157]    __traceout=0x00000000      (Trace Disabled)
[18:47:04.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:04.157]    __FlashAddr=0x00000000
[18:47:04.157]    __FlashLen=0x00000000
[18:47:04.165]    __FlashArg=0x00000000
[18:47:04.165]    __FlashOp=0x00000000
[18:47:04.165]    __Result=0x00000000
[18:47:04.165]  </debugvars>
[18:47:04.165]  
[18:47:04.165]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:47:04.166]    <block atomic="false" info="">
[18:47:04.166]      __var SW_DP_ABORT       = 0x0;
[18:47:04.166]        // -> [SW_DP_ABORT <= 0x00000000]
[18:47:04.166]      __var DP_CTRL_STAT      = 0x4;
[18:47:04.166]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:47:04.166]      __var DP_SELECT         = 0x8;
[18:47:04.166]        // -> [DP_SELECT <= 0x00000008]
[18:47:04.166]      __var powered_down      = 0;
[18:47:04.166]        // -> [powered_down <= 0x00000000]
[18:47:04.166]      WriteDP(DP_SELECT, 0x00000000);
[18:47:04.166]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:47:04.167]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:47:04.167]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:47:04.167]        // -> [powered_down <= 0x00000001]
[18:47:04.167]    </block>
[18:47:04.168]    <control if="powered_down" while="" timeout="0" info="">
[18:47:04.168]      // if-block "powered_down"
[18:47:04.168]        // =>  TRUE
[18:47:04.168]      <block atomic="false" info="">
[18:47:04.168]        Message(0, "Debug/System power-up request sent");
[18:47:04.169]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:47:04.169]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:47:04.169]      </block>
[18:47:04.169]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:47:04.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:47:04.169]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:47:04.169]        // while-condition  =>  FALSE
[18:47:04.169]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:47:04.169]      </control>
[18:47:04.169]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:47:04.169]        // if-block "(__protocol & 0xFFFF) == 1"
[18:47:04.169]          // =>  FALSE
[18:47:04.169]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:47:04.169]      </control>
[18:47:04.169]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:47:04.169]        // if-block "(__protocol & 0xFFFF) == 2"
[18:47:04.169]          // =>  TRUE
[18:47:04.169]        <block atomic="false" info="">
[18:47:04.169]          Message(0, "executing SWD power up");
[18:47:04.169]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:47:04.175]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:47:04.175]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:47:04.175]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:47:04.176]        </block>
[18:47:04.176]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:47:04.176]      </control>
[18:47:04.176]      // end if-block "powered_down"
[18:47:04.176]    </control>
[18:47:04.176]    <block atomic="false" info="">
[18:47:04.176]      __var DEBUG_PORT_VAL    = 0;
[18:47:04.176]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:47:04.176]      __var ACCESS_POINT_VAL  = 0;
[18:47:04.176]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:47:04.176]      __ap = 1; 
[18:47:04.177]        // -> [__ap <= 0x00000001]
[18:47:04.177]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:47:04.177]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:47:04.177]      __ap = 4;
[18:47:04.177]        // -> [__ap <= 0x00000004]
[18:47:04.177]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:47:04.177]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:47:04.177]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:47:04.177]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:47:04.177]    </block>
[18:47:04.177]    <block atomic="false" info="">
[18:47:04.177]      __var nReset = 0x80;
[18:47:04.177]        // -> [nReset <= 0x00000080]
[18:47:04.177]      __var canReadPins = 0;
[18:47:04.177]        // -> [canReadPins <= 0x00000000]
[18:47:04.177]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:47:04.177]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:47:04.177]        // -> [canReadPins <= 0x00000001]
[18:47:04.177]    </block>
[18:47:04.177]    <control if="" while="1" timeout="200" info="">
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.177]      // while-condition  =>  TRUE
[18:47:04.177]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.185]      // while-condition  =>  TRUE
[18:47:04.185]      // while "1"  (timeout="200")
[18:47:04.187]      // while-condition  =>  TRUE
[18:47:04.187]      // while "1"  (timeout="200")
[18:47:04.187]      // while-condition  =>  TRUE
[18:47:04.187]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.188]      // while "1"  (timeout="200")
[18:47:04.188]      // while-condition  =>  TRUE
[18:47:04.195]      // while "1"  (timeout="200")
[18:47:04.195]      // while  =>  TIMEOUT
[18:47:04.195]      // end while "1"
[18:47:04.195]    </control>
[18:47:04.195]    <control if="canReadPins" while="" timeout="0" info="">
[18:47:04.195]      // if-block "canReadPins"
[18:47:04.195]        // =>  TRUE
[18:47:04.195]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:47:04.195]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:47:04.196]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:47:04.196]        // while-condition  =>  FALSE
[18:47:04.196]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:47:04.196]      </control>
[18:47:04.196]      // end if-block "canReadPins"
[18:47:04.196]    </control>
[18:47:04.196]    <control if="!canReadPins" while="" timeout="0" info="">
[18:47:04.196]      // if-block "!canReadPins"
[18:47:04.196]        // =>  FALSE
[18:47:04.196]      // skip if-block "!canReadPins"
[18:47:04.197]    </control>
[18:47:04.197]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:47:04.197]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:47:04.197]        // =>  TRUE
[18:47:04.197]      <block atomic="false" info="">
[18:47:04.197]        WriteAP(0x00, 0x190008);
[18:47:04.197]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:47:04.197]        WriteAP(0xF0, 0x01);
[18:47:04.197]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:47:04.197]      </block>
[18:47:04.197]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:47:04.197]    </control>
[18:47:04.197]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:47:04.197]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:47:04.197]        // =>  FALSE
[18:47:04.197]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:47:04.197]    </control>
[18:47:04.197]    <block atomic="false" info="">
[18:47:04.197]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:47:04.197]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:47:04.197]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:47:04.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:47:04.197]      __ap = 0; //lets make sure we reset the access point selection
[18:47:04.197]        // -> [__ap <= 0x00000000]
[18:47:04.197]    </block>
[18:47:04.197]  </sequence>
[18:47:04.197]  
[18:47:04.207]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:47:04.207]  
[18:47:04.207]  <debugvars>
[18:47:04.207]    // Pre-defined
[18:47:04.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:04.207]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:47:04.207]    __dp=0x00000000
[18:47:04.207]    __ap=0x00000000
[18:47:04.207]    __traceout=0x00000000      (Trace Disabled)
[18:47:04.207]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:04.207]    __FlashAddr=0x00000000
[18:47:04.207]    __FlashLen=0x00000000
[18:47:04.207]    __FlashArg=0x00000000
[18:47:04.207]    __FlashOp=0x00000000
[18:47:04.207]    __Result=0x00000000
[18:47:04.207]  </debugvars>
[18:47:04.207]  
[18:47:04.207]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:47:04.207]    <block atomic="false" info="">
[18:47:04.207]      __var deviceID = 0;
[18:47:04.207]        // -> [deviceID <= 0x00000000]
[18:47:04.207]      __var version = 0;
[18:47:04.207]        // -> [version <= 0x00000000]
[18:47:04.207]      __var partNum = 0;
[18:47:04.207]        // -> [partNum <= 0x00000000]
[18:47:04.207]      __var manuf = 0;
[18:47:04.207]        // -> [manuf <= 0x00000000]
[18:47:04.207]      __var isMSPM0G1X0X_G3X0X = 0;
[18:47:04.207]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:47:04.207]      __var isProduction = 0;
[18:47:04.207]        // -> [isProduction <= 0x00000000]
[18:47:04.207]      __var continueId = 0;
[18:47:04.207]        // -> [continueId <= 0x00000000]
[18:47:04.207]      deviceID =   Read32(0x41C40004);
[18:47:04.207]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:47:04.215]        // -> [deviceID <= 0x2BB8802F]
[18:47:04.215]      version = deviceID >> 28;
[18:47:04.215]        // -> [version <= 0x00000002]
[18:47:04.215]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:47:04.215]        // -> [partNum <= 0x0000BB88]
[18:47:04.215]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:47:04.215]        // -> [manuf <= 0x00000017]
[18:47:04.215]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:47:04.215]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:47:04.215]      isProduction = (version > 0);
[18:47:04.215]        // -> [isProduction <= 0x00000001]
[18:47:04.215]    </block>
[18:47:04.216]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:47:04.216]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:47:04.216]        // =>  FALSE
[18:47:04.216]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:47:04.216]    </control>
[18:47:04.216]    <control if="continueId == 4" while="" timeout="0" info="">
[18:47:04.216]      // if-block "continueId == 4"
[18:47:04.217]        // =>  FALSE
[18:47:04.217]      // skip if-block "continueId == 4"
[18:47:04.217]    </control>
[18:47:04.217]    <control if="!isProduction" while="" timeout="0" info="">
[18:47:04.217]      // if-block "!isProduction"
[18:47:04.217]        // =>  FALSE
[18:47:04.217]      // skip if-block "!isProduction"
[18:47:04.217]    </control>
[18:47:04.217]  </sequence>
[18:47:04.217]  
[18:47:17.105]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:47:17.105]  
[18:47:17.114]  <debugvars>
[18:47:17.114]    // Pre-defined
[18:47:17.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:17.115]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:47:17.115]    __dp=0x00000000
[18:47:17.115]    __ap=0x00000000
[18:47:17.116]    __traceout=0x00000000      (Trace Disabled)
[18:47:17.116]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:17.116]    __FlashAddr=0x00000000
[18:47:17.116]    __FlashLen=0x00000000
[18:47:17.116]    __FlashArg=0x00000000
[18:47:17.116]    __FlashOp=0x00000000
[18:47:17.116]    __Result=0x00000000
[18:47:17.116]  </debugvars>
[18:47:17.116]  
[18:47:17.116]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:47:17.116]    <block atomic="false" info="">
[18:47:17.116]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:47:17.116]        // -> [isSWJ <= 0x00000001]
[18:47:17.116]      __var hasDormant = __protocol & 0x00020000;
[18:47:17.116]        // -> [hasDormant <= 0x00000000]
[18:47:17.116]      __var protType   = __protocol & 0x0000FFFF;
[18:47:17.116]        // -> [protType <= 0x00000002]
[18:47:17.116]    </block>
[18:47:17.116]    <control if="protType == 1" while="" timeout="0" info="">
[18:47:17.116]      // if-block "protType == 1"
[18:47:17.116]        // =>  FALSE
[18:47:17.116]      // skip if-block "protType == 1"
[18:47:17.116]    </control>
[18:47:17.116]    <control if="protType == 2" while="" timeout="0" info="">
[18:47:17.116]      // if-block "protType == 2"
[18:47:17.116]        // =>  TRUE
[18:47:17.116]      <control if="isSWJ" while="" timeout="0" info="">
[18:47:17.116]        // if-block "isSWJ"
[18:47:17.116]          // =>  TRUE
[18:47:17.116]        <control if="hasDormant" while="" timeout="0" info="">
[18:47:17.116]          // if-block "hasDormant"
[18:47:17.116]            // =>  FALSE
[18:47:17.116]          // skip if-block "hasDormant"
[18:47:17.116]        </control>
[18:47:17.116]        <control if="!hasDormant" while="" timeout="0" info="">
[18:47:17.116]          // if-block "!hasDormant"
[18:47:17.116]            // =>  TRUE
[18:47:17.116]          <block atomic="false" info="">
[18:47:17.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:47:17.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:17.116]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:47:17.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:47:17.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:47:17.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:17.116]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:47:17.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:47:17.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:47:17.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:17.116]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:47:17.116]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:47:17.116]          </block>
[18:47:17.116]          // end if-block "!hasDormant"
[18:47:17.116]        </control>
[18:47:17.116]        // end if-block "isSWJ"
[18:47:17.116]      </control>
[18:47:17.116]      <control if="!isSWJ" while="" timeout="0" info="">
[18:47:17.116]        // if-block "!isSWJ"
[18:47:17.116]          // =>  FALSE
[18:47:17.116]        // skip if-block "!isSWJ"
[18:47:17.116]      </control>
[18:47:17.116]      <block atomic="false" info="">
[18:47:17.116]        ReadDP(0x0);
[18:47:17.116]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:47:17.125]      </block>
[18:47:17.125]      // end if-block "protType == 2"
[18:47:17.125]    </control>
[18:47:17.125]  </sequence>
[18:47:17.125]  
[18:47:17.126]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:47:17.126]  
[18:47:17.126]  <debugvars>
[18:47:17.126]    // Pre-defined
[18:47:17.126]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:17.126]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:47:17.126]    __dp=0x00000000
[18:47:17.127]    __ap=0x00000000
[18:47:17.127]    __traceout=0x00000000      (Trace Disabled)
[18:47:17.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:17.127]    __FlashAddr=0x00000000
[18:47:17.127]    __FlashLen=0x00000000
[18:47:17.127]    __FlashArg=0x00000000
[18:47:17.127]    __FlashOp=0x00000000
[18:47:17.127]    __Result=0x00000000
[18:47:17.127]  </debugvars>
[18:47:17.127]  
[18:47:17.127]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:47:17.127]    <block atomic="false" info="">
[18:47:17.127]      __var SW_DP_ABORT       = 0x0;
[18:47:17.127]        // -> [SW_DP_ABORT <= 0x00000000]
[18:47:17.127]      __var DP_CTRL_STAT      = 0x4;
[18:47:17.127]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:47:17.127]      __var DP_SELECT         = 0x8;
[18:47:17.127]        // -> [DP_SELECT <= 0x00000008]
[18:47:17.127]      __var powered_down      = 0;
[18:47:17.127]        // -> [powered_down <= 0x00000000]
[18:47:17.127]      WriteDP(DP_SELECT, 0x00000000);
[18:47:17.127]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:47:17.127]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:47:17.127]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:47:17.127]        // -> [powered_down <= 0x00000001]
[18:47:17.127]    </block>
[18:47:17.127]    <control if="powered_down" while="" timeout="0" info="">
[18:47:17.127]      // if-block "powered_down"
[18:47:17.127]        // =>  TRUE
[18:47:17.127]      <block atomic="false" info="">
[18:47:17.127]        Message(0, "Debug/System power-up request sent");
[18:47:17.127]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:47:17.127]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:47:17.127]      </block>
[18:47:17.127]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:47:17.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:47:17.127]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:47:17.127]        // while-condition  =>  FALSE
[18:47:17.127]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:47:17.135]      </control>
[18:47:17.135]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:47:17.135]        // if-block "(__protocol & 0xFFFF) == 1"
[18:47:17.136]          // =>  FALSE
[18:47:17.136]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:47:17.136]      </control>
[18:47:17.136]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:47:17.136]        // if-block "(__protocol & 0xFFFF) == 2"
[18:47:17.136]          // =>  TRUE
[18:47:17.136]        <block atomic="false" info="">
[18:47:17.136]          Message(0, "executing SWD power up");
[18:47:17.137]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:47:17.137]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:47:17.137]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:47:17.137]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:47:17.137]        </block>
[18:47:17.137]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:47:17.137]      </control>
[18:47:17.137]      // end if-block "powered_down"
[18:47:17.137]    </control>
[18:47:17.137]    <block atomic="false" info="">
[18:47:17.137]      __var DEBUG_PORT_VAL    = 0;
[18:47:17.137]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:47:17.137]      __var ACCESS_POINT_VAL  = 0;
[18:47:17.137]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:47:17.137]      __ap = 1; 
[18:47:17.137]        // -> [__ap <= 0x00000001]
[18:47:17.137]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:47:17.137]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:47:17.137]      __ap = 4;
[18:47:17.137]        // -> [__ap <= 0x00000004]
[18:47:17.137]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:47:17.137]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:47:17.137]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:47:17.137]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:47:17.145]    </block>
[18:47:17.145]    <block atomic="false" info="">
[18:47:17.145]      __var nReset = 0x80;
[18:47:17.145]        // -> [nReset <= 0x00000080]
[18:47:17.145]      __var canReadPins = 0;
[18:47:17.147]        // -> [canReadPins <= 0x00000000]
[18:47:17.147]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:47:17.147]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:47:17.147]        // -> [canReadPins <= 0x00000001]
[18:47:17.147]    </block>
[18:47:17.148]    <control if="" while="1" timeout="200" info="">
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.148]      // while-condition  =>  TRUE
[18:47:17.148]      // while "1"  (timeout="200")
[18:47:17.155]      // while-condition  =>  TRUE
[18:47:17.155]      // while "1"  (timeout="200")
[18:47:17.155]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.156]      // while "1"  (timeout="200")
[18:47:17.156]      // while-condition  =>  TRUE
[18:47:17.165]      // while "1"  (timeout="200")
[18:47:17.165]      // while  =>  TIMEOUT
[18:47:17.165]      // end while "1"
[18:47:17.165]    </control>
[18:47:17.165]    <control if="canReadPins" while="" timeout="0" info="">
[18:47:17.165]      // if-block "canReadPins"
[18:47:17.166]        // =>  TRUE
[18:47:17.166]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:47:17.166]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:47:17.166]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:47:17.166]        // while-condition  =>  FALSE
[18:47:17.166]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:47:17.167]      </control>
[18:47:17.167]      // end if-block "canReadPins"
[18:47:17.167]    </control>
[18:47:17.167]    <control if="!canReadPins" while="" timeout="0" info="">
[18:47:17.167]      // if-block "!canReadPins"
[18:47:17.167]        // =>  FALSE
[18:47:17.167]      // skip if-block "!canReadPins"
[18:47:17.167]    </control>
[18:47:17.167]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:47:17.167]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:47:17.167]        // =>  TRUE
[18:47:17.167]      <block atomic="false" info="">
[18:47:17.167]        WriteAP(0x00, 0x190008);
[18:47:17.167]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:47:17.167]        WriteAP(0xF0, 0x01);
[18:47:17.167]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:47:17.167]      </block>
[18:47:17.167]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:47:17.167]    </control>
[18:47:17.167]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:47:17.171]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:47:17.171]        // =>  FALSE
[18:47:17.171]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:47:17.171]    </control>
[18:47:17.171]    <block atomic="false" info="">
[18:47:17.171]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:47:17.171]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:47:17.171]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:47:17.171]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:47:17.171]      __ap = 0; //lets make sure we reset the access point selection
[18:47:17.171]        // -> [__ap <= 0x00000000]
[18:47:17.171]    </block>
[18:47:17.171]  </sequence>
[18:47:17.171]  
[18:47:17.176]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:47:17.176]  
[18:47:17.176]  <debugvars>
[18:47:17.176]    // Pre-defined
[18:47:17.176]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:17.176]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:47:17.176]    __dp=0x00000000
[18:47:17.176]    __ap=0x00000000
[18:47:17.176]    __traceout=0x00000000      (Trace Disabled)
[18:47:17.176]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:17.176]    __FlashAddr=0x00000000
[18:47:17.176]    __FlashLen=0x00000000
[18:47:17.176]    __FlashArg=0x00000000
[18:47:17.176]    __FlashOp=0x00000000
[18:47:17.176]    __Result=0x00000000
[18:47:17.176]  </debugvars>
[18:47:17.176]  
[18:47:17.176]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:47:17.176]    <block atomic="false" info="">
[18:47:17.176]      __var deviceID = 0;
[18:47:17.176]        // -> [deviceID <= 0x00000000]
[18:47:17.176]      __var version = 0;
[18:47:17.176]        // -> [version <= 0x00000000]
[18:47:17.176]      __var partNum = 0;
[18:47:17.176]        // -> [partNum <= 0x00000000]
[18:47:17.176]      __var manuf = 0;
[18:47:17.176]        // -> [manuf <= 0x00000000]
[18:47:17.176]      __var isMSPM0G1X0X_G3X0X = 0;
[18:47:17.176]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:47:17.176]      __var isProduction = 0;
[18:47:17.176]        // -> [isProduction <= 0x00000000]
[18:47:17.176]      __var continueId = 0;
[18:47:17.176]        // -> [continueId <= 0x00000000]
[18:47:17.176]      deviceID =   Read32(0x41C40004);
[18:47:17.185]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:47:17.186]        // -> [deviceID <= 0x2BB8802F]
[18:47:17.186]      version = deviceID >> 28;
[18:47:17.186]        // -> [version <= 0x00000002]
[18:47:17.186]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:47:17.186]        // -> [partNum <= 0x0000BB88]
[18:47:17.186]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:47:17.186]        // -> [manuf <= 0x00000017]
[18:47:17.186]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:47:17.186]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:47:17.187]      isProduction = (version > 0);
[18:47:17.187]        // -> [isProduction <= 0x00000001]
[18:47:17.187]    </block>
[18:47:17.187]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:47:17.187]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:47:17.187]        // =>  FALSE
[18:47:17.187]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:47:17.187]    </control>
[18:47:17.187]    <control if="continueId == 4" while="" timeout="0" info="">
[18:47:17.187]      // if-block "continueId == 4"
[18:47:17.187]        // =>  FALSE
[18:47:17.187]      // skip if-block "continueId == 4"
[18:47:17.187]    </control>
[18:47:17.187]    <control if="!isProduction" while="" timeout="0" info="">
[18:47:17.187]      // if-block "!isProduction"
[18:47:17.187]        // =>  FALSE
[18:47:17.187]      // skip if-block "!isProduction"
[18:47:17.187]    </control>
[18:47:17.187]  </sequence>
[18:47:17.187]  
[18:47:58.093]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:47:58.093]  
[18:47:58.102]  <debugvars>
[18:47:58.102]    // Pre-defined
[18:47:58.102]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:58.102]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:47:58.102]    __dp=0x00000000
[18:47:58.102]    __ap=0x00000000
[18:47:58.102]    __traceout=0x00000000      (Trace Disabled)
[18:47:58.102]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:58.102]    __FlashAddr=0x00000000
[18:47:58.104]    __FlashLen=0x00000000
[18:47:58.104]    __FlashArg=0x00000000
[18:47:58.104]    __FlashOp=0x00000000
[18:47:58.104]    __Result=0x00000000
[18:47:58.104]  </debugvars>
[18:47:58.104]  
[18:47:58.104]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:47:58.104]    <block atomic="false" info="">
[18:47:58.104]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:47:58.104]        // -> [isSWJ <= 0x00000001]
[18:47:58.105]      __var hasDormant = __protocol & 0x00020000;
[18:47:58.105]        // -> [hasDormant <= 0x00000000]
[18:47:58.105]      __var protType   = __protocol & 0x0000FFFF;
[18:47:58.105]        // -> [protType <= 0x00000002]
[18:47:58.105]    </block>
[18:47:58.105]    <control if="protType == 1" while="" timeout="0" info="">
[18:47:58.106]      // if-block "protType == 1"
[18:47:58.106]        // =>  FALSE
[18:47:58.106]      // skip if-block "protType == 1"
[18:47:58.106]    </control>
[18:47:58.106]    <control if="protType == 2" while="" timeout="0" info="">
[18:47:58.106]      // if-block "protType == 2"
[18:47:58.106]        // =>  TRUE
[18:47:58.106]      <control if="isSWJ" while="" timeout="0" info="">
[18:47:58.106]        // if-block "isSWJ"
[18:47:58.106]          // =>  TRUE
[18:47:58.106]        <control if="hasDormant" while="" timeout="0" info="">
[18:47:58.106]          // if-block "hasDormant"
[18:47:58.106]            // =>  FALSE
[18:47:58.106]          // skip if-block "hasDormant"
[18:47:58.106]        </control>
[18:47:58.106]        <control if="!hasDormant" while="" timeout="0" info="">
[18:47:58.106]          // if-block "!hasDormant"
[18:47:58.106]            // =>  TRUE
[18:47:58.106]          <block atomic="false" info="">
[18:47:58.106]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:47:58.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:58.106]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:47:58.106]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:47:58.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:47:58.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:58.108]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:47:58.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:47:58.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:47:58.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:47:58.109]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:47:58.109]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:47:58.109]          </block>
[18:47:58.109]          // end if-block "!hasDormant"
[18:47:58.109]        </control>
[18:47:58.109]        // end if-block "isSWJ"
[18:47:58.109]      </control>
[18:47:58.110]      <control if="!isSWJ" while="" timeout="0" info="">
[18:47:58.110]        // if-block "!isSWJ"
[18:47:58.110]          // =>  FALSE
[18:47:58.110]        // skip if-block "!isSWJ"
[18:47:58.110]      </control>
[18:47:58.110]      <block atomic="false" info="">
[18:47:58.110]        ReadDP(0x0);
[18:47:58.110]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:47:58.110]      </block>
[18:47:58.110]      // end if-block "protType == 2"
[18:47:58.110]    </control>
[18:47:58.110]  </sequence>
[18:47:58.110]  
[18:47:58.110]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:47:58.110]  
[18:47:58.113]  <debugvars>
[18:47:58.113]    // Pre-defined
[18:47:58.113]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:58.113]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:47:58.113]    __dp=0x00000000
[18:47:58.113]    __ap=0x00000000
[18:47:58.113]    __traceout=0x00000000      (Trace Disabled)
[18:47:58.113]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:58.113]    __FlashAddr=0x00000000
[18:47:58.113]    __FlashLen=0x00000000
[18:47:58.113]    __FlashArg=0x00000000
[18:47:58.113]    __FlashOp=0x00000000
[18:47:58.114]    __Result=0x00000000
[18:47:58.114]  </debugvars>
[18:47:58.114]  
[18:47:58.114]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:47:58.114]    <block atomic="false" info="">
[18:47:58.115]      __var SW_DP_ABORT       = 0x0;
[18:47:58.115]        // -> [SW_DP_ABORT <= 0x00000000]
[18:47:58.115]      __var DP_CTRL_STAT      = 0x4;
[18:47:58.115]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:47:58.115]      __var DP_SELECT         = 0x8;
[18:47:58.115]        // -> [DP_SELECT <= 0x00000008]
[18:47:58.115]      __var powered_down      = 0;
[18:47:58.115]        // -> [powered_down <= 0x00000000]
[18:47:58.115]      WriteDP(DP_SELECT, 0x00000000);
[18:47:58.116]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:47:58.116]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:47:58.117]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:47:58.117]        // -> [powered_down <= 0x00000001]
[18:47:58.117]    </block>
[18:47:58.117]    <control if="powered_down" while="" timeout="0" info="">
[18:47:58.117]      // if-block "powered_down"
[18:47:58.117]        // =>  TRUE
[18:47:58.117]      <block atomic="false" info="">
[18:47:58.117]        Message(0, "Debug/System power-up request sent");
[18:47:58.118]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:47:58.118]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:47:58.118]      </block>
[18:47:58.118]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:47:58.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:47:58.120]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:47:58.120]        // while-condition  =>  FALSE
[18:47:58.120]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:47:58.120]      </control>
[18:47:58.120]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:47:58.120]        // if-block "(__protocol & 0xFFFF) == 1"
[18:47:58.120]          // =>  FALSE
[18:47:58.121]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:47:58.121]      </control>
[18:47:58.121]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:47:58.121]        // if-block "(__protocol & 0xFFFF) == 2"
[18:47:58.121]          // =>  TRUE
[18:47:58.121]        <block atomic="false" info="">
[18:47:58.121]          Message(0, "executing SWD power up");
[18:47:58.122]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:47:58.122]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:47:58.122]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:47:58.122]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:47:58.122]        </block>
[18:47:58.125]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:47:58.125]      </control>
[18:47:58.125]      // end if-block "powered_down"
[18:47:58.125]    </control>
[18:47:58.125]    <block atomic="false" info="">
[18:47:58.125]      __var DEBUG_PORT_VAL    = 0;
[18:47:58.125]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:47:58.125]      __var ACCESS_POINT_VAL  = 0;
[18:47:58.126]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:47:58.126]      __ap = 1; 
[18:47:58.126]        // -> [__ap <= 0x00000001]
[18:47:58.126]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:47:58.127]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:47:58.127]      __ap = 4;
[18:47:58.127]        // -> [__ap <= 0x00000004]
[18:47:58.127]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:47:58.128]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:47:58.128]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:47:58.128]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:47:58.130]    </block>
[18:47:58.130]    <block atomic="false" info="">
[18:47:58.130]      __var nReset = 0x80;
[18:47:58.130]        // -> [nReset <= 0x00000080]
[18:47:58.130]      __var canReadPins = 0;
[18:47:58.130]        // -> [canReadPins <= 0x00000000]
[18:47:58.130]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:47:58.132]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:47:58.132]        // -> [canReadPins <= 0x00000001]
[18:47:58.132]    </block>
[18:47:58.132]    <control if="" while="1" timeout="200" info="">
[18:47:58.132]      // while "1"  (timeout="200")
[18:47:58.132]      // while-condition  =>  TRUE
[18:47:58.132]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.133]      // while-condition  =>  TRUE
[18:47:58.133]      // while "1"  (timeout="200")
[18:47:58.135]      // while-condition  =>  TRUE
[18:47:58.135]      // while "1"  (timeout="200")
[18:47:58.135]      // while-condition  =>  TRUE
[18:47:58.135]      // while "1"  (timeout="200")
[18:47:58.135]      // while-condition  =>  TRUE
[18:47:58.135]      // while "1"  (timeout="200")
[18:47:58.135]      // while-condition  =>  TRUE
[18:47:58.135]      // while "1"  (timeout="200")
[18:47:58.135]      // while-condition  =>  TRUE
[18:47:58.135]      // while "1"  (timeout="200")
[18:47:58.136]      // while-condition  =>  TRUE
[18:47:58.136]      // while "1"  (timeout="200")
[18:47:58.136]      // while-condition  =>  TRUE
[18:47:58.136]      // while "1"  (timeout="200")
[18:47:58.136]      // while-condition  =>  TRUE
[18:47:58.136]      // while "1"  (timeout="200")
[18:47:58.136]      // while-condition  =>  TRUE
[18:47:58.136]      // while "1"  (timeout="200")
[18:47:58.136]      // while-condition  =>  TRUE
[18:47:58.136]      // while "1"  (timeout="200")
[18:47:58.136]      // while-condition  =>  TRUE
[18:47:58.136]      // while "1"  (timeout="200")
[18:47:58.136]      // while-condition  =>  TRUE
[18:47:58.136]      // while "1"  (timeout="200")
[18:47:58.137]      // while-condition  =>  TRUE
[18:47:58.137]      // while "1"  (timeout="200")
[18:47:58.137]      // while-condition  =>  TRUE
[18:47:58.137]      // while "1"  (timeout="200")
[18:47:58.137]      // while-condition  =>  TRUE
[18:47:58.137]      // while "1"  (timeout="200")
[18:47:58.137]      // while-condition  =>  TRUE
[18:47:58.137]      // while "1"  (timeout="200")
[18:47:58.137]      // while-condition  =>  TRUE
[18:47:58.137]      // while "1"  (timeout="200")
[18:47:58.137]      // while-condition  =>  TRUE
[18:47:58.138]      // while "1"  (timeout="200")
[18:47:58.138]      // while-condition  =>  TRUE
[18:47:58.138]      // while "1"  (timeout="200")
[18:47:58.138]      // while-condition  =>  TRUE
[18:47:58.138]      // while "1"  (timeout="200")
[18:47:58.138]      // while-condition  =>  TRUE
[18:47:58.138]      // while "1"  (timeout="200")
[18:47:58.138]      // while-condition  =>  TRUE
[18:47:58.139]      // while "1"  (timeout="200")
[18:47:58.139]      // while-condition  =>  TRUE
[18:47:58.139]      // while "1"  (timeout="200")
[18:47:58.139]      // while-condition  =>  TRUE
[18:47:58.139]      // while "1"  (timeout="200")
[18:47:58.139]      // while-condition  =>  TRUE
[18:47:58.139]      // while "1"  (timeout="200")
[18:47:58.139]      // while-condition  =>  TRUE
[18:47:58.139]      // while "1"  (timeout="200")
[18:47:58.139]      // while-condition  =>  TRUE
[18:47:58.139]      // while "1"  (timeout="200")
[18:47:58.139]      // while-condition  =>  TRUE
[18:47:58.141]      // while "1"  (timeout="200")
[18:47:58.141]      // while-condition  =>  TRUE
[18:47:58.141]      // while "1"  (timeout="200")
[18:47:58.141]      // while-condition  =>  TRUE
[18:47:58.141]      // while "1"  (timeout="200")
[18:47:58.142]      // while-condition  =>  TRUE
[18:47:58.142]      // while "1"  (timeout="200")
[18:47:58.142]      // while-condition  =>  TRUE
[18:47:58.142]      // while "1"  (timeout="200")
[18:47:58.142]      // while-condition  =>  TRUE
[18:47:58.142]      // while "1"  (timeout="200")
[18:47:58.142]      // while-condition  =>  TRUE
[18:47:58.142]      // while "1"  (timeout="200")
[18:47:58.142]      // while-condition  =>  TRUE
[18:47:58.142]      // while "1"  (timeout="200")
[18:47:58.142]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.143]      // while-condition  =>  TRUE
[18:47:58.143]      // while "1"  (timeout="200")
[18:47:58.145]      // while-condition  =>  TRUE
[18:47:58.145]      // while "1"  (timeout="200")
[18:47:58.145]      // while  =>  TIMEOUT
[18:47:58.145]      // end while "1"
[18:47:58.145]    </control>
[18:47:58.145]    <control if="canReadPins" while="" timeout="0" info="">
[18:47:58.145]      // if-block "canReadPins"
[18:47:58.145]        // =>  TRUE
[18:47:58.145]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:47:58.145]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:47:58.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:47:58.146]        // while-condition  =>  FALSE
[18:47:58.146]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:47:58.146]      </control>
[18:47:58.146]      // end if-block "canReadPins"
[18:47:58.146]    </control>
[18:47:58.146]    <control if="!canReadPins" while="" timeout="0" info="">
[18:47:58.146]      // if-block "!canReadPins"
[18:47:58.146]        // =>  FALSE
[18:47:58.147]      // skip if-block "!canReadPins"
[18:47:58.147]    </control>
[18:47:58.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:47:58.147]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:47:58.147]        // =>  TRUE
[18:47:58.147]      <block atomic="false" info="">
[18:47:58.147]        WriteAP(0x00, 0x190008);
[18:47:58.147]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:47:58.148]        WriteAP(0xF0, 0x01);
[18:47:58.149]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:47:58.149]      </block>
[18:47:58.149]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:47:58.149]    </control>
[18:47:58.149]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:47:58.149]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:47:58.149]        // =>  FALSE
[18:47:58.149]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:47:58.149]    </control>
[18:47:58.149]    <block atomic="false" info="">
[18:47:58.149]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:47:58.151]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:47:58.151]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:47:58.151]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:47:58.153]      __ap = 0; //lets make sure we reset the access point selection
[18:47:58.153]        // -> [__ap <= 0x00000000]
[18:47:58.153]    </block>
[18:47:58.153]  </sequence>
[18:47:58.153]  
[18:47:58.160]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:47:58.160]  
[18:47:58.160]  <debugvars>
[18:47:58.160]    // Pre-defined
[18:47:58.160]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:47:58.160]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:47:58.160]    __dp=0x00000000
[18:47:58.160]    __ap=0x00000000
[18:47:58.161]    __traceout=0x00000000      (Trace Disabled)
[18:47:58.161]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:47:58.161]    __FlashAddr=0x00000000
[18:47:58.161]    __FlashLen=0x00000000
[18:47:58.161]    __FlashArg=0x00000000
[18:47:58.161]    __FlashOp=0x00000000
[18:47:58.161]    __Result=0x00000000
[18:47:58.161]  </debugvars>
[18:47:58.161]  
[18:47:58.161]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:47:58.161]    <block atomic="false" info="">
[18:47:58.161]      __var deviceID = 0;
[18:47:58.161]        // -> [deviceID <= 0x00000000]
[18:47:58.163]      __var version = 0;
[18:47:58.163]        // -> [version <= 0x00000000]
[18:47:58.163]      __var partNum = 0;
[18:47:58.163]        // -> [partNum <= 0x00000000]
[18:47:58.163]      __var manuf = 0;
[18:47:58.163]        // -> [manuf <= 0x00000000]
[18:47:58.163]      __var isMSPM0G1X0X_G3X0X = 0;
[18:47:58.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:47:58.163]      __var isProduction = 0;
[18:47:58.163]        // -> [isProduction <= 0x00000000]
[18:47:58.163]      __var continueId = 0;
[18:47:58.163]        // -> [continueId <= 0x00000000]
[18:47:58.163]      deviceID =   Read32(0x41C40004);
[18:47:58.165]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:47:58.165]        // -> [deviceID <= 0x2BB8802F]
[18:47:58.165]      version = deviceID >> 28;
[18:47:58.165]        // -> [version <= 0x00000002]
[18:47:58.165]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:47:58.165]        // -> [partNum <= 0x0000BB88]
[18:47:58.166]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:47:58.166]        // -> [manuf <= 0x00000017]
[18:47:58.166]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:47:58.166]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:47:58.166]      isProduction = (version > 0);
[18:47:58.166]        // -> [isProduction <= 0x00000001]
[18:47:58.166]    </block>
[18:47:58.166]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:47:58.166]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:47:58.166]        // =>  FALSE
[18:47:58.166]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:47:58.167]    </control>
[18:47:58.167]    <control if="continueId == 4" while="" timeout="0" info="">
[18:47:58.167]      // if-block "continueId == 4"
[18:47:58.167]        // =>  FALSE
[18:47:58.167]      // skip if-block "continueId == 4"
[18:47:58.167]    </control>
[18:47:58.167]    <control if="!isProduction" while="" timeout="0" info="">
[18:47:58.167]      // if-block "!isProduction"
[18:47:58.167]        // =>  FALSE
[18:47:58.167]      // skip if-block "!isProduction"
[18:47:58.167]    </control>
[18:47:58.167]  </sequence>
[18:47:58.167]  
[18:54:49.490]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:54:49.490]  
[18:54:49.499]  <debugvars>
[18:54:49.499]    // Pre-defined
[18:54:49.499]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:49.499]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:49.499]    __dp=0x00000000
[18:54:49.499]    __ap=0x00000000
[18:54:49.499]    __traceout=0x00000000      (Trace Disabled)
[18:54:49.499]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:49.499]    __FlashAddr=0x00000000
[18:54:49.499]    __FlashLen=0x00000000
[18:54:49.499]    __FlashArg=0x00000000
[18:54:49.500]    __FlashOp=0x00000000
[18:54:49.500]    __Result=0x00000000
[18:54:49.500]  </debugvars>
[18:54:49.500]  
[18:54:49.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:54:49.500]    <block atomic="false" info="">
[18:54:49.501]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:54:49.501]        // -> [isSWJ <= 0x00000001]
[18:54:49.501]      __var hasDormant = __protocol & 0x00020000;
[18:54:49.501]        // -> [hasDormant <= 0x00000000]
[18:54:49.501]      __var protType   = __protocol & 0x0000FFFF;
[18:54:49.501]        // -> [protType <= 0x00000002]
[18:54:49.501]    </block>
[18:54:49.501]    <control if="protType == 1" while="" timeout="0" info="">
[18:54:49.501]      // if-block "protType == 1"
[18:54:49.501]        // =>  FALSE
[18:54:49.502]      // skip if-block "protType == 1"
[18:54:49.502]    </control>
[18:54:49.502]    <control if="protType == 2" while="" timeout="0" info="">
[18:54:49.502]      // if-block "protType == 2"
[18:54:49.502]        // =>  TRUE
[18:54:49.502]      <control if="isSWJ" while="" timeout="0" info="">
[18:54:49.502]        // if-block "isSWJ"
[18:54:49.502]          // =>  TRUE
[18:54:49.503]        <control if="hasDormant" while="" timeout="0" info="">
[18:54:49.503]          // if-block "hasDormant"
[18:54:49.503]            // =>  FALSE
[18:54:49.503]          // skip if-block "hasDormant"
[18:54:49.503]        </control>
[18:54:49.503]        <control if="!hasDormant" while="" timeout="0" info="">
[18:54:49.503]          // if-block "!hasDormant"
[18:54:49.504]            // =>  TRUE
[18:54:49.504]          <block atomic="false" info="">
[18:54:49.504]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:54:49.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:49.504]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:54:49.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:54:49.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:54:49.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:49.505]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:54:49.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:54:49.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:54:49.506]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:49.506]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:54:49.506]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:54:49.506]          </block>
[18:54:49.506]          // end if-block "!hasDormant"
[18:54:49.506]        </control>
[18:54:49.507]        // end if-block "isSWJ"
[18:54:49.507]      </control>
[18:54:49.507]      <control if="!isSWJ" while="" timeout="0" info="">
[18:54:49.507]        // if-block "!isSWJ"
[18:54:49.507]          // =>  FALSE
[18:54:49.507]        // skip if-block "!isSWJ"
[18:54:49.507]      </control>
[18:54:49.507]      <block atomic="false" info="">
[18:54:49.507]        ReadDP(0x0);
[18:54:49.508]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:54:49.508]      </block>
[18:54:49.508]      // end if-block "protType == 2"
[18:54:49.508]    </control>
[18:54:49.508]  </sequence>
[18:54:49.508]  
[18:54:49.509]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:54:49.509]  
[18:54:49.509]  <debugvars>
[18:54:49.509]    // Pre-defined
[18:54:49.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:49.509]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:49.509]    __dp=0x00000000
[18:54:49.509]    __ap=0x00000000
[18:54:49.509]    __traceout=0x00000000      (Trace Disabled)
[18:54:49.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:49.510]    __FlashAddr=0x00000000
[18:54:49.510]    __FlashLen=0x00000000
[18:54:49.510]    __FlashArg=0x00000000
[18:54:49.510]    __FlashOp=0x00000000
[18:54:49.510]    __Result=0x00000000
[18:54:49.510]  </debugvars>
[18:54:49.510]  
[18:54:49.510]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:54:49.510]    <block atomic="false" info="">
[18:54:49.510]      __var SW_DP_ABORT       = 0x0;
[18:54:49.511]        // -> [SW_DP_ABORT <= 0x00000000]
[18:54:49.511]      __var DP_CTRL_STAT      = 0x4;
[18:54:49.512]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:54:49.512]      __var DP_SELECT         = 0x8;
[18:54:49.512]        // -> [DP_SELECT <= 0x00000008]
[18:54:49.512]      __var powered_down      = 0;
[18:54:49.512]        // -> [powered_down <= 0x00000000]
[18:54:49.512]      WriteDP(DP_SELECT, 0x00000000);
[18:54:49.513]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:54:49.513]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:54:49.514]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:54:49.514]        // -> [powered_down <= 0x00000001]
[18:54:49.514]    </block>
[18:54:49.514]    <control if="powered_down" while="" timeout="0" info="">
[18:54:49.514]      // if-block "powered_down"
[18:54:49.514]        // =>  TRUE
[18:54:49.514]      <block atomic="false" info="">
[18:54:49.514]        Message(0, "Debug/System power-up request sent");
[18:54:49.516]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:54:49.516]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:54:49.516]      </block>
[18:54:49.516]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:54:49.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:54:49.517]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:54:49.517]        // while-condition  =>  FALSE
[18:54:49.517]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:54:49.517]      </control>
[18:54:49.517]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:54:49.517]        // if-block "(__protocol & 0xFFFF) == 1"
[18:54:49.517]          // =>  FALSE
[18:54:49.517]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:54:49.517]      </control>
[18:54:49.517]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:54:49.517]        // if-block "(__protocol & 0xFFFF) == 2"
[18:54:49.517]          // =>  TRUE
[18:54:49.518]        <block atomic="false" info="">
[18:54:49.518]          Message(0, "executing SWD power up");
[18:54:49.519]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:54:49.521]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:54:49.521]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:54:49.522]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:54:49.522]        </block>
[18:54:49.522]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:54:49.522]      </control>
[18:54:49.522]      // end if-block "powered_down"
[18:54:49.522]    </control>
[18:54:49.522]    <block atomic="false" info="">
[18:54:49.522]      __var DEBUG_PORT_VAL    = 0;
[18:54:49.522]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:54:49.522]      __var ACCESS_POINT_VAL  = 0;
[18:54:49.522]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:54:49.523]      __ap = 1; 
[18:54:49.523]        // -> [__ap <= 0x00000001]
[18:54:49.523]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:54:49.524]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:54:49.524]      __ap = 4;
[18:54:49.524]        // -> [__ap <= 0x00000004]
[18:54:49.524]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:49.525]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:54:49.525]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:54:49.526]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:49.527]    </block>
[18:54:49.527]    <block atomic="false" info="">
[18:54:49.527]      __var nReset = 0x80;
[18:54:49.527]        // -> [nReset <= 0x00000080]
[18:54:49.527]      __var canReadPins = 0;
[18:54:49.527]        // -> [canReadPins <= 0x00000000]
[18:54:49.528]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:54:49.528]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:54:49.528]        // -> [canReadPins <= 0x00000001]
[18:54:49.528]    </block>
[18:54:49.528]    <control if="" while="1" timeout="200" info="">
[18:54:49.528]      // while "1"  (timeout="200")
[18:54:49.529]      // while-condition  =>  TRUE
[18:54:49.529]      // while "1"  (timeout="200")
[18:54:49.529]      // while-condition  =>  TRUE
[18:54:49.529]      // while "1"  (timeout="200")
[18:54:49.529]      // while-condition  =>  TRUE
[18:54:49.529]      // while "1"  (timeout="200")
[18:54:49.529]      // while-condition  =>  TRUE
[18:54:49.529]      // while "1"  (timeout="200")
[18:54:49.529]      // while-condition  =>  TRUE
[18:54:49.529]      // while "1"  (timeout="200")
[18:54:49.529]      // while-condition  =>  TRUE
[18:54:49.529]      // while "1"  (timeout="200")
[18:54:49.530]      // while-condition  =>  TRUE
[18:54:49.530]      // while "1"  (timeout="200")
[18:54:49.530]      // while-condition  =>  TRUE
[18:54:49.530]      // while "1"  (timeout="200")
[18:54:49.530]      // while-condition  =>  TRUE
[18:54:49.530]      // while "1"  (timeout="200")
[18:54:49.530]      // while-condition  =>  TRUE
[18:54:49.530]      // while "1"  (timeout="200")
[18:54:49.530]      // while-condition  =>  TRUE
[18:54:49.530]      // while "1"  (timeout="200")
[18:54:49.532]      // while-condition  =>  TRUE
[18:54:49.532]      // while "1"  (timeout="200")
[18:54:49.532]      // while-condition  =>  TRUE
[18:54:49.532]      // while "1"  (timeout="200")
[18:54:49.532]      // while-condition  =>  TRUE
[18:54:49.532]      // while "1"  (timeout="200")
[18:54:49.532]      // while-condition  =>  TRUE
[18:54:49.532]      // while "1"  (timeout="200")
[18:54:49.532]      // while-condition  =>  TRUE
[18:54:49.533]      // while "1"  (timeout="200")
[18:54:49.533]      // while-condition  =>  TRUE
[18:54:49.533]      // while "1"  (timeout="200")
[18:54:49.533]      // while-condition  =>  TRUE
[18:54:49.533]      // while "1"  (timeout="200")
[18:54:49.533]      // while-condition  =>  TRUE
[18:54:49.533]      // while "1"  (timeout="200")
[18:54:49.533]      // while-condition  =>  TRUE
[18:54:49.533]      // while "1"  (timeout="200")
[18:54:49.534]      // while-condition  =>  TRUE
[18:54:49.534]      // while "1"  (timeout="200")
[18:54:49.534]      // while-condition  =>  TRUE
[18:54:49.534]      // while "1"  (timeout="200")
[18:54:49.534]      // while-condition  =>  TRUE
[18:54:49.534]      // while "1"  (timeout="200")
[18:54:49.534]      // while-condition  =>  TRUE
[18:54:49.535]      // while "1"  (timeout="200")
[18:54:49.535]      // while-condition  =>  TRUE
[18:54:49.535]      // while "1"  (timeout="200")
[18:54:49.535]      // while-condition  =>  TRUE
[18:54:49.535]      // while "1"  (timeout="200")
[18:54:49.535]      // while-condition  =>  TRUE
[18:54:49.535]      // while "1"  (timeout="200")
[18:54:49.535]      // while-condition  =>  TRUE
[18:54:49.536]      // while "1"  (timeout="200")
[18:54:49.536]      // while  =>  TIMEOUT
[18:54:49.536]      // end while "1"
[18:54:49.536]    </control>
[18:54:49.536]    <control if="canReadPins" while="" timeout="0" info="">
[18:54:49.536]      // if-block "canReadPins"
[18:54:49.536]        // =>  TRUE
[18:54:49.536]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:54:49.536]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:54:49.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:54:49.537]        // while-condition  =>  FALSE
[18:54:49.537]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:54:49.537]      </control>
[18:54:49.537]      // end if-block "canReadPins"
[18:54:49.537]    </control>
[18:54:49.537]    <control if="!canReadPins" while="" timeout="0" info="">
[18:54:49.537]      // if-block "!canReadPins"
[18:54:49.537]        // =>  FALSE
[18:54:49.537]      // skip if-block "!canReadPins"
[18:54:49.537]    </control>
[18:54:49.538]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:54:49.538]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:49.538]        // =>  TRUE
[18:54:49.538]      <block atomic="false" info="">
[18:54:49.538]        WriteAP(0x00, 0x190008);
[18:54:49.539]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:49.539]        WriteAP(0xF0, 0x01);
[18:54:49.540]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:49.540]      </block>
[18:54:49.540]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:49.540]    </control>
[18:54:49.540]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:54:49.540]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:49.540]        // =>  FALSE
[18:54:49.541]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:49.541]    </control>
[18:54:49.541]    <block atomic="false" info="">
[18:54:49.541]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:49.542]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:54:49.542]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:54:49.542]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:49.544]      __ap = 0; //lets make sure we reset the access point selection
[18:54:49.544]        // -> [__ap <= 0x00000000]
[18:54:49.544]    </block>
[18:54:49.544]  </sequence>
[18:54:49.544]  
[18:54:49.551]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:54:49.551]  
[18:54:49.551]  <debugvars>
[18:54:49.551]    // Pre-defined
[18:54:49.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:49.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:49.552]    __dp=0x00000000
[18:54:49.552]    __ap=0x00000000
[18:54:49.552]    __traceout=0x00000000      (Trace Disabled)
[18:54:49.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:49.553]    __FlashAddr=0x00000000
[18:54:49.553]    __FlashLen=0x00000000
[18:54:49.553]    __FlashArg=0x00000000
[18:54:49.553]    __FlashOp=0x00000000
[18:54:49.553]    __Result=0x00000000
[18:54:49.553]  </debugvars>
[18:54:49.553]  
[18:54:49.553]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:54:49.553]    <block atomic="false" info="">
[18:54:49.553]      __var deviceID = 0;
[18:54:49.553]        // -> [deviceID <= 0x00000000]
[18:54:49.553]      __var version = 0;
[18:54:49.554]        // -> [version <= 0x00000000]
[18:54:49.554]      __var partNum = 0;
[18:54:49.554]        // -> [partNum <= 0x00000000]
[18:54:49.554]      __var manuf = 0;
[18:54:49.554]        // -> [manuf <= 0x00000000]
[18:54:49.554]      __var isMSPM0G1X0X_G3X0X = 0;
[18:54:49.554]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:54:49.555]      __var isProduction = 0;
[18:54:49.555]        // -> [isProduction <= 0x00000000]
[18:54:49.555]      __var continueId = 0;
[18:54:49.555]        // -> [continueId <= 0x00000000]
[18:54:49.555]      deviceID =   Read32(0x41C40004);
[18:54:49.555]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:54:49.557]        // -> [deviceID <= 0x2BB8802F]
[18:54:49.557]      version = deviceID >> 28;
[18:54:49.557]        // -> [version <= 0x00000002]
[18:54:49.557]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:54:49.557]        // -> [partNum <= 0x0000BB88]
[18:54:49.557]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:54:49.557]        // -> [manuf <= 0x00000017]
[18:54:49.557]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:54:49.557]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:54:49.557]      isProduction = (version > 0);
[18:54:49.557]        // -> [isProduction <= 0x00000001]
[18:54:49.557]    </block>
[18:54:49.558]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:54:49.558]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:54:49.558]        // =>  FALSE
[18:54:49.558]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:54:49.558]    </control>
[18:54:49.558]    <control if="continueId == 4" while="" timeout="0" info="">
[18:54:49.558]      // if-block "continueId == 4"
[18:54:49.558]        // =>  FALSE
[18:54:49.558]      // skip if-block "continueId == 4"
[18:54:49.558]    </control>
[18:54:49.558]    <control if="!isProduction" while="" timeout="0" info="">
[18:54:49.559]      // if-block "!isProduction"
[18:54:49.559]        // =>  FALSE
[18:54:49.559]      // skip if-block "!isProduction"
[18:54:49.559]    </control>
[18:54:49.559]  </sequence>
[18:54:49.559]  
[18:55:41.812]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:55:41.812]  
[18:55:41.812]  <debugvars>
[18:55:41.813]    // Pre-defined
[18:55:41.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:41.813]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:41.813]    __dp=0x00000000
[18:55:41.813]    __ap=0x00000000
[18:55:41.813]    __traceout=0x00000000      (Trace Disabled)
[18:55:41.813]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:41.813]    __FlashAddr=0x00000000
[18:55:41.813]    __FlashLen=0x00000000
[18:55:41.814]    __FlashArg=0x00000000
[18:55:41.814]    __FlashOp=0x00000000
[18:55:41.814]    __Result=0x00000000
[18:55:41.814]  </debugvars>
[18:55:41.814]  
[18:55:41.814]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:55:41.814]    <block atomic="false" info="">
[18:55:41.814]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:55:41.814]        // -> [isSWJ <= 0x00000001]
[18:55:41.814]      __var hasDormant = __protocol & 0x00020000;
[18:55:41.814]        // -> [hasDormant <= 0x00000000]
[18:55:41.814]      __var protType   = __protocol & 0x0000FFFF;
[18:55:41.815]        // -> [protType <= 0x00000002]
[18:55:41.815]    </block>
[18:55:41.815]    <control if="protType == 1" while="" timeout="0" info="">
[18:55:41.815]      // if-block "protType == 1"
[18:55:41.815]        // =>  FALSE
[18:55:41.815]      // skip if-block "protType == 1"
[18:55:41.815]    </control>
[18:55:41.815]    <control if="protType == 2" while="" timeout="0" info="">
[18:55:41.815]      // if-block "protType == 2"
[18:55:41.815]        // =>  TRUE
[18:55:41.815]      <control if="isSWJ" while="" timeout="0" info="">
[18:55:41.815]        // if-block "isSWJ"
[18:55:41.816]          // =>  TRUE
[18:55:41.816]        <control if="hasDormant" while="" timeout="0" info="">
[18:55:41.816]          // if-block "hasDormant"
[18:55:41.816]            // =>  FALSE
[18:55:41.816]          // skip if-block "hasDormant"
[18:55:41.816]        </control>
[18:55:41.816]        <control if="!hasDormant" while="" timeout="0" info="">
[18:55:41.816]          // if-block "!hasDormant"
[18:55:41.816]            // =>  TRUE
[18:55:41.816]          <block atomic="false" info="">
[18:55:41.816]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:55:41.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:41.817]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:55:41.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:55:41.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:55:41.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:41.818]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:55:41.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:55:41.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:55:41.819]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:41.819]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:55:41.819]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:55:41.819]          </block>
[18:55:41.819]          // end if-block "!hasDormant"
[18:55:41.819]        </control>
[18:55:41.820]        // end if-block "isSWJ"
[18:55:41.820]      </control>
[18:55:41.820]      <control if="!isSWJ" while="" timeout="0" info="">
[18:55:41.820]        // if-block "!isSWJ"
[18:55:41.820]          // =>  FALSE
[18:55:41.820]        // skip if-block "!isSWJ"
[18:55:41.820]      </control>
[18:55:41.820]      <block atomic="false" info="">
[18:55:41.820]        ReadDP(0x0);
[18:55:41.820]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:55:41.820]      </block>
[18:55:41.821]      // end if-block "protType == 2"
[18:55:41.821]    </control>
[18:55:41.821]  </sequence>
[18:55:41.821]  
[18:55:41.822]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:55:41.822]  
[18:55:41.822]  <debugvars>
[18:55:41.822]    // Pre-defined
[18:55:41.822]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:41.822]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:41.823]    __dp=0x00000000
[18:55:41.823]    __ap=0x00000000
[18:55:41.823]    __traceout=0x00000000      (Trace Disabled)
[18:55:41.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:41.823]    __FlashAddr=0x00000000
[18:55:41.823]    __FlashLen=0x00000000
[18:55:41.823]    __FlashArg=0x00000000
[18:55:41.823]    __FlashOp=0x00000000
[18:55:41.823]    __Result=0x00000000
[18:55:41.824]  </debugvars>
[18:55:41.824]  
[18:55:41.824]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:55:41.824]    <block atomic="false" info="">
[18:55:41.824]      __var SW_DP_ABORT       = 0x0;
[18:55:41.825]        // -> [SW_DP_ABORT <= 0x00000000]
[18:55:41.825]      __var DP_CTRL_STAT      = 0x4;
[18:55:41.825]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:55:41.825]      __var DP_SELECT         = 0x8;
[18:55:41.825]        // -> [DP_SELECT <= 0x00000008]
[18:55:41.825]      __var powered_down      = 0;
[18:55:41.825]        // -> [powered_down <= 0x00000000]
[18:55:41.826]      WriteDP(DP_SELECT, 0x00000000);
[18:55:41.826]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:55:41.826]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:55:41.827]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:55:41.827]        // -> [powered_down <= 0x00000001]
[18:55:41.827]    </block>
[18:55:41.827]    <control if="powered_down" while="" timeout="0" info="">
[18:55:41.827]      // if-block "powered_down"
[18:55:41.828]        // =>  TRUE
[18:55:41.828]      <block atomic="false" info="">
[18:55:41.828]        Message(0, "Debug/System power-up request sent");
[18:55:41.829]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:55:41.831]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:55:41.831]      </block>
[18:55:41.831]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:55:41.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:55:41.831]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:55:41.832]        // while-condition  =>  FALSE
[18:55:41.832]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:55:41.832]      </control>
[18:55:41.832]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:55:41.832]        // if-block "(__protocol & 0xFFFF) == 1"
[18:55:41.832]          // =>  FALSE
[18:55:41.832]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:55:41.832]      </control>
[18:55:41.832]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:55:41.832]        // if-block "(__protocol & 0xFFFF) == 2"
[18:55:41.832]          // =>  TRUE
[18:55:41.832]        <block atomic="false" info="">
[18:55:41.832]          Message(0, "executing SWD power up");
[18:55:41.834]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:55:41.835]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:55:41.835]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:55:41.836]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:55:41.836]        </block>
[18:55:41.836]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:55:41.836]      </control>
[18:55:41.836]      // end if-block "powered_down"
[18:55:41.836]    </control>
[18:55:41.838]    <block atomic="false" info="">
[18:55:41.838]      __var DEBUG_PORT_VAL    = 0;
[18:55:41.838]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:55:41.838]      __var ACCESS_POINT_VAL  = 0;
[18:55:41.838]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:55:41.838]      __ap = 1; 
[18:55:41.838]        // -> [__ap <= 0x00000001]
[18:55:41.838]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:55:41.839]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:55:41.839]      __ap = 4;
[18:55:41.840]        // -> [__ap <= 0x00000004]
[18:55:41.840]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:41.841]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:55:41.841]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:55:41.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:41.842]    </block>
[18:55:41.842]    <block atomic="false" info="">
[18:55:41.842]      __var nReset = 0x80;
[18:55:41.843]        // -> [nReset <= 0x00000080]
[18:55:41.843]      __var canReadPins = 0;
[18:55:41.843]        // -> [canReadPins <= 0x00000000]
[18:55:41.843]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:55:41.843]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:55:41.843]        // -> [canReadPins <= 0x00000001]
[18:55:41.843]    </block>
[18:55:41.843]    <control if="" while="1" timeout="200" info="">
[18:55:41.844]      // while "1"  (timeout="200")
[18:55:41.844]      // while-condition  =>  TRUE
[18:55:41.844]      // while "1"  (timeout="200")
[18:55:41.844]      // while-condition  =>  TRUE
[18:55:41.844]      // while "1"  (timeout="200")
[18:55:41.844]      // while-condition  =>  TRUE
[18:55:41.844]      // while "1"  (timeout="200")
[18:55:41.844]      // while-condition  =>  TRUE
[18:55:41.844]      // while "1"  (timeout="200")
[18:55:41.844]      // while-condition  =>  TRUE
[18:55:41.845]      // while "1"  (timeout="200")
[18:55:41.845]      // while-condition  =>  TRUE
[18:55:41.845]      // while "1"  (timeout="200")
[18:55:41.845]      // while-condition  =>  TRUE
[18:55:41.845]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.846]      // while "1"  (timeout="200")
[18:55:41.846]      // while-condition  =>  TRUE
[18:55:41.848]      // while "1"  (timeout="200")
[18:55:41.848]      // while  =>  TIMEOUT
[18:55:41.848]      // end while "1"
[18:55:41.848]    </control>
[18:55:41.848]    <control if="canReadPins" while="" timeout="0" info="">
[18:55:41.848]      // if-block "canReadPins"
[18:55:41.848]        // =>  TRUE
[18:55:41.849]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:55:41.849]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:55:41.849]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:55:41.849]        // while-condition  =>  FALSE
[18:55:41.849]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:55:41.849]      </control>
[18:55:41.849]      // end if-block "canReadPins"
[18:55:41.849]    </control>
[18:55:41.850]    <control if="!canReadPins" while="" timeout="0" info="">
[18:55:41.850]      // if-block "!canReadPins"
[18:55:41.850]        // =>  FALSE
[18:55:41.850]      // skip if-block "!canReadPins"
[18:55:41.850]    </control>
[18:55:41.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:55:41.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:41.850]        // =>  TRUE
[18:55:41.850]      <block atomic="false" info="">
[18:55:41.850]        WriteAP(0x00, 0x190008);
[18:55:41.851]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:41.851]        WriteAP(0xF0, 0x01);
[18:55:41.852]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:41.852]      </block>
[18:55:41.852]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:41.853]    </control>
[18:55:41.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:55:41.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:41.853]        // =>  FALSE
[18:55:41.853]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:41.854]    </control>
[18:55:41.854]    <block atomic="false" info="">
[18:55:41.854]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:41.855]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:55:41.855]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:55:41.855]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:41.856]      __ap = 0; //lets make sure we reset the access point selection
[18:55:41.856]        // -> [__ap <= 0x00000000]
[18:55:41.856]    </block>
[18:55:41.856]  </sequence>
[18:55:41.857]  
[18:55:41.863]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:55:41.863]  
[18:55:41.863]  <debugvars>
[18:55:41.863]    // Pre-defined
[18:55:41.863]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:41.864]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:41.864]    __dp=0x00000000
[18:55:41.864]    __ap=0x00000000
[18:55:41.864]    __traceout=0x00000000      (Trace Disabled)
[18:55:41.864]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:41.864]    __FlashAddr=0x00000000
[18:55:41.864]    __FlashLen=0x00000000
[18:55:41.864]    __FlashArg=0x00000000
[18:55:41.864]    __FlashOp=0x00000000
[18:55:41.864]    __Result=0x00000000
[18:55:41.864]  </debugvars>
[18:55:41.864]  
[18:55:41.864]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:55:41.864]    <block atomic="false" info="">
[18:55:41.865]      __var deviceID = 0;
[18:55:41.865]        // -> [deviceID <= 0x00000000]
[18:55:41.865]      __var version = 0;
[18:55:41.865]        // -> [version <= 0x00000000]
[18:55:41.865]      __var partNum = 0;
[18:55:41.865]        // -> [partNum <= 0x00000000]
[18:55:41.865]      __var manuf = 0;
[18:55:41.865]        // -> [manuf <= 0x00000000]
[18:55:41.866]      __var isMSPM0G1X0X_G3X0X = 0;
[18:55:41.866]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:55:41.867]      __var isProduction = 0;
[18:55:41.867]        // -> [isProduction <= 0x00000000]
[18:55:41.867]      __var continueId = 0;
[18:55:41.867]        // -> [continueId <= 0x00000000]
[18:55:41.867]      deviceID =   Read32(0x41C40004);
[18:55:41.869]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:55:41.869]        // -> [deviceID <= 0x2BB8802F]
[18:55:41.869]      version = deviceID >> 28;
[18:55:41.869]        // -> [version <= 0x00000002]
[18:55:41.869]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:55:41.869]        // -> [partNum <= 0x0000BB88]
[18:55:41.869]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:55:41.870]        // -> [manuf <= 0x00000017]
[18:55:41.870]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:55:41.870]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:55:41.870]      isProduction = (version > 0);
[18:55:41.870]        // -> [isProduction <= 0x00000001]
[18:55:41.870]    </block>
[18:55:41.870]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:55:41.870]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:55:41.870]        // =>  FALSE
[18:55:41.870]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:55:41.870]    </control>
[18:55:41.871]    <control if="continueId == 4" while="" timeout="0" info="">
[18:55:41.871]      // if-block "continueId == 4"
[18:55:41.871]        // =>  FALSE
[18:55:41.871]      // skip if-block "continueId == 4"
[18:55:41.871]    </control>
[18:55:41.871]    <control if="!isProduction" while="" timeout="0" info="">
[18:55:41.872]      // if-block "!isProduction"
[18:55:41.872]        // =>  FALSE
[18:55:41.872]      // skip if-block "!isProduction"
[18:55:41.872]    </control>
[18:55:41.872]  </sequence>
[18:55:41.872]  
[18:57:49.962]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:57:49.962]  
[18:57:49.962]  <debugvars>
[18:57:49.962]    // Pre-defined
[18:57:49.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:57:49.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:57:49.963]    __dp=0x00000000
[18:57:49.963]    __ap=0x00000000
[18:57:49.963]    __traceout=0x00000000      (Trace Disabled)
[18:57:49.963]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:57:49.963]    __FlashAddr=0x00000000
[18:57:49.963]    __FlashLen=0x00000000
[18:57:49.963]    __FlashArg=0x00000000
[18:57:49.963]    __FlashOp=0x00000000
[18:57:49.963]    __Result=0x00000000
[18:57:49.963]  </debugvars>
[18:57:49.963]  
[18:57:49.964]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:57:49.964]    <block atomic="false" info="">
[18:57:49.964]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:57:49.964]        // -> [isSWJ <= 0x00000001]
[18:57:49.964]      __var hasDormant = __protocol & 0x00020000;
[18:57:49.964]        // -> [hasDormant <= 0x00000000]
[18:57:49.964]      __var protType   = __protocol & 0x0000FFFF;
[18:57:49.965]        // -> [protType <= 0x00000002]
[18:57:49.965]    </block>
[18:57:49.965]    <control if="protType == 1" while="" timeout="0" info="">
[18:57:49.965]      // if-block "protType == 1"
[18:57:49.965]        // =>  FALSE
[18:57:49.965]      // skip if-block "protType == 1"
[18:57:49.965]    </control>
[18:57:49.965]    <control if="protType == 2" while="" timeout="0" info="">
[18:57:49.965]      // if-block "protType == 2"
[18:57:49.966]        // =>  TRUE
[18:57:49.966]      <control if="isSWJ" while="" timeout="0" info="">
[18:57:49.966]        // if-block "isSWJ"
[18:57:49.966]          // =>  TRUE
[18:57:49.966]        <control if="hasDormant" while="" timeout="0" info="">
[18:57:49.966]          // if-block "hasDormant"
[18:57:49.966]            // =>  FALSE
[18:57:49.966]          // skip if-block "hasDormant"
[18:57:49.966]        </control>
[18:57:49.966]        <control if="!hasDormant" while="" timeout="0" info="">
[18:57:49.966]          // if-block "!hasDormant"
[18:57:49.966]            // =>  TRUE
[18:57:49.966]          <block atomic="false" info="">
[18:57:49.966]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:57:49.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:57:49.967]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:57:49.967]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:57:49.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:57:49.968]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:57:49.968]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:57:49.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:57:49.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:57:49.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:57:49.969]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:57:49.969]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:57:49.969]          </block>
[18:57:49.969]          // end if-block "!hasDormant"
[18:57:49.969]        </control>
[18:57:49.969]        // end if-block "isSWJ"
[18:57:49.969]      </control>
[18:57:49.970]      <control if="!isSWJ" while="" timeout="0" info="">
[18:57:49.970]        // if-block "!isSWJ"
[18:57:49.970]          // =>  FALSE
[18:57:49.970]        // skip if-block "!isSWJ"
[18:57:49.970]      </control>
[18:57:49.970]      <block atomic="false" info="">
[18:57:49.970]        ReadDP(0x0);
[18:57:49.971]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:57:49.971]      </block>
[18:57:49.971]      // end if-block "protType == 2"
[18:57:49.971]    </control>
[18:57:49.971]  </sequence>
[18:57:49.971]  
[18:57:49.973]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:57:49.973]  
[18:57:49.973]  <debugvars>
[18:57:49.973]    // Pre-defined
[18:57:49.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:57:49.973]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:57:49.973]    __dp=0x00000000
[18:57:49.973]    __ap=0x00000000
[18:57:49.973]    __traceout=0x00000000      (Trace Disabled)
[18:57:49.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:57:49.973]    __FlashAddr=0x00000000
[18:57:49.973]    __FlashLen=0x00000000
[18:57:49.973]    __FlashArg=0x00000000
[18:57:49.973]    __FlashOp=0x00000000
[18:57:49.973]    __Result=0x00000000
[18:57:49.973]  </debugvars>
[18:57:49.973]  
[18:57:49.973]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:57:49.974]    <block atomic="false" info="">
[18:57:49.974]      __var SW_DP_ABORT       = 0x0;
[18:57:49.974]        // -> [SW_DP_ABORT <= 0x00000000]
[18:57:49.974]      __var DP_CTRL_STAT      = 0x4;
[18:57:49.974]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:57:49.974]      __var DP_SELECT         = 0x8;
[18:57:49.974]        // -> [DP_SELECT <= 0x00000008]
[18:57:49.974]      __var powered_down      = 0;
[18:57:49.974]        // -> [powered_down <= 0x00000000]
[18:57:49.974]      WriteDP(DP_SELECT, 0x00000000);
[18:57:49.975]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:57:49.975]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:57:49.975]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:57:49.975]        // -> [powered_down <= 0x00000001]
[18:57:49.976]    </block>
[18:57:49.976]    <control if="powered_down" while="" timeout="0" info="">
[18:57:49.976]      // if-block "powered_down"
[18:57:49.976]        // =>  TRUE
[18:57:49.976]      <block atomic="false" info="">
[18:57:49.976]        Message(0, "Debug/System power-up request sent");
[18:57:49.978]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:57:49.978]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:57:49.978]      </block>
[18:57:49.978]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:57:49.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:57:49.980]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:57:49.980]        // while-condition  =>  FALSE
[18:57:49.980]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:57:49.980]      </control>
[18:57:49.980]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:57:49.980]        // if-block "(__protocol & 0xFFFF) == 1"
[18:57:49.980]          // =>  FALSE
[18:57:49.980]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:57:49.980]      </control>
[18:57:49.980]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:57:49.980]        // if-block "(__protocol & 0xFFFF) == 2"
[18:57:49.981]          // =>  TRUE
[18:57:49.981]        <block atomic="false" info="">
[18:57:49.982]          Message(0, "executing SWD power up");
[18:57:49.983]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:57:49.984]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:57:49.984]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:57:49.984]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:57:49.985]        </block>
[18:57:49.985]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:57:49.985]      </control>
[18:57:49.985]      // end if-block "powered_down"
[18:57:49.985]    </control>
[18:57:49.985]    <block atomic="false" info="">
[18:57:49.985]      __var DEBUG_PORT_VAL    = 0;
[18:57:49.985]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:57:49.985]      __var ACCESS_POINT_VAL  = 0;
[18:57:49.985]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:57:49.986]      __ap = 1; 
[18:57:49.986]        // -> [__ap <= 0x00000001]
[18:57:49.986]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:57:49.987]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:57:49.987]      __ap = 4;
[18:57:49.987]        // -> [__ap <= 0x00000004]
[18:57:49.987]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:57:49.988]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:57:49.988]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:57:49.988]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:57:49.989]    </block>
[18:57:49.989]    <block atomic="false" info="">
[18:57:49.989]      __var nReset = 0x80;
[18:57:49.990]        // -> [nReset <= 0x00000080]
[18:57:49.990]      __var canReadPins = 0;
[18:57:49.990]        // -> [canReadPins <= 0x00000000]
[18:57:49.990]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:57:49.990]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:57:49.990]        // -> [canReadPins <= 0x00000001]
[18:57:49.990]    </block>
[18:57:49.991]    <control if="" while="1" timeout="200" info="">
[18:57:49.991]      // while "1"  (timeout="200")
[18:57:49.991]      // while-condition  =>  TRUE
[18:57:49.991]      // while "1"  (timeout="200")
[18:57:49.991]      // while-condition  =>  TRUE
[18:57:49.992]      // while "1"  (timeout="200")
[18:57:49.992]      // while-condition  =>  TRUE
[18:57:49.992]      // while "1"  (timeout="200")
[18:57:49.992]      // while-condition  =>  TRUE
[18:57:49.992]      // while "1"  (timeout="200")
[18:57:49.992]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.993]      // while "1"  (timeout="200")
[18:57:49.993]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.995]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.995]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.995]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.995]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.995]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.995]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.995]      // while-condition  =>  TRUE
[18:57:49.995]      // while "1"  (timeout="200")
[18:57:49.996]      // while-condition  =>  TRUE
[18:57:49.996]      // while "1"  (timeout="200")
[18:57:49.996]      // while-condition  =>  TRUE
[18:57:49.996]      // while "1"  (timeout="200")
[18:57:49.996]      // while-condition  =>  TRUE
[18:57:49.996]      // while "1"  (timeout="200")
[18:57:49.996]      // while-condition  =>  TRUE
[18:57:49.996]      // while "1"  (timeout="200")
[18:57:49.996]      // while-condition  =>  TRUE
[18:57:49.996]      // while "1"  (timeout="200")
[18:57:49.996]      // while-condition  =>  TRUE
[18:57:49.996]      // while "1"  (timeout="200")
[18:57:49.997]      // while-condition  =>  TRUE
[18:57:49.997]      // while "1"  (timeout="200")
[18:57:49.997]      // while-condition  =>  TRUE
[18:57:49.997]      // while "1"  (timeout="200")
[18:57:49.997]      // while-condition  =>  TRUE
[18:57:49.997]      // while "1"  (timeout="200")
[18:57:49.997]      // while-condition  =>  TRUE
[18:57:49.997]      // while "1"  (timeout="200")
[18:57:49.997]      // while-condition  =>  TRUE
[18:57:49.997]      // while "1"  (timeout="200")
[18:57:49.998]      // while-condition  =>  TRUE
[18:57:49.998]      // while "1"  (timeout="200")
[18:57:49.998]      // while-condition  =>  TRUE
[18:57:49.998]      // while "1"  (timeout="200")
[18:57:49.998]      // while-condition  =>  TRUE
[18:57:49.998]      // while "1"  (timeout="200")
[18:57:49.998]      // while-condition  =>  TRUE
[18:57:49.998]      // while "1"  (timeout="200")
[18:57:49.998]      // while-condition  =>  TRUE
[18:57:49.998]      // while "1"  (timeout="200")
[18:57:49.998]      // while-condition  =>  TRUE
[18:57:49.998]      // while "1"  (timeout="200")
[18:57:49.998]      // while-condition  =>  TRUE
[18:57:49.998]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:49.999]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:49.999]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:49.999]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:49.999]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:49.999]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:49.999]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:49.999]      // while "1"  (timeout="200")
[18:57:49.999]      // while-condition  =>  TRUE
[18:57:50.000]      // while "1"  (timeout="200")
[18:57:50.001]      // while-condition  =>  TRUE
[18:57:50.001]      // while "1"  (timeout="200")
[18:57:50.001]      // while-condition  =>  TRUE
[18:57:50.001]      // while "1"  (timeout="200")
[18:57:50.001]      // while-condition  =>  TRUE
[18:57:50.001]      // while "1"  (timeout="200")
[18:57:50.002]      // while-condition  =>  TRUE
[18:57:50.002]      // while "1"  (timeout="200")
[18:57:50.002]      // while-condition  =>  TRUE
[18:57:50.002]      // while "1"  (timeout="200")
[18:57:50.002]      // while-condition  =>  TRUE
[18:57:50.002]      // while "1"  (timeout="200")
[18:57:50.002]      // while-condition  =>  TRUE
[18:57:50.002]      // while "1"  (timeout="200")
[18:57:50.002]      // while-condition  =>  TRUE
[18:57:50.002]      // while "1"  (timeout="200")
[18:57:50.002]      // while-condition  =>  TRUE
[18:57:50.002]      // while "1"  (timeout="200")
[18:57:50.002]      // while-condition  =>  TRUE
[18:57:50.003]      // while "1"  (timeout="200")
[18:57:50.003]      // while-condition  =>  TRUE
[18:57:50.003]      // while "1"  (timeout="200")
[18:57:50.003]      // while-condition  =>  TRUE
[18:57:50.003]      // while "1"  (timeout="200")
[18:57:50.003]      // while-condition  =>  TRUE
[18:57:50.003]      // while "1"  (timeout="200")
[18:57:50.003]      // while-condition  =>  TRUE
[18:57:50.003]      // while "1"  (timeout="200")
[18:57:50.003]      // while-condition  =>  TRUE
[18:57:50.003]      // while "1"  (timeout="200")
[18:57:50.003]      // while-condition  =>  TRUE
[18:57:50.004]      // while "1"  (timeout="200")
[18:57:50.004]      // while-condition  =>  TRUE
[18:57:50.004]      // while "1"  (timeout="200")
[18:57:50.004]      // while-condition  =>  TRUE
[18:57:50.004]      // while "1"  (timeout="200")
[18:57:50.004]      // while-condition  =>  TRUE
[18:57:50.004]      // while "1"  (timeout="200")
[18:57:50.004]      // while-condition  =>  TRUE
[18:57:50.004]      // while "1"  (timeout="200")
[18:57:50.004]      // while-condition  =>  TRUE
[18:57:50.004]      // while "1"  (timeout="200")
[18:57:50.004]      // while-condition  =>  TRUE
[18:57:50.005]      // while "1"  (timeout="200")
[18:57:50.005]      // while  =>  TIMEOUT
[18:57:50.005]      // end while "1"
[18:57:50.005]    </control>
[18:57:50.005]    <control if="canReadPins" while="" timeout="0" info="">
[18:57:50.005]      // if-block "canReadPins"
[18:57:50.005]        // =>  TRUE
[18:57:50.005]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:57:50.005]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:57:50.006]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:57:50.006]        // while-condition  =>  FALSE
[18:57:50.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:57:50.006]      </control>
[18:57:50.006]      // end if-block "canReadPins"
[18:57:50.006]    </control>
[18:57:50.006]    <control if="!canReadPins" while="" timeout="0" info="">
[18:57:50.006]      // if-block "!canReadPins"
[18:57:50.007]        // =>  FALSE
[18:57:50.007]      // skip if-block "!canReadPins"
[18:57:50.007]    </control>
[18:57:50.007]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:57:50.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:57:50.007]        // =>  TRUE
[18:57:50.007]      <block atomic="false" info="">
[18:57:50.007]        WriteAP(0x00, 0x190008);
[18:57:50.008]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:57:50.008]        WriteAP(0xF0, 0x01);
[18:57:50.009]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:57:50.009]      </block>
[18:57:50.009]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:57:50.009]    </control>
[18:57:50.009]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:57:50.009]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:57:50.010]        // =>  FALSE
[18:57:50.010]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:57:50.010]    </control>
[18:57:50.010]    <block atomic="false" info="">
[18:57:50.010]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:57:50.012]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:57:50.012]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:57:50.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:57:50.014]      __ap = 0; //lets make sure we reset the access point selection
[18:57:50.014]        // -> [__ap <= 0x00000000]
[18:57:50.014]    </block>
[18:57:50.014]  </sequence>
[18:57:50.014]  
[18:57:50.019]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:57:50.019]  
[18:57:50.019]  <debugvars>
[18:57:50.019]    // Pre-defined
[18:57:50.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:57:50.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:57:50.020]    __dp=0x00000000
[18:57:50.020]    __ap=0x00000000
[18:57:50.020]    __traceout=0x00000000      (Trace Disabled)
[18:57:50.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:57:50.020]    __FlashAddr=0x00000000
[18:57:50.020]    __FlashLen=0x00000000
[18:57:50.020]    __FlashArg=0x00000000
[18:57:50.021]    __FlashOp=0x00000000
[18:57:50.022]    __Result=0x00000000
[18:57:50.022]  </debugvars>
[18:57:50.022]  
[18:57:50.022]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:57:50.022]    <block atomic="false" info="">
[18:57:50.022]      __var deviceID = 0;
[18:57:50.022]        // -> [deviceID <= 0x00000000]
[18:57:50.022]      __var version = 0;
[18:57:50.022]        // -> [version <= 0x00000000]
[18:57:50.022]      __var partNum = 0;
[18:57:50.022]        // -> [partNum <= 0x00000000]
[18:57:50.023]      __var manuf = 0;
[18:57:50.023]        // -> [manuf <= 0x00000000]
[18:57:50.023]      __var isMSPM0G1X0X_G3X0X = 0;
[18:57:50.023]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:57:50.023]      __var isProduction = 0;
[18:57:50.023]        // -> [isProduction <= 0x00000000]
[18:57:50.024]      __var continueId = 0;
[18:57:50.024]        // -> [continueId <= 0x00000000]
[18:57:50.024]      deviceID =   Read32(0x41C40004);
[18:57:50.025]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:57:50.025]        // -> [deviceID <= 0x2BB8802F]
[18:57:50.025]      version = deviceID >> 28;
[18:57:50.025]        // -> [version <= 0x00000002]
[18:57:50.025]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:57:50.026]        // -> [partNum <= 0x0000BB88]
[18:57:50.026]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:57:50.026]        // -> [manuf <= 0x00000017]
[18:57:50.026]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:57:50.026]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:57:50.026]      isProduction = (version > 0);
[18:57:50.026]        // -> [isProduction <= 0x00000001]
[18:57:50.026]    </block>
[18:57:50.026]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:57:50.026]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:57:50.026]        // =>  FALSE
[18:57:50.027]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:57:50.027]    </control>
[18:57:50.027]    <control if="continueId == 4" while="" timeout="0" info="">
[18:57:50.027]      // if-block "continueId == 4"
[18:57:50.027]        // =>  FALSE
[18:57:50.027]      // skip if-block "continueId == 4"
[18:57:50.027]    </control>
[18:57:50.027]    <control if="!isProduction" while="" timeout="0" info="">
[18:57:50.027]      // if-block "!isProduction"
[18:57:50.027]        // =>  FALSE
[18:57:50.027]      // skip if-block "!isProduction"
[18:57:50.027]    </control>
[18:57:50.028]  </sequence>
[18:57:50.028]  
[18:58:10.968]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:58:10.968]  
[18:58:10.976]  <debugvars>
[18:58:10.976]    // Pre-defined
[18:58:10.976]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:58:10.976]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:58:10.976]    __dp=0x00000000
[18:58:10.976]    __ap=0x00000000
[18:58:10.977]    __traceout=0x00000000      (Trace Disabled)
[18:58:10.977]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:58:10.977]    __FlashAddr=0x00000000
[18:58:10.977]    __FlashLen=0x00000000
[18:58:10.977]    __FlashArg=0x00000000
[18:58:10.977]    __FlashOp=0x00000000
[18:58:10.977]    __Result=0x00000000
[18:58:10.977]  </debugvars>
[18:58:10.977]  
[18:58:10.977]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:58:10.977]    <block atomic="false" info="">
[18:58:10.977]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:58:10.978]        // -> [isSWJ <= 0x00000001]
[18:58:10.978]      __var hasDormant = __protocol & 0x00020000;
[18:58:10.978]        // -> [hasDormant <= 0x00000000]
[18:58:10.978]      __var protType   = __protocol & 0x0000FFFF;
[18:58:10.978]        // -> [protType <= 0x00000002]
[18:58:10.978]    </block>
[18:58:10.978]    <control if="protType == 1" while="" timeout="0" info="">
[18:58:10.978]      // if-block "protType == 1"
[18:58:10.978]        // =>  FALSE
[18:58:10.978]      // skip if-block "protType == 1"
[18:58:10.978]    </control>
[18:58:10.978]    <control if="protType == 2" while="" timeout="0" info="">
[18:58:10.979]      // if-block "protType == 2"
[18:58:10.979]        // =>  TRUE
[18:58:10.979]      <control if="isSWJ" while="" timeout="0" info="">
[18:58:10.979]        // if-block "isSWJ"
[18:58:10.979]          // =>  TRUE
[18:58:10.979]        <control if="hasDormant" while="" timeout="0" info="">
[18:58:10.979]          // if-block "hasDormant"
[18:58:10.979]            // =>  FALSE
[18:58:10.980]          // skip if-block "hasDormant"
[18:58:10.980]        </control>
[18:58:10.980]        <control if="!hasDormant" while="" timeout="0" info="">
[18:58:10.980]          // if-block "!hasDormant"
[18:58:10.980]            // =>  TRUE
[18:58:10.980]          <block atomic="false" info="">
[18:58:10.980]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:58:10.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:58:10.981]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:58:10.981]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:58:10.981]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:58:10.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:58:10.981]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:58:10.982]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:58:10.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:58:10.982]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:58:10.982]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:58:10.982]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:58:10.982]          </block>
[18:58:10.982]          // end if-block "!hasDormant"
[18:58:10.984]        </control>
[18:58:10.984]        // end if-block "isSWJ"
[18:58:10.984]      </control>
[18:58:10.984]      <control if="!isSWJ" while="" timeout="0" info="">
[18:58:10.984]        // if-block "!isSWJ"
[18:58:10.984]          // =>  FALSE
[18:58:10.984]        // skip if-block "!isSWJ"
[18:58:10.984]      </control>
[18:58:10.984]      <block atomic="false" info="">
[18:58:10.984]        ReadDP(0x0);
[18:58:10.985]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:58:10.985]      </block>
[18:58:10.985]      // end if-block "protType == 2"
[18:58:10.985]    </control>
[18:58:10.985]  </sequence>
[18:58:10.985]  
[18:58:10.985]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:58:10.985]  
[18:58:10.985]  <debugvars>
[18:58:10.985]    // Pre-defined
[18:58:10.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:58:10.985]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:58:10.985]    __dp=0x00000000
[18:58:10.985]    __ap=0x00000000
[18:58:10.985]    __traceout=0x00000000      (Trace Disabled)
[18:58:10.987]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:58:10.987]    __FlashAddr=0x00000000
[18:58:10.987]    __FlashLen=0x00000000
[18:58:10.987]    __FlashArg=0x00000000
[18:58:10.987]    __FlashOp=0x00000000
[18:58:10.987]    __Result=0x00000000
[18:58:10.987]  </debugvars>
[18:58:10.987]  
[18:58:10.987]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:58:10.987]    <block atomic="false" info="">
[18:58:10.987]      __var SW_DP_ABORT       = 0x0;
[18:58:10.987]        // -> [SW_DP_ABORT <= 0x00000000]
[18:58:10.987]      __var DP_CTRL_STAT      = 0x4;
[18:58:10.987]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:58:10.988]      __var DP_SELECT         = 0x8;
[18:58:10.988]        // -> [DP_SELECT <= 0x00000008]
[18:58:10.988]      __var powered_down      = 0;
[18:58:10.988]        // -> [powered_down <= 0x00000000]
[18:58:10.988]      WriteDP(DP_SELECT, 0x00000000);
[18:58:10.989]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:58:10.989]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:58:10.989]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:58:10.989]        // -> [powered_down <= 0x00000001]
[18:58:10.989]    </block>
[18:58:10.989]    <control if="powered_down" while="" timeout="0" info="">
[18:58:10.989]      // if-block "powered_down"
[18:58:10.989]        // =>  TRUE
[18:58:10.989]      <block atomic="false" info="">
[18:58:10.989]        Message(0, "Debug/System power-up request sent");
[18:58:10.991]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:58:10.993]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:58:10.993]      </block>
[18:58:10.993]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:58:10.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:58:10.993]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:58:10.993]        // while-condition  =>  FALSE
[18:58:10.993]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:58:10.993]      </control>
[18:58:10.994]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:58:10.994]        // if-block "(__protocol & 0xFFFF) == 1"
[18:58:10.994]          // =>  FALSE
[18:58:10.994]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:58:10.994]      </control>
[18:58:10.995]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:58:10.995]        // if-block "(__protocol & 0xFFFF) == 2"
[18:58:10.995]          // =>  TRUE
[18:58:10.995]        <block atomic="false" info="">
[18:58:10.995]          Message(0, "executing SWD power up");
[18:58:10.996]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:58:10.996]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:58:10.996]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:58:10.997]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:58:10.997]        </block>
[18:58:10.997]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:58:10.997]      </control>
[18:58:10.997]      // end if-block "powered_down"
[18:58:10.997]    </control>
[18:58:10.998]    <block atomic="false" info="">
[18:58:10.998]      __var DEBUG_PORT_VAL    = 0;
[18:58:10.998]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:58:10.998]      __var ACCESS_POINT_VAL  = 0;
[18:58:10.998]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:58:10.998]      __ap = 1; 
[18:58:10.998]        // -> [__ap <= 0x00000001]
[18:58:10.998]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:58:10.999]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:58:10.999]      __ap = 4;
[18:58:10.999]        // -> [__ap <= 0x00000004]
[18:58:10.999]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:58:11.001]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:58:11.001]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:58:11.002]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:58:11.004]    </block>
[18:58:11.004]    <block atomic="false" info="">
[18:58:11.004]      __var nReset = 0x80;
[18:58:11.004]        // -> [nReset <= 0x00000080]
[18:58:11.004]      __var canReadPins = 0;
[18:58:11.004]        // -> [canReadPins <= 0x00000000]
[18:58:11.004]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:58:11.005]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:58:11.005]        // -> [canReadPins <= 0x00000001]
[18:58:11.005]    </block>
[18:58:11.005]    <control if="" while="1" timeout="200" info="">
[18:58:11.005]      // while "1"  (timeout="200")
[18:58:11.005]      // while-condition  =>  TRUE
[18:58:11.005]      // while "1"  (timeout="200")
[18:58:11.005]      // while-condition  =>  TRUE
[18:58:11.005]      // while "1"  (timeout="200")
[18:58:11.005]      // while-condition  =>  TRUE
[18:58:11.005]      // while "1"  (timeout="200")
[18:58:11.006]      // while-condition  =>  TRUE
[18:58:11.006]      // while "1"  (timeout="200")
[18:58:11.006]      // while-condition  =>  TRUE
[18:58:11.006]      // while "1"  (timeout="200")
[18:58:11.006]      // while-condition  =>  TRUE
[18:58:11.006]      // while "1"  (timeout="200")
[18:58:11.006]      // while-condition  =>  TRUE
[18:58:11.006]      // while "1"  (timeout="200")
[18:58:11.006]      // while-condition  =>  TRUE
[18:58:11.006]      // while "1"  (timeout="200")
[18:58:11.006]      // while-condition  =>  TRUE
[18:58:11.006]      // while "1"  (timeout="200")
[18:58:11.007]      // while-condition  =>  TRUE
[18:58:11.007]      // while "1"  (timeout="200")
[18:58:11.007]      // while-condition  =>  TRUE
[18:58:11.007]      // while "1"  (timeout="200")
[18:58:11.007]      // while-condition  =>  TRUE
[18:58:11.008]      // while "1"  (timeout="200")
[18:58:11.008]      // while-condition  =>  TRUE
[18:58:11.008]      // while "1"  (timeout="200")
[18:58:11.008]      // while-condition  =>  TRUE
[18:58:11.008]      // while "1"  (timeout="200")
[18:58:11.008]      // while-condition  =>  TRUE
[18:58:11.008]      // while "1"  (timeout="200")
[18:58:11.008]      // while-condition  =>  TRUE
[18:58:11.008]      // while "1"  (timeout="200")
[18:58:11.008]      // while-condition  =>  TRUE
[18:58:11.008]      // while "1"  (timeout="200")
[18:58:11.008]      // while-condition  =>  TRUE
[18:58:11.009]      // while "1"  (timeout="200")
[18:58:11.009]      // while-condition  =>  TRUE
[18:58:11.009]      // while "1"  (timeout="200")
[18:58:11.009]      // while-condition  =>  TRUE
[18:58:11.009]      // while "1"  (timeout="200")
[18:58:11.009]      // while-condition  =>  TRUE
[18:58:11.009]      // while "1"  (timeout="200")
[18:58:11.009]      // while-condition  =>  TRUE
[18:58:11.009]      // while "1"  (timeout="200")
[18:58:11.010]      // while-condition  =>  TRUE
[18:58:11.010]      // while "1"  (timeout="200")
[18:58:11.010]      // while-condition  =>  TRUE
[18:58:11.010]      // while "1"  (timeout="200")
[18:58:11.010]      // while-condition  =>  TRUE
[18:58:11.010]      // while "1"  (timeout="200")
[18:58:11.010]      // while-condition  =>  TRUE
[18:58:11.011]      // while "1"  (timeout="200")
[18:58:11.012]      // while-condition  =>  TRUE
[18:58:11.012]      // while "1"  (timeout="200")
[18:58:11.012]      // while-condition  =>  TRUE
[18:58:11.012]      // while "1"  (timeout="200")
[18:58:11.012]      // while-condition  =>  TRUE
[18:58:11.012]      // while "1"  (timeout="200")
[18:58:11.012]      // while-condition  =>  TRUE
[18:58:11.012]      // while "1"  (timeout="200")
[18:58:11.012]      // while-condition  =>  TRUE
[18:58:11.012]      // while "1"  (timeout="200")
[18:58:11.012]      // while-condition  =>  TRUE
[18:58:11.012]      // while "1"  (timeout="200")
[18:58:11.012]      // while-condition  =>  TRUE
[18:58:11.013]      // while "1"  (timeout="200")
[18:58:11.013]      // while-condition  =>  TRUE
[18:58:11.013]      // while "1"  (timeout="200")
[18:58:11.013]      // while-condition  =>  TRUE
[18:58:11.013]      // while "1"  (timeout="200")
[18:58:11.013]      // while-condition  =>  TRUE
[18:58:11.013]      // while "1"  (timeout="200")
[18:58:11.013]      // while-condition  =>  TRUE
[18:58:11.013]      // while "1"  (timeout="200")
[18:58:11.013]      // while-condition  =>  TRUE
[18:58:11.013]      // while "1"  (timeout="200")
[18:58:11.014]      // while-condition  =>  TRUE
[18:58:11.014]      // while "1"  (timeout="200")
[18:58:11.014]      // while-condition  =>  TRUE
[18:58:11.014]      // while "1"  (timeout="200")
[18:58:11.014]      // while-condition  =>  TRUE
[18:58:11.014]      // while "1"  (timeout="200")
[18:58:11.015]      // while-condition  =>  TRUE
[18:58:11.015]      // while "1"  (timeout="200")
[18:58:11.015]      // while-condition  =>  TRUE
[18:58:11.015]      // while "1"  (timeout="200")
[18:58:11.015]      // while-condition  =>  TRUE
[18:58:11.015]      // while "1"  (timeout="200")
[18:58:11.015]      // while-condition  =>  TRUE
[18:58:11.015]      // while "1"  (timeout="200")
[18:58:11.015]      // while-condition  =>  TRUE
[18:58:11.015]      // while "1"  (timeout="200")
[18:58:11.015]      // while-condition  =>  TRUE
[18:58:11.015]      // while "1"  (timeout="200")
[18:58:11.015]      // while-condition  =>  TRUE
[18:58:11.015]      // while "1"  (timeout="200")
[18:58:11.016]      // while-condition  =>  TRUE
[18:58:11.016]      // while "1"  (timeout="200")
[18:58:11.016]      // while-condition  =>  TRUE
[18:58:11.016]      // while "1"  (timeout="200")
[18:58:11.016]      // while-condition  =>  TRUE
[18:58:11.016]      // while "1"  (timeout="200")
[18:58:11.016]      // while-condition  =>  TRUE
[18:58:11.016]      // while "1"  (timeout="200")
[18:58:11.017]      // while-condition  =>  TRUE
[18:58:11.017]      // while "1"  (timeout="200")
[18:58:11.017]      // while-condition  =>  TRUE
[18:58:11.017]      // while "1"  (timeout="200")
[18:58:11.017]      // while-condition  =>  TRUE
[18:58:11.017]      // while "1"  (timeout="200")
[18:58:11.017]      // while-condition  =>  TRUE
[18:58:11.017]      // while "1"  (timeout="200")
[18:58:11.017]      // while-condition  =>  TRUE
[18:58:11.017]      // while "1"  (timeout="200")
[18:58:11.017]      // while-condition  =>  TRUE
[18:58:11.017]      // while "1"  (timeout="200")
[18:58:11.019]      // while-condition  =>  TRUE
[18:58:11.019]      // while "1"  (timeout="200")
[18:58:11.019]      // while-condition  =>  TRUE
[18:58:11.019]      // while "1"  (timeout="200")
[18:58:11.019]      // while-condition  =>  TRUE
[18:58:11.019]      // while "1"  (timeout="200")
[18:58:11.019]      // while-condition  =>  TRUE
[18:58:11.019]      // while "1"  (timeout="200")
[18:58:11.019]      // while-condition  =>  TRUE
[18:58:11.019]      // while "1"  (timeout="200")
[18:58:11.019]      // while-condition  =>  TRUE
[18:58:11.019]      // while "1"  (timeout="200")
[18:58:11.020]      // while-condition  =>  TRUE
[18:58:11.020]      // while "1"  (timeout="200")
[18:58:11.020]      // while  =>  TIMEOUT
[18:58:11.020]      // end while "1"
[18:58:11.020]    </control>
[18:58:11.020]    <control if="canReadPins" while="" timeout="0" info="">
[18:58:11.020]      // if-block "canReadPins"
[18:58:11.020]        // =>  TRUE
[18:58:11.020]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:58:11.020]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:58:11.021]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:58:11.021]        // while-condition  =>  FALSE
[18:58:11.021]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:58:11.021]      </control>
[18:58:11.021]      // end if-block "canReadPins"
[18:58:11.021]    </control>
[18:58:11.022]    <control if="!canReadPins" while="" timeout="0" info="">
[18:58:11.022]      // if-block "!canReadPins"
[18:58:11.022]        // =>  FALSE
[18:58:11.022]      // skip if-block "!canReadPins"
[18:58:11.022]    </control>
[18:58:11.022]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:58:11.022]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:58:11.022]        // =>  TRUE
[18:58:11.022]      <block atomic="false" info="">
[18:58:11.022]        WriteAP(0x00, 0x190008);
[18:58:11.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:58:11.023]        WriteAP(0xF0, 0x01);
[18:58:11.024]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:58:11.024]      </block>
[18:58:11.024]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:58:11.025]    </control>
[18:58:11.025]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:58:11.025]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:58:11.025]        // =>  FALSE
[18:58:11.025]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:58:11.025]    </control>
[18:58:11.025]    <block atomic="false" info="">
[18:58:11.025]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:58:11.026]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:58:11.026]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:58:11.026]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:58:11.029]      __ap = 0; //lets make sure we reset the access point selection
[18:58:11.029]        // -> [__ap <= 0x00000000]
[18:58:11.029]    </block>
[18:58:11.029]  </sequence>
[18:58:11.029]  
[18:58:11.035]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:58:11.035]  
[18:58:11.035]  <debugvars>
[18:58:11.035]    // Pre-defined
[18:58:11.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:58:11.036]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:58:11.036]    __dp=0x00000000
[18:58:11.036]    __ap=0x00000000
[18:58:11.036]    __traceout=0x00000000      (Trace Disabled)
[18:58:11.036]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:58:11.036]    __FlashAddr=0x00000000
[18:58:11.036]    __FlashLen=0x00000000
[18:58:11.036]    __FlashArg=0x00000000
[18:58:11.036]    __FlashOp=0x00000000
[18:58:11.036]    __Result=0x00000000
[18:58:11.036]  </debugvars>
[18:58:11.036]  
[18:58:11.037]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:58:11.037]    <block atomic="false" info="">
[18:58:11.037]      __var deviceID = 0;
[18:58:11.037]        // -> [deviceID <= 0x00000000]
[18:58:11.037]      __var version = 0;
[18:58:11.037]        // -> [version <= 0x00000000]
[18:58:11.037]      __var partNum = 0;
[18:58:11.037]        // -> [partNum <= 0x00000000]
[18:58:11.037]      __var manuf = 0;
[18:58:11.037]        // -> [manuf <= 0x00000000]
[18:58:11.037]      __var isMSPM0G1X0X_G3X0X = 0;
[18:58:11.037]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:58:11.037]      __var isProduction = 0;
[18:58:11.037]        // -> [isProduction <= 0x00000000]
[18:58:11.037]      __var continueId = 0;
[18:58:11.037]        // -> [continueId <= 0x00000000]
[18:58:11.039]      deviceID =   Read32(0x41C40004);
[18:58:11.040]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:58:11.040]        // -> [deviceID <= 0x2BB8802F]
[18:58:11.040]      version = deviceID >> 28;
[18:58:11.040]        // -> [version <= 0x00000002]
[18:58:11.041]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:58:11.041]        // -> [partNum <= 0x0000BB88]
[18:58:11.041]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:58:11.041]        // -> [manuf <= 0x00000017]
[18:58:11.041]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:58:11.041]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:58:11.041]      isProduction = (version > 0);
[18:58:11.041]        // -> [isProduction <= 0x00000001]
[18:58:11.041]    </block>
[18:58:11.041]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:58:11.041]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:58:11.041]        // =>  FALSE
[18:58:11.042]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:58:11.042]    </control>
[18:58:11.042]    <control if="continueId == 4" while="" timeout="0" info="">
[18:58:11.042]      // if-block "continueId == 4"
[18:58:11.042]        // =>  FALSE
[18:58:11.042]      // skip if-block "continueId == 4"
[18:58:11.042]    </control>
[18:58:11.042]    <control if="!isProduction" while="" timeout="0" info="">
[18:58:11.042]      // if-block "!isProduction"
[18:58:11.042]        // =>  FALSE
[18:58:11.042]      // skip if-block "!isProduction"
[18:58:11.042]    </control>
[18:58:11.042]  </sequence>
[18:58:11.043]  
[18:59:30.988]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:59:30.988]  
[18:59:30.996]  <debugvars>
[18:59:30.996]    // Pre-defined
[18:59:30.996]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:59:30.996]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:59:30.996]    __dp=0x00000000
[18:59:30.996]    __ap=0x00000000
[18:59:30.996]    __traceout=0x00000000      (Trace Disabled)
[18:59:30.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:59:30.996]    __FlashAddr=0x00000000
[18:59:30.996]    __FlashLen=0x00000000
[18:59:30.996]    __FlashArg=0x00000000
[18:59:30.996]    __FlashOp=0x00000000
[18:59:30.996]    __Result=0x00000000
[18:59:30.996]  </debugvars>
[18:59:30.996]  
[18:59:30.998]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:59:30.998]    <block atomic="false" info="">
[18:59:30.998]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:59:30.998]        // -> [isSWJ <= 0x00000001]
[18:59:30.998]      __var hasDormant = __protocol & 0x00020000;
[18:59:30.998]        // -> [hasDormant <= 0x00000000]
[18:59:30.998]      __var protType   = __protocol & 0x0000FFFF;
[18:59:30.998]        // -> [protType <= 0x00000002]
[18:59:30.998]    </block>
[18:59:30.998]    <control if="protType == 1" while="" timeout="0" info="">
[18:59:30.998]      // if-block "protType == 1"
[18:59:30.998]        // =>  FALSE
[18:59:30.998]      // skip if-block "protType == 1"
[18:59:30.998]    </control>
[18:59:30.999]    <control if="protType == 2" while="" timeout="0" info="">
[18:59:30.999]      // if-block "protType == 2"
[18:59:30.999]        // =>  TRUE
[18:59:30.999]      <control if="isSWJ" while="" timeout="0" info="">
[18:59:30.999]        // if-block "isSWJ"
[18:59:30.999]          // =>  TRUE
[18:59:30.999]        <control if="hasDormant" while="" timeout="0" info="">
[18:59:30.999]          // if-block "hasDormant"
[18:59:30.999]            // =>  FALSE
[18:59:30.999]          // skip if-block "hasDormant"
[18:59:30.999]        </control>
[18:59:30.999]        <control if="!hasDormant" while="" timeout="0" info="">
[18:59:30.999]          // if-block "!hasDormant"
[18:59:31.000]            // =>  TRUE
[18:59:31.000]          <block atomic="false" info="">
[18:59:31.000]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:59:31.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:59:31.000]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:59:31.000]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:59:31.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:59:31.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:59:31.002]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:59:31.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:59:31.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:59:31.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:59:31.003]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:59:31.003]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:59:31.003]          </block>
[18:59:31.003]          // end if-block "!hasDormant"
[18:59:31.004]        </control>
[18:59:31.004]        // end if-block "isSWJ"
[18:59:31.004]      </control>
[18:59:31.005]      <control if="!isSWJ" while="" timeout="0" info="">
[18:59:31.005]        // if-block "!isSWJ"
[18:59:31.005]          // =>  FALSE
[18:59:31.005]        // skip if-block "!isSWJ"
[18:59:31.005]      </control>
[18:59:31.005]      <block atomic="false" info="">
[18:59:31.005]        ReadDP(0x0);
[18:59:31.006]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:59:31.006]      </block>
[18:59:31.006]      // end if-block "protType == 2"
[18:59:31.006]    </control>
[18:59:31.006]  </sequence>
[18:59:31.006]  
[18:59:31.006]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:59:31.006]  
[18:59:31.006]  <debugvars>
[18:59:31.007]    // Pre-defined
[18:59:31.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:59:31.007]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:59:31.007]    __dp=0x00000000
[18:59:31.007]    __ap=0x00000000
[18:59:31.007]    __traceout=0x00000000      (Trace Disabled)
[18:59:31.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:59:31.007]    __FlashAddr=0x00000000
[18:59:31.007]    __FlashLen=0x00000000
[18:59:31.007]    __FlashArg=0x00000000
[18:59:31.007]    __FlashOp=0x00000000
[18:59:31.007]    __Result=0x00000000
[18:59:31.007]  </debugvars>
[18:59:31.007]  
[18:59:31.007]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:59:31.007]    <block atomic="false" info="">
[18:59:31.007]      __var SW_DP_ABORT       = 0x0;
[18:59:31.009]        // -> [SW_DP_ABORT <= 0x00000000]
[18:59:31.009]      __var DP_CTRL_STAT      = 0x4;
[18:59:31.009]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:59:31.009]      __var DP_SELECT         = 0x8;
[18:59:31.009]        // -> [DP_SELECT <= 0x00000008]
[18:59:31.009]      __var powered_down      = 0;
[18:59:31.009]        // -> [powered_down <= 0x00000000]
[18:59:31.009]      WriteDP(DP_SELECT, 0x00000000);
[18:59:31.009]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:59:31.009]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:59:31.009]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:59:31.009]        // -> [powered_down <= 0x00000001]
[18:59:31.009]    </block>
[18:59:31.009]    <control if="powered_down" while="" timeout="0" info="">
[18:59:31.009]      // if-block "powered_down"
[18:59:31.011]        // =>  TRUE
[18:59:31.011]      <block atomic="false" info="">
[18:59:31.011]        Message(0, "Debug/System power-up request sent");
[18:59:31.011]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:59:31.011]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:59:31.011]      </block>
[18:59:31.012]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:59:31.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:59:31.012]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:59:31.012]        // while-condition  =>  FALSE
[18:59:31.012]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:59:31.012]      </control>
[18:59:31.012]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:59:31.012]        // if-block "(__protocol & 0xFFFF) == 1"
[18:59:31.013]          // =>  FALSE
[18:59:31.013]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:59:31.013]      </control>
[18:59:31.013]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:59:31.013]        // if-block "(__protocol & 0xFFFF) == 2"
[18:59:31.013]          // =>  TRUE
[18:59:31.013]        <block atomic="false" info="">
[18:59:31.013]          Message(0, "executing SWD power up");
[18:59:31.015]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:59:31.015]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:59:31.016]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:59:31.016]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:59:31.016]        </block>
[18:59:31.017]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:59:31.017]      </control>
[18:59:31.017]      // end if-block "powered_down"
[18:59:31.017]    </control>
[18:59:31.017]    <block atomic="false" info="">
[18:59:31.017]      __var DEBUG_PORT_VAL    = 0;
[18:59:31.017]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:59:31.017]      __var ACCESS_POINT_VAL  = 0;
[18:59:31.017]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:59:31.017]      __ap = 1; 
[18:59:31.018]        // -> [__ap <= 0x00000001]
[18:59:31.018]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:59:31.019]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:59:31.019]      __ap = 4;
[18:59:31.019]        // -> [__ap <= 0x00000004]
[18:59:31.019]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:59:31.020]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:59:31.020]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:59:31.020]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:59:31.021]    </block>
[18:59:31.021]    <block atomic="false" info="">
[18:59:31.022]      __var nReset = 0x80;
[18:59:31.022]        // -> [nReset <= 0x00000080]
[18:59:31.022]      __var canReadPins = 0;
[18:59:31.022]        // -> [canReadPins <= 0x00000000]
[18:59:31.022]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:59:31.022]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:59:31.022]        // -> [canReadPins <= 0x00000001]
[18:59:31.022]    </block>
[18:59:31.023]    <control if="" while="1" timeout="200" info="">
[18:59:31.023]      // while "1"  (timeout="200")
[18:59:31.023]      // while-condition  =>  TRUE
[18:59:31.023]      // while "1"  (timeout="200")
[18:59:31.023]      // while-condition  =>  TRUE
[18:59:31.023]      // while "1"  (timeout="200")
[18:59:31.023]      // while-condition  =>  TRUE
[18:59:31.023]      // while "1"  (timeout="200")
[18:59:31.023]      // while-condition  =>  TRUE
[18:59:31.023]      // while "1"  (timeout="200")
[18:59:31.023]      // while-condition  =>  TRUE
[18:59:31.024]      // while "1"  (timeout="200")
[18:59:31.024]      // while-condition  =>  TRUE
[18:59:31.024]      // while "1"  (timeout="200")
[18:59:31.024]      // while-condition  =>  TRUE
[18:59:31.024]      // while "1"  (timeout="200")
[18:59:31.024]      // while-condition  =>  TRUE
[18:59:31.024]      // while "1"  (timeout="200")
[18:59:31.024]      // while-condition  =>  TRUE
[18:59:31.024]      // while "1"  (timeout="200")
[18:59:31.024]      // while-condition  =>  TRUE
[18:59:31.024]      // while "1"  (timeout="200")
[18:59:31.024]      // while-condition  =>  TRUE
[18:59:31.024]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.025]      // while "1"  (timeout="200")
[18:59:31.025]      // while-condition  =>  TRUE
[18:59:31.027]      // while "1"  (timeout="200")
[18:59:31.027]      // while-condition  =>  TRUE
[18:59:31.027]      // while "1"  (timeout="200")
[18:59:31.027]      // while-condition  =>  TRUE
[18:59:31.027]      // while "1"  (timeout="200")
[18:59:31.027]      // while-condition  =>  TRUE
[18:59:31.027]      // while "1"  (timeout="200")
[18:59:31.027]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.028]      // while "1"  (timeout="200")
[18:59:31.028]      // while-condition  =>  TRUE
[18:59:31.029]      // while "1"  (timeout="200")
[18:59:31.029]      // while-condition  =>  TRUE
[18:59:31.029]      // while "1"  (timeout="200")
[18:59:31.029]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.030]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.030]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.030]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.030]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.030]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.030]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.030]      // while-condition  =>  TRUE
[18:59:31.030]      // while "1"  (timeout="200")
[18:59:31.031]      // while-condition  =>  TRUE
[18:59:31.031]      // while "1"  (timeout="200")
[18:59:31.031]      // while-condition  =>  TRUE
[18:59:31.031]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.032]      // while "1"  (timeout="200")
[18:59:31.032]      // while-condition  =>  TRUE
[18:59:31.033]      // while "1"  (timeout="200")
[18:59:31.033]      // while-condition  =>  TRUE
[18:59:31.033]      // while "1"  (timeout="200")
[18:59:31.033]      // while-condition  =>  TRUE
[18:59:31.033]      // while "1"  (timeout="200")
[18:59:31.033]      // while-condition  =>  TRUE
[18:59:31.033]      // while "1"  (timeout="200")
[18:59:31.033]      // while-condition  =>  TRUE
[18:59:31.033]      // while "1"  (timeout="200")
[18:59:31.033]      // while-condition  =>  TRUE
[18:59:31.033]      // while "1"  (timeout="200")
[18:59:31.033]      // while-condition  =>  TRUE
[18:59:31.034]      // while "1"  (timeout="200")
[18:59:31.034]      // while-condition  =>  TRUE
[18:59:31.034]      // while "1"  (timeout="200")
[18:59:31.034]      // while-condition  =>  TRUE
[18:59:31.034]      // while "1"  (timeout="200")
[18:59:31.034]      // while-condition  =>  TRUE
[18:59:31.035]      // while "1"  (timeout="200")
[18:59:31.035]      // while  =>  TIMEOUT
[18:59:31.035]      // end while "1"
[18:59:31.035]    </control>
[18:59:31.035]    <control if="canReadPins" while="" timeout="0" info="">
[18:59:31.035]      // if-block "canReadPins"
[18:59:31.035]        // =>  TRUE
[18:59:31.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:59:31.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:59:31.037]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:59:31.037]        // while-condition  =>  FALSE
[18:59:31.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:59:31.037]      </control>
[18:59:31.037]      // end if-block "canReadPins"
[18:59:31.037]    </control>
[18:59:31.037]    <control if="!canReadPins" while="" timeout="0" info="">
[18:59:31.037]      // if-block "!canReadPins"
[18:59:31.037]        // =>  FALSE
[18:59:31.037]      // skip if-block "!canReadPins"
[18:59:31.037]    </control>
[18:59:31.037]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:59:31.038]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:59:31.038]        // =>  TRUE
[18:59:31.038]      <block atomic="false" info="">
[18:59:31.038]        WriteAP(0x00, 0x190008);
[18:59:31.038]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:59:31.038]        WriteAP(0xF0, 0x01);
[18:59:31.040]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:59:31.040]      </block>
[18:59:31.040]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:59:31.040]    </control>
[18:59:31.040]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:59:31.040]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:59:31.040]        // =>  FALSE
[18:59:31.040]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:59:31.040]    </control>
[18:59:31.041]    <block atomic="false" info="">
[18:59:31.041]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:59:31.042]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:59:31.042]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:59:31.042]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:59:31.042]      __ap = 0; //lets make sure we reset the access point selection
[18:59:31.042]        // -> [__ap <= 0x00000000]
[18:59:31.042]    </block>
[18:59:31.042]  </sequence>
[18:59:31.042]  
[18:59:31.048]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:59:31.048]  
[18:59:31.048]  <debugvars>
[18:59:31.048]    // Pre-defined
[18:59:31.048]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:59:31.050]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:59:31.050]    __dp=0x00000000
[18:59:31.050]    __ap=0x00000000
[18:59:31.050]    __traceout=0x00000000      (Trace Disabled)
[18:59:31.050]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:59:31.050]    __FlashAddr=0x00000000
[18:59:31.050]    __FlashLen=0x00000000
[18:59:31.050]    __FlashArg=0x00000000
[18:59:31.050]    __FlashOp=0x00000000
[18:59:31.050]    __Result=0x00000000
[18:59:31.050]  </debugvars>
[18:59:31.051]  
[18:59:31.051]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:59:31.051]    <block atomic="false" info="">
[18:59:31.051]      __var deviceID = 0;
[18:59:31.051]        // -> [deviceID <= 0x00000000]
[18:59:31.051]      __var version = 0;
[18:59:31.052]        // -> [version <= 0x00000000]
[18:59:31.052]      __var partNum = 0;
[18:59:31.052]        // -> [partNum <= 0x00000000]
[18:59:31.052]      __var manuf = 0;
[18:59:31.052]        // -> [manuf <= 0x00000000]
[18:59:31.052]      __var isMSPM0G1X0X_G3X0X = 0;
[18:59:31.052]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:59:31.052]      __var isProduction = 0;
[18:59:31.052]        // -> [isProduction <= 0x00000000]
[18:59:31.052]      __var continueId = 0;
[18:59:31.052]        // -> [continueId <= 0x00000000]
[18:59:31.052]      deviceID =   Read32(0x41C40004);
[18:59:31.053]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:59:31.053]        // -> [deviceID <= 0x2BB8802F]
[18:59:31.053]      version = deviceID >> 28;
[18:59:31.053]        // -> [version <= 0x00000002]
[18:59:31.053]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:59:31.055]        // -> [partNum <= 0x0000BB88]
[18:59:31.055]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:59:31.055]        // -> [manuf <= 0x00000017]
[18:59:31.055]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:59:31.055]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:59:31.055]      isProduction = (version > 0);
[18:59:31.055]        // -> [isProduction <= 0x00000001]
[18:59:31.055]    </block>
[18:59:31.055]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:59:31.055]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:59:31.055]        // =>  FALSE
[18:59:31.055]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:59:31.055]    </control>
[18:59:31.055]    <control if="continueId == 4" while="" timeout="0" info="">
[18:59:31.056]      // if-block "continueId == 4"
[18:59:31.056]        // =>  FALSE
[18:59:31.056]      // skip if-block "continueId == 4"
[18:59:31.056]    </control>
[18:59:31.056]    <control if="!isProduction" while="" timeout="0" info="">
[18:59:31.056]      // if-block "!isProduction"
[18:59:31.056]        // =>  FALSE
[18:59:31.057]      // skip if-block "!isProduction"
[18:59:31.057]    </control>
[18:59:31.057]  </sequence>
[18:59:31.058]  
[19:01:28.480]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:01:28.480]  
[19:01:28.480]  <debugvars>
[19:01:28.480]    // Pre-defined
[19:01:28.480]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:28.480]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:28.480]    __dp=0x00000000
[19:01:28.481]    __ap=0x00000000
[19:01:28.481]    __traceout=0x00000000      (Trace Disabled)
[19:01:28.481]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:28.481]    __FlashAddr=0x00000000
[19:01:28.481]    __FlashLen=0x00000000
[19:01:28.481]    __FlashArg=0x00000000
[19:01:28.481]    __FlashOp=0x00000000
[19:01:28.481]    __Result=0x00000000
[19:01:28.481]  </debugvars>
[19:01:28.481]  
[19:01:28.481]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:01:28.481]    <block atomic="false" info="">
[19:01:28.481]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:01:28.481]        // -> [isSWJ <= 0x00000001]
[19:01:28.481]      __var hasDormant = __protocol & 0x00020000;
[19:01:28.481]        // -> [hasDormant <= 0x00000000]
[19:01:28.483]      __var protType   = __protocol & 0x0000FFFF;
[19:01:28.483]        // -> [protType <= 0x00000002]
[19:01:28.483]    </block>
[19:01:28.483]    <control if="protType == 1" while="" timeout="0" info="">
[19:01:28.483]      // if-block "protType == 1"
[19:01:28.483]        // =>  FALSE
[19:01:28.483]      // skip if-block "protType == 1"
[19:01:28.483]    </control>
[19:01:28.483]    <control if="protType == 2" while="" timeout="0" info="">
[19:01:28.483]      // if-block "protType == 2"
[19:01:28.483]        // =>  TRUE
[19:01:28.483]      <control if="isSWJ" while="" timeout="0" info="">
[19:01:28.483]        // if-block "isSWJ"
[19:01:28.483]          // =>  TRUE
[19:01:28.484]        <control if="hasDormant" while="" timeout="0" info="">
[19:01:28.484]          // if-block "hasDormant"
[19:01:28.484]            // =>  FALSE
[19:01:28.484]          // skip if-block "hasDormant"
[19:01:28.484]        </control>
[19:01:28.484]        <control if="!hasDormant" while="" timeout="0" info="">
[19:01:28.484]          // if-block "!hasDormant"
[19:01:28.484]            // =>  TRUE
[19:01:28.484]          <block atomic="false" info="">
[19:01:28.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:01:28.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:28.485]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:01:28.485]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:01:28.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:01:28.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:28.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:01:28.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:01:28.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:01:28.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:28.487]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:01:28.488]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:01:28.488]          </block>
[19:01:28.488]          // end if-block "!hasDormant"
[19:01:28.488]        </control>
[19:01:28.488]        // end if-block "isSWJ"
[19:01:28.488]      </control>
[19:01:28.488]      <control if="!isSWJ" while="" timeout="0" info="">
[19:01:28.488]        // if-block "!isSWJ"
[19:01:28.489]          // =>  FALSE
[19:01:28.489]        // skip if-block "!isSWJ"
[19:01:28.489]      </control>
[19:01:28.489]      <block atomic="false" info="">
[19:01:28.489]        ReadDP(0x0);
[19:01:28.489]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:01:28.489]      </block>
[19:01:28.489]      // end if-block "protType == 2"
[19:01:28.489]    </control>
[19:01:28.489]  </sequence>
[19:01:28.489]  
[19:01:28.491]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:01:28.491]  
[19:01:28.491]  <debugvars>
[19:01:28.491]    // Pre-defined
[19:01:28.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:28.492]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:28.492]    __dp=0x00000000
[19:01:28.492]    __ap=0x00000000
[19:01:28.492]    __traceout=0x00000000      (Trace Disabled)
[19:01:28.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:28.492]    __FlashAddr=0x00000000
[19:01:28.492]    __FlashLen=0x00000000
[19:01:28.492]    __FlashArg=0x00000000
[19:01:28.492]    __FlashOp=0x00000000
[19:01:28.492]    __Result=0x00000000
[19:01:28.493]  </debugvars>
[19:01:28.493]  
[19:01:28.493]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:01:28.493]    <block atomic="false" info="">
[19:01:28.493]      __var SW_DP_ABORT       = 0x0;
[19:01:28.493]        // -> [SW_DP_ABORT <= 0x00000000]
[19:01:28.493]      __var DP_CTRL_STAT      = 0x4;
[19:01:28.493]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:01:28.493]      __var DP_SELECT         = 0x8;
[19:01:28.493]        // -> [DP_SELECT <= 0x00000008]
[19:01:28.493]      __var powered_down      = 0;
[19:01:28.494]        // -> [powered_down <= 0x00000000]
[19:01:28.494]      WriteDP(DP_SELECT, 0x00000000);
[19:01:28.494]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:01:28.494]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:01:28.494]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:01:28.494]        // -> [powered_down <= 0x00000001]
[19:01:28.494]    </block>
[19:01:28.494]    <control if="powered_down" while="" timeout="0" info="">
[19:01:28.494]      // if-block "powered_down"
[19:01:28.495]        // =>  TRUE
[19:01:28.495]      <block atomic="false" info="">
[19:01:28.495]        Message(0, "Debug/System power-up request sent");
[19:01:28.497]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:01:28.498]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:01:28.498]      </block>
[19:01:28.498]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:01:28.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:01:28.499]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:01:28.499]        // while-condition  =>  FALSE
[19:01:28.499]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:01:28.499]      </control>
[19:01:28.499]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:01:28.499]        // if-block "(__protocol & 0xFFFF) == 1"
[19:01:28.499]          // =>  FALSE
[19:01:28.499]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:01:28.499]      </control>
[19:01:28.499]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:01:28.499]        // if-block "(__protocol & 0xFFFF) == 2"
[19:01:28.501]          // =>  TRUE
[19:01:28.501]        <block atomic="false" info="">
[19:01:28.501]          Message(0, "executing SWD power up");
[19:01:28.502]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:01:28.503]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:01:28.503]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:01:28.503]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:01:28.504]        </block>
[19:01:28.504]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:01:28.504]      </control>
[19:01:28.504]      // end if-block "powered_down"
[19:01:28.504]    </control>
[19:01:28.504]    <block atomic="false" info="">
[19:01:28.504]      __var DEBUG_PORT_VAL    = 0;
[19:01:28.505]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:01:28.505]      __var ACCESS_POINT_VAL  = 0;
[19:01:28.505]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:01:28.505]      __ap = 1; 
[19:01:28.505]        // -> [__ap <= 0x00000001]
[19:01:28.505]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:01:28.506]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:01:28.506]      __ap = 4;
[19:01:28.506]        // -> [__ap <= 0x00000004]
[19:01:28.507]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:28.507]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:01:28.508]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:01:28.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:28.509]    </block>
[19:01:28.510]    <block atomic="false" info="">
[19:01:28.510]      __var nReset = 0x80;
[19:01:28.510]        // -> [nReset <= 0x00000080]
[19:01:28.510]      __var canReadPins = 0;
[19:01:28.510]        // -> [canReadPins <= 0x00000000]
[19:01:28.510]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:01:28.510]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:01:28.511]        // -> [canReadPins <= 0x00000001]
[19:01:28.511]    </block>
[19:01:28.511]    <control if="" while="1" timeout="200" info="">
[19:01:28.511]      // while "1"  (timeout="200")
[19:01:28.511]      // while-condition  =>  TRUE
[19:01:28.511]      // while "1"  (timeout="200")
[19:01:28.511]      // while-condition  =>  TRUE
[19:01:28.511]      // while "1"  (timeout="200")
[19:01:28.511]      // while-condition  =>  TRUE
[19:01:28.511]      // while "1"  (timeout="200")
[19:01:28.513]      // while-condition  =>  TRUE
[19:01:28.513]      // while "1"  (timeout="200")
[19:01:28.513]      // while-condition  =>  TRUE
[19:01:28.513]      // while "1"  (timeout="200")
[19:01:28.513]      // while-condition  =>  TRUE
[19:01:28.513]      // while "1"  (timeout="200")
[19:01:28.513]      // while-condition  =>  TRUE
[19:01:28.513]      // while "1"  (timeout="200")
[19:01:28.513]      // while-condition  =>  TRUE
[19:01:28.513]      // while "1"  (timeout="200")
[19:01:28.513]      // while-condition  =>  TRUE
[19:01:28.513]      // while "1"  (timeout="200")
[19:01:28.514]      // while-condition  =>  TRUE
[19:01:28.514]      // while "1"  (timeout="200")
[19:01:28.514]      // while-condition  =>  TRUE
[19:01:28.514]      // while "1"  (timeout="200")
[19:01:28.514]      // while-condition  =>  TRUE
[19:01:28.514]      // while "1"  (timeout="200")
[19:01:28.514]      // while-condition  =>  TRUE
[19:01:28.514]      // while "1"  (timeout="200")
[19:01:28.514]      // while-condition  =>  TRUE
[19:01:28.514]      // while "1"  (timeout="200")
[19:01:28.515]      // while-condition  =>  TRUE
[19:01:28.515]      // while "1"  (timeout="200")
[19:01:28.515]      // while-condition  =>  TRUE
[19:01:28.515]      // while "1"  (timeout="200")
[19:01:28.515]      // while-condition  =>  TRUE
[19:01:28.515]      // while "1"  (timeout="200")
[19:01:28.515]      // while-condition  =>  TRUE
[19:01:28.515]      // while "1"  (timeout="200")
[19:01:28.515]      // while-condition  =>  TRUE
[19:01:28.516]      // while "1"  (timeout="200")
[19:01:28.516]      // while-condition  =>  TRUE
[19:01:28.516]      // while "1"  (timeout="200")
[19:01:28.516]      // while-condition  =>  TRUE
[19:01:28.516]      // while "1"  (timeout="200")
[19:01:28.516]      // while-condition  =>  TRUE
[19:01:28.516]      // while "1"  (timeout="200")
[19:01:28.516]      // while-condition  =>  TRUE
[19:01:28.516]      // while "1"  (timeout="200")
[19:01:28.516]      // while-condition  =>  TRUE
[19:01:28.516]      // while "1"  (timeout="200")
[19:01:28.516]      // while-condition  =>  TRUE
[19:01:28.516]      // while "1"  (timeout="200")
[19:01:28.516]      // while-condition  =>  TRUE
[19:01:28.518]      // while "1"  (timeout="200")
[19:01:28.518]      // while-condition  =>  TRUE
[19:01:28.518]      // while "1"  (timeout="200")
[19:01:28.518]      // while-condition  =>  TRUE
[19:01:28.518]      // while "1"  (timeout="200")
[19:01:28.518]      // while-condition  =>  TRUE
[19:01:28.518]      // while "1"  (timeout="200")
[19:01:28.518]      // while-condition  =>  TRUE
[19:01:28.518]      // while "1"  (timeout="200")
[19:01:28.518]      // while-condition  =>  TRUE
[19:01:28.518]      // while "1"  (timeout="200")
[19:01:28.519]      // while-condition  =>  TRUE
[19:01:28.519]      // while "1"  (timeout="200")
[19:01:28.519]      // while-condition  =>  TRUE
[19:01:28.519]      // while "1"  (timeout="200")
[19:01:28.519]      // while-condition  =>  TRUE
[19:01:28.519]      // while "1"  (timeout="200")
[19:01:28.519]      // while-condition  =>  TRUE
[19:01:28.519]      // while "1"  (timeout="200")
[19:01:28.519]      // while-condition  =>  TRUE
[19:01:28.519]      // while "1"  (timeout="200")
[19:01:28.520]      // while-condition  =>  TRUE
[19:01:28.520]      // while "1"  (timeout="200")
[19:01:28.520]      // while  =>  TIMEOUT
[19:01:28.520]      // end while "1"
[19:01:28.520]    </control>
[19:01:28.520]    <control if="canReadPins" while="" timeout="0" info="">
[19:01:28.520]      // if-block "canReadPins"
[19:01:28.520]        // =>  TRUE
[19:01:28.520]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:01:28.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:01:28.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:01:28.521]        // while-condition  =>  FALSE
[19:01:28.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:01:28.521]      </control>
[19:01:28.521]      // end if-block "canReadPins"
[19:01:28.521]    </control>
[19:01:28.521]    <control if="!canReadPins" while="" timeout="0" info="">
[19:01:28.522]      // if-block "!canReadPins"
[19:01:28.522]        // =>  FALSE
[19:01:28.522]      // skip if-block "!canReadPins"
[19:01:28.522]    </control>
[19:01:28.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:01:28.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:28.522]        // =>  TRUE
[19:01:28.522]      <block atomic="false" info="">
[19:01:28.522]        WriteAP(0x00, 0x190008);
[19:01:28.524]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:28.524]        WriteAP(0xF0, 0x01);
[19:01:28.525]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:28.525]      </block>
[19:01:28.525]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:28.525]    </control>
[19:01:28.525]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:01:28.525]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:28.525]        // =>  FALSE
[19:01:28.526]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:28.526]    </control>
[19:01:28.526]    <block atomic="false" info="">
[19:01:28.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:28.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:01:28.527]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:01:28.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:28.529]      __ap = 0; //lets make sure we reset the access point selection
[19:01:28.529]        // -> [__ap <= 0x00000000]
[19:01:28.529]    </block>
[19:01:28.529]  </sequence>
[19:01:28.529]  
[19:01:28.536]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:01:28.536]  
[19:01:28.536]  <debugvars>
[19:01:28.536]    // Pre-defined
[19:01:28.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:28.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:28.537]    __dp=0x00000000
[19:01:28.537]    __ap=0x00000000
[19:01:28.537]    __traceout=0x00000000      (Trace Disabled)
[19:01:28.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:28.537]    __FlashAddr=0x00000000
[19:01:28.537]    __FlashLen=0x00000000
[19:01:28.537]    __FlashArg=0x00000000
[19:01:28.538]    __FlashOp=0x00000000
[19:01:28.538]    __Result=0x00000000
[19:01:28.538]  </debugvars>
[19:01:28.539]  
[19:01:28.539]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:01:28.539]    <block atomic="false" info="">
[19:01:28.539]      __var deviceID = 0;
[19:01:28.539]        // -> [deviceID <= 0x00000000]
[19:01:28.539]      __var version = 0;
[19:01:28.539]        // -> [version <= 0x00000000]
[19:01:28.539]      __var partNum = 0;
[19:01:28.539]        // -> [partNum <= 0x00000000]
[19:01:28.539]      __var manuf = 0;
[19:01:28.539]        // -> [manuf <= 0x00000000]
[19:01:28.539]      __var isMSPM0G1X0X_G3X0X = 0;
[19:01:28.539]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:01:28.539]      __var isProduction = 0;
[19:01:28.539]        // -> [isProduction <= 0x00000000]
[19:01:28.539]      __var continueId = 0;
[19:01:28.539]        // -> [continueId <= 0x00000000]
[19:01:28.541]      deviceID =   Read32(0x41C40004);
[19:01:28.542]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:01:28.542]        // -> [deviceID <= 0x2BB8802F]
[19:01:28.542]      version = deviceID >> 28;
[19:01:28.542]        // -> [version <= 0x00000002]
[19:01:28.542]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:01:28.542]        // -> [partNum <= 0x0000BB88]
[19:01:28.542]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:01:28.542]        // -> [manuf <= 0x00000017]
[19:01:28.542]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:01:28.542]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:01:28.543]      isProduction = (version > 0);
[19:01:28.543]        // -> [isProduction <= 0x00000001]
[19:01:28.543]    </block>
[19:01:28.543]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:01:28.543]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:01:28.543]        // =>  FALSE
[19:01:28.543]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:01:28.543]    </control>
[19:01:28.544]    <control if="continueId == 4" while="" timeout="0" info="">
[19:01:28.544]      // if-block "continueId == 4"
[19:01:28.544]        // =>  FALSE
[19:01:28.544]      // skip if-block "continueId == 4"
[19:01:28.544]    </control>
[19:01:28.544]    <control if="!isProduction" while="" timeout="0" info="">
[19:01:28.545]      // if-block "!isProduction"
[19:01:28.545]        // =>  FALSE
[19:01:28.545]      // skip if-block "!isProduction"
[19:01:28.545]    </control>
[19:01:28.545]  </sequence>
[19:01:28.545]  
[19:02:15.450]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:02:15.450]  
[19:02:15.450]  <debugvars>
[19:02:15.450]    // Pre-defined
[19:02:15.450]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:02:15.450]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:02:15.450]    __dp=0x00000000
[19:02:15.451]    __ap=0x00000000
[19:02:15.451]    __traceout=0x00000000      (Trace Disabled)
[19:02:15.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:02:15.451]    __FlashAddr=0x00000000
[19:02:15.451]    __FlashLen=0x00000000
[19:02:15.451]    __FlashArg=0x00000000
[19:02:15.451]    __FlashOp=0x00000000
[19:02:15.451]    __Result=0x00000000
[19:02:15.451]  </debugvars>
[19:02:15.451]  
[19:02:15.451]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:02:15.452]    <block atomic="false" info="">
[19:02:15.452]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:02:15.452]        // -> [isSWJ <= 0x00000001]
[19:02:15.452]      __var hasDormant = __protocol & 0x00020000;
[19:02:15.452]        // -> [hasDormant <= 0x00000000]
[19:02:15.452]      __var protType   = __protocol & 0x0000FFFF;
[19:02:15.452]        // -> [protType <= 0x00000002]
[19:02:15.452]    </block>
[19:02:15.452]    <control if="protType == 1" while="" timeout="0" info="">
[19:02:15.452]      // if-block "protType == 1"
[19:02:15.452]        // =>  FALSE
[19:02:15.452]      // skip if-block "protType == 1"
[19:02:15.452]    </control>
[19:02:15.452]    <control if="protType == 2" while="" timeout="0" info="">
[19:02:15.452]      // if-block "protType == 2"
[19:02:15.452]        // =>  TRUE
[19:02:15.452]      <control if="isSWJ" while="" timeout="0" info="">
[19:02:15.452]        // if-block "isSWJ"
[19:02:15.452]          // =>  TRUE
[19:02:15.452]        <control if="hasDormant" while="" timeout="0" info="">
[19:02:15.452]          // if-block "hasDormant"
[19:02:15.453]            // =>  FALSE
[19:02:15.453]          // skip if-block "hasDormant"
[19:02:15.453]        </control>
[19:02:15.453]        <control if="!hasDormant" while="" timeout="0" info="">
[19:02:15.453]          // if-block "!hasDormant"
[19:02:15.453]            // =>  TRUE
[19:02:15.453]          <block atomic="false" info="">
[19:02:15.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:02:15.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:02:15.454]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:02:15.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:02:15.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:02:15.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:02:15.456]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:02:15.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:02:15.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:02:15.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:02:15.456]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:02:15.456]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:02:15.457]          </block>
[19:02:15.457]          // end if-block "!hasDormant"
[19:02:15.457]        </control>
[19:02:15.457]        // end if-block "isSWJ"
[19:02:15.457]      </control>
[19:02:15.457]      <control if="!isSWJ" while="" timeout="0" info="">
[19:02:15.457]        // if-block "!isSWJ"
[19:02:15.457]          // =>  FALSE
[19:02:15.457]        // skip if-block "!isSWJ"
[19:02:15.457]      </control>
[19:02:15.457]      <block atomic="false" info="">
[19:02:15.458]        ReadDP(0x0);
[19:02:15.458]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:02:15.458]      </block>
[19:02:15.458]      // end if-block "protType == 2"
[19:02:15.458]    </control>
[19:02:15.458]  </sequence>
[19:02:15.458]  
[19:02:15.459]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:02:15.459]  
[19:02:15.459]  <debugvars>
[19:02:15.459]    // Pre-defined
[19:02:15.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:02:15.459]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:02:15.459]    __dp=0x00000000
[19:02:15.459]    __ap=0x00000000
[19:02:15.459]    __traceout=0x00000000      (Trace Disabled)
[19:02:15.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:02:15.459]    __FlashAddr=0x00000000
[19:02:15.459]    __FlashLen=0x00000000
[19:02:15.459]    __FlashArg=0x00000000
[19:02:15.459]    __FlashOp=0x00000000
[19:02:15.461]    __Result=0x00000000
[19:02:15.461]  </debugvars>
[19:02:15.461]  
[19:02:15.461]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:02:15.461]    <block atomic="false" info="">
[19:02:15.461]      __var SW_DP_ABORT       = 0x0;
[19:02:15.461]        // -> [SW_DP_ABORT <= 0x00000000]
[19:02:15.461]      __var DP_CTRL_STAT      = 0x4;
[19:02:15.461]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:02:15.461]      __var DP_SELECT         = 0x8;
[19:02:15.461]        // -> [DP_SELECT <= 0x00000008]
[19:02:15.462]      __var powered_down      = 0;
[19:02:15.462]        // -> [powered_down <= 0x00000000]
[19:02:15.462]      WriteDP(DP_SELECT, 0x00000000);
[19:02:15.462]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:02:15.462]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:02:15.463]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:02:15.463]        // -> [powered_down <= 0x00000001]
[19:02:15.463]    </block>
[19:02:15.463]    <control if="powered_down" while="" timeout="0" info="">
[19:02:15.463]      // if-block "powered_down"
[19:02:15.463]        // =>  TRUE
[19:02:15.463]      <block atomic="false" info="">
[19:02:15.463]        Message(0, "Debug/System power-up request sent");
[19:02:15.466]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:02:15.467]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:02:15.467]      </block>
[19:02:15.467]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:02:15.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:02:15.467]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:02:15.468]        // while-condition  =>  FALSE
[19:02:15.468]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:02:15.468]      </control>
[19:02:15.468]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:02:15.468]        // if-block "(__protocol & 0xFFFF) == 1"
[19:02:15.468]          // =>  FALSE
[19:02:15.468]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:02:15.468]      </control>
[19:02:15.468]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:02:15.468]        // if-block "(__protocol & 0xFFFF) == 2"
[19:02:15.468]          // =>  TRUE
[19:02:15.468]        <block atomic="false" info="">
[19:02:15.470]          Message(0, "executing SWD power up");
[19:02:15.471]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:02:15.471]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:02:15.471]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:02:15.473]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:02:15.473]        </block>
[19:02:15.473]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:02:15.473]      </control>
[19:02:15.473]      // end if-block "powered_down"
[19:02:15.473]    </control>
[19:02:15.474]    <block atomic="false" info="">
[19:02:15.474]      __var DEBUG_PORT_VAL    = 0;
[19:02:15.474]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:02:15.474]      __var ACCESS_POINT_VAL  = 0;
[19:02:15.474]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:02:15.474]      __ap = 1; 
[19:02:15.474]        // -> [__ap <= 0x00000001]
[19:02:15.474]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:02:15.475]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:02:15.475]      __ap = 4;
[19:02:15.475]        // -> [__ap <= 0x00000004]
[19:02:15.475]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:02:15.476]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:02:15.477]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:02:15.477]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:02:15.478]    </block>
[19:02:15.478]    <block atomic="false" info="">
[19:02:15.478]      __var nReset = 0x80;
[19:02:15.478]        // -> [nReset <= 0x00000080]
[19:02:15.478]      __var canReadPins = 0;
[19:02:15.479]        // -> [canReadPins <= 0x00000000]
[19:02:15.479]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:02:15.479]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:02:15.479]        // -> [canReadPins <= 0x00000001]
[19:02:15.479]    </block>
[19:02:15.479]    <control if="" while="1" timeout="200" info="">
[19:02:15.479]      // while "1"  (timeout="200")
[19:02:15.479]      // while-condition  =>  TRUE
[19:02:15.479]      // while "1"  (timeout="200")
[19:02:15.479]      // while-condition  =>  TRUE
[19:02:15.479]      // while "1"  (timeout="200")
[19:02:15.481]      // while-condition  =>  TRUE
[19:02:15.481]      // while "1"  (timeout="200")
[19:02:15.481]      // while-condition  =>  TRUE
[19:02:15.481]      // while "1"  (timeout="200")
[19:02:15.481]      // while-condition  =>  TRUE
[19:02:15.481]      // while "1"  (timeout="200")
[19:02:15.481]      // while-condition  =>  TRUE
[19:02:15.481]      // while "1"  (timeout="200")
[19:02:15.481]      // while-condition  =>  TRUE
[19:02:15.481]      // while "1"  (timeout="200")
[19:02:15.481]      // while-condition  =>  TRUE
[19:02:15.482]      // while "1"  (timeout="200")
[19:02:15.482]      // while-condition  =>  TRUE
[19:02:15.482]      // while "1"  (timeout="200")
[19:02:15.482]      // while-condition  =>  TRUE
[19:02:15.482]      // while "1"  (timeout="200")
[19:02:15.482]      // while-condition  =>  TRUE
[19:02:15.482]      // while "1"  (timeout="200")
[19:02:15.482]      // while-condition  =>  TRUE
[19:02:15.482]      // while "1"  (timeout="200")
[19:02:15.482]      // while-condition  =>  TRUE
[19:02:15.482]      // while "1"  (timeout="200")
[19:02:15.483]      // while-condition  =>  TRUE
[19:02:15.483]      // while "1"  (timeout="200")
[19:02:15.483]      // while-condition  =>  TRUE
[19:02:15.483]      // while "1"  (timeout="200")
[19:02:15.483]      // while-condition  =>  TRUE
[19:02:15.483]      // while "1"  (timeout="200")
[19:02:15.483]      // while-condition  =>  TRUE
[19:02:15.483]      // while "1"  (timeout="200")
[19:02:15.483]      // while-condition  =>  TRUE
[19:02:15.483]      // while "1"  (timeout="200")
[19:02:15.483]      // while-condition  =>  TRUE
[19:02:15.484]      // while "1"  (timeout="200")
[19:02:15.484]      // while-condition  =>  TRUE
[19:02:15.484]      // while "1"  (timeout="200")
[19:02:15.484]      // while-condition  =>  TRUE
[19:02:15.484]      // while "1"  (timeout="200")
[19:02:15.484]      // while-condition  =>  TRUE
[19:02:15.484]      // while "1"  (timeout="200")
[19:02:15.484]      // while-condition  =>  TRUE
[19:02:15.484]      // while "1"  (timeout="200")
[19:02:15.484]      // while-condition  =>  TRUE
[19:02:15.484]      // while "1"  (timeout="200")
[19:02:15.484]      // while-condition  =>  TRUE
[19:02:15.484]      // while "1"  (timeout="200")
[19:02:15.484]      // while-condition  =>  TRUE
[19:02:15.485]      // while "1"  (timeout="200")
[19:02:15.485]      // while-condition  =>  TRUE
[19:02:15.485]      // while "1"  (timeout="200")
[19:02:15.485]      // while-condition  =>  TRUE
[19:02:15.485]      // while "1"  (timeout="200")
[19:02:15.485]      // while-condition  =>  TRUE
[19:02:15.485]      // while "1"  (timeout="200")
[19:02:15.486]      // while-condition  =>  TRUE
[19:02:15.486]      // while "1"  (timeout="200")
[19:02:15.486]      // while-condition  =>  TRUE
[19:02:15.486]      // while "1"  (timeout="200")
[19:02:15.486]      // while-condition  =>  TRUE
[19:02:15.486]      // while "1"  (timeout="200")
[19:02:15.486]      // while-condition  =>  TRUE
[19:02:15.486]      // while "1"  (timeout="200")
[19:02:15.486]      // while-condition  =>  TRUE
[19:02:15.486]      // while "1"  (timeout="200")
[19:02:15.486]      // while-condition  =>  TRUE
[19:02:15.486]      // while "1"  (timeout="200")
[19:02:15.486]      // while-condition  =>  TRUE
[19:02:15.488]      // while "1"  (timeout="200")
[19:02:15.488]      // while-condition  =>  TRUE
[19:02:15.488]      // while "1"  (timeout="200")
[19:02:15.488]      // while-condition  =>  TRUE
[19:02:15.488]      // while "1"  (timeout="200")
[19:02:15.489]      // while-condition  =>  TRUE
[19:02:15.489]      // while "1"  (timeout="200")
[19:02:15.489]      // while  =>  TIMEOUT
[19:02:15.489]      // end while "1"
[19:02:15.489]    </control>
[19:02:15.489]    <control if="canReadPins" while="" timeout="0" info="">
[19:02:15.490]      // if-block "canReadPins"
[19:02:15.490]        // =>  TRUE
[19:02:15.490]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:02:15.490]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:02:15.490]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:02:15.491]        // while-condition  =>  FALSE
[19:02:15.491]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:02:15.491]      </control>
[19:02:15.491]      // end if-block "canReadPins"
[19:02:15.491]    </control>
[19:02:15.491]    <control if="!canReadPins" while="" timeout="0" info="">
[19:02:15.491]      // if-block "!canReadPins"
[19:02:15.491]        // =>  FALSE
[19:02:15.491]      // skip if-block "!canReadPins"
[19:02:15.491]    </control>
[19:02:15.491]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:02:15.492]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:02:15.492]        // =>  TRUE
[19:02:15.492]      <block atomic="false" info="">
[19:02:15.492]        WriteAP(0x00, 0x190008);
[19:02:15.492]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:02:15.493]        WriteAP(0xF0, 0x01);
[19:02:15.494]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:02:15.494]      </block>
[19:02:15.494]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:02:15.494]    </control>
[19:02:15.494]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:02:15.494]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:02:15.494]        // =>  FALSE
[19:02:15.494]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:02:15.494]    </control>
[19:02:15.494]    <block atomic="false" info="">
[19:02:15.495]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:02:15.496]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:02:15.496]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:02:15.496]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:02:15.497]      __ap = 0; //lets make sure we reset the access point selection
[19:02:15.498]        // -> [__ap <= 0x00000000]
[19:02:15.498]    </block>
[19:02:15.498]  </sequence>
[19:02:15.498]  
[19:02:15.504]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:02:15.504]  
[19:02:15.505]  <debugvars>
[19:02:15.505]    // Pre-defined
[19:02:15.505]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:02:15.505]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:02:15.505]    __dp=0x00000000
[19:02:15.505]    __ap=0x00000000
[19:02:15.505]    __traceout=0x00000000      (Trace Disabled)
[19:02:15.505]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:02:15.505]    __FlashAddr=0x00000000
[19:02:15.505]    __FlashLen=0x00000000
[19:02:15.506]    __FlashArg=0x00000000
[19:02:15.506]    __FlashOp=0x00000000
[19:02:15.506]    __Result=0x00000000
[19:02:15.506]  </debugvars>
[19:02:15.506]  
[19:02:15.506]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:02:15.506]    <block atomic="false" info="">
[19:02:15.506]      __var deviceID = 0;
[19:02:15.506]        // -> [deviceID <= 0x00000000]
[19:02:15.506]      __var version = 0;
[19:02:15.507]        // -> [version <= 0x00000000]
[19:02:15.507]      __var partNum = 0;
[19:02:15.507]        // -> [partNum <= 0x00000000]
[19:02:15.507]      __var manuf = 0;
[19:02:15.507]        // -> [manuf <= 0x00000000]
[19:02:15.507]      __var isMSPM0G1X0X_G3X0X = 0;
[19:02:15.507]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:02:15.507]      __var isProduction = 0;
[19:02:15.507]        // -> [isProduction <= 0x00000000]
[19:02:15.507]      __var continueId = 0;
[19:02:15.507]        // -> [continueId <= 0x00000000]
[19:02:15.508]      deviceID =   Read32(0x41C40004);
[19:02:15.509]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:02:15.509]        // -> [deviceID <= 0x2BB8802F]
[19:02:15.509]      version = deviceID >> 28;
[19:02:15.509]        // -> [version <= 0x00000002]
[19:02:15.509]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:02:15.509]        // -> [partNum <= 0x0000BB88]
[19:02:15.509]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:02:15.509]        // -> [manuf <= 0x00000017]
[19:02:15.509]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:02:15.509]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:02:15.509]      isProduction = (version > 0);
[19:02:15.509]        // -> [isProduction <= 0x00000001]
[19:02:15.511]    </block>
[19:02:15.511]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:02:15.511]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:02:15.511]        // =>  FALSE
[19:02:15.511]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:02:15.511]    </control>
[19:02:15.511]    <control if="continueId == 4" while="" timeout="0" info="">
[19:02:15.511]      // if-block "continueId == 4"
[19:02:15.511]        // =>  FALSE
[19:02:15.511]      // skip if-block "continueId == 4"
[19:02:15.511]    </control>
[19:02:15.511]    <control if="!isProduction" while="" timeout="0" info="">
[19:02:15.512]      // if-block "!isProduction"
[19:02:15.512]        // =>  FALSE
[19:02:15.512]      // skip if-block "!isProduction"
[19:02:15.512]    </control>
[19:02:15.512]  </sequence>
[19:02:15.512]  
[19:04:39.091]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:04:39.091]  
[19:04:39.099]  <debugvars>
[19:04:39.099]    // Pre-defined
[19:04:39.099]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:04:39.099]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:04:39.099]    __dp=0x00000000
[19:04:39.099]    __ap=0x00000000
[19:04:39.099]    __traceout=0x00000000      (Trace Disabled)
[19:04:39.099]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:04:39.099]    __FlashAddr=0x00000000
[19:04:39.099]    __FlashLen=0x00000000
[19:04:39.099]    __FlashArg=0x00000000
[19:04:39.099]    __FlashOp=0x00000000
[19:04:39.099]    __Result=0x00000000
[19:04:39.101]  </debugvars>
[19:04:39.101]  
[19:04:39.101]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:04:39.101]    <block atomic="false" info="">
[19:04:39.101]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:04:39.101]        // -> [isSWJ <= 0x00000001]
[19:04:39.101]      __var hasDormant = __protocol & 0x00020000;
[19:04:39.101]        // -> [hasDormant <= 0x00000000]
[19:04:39.101]      __var protType   = __protocol & 0x0000FFFF;
[19:04:39.101]        // -> [protType <= 0x00000002]
[19:04:39.101]    </block>
[19:04:39.102]    <control if="protType == 1" while="" timeout="0" info="">
[19:04:39.102]      // if-block "protType == 1"
[19:04:39.102]        // =>  FALSE
[19:04:39.102]      // skip if-block "protType == 1"
[19:04:39.102]    </control>
[19:04:39.102]    <control if="protType == 2" while="" timeout="0" info="">
[19:04:39.102]      // if-block "protType == 2"
[19:04:39.102]        // =>  TRUE
[19:04:39.102]      <control if="isSWJ" while="" timeout="0" info="">
[19:04:39.102]        // if-block "isSWJ"
[19:04:39.102]          // =>  TRUE
[19:04:39.102]        <control if="hasDormant" while="" timeout="0" info="">
[19:04:39.102]          // if-block "hasDormant"
[19:04:39.102]            // =>  FALSE
[19:04:39.102]          // skip if-block "hasDormant"
[19:04:39.102]        </control>
[19:04:39.102]        <control if="!hasDormant" while="" timeout="0" info="">
[19:04:39.102]          // if-block "!hasDormant"
[19:04:39.102]            // =>  TRUE
[19:04:39.102]          <block atomic="false" info="">
[19:04:39.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:04:39.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:04:39.104]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:04:39.104]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:04:39.104]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:04:39.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:04:39.104]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:04:39.104]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:04:39.104]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:04:39.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:04:39.105]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:04:39.105]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:04:39.105]          </block>
[19:04:39.105]          // end if-block "!hasDormant"
[19:04:39.105]        </control>
[19:04:39.105]        // end if-block "isSWJ"
[19:04:39.107]      </control>
[19:04:39.107]      <control if="!isSWJ" while="" timeout="0" info="">
[19:04:39.107]        // if-block "!isSWJ"
[19:04:39.107]          // =>  FALSE
[19:04:39.107]        // skip if-block "!isSWJ"
[19:04:39.107]      </control>
[19:04:39.107]      <block atomic="false" info="">
[19:04:39.107]        ReadDP(0x0);
[19:04:39.108]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:04:39.108]      </block>
[19:04:39.108]      // end if-block "protType == 2"
[19:04:39.108]    </control>
[19:04:39.108]  </sequence>
[19:04:39.108]  
[19:04:39.109]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:04:39.109]  
[19:04:39.109]  <debugvars>
[19:04:39.109]    // Pre-defined
[19:04:39.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:04:39.109]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:04:39.109]    __dp=0x00000000
[19:04:39.109]    __ap=0x00000000
[19:04:39.109]    __traceout=0x00000000      (Trace Disabled)
[19:04:39.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:04:39.109]    __FlashAddr=0x00000000
[19:04:39.109]    __FlashLen=0x00000000
[19:04:39.109]    __FlashArg=0x00000000
[19:04:39.109]    __FlashOp=0x00000000
[19:04:39.109]    __Result=0x00000000
[19:04:39.110]  </debugvars>
[19:04:39.110]  
[19:04:39.110]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:04:39.110]    <block atomic="false" info="">
[19:04:39.111]      __var SW_DP_ABORT       = 0x0;
[19:04:39.111]        // -> [SW_DP_ABORT <= 0x00000000]
[19:04:39.111]      __var DP_CTRL_STAT      = 0x4;
[19:04:39.111]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:04:39.111]      __var DP_SELECT         = 0x8;
[19:04:39.111]        // -> [DP_SELECT <= 0x00000008]
[19:04:39.111]      __var powered_down      = 0;
[19:04:39.111]        // -> [powered_down <= 0x00000000]
[19:04:39.111]      WriteDP(DP_SELECT, 0x00000000);
[19:04:39.112]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:04:39.112]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:04:39.113]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:04:39.113]        // -> [powered_down <= 0x00000001]
[19:04:39.113]    </block>
[19:04:39.113]    <control if="powered_down" while="" timeout="0" info="">
[19:04:39.113]      // if-block "powered_down"
[19:04:39.113]        // =>  TRUE
[19:04:39.113]      <block atomic="false" info="">
[19:04:39.113]        Message(0, "Debug/System power-up request sent");
[19:04:39.115]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:04:39.115]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:04:39.115]      </block>
[19:04:39.115]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:04:39.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:04:39.116]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:04:39.116]        // while-condition  =>  FALSE
[19:04:39.116]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:04:39.116]      </control>
[19:04:39.116]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:04:39.116]        // if-block "(__protocol & 0xFFFF) == 1"
[19:04:39.116]          // =>  FALSE
[19:04:39.116]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:04:39.116]      </control>
[19:04:39.116]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:04:39.116]        // if-block "(__protocol & 0xFFFF) == 2"
[19:04:39.116]          // =>  TRUE
[19:04:39.116]        <block atomic="false" info="">
[19:04:39.117]          Message(0, "executing SWD power up");
[19:04:39.118]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:04:39.119]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:04:39.119]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:04:39.119]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:04:39.119]        </block>
[19:04:39.119]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:04:39.119]      </control>
[19:04:39.119]      // end if-block "powered_down"
[19:04:39.121]    </control>
[19:04:39.121]    <block atomic="false" info="">
[19:04:39.121]      __var DEBUG_PORT_VAL    = 0;
[19:04:39.121]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:04:39.121]      __var ACCESS_POINT_VAL  = 0;
[19:04:39.121]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:04:39.121]      __ap = 1; 
[19:04:39.121]        // -> [__ap <= 0x00000001]
[19:04:39.122]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:04:39.122]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:04:39.122]      __ap = 4;
[19:04:39.122]        // -> [__ap <= 0x00000004]
[19:04:39.122]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:04:39.123]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:04:39.123]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:04:39.124]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:04:39.125]    </block>
[19:04:39.125]    <block atomic="false" info="">
[19:04:39.125]      __var nReset = 0x80;
[19:04:39.126]        // -> [nReset <= 0x00000080]
[19:04:39.126]      __var canReadPins = 0;
[19:04:39.126]        // -> [canReadPins <= 0x00000000]
[19:04:39.126]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:04:39.126]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:04:39.126]        // -> [canReadPins <= 0x00000001]
[19:04:39.126]    </block>
[19:04:39.127]    <control if="" while="1" timeout="200" info="">
[19:04:39.127]      // while "1"  (timeout="200")
[19:04:39.127]      // while-condition  =>  TRUE
[19:04:39.127]      // while "1"  (timeout="200")
[19:04:39.127]      // while-condition  =>  TRUE
[19:04:39.127]      // while "1"  (timeout="200")
[19:04:39.127]      // while-condition  =>  TRUE
[19:04:39.127]      // while "1"  (timeout="200")
[19:04:39.128]      // while-condition  =>  TRUE
[19:04:39.128]      // while "1"  (timeout="200")
[19:04:39.128]      // while-condition  =>  TRUE
[19:04:39.128]      // while "1"  (timeout="200")
[19:04:39.128]      // while-condition  =>  TRUE
[19:04:39.128]      // while "1"  (timeout="200")
[19:04:39.128]      // while-condition  =>  TRUE
[19:04:39.128]      // while "1"  (timeout="200")
[19:04:39.129]      // while-condition  =>  TRUE
[19:04:39.129]      // while "1"  (timeout="200")
[19:04:39.129]      // while  =>  TIMEOUT
[19:04:39.129]      // end while "1"
[19:04:39.129]    </control>
[19:04:39.129]    <control if="canReadPins" while="" timeout="0" info="">
[19:04:39.129]      // if-block "canReadPins"
[19:04:39.129]        // =>  TRUE
[19:04:39.129]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:04:39.129]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:04:39.129]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:04:39.129]        // while-condition  =>  FALSE
[19:04:39.129]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:04:39.131]      </control>
[19:04:39.131]      // end if-block "canReadPins"
[19:04:39.131]    </control>
[19:04:39.131]    <control if="!canReadPins" while="" timeout="0" info="">
[19:04:39.131]      // if-block "!canReadPins"
[19:04:39.131]        // =>  FALSE
[19:04:39.131]      // skip if-block "!canReadPins"
[19:04:39.131]    </control>
[19:04:39.132]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:04:39.132]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:04:39.132]        // =>  TRUE
[19:04:39.132]      <block atomic="false" info="">
[19:04:39.132]        WriteAP(0x00, 0x190008);
[19:04:39.132]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:04:39.132]        WriteAP(0xF0, 0x01);
[19:04:39.133]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:04:39.133]      </block>
[19:04:39.134]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:04:39.134]    </control>
[19:04:39.134]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:04:39.134]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:04:39.134]        // =>  FALSE
[19:04:39.134]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:04:39.134]    </control>
[19:04:39.134]    <block atomic="false" info="">
[19:04:39.134]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:04:39.136]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:04:39.136]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:04:39.136]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:04:39.137]      __ap = 0; //lets make sure we reset the access point selection
[19:04:39.137]        // -> [__ap <= 0x00000000]
[19:04:39.138]    </block>
[19:04:39.138]  </sequence>
[19:04:39.139]  
[19:04:39.144]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:04:39.144]  
[19:04:39.144]  <debugvars>
[19:04:39.144]    // Pre-defined
[19:04:39.144]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:04:39.144]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:04:39.146]    __dp=0x00000000
[19:04:39.146]    __ap=0x00000000
[19:04:39.146]    __traceout=0x00000000      (Trace Disabled)
[19:04:39.146]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:04:39.146]    __FlashAddr=0x00000000
[19:04:39.146]    __FlashLen=0x00000000
[19:04:39.146]    __FlashArg=0x00000000
[19:04:39.146]    __FlashOp=0x00000000
[19:04:39.146]    __Result=0x00000000
[19:04:39.146]  </debugvars>
[19:04:39.146]  
[19:04:39.146]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:04:39.146]    <block atomic="false" info="">
[19:04:39.146]      __var deviceID = 0;
[19:04:39.146]        // -> [deviceID <= 0x00000000]
[19:04:39.146]      __var version = 0;
[19:04:39.146]        // -> [version <= 0x00000000]
[19:04:39.146]      __var partNum = 0;
[19:04:39.146]        // -> [partNum <= 0x00000000]
[19:04:39.147]      __var manuf = 0;
[19:04:39.147]        // -> [manuf <= 0x00000000]
[19:04:39.147]      __var isMSPM0G1X0X_G3X0X = 0;
[19:04:39.147]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:04:39.147]      __var isProduction = 0;
[19:04:39.147]        // -> [isProduction <= 0x00000000]
[19:04:39.147]      __var continueId = 0;
[19:04:39.147]        // -> [continueId <= 0x00000000]
[19:04:39.147]      deviceID =   Read32(0x41C40004);
[19:04:39.149]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:04:39.149]        // -> [deviceID <= 0x2BB8802F]
[19:04:39.149]      version = deviceID >> 28;
[19:04:39.149]        // -> [version <= 0x00000002]
[19:04:39.149]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:04:39.150]        // -> [partNum <= 0x0000BB88]
[19:04:39.150]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:04:39.150]        // -> [manuf <= 0x00000017]
[19:04:39.150]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:04:39.150]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:04:39.150]      isProduction = (version > 0);
[19:04:39.150]        // -> [isProduction <= 0x00000001]
[19:04:39.150]    </block>
[19:04:39.150]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:04:39.150]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:04:39.150]        // =>  FALSE
[19:04:39.150]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:04:39.151]    </control>
[19:04:39.151]    <control if="continueId == 4" while="" timeout="0" info="">
[19:04:39.151]      // if-block "continueId == 4"
[19:04:39.151]        // =>  FALSE
[19:04:39.151]      // skip if-block "continueId == 4"
[19:04:39.151]    </control>
[19:04:39.152]    <control if="!isProduction" while="" timeout="0" info="">
[19:04:39.152]      // if-block "!isProduction"
[19:04:39.152]        // =>  FALSE
[19:04:39.152]      // skip if-block "!isProduction"
[19:04:39.152]    </control>
[19:04:39.152]  </sequence>
[19:04:39.152]  
[19:06:25.069]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:06:25.069]  
[19:06:25.072]  <debugvars>
[19:06:25.072]    // Pre-defined
[19:06:25.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:25.072]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:06:25.072]    __dp=0x00000000
[19:06:25.072]    __ap=0x00000000
[19:06:25.073]    __traceout=0x00000000      (Trace Disabled)
[19:06:25.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:25.073]    __FlashAddr=0x00000000
[19:06:25.073]    __FlashLen=0x00000000
[19:06:25.073]    __FlashArg=0x00000000
[19:06:25.073]    __FlashOp=0x00000000
[19:06:25.073]    __Result=0x00000000
[19:06:25.073]  </debugvars>
[19:06:25.073]  
[19:06:25.073]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:06:25.073]    <block atomic="false" info="">
[19:06:25.074]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:06:25.074]        // -> [isSWJ <= 0x00000001]
[19:06:25.074]      __var hasDormant = __protocol & 0x00020000;
[19:06:25.074]        // -> [hasDormant <= 0x00000000]
[19:06:25.074]      __var protType   = __protocol & 0x0000FFFF;
[19:06:25.074]        // -> [protType <= 0x00000002]
[19:06:25.074]    </block>
[19:06:25.074]    <control if="protType == 1" while="" timeout="0" info="">
[19:06:25.074]      // if-block "protType == 1"
[19:06:25.074]        // =>  FALSE
[19:06:25.074]      // skip if-block "protType == 1"
[19:06:25.075]    </control>
[19:06:25.075]    <control if="protType == 2" while="" timeout="0" info="">
[19:06:25.075]      // if-block "protType == 2"
[19:06:25.075]        // =>  TRUE
[19:06:25.075]      <control if="isSWJ" while="" timeout="0" info="">
[19:06:25.075]        // if-block "isSWJ"
[19:06:25.075]          // =>  TRUE
[19:06:25.075]        <control if="hasDormant" while="" timeout="0" info="">
[19:06:25.075]          // if-block "hasDormant"
[19:06:25.075]            // =>  FALSE
[19:06:25.075]          // skip if-block "hasDormant"
[19:06:25.075]        </control>
[19:06:25.075]        <control if="!hasDormant" while="" timeout="0" info="">
[19:06:25.075]          // if-block "!hasDormant"
[19:06:25.076]            // =>  TRUE
[19:06:25.076]          <block atomic="false" info="">
[19:06:25.076]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:06:25.076]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:25.076]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:06:25.077]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:06:25.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:06:25.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:25.078]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:06:25.078]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:06:25.078]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:06:25.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:25.078]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:06:25.078]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:06:25.078]          </block>
[19:06:25.079]          // end if-block "!hasDormant"
[19:06:25.079]        </control>
[19:06:25.079]        // end if-block "isSWJ"
[19:06:25.079]      </control>
[19:06:25.079]      <control if="!isSWJ" while="" timeout="0" info="">
[19:06:25.079]        // if-block "!isSWJ"
[19:06:25.079]          // =>  FALSE
[19:06:25.079]        // skip if-block "!isSWJ"
[19:06:25.079]      </control>
[19:06:25.079]      <block atomic="false" info="">
[19:06:25.079]        ReadDP(0x0);
[19:06:25.080]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:06:25.080]      </block>
[19:06:25.080]      // end if-block "protType == 2"
[19:06:25.080]    </control>
[19:06:25.080]  </sequence>
[19:06:25.080]  
[19:06:25.081]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:06:25.081]  
[19:06:25.081]  <debugvars>
[19:06:25.081]    // Pre-defined
[19:06:25.081]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:25.081]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:06:25.081]    __dp=0x00000000
[19:06:25.081]    __ap=0x00000000
[19:06:25.081]    __traceout=0x00000000      (Trace Disabled)
[19:06:25.082]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:25.082]    __FlashAddr=0x00000000
[19:06:25.082]    __FlashLen=0x00000000
[19:06:25.082]    __FlashArg=0x00000000
[19:06:25.082]    __FlashOp=0x00000000
[19:06:25.082]    __Result=0x00000000
[19:06:25.082]  </debugvars>
[19:06:25.082]  
[19:06:25.082]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:06:25.082]    <block atomic="false" info="">
[19:06:25.083]      __var SW_DP_ABORT       = 0x0;
[19:06:25.083]        // -> [SW_DP_ABORT <= 0x00000000]
[19:06:25.083]      __var DP_CTRL_STAT      = 0x4;
[19:06:25.083]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:06:25.083]      __var DP_SELECT         = 0x8;
[19:06:25.083]        // -> [DP_SELECT <= 0x00000008]
[19:06:25.083]      __var powered_down      = 0;
[19:06:25.083]        // -> [powered_down <= 0x00000000]
[19:06:25.083]      WriteDP(DP_SELECT, 0x00000000);
[19:06:25.085]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:06:25.085]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:06:25.085]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:06:25.085]        // -> [powered_down <= 0x00000001]
[19:06:25.085]    </block>
[19:06:25.085]    <control if="powered_down" while="" timeout="0" info="">
[19:06:25.085]      // if-block "powered_down"
[19:06:25.086]        // =>  TRUE
[19:06:25.086]      <block atomic="false" info="">
[19:06:25.086]        Message(0, "Debug/System power-up request sent");
[19:06:25.087]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:06:25.088]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:06:25.088]      </block>
[19:06:25.088]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:06:25.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:06:25.088]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:06:25.088]        // while-condition  =>  FALSE
[19:06:25.089]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:06:25.089]      </control>
[19:06:25.089]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:06:25.089]        // if-block "(__protocol & 0xFFFF) == 1"
[19:06:25.089]          // =>  FALSE
[19:06:25.089]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:06:25.089]      </control>
[19:06:25.089]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:06:25.089]        // if-block "(__protocol & 0xFFFF) == 2"
[19:06:25.089]          // =>  TRUE
[19:06:25.089]        <block atomic="false" info="">
[19:06:25.089]          Message(0, "executing SWD power up");
[19:06:25.091]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:06:25.092]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:06:25.092]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:06:25.092]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:06:25.092]        </block>
[19:06:25.092]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:06:25.093]      </control>
[19:06:25.093]      // end if-block "powered_down"
[19:06:25.093]    </control>
[19:06:25.093]    <block atomic="false" info="">
[19:06:25.093]      __var DEBUG_PORT_VAL    = 0;
[19:06:25.093]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:06:25.093]      __var ACCESS_POINT_VAL  = 0;
[19:06:25.093]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:06:25.093]      __ap = 1; 
[19:06:25.093]        // -> [__ap <= 0x00000001]
[19:06:25.094]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:06:25.095]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:06:25.095]      __ap = 4;
[19:06:25.095]        // -> [__ap <= 0x00000004]
[19:06:25.095]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:06:25.096]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:06:25.096]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:06:25.096]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:06:25.098]    </block>
[19:06:25.099]    <block atomic="false" info="">
[19:06:25.099]      __var nReset = 0x80;
[19:06:25.099]        // -> [nReset <= 0x00000080]
[19:06:25.099]      __var canReadPins = 0;
[19:06:25.099]        // -> [canReadPins <= 0x00000000]
[19:06:25.099]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:06:25.099]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:06:25.099]        // -> [canReadPins <= 0x00000001]
[19:06:25.099]    </block>
[19:06:25.099]    <control if="" while="1" timeout="200" info="">
[19:06:25.099]      // while "1"  (timeout="200")
[19:06:25.099]      // while-condition  =>  TRUE
[19:06:25.100]      // while "1"  (timeout="200")
[19:06:25.100]      // while-condition  =>  TRUE
[19:06:25.100]      // while "1"  (timeout="200")
[19:06:25.100]      // while-condition  =>  TRUE
[19:06:25.100]      // while "1"  (timeout="200")
[19:06:25.100]      // while-condition  =>  TRUE
[19:06:25.100]      // while "1"  (timeout="200")
[19:06:25.100]      // while-condition  =>  TRUE
[19:06:25.100]      // while "1"  (timeout="200")
[19:06:25.100]      // while-condition  =>  TRUE
[19:06:25.100]      // while "1"  (timeout="200")
[19:06:25.101]      // while-condition  =>  TRUE
[19:06:25.101]      // while "1"  (timeout="200")
[19:06:25.101]      // while-condition  =>  TRUE
[19:06:25.101]      // while "1"  (timeout="200")
[19:06:25.101]      // while-condition  =>  TRUE
[19:06:25.101]      // while "1"  (timeout="200")
[19:06:25.101]      // while-condition  =>  TRUE
[19:06:25.101]      // while "1"  (timeout="200")
[19:06:25.101]      // while-condition  =>  TRUE
[19:06:25.101]      // while "1"  (timeout="200")
[19:06:25.101]      // while-condition  =>  TRUE
[19:06:25.101]      // while "1"  (timeout="200")
[19:06:25.103]      // while-condition  =>  TRUE
[19:06:25.103]      // while "1"  (timeout="200")
[19:06:25.103]      // while-condition  =>  TRUE
[19:06:25.103]      // while "1"  (timeout="200")
[19:06:25.103]      // while-condition  =>  TRUE
[19:06:25.103]      // while "1"  (timeout="200")
[19:06:25.103]      // while-condition  =>  TRUE
[19:06:25.104]      // while "1"  (timeout="200")
[19:06:25.104]      // while-condition  =>  TRUE
[19:06:25.104]      // while "1"  (timeout="200")
[19:06:25.104]      // while-condition  =>  TRUE
[19:06:25.104]      // while "1"  (timeout="200")
[19:06:25.104]      // while-condition  =>  TRUE
[19:06:25.104]      // while "1"  (timeout="200")
[19:06:25.104]      // while-condition  =>  TRUE
[19:06:25.104]      // while "1"  (timeout="200")
[19:06:25.104]      // while-condition  =>  TRUE
[19:06:25.105]      // while "1"  (timeout="200")
[19:06:25.105]      // while-condition  =>  TRUE
[19:06:25.105]      // while "1"  (timeout="200")
[19:06:25.105]      // while-condition  =>  TRUE
[19:06:25.105]      // while "1"  (timeout="200")
[19:06:25.105]      // while-condition  =>  TRUE
[19:06:25.105]      // while "1"  (timeout="200")
[19:06:25.105]      // while-condition  =>  TRUE
[19:06:25.106]      // while "1"  (timeout="200")
[19:06:25.106]      // while-condition  =>  TRUE
[19:06:25.106]      // while "1"  (timeout="200")
[19:06:25.106]      // while-condition  =>  TRUE
[19:06:25.106]      // while "1"  (timeout="200")
[19:06:25.106]      // while-condition  =>  TRUE
[19:06:25.106]      // while "1"  (timeout="200")
[19:06:25.106]      // while-condition  =>  TRUE
[19:06:25.106]      // while "1"  (timeout="200")
[19:06:25.106]      // while-condition  =>  TRUE
[19:06:25.106]      // while "1"  (timeout="200")
[19:06:25.106]      // while-condition  =>  TRUE
[19:06:25.107]      // while "1"  (timeout="200")
[19:06:25.107]      // while-condition  =>  TRUE
[19:06:25.107]      // while "1"  (timeout="200")
[19:06:25.107]      // while-condition  =>  TRUE
[19:06:25.107]      // while "1"  (timeout="200")
[19:06:25.107]      // while-condition  =>  TRUE
[19:06:25.107]      // while "1"  (timeout="200")
[19:06:25.107]      // while-condition  =>  TRUE
[19:06:25.107]      // while "1"  (timeout="200")
[19:06:25.107]      // while-condition  =>  TRUE
[19:06:25.107]      // while "1"  (timeout="200")
[19:06:25.107]      // while-condition  =>  TRUE
[19:06:25.108]      // while "1"  (timeout="200")
[19:06:25.108]      // while-condition  =>  TRUE
[19:06:25.108]      // while "1"  (timeout="200")
[19:06:25.108]      // while-condition  =>  TRUE
[19:06:25.108]      // while "1"  (timeout="200")
[19:06:25.108]      // while-condition  =>  TRUE
[19:06:25.108]      // while "1"  (timeout="200")
[19:06:25.108]      // while-condition  =>  TRUE
[19:06:25.108]      // while "1"  (timeout="200")
[19:06:25.108]      // while-condition  =>  TRUE
[19:06:25.108]      // while "1"  (timeout="200")
[19:06:25.108]      // while-condition  =>  TRUE
[19:06:25.109]      // while "1"  (timeout="200")
[19:06:25.109]      // while-condition  =>  TRUE
[19:06:25.109]      // while "1"  (timeout="200")
[19:06:25.109]      // while-condition  =>  TRUE
[19:06:25.109]      // while "1"  (timeout="200")
[19:06:25.109]      // while-condition  =>  TRUE
[19:06:25.109]      // while "1"  (timeout="200")
[19:06:25.109]      // while-condition  =>  TRUE
[19:06:25.109]      // while "1"  (timeout="200")
[19:06:25.109]      // while-condition  =>  TRUE
[19:06:25.109]      // while "1"  (timeout="200")
[19:06:25.110]      // while-condition  =>  TRUE
[19:06:25.110]      // while "1"  (timeout="200")
[19:06:25.110]      // while-condition  =>  TRUE
[19:06:25.110]      // while "1"  (timeout="200")
[19:06:25.110]      // while-condition  =>  TRUE
[19:06:25.110]      // while "1"  (timeout="200")
[19:06:25.110]      // while-condition  =>  TRUE
[19:06:25.110]      // while "1"  (timeout="200")
[19:06:25.110]      // while-condition  =>  TRUE
[19:06:25.110]      // while "1"  (timeout="200")
[19:06:25.110]      // while-condition  =>  TRUE
[19:06:25.110]      // while "1"  (timeout="200")
[19:06:25.111]      // while-condition  =>  TRUE
[19:06:25.111]      // while "1"  (timeout="200")
[19:06:25.111]      // while-condition  =>  TRUE
[19:06:25.111]      // while "1"  (timeout="200")
[19:06:25.111]      // while-condition  =>  TRUE
[19:06:25.111]      // while "1"  (timeout="200")
[19:06:25.111]      // while-condition  =>  TRUE
[19:06:25.111]      // while "1"  (timeout="200")
[19:06:25.111]      // while-condition  =>  TRUE
[19:06:25.111]      // while "1"  (timeout="200")
[19:06:25.111]      // while-condition  =>  TRUE
[19:06:25.112]      // while "1"  (timeout="200")
[19:06:25.112]      // while-condition  =>  TRUE
[19:06:25.112]      // while "1"  (timeout="200")
[19:06:25.112]      // while-condition  =>  TRUE
[19:06:25.112]      // while "1"  (timeout="200")
[19:06:25.112]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.113]      // while "1"  (timeout="200")
[19:06:25.113]      // while-condition  =>  TRUE
[19:06:25.114]      // while "1"  (timeout="200")
[19:06:25.114]      // while  =>  TIMEOUT
[19:06:25.114]      // end while "1"
[19:06:25.114]    </control>
[19:06:25.114]    <control if="canReadPins" while="" timeout="0" info="">
[19:06:25.114]      // if-block "canReadPins"
[19:06:25.114]        // =>  TRUE
[19:06:25.114]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:06:25.114]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:06:25.115]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:06:25.115]        // while-condition  =>  FALSE
[19:06:25.115]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:06:25.115]      </control>
[19:06:25.115]      // end if-block "canReadPins"
[19:06:25.115]    </control>
[19:06:25.115]    <control if="!canReadPins" while="" timeout="0" info="">
[19:06:25.115]      // if-block "!canReadPins"
[19:06:25.115]        // =>  FALSE
[19:06:25.115]      // skip if-block "!canReadPins"
[19:06:25.115]    </control>
[19:06:25.115]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:06:25.115]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:06:25.116]        // =>  TRUE
[19:06:25.116]      <block atomic="false" info="">
[19:06:25.116]        WriteAP(0x00, 0x190008);
[19:06:25.116]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:06:25.116]        WriteAP(0xF0, 0x01);
[19:06:25.118]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:06:25.118]      </block>
[19:06:25.118]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:06:25.119]    </control>
[19:06:25.119]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:06:25.119]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:06:25.119]        // =>  FALSE
[19:06:25.119]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:06:25.120]    </control>
[19:06:25.120]    <block atomic="false" info="">
[19:06:25.120]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:06:25.120]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:06:25.120]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:06:25.120]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:06:25.122]      __ap = 0; //lets make sure we reset the access point selection
[19:06:25.122]        // -> [__ap <= 0x00000000]
[19:06:25.122]    </block>
[19:06:25.122]  </sequence>
[19:06:25.122]  
[19:06:25.128]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:06:25.128]  
[19:06:25.129]  <debugvars>
[19:06:25.129]    // Pre-defined
[19:06:25.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:25.129]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:06:25.129]    __dp=0x00000000
[19:06:25.129]    __ap=0x00000000
[19:06:25.129]    __traceout=0x00000000      (Trace Disabled)
[19:06:25.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:25.129]    __FlashAddr=0x00000000
[19:06:25.129]    __FlashLen=0x00000000
[19:06:25.129]    __FlashArg=0x00000000
[19:06:25.129]    __FlashOp=0x00000000
[19:06:25.129]    __Result=0x00000000
[19:06:25.129]  </debugvars>
[19:06:25.129]  
[19:06:25.129]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:06:25.130]    <block atomic="false" info="">
[19:06:25.130]      __var deviceID = 0;
[19:06:25.130]        // -> [deviceID <= 0x00000000]
[19:06:25.130]      __var version = 0;
[19:06:25.130]        // -> [version <= 0x00000000]
[19:06:25.130]      __var partNum = 0;
[19:06:25.130]        // -> [partNum <= 0x00000000]
[19:06:25.130]      __var manuf = 0;
[19:06:25.130]        // -> [manuf <= 0x00000000]
[19:06:25.130]      __var isMSPM0G1X0X_G3X0X = 0;
[19:06:25.130]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:06:25.130]      __var isProduction = 0;
[19:06:25.131]        // -> [isProduction <= 0x00000000]
[19:06:25.131]      __var continueId = 0;
[19:06:25.132]        // -> [continueId <= 0x00000000]
[19:06:25.132]      deviceID =   Read32(0x41C40004);
[19:06:25.133]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:06:25.133]        // -> [deviceID <= 0x2BB8802F]
[19:06:25.133]      version = deviceID >> 28;
[19:06:25.134]        // -> [version <= 0x00000002]
[19:06:25.134]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:06:25.134]        // -> [partNum <= 0x0000BB88]
[19:06:25.134]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:06:25.134]        // -> [manuf <= 0x00000017]
[19:06:25.134]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:06:25.134]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:06:25.134]      isProduction = (version > 0);
[19:06:25.134]        // -> [isProduction <= 0x00000001]
[19:06:25.134]    </block>
[19:06:25.134]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:06:25.134]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:06:25.134]        // =>  FALSE
[19:06:25.135]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:06:25.135]    </control>
[19:06:25.135]    <control if="continueId == 4" while="" timeout="0" info="">
[19:06:25.135]      // if-block "continueId == 4"
[19:06:25.135]        // =>  FALSE
[19:06:25.135]      // skip if-block "continueId == 4"
[19:06:25.136]    </control>
[19:06:25.136]    <control if="!isProduction" while="" timeout="0" info="">
[19:06:25.136]      // if-block "!isProduction"
[19:06:25.136]        // =>  FALSE
[19:06:25.136]      // skip if-block "!isProduction"
[19:06:25.136]    </control>
[19:06:25.136]  </sequence>
[19:06:25.136]  
[19:07:55.659]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:07:55.659]  
[19:07:55.659]  <debugvars>
[19:07:55.659]    // Pre-defined
[19:07:55.659]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:07:55.659]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:07:55.659]    __dp=0x00000000
[19:07:55.659]    __ap=0x00000000
[19:07:55.659]    __traceout=0x00000000      (Trace Disabled)
[19:07:55.661]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:07:55.661]    __FlashAddr=0x00000000
[19:07:55.661]    __FlashLen=0x00000000
[19:07:55.661]    __FlashArg=0x00000000
[19:07:55.661]    __FlashOp=0x00000000
[19:07:55.661]    __Result=0x00000000
[19:07:55.661]  </debugvars>
[19:07:55.661]  
[19:07:55.661]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:07:55.661]    <block atomic="false" info="">
[19:07:55.662]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:07:55.662]        // -> [isSWJ <= 0x00000001]
[19:07:55.662]      __var hasDormant = __protocol & 0x00020000;
[19:07:55.662]        // -> [hasDormant <= 0x00000000]
[19:07:55.662]      __var protType   = __protocol & 0x0000FFFF;
[19:07:55.662]        // -> [protType <= 0x00000002]
[19:07:55.662]    </block>
[19:07:55.662]    <control if="protType == 1" while="" timeout="0" info="">
[19:07:55.662]      // if-block "protType == 1"
[19:07:55.662]        // =>  FALSE
[19:07:55.662]      // skip if-block "protType == 1"
[19:07:55.662]    </control>
[19:07:55.662]    <control if="protType == 2" while="" timeout="0" info="">
[19:07:55.662]      // if-block "protType == 2"
[19:07:55.662]        // =>  TRUE
[19:07:55.662]      <control if="isSWJ" while="" timeout="0" info="">
[19:07:55.662]        // if-block "isSWJ"
[19:07:55.662]          // =>  TRUE
[19:07:55.662]        <control if="hasDormant" while="" timeout="0" info="">
[19:07:55.662]          // if-block "hasDormant"
[19:07:55.662]            // =>  FALSE
[19:07:55.664]          // skip if-block "hasDormant"
[19:07:55.664]        </control>
[19:07:55.664]        <control if="!hasDormant" while="" timeout="0" info="">
[19:07:55.664]          // if-block "!hasDormant"
[19:07:55.664]            // =>  TRUE
[19:07:55.664]          <block atomic="false" info="">
[19:07:55.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:07:55.665]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:07:55.665]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:07:55.665]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:07:55.665]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:07:55.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:07:55.666]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:07:55.666]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:07:55.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:07:55.667]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:07:55.667]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:07:55.667]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:07:55.667]          </block>
[19:07:55.667]          // end if-block "!hasDormant"
[19:07:55.668]        </control>
[19:07:55.668]        // end if-block "isSWJ"
[19:07:55.668]      </control>
[19:07:55.668]      <control if="!isSWJ" while="" timeout="0" info="">
[19:07:55.668]        // if-block "!isSWJ"
[19:07:55.668]          // =>  FALSE
[19:07:55.668]        // skip if-block "!isSWJ"
[19:07:55.668]      </control>
[19:07:55.668]      <block atomic="false" info="">
[19:07:55.668]        ReadDP(0x0);
[19:07:55.669]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:07:55.669]      </block>
[19:07:55.669]      // end if-block "protType == 2"
[19:07:55.669]    </control>
[19:07:55.669]  </sequence>
[19:07:55.669]  
[19:07:55.669]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:07:55.669]  
[19:07:55.669]  <debugvars>
[19:07:55.669]    // Pre-defined
[19:07:55.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:07:55.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:07:55.671]    __dp=0x00000000
[19:07:55.671]    __ap=0x00000000
[19:07:55.671]    __traceout=0x00000000      (Trace Disabled)
[19:07:55.671]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:07:55.671]    __FlashAddr=0x00000000
[19:07:55.671]    __FlashLen=0x00000000
[19:07:55.671]    __FlashArg=0x00000000
[19:07:55.671]    __FlashOp=0x00000000
[19:07:55.671]    __Result=0x00000000
[19:07:55.672]  </debugvars>
[19:07:55.672]  
[19:07:55.672]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:07:55.672]    <block atomic="false" info="">
[19:07:55.672]      __var SW_DP_ABORT       = 0x0;
[19:07:55.672]        // -> [SW_DP_ABORT <= 0x00000000]
[19:07:55.672]      __var DP_CTRL_STAT      = 0x4;
[19:07:55.672]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:07:55.672]      __var DP_SELECT         = 0x8;
[19:07:55.672]        // -> [DP_SELECT <= 0x00000008]
[19:07:55.672]      __var powered_down      = 0;
[19:07:55.672]        // -> [powered_down <= 0x00000000]
[19:07:55.672]      WriteDP(DP_SELECT, 0x00000000);
[19:07:55.672]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:07:55.672]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:07:55.674]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:07:55.674]        // -> [powered_down <= 0x00000001]
[19:07:55.674]    </block>
[19:07:55.674]    <control if="powered_down" while="" timeout="0" info="">
[19:07:55.674]      // if-block "powered_down"
[19:07:55.674]        // =>  TRUE
[19:07:55.674]      <block atomic="false" info="">
[19:07:55.674]        Message(0, "Debug/System power-up request sent");
[19:07:55.676]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:07:55.677]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:07:55.677]      </block>
[19:07:55.677]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:07:55.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:07:55.677]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:07:55.678]        // while-condition  =>  FALSE
[19:07:55.678]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:07:55.678]      </control>
[19:07:55.678]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:07:55.678]        // if-block "(__protocol & 0xFFFF) == 1"
[19:07:55.678]          // =>  FALSE
[19:07:55.678]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:07:55.678]      </control>
[19:07:55.678]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:07:55.678]        // if-block "(__protocol & 0xFFFF) == 2"
[19:07:55.678]          // =>  TRUE
[19:07:55.679]        <block atomic="false" info="">
[19:07:55.679]          Message(0, "executing SWD power up");
[19:07:55.681]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:07:55.681]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:07:55.681]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:07:55.682]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:07:55.682]        </block>
[19:07:55.682]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:07:55.682]      </control>
[19:07:55.682]      // end if-block "powered_down"
[19:07:55.682]    </control>
[19:07:55.682]    <block atomic="false" info="">
[19:07:55.683]      __var DEBUG_PORT_VAL    = 0;
[19:07:55.683]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:07:55.683]      __var ACCESS_POINT_VAL  = 0;
[19:07:55.683]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:07:55.683]      __ap = 1; 
[19:07:55.683]        // -> [__ap <= 0x00000001]
[19:07:55.684]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:07:55.685]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:07:55.685]      __ap = 4;
[19:07:55.685]        // -> [__ap <= 0x00000004]
[19:07:55.685]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:07:55.686]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:07:55.686]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:07:55.686]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:07:55.687]    </block>
[19:07:55.687]    <block atomic="false" info="">
[19:07:55.687]      __var nReset = 0x80;
[19:07:55.687]        // -> [nReset <= 0x00000080]
[19:07:55.687]      __var canReadPins = 0;
[19:07:55.688]        // -> [canReadPins <= 0x00000000]
[19:07:55.688]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:07:55.688]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:07:55.688]        // -> [canReadPins <= 0x00000001]
[19:07:55.688]    </block>
[19:07:55.688]    <control if="" while="1" timeout="200" info="">
[19:07:55.688]      // while "1"  (timeout="200")
[19:07:55.688]      // while-condition  =>  TRUE
[19:07:55.688]      // while "1"  (timeout="200")
[19:07:55.688]      // while-condition  =>  TRUE
[19:07:55.689]      // while "1"  (timeout="200")
[19:07:55.689]      // while-condition  =>  TRUE
[19:07:55.689]      // while "1"  (timeout="200")
[19:07:55.689]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.690]      // while "1"  (timeout="200")
[19:07:55.690]      // while-condition  =>  TRUE
[19:07:55.692]      // while "1"  (timeout="200")
[19:07:55.692]      // while  =>  TIMEOUT
[19:07:55.692]      // end while "1"
[19:07:55.692]    </control>
[19:07:55.692]    <control if="canReadPins" while="" timeout="0" info="">
[19:07:55.692]      // if-block "canReadPins"
[19:07:55.692]        // =>  TRUE
[19:07:55.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:07:55.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:07:55.693]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:07:55.693]        // while-condition  =>  FALSE
[19:07:55.693]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:07:55.693]      </control>
[19:07:55.693]      // end if-block "canReadPins"
[19:07:55.693]    </control>
[19:07:55.693]    <control if="!canReadPins" while="" timeout="0" info="">
[19:07:55.693]      // if-block "!canReadPins"
[19:07:55.693]        // =>  FALSE
[19:07:55.693]      // skip if-block "!canReadPins"
[19:07:55.693]    </control>
[19:07:55.693]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:07:55.693]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:07:55.693]        // =>  TRUE
[19:07:55.693]      <block atomic="false" info="">
[19:07:55.693]        WriteAP(0x00, 0x190008);
[19:07:55.695]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:07:55.695]        WriteAP(0xF0, 0x01);
[19:07:55.696]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:07:55.696]      </block>
[19:07:55.696]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:07:55.696]    </control>
[19:07:55.696]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:07:55.696]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:07:55.696]        // =>  FALSE
[19:07:55.696]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:07:55.696]    </control>
[19:07:55.696]    <block atomic="false" info="">
[19:07:55.696]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:07:55.697]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:07:55.697]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:07:55.697]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:07:55.699]      __ap = 0; //lets make sure we reset the access point selection
[19:07:55.699]        // -> [__ap <= 0x00000000]
[19:07:55.699]    </block>
[19:07:55.699]  </sequence>
[19:07:55.699]  
[19:07:55.708]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:07:55.708]  
[19:07:55.708]  <debugvars>
[19:07:55.708]    // Pre-defined
[19:07:55.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:07:55.709]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:07:55.709]    __dp=0x00000000
[19:07:55.709]    __ap=0x00000000
[19:07:55.709]    __traceout=0x00000000      (Trace Disabled)
[19:07:55.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:07:55.709]    __FlashAddr=0x00000000
[19:07:55.709]    __FlashLen=0x00000000
[19:07:55.709]    __FlashArg=0x00000000
[19:07:55.709]    __FlashOp=0x00000000
[19:07:55.709]    __Result=0x00000000
[19:07:55.709]  </debugvars>
[19:07:55.709]  
[19:07:55.709]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:07:55.709]    <block atomic="false" info="">
[19:07:55.709]      __var deviceID = 0;
[19:07:55.709]        // -> [deviceID <= 0x00000000]
[19:07:55.710]      __var version = 0;
[19:07:55.710]        // -> [version <= 0x00000000]
[19:07:55.710]      __var partNum = 0;
[19:07:55.710]        // -> [partNum <= 0x00000000]
[19:07:55.711]      __var manuf = 0;
[19:07:55.711]        // -> [manuf <= 0x00000000]
[19:07:55.711]      __var isMSPM0G1X0X_G3X0X = 0;
[19:07:55.711]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:07:55.711]      __var isProduction = 0;
[19:07:55.711]        // -> [isProduction <= 0x00000000]
[19:07:55.711]      __var continueId = 0;
[19:07:55.711]        // -> [continueId <= 0x00000000]
[19:07:55.711]      deviceID =   Read32(0x41C40004);
[19:07:55.712]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:07:55.713]        // -> [deviceID <= 0x2BB8802F]
[19:07:55.713]      version = deviceID >> 28;
[19:07:55.713]        // -> [version <= 0x00000002]
[19:07:55.713]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:07:55.713]        // -> [partNum <= 0x0000BB88]
[19:07:55.713]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:07:55.713]        // -> [manuf <= 0x00000017]
[19:07:55.713]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:07:55.713]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:07:55.714]      isProduction = (version > 0);
[19:07:55.714]        // -> [isProduction <= 0x00000001]
[19:07:55.714]    </block>
[19:07:55.714]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:07:55.714]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:07:55.714]        // =>  FALSE
[19:07:55.714]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:07:55.714]    </control>
[19:07:55.714]    <control if="continueId == 4" while="" timeout="0" info="">
[19:07:55.714]      // if-block "continueId == 4"
[19:07:55.715]        // =>  FALSE
[19:07:55.715]      // skip if-block "continueId == 4"
[19:07:55.715]    </control>
[19:07:55.715]    <control if="!isProduction" while="" timeout="0" info="">
[19:07:55.715]      // if-block "!isProduction"
[19:07:55.715]        // =>  FALSE
[19:07:55.715]      // skip if-block "!isProduction"
[19:07:55.715]    </control>
[19:07:55.715]  </sequence>
[19:07:55.715]  
[19:10:01.875]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:10:01.875]  
[19:10:01.876]  <debugvars>
[19:10:01.876]    // Pre-defined
[19:10:01.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:10:01.876]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:10:01.876]    __dp=0x00000000
[19:10:01.876]    __ap=0x00000000
[19:10:01.876]    __traceout=0x00000000      (Trace Disabled)
[19:10:01.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:10:01.876]    __FlashAddr=0x00000000
[19:10:01.876]    __FlashLen=0x00000000
[19:10:01.876]    __FlashArg=0x00000000
[19:10:01.877]    __FlashOp=0x00000000
[19:10:01.877]    __Result=0x00000000
[19:10:01.877]  </debugvars>
[19:10:01.877]  
[19:10:01.877]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:10:01.877]    <block atomic="false" info="">
[19:10:01.877]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:10:01.877]        // -> [isSWJ <= 0x00000001]
[19:10:01.877]      __var hasDormant = __protocol & 0x00020000;
[19:10:01.877]        // -> [hasDormant <= 0x00000000]
[19:10:01.877]      __var protType   = __protocol & 0x0000FFFF;
[19:10:01.877]        // -> [protType <= 0x00000002]
[19:10:01.878]    </block>
[19:10:01.878]    <control if="protType == 1" while="" timeout="0" info="">
[19:10:01.878]      // if-block "protType == 1"
[19:10:01.878]        // =>  FALSE
[19:10:01.878]      // skip if-block "protType == 1"
[19:10:01.879]    </control>
[19:10:01.879]    <control if="protType == 2" while="" timeout="0" info="">
[19:10:01.880]      // if-block "protType == 2"
[19:10:01.880]        // =>  TRUE
[19:10:01.880]      <control if="isSWJ" while="" timeout="0" info="">
[19:10:01.880]        // if-block "isSWJ"
[19:10:01.880]          // =>  TRUE
[19:10:01.880]        <control if="hasDormant" while="" timeout="0" info="">
[19:10:01.880]          // if-block "hasDormant"
[19:10:01.880]            // =>  FALSE
[19:10:01.880]          // skip if-block "hasDormant"
[19:10:01.881]        </control>
[19:10:01.881]        <control if="!hasDormant" while="" timeout="0" info="">
[19:10:01.881]          // if-block "!hasDormant"
[19:10:01.881]            // =>  TRUE
[19:10:01.881]          <block atomic="false" info="">
[19:10:01.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:10:01.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:10:01.882]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:10:01.882]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:10:01.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:10:01.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:10:01.883]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:10:01.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:10:01.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:10:01.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:10:01.884]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:10:01.884]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:10:01.884]          </block>
[19:10:01.884]          // end if-block "!hasDormant"
[19:10:01.884]        </control>
[19:10:01.885]        // end if-block "isSWJ"
[19:10:01.885]      </control>
[19:10:01.885]      <control if="!isSWJ" while="" timeout="0" info="">
[19:10:01.885]        // if-block "!isSWJ"
[19:10:01.885]          // =>  FALSE
[19:10:01.885]        // skip if-block "!isSWJ"
[19:10:01.885]      </control>
[19:10:01.885]      <block atomic="false" info="">
[19:10:01.885]        ReadDP(0x0);
[19:10:01.886]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:10:01.886]      </block>
[19:10:01.886]      // end if-block "protType == 2"
[19:10:01.886]    </control>
[19:10:01.886]  </sequence>
[19:10:01.886]  
[19:10:01.886]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:10:01.886]  
[19:10:01.886]  <debugvars>
[19:10:01.886]    // Pre-defined
[19:10:01.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:10:01.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:10:01.888]    __dp=0x00000000
[19:10:01.888]    __ap=0x00000000
[19:10:01.888]    __traceout=0x00000000      (Trace Disabled)
[19:10:01.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:10:01.888]    __FlashAddr=0x00000000
[19:10:01.888]    __FlashLen=0x00000000
[19:10:01.888]    __FlashArg=0x00000000
[19:10:01.888]    __FlashOp=0x00000000
[19:10:01.888]    __Result=0x00000000
[19:10:01.888]  </debugvars>
[19:10:01.888]  
[19:10:01.888]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:10:01.888]    <block atomic="false" info="">
[19:10:01.888]      __var SW_DP_ABORT       = 0x0;
[19:10:01.889]        // -> [SW_DP_ABORT <= 0x00000000]
[19:10:01.889]      __var DP_CTRL_STAT      = 0x4;
[19:10:01.889]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:10:01.889]      __var DP_SELECT         = 0x8;
[19:10:01.889]        // -> [DP_SELECT <= 0x00000008]
[19:10:01.889]      __var powered_down      = 0;
[19:10:01.889]        // -> [powered_down <= 0x00000000]
[19:10:01.889]      WriteDP(DP_SELECT, 0x00000000);
[19:10:01.889]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:10:01.889]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:10:01.890]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:10:01.890]        // -> [powered_down <= 0x00000001]
[19:10:01.890]    </block>
[19:10:01.890]    <control if="powered_down" while="" timeout="0" info="">
[19:10:01.890]      // if-block "powered_down"
[19:10:01.890]        // =>  TRUE
[19:10:01.890]      <block atomic="false" info="">
[19:10:01.891]        Message(0, "Debug/System power-up request sent");
[19:10:01.893]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:10:01.893]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:10:01.893]      </block>
[19:10:01.893]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:10:01.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:10:01.894]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:10:01.894]        // while-condition  =>  FALSE
[19:10:01.894]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:10:01.894]      </control>
[19:10:01.894]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:10:01.894]        // if-block "(__protocol & 0xFFFF) == 1"
[19:10:01.894]          // =>  FALSE
[19:10:01.894]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:10:01.894]      </control>
[19:10:01.894]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:10:01.894]        // if-block "(__protocol & 0xFFFF) == 2"
[19:10:01.895]          // =>  TRUE
[19:10:01.895]        <block atomic="false" info="">
[19:10:01.895]          Message(0, "executing SWD power up");
[19:10:01.897]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:10:01.897]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:10:01.897]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:10:01.898]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:10:01.898]        </block>
[19:10:01.899]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:10:01.899]      </control>
[19:10:01.899]      // end if-block "powered_down"
[19:10:01.899]    </control>
[19:10:01.899]    <block atomic="false" info="">
[19:10:01.899]      __var DEBUG_PORT_VAL    = 0;
[19:10:01.899]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:10:01.899]      __var ACCESS_POINT_VAL  = 0;
[19:10:01.899]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:10:01.899]      __ap = 1; 
[19:10:01.899]        // -> [__ap <= 0x00000001]
[19:10:01.899]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:10:01.901]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:10:01.901]      __ap = 4;
[19:10:01.901]        // -> [__ap <= 0x00000004]
[19:10:01.901]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:10:01.901]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:10:01.902]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:10:01.902]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:10:01.903]    </block>
[19:10:01.904]    <block atomic="false" info="">
[19:10:01.904]      __var nReset = 0x80;
[19:10:01.904]        // -> [nReset <= 0x00000080]
[19:10:01.904]      __var canReadPins = 0;
[19:10:01.904]        // -> [canReadPins <= 0x00000000]
[19:10:01.904]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:10:01.904]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:10:01.904]        // -> [canReadPins <= 0x00000001]
[19:10:01.905]    </block>
[19:10:01.905]    <control if="" while="1" timeout="200" info="">
[19:10:01.905]      // while "1"  (timeout="200")
[19:10:01.905]      // while-condition  =>  TRUE
[19:10:01.905]      // while "1"  (timeout="200")
[19:10:01.905]      // while-condition  =>  TRUE
[19:10:01.905]      // while "1"  (timeout="200")
[19:10:01.905]      // while-condition  =>  TRUE
[19:10:01.905]      // while "1"  (timeout="200")
[19:10:01.905]      // while-condition  =>  TRUE
[19:10:01.905]      // while "1"  (timeout="200")
[19:10:01.905]      // while-condition  =>  TRUE
[19:10:01.905]      // while "1"  (timeout="200")
[19:10:01.906]      // while-condition  =>  TRUE
[19:10:01.906]      // while "1"  (timeout="200")
[19:10:01.906]      // while-condition  =>  TRUE
[19:10:01.906]      // while "1"  (timeout="200")
[19:10:01.906]      // while-condition  =>  TRUE
[19:10:01.907]      // while "1"  (timeout="200")
[19:10:01.907]      // while-condition  =>  TRUE
[19:10:01.907]      // while "1"  (timeout="200")
[19:10:01.907]      // while-condition  =>  TRUE
[19:10:01.907]      // while "1"  (timeout="200")
[19:10:01.908]      // while-condition  =>  TRUE
[19:10:01.908]      // while "1"  (timeout="200")
[19:10:01.908]      // while-condition  =>  TRUE
[19:10:01.908]      // while "1"  (timeout="200")
[19:10:01.908]      // while-condition  =>  TRUE
[19:10:01.908]      // while "1"  (timeout="200")
[19:10:01.908]      // while-condition  =>  TRUE
[19:10:01.908]      // while "1"  (timeout="200")
[19:10:01.908]      // while-condition  =>  TRUE
[19:10:01.908]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.909]      // while-condition  =>  TRUE
[19:10:01.909]      // while "1"  (timeout="200")
[19:10:01.911]      // while-condition  =>  TRUE
[19:10:01.911]      // while "1"  (timeout="200")
[19:10:01.911]      // while  =>  TIMEOUT
[19:10:01.911]      // end while "1"
[19:10:01.911]    </control>
[19:10:01.911]    <control if="canReadPins" while="" timeout="0" info="">
[19:10:01.911]      // if-block "canReadPins"
[19:10:01.911]        // =>  TRUE
[19:10:01.911]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:10:01.911]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:10:01.912]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:10:01.912]        // while-condition  =>  FALSE
[19:10:01.912]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:10:01.912]      </control>
[19:10:01.912]      // end if-block "canReadPins"
[19:10:01.912]    </control>
[19:10:01.912]    <control if="!canReadPins" while="" timeout="0" info="">
[19:10:01.912]      // if-block "!canReadPins"
[19:10:01.912]        // =>  FALSE
[19:10:01.912]      // skip if-block "!canReadPins"
[19:10:01.913]    </control>
[19:10:01.913]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:10:01.913]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:10:01.913]        // =>  TRUE
[19:10:01.913]      <block atomic="false" info="">
[19:10:01.913]        WriteAP(0x00, 0x190008);
[19:10:01.914]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:10:01.914]        WriteAP(0xF0, 0x01);
[19:10:01.915]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:10:01.915]      </block>
[19:10:01.915]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:10:01.915]    </control>
[19:10:01.915]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:10:01.915]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:10:01.915]        // =>  FALSE
[19:10:01.915]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:10:01.915]    </control>
[19:10:01.915]    <block atomic="false" info="">
[19:10:01.915]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:10:01.916]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:10:01.917]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:10:01.917]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:10:01.919]      __ap = 0; //lets make sure we reset the access point selection
[19:10:01.919]        // -> [__ap <= 0x00000000]
[19:10:01.919]    </block>
[19:10:01.919]  </sequence>
[19:10:01.919]  
[19:10:01.925]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:10:01.925]  
[19:10:01.925]  <debugvars>
[19:10:01.925]    // Pre-defined
[19:10:01.925]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:10:01.925]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:10:01.925]    __dp=0x00000000
[19:10:01.925]    __ap=0x00000000
[19:10:01.926]    __traceout=0x00000000      (Trace Disabled)
[19:10:01.926]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:10:01.926]    __FlashAddr=0x00000000
[19:10:01.926]    __FlashLen=0x00000000
[19:10:01.926]    __FlashArg=0x00000000
[19:10:01.926]    __FlashOp=0x00000000
[19:10:01.926]    __Result=0x00000000
[19:10:01.926]  </debugvars>
[19:10:01.926]  
[19:10:01.926]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:10:01.926]    <block atomic="false" info="">
[19:10:01.927]      __var deviceID = 0;
[19:10:01.927]        // -> [deviceID <= 0x00000000]
[19:10:01.927]      __var version = 0;
[19:10:01.927]        // -> [version <= 0x00000000]
[19:10:01.927]      __var partNum = 0;
[19:10:01.927]        // -> [partNum <= 0x00000000]
[19:10:01.927]      __var manuf = 0;
[19:10:01.928]        // -> [manuf <= 0x00000000]
[19:10:01.928]      __var isMSPM0G1X0X_G3X0X = 0;
[19:10:01.928]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:10:01.928]      __var isProduction = 0;
[19:10:01.928]        // -> [isProduction <= 0x00000000]
[19:10:01.928]      __var continueId = 0;
[19:10:01.928]        // -> [continueId <= 0x00000000]
[19:10:01.928]      deviceID =   Read32(0x41C40004);
[19:10:01.930]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:10:01.930]        // -> [deviceID <= 0x2BB8802F]
[19:10:01.930]      version = deviceID >> 28;
[19:10:01.930]        // -> [version <= 0x00000002]
[19:10:01.930]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:10:01.930]        // -> [partNum <= 0x0000BB88]
[19:10:01.931]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:10:01.931]        // -> [manuf <= 0x00000017]
[19:10:01.931]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:10:01.931]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:10:01.931]      isProduction = (version > 0);
[19:10:01.931]        // -> [isProduction <= 0x00000001]
[19:10:01.931]    </block>
[19:10:01.931]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:10:01.931]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:10:01.931]        // =>  FALSE
[19:10:01.931]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:10:01.932]    </control>
[19:10:01.932]    <control if="continueId == 4" while="" timeout="0" info="">
[19:10:01.932]      // if-block "continueId == 4"
[19:10:01.932]        // =>  FALSE
[19:10:01.932]      // skip if-block "continueId == 4"
[19:10:01.932]    </control>
[19:10:01.932]    <control if="!isProduction" while="" timeout="0" info="">
[19:10:01.932]      // if-block "!isProduction"
[19:10:01.932]        // =>  FALSE
[19:10:01.932]      // skip if-block "!isProduction"
[19:10:01.932]    </control>
[19:10:01.933]  </sequence>
[19:10:01.933]  
[19:10:17.733]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:10:17.733]  
[19:10:17.733]  <debugvars>
[19:10:17.733]    // Pre-defined
[19:10:17.733]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:10:17.734]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:10:17.734]    __dp=0x00000000
[19:10:17.734]    __ap=0x00000000
[19:10:17.734]    __traceout=0x00000000      (Trace Disabled)
[19:10:17.734]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:10:17.734]    __FlashAddr=0x00000000
[19:10:17.734]    __FlashLen=0x00000000
[19:10:17.734]    __FlashArg=0x00000000
[19:10:17.734]    __FlashOp=0x00000000
[19:10:17.734]    __Result=0x00000000
[19:10:17.734]  </debugvars>
[19:10:17.734]  
[19:10:17.734]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:10:17.734]    <block atomic="false" info="">
[19:10:17.734]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:10:17.734]        // -> [isSWJ <= 0x00000001]
[19:10:17.734]      __var hasDormant = __protocol & 0x00020000;
[19:10:17.734]        // -> [hasDormant <= 0x00000000]
[19:10:17.734]      __var protType   = __protocol & 0x0000FFFF;
[19:10:17.734]        // -> [protType <= 0x00000002]
[19:10:17.734]    </block>
[19:10:17.736]    <control if="protType == 1" while="" timeout="0" info="">
[19:10:17.736]      // if-block "protType == 1"
[19:10:17.736]        // =>  FALSE
[19:10:17.736]      // skip if-block "protType == 1"
[19:10:17.736]    </control>
[19:10:17.736]    <control if="protType == 2" while="" timeout="0" info="">
[19:10:17.736]      // if-block "protType == 2"
[19:10:17.736]        // =>  TRUE
[19:10:17.736]      <control if="isSWJ" while="" timeout="0" info="">
[19:10:17.737]        // if-block "isSWJ"
[19:10:17.737]          // =>  TRUE
[19:10:17.737]        <control if="hasDormant" while="" timeout="0" info="">
[19:10:17.737]          // if-block "hasDormant"
[19:10:17.737]            // =>  FALSE
[19:10:17.737]          // skip if-block "hasDormant"
[19:10:17.738]        </control>
[19:10:17.738]        <control if="!hasDormant" while="" timeout="0" info="">
[19:10:17.738]          // if-block "!hasDormant"
[19:10:17.738]            // =>  TRUE
[19:10:17.738]          <block atomic="false" info="">
[19:10:17.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:10:17.739]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:10:17.739]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:10:17.739]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:10:17.739]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:10:17.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:10:17.740]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:10:17.740]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:10:17.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:10:17.741]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:10:17.741]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:10:17.741]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:10:17.741]          </block>
[19:10:17.742]          // end if-block "!hasDormant"
[19:10:17.742]        </control>
[19:10:17.742]        // end if-block "isSWJ"
[19:10:17.742]      </control>
[19:10:17.742]      <control if="!isSWJ" while="" timeout="0" info="">
[19:10:17.742]        // if-block "!isSWJ"
[19:10:17.742]          // =>  FALSE
[19:10:17.743]        // skip if-block "!isSWJ"
[19:10:17.743]      </control>
[19:10:17.743]      <block atomic="false" info="">
[19:10:17.743]        ReadDP(0x0);
[19:10:17.743]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:10:17.743]      </block>
[19:10:17.743]      // end if-block "protType == 2"
[19:10:17.744]    </control>
[19:10:17.744]  </sequence>
[19:10:17.744]  
[19:10:17.744]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:10:17.744]  
[19:10:17.744]  <debugvars>
[19:10:17.744]    // Pre-defined
[19:10:17.745]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:10:17.745]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:10:17.745]    __dp=0x00000000
[19:10:17.745]    __ap=0x00000000
[19:10:17.745]    __traceout=0x00000000      (Trace Disabled)
[19:10:17.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:10:17.746]    __FlashAddr=0x00000000
[19:10:17.746]    __FlashLen=0x00000000
[19:10:17.746]    __FlashArg=0x00000000
[19:10:17.746]    __FlashOp=0x00000000
[19:10:17.746]    __Result=0x00000000
[19:10:17.746]  </debugvars>
[19:10:17.746]  
[19:10:17.746]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:10:17.746]    <block atomic="false" info="">
[19:10:17.746]      __var SW_DP_ABORT       = 0x0;
[19:10:17.746]        // -> [SW_DP_ABORT <= 0x00000000]
[19:10:17.747]      __var DP_CTRL_STAT      = 0x4;
[19:10:17.747]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:10:17.747]      __var DP_SELECT         = 0x8;
[19:10:17.747]        // -> [DP_SELECT <= 0x00000008]
[19:10:17.747]      __var powered_down      = 0;
[19:10:17.747]        // -> [powered_down <= 0x00000000]
[19:10:17.747]      WriteDP(DP_SELECT, 0x00000000);
[19:10:17.748]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:10:17.748]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:10:17.748]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:10:17.749]        // -> [powered_down <= 0x00000001]
[19:10:17.749]    </block>
[19:10:17.749]    <control if="powered_down" while="" timeout="0" info="">
[19:10:17.749]      // if-block "powered_down"
[19:10:17.749]        // =>  TRUE
[19:10:17.749]      <block atomic="false" info="">
[19:10:17.749]        Message(0, "Debug/System power-up request sent");
[19:10:17.750]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:10:17.751]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:10:17.751]      </block>
[19:10:17.751]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:10:17.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:10:17.751]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:10:17.751]        // while-condition  =>  FALSE
[19:10:17.751]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:10:17.751]      </control>
[19:10:17.752]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:10:17.752]        // if-block "(__protocol & 0xFFFF) == 1"
[19:10:17.752]          // =>  FALSE
[19:10:17.752]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:10:17.752]      </control>
[19:10:17.752]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:10:17.753]        // if-block "(__protocol & 0xFFFF) == 2"
[19:10:17.753]          // =>  TRUE
[19:10:17.753]        <block atomic="false" info="">
[19:10:17.753]          Message(0, "executing SWD power up");
[19:10:17.754]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:10:17.755]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:10:17.755]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:10:17.756]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:10:17.756]        </block>
[19:10:17.756]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:10:17.756]      </control>
[19:10:17.756]      // end if-block "powered_down"
[19:10:17.756]    </control>
[19:10:17.756]    <block atomic="false" info="">
[19:10:17.757]      __var DEBUG_PORT_VAL    = 0;
[19:10:17.757]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:10:17.757]      __var ACCESS_POINT_VAL  = 0;
[19:10:17.757]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:10:17.757]      __ap = 1; 
[19:10:17.757]        // -> [__ap <= 0x00000001]
[19:10:17.757]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:10:17.758]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:10:17.758]      __ap = 4;
[19:10:17.758]        // -> [__ap <= 0x00000004]
[19:10:17.758]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:10:17.759]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:10:17.759]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:10:17.759]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:10:17.761]    </block>
[19:10:17.762]    <block atomic="false" info="">
[19:10:17.762]      __var nReset = 0x80;
[19:10:17.762]        // -> [nReset <= 0x00000080]
[19:10:17.762]      __var canReadPins = 0;
[19:10:17.762]        // -> [canReadPins <= 0x00000000]
[19:10:17.762]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:10:17.762]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:10:17.762]        // -> [canReadPins <= 0x00000001]
[19:10:17.762]    </block>
[19:10:17.763]    <control if="" while="1" timeout="200" info="">
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.763]      // while "1"  (timeout="200")
[19:10:17.763]      // while-condition  =>  TRUE
[19:10:17.765]      // while "1"  (timeout="200")
[19:10:17.765]      // while-condition  =>  TRUE
[19:10:17.765]      // while "1"  (timeout="200")
[19:10:17.765]      // while-condition  =>  TRUE
[19:10:17.765]      // while "1"  (timeout="200")
[19:10:17.765]      // while-condition  =>  TRUE
[19:10:17.765]      // while "1"  (timeout="200")
[19:10:17.765]      // while-condition  =>  TRUE
[19:10:17.765]      // while "1"  (timeout="200")
[19:10:17.765]      // while-condition  =>  TRUE
[19:10:17.765]      // while "1"  (timeout="200")
[19:10:17.766]      // while-condition  =>  TRUE
[19:10:17.766]      // while "1"  (timeout="200")
[19:10:17.766]      // while-condition  =>  TRUE
[19:10:17.766]      // while "1"  (timeout="200")
[19:10:17.766]      // while-condition  =>  TRUE
[19:10:17.766]      // while "1"  (timeout="200")
[19:10:17.766]      // while-condition  =>  TRUE
[19:10:17.766]      // while "1"  (timeout="200")
[19:10:17.766]      // while-condition  =>  TRUE
[19:10:17.766]      // while "1"  (timeout="200")
[19:10:17.766]      // while-condition  =>  TRUE
[19:10:17.767]      // while "1"  (timeout="200")
[19:10:17.767]      // while-condition  =>  TRUE
[19:10:17.767]      // while "1"  (timeout="200")
[19:10:17.767]      // while-condition  =>  TRUE
[19:10:17.767]      // while "1"  (timeout="200")
[19:10:17.767]      // while-condition  =>  TRUE
[19:10:17.767]      // while "1"  (timeout="200")
[19:10:17.767]      // while-condition  =>  TRUE
[19:10:17.768]      // while "1"  (timeout="200")
[19:10:17.768]      // while-condition  =>  TRUE
[19:10:17.768]      // while "1"  (timeout="200")
[19:10:17.768]      // while-condition  =>  TRUE
[19:10:17.768]      // while "1"  (timeout="200")
[19:10:17.768]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.769]      // while-condition  =>  TRUE
[19:10:17.769]      // while "1"  (timeout="200")
[19:10:17.770]      // while-condition  =>  TRUE
[19:10:17.770]      // while "1"  (timeout="200")
[19:10:17.770]      // while  =>  TIMEOUT
[19:10:17.770]      // end while "1"
[19:10:17.770]    </control>
[19:10:17.770]    <control if="canReadPins" while="" timeout="0" info="">
[19:10:17.770]      // if-block "canReadPins"
[19:10:17.770]        // =>  TRUE
[19:10:17.770]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:10:17.770]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:10:17.771]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:10:17.771]        // while-condition  =>  FALSE
[19:10:17.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:10:17.771]      </control>
[19:10:17.771]      // end if-block "canReadPins"
[19:10:17.771]    </control>
[19:10:17.771]    <control if="!canReadPins" while="" timeout="0" info="">
[19:10:17.771]      // if-block "!canReadPins"
[19:10:17.771]        // =>  FALSE
[19:10:17.772]      // skip if-block "!canReadPins"
[19:10:17.772]    </control>
[19:10:17.772]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:10:17.772]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:10:17.772]        // =>  TRUE
[19:10:17.772]      <block atomic="false" info="">
[19:10:17.772]        WriteAP(0x00, 0x190008);
[19:10:17.773]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:10:17.773]        WriteAP(0xF0, 0x01);
[19:10:17.775]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:10:17.775]      </block>
[19:10:17.775]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:10:17.775]    </control>
[19:10:17.775]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:10:17.775]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:10:17.775]        // =>  FALSE
[19:10:17.775]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:10:17.775]    </control>
[19:10:17.775]    <block atomic="false" info="">
[19:10:17.776]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:10:17.777]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:10:17.777]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:10:17.777]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:10:17.778]      __ap = 0; //lets make sure we reset the access point selection
[19:10:17.778]        // -> [__ap <= 0x00000000]
[19:10:17.779]    </block>
[19:10:17.779]  </sequence>
[19:10:17.779]  
[19:10:17.785]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:10:17.785]  
[19:10:17.785]  <debugvars>
[19:10:17.785]    // Pre-defined
[19:10:17.785]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:10:17.785]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:10:17.785]    __dp=0x00000000
[19:10:17.785]    __ap=0x00000000
[19:10:17.786]    __traceout=0x00000000      (Trace Disabled)
[19:10:17.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:10:17.786]    __FlashAddr=0x00000000
[19:10:17.786]    __FlashLen=0x00000000
[19:10:17.786]    __FlashArg=0x00000000
[19:10:17.786]    __FlashOp=0x00000000
[19:10:17.786]    __Result=0x00000000
[19:10:17.786]  </debugvars>
[19:10:17.786]  
[19:10:17.786]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:10:17.786]    <block atomic="false" info="">
[19:10:17.786]      __var deviceID = 0;
[19:10:17.786]        // -> [deviceID <= 0x00000000]
[19:10:17.787]      __var version = 0;
[19:10:17.787]        // -> [version <= 0x00000000]
[19:10:17.787]      __var partNum = 0;
[19:10:17.787]        // -> [partNum <= 0x00000000]
[19:10:17.787]      __var manuf = 0;
[19:10:17.787]        // -> [manuf <= 0x00000000]
[19:10:17.787]      __var isMSPM0G1X0X_G3X0X = 0;
[19:10:17.787]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:10:17.787]      __var isProduction = 0;
[19:10:17.788]        // -> [isProduction <= 0x00000000]
[19:10:17.788]      __var continueId = 0;
[19:10:17.788]        // -> [continueId <= 0x00000000]
[19:10:17.788]      deviceID =   Read32(0x41C40004);
[19:10:17.789]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:10:17.789]        // -> [deviceID <= 0x2BB8802F]
[19:10:17.789]      version = deviceID >> 28;
[19:10:17.789]        // -> [version <= 0x00000002]
[19:10:17.790]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:10:17.790]        // -> [partNum <= 0x0000BB88]
[19:10:17.790]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:10:17.790]        // -> [manuf <= 0x00000017]
[19:10:17.790]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:10:17.790]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:10:17.790]      isProduction = (version > 0);
[19:10:17.790]        // -> [isProduction <= 0x00000001]
[19:10:17.790]    </block>
[19:10:17.790]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:10:17.790]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:10:17.791]        // =>  FALSE
[19:10:17.791]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:10:17.791]    </control>
[19:10:17.791]    <control if="continueId == 4" while="" timeout="0" info="">
[19:10:17.791]      // if-block "continueId == 4"
[19:10:17.791]        // =>  FALSE
[19:10:17.791]      // skip if-block "continueId == 4"
[19:10:17.791]    </control>
[19:10:17.791]    <control if="!isProduction" while="" timeout="0" info="">
[19:10:17.791]      // if-block "!isProduction"
[19:10:17.791]        // =>  FALSE
[19:10:17.793]      // skip if-block "!isProduction"
[19:10:17.793]    </control>
[19:10:17.793]  </sequence>
[19:10:17.793]  
[19:13:43.256]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:13:43.256]  
[19:13:43.264]  <debugvars>
[19:13:43.264]    // Pre-defined
[19:13:43.265]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:13:43.265]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:13:43.265]    __dp=0x00000000
[19:13:43.265]    __ap=0x00000000
[19:13:43.265]    __traceout=0x00000000      (Trace Disabled)
[19:13:43.265]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:13:43.265]    __FlashAddr=0x00000000
[19:13:43.265]    __FlashLen=0x00000000
[19:13:43.265]    __FlashArg=0x00000000
[19:13:43.265]    __FlashOp=0x00000000
[19:13:43.265]    __Result=0x00000000
[19:13:43.265]  </debugvars>
[19:13:43.265]  
[19:13:43.265]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:13:43.265]    <block atomic="false" info="">
[19:13:43.265]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:13:43.265]        // -> [isSWJ <= 0x00000001]
[19:13:43.265]      __var hasDormant = __protocol & 0x00020000;
[19:13:43.267]        // -> [hasDormant <= 0x00000000]
[19:13:43.267]      __var protType   = __protocol & 0x0000FFFF;
[19:13:43.267]        // -> [protType <= 0x00000002]
[19:13:43.267]    </block>
[19:13:43.267]    <control if="protType == 1" while="" timeout="0" info="">
[19:13:43.267]      // if-block "protType == 1"
[19:13:43.267]        // =>  FALSE
[19:13:43.267]      // skip if-block "protType == 1"
[19:13:43.267]    </control>
[19:13:43.267]    <control if="protType == 2" while="" timeout="0" info="">
[19:13:43.267]      // if-block "protType == 2"
[19:13:43.267]        // =>  TRUE
[19:13:43.268]      <control if="isSWJ" while="" timeout="0" info="">
[19:13:43.268]        // if-block "isSWJ"
[19:13:43.268]          // =>  TRUE
[19:13:43.268]        <control if="hasDormant" while="" timeout="0" info="">
[19:13:43.268]          // if-block "hasDormant"
[19:13:43.268]            // =>  FALSE
[19:13:43.268]          // skip if-block "hasDormant"
[19:13:43.268]        </control>
[19:13:43.268]        <control if="!hasDormant" while="" timeout="0" info="">
[19:13:43.268]          // if-block "!hasDormant"
[19:13:43.268]            // =>  TRUE
[19:13:43.269]          <block atomic="false" info="">
[19:13:43.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:13:43.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:13:43.269]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:13:43.270]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:13:43.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:13:43.270]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:13:43.270]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:13:43.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:13:43.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:13:43.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:13:43.271]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:13:43.272]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:13:43.272]          </block>
[19:13:43.272]          // end if-block "!hasDormant"
[19:13:43.272]        </control>
[19:13:43.272]        // end if-block "isSWJ"
[19:13:43.272]      </control>
[19:13:43.272]      <control if="!isSWJ" while="" timeout="0" info="">
[19:13:43.272]        // if-block "!isSWJ"
[19:13:43.272]          // =>  FALSE
[19:13:43.272]        // skip if-block "!isSWJ"
[19:13:43.273]      </control>
[19:13:43.273]      <block atomic="false" info="">
[19:13:43.273]        ReadDP(0x0);
[19:13:43.274]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:13:43.274]      </block>
[19:13:43.274]      // end if-block "protType == 2"
[19:13:43.274]    </control>
[19:13:43.274]  </sequence>
[19:13:43.274]  
[19:13:43.275]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:13:43.275]  
[19:13:43.275]  <debugvars>
[19:13:43.275]    // Pre-defined
[19:13:43.275]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:13:43.275]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:13:43.275]    __dp=0x00000000
[19:13:43.275]    __ap=0x00000000
[19:13:43.275]    __traceout=0x00000000      (Trace Disabled)
[19:13:43.275]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:13:43.275]    __FlashAddr=0x00000000
[19:13:43.276]    __FlashLen=0x00000000
[19:13:43.276]    __FlashArg=0x00000000
[19:13:43.276]    __FlashOp=0x00000000
[19:13:43.276]    __Result=0x00000000
[19:13:43.276]  </debugvars>
[19:13:43.276]  
[19:13:43.276]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:13:43.276]    <block atomic="false" info="">
[19:13:43.276]      __var SW_DP_ABORT       = 0x0;
[19:13:43.276]        // -> [SW_DP_ABORT <= 0x00000000]
[19:13:43.276]      __var DP_CTRL_STAT      = 0x4;
[19:13:43.276]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:13:43.277]      __var DP_SELECT         = 0x8;
[19:13:43.277]        // -> [DP_SELECT <= 0x00000008]
[19:13:43.277]      __var powered_down      = 0;
[19:13:43.277]        // -> [powered_down <= 0x00000000]
[19:13:43.277]      WriteDP(DP_SELECT, 0x00000000);
[19:13:43.278]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:13:43.278]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:13:43.278]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:13:43.278]        // -> [powered_down <= 0x00000001]
[19:13:43.278]    </block>
[19:13:43.279]    <control if="powered_down" while="" timeout="0" info="">
[19:13:43.279]      // if-block "powered_down"
[19:13:43.279]        // =>  TRUE
[19:13:43.279]      <block atomic="false" info="">
[19:13:43.279]        Message(0, "Debug/System power-up request sent");
[19:13:43.281]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:13:43.281]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:13:43.282]      </block>
[19:13:43.282]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:13:43.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:13:43.282]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:13:43.282]        // while-condition  =>  FALSE
[19:13:43.282]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:13:43.282]      </control>
[19:13:43.283]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:13:43.283]        // if-block "(__protocol & 0xFFFF) == 1"
[19:13:43.283]          // =>  FALSE
[19:13:43.283]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:13:43.283]      </control>
[19:13:43.283]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:13:43.283]        // if-block "(__protocol & 0xFFFF) == 2"
[19:13:43.283]          // =>  TRUE
[19:13:43.283]        <block atomic="false" info="">
[19:13:43.283]          Message(0, "executing SWD power up");
[19:13:43.285]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:13:43.285]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:13:43.286]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:13:43.286]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:13:43.286]        </block>
[19:13:43.286]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:13:43.286]      </control>
[19:13:43.286]      // end if-block "powered_down"
[19:13:43.286]    </control>
[19:13:43.286]    <block atomic="false" info="">
[19:13:43.286]      __var DEBUG_PORT_VAL    = 0;
[19:13:43.287]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:13:43.287]      __var ACCESS_POINT_VAL  = 0;
[19:13:43.287]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:13:43.287]      __ap = 1; 
[19:13:43.287]        // -> [__ap <= 0x00000001]
[19:13:43.287]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:13:43.288]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:13:43.288]      __ap = 4;
[19:13:43.288]        // -> [__ap <= 0x00000004]
[19:13:43.289]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:13:43.289]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:13:43.289]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:13:43.289]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:13:43.292]    </block>
[19:13:43.292]    <block atomic="false" info="">
[19:13:43.292]      __var nReset = 0x80;
[19:13:43.292]        // -> [nReset <= 0x00000080]
[19:13:43.292]      __var canReadPins = 0;
[19:13:43.293]        // -> [canReadPins <= 0x00000000]
[19:13:43.293]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:13:43.293]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:13:43.293]        // -> [canReadPins <= 0x00000001]
[19:13:43.293]    </block>
[19:13:43.293]    <control if="" while="1" timeout="200" info="">
[19:13:43.293]      // while "1"  (timeout="200")
[19:13:43.293]      // while-condition  =>  TRUE
[19:13:43.293]      // while "1"  (timeout="200")
[19:13:43.293]      // while-condition  =>  TRUE
[19:13:43.293]      // while "1"  (timeout="200")
[19:13:43.294]      // while-condition  =>  TRUE
[19:13:43.294]      // while "1"  (timeout="200")
[19:13:43.294]      // while-condition  =>  TRUE
[19:13:43.294]      // while "1"  (timeout="200")
[19:13:43.294]      // while-condition  =>  TRUE
[19:13:43.294]      // while "1"  (timeout="200")
[19:13:43.294]      // while-condition  =>  TRUE
[19:13:43.294]      // while "1"  (timeout="200")
[19:13:43.294]      // while-condition  =>  TRUE
[19:13:43.294]      // while "1"  (timeout="200")
[19:13:43.294]      // while-condition  =>  TRUE
[19:13:43.294]      // while "1"  (timeout="200")
[19:13:43.295]      // while-condition  =>  TRUE
[19:13:43.295]      // while "1"  (timeout="200")
[19:13:43.295]      // while-condition  =>  TRUE
[19:13:43.295]      // while "1"  (timeout="200")
[19:13:43.295]      // while-condition  =>  TRUE
[19:13:43.295]      // while "1"  (timeout="200")
[19:13:43.295]      // while-condition  =>  TRUE
[19:13:43.295]      // while "1"  (timeout="200")
[19:13:43.295]      // while-condition  =>  TRUE
[19:13:43.295]      // while "1"  (timeout="200")
[19:13:43.295]      // while-condition  =>  TRUE
[19:13:43.296]      // while "1"  (timeout="200")
[19:13:43.296]      // while-condition  =>  TRUE
[19:13:43.296]      // while "1"  (timeout="200")
[19:13:43.296]      // while-condition  =>  TRUE
[19:13:43.296]      // while "1"  (timeout="200")
[19:13:43.296]      // while-condition  =>  TRUE
[19:13:43.296]      // while "1"  (timeout="200")
[19:13:43.296]      // while-condition  =>  TRUE
[19:13:43.296]      // while "1"  (timeout="200")
[19:13:43.296]      // while-condition  =>  TRUE
[19:13:43.296]      // while "1"  (timeout="200")
[19:13:43.296]      // while-condition  =>  TRUE
[19:13:43.296]      // while "1"  (timeout="200")
[19:13:43.297]      // while-condition  =>  TRUE
[19:13:43.297]      // while "1"  (timeout="200")
[19:13:43.297]      // while-condition  =>  TRUE
[19:13:43.297]      // while "1"  (timeout="200")
[19:13:43.297]      // while-condition  =>  TRUE
[19:13:43.297]      // while "1"  (timeout="200")
[19:13:43.297]      // while-condition  =>  TRUE
[19:13:43.298]      // while "1"  (timeout="200")
[19:13:43.298]      // while-condition  =>  TRUE
[19:13:43.298]      // while "1"  (timeout="200")
[19:13:43.298]      // while-condition  =>  TRUE
[19:13:43.298]      // while "1"  (timeout="200")
[19:13:43.298]      // while-condition  =>  TRUE
[19:13:43.298]      // while "1"  (timeout="200")
[19:13:43.298]      // while-condition  =>  TRUE
[19:13:43.298]      // while "1"  (timeout="200")
[19:13:43.299]      // while-condition  =>  TRUE
[19:13:43.299]      // while "1"  (timeout="200")
[19:13:43.299]      // while-condition  =>  TRUE
[19:13:43.299]      // while "1"  (timeout="200")
[19:13:43.300]      // while-condition  =>  TRUE
[19:13:43.300]      // while "1"  (timeout="200")
[19:13:43.300]      // while-condition  =>  TRUE
[19:13:43.300]      // while "1"  (timeout="200")
[19:13:43.300]      // while-condition  =>  TRUE
[19:13:43.300]      // while "1"  (timeout="200")
[19:13:43.300]      // while-condition  =>  TRUE
[19:13:43.300]      // while "1"  (timeout="200")
[19:13:43.301]      // while-condition  =>  TRUE
[19:13:43.301]      // while "1"  (timeout="200")
[19:13:43.301]      // while-condition  =>  TRUE
[19:13:43.301]      // while "1"  (timeout="200")
[19:13:43.301]      // while-condition  =>  TRUE
[19:13:43.301]      // while "1"  (timeout="200")
[19:13:43.301]      // while-condition  =>  TRUE
[19:13:43.301]      // while "1"  (timeout="200")
[19:13:43.301]      // while-condition  =>  TRUE
[19:13:43.301]      // while "1"  (timeout="200")
[19:13:43.301]      // while-condition  =>  TRUE
[19:13:43.302]      // while "1"  (timeout="200")
[19:13:43.302]      // while  =>  TIMEOUT
[19:13:43.302]      // end while "1"
[19:13:43.302]    </control>
[19:13:43.302]    <control if="canReadPins" while="" timeout="0" info="">
[19:13:43.302]      // if-block "canReadPins"
[19:13:43.302]        // =>  TRUE
[19:13:43.302]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:13:43.302]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:13:43.302]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:13:43.302]        // while-condition  =>  FALSE
[19:13:43.302]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:13:43.303]      </control>
[19:13:43.303]      // end if-block "canReadPins"
[19:13:43.303]    </control>
[19:13:43.303]    <control if="!canReadPins" while="" timeout="0" info="">
[19:13:43.303]      // if-block "!canReadPins"
[19:13:43.303]        // =>  FALSE
[19:13:43.304]      // skip if-block "!canReadPins"
[19:13:43.304]    </control>
[19:13:43.304]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:13:43.304]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:13:43.304]        // =>  TRUE
[19:13:43.304]      <block atomic="false" info="">
[19:13:43.304]        WriteAP(0x00, 0x190008);
[19:13:43.305]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:13:43.305]        WriteAP(0xF0, 0x01);
[19:13:43.306]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:13:43.307]      </block>
[19:13:43.307]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:13:43.307]    </control>
[19:13:43.307]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:13:43.307]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:13:43.307]        // =>  FALSE
[19:13:43.307]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:13:43.307]    </control>
[19:13:43.307]    <block atomic="false" info="">
[19:13:43.307]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:13:43.308]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:13:43.308]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:13:43.308]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:13:43.309]      __ap = 0; //lets make sure we reset the access point selection
[19:13:43.311]        // -> [__ap <= 0x00000000]
[19:13:43.311]    </block>
[19:13:43.311]  </sequence>
[19:13:43.311]  
[19:13:43.317]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:13:43.317]  
[19:13:43.317]  <debugvars>
[19:13:43.317]    // Pre-defined
[19:13:43.317]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:13:43.317]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:13:43.317]    __dp=0x00000000
[19:13:43.317]    __ap=0x00000000
[19:13:43.317]    __traceout=0x00000000      (Trace Disabled)
[19:13:43.318]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:13:43.318]    __FlashAddr=0x00000000
[19:13:43.318]    __FlashLen=0x00000000
[19:13:43.318]    __FlashArg=0x00000000
[19:13:43.318]    __FlashOp=0x00000000
[19:13:43.318]    __Result=0x00000000
[19:13:43.318]  </debugvars>
[19:13:43.318]  
[19:13:43.318]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:13:43.318]    <block atomic="false" info="">
[19:13:43.318]      __var deviceID = 0;
[19:13:43.319]        // -> [deviceID <= 0x00000000]
[19:13:43.319]      __var version = 0;
[19:13:43.319]        // -> [version <= 0x00000000]
[19:13:43.319]      __var partNum = 0;
[19:13:43.319]        // -> [partNum <= 0x00000000]
[19:13:43.319]      __var manuf = 0;
[19:13:43.319]        // -> [manuf <= 0x00000000]
[19:13:43.319]      __var isMSPM0G1X0X_G3X0X = 0;
[19:13:43.319]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:13:43.319]      __var isProduction = 0;
[19:13:43.319]        // -> [isProduction <= 0x00000000]
[19:13:43.319]      __var continueId = 0;
[19:13:43.320]        // -> [continueId <= 0x00000000]
[19:13:43.320]      deviceID =   Read32(0x41C40004);
[19:13:43.320]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:13:43.321]        // -> [deviceID <= 0x2BB8802F]
[19:13:43.321]      version = deviceID >> 28;
[19:13:43.321]        // -> [version <= 0x00000002]
[19:13:43.321]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:13:43.321]        // -> [partNum <= 0x0000BB88]
[19:13:43.321]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:13:43.321]        // -> [manuf <= 0x00000017]
[19:13:43.321]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:13:43.321]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:13:43.321]      isProduction = (version > 0);
[19:13:43.321]        // -> [isProduction <= 0x00000001]
[19:13:43.323]    </block>
[19:13:43.323]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:13:43.323]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:13:43.323]        // =>  FALSE
[19:13:43.323]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:13:43.323]    </control>
[19:13:43.323]    <control if="continueId == 4" while="" timeout="0" info="">
[19:13:43.323]      // if-block "continueId == 4"
[19:13:43.323]        // =>  FALSE
[19:13:43.323]      // skip if-block "continueId == 4"
[19:13:43.323]    </control>
[19:13:43.323]    <control if="!isProduction" while="" timeout="0" info="">
[19:13:43.324]      // if-block "!isProduction"
[19:13:43.324]        // =>  FALSE
[19:13:43.324]      // skip if-block "!isProduction"
[19:13:43.324]    </control>
[19:13:43.324]  </sequence>
[19:13:43.324]  
[19:14:03.838]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:14:03.838]  
[19:14:03.838]  <debugvars>
[19:14:03.838]    // Pre-defined
[19:14:03.839]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:03.839]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:14:03.839]    __dp=0x00000000
[19:14:03.839]    __ap=0x00000000
[19:14:03.839]    __traceout=0x00000000      (Trace Disabled)
[19:14:03.839]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:03.839]    __FlashAddr=0x00000000
[19:14:03.839]    __FlashLen=0x00000000
[19:14:03.839]    __FlashArg=0x00000000
[19:14:03.839]    __FlashOp=0x00000000
[19:14:03.839]    __Result=0x00000000
[19:14:03.840]  </debugvars>
[19:14:03.840]  
[19:14:03.840]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:14:03.840]    <block atomic="false" info="">
[19:14:03.840]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:14:03.840]        // -> [isSWJ <= 0x00000001]
[19:14:03.840]      __var hasDormant = __protocol & 0x00020000;
[19:14:03.840]        // -> [hasDormant <= 0x00000000]
[19:14:03.840]      __var protType   = __protocol & 0x0000FFFF;
[19:14:03.840]        // -> [protType <= 0x00000002]
[19:14:03.841]    </block>
[19:14:03.841]    <control if="protType == 1" while="" timeout="0" info="">
[19:14:03.841]      // if-block "protType == 1"
[19:14:03.841]        // =>  FALSE
[19:14:03.841]      // skip if-block "protType == 1"
[19:14:03.841]    </control>
[19:14:03.841]    <control if="protType == 2" while="" timeout="0" info="">
[19:14:03.841]      // if-block "protType == 2"
[19:14:03.841]        // =>  TRUE
[19:14:03.841]      <control if="isSWJ" while="" timeout="0" info="">
[19:14:03.841]        // if-block "isSWJ"
[19:14:03.841]          // =>  TRUE
[19:14:03.842]        <control if="hasDormant" while="" timeout="0" info="">
[19:14:03.842]          // if-block "hasDormant"
[19:14:03.842]            // =>  FALSE
[19:14:03.842]          // skip if-block "hasDormant"
[19:14:03.842]        </control>
[19:14:03.842]        <control if="!hasDormant" while="" timeout="0" info="">
[19:14:03.842]          // if-block "!hasDormant"
[19:14:03.842]            // =>  TRUE
[19:14:03.842]          <block atomic="false" info="">
[19:14:03.842]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:14:03.843]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:03.843]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:14:03.843]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:14:03.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:14:03.843]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:03.843]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:14:03.843]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:14:03.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:14:03.844]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:03.844]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:14:03.844]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:14:03.844]          </block>
[19:14:03.844]          // end if-block "!hasDormant"
[19:14:03.844]        </control>
[19:14:03.845]        // end if-block "isSWJ"
[19:14:03.845]      </control>
[19:14:03.845]      <control if="!isSWJ" while="" timeout="0" info="">
[19:14:03.845]        // if-block "!isSWJ"
[19:14:03.845]          // =>  FALSE
[19:14:03.845]        // skip if-block "!isSWJ"
[19:14:03.845]      </control>
[19:14:03.845]      <block atomic="false" info="">
[19:14:03.845]        ReadDP(0x0);
[19:14:03.846]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:14:03.846]      </block>
[19:14:03.846]      // end if-block "protType == 2"
[19:14:03.847]    </control>
[19:14:03.847]  </sequence>
[19:14:03.847]  
[19:14:03.847]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:14:03.847]  
[19:14:03.847]  <debugvars>
[19:14:03.848]    // Pre-defined
[19:14:03.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:03.848]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:14:03.848]    __dp=0x00000000
[19:14:03.849]    __ap=0x00000000
[19:14:03.849]    __traceout=0x00000000      (Trace Disabled)
[19:14:03.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:03.849]    __FlashAddr=0x00000000
[19:14:03.849]    __FlashLen=0x00000000
[19:14:03.849]    __FlashArg=0x00000000
[19:14:03.849]    __FlashOp=0x00000000
[19:14:03.849]    __Result=0x00000000
[19:14:03.849]  </debugvars>
[19:14:03.849]  
[19:14:03.849]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:14:03.849]    <block atomic="false" info="">
[19:14:03.849]      __var SW_DP_ABORT       = 0x0;
[19:14:03.849]        // -> [SW_DP_ABORT <= 0x00000000]
[19:14:03.850]      __var DP_CTRL_STAT      = 0x4;
[19:14:03.850]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:14:03.850]      __var DP_SELECT         = 0x8;
[19:14:03.850]        // -> [DP_SELECT <= 0x00000008]
[19:14:03.850]      __var powered_down      = 0;
[19:14:03.851]        // -> [powered_down <= 0x00000000]
[19:14:03.851]      WriteDP(DP_SELECT, 0x00000000);
[19:14:03.851]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:14:03.851]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:14:03.852]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:14:03.852]        // -> [powered_down <= 0x00000001]
[19:14:03.852]    </block>
[19:14:03.852]    <control if="powered_down" while="" timeout="0" info="">
[19:14:03.852]      // if-block "powered_down"
[19:14:03.852]        // =>  TRUE
[19:14:03.852]      <block atomic="false" info="">
[19:14:03.852]        Message(0, "Debug/System power-up request sent");
[19:14:03.854]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:14:03.855]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:14:03.855]      </block>
[19:14:03.855]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:14:03.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:03.856]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:14:03.856]        // while-condition  =>  FALSE
[19:14:03.856]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:14:03.856]      </control>
[19:14:03.856]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:14:03.856]        // if-block "(__protocol & 0xFFFF) == 1"
[19:14:03.856]          // =>  FALSE
[19:14:03.856]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:14:03.856]      </control>
[19:14:03.856]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:14:03.857]        // if-block "(__protocol & 0xFFFF) == 2"
[19:14:03.857]          // =>  TRUE
[19:14:03.857]        <block atomic="false" info="">
[19:14:03.857]          Message(0, "executing SWD power up");
[19:14:03.858]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:14:03.859]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:14:03.859]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:14:03.860]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:14:03.860]        </block>
[19:14:03.860]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:14:03.860]      </control>
[19:14:03.860]      // end if-block "powered_down"
[19:14:03.860]    </control>
[19:14:03.860]    <block atomic="false" info="">
[19:14:03.861]      __var DEBUG_PORT_VAL    = 0;
[19:14:03.861]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:14:03.861]      __var ACCESS_POINT_VAL  = 0;
[19:14:03.861]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:14:03.861]      __ap = 1; 
[19:14:03.861]        // -> [__ap <= 0x00000001]
[19:14:03.861]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:14:03.863]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:14:03.863]      __ap = 4;
[19:14:03.863]        // -> [__ap <= 0x00000004]
[19:14:03.863]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:14:03.864]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:14:03.864]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:14:03.864]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:14:03.865]    </block>
[19:14:03.865]    <block atomic="false" info="">
[19:14:03.865]      __var nReset = 0x80;
[19:14:03.865]        // -> [nReset <= 0x00000080]
[19:14:03.865]      __var canReadPins = 0;
[19:14:03.866]        // -> [canReadPins <= 0x00000000]
[19:14:03.866]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:14:03.866]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:14:03.866]        // -> [canReadPins <= 0x00000001]
[19:14:03.866]    </block>
[19:14:03.866]    <control if="" while="1" timeout="200" info="">
[19:14:03.866]      // while "1"  (timeout="200")
[19:14:03.867]      // while-condition  =>  TRUE
[19:14:03.867]      // while "1"  (timeout="200")
[19:14:03.867]      // while-condition  =>  TRUE
[19:14:03.867]      // while "1"  (timeout="200")
[19:14:03.867]      // while-condition  =>  TRUE
[19:14:03.867]      // while "1"  (timeout="200")
[19:14:03.867]      // while-condition  =>  TRUE
[19:14:03.867]      // while "1"  (timeout="200")
[19:14:03.867]      // while-condition  =>  TRUE
[19:14:03.867]      // while "1"  (timeout="200")
[19:14:03.867]      // while-condition  =>  TRUE
[19:14:03.867]      // while "1"  (timeout="200")
[19:14:03.868]      // while-condition  =>  TRUE
[19:14:03.868]      // while "1"  (timeout="200")
[19:14:03.868]      // while-condition  =>  TRUE
[19:14:03.868]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.869]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.869]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.869]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.869]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.869]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.869]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.869]      // while "1"  (timeout="200")
[19:14:03.869]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.871]      // while-condition  =>  TRUE
[19:14:03.871]      // while "1"  (timeout="200")
[19:14:03.872]      // while-condition  =>  TRUE
[19:14:03.872]      // while "1"  (timeout="200")
[19:14:03.872]      // while-condition  =>  TRUE
[19:14:03.872]      // while "1"  (timeout="200")
[19:14:03.872]      // while-condition  =>  TRUE
[19:14:03.872]      // while "1"  (timeout="200")
[19:14:03.872]      // while-condition  =>  TRUE
[19:14:03.872]      // while "1"  (timeout="200")
[19:14:03.872]      // while-condition  =>  TRUE
[19:14:03.872]      // while "1"  (timeout="200")
[19:14:03.872]      // while-condition  =>  TRUE
[19:14:03.873]      // while "1"  (timeout="200")
[19:14:03.873]      // while-condition  =>  TRUE
[19:14:03.873]      // while "1"  (timeout="200")
[19:14:03.873]      // while-condition  =>  TRUE
[19:14:03.873]      // while "1"  (timeout="200")
[19:14:03.873]      // while-condition  =>  TRUE
[19:14:03.873]      // while "1"  (timeout="200")
[19:14:03.873]      // while-condition  =>  TRUE
[19:14:03.873]      // while "1"  (timeout="200")
[19:14:03.873]      // while-condition  =>  TRUE
[19:14:03.873]      // while "1"  (timeout="200")
[19:14:03.873]      // while-condition  =>  TRUE
[19:14:03.874]      // while "1"  (timeout="200")
[19:14:03.874]      // while-condition  =>  TRUE
[19:14:03.874]      // while "1"  (timeout="200")
[19:14:03.874]      // while-condition  =>  TRUE
[19:14:03.874]      // while "1"  (timeout="200")
[19:14:03.874]      // while-condition  =>  TRUE
[19:14:03.875]      // while "1"  (timeout="200")
[19:14:03.875]      // while-condition  =>  TRUE
[19:14:03.876]      // while "1"  (timeout="200")
[19:14:03.876]      // while-condition  =>  TRUE
[19:14:03.876]      // while "1"  (timeout="200")
[19:14:03.876]      // while-condition  =>  TRUE
[19:14:03.876]      // while "1"  (timeout="200")
[19:14:03.877]      // while-condition  =>  TRUE
[19:14:03.877]      // while "1"  (timeout="200")
[19:14:03.877]      // while-condition  =>  TRUE
[19:14:03.877]      // while "1"  (timeout="200")
[19:14:03.877]      // while-condition  =>  TRUE
[19:14:03.877]      // while "1"  (timeout="200")
[19:14:03.877]      // while-condition  =>  TRUE
[19:14:03.877]      // while "1"  (timeout="200")
[19:14:03.877]      // while-condition  =>  TRUE
[19:14:03.877]      // while "1"  (timeout="200")
[19:14:03.877]      // while-condition  =>  TRUE
[19:14:03.877]      // while "1"  (timeout="200")
[19:14:03.878]      // while-condition  =>  TRUE
[19:14:03.878]      // while "1"  (timeout="200")
[19:14:03.878]      // while-condition  =>  TRUE
[19:14:03.878]      // while "1"  (timeout="200")
[19:14:03.878]      // while-condition  =>  TRUE
[19:14:03.878]      // while "1"  (timeout="200")
[19:14:03.878]      // while-condition  =>  TRUE
[19:14:03.878]      // while "1"  (timeout="200")
[19:14:03.878]      // while-condition  =>  TRUE
[19:14:03.878]      // while "1"  (timeout="200")
[19:14:03.878]      // while-condition  =>  TRUE
[19:14:03.878]      // while "1"  (timeout="200")
[19:14:03.878]      // while-condition  =>  TRUE
[19:14:03.878]      // while "1"  (timeout="200")
[19:14:03.879]      // while-condition  =>  TRUE
[19:14:03.879]      // while "1"  (timeout="200")
[19:14:03.879]      // while-condition  =>  TRUE
[19:14:03.879]      // while "1"  (timeout="200")
[19:14:03.879]      // while-condition  =>  TRUE
[19:14:03.879]      // while "1"  (timeout="200")
[19:14:03.879]      // while-condition  =>  TRUE
[19:14:03.879]      // while "1"  (timeout="200")
[19:14:03.879]      // while-condition  =>  TRUE
[19:14:03.879]      // while "1"  (timeout="200")
[19:14:03.880]      // while-condition  =>  TRUE
[19:14:03.880]      // while "1"  (timeout="200")
[19:14:03.880]      // while  =>  TIMEOUT
[19:14:03.880]      // end while "1"
[19:14:03.880]    </control>
[19:14:03.881]    <control if="canReadPins" while="" timeout="0" info="">
[19:14:03.881]      // if-block "canReadPins"
[19:14:03.881]        // =>  TRUE
[19:14:03.881]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:14:03.881]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:14:03.881]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:14:03.881]        // while-condition  =>  FALSE
[19:14:03.882]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:14:03.882]      </control>
[19:14:03.882]      // end if-block "canReadPins"
[19:14:03.882]    </control>
[19:14:03.882]    <control if="!canReadPins" while="" timeout="0" info="">
[19:14:03.882]      // if-block "!canReadPins"
[19:14:03.882]        // =>  FALSE
[19:14:03.882]      // skip if-block "!canReadPins"
[19:14:03.882]    </control>
[19:14:03.882]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:14:03.882]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:14:03.883]        // =>  TRUE
[19:14:03.883]      <block atomic="false" info="">
[19:14:03.883]        WriteAP(0x00, 0x190008);
[19:14:03.883]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:14:03.883]        WriteAP(0xF0, 0x01);
[19:14:03.884]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:14:03.884]      </block>
[19:14:03.885]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:14:03.885]    </control>
[19:14:03.885]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:14:03.885]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:14:03.885]        // =>  FALSE
[19:14:03.885]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:14:03.885]    </control>
[19:14:03.885]    <block atomic="false" info="">
[19:14:03.885]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:14:03.886]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:14:03.886]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:14:03.886]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:14:03.889]      __ap = 0; //lets make sure we reset the access point selection
[19:14:03.889]        // -> [__ap <= 0x00000000]
[19:14:03.889]    </block>
[19:14:03.889]  </sequence>
[19:14:03.889]  
[19:14:03.894]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:14:03.894]  
[19:14:03.895]  <debugvars>
[19:14:03.895]    // Pre-defined
[19:14:03.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:03.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:14:03.895]    __dp=0x00000000
[19:14:03.895]    __ap=0x00000000
[19:14:03.895]    __traceout=0x00000000      (Trace Disabled)
[19:14:03.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:03.895]    __FlashAddr=0x00000000
[19:14:03.895]    __FlashLen=0x00000000
[19:14:03.895]    __FlashArg=0x00000000
[19:14:03.895]    __FlashOp=0x00000000
[19:14:03.896]    __Result=0x00000000
[19:14:03.896]  </debugvars>
[19:14:03.896]  
[19:14:03.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:14:03.897]    <block atomic="false" info="">
[19:14:03.897]      __var deviceID = 0;
[19:14:03.897]        // -> [deviceID <= 0x00000000]
[19:14:03.897]      __var version = 0;
[19:14:03.897]        // -> [version <= 0x00000000]
[19:14:03.897]      __var partNum = 0;
[19:14:03.897]        // -> [partNum <= 0x00000000]
[19:14:03.897]      __var manuf = 0;
[19:14:03.897]        // -> [manuf <= 0x00000000]
[19:14:03.897]      __var isMSPM0G1X0X_G3X0X = 0;
[19:14:03.897]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:14:03.897]      __var isProduction = 0;
[19:14:03.897]        // -> [isProduction <= 0x00000000]
[19:14:03.897]      __var continueId = 0;
[19:14:03.897]        // -> [continueId <= 0x00000000]
[19:14:03.898]      deviceID =   Read32(0x41C40004);
[19:14:03.899]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:14:03.899]        // -> [deviceID <= 0x2BB8802F]
[19:14:03.899]      version = deviceID >> 28;
[19:14:03.899]        // -> [version <= 0x00000002]
[19:14:03.899]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:14:03.899]        // -> [partNum <= 0x0000BB88]
[19:14:03.899]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:14:03.899]        // -> [manuf <= 0x00000017]
[19:14:03.899]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:14:03.900]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:14:03.900]      isProduction = (version > 0);
[19:14:03.900]        // -> [isProduction <= 0x00000001]
[19:14:03.900]    </block>
[19:14:03.900]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:14:03.900]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:14:03.900]        // =>  FALSE
[19:14:03.900]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:14:03.900]    </control>
[19:14:03.900]    <control if="continueId == 4" while="" timeout="0" info="">
[19:14:03.901]      // if-block "continueId == 4"
[19:14:03.901]        // =>  FALSE
[19:14:03.901]      // skip if-block "continueId == 4"
[19:14:03.901]    </control>
[19:14:03.901]    <control if="!isProduction" while="" timeout="0" info="">
[19:14:03.901]      // if-block "!isProduction"
[19:14:03.901]        // =>  FALSE
[19:14:03.901]      // skip if-block "!isProduction"
[19:14:03.901]    </control>
[19:14:03.901]  </sequence>
[19:14:03.901]  
[19:17:11.587]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:17:11.587]  
[19:17:11.588]  <debugvars>
[19:17:11.588]    // Pre-defined
[19:17:11.588]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:17:11.588]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:17:11.588]    __dp=0x00000000
[19:17:11.588]    __ap=0x00000000
[19:17:11.588]    __traceout=0x00000000      (Trace Disabled)
[19:17:11.589]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:17:11.589]    __FlashAddr=0x00000000
[19:17:11.589]    __FlashLen=0x00000000
[19:17:11.589]    __FlashArg=0x00000000
[19:17:11.589]    __FlashOp=0x00000000
[19:17:11.590]    __Result=0x00000000
[19:17:11.590]  </debugvars>
[19:17:11.590]  
[19:17:11.590]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:17:11.590]    <block atomic="false" info="">
[19:17:11.590]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:17:11.590]        // -> [isSWJ <= 0x00000001]
[19:17:11.590]      __var hasDormant = __protocol & 0x00020000;
[19:17:11.590]        // -> [hasDormant <= 0x00000000]
[19:17:11.590]      __var protType   = __protocol & 0x0000FFFF;
[19:17:11.591]        // -> [protType <= 0x00000002]
[19:17:11.591]    </block>
[19:17:11.591]    <control if="protType == 1" while="" timeout="0" info="">
[19:17:11.591]      // if-block "protType == 1"
[19:17:11.591]        // =>  FALSE
[19:17:11.591]      // skip if-block "protType == 1"
[19:17:11.591]    </control>
[19:17:11.591]    <control if="protType == 2" while="" timeout="0" info="">
[19:17:11.591]      // if-block "protType == 2"
[19:17:11.591]        // =>  TRUE
[19:17:11.591]      <control if="isSWJ" while="" timeout="0" info="">
[19:17:11.592]        // if-block "isSWJ"
[19:17:11.592]          // =>  TRUE
[19:17:11.592]        <control if="hasDormant" while="" timeout="0" info="">
[19:17:11.592]          // if-block "hasDormant"
[19:17:11.592]            // =>  FALSE
[19:17:11.592]          // skip if-block "hasDormant"
[19:17:11.592]        </control>
[19:17:11.592]        <control if="!hasDormant" while="" timeout="0" info="">
[19:17:11.592]          // if-block "!hasDormant"
[19:17:11.592]            // =>  TRUE
[19:17:11.592]          <block atomic="false" info="">
[19:17:11.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:17:11.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:17:11.593]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:17:11.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:17:11.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:17:11.594]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:17:11.594]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:17:11.594]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:17:11.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:17:11.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:17:11.595]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:17:11.595]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:17:11.595]          </block>
[19:17:11.596]          // end if-block "!hasDormant"
[19:17:11.596]        </control>
[19:17:11.596]        // end if-block "isSWJ"
[19:17:11.596]      </control>
[19:17:11.596]      <control if="!isSWJ" while="" timeout="0" info="">
[19:17:11.596]        // if-block "!isSWJ"
[19:17:11.596]          // =>  FALSE
[19:17:11.596]        // skip if-block "!isSWJ"
[19:17:11.596]      </control>
[19:17:11.597]      <block atomic="false" info="">
[19:17:11.597]        ReadDP(0x0);
[19:17:11.598]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:17:11.598]      </block>
[19:17:11.598]      // end if-block "protType == 2"
[19:17:11.598]    </control>
[19:17:11.598]  </sequence>
[19:17:11.598]  
[19:17:11.599]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:17:11.599]  
[19:17:11.599]  <debugvars>
[19:17:11.599]    // Pre-defined
[19:17:11.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:17:11.599]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:17:11.599]    __dp=0x00000000
[19:17:11.599]    __ap=0x00000000
[19:17:11.600]    __traceout=0x00000000      (Trace Disabled)
[19:17:11.600]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:17:11.600]    __FlashAddr=0x00000000
[19:17:11.600]    __FlashLen=0x00000000
[19:17:11.600]    __FlashArg=0x00000000
[19:17:11.600]    __FlashOp=0x00000000
[19:17:11.600]    __Result=0x00000000
[19:17:11.600]  </debugvars>
[19:17:11.600]  
[19:17:11.600]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:17:11.601]    <block atomic="false" info="">
[19:17:11.601]      __var SW_DP_ABORT       = 0x0;
[19:17:11.601]        // -> [SW_DP_ABORT <= 0x00000000]
[19:17:11.601]      __var DP_CTRL_STAT      = 0x4;
[19:17:11.601]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:17:11.601]      __var DP_SELECT         = 0x8;
[19:17:11.601]        // -> [DP_SELECT <= 0x00000008]
[19:17:11.601]      __var powered_down      = 0;
[19:17:11.602]        // -> [powered_down <= 0x00000000]
[19:17:11.602]      WriteDP(DP_SELECT, 0x00000000);
[19:17:11.602]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:17:11.602]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:17:11.603]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:17:11.603]        // -> [powered_down <= 0x00000001]
[19:17:11.604]    </block>
[19:17:11.604]    <control if="powered_down" while="" timeout="0" info="">
[19:17:11.604]      // if-block "powered_down"
[19:17:11.604]        // =>  TRUE
[19:17:11.604]      <block atomic="false" info="">
[19:17:11.604]        Message(0, "Debug/System power-up request sent");
[19:17:11.606]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:17:11.606]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:17:11.606]      </block>
[19:17:11.607]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:17:11.607]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:17:11.607]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:17:11.607]        // while-condition  =>  FALSE
[19:17:11.607]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:17:11.607]      </control>
[19:17:11.608]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:17:11.608]        // if-block "(__protocol & 0xFFFF) == 1"
[19:17:11.608]          // =>  FALSE
[19:17:11.608]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:17:11.608]      </control>
[19:17:11.608]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:17:11.608]        // if-block "(__protocol & 0xFFFF) == 2"
[19:17:11.608]          // =>  TRUE
[19:17:11.608]        <block atomic="false" info="">
[19:17:11.609]          Message(0, "executing SWD power up");
[19:17:11.610]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:17:11.611]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:17:11.611]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:17:11.612]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:17:11.612]        </block>
[19:17:11.612]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:17:11.612]      </control>
[19:17:11.612]      // end if-block "powered_down"
[19:17:11.612]    </control>
[19:17:11.612]    <block atomic="false" info="">
[19:17:11.612]      __var DEBUG_PORT_VAL    = 0;
[19:17:11.612]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:17:11.613]      __var ACCESS_POINT_VAL  = 0;
[19:17:11.613]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:17:11.613]      __ap = 1; 
[19:17:11.613]        // -> [__ap <= 0x00000001]
[19:17:11.613]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:17:11.614]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:17:11.614]      __ap = 4;
[19:17:11.614]        // -> [__ap <= 0x00000004]
[19:17:11.615]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:17:11.616]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:17:11.616]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:17:11.616]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:17:11.618]    </block>
[19:17:11.618]    <block atomic="false" info="">
[19:17:11.618]      __var nReset = 0x80;
[19:17:11.618]        // -> [nReset <= 0x00000080]
[19:17:11.618]      __var canReadPins = 0;
[19:17:11.619]        // -> [canReadPins <= 0x00000000]
[19:17:11.619]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:17:11.619]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:17:11.619]        // -> [canReadPins <= 0x00000001]
[19:17:11.619]    </block>
[19:17:11.620]    <control if="" while="1" timeout="200" info="">
[19:17:11.620]      // while "1"  (timeout="200")
[19:17:11.620]      // while-condition  =>  TRUE
[19:17:11.620]      // while "1"  (timeout="200")
[19:17:11.620]      // while-condition  =>  TRUE
[19:17:11.620]      // while "1"  (timeout="200")
[19:17:11.620]      // while-condition  =>  TRUE
[19:17:11.620]      // while "1"  (timeout="200")
[19:17:11.620]      // while-condition  =>  TRUE
[19:17:11.620]      // while "1"  (timeout="200")
[19:17:11.620]      // while-condition  =>  TRUE
[19:17:11.621]      // while "1"  (timeout="200")
[19:17:11.621]      // while-condition  =>  TRUE
[19:17:11.621]      // while "1"  (timeout="200")
[19:17:11.621]      // while-condition  =>  TRUE
[19:17:11.622]      // while "1"  (timeout="200")
[19:17:11.622]      // while-condition  =>  TRUE
[19:17:11.622]      // while "1"  (timeout="200")
[19:17:11.622]      // while-condition  =>  TRUE
[19:17:11.622]      // while "1"  (timeout="200")
[19:17:11.622]      // while-condition  =>  TRUE
[19:17:11.622]      // while "1"  (timeout="200")
[19:17:11.623]      // while-condition  =>  TRUE
[19:17:11.623]      // while "1"  (timeout="200")
[19:17:11.623]      // while-condition  =>  TRUE
[19:17:11.623]      // while "1"  (timeout="200")
[19:17:11.623]      // while-condition  =>  TRUE
[19:17:11.623]      // while "1"  (timeout="200")
[19:17:11.623]      // while-condition  =>  TRUE
[19:17:11.623]      // while "1"  (timeout="200")
[19:17:11.623]      // while-condition  =>  TRUE
[19:17:11.623]      // while "1"  (timeout="200")
[19:17:11.623]      // while-condition  =>  TRUE
[19:17:11.624]      // while "1"  (timeout="200")
[19:17:11.624]      // while-condition  =>  TRUE
[19:17:11.624]      // while "1"  (timeout="200")
[19:17:11.624]      // while-condition  =>  TRUE
[19:17:11.624]      // while "1"  (timeout="200")
[19:17:11.624]      // while-condition  =>  TRUE
[19:17:11.624]      // while "1"  (timeout="200")
[19:17:11.624]      // while-condition  =>  TRUE
[19:17:11.624]      // while "1"  (timeout="200")
[19:17:11.624]      // while-condition  =>  TRUE
[19:17:11.625]      // while "1"  (timeout="200")
[19:17:11.625]      // while-condition  =>  TRUE
[19:17:11.625]      // while "1"  (timeout="200")
[19:17:11.625]      // while-condition  =>  TRUE
[19:17:11.625]      // while "1"  (timeout="200")
[19:17:11.625]      // while-condition  =>  TRUE
[19:17:11.625]      // while "1"  (timeout="200")
[19:17:11.625]      // while-condition  =>  TRUE
[19:17:11.625]      // while "1"  (timeout="200")
[19:17:11.625]      // while-condition  =>  TRUE
[19:17:11.626]      // while "1"  (timeout="200")
[19:17:11.626]      // while-condition  =>  TRUE
[19:17:11.626]      // while "1"  (timeout="200")
[19:17:11.626]      // while-condition  =>  TRUE
[19:17:11.626]      // while "1"  (timeout="200")
[19:17:11.626]      // while-condition  =>  TRUE
[19:17:11.626]      // while "1"  (timeout="200")
[19:17:11.626]      // while-condition  =>  TRUE
[19:17:11.626]      // while "1"  (timeout="200")
[19:17:11.627]      // while-condition  =>  TRUE
[19:17:11.627]      // while "1"  (timeout="200")
[19:17:11.627]      // while-condition  =>  TRUE
[19:17:11.627]      // while "1"  (timeout="200")
[19:17:11.627]      // while-condition  =>  TRUE
[19:17:11.627]      // while "1"  (timeout="200")
[19:17:11.627]      // while-condition  =>  TRUE
[19:17:11.627]      // while "1"  (timeout="200")
[19:17:11.628]      // while-condition  =>  TRUE
[19:17:11.628]      // while "1"  (timeout="200")
[19:17:11.628]      // while-condition  =>  TRUE
[19:17:11.628]      // while "1"  (timeout="200")
[19:17:11.628]      // while-condition  =>  TRUE
[19:17:11.628]      // while "1"  (timeout="200")
[19:17:11.628]      // while-condition  =>  TRUE
[19:17:11.628]      // while "1"  (timeout="200")
[19:17:11.628]      // while-condition  =>  TRUE
[19:17:11.628]      // while "1"  (timeout="200")
[19:17:11.628]      // while-condition  =>  TRUE
[19:17:11.628]      // while "1"  (timeout="200")
[19:17:11.628]      // while-condition  =>  TRUE
[19:17:11.629]      // while "1"  (timeout="200")
[19:17:11.629]      // while-condition  =>  TRUE
[19:17:11.629]      // while "1"  (timeout="200")
[19:17:11.629]      // while-condition  =>  TRUE
[19:17:11.629]      // while "1"  (timeout="200")
[19:17:11.629]      // while  =>  TIMEOUT
[19:17:11.629]      // end while "1"
[19:17:11.629]    </control>
[19:17:11.629]    <control if="canReadPins" while="" timeout="0" info="">
[19:17:11.629]      // if-block "canReadPins"
[19:17:11.629]        // =>  TRUE
[19:17:11.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:17:11.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:17:11.629]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:17:11.629]        // while-condition  =>  FALSE
[19:17:11.629]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:17:11.631]      </control>
[19:17:11.631]      // end if-block "canReadPins"
[19:17:11.631]    </control>
[19:17:11.631]    <control if="!canReadPins" while="" timeout="0" info="">
[19:17:11.631]      // if-block "!canReadPins"
[19:17:11.631]        // =>  FALSE
[19:17:11.631]      // skip if-block "!canReadPins"
[19:17:11.631]    </control>
[19:17:11.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:17:11.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:17:11.631]        // =>  TRUE
[19:17:11.632]      <block atomic="false" info="">
[19:17:11.632]        WriteAP(0x00, 0x190008);
[19:17:11.632]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:17:11.632]        WriteAP(0xF0, 0x01);
[19:17:11.633]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:17:11.633]      </block>
[19:17:11.633]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:17:11.633]    </control>
[19:17:11.633]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:17:11.633]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:17:11.634]        // =>  FALSE
[19:17:11.634]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:17:11.634]    </control>
[19:17:11.634]    <block atomic="false" info="">
[19:17:11.634]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:17:11.636]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:17:11.636]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:17:11.636]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:17:11.637]      __ap = 0; //lets make sure we reset the access point selection
[19:17:11.637]        // -> [__ap <= 0x00000000]
[19:17:11.637]    </block>
[19:17:11.637]  </sequence>
[19:17:11.637]  
[19:17:11.644]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:17:11.644]  
[19:17:11.644]  <debugvars>
[19:17:11.645]    // Pre-defined
[19:17:11.645]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:17:11.645]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:17:11.645]    __dp=0x00000000
[19:17:11.645]    __ap=0x00000000
[19:17:11.645]    __traceout=0x00000000      (Trace Disabled)
[19:17:11.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:17:11.645]    __FlashAddr=0x00000000
[19:17:11.645]    __FlashLen=0x00000000
[19:17:11.645]    __FlashArg=0x00000000
[19:17:11.645]    __FlashOp=0x00000000
[19:17:11.646]    __Result=0x00000000
[19:17:11.646]  </debugvars>
[19:17:11.646]  
[19:17:11.646]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:17:11.646]    <block atomic="false" info="">
[19:17:11.646]      __var deviceID = 0;
[19:17:11.646]        // -> [deviceID <= 0x00000000]
[19:17:11.646]      __var version = 0;
[19:17:11.647]        // -> [version <= 0x00000000]
[19:17:11.647]      __var partNum = 0;
[19:17:11.647]        // -> [partNum <= 0x00000000]
[19:17:11.647]      __var manuf = 0;
[19:17:11.647]        // -> [manuf <= 0x00000000]
[19:17:11.647]      __var isMSPM0G1X0X_G3X0X = 0;
[19:17:11.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:17:11.647]      __var isProduction = 0;
[19:17:11.647]        // -> [isProduction <= 0x00000000]
[19:17:11.647]      __var continueId = 0;
[19:17:11.647]        // -> [continueId <= 0x00000000]
[19:17:11.648]      deviceID =   Read32(0x41C40004);
[19:17:11.649]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:17:11.649]        // -> [deviceID <= 0x2BB8802F]
[19:17:11.649]      version = deviceID >> 28;
[19:17:11.649]        // -> [version <= 0x00000002]
[19:17:11.649]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:17:11.650]        // -> [partNum <= 0x0000BB88]
[19:17:11.650]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:17:11.650]        // -> [manuf <= 0x00000017]
[19:17:11.650]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:17:11.650]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:17:11.650]      isProduction = (version > 0);
[19:17:11.650]        // -> [isProduction <= 0x00000001]
[19:17:11.650]    </block>
[19:17:11.650]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:17:11.651]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:17:11.651]        // =>  FALSE
[19:17:11.651]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:17:11.651]    </control>
[19:17:11.651]    <control if="continueId == 4" while="" timeout="0" info="">
[19:17:11.651]      // if-block "continueId == 4"
[19:17:11.651]        // =>  FALSE
[19:17:11.651]      // skip if-block "continueId == 4"
[19:17:11.651]    </control>
[19:17:11.651]    <control if="!isProduction" while="" timeout="0" info="">
[19:17:11.652]      // if-block "!isProduction"
[19:17:11.652]        // =>  FALSE
[19:17:11.652]      // skip if-block "!isProduction"
[19:17:11.652]    </control>
[19:17:11.652]  </sequence>
[19:17:11.652]  
[19:17:15.475]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:17:15.475]  
[19:17:15.476]  <debugvars>
[19:17:15.476]    // Pre-defined
[19:17:15.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:17:15.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:17:15.476]    __dp=0x00000000
[19:17:15.476]    __ap=0x00000000
[19:17:15.476]    __traceout=0x00000000      (Trace Disabled)
[19:17:15.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:17:15.477]    __FlashAddr=0x00000000
[19:17:15.477]    __FlashLen=0x00000000
[19:17:15.477]    __FlashArg=0x00000000
[19:17:15.477]    __FlashOp=0x00000000
[19:17:15.477]    __Result=0x00000000
[19:17:15.477]  </debugvars>
[19:17:15.477]  
[19:17:15.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:17:15.477]    <block atomic="false" info="">
[19:17:15.478]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:17:15.478]        // -> [isSWJ <= 0x00000001]
[19:17:15.478]      __var hasDormant = __protocol & 0x00020000;
[19:17:15.478]        // -> [hasDormant <= 0x00000000]
[19:17:15.478]      __var protType   = __protocol & 0x0000FFFF;
[19:17:15.478]        // -> [protType <= 0x00000002]
[19:17:15.478]    </block>
[19:17:15.478]    <control if="protType == 1" while="" timeout="0" info="">
[19:17:15.478]      // if-block "protType == 1"
[19:17:15.478]        // =>  FALSE
[19:17:15.479]      // skip if-block "protType == 1"
[19:17:15.479]    </control>
[19:17:15.479]    <control if="protType == 2" while="" timeout="0" info="">
[19:17:15.479]      // if-block "protType == 2"
[19:17:15.479]        // =>  TRUE
[19:17:15.479]      <control if="isSWJ" while="" timeout="0" info="">
[19:17:15.479]        // if-block "isSWJ"
[19:17:15.479]          // =>  TRUE
[19:17:15.480]        <control if="hasDormant" while="" timeout="0" info="">
[19:17:15.480]          // if-block "hasDormant"
[19:17:15.480]            // =>  FALSE
[19:17:15.480]          // skip if-block "hasDormant"
[19:17:15.480]        </control>
[19:17:15.480]        <control if="!hasDormant" while="" timeout="0" info="">
[19:17:15.480]          // if-block "!hasDormant"
[19:17:15.481]            // =>  TRUE
[19:17:15.481]          <block atomic="false" info="">
[19:17:15.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:17:15.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:17:15.481]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:17:15.481]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:17:15.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:17:15.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:17:15.483]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:17:15.483]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:17:15.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:17:15.484]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:17:15.484]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:17:15.484]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:17:15.484]          </block>
[19:17:15.484]          // end if-block "!hasDormant"
[19:17:15.484]        </control>
[19:17:15.484]        // end if-block "isSWJ"
[19:17:15.484]      </control>
[19:17:15.485]      <control if="!isSWJ" while="" timeout="0" info="">
[19:17:15.485]        // if-block "!isSWJ"
[19:17:15.485]          // =>  FALSE
[19:17:15.485]        // skip if-block "!isSWJ"
[19:17:15.485]      </control>
[19:17:15.485]      <block atomic="false" info="">
[19:17:15.485]        ReadDP(0x0);
[19:17:15.486]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:17:15.486]      </block>
[19:17:15.486]      // end if-block "protType == 2"
[19:17:15.486]    </control>
[19:17:15.486]  </sequence>
[19:17:15.486]  
[19:17:15.487]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:17:15.487]  
[19:17:15.487]  <debugvars>
[19:17:15.487]    // Pre-defined
[19:17:15.487]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:17:15.487]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:17:15.488]    __dp=0x00000000
[19:17:15.488]    __ap=0x00000000
[19:17:15.488]    __traceout=0x00000000      (Trace Disabled)
[19:17:15.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:17:15.488]    __FlashAddr=0x00000000
[19:17:15.488]    __FlashLen=0x00000000
[19:17:15.488]    __FlashArg=0x00000000
[19:17:15.488]    __FlashOp=0x00000000
[19:17:15.488]    __Result=0x00000000
[19:17:15.488]  </debugvars>
[19:17:15.489]  
[19:17:15.489]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:17:15.489]    <block atomic="false" info="">
[19:17:15.489]      __var SW_DP_ABORT       = 0x0;
[19:17:15.489]        // -> [SW_DP_ABORT <= 0x00000000]
[19:17:15.489]      __var DP_CTRL_STAT      = 0x4;
[19:17:15.489]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:17:15.489]      __var DP_SELECT         = 0x8;
[19:17:15.490]        // -> [DP_SELECT <= 0x00000008]
[19:17:15.490]      __var powered_down      = 0;
[19:17:15.490]        // -> [powered_down <= 0x00000000]
[19:17:15.490]      WriteDP(DP_SELECT, 0x00000000);
[19:17:15.491]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:17:15.491]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:17:15.491]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:17:15.491]        // -> [powered_down <= 0x00000001]
[19:17:15.491]    </block>
[19:17:15.491]    <control if="powered_down" while="" timeout="0" info="">
[19:17:15.491]      // if-block "powered_down"
[19:17:15.491]        // =>  TRUE
[19:17:15.491]      <block atomic="false" info="">
[19:17:15.491]        Message(0, "Debug/System power-up request sent");
[19:17:15.493]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:17:15.494]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:17:15.494]      </block>
[19:17:15.494]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:17:15.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:17:15.495]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:17:15.495]        // while-condition  =>  FALSE
[19:17:15.495]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:17:15.495]      </control>
[19:17:15.495]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:17:15.495]        // if-block "(__protocol & 0xFFFF) == 1"
[19:17:15.495]          // =>  FALSE
[19:17:15.495]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:17:15.495]      </control>
[19:17:15.496]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:17:15.496]        // if-block "(__protocol & 0xFFFF) == 2"
[19:17:15.496]          // =>  TRUE
[19:17:15.496]        <block atomic="false" info="">
[19:17:15.497]          Message(0, "executing SWD power up");
[19:17:15.499]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:17:15.499]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:17:15.499]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:17:15.500]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:17:15.500]        </block>
[19:17:15.500]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:17:15.500]      </control>
[19:17:15.500]      // end if-block "powered_down"
[19:17:15.500]    </control>
[19:17:15.500]    <block atomic="false" info="">
[19:17:15.500]      __var DEBUG_PORT_VAL    = 0;
[19:17:15.500]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:17:15.500]      __var ACCESS_POINT_VAL  = 0;
[19:17:15.500]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:17:15.500]      __ap = 1; 
[19:17:15.500]        // -> [__ap <= 0x00000001]
[19:17:15.501]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:17:15.502]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:17:15.502]      __ap = 4;
[19:17:15.502]        // -> [__ap <= 0x00000004]
[19:17:15.502]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:17:15.504]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:17:15.504]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:17:15.504]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:17:15.505]    </block>
[19:17:15.505]    <block atomic="false" info="">
[19:17:15.505]      __var nReset = 0x80;
[19:17:15.505]        // -> [nReset <= 0x00000080]
[19:17:15.506]      __var canReadPins = 0;
[19:17:15.506]        // -> [canReadPins <= 0x00000000]
[19:17:15.506]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:17:15.506]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:17:15.506]        // -> [canReadPins <= 0x00000001]
[19:17:15.506]    </block>
[19:17:15.507]    <control if="" while="1" timeout="200" info="">
[19:17:15.507]      // while "1"  (timeout="200")
[19:17:15.507]      // while-condition  =>  TRUE
[19:17:15.507]      // while "1"  (timeout="200")
[19:17:15.507]      // while-condition  =>  TRUE
[19:17:15.507]      // while "1"  (timeout="200")
[19:17:15.507]      // while-condition  =>  TRUE
[19:17:15.507]      // while "1"  (timeout="200")
[19:17:15.507]      // while-condition  =>  TRUE
[19:17:15.507]      // while "1"  (timeout="200")
[19:17:15.508]      // while-condition  =>  TRUE
[19:17:15.508]      // while "1"  (timeout="200")
[19:17:15.508]      // while-condition  =>  TRUE
[19:17:15.508]      // while "1"  (timeout="200")
[19:17:15.508]      // while-condition  =>  TRUE
[19:17:15.509]      // while "1"  (timeout="200")
[19:17:15.509]      // while-condition  =>  TRUE
[19:17:15.509]      // while "1"  (timeout="200")
[19:17:15.509]      // while-condition  =>  TRUE
[19:17:15.509]      // while "1"  (timeout="200")
[19:17:15.509]      // while-condition  =>  TRUE
[19:17:15.509]      // while "1"  (timeout="200")
[19:17:15.509]      // while-condition  =>  TRUE
[19:17:15.510]      // while "1"  (timeout="200")
[19:17:15.510]      // while-condition  =>  TRUE
[19:17:15.511]      // while "1"  (timeout="200")
[19:17:15.511]      // while-condition  =>  TRUE
[19:17:15.511]      // while "1"  (timeout="200")
[19:17:15.511]      // while-condition  =>  TRUE
[19:17:15.511]      // while "1"  (timeout="200")
[19:17:15.511]      // while-condition  =>  TRUE
[19:17:15.511]      // while "1"  (timeout="200")
[19:17:15.512]      // while-condition  =>  TRUE
[19:17:15.512]      // while "1"  (timeout="200")
[19:17:15.512]      // while-condition  =>  TRUE
[19:17:15.512]      // while "1"  (timeout="200")
[19:17:15.512]      // while-condition  =>  TRUE
[19:17:15.512]      // while "1"  (timeout="200")
[19:17:15.512]      // while-condition  =>  TRUE
[19:17:15.512]      // while "1"  (timeout="200")
[19:17:15.512]      // while-condition  =>  TRUE
[19:17:15.512]      // while "1"  (timeout="200")
[19:17:15.512]      // while-condition  =>  TRUE
[19:17:15.512]      // while "1"  (timeout="200")
[19:17:15.513]      // while-condition  =>  TRUE
[19:17:15.513]      // while "1"  (timeout="200")
[19:17:15.513]      // while-condition  =>  TRUE
[19:17:15.513]      // while "1"  (timeout="200")
[19:17:15.513]      // while-condition  =>  TRUE
[19:17:15.513]      // while "1"  (timeout="200")
[19:17:15.513]      // while-condition  =>  TRUE
[19:17:15.513]      // while "1"  (timeout="200")
[19:17:15.513]      // while-condition  =>  TRUE
[19:17:15.514]      // while "1"  (timeout="200")
[19:17:15.514]      // while-condition  =>  TRUE
[19:17:15.514]      // while "1"  (timeout="200")
[19:17:15.514]      // while-condition  =>  TRUE
[19:17:15.514]      // while "1"  (timeout="200")
[19:17:15.514]      // while-condition  =>  TRUE
[19:17:15.514]      // while "1"  (timeout="200")
[19:17:15.514]      // while-condition  =>  TRUE
[19:17:15.514]      // while "1"  (timeout="200")
[19:17:15.514]      // while-condition  =>  TRUE
[19:17:15.515]      // while "1"  (timeout="200")
[19:17:15.515]      // while-condition  =>  TRUE
[19:17:15.515]      // while "1"  (timeout="200")
[19:17:15.515]      // while-condition  =>  TRUE
[19:17:15.515]      // while "1"  (timeout="200")
[19:17:15.515]      // while-condition  =>  TRUE
[19:17:15.515]      // while "1"  (timeout="200")
[19:17:15.515]      // while-condition  =>  TRUE
[19:17:15.515]      // while "1"  (timeout="200")
[19:17:15.516]      // while-condition  =>  TRUE
[19:17:15.516]      // while "1"  (timeout="200")
[19:17:15.516]      // while-condition  =>  TRUE
[19:17:15.516]      // while "1"  (timeout="200")
[19:17:15.516]      // while-condition  =>  TRUE
[19:17:15.516]      // while "1"  (timeout="200")
[19:17:15.516]      // while-condition  =>  TRUE
[19:17:15.516]      // while "1"  (timeout="200")
[19:17:15.516]      // while-condition  =>  TRUE
[19:17:15.517]      // while "1"  (timeout="200")
[19:17:15.517]      // while-condition  =>  TRUE
[19:17:15.517]      // while "1"  (timeout="200")
[19:17:15.517]      // while-condition  =>  TRUE
[19:17:15.517]      // while "1"  (timeout="200")
[19:17:15.518]      // while-condition  =>  TRUE
[19:17:15.518]      // while "1"  (timeout="200")
[19:17:15.518]      // while-condition  =>  TRUE
[19:17:15.518]      // while "1"  (timeout="200")
[19:17:15.518]      // while-condition  =>  TRUE
[19:17:15.518]      // while "1"  (timeout="200")
[19:17:15.518]      // while-condition  =>  TRUE
[19:17:15.518]      // while "1"  (timeout="200")
[19:17:15.518]      // while-condition  =>  TRUE
[19:17:15.518]      // while "1"  (timeout="200")
[19:17:15.518]      // while-condition  =>  TRUE
[19:17:15.520]      // while "1"  (timeout="200")
[19:17:15.520]      // while  =>  TIMEOUT
[19:17:15.520]      // end while "1"
[19:17:15.520]    </control>
[19:17:15.520]    <control if="canReadPins" while="" timeout="0" info="">
[19:17:15.520]      // if-block "canReadPins"
[19:17:15.520]        // =>  TRUE
[19:17:15.520]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:17:15.520]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:17:15.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:17:15.521]        // while-condition  =>  FALSE
[19:17:15.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:17:15.521]      </control>
[19:17:15.521]      // end if-block "canReadPins"
[19:17:15.521]    </control>
[19:17:15.521]    <control if="!canReadPins" while="" timeout="0" info="">
[19:17:15.521]      // if-block "!canReadPins"
[19:17:15.522]        // =>  FALSE
[19:17:15.522]      // skip if-block "!canReadPins"
[19:17:15.522]    </control>
[19:17:15.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:17:15.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:17:15.522]        // =>  TRUE
[19:17:15.522]      <block atomic="false" info="">
[19:17:15.522]        WriteAP(0x00, 0x190008);
[19:17:15.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:17:15.523]        WriteAP(0xF0, 0x01);
[19:17:15.524]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:17:15.524]      </block>
[19:17:15.525]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:17:15.525]    </control>
[19:17:15.525]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:17:15.525]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:17:15.525]        // =>  FALSE
[19:17:15.525]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:17:15.525]    </control>
[19:17:15.525]    <block atomic="false" info="">
[19:17:15.525]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:17:15.526]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:17:15.526]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:17:15.526]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:17:15.528]      __ap = 0; //lets make sure we reset the access point selection
[19:17:15.528]        // -> [__ap <= 0x00000000]
[19:17:15.528]    </block>
[19:17:15.528]  </sequence>
[19:17:15.528]  
[19:17:15.534]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:17:15.534]  
[19:17:15.534]  <debugvars>
[19:17:15.534]    // Pre-defined
[19:17:15.534]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:17:15.534]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:17:15.536]    __dp=0x00000000
[19:17:15.536]    __ap=0x00000000
[19:17:15.536]    __traceout=0x00000000      (Trace Disabled)
[19:17:15.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:17:15.536]    __FlashAddr=0x00000000
[19:17:15.536]    __FlashLen=0x00000000
[19:17:15.536]    __FlashArg=0x00000000
[19:17:15.536]    __FlashOp=0x00000000
[19:17:15.536]    __Result=0x00000000
[19:17:15.536]  </debugvars>
[19:17:15.537]  
[19:17:15.537]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:17:15.537]    <block atomic="false" info="">
[19:17:15.537]      __var deviceID = 0;
[19:17:15.537]        // -> [deviceID <= 0x00000000]
[19:17:15.537]      __var version = 0;
[19:17:15.537]        // -> [version <= 0x00000000]
[19:17:15.537]      __var partNum = 0;
[19:17:15.537]        // -> [partNum <= 0x00000000]
[19:17:15.538]      __var manuf = 0;
[19:17:15.538]        // -> [manuf <= 0x00000000]
[19:17:15.538]      __var isMSPM0G1X0X_G3X0X = 0;
[19:17:15.538]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:17:15.538]      __var isProduction = 0;
[19:17:15.538]        // -> [isProduction <= 0x00000000]
[19:17:15.538]      __var continueId = 0;
[19:17:15.538]        // -> [continueId <= 0x00000000]
[19:17:15.539]      deviceID =   Read32(0x41C40004);
[19:17:15.539]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:17:15.539]        // -> [deviceID <= 0x2BB8802F]
[19:17:15.539]      version = deviceID >> 28;
[19:17:15.541]        // -> [version <= 0x00000002]
[19:17:15.541]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:17:15.541]        // -> [partNum <= 0x0000BB88]
[19:17:15.541]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:17:15.541]        // -> [manuf <= 0x00000017]
[19:17:15.541]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:17:15.542]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:17:15.542]      isProduction = (version > 0);
[19:17:15.542]        // -> [isProduction <= 0x00000001]
[19:17:15.542]    </block>
[19:17:15.542]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:17:15.542]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:17:15.542]        // =>  FALSE
[19:17:15.542]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:17:15.542]    </control>
[19:17:15.542]    <control if="continueId == 4" while="" timeout="0" info="">
[19:17:15.542]      // if-block "continueId == 4"
[19:17:15.542]        // =>  FALSE
[19:17:15.542]      // skip if-block "continueId == 4"
[19:17:15.542]    </control>
[19:17:15.542]    <control if="!isProduction" while="" timeout="0" info="">
[19:17:15.542]      // if-block "!isProduction"
[19:17:15.543]        // =>  FALSE
[19:17:15.543]      // skip if-block "!isProduction"
[19:17:15.543]    </control>
[19:17:15.543]  </sequence>
[19:17:15.543]  
[19:18:27.232]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:18:27.232]  
[19:18:27.240]  <debugvars>
[19:18:27.240]    // Pre-defined
[19:18:27.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:18:27.241]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:18:27.241]    __dp=0x00000000
[19:18:27.241]    __ap=0x00000000
[19:18:27.241]    __traceout=0x00000000      (Trace Disabled)
[19:18:27.241]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:18:27.241]    __FlashAddr=0x00000000
[19:18:27.242]    __FlashLen=0x00000000
[19:18:27.242]    __FlashArg=0x00000000
[19:18:27.242]    __FlashOp=0x00000000
[19:18:27.242]    __Result=0x00000000
[19:18:27.242]  </debugvars>
[19:18:27.242]  
[19:18:27.242]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:18:27.242]    <block atomic="false" info="">
[19:18:27.242]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:18:27.242]        // -> [isSWJ <= 0x00000001]
[19:18:27.242]      __var hasDormant = __protocol & 0x00020000;
[19:18:27.242]        // -> [hasDormant <= 0x00000000]
[19:18:27.242]      __var protType   = __protocol & 0x0000FFFF;
[19:18:27.242]        // -> [protType <= 0x00000002]
[19:18:27.242]    </block>
[19:18:27.242]    <control if="protType == 1" while="" timeout="0" info="">
[19:18:27.242]      // if-block "protType == 1"
[19:18:27.243]        // =>  FALSE
[19:18:27.243]      // skip if-block "protType == 1"
[19:18:27.243]    </control>
[19:18:27.243]    <control if="protType == 2" while="" timeout="0" info="">
[19:18:27.243]      // if-block "protType == 2"
[19:18:27.243]        // =>  TRUE
[19:18:27.243]      <control if="isSWJ" while="" timeout="0" info="">
[19:18:27.243]        // if-block "isSWJ"
[19:18:27.243]          // =>  TRUE
[19:18:27.243]        <control if="hasDormant" while="" timeout="0" info="">
[19:18:27.244]          // if-block "hasDormant"
[19:18:27.244]            // =>  FALSE
[19:18:27.244]          // skip if-block "hasDormant"
[19:18:27.244]        </control>
[19:18:27.244]        <control if="!hasDormant" while="" timeout="0" info="">
[19:18:27.245]          // if-block "!hasDormant"
[19:18:27.245]            // =>  TRUE
[19:18:27.245]          <block atomic="false" info="">
[19:18:27.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:18:27.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:18:27.245]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:18:27.246]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:18:27.246]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:18:27.246]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:18:27.246]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:18:27.247]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:18:27.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:18:27.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:18:27.248]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:18:27.248]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:18:27.248]          </block>
[19:18:27.248]          // end if-block "!hasDormant"
[19:18:27.248]        </control>
[19:18:27.248]        // end if-block "isSWJ"
[19:18:27.248]      </control>
[19:18:27.248]      <control if="!isSWJ" while="" timeout="0" info="">
[19:18:27.248]        // if-block "!isSWJ"
[19:18:27.248]          // =>  FALSE
[19:18:27.248]        // skip if-block "!isSWJ"
[19:18:27.248]      </control>
[19:18:27.248]      <block atomic="false" info="">
[19:18:27.248]        ReadDP(0x0);
[19:18:27.250]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:18:27.250]      </block>
[19:18:27.250]      // end if-block "protType == 2"
[19:18:27.250]    </control>
[19:18:27.250]  </sequence>
[19:18:27.251]  
[19:18:27.251]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:18:27.251]  
[19:18:27.251]  <debugvars>
[19:18:27.251]    // Pre-defined
[19:18:27.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:18:27.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:18:27.252]    __dp=0x00000000
[19:18:27.252]    __ap=0x00000000
[19:18:27.252]    __traceout=0x00000000      (Trace Disabled)
[19:18:27.252]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:18:27.252]    __FlashAddr=0x00000000
[19:18:27.252]    __FlashLen=0x00000000
[19:18:27.252]    __FlashArg=0x00000000
[19:18:27.252]    __FlashOp=0x00000000
[19:18:27.252]    __Result=0x00000000
[19:18:27.252]  </debugvars>
[19:18:27.252]  
[19:18:27.252]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:18:27.253]    <block atomic="false" info="">
[19:18:27.253]      __var SW_DP_ABORT       = 0x0;
[19:18:27.253]        // -> [SW_DP_ABORT <= 0x00000000]
[19:18:27.253]      __var DP_CTRL_STAT      = 0x4;
[19:18:27.253]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:18:27.253]      __var DP_SELECT         = 0x8;
[19:18:27.253]        // -> [DP_SELECT <= 0x00000008]
[19:18:27.253]      __var powered_down      = 0;
[19:18:27.253]        // -> [powered_down <= 0x00000000]
[19:18:27.253]      WriteDP(DP_SELECT, 0x00000000);
[19:18:27.254]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:18:27.254]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:18:27.254]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:18:27.254]        // -> [powered_down <= 0x00000001]
[19:18:27.255]    </block>
[19:18:27.255]    <control if="powered_down" while="" timeout="0" info="">
[19:18:27.255]      // if-block "powered_down"
[19:18:27.255]        // =>  TRUE
[19:18:27.256]      <block atomic="false" info="">
[19:18:27.256]        Message(0, "Debug/System power-up request sent");
[19:18:27.258]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:18:27.259]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:18:27.259]      </block>
[19:18:27.259]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:18:27.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:18:27.260]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:18:27.260]        // while-condition  =>  FALSE
[19:18:27.260]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:18:27.260]      </control>
[19:18:27.260]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:18:27.260]        // if-block "(__protocol & 0xFFFF) == 1"
[19:18:27.260]          // =>  FALSE
[19:18:27.260]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:18:27.261]      </control>
[19:18:27.261]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:18:27.261]        // if-block "(__protocol & 0xFFFF) == 2"
[19:18:27.261]          // =>  TRUE
[19:18:27.261]        <block atomic="false" info="">
[19:18:27.261]          Message(0, "executing SWD power up");
[19:18:27.262]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:18:27.263]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:18:27.264]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:18:27.264]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:18:27.264]        </block>
[19:18:27.264]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:18:27.264]      </control>
[19:18:27.264]      // end if-block "powered_down"
[19:18:27.265]    </control>
[19:18:27.265]    <block atomic="false" info="">
[19:18:27.265]      __var DEBUG_PORT_VAL    = 0;
[19:18:27.265]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:18:27.265]      __var ACCESS_POINT_VAL  = 0;
[19:18:27.265]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:18:27.265]      __ap = 1; 
[19:18:27.265]        // -> [__ap <= 0x00000001]
[19:18:27.265]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:18:27.266]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:18:27.266]      __ap = 4;
[19:18:27.267]        // -> [__ap <= 0x00000004]
[19:18:27.267]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:18:27.268]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:18:27.268]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:18:27.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:18:27.269]    </block>
[19:18:27.270]    <block atomic="false" info="">
[19:18:27.270]      __var nReset = 0x80;
[19:18:27.270]        // -> [nReset <= 0x00000080]
[19:18:27.270]      __var canReadPins = 0;
[19:18:27.270]        // -> [canReadPins <= 0x00000000]
[19:18:27.270]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:18:27.270]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:18:27.270]        // -> [canReadPins <= 0x00000001]
[19:18:27.270]    </block>
[19:18:27.270]    <control if="" while="1" timeout="200" info="">
[19:18:27.271]      // while "1"  (timeout="200")
[19:18:27.271]      // while-condition  =>  TRUE
[19:18:27.271]      // while "1"  (timeout="200")
[19:18:27.271]      // while-condition  =>  TRUE
[19:18:27.271]      // while "1"  (timeout="200")
[19:18:27.271]      // while-condition  =>  TRUE
[19:18:27.271]      // while "1"  (timeout="200")
[19:18:27.271]      // while-condition  =>  TRUE
[19:18:27.271]      // while "1"  (timeout="200")
[19:18:27.271]      // while-condition  =>  TRUE
[19:18:27.271]      // while "1"  (timeout="200")
[19:18:27.271]      // while-condition  =>  TRUE
[19:18:27.272]      // while "1"  (timeout="200")
[19:18:27.272]      // while-condition  =>  TRUE
[19:18:27.272]      // while "1"  (timeout="200")
[19:18:27.272]      // while-condition  =>  TRUE
[19:18:27.272]      // while "1"  (timeout="200")
[19:18:27.272]      // while-condition  =>  TRUE
[19:18:27.272]      // while "1"  (timeout="200")
[19:18:27.272]      // while-condition  =>  TRUE
[19:18:27.272]      // while "1"  (timeout="200")
[19:18:27.272]      // while-condition  =>  TRUE
[19:18:27.272]      // while "1"  (timeout="200")
[19:18:27.272]      // while-condition  =>  TRUE
[19:18:27.272]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.273]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.273]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.273]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.273]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.273]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.273]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.273]      // while "1"  (timeout="200")
[19:18:27.273]      // while-condition  =>  TRUE
[19:18:27.275]      // while "1"  (timeout="200")
[19:18:27.275]      // while-condition  =>  TRUE
[19:18:27.275]      // while "1"  (timeout="200")
[19:18:27.275]      // while-condition  =>  TRUE
[19:18:27.275]      // while "1"  (timeout="200")
[19:18:27.275]      // while-condition  =>  TRUE
[19:18:27.275]      // while "1"  (timeout="200")
[19:18:27.275]      // while-condition  =>  TRUE
[19:18:27.276]      // while "1"  (timeout="200")
[19:18:27.276]      // while-condition  =>  TRUE
[19:18:27.276]      // while "1"  (timeout="200")
[19:18:27.276]      // while-condition  =>  TRUE
[19:18:27.276]      // while "1"  (timeout="200")
[19:18:27.276]      // while-condition  =>  TRUE
[19:18:27.277]      // while "1"  (timeout="200")
[19:18:27.277]      // while-condition  =>  TRUE
[19:18:27.277]      // while "1"  (timeout="200")
[19:18:27.277]      // while-condition  =>  TRUE
[19:18:27.277]      // while "1"  (timeout="200")
[19:18:27.277]      // while-condition  =>  TRUE
[19:18:27.277]      // while "1"  (timeout="200")
[19:18:27.277]      // while-condition  =>  TRUE
[19:18:27.277]      // while "1"  (timeout="200")
[19:18:27.278]      // while-condition  =>  TRUE
[19:18:27.278]      // while "1"  (timeout="200")
[19:18:27.278]      // while-condition  =>  TRUE
[19:18:27.278]      // while "1"  (timeout="200")
[19:18:27.278]      // while-condition  =>  TRUE
[19:18:27.278]      // while "1"  (timeout="200")
[19:18:27.278]      // while-condition  =>  TRUE
[19:18:27.278]      // while "1"  (timeout="200")
[19:18:27.278]      // while-condition  =>  TRUE
[19:18:27.278]      // while "1"  (timeout="200")
[19:18:27.278]      // while-condition  =>  TRUE
[19:18:27.279]      // while "1"  (timeout="200")
[19:18:27.279]      // while-condition  =>  TRUE
[19:18:27.279]      // while "1"  (timeout="200")
[19:18:27.279]      // while-condition  =>  TRUE
[19:18:27.279]      // while "1"  (timeout="200")
[19:18:27.279]      // while-condition  =>  TRUE
[19:18:27.279]      // while "1"  (timeout="200")
[19:18:27.279]      // while-condition  =>  TRUE
[19:18:27.279]      // while "1"  (timeout="200")
[19:18:27.279]      // while-condition  =>  TRUE
[19:18:27.279]      // while "1"  (timeout="200")
[19:18:27.279]      // while-condition  =>  TRUE
[19:18:27.280]      // while "1"  (timeout="200")
[19:18:27.280]      // while-condition  =>  TRUE
[19:18:27.280]      // while "1"  (timeout="200")
[19:18:27.280]      // while-condition  =>  TRUE
[19:18:27.280]      // while "1"  (timeout="200")
[19:18:27.280]      // while-condition  =>  TRUE
[19:18:27.280]      // while "1"  (timeout="200")
[19:18:27.280]      // while-condition  =>  TRUE
[19:18:27.280]      // while "1"  (timeout="200")
[19:18:27.280]      // while-condition  =>  TRUE
[19:18:27.280]      // while "1"  (timeout="200")
[19:18:27.280]      // while-condition  =>  TRUE
[19:18:27.280]      // while "1"  (timeout="200")
[19:18:27.280]      // while-condition  =>  TRUE
[19:18:27.281]      // while "1"  (timeout="200")
[19:18:27.281]      // while-condition  =>  TRUE
[19:18:27.281]      // while "1"  (timeout="200")
[19:18:27.281]      // while-condition  =>  TRUE
[19:18:27.281]      // while "1"  (timeout="200")
[19:18:27.281]      // while-condition  =>  TRUE
[19:18:27.281]      // while "1"  (timeout="200")
[19:18:27.281]      // while-condition  =>  TRUE
[19:18:27.281]      // while "1"  (timeout="200")
[19:18:27.281]      // while-condition  =>  TRUE
[19:18:27.281]      // while "1"  (timeout="200")
[19:18:27.281]      // while-condition  =>  TRUE
[19:18:27.282]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.283]      // while-condition  =>  TRUE
[19:18:27.283]      // while "1"  (timeout="200")
[19:18:27.284]      // while-condition  =>  TRUE
[19:18:27.284]      // while "1"  (timeout="200")
[19:18:27.284]      // while-condition  =>  TRUE
[19:18:27.284]      // while "1"  (timeout="200")
[19:18:27.284]      // while-condition  =>  TRUE
[19:18:27.284]      // while "1"  (timeout="200")
[19:18:27.284]      // while-condition  =>  TRUE
[19:18:27.284]      // while "1"  (timeout="200")
[19:18:27.284]      // while-condition  =>  TRUE
[19:18:27.284]      // while "1"  (timeout="200")
[19:18:27.285]      // while-condition  =>  TRUE
[19:18:27.285]      // while "1"  (timeout="200")
[19:18:27.285]      // while  =>  TIMEOUT
[19:18:27.285]      // end while "1"
[19:18:27.285]    </control>
[19:18:27.285]    <control if="canReadPins" while="" timeout="0" info="">
[19:18:27.285]      // if-block "canReadPins"
[19:18:27.285]        // =>  TRUE
[19:18:27.285]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:18:27.286]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:18:27.286]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:18:27.286]        // while-condition  =>  FALSE
[19:18:27.286]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:18:27.286]      </control>
[19:18:27.288]      // end if-block "canReadPins"
[19:18:27.288]    </control>
[19:18:27.288]    <control if="!canReadPins" while="" timeout="0" info="">
[19:18:27.288]      // if-block "!canReadPins"
[19:18:27.288]        // =>  FALSE
[19:18:27.288]      // skip if-block "!canReadPins"
[19:18:27.288]    </control>
[19:18:27.288]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:18:27.288]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:18:27.288]        // =>  TRUE
[19:18:27.288]      <block atomic="false" info="">
[19:18:27.289]        WriteAP(0x00, 0x190008);
[19:18:27.289]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:18:27.289]        WriteAP(0xF0, 0x01);
[19:18:27.290]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:18:27.290]      </block>
[19:18:27.291]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:18:27.291]    </control>
[19:18:27.291]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:18:27.291]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:18:27.291]        // =>  FALSE
[19:18:27.291]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:18:27.291]    </control>
[19:18:27.291]    <block atomic="false" info="">
[19:18:27.291]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:18:27.292]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:18:27.292]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:18:27.292]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:18:27.293]      __ap = 0; //lets make sure we reset the access point selection
[19:18:27.294]        // -> [__ap <= 0x00000000]
[19:18:27.294]    </block>
[19:18:27.294]  </sequence>
[19:18:27.294]  
[19:18:27.301]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:18:27.301]  
[19:18:27.301]  <debugvars>
[19:18:27.301]    // Pre-defined
[19:18:27.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:18:27.301]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:18:27.301]    __dp=0x00000000
[19:18:27.301]    __ap=0x00000000
[19:18:27.301]    __traceout=0x00000000      (Trace Disabled)
[19:18:27.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:18:27.302]    __FlashAddr=0x00000000
[19:18:27.302]    __FlashLen=0x00000000
[19:18:27.302]    __FlashArg=0x00000000
[19:18:27.302]    __FlashOp=0x00000000
[19:18:27.302]    __Result=0x00000000
[19:18:27.302]  </debugvars>
[19:18:27.302]  
[19:18:27.302]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:18:27.302]    <block atomic="false" info="">
[19:18:27.302]      __var deviceID = 0;
[19:18:27.302]        // -> [deviceID <= 0x00000000]
[19:18:27.302]      __var version = 0;
[19:18:27.302]        // -> [version <= 0x00000000]
[19:18:27.302]      __var partNum = 0;
[19:18:27.303]        // -> [partNum <= 0x00000000]
[19:18:27.304]      __var manuf = 0;
[19:18:27.304]        // -> [manuf <= 0x00000000]
[19:18:27.304]      __var isMSPM0G1X0X_G3X0X = 0;
[19:18:27.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:18:27.304]      __var isProduction = 0;
[19:18:27.304]        // -> [isProduction <= 0x00000000]
[19:18:27.304]      __var continueId = 0;
[19:18:27.304]        // -> [continueId <= 0x00000000]
[19:18:27.304]      deviceID =   Read32(0x41C40004);
[19:18:27.306]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:18:27.306]        // -> [deviceID <= 0x2BB8802F]
[19:18:27.306]      version = deviceID >> 28;
[19:18:27.306]        // -> [version <= 0x00000002]
[19:18:27.306]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:18:27.306]        // -> [partNum <= 0x0000BB88]
[19:18:27.306]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:18:27.306]        // -> [manuf <= 0x00000017]
[19:18:27.306]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:18:27.306]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:18:27.306]      isProduction = (version > 0);
[19:18:27.306]        // -> [isProduction <= 0x00000001]
[19:18:27.307]    </block>
[19:18:27.307]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:18:27.307]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:18:27.307]        // =>  FALSE
[19:18:27.307]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:18:27.307]    </control>
[19:18:27.307]    <control if="continueId == 4" while="" timeout="0" info="">
[19:18:27.307]      // if-block "continueId == 4"
[19:18:27.307]        // =>  FALSE
[19:18:27.307]      // skip if-block "continueId == 4"
[19:18:27.307]    </control>
[19:18:27.307]    <control if="!isProduction" while="" timeout="0" info="">
[19:18:27.307]      // if-block "!isProduction"
[19:18:27.309]        // =>  FALSE
[19:18:27.309]      // skip if-block "!isProduction"
[19:18:27.309]    </control>
[19:18:27.309]  </sequence>
[19:18:27.309]  
[19:18:30.475]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:18:30.475]  
[19:18:30.483]  <debugvars>
[19:18:30.483]    // Pre-defined
[19:18:30.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:18:30.483]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:18:30.483]    __dp=0x00000000
[19:18:30.483]    __ap=0x00000000
[19:18:30.483]    __traceout=0x00000000      (Trace Disabled)
[19:18:30.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:18:30.483]    __FlashAddr=0x00000000
[19:18:30.483]    __FlashLen=0x00000000
[19:18:30.483]    __FlashArg=0x00000000
[19:18:30.484]    __FlashOp=0x00000000
[19:18:30.484]    __Result=0x00000000
[19:18:30.484]  </debugvars>
[19:18:30.484]  
[19:18:30.484]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:18:30.484]    <block atomic="false" info="">
[19:18:30.484]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:18:30.484]        // -> [isSWJ <= 0x00000001]
[19:18:30.484]      __var hasDormant = __protocol & 0x00020000;
[19:18:30.485]        // -> [hasDormant <= 0x00000000]
[19:18:30.485]      __var protType   = __protocol & 0x0000FFFF;
[19:18:30.485]        // -> [protType <= 0x00000002]
[19:18:30.485]    </block>
[19:18:30.485]    <control if="protType == 1" while="" timeout="0" info="">
[19:18:30.485]      // if-block "protType == 1"
[19:18:30.485]        // =>  FALSE
[19:18:30.485]      // skip if-block "protType == 1"
[19:18:30.485]    </control>
[19:18:30.485]    <control if="protType == 2" while="" timeout="0" info="">
[19:18:30.485]      // if-block "protType == 2"
[19:18:30.485]        // =>  TRUE
[19:18:30.486]      <control if="isSWJ" while="" timeout="0" info="">
[19:18:30.486]        // if-block "isSWJ"
[19:18:30.486]          // =>  TRUE
[19:18:30.486]        <control if="hasDormant" while="" timeout="0" info="">
[19:18:30.486]          // if-block "hasDormant"
[19:18:30.486]            // =>  FALSE
[19:18:30.486]          // skip if-block "hasDormant"
[19:18:30.486]        </control>
[19:18:30.486]        <control if="!hasDormant" while="" timeout="0" info="">
[19:18:30.486]          // if-block "!hasDormant"
[19:18:30.486]            // =>  TRUE
[19:18:30.487]          <block atomic="false" info="">
[19:18:30.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:18:30.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:18:30.487]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:18:30.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:18:30.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:18:30.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:18:30.488]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:18:30.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:18:30.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:18:30.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:18:30.489]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:18:30.489]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:18:30.489]          </block>
[19:18:30.489]          // end if-block "!hasDormant"
[19:18:30.489]        </control>
[19:18:30.489]        // end if-block "isSWJ"
[19:18:30.489]      </control>
[19:18:30.489]      <control if="!isSWJ" while="" timeout="0" info="">
[19:18:30.489]        // if-block "!isSWJ"
[19:18:30.489]          // =>  FALSE
[19:18:30.489]        // skip if-block "!isSWJ"
[19:18:30.489]      </control>
[19:18:30.491]      <block atomic="false" info="">
[19:18:30.491]        ReadDP(0x0);
[19:18:30.491]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:18:30.491]      </block>
[19:18:30.491]      // end if-block "protType == 2"
[19:18:30.491]    </control>
[19:18:30.491]  </sequence>
[19:18:30.491]  
[19:18:30.491]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:18:30.491]  
[19:18:30.493]  <debugvars>
[19:18:30.493]    // Pre-defined
[19:18:30.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:18:30.493]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:18:30.493]    __dp=0x00000000
[19:18:30.493]    __ap=0x00000000
[19:18:30.493]    __traceout=0x00000000      (Trace Disabled)
[19:18:30.494]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:18:30.494]    __FlashAddr=0x00000000
[19:18:30.494]    __FlashLen=0x00000000
[19:18:30.494]    __FlashArg=0x00000000
[19:18:30.494]    __FlashOp=0x00000000
[19:18:30.494]    __Result=0x00000000
[19:18:30.494]  </debugvars>
[19:18:30.494]  
[19:18:30.494]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:18:30.494]    <block atomic="false" info="">
[19:18:30.494]      __var SW_DP_ABORT       = 0x0;
[19:18:30.495]        // -> [SW_DP_ABORT <= 0x00000000]
[19:18:30.495]      __var DP_CTRL_STAT      = 0x4;
[19:18:30.495]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:18:30.495]      __var DP_SELECT         = 0x8;
[19:18:30.495]        // -> [DP_SELECT <= 0x00000008]
[19:18:30.495]      __var powered_down      = 0;
[19:18:30.495]        // -> [powered_down <= 0x00000000]
[19:18:30.495]      WriteDP(DP_SELECT, 0x00000000);
[19:18:30.496]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:18:30.496]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:18:30.496]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:18:30.496]        // -> [powered_down <= 0x00000001]
[19:18:30.496]    </block>
[19:18:30.497]    <control if="powered_down" while="" timeout="0" info="">
[19:18:30.497]      // if-block "powered_down"
[19:18:30.497]        // =>  TRUE
[19:18:30.497]      <block atomic="false" info="">
[19:18:30.497]        Message(0, "Debug/System power-up request sent");
[19:18:30.499]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:18:30.499]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:18:30.499]      </block>
[19:18:30.499]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:18:30.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:18:30.501]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:18:30.501]        // while-condition  =>  FALSE
[19:18:30.501]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:18:30.501]      </control>
[19:18:30.501]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:18:30.502]        // if-block "(__protocol & 0xFFFF) == 1"
[19:18:30.502]          // =>  FALSE
[19:18:30.502]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:18:30.502]      </control>
[19:18:30.502]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:18:30.502]        // if-block "(__protocol & 0xFFFF) == 2"
[19:18:30.502]          // =>  TRUE
[19:18:30.502]        <block atomic="false" info="">
[19:18:30.502]          Message(0, "executing SWD power up");
[19:18:30.503]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:18:30.504]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:18:30.504]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:18:30.505]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:18:30.505]        </block>
[19:18:30.505]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:18:30.505]      </control>
[19:18:30.505]      // end if-block "powered_down"
[19:18:30.506]    </control>
[19:18:30.506]    <block atomic="false" info="">
[19:18:30.506]      __var DEBUG_PORT_VAL    = 0;
[19:18:30.506]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:18:30.506]      __var ACCESS_POINT_VAL  = 0;
[19:18:30.506]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:18:30.506]      __ap = 1; 
[19:18:30.506]        // -> [__ap <= 0x00000001]
[19:18:30.506]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:18:30.507]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:18:30.508]      __ap = 4;
[19:18:30.508]        // -> [__ap <= 0x00000004]
[19:18:30.508]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:18:30.508]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:18:30.509]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:18:30.509]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:18:30.509]    </block>
[19:18:30.509]    <block atomic="false" info="">
[19:18:30.511]      __var nReset = 0x80;
[19:18:30.511]        // -> [nReset <= 0x00000080]
[19:18:30.511]      __var canReadPins = 0;
[19:18:30.511]        // -> [canReadPins <= 0x00000000]
[19:18:30.511]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:18:30.511]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:18:30.511]        // -> [canReadPins <= 0x00000001]
[19:18:30.512]    </block>
[19:18:30.512]    <control if="" while="1" timeout="200" info="">
[19:18:30.512]      // while "1"  (timeout="200")
[19:18:30.512]      // while-condition  =>  TRUE
[19:18:30.512]      // while "1"  (timeout="200")
[19:18:30.512]      // while-condition  =>  TRUE
[19:18:30.512]      // while "1"  (timeout="200")
[19:18:30.512]      // while-condition  =>  TRUE
[19:18:30.512]      // while "1"  (timeout="200")
[19:18:30.512]      // while-condition  =>  TRUE
[19:18:30.512]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.513]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.513]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.513]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.513]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.513]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.513]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.513]      // while "1"  (timeout="200")
[19:18:30.513]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.515]      // while "1"  (timeout="200")
[19:18:30.515]      // while-condition  =>  TRUE
[19:18:30.516]      // while "1"  (timeout="200")
[19:18:30.516]      // while-condition  =>  TRUE
[19:18:30.516]      // while "1"  (timeout="200")
[19:18:30.516]      // while-condition  =>  TRUE
[19:18:30.516]      // while "1"  (timeout="200")
[19:18:30.516]      // while-condition  =>  TRUE
[19:18:30.516]      // while "1"  (timeout="200")
[19:18:30.516]      // while-condition  =>  TRUE
[19:18:30.516]      // while "1"  (timeout="200")
[19:18:30.516]      // while-condition  =>  TRUE
[19:18:30.516]      // while "1"  (timeout="200")
[19:18:30.516]      // while-condition  =>  TRUE
[19:18:30.516]      // while "1"  (timeout="200")
[19:18:30.516]      // while-condition  =>  TRUE
[19:18:30.517]      // while "1"  (timeout="200")
[19:18:30.517]      // while-condition  =>  TRUE
[19:18:30.517]      // while "1"  (timeout="200")
[19:18:30.517]      // while-condition  =>  TRUE
[19:18:30.517]      // while "1"  (timeout="200")
[19:18:30.517]      // while-condition  =>  TRUE
[19:18:30.517]      // while "1"  (timeout="200")
[19:18:30.517]      // while-condition  =>  TRUE
[19:18:30.517]      // while "1"  (timeout="200")
[19:18:30.517]      // while-condition  =>  TRUE
[19:18:30.517]      // while "1"  (timeout="200")
[19:18:30.517]      // while-condition  =>  TRUE
[19:18:30.517]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.519]      // while-condition  =>  TRUE
[19:18:30.519]      // while "1"  (timeout="200")
[19:18:30.521]      // while-condition  =>  TRUE
[19:18:30.521]      // while "1"  (timeout="200")
[19:18:30.521]      // while  =>  TIMEOUT
[19:18:30.521]      // end while "1"
[19:18:30.521]    </control>
[19:18:30.521]    <control if="canReadPins" while="" timeout="0" info="">
[19:18:30.521]      // if-block "canReadPins"
[19:18:30.521]        // =>  TRUE
[19:18:30.521]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:18:30.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:18:30.522]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:18:30.522]        // while-condition  =>  FALSE
[19:18:30.522]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:18:30.522]      </control>
[19:18:30.522]      // end if-block "canReadPins"
[19:18:30.522]    </control>
[19:18:30.522]    <control if="!canReadPins" while="" timeout="0" info="">
[19:18:30.522]      // if-block "!canReadPins"
[19:18:30.522]        // =>  FALSE
[19:18:30.522]      // skip if-block "!canReadPins"
[19:18:30.522]    </control>
[19:18:30.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:18:30.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:18:30.522]        // =>  TRUE
[19:18:30.522]      <block atomic="false" info="">
[19:18:30.522]        WriteAP(0x00, 0x190008);
[19:18:30.524]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:18:30.524]        WriteAP(0xF0, 0x01);
[19:18:30.525]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:18:30.526]      </block>
[19:18:30.526]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:18:30.526]    </control>
[19:18:30.526]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:18:30.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:18:30.526]        // =>  FALSE
[19:18:30.526]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:18:30.526]    </control>
[19:18:30.526]    <block atomic="false" info="">
[19:18:30.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:18:30.528]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:18:30.528]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:18:30.528]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:18:30.529]      __ap = 0; //lets make sure we reset the access point selection
[19:18:30.529]        // -> [__ap <= 0x00000000]
[19:18:30.529]    </block>
[19:18:30.529]  </sequence>
[19:18:30.529]  
[19:18:30.535]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:18:30.535]  
[19:18:30.535]  <debugvars>
[19:18:30.535]    // Pre-defined
[19:18:30.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:18:30.536]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:18:30.536]    __dp=0x00000000
[19:18:30.536]    __ap=0x00000000
[19:18:30.536]    __traceout=0x00000000      (Trace Disabled)
[19:18:30.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:18:30.536]    __FlashAddr=0x00000000
[19:18:30.536]    __FlashLen=0x00000000
[19:18:30.536]    __FlashArg=0x00000000
[19:18:30.536]    __FlashOp=0x00000000
[19:18:30.536]    __Result=0x00000000
[19:18:30.537]  </debugvars>
[19:18:30.537]  
[19:18:30.537]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:18:30.537]    <block atomic="false" info="">
[19:18:30.537]      __var deviceID = 0;
[19:18:30.537]        // -> [deviceID <= 0x00000000]
[19:18:30.537]      __var version = 0;
[19:18:30.537]        // -> [version <= 0x00000000]
[19:18:30.538]      __var partNum = 0;
[19:18:30.538]        // -> [partNum <= 0x00000000]
[19:18:30.538]      __var manuf = 0;
[19:18:30.538]        // -> [manuf <= 0x00000000]
[19:18:30.538]      __var isMSPM0G1X0X_G3X0X = 0;
[19:18:30.538]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:18:30.538]      __var isProduction = 0;
[19:18:30.538]        // -> [isProduction <= 0x00000000]
[19:18:30.538]      __var continueId = 0;
[19:18:30.539]        // -> [continueId <= 0x00000000]
[19:18:30.539]      deviceID =   Read32(0x41C40004);
[19:18:30.540]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:18:30.540]        // -> [deviceID <= 0x2BB8802F]
[19:18:30.540]      version = deviceID >> 28;
[19:18:30.540]        // -> [version <= 0x00000002]
[19:18:30.540]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:18:30.540]        // -> [partNum <= 0x0000BB88]
[19:18:30.540]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:18:30.541]        // -> [manuf <= 0x00000017]
[19:18:30.541]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:18:30.541]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:18:30.541]      isProduction = (version > 0);
[19:18:30.541]        // -> [isProduction <= 0x00000001]
[19:18:30.541]    </block>
[19:18:30.541]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:18:30.541]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:18:30.541]        // =>  FALSE
[19:18:30.541]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:18:30.541]    </control>
[19:18:30.543]    <control if="continueId == 4" while="" timeout="0" info="">
[19:18:30.543]      // if-block "continueId == 4"
[19:18:30.543]        // =>  FALSE
[19:18:30.543]      // skip if-block "continueId == 4"
[19:18:30.543]    </control>
[19:18:30.543]    <control if="!isProduction" while="" timeout="0" info="">
[19:18:30.543]      // if-block "!isProduction"
[19:18:30.544]        // =>  FALSE
[19:18:30.544]      // skip if-block "!isProduction"
[19:18:30.544]    </control>
[19:18:30.544]  </sequence>
[19:18:30.544]  
[19:20:27.591]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:20:27.591]  
[19:20:27.592]  <debugvars>
[19:20:27.592]    // Pre-defined
[19:20:27.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:20:27.592]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:20:27.592]    __dp=0x00000000
[19:20:27.592]    __ap=0x00000000
[19:20:27.592]    __traceout=0x00000000      (Trace Disabled)
[19:20:27.592]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:20:27.592]    __FlashAddr=0x00000000
[19:20:27.592]    __FlashLen=0x00000000
[19:20:27.592]    __FlashArg=0x00000000
[19:20:27.593]    __FlashOp=0x00000000
[19:20:27.593]    __Result=0x00000000
[19:20:27.593]  </debugvars>
[19:20:27.593]  
[19:20:27.593]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:20:27.593]    <block atomic="false" info="">
[19:20:27.593]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:20:27.593]        // -> [isSWJ <= 0x00000001]
[19:20:27.593]      __var hasDormant = __protocol & 0x00020000;
[19:20:27.593]        // -> [hasDormant <= 0x00000000]
[19:20:27.593]      __var protType   = __protocol & 0x0000FFFF;
[19:20:27.593]        // -> [protType <= 0x00000002]
[19:20:27.593]    </block>
[19:20:27.593]    <control if="protType == 1" while="" timeout="0" info="">
[19:20:27.593]      // if-block "protType == 1"
[19:20:27.593]        // =>  FALSE
[19:20:27.593]      // skip if-block "protType == 1"
[19:20:27.594]    </control>
[19:20:27.594]    <control if="protType == 2" while="" timeout="0" info="">
[19:20:27.594]      // if-block "protType == 2"
[19:20:27.594]        // =>  TRUE
[19:20:27.594]      <control if="isSWJ" while="" timeout="0" info="">
[19:20:27.594]        // if-block "isSWJ"
[19:20:27.594]          // =>  TRUE
[19:20:27.594]        <control if="hasDormant" while="" timeout="0" info="">
[19:20:27.594]          // if-block "hasDormant"
[19:20:27.594]            // =>  FALSE
[19:20:27.594]          // skip if-block "hasDormant"
[19:20:27.594]        </control>
[19:20:27.594]        <control if="!hasDormant" while="" timeout="0" info="">
[19:20:27.594]          // if-block "!hasDormant"
[19:20:27.594]            // =>  TRUE
[19:20:27.594]          <block atomic="false" info="">
[19:20:27.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:20:27.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:20:27.596]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:20:27.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:20:27.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:20:27.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:20:27.597]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:20:27.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:20:27.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:20:27.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:20:27.597]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:20:27.598]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:20:27.598]          </block>
[19:20:27.598]          // end if-block "!hasDormant"
[19:20:27.598]        </control>
[19:20:27.598]        // end if-block "isSWJ"
[19:20:27.598]      </control>
[19:20:27.598]      <control if="!isSWJ" while="" timeout="0" info="">
[19:20:27.598]        // if-block "!isSWJ"
[19:20:27.598]          // =>  FALSE
[19:20:27.598]        // skip if-block "!isSWJ"
[19:20:27.598]      </control>
[19:20:27.598]      <block atomic="false" info="">
[19:20:27.598]        ReadDP(0x0);
[19:20:27.600]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:20:27.600]      </block>
[19:20:27.600]      // end if-block "protType == 2"
[19:20:27.600]    </control>
[19:20:27.600]  </sequence>
[19:20:27.600]  
[19:20:27.600]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:20:27.600]  
[19:20:27.600]  <debugvars>
[19:20:27.600]    // Pre-defined
[19:20:27.601]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:20:27.601]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:20:27.601]    __dp=0x00000000
[19:20:27.601]    __ap=0x00000000
[19:20:27.601]    __traceout=0x00000000      (Trace Disabled)
[19:20:27.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:20:27.601]    __FlashAddr=0x00000000
[19:20:27.601]    __FlashLen=0x00000000
[19:20:27.602]    __FlashArg=0x00000000
[19:20:27.602]    __FlashOp=0x00000000
[19:20:27.602]    __Result=0x00000000
[19:20:27.602]  </debugvars>
[19:20:27.602]  
[19:20:27.602]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:20:27.602]    <block atomic="false" info="">
[19:20:27.602]      __var SW_DP_ABORT       = 0x0;
[19:20:27.602]        // -> [SW_DP_ABORT <= 0x00000000]
[19:20:27.602]      __var DP_CTRL_STAT      = 0x4;
[19:20:27.602]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:20:27.602]      __var DP_SELECT         = 0x8;
[19:20:27.602]        // -> [DP_SELECT <= 0x00000008]
[19:20:27.604]      __var powered_down      = 0;
[19:20:27.604]        // -> [powered_down <= 0x00000000]
[19:20:27.604]      WriteDP(DP_SELECT, 0x00000000);
[19:20:27.604]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:20:27.604]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:20:27.605]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:20:27.605]        // -> [powered_down <= 0x00000001]
[19:20:27.605]    </block>
[19:20:27.605]    <control if="powered_down" while="" timeout="0" info="">
[19:20:27.605]      // if-block "powered_down"
[19:20:27.605]        // =>  TRUE
[19:20:27.606]      <block atomic="false" info="">
[19:20:27.606]        Message(0, "Debug/System power-up request sent");
[19:20:27.607]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:20:27.608]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:20:27.608]      </block>
[19:20:27.608]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:20:27.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:20:27.609]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:20:27.609]        // while-condition  =>  FALSE
[19:20:27.609]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:20:27.609]      </control>
[19:20:27.609]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:20:27.609]        // if-block "(__protocol & 0xFFFF) == 1"
[19:20:27.609]          // =>  FALSE
[19:20:27.609]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:20:27.609]      </control>
[19:20:27.609]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:20:27.609]        // if-block "(__protocol & 0xFFFF) == 2"
[19:20:27.609]          // =>  TRUE
[19:20:27.609]        <block atomic="false" info="">
[19:20:27.610]          Message(0, "executing SWD power up");
[19:20:27.612]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:20:27.612]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:20:27.613]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:20:27.613]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:20:27.613]        </block>
[19:20:27.613]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:20:27.613]      </control>
[19:20:27.614]      // end if-block "powered_down"
[19:20:27.614]    </control>
[19:20:27.614]    <block atomic="false" info="">
[19:20:27.614]      __var DEBUG_PORT_VAL    = 0;
[19:20:27.614]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:20:27.614]      __var ACCESS_POINT_VAL  = 0;
[19:20:27.614]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:20:27.614]      __ap = 1; 
[19:20:27.614]        // -> [__ap <= 0x00000001]
[19:20:27.615]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:20:27.616]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:20:27.616]      __ap = 4;
[19:20:27.616]        // -> [__ap <= 0x00000004]
[19:20:27.616]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:20:27.617]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:20:27.617]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:20:27.617]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:20:27.619]    </block>
[19:20:27.619]    <block atomic="false" info="">
[19:20:27.619]      __var nReset = 0x80;
[19:20:27.619]        // -> [nReset <= 0x00000080]
[19:20:27.619]      __var canReadPins = 0;
[19:20:27.619]        // -> [canReadPins <= 0x00000000]
[19:20:27.619]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:20:27.620]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:20:27.620]        // -> [canReadPins <= 0x00000001]
[19:20:27.620]    </block>
[19:20:27.620]    <control if="" while="1" timeout="200" info="">
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.621]      // while "1"  (timeout="200")
[19:20:27.621]      // while-condition  =>  TRUE
[19:20:27.622]      // while "1"  (timeout="200")
[19:20:27.622]      // while-condition  =>  TRUE
[19:20:27.622]      // while "1"  (timeout="200")
[19:20:27.622]      // while-condition  =>  TRUE
[19:20:27.622]      // while "1"  (timeout="200")
[19:20:27.622]      // while-condition  =>  TRUE
[19:20:27.622]      // while "1"  (timeout="200")
[19:20:27.622]      // while-condition  =>  TRUE
[19:20:27.622]      // while "1"  (timeout="200")
[19:20:27.623]      // while-condition  =>  TRUE
[19:20:27.623]      // while "1"  (timeout="200")
[19:20:27.623]      // while-condition  =>  TRUE
[19:20:27.623]      // while "1"  (timeout="200")
[19:20:27.623]      // while-condition  =>  TRUE
[19:20:27.623]      // while "1"  (timeout="200")
[19:20:27.624]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.625]      // while-condition  =>  TRUE
[19:20:27.625]      // while "1"  (timeout="200")
[19:20:27.627]      // while-condition  =>  TRUE
[19:20:27.627]      // while "1"  (timeout="200")
[19:20:27.627]      // while-condition  =>  TRUE
[19:20:27.627]      // while "1"  (timeout="200")
[19:20:27.627]      // while-condition  =>  TRUE
[19:20:27.627]      // while "1"  (timeout="200")
[19:20:27.627]      // while-condition  =>  TRUE
[19:20:27.627]      // while "1"  (timeout="200")
[19:20:27.627]      // while-condition  =>  TRUE
[19:20:27.627]      // while "1"  (timeout="200")
[19:20:27.627]      // while-condition  =>  TRUE
[19:20:27.627]      // while "1"  (timeout="200")
[19:20:27.628]      // while-condition  =>  TRUE
[19:20:27.628]      // while "1"  (timeout="200")
[19:20:27.628]      // while-condition  =>  TRUE
[19:20:27.628]      // while "1"  (timeout="200")
[19:20:27.628]      // while-condition  =>  TRUE
[19:20:27.628]      // while "1"  (timeout="200")
[19:20:27.628]      // while-condition  =>  TRUE
[19:20:27.629]      // while "1"  (timeout="200")
[19:20:27.629]      // while-condition  =>  TRUE
[19:20:27.629]      // while "1"  (timeout="200")
[19:20:27.629]      // while-condition  =>  TRUE
[19:20:27.629]      // while "1"  (timeout="200")
[19:20:27.629]      // while-condition  =>  TRUE
[19:20:27.629]      // while "1"  (timeout="200")
[19:20:27.629]      // while-condition  =>  TRUE
[19:20:27.630]      // while "1"  (timeout="200")
[19:20:27.630]      // while  =>  TIMEOUT
[19:20:27.630]      // end while "1"
[19:20:27.630]    </control>
[19:20:27.630]    <control if="canReadPins" while="" timeout="0" info="">
[19:20:27.630]      // if-block "canReadPins"
[19:20:27.630]        // =>  TRUE
[19:20:27.630]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:20:27.630]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:20:27.631]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:20:27.631]        // while-condition  =>  FALSE
[19:20:27.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:20:27.631]      </control>
[19:20:27.631]      // end if-block "canReadPins"
[19:20:27.631]    </control>
[19:20:27.631]    <control if="!canReadPins" while="" timeout="0" info="">
[19:20:27.631]      // if-block "!canReadPins"
[19:20:27.631]        // =>  FALSE
[19:20:27.631]      // skip if-block "!canReadPins"
[19:20:27.631]    </control>
[19:20:27.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:20:27.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:20:27.632]        // =>  TRUE
[19:20:27.632]      <block atomic="false" info="">
[19:20:27.632]        WriteAP(0x00, 0x190008);
[19:20:27.633]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:20:27.633]        WriteAP(0xF0, 0x01);
[19:20:27.634]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:20:27.634]      </block>
[19:20:27.634]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:20:27.635]    </control>
[19:20:27.635]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:20:27.635]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:20:27.635]        // =>  FALSE
[19:20:27.635]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:20:27.635]    </control>
[19:20:27.635]    <block atomic="false" info="">
[19:20:27.636]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:20:27.637]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:20:27.637]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:20:27.637]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:20:27.638]      __ap = 0; //lets make sure we reset the access point selection
[19:20:27.638]        // -> [__ap <= 0x00000000]
[19:20:27.639]    </block>
[19:20:27.639]  </sequence>
[19:20:27.639]  
[19:20:27.645]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:20:27.645]  
[19:20:27.645]  <debugvars>
[19:20:27.645]    // Pre-defined
[19:20:27.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:20:27.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:20:27.646]    __dp=0x00000000
[19:20:27.646]    __ap=0x00000000
[19:20:27.646]    __traceout=0x00000000      (Trace Disabled)
[19:20:27.646]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:20:27.646]    __FlashAddr=0x00000000
[19:20:27.646]    __FlashLen=0x00000000
[19:20:27.646]    __FlashArg=0x00000000
[19:20:27.646]    __FlashOp=0x00000000
[19:20:27.646]    __Result=0x00000000
[19:20:27.646]  </debugvars>
[19:20:27.646]  
[19:20:27.646]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:20:27.648]    <block atomic="false" info="">
[19:20:27.648]      __var deviceID = 0;
[19:20:27.648]        // -> [deviceID <= 0x00000000]
[19:20:27.648]      __var version = 0;
[19:20:27.648]        // -> [version <= 0x00000000]
[19:20:27.648]      __var partNum = 0;
[19:20:27.648]        // -> [partNum <= 0x00000000]
[19:20:27.648]      __var manuf = 0;
[19:20:27.648]        // -> [manuf <= 0x00000000]
[19:20:27.648]      __var isMSPM0G1X0X_G3X0X = 0;
[19:20:27.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:20:27.649]      __var isProduction = 0;
[19:20:27.649]        // -> [isProduction <= 0x00000000]
[19:20:27.649]      __var continueId = 0;
[19:20:27.649]        // -> [continueId <= 0x00000000]
[19:20:27.649]      deviceID =   Read32(0x41C40004);
[19:20:27.651]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:20:27.651]        // -> [deviceID <= 0x2BB8802F]
[19:20:27.651]      version = deviceID >> 28;
[19:20:27.651]        // -> [version <= 0x00000002]
[19:20:27.651]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:20:27.651]        // -> [partNum <= 0x0000BB88]
[19:20:27.651]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:20:27.651]        // -> [manuf <= 0x00000017]
[19:20:27.651]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:20:27.651]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:20:27.651]      isProduction = (version > 0);
[19:20:27.651]        // -> [isProduction <= 0x00000001]
[19:20:27.651]    </block>
[19:20:27.651]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:20:27.651]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:20:27.652]        // =>  FALSE
[19:20:27.652]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:20:27.652]    </control>
[19:20:27.652]    <control if="continueId == 4" while="" timeout="0" info="">
[19:20:27.652]      // if-block "continueId == 4"
[19:20:27.653]        // =>  FALSE
[19:20:27.653]      // skip if-block "continueId == 4"
[19:20:27.653]    </control>
[19:20:27.653]    <control if="!isProduction" while="" timeout="0" info="">
[19:20:27.653]      // if-block "!isProduction"
[19:20:27.653]        // =>  FALSE
[19:20:27.653]      // skip if-block "!isProduction"
[19:20:27.653]    </control>
[19:20:27.653]  </sequence>
[19:20:27.653]  
[19:21:16.300]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:21:16.300]  
[19:21:16.309]  <debugvars>
[19:21:16.309]    // Pre-defined
[19:21:16.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:21:16.309]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:21:16.309]    __dp=0x00000000
[19:21:16.310]    __ap=0x00000000
[19:21:16.310]    __traceout=0x00000000      (Trace Disabled)
[19:21:16.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:21:16.310]    __FlashAddr=0x00000000
[19:21:16.310]    __FlashLen=0x00000000
[19:21:16.310]    __FlashArg=0x00000000
[19:21:16.310]    __FlashOp=0x00000000
[19:21:16.310]    __Result=0x00000000
[19:21:16.310]  </debugvars>
[19:21:16.310]  
[19:21:16.310]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:21:16.310]    <block atomic="false" info="">
[19:21:16.311]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:21:16.311]        // -> [isSWJ <= 0x00000001]
[19:21:16.311]      __var hasDormant = __protocol & 0x00020000;
[19:21:16.311]        // -> [hasDormant <= 0x00000000]
[19:21:16.311]      __var protType   = __protocol & 0x0000FFFF;
[19:21:16.311]        // -> [protType <= 0x00000002]
[19:21:16.311]    </block>
[19:21:16.311]    <control if="protType == 1" while="" timeout="0" info="">
[19:21:16.311]      // if-block "protType == 1"
[19:21:16.311]        // =>  FALSE
[19:21:16.311]      // skip if-block "protType == 1"
[19:21:16.312]    </control>
[19:21:16.312]    <control if="protType == 2" while="" timeout="0" info="">
[19:21:16.312]      // if-block "protType == 2"
[19:21:16.312]        // =>  TRUE
[19:21:16.312]      <control if="isSWJ" while="" timeout="0" info="">
[19:21:16.312]        // if-block "isSWJ"
[19:21:16.312]          // =>  TRUE
[19:21:16.312]        <control if="hasDormant" while="" timeout="0" info="">
[19:21:16.313]          // if-block "hasDormant"
[19:21:16.313]            // =>  FALSE
[19:21:16.313]          // skip if-block "hasDormant"
[19:21:16.313]        </control>
[19:21:16.313]        <control if="!hasDormant" while="" timeout="0" info="">
[19:21:16.313]          // if-block "!hasDormant"
[19:21:16.313]            // =>  TRUE
[19:21:16.313]          <block atomic="false" info="">
[19:21:16.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:21:16.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:21:16.313]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:21:16.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:21:16.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:21:16.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:21:16.314]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:21:16.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:21:16.314]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:21:16.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:21:16.315]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:21:16.315]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:21:16.315]          </block>
[19:21:16.315]          // end if-block "!hasDormant"
[19:21:16.315]        </control>
[19:21:16.315]        // end if-block "isSWJ"
[19:21:16.316]      </control>
[19:21:16.316]      <control if="!isSWJ" while="" timeout="0" info="">
[19:21:16.316]        // if-block "!isSWJ"
[19:21:16.316]          // =>  FALSE
[19:21:16.316]        // skip if-block "!isSWJ"
[19:21:16.316]      </control>
[19:21:16.316]      <block atomic="false" info="">
[19:21:16.316]        ReadDP(0x0);
[19:21:16.317]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:21:16.317]      </block>
[19:21:16.317]      // end if-block "protType == 2"
[19:21:16.317]    </control>
[19:21:16.317]  </sequence>
[19:21:16.317]  
[19:21:16.319]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:21:16.319]  
[19:21:16.319]  <debugvars>
[19:21:16.319]    // Pre-defined
[19:21:16.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:21:16.319]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:21:16.319]    __dp=0x00000000
[19:21:16.319]    __ap=0x00000000
[19:21:16.319]    __traceout=0x00000000      (Trace Disabled)
[19:21:16.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:21:16.320]    __FlashAddr=0x00000000
[19:21:16.320]    __FlashLen=0x00000000
[19:21:16.320]    __FlashArg=0x00000000
[19:21:16.320]    __FlashOp=0x00000000
[19:21:16.320]    __Result=0x00000000
[19:21:16.320]  </debugvars>
[19:21:16.320]  
[19:21:16.320]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:21:16.321]    <block atomic="false" info="">
[19:21:16.321]      __var SW_DP_ABORT       = 0x0;
[19:21:16.321]        // -> [SW_DP_ABORT <= 0x00000000]
[19:21:16.321]      __var DP_CTRL_STAT      = 0x4;
[19:21:16.321]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:21:16.321]      __var DP_SELECT         = 0x8;
[19:21:16.321]        // -> [DP_SELECT <= 0x00000008]
[19:21:16.321]      __var powered_down      = 0;
[19:21:16.321]        // -> [powered_down <= 0x00000000]
[19:21:16.321]      WriteDP(DP_SELECT, 0x00000000);
[19:21:16.322]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:21:16.322]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:21:16.322]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:21:16.322]        // -> [powered_down <= 0x00000001]
[19:21:16.322]    </block>
[19:21:16.323]    <control if="powered_down" while="" timeout="0" info="">
[19:21:16.323]      // if-block "powered_down"
[19:21:16.323]        // =>  TRUE
[19:21:16.323]      <block atomic="false" info="">
[19:21:16.323]        Message(0, "Debug/System power-up request sent");
[19:21:16.325]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:21:16.325]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:21:16.325]      </block>
[19:21:16.325]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:21:16.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:21:16.327]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:21:16.327]        // while-condition  =>  FALSE
[19:21:16.327]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:21:16.327]      </control>
[19:21:16.327]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:21:16.327]        // if-block "(__protocol & 0xFFFF) == 1"
[19:21:16.327]          // =>  FALSE
[19:21:16.327]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:21:16.327]      </control>
[19:21:16.327]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:21:16.327]        // if-block "(__protocol & 0xFFFF) == 2"
[19:21:16.328]          // =>  TRUE
[19:21:16.328]        <block atomic="false" info="">
[19:21:16.328]          Message(0, "executing SWD power up");
[19:21:16.329]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:21:16.329]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:21:16.329]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:21:16.330]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:21:16.330]        </block>
[19:21:16.330]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:21:16.330]      </control>
[19:21:16.330]      // end if-block "powered_down"
[19:21:16.330]    </control>
[19:21:16.330]    <block atomic="false" info="">
[19:21:16.331]      __var DEBUG_PORT_VAL    = 0;
[19:21:16.331]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:21:16.331]      __var ACCESS_POINT_VAL  = 0;
[19:21:16.332]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:21:16.332]      __ap = 1; 
[19:21:16.332]        // -> [__ap <= 0x00000001]
[19:21:16.332]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:21:16.332]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:21:16.332]      __ap = 4;
[19:21:16.334]        // -> [__ap <= 0x00000004]
[19:21:16.334]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:21:16.334]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:21:16.334]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:21:16.334]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:21:16.336]    </block>
[19:21:16.336]    <block atomic="false" info="">
[19:21:16.336]      __var nReset = 0x80;
[19:21:16.336]        // -> [nReset <= 0x00000080]
[19:21:16.336]      __var canReadPins = 0;
[19:21:16.336]        // -> [canReadPins <= 0x00000000]
[19:21:16.336]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:21:16.336]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:21:16.336]        // -> [canReadPins <= 0x00000001]
[19:21:16.338]    </block>
[19:21:16.338]    <control if="" while="1" timeout="200" info="">
[19:21:16.338]      // while "1"  (timeout="200")
[19:21:16.338]      // while-condition  =>  TRUE
[19:21:16.338]      // while "1"  (timeout="200")
[19:21:16.338]      // while-condition  =>  TRUE
[19:21:16.338]      // while "1"  (timeout="200")
[19:21:16.338]      // while-condition  =>  TRUE
[19:21:16.338]      // while "1"  (timeout="200")
[19:21:16.338]      // while-condition  =>  TRUE
[19:21:16.338]      // while "1"  (timeout="200")
[19:21:16.338]      // while-condition  =>  TRUE
[19:21:16.339]      // while "1"  (timeout="200")
[19:21:16.339]      // while-condition  =>  TRUE
[19:21:16.339]      // while "1"  (timeout="200")
[19:21:16.339]      // while-condition  =>  TRUE
[19:21:16.339]      // while "1"  (timeout="200")
[19:21:16.339]      // while-condition  =>  TRUE
[19:21:16.339]      // while "1"  (timeout="200")
[19:21:16.339]      // while-condition  =>  TRUE
[19:21:16.339]      // while "1"  (timeout="200")
[19:21:16.339]      // while-condition  =>  TRUE
[19:21:16.339]      // while "1"  (timeout="200")
[19:21:16.339]      // while-condition  =>  TRUE
[19:21:16.339]      // while "1"  (timeout="200")
[19:21:16.340]      // while-condition  =>  TRUE
[19:21:16.340]      // while "1"  (timeout="200")
[19:21:16.340]      // while-condition  =>  TRUE
[19:21:16.340]      // while "1"  (timeout="200")
[19:21:16.340]      // while-condition  =>  TRUE
[19:21:16.341]      // while "1"  (timeout="200")
[19:21:16.341]      // while-condition  =>  TRUE
[19:21:16.341]      // while "1"  (timeout="200")
[19:21:16.341]      // while-condition  =>  TRUE
[19:21:16.341]      // while "1"  (timeout="200")
[19:21:16.341]      // while-condition  =>  TRUE
[19:21:16.341]      // while "1"  (timeout="200")
[19:21:16.341]      // while-condition  =>  TRUE
[19:21:16.341]      // while "1"  (timeout="200")
[19:21:16.341]      // while-condition  =>  TRUE
[19:21:16.341]      // while "1"  (timeout="200")
[19:21:16.341]      // while-condition  =>  TRUE
[19:21:16.342]      // while "1"  (timeout="200")
[19:21:16.342]      // while-condition  =>  TRUE
[19:21:16.342]      // while "1"  (timeout="200")
[19:21:16.342]      // while-condition  =>  TRUE
[19:21:16.342]      // while "1"  (timeout="200")
[19:21:16.342]      // while-condition  =>  TRUE
[19:21:16.342]      // while "1"  (timeout="200")
[19:21:16.342]      // while-condition  =>  TRUE
[19:21:16.342]      // while "1"  (timeout="200")
[19:21:16.342]      // while-condition  =>  TRUE
[19:21:16.342]      // while "1"  (timeout="200")
[19:21:16.343]      // while-condition  =>  TRUE
[19:21:16.343]      // while "1"  (timeout="200")
[19:21:16.343]      // while-condition  =>  TRUE
[19:21:16.343]      // while "1"  (timeout="200")
[19:21:16.343]      // while-condition  =>  TRUE
[19:21:16.343]      // while "1"  (timeout="200")
[19:21:16.343]      // while-condition  =>  TRUE
[19:21:16.343]      // while "1"  (timeout="200")
[19:21:16.343]      // while-condition  =>  TRUE
[19:21:16.343]      // while "1"  (timeout="200")
[19:21:16.343]      // while-condition  =>  TRUE
[19:21:16.343]      // while "1"  (timeout="200")
[19:21:16.344]      // while-condition  =>  TRUE
[19:21:16.344]      // while "1"  (timeout="200")
[19:21:16.344]      // while-condition  =>  TRUE
[19:21:16.344]      // while "1"  (timeout="200")
[19:21:16.344]      // while-condition  =>  TRUE
[19:21:16.344]      // while "1"  (timeout="200")
[19:21:16.344]      // while-condition  =>  TRUE
[19:21:16.344]      // while "1"  (timeout="200")
[19:21:16.344]      // while-condition  =>  TRUE
[19:21:16.344]      // while "1"  (timeout="200")
[19:21:16.345]      // while-condition  =>  TRUE
[19:21:16.345]      // while "1"  (timeout="200")
[19:21:16.345]      // while-condition  =>  TRUE
[19:21:16.345]      // while "1"  (timeout="200")
[19:21:16.345]      // while-condition  =>  TRUE
[19:21:16.345]      // while "1"  (timeout="200")
[19:21:16.346]      // while-condition  =>  TRUE
[19:21:16.346]      // while "1"  (timeout="200")
[19:21:16.346]      // while-condition  =>  TRUE
[19:21:16.346]      // while "1"  (timeout="200")
[19:21:16.346]      // while-condition  =>  TRUE
[19:21:16.346]      // while "1"  (timeout="200")
[19:21:16.347]      // while-condition  =>  TRUE
[19:21:16.347]      // while "1"  (timeout="200")
[19:21:16.347]      // while-condition  =>  TRUE
[19:21:16.347]      // while "1"  (timeout="200")
[19:21:16.347]      // while-condition  =>  TRUE
[19:21:16.348]      // while "1"  (timeout="200")
[19:21:16.348]      // while-condition  =>  TRUE
[19:21:16.348]      // while "1"  (timeout="200")
[19:21:16.348]      // while  =>  TIMEOUT
[19:21:16.348]      // end while "1"
[19:21:16.348]    </control>
[19:21:16.348]    <control if="canReadPins" while="" timeout="0" info="">
[19:21:16.348]      // if-block "canReadPins"
[19:21:16.348]        // =>  TRUE
[19:21:16.348]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:21:16.348]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:21:16.348]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:21:16.348]        // while-condition  =>  FALSE
[19:21:16.348]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:21:16.348]      </control>
[19:21:16.349]      // end if-block "canReadPins"
[19:21:16.349]    </control>
[19:21:16.349]    <control if="!canReadPins" while="" timeout="0" info="">
[19:21:16.349]      // if-block "!canReadPins"
[19:21:16.349]        // =>  FALSE
[19:21:16.349]      // skip if-block "!canReadPins"
[19:21:16.349]    </control>
[19:21:16.349]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:21:16.349]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:21:16.351]        // =>  TRUE
[19:21:16.351]      <block atomic="false" info="">
[19:21:16.351]        WriteAP(0x00, 0x190008);
[19:21:16.352]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:21:16.352]        WriteAP(0xF0, 0x01);
[19:21:16.352]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:21:16.352]      </block>
[19:21:16.352]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:21:16.352]    </control>
[19:21:16.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:21:16.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:21:16.352]        // =>  FALSE
[19:21:16.352]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:21:16.352]    </control>
[19:21:16.352]    <block atomic="false" info="">
[19:21:16.352]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:21:16.354]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:21:16.354]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:21:16.355]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:21:16.356]      __ap = 0; //lets make sure we reset the access point selection
[19:21:16.356]        // -> [__ap <= 0x00000000]
[19:21:16.356]    </block>
[19:21:16.356]  </sequence>
[19:21:16.356]  
[19:21:16.363]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:21:16.363]  
[19:21:16.363]  <debugvars>
[19:21:16.363]    // Pre-defined
[19:21:16.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:21:16.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:21:16.363]    __dp=0x00000000
[19:21:16.363]    __ap=0x00000000
[19:21:16.363]    __traceout=0x00000000      (Trace Disabled)
[19:21:16.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:21:16.364]    __FlashAddr=0x00000000
[19:21:16.364]    __FlashLen=0x00000000
[19:21:16.364]    __FlashArg=0x00000000
[19:21:16.364]    __FlashOp=0x00000000
[19:21:16.364]    __Result=0x00000000
[19:21:16.364]  </debugvars>
[19:21:16.364]  
[19:21:16.364]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:21:16.364]    <block atomic="false" info="">
[19:21:16.364]      __var deviceID = 0;
[19:21:16.364]        // -> [deviceID <= 0x00000000]
[19:21:16.364]      __var version = 0;
[19:21:16.365]        // -> [version <= 0x00000000]
[19:21:16.365]      __var partNum = 0;
[19:21:16.365]        // -> [partNum <= 0x00000000]
[19:21:16.365]      __var manuf = 0;
[19:21:16.365]        // -> [manuf <= 0x00000000]
[19:21:16.365]      __var isMSPM0G1X0X_G3X0X = 0;
[19:21:16.365]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:21:16.365]      __var isProduction = 0;
[19:21:16.366]        // -> [isProduction <= 0x00000000]
[19:21:16.366]      __var continueId = 0;
[19:21:16.366]        // -> [continueId <= 0x00000000]
[19:21:16.366]      deviceID =   Read32(0x41C40004);
[19:21:16.368]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:21:16.368]        // -> [deviceID <= 0x2BB8802F]
[19:21:16.368]      version = deviceID >> 28;
[19:21:16.368]        // -> [version <= 0x00000002]
[19:21:16.368]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:21:16.369]        // -> [partNum <= 0x0000BB88]
[19:21:16.369]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:21:16.369]        // -> [manuf <= 0x00000017]
[19:21:16.369]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:21:16.369]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:21:16.369]      isProduction = (version > 0);
[19:21:16.369]        // -> [isProduction <= 0x00000001]
[19:21:16.369]    </block>
[19:21:16.369]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:21:16.369]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:21:16.369]        // =>  FALSE
[19:21:16.370]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:21:16.370]    </control>
[19:21:16.370]    <control if="continueId == 4" while="" timeout="0" info="">
[19:21:16.370]      // if-block "continueId == 4"
[19:21:16.370]        // =>  FALSE
[19:21:16.370]      // skip if-block "continueId == 4"
[19:21:16.370]    </control>
[19:21:16.370]    <control if="!isProduction" while="" timeout="0" info="">
[19:21:16.370]      // if-block "!isProduction"
[19:21:16.370]        // =>  FALSE
[19:21:16.370]      // skip if-block "!isProduction"
[19:21:16.370]    </control>
[19:21:16.370]  </sequence>
[19:21:16.370]  
[19:24:13.719]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:24:13.719]  
[19:24:13.727]  <debugvars>
[19:24:13.727]    // Pre-defined
[19:24:13.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:13.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:13.727]    __dp=0x00000000
[19:24:13.727]    __ap=0x00000000
[19:24:13.727]    __traceout=0x00000000      (Trace Disabled)
[19:24:13.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:13.727]    __FlashAddr=0x00000000
[19:24:13.727]    __FlashLen=0x00000000
[19:24:13.727]    __FlashArg=0x00000000
[19:24:13.727]    __FlashOp=0x00000000
[19:24:13.728]    __Result=0x00000000
[19:24:13.728]  </debugvars>
[19:24:13.728]  
[19:24:13.728]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:24:13.728]    <block atomic="false" info="">
[19:24:13.728]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:24:13.728]        // -> [isSWJ <= 0x00000001]
[19:24:13.728]      __var hasDormant = __protocol & 0x00020000;
[19:24:13.728]        // -> [hasDormant <= 0x00000000]
[19:24:13.729]      __var protType   = __protocol & 0x0000FFFF;
[19:24:13.729]        // -> [protType <= 0x00000002]
[19:24:13.729]    </block>
[19:24:13.729]    <control if="protType == 1" while="" timeout="0" info="">
[19:24:13.729]      // if-block "protType == 1"
[19:24:13.729]        // =>  FALSE
[19:24:13.729]      // skip if-block "protType == 1"
[19:24:13.729]    </control>
[19:24:13.729]    <control if="protType == 2" while="" timeout="0" info="">
[19:24:13.729]      // if-block "protType == 2"
[19:24:13.729]        // =>  TRUE
[19:24:13.729]      <control if="isSWJ" while="" timeout="0" info="">
[19:24:13.729]        // if-block "isSWJ"
[19:24:13.729]          // =>  TRUE
[19:24:13.729]        <control if="hasDormant" while="" timeout="0" info="">
[19:24:13.729]          // if-block "hasDormant"
[19:24:13.731]            // =>  FALSE
[19:24:13.731]          // skip if-block "hasDormant"
[19:24:13.731]        </control>
[19:24:13.731]        <control if="!hasDormant" while="" timeout="0" info="">
[19:24:13.731]          // if-block "!hasDormant"
[19:24:13.731]            // =>  TRUE
[19:24:13.731]          <block atomic="false" info="">
[19:24:13.731]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:24:13.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:13.732]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:24:13.732]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:24:13.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:24:13.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:13.732]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:24:13.733]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:24:13.733]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:24:13.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:13.733]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:24:13.734]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:24:13.734]          </block>
[19:24:13.734]          // end if-block "!hasDormant"
[19:24:13.734]        </control>
[19:24:13.734]        // end if-block "isSWJ"
[19:24:13.734]      </control>
[19:24:13.734]      <control if="!isSWJ" while="" timeout="0" info="">
[19:24:13.734]        // if-block "!isSWJ"
[19:24:13.734]          // =>  FALSE
[19:24:13.734]        // skip if-block "!isSWJ"
[19:24:13.736]      </control>
[19:24:13.736]      <block atomic="false" info="">
[19:24:13.736]        ReadDP(0x0);
[19:24:13.736]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:24:13.736]      </block>
[19:24:13.736]      // end if-block "protType == 2"
[19:24:13.736]    </control>
[19:24:13.737]  </sequence>
[19:24:13.737]  
[19:24:13.737]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:24:13.737]  
[19:24:13.737]  <debugvars>
[19:24:13.737]    // Pre-defined
[19:24:13.737]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:13.737]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:13.738]    __dp=0x00000000
[19:24:13.738]    __ap=0x00000000
[19:24:13.738]    __traceout=0x00000000      (Trace Disabled)
[19:24:13.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:13.738]    __FlashAddr=0x00000000
[19:24:13.738]    __FlashLen=0x00000000
[19:24:13.738]    __FlashArg=0x00000000
[19:24:13.738]    __FlashOp=0x00000000
[19:24:13.738]    __Result=0x00000000
[19:24:13.738]  </debugvars>
[19:24:13.738]  
[19:24:13.738]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:24:13.739]    <block atomic="false" info="">
[19:24:13.739]      __var SW_DP_ABORT       = 0x0;
[19:24:13.739]        // -> [SW_DP_ABORT <= 0x00000000]
[19:24:13.739]      __var DP_CTRL_STAT      = 0x4;
[19:24:13.739]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:24:13.740]      __var DP_SELECT         = 0x8;
[19:24:13.740]        // -> [DP_SELECT <= 0x00000008]
[19:24:13.740]      __var powered_down      = 0;
[19:24:13.740]        // -> [powered_down <= 0x00000000]
[19:24:13.740]      WriteDP(DP_SELECT, 0x00000000);
[19:24:13.741]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:24:13.741]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:24:13.741]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:24:13.741]        // -> [powered_down <= 0x00000001]
[19:24:13.741]    </block>
[19:24:13.742]    <control if="powered_down" while="" timeout="0" info="">
[19:24:13.742]      // if-block "powered_down"
[19:24:13.742]        // =>  TRUE
[19:24:13.742]      <block atomic="false" info="">
[19:24:13.742]        Message(0, "Debug/System power-up request sent");
[19:24:13.745]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:24:13.746]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:24:13.746]      </block>
[19:24:13.746]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:24:13.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:24:13.747]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:24:13.747]        // while-condition  =>  FALSE
[19:24:13.747]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:24:13.747]      </control>
[19:24:13.747]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:24:13.747]        // if-block "(__protocol & 0xFFFF) == 1"
[19:24:13.747]          // =>  FALSE
[19:24:13.747]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:24:13.748]      </control>
[19:24:13.748]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:24:13.748]        // if-block "(__protocol & 0xFFFF) == 2"
[19:24:13.748]          // =>  TRUE
[19:24:13.748]        <block atomic="false" info="">
[19:24:13.748]          Message(0, "executing SWD power up");
[19:24:13.750]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:24:13.750]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:24:13.751]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:24:13.751]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:24:13.752]        </block>
[19:24:13.752]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:24:13.752]      </control>
[19:24:13.752]      // end if-block "powered_down"
[19:24:13.752]    </control>
[19:24:13.752]    <block atomic="false" info="">
[19:24:13.752]      __var DEBUG_PORT_VAL    = 0;
[19:24:13.752]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:24:13.752]      __var ACCESS_POINT_VAL  = 0;
[19:24:13.752]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:24:13.752]      __ap = 1; 
[19:24:13.752]        // -> [__ap <= 0x00000001]
[19:24:13.752]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:24:13.753]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:24:13.753]      __ap = 4;
[19:24:13.753]        // -> [__ap <= 0x00000004]
[19:24:13.753]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:24:13.754]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:24:13.754]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:24:13.754]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:24:13.757]    </block>
[19:24:13.757]    <block atomic="false" info="">
[19:24:13.757]      __var nReset = 0x80;
[19:24:13.757]        // -> [nReset <= 0x00000080]
[19:24:13.757]      __var canReadPins = 0;
[19:24:13.757]        // -> [canReadPins <= 0x00000000]
[19:24:13.757]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:24:13.757]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:24:13.757]        // -> [canReadPins <= 0x00000001]
[19:24:13.758]    </block>
[19:24:13.758]    <control if="" while="1" timeout="200" info="">
[19:24:13.758]      // while "1"  (timeout="200")
[19:24:13.758]      // while-condition  =>  TRUE
[19:24:13.758]      // while "1"  (timeout="200")
[19:24:13.758]      // while-condition  =>  TRUE
[19:24:13.758]      // while "1"  (timeout="200")
[19:24:13.758]      // while-condition  =>  TRUE
[19:24:13.758]      // while "1"  (timeout="200")
[19:24:13.758]      // while-condition  =>  TRUE
[19:24:13.758]      // while "1"  (timeout="200")
[19:24:13.758]      // while-condition  =>  TRUE
[19:24:13.758]      // while "1"  (timeout="200")
[19:24:13.759]      // while-condition  =>  TRUE
[19:24:13.759]      // while "1"  (timeout="200")
[19:24:13.760]      // while-condition  =>  TRUE
[19:24:13.760]      // while "1"  (timeout="200")
[19:24:13.760]      // while-condition  =>  TRUE
[19:24:13.760]      // while "1"  (timeout="200")
[19:24:13.760]      // while-condition  =>  TRUE
[19:24:13.761]      // while "1"  (timeout="200")
[19:24:13.761]      // while-condition  =>  TRUE
[19:24:13.761]      // while "1"  (timeout="200")
[19:24:13.761]      // while-condition  =>  TRUE
[19:24:13.761]      // while "1"  (timeout="200")
[19:24:13.761]      // while-condition  =>  TRUE
[19:24:13.761]      // while "1"  (timeout="200")
[19:24:13.761]      // while-condition  =>  TRUE
[19:24:13.761]      // while "1"  (timeout="200")
[19:24:13.761]      // while-condition  =>  TRUE
[19:24:13.761]      // while "1"  (timeout="200")
[19:24:13.762]      // while-condition  =>  TRUE
[19:24:13.762]      // while "1"  (timeout="200")
[19:24:13.762]      // while-condition  =>  TRUE
[19:24:13.762]      // while "1"  (timeout="200")
[19:24:13.762]      // while-condition  =>  TRUE
[19:24:13.762]      // while "1"  (timeout="200")
[19:24:13.762]      // while-condition  =>  TRUE
[19:24:13.762]      // while "1"  (timeout="200")
[19:24:13.763]      // while-condition  =>  TRUE
[19:24:13.763]      // while "1"  (timeout="200")
[19:24:13.763]      // while-condition  =>  TRUE
[19:24:13.763]      // while "1"  (timeout="200")
[19:24:13.763]      // while-condition  =>  TRUE
[19:24:13.763]      // while "1"  (timeout="200")
[19:24:13.763]      // while-condition  =>  TRUE
[19:24:13.763]      // while "1"  (timeout="200")
[19:24:13.763]      // while-condition  =>  TRUE
[19:24:13.763]      // while "1"  (timeout="200")
[19:24:13.763]      // while-condition  =>  TRUE
[19:24:13.763]      // while "1"  (timeout="200")
[19:24:13.763]      // while-condition  =>  TRUE
[19:24:13.764]      // while "1"  (timeout="200")
[19:24:13.764]      // while-condition  =>  TRUE
[19:24:13.764]      // while "1"  (timeout="200")
[19:24:13.764]      // while-condition  =>  TRUE
[19:24:13.764]      // while "1"  (timeout="200")
[19:24:13.765]      // while-condition  =>  TRUE
[19:24:13.765]      // while "1"  (timeout="200")
[19:24:13.765]      // while-condition  =>  TRUE
[19:24:13.765]      // while "1"  (timeout="200")
[19:24:13.765]      // while-condition  =>  TRUE
[19:24:13.765]      // while "1"  (timeout="200")
[19:24:13.765]      // while-condition  =>  TRUE
[19:24:13.765]      // while "1"  (timeout="200")
[19:24:13.766]      // while-condition  =>  TRUE
[19:24:13.766]      // while "1"  (timeout="200")
[19:24:13.766]      // while-condition  =>  TRUE
[19:24:13.766]      // while "1"  (timeout="200")
[19:24:13.766]      // while-condition  =>  TRUE
[19:24:13.766]      // while "1"  (timeout="200")
[19:24:13.766]      // while-condition  =>  TRUE
[19:24:13.766]      // while "1"  (timeout="200")
[19:24:13.766]      // while-condition  =>  TRUE
[19:24:13.767]      // while "1"  (timeout="200")
[19:24:13.767]      // while-condition  =>  TRUE
[19:24:13.767]      // while "1"  (timeout="200")
[19:24:13.767]      // while-condition  =>  TRUE
[19:24:13.767]      // while "1"  (timeout="200")
[19:24:13.767]      // while-condition  =>  TRUE
[19:24:13.768]      // while "1"  (timeout="200")
[19:24:13.768]      // while-condition  =>  TRUE
[19:24:13.768]      // while "1"  (timeout="200")
[19:24:13.768]      // while-condition  =>  TRUE
[19:24:13.768]      // while "1"  (timeout="200")
[19:24:13.768]      // while-condition  =>  TRUE
[19:24:13.768]      // while "1"  (timeout="200")
[19:24:13.768]      // while-condition  =>  TRUE
[19:24:13.768]      // while "1"  (timeout="200")
[19:24:13.768]      // while-condition  =>  TRUE
[19:24:13.768]      // while "1"  (timeout="200")
[19:24:13.768]      // while-condition  =>  TRUE
[19:24:13.769]      // while "1"  (timeout="200")
[19:24:13.769]      // while-condition  =>  TRUE
[19:24:13.769]      // while "1"  (timeout="200")
[19:24:13.769]      // while-condition  =>  TRUE
[19:24:13.769]      // while "1"  (timeout="200")
[19:24:13.769]      // while-condition  =>  TRUE
[19:24:13.769]      // while "1"  (timeout="200")
[19:24:13.769]      // while-condition  =>  TRUE
[19:24:13.770]      // while "1"  (timeout="200")
[19:24:13.770]      // while  =>  TIMEOUT
[19:24:13.770]      // end while "1"
[19:24:13.770]    </control>
[19:24:13.770]    <control if="canReadPins" while="" timeout="0" info="">
[19:24:13.770]      // if-block "canReadPins"
[19:24:13.770]        // =>  TRUE
[19:24:13.770]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:24:13.770]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:24:13.771]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:24:13.771]        // while-condition  =>  FALSE
[19:24:13.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:24:13.771]      </control>
[19:24:13.771]      // end if-block "canReadPins"
[19:24:13.771]    </control>
[19:24:13.771]    <control if="!canReadPins" while="" timeout="0" info="">
[19:24:13.771]      // if-block "!canReadPins"
[19:24:13.771]        // =>  FALSE
[19:24:13.771]      // skip if-block "!canReadPins"
[19:24:13.771]    </control>
[19:24:13.771]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:24:13.771]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:24:13.771]        // =>  TRUE
[19:24:13.772]      <block atomic="false" info="">
[19:24:13.772]        WriteAP(0x00, 0x190008);
[19:24:13.772]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:24:13.772]        WriteAP(0xF0, 0x01);
[19:24:13.774]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:24:13.774]      </block>
[19:24:13.774]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:24:13.774]    </control>
[19:24:13.774]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:24:13.774]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:24:13.774]        // =>  FALSE
[19:24:13.775]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:24:13.775]    </control>
[19:24:13.775]    <block atomic="false" info="">
[19:24:13.775]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:24:13.776]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:24:13.776]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:24:13.776]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:24:13.779]      __ap = 0; //lets make sure we reset the access point selection
[19:24:13.779]        // -> [__ap <= 0x00000000]
[19:24:13.779]    </block>
[19:24:13.779]  </sequence>
[19:24:13.779]  
[19:24:13.785]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:24:13.785]  
[19:24:13.785]  <debugvars>
[19:24:13.785]    // Pre-defined
[19:24:13.785]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:13.785]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:13.785]    __dp=0x00000000
[19:24:13.786]    __ap=0x00000000
[19:24:13.786]    __traceout=0x00000000      (Trace Disabled)
[19:24:13.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:13.786]    __FlashAddr=0x00000000
[19:24:13.786]    __FlashLen=0x00000000
[19:24:13.786]    __FlashArg=0x00000000
[19:24:13.786]    __FlashOp=0x00000000
[19:24:13.786]    __Result=0x00000000
[19:24:13.786]  </debugvars>
[19:24:13.786]  
[19:24:13.786]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:24:13.787]    <block atomic="false" info="">
[19:24:13.787]      __var deviceID = 0;
[19:24:13.787]        // -> [deviceID <= 0x00000000]
[19:24:13.787]      __var version = 0;
[19:24:13.787]        // -> [version <= 0x00000000]
[19:24:13.787]      __var partNum = 0;
[19:24:13.787]        // -> [partNum <= 0x00000000]
[19:24:13.788]      __var manuf = 0;
[19:24:13.788]        // -> [manuf <= 0x00000000]
[19:24:13.788]      __var isMSPM0G1X0X_G3X0X = 0;
[19:24:13.788]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:24:13.788]      __var isProduction = 0;
[19:24:13.788]        // -> [isProduction <= 0x00000000]
[19:24:13.788]      __var continueId = 0;
[19:24:13.788]        // -> [continueId <= 0x00000000]
[19:24:13.788]      deviceID =   Read32(0x41C40004);
[19:24:13.789]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:24:13.791]        // -> [deviceID <= 0x2BB8802F]
[19:24:13.791]      version = deviceID >> 28;
[19:24:13.791]        // -> [version <= 0x00000002]
[19:24:13.791]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:24:13.791]        // -> [partNum <= 0x0000BB88]
[19:24:13.791]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:24:13.792]        // -> [manuf <= 0x00000017]
[19:24:13.792]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:24:13.792]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:24:13.792]      isProduction = (version > 0);
[19:24:13.792]        // -> [isProduction <= 0x00000001]
[19:24:13.792]    </block>
[19:24:13.792]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:24:13.792]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:24:13.792]        // =>  FALSE
[19:24:13.792]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:24:13.792]    </control>
[19:24:13.792]    <control if="continueId == 4" while="" timeout="0" info="">
[19:24:13.792]      // if-block "continueId == 4"
[19:24:13.792]        // =>  FALSE
[19:24:13.793]      // skip if-block "continueId == 4"
[19:24:13.793]    </control>
[19:24:13.793]    <control if="!isProduction" while="" timeout="0" info="">
[19:24:13.793]      // if-block "!isProduction"
[19:24:13.793]        // =>  FALSE
[19:24:13.793]      // skip if-block "!isProduction"
[19:24:13.793]    </control>
[19:24:13.793]  </sequence>
[19:24:13.794]  
[19:24:30.313]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:24:30.313]  
[19:24:30.314]  <debugvars>
[19:24:30.314]    // Pre-defined
[19:24:30.314]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:30.314]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:30.314]    __dp=0x00000000
[19:24:30.315]    __ap=0x00000000
[19:24:30.315]    __traceout=0x00000000      (Trace Disabled)
[19:24:30.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:30.315]    __FlashAddr=0x00000000
[19:24:30.315]    __FlashLen=0x00000000
[19:24:30.315]    __FlashArg=0x00000000
[19:24:30.315]    __FlashOp=0x00000000
[19:24:30.316]    __Result=0x00000000
[19:24:30.316]  </debugvars>
[19:24:30.316]  
[19:24:30.316]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:24:30.316]    <block atomic="false" info="">
[19:24:30.316]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:24:30.316]        // -> [isSWJ <= 0x00000001]
[19:24:30.316]      __var hasDormant = __protocol & 0x00020000;
[19:24:30.316]        // -> [hasDormant <= 0x00000000]
[19:24:30.316]      __var protType   = __protocol & 0x0000FFFF;
[19:24:30.317]        // -> [protType <= 0x00000002]
[19:24:30.317]    </block>
[19:24:30.317]    <control if="protType == 1" while="" timeout="0" info="">
[19:24:30.317]      // if-block "protType == 1"
[19:24:30.317]        // =>  FALSE
[19:24:30.317]      // skip if-block "protType == 1"
[19:24:30.317]    </control>
[19:24:30.317]    <control if="protType == 2" while="" timeout="0" info="">
[19:24:30.317]      // if-block "protType == 2"
[19:24:30.317]        // =>  TRUE
[19:24:30.318]      <control if="isSWJ" while="" timeout="0" info="">
[19:24:30.318]        // if-block "isSWJ"
[19:24:30.318]          // =>  TRUE
[19:24:30.318]        <control if="hasDormant" while="" timeout="0" info="">
[19:24:30.318]          // if-block "hasDormant"
[19:24:30.318]            // =>  FALSE
[19:24:30.318]          // skip if-block "hasDormant"
[19:24:30.318]        </control>
[19:24:30.318]        <control if="!hasDormant" while="" timeout="0" info="">
[19:24:30.318]          // if-block "!hasDormant"
[19:24:30.319]            // =>  TRUE
[19:24:30.319]          <block atomic="false" info="">
[19:24:30.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:24:30.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:30.319]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:24:30.320]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:24:30.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:24:30.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:30.321]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:24:30.321]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:24:30.321]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:24:30.322]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:30.322]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:24:30.323]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:24:30.323]          </block>
[19:24:30.323]          // end if-block "!hasDormant"
[19:24:30.323]        </control>
[19:24:30.323]        // end if-block "isSWJ"
[19:24:30.323]      </control>
[19:24:30.323]      <control if="!isSWJ" while="" timeout="0" info="">
[19:24:30.323]        // if-block "!isSWJ"
[19:24:30.323]          // =>  FALSE
[19:24:30.323]        // skip if-block "!isSWJ"
[19:24:30.323]      </control>
[19:24:30.323]      <block atomic="false" info="">
[19:24:30.323]        ReadDP(0x0);
[19:24:30.323]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:24:30.325]      </block>
[19:24:30.325]      // end if-block "protType == 2"
[19:24:30.325]    </control>
[19:24:30.325]  </sequence>
[19:24:30.325]  
[19:24:30.325]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:24:30.325]  
[19:24:30.325]  <debugvars>
[19:24:30.326]    // Pre-defined
[19:24:30.326]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:30.326]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:30.326]    __dp=0x00000000
[19:24:30.326]    __ap=0x00000000
[19:24:30.326]    __traceout=0x00000000      (Trace Disabled)
[19:24:30.326]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:30.327]    __FlashAddr=0x00000000
[19:24:30.327]    __FlashLen=0x00000000
[19:24:30.327]    __FlashArg=0x00000000
[19:24:30.327]    __FlashOp=0x00000000
[19:24:30.327]    __Result=0x00000000
[19:24:30.327]  </debugvars>
[19:24:30.327]  
[19:24:30.327]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:24:30.327]    <block atomic="false" info="">
[19:24:30.327]      __var SW_DP_ABORT       = 0x0;
[19:24:30.328]        // -> [SW_DP_ABORT <= 0x00000000]
[19:24:30.328]      __var DP_CTRL_STAT      = 0x4;
[19:24:30.328]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:24:30.328]      __var DP_SELECT         = 0x8;
[19:24:30.328]        // -> [DP_SELECT <= 0x00000008]
[19:24:30.328]      __var powered_down      = 0;
[19:24:30.328]        // -> [powered_down <= 0x00000000]
[19:24:30.328]      WriteDP(DP_SELECT, 0x00000000);
[19:24:30.329]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:24:30.329]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:24:30.330]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:24:30.330]        // -> [powered_down <= 0x00000001]
[19:24:30.330]    </block>
[19:24:30.330]    <control if="powered_down" while="" timeout="0" info="">
[19:24:30.330]      // if-block "powered_down"
[19:24:30.330]        // =>  TRUE
[19:24:30.331]      <block atomic="false" info="">
[19:24:30.331]        Message(0, "Debug/System power-up request sent");
[19:24:30.333]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:24:30.333]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:24:30.333]      </block>
[19:24:30.333]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:24:30.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:24:30.333]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:24:30.334]        // while-condition  =>  FALSE
[19:24:30.334]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:24:30.334]      </control>
[19:24:30.334]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:24:30.334]        // if-block "(__protocol & 0xFFFF) == 1"
[19:24:30.334]          // =>  FALSE
[19:24:30.334]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:24:30.334]      </control>
[19:24:30.334]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:24:30.334]        // if-block "(__protocol & 0xFFFF) == 2"
[19:24:30.335]          // =>  TRUE
[19:24:30.335]        <block atomic="false" info="">
[19:24:30.335]          Message(0, "executing SWD power up");
[19:24:30.339]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:24:30.339]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:24:30.339]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:24:30.340]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:24:30.340]        </block>
[19:24:30.340]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:24:30.340]      </control>
[19:24:30.340]      // end if-block "powered_down"
[19:24:30.340]    </control>
[19:24:30.340]    <block atomic="false" info="">
[19:24:30.340]      __var DEBUG_PORT_VAL    = 0;
[19:24:30.340]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:24:30.340]      __var ACCESS_POINT_VAL  = 0;
[19:24:30.341]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:24:30.341]      __ap = 1; 
[19:24:30.341]        // -> [__ap <= 0x00000001]
[19:24:30.341]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:24:30.343]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:24:30.343]      __ap = 4;
[19:24:30.343]        // -> [__ap <= 0x00000004]
[19:24:30.343]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:24:30.344]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:24:30.344]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:24:30.344]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:24:30.346]    </block>
[19:24:30.346]    <block atomic="false" info="">
[19:24:30.346]      __var nReset = 0x80;
[19:24:30.347]        // -> [nReset <= 0x00000080]
[19:24:30.347]      __var canReadPins = 0;
[19:24:30.347]        // -> [canReadPins <= 0x00000000]
[19:24:30.347]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:24:30.348]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:24:30.348]        // -> [canReadPins <= 0x00000001]
[19:24:30.348]    </block>
[19:24:30.348]    <control if="" while="1" timeout="200" info="">
[19:24:30.348]      // while "1"  (timeout="200")
[19:24:30.348]      // while-condition  =>  TRUE
[19:24:30.348]      // while "1"  (timeout="200")
[19:24:30.348]      // while-condition  =>  TRUE
[19:24:30.348]      // while "1"  (timeout="200")
[19:24:30.348]      // while-condition  =>  TRUE
[19:24:30.349]      // while "1"  (timeout="200")
[19:24:30.349]      // while-condition  =>  TRUE
[19:24:30.349]      // while "1"  (timeout="200")
[19:24:30.349]      // while-condition  =>  TRUE
[19:24:30.349]      // while "1"  (timeout="200")
[19:24:30.349]      // while-condition  =>  TRUE
[19:24:30.349]      // while "1"  (timeout="200")
[19:24:30.349]      // while-condition  =>  TRUE
[19:24:30.349]      // while "1"  (timeout="200")
[19:24:30.349]      // while-condition  =>  TRUE
[19:24:30.349]      // while "1"  (timeout="200")
[19:24:30.349]      // while-condition  =>  TRUE
[19:24:30.350]      // while "1"  (timeout="200")
[19:24:30.350]      // while-condition  =>  TRUE
[19:24:30.351]      // while "1"  (timeout="200")
[19:24:30.351]      // while-condition  =>  TRUE
[19:24:30.351]      // while "1"  (timeout="200")
[19:24:30.351]      // while-condition  =>  TRUE
[19:24:30.351]      // while "1"  (timeout="200")
[19:24:30.351]      // while-condition  =>  TRUE
[19:24:30.351]      // while "1"  (timeout="200")
[19:24:30.351]      // while-condition  =>  TRUE
[19:24:30.351]      // while "1"  (timeout="200")
[19:24:30.351]      // while-condition  =>  TRUE
[19:24:30.351]      // while "1"  (timeout="200")
[19:24:30.351]      // while-condition  =>  TRUE
[19:24:30.351]      // while "1"  (timeout="200")
[19:24:30.352]      // while-condition  =>  TRUE
[19:24:30.352]      // while "1"  (timeout="200")
[19:24:30.352]      // while-condition  =>  TRUE
[19:24:30.352]      // while "1"  (timeout="200")
[19:24:30.352]      // while-condition  =>  TRUE
[19:24:30.352]      // while "1"  (timeout="200")
[19:24:30.352]      // while-condition  =>  TRUE
[19:24:30.353]      // while "1"  (timeout="200")
[19:24:30.353]      // while-condition  =>  TRUE
[19:24:30.353]      // while "1"  (timeout="200")
[19:24:30.353]      // while-condition  =>  TRUE
[19:24:30.353]      // while "1"  (timeout="200")
[19:24:30.353]      // while-condition  =>  TRUE
[19:24:30.353]      // while "1"  (timeout="200")
[19:24:30.353]      // while-condition  =>  TRUE
[19:24:30.353]      // while "1"  (timeout="200")
[19:24:30.353]      // while-condition  =>  TRUE
[19:24:30.353]      // while "1"  (timeout="200")
[19:24:30.353]      // while-condition  =>  TRUE
[19:24:30.355]      // while "1"  (timeout="200")
[19:24:30.355]      // while-condition  =>  TRUE
[19:24:30.355]      // while "1"  (timeout="200")
[19:24:30.355]      // while-condition  =>  TRUE
[19:24:30.355]      // while "1"  (timeout="200")
[19:24:30.355]      // while-condition  =>  TRUE
[19:24:30.355]      // while "1"  (timeout="200")
[19:24:30.355]      // while-condition  =>  TRUE
[19:24:30.355]      // while "1"  (timeout="200")
[19:24:30.356]      // while-condition  =>  TRUE
[19:24:30.356]      // while "1"  (timeout="200")
[19:24:30.356]      // while-condition  =>  TRUE
[19:24:30.356]      // while "1"  (timeout="200")
[19:24:30.356]      // while-condition  =>  TRUE
[19:24:30.356]      // while "1"  (timeout="200")
[19:24:30.356]      // while-condition  =>  TRUE
[19:24:30.356]      // while "1"  (timeout="200")
[19:24:30.357]      // while-condition  =>  TRUE
[19:24:30.357]      // while "1"  (timeout="200")
[19:24:30.357]      // while-condition  =>  TRUE
[19:24:30.357]      // while "1"  (timeout="200")
[19:24:30.357]      // while-condition  =>  TRUE
[19:24:30.357]      // while "1"  (timeout="200")
[19:24:30.357]      // while-condition  =>  TRUE
[19:24:30.357]      // while "1"  (timeout="200")
[19:24:30.358]      // while-condition  =>  TRUE
[19:24:30.358]      // while "1"  (timeout="200")
[19:24:30.358]      // while-condition  =>  TRUE
[19:24:30.358]      // while "1"  (timeout="200")
[19:24:30.358]      // while-condition  =>  TRUE
[19:24:30.358]      // while "1"  (timeout="200")
[19:24:30.358]      // while-condition  =>  TRUE
[19:24:30.358]      // while "1"  (timeout="200")
[19:24:30.358]      // while-condition  =>  TRUE
[19:24:30.358]      // while "1"  (timeout="200")
[19:24:30.358]      // while-condition  =>  TRUE
[19:24:30.358]      // while "1"  (timeout="200")
[19:24:30.358]      // while-condition  =>  TRUE
[19:24:30.359]      // while "1"  (timeout="200")
[19:24:30.359]      // while-condition  =>  TRUE
[19:24:30.359]      // while "1"  (timeout="200")
[19:24:30.359]      // while-condition  =>  TRUE
[19:24:30.359]      // while "1"  (timeout="200")
[19:24:30.359]      // while-condition  =>  TRUE
[19:24:30.360]      // while "1"  (timeout="200")
[19:24:30.360]      // while-condition  =>  TRUE
[19:24:30.360]      // while "1"  (timeout="200")
[19:24:30.360]      // while-condition  =>  TRUE
[19:24:30.360]      // while "1"  (timeout="200")
[19:24:30.360]      // while-condition  =>  TRUE
[19:24:30.360]      // while "1"  (timeout="200")
[19:24:30.360]      // while-condition  =>  TRUE
[19:24:30.361]      // while "1"  (timeout="200")
[19:24:30.361]      // while-condition  =>  TRUE
[19:24:30.361]      // while "1"  (timeout="200")
[19:24:30.361]      // while-condition  =>  TRUE
[19:24:30.361]      // while "1"  (timeout="200")
[19:24:30.361]      // while-condition  =>  TRUE
[19:24:30.361]      // while "1"  (timeout="200")
[19:24:30.361]      // while-condition  =>  TRUE
[19:24:30.361]      // while "1"  (timeout="200")
[19:24:30.361]      // while-condition  =>  TRUE
[19:24:30.362]      // while "1"  (timeout="200")
[19:24:30.362]      // while-condition  =>  TRUE
[19:24:30.362]      // while "1"  (timeout="200")
[19:24:30.362]      // while-condition  =>  TRUE
[19:24:30.362]      // while "1"  (timeout="200")
[19:24:30.362]      // while-condition  =>  TRUE
[19:24:30.362]      // while "1"  (timeout="200")
[19:24:30.362]      // while-condition  =>  TRUE
[19:24:30.362]      // while "1"  (timeout="200")
[19:24:30.362]      // while-condition  =>  TRUE
[19:24:30.364]      // while "1"  (timeout="200")
[19:24:30.364]      // while  =>  TIMEOUT
[19:24:30.364]      // end while "1"
[19:24:30.364]    </control>
[19:24:30.364]    <control if="canReadPins" while="" timeout="0" info="">
[19:24:30.364]      // if-block "canReadPins"
[19:24:30.364]        // =>  TRUE
[19:24:30.365]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:24:30.365]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:24:30.365]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:24:30.365]        // while-condition  =>  FALSE
[19:24:30.365]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:24:30.365]      </control>
[19:24:30.366]      // end if-block "canReadPins"
[19:24:30.366]    </control>
[19:24:30.366]    <control if="!canReadPins" while="" timeout="0" info="">
[19:24:30.366]      // if-block "!canReadPins"
[19:24:30.366]        // =>  FALSE
[19:24:30.366]      // skip if-block "!canReadPins"
[19:24:30.366]    </control>
[19:24:30.366]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:24:30.366]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:24:30.366]        // =>  TRUE
[19:24:30.366]      <block atomic="false" info="">
[19:24:30.366]        WriteAP(0x00, 0x190008);
[19:24:30.367]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:24:30.367]        WriteAP(0xF0, 0x01);
[19:24:30.368]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:24:30.368]      </block>
[19:24:30.368]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:24:30.368]    </control>
[19:24:30.368]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:24:30.368]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:24:30.369]        // =>  FALSE
[19:24:30.369]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:24:30.369]    </control>
[19:24:30.369]    <block atomic="false" info="">
[19:24:30.369]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:24:30.370]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:24:30.371]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:24:30.371]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:24:30.373]      __ap = 0; //lets make sure we reset the access point selection
[19:24:30.373]        // -> [__ap <= 0x00000000]
[19:24:30.373]    </block>
[19:24:30.373]  </sequence>
[19:24:30.374]  
[19:24:30.380]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:24:30.380]  
[19:24:30.380]  <debugvars>
[19:24:30.380]    // Pre-defined
[19:24:30.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:30.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:30.381]    __dp=0x00000000
[19:24:30.381]    __ap=0x00000000
[19:24:30.381]    __traceout=0x00000000      (Trace Disabled)
[19:24:30.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:30.381]    __FlashAddr=0x00000000
[19:24:30.381]    __FlashLen=0x00000000
[19:24:30.381]    __FlashArg=0x00000000
[19:24:30.381]    __FlashOp=0x00000000
[19:24:30.382]    __Result=0x00000000
[19:24:30.382]  </debugvars>
[19:24:30.382]  
[19:24:30.382]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:24:30.382]    <block atomic="false" info="">
[19:24:30.382]      __var deviceID = 0;
[19:24:30.383]        // -> [deviceID <= 0x00000000]
[19:24:30.383]      __var version = 0;
[19:24:30.383]        // -> [version <= 0x00000000]
[19:24:30.383]      __var partNum = 0;
[19:24:30.383]        // -> [partNum <= 0x00000000]
[19:24:30.383]      __var manuf = 0;
[19:24:30.383]        // -> [manuf <= 0x00000000]
[19:24:30.383]      __var isMSPM0G1X0X_G3X0X = 0;
[19:24:30.383]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:24:30.383]      __var isProduction = 0;
[19:24:30.384]        // -> [isProduction <= 0x00000000]
[19:24:30.384]      __var continueId = 0;
[19:24:30.384]        // -> [continueId <= 0x00000000]
[19:24:30.384]      deviceID =   Read32(0x41C40004);
[19:24:30.385]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:24:30.386]        // -> [deviceID <= 0x2BB8802F]
[19:24:30.386]      version = deviceID >> 28;
[19:24:30.386]        // -> [version <= 0x00000002]
[19:24:30.386]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:24:30.386]        // -> [partNum <= 0x0000BB88]
[19:24:30.386]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:24:30.386]        // -> [manuf <= 0x00000017]
[19:24:30.386]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:24:30.386]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:24:30.387]      isProduction = (version > 0);
[19:24:30.387]        // -> [isProduction <= 0x00000001]
[19:24:30.387]    </block>
[19:24:30.387]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:24:30.387]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:24:30.387]        // =>  FALSE
[19:24:30.387]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:24:30.387]    </control>
[19:24:30.387]    <control if="continueId == 4" while="" timeout="0" info="">
[19:24:30.387]      // if-block "continueId == 4"
[19:24:30.388]        // =>  FALSE
[19:24:30.388]      // skip if-block "continueId == 4"
[19:24:30.388]    </control>
[19:24:30.388]    <control if="!isProduction" while="" timeout="0" info="">
[19:24:30.388]      // if-block "!isProduction"
[19:24:30.388]        // =>  FALSE
[19:24:30.388]      // skip if-block "!isProduction"
[19:24:30.388]    </control>
[19:24:30.389]  </sequence>
[19:24:30.389]  
[19:25:55.172]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:25:55.172]  
[19:25:55.173]  <debugvars>
[19:25:55.173]    // Pre-defined
[19:25:55.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:25:55.173]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:25:55.173]    __dp=0x00000000
[19:25:55.173]    __ap=0x00000000
[19:25:55.173]    __traceout=0x00000000      (Trace Disabled)
[19:25:55.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:25:55.173]    __FlashAddr=0x00000000
[19:25:55.173]    __FlashLen=0x00000000
[19:25:55.174]    __FlashArg=0x00000000
[19:25:55.174]    __FlashOp=0x00000000
[19:25:55.174]    __Result=0x00000000
[19:25:55.174]  </debugvars>
[19:25:55.174]  
[19:25:55.174]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:25:55.174]    <block atomic="false" info="">
[19:25:55.174]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:25:55.174]        // -> [isSWJ <= 0x00000001]
[19:25:55.174]      __var hasDormant = __protocol & 0x00020000;
[19:25:55.174]        // -> [hasDormant <= 0x00000000]
[19:25:55.176]      __var protType   = __protocol & 0x0000FFFF;
[19:25:55.176]        // -> [protType <= 0x00000002]
[19:25:55.176]    </block>
[19:25:55.176]    <control if="protType == 1" while="" timeout="0" info="">
[19:25:55.176]      // if-block "protType == 1"
[19:25:55.176]        // =>  FALSE
[19:25:55.176]      // skip if-block "protType == 1"
[19:25:55.176]    </control>
[19:25:55.176]    <control if="protType == 2" while="" timeout="0" info="">
[19:25:55.176]      // if-block "protType == 2"
[19:25:55.177]        // =>  TRUE
[19:25:55.177]      <control if="isSWJ" while="" timeout="0" info="">
[19:25:55.177]        // if-block "isSWJ"
[19:25:55.177]          // =>  TRUE
[19:25:55.177]        <control if="hasDormant" while="" timeout="0" info="">
[19:25:55.177]          // if-block "hasDormant"
[19:25:55.177]            // =>  FALSE
[19:25:55.178]          // skip if-block "hasDormant"
[19:25:55.178]        </control>
[19:25:55.178]        <control if="!hasDormant" while="" timeout="0" info="">
[19:25:55.178]          // if-block "!hasDormant"
[19:25:55.178]            // =>  TRUE
[19:25:55.179]          <block atomic="false" info="">
[19:25:55.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:25:55.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:25:55.179]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:25:55.179]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:25:55.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:25:55.180]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:25:55.180]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:25:55.180]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:25:55.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:25:55.180]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:25:55.180]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:25:55.181]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:25:55.181]          </block>
[19:25:55.181]          // end if-block "!hasDormant"
[19:25:55.181]        </control>
[19:25:55.181]        // end if-block "isSWJ"
[19:25:55.181]      </control>
[19:25:55.181]      <control if="!isSWJ" while="" timeout="0" info="">
[19:25:55.181]        // if-block "!isSWJ"
[19:25:55.181]          // =>  FALSE
[19:25:55.182]        // skip if-block "!isSWJ"
[19:25:55.182]      </control>
[19:25:55.182]      <block atomic="false" info="">
[19:25:55.182]        ReadDP(0x0);
[19:25:55.182]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:25:55.182]      </block>
[19:25:55.183]      // end if-block "protType == 2"
[19:25:55.183]    </control>
[19:25:55.183]  </sequence>
[19:25:55.183]  
[19:25:55.183]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:25:55.183]  
[19:25:55.183]  <debugvars>
[19:25:55.184]    // Pre-defined
[19:25:55.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:25:55.184]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:25:55.185]    __dp=0x00000000
[19:25:55.185]    __ap=0x00000000
[19:25:55.185]    __traceout=0x00000000      (Trace Disabled)
[19:25:55.185]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:25:55.186]    __FlashAddr=0x00000000
[19:25:55.186]    __FlashLen=0x00000000
[19:25:55.186]    __FlashArg=0x00000000
[19:25:55.186]    __FlashOp=0x00000000
[19:25:55.186]    __Result=0x00000000
[19:25:55.186]  </debugvars>
[19:25:55.187]  
[19:25:55.187]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:25:55.187]    <block atomic="false" info="">
[19:25:55.187]      __var SW_DP_ABORT       = 0x0;
[19:25:55.187]        // -> [SW_DP_ABORT <= 0x00000000]
[19:25:55.187]      __var DP_CTRL_STAT      = 0x4;
[19:25:55.187]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:25:55.187]      __var DP_SELECT         = 0x8;
[19:25:55.187]        // -> [DP_SELECT <= 0x00000008]
[19:25:55.187]      __var powered_down      = 0;
[19:25:55.188]        // -> [powered_down <= 0x00000000]
[19:25:55.188]      WriteDP(DP_SELECT, 0x00000000);
[19:25:55.188]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:25:55.188]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:25:55.189]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:25:55.189]        // -> [powered_down <= 0x00000001]
[19:25:55.189]    </block>
[19:25:55.189]    <control if="powered_down" while="" timeout="0" info="">
[19:25:55.189]      // if-block "powered_down"
[19:25:55.189]        // =>  TRUE
[19:25:55.189]      <block atomic="false" info="">
[19:25:55.190]        Message(0, "Debug/System power-up request sent");
[19:25:55.191]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:25:55.193]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:25:55.193]      </block>
[19:25:55.193]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:25:55.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:25:55.193]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:25:55.193]        // while-condition  =>  FALSE
[19:25:55.193]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:25:55.193]      </control>
[19:25:55.193]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:25:55.193]        // if-block "(__protocol & 0xFFFF) == 1"
[19:25:55.194]          // =>  FALSE
[19:25:55.195]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:25:55.195]      </control>
[19:25:55.195]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:25:55.195]        // if-block "(__protocol & 0xFFFF) == 2"
[19:25:55.195]          // =>  TRUE
[19:25:55.195]        <block atomic="false" info="">
[19:25:55.195]          Message(0, "executing SWD power up");
[19:25:55.197]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:25:55.197]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:25:55.197]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:25:55.198]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:25:55.198]        </block>
[19:25:55.198]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:25:55.198]      </control>
[19:25:55.198]      // end if-block "powered_down"
[19:25:55.199]    </control>
[19:25:55.199]    <block atomic="false" info="">
[19:25:55.199]      __var DEBUG_PORT_VAL    = 0;
[19:25:55.199]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:25:55.199]      __var ACCESS_POINT_VAL  = 0;
[19:25:55.199]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:25:55.200]      __ap = 1; 
[19:25:55.200]        // -> [__ap <= 0x00000001]
[19:25:55.200]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:25:55.201]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:25:55.201]      __ap = 4;
[19:25:55.201]        // -> [__ap <= 0x00000004]
[19:25:55.201]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:25:55.202]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:25:55.203]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:25:55.203]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:25:55.204]    </block>
[19:25:55.205]    <block atomic="false" info="">
[19:25:55.205]      __var nReset = 0x80;
[19:25:55.205]        // -> [nReset <= 0x00000080]
[19:25:55.205]      __var canReadPins = 0;
[19:25:55.206]        // -> [canReadPins <= 0x00000000]
[19:25:55.206]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:25:55.207]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:25:55.207]        // -> [canReadPins <= 0x00000001]
[19:25:55.207]    </block>
[19:25:55.207]    <control if="" while="1" timeout="200" info="">
[19:25:55.207]      // while "1"  (timeout="200")
[19:25:55.207]      // while-condition  =>  TRUE
[19:25:55.207]      // while "1"  (timeout="200")
[19:25:55.207]      // while-condition  =>  TRUE
[19:25:55.207]      // while "1"  (timeout="200")
[19:25:55.207]      // while-condition  =>  TRUE
[19:25:55.207]      // while "1"  (timeout="200")
[19:25:55.207]      // while-condition  =>  TRUE
[19:25:55.208]      // while "1"  (timeout="200")
[19:25:55.208]      // while  =>  TIMEOUT
[19:25:55.208]      // end while "1"
[19:25:55.208]    </control>
[19:25:55.208]    <control if="canReadPins" while="" timeout="0" info="">
[19:25:55.208]      // if-block "canReadPins"
[19:25:55.208]        // =>  TRUE
[19:25:55.208]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:25:55.208]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:25:55.208]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:25:55.209]        // while-condition  =>  FALSE
[19:25:55.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:25:55.209]      </control>
[19:25:55.209]      // end if-block "canReadPins"
[19:25:55.209]    </control>
[19:25:55.209]    <control if="!canReadPins" while="" timeout="0" info="">
[19:25:55.209]      // if-block "!canReadPins"
[19:25:55.209]        // =>  FALSE
[19:25:55.209]      // skip if-block "!canReadPins"
[19:25:55.209]    </control>
[19:25:55.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:25:55.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:25:55.209]        // =>  TRUE
[19:25:55.209]      <block atomic="false" info="">
[19:25:55.209]        WriteAP(0x00, 0x190008);
[19:25:55.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:25:55.211]        WriteAP(0xF0, 0x01);
[19:25:55.213]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:25:55.213]      </block>
[19:25:55.213]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:25:55.213]    </control>
[19:25:55.213]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:25:55.213]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:25:55.213]        // =>  FALSE
[19:25:55.213]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:25:55.213]    </control>
[19:25:55.213]    <block atomic="false" info="">
[19:25:55.213]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:25:55.215]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:25:55.215]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:25:55.215]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:25:55.217]      __ap = 0; //lets make sure we reset the access point selection
[19:25:55.217]        // -> [__ap <= 0x00000000]
[19:25:55.217]    </block>
[19:25:55.217]  </sequence>
[19:25:55.217]  
[19:25:55.224]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:25:55.224]  
[19:25:55.224]  <debugvars>
[19:25:55.224]    // Pre-defined
[19:25:55.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:25:55.225]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:25:55.225]    __dp=0x00000000
[19:25:55.225]    __ap=0x00000000
[19:25:55.225]    __traceout=0x00000000      (Trace Disabled)
[19:25:55.225]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:25:55.225]    __FlashAddr=0x00000000
[19:25:55.225]    __FlashLen=0x00000000
[19:25:55.226]    __FlashArg=0x00000000
[19:25:55.226]    __FlashOp=0x00000000
[19:25:55.226]    __Result=0x00000000
[19:25:55.226]  </debugvars>
[19:25:55.226]  
[19:25:55.226]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:25:55.226]    <block atomic="false" info="">
[19:25:55.226]      __var deviceID = 0;
[19:25:55.226]        // -> [deviceID <= 0x00000000]
[19:25:55.226]      __var version = 0;
[19:25:55.227]        // -> [version <= 0x00000000]
[19:25:55.227]      __var partNum = 0;
[19:25:55.227]        // -> [partNum <= 0x00000000]
[19:25:55.227]      __var manuf = 0;
[19:25:55.227]        // -> [manuf <= 0x00000000]
[19:25:55.227]      __var isMSPM0G1X0X_G3X0X = 0;
[19:25:55.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:25:55.227]      __var isProduction = 0;
[19:25:55.227]        // -> [isProduction <= 0x00000000]
[19:25:55.227]      __var continueId = 0;
[19:25:55.227]        // -> [continueId <= 0x00000000]
[19:25:55.227]      deviceID =   Read32(0x41C40004);
[19:25:55.230]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:25:55.230]        // -> [deviceID <= 0x2BB8802F]
[19:25:55.230]      version = deviceID >> 28;
[19:25:55.230]        // -> [version <= 0x00000002]
[19:25:55.230]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:25:55.230]        // -> [partNum <= 0x0000BB88]
[19:25:55.230]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:25:55.231]        // -> [manuf <= 0x00000017]
[19:25:55.231]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:25:55.231]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:25:55.231]      isProduction = (version > 0);
[19:25:55.231]        // -> [isProduction <= 0x00000001]
[19:25:55.231]    </block>
[19:25:55.231]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:25:55.231]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:25:55.231]        // =>  FALSE
[19:25:55.232]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:25:55.232]    </control>
[19:25:55.232]    <control if="continueId == 4" while="" timeout="0" info="">
[19:25:55.232]      // if-block "continueId == 4"
[19:25:55.232]        // =>  FALSE
[19:25:55.232]      // skip if-block "continueId == 4"
[19:25:55.232]    </control>
[19:25:55.232]    <control if="!isProduction" while="" timeout="0" info="">
[19:25:55.233]      // if-block "!isProduction"
[19:25:55.233]        // =>  FALSE
[19:25:55.233]      // skip if-block "!isProduction"
[19:25:55.233]    </control>
[19:25:55.234]  </sequence>
[19:25:55.234]  
[19:27:26.578]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:27:26.578]  
[19:27:26.586]  <debugvars>
[19:27:26.586]    // Pre-defined
[19:27:26.586]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:26.586]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:26.586]    __dp=0x00000000
[19:27:26.586]    __ap=0x00000000
[19:27:26.586]    __traceout=0x00000000      (Trace Disabled)
[19:27:26.587]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:26.587]    __FlashAddr=0x00000000
[19:27:26.587]    __FlashLen=0x00000000
[19:27:26.587]    __FlashArg=0x00000000
[19:27:26.587]    __FlashOp=0x00000000
[19:27:26.587]    __Result=0x00000000
[19:27:26.587]  </debugvars>
[19:27:26.587]  
[19:27:26.587]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:27:26.587]    <block atomic="false" info="">
[19:27:26.588]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:27:26.588]        // -> [isSWJ <= 0x00000001]
[19:27:26.588]      __var hasDormant = __protocol & 0x00020000;
[19:27:26.588]        // -> [hasDormant <= 0x00000000]
[19:27:26.588]      __var protType   = __protocol & 0x0000FFFF;
[19:27:26.588]        // -> [protType <= 0x00000002]
[19:27:26.588]    </block>
[19:27:26.588]    <control if="protType == 1" while="" timeout="0" info="">
[19:27:26.588]      // if-block "protType == 1"
[19:27:26.588]        // =>  FALSE
[19:27:26.589]      // skip if-block "protType == 1"
[19:27:26.589]    </control>
[19:27:26.589]    <control if="protType == 2" while="" timeout="0" info="">
[19:27:26.589]      // if-block "protType == 2"
[19:27:26.589]        // =>  TRUE
[19:27:26.590]      <control if="isSWJ" while="" timeout="0" info="">
[19:27:26.590]        // if-block "isSWJ"
[19:27:26.590]          // =>  TRUE
[19:27:26.590]        <control if="hasDormant" while="" timeout="0" info="">
[19:27:26.590]          // if-block "hasDormant"
[19:27:26.590]            // =>  FALSE
[19:27:26.590]          // skip if-block "hasDormant"
[19:27:26.590]        </control>
[19:27:26.590]        <control if="!hasDormant" while="" timeout="0" info="">
[19:27:26.591]          // if-block "!hasDormant"
[19:27:26.591]            // =>  TRUE
[19:27:26.591]          <block atomic="false" info="">
[19:27:26.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:27:26.592]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:26.592]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:27:26.592]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:27:26.592]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:27:26.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:26.593]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:27:26.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:27:26.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:27:26.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:26.594]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:27:26.594]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:27:26.594]          </block>
[19:27:26.594]          // end if-block "!hasDormant"
[19:27:26.594]        </control>
[19:27:26.594]        // end if-block "isSWJ"
[19:27:26.594]      </control>
[19:27:26.594]      <control if="!isSWJ" while="" timeout="0" info="">
[19:27:26.594]        // if-block "!isSWJ"
[19:27:26.595]          // =>  FALSE
[19:27:26.595]        // skip if-block "!isSWJ"
[19:27:26.595]      </control>
[19:27:26.595]      <block atomic="false" info="">
[19:27:26.595]        ReadDP(0x0);
[19:27:26.595]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:27:26.596]      </block>
[19:27:26.596]      // end if-block "protType == 2"
[19:27:26.596]    </control>
[19:27:26.596]  </sequence>
[19:27:26.596]  
[19:27:26.596]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:27:26.596]  
[19:27:26.596]  <debugvars>
[19:27:26.596]    // Pre-defined
[19:27:26.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:26.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:26.597]    __dp=0x00000000
[19:27:26.597]    __ap=0x00000000
[19:27:26.597]    __traceout=0x00000000      (Trace Disabled)
[19:27:26.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:26.597]    __FlashAddr=0x00000000
[19:27:26.597]    __FlashLen=0x00000000
[19:27:26.597]    __FlashArg=0x00000000
[19:27:26.597]    __FlashOp=0x00000000
[19:27:26.597]    __Result=0x00000000
[19:27:26.597]  </debugvars>
[19:27:26.597]  
[19:27:26.597]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:27:26.599]    <block atomic="false" info="">
[19:27:26.599]      __var SW_DP_ABORT       = 0x0;
[19:27:26.599]        // -> [SW_DP_ABORT <= 0x00000000]
[19:27:26.599]      __var DP_CTRL_STAT      = 0x4;
[19:27:26.599]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:27:26.599]      __var DP_SELECT         = 0x8;
[19:27:26.599]        // -> [DP_SELECT <= 0x00000008]
[19:27:26.599]      __var powered_down      = 0;
[19:27:26.599]        // -> [powered_down <= 0x00000000]
[19:27:26.599]      WriteDP(DP_SELECT, 0x00000000);
[19:27:26.601]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:27:26.601]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:27:26.602]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:27:26.602]        // -> [powered_down <= 0x00000001]
[19:27:26.602]    </block>
[19:27:26.602]    <control if="powered_down" while="" timeout="0" info="">
[19:27:26.603]      // if-block "powered_down"
[19:27:26.603]        // =>  TRUE
[19:27:26.603]      <block atomic="false" info="">
[19:27:26.603]        Message(0, "Debug/System power-up request sent");
[19:27:26.604]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:27:26.605]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:27:26.605]      </block>
[19:27:26.605]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:27:26.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:27:26.606]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:27:26.606]        // while-condition  =>  FALSE
[19:27:26.606]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:27:26.606]      </control>
[19:27:26.606]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:27:26.607]        // if-block "(__protocol & 0xFFFF) == 1"
[19:27:26.607]          // =>  FALSE
[19:27:26.607]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:27:26.607]      </control>
[19:27:26.607]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:27:26.607]        // if-block "(__protocol & 0xFFFF) == 2"
[19:27:26.607]          // =>  TRUE
[19:27:26.607]        <block atomic="false" info="">
[19:27:26.608]          Message(0, "executing SWD power up");
[19:27:26.609]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:27:26.610]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:27:26.611]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:27:26.611]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:27:26.611]        </block>
[19:27:26.611]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:27:26.611]      </control>
[19:27:26.611]      // end if-block "powered_down"
[19:27:26.611]    </control>
[19:27:26.611]    <block atomic="false" info="">
[19:27:26.611]      __var DEBUG_PORT_VAL    = 0;
[19:27:26.612]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:27:26.612]      __var ACCESS_POINT_VAL  = 0;
[19:27:26.612]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:27:26.612]      __ap = 1; 
[19:27:26.613]        // -> [__ap <= 0x00000001]
[19:27:26.613]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:27:26.614]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:27:26.614]      __ap = 4;
[19:27:26.614]        // -> [__ap <= 0x00000004]
[19:27:26.614]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:26.616]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:27:26.616]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:27:26.616]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:26.617]    </block>
[19:27:26.618]    <block atomic="false" info="">
[19:27:26.618]      __var nReset = 0x80;
[19:27:26.618]        // -> [nReset <= 0x00000080]
[19:27:26.618]      __var canReadPins = 0;
[19:27:26.618]        // -> [canReadPins <= 0x00000000]
[19:27:26.618]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:27:26.618]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:27:26.619]        // -> [canReadPins <= 0x00000001]
[19:27:26.619]    </block>
[19:27:26.619]    <control if="" while="1" timeout="200" info="">
[19:27:26.619]      // while "1"  (timeout="200")
[19:27:26.619]      // while-condition  =>  TRUE
[19:27:26.619]      // while "1"  (timeout="200")
[19:27:26.619]      // while-condition  =>  TRUE
[19:27:26.619]      // while "1"  (timeout="200")
[19:27:26.619]      // while-condition  =>  TRUE
[19:27:26.619]      // while "1"  (timeout="200")
[19:27:26.619]      // while-condition  =>  TRUE
[19:27:26.619]      // while "1"  (timeout="200")
[19:27:26.619]      // while-condition  =>  TRUE
[19:27:26.619]      // while "1"  (timeout="200")
[19:27:26.619]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.621]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.621]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.621]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.621]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.621]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.621]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.621]      // while-condition  =>  TRUE
[19:27:26.621]      // while "1"  (timeout="200")
[19:27:26.622]      // while-condition  =>  TRUE
[19:27:26.622]      // while "1"  (timeout="200")
[19:27:26.622]      // while-condition  =>  TRUE
[19:27:26.622]      // while "1"  (timeout="200")
[19:27:26.622]      // while-condition  =>  TRUE
[19:27:26.622]      // while "1"  (timeout="200")
[19:27:26.622]      // while-condition  =>  TRUE
[19:27:26.622]      // while "1"  (timeout="200")
[19:27:26.622]      // while-condition  =>  TRUE
[19:27:26.622]      // while "1"  (timeout="200")
[19:27:26.623]      // while-condition  =>  TRUE
[19:27:26.623]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.624]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.624]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.624]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.624]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.624]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.624]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.624]      // while "1"  (timeout="200")
[19:27:26.624]      // while-condition  =>  TRUE
[19:27:26.626]      // while "1"  (timeout="200")
[19:27:26.626]      // while-condition  =>  TRUE
[19:27:26.626]      // while "1"  (timeout="200")
[19:27:26.626]      // while-condition  =>  TRUE
[19:27:26.626]      // while "1"  (timeout="200")
[19:27:26.626]      // while-condition  =>  TRUE
[19:27:26.626]      // while "1"  (timeout="200")
[19:27:26.626]      // while-condition  =>  TRUE
[19:27:26.626]      // while "1"  (timeout="200")
[19:27:26.626]      // while-condition  =>  TRUE
[19:27:26.626]      // while "1"  (timeout="200")
[19:27:26.627]      // while-condition  =>  TRUE
[19:27:26.627]      // while "1"  (timeout="200")
[19:27:26.627]      // while-condition  =>  TRUE
[19:27:26.627]      // while "1"  (timeout="200")
[19:27:26.627]      // while-condition  =>  TRUE
[19:27:26.627]      // while "1"  (timeout="200")
[19:27:26.627]      // while-condition  =>  TRUE
[19:27:26.627]      // while "1"  (timeout="200")
[19:27:26.627]      // while-condition  =>  TRUE
[19:27:26.627]      // while "1"  (timeout="200")
[19:27:26.628]      // while-condition  =>  TRUE
[19:27:26.628]      // while "1"  (timeout="200")
[19:27:26.628]      // while-condition  =>  TRUE
[19:27:26.628]      // while "1"  (timeout="200")
[19:27:26.628]      // while-condition  =>  TRUE
[19:27:26.628]      // while "1"  (timeout="200")
[19:27:26.628]      // while-condition  =>  TRUE
[19:27:26.628]      // while "1"  (timeout="200")
[19:27:26.628]      // while-condition  =>  TRUE
[19:27:26.628]      // while "1"  (timeout="200")
[19:27:26.629]      // while-condition  =>  TRUE
[19:27:26.629]      // while "1"  (timeout="200")
[19:27:26.629]      // while-condition  =>  TRUE
[19:27:26.629]      // while "1"  (timeout="200")
[19:27:26.629]      // while-condition  =>  TRUE
[19:27:26.629]      // while "1"  (timeout="200")
[19:27:26.629]      // while-condition  =>  TRUE
[19:27:26.629]      // while "1"  (timeout="200")
[19:27:26.629]      // while-condition  =>  TRUE
[19:27:26.629]      // while "1"  (timeout="200")
[19:27:26.629]      // while-condition  =>  TRUE
[19:27:26.629]      // while "1"  (timeout="200")
[19:27:26.629]      // while-condition  =>  TRUE
[19:27:26.630]      // while "1"  (timeout="200")
[19:27:26.630]      // while  =>  TIMEOUT
[19:27:26.630]      // end while "1"
[19:27:26.630]    </control>
[19:27:26.630]    <control if="canReadPins" while="" timeout="0" info="">
[19:27:26.630]      // if-block "canReadPins"
[19:27:26.630]        // =>  TRUE
[19:27:26.631]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:27:26.631]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:27:26.631]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:27:26.631]        // while-condition  =>  FALSE
[19:27:26.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:27:26.631]      </control>
[19:27:26.631]      // end if-block "canReadPins"
[19:27:26.631]    </control>
[19:27:26.631]    <control if="!canReadPins" while="" timeout="0" info="">
[19:27:26.631]      // if-block "!canReadPins"
[19:27:26.631]        // =>  FALSE
[19:27:26.631]      // skip if-block "!canReadPins"
[19:27:26.632]    </control>
[19:27:26.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:27:26.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:26.632]        // =>  TRUE
[19:27:26.632]      <block atomic="false" info="">
[19:27:26.632]        WriteAP(0x00, 0x190008);
[19:27:26.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:26.634]        WriteAP(0xF0, 0x01);
[19:27:26.635]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:26.635]      </block>
[19:27:26.635]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:26.635]    </control>
[19:27:26.635]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:27:26.635]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:26.635]        // =>  FALSE
[19:27:26.636]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:26.636]    </control>
[19:27:26.636]    <block atomic="false" info="">
[19:27:26.636]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:26.638]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:27:26.638]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:27:26.638]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:26.640]      __ap = 0; //lets make sure we reset the access point selection
[19:27:26.640]        // -> [__ap <= 0x00000000]
[19:27:26.640]    </block>
[19:27:26.640]  </sequence>
[19:27:26.640]  
[19:27:26.646]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:27:26.646]  
[19:27:26.646]  <debugvars>
[19:27:26.646]    // Pre-defined
[19:27:26.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:26.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:26.647]    __dp=0x00000000
[19:27:26.647]    __ap=0x00000000
[19:27:26.647]    __traceout=0x00000000      (Trace Disabled)
[19:27:26.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:26.647]    __FlashAddr=0x00000000
[19:27:26.647]    __FlashLen=0x00000000
[19:27:26.647]    __FlashArg=0x00000000
[19:27:26.647]    __FlashOp=0x00000000
[19:27:26.647]    __Result=0x00000000
[19:27:26.647]  </debugvars>
[19:27:26.648]  
[19:27:26.648]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:27:26.648]    <block atomic="false" info="">
[19:27:26.648]      __var deviceID = 0;
[19:27:26.648]        // -> [deviceID <= 0x00000000]
[19:27:26.648]      __var version = 0;
[19:27:26.648]        // -> [version <= 0x00000000]
[19:27:26.649]      __var partNum = 0;
[19:27:26.649]        // -> [partNum <= 0x00000000]
[19:27:26.649]      __var manuf = 0;
[19:27:26.649]        // -> [manuf <= 0x00000000]
[19:27:26.649]      __var isMSPM0G1X0X_G3X0X = 0;
[19:27:26.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:27:26.649]      __var isProduction = 0;
[19:27:26.649]        // -> [isProduction <= 0x00000000]
[19:27:26.649]      __var continueId = 0;
[19:27:26.650]        // -> [continueId <= 0x00000000]
[19:27:26.650]      deviceID =   Read32(0x41C40004);
[19:27:26.651]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:27:26.651]        // -> [deviceID <= 0x2BB8802F]
[19:27:26.651]      version = deviceID >> 28;
[19:27:26.653]        // -> [version <= 0x00000002]
[19:27:26.653]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:27:26.653]        // -> [partNum <= 0x0000BB88]
[19:27:26.653]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:27:26.653]        // -> [manuf <= 0x00000017]
[19:27:26.653]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:27:26.653]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:27:26.653]      isProduction = (version > 0);
[19:27:26.653]        // -> [isProduction <= 0x00000001]
[19:27:26.653]    </block>
[19:27:26.653]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:27:26.653]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:27:26.653]        // =>  FALSE
[19:27:26.653]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:27:26.653]    </control>
[19:27:26.653]    <control if="continueId == 4" while="" timeout="0" info="">
[19:27:26.655]      // if-block "continueId == 4"
[19:27:26.655]        // =>  FALSE
[19:27:26.655]      // skip if-block "continueId == 4"
[19:27:26.655]    </control>
[19:27:26.655]    <control if="!isProduction" while="" timeout="0" info="">
[19:27:26.655]      // if-block "!isProduction"
[19:27:26.655]        // =>  FALSE
[19:27:26.655]      // skip if-block "!isProduction"
[19:27:26.656]    </control>
[19:27:26.656]  </sequence>
[19:27:26.656]  
[19:28:51.810]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:28:51.810]  
[19:28:51.818]  <debugvars>
[19:28:51.818]    // Pre-defined
[19:28:51.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:28:51.818]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:28:51.818]    __dp=0x00000000
[19:28:51.818]    __ap=0x00000000
[19:28:51.818]    __traceout=0x00000000      (Trace Disabled)
[19:28:51.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:28:51.818]    __FlashAddr=0x00000000
[19:28:51.819]    __FlashLen=0x00000000
[19:28:51.819]    __FlashArg=0x00000000
[19:28:51.819]    __FlashOp=0x00000000
[19:28:51.819]    __Result=0x00000000
[19:28:51.819]  </debugvars>
[19:28:51.819]  
[19:28:51.819]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:28:51.820]    <block atomic="false" info="">
[19:28:51.820]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:28:51.820]        // -> [isSWJ <= 0x00000001]
[19:28:51.820]      __var hasDormant = __protocol & 0x00020000;
[19:28:51.820]        // -> [hasDormant <= 0x00000000]
[19:28:51.820]      __var protType   = __protocol & 0x0000FFFF;
[19:28:51.821]        // -> [protType <= 0x00000002]
[19:28:51.821]    </block>
[19:28:51.821]    <control if="protType == 1" while="" timeout="0" info="">
[19:28:51.821]      // if-block "protType == 1"
[19:28:51.821]        // =>  FALSE
[19:28:51.821]      // skip if-block "protType == 1"
[19:28:51.821]    </control>
[19:28:51.821]    <control if="protType == 2" while="" timeout="0" info="">
[19:28:51.821]      // if-block "protType == 2"
[19:28:51.821]        // =>  TRUE
[19:28:51.821]      <control if="isSWJ" while="" timeout="0" info="">
[19:28:51.822]        // if-block "isSWJ"
[19:28:51.822]          // =>  TRUE
[19:28:51.822]        <control if="hasDormant" while="" timeout="0" info="">
[19:28:51.822]          // if-block "hasDormant"
[19:28:51.822]            // =>  FALSE
[19:28:51.822]          // skip if-block "hasDormant"
[19:28:51.822]        </control>
[19:28:51.822]        <control if="!hasDormant" while="" timeout="0" info="">
[19:28:51.822]          // if-block "!hasDormant"
[19:28:51.822]            // =>  TRUE
[19:28:51.822]          <block atomic="false" info="">
[19:28:51.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:28:51.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:28:51.823]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:28:51.823]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:28:51.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:28:51.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:28:51.824]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:28:51.824]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:28:51.824]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:28:51.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:28:51.825]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:28:51.825]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:28:51.825]          </block>
[19:28:51.825]          // end if-block "!hasDormant"
[19:28:51.825]        </control>
[19:28:51.825]        // end if-block "isSWJ"
[19:28:51.825]      </control>
[19:28:51.825]      <control if="!isSWJ" while="" timeout="0" info="">
[19:28:51.825]        // if-block "!isSWJ"
[19:28:51.825]          // =>  FALSE
[19:28:51.826]        // skip if-block "!isSWJ"
[19:28:51.826]      </control>
[19:28:51.826]      <block atomic="false" info="">
[19:28:51.826]        ReadDP(0x0);
[19:28:51.827]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:28:51.827]      </block>
[19:28:51.827]      // end if-block "protType == 2"
[19:28:51.827]    </control>
[19:28:51.827]  </sequence>
[19:28:51.827]  
[19:28:51.827]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:28:51.827]  
[19:28:51.827]  <debugvars>
[19:28:51.827]    // Pre-defined
[19:28:51.827]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:28:51.828]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:28:51.828]    __dp=0x00000000
[19:28:51.828]    __ap=0x00000000
[19:28:51.828]    __traceout=0x00000000      (Trace Disabled)
[19:28:51.828]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:28:51.828]    __FlashAddr=0x00000000
[19:28:51.828]    __FlashLen=0x00000000
[19:28:51.828]    __FlashArg=0x00000000
[19:28:51.828]    __FlashOp=0x00000000
[19:28:51.828]    __Result=0x00000000
[19:28:51.828]  </debugvars>
[19:28:51.829]  
[19:28:51.829]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:28:51.829]    <block atomic="false" info="">
[19:28:51.829]      __var SW_DP_ABORT       = 0x0;
[19:28:51.829]        // -> [SW_DP_ABORT <= 0x00000000]
[19:28:51.829]      __var DP_CTRL_STAT      = 0x4;
[19:28:51.829]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:28:51.829]      __var DP_SELECT         = 0x8;
[19:28:51.829]        // -> [DP_SELECT <= 0x00000008]
[19:28:51.829]      __var powered_down      = 0;
[19:28:51.829]        // -> [powered_down <= 0x00000000]
[19:28:51.830]      WriteDP(DP_SELECT, 0x00000000);
[19:28:51.830]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:28:51.830]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:28:51.831]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:28:51.831]        // -> [powered_down <= 0x00000001]
[19:28:51.831]    </block>
[19:28:51.831]    <control if="powered_down" while="" timeout="0" info="">
[19:28:51.831]      // if-block "powered_down"
[19:28:51.831]        // =>  TRUE
[19:28:51.831]      <block atomic="false" info="">
[19:28:51.831]        Message(0, "Debug/System power-up request sent");
[19:28:51.834]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:28:51.834]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:28:51.835]      </block>
[19:28:51.835]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:28:51.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:28:51.835]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:28:51.835]        // while-condition  =>  FALSE
[19:28:51.835]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:28:51.836]      </control>
[19:28:51.836]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:28:51.836]        // if-block "(__protocol & 0xFFFF) == 1"
[19:28:51.836]          // =>  FALSE
[19:28:51.836]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:28:51.836]      </control>
[19:28:51.836]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:28:51.837]        // if-block "(__protocol & 0xFFFF) == 2"
[19:28:51.837]          // =>  TRUE
[19:28:51.837]        <block atomic="false" info="">
[19:28:51.837]          Message(0, "executing SWD power up");
[19:28:51.838]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:28:51.839]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:28:51.839]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:28:51.840]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:28:51.840]        </block>
[19:28:51.840]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:28:51.840]      </control>
[19:28:51.840]      // end if-block "powered_down"
[19:28:51.840]    </control>
[19:28:51.840]    <block atomic="false" info="">
[19:28:51.840]      __var DEBUG_PORT_VAL    = 0;
[19:28:51.841]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:28:51.841]      __var ACCESS_POINT_VAL  = 0;
[19:28:51.841]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:28:51.841]      __ap = 1; 
[19:28:51.841]        // -> [__ap <= 0x00000001]
[19:28:51.841]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:28:51.842]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:28:51.842]      __ap = 4;
[19:28:51.842]        // -> [__ap <= 0x00000004]
[19:28:51.842]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:28:51.843]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.843]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:28:51.843]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:28:51.845]    </block>
[19:28:51.845]    <block atomic="false" info="">
[19:28:51.845]      __var nReset = 0x80;
[19:28:51.845]        // -> [nReset <= 0x00000080]
[19:28:51.845]      __var canReadPins = 0;
[19:28:51.845]        // -> [canReadPins <= 0x00000000]
[19:28:51.846]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:28:51.846]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:28:51.846]        // -> [canReadPins <= 0x00000001]
[19:28:51.846]    </block>
[19:28:51.846]    <control if="" while="1" timeout="200" info="">
[19:28:51.846]      // while "1"  (timeout="200")
[19:28:51.846]      // while-condition  =>  TRUE
[19:28:51.846]      // while "1"  (timeout="200")
[19:28:51.847]      // while-condition  =>  TRUE
[19:28:51.847]      // while "1"  (timeout="200")
[19:28:51.847]      // while-condition  =>  TRUE
[19:28:51.847]      // while "1"  (timeout="200")
[19:28:51.848]      // while-condition  =>  TRUE
[19:28:51.848]      // while "1"  (timeout="200")
[19:28:51.848]      // while  =>  TIMEOUT
[19:28:51.848]      // end while "1"
[19:28:51.848]    </control>
[19:28:51.848]    <control if="canReadPins" while="" timeout="0" info="">
[19:28:51.848]      // if-block "canReadPins"
[19:28:51.848]        // =>  TRUE
[19:28:51.849]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:28:51.849]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:28:51.849]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:28:51.849]        // while-condition  =>  FALSE
[19:28:51.849]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:28:51.850]      </control>
[19:28:51.850]      // end if-block "canReadPins"
[19:28:51.850]    </control>
[19:28:51.850]    <control if="!canReadPins" while="" timeout="0" info="">
[19:28:51.850]      // if-block "!canReadPins"
[19:28:51.850]        // =>  FALSE
[19:28:51.850]      // skip if-block "!canReadPins"
[19:28:51.850]    </control>
[19:28:51.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:28:51.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:28:51.850]        // =>  TRUE
[19:28:51.851]      <block atomic="false" info="">
[19:28:51.851]        WriteAP(0x00, 0x190008);
[19:28:51.851]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.851]        WriteAP(0xF0, 0x01);
[19:28:51.852]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.852]      </block>
[19:28:51.852]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:28:51.852]    </control>
[19:28:51.852]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:28:51.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:28:51.852]        // =>  FALSE
[19:28:51.853]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:28:51.853]    </control>
[19:28:51.853]    <block atomic="false" info="">
[19:28:51.853]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:28:51.855]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.855]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:28:51.855]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:28:51.856]      __ap = 0; //lets make sure we reset the access point selection
[19:28:51.857]        // -> [__ap <= 0x00000000]
[19:28:51.857]    </block>
[19:28:51.857]  </sequence>
[19:28:51.857]  
[19:28:51.863]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:28:51.863]  
[19:28:51.863]  <debugvars>
[19:28:51.863]    // Pre-defined
[19:28:51.863]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:28:51.864]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:28:51.864]    __dp=0x00000000
[19:28:51.864]    __ap=0x00000000
[19:28:51.864]    __traceout=0x00000000      (Trace Disabled)
[19:28:51.864]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:28:51.864]    __FlashAddr=0x00000000
[19:28:51.864]    __FlashLen=0x00000000
[19:28:51.865]    __FlashArg=0x00000000
[19:28:51.865]    __FlashOp=0x00000000
[19:28:51.865]    __Result=0x00000000
[19:28:51.865]  </debugvars>
[19:28:51.865]  
[19:28:51.865]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:28:51.865]    <block atomic="false" info="">
[19:28:51.865]      __var deviceID = 0;
[19:28:51.865]        // -> [deviceID <= 0x00000000]
[19:28:51.865]      __var version = 0;
[19:28:51.865]        // -> [version <= 0x00000000]
[19:28:51.865]      __var partNum = 0;
[19:28:51.866]        // -> [partNum <= 0x00000000]
[19:28:51.866]      __var manuf = 0;
[19:28:51.866]        // -> [manuf <= 0x00000000]
[19:28:51.866]      __var isMSPM0G1X0X_G3X0X = 0;
[19:28:51.866]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:28:51.866]      __var isProduction = 0;
[19:28:51.866]        // -> [isProduction <= 0x00000000]
[19:28:51.866]      __var continueId = 0;
[19:28:51.866]        // -> [continueId <= 0x00000000]
[19:28:51.866]      deviceID =   Read32(0x41C40004);
[19:28:51.867]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:28:51.868]        // -> [deviceID <= 0x2BB8802F]
[19:28:51.868]      version = deviceID >> 28;
[19:28:51.869]        // -> [version <= 0x00000002]
[19:28:51.869]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:28:51.869]        // -> [partNum <= 0x0000BB88]
[19:28:51.869]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:28:51.869]        // -> [manuf <= 0x00000017]
[19:28:51.869]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:28:51.869]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:28:51.869]      isProduction = (version > 0);
[19:28:51.869]        // -> [isProduction <= 0x00000001]
[19:28:51.869]    </block>
[19:28:51.869]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:28:51.870]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:28:51.870]        // =>  FALSE
[19:28:51.870]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:28:51.870]    </control>
[19:28:51.870]    <control if="continueId == 4" while="" timeout="0" info="">
[19:28:51.870]      // if-block "continueId == 4"
[19:28:51.870]        // =>  FALSE
[19:28:51.870]      // skip if-block "continueId == 4"
[19:28:51.870]    </control>
[19:28:51.870]    <control if="!isProduction" while="" timeout="0" info="">
[19:28:51.870]      // if-block "!isProduction"
[19:28:51.870]        // =>  FALSE
[19:28:51.871]      // skip if-block "!isProduction"
[19:28:51.871]    </control>
[19:28:51.871]  </sequence>
[19:28:51.871]  
[19:29:45.279]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:29:45.279]  
[19:29:45.279]  <debugvars>
[19:29:45.279]    // Pre-defined
[19:29:45.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:29:45.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:29:45.279]    __dp=0x00000000
[19:29:45.281]    __ap=0x00000000
[19:29:45.281]    __traceout=0x00000000      (Trace Disabled)
[19:29:45.281]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:29:45.281]    __FlashAddr=0x00000000
[19:29:45.281]    __FlashLen=0x00000000
[19:29:45.281]    __FlashArg=0x00000000
[19:29:45.281]    __FlashOp=0x00000000
[19:29:45.281]    __Result=0x00000000
[19:29:45.281]  </debugvars>
[19:29:45.281]  
[19:29:45.281]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:29:45.281]    <block atomic="false" info="">
[19:29:45.282]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:29:45.282]        // -> [isSWJ <= 0x00000001]
[19:29:45.282]      __var hasDormant = __protocol & 0x00020000;
[19:29:45.282]        // -> [hasDormant <= 0x00000000]
[19:29:45.282]      __var protType   = __protocol & 0x0000FFFF;
[19:29:45.282]        // -> [protType <= 0x00000002]
[19:29:45.282]    </block>
[19:29:45.282]    <control if="protType == 1" while="" timeout="0" info="">
[19:29:45.282]      // if-block "protType == 1"
[19:29:45.283]        // =>  FALSE
[19:29:45.283]      // skip if-block "protType == 1"
[19:29:45.283]    </control>
[19:29:45.283]    <control if="protType == 2" while="" timeout="0" info="">
[19:29:45.283]      // if-block "protType == 2"
[19:29:45.283]        // =>  TRUE
[19:29:45.284]      <control if="isSWJ" while="" timeout="0" info="">
[19:29:45.284]        // if-block "isSWJ"
[19:29:45.284]          // =>  TRUE
[19:29:45.284]        <control if="hasDormant" while="" timeout="0" info="">
[19:29:45.284]          // if-block "hasDormant"
[19:29:45.284]            // =>  FALSE
[19:29:45.284]          // skip if-block "hasDormant"
[19:29:45.284]        </control>
[19:29:45.284]        <control if="!hasDormant" while="" timeout="0" info="">
[19:29:45.284]          // if-block "!hasDormant"
[19:29:45.284]            // =>  TRUE
[19:29:45.284]          <block atomic="false" info="">
[19:29:45.284]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:29:45.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:29:45.285]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:29:45.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:29:45.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:29:45.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:29:45.286]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:29:45.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:29:45.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:29:45.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:29:45.286]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:29:45.287]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:29:45.287]          </block>
[19:29:45.287]          // end if-block "!hasDormant"
[19:29:45.287]        </control>
[19:29:45.287]        // end if-block "isSWJ"
[19:29:45.287]      </control>
[19:29:45.287]      <control if="!isSWJ" while="" timeout="0" info="">
[19:29:45.287]        // if-block "!isSWJ"
[19:29:45.287]          // =>  FALSE
[19:29:45.287]        // skip if-block "!isSWJ"
[19:29:45.287]      </control>
[19:29:45.287]      <block atomic="false" info="">
[19:29:45.287]        ReadDP(0x0);
[19:29:45.289]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:29:45.289]      </block>
[19:29:45.289]      // end if-block "protType == 2"
[19:29:45.289]    </control>
[19:29:45.289]  </sequence>
[19:29:45.289]  
[19:29:45.290]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:29:45.290]  
[19:29:45.290]  <debugvars>
[19:29:45.290]    // Pre-defined
[19:29:45.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:29:45.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:29:45.290]    __dp=0x00000000
[19:29:45.290]    __ap=0x00000000
[19:29:45.290]    __traceout=0x00000000      (Trace Disabled)
[19:29:45.290]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:29:45.290]    __FlashAddr=0x00000000
[19:29:45.290]    __FlashLen=0x00000000
[19:29:45.290]    __FlashArg=0x00000000
[19:29:45.290]    __FlashOp=0x00000000
[19:29:45.290]    __Result=0x00000000
[19:29:45.291]  </debugvars>
[19:29:45.291]  
[19:29:45.291]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:29:45.291]    <block atomic="false" info="">
[19:29:45.291]      __var SW_DP_ABORT       = 0x0;
[19:29:45.291]        // -> [SW_DP_ABORT <= 0x00000000]
[19:29:45.291]      __var DP_CTRL_STAT      = 0x4;
[19:29:45.291]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:29:45.291]      __var DP_SELECT         = 0x8;
[19:29:45.292]        // -> [DP_SELECT <= 0x00000008]
[19:29:45.292]      __var powered_down      = 0;
[19:29:45.293]        // -> [powered_down <= 0x00000000]
[19:29:45.293]      WriteDP(DP_SELECT, 0x00000000);
[19:29:45.293]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:29:45.293]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:29:45.293]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:29:45.294]        // -> [powered_down <= 0x00000001]
[19:29:45.294]    </block>
[19:29:45.294]    <control if="powered_down" while="" timeout="0" info="">
[19:29:45.294]      // if-block "powered_down"
[19:29:45.294]        // =>  TRUE
[19:29:45.294]      <block atomic="false" info="">
[19:29:45.294]        Message(0, "Debug/System power-up request sent");
[19:29:45.296]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:29:45.296]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:29:45.296]      </block>
[19:29:45.296]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:29:45.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:29:45.297]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:29:45.297]        // while-condition  =>  FALSE
[19:29:45.297]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:29:45.297]      </control>
[19:29:45.298]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:29:45.298]        // if-block "(__protocol & 0xFFFF) == 1"
[19:29:45.298]          // =>  FALSE
[19:29:45.298]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:29:45.298]      </control>
[19:29:45.298]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:29:45.298]        // if-block "(__protocol & 0xFFFF) == 2"
[19:29:45.298]          // =>  TRUE
[19:29:45.298]        <block atomic="false" info="">
[19:29:45.298]          Message(0, "executing SWD power up");
[19:29:45.299]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:29:45.301]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:29:45.301]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:29:45.302]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:29:45.302]        </block>
[19:29:45.302]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:29:45.302]      </control>
[19:29:45.302]      // end if-block "powered_down"
[19:29:45.302]    </control>
[19:29:45.302]    <block atomic="false" info="">
[19:29:45.302]      __var DEBUG_PORT_VAL    = 0;
[19:29:45.302]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:29:45.302]      __var ACCESS_POINT_VAL  = 0;
[19:29:45.302]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:29:45.302]      __ap = 1; 
[19:29:45.302]        // -> [__ap <= 0x00000001]
[19:29:45.302]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:29:45.304]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:29:45.304]      __ap = 4;
[19:29:45.304]        // -> [__ap <= 0x00000004]
[19:29:45.304]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:29:45.305]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:29:45.305]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:29:45.305]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:29:45.308]    </block>
[19:29:45.308]    <block atomic="false" info="">
[19:29:45.308]      __var nReset = 0x80;
[19:29:45.308]        // -> [nReset <= 0x00000080]
[19:29:45.308]      __var canReadPins = 0;
[19:29:45.308]        // -> [canReadPins <= 0x00000000]
[19:29:45.308]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:29:45.308]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:29:45.309]        // -> [canReadPins <= 0x00000001]
[19:29:45.309]    </block>
[19:29:45.309]    <control if="" while="1" timeout="200" info="">
[19:29:45.309]      // while "1"  (timeout="200")
[19:29:45.309]      // while-condition  =>  TRUE
[19:29:45.309]      // while "1"  (timeout="200")
[19:29:45.309]      // while-condition  =>  TRUE
[19:29:45.309]      // while "1"  (timeout="200")
[19:29:45.309]      // while-condition  =>  TRUE
[19:29:45.309]      // while "1"  (timeout="200")
[19:29:45.309]      // while-condition  =>  TRUE
[19:29:45.309]      // while "1"  (timeout="200")
[19:29:45.310]      // while-condition  =>  TRUE
[19:29:45.310]      // while "1"  (timeout="200")
[19:29:45.310]      // while-condition  =>  TRUE
[19:29:45.310]      // while "1"  (timeout="200")
[19:29:45.310]      // while-condition  =>  TRUE
[19:29:45.310]      // while "1"  (timeout="200")
[19:29:45.310]      // while-condition  =>  TRUE
[19:29:45.310]      // while "1"  (timeout="200")
[19:29:45.310]      // while-condition  =>  TRUE
[19:29:45.311]      // while "1"  (timeout="200")
[19:29:45.311]      // while-condition  =>  TRUE
[19:29:45.311]      // while "1"  (timeout="200")
[19:29:45.311]      // while-condition  =>  TRUE
[19:29:45.311]      // while "1"  (timeout="200")
[19:29:45.311]      // while-condition  =>  TRUE
[19:29:45.311]      // while "1"  (timeout="200")
[19:29:45.311]      // while-condition  =>  TRUE
[19:29:45.311]      // while "1"  (timeout="200")
[19:29:45.311]      // while-condition  =>  TRUE
[19:29:45.312]      // while "1"  (timeout="200")
[19:29:45.312]      // while-condition  =>  TRUE
[19:29:45.312]      // while "1"  (timeout="200")
[19:29:45.312]      // while-condition  =>  TRUE
[19:29:45.312]      // while "1"  (timeout="200")
[19:29:45.312]      // while-condition  =>  TRUE
[19:29:45.312]      // while "1"  (timeout="200")
[19:29:45.312]      // while-condition  =>  TRUE
[19:29:45.312]      // while "1"  (timeout="200")
[19:29:45.314]      // while-condition  =>  TRUE
[19:29:45.314]      // while "1"  (timeout="200")
[19:29:45.314]      // while-condition  =>  TRUE
[19:29:45.314]      // while "1"  (timeout="200")
[19:29:45.314]      // while-condition  =>  TRUE
[19:29:45.314]      // while "1"  (timeout="200")
[19:29:45.315]      // while-condition  =>  TRUE
[19:29:45.315]      // while "1"  (timeout="200")
[19:29:45.315]      // while-condition  =>  TRUE
[19:29:45.315]      // while "1"  (timeout="200")
[19:29:45.315]      // while-condition  =>  TRUE
[19:29:45.315]      // while "1"  (timeout="200")
[19:29:45.315]      // while-condition  =>  TRUE
[19:29:45.315]      // while "1"  (timeout="200")
[19:29:45.315]      // while-condition  =>  TRUE
[19:29:45.315]      // while "1"  (timeout="200")
[19:29:45.315]      // while-condition  =>  TRUE
[19:29:45.315]      // while "1"  (timeout="200")
[19:29:45.316]      // while-condition  =>  TRUE
[19:29:45.316]      // while "1"  (timeout="200")
[19:29:45.316]      // while-condition  =>  TRUE
[19:29:45.316]      // while "1"  (timeout="200")
[19:29:45.316]      // while-condition  =>  TRUE
[19:29:45.316]      // while "1"  (timeout="200")
[19:29:45.316]      // while-condition  =>  TRUE
[19:29:45.316]      // while "1"  (timeout="200")
[19:29:45.317]      // while-condition  =>  TRUE
[19:29:45.317]      // while "1"  (timeout="200")
[19:29:45.317]      // while  =>  TIMEOUT
[19:29:45.317]      // end while "1"
[19:29:45.317]    </control>
[19:29:45.317]    <control if="canReadPins" while="" timeout="0" info="">
[19:29:45.317]      // if-block "canReadPins"
[19:29:45.317]        // =>  TRUE
[19:29:45.317]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:29:45.317]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:29:45.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:29:45.318]        // while-condition  =>  FALSE
[19:29:45.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:29:45.318]      </control>
[19:29:45.318]      // end if-block "canReadPins"
[19:29:45.318]    </control>
[19:29:45.318]    <control if="!canReadPins" while="" timeout="0" info="">
[19:29:45.318]      // if-block "!canReadPins"
[19:29:45.318]        // =>  FALSE
[19:29:45.318]      // skip if-block "!canReadPins"
[19:29:45.318]    </control>
[19:29:45.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:29:45.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:29:45.319]        // =>  TRUE
[19:29:45.319]      <block atomic="false" info="">
[19:29:45.319]        WriteAP(0x00, 0x190008);
[19:29:45.321]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:29:45.321]        WriteAP(0xF0, 0x01);
[19:29:45.322]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:29:45.322]      </block>
[19:29:45.322]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:29:45.322]    </control>
[19:29:45.322]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:29:45.322]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:29:45.322]        // =>  FALSE
[19:29:45.322]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:29:45.323]    </control>
[19:29:45.323]    <block atomic="false" info="">
[19:29:45.323]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:29:45.324]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:29:45.324]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:29:45.324]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:29:45.325]      __ap = 0; //lets make sure we reset the access point selection
[19:29:45.325]        // -> [__ap <= 0x00000000]
[19:29:45.325]    </block>
[19:29:45.325]  </sequence>
[19:29:45.326]  
[19:29:45.331]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:29:45.331]  
[19:29:45.331]  <debugvars>
[19:29:45.331]    // Pre-defined
[19:29:45.331]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:29:45.331]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:29:45.331]    __dp=0x00000000
[19:29:45.333]    __ap=0x00000000
[19:29:45.333]    __traceout=0x00000000      (Trace Disabled)
[19:29:45.333]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:29:45.333]    __FlashAddr=0x00000000
[19:29:45.333]    __FlashLen=0x00000000
[19:29:45.333]    __FlashArg=0x00000000
[19:29:45.333]    __FlashOp=0x00000000
[19:29:45.333]    __Result=0x00000000
[19:29:45.333]  </debugvars>
[19:29:45.333]  
[19:29:45.333]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:29:45.333]    <block atomic="false" info="">
[19:29:45.334]      __var deviceID = 0;
[19:29:45.334]        // -> [deviceID <= 0x00000000]
[19:29:45.334]      __var version = 0;
[19:29:45.334]        // -> [version <= 0x00000000]
[19:29:45.334]      __var partNum = 0;
[19:29:45.334]        // -> [partNum <= 0x00000000]
[19:29:45.334]      __var manuf = 0;
[19:29:45.334]        // -> [manuf <= 0x00000000]
[19:29:45.334]      __var isMSPM0G1X0X_G3X0X = 0;
[19:29:45.334]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:29:45.334]      __var isProduction = 0;
[19:29:45.334]        // -> [isProduction <= 0x00000000]
[19:29:45.334]      __var continueId = 0;
[19:29:45.334]        // -> [continueId <= 0x00000000]
[19:29:45.334]      deviceID =   Read32(0x41C40004);
[19:29:45.336]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:29:45.336]        // -> [deviceID <= 0x2BB8802F]
[19:29:45.336]      version = deviceID >> 28;
[19:29:45.336]        // -> [version <= 0x00000002]
[19:29:45.336]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:29:45.336]        // -> [partNum <= 0x0000BB88]
[19:29:45.336]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:29:45.336]        // -> [manuf <= 0x00000017]
[19:29:45.337]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:29:45.337]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:29:45.337]      isProduction = (version > 0);
[19:29:45.337]        // -> [isProduction <= 0x00000001]
[19:29:45.337]    </block>
[19:29:45.337]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:29:45.338]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:29:45.338]        // =>  FALSE
[19:29:45.338]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:29:45.338]    </control>
[19:29:45.338]    <control if="continueId == 4" while="" timeout="0" info="">
[19:29:45.338]      // if-block "continueId == 4"
[19:29:45.338]        // =>  FALSE
[19:29:45.338]      // skip if-block "continueId == 4"
[19:29:45.338]    </control>
[19:29:45.339]    <control if="!isProduction" while="" timeout="0" info="">
[19:29:45.339]      // if-block "!isProduction"
[19:29:45.339]        // =>  FALSE
[19:29:45.339]      // skip if-block "!isProduction"
[19:29:45.339]    </control>
[19:29:45.339]  </sequence>
[19:29:45.339]  
[19:29:59.354]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:29:59.354]  
[19:29:59.363]  <debugvars>
[19:29:59.363]    // Pre-defined
[19:29:59.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:29:59.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:29:59.363]    __dp=0x00000000
[19:29:59.363]    __ap=0x00000000
[19:29:59.363]    __traceout=0x00000000      (Trace Disabled)
[19:29:59.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:29:59.363]    __FlashAddr=0x00000000
[19:29:59.363]    __FlashLen=0x00000000
[19:29:59.363]    __FlashArg=0x00000000
[19:29:59.364]    __FlashOp=0x00000000
[19:29:59.364]    __Result=0x00000000
[19:29:59.364]  </debugvars>
[19:29:59.364]  
[19:29:59.364]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:29:59.364]    <block atomic="false" info="">
[19:29:59.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:29:59.365]        // -> [isSWJ <= 0x00000001]
[19:29:59.365]      __var hasDormant = __protocol & 0x00020000;
[19:29:59.365]        // -> [hasDormant <= 0x00000000]
[19:29:59.365]      __var protType   = __protocol & 0x0000FFFF;
[19:29:59.365]        // -> [protType <= 0x00000002]
[19:29:59.365]    </block>
[19:29:59.365]    <control if="protType == 1" while="" timeout="0" info="">
[19:29:59.365]      // if-block "protType == 1"
[19:29:59.365]        // =>  FALSE
[19:29:59.365]      // skip if-block "protType == 1"
[19:29:59.365]    </control>
[19:29:59.366]    <control if="protType == 2" while="" timeout="0" info="">
[19:29:59.366]      // if-block "protType == 2"
[19:29:59.366]        // =>  TRUE
[19:29:59.366]      <control if="isSWJ" while="" timeout="0" info="">
[19:29:59.366]        // if-block "isSWJ"
[19:29:59.366]          // =>  TRUE
[19:29:59.366]        <control if="hasDormant" while="" timeout="0" info="">
[19:29:59.366]          // if-block "hasDormant"
[19:29:59.366]            // =>  FALSE
[19:29:59.366]          // skip if-block "hasDormant"
[19:29:59.366]        </control>
[19:29:59.366]        <control if="!hasDormant" while="" timeout="0" info="">
[19:29:59.366]          // if-block "!hasDormant"
[19:29:59.367]            // =>  TRUE
[19:29:59.367]          <block atomic="false" info="">
[19:29:59.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:29:59.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:29:59.368]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:29:59.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:29:59.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:29:59.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:29:59.370]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:29:59.370]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:29:59.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:29:59.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:29:59.371]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:29:59.371]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:29:59.371]          </block>
[19:29:59.371]          // end if-block "!hasDormant"
[19:29:59.371]        </control>
[19:29:59.372]        // end if-block "isSWJ"
[19:29:59.372]      </control>
[19:29:59.372]      <control if="!isSWJ" while="" timeout="0" info="">
[19:29:59.372]        // if-block "!isSWJ"
[19:29:59.372]          // =>  FALSE
[19:29:59.372]        // skip if-block "!isSWJ"
[19:29:59.372]      </control>
[19:29:59.372]      <block atomic="false" info="">
[19:29:59.372]        ReadDP(0x0);
[19:29:59.373]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:29:59.373]      </block>
[19:29:59.373]      // end if-block "protType == 2"
[19:29:59.373]    </control>
[19:29:59.373]  </sequence>
[19:29:59.373]  
[19:29:59.374]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:29:59.374]  
[19:29:59.374]  <debugvars>
[19:29:59.374]    // Pre-defined
[19:29:59.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:29:59.374]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:29:59.374]    __dp=0x00000000
[19:29:59.374]    __ap=0x00000000
[19:29:59.374]    __traceout=0x00000000      (Trace Disabled)
[19:29:59.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:29:59.375]    __FlashAddr=0x00000000
[19:29:59.375]    __FlashLen=0x00000000
[19:29:59.375]    __FlashArg=0x00000000
[19:29:59.375]    __FlashOp=0x00000000
[19:29:59.375]    __Result=0x00000000
[19:29:59.375]  </debugvars>
[19:29:59.375]  
[19:29:59.375]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:29:59.375]    <block atomic="false" info="">
[19:29:59.376]      __var SW_DP_ABORT       = 0x0;
[19:29:59.376]        // -> [SW_DP_ABORT <= 0x00000000]
[19:29:59.376]      __var DP_CTRL_STAT      = 0x4;
[19:29:59.376]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:29:59.376]      __var DP_SELECT         = 0x8;
[19:29:59.377]        // -> [DP_SELECT <= 0x00000008]
[19:29:59.377]      __var powered_down      = 0;
[19:29:59.377]        // -> [powered_down <= 0x00000000]
[19:29:59.377]      WriteDP(DP_SELECT, 0x00000000);
[19:29:59.377]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:29:59.377]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:29:59.378]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:29:59.378]        // -> [powered_down <= 0x00000001]
[19:29:59.378]    </block>
[19:29:59.378]    <control if="powered_down" while="" timeout="0" info="">
[19:29:59.378]      // if-block "powered_down"
[19:29:59.378]        // =>  TRUE
[19:29:59.378]      <block atomic="false" info="">
[19:29:59.378]        Message(0, "Debug/System power-up request sent");
[19:29:59.380]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:29:59.381]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:29:59.381]      </block>
[19:29:59.381]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:29:59.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:29:59.381]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:29:59.382]        // while-condition  =>  FALSE
[19:29:59.382]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:29:59.382]      </control>
[19:29:59.382]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:29:59.382]        // if-block "(__protocol & 0xFFFF) == 1"
[19:29:59.382]          // =>  FALSE
[19:29:59.382]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:29:59.382]      </control>
[19:29:59.382]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:29:59.382]        // if-block "(__protocol & 0xFFFF) == 2"
[19:29:59.382]          // =>  TRUE
[19:29:59.383]        <block atomic="false" info="">
[19:29:59.383]          Message(0, "executing SWD power up");
[19:29:59.384]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:29:59.385]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:29:59.385]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:29:59.386]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:29:59.386]        </block>
[19:29:59.386]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:29:59.386]      </control>
[19:29:59.386]      // end if-block "powered_down"
[19:29:59.386]    </control>
[19:29:59.386]    <block atomic="false" info="">
[19:29:59.386]      __var DEBUG_PORT_VAL    = 0;
[19:29:59.386]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:29:59.386]      __var ACCESS_POINT_VAL  = 0;
[19:29:59.386]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:29:59.386]      __ap = 1; 
[19:29:59.386]        // -> [__ap <= 0x00000001]
[19:29:59.388]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:29:59.389]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:29:59.389]      __ap = 4;
[19:29:59.389]        // -> [__ap <= 0x00000004]
[19:29:59.389]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:29:59.390]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:29:59.390]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:29:59.390]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:29:59.391]    </block>
[19:29:59.391]    <block atomic="false" info="">
[19:29:59.391]      __var nReset = 0x80;
[19:29:59.391]        // -> [nReset <= 0x00000080]
[19:29:59.391]      __var canReadPins = 0;
[19:29:59.392]        // -> [canReadPins <= 0x00000000]
[19:29:59.392]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:29:59.392]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:29:59.392]        // -> [canReadPins <= 0x00000001]
[19:29:59.392]    </block>
[19:29:59.392]    <control if="" while="1" timeout="200" info="">
[19:29:59.392]      // while "1"  (timeout="200")
[19:29:59.392]      // while-condition  =>  TRUE
[19:29:59.393]      // while "1"  (timeout="200")
[19:29:59.393]      // while-condition  =>  TRUE
[19:29:59.393]      // while "1"  (timeout="200")
[19:29:59.393]      // while-condition  =>  TRUE
[19:29:59.393]      // while "1"  (timeout="200")
[19:29:59.393]      // while-condition  =>  TRUE
[19:29:59.393]      // while "1"  (timeout="200")
[19:29:59.393]      // while-condition  =>  TRUE
[19:29:59.393]      // while "1"  (timeout="200")
[19:29:59.393]      // while-condition  =>  TRUE
[19:29:59.394]      // while "1"  (timeout="200")
[19:29:59.394]      // while-condition  =>  TRUE
[19:29:59.394]      // while "1"  (timeout="200")
[19:29:59.394]      // while-condition  =>  TRUE
[19:29:59.394]      // while "1"  (timeout="200")
[19:29:59.394]      // while-condition  =>  TRUE
[19:29:59.395]      // while "1"  (timeout="200")
[19:29:59.395]      // while  =>  TIMEOUT
[19:29:59.395]      // end while "1"
[19:29:59.395]    </control>
[19:29:59.395]    <control if="canReadPins" while="" timeout="0" info="">
[19:29:59.395]      // if-block "canReadPins"
[19:29:59.395]        // =>  TRUE
[19:29:59.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:29:59.396]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:29:59.397]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:29:59.397]        // while-condition  =>  FALSE
[19:29:59.397]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:29:59.397]      </control>
[19:29:59.397]      // end if-block "canReadPins"
[19:29:59.397]    </control>
[19:29:59.397]    <control if="!canReadPins" while="" timeout="0" info="">
[19:29:59.397]      // if-block "!canReadPins"
[19:29:59.397]        // =>  FALSE
[19:29:59.397]      // skip if-block "!canReadPins"
[19:29:59.397]    </control>
[19:29:59.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:29:59.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:29:59.397]        // =>  TRUE
[19:29:59.397]      <block atomic="false" info="">
[19:29:59.398]        WriteAP(0x00, 0x190008);
[19:29:59.398]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:29:59.398]        WriteAP(0xF0, 0x01);
[19:29:59.399]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:29:59.400]      </block>
[19:29:59.400]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:29:59.400]    </control>
[19:29:59.400]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:29:59.401]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:29:59.401]        // =>  FALSE
[19:29:59.401]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:29:59.401]    </control>
[19:29:59.401]    <block atomic="false" info="">
[19:29:59.401]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:29:59.402]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:29:59.402]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:29:59.402]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:29:59.404]      __ap = 0; //lets make sure we reset the access point selection
[19:29:59.405]        // -> [__ap <= 0x00000000]
[19:29:59.405]    </block>
[19:29:59.405]  </sequence>
[19:29:59.405]  
[19:29:59.410]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:29:59.410]  
[19:29:59.411]  <debugvars>
[19:29:59.411]    // Pre-defined
[19:29:59.411]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:29:59.411]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:29:59.411]    __dp=0x00000000
[19:29:59.411]    __ap=0x00000000
[19:29:59.411]    __traceout=0x00000000      (Trace Disabled)
[19:29:59.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:29:59.411]    __FlashAddr=0x00000000
[19:29:59.411]    __FlashLen=0x00000000
[19:29:59.411]    __FlashArg=0x00000000
[19:29:59.411]    __FlashOp=0x00000000
[19:29:59.411]    __Result=0x00000000
[19:29:59.411]  </debugvars>
[19:29:59.412]  
[19:29:59.412]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:29:59.412]    <block atomic="false" info="">
[19:29:59.412]      __var deviceID = 0;
[19:29:59.412]        // -> [deviceID <= 0x00000000]
[19:29:59.412]      __var version = 0;
[19:29:59.412]        // -> [version <= 0x00000000]
[19:29:59.412]      __var partNum = 0;
[19:29:59.412]        // -> [partNum <= 0x00000000]
[19:29:59.412]      __var manuf = 0;
[19:29:59.413]        // -> [manuf <= 0x00000000]
[19:29:59.413]      __var isMSPM0G1X0X_G3X0X = 0;
[19:29:59.413]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:29:59.413]      __var isProduction = 0;
[19:29:59.413]        // -> [isProduction <= 0x00000000]
[19:29:59.413]      __var continueId = 0;
[19:29:59.413]        // -> [continueId <= 0x00000000]
[19:29:59.413]      deviceID =   Read32(0x41C40004);
[19:29:59.416]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:29:59.416]        // -> [deviceID <= 0x2BB8802F]
[19:29:59.416]      version = deviceID >> 28;
[19:29:59.416]        // -> [version <= 0x00000002]
[19:29:59.416]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:29:59.416]        // -> [partNum <= 0x0000BB88]
[19:29:59.417]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:29:59.417]        // -> [manuf <= 0x00000017]
[19:29:59.417]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:29:59.417]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:29:59.417]      isProduction = (version > 0);
[19:29:59.417]        // -> [isProduction <= 0x00000001]
[19:29:59.417]    </block>
[19:29:59.417]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:29:59.417]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:29:59.418]        // =>  FALSE
[19:29:59.418]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:29:59.418]    </control>
[19:29:59.418]    <control if="continueId == 4" while="" timeout="0" info="">
[19:29:59.418]      // if-block "continueId == 4"
[19:29:59.418]        // =>  FALSE
[19:29:59.418]      // skip if-block "continueId == 4"
[19:29:59.418]    </control>
[19:29:59.418]    <control if="!isProduction" while="" timeout="0" info="">
[19:29:59.418]      // if-block "!isProduction"
[19:29:59.418]        // =>  FALSE
[19:29:59.418]      // skip if-block "!isProduction"
[19:29:59.418]    </control>
[19:29:59.418]  </sequence>
[19:29:59.418]  
[19:30:31.920]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:30:31.920]  
[19:30:31.929]  <debugvars>
[19:30:31.929]    // Pre-defined
[19:30:31.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:30:31.929]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:30:31.929]    __dp=0x00000000
[19:30:31.929]    __ap=0x00000000
[19:30:31.929]    __traceout=0x00000000      (Trace Disabled)
[19:30:31.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:30:31.931]    __FlashAddr=0x00000000
[19:30:31.931]    __FlashLen=0x00000000
[19:30:31.931]    __FlashArg=0x00000000
[19:30:31.931]    __FlashOp=0x00000000
[19:30:31.931]    __Result=0x00000000
[19:30:31.931]  </debugvars>
[19:30:31.931]  
[19:30:31.931]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:30:31.931]    <block atomic="false" info="">
[19:30:31.931]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:30:31.931]        // -> [isSWJ <= 0x00000001]
[19:30:31.932]      __var hasDormant = __protocol & 0x00020000;
[19:30:31.932]        // -> [hasDormant <= 0x00000000]
[19:30:31.932]      __var protType   = __protocol & 0x0000FFFF;
[19:30:31.932]        // -> [protType <= 0x00000002]
[19:30:31.932]    </block>
[19:30:31.932]    <control if="protType == 1" while="" timeout="0" info="">
[19:30:31.932]      // if-block "protType == 1"
[19:30:31.932]        // =>  FALSE
[19:30:31.932]      // skip if-block "protType == 1"
[19:30:31.932]    </control>
[19:30:31.932]    <control if="protType == 2" while="" timeout="0" info="">
[19:30:31.933]      // if-block "protType == 2"
[19:30:31.933]        // =>  TRUE
[19:30:31.933]      <control if="isSWJ" while="" timeout="0" info="">
[19:30:31.933]        // if-block "isSWJ"
[19:30:31.933]          // =>  TRUE
[19:30:31.933]        <control if="hasDormant" while="" timeout="0" info="">
[19:30:31.933]          // if-block "hasDormant"
[19:30:31.933]            // =>  FALSE
[19:30:31.933]          // skip if-block "hasDormant"
[19:30:31.933]        </control>
[19:30:31.933]        <control if="!hasDormant" while="" timeout="0" info="">
[19:30:31.933]          // if-block "!hasDormant"
[19:30:31.933]            // =>  TRUE
[19:30:31.933]          <block atomic="false" info="">
[19:30:31.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:30:31.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:30:31.934]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:30:31.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:30:31.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:30:31.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:30:31.935]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:30:31.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:30:31.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:30:31.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:30:31.936]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:30:31.936]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:30:31.936]          </block>
[19:30:31.936]          // end if-block "!hasDormant"
[19:30:31.936]        </control>
[19:30:31.937]        // end if-block "isSWJ"
[19:30:31.937]      </control>
[19:30:31.937]      <control if="!isSWJ" while="" timeout="0" info="">
[19:30:31.937]        // if-block "!isSWJ"
[19:30:31.937]          // =>  FALSE
[19:30:31.937]        // skip if-block "!isSWJ"
[19:30:31.937]      </control>
[19:30:31.937]      <block atomic="false" info="">
[19:30:31.937]        ReadDP(0x0);
[19:30:31.938]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:30:31.938]      </block>
[19:30:31.938]      // end if-block "protType == 2"
[19:30:31.938]    </control>
[19:30:31.938]  </sequence>
[19:30:31.938]  
[19:30:31.939]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:30:31.939]  
[19:30:31.939]  <debugvars>
[19:30:31.939]    // Pre-defined
[19:30:31.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:30:31.940]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:30:31.940]    __dp=0x00000000
[19:30:31.940]    __ap=0x00000000
[19:30:31.940]    __traceout=0x00000000      (Trace Disabled)
[19:30:31.940]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:30:31.940]    __FlashAddr=0x00000000
[19:30:31.940]    __FlashLen=0x00000000
[19:30:31.940]    __FlashArg=0x00000000
[19:30:31.941]    __FlashOp=0x00000000
[19:30:31.941]    __Result=0x00000000
[19:30:31.941]  </debugvars>
[19:30:31.941]  
[19:30:31.941]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:30:31.941]    <block atomic="false" info="">
[19:30:31.941]      __var SW_DP_ABORT       = 0x0;
[19:30:31.941]        // -> [SW_DP_ABORT <= 0x00000000]
[19:30:31.941]      __var DP_CTRL_STAT      = 0x4;
[19:30:31.941]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:30:31.941]      __var DP_SELECT         = 0x8;
[19:30:31.942]        // -> [DP_SELECT <= 0x00000008]
[19:30:31.942]      __var powered_down      = 0;
[19:30:31.942]        // -> [powered_down <= 0x00000000]
[19:30:31.942]      WriteDP(DP_SELECT, 0x00000000);
[19:30:31.943]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:30:31.943]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:30:31.943]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:30:31.943]        // -> [powered_down <= 0x00000001]
[19:30:31.943]    </block>
[19:30:31.943]    <control if="powered_down" while="" timeout="0" info="">
[19:30:31.943]      // if-block "powered_down"
[19:30:31.943]        // =>  TRUE
[19:30:31.943]      <block atomic="false" info="">
[19:30:31.944]        Message(0, "Debug/System power-up request sent");
[19:30:31.947]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:30:31.947]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:30:31.947]      </block>
[19:30:31.947]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:30:31.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:30:31.948]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:30:31.948]        // while-condition  =>  FALSE
[19:30:31.948]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:30:31.948]      </control>
[19:30:31.948]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:30:31.948]        // if-block "(__protocol & 0xFFFF) == 1"
[19:30:31.948]          // =>  FALSE
[19:30:31.948]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:30:31.948]      </control>
[19:30:31.948]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:30:31.950]        // if-block "(__protocol & 0xFFFF) == 2"
[19:30:31.950]          // =>  TRUE
[19:30:31.950]        <block atomic="false" info="">
[19:30:31.950]          Message(0, "executing SWD power up");
[19:30:31.951]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:30:31.952]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:30:31.952]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:30:31.952]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:30:31.952]        </block>
[19:30:31.952]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:30:31.952]      </control>
[19:30:31.953]      // end if-block "powered_down"
[19:30:31.953]    </control>
[19:30:31.953]    <block atomic="false" info="">
[19:30:31.953]      __var DEBUG_PORT_VAL    = 0;
[19:30:31.953]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:30:31.953]      __var ACCESS_POINT_VAL  = 0;
[19:30:31.953]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:30:31.953]      __ap = 1; 
[19:30:31.953]        // -> [__ap <= 0x00000001]
[19:30:31.953]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:30:31.955]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:30:31.955]      __ap = 4;
[19:30:31.955]        // -> [__ap <= 0x00000004]
[19:30:31.955]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:30:31.956]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:30:31.956]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:30:31.956]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:30:31.958]    </block>
[19:30:31.958]    <block atomic="false" info="">
[19:30:31.958]      __var nReset = 0x80;
[19:30:31.958]        // -> [nReset <= 0x00000080]
[19:30:31.959]      __var canReadPins = 0;
[19:30:31.959]        // -> [canReadPins <= 0x00000000]
[19:30:31.959]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:30:31.959]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:30:31.959]        // -> [canReadPins <= 0x00000001]
[19:30:31.959]    </block>
[19:30:31.960]    <control if="" while="1" timeout="200" info="">
[19:30:31.960]      // while "1"  (timeout="200")
[19:30:31.960]      // while-condition  =>  TRUE
[19:30:31.960]      // while "1"  (timeout="200")
[19:30:31.960]      // while-condition  =>  TRUE
[19:30:31.960]      // while "1"  (timeout="200")
[19:30:31.960]      // while-condition  =>  TRUE
[19:30:31.960]      // while "1"  (timeout="200")
[19:30:31.961]      // while-condition  =>  TRUE
[19:30:31.961]      // while "1"  (timeout="200")
[19:30:31.961]      // while-condition  =>  TRUE
[19:30:31.961]      // while "1"  (timeout="200")
[19:30:31.961]      // while-condition  =>  TRUE
[19:30:31.961]      // while "1"  (timeout="200")
[19:30:31.961]      // while-condition  =>  TRUE
[19:30:31.961]      // while "1"  (timeout="200")
[19:30:31.961]      // while-condition  =>  TRUE
[19:30:31.961]      // while "1"  (timeout="200")
[19:30:31.961]      // while-condition  =>  TRUE
[19:30:31.961]      // while "1"  (timeout="200")
[19:30:31.962]      // while-condition  =>  TRUE
[19:30:31.962]      // while "1"  (timeout="200")
[19:30:31.962]      // while-condition  =>  TRUE
[19:30:31.962]      // while "1"  (timeout="200")
[19:30:31.962]      // while-condition  =>  TRUE
[19:30:31.962]      // while "1"  (timeout="200")
[19:30:31.962]      // while-condition  =>  TRUE
[19:30:31.962]      // while "1"  (timeout="200")
[19:30:31.962]      // while-condition  =>  TRUE
[19:30:31.962]      // while "1"  (timeout="200")
[19:30:31.963]      // while-condition  =>  TRUE
[19:30:31.963]      // while "1"  (timeout="200")
[19:30:31.963]      // while-condition  =>  TRUE
[19:30:31.963]      // while "1"  (timeout="200")
[19:30:31.963]      // while-condition  =>  TRUE
[19:30:31.963]      // while "1"  (timeout="200")
[19:30:31.963]      // while-condition  =>  TRUE
[19:30:31.963]      // while "1"  (timeout="200")
[19:30:31.963]      // while-condition  =>  TRUE
[19:30:31.963]      // while "1"  (timeout="200")
[19:30:31.963]      // while-condition  =>  TRUE
[19:30:31.963]      // while "1"  (timeout="200")
[19:30:31.963]      // while-condition  =>  TRUE
[19:30:31.964]      // while "1"  (timeout="200")
[19:30:31.964]      // while-condition  =>  TRUE
[19:30:31.964]      // while "1"  (timeout="200")
[19:30:31.964]      // while-condition  =>  TRUE
[19:30:31.964]      // while "1"  (timeout="200")
[19:30:31.964]      // while-condition  =>  TRUE
[19:30:31.964]      // while "1"  (timeout="200")
[19:30:31.964]      // while-condition  =>  TRUE
[19:30:31.964]      // while "1"  (timeout="200")
[19:30:31.964]      // while-condition  =>  TRUE
[19:30:31.964]      // while "1"  (timeout="200")
[19:30:31.964]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.965]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.965]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.965]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.965]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.965]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.965]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.965]      // while-condition  =>  TRUE
[19:30:31.965]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.967]      // while "1"  (timeout="200")
[19:30:31.967]      // while-condition  =>  TRUE
[19:30:31.968]      // while "1"  (timeout="200")
[19:30:31.968]      // while-condition  =>  TRUE
[19:30:31.968]      // while "1"  (timeout="200")
[19:30:31.968]      // while-condition  =>  TRUE
[19:30:31.968]      // while "1"  (timeout="200")
[19:30:31.968]      // while-condition  =>  TRUE
[19:30:31.968]      // while "1"  (timeout="200")
[19:30:31.968]      // while-condition  =>  TRUE
[19:30:31.968]      // while "1"  (timeout="200")
[19:30:31.968]      // while-condition  =>  TRUE
[19:30:31.968]      // while "1"  (timeout="200")
[19:30:31.968]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.969]      // while-condition  =>  TRUE
[19:30:31.969]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.971]      // while "1"  (timeout="200")
[19:30:31.971]      // while-condition  =>  TRUE
[19:30:31.972]      // while "1"  (timeout="200")
[19:30:31.972]      // while-condition  =>  TRUE
[19:30:31.972]      // while "1"  (timeout="200")
[19:30:31.972]      // while-condition  =>  TRUE
[19:30:31.972]      // while "1"  (timeout="200")
[19:30:31.972]      // while-condition  =>  TRUE
[19:30:31.972]      // while "1"  (timeout="200")
[19:30:31.972]      // while-condition  =>  TRUE
[19:30:31.972]      // while "1"  (timeout="200")
[19:30:31.972]      // while-condition  =>  TRUE
[19:30:31.972]      // while "1"  (timeout="200")
[19:30:31.972]      // while-condition  =>  TRUE
[19:30:31.973]      // while "1"  (timeout="200")
[19:30:31.973]      // while  =>  TIMEOUT
[19:30:31.974]      // end while "1"
[19:30:31.974]    </control>
[19:30:31.974]    <control if="canReadPins" while="" timeout="0" info="">
[19:30:31.974]      // if-block "canReadPins"
[19:30:31.974]        // =>  TRUE
[19:30:31.974]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:30:31.974]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:30:31.974]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:30:31.974]        // while-condition  =>  FALSE
[19:30:31.974]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:30:31.974]      </control>
[19:30:31.974]      // end if-block "canReadPins"
[19:30:31.974]    </control>
[19:30:31.974]    <control if="!canReadPins" while="" timeout="0" info="">
[19:30:31.974]      // if-block "!canReadPins"
[19:30:31.974]        // =>  FALSE
[19:30:31.976]      // skip if-block "!canReadPins"
[19:30:31.976]    </control>
[19:30:31.976]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:30:31.976]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:30:31.976]        // =>  TRUE
[19:30:31.976]      <block atomic="false" info="">
[19:30:31.976]        WriteAP(0x00, 0x190008);
[19:30:31.976]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:30:31.976]        WriteAP(0xF0, 0x01);
[19:30:31.978]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:30:31.978]      </block>
[19:30:31.978]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:30:31.978]    </control>
[19:30:31.978]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:30:31.978]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:30:31.978]        // =>  FALSE
[19:30:31.978]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:30:31.978]    </control>
[19:30:31.978]    <block atomic="false" info="">
[19:30:31.978]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:30:31.979]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:30:31.979]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:30:31.979]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:30:31.982]      __ap = 0; //lets make sure we reset the access point selection
[19:30:31.982]        // -> [__ap <= 0x00000000]
[19:30:31.982]    </block>
[19:30:31.982]  </sequence>
[19:30:31.982]  
[19:30:31.988]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:30:31.988]  
[19:30:31.988]  <debugvars>
[19:30:31.988]    // Pre-defined
[19:30:31.988]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:30:31.988]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:30:31.988]    __dp=0x00000000
[19:30:31.989]    __ap=0x00000000
[19:30:31.989]    __traceout=0x00000000      (Trace Disabled)
[19:30:31.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:30:31.989]    __FlashAddr=0x00000000
[19:30:31.989]    __FlashLen=0x00000000
[19:30:31.989]    __FlashArg=0x00000000
[19:30:31.989]    __FlashOp=0x00000000
[19:30:31.989]    __Result=0x00000000
[19:30:31.989]  </debugvars>
[19:30:31.989]  
[19:30:31.989]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:30:31.989]    <block atomic="false" info="">
[19:30:31.989]      __var deviceID = 0;
[19:30:31.989]        // -> [deviceID <= 0x00000000]
[19:30:31.989]      __var version = 0;
[19:30:31.989]        // -> [version <= 0x00000000]
[19:30:31.989]      __var partNum = 0;
[19:30:31.991]        // -> [partNum <= 0x00000000]
[19:30:31.991]      __var manuf = 0;
[19:30:31.991]        // -> [manuf <= 0x00000000]
[19:30:31.991]      __var isMSPM0G1X0X_G3X0X = 0;
[19:30:31.991]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:30:31.991]      __var isProduction = 0;
[19:30:31.991]        // -> [isProduction <= 0x00000000]
[19:30:31.991]      __var continueId = 0;
[19:30:31.991]        // -> [continueId <= 0x00000000]
[19:30:31.991]      deviceID =   Read32(0x41C40004);
[19:30:31.992]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:30:31.992]        // -> [deviceID <= 0x2BB8802F]
[19:30:31.993]      version = deviceID >> 28;
[19:30:31.993]        // -> [version <= 0x00000002]
[19:30:31.993]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:30:31.993]        // -> [partNum <= 0x0000BB88]
[19:30:31.993]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:30:31.993]        // -> [manuf <= 0x00000017]
[19:30:31.994]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:30:31.994]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:30:31.994]      isProduction = (version > 0);
[19:30:31.994]        // -> [isProduction <= 0x00000001]
[19:30:31.994]    </block>
[19:30:31.994]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:30:31.995]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:30:31.995]        // =>  FALSE
[19:30:31.995]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:30:31.995]    </control>
[19:30:31.995]    <control if="continueId == 4" while="" timeout="0" info="">
[19:30:31.995]      // if-block "continueId == 4"
[19:30:31.995]        // =>  FALSE
[19:30:31.995]      // skip if-block "continueId == 4"
[19:30:31.995]    </control>
[19:30:31.995]    <control if="!isProduction" while="" timeout="0" info="">
[19:30:31.995]      // if-block "!isProduction"
[19:30:31.996]        // =>  FALSE
[19:30:31.996]      // skip if-block "!isProduction"
[19:30:31.996]    </control>
[19:30:31.996]  </sequence>
[19:30:31.996]  
[19:30:51.094]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:30:51.094]  
[19:30:51.103]  <debugvars>
[19:30:51.103]    // Pre-defined
[19:30:51.103]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:30:51.103]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:30:51.103]    __dp=0x00000000
[19:30:51.103]    __ap=0x00000000
[19:30:51.103]    __traceout=0x00000000      (Trace Disabled)
[19:30:51.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:30:51.103]    __FlashAddr=0x00000000
[19:30:51.103]    __FlashLen=0x00000000
[19:30:51.103]    __FlashArg=0x00000000
[19:30:51.104]    __FlashOp=0x00000000
[19:30:51.104]    __Result=0x00000000
[19:30:51.104]  </debugvars>
[19:30:51.104]  
[19:30:51.104]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:30:51.104]    <block atomic="false" info="">
[19:30:51.104]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:30:51.104]        // -> [isSWJ <= 0x00000001]
[19:30:51.104]      __var hasDormant = __protocol & 0x00020000;
[19:30:51.104]        // -> [hasDormant <= 0x00000000]
[19:30:51.104]      __var protType   = __protocol & 0x0000FFFF;
[19:30:51.104]        // -> [protType <= 0x00000002]
[19:30:51.104]    </block>
[19:30:51.104]    <control if="protType == 1" while="" timeout="0" info="">
[19:30:51.104]      // if-block "protType == 1"
[19:30:51.104]        // =>  FALSE
[19:30:51.106]      // skip if-block "protType == 1"
[19:30:51.106]    </control>
[19:30:51.106]    <control if="protType == 2" while="" timeout="0" info="">
[19:30:51.106]      // if-block "protType == 2"
[19:30:51.106]        // =>  TRUE
[19:30:51.106]      <control if="isSWJ" while="" timeout="0" info="">
[19:30:51.106]        // if-block "isSWJ"
[19:30:51.106]          // =>  TRUE
[19:30:51.106]        <control if="hasDormant" while="" timeout="0" info="">
[19:30:51.106]          // if-block "hasDormant"
[19:30:51.106]            // =>  FALSE
[19:30:51.106]          // skip if-block "hasDormant"
[19:30:51.106]        </control>
[19:30:51.107]        <control if="!hasDormant" while="" timeout="0" info="">
[19:30:51.107]          // if-block "!hasDormant"
[19:30:51.107]            // =>  TRUE
[19:30:51.107]          <block atomic="false" info="">
[19:30:51.107]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:30:51.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:30:51.108]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:30:51.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:30:51.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:30:51.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:30:51.109]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:30:51.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:30:51.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:30:51.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:30:51.109]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:30:51.109]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:30:51.109]          </block>
[19:30:51.111]          // end if-block "!hasDormant"
[19:30:51.111]        </control>
[19:30:51.111]        // end if-block "isSWJ"
[19:30:51.111]      </control>
[19:30:51.111]      <control if="!isSWJ" while="" timeout="0" info="">
[19:30:51.111]        // if-block "!isSWJ"
[19:30:51.111]          // =>  FALSE
[19:30:51.111]        // skip if-block "!isSWJ"
[19:30:51.111]      </control>
[19:30:51.111]      <block atomic="false" info="">
[19:30:51.111]        ReadDP(0x0);
[19:30:51.112]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:30:51.112]      </block>
[19:30:51.112]      // end if-block "protType == 2"
[19:30:51.112]    </control>
[19:30:51.112]  </sequence>
[19:30:51.112]  
[19:30:51.113]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:30:51.113]  
[19:30:51.113]  <debugvars>
[19:30:51.113]    // Pre-defined
[19:30:51.113]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:30:51.113]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:30:51.113]    __dp=0x00000000
[19:30:51.113]    __ap=0x00000000
[19:30:51.113]    __traceout=0x00000000      (Trace Disabled)
[19:30:51.113]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:30:51.113]    __FlashAddr=0x00000000
[19:30:51.113]    __FlashLen=0x00000000
[19:30:51.114]    __FlashArg=0x00000000
[19:30:51.114]    __FlashOp=0x00000000
[19:30:51.114]    __Result=0x00000000
[19:30:51.114]  </debugvars>
[19:30:51.114]  
[19:30:51.114]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:30:51.114]    <block atomic="false" info="">
[19:30:51.114]      __var SW_DP_ABORT       = 0x0;
[19:30:51.115]        // -> [SW_DP_ABORT <= 0x00000000]
[19:30:51.115]      __var DP_CTRL_STAT      = 0x4;
[19:30:51.115]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:30:51.115]      __var DP_SELECT         = 0x8;
[19:30:51.115]        // -> [DP_SELECT <= 0x00000008]
[19:30:51.115]      __var powered_down      = 0;
[19:30:51.115]        // -> [powered_down <= 0x00000000]
[19:30:51.115]      WriteDP(DP_SELECT, 0x00000000);
[19:30:51.116]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:30:51.116]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:30:51.116]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:30:51.116]        // -> [powered_down <= 0x00000001]
[19:30:51.116]    </block>
[19:30:51.117]    <control if="powered_down" while="" timeout="0" info="">
[19:30:51.117]      // if-block "powered_down"
[19:30:51.117]        // =>  TRUE
[19:30:51.117]      <block atomic="false" info="">
[19:30:51.117]        Message(0, "Debug/System power-up request sent");
[19:30:51.118]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:30:51.119]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:30:51.120]      </block>
[19:30:51.120]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:30:51.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:30:51.120]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:30:51.120]        // while-condition  =>  FALSE
[19:30:51.121]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:30:51.121]      </control>
[19:30:51.121]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:30:51.121]        // if-block "(__protocol & 0xFFFF) == 1"
[19:30:51.121]          // =>  FALSE
[19:30:51.121]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:30:51.121]      </control>
[19:30:51.121]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:30:51.121]        // if-block "(__protocol & 0xFFFF) == 2"
[19:30:51.121]          // =>  TRUE
[19:30:51.121]        <block atomic="false" info="">
[19:30:51.121]          Message(0, "executing SWD power up");
[19:30:51.122]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:30:51.124]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:30:51.124]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:30:51.124]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:30:51.124]        </block>
[19:30:51.124]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:30:51.124]      </control>
[19:30:51.124]      // end if-block "powered_down"
[19:30:51.124]    </control>
[19:30:51.124]    <block atomic="false" info="">
[19:30:51.124]      __var DEBUG_PORT_VAL    = 0;
[19:30:51.124]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:30:51.124]      __var ACCESS_POINT_VAL  = 0;
[19:30:51.124]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:30:51.124]      __ap = 1; 
[19:30:51.124]        // -> [__ap <= 0x00000001]
[19:30:51.126]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:30:51.127]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:30:51.127]      __ap = 4;
[19:30:51.127]        // -> [__ap <= 0x00000004]
[19:30:51.127]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:30:51.127]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:30:51.127]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:30:51.128]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:30:51.129]    </block>
[19:30:51.129]    <block atomic="false" info="">
[19:30:51.129]      __var nReset = 0x80;
[19:30:51.129]        // -> [nReset <= 0x00000080]
[19:30:51.129]      __var canReadPins = 0;
[19:30:51.129]        // -> [canReadPins <= 0x00000000]
[19:30:51.129]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:30:51.130]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:30:51.130]        // -> [canReadPins <= 0x00000001]
[19:30:51.130]    </block>
[19:30:51.130]    <control if="" while="1" timeout="200" info="">
[19:30:51.130]      // while "1"  (timeout="200")
[19:30:51.130]      // while-condition  =>  TRUE
[19:30:51.130]      // while "1"  (timeout="200")
[19:30:51.130]      // while-condition  =>  TRUE
[19:30:51.130]      // while "1"  (timeout="200")
[19:30:51.131]      // while-condition  =>  TRUE
[19:30:51.131]      // while "1"  (timeout="200")
[19:30:51.131]      // while-condition  =>  TRUE
[19:30:51.131]      // while "1"  (timeout="200")
[19:30:51.131]      // while-condition  =>  TRUE
[19:30:51.131]      // while "1"  (timeout="200")
[19:30:51.131]      // while-condition  =>  TRUE
[19:30:51.131]      // while "1"  (timeout="200")
[19:30:51.131]      // while-condition  =>  TRUE
[19:30:51.133]      // while "1"  (timeout="200")
[19:30:51.133]      // while-condition  =>  TRUE
[19:30:51.133]      // while "1"  (timeout="200")
[19:30:51.133]      // while-condition  =>  TRUE
[19:30:51.133]      // while "1"  (timeout="200")
[19:30:51.133]      // while-condition  =>  TRUE
[19:30:51.133]      // while "1"  (timeout="200")
[19:30:51.133]      // while-condition  =>  TRUE
[19:30:51.133]      // while "1"  (timeout="200")
[19:30:51.133]      // while-condition  =>  TRUE
[19:30:51.133]      // while "1"  (timeout="200")
[19:30:51.133]      // while-condition  =>  TRUE
[19:30:51.133]      // while "1"  (timeout="200")
[19:30:51.134]      // while-condition  =>  TRUE
[19:30:51.134]      // while "1"  (timeout="200")
[19:30:51.134]      // while-condition  =>  TRUE
[19:30:51.134]      // while "1"  (timeout="200")
[19:30:51.134]      // while-condition  =>  TRUE
[19:30:51.134]      // while "1"  (timeout="200")
[19:30:51.134]      // while-condition  =>  TRUE
[19:30:51.134]      // while "1"  (timeout="200")
[19:30:51.135]      // while-condition  =>  TRUE
[19:30:51.135]      // while "1"  (timeout="200")
[19:30:51.135]      // while-condition  =>  TRUE
[19:30:51.135]      // while "1"  (timeout="200")
[19:30:51.135]      // while-condition  =>  TRUE
[19:30:51.135]      // while "1"  (timeout="200")
[19:30:51.135]      // while-condition  =>  TRUE
[19:30:51.135]      // while "1"  (timeout="200")
[19:30:51.135]      // while-condition  =>  TRUE
[19:30:51.135]      // while "1"  (timeout="200")
[19:30:51.135]      // while-condition  =>  TRUE
[19:30:51.135]      // while "1"  (timeout="200")
[19:30:51.136]      // while-condition  =>  TRUE
[19:30:51.136]      // while "1"  (timeout="200")
[19:30:51.136]      // while-condition  =>  TRUE
[19:30:51.136]      // while "1"  (timeout="200")
[19:30:51.136]      // while-condition  =>  TRUE
[19:30:51.136]      // while "1"  (timeout="200")
[19:30:51.136]      // while-condition  =>  TRUE
[19:30:51.136]      // while "1"  (timeout="200")
[19:30:51.136]      // while-condition  =>  TRUE
[19:30:51.136]      // while "1"  (timeout="200")
[19:30:51.136]      // while-condition  =>  TRUE
[19:30:51.137]      // while "1"  (timeout="200")
[19:30:51.137]      // while-condition  =>  TRUE
[19:30:51.137]      // while "1"  (timeout="200")
[19:30:51.137]      // while-condition  =>  TRUE
[19:30:51.137]      // while "1"  (timeout="200")
[19:30:51.137]      // while-condition  =>  TRUE
[19:30:51.137]      // while "1"  (timeout="200")
[19:30:51.137]      // while-condition  =>  TRUE
[19:30:51.137]      // while "1"  (timeout="200")
[19:30:51.137]      // while-condition  =>  TRUE
[19:30:51.138]      // while "1"  (timeout="200")
[19:30:51.138]      // while-condition  =>  TRUE
[19:30:51.138]      // while "1"  (timeout="200")
[19:30:51.138]      // while-condition  =>  TRUE
[19:30:51.138]      // while "1"  (timeout="200")
[19:30:51.138]      // while-condition  =>  TRUE
[19:30:51.138]      // while "1"  (timeout="200")
[19:30:51.138]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.139]      // while-condition  =>  TRUE
[19:30:51.139]      // while "1"  (timeout="200")
[19:30:51.141]      // while-condition  =>  TRUE
[19:30:51.141]      // while "1"  (timeout="200")
[19:30:51.141]      // while-condition  =>  TRUE
[19:30:51.141]      // while "1"  (timeout="200")
[19:30:51.141]      // while-condition  =>  TRUE
[19:30:51.141]      // while "1"  (timeout="200")
[19:30:51.141]      // while-condition  =>  TRUE
[19:30:51.141]      // while "1"  (timeout="200")
[19:30:51.141]      // while-condition  =>  TRUE
[19:30:51.141]      // while "1"  (timeout="200")
[19:30:51.142]      // while-condition  =>  TRUE
[19:30:51.142]      // while "1"  (timeout="200")
[19:30:51.142]      // while-condition  =>  TRUE
[19:30:51.142]      // while "1"  (timeout="200")
[19:30:51.142]      // while-condition  =>  TRUE
[19:30:51.142]      // while "1"  (timeout="200")
[19:30:51.142]      // while-condition  =>  TRUE
[19:30:51.142]      // while "1"  (timeout="200")
[19:30:51.142]      // while-condition  =>  TRUE
[19:30:51.142]      // while "1"  (timeout="200")
[19:30:51.142]      // while-condition  =>  TRUE
[19:30:51.142]      // while "1"  (timeout="200")
[19:30:51.142]      // while-condition  =>  TRUE
[19:30:51.143]      // while "1"  (timeout="200")
[19:30:51.143]      // while-condition  =>  TRUE
[19:30:51.143]      // while "1"  (timeout="200")
[19:30:51.143]      // while-condition  =>  TRUE
[19:30:51.143]      // while "1"  (timeout="200")
[19:30:51.143]      // while-condition  =>  TRUE
[19:30:51.143]      // while "1"  (timeout="200")
[19:30:51.143]      // while-condition  =>  TRUE
[19:30:51.143]      // while "1"  (timeout="200")
[19:30:51.143]      // while-condition  =>  TRUE
[19:30:51.143]      // while "1"  (timeout="200")
[19:30:51.144]      // while-condition  =>  TRUE
[19:30:51.144]      // while "1"  (timeout="200")
[19:30:51.144]      // while-condition  =>  TRUE
[19:30:51.144]      // while "1"  (timeout="200")
[19:30:51.144]      // while-condition  =>  TRUE
[19:30:51.144]      // while "1"  (timeout="200")
[19:30:51.144]      // while-condition  =>  TRUE
[19:30:51.144]      // while "1"  (timeout="200")
[19:30:51.144]      // while-condition  =>  TRUE
[19:30:51.144]      // while "1"  (timeout="200")
[19:30:51.144]      // while-condition  =>  TRUE
[19:30:51.144]      // while "1"  (timeout="200")
[19:30:51.145]      // while-condition  =>  TRUE
[19:30:51.145]      // while "1"  (timeout="200")
[19:30:51.145]      // while  =>  TIMEOUT
[19:30:51.145]      // end while "1"
[19:30:51.145]    </control>
[19:30:51.145]    <control if="canReadPins" while="" timeout="0" info="">
[19:30:51.145]      // if-block "canReadPins"
[19:30:51.145]        // =>  TRUE
[19:30:51.146]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:30:51.146]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:30:51.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:30:51.147]        // while-condition  =>  FALSE
[19:30:51.147]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:30:51.147]      </control>
[19:30:51.148]      // end if-block "canReadPins"
[19:30:51.148]    </control>
[19:30:51.148]    <control if="!canReadPins" while="" timeout="0" info="">
[19:30:51.148]      // if-block "!canReadPins"
[19:30:51.148]        // =>  FALSE
[19:30:51.148]      // skip if-block "!canReadPins"
[19:30:51.148]    </control>
[19:30:51.148]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:30:51.148]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:30:51.148]        // =>  TRUE
[19:30:51.148]      <block atomic="false" info="">
[19:30:51.148]        WriteAP(0x00, 0x190008);
[19:30:51.149]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:30:51.149]        WriteAP(0xF0, 0x01);
[19:30:51.151]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:30:51.151]      </block>
[19:30:51.151]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:30:51.151]    </control>
[19:30:51.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:30:51.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:30:51.151]        // =>  FALSE
[19:30:51.151]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:30:51.151]    </control>
[19:30:51.152]    <block atomic="false" info="">
[19:30:51.152]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:30:51.153]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:30:51.153]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:30:51.153]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:30:51.155]      __ap = 0; //lets make sure we reset the access point selection
[19:30:51.155]        // -> [__ap <= 0x00000000]
[19:30:51.155]    </block>
[19:30:51.155]  </sequence>
[19:30:51.155]  
[19:30:51.161]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:30:51.161]  
[19:30:51.161]  <debugvars>
[19:30:51.162]    // Pre-defined
[19:30:51.162]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:30:51.162]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:30:51.162]    __dp=0x00000000
[19:30:51.162]    __ap=0x00000000
[19:30:51.162]    __traceout=0x00000000      (Trace Disabled)
[19:30:51.162]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:30:51.162]    __FlashAddr=0x00000000
[19:30:51.162]    __FlashLen=0x00000000
[19:30:51.162]    __FlashArg=0x00000000
[19:30:51.162]    __FlashOp=0x00000000
[19:30:51.162]    __Result=0x00000000
[19:30:51.162]  </debugvars>
[19:30:51.162]  
[19:30:51.162]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:30:51.162]    <block atomic="false" info="">
[19:30:51.164]      __var deviceID = 0;
[19:30:51.164]        // -> [deviceID <= 0x00000000]
[19:30:51.164]      __var version = 0;
[19:30:51.164]        // -> [version <= 0x00000000]
[19:30:51.164]      __var partNum = 0;
[19:30:51.164]        // -> [partNum <= 0x00000000]
[19:30:51.164]      __var manuf = 0;
[19:30:51.164]        // -> [manuf <= 0x00000000]
[19:30:51.164]      __var isMSPM0G1X0X_G3X0X = 0;
[19:30:51.164]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:30:51.164]      __var isProduction = 0;
[19:30:51.165]        // -> [isProduction <= 0x00000000]
[19:30:51.165]      __var continueId = 0;
[19:30:51.165]        // -> [continueId <= 0x00000000]
[19:30:51.165]      deviceID =   Read32(0x41C40004);
[19:30:51.167]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:30:51.167]        // -> [deviceID <= 0x2BB8802F]
[19:30:51.167]      version = deviceID >> 28;
[19:30:51.167]        // -> [version <= 0x00000002]
[19:30:51.167]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:30:51.167]        // -> [partNum <= 0x0000BB88]
[19:30:51.167]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:30:51.167]        // -> [manuf <= 0x00000017]
[19:30:51.167]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:30:51.168]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:30:51.168]      isProduction = (version > 0);
[19:30:51.168]        // -> [isProduction <= 0x00000001]
[19:30:51.168]    </block>
[19:30:51.168]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:30:51.169]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:30:51.169]        // =>  FALSE
[19:30:51.169]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:30:51.169]    </control>
[19:30:51.169]    <control if="continueId == 4" while="" timeout="0" info="">
[19:30:51.169]      // if-block "continueId == 4"
[19:30:51.169]        // =>  FALSE
[19:30:51.169]      // skip if-block "continueId == 4"
[19:30:51.169]    </control>
[19:30:51.169]    <control if="!isProduction" while="" timeout="0" info="">
[19:30:51.169]      // if-block "!isProduction"
[19:30:51.169]        // =>  FALSE
[19:30:51.169]      // skip if-block "!isProduction"
[19:30:51.169]    </control>
[19:30:51.169]  </sequence>
[19:30:51.169]  
[19:31:35.843]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:31:35.843]  
[19:31:35.851]  <debugvars>
[19:31:35.851]    // Pre-defined
[19:31:35.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:31:35.851]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:31:35.851]    __dp=0x00000000
[19:31:35.851]    __ap=0x00000000
[19:31:35.851]    __traceout=0x00000000      (Trace Disabled)
[19:31:35.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:31:35.851]    __FlashAddr=0x00000000
[19:31:35.852]    __FlashLen=0x00000000
[19:31:35.852]    __FlashArg=0x00000000
[19:31:35.852]    __FlashOp=0x00000000
[19:31:35.853]    __Result=0x00000000
[19:31:35.853]  </debugvars>
[19:31:35.853]  
[19:31:35.853]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:31:35.853]    <block atomic="false" info="">
[19:31:35.853]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:31:35.854]        // -> [isSWJ <= 0x00000001]
[19:31:35.854]      __var hasDormant = __protocol & 0x00020000;
[19:31:35.854]        // -> [hasDormant <= 0x00000000]
[19:31:35.854]      __var protType   = __protocol & 0x0000FFFF;
[19:31:35.854]        // -> [protType <= 0x00000002]
[19:31:35.854]    </block>
[19:31:35.855]    <control if="protType == 1" while="" timeout="0" info="">
[19:31:35.855]      // if-block "protType == 1"
[19:31:35.855]        // =>  FALSE
[19:31:35.855]      // skip if-block "protType == 1"
[19:31:35.855]    </control>
[19:31:35.855]    <control if="protType == 2" while="" timeout="0" info="">
[19:31:35.855]      // if-block "protType == 2"
[19:31:35.855]        // =>  TRUE
[19:31:35.855]      <control if="isSWJ" while="" timeout="0" info="">
[19:31:35.855]        // if-block "isSWJ"
[19:31:35.855]          // =>  TRUE
[19:31:35.855]        <control if="hasDormant" while="" timeout="0" info="">
[19:31:35.855]          // if-block "hasDormant"
[19:31:35.856]            // =>  FALSE
[19:31:35.856]          // skip if-block "hasDormant"
[19:31:35.856]        </control>
[19:31:35.856]        <control if="!hasDormant" while="" timeout="0" info="">
[19:31:35.856]          // if-block "!hasDormant"
[19:31:35.856]            // =>  TRUE
[19:31:35.856]          <block atomic="false" info="">
[19:31:35.856]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:31:35.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:31:35.857]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:31:35.857]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:31:35.857]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:31:35.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:31:35.857]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:31:35.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:31:35.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:31:35.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:31:35.858]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:31:35.858]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:31:35.858]          </block>
[19:31:35.858]          // end if-block "!hasDormant"
[19:31:35.858]        </control>
[19:31:35.858]        // end if-block "isSWJ"
[19:31:35.859]      </control>
[19:31:35.859]      <control if="!isSWJ" while="" timeout="0" info="">
[19:31:35.859]        // if-block "!isSWJ"
[19:31:35.859]          // =>  FALSE
[19:31:35.859]        // skip if-block "!isSWJ"
[19:31:35.859]      </control>
[19:31:35.859]      <block atomic="false" info="">
[19:31:35.859]        ReadDP(0x0);
[19:31:35.861]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:31:35.861]      </block>
[19:31:35.861]      // end if-block "protType == 2"
[19:31:35.861]    </control>
[19:31:35.861]  </sequence>
[19:31:35.861]  
[19:31:35.862]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:31:35.862]  
[19:31:35.862]  <debugvars>
[19:31:35.862]    // Pre-defined
[19:31:35.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:31:35.862]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:31:35.862]    __dp=0x00000000
[19:31:35.862]    __ap=0x00000000
[19:31:35.862]    __traceout=0x00000000      (Trace Disabled)
[19:31:35.862]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:31:35.862]    __FlashAddr=0x00000000
[19:31:35.863]    __FlashLen=0x00000000
[19:31:35.863]    __FlashArg=0x00000000
[19:31:35.863]    __FlashOp=0x00000000
[19:31:35.863]    __Result=0x00000000
[19:31:35.863]  </debugvars>
[19:31:35.863]  
[19:31:35.863]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:31:35.863]    <block atomic="false" info="">
[19:31:35.864]      __var SW_DP_ABORT       = 0x0;
[19:31:35.864]        // -> [SW_DP_ABORT <= 0x00000000]
[19:31:35.864]      __var DP_CTRL_STAT      = 0x4;
[19:31:35.864]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:31:35.864]      __var DP_SELECT         = 0x8;
[19:31:35.864]        // -> [DP_SELECT <= 0x00000008]
[19:31:35.864]      __var powered_down      = 0;
[19:31:35.864]        // -> [powered_down <= 0x00000000]
[19:31:35.864]      WriteDP(DP_SELECT, 0x00000000);
[19:31:35.864]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:31:35.865]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:31:35.865]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:31:35.865]        // -> [powered_down <= 0x00000001]
[19:31:35.865]    </block>
[19:31:35.865]    <control if="powered_down" while="" timeout="0" info="">
[19:31:35.865]      // if-block "powered_down"
[19:31:35.865]        // =>  TRUE
[19:31:35.866]      <block atomic="false" info="">
[19:31:35.866]        Message(0, "Debug/System power-up request sent");
[19:31:35.868]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:31:35.868]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:31:35.868]      </block>
[19:31:35.868]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:31:35.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:31:35.869]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:31:35.869]        // while-condition  =>  FALSE
[19:31:35.869]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:31:35.869]      </control>
[19:31:35.869]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:31:35.869]        // if-block "(__protocol & 0xFFFF) == 1"
[19:31:35.869]          // =>  FALSE
[19:31:35.869]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:31:35.869]      </control>
[19:31:35.869]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:31:35.869]        // if-block "(__protocol & 0xFFFF) == 2"
[19:31:35.869]          // =>  TRUE
[19:31:35.869]        <block atomic="false" info="">
[19:31:35.870]          Message(0, "executing SWD power up");
[19:31:35.871]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:31:35.872]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:31:35.873]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:31:35.873]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:31:35.873]        </block>
[19:31:35.873]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:31:35.873]      </control>
[19:31:35.873]      // end if-block "powered_down"
[19:31:35.873]    </control>
[19:31:35.874]    <block atomic="false" info="">
[19:31:35.874]      __var DEBUG_PORT_VAL    = 0;
[19:31:35.874]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:31:35.874]      __var ACCESS_POINT_VAL  = 0;
[19:31:35.874]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:31:35.874]      __ap = 1; 
[19:31:35.874]        // -> [__ap <= 0x00000001]
[19:31:35.874]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:31:35.875]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:31:35.875]      __ap = 4;
[19:31:35.876]        // -> [__ap <= 0x00000004]
[19:31:35.876]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:31:35.877]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:31:35.878]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:31:35.878]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:31:35.879]    </block>
[19:31:35.879]    <block atomic="false" info="">
[19:31:35.879]      __var nReset = 0x80;
[19:31:35.879]        // -> [nReset <= 0x00000080]
[19:31:35.879]      __var canReadPins = 0;
[19:31:35.879]        // -> [canReadPins <= 0x00000000]
[19:31:35.879]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:31:35.880]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:31:35.880]        // -> [canReadPins <= 0x00000001]
[19:31:35.880]    </block>
[19:31:35.880]    <control if="" while="1" timeout="200" info="">
[19:31:35.880]      // while "1"  (timeout="200")
[19:31:35.880]      // while-condition  =>  TRUE
[19:31:35.880]      // while "1"  (timeout="200")
[19:31:35.880]      // while-condition  =>  TRUE
[19:31:35.880]      // while "1"  (timeout="200")
[19:31:35.880]      // while-condition  =>  TRUE
[19:31:35.880]      // while "1"  (timeout="200")
[19:31:35.881]      // while-condition  =>  TRUE
[19:31:35.881]      // while "1"  (timeout="200")
[19:31:35.881]      // while-condition  =>  TRUE
[19:31:35.881]      // while "1"  (timeout="200")
[19:31:35.881]      // while-condition  =>  TRUE
[19:31:35.881]      // while "1"  (timeout="200")
[19:31:35.881]      // while-condition  =>  TRUE
[19:31:35.881]      // while "1"  (timeout="200")
[19:31:35.881]      // while-condition  =>  TRUE
[19:31:35.881]      // while "1"  (timeout="200")
[19:31:35.881]      // while-condition  =>  TRUE
[19:31:35.883]      // while "1"  (timeout="200")
[19:31:35.883]      // while-condition  =>  TRUE
[19:31:35.883]      // while "1"  (timeout="200")
[19:31:35.883]      // while-condition  =>  TRUE
[19:31:35.883]      // while "1"  (timeout="200")
[19:31:35.883]      // while-condition  =>  TRUE
[19:31:35.883]      // while "1"  (timeout="200")
[19:31:35.883]      // while-condition  =>  TRUE
[19:31:35.883]      // while "1"  (timeout="200")
[19:31:35.883]      // while-condition  =>  TRUE
[19:31:35.883]      // while "1"  (timeout="200")
[19:31:35.884]      // while-condition  =>  TRUE
[19:31:35.884]      // while "1"  (timeout="200")
[19:31:35.884]      // while-condition  =>  TRUE
[19:31:35.884]      // while "1"  (timeout="200")
[19:31:35.884]      // while-condition  =>  TRUE
[19:31:35.884]      // while "1"  (timeout="200")
[19:31:35.884]      // while-condition  =>  TRUE
[19:31:35.884]      // while "1"  (timeout="200")
[19:31:35.884]      // while-condition  =>  TRUE
[19:31:35.885]      // while "1"  (timeout="200")
[19:31:35.885]      // while-condition  =>  TRUE
[19:31:35.885]      // while "1"  (timeout="200")
[19:31:35.885]      // while-condition  =>  TRUE
[19:31:35.885]      // while "1"  (timeout="200")
[19:31:35.885]      // while-condition  =>  TRUE
[19:31:35.885]      // while "1"  (timeout="200")
[19:31:35.885]      // while-condition  =>  TRUE
[19:31:35.885]      // while "1"  (timeout="200")
[19:31:35.886]      // while-condition  =>  TRUE
[19:31:35.886]      // while "1"  (timeout="200")
[19:31:35.886]      // while-condition  =>  TRUE
[19:31:35.886]      // while "1"  (timeout="200")
[19:31:35.886]      // while-condition  =>  TRUE
[19:31:35.886]      // while "1"  (timeout="200")
[19:31:35.886]      // while-condition  =>  TRUE
[19:31:35.886]      // while "1"  (timeout="200")
[19:31:35.886]      // while-condition  =>  TRUE
[19:31:35.886]      // while "1"  (timeout="200")
[19:31:35.886]      // while-condition  =>  TRUE
[19:31:35.886]      // while "1"  (timeout="200")
[19:31:35.886]      // while-condition  =>  TRUE
[19:31:35.887]      // while "1"  (timeout="200")
[19:31:35.887]      // while-condition  =>  TRUE
[19:31:35.887]      // while "1"  (timeout="200")
[19:31:35.887]      // while-condition  =>  TRUE
[19:31:35.887]      // while "1"  (timeout="200")
[19:31:35.887]      // while-condition  =>  TRUE
[19:31:35.887]      // while "1"  (timeout="200")
[19:31:35.888]      // while-condition  =>  TRUE
[19:31:35.888]      // while "1"  (timeout="200")
[19:31:35.888]      // while-condition  =>  TRUE
[19:31:35.888]      // while "1"  (timeout="200")
[19:31:35.888]      // while-condition  =>  TRUE
[19:31:35.888]      // while "1"  (timeout="200")
[19:31:35.888]      // while-condition  =>  TRUE
[19:31:35.888]      // while "1"  (timeout="200")
[19:31:35.888]      // while-condition  =>  TRUE
[19:31:35.888]      // while "1"  (timeout="200")
[19:31:35.888]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.889]      // while "1"  (timeout="200")
[19:31:35.889]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.891]      // while "1"  (timeout="200")
[19:31:35.891]      // while-condition  =>  TRUE
[19:31:35.893]      // while "1"  (timeout="200")
[19:31:35.893]      // while-condition  =>  TRUE
[19:31:35.893]      // while "1"  (timeout="200")
[19:31:35.893]      // while-condition  =>  TRUE
[19:31:35.893]      // while "1"  (timeout="200")
[19:31:35.893]      // while-condition  =>  TRUE
[19:31:35.893]      // while "1"  (timeout="200")
[19:31:35.893]      // while-condition  =>  TRUE
[19:31:35.893]      // while "1"  (timeout="200")
[19:31:35.894]      // while-condition  =>  TRUE
[19:31:35.894]      // while "1"  (timeout="200")
[19:31:35.894]      // while-condition  =>  TRUE
[19:31:35.894]      // while "1"  (timeout="200")
[19:31:35.894]      // while-condition  =>  TRUE
[19:31:35.894]      // while "1"  (timeout="200")
[19:31:35.894]      // while-condition  =>  TRUE
[19:31:35.894]      // while "1"  (timeout="200")
[19:31:35.894]      // while-condition  =>  TRUE
[19:31:35.894]      // while "1"  (timeout="200")
[19:31:35.894]      // while-condition  =>  TRUE
[19:31:35.894]      // while "1"  (timeout="200")
[19:31:35.895]      // while-condition  =>  TRUE
[19:31:35.895]      // while "1"  (timeout="200")
[19:31:35.895]      // while  =>  TIMEOUT
[19:31:35.895]      // end while "1"
[19:31:35.895]    </control>
[19:31:35.895]    <control if="canReadPins" while="" timeout="0" info="">
[19:31:35.895]      // if-block "canReadPins"
[19:31:35.895]        // =>  TRUE
[19:31:35.895]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:31:35.895]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:31:35.896]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:31:35.896]        // while-condition  =>  FALSE
[19:31:35.896]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:31:35.896]      </control>
[19:31:35.896]      // end if-block "canReadPins"
[19:31:35.896]    </control>
[19:31:35.896]    <control if="!canReadPins" while="" timeout="0" info="">
[19:31:35.896]      // if-block "!canReadPins"
[19:31:35.896]        // =>  FALSE
[19:31:35.897]      // skip if-block "!canReadPins"
[19:31:35.897]    </control>
[19:31:35.897]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:31:35.897]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:31:35.897]        // =>  TRUE
[19:31:35.897]      <block atomic="false" info="">
[19:31:35.897]        WriteAP(0x00, 0x190008);
[19:31:35.898]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:31:35.898]        WriteAP(0xF0, 0x01);
[19:31:35.899]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:31:35.899]      </block>
[19:31:35.899]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:31:35.899]    </control>
[19:31:35.899]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:31:35.899]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:31:35.899]        // =>  FALSE
[19:31:35.899]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:31:35.900]    </control>
[19:31:35.900]    <block atomic="false" info="">
[19:31:35.900]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:31:35.902]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:31:35.902]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:31:35.902]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:31:35.903]      __ap = 0; //lets make sure we reset the access point selection
[19:31:35.903]        // -> [__ap <= 0x00000000]
[19:31:35.903]    </block>
[19:31:35.904]  </sequence>
[19:31:35.904]  
[19:31:35.909]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:31:35.909]  
[19:31:35.909]  <debugvars>
[19:31:35.909]    // Pre-defined
[19:31:35.911]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:31:35.911]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:31:35.911]    __dp=0x00000000
[19:31:35.911]    __ap=0x00000000
[19:31:35.911]    __traceout=0x00000000      (Trace Disabled)
[19:31:35.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:31:35.911]    __FlashAddr=0x00000000
[19:31:35.911]    __FlashLen=0x00000000
[19:31:35.911]    __FlashArg=0x00000000
[19:31:35.912]    __FlashOp=0x00000000
[19:31:35.912]    __Result=0x00000000
[19:31:35.912]  </debugvars>
[19:31:35.912]  
[19:31:35.912]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:31:35.912]    <block atomic="false" info="">
[19:31:35.912]      __var deviceID = 0;
[19:31:35.912]        // -> [deviceID <= 0x00000000]
[19:31:35.912]      __var version = 0;
[19:31:35.912]        // -> [version <= 0x00000000]
[19:31:35.912]      __var partNum = 0;
[19:31:35.912]        // -> [partNum <= 0x00000000]
[19:31:35.912]      __var manuf = 0;
[19:31:35.912]        // -> [manuf <= 0x00000000]
[19:31:35.912]      __var isMSPM0G1X0X_G3X0X = 0;
[19:31:35.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:31:35.912]      __var isProduction = 0;
[19:31:35.912]        // -> [isProduction <= 0x00000000]
[19:31:35.912]      __var continueId = 0;
[19:31:35.912]        // -> [continueId <= 0x00000000]
[19:31:35.913]      deviceID =   Read32(0x41C40004);
[19:31:35.915]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:31:35.915]        // -> [deviceID <= 0x2BB8802F]
[19:31:35.915]      version = deviceID >> 28;
[19:31:35.915]        // -> [version <= 0x00000002]
[19:31:35.915]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:31:35.915]        // -> [partNum <= 0x0000BB88]
[19:31:35.915]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:31:35.915]        // -> [manuf <= 0x00000017]
[19:31:35.916]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:31:35.916]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:31:35.916]      isProduction = (version > 0);
[19:31:35.916]        // -> [isProduction <= 0x00000001]
[19:31:35.916]    </block>
[19:31:35.916]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:31:35.916]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:31:35.916]        // =>  FALSE
[19:31:35.916]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:31:35.916]    </control>
[19:31:35.916]    <control if="continueId == 4" while="" timeout="0" info="">
[19:31:35.916]      // if-block "continueId == 4"
[19:31:35.916]        // =>  FALSE
[19:31:35.916]      // skip if-block "continueId == 4"
[19:31:35.917]    </control>
[19:31:35.917]    <control if="!isProduction" while="" timeout="0" info="">
[19:31:35.917]      // if-block "!isProduction"
[19:31:35.917]        // =>  FALSE
[19:31:35.917]      // skip if-block "!isProduction"
[19:31:35.917]    </control>
[19:31:35.917]  </sequence>
[19:31:35.917]  
[19:31:39.051]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:31:39.051]  
[19:31:39.060]  <debugvars>
[19:31:39.060]    // Pre-defined
[19:31:39.060]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:31:39.060]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:31:39.060]    __dp=0x00000000
[19:31:39.060]    __ap=0x00000000
[19:31:39.060]    __traceout=0x00000000      (Trace Disabled)
[19:31:39.060]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:31:39.060]    __FlashAddr=0x00000000
[19:31:39.060]    __FlashLen=0x00000000
[19:31:39.061]    __FlashArg=0x00000000
[19:31:39.062]    __FlashOp=0x00000000
[19:31:39.062]    __Result=0x00000000
[19:31:39.062]  </debugvars>
[19:31:39.062]  
[19:31:39.062]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:31:39.062]    <block atomic="false" info="">
[19:31:39.062]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:31:39.062]        // -> [isSWJ <= 0x00000001]
[19:31:39.062]      __var hasDormant = __protocol & 0x00020000;
[19:31:39.062]        // -> [hasDormant <= 0x00000000]
[19:31:39.062]      __var protType   = __protocol & 0x0000FFFF;
[19:31:39.062]        // -> [protType <= 0x00000002]
[19:31:39.062]    </block>
[19:31:39.062]    <control if="protType == 1" while="" timeout="0" info="">
[19:31:39.062]      // if-block "protType == 1"
[19:31:39.062]        // =>  FALSE
[19:31:39.062]      // skip if-block "protType == 1"
[19:31:39.062]    </control>
[19:31:39.063]    <control if="protType == 2" while="" timeout="0" info="">
[19:31:39.063]      // if-block "protType == 2"
[19:31:39.063]        // =>  TRUE
[19:31:39.063]      <control if="isSWJ" while="" timeout="0" info="">
[19:31:39.063]        // if-block "isSWJ"
[19:31:39.063]          // =>  TRUE
[19:31:39.063]        <control if="hasDormant" while="" timeout="0" info="">
[19:31:39.063]          // if-block "hasDormant"
[19:31:39.063]            // =>  FALSE
[19:31:39.063]          // skip if-block "hasDormant"
[19:31:39.063]        </control>
[19:31:39.065]        <control if="!hasDormant" while="" timeout="0" info="">
[19:31:39.065]          // if-block "!hasDormant"
[19:31:39.066]            // =>  TRUE
[19:31:39.066]          <block atomic="false" info="">
[19:31:39.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:31:39.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:31:39.066]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:31:39.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:31:39.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:31:39.067]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:31:39.067]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:31:39.067]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:31:39.068]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:31:39.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:31:39.068]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:31:39.068]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:31:39.069]          </block>
[19:31:39.069]          // end if-block "!hasDormant"
[19:31:39.069]        </control>
[19:31:39.069]        // end if-block "isSWJ"
[19:31:39.069]      </control>
[19:31:39.069]      <control if="!isSWJ" while="" timeout="0" info="">
[19:31:39.069]        // if-block "!isSWJ"
[19:31:39.069]          // =>  FALSE
[19:31:39.069]        // skip if-block "!isSWJ"
[19:31:39.069]      </control>
[19:31:39.069]      <block atomic="false" info="">
[19:31:39.069]        ReadDP(0x0);
[19:31:39.070]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:31:39.070]      </block>
[19:31:39.070]      // end if-block "protType == 2"
[19:31:39.070]    </control>
[19:31:39.070]  </sequence>
[19:31:39.070]  
[19:31:39.071]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:31:39.071]  
[19:31:39.072]  <debugvars>
[19:31:39.072]    // Pre-defined
[19:31:39.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:31:39.072]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:31:39.072]    __dp=0x00000000
[19:31:39.072]    __ap=0x00000000
[19:31:39.072]    __traceout=0x00000000      (Trace Disabled)
[19:31:39.072]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:31:39.072]    __FlashAddr=0x00000000
[19:31:39.072]    __FlashLen=0x00000000
[19:31:39.072]    __FlashArg=0x00000000
[19:31:39.072]    __FlashOp=0x00000000
[19:31:39.072]    __Result=0x00000000
[19:31:39.072]  </debugvars>
[19:31:39.073]  
[19:31:39.073]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:31:39.073]    <block atomic="false" info="">
[19:31:39.073]      __var SW_DP_ABORT       = 0x0;
[19:31:39.073]        // -> [SW_DP_ABORT <= 0x00000000]
[19:31:39.073]      __var DP_CTRL_STAT      = 0x4;
[19:31:39.073]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:31:39.073]      __var DP_SELECT         = 0x8;
[19:31:39.073]        // -> [DP_SELECT <= 0x00000008]
[19:31:39.075]      __var powered_down      = 0;
[19:31:39.075]        // -> [powered_down <= 0x00000000]
[19:31:39.075]      WriteDP(DP_SELECT, 0x00000000);
[19:31:39.076]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:31:39.076]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:31:39.076]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:31:39.076]        // -> [powered_down <= 0x00000001]
[19:31:39.076]    </block>
[19:31:39.076]    <control if="powered_down" while="" timeout="0" info="">
[19:31:39.076]      // if-block "powered_down"
[19:31:39.076]        // =>  TRUE
[19:31:39.077]      <block atomic="false" info="">
[19:31:39.077]        Message(0, "Debug/System power-up request sent");
[19:31:39.078]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:31:39.080]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:31:39.080]      </block>
[19:31:39.080]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:31:39.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:31:39.080]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:31:39.081]        // while-condition  =>  FALSE
[19:31:39.081]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:31:39.081]      </control>
[19:31:39.081]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:31:39.081]        // if-block "(__protocol & 0xFFFF) == 1"
[19:31:39.081]          // =>  FALSE
[19:31:39.081]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:31:39.081]      </control>
[19:31:39.082]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:31:39.082]        // if-block "(__protocol & 0xFFFF) == 2"
[19:31:39.082]          // =>  TRUE
[19:31:39.082]        <block atomic="false" info="">
[19:31:39.082]          Message(0, "executing SWD power up");
[19:31:39.084]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:31:39.084]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:31:39.084]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:31:39.085]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:31:39.085]        </block>
[19:31:39.085]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:31:39.086]      </control>
[19:31:39.086]      // end if-block "powered_down"
[19:31:39.086]    </control>
[19:31:39.086]    <block atomic="false" info="">
[19:31:39.086]      __var DEBUG_PORT_VAL    = 0;
[19:31:39.086]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:31:39.087]      __var ACCESS_POINT_VAL  = 0;
[19:31:39.087]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:31:39.087]      __ap = 1; 
[19:31:39.087]        // -> [__ap <= 0x00000001]
[19:31:39.087]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:31:39.088]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:31:39.088]      __ap = 4;
[19:31:39.088]        // -> [__ap <= 0x00000004]
[19:31:39.088]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:31:39.089]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:31:39.089]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:31:39.089]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:31:39.091]    </block>
[19:31:39.091]    <block atomic="false" info="">
[19:31:39.091]      __var nReset = 0x80;
[19:31:39.091]        // -> [nReset <= 0x00000080]
[19:31:39.091]      __var canReadPins = 0;
[19:31:39.091]        // -> [canReadPins <= 0x00000000]
[19:31:39.091]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:31:39.093]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:31:39.093]        // -> [canReadPins <= 0x00000001]
[19:31:39.093]    </block>
[19:31:39.093]    <control if="" while="1" timeout="200" info="">
[19:31:39.093]      // while "1"  (timeout="200")
[19:31:39.093]      // while-condition  =>  TRUE
[19:31:39.093]      // while "1"  (timeout="200")
[19:31:39.093]      // while-condition  =>  TRUE
[19:31:39.093]      // while "1"  (timeout="200")
[19:31:39.093]      // while-condition  =>  TRUE
[19:31:39.093]      // while "1"  (timeout="200")
[19:31:39.093]      // while-condition  =>  TRUE
[19:31:39.093]      // while "1"  (timeout="200")
[19:31:39.094]      // while-condition  =>  TRUE
[19:31:39.094]      // while "1"  (timeout="200")
[19:31:39.094]      // while-condition  =>  TRUE
[19:31:39.094]      // while "1"  (timeout="200")
[19:31:39.094]      // while-condition  =>  TRUE
[19:31:39.094]      // while "1"  (timeout="200")
[19:31:39.094]      // while-condition  =>  TRUE
[19:31:39.094]      // while "1"  (timeout="200")
[19:31:39.094]      // while-condition  =>  TRUE
[19:31:39.094]      // while "1"  (timeout="200")
[19:31:39.094]      // while-condition  =>  TRUE
[19:31:39.095]      // while "1"  (timeout="200")
[19:31:39.095]      // while-condition  =>  TRUE
[19:31:39.095]      // while "1"  (timeout="200")
[19:31:39.095]      // while-condition  =>  TRUE
[19:31:39.095]      // while "1"  (timeout="200")
[19:31:39.095]      // while-condition  =>  TRUE
[19:31:39.095]      // while "1"  (timeout="200")
[19:31:39.095]      // while-condition  =>  TRUE
[19:31:39.095]      // while "1"  (timeout="200")
[19:31:39.095]      // while-condition  =>  TRUE
[19:31:39.096]      // while "1"  (timeout="200")
[19:31:39.096]      // while-condition  =>  TRUE
[19:31:39.096]      // while "1"  (timeout="200")
[19:31:39.096]      // while-condition  =>  TRUE
[19:31:39.096]      // while "1"  (timeout="200")
[19:31:39.096]      // while-condition  =>  TRUE
[19:31:39.097]      // while "1"  (timeout="200")
[19:31:39.097]      // while-condition  =>  TRUE
[19:31:39.097]      // while "1"  (timeout="200")
[19:31:39.097]      // while-condition  =>  TRUE
[19:31:39.097]      // while "1"  (timeout="200")
[19:31:39.097]      // while-condition  =>  TRUE
[19:31:39.097]      // while "1"  (timeout="200")
[19:31:39.097]      // while-condition  =>  TRUE
[19:31:39.097]      // while "1"  (timeout="200")
[19:31:39.097]      // while-condition  =>  TRUE
[19:31:39.098]      // while "1"  (timeout="200")
[19:31:39.098]      // while  =>  TIMEOUT
[19:31:39.098]      // end while "1"
[19:31:39.098]    </control>
[19:31:39.098]    <control if="canReadPins" while="" timeout="0" info="">
[19:31:39.098]      // if-block "canReadPins"
[19:31:39.098]        // =>  TRUE
[19:31:39.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:31:39.099]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:31:39.100]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:31:39.100]        // while-condition  =>  FALSE
[19:31:39.100]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:31:39.100]      </control>
[19:31:39.100]      // end if-block "canReadPins"
[19:31:39.100]    </control>
[19:31:39.100]    <control if="!canReadPins" while="" timeout="0" info="">
[19:31:39.100]      // if-block "!canReadPins"
[19:31:39.101]        // =>  FALSE
[19:31:39.101]      // skip if-block "!canReadPins"
[19:31:39.101]    </control>
[19:31:39.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:31:39.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:31:39.101]        // =>  TRUE
[19:31:39.101]      <block atomic="false" info="">
[19:31:39.101]        WriteAP(0x00, 0x190008);
[19:31:39.102]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:31:39.102]        WriteAP(0xF0, 0x01);
[19:31:39.103]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:31:39.103]      </block>
[19:31:39.103]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:31:39.103]    </control>
[19:31:39.103]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:31:39.104]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:31:39.104]        // =>  FALSE
[19:31:39.104]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:31:39.104]    </control>
[19:31:39.104]    <block atomic="false" info="">
[19:31:39.104]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:31:39.105]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:31:39.105]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:31:39.105]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:31:39.107]      __ap = 0; //lets make sure we reset the access point selection
[19:31:39.107]        // -> [__ap <= 0x00000000]
[19:31:39.107]    </block>
[19:31:39.107]  </sequence>
[19:31:39.107]  
[19:31:39.114]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:31:39.114]  
[19:31:39.114]  <debugvars>
[19:31:39.114]    // Pre-defined
[19:31:39.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:31:39.115]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:31:39.115]    __dp=0x00000000
[19:31:39.115]    __ap=0x00000000
[19:31:39.115]    __traceout=0x00000000      (Trace Disabled)
[19:31:39.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:31:39.115]    __FlashAddr=0x00000000
[19:31:39.115]    __FlashLen=0x00000000
[19:31:39.115]    __FlashArg=0x00000000
[19:31:39.115]    __FlashOp=0x00000000
[19:31:39.115]    __Result=0x00000000
[19:31:39.116]  </debugvars>
[19:31:39.116]  
[19:31:39.116]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:31:39.116]    <block atomic="false" info="">
[19:31:39.116]      __var deviceID = 0;
[19:31:39.116]        // -> [deviceID <= 0x00000000]
[19:31:39.116]      __var version = 0;
[19:31:39.116]        // -> [version <= 0x00000000]
[19:31:39.116]      __var partNum = 0;
[19:31:39.117]        // -> [partNum <= 0x00000000]
[19:31:39.117]      __var manuf = 0;
[19:31:39.117]        // -> [manuf <= 0x00000000]
[19:31:39.117]      __var isMSPM0G1X0X_G3X0X = 0;
[19:31:39.117]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:31:39.117]      __var isProduction = 0;
[19:31:39.117]        // -> [isProduction <= 0x00000000]
[19:31:39.117]      __var continueId = 0;
[19:31:39.117]        // -> [continueId <= 0x00000000]
[19:31:39.118]      deviceID =   Read32(0x41C40004);
[19:31:39.119]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:31:39.119]        // -> [deviceID <= 0x2BB8802F]
[19:31:39.119]      version = deviceID >> 28;
[19:31:39.119]        // -> [version <= 0x00000002]
[19:31:39.119]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:31:39.119]        // -> [partNum <= 0x0000BB88]
[19:31:39.119]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:31:39.121]        // -> [manuf <= 0x00000017]
[19:31:39.121]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:31:39.121]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:31:39.121]      isProduction = (version > 0);
[19:31:39.121]        // -> [isProduction <= 0x00000001]
[19:31:39.121]    </block>
[19:31:39.121]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:31:39.121]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:31:39.121]        // =>  FALSE
[19:31:39.121]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:31:39.121]    </control>
[19:31:39.121]    <control if="continueId == 4" while="" timeout="0" info="">
[19:31:39.121]      // if-block "continueId == 4"
[19:31:39.122]        // =>  FALSE
[19:31:39.122]      // skip if-block "continueId == 4"
[19:31:39.122]    </control>
[19:31:39.122]    <control if="!isProduction" while="" timeout="0" info="">
[19:31:39.122]      // if-block "!isProduction"
[19:31:39.122]        // =>  FALSE
[19:31:39.122]      // skip if-block "!isProduction"
[19:31:39.122]    </control>
[19:31:39.122]  </sequence>
[19:31:39.122]  
[19:32:50.347]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:32:50.347]  
[19:32:50.348]  <debugvars>
[19:32:50.348]    // Pre-defined
[19:32:50.348]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:32:50.348]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:32:50.348]    __dp=0x00000000
[19:32:50.348]    __ap=0x00000000
[19:32:50.348]    __traceout=0x00000000      (Trace Disabled)
[19:32:50.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:32:50.348]    __FlashAddr=0x00000000
[19:32:50.348]    __FlashLen=0x00000000
[19:32:50.348]    __FlashArg=0x00000000
[19:32:50.349]    __FlashOp=0x00000000
[19:32:50.349]    __Result=0x00000000
[19:32:50.349]  </debugvars>
[19:32:50.349]  
[19:32:50.349]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:32:50.349]    <block atomic="false" info="">
[19:32:50.349]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:32:50.349]        // -> [isSWJ <= 0x00000001]
[19:32:50.349]      __var hasDormant = __protocol & 0x00020000;
[19:32:50.349]        // -> [hasDormant <= 0x00000000]
[19:32:50.349]      __var protType   = __protocol & 0x0000FFFF;
[19:32:50.349]        // -> [protType <= 0x00000002]
[19:32:50.349]    </block>
[19:32:50.349]    <control if="protType == 1" while="" timeout="0" info="">
[19:32:50.349]      // if-block "protType == 1"
[19:32:50.351]        // =>  FALSE
[19:32:50.351]      // skip if-block "protType == 1"
[19:32:50.351]    </control>
[19:32:50.351]    <control if="protType == 2" while="" timeout="0" info="">
[19:32:50.351]      // if-block "protType == 2"
[19:32:50.351]        // =>  TRUE
[19:32:50.351]      <control if="isSWJ" while="" timeout="0" info="">
[19:32:50.351]        // if-block "isSWJ"
[19:32:50.351]          // =>  TRUE
[19:32:50.351]        <control if="hasDormant" while="" timeout="0" info="">
[19:32:50.352]          // if-block "hasDormant"
[19:32:50.352]            // =>  FALSE
[19:32:50.352]          // skip if-block "hasDormant"
[19:32:50.352]        </control>
[19:32:50.352]        <control if="!hasDormant" while="" timeout="0" info="">
[19:32:50.352]          // if-block "!hasDormant"
[19:32:50.352]            // =>  TRUE
[19:32:50.352]          <block atomic="false" info="">
[19:32:50.352]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:32:50.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:32:50.353]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:32:50.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:32:50.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:32:50.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:32:50.354]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:32:50.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:32:50.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:32:50.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:32:50.355]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:32:50.355]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:32:50.355]          </block>
[19:32:50.355]          // end if-block "!hasDormant"
[19:32:50.355]        </control>
[19:32:50.355]        // end if-block "isSWJ"
[19:32:50.355]      </control>
[19:32:50.355]      <control if="!isSWJ" while="" timeout="0" info="">
[19:32:50.355]        // if-block "!isSWJ"
[19:32:50.356]          // =>  FALSE
[19:32:50.356]        // skip if-block "!isSWJ"
[19:32:50.356]      </control>
[19:32:50.356]      <block atomic="false" info="">
[19:32:50.356]        ReadDP(0x0);
[19:32:50.356]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:32:50.356]      </block>
[19:32:50.357]      // end if-block "protType == 2"
[19:32:50.357]    </control>
[19:32:50.357]  </sequence>
[19:32:50.357]  
[19:32:50.357]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:32:50.357]  
[19:32:50.357]  <debugvars>
[19:32:50.358]    // Pre-defined
[19:32:50.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:32:50.358]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:32:50.358]    __dp=0x00000000
[19:32:50.358]    __ap=0x00000000
[19:32:50.358]    __traceout=0x00000000      (Trace Disabled)
[19:32:50.358]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:32:50.358]    __FlashAddr=0x00000000
[19:32:50.358]    __FlashLen=0x00000000
[19:32:50.358]    __FlashArg=0x00000000
[19:32:50.358]    __FlashOp=0x00000000
[19:32:50.359]    __Result=0x00000000
[19:32:50.359]  </debugvars>
[19:32:50.359]  
[19:32:50.359]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:32:50.359]    <block atomic="false" info="">
[19:32:50.359]      __var SW_DP_ABORT       = 0x0;
[19:32:50.359]        // -> [SW_DP_ABORT <= 0x00000000]
[19:32:50.359]      __var DP_CTRL_STAT      = 0x4;
[19:32:50.359]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:32:50.359]      __var DP_SELECT         = 0x8;
[19:32:50.359]        // -> [DP_SELECT <= 0x00000008]
[19:32:50.359]      __var powered_down      = 0;
[19:32:50.359]        // -> [powered_down <= 0x00000000]
[19:32:50.359]      WriteDP(DP_SELECT, 0x00000000);
[19:32:50.361]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:32:50.361]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:32:50.362]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:32:50.362]        // -> [powered_down <= 0x00000001]
[19:32:50.362]    </block>
[19:32:50.362]    <control if="powered_down" while="" timeout="0" info="">
[19:32:50.362]      // if-block "powered_down"
[19:32:50.363]        // =>  TRUE
[19:32:50.363]      <block atomic="false" info="">
[19:32:50.363]        Message(0, "Debug/System power-up request sent");
[19:32:50.364]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:32:50.365]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:32:50.365]      </block>
[19:32:50.365]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:32:50.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:32:50.365]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:32:50.365]        // while-condition  =>  FALSE
[19:32:50.366]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:32:50.366]      </control>
[19:32:50.366]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:32:50.366]        // if-block "(__protocol & 0xFFFF) == 1"
[19:32:50.366]          // =>  FALSE
[19:32:50.366]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:32:50.367]      </control>
[19:32:50.367]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:32:50.367]        // if-block "(__protocol & 0xFFFF) == 2"
[19:32:50.367]          // =>  TRUE
[19:32:50.367]        <block atomic="false" info="">
[19:32:50.367]          Message(0, "executing SWD power up");
[19:32:50.368]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:32:50.369]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:32:50.369]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:32:50.370]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:32:50.370]        </block>
[19:32:50.370]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:32:50.370]      </control>
[19:32:50.370]      // end if-block "powered_down"
[19:32:50.370]    </control>
[19:32:50.371]    <block atomic="false" info="">
[19:32:50.371]      __var DEBUG_PORT_VAL    = 0;
[19:32:50.371]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:32:50.371]      __var ACCESS_POINT_VAL  = 0;
[19:32:50.371]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:32:50.371]      __ap = 1; 
[19:32:50.372]        // -> [__ap <= 0x00000001]
[19:32:50.372]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:32:50.372]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:32:50.372]      __ap = 4;
[19:32:50.372]        // -> [__ap <= 0x00000004]
[19:32:50.372]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:32:50.374]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:32:50.374]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:32:50.374]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:32:50.377]    </block>
[19:32:50.377]    <block atomic="false" info="">
[19:32:50.377]      __var nReset = 0x80;
[19:32:50.377]        // -> [nReset <= 0x00000080]
[19:32:50.377]      __var canReadPins = 0;
[19:32:50.377]        // -> [canReadPins <= 0x00000000]
[19:32:50.377]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:32:50.377]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:32:50.378]        // -> [canReadPins <= 0x00000001]
[19:32:50.378]    </block>
[19:32:50.378]    <control if="" while="1" timeout="200" info="">
[19:32:50.378]      // while "1"  (timeout="200")
[19:32:50.378]      // while-condition  =>  TRUE
[19:32:50.378]      // while "1"  (timeout="200")
[19:32:50.378]      // while-condition  =>  TRUE
[19:32:50.379]      // while "1"  (timeout="200")
[19:32:50.379]      // while  =>  TIMEOUT
[19:32:50.379]      // end while "1"
[19:32:50.379]    </control>
[19:32:50.379]    <control if="canReadPins" while="" timeout="0" info="">
[19:32:50.379]      // if-block "canReadPins"
[19:32:50.379]        // =>  TRUE
[19:32:50.379]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:32:50.379]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:32:50.379]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:32:50.379]        // while-condition  =>  FALSE
[19:32:50.379]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:32:50.379]      </control>
[19:32:50.380]      // end if-block "canReadPins"
[19:32:50.380]    </control>
[19:32:50.380]    <control if="!canReadPins" while="" timeout="0" info="">
[19:32:50.380]      // if-block "!canReadPins"
[19:32:50.380]        // =>  FALSE
[19:32:50.380]      // skip if-block "!canReadPins"
[19:32:50.380]    </control>
[19:32:50.380]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:32:50.380]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:32:50.381]        // =>  TRUE
[19:32:50.381]      <block atomic="false" info="">
[19:32:50.381]        WriteAP(0x00, 0x190008);
[19:32:50.382]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:32:50.382]        WriteAP(0xF0, 0x01);
[19:32:50.384]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:32:50.384]      </block>
[19:32:50.384]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:32:50.384]    </control>
[19:32:50.384]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:32:50.384]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:32:50.384]        // =>  FALSE
[19:32:50.384]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:32:50.384]    </control>
[19:32:50.385]    <block atomic="false" info="">
[19:32:50.385]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:32:50.386]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:32:50.386]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:32:50.386]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:32:50.387]      __ap = 0; //lets make sure we reset the access point selection
[19:32:50.387]        // -> [__ap <= 0x00000000]
[19:32:50.388]    </block>
[19:32:50.388]  </sequence>
[19:32:50.388]  
[19:32:50.394]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:32:50.394]  
[19:32:50.394]  <debugvars>
[19:32:50.394]    // Pre-defined
[19:32:50.394]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:32:50.394]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:32:50.394]    __dp=0x00000000
[19:32:50.394]    __ap=0x00000000
[19:32:50.395]    __traceout=0x00000000      (Trace Disabled)
[19:32:50.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:32:50.395]    __FlashAddr=0x00000000
[19:32:50.395]    __FlashLen=0x00000000
[19:32:50.395]    __FlashArg=0x00000000
[19:32:50.395]    __FlashOp=0x00000000
[19:32:50.396]    __Result=0x00000000
[19:32:50.396]  </debugvars>
[19:32:50.396]  
[19:32:50.396]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:32:50.396]    <block atomic="false" info="">
[19:32:50.396]      __var deviceID = 0;
[19:32:50.396]        // -> [deviceID <= 0x00000000]
[19:32:50.396]      __var version = 0;
[19:32:50.396]        // -> [version <= 0x00000000]
[19:32:50.396]      __var partNum = 0;
[19:32:50.396]        // -> [partNum <= 0x00000000]
[19:32:50.396]      __var manuf = 0;
[19:32:50.396]        // -> [manuf <= 0x00000000]
[19:32:50.396]      __var isMSPM0G1X0X_G3X0X = 0;
[19:32:50.397]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:32:50.397]      __var isProduction = 0;
[19:32:50.397]        // -> [isProduction <= 0x00000000]
[19:32:50.397]      __var continueId = 0;
[19:32:50.397]        // -> [continueId <= 0x00000000]
[19:32:50.397]      deviceID =   Read32(0x41C40004);
[19:32:50.398]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:32:50.399]        // -> [deviceID <= 0x2BB8802F]
[19:32:50.399]      version = deviceID >> 28;
[19:32:50.399]        // -> [version <= 0x00000002]
[19:32:50.400]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:32:50.400]        // -> [partNum <= 0x0000BB88]
[19:32:50.400]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:32:50.400]        // -> [manuf <= 0x00000017]
[19:32:50.400]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:32:50.400]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:32:50.400]      isProduction = (version > 0);
[19:32:50.400]        // -> [isProduction <= 0x00000001]
[19:32:50.400]    </block>
[19:32:50.400]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:32:50.400]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:32:50.400]        // =>  FALSE
[19:32:50.400]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:32:50.400]    </control>
[19:32:50.400]    <control if="continueId == 4" while="" timeout="0" info="">
[19:32:50.400]      // if-block "continueId == 4"
[19:32:50.400]        // =>  FALSE
[19:32:50.401]      // skip if-block "continueId == 4"
[19:32:50.401]    </control>
[19:32:50.401]    <control if="!isProduction" while="" timeout="0" info="">
[19:32:50.401]      // if-block "!isProduction"
[19:32:50.401]        // =>  FALSE
[19:32:50.401]      // skip if-block "!isProduction"
[19:32:50.402]    </control>
[19:32:50.402]  </sequence>
[19:32:50.402]  
[19:33:07.873]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:33:07.873]  
[19:33:07.881]  <debugvars>
[19:33:07.881]    // Pre-defined
[19:33:07.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:07.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:07.881]    __dp=0x00000000
[19:33:07.881]    __ap=0x00000000
[19:33:07.881]    __traceout=0x00000000      (Trace Disabled)
[19:33:07.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:07.881]    __FlashAddr=0x00000000
[19:33:07.882]    __FlashLen=0x00000000
[19:33:07.882]    __FlashArg=0x00000000
[19:33:07.882]    __FlashOp=0x00000000
[19:33:07.882]    __Result=0x00000000
[19:33:07.882]  </debugvars>
[19:33:07.882]  
[19:33:07.882]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:33:07.882]    <block atomic="false" info="">
[19:33:07.882]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:33:07.882]        // -> [isSWJ <= 0x00000001]
[19:33:07.882]      __var hasDormant = __protocol & 0x00020000;
[19:33:07.882]        // -> [hasDormant <= 0x00000000]
[19:33:07.882]      __var protType   = __protocol & 0x0000FFFF;
[19:33:07.883]        // -> [protType <= 0x00000002]
[19:33:07.883]    </block>
[19:33:07.883]    <control if="protType == 1" while="" timeout="0" info="">
[19:33:07.883]      // if-block "protType == 1"
[19:33:07.883]        // =>  FALSE
[19:33:07.883]      // skip if-block "protType == 1"
[19:33:07.883]    </control>
[19:33:07.883]    <control if="protType == 2" while="" timeout="0" info="">
[19:33:07.883]      // if-block "protType == 2"
[19:33:07.883]        // =>  TRUE
[19:33:07.883]      <control if="isSWJ" while="" timeout="0" info="">
[19:33:07.883]        // if-block "isSWJ"
[19:33:07.884]          // =>  TRUE
[19:33:07.884]        <control if="hasDormant" while="" timeout="0" info="">
[19:33:07.884]          // if-block "hasDormant"
[19:33:07.884]            // =>  FALSE
[19:33:07.884]          // skip if-block "hasDormant"
[19:33:07.884]        </control>
[19:33:07.884]        <control if="!hasDormant" while="" timeout="0" info="">
[19:33:07.884]          // if-block "!hasDormant"
[19:33:07.884]            // =>  TRUE
[19:33:07.884]          <block atomic="false" info="">
[19:33:07.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:33:07.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:07.886]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:33:07.886]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:33:07.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:33:07.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:07.886]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:33:07.886]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:33:07.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:33:07.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:07.888]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:33:07.888]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:33:07.888]          </block>
[19:33:07.888]          // end if-block "!hasDormant"
[19:33:07.888]        </control>
[19:33:07.889]        // end if-block "isSWJ"
[19:33:07.889]      </control>
[19:33:07.889]      <control if="!isSWJ" while="" timeout="0" info="">
[19:33:07.889]        // if-block "!isSWJ"
[19:33:07.889]          // =>  FALSE
[19:33:07.889]        // skip if-block "!isSWJ"
[19:33:07.889]      </control>
[19:33:07.889]      <block atomic="false" info="">
[19:33:07.889]        ReadDP(0x0);
[19:33:07.889]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:33:07.889]      </block>
[19:33:07.889]      // end if-block "protType == 2"
[19:33:07.889]    </control>
[19:33:07.889]  </sequence>
[19:33:07.891]  
[19:33:07.891]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:33:07.891]  
[19:33:07.891]  <debugvars>
[19:33:07.891]    // Pre-defined
[19:33:07.891]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:07.891]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:07.892]    __dp=0x00000000
[19:33:07.892]    __ap=0x00000000
[19:33:07.892]    __traceout=0x00000000      (Trace Disabled)
[19:33:07.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:07.892]    __FlashAddr=0x00000000
[19:33:07.892]    __FlashLen=0x00000000
[19:33:07.892]    __FlashArg=0x00000000
[19:33:07.892]    __FlashOp=0x00000000
[19:33:07.893]    __Result=0x00000000
[19:33:07.893]  </debugvars>
[19:33:07.893]  
[19:33:07.893]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:33:07.893]    <block atomic="false" info="">
[19:33:07.893]      __var SW_DP_ABORT       = 0x0;
[19:33:07.893]        // -> [SW_DP_ABORT <= 0x00000000]
[19:33:07.893]      __var DP_CTRL_STAT      = 0x4;
[19:33:07.893]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:33:07.893]      __var DP_SELECT         = 0x8;
[19:33:07.893]        // -> [DP_SELECT <= 0x00000008]
[19:33:07.893]      __var powered_down      = 0;
[19:33:07.893]        // -> [powered_down <= 0x00000000]
[19:33:07.893]      WriteDP(DP_SELECT, 0x00000000);
[19:33:07.894]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:33:07.894]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:33:07.895]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:33:07.895]        // -> [powered_down <= 0x00000001]
[19:33:07.895]    </block>
[19:33:07.895]    <control if="powered_down" while="" timeout="0" info="">
[19:33:07.895]      // if-block "powered_down"
[19:33:07.895]        // =>  TRUE
[19:33:07.895]      <block atomic="false" info="">
[19:33:07.895]        Message(0, "Debug/System power-up request sent");
[19:33:07.897]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:33:07.897]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:33:07.897]      </block>
[19:33:07.897]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:33:07.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:33:07.898]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:33:07.898]        // while-condition  =>  FALSE
[19:33:07.898]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:33:07.899]      </control>
[19:33:07.899]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:33:07.899]        // if-block "(__protocol & 0xFFFF) == 1"
[19:33:07.899]          // =>  FALSE
[19:33:07.900]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:33:07.900]      </control>
[19:33:07.900]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:33:07.900]        // if-block "(__protocol & 0xFFFF) == 2"
[19:33:07.900]          // =>  TRUE
[19:33:07.900]        <block atomic="false" info="">
[19:33:07.900]          Message(0, "executing SWD power up");
[19:33:07.901]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:33:07.902]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:33:07.902]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:33:07.902]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:33:07.902]        </block>
[19:33:07.903]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:33:07.903]      </control>
[19:33:07.903]      // end if-block "powered_down"
[19:33:07.903]    </control>
[19:33:07.903]    <block atomic="false" info="">
[19:33:07.903]      __var DEBUG_PORT_VAL    = 0;
[19:33:07.903]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:33:07.903]      __var ACCESS_POINT_VAL  = 0;
[19:33:07.903]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:33:07.903]      __ap = 1; 
[19:33:07.903]        // -> [__ap <= 0x00000001]
[19:33:07.903]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:33:07.905]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:33:07.905]      __ap = 4;
[19:33:07.905]        // -> [__ap <= 0x00000004]
[19:33:07.905]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:07.907]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:33:07.907]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:33:07.907]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:07.908]    </block>
[19:33:07.909]    <block atomic="false" info="">
[19:33:07.909]      __var nReset = 0x80;
[19:33:07.909]        // -> [nReset <= 0x00000080]
[19:33:07.909]      __var canReadPins = 0;
[19:33:07.909]        // -> [canReadPins <= 0x00000000]
[19:33:07.909]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:33:07.909]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:33:07.909]        // -> [canReadPins <= 0x00000001]
[19:33:07.909]    </block>
[19:33:07.909]    <control if="" while="1" timeout="200" info="">
[19:33:07.909]      // while "1"  (timeout="200")
[19:33:07.909]      // while-condition  =>  TRUE
[19:33:07.910]      // while "1"  (timeout="200")
[19:33:07.910]      // while  =>  TIMEOUT
[19:33:07.910]      // end while "1"
[19:33:07.910]    </control>
[19:33:07.910]    <control if="canReadPins" while="" timeout="0" info="">
[19:33:07.910]      // if-block "canReadPins"
[19:33:07.910]        // =>  TRUE
[19:33:07.910]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:33:07.910]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:33:07.912]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:33:07.912]        // while-condition  =>  FALSE
[19:33:07.912]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:33:07.912]      </control>
[19:33:07.912]      // end if-block "canReadPins"
[19:33:07.913]    </control>
[19:33:07.913]    <control if="!canReadPins" while="" timeout="0" info="">
[19:33:07.913]      // if-block "!canReadPins"
[19:33:07.913]        // =>  FALSE
[19:33:07.913]      // skip if-block "!canReadPins"
[19:33:07.913]    </control>
[19:33:07.913]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:33:07.913]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:07.913]        // =>  TRUE
[19:33:07.913]      <block atomic="false" info="">
[19:33:07.913]        WriteAP(0x00, 0x190008);
[19:33:07.914]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:07.914]        WriteAP(0xF0, 0x01);
[19:33:07.915]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:07.915]      </block>
[19:33:07.915]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:07.915]    </control>
[19:33:07.915]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:33:07.915]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:07.915]        // =>  FALSE
[19:33:07.917]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:07.917]    </control>
[19:33:07.917]    <block atomic="false" info="">
[19:33:07.917]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:07.918]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:33:07.918]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:33:07.918]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:07.919]      __ap = 0; //lets make sure we reset the access point selection
[19:33:07.919]        // -> [__ap <= 0x00000000]
[19:33:07.919]    </block>
[19:33:07.919]  </sequence>
[19:33:07.919]  
[19:33:07.925]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:33:07.925]  
[19:33:07.926]  <debugvars>
[19:33:07.926]    // Pre-defined
[19:33:07.926]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:07.926]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:07.926]    __dp=0x00000000
[19:33:07.926]    __ap=0x00000000
[19:33:07.926]    __traceout=0x00000000      (Trace Disabled)
[19:33:07.926]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:07.926]    __FlashAddr=0x00000000
[19:33:07.927]    __FlashLen=0x00000000
[19:33:07.927]    __FlashArg=0x00000000
[19:33:07.927]    __FlashOp=0x00000000
[19:33:07.927]    __Result=0x00000000
[19:33:07.928]  </debugvars>
[19:33:07.928]  
[19:33:07.928]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:33:07.928]    <block atomic="false" info="">
[19:33:07.928]      __var deviceID = 0;
[19:33:07.928]        // -> [deviceID <= 0x00000000]
[19:33:07.928]      __var version = 0;
[19:33:07.928]        // -> [version <= 0x00000000]
[19:33:07.928]      __var partNum = 0;
[19:33:07.928]        // -> [partNum <= 0x00000000]
[19:33:07.928]      __var manuf = 0;
[19:33:07.929]        // -> [manuf <= 0x00000000]
[19:33:07.929]      __var isMSPM0G1X0X_G3X0X = 0;
[19:33:07.929]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:33:07.929]      __var isProduction = 0;
[19:33:07.929]        // -> [isProduction <= 0x00000000]
[19:33:07.929]      __var continueId = 0;
[19:33:07.929]        // -> [continueId <= 0x00000000]
[19:33:07.929]      deviceID =   Read32(0x41C40004);
[19:33:07.931]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:33:07.931]        // -> [deviceID <= 0x2BB8802F]
[19:33:07.931]      version = deviceID >> 28;
[19:33:07.931]        // -> [version <= 0x00000002]
[19:33:07.932]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:33:07.932]        // -> [partNum <= 0x0000BB88]
[19:33:07.932]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:33:07.932]        // -> [manuf <= 0x00000017]
[19:33:07.932]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:33:07.932]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:33:07.933]      isProduction = (version > 0);
[19:33:07.933]        // -> [isProduction <= 0x00000001]
[19:33:07.933]    </block>
[19:33:07.933]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:33:07.933]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:33:07.933]        // =>  FALSE
[19:33:07.933]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:33:07.933]    </control>
[19:33:07.933]    <control if="continueId == 4" while="" timeout="0" info="">
[19:33:07.933]      // if-block "continueId == 4"
[19:33:07.933]        // =>  FALSE
[19:33:07.933]      // skip if-block "continueId == 4"
[19:33:07.933]    </control>
[19:33:07.934]    <control if="!isProduction" while="" timeout="0" info="">
[19:33:07.934]      // if-block "!isProduction"
[19:33:07.934]        // =>  FALSE
[19:33:07.934]      // skip if-block "!isProduction"
[19:33:07.934]    </control>
[19:33:07.934]  </sequence>
[19:33:07.934]  
[19:33:13.971]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:33:13.971]  
[19:33:13.980]  <debugvars>
[19:33:13.980]    // Pre-defined
[19:33:13.980]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:13.980]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:33:13.980]    __dp=0x00000000
[19:33:13.981]    __ap=0x00000000
[19:33:13.981]    __traceout=0x00000000      (Trace Disabled)
[19:33:13.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:13.981]    __FlashAddr=0x00000000
[19:33:13.981]    __FlashLen=0x00000000
[19:33:13.981]    __FlashArg=0x00000000
[19:33:13.981]    __FlashOp=0x00000000
[19:33:13.981]    __Result=0x00000000
[19:33:13.982]  </debugvars>
[19:33:13.982]  
[19:33:13.982]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:33:13.982]    <block atomic="false" info="">
[19:33:13.982]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:33:13.982]        // -> [isSWJ <= 0x00000001]
[19:33:13.982]      __var hasDormant = __protocol & 0x00020000;
[19:33:13.982]        // -> [hasDormant <= 0x00000000]
[19:33:13.983]      __var protType   = __protocol & 0x0000FFFF;
[19:33:13.983]        // -> [protType <= 0x00000002]
[19:33:13.983]    </block>
[19:33:13.983]    <control if="protType == 1" while="" timeout="0" info="">
[19:33:13.983]      // if-block "protType == 1"
[19:33:13.983]        // =>  FALSE
[19:33:13.983]      // skip if-block "protType == 1"
[19:33:13.984]    </control>
[19:33:13.984]    <control if="protType == 2" while="" timeout="0" info="">
[19:33:13.984]      // if-block "protType == 2"
[19:33:13.984]        // =>  TRUE
[19:33:13.984]      <control if="isSWJ" while="" timeout="0" info="">
[19:33:13.984]        // if-block "isSWJ"
[19:33:13.984]          // =>  TRUE
[19:33:13.984]        <control if="hasDormant" while="" timeout="0" info="">
[19:33:13.984]          // if-block "hasDormant"
[19:33:13.984]            // =>  FALSE
[19:33:13.984]          // skip if-block "hasDormant"
[19:33:13.984]        </control>
[19:33:13.984]        <control if="!hasDormant" while="" timeout="0" info="">
[19:33:13.984]          // if-block "!hasDormant"
[19:33:13.984]            // =>  TRUE
[19:33:13.985]          <block atomic="false" info="">
[19:33:13.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:33:13.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:13.985]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:33:13.986]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:33:13.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:33:13.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:13.986]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:33:13.987]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:33:13.987]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:33:13.987]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:13.987]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:33:13.988]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:33:13.988]          </block>
[19:33:13.988]          // end if-block "!hasDormant"
[19:33:13.988]        </control>
[19:33:13.988]        // end if-block "isSWJ"
[19:33:13.988]      </control>
[19:33:13.988]      <control if="!isSWJ" while="" timeout="0" info="">
[19:33:13.988]        // if-block "!isSWJ"
[19:33:13.989]          // =>  FALSE
[19:33:13.989]        // skip if-block "!isSWJ"
[19:33:13.989]      </control>
[19:33:13.989]      <block atomic="false" info="">
[19:33:13.989]        ReadDP(0x0);
[19:33:13.990]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:33:13.990]      </block>
[19:33:13.990]      // end if-block "protType == 2"
[19:33:13.990]    </control>
[19:33:13.990]  </sequence>
[19:33:13.990]  
[19:33:13.992]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:33:13.992]  
[19:33:13.992]  <debugvars>
[19:33:13.992]    // Pre-defined
[19:33:13.992]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:13.992]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:33:13.992]    __dp=0x00000000
[19:33:13.992]    __ap=0x00000000
[19:33:13.993]    __traceout=0x00000000      (Trace Disabled)
[19:33:13.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:13.993]    __FlashAddr=0x00000000
[19:33:13.993]    __FlashLen=0x00000000
[19:33:13.993]    __FlashArg=0x00000000
[19:33:13.993]    __FlashOp=0x00000000
[19:33:13.994]    __Result=0x00000000
[19:33:13.994]  </debugvars>
[19:33:13.994]  
[19:33:13.994]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:33:13.994]    <block atomic="false" info="">
[19:33:13.994]      __var SW_DP_ABORT       = 0x0;
[19:33:13.995]        // -> [SW_DP_ABORT <= 0x00000000]
[19:33:13.995]      __var DP_CTRL_STAT      = 0x4;
[19:33:13.995]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:33:13.995]      __var DP_SELECT         = 0x8;
[19:33:13.995]        // -> [DP_SELECT <= 0x00000008]
[19:33:13.995]      __var powered_down      = 0;
[19:33:13.995]        // -> [powered_down <= 0x00000000]
[19:33:13.995]      WriteDP(DP_SELECT, 0x00000000);
[19:33:13.996]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:33:13.996]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:33:13.996]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:33:13.997]        // -> [powered_down <= 0x00000001]
[19:33:13.997]    </block>
[19:33:13.997]    <control if="powered_down" while="" timeout="0" info="">
[19:33:13.997]      // if-block "powered_down"
[19:33:13.997]        // =>  TRUE
[19:33:13.997]      <block atomic="false" info="">
[19:33:13.997]        Message(0, "Debug/System power-up request sent");
[19:33:13.999]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:33:13.999]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:33:13.999]      </block>
[19:33:13.999]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:33:13.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:33:14.001]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:33:14.001]        // while-condition  =>  FALSE
[19:33:14.001]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:33:14.001]      </control>
[19:33:14.001]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:33:14.001]        // if-block "(__protocol & 0xFFFF) == 1"
[19:33:14.001]          // =>  FALSE
[19:33:14.001]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:33:14.002]      </control>
[19:33:14.002]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:33:14.002]        // if-block "(__protocol & 0xFFFF) == 2"
[19:33:14.002]          // =>  TRUE
[19:33:14.002]        <block atomic="false" info="">
[19:33:14.002]          Message(0, "executing SWD power up");
[19:33:14.003]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:33:14.004]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:33:14.004]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:33:14.004]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:33:14.004]        </block>
[19:33:14.004]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:33:14.004]      </control>
[19:33:14.004]      // end if-block "powered_down"
[19:33:14.004]    </control>
[19:33:14.006]    <block atomic="false" info="">
[19:33:14.006]      __var DEBUG_PORT_VAL    = 0;
[19:33:14.006]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:33:14.006]      __var ACCESS_POINT_VAL  = 0;
[19:33:14.006]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:33:14.006]      __ap = 1; 
[19:33:14.006]        // -> [__ap <= 0x00000001]
[19:33:14.006]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:33:14.007]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:33:14.007]      __ap = 4;
[19:33:14.007]        // -> [__ap <= 0x00000004]
[19:33:14.007]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:14.008]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:33:14.009]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:33:14.009]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:14.010]    </block>
[19:33:14.011]    <block atomic="false" info="">
[19:33:14.011]      __var nReset = 0x80;
[19:33:14.011]        // -> [nReset <= 0x00000080]
[19:33:14.011]      __var canReadPins = 0;
[19:33:14.012]        // -> [canReadPins <= 0x00000000]
[19:33:14.012]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:33:14.012]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:33:14.012]        // -> [canReadPins <= 0x00000001]
[19:33:14.012]    </block>
[19:33:14.012]    <control if="" while="1" timeout="200" info="">
[19:33:14.012]      // while "1"  (timeout="200")
[19:33:14.012]      // while-condition  =>  TRUE
[19:33:14.013]      // while "1"  (timeout="200")
[19:33:14.013]      // while-condition  =>  TRUE
[19:33:14.013]      // while "1"  (timeout="200")
[19:33:14.013]      // while-condition  =>  TRUE
[19:33:14.013]      // while "1"  (timeout="200")
[19:33:14.013]      // while-condition  =>  TRUE
[19:33:14.013]      // while "1"  (timeout="200")
[19:33:14.013]      // while-condition  =>  TRUE
[19:33:14.013]      // while "1"  (timeout="200")
[19:33:14.013]      // while-condition  =>  TRUE
[19:33:14.013]      // while "1"  (timeout="200")
[19:33:14.013]      // while-condition  =>  TRUE
[19:33:14.013]      // while "1"  (timeout="200")
[19:33:14.015]      // while-condition  =>  TRUE
[19:33:14.015]      // while "1"  (timeout="200")
[19:33:14.015]      // while-condition  =>  TRUE
[19:33:14.015]      // while "1"  (timeout="200")
[19:33:14.015]      // while-condition  =>  TRUE
[19:33:14.015]      // while "1"  (timeout="200")
[19:33:14.015]      // while-condition  =>  TRUE
[19:33:14.015]      // while "1"  (timeout="200")
[19:33:14.015]      // while-condition  =>  TRUE
[19:33:14.015]      // while "1"  (timeout="200")
[19:33:14.016]      // while-condition  =>  TRUE
[19:33:14.016]      // while "1"  (timeout="200")
[19:33:14.016]      // while-condition  =>  TRUE
[19:33:14.016]      // while "1"  (timeout="200")
[19:33:14.016]      // while-condition  =>  TRUE
[19:33:14.016]      // while "1"  (timeout="200")
[19:33:14.016]      // while-condition  =>  TRUE
[19:33:14.016]      // while "1"  (timeout="200")
[19:33:14.016]      // while-condition  =>  TRUE
[19:33:14.016]      // while "1"  (timeout="200")
[19:33:14.016]      // while-condition  =>  TRUE
[19:33:14.017]      // while "1"  (timeout="200")
[19:33:14.017]      // while-condition  =>  TRUE
[19:33:14.017]      // while "1"  (timeout="200")
[19:33:14.017]      // while-condition  =>  TRUE
[19:33:14.017]      // while "1"  (timeout="200")
[19:33:14.017]      // while-condition  =>  TRUE
[19:33:14.017]      // while "1"  (timeout="200")
[19:33:14.017]      // while-condition  =>  TRUE
[19:33:14.017]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.018]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.018]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.018]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.018]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.018]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.018]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.018]      // while "1"  (timeout="200")
[19:33:14.018]      // while-condition  =>  TRUE
[19:33:14.019]      // while "1"  (timeout="200")
[19:33:14.019]      // while-condition  =>  TRUE
[19:33:14.019]      // while "1"  (timeout="200")
[19:33:14.019]      // while-condition  =>  TRUE
[19:33:14.019]      // while "1"  (timeout="200")
[19:33:14.019]      // while-condition  =>  TRUE
[19:33:14.020]      // while "1"  (timeout="200")
[19:33:14.020]      // while  =>  TIMEOUT
[19:33:14.020]      // end while "1"
[19:33:14.020]    </control>
[19:33:14.020]    <control if="canReadPins" while="" timeout="0" info="">
[19:33:14.020]      // if-block "canReadPins"
[19:33:14.020]        // =>  TRUE
[19:33:14.020]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:33:14.021]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:33:14.022]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:33:14.022]        // while-condition  =>  FALSE
[19:33:14.022]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:33:14.022]      </control>
[19:33:14.022]      // end if-block "canReadPins"
[19:33:14.022]    </control>
[19:33:14.022]    <control if="!canReadPins" while="" timeout="0" info="">
[19:33:14.022]      // if-block "!canReadPins"
[19:33:14.022]        // =>  FALSE
[19:33:14.022]      // skip if-block "!canReadPins"
[19:33:14.022]    </control>
[19:33:14.022]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:33:14.022]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:14.022]        // =>  TRUE
[19:33:14.023]      <block atomic="false" info="">
[19:33:14.023]        WriteAP(0x00, 0x190008);
[19:33:14.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:14.024]        WriteAP(0xF0, 0x01);
[19:33:14.025]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:14.025]      </block>
[19:33:14.025]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:14.025]    </control>
[19:33:14.025]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:33:14.026]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:14.026]        // =>  FALSE
[19:33:14.026]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:14.026]    </control>
[19:33:14.026]    <block atomic="false" info="">
[19:33:14.026]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:14.027]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:33:14.027]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:33:14.027]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:14.030]      __ap = 0; //lets make sure we reset the access point selection
[19:33:14.030]        // -> [__ap <= 0x00000000]
[19:33:14.030]    </block>
[19:33:14.030]  </sequence>
[19:33:14.030]  
[19:33:14.036]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:33:14.036]  
[19:33:14.036]  <debugvars>
[19:33:14.036]    // Pre-defined
[19:33:14.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:14.036]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:33:14.036]    __dp=0x00000000
[19:33:14.037]    __ap=0x00000000
[19:33:14.037]    __traceout=0x00000000      (Trace Disabled)
[19:33:14.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:14.037]    __FlashAddr=0x00000000
[19:33:14.037]    __FlashLen=0x00000000
[19:33:14.037]    __FlashArg=0x00000000
[19:33:14.037]    __FlashOp=0x00000000
[19:33:14.037]    __Result=0x00000000
[19:33:14.037]  </debugvars>
[19:33:14.038]  
[19:33:14.038]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:33:14.038]    <block atomic="false" info="">
[19:33:14.038]      __var deviceID = 0;
[19:33:14.038]        // -> [deviceID <= 0x00000000]
[19:33:14.039]      __var version = 0;
[19:33:14.039]        // -> [version <= 0x00000000]
[19:33:14.039]      __var partNum = 0;
[19:33:14.039]        // -> [partNum <= 0x00000000]
[19:33:14.039]      __var manuf = 0;
[19:33:14.039]        // -> [manuf <= 0x00000000]
[19:33:14.039]      __var isMSPM0G1X0X_G3X0X = 0;
[19:33:14.039]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:33:14.039]      __var isProduction = 0;
[19:33:14.039]        // -> [isProduction <= 0x00000000]
[19:33:14.039]      __var continueId = 0;
[19:33:14.039]        // -> [continueId <= 0x00000000]
[19:33:14.040]      deviceID =   Read32(0x41C40004);
[19:33:14.042]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:33:14.042]        // -> [deviceID <= 0x2BB8802F]
[19:33:14.042]      version = deviceID >> 28;
[19:33:14.042]        // -> [version <= 0x00000002]
[19:33:14.043]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:33:14.043]        // -> [partNum <= 0x0000BB88]
[19:33:14.043]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:33:14.043]        // -> [manuf <= 0x00000017]
[19:33:14.043]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:33:14.043]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:33:14.044]      isProduction = (version > 0);
[19:33:14.044]        // -> [isProduction <= 0x00000001]
[19:33:14.044]    </block>
[19:33:14.044]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:33:14.044]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:33:14.044]        // =>  FALSE
[19:33:14.044]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:33:14.044]    </control>
[19:33:14.044]    <control if="continueId == 4" while="" timeout="0" info="">
[19:33:14.045]      // if-block "continueId == 4"
[19:33:14.045]        // =>  FALSE
[19:33:14.045]      // skip if-block "continueId == 4"
[19:33:14.045]    </control>
[19:33:14.045]    <control if="!isProduction" while="" timeout="0" info="">
[19:33:14.045]      // if-block "!isProduction"
[19:33:14.045]        // =>  FALSE
[19:33:14.045]      // skip if-block "!isProduction"
[19:33:14.045]    </control>
[19:33:14.045]  </sequence>
[19:33:14.046]  
[19:33:42.356]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:33:42.356]  
[19:33:42.356]  <debugvars>
[19:33:42.356]    // Pre-defined
[19:33:42.357]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:42.357]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:42.357]    __dp=0x00000000
[19:33:42.357]    __ap=0x00000000
[19:33:42.357]    __traceout=0x00000000      (Trace Disabled)
[19:33:42.357]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:42.357]    __FlashAddr=0x00000000
[19:33:42.357]    __FlashLen=0x00000000
[19:33:42.357]    __FlashArg=0x00000000
[19:33:42.357]    __FlashOp=0x00000000
[19:33:42.357]    __Result=0x00000000
[19:33:42.358]  </debugvars>
[19:33:42.359]  
[19:33:42.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:33:42.359]    <block atomic="false" info="">
[19:33:42.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:33:42.359]        // -> [isSWJ <= 0x00000001]
[19:33:42.359]      __var hasDormant = __protocol & 0x00020000;
[19:33:42.359]        // -> [hasDormant <= 0x00000000]
[19:33:42.359]      __var protType   = __protocol & 0x0000FFFF;
[19:33:42.359]        // -> [protType <= 0x00000002]
[19:33:42.359]    </block>
[19:33:42.359]    <control if="protType == 1" while="" timeout="0" info="">
[19:33:42.359]      // if-block "protType == 1"
[19:33:42.359]        // =>  FALSE
[19:33:42.359]      // skip if-block "protType == 1"
[19:33:42.359]    </control>
[19:33:42.359]    <control if="protType == 2" while="" timeout="0" info="">
[19:33:42.359]      // if-block "protType == 2"
[19:33:42.359]        // =>  TRUE
[19:33:42.359]      <control if="isSWJ" while="" timeout="0" info="">
[19:33:42.361]        // if-block "isSWJ"
[19:33:42.361]          // =>  TRUE
[19:33:42.361]        <control if="hasDormant" while="" timeout="0" info="">
[19:33:42.361]          // if-block "hasDormant"
[19:33:42.361]            // =>  FALSE
[19:33:42.361]          // skip if-block "hasDormant"
[19:33:42.361]        </control>
[19:33:42.361]        <control if="!hasDormant" while="" timeout="0" info="">
[19:33:42.361]          // if-block "!hasDormant"
[19:33:42.361]            // =>  TRUE
[19:33:42.362]          <block atomic="false" info="">
[19:33:42.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:33:42.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:42.362]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:33:42.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:33:42.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:33:42.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:42.363]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:33:42.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:33:42.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:33:42.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:42.364]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:33:42.364]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:33:42.365]          </block>
[19:33:42.365]          // end if-block "!hasDormant"
[19:33:42.365]        </control>
[19:33:42.365]        // end if-block "isSWJ"
[19:33:42.365]      </control>
[19:33:42.365]      <control if="!isSWJ" while="" timeout="0" info="">
[19:33:42.365]        // if-block "!isSWJ"
[19:33:42.365]          // =>  FALSE
[19:33:42.365]        // skip if-block "!isSWJ"
[19:33:42.365]      </control>
[19:33:42.366]      <block atomic="false" info="">
[19:33:42.366]        ReadDP(0x0);
[19:33:42.366]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:33:42.366]      </block>
[19:33:42.366]      // end if-block "protType == 2"
[19:33:42.366]    </control>
[19:33:42.366]  </sequence>
[19:33:42.366]  
[19:33:42.367]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:33:42.367]  
[19:33:42.367]  <debugvars>
[19:33:42.367]    // Pre-defined
[19:33:42.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:42.367]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:42.367]    __dp=0x00000000
[19:33:42.367]    __ap=0x00000000
[19:33:42.367]    __traceout=0x00000000      (Trace Disabled)
[19:33:42.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:42.368]    __FlashAddr=0x00000000
[19:33:42.368]    __FlashLen=0x00000000
[19:33:42.368]    __FlashArg=0x00000000
[19:33:42.368]    __FlashOp=0x00000000
[19:33:42.368]    __Result=0x00000000
[19:33:42.368]  </debugvars>
[19:33:42.368]  
[19:33:42.369]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:33:42.369]    <block atomic="false" info="">
[19:33:42.369]      __var SW_DP_ABORT       = 0x0;
[19:33:42.369]        // -> [SW_DP_ABORT <= 0x00000000]
[19:33:42.369]      __var DP_CTRL_STAT      = 0x4;
[19:33:42.369]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:33:42.369]      __var DP_SELECT         = 0x8;
[19:33:42.369]        // -> [DP_SELECT <= 0x00000008]
[19:33:42.369]      __var powered_down      = 0;
[19:33:42.369]        // -> [powered_down <= 0x00000000]
[19:33:42.369]      WriteDP(DP_SELECT, 0x00000000);
[19:33:42.370]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:33:42.371]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:33:42.371]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:33:42.372]        // -> [powered_down <= 0x00000001]
[19:33:42.372]    </block>
[19:33:42.372]    <control if="powered_down" while="" timeout="0" info="">
[19:33:42.372]      // if-block "powered_down"
[19:33:42.372]        // =>  TRUE
[19:33:42.372]      <block atomic="false" info="">
[19:33:42.372]        Message(0, "Debug/System power-up request sent");
[19:33:42.374]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:33:42.374]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:33:42.374]      </block>
[19:33:42.374]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:33:42.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:33:42.375]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:33:42.375]        // while-condition  =>  FALSE
[19:33:42.375]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:33:42.375]      </control>
[19:33:42.375]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:33:42.375]        // if-block "(__protocol & 0xFFFF) == 1"
[19:33:42.375]          // =>  FALSE
[19:33:42.376]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:33:42.376]      </control>
[19:33:42.376]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:33:42.376]        // if-block "(__protocol & 0xFFFF) == 2"
[19:33:42.376]          // =>  TRUE
[19:33:42.376]        <block atomic="false" info="">
[19:33:42.376]          Message(0, "executing SWD power up");
[19:33:42.377]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:33:42.378]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:33:42.378]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:33:42.379]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:33:42.379]        </block>
[19:33:42.379]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:33:42.379]      </control>
[19:33:42.379]      // end if-block "powered_down"
[19:33:42.380]    </control>
[19:33:42.380]    <block atomic="false" info="">
[19:33:42.380]      __var DEBUG_PORT_VAL    = 0;
[19:33:42.380]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:33:42.380]      __var ACCESS_POINT_VAL  = 0;
[19:33:42.380]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:33:42.380]      __ap = 1; 
[19:33:42.380]        // -> [__ap <= 0x00000001]
[19:33:42.380]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:33:42.381]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:33:42.381]      __ap = 4;
[19:33:42.382]        // -> [__ap <= 0x00000004]
[19:33:42.382]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:42.383]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:33:42.383]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:33:42.383]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:42.384]    </block>
[19:33:42.384]    <block atomic="false" info="">
[19:33:42.384]      __var nReset = 0x80;
[19:33:42.384]        // -> [nReset <= 0x00000080]
[19:33:42.384]      __var canReadPins = 0;
[19:33:42.385]        // -> [canReadPins <= 0x00000000]
[19:33:42.385]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:33:42.385]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:33:42.385]        // -> [canReadPins <= 0x00000001]
[19:33:42.385]    </block>
[19:33:42.385]    <control if="" while="1" timeout="200" info="">
[19:33:42.386]      // while "1"  (timeout="200")
[19:33:42.386]      // while-condition  =>  TRUE
[19:33:42.386]      // while "1"  (timeout="200")
[19:33:42.386]      // while-condition  =>  TRUE
[19:33:42.386]      // while "1"  (timeout="200")
[19:33:42.386]      // while-condition  =>  TRUE
[19:33:42.386]      // while "1"  (timeout="200")
[19:33:42.386]      // while-condition  =>  TRUE
[19:33:42.387]      // while "1"  (timeout="200")
[19:33:42.387]      // while-condition  =>  TRUE
[19:33:42.387]      // while "1"  (timeout="200")
[19:33:42.387]      // while-condition  =>  TRUE
[19:33:42.387]      // while "1"  (timeout="200")
[19:33:42.387]      // while-condition  =>  TRUE
[19:33:42.387]      // while "1"  (timeout="200")
[19:33:42.387]      // while-condition  =>  TRUE
[19:33:42.388]      // while "1"  (timeout="200")
[19:33:42.388]      // while-condition  =>  TRUE
[19:33:42.388]      // while "1"  (timeout="200")
[19:33:42.388]      // while-condition  =>  TRUE
[19:33:42.388]      // while "1"  (timeout="200")
[19:33:42.388]      // while-condition  =>  TRUE
[19:33:42.388]      // while "1"  (timeout="200")
[19:33:42.388]      // while-condition  =>  TRUE
[19:33:42.388]      // while "1"  (timeout="200")
[19:33:42.388]      // while-condition  =>  TRUE
[19:33:42.388]      // while "1"  (timeout="200")
[19:33:42.388]      // while-condition  =>  TRUE
[19:33:42.388]      // while "1"  (timeout="200")
[19:33:42.388]      // while-condition  =>  TRUE
[19:33:42.389]      // while "1"  (timeout="200")
[19:33:42.389]      // while-condition  =>  TRUE
[19:33:42.389]      // while "1"  (timeout="200")
[19:33:42.389]      // while-condition  =>  TRUE
[19:33:42.389]      // while "1"  (timeout="200")
[19:33:42.389]      // while-condition  =>  TRUE
[19:33:42.389]      // while "1"  (timeout="200")
[19:33:42.389]      // while-condition  =>  TRUE
[19:33:42.389]      // while "1"  (timeout="200")
[19:33:42.389]      // while-condition  =>  TRUE
[19:33:42.389]      // while "1"  (timeout="200")
[19:33:42.390]      // while-condition  =>  TRUE
[19:33:42.390]      // while "1"  (timeout="200")
[19:33:42.390]      // while-condition  =>  TRUE
[19:33:42.390]      // while "1"  (timeout="200")
[19:33:42.390]      // while-condition  =>  TRUE
[19:33:42.390]      // while "1"  (timeout="200")
[19:33:42.390]      // while-condition  =>  TRUE
[19:33:42.390]      // while "1"  (timeout="200")
[19:33:42.390]      // while-condition  =>  TRUE
[19:33:42.390]      // while "1"  (timeout="200")
[19:33:42.390]      // while-condition  =>  TRUE
[19:33:42.390]      // while "1"  (timeout="200")
[19:33:42.391]      // while-condition  =>  TRUE
[19:33:42.392]      // while "1"  (timeout="200")
[19:33:42.392]      // while-condition  =>  TRUE
[19:33:42.392]      // while "1"  (timeout="200")
[19:33:42.392]      // while-condition  =>  TRUE
[19:33:42.392]      // while "1"  (timeout="200")
[19:33:42.392]      // while-condition  =>  TRUE
[19:33:42.392]      // while "1"  (timeout="200")
[19:33:42.392]      // while-condition  =>  TRUE
[19:33:42.392]      // while "1"  (timeout="200")
[19:33:42.392]      // while-condition  =>  TRUE
[19:33:42.392]      // while "1"  (timeout="200")
[19:33:42.392]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.393]      // while "1"  (timeout="200")
[19:33:42.393]      // while-condition  =>  TRUE
[19:33:42.395]      // while "1"  (timeout="200")
[19:33:42.395]      // while  =>  TIMEOUT
[19:33:42.395]      // end while "1"
[19:33:42.395]    </control>
[19:33:42.395]    <control if="canReadPins" while="" timeout="0" info="">
[19:33:42.395]      // if-block "canReadPins"
[19:33:42.395]        // =>  TRUE
[19:33:42.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:33:42.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:33:42.395]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:33:42.396]        // while-condition  =>  FALSE
[19:33:42.396]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:33:42.396]      </control>
[19:33:42.396]      // end if-block "canReadPins"
[19:33:42.396]    </control>
[19:33:42.396]    <control if="!canReadPins" while="" timeout="0" info="">
[19:33:42.396]      // if-block "!canReadPins"
[19:33:42.396]        // =>  FALSE
[19:33:42.396]      // skip if-block "!canReadPins"
[19:33:42.397]    </control>
[19:33:42.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:33:42.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:42.397]        // =>  TRUE
[19:33:42.397]      <block atomic="false" info="">
[19:33:42.397]        WriteAP(0x00, 0x190008);
[19:33:42.398]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:42.398]        WriteAP(0xF0, 0x01);
[19:33:42.399]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:42.399]      </block>
[19:33:42.399]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:42.400]    </control>
[19:33:42.400]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:33:42.400]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:42.400]        // =>  FALSE
[19:33:42.400]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:42.400]    </control>
[19:33:42.400]    <block atomic="false" info="">
[19:33:42.400]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:42.401]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:33:42.402]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:33:42.402]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:42.403]      __ap = 0; //lets make sure we reset the access point selection
[19:33:42.403]        // -> [__ap <= 0x00000000]
[19:33:42.403]    </block>
[19:33:42.403]  </sequence>
[19:33:42.404]  
[19:33:42.410]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:33:42.410]  
[19:33:42.410]  <debugvars>
[19:33:42.411]    // Pre-defined
[19:33:42.411]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:42.411]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:42.411]    __dp=0x00000000
[19:33:42.411]    __ap=0x00000000
[19:33:42.411]    __traceout=0x00000000      (Trace Disabled)
[19:33:42.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:42.412]    __FlashAddr=0x00000000
[19:33:42.412]    __FlashLen=0x00000000
[19:33:42.412]    __FlashArg=0x00000000
[19:33:42.412]    __FlashOp=0x00000000
[19:33:42.412]    __Result=0x00000000
[19:33:42.412]  </debugvars>
[19:33:42.412]  
[19:33:42.412]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:33:42.412]    <block atomic="false" info="">
[19:33:42.412]      __var deviceID = 0;
[19:33:42.412]        // -> [deviceID <= 0x00000000]
[19:33:42.412]      __var version = 0;
[19:33:42.412]        // -> [version <= 0x00000000]
[19:33:42.412]      __var partNum = 0;
[19:33:42.412]        // -> [partNum <= 0x00000000]
[19:33:42.413]      __var manuf = 0;
[19:33:42.413]        // -> [manuf <= 0x00000000]
[19:33:42.413]      __var isMSPM0G1X0X_G3X0X = 0;
[19:33:42.413]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:33:42.413]      __var isProduction = 0;
[19:33:42.413]        // -> [isProduction <= 0x00000000]
[19:33:42.413]      __var continueId = 0;
[19:33:42.413]        // -> [continueId <= 0x00000000]
[19:33:42.413]      deviceID =   Read32(0x41C40004);
[19:33:42.415]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:33:42.415]        // -> [deviceID <= 0x2BB8802F]
[19:33:42.416]      version = deviceID >> 28;
[19:33:42.416]        // -> [version <= 0x00000002]
[19:33:42.416]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:33:42.416]        // -> [partNum <= 0x0000BB88]
[19:33:42.416]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:33:42.416]        // -> [manuf <= 0x00000017]
[19:33:42.416]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:33:42.416]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:33:42.416]      isProduction = (version > 0);
[19:33:42.417]        // -> [isProduction <= 0x00000001]
[19:33:42.417]    </block>
[19:33:42.417]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:33:42.417]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:33:42.417]        // =>  FALSE
[19:33:42.417]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:33:42.417]    </control>
[19:33:42.417]    <control if="continueId == 4" while="" timeout="0" info="">
[19:33:42.417]      // if-block "continueId == 4"
[19:33:42.417]        // =>  FALSE
[19:33:42.417]      // skip if-block "continueId == 4"
[19:33:42.417]    </control>
[19:33:42.418]    <control if="!isProduction" while="" timeout="0" info="">
[19:33:42.418]      // if-block "!isProduction"
[19:33:42.418]        // =>  FALSE
[19:33:42.418]      // skip if-block "!isProduction"
[19:33:42.418]    </control>
[19:33:42.418]  </sequence>
[19:33:42.418]  
[19:33:50.454]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:33:50.454]  
[19:33:50.454]  <debugvars>
[19:33:50.454]    // Pre-defined
[19:33:50.454]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:50.454]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:33:50.454]    __dp=0x00000000
[19:33:50.454]    __ap=0x00000000
[19:33:50.454]    __traceout=0x00000000      (Trace Disabled)
[19:33:50.454]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:50.454]    __FlashAddr=0x00000000
[19:33:50.455]    __FlashLen=0x00000000
[19:33:50.455]    __FlashArg=0x00000000
[19:33:50.455]    __FlashOp=0x00000000
[19:33:50.455]    __Result=0x00000000
[19:33:50.455]  </debugvars>
[19:33:50.456]  
[19:33:50.456]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:33:50.456]    <block atomic="false" info="">
[19:33:50.456]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:33:50.456]        // -> [isSWJ <= 0x00000001]
[19:33:50.456]      __var hasDormant = __protocol & 0x00020000;
[19:33:50.456]        // -> [hasDormant <= 0x00000000]
[19:33:50.456]      __var protType   = __protocol & 0x0000FFFF;
[19:33:50.456]        // -> [protType <= 0x00000002]
[19:33:50.456]    </block>
[19:33:50.456]    <control if="protType == 1" while="" timeout="0" info="">
[19:33:50.456]      // if-block "protType == 1"
[19:33:50.456]        // =>  FALSE
[19:33:50.456]      // skip if-block "protType == 1"
[19:33:50.456]    </control>
[19:33:50.457]    <control if="protType == 2" while="" timeout="0" info="">
[19:33:50.457]      // if-block "protType == 2"
[19:33:50.457]        // =>  TRUE
[19:33:50.457]      <control if="isSWJ" while="" timeout="0" info="">
[19:33:50.457]        // if-block "isSWJ"
[19:33:50.457]          // =>  TRUE
[19:33:50.457]        <control if="hasDormant" while="" timeout="0" info="">
[19:33:50.457]          // if-block "hasDormant"
[19:33:50.457]            // =>  FALSE
[19:33:50.457]          // skip if-block "hasDormant"
[19:33:50.457]        </control>
[19:33:50.457]        <control if="!hasDormant" while="" timeout="0" info="">
[19:33:50.458]          // if-block "!hasDormant"
[19:33:50.458]            // =>  TRUE
[19:33:50.458]          <block atomic="false" info="">
[19:33:50.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:33:50.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:50.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:33:50.459]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:33:50.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:33:50.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:50.459]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:33:50.459]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:33:50.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:33:50.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:50.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:33:50.461]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:33:50.461]          </block>
[19:33:50.461]          // end if-block "!hasDormant"
[19:33:50.461]        </control>
[19:33:50.461]        // end if-block "isSWJ"
[19:33:50.461]      </control>
[19:33:50.461]      <control if="!isSWJ" while="" timeout="0" info="">
[19:33:50.461]        // if-block "!isSWJ"
[19:33:50.462]          // =>  FALSE
[19:33:50.462]        // skip if-block "!isSWJ"
[19:33:50.462]      </control>
[19:33:50.462]      <block atomic="false" info="">
[19:33:50.462]        ReadDP(0x0);
[19:33:50.463]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:33:50.463]      </block>
[19:33:50.463]      // end if-block "protType == 2"
[19:33:50.463]    </control>
[19:33:50.463]  </sequence>
[19:33:50.463]  
[19:33:50.463]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:33:50.463]  
[19:33:50.463]  <debugvars>
[19:33:50.463]    // Pre-defined
[19:33:50.463]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:50.463]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:33:50.464]    __dp=0x00000000
[19:33:50.464]    __ap=0x00000000
[19:33:50.464]    __traceout=0x00000000      (Trace Disabled)
[19:33:50.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:50.464]    __FlashAddr=0x00000000
[19:33:50.464]    __FlashLen=0x00000000
[19:33:50.464]    __FlashArg=0x00000000
[19:33:50.464]    __FlashOp=0x00000000
[19:33:50.464]    __Result=0x00000000
[19:33:50.464]  </debugvars>
[19:33:50.464]  
[19:33:50.464]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:33:50.464]    <block atomic="false" info="">
[19:33:50.464]      __var SW_DP_ABORT       = 0x0;
[19:33:50.464]        // -> [SW_DP_ABORT <= 0x00000000]
[19:33:50.466]      __var DP_CTRL_STAT      = 0x4;
[19:33:50.466]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:33:50.466]      __var DP_SELECT         = 0x8;
[19:33:50.466]        // -> [DP_SELECT <= 0x00000008]
[19:33:50.466]      __var powered_down      = 0;
[19:33:50.466]        // -> [powered_down <= 0x00000000]
[19:33:50.466]      WriteDP(DP_SELECT, 0x00000000);
[19:33:50.467]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:33:50.467]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:33:50.467]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:33:50.467]        // -> [powered_down <= 0x00000001]
[19:33:50.467]    </block>
[19:33:50.467]    <control if="powered_down" while="" timeout="0" info="">
[19:33:50.468]      // if-block "powered_down"
[19:33:50.468]        // =>  TRUE
[19:33:50.468]      <block atomic="false" info="">
[19:33:50.468]        Message(0, "Debug/System power-up request sent");
[19:33:50.470]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:33:50.470]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:33:50.470]      </block>
[19:33:50.470]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:33:50.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:33:50.470]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:33:50.471]        // while-condition  =>  FALSE
[19:33:50.471]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:33:50.471]      </control>
[19:33:50.471]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:33:50.471]        // if-block "(__protocol & 0xFFFF) == 1"
[19:33:50.471]          // =>  FALSE
[19:33:50.471]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:33:50.471]      </control>
[19:33:50.471]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:33:50.471]        // if-block "(__protocol & 0xFFFF) == 2"
[19:33:50.472]          // =>  TRUE
[19:33:50.472]        <block atomic="false" info="">
[19:33:50.472]          Message(0, "executing SWD power up");
[19:33:50.474]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:33:50.475]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:33:50.475]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:33:50.475]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:33:50.475]        </block>
[19:33:50.475]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:33:50.475]      </control>
[19:33:50.476]      // end if-block "powered_down"
[19:33:50.476]    </control>
[19:33:50.476]    <block atomic="false" info="">
[19:33:50.476]      __var DEBUG_PORT_VAL    = 0;
[19:33:50.476]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:33:50.476]      __var ACCESS_POINT_VAL  = 0;
[19:33:50.476]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:33:50.476]      __ap = 1; 
[19:33:50.477]        // -> [__ap <= 0x00000001]
[19:33:50.477]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:33:50.478]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:33:50.478]      __ap = 4;
[19:33:50.478]        // -> [__ap <= 0x00000004]
[19:33:50.478]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:50.479]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:33:50.479]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:33:50.479]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:50.481]    </block>
[19:33:50.481]    <block atomic="false" info="">
[19:33:50.481]      __var nReset = 0x80;
[19:33:50.482]        // -> [nReset <= 0x00000080]
[19:33:50.482]      __var canReadPins = 0;
[19:33:50.482]        // -> [canReadPins <= 0x00000000]
[19:33:50.482]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:33:50.482]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:33:50.482]        // -> [canReadPins <= 0x00000001]
[19:33:50.483]    </block>
[19:33:50.483]    <control if="" while="1" timeout="200" info="">
[19:33:50.483]      // while "1"  (timeout="200")
[19:33:50.483]      // while-condition  =>  TRUE
[19:33:50.483]      // while "1"  (timeout="200")
[19:33:50.483]      // while-condition  =>  TRUE
[19:33:50.484]      // while "1"  (timeout="200")
[19:33:50.484]      // while-condition  =>  TRUE
[19:33:50.484]      // while "1"  (timeout="200")
[19:33:50.484]      // while-condition  =>  TRUE
[19:33:50.484]      // while "1"  (timeout="200")
[19:33:50.484]      // while-condition  =>  TRUE
[19:33:50.484]      // while "1"  (timeout="200")
[19:33:50.484]      // while-condition  =>  TRUE
[19:33:50.485]      // while "1"  (timeout="200")
[19:33:50.485]      // while-condition  =>  TRUE
[19:33:50.485]      // while "1"  (timeout="200")
[19:33:50.485]      // while-condition  =>  TRUE
[19:33:50.485]      // while "1"  (timeout="200")
[19:33:50.485]      // while-condition  =>  TRUE
[19:33:50.485]      // while "1"  (timeout="200")
[19:33:50.485]      // while-condition  =>  TRUE
[19:33:50.485]      // while "1"  (timeout="200")
[19:33:50.485]      // while-condition  =>  TRUE
[19:33:50.485]      // while "1"  (timeout="200")
[19:33:50.486]      // while-condition  =>  TRUE
[19:33:50.486]      // while "1"  (timeout="200")
[19:33:50.486]      // while-condition  =>  TRUE
[19:33:50.486]      // while "1"  (timeout="200")
[19:33:50.486]      // while-condition  =>  TRUE
[19:33:50.486]      // while "1"  (timeout="200")
[19:33:50.486]      // while-condition  =>  TRUE
[19:33:50.486]      // while "1"  (timeout="200")
[19:33:50.486]      // while-condition  =>  TRUE
[19:33:50.486]      // while "1"  (timeout="200")
[19:33:50.486]      // while-condition  =>  TRUE
[19:33:50.486]      // while "1"  (timeout="200")
[19:33:50.487]      // while-condition  =>  TRUE
[19:33:50.487]      // while "1"  (timeout="200")
[19:33:50.487]      // while-condition  =>  TRUE
[19:33:50.487]      // while "1"  (timeout="200")
[19:33:50.487]      // while-condition  =>  TRUE
[19:33:50.487]      // while "1"  (timeout="200")
[19:33:50.487]      // while-condition  =>  TRUE
[19:33:50.487]      // while "1"  (timeout="200")
[19:33:50.487]      // while-condition  =>  TRUE
[19:33:50.487]      // while "1"  (timeout="200")
[19:33:50.487]      // while-condition  =>  TRUE
[19:33:50.488]      // while "1"  (timeout="200")
[19:33:50.488]      // while  =>  TIMEOUT
[19:33:50.488]      // end while "1"
[19:33:50.488]    </control>
[19:33:50.488]    <control if="canReadPins" while="" timeout="0" info="">
[19:33:50.488]      // if-block "canReadPins"
[19:33:50.489]        // =>  TRUE
[19:33:50.489]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:33:50.489]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:33:50.489]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:33:50.490]        // while-condition  =>  FALSE
[19:33:50.490]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:33:50.490]      </control>
[19:33:50.490]      // end if-block "canReadPins"
[19:33:50.490]    </control>
[19:33:50.490]    <control if="!canReadPins" while="" timeout="0" info="">
[19:33:50.490]      // if-block "!canReadPins"
[19:33:50.490]        // =>  FALSE
[19:33:50.492]      // skip if-block "!canReadPins"
[19:33:50.492]    </control>
[19:33:50.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:33:50.492]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:50.492]        // =>  TRUE
[19:33:50.492]      <block atomic="false" info="">
[19:33:50.492]        WriteAP(0x00, 0x190008);
[19:33:50.493]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:50.493]        WriteAP(0xF0, 0x01);
[19:33:50.493]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:50.493]      </block>
[19:33:50.493]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:50.494]    </control>
[19:33:50.494]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:33:50.494]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:50.494]        // =>  FALSE
[19:33:50.494]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:50.494]    </control>
[19:33:50.495]    <block atomic="false" info="">
[19:33:50.495]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:50.496]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:33:50.496]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:33:50.496]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:50.499]      __ap = 0; //lets make sure we reset the access point selection
[19:33:50.499]        // -> [__ap <= 0x00000000]
[19:33:50.499]    </block>
[19:33:50.499]  </sequence>
[19:33:50.499]  
[19:33:50.505]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:33:50.505]  
[19:33:50.505]  <debugvars>
[19:33:50.506]    // Pre-defined
[19:33:50.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:50.506]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:33:50.506]    __dp=0x00000000
[19:33:50.506]    __ap=0x00000000
[19:33:50.506]    __traceout=0x00000000      (Trace Disabled)
[19:33:50.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:50.506]    __FlashAddr=0x00000000
[19:33:50.506]    __FlashLen=0x00000000
[19:33:50.507]    __FlashArg=0x00000000
[19:33:50.507]    __FlashOp=0x00000000
[19:33:50.507]    __Result=0x00000000
[19:33:50.507]  </debugvars>
[19:33:50.507]  
[19:33:50.507]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:33:50.507]    <block atomic="false" info="">
[19:33:50.507]      __var deviceID = 0;
[19:33:50.507]        // -> [deviceID <= 0x00000000]
[19:33:50.507]      __var version = 0;
[19:33:50.508]        // -> [version <= 0x00000000]
[19:33:50.508]      __var partNum = 0;
[19:33:50.508]        // -> [partNum <= 0x00000000]
[19:33:50.508]      __var manuf = 0;
[19:33:50.508]        // -> [manuf <= 0x00000000]
[19:33:50.508]      __var isMSPM0G1X0X_G3X0X = 0;
[19:33:50.508]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:33:50.508]      __var isProduction = 0;
[19:33:50.508]        // -> [isProduction <= 0x00000000]
[19:33:50.509]      __var continueId = 0;
[19:33:50.509]        // -> [continueId <= 0x00000000]
[19:33:50.509]      deviceID =   Read32(0x41C40004);
[19:33:50.511]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:33:50.511]        // -> [deviceID <= 0x2BB8802F]
[19:33:50.511]      version = deviceID >> 28;
[19:33:50.511]        // -> [version <= 0x00000002]
[19:33:50.512]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:33:50.512]        // -> [partNum <= 0x0000BB88]
[19:33:50.512]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:33:50.512]        // -> [manuf <= 0x00000017]
[19:33:50.512]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:33:50.512]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:33:50.512]      isProduction = (version > 0);
[19:33:50.512]        // -> [isProduction <= 0x00000001]
[19:33:50.512]    </block>
[19:33:50.512]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:33:50.512]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:33:50.512]        // =>  FALSE
[19:33:50.512]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:33:50.512]    </control>
[19:33:50.512]    <control if="continueId == 4" while="" timeout="0" info="">
[19:33:50.513]      // if-block "continueId == 4"
[19:33:50.513]        // =>  FALSE
[19:33:50.513]      // skip if-block "continueId == 4"
[19:33:50.513]    </control>
[19:33:50.513]    <control if="!isProduction" while="" timeout="0" info="">
[19:33:50.513]      // if-block "!isProduction"
[19:33:50.513]        // =>  FALSE
[19:33:50.513]      // skip if-block "!isProduction"
[19:33:50.514]    </control>
[19:33:50.514]  </sequence>
[19:33:50.514]  
[19:34:17.365]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:34:17.365]  
[19:34:17.365]  <debugvars>
[19:34:17.365]    // Pre-defined
[19:34:17.365]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:34:17.365]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:34:17.365]    __dp=0x00000000
[19:34:17.365]    __ap=0x00000000
[19:34:17.365]    __traceout=0x00000000      (Trace Disabled)
[19:34:17.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:34:17.366]    __FlashAddr=0x00000000
[19:34:17.366]    __FlashLen=0x00000000
[19:34:17.366]    __FlashArg=0x00000000
[19:34:17.366]    __FlashOp=0x00000000
[19:34:17.366]    __Result=0x00000000
[19:34:17.367]  </debugvars>
[19:34:17.367]  
[19:34:17.367]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:34:17.367]    <block atomic="false" info="">
[19:34:17.367]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:34:17.367]        // -> [isSWJ <= 0x00000001]
[19:34:17.367]      __var hasDormant = __protocol & 0x00020000;
[19:34:17.367]        // -> [hasDormant <= 0x00000000]
[19:34:17.367]      __var protType   = __protocol & 0x0000FFFF;
[19:34:17.367]        // -> [protType <= 0x00000002]
[19:34:17.367]    </block>
[19:34:17.368]    <control if="protType == 1" while="" timeout="0" info="">
[19:34:17.368]      // if-block "protType == 1"
[19:34:17.368]        // =>  FALSE
[19:34:17.368]      // skip if-block "protType == 1"
[19:34:17.368]    </control>
[19:34:17.368]    <control if="protType == 2" while="" timeout="0" info="">
[19:34:17.368]      // if-block "protType == 2"
[19:34:17.368]        // =>  TRUE
[19:34:17.368]      <control if="isSWJ" while="" timeout="0" info="">
[19:34:17.368]        // if-block "isSWJ"
[19:34:17.368]          // =>  TRUE
[19:34:17.369]        <control if="hasDormant" while="" timeout="0" info="">
[19:34:17.369]          // if-block "hasDormant"
[19:34:17.369]            // =>  FALSE
[19:34:17.369]          // skip if-block "hasDormant"
[19:34:17.369]        </control>
[19:34:17.369]        <control if="!hasDormant" while="" timeout="0" info="">
[19:34:17.370]          // if-block "!hasDormant"
[19:34:17.370]            // =>  TRUE
[19:34:17.370]          <block atomic="false" info="">
[19:34:17.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:34:17.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:34:17.370]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:34:17.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:34:17.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:34:17.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:34:17.371]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:34:17.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:34:17.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:34:17.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:34:17.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:34:17.373]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:34:17.373]          </block>
[19:34:17.373]          // end if-block "!hasDormant"
[19:34:17.373]        </control>
[19:34:17.373]        // end if-block "isSWJ"
[19:34:17.373]      </control>
[19:34:17.373]      <control if="!isSWJ" while="" timeout="0" info="">
[19:34:17.373]        // if-block "!isSWJ"
[19:34:17.373]          // =>  FALSE
[19:34:17.373]        // skip if-block "!isSWJ"
[19:34:17.373]      </control>
[19:34:17.373]      <block atomic="false" info="">
[19:34:17.373]        ReadDP(0x0);
[19:34:17.374]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:34:17.374]      </block>
[19:34:17.374]      // end if-block "protType == 2"
[19:34:17.374]    </control>
[19:34:17.374]  </sequence>
[19:34:17.374]  
[19:34:17.375]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:34:17.375]  
[19:34:17.375]  <debugvars>
[19:34:17.375]    // Pre-defined
[19:34:17.376]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:34:17.376]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:34:17.376]    __dp=0x00000000
[19:34:17.376]    __ap=0x00000000
[19:34:17.376]    __traceout=0x00000000      (Trace Disabled)
[19:34:17.376]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:34:17.376]    __FlashAddr=0x00000000
[19:34:17.377]    __FlashLen=0x00000000
[19:34:17.377]    __FlashArg=0x00000000
[19:34:17.377]    __FlashOp=0x00000000
[19:34:17.377]    __Result=0x00000000
[19:34:17.377]  </debugvars>
[19:34:17.377]  
[19:34:17.377]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:34:17.377]    <block atomic="false" info="">
[19:34:17.377]      __var SW_DP_ABORT       = 0x0;
[19:34:17.377]        // -> [SW_DP_ABORT <= 0x00000000]
[19:34:17.377]      __var DP_CTRL_STAT      = 0x4;
[19:34:17.377]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:34:17.378]      __var DP_SELECT         = 0x8;
[19:34:17.378]        // -> [DP_SELECT <= 0x00000008]
[19:34:17.378]      __var powered_down      = 0;
[19:34:17.378]        // -> [powered_down <= 0x00000000]
[19:34:17.378]      WriteDP(DP_SELECT, 0x00000000);
[19:34:17.378]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:34:17.379]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:34:17.380]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:34:17.380]        // -> [powered_down <= 0x00000001]
[19:34:17.380]    </block>
[19:34:17.380]    <control if="powered_down" while="" timeout="0" info="">
[19:34:17.380]      // if-block "powered_down"
[19:34:17.381]        // =>  TRUE
[19:34:17.381]      <block atomic="false" info="">
[19:34:17.381]        Message(0, "Debug/System power-up request sent");
[19:34:17.382]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:34:17.383]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:34:17.383]      </block>
[19:34:17.383]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:34:17.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:34:17.384]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:34:17.384]        // while-condition  =>  FALSE
[19:34:17.384]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:34:17.384]      </control>
[19:34:17.384]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:34:17.384]        // if-block "(__protocol & 0xFFFF) == 1"
[19:34:17.384]          // =>  FALSE
[19:34:17.384]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:34:17.384]      </control>
[19:34:17.384]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:34:17.384]        // if-block "(__protocol & 0xFFFF) == 2"
[19:34:17.384]          // =>  TRUE
[19:34:17.385]        <block atomic="false" info="">
[19:34:17.385]          Message(0, "executing SWD power up");
[19:34:17.386]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:34:17.387]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:34:17.387]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:34:17.387]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:34:17.387]        </block>
[19:34:17.388]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:34:17.388]      </control>
[19:34:17.388]      // end if-block "powered_down"
[19:34:17.388]    </control>
[19:34:17.388]    <block atomic="false" info="">
[19:34:17.388]      __var DEBUG_PORT_VAL    = 0;
[19:34:17.389]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:34:17.389]      __var ACCESS_POINT_VAL  = 0;
[19:34:17.389]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:34:17.389]      __ap = 1; 
[19:34:17.389]        // -> [__ap <= 0x00000001]
[19:34:17.389]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:34:17.391]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:34:17.391]      __ap = 4;
[19:34:17.391]        // -> [__ap <= 0x00000004]
[19:34:17.391]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:34:17.392]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:34:17.392]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:34:17.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:34:17.394]    </block>
[19:34:17.394]    <block atomic="false" info="">
[19:34:17.394]      __var nReset = 0x80;
[19:34:17.394]        // -> [nReset <= 0x00000080]
[19:34:17.394]      __var canReadPins = 0;
[19:34:17.394]        // -> [canReadPins <= 0x00000000]
[19:34:17.394]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:34:17.394]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:34:17.394]        // -> [canReadPins <= 0x00000001]
[19:34:17.394]    </block>
[19:34:17.395]    <control if="" while="1" timeout="200" info="">
[19:34:17.395]      // while "1"  (timeout="200")
[19:34:17.395]      // while-condition  =>  TRUE
[19:34:17.395]      // while "1"  (timeout="200")
[19:34:17.395]      // while-condition  =>  TRUE
[19:34:17.395]      // while "1"  (timeout="200")
[19:34:17.395]      // while-condition  =>  TRUE
[19:34:17.395]      // while "1"  (timeout="200")
[19:34:17.395]      // while-condition  =>  TRUE
[19:34:17.395]      // while "1"  (timeout="200")
[19:34:17.396]      // while-condition  =>  TRUE
[19:34:17.396]      // while "1"  (timeout="200")
[19:34:17.396]      // while-condition  =>  TRUE
[19:34:17.396]      // while "1"  (timeout="200")
[19:34:17.396]      // while-condition  =>  TRUE
[19:34:17.396]      // while "1"  (timeout="200")
[19:34:17.396]      // while-condition  =>  TRUE
[19:34:17.396]      // while "1"  (timeout="200")
[19:34:17.396]      // while-condition  =>  TRUE
[19:34:17.396]      // while "1"  (timeout="200")
[19:34:17.396]      // while-condition  =>  TRUE
[19:34:17.396]      // while "1"  (timeout="200")
[19:34:17.397]      // while-condition  =>  TRUE
[19:34:17.397]      // while "1"  (timeout="200")
[19:34:17.397]      // while-condition  =>  TRUE
[19:34:17.397]      // while "1"  (timeout="200")
[19:34:17.397]      // while-condition  =>  TRUE
[19:34:17.397]      // while "1"  (timeout="200")
[19:34:17.397]      // while-condition  =>  TRUE
[19:34:17.397]      // while "1"  (timeout="200")
[19:34:17.397]      // while-condition  =>  TRUE
[19:34:17.397]      // while "1"  (timeout="200")
[19:34:17.397]      // while-condition  =>  TRUE
[19:34:17.398]      // while "1"  (timeout="200")
[19:34:17.398]      // while-condition  =>  TRUE
[19:34:17.398]      // while "1"  (timeout="200")
[19:34:17.398]      // while-condition  =>  TRUE
[19:34:17.398]      // while "1"  (timeout="200")
[19:34:17.398]      // while-condition  =>  TRUE
[19:34:17.398]      // while "1"  (timeout="200")
[19:34:17.398]      // while-condition  =>  TRUE
[19:34:17.398]      // while "1"  (timeout="200")
[19:34:17.398]      // while-condition  =>  TRUE
[19:34:17.398]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.399]      // while "1"  (timeout="200")
[19:34:17.399]      // while-condition  =>  TRUE
[19:34:17.401]      // while "1"  (timeout="200")
[19:34:17.401]      // while-condition  =>  TRUE
[19:34:17.401]      // while "1"  (timeout="200")
[19:34:17.401]      // while-condition  =>  TRUE
[19:34:17.401]      // while "1"  (timeout="200")
[19:34:17.401]      // while-condition  =>  TRUE
[19:34:17.401]      // while "1"  (timeout="200")
[19:34:17.401]      // while-condition  =>  TRUE
[19:34:17.401]      // while "1"  (timeout="200")
[19:34:17.401]      // while-condition  =>  TRUE
[19:34:17.401]      // while "1"  (timeout="200")
[19:34:17.402]      // while-condition  =>  TRUE
[19:34:17.402]      // while "1"  (timeout="200")
[19:34:17.402]      // while-condition  =>  TRUE
[19:34:17.402]      // while "1"  (timeout="200")
[19:34:17.402]      // while-condition  =>  TRUE
[19:34:17.402]      // while "1"  (timeout="200")
[19:34:17.402]      // while-condition  =>  TRUE
[19:34:17.402]      // while "1"  (timeout="200")
[19:34:17.402]      // while-condition  =>  TRUE
[19:34:17.402]      // while "1"  (timeout="200")
[19:34:17.402]      // while-condition  =>  TRUE
[19:34:17.403]      // while "1"  (timeout="200")
[19:34:17.403]      // while-condition  =>  TRUE
[19:34:17.403]      // while "1"  (timeout="200")
[19:34:17.403]      // while-condition  =>  TRUE
[19:34:17.403]      // while "1"  (timeout="200")
[19:34:17.403]      // while-condition  =>  TRUE
[19:34:17.403]      // while "1"  (timeout="200")
[19:34:17.403]      // while-condition  =>  TRUE
[19:34:17.404]      // while "1"  (timeout="200")
[19:34:17.404]      // while-condition  =>  TRUE
[19:34:17.404]      // while "1"  (timeout="200")
[19:34:17.404]      // while-condition  =>  TRUE
[19:34:17.404]      // while "1"  (timeout="200")
[19:34:17.404]      // while-condition  =>  TRUE
[19:34:17.404]      // while "1"  (timeout="200")
[19:34:17.404]      // while-condition  =>  TRUE
[19:34:17.404]      // while "1"  (timeout="200")
[19:34:17.404]      // while-condition  =>  TRUE
[19:34:17.404]      // while "1"  (timeout="200")
[19:34:17.404]      // while-condition  =>  TRUE
[19:34:17.404]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.405]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.405]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.405]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.405]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.405]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.405]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.405]      // while "1"  (timeout="200")
[19:34:17.405]      // while-condition  =>  TRUE
[19:34:17.406]      // while "1"  (timeout="200")
[19:34:17.406]      // while-condition  =>  TRUE
[19:34:17.406]      // while "1"  (timeout="200")
[19:34:17.406]      // while-condition  =>  TRUE
[19:34:17.406]      // while "1"  (timeout="200")
[19:34:17.406]      // while-condition  =>  TRUE
[19:34:17.406]      // while "1"  (timeout="200")
[19:34:17.406]      // while-condition  =>  TRUE
[19:34:17.406]      // while "1"  (timeout="200")
[19:34:17.406]      // while-condition  =>  TRUE
[19:34:17.406]      // while "1"  (timeout="200")
[19:34:17.406]      // while-condition  =>  TRUE
[19:34:17.406]      // while "1"  (timeout="200")
[19:34:17.408]      // while-condition  =>  TRUE
[19:34:17.408]      // while "1"  (timeout="200")
[19:34:17.408]      // while-condition  =>  TRUE
[19:34:17.408]      // while "1"  (timeout="200")
[19:34:17.408]      // while-condition  =>  TRUE
[19:34:17.408]      // while "1"  (timeout="200")
[19:34:17.408]      // while-condition  =>  TRUE
[19:34:17.408]      // while "1"  (timeout="200")
[19:34:17.408]      // while-condition  =>  TRUE
[19:34:17.408]      // while "1"  (timeout="200")
[19:34:17.408]      // while-condition  =>  TRUE
[19:34:17.408]      // while "1"  (timeout="200")
[19:34:17.408]      // while-condition  =>  TRUE
[19:34:17.409]      // while "1"  (timeout="200")
[19:34:17.409]      // while-condition  =>  TRUE
[19:34:17.409]      // while "1"  (timeout="200")
[19:34:17.409]      // while-condition  =>  TRUE
[19:34:17.409]      // while "1"  (timeout="200")
[19:34:17.409]      // while-condition  =>  TRUE
[19:34:17.409]      // while "1"  (timeout="200")
[19:34:17.409]      // while-condition  =>  TRUE
[19:34:17.409]      // while "1"  (timeout="200")
[19:34:17.409]      // while-condition  =>  TRUE
[19:34:17.409]      // while "1"  (timeout="200")
[19:34:17.409]      // while-condition  =>  TRUE
[19:34:17.409]      // while "1"  (timeout="200")
[19:34:17.411]      // while-condition  =>  TRUE
[19:34:17.411]      // while "1"  (timeout="200")
[19:34:17.411]      // while  =>  TIMEOUT
[19:34:17.411]      // end while "1"
[19:34:17.411]    </control>
[19:34:17.411]    <control if="canReadPins" while="" timeout="0" info="">
[19:34:17.411]      // if-block "canReadPins"
[19:34:17.411]        // =>  TRUE
[19:34:17.411]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:34:17.411]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:34:17.411]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:34:17.411]        // while-condition  =>  FALSE
[19:34:17.411]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:34:17.411]      </control>
[19:34:17.411]      // end if-block "canReadPins"
[19:34:17.413]    </control>
[19:34:17.413]    <control if="!canReadPins" while="" timeout="0" info="">
[19:34:17.413]      // if-block "!canReadPins"
[19:34:17.413]        // =>  FALSE
[19:34:17.413]      // skip if-block "!canReadPins"
[19:34:17.413]    </control>
[19:34:17.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:34:17.413]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:34:17.413]        // =>  TRUE
[19:34:17.413]      <block atomic="false" info="">
[19:34:17.413]        WriteAP(0x00, 0x190008);
[19:34:17.414]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:34:17.414]        WriteAP(0xF0, 0x01);
[19:34:17.415]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:34:17.415]      </block>
[19:34:17.415]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:34:17.415]    </control>
[19:34:17.415]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:34:17.415]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:34:17.416]        // =>  FALSE
[19:34:17.416]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:34:17.416]    </control>
[19:34:17.416]    <block atomic="false" info="">
[19:34:17.416]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:34:17.417]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:34:17.417]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:34:17.417]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:34:17.419]      __ap = 0; //lets make sure we reset the access point selection
[19:34:17.419]        // -> [__ap <= 0x00000000]
[19:34:17.419]    </block>
[19:34:17.419]  </sequence>
[19:34:17.419]  
[19:34:17.426]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:34:17.426]  
[19:34:17.426]  <debugvars>
[19:34:17.426]    // Pre-defined
[19:34:17.426]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:34:17.427]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:34:17.427]    __dp=0x00000000
[19:34:17.427]    __ap=0x00000000
[19:34:17.427]    __traceout=0x00000000      (Trace Disabled)
[19:34:17.427]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:34:17.427]    __FlashAddr=0x00000000
[19:34:17.427]    __FlashLen=0x00000000
[19:34:17.427]    __FlashArg=0x00000000
[19:34:17.427]    __FlashOp=0x00000000
[19:34:17.427]    __Result=0x00000000
[19:34:17.428]  </debugvars>
[19:34:17.428]  
[19:34:17.428]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:34:17.428]    <block atomic="false" info="">
[19:34:17.428]      __var deviceID = 0;
[19:34:17.428]        // -> [deviceID <= 0x00000000]
[19:34:17.428]      __var version = 0;
[19:34:17.428]        // -> [version <= 0x00000000]
[19:34:17.428]      __var partNum = 0;
[19:34:17.428]        // -> [partNum <= 0x00000000]
[19:34:17.428]      __var manuf = 0;
[19:34:17.428]        // -> [manuf <= 0x00000000]
[19:34:17.428]      __var isMSPM0G1X0X_G3X0X = 0;
[19:34:17.428]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:34:17.429]      __var isProduction = 0;
[19:34:17.429]        // -> [isProduction <= 0x00000000]
[19:34:17.429]      __var continueId = 0;
[19:34:17.429]        // -> [continueId <= 0x00000000]
[19:34:17.429]      deviceID =   Read32(0x41C40004);
[19:34:17.431]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:34:17.431]        // -> [deviceID <= 0x2BB8802F]
[19:34:17.431]      version = deviceID >> 28;
[19:34:17.431]        // -> [version <= 0x00000002]
[19:34:17.431]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:34:17.432]        // -> [partNum <= 0x0000BB88]
[19:34:17.432]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:34:17.432]        // -> [manuf <= 0x00000017]
[19:34:17.432]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:34:17.432]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:34:17.432]      isProduction = (version > 0);
[19:34:17.432]        // -> [isProduction <= 0x00000001]
[19:34:17.432]    </block>
[19:34:17.432]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:34:17.432]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:34:17.433]        // =>  FALSE
[19:34:17.433]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:34:17.433]    </control>
[19:34:17.433]    <control if="continueId == 4" while="" timeout="0" info="">
[19:34:17.433]      // if-block "continueId == 4"
[19:34:17.433]        // =>  FALSE
[19:34:17.433]      // skip if-block "continueId == 4"
[19:34:17.433]    </control>
[19:34:17.433]    <control if="!isProduction" while="" timeout="0" info="">
[19:34:17.433]      // if-block "!isProduction"
[19:34:17.433]        // =>  FALSE
[19:34:17.433]      // skip if-block "!isProduction"
[19:34:17.433]    </control>
[19:34:17.434]  </sequence>
[19:34:17.434]  
[19:35:18.828]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:35:18.828]  
[19:35:18.836]  <debugvars>
[19:35:18.836]    // Pre-defined
[19:35:18.836]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:35:18.836]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:35:18.837]    __dp=0x00000000
[19:35:18.837]    __ap=0x00000000
[19:35:18.837]    __traceout=0x00000000      (Trace Disabled)
[19:35:18.837]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:35:18.837]    __FlashAddr=0x00000000
[19:35:18.837]    __FlashLen=0x00000000
[19:35:18.837]    __FlashArg=0x00000000
[19:35:18.837]    __FlashOp=0x00000000
[19:35:18.837]    __Result=0x00000000
[19:35:18.837]  </debugvars>
[19:35:18.837]  
[19:35:18.838]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:35:18.838]    <block atomic="false" info="">
[19:35:18.838]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:35:18.838]        // -> [isSWJ <= 0x00000001]
[19:35:18.838]      __var hasDormant = __protocol & 0x00020000;
[19:35:18.838]        // -> [hasDormant <= 0x00000000]
[19:35:18.838]      __var protType   = __protocol & 0x0000FFFF;
[19:35:18.838]        // -> [protType <= 0x00000002]
[19:35:18.838]    </block>
[19:35:18.838]    <control if="protType == 1" while="" timeout="0" info="">
[19:35:18.839]      // if-block "protType == 1"
[19:35:18.839]        // =>  FALSE
[19:35:18.839]      // skip if-block "protType == 1"
[19:35:18.839]    </control>
[19:35:18.839]    <control if="protType == 2" while="" timeout="0" info="">
[19:35:18.839]      // if-block "protType == 2"
[19:35:18.839]        // =>  TRUE
[19:35:18.839]      <control if="isSWJ" while="" timeout="0" info="">
[19:35:18.839]        // if-block "isSWJ"
[19:35:18.839]          // =>  TRUE
[19:35:18.840]        <control if="hasDormant" while="" timeout="0" info="">
[19:35:18.840]          // if-block "hasDormant"
[19:35:18.840]            // =>  FALSE
[19:35:18.840]          // skip if-block "hasDormant"
[19:35:18.840]        </control>
[19:35:18.840]        <control if="!hasDormant" while="" timeout="0" info="">
[19:35:18.840]          // if-block "!hasDormant"
[19:35:18.840]            // =>  TRUE
[19:35:18.840]          <block atomic="false" info="">
[19:35:18.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:35:18.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:35:18.841]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:35:18.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:35:18.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:35:18.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:35:18.842]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:35:18.843]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:35:18.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:35:18.843]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:35:18.843]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:35:18.843]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:35:18.844]          </block>
[19:35:18.844]          // end if-block "!hasDormant"
[19:35:18.844]        </control>
[19:35:18.844]        // end if-block "isSWJ"
[19:35:18.844]      </control>
[19:35:18.844]      <control if="!isSWJ" while="" timeout="0" info="">
[19:35:18.844]        // if-block "!isSWJ"
[19:35:18.845]          // =>  FALSE
[19:35:18.845]        // skip if-block "!isSWJ"
[19:35:18.845]      </control>
[19:35:18.845]      <block atomic="false" info="">
[19:35:18.845]        ReadDP(0x0);
[19:35:18.845]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:35:18.845]      </block>
[19:35:18.846]      // end if-block "protType == 2"
[19:35:18.846]    </control>
[19:35:18.846]  </sequence>
[19:35:18.846]  
[19:35:18.846]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:35:18.846]  
[19:35:18.846]  <debugvars>
[19:35:18.846]    // Pre-defined
[19:35:18.847]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:35:18.847]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:35:18.847]    __dp=0x00000000
[19:35:18.847]    __ap=0x00000000
[19:35:18.847]    __traceout=0x00000000      (Trace Disabled)
[19:35:18.847]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:35:18.847]    __FlashAddr=0x00000000
[19:35:18.847]    __FlashLen=0x00000000
[19:35:18.847]    __FlashArg=0x00000000
[19:35:18.847]    __FlashOp=0x00000000
[19:35:18.847]    __Result=0x00000000
[19:35:18.847]  </debugvars>
[19:35:18.847]  
[19:35:18.847]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:35:18.847]    <block atomic="false" info="">
[19:35:18.847]      __var SW_DP_ABORT       = 0x0;
[19:35:18.849]        // -> [SW_DP_ABORT <= 0x00000000]
[19:35:18.849]      __var DP_CTRL_STAT      = 0x4;
[19:35:18.849]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:35:18.849]      __var DP_SELECT         = 0x8;
[19:35:18.849]        // -> [DP_SELECT <= 0x00000008]
[19:35:18.849]      __var powered_down      = 0;
[19:35:18.849]        // -> [powered_down <= 0x00000000]
[19:35:18.850]      WriteDP(DP_SELECT, 0x00000000);
[19:35:18.850]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:35:18.850]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:35:18.851]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:35:18.851]        // -> [powered_down <= 0x00000001]
[19:35:18.851]    </block>
[19:35:18.851]    <control if="powered_down" while="" timeout="0" info="">
[19:35:18.851]      // if-block "powered_down"
[19:35:18.851]        // =>  TRUE
[19:35:18.851]      <block atomic="false" info="">
[19:35:18.851]        Message(0, "Debug/System power-up request sent");
[19:35:18.853]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:35:18.853]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:35:18.854]      </block>
[19:35:18.854]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:35:18.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:35:18.855]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:35:18.855]        // while-condition  =>  FALSE
[19:35:18.855]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:35:18.855]      </control>
[19:35:18.855]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:35:18.856]        // if-block "(__protocol & 0xFFFF) == 1"
[19:35:18.856]          // =>  FALSE
[19:35:18.856]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:35:18.856]      </control>
[19:35:18.856]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:35:18.856]        // if-block "(__protocol & 0xFFFF) == 2"
[19:35:18.856]          // =>  TRUE
[19:35:18.856]        <block atomic="false" info="">
[19:35:18.856]          Message(0, "executing SWD power up");
[19:35:18.858]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:35:18.858]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:35:18.858]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:35:18.859]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:35:18.859]        </block>
[19:35:18.859]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:35:18.859]      </control>
[19:35:18.860]      // end if-block "powered_down"
[19:35:18.860]    </control>
[19:35:18.860]    <block atomic="false" info="">
[19:35:18.860]      __var DEBUG_PORT_VAL    = 0;
[19:35:18.860]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:35:18.860]      __var ACCESS_POINT_VAL  = 0;
[19:35:18.861]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:35:18.861]      __ap = 1; 
[19:35:18.861]        // -> [__ap <= 0x00000001]
[19:35:18.861]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:35:18.862]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:35:18.862]      __ap = 4;
[19:35:18.862]        // -> [__ap <= 0x00000004]
[19:35:18.862]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:35:18.863]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:35:18.863]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:35:18.863]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:35:18.865]    </block>
[19:35:18.865]    <block atomic="false" info="">
[19:35:18.865]      __var nReset = 0x80;
[19:35:18.865]        // -> [nReset <= 0x00000080]
[19:35:18.865]      __var canReadPins = 0;
[19:35:18.865]        // -> [canReadPins <= 0x00000000]
[19:35:18.866]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:35:18.866]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:35:18.866]        // -> [canReadPins <= 0x00000001]
[19:35:18.866]    </block>
[19:35:18.867]    <control if="" while="1" timeout="200" info="">
[19:35:18.867]      // while "1"  (timeout="200")
[19:35:18.867]      // while-condition  =>  TRUE
[19:35:18.867]      // while "1"  (timeout="200")
[19:35:18.867]      // while-condition  =>  TRUE
[19:35:18.867]      // while "1"  (timeout="200")
[19:35:18.867]      // while-condition  =>  TRUE
[19:35:18.867]      // while "1"  (timeout="200")
[19:35:18.867]      // while-condition  =>  TRUE
[19:35:18.867]      // while "1"  (timeout="200")
[19:35:18.867]      // while-condition  =>  TRUE
[19:35:18.867]      // while "1"  (timeout="200")
[19:35:18.867]      // while-condition  =>  TRUE
[19:35:18.867]      // while "1"  (timeout="200")
[19:35:18.868]      // while-condition  =>  TRUE
[19:35:18.868]      // while "1"  (timeout="200")
[19:35:18.868]      // while-condition  =>  TRUE
[19:35:18.868]      // while "1"  (timeout="200")
[19:35:18.868]      // while-condition  =>  TRUE
[19:35:18.868]      // while "1"  (timeout="200")
[19:35:18.868]      // while-condition  =>  TRUE
[19:35:18.868]      // while "1"  (timeout="200")
[19:35:18.868]      // while-condition  =>  TRUE
[19:35:18.868]      // while "1"  (timeout="200")
[19:35:18.869]      // while-condition  =>  TRUE
[19:35:18.869]      // while "1"  (timeout="200")
[19:35:18.869]      // while-condition  =>  TRUE
[19:35:18.869]      // while "1"  (timeout="200")
[19:35:18.869]      // while-condition  =>  TRUE
[19:35:18.869]      // while "1"  (timeout="200")
[19:35:18.869]      // while-condition  =>  TRUE
[19:35:18.869]      // while "1"  (timeout="200")
[19:35:18.869]      // while-condition  =>  TRUE
[19:35:18.869]      // while "1"  (timeout="200")
[19:35:18.869]      // while-condition  =>  TRUE
[19:35:18.869]      // while "1"  (timeout="200")
[19:35:18.870]      // while-condition  =>  TRUE
[19:35:18.870]      // while "1"  (timeout="200")
[19:35:18.870]      // while-condition  =>  TRUE
[19:35:18.870]      // while "1"  (timeout="200")
[19:35:18.870]      // while-condition  =>  TRUE
[19:35:18.870]      // while "1"  (timeout="200")
[19:35:18.870]      // while-condition  =>  TRUE
[19:35:18.870]      // while "1"  (timeout="200")
[19:35:18.870]      // while-condition  =>  TRUE
[19:35:18.870]      // while "1"  (timeout="200")
[19:35:18.870]      // while-condition  =>  TRUE
[19:35:18.870]      // while "1"  (timeout="200")
[19:35:18.871]      // while-condition  =>  TRUE
[19:35:18.871]      // while "1"  (timeout="200")
[19:35:18.871]      // while-condition  =>  TRUE
[19:35:18.871]      // while "1"  (timeout="200")
[19:35:18.871]      // while-condition  =>  TRUE
[19:35:18.871]      // while "1"  (timeout="200")
[19:35:18.871]      // while-condition  =>  TRUE
[19:35:18.871]      // while "1"  (timeout="200")
[19:35:18.872]      // while-condition  =>  TRUE
[19:35:18.872]      // while "1"  (timeout="200")
[19:35:18.872]      // while-condition  =>  TRUE
[19:35:18.872]      // while "1"  (timeout="200")
[19:35:18.872]      // while-condition  =>  TRUE
[19:35:18.872]      // while "1"  (timeout="200")
[19:35:18.872]      // while-condition  =>  TRUE
[19:35:18.872]      // while "1"  (timeout="200")
[19:35:18.872]      // while-condition  =>  TRUE
[19:35:18.872]      // while "1"  (timeout="200")
[19:35:18.872]      // while-condition  =>  TRUE
[19:35:18.872]      // while "1"  (timeout="200")
[19:35:18.872]      // while-condition  =>  TRUE
[19:35:18.872]      // while "1"  (timeout="200")
[19:35:18.873]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.874]      // while "1"  (timeout="200")
[19:35:18.874]      // while-condition  =>  TRUE
[19:35:18.875]      // while "1"  (timeout="200")
[19:35:18.875]      // while-condition  =>  TRUE
[19:35:18.875]      // while "1"  (timeout="200")
[19:35:18.875]      // while-condition  =>  TRUE
[19:35:18.875]      // while "1"  (timeout="200")
[19:35:18.875]      // while-condition  =>  TRUE
[19:35:18.875]      // while "1"  (timeout="200")
[19:35:18.875]      // while-condition  =>  TRUE
[19:35:18.875]      // while "1"  (timeout="200")
[19:35:18.875]      // while-condition  =>  TRUE
[19:35:18.877]      // while "1"  (timeout="200")
[19:35:18.877]      // while-condition  =>  TRUE
[19:35:18.877]      // while "1"  (timeout="200")
[19:35:18.877]      // while-condition  =>  TRUE
[19:35:18.877]      // while "1"  (timeout="200")
[19:35:18.878]      // while-condition  =>  TRUE
[19:35:18.878]      // while "1"  (timeout="200")
[19:35:18.878]      // while-condition  =>  TRUE
[19:35:18.878]      // while "1"  (timeout="200")
[19:35:18.878]      // while-condition  =>  TRUE
[19:35:18.878]      // while "1"  (timeout="200")
[19:35:18.878]      // while-condition  =>  TRUE
[19:35:18.878]      // while "1"  (timeout="200")
[19:35:18.878]      // while-condition  =>  TRUE
[19:35:18.879]      // while "1"  (timeout="200")
[19:35:18.879]      // while-condition  =>  TRUE
[19:35:18.879]      // while "1"  (timeout="200")
[19:35:18.879]      // while-condition  =>  TRUE
[19:35:18.879]      // while "1"  (timeout="200")
[19:35:18.879]      // while-condition  =>  TRUE
[19:35:18.879]      // while "1"  (timeout="200")
[19:35:18.879]      // while-condition  =>  TRUE
[19:35:18.879]      // while "1"  (timeout="200")
[19:35:18.879]      // while-condition  =>  TRUE
[19:35:18.880]      // while "1"  (timeout="200")
[19:35:18.880]      // while  =>  TIMEOUT
[19:35:18.880]      // end while "1"
[19:35:18.880]    </control>
[19:35:18.880]    <control if="canReadPins" while="" timeout="0" info="">
[19:35:18.880]      // if-block "canReadPins"
[19:35:18.880]        // =>  TRUE
[19:35:18.880]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:35:18.880]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:35:18.881]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:35:18.881]        // while-condition  =>  FALSE
[19:35:18.881]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:35:18.881]      </control>
[19:35:18.881]      // end if-block "canReadPins"
[19:35:18.881]    </control>
[19:35:18.881]    <control if="!canReadPins" while="" timeout="0" info="">
[19:35:18.881]      // if-block "!canReadPins"
[19:35:18.881]        // =>  FALSE
[19:35:18.881]      // skip if-block "!canReadPins"
[19:35:18.881]    </control>
[19:35:18.881]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:35:18.881]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:35:18.881]        // =>  TRUE
[19:35:18.881]      <block atomic="false" info="">
[19:35:18.881]        WriteAP(0x00, 0x190008);
[19:35:18.882]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:35:18.882]        WriteAP(0xF0, 0x01);
[19:35:18.883]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:35:18.883]      </block>
[19:35:18.884]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:35:18.884]    </control>
[19:35:18.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:35:18.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:35:18.884]        // =>  FALSE
[19:35:18.884]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:35:18.884]    </control>
[19:35:18.884]    <block atomic="false" info="">
[19:35:18.884]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:35:18.885]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:35:18.885]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:35:18.885]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:35:18.888]      __ap = 0; //lets make sure we reset the access point selection
[19:35:18.888]        // -> [__ap <= 0x00000000]
[19:35:18.888]    </block>
[19:35:18.888]  </sequence>
[19:35:18.888]  
[19:35:18.895]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:35:18.895]  
[19:35:18.895]  <debugvars>
[19:35:18.895]    // Pre-defined
[19:35:18.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:35:18.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:35:18.895]    __dp=0x00000000
[19:35:18.895]    __ap=0x00000000
[19:35:18.895]    __traceout=0x00000000      (Trace Disabled)
[19:35:18.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:35:18.895]    __FlashAddr=0x00000000
[19:35:18.895]    __FlashLen=0x00000000
[19:35:18.895]    __FlashArg=0x00000000
[19:35:18.895]    __FlashOp=0x00000000
[19:35:18.895]    __Result=0x00000000
[19:35:18.895]  </debugvars>
[19:35:18.895]  
[19:35:18.895]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:35:18.895]    <block atomic="false" info="">
[19:35:18.895]      __var deviceID = 0;
[19:35:18.896]        // -> [deviceID <= 0x00000000]
[19:35:18.896]      __var version = 0;
[19:35:18.896]        // -> [version <= 0x00000000]
[19:35:18.896]      __var partNum = 0;
[19:35:18.896]        // -> [partNum <= 0x00000000]
[19:35:18.896]      __var manuf = 0;
[19:35:18.896]        // -> [manuf <= 0x00000000]
[19:35:18.896]      __var isMSPM0G1X0X_G3X0X = 0;
[19:35:18.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:35:18.896]      __var isProduction = 0;
[19:35:18.896]        // -> [isProduction <= 0x00000000]
[19:35:18.896]      __var continueId = 0;
[19:35:18.896]        // -> [continueId <= 0x00000000]
[19:35:18.898]      deviceID =   Read32(0x41C40004);
[19:35:18.899]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:35:18.899]        // -> [deviceID <= 0x2BB8802F]
[19:35:18.899]      version = deviceID >> 28;
[19:35:18.899]        // -> [version <= 0x00000002]
[19:35:18.899]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:35:18.899]        // -> [partNum <= 0x0000BB88]
[19:35:18.900]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:35:18.900]        // -> [manuf <= 0x00000017]
[19:35:18.900]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:35:18.900]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:35:18.900]      isProduction = (version > 0);
[19:35:18.900]        // -> [isProduction <= 0x00000001]
[19:35:18.900]    </block>
[19:35:18.900]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:35:18.900]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:35:18.901]        // =>  FALSE
[19:35:18.901]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:35:18.901]    </control>
[19:35:18.901]    <control if="continueId == 4" while="" timeout="0" info="">
[19:35:18.901]      // if-block "continueId == 4"
[19:35:18.901]        // =>  FALSE
[19:35:18.901]      // skip if-block "continueId == 4"
[19:35:18.901]    </control>
[19:35:18.901]    <control if="!isProduction" while="" timeout="0" info="">
[19:35:18.901]      // if-block "!isProduction"
[19:35:18.901]        // =>  FALSE
[19:35:18.901]      // skip if-block "!isProduction"
[19:35:18.901]    </control>
[19:35:18.902]  </sequence>
[19:35:18.902]  
[19:35:34.789]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:35:34.789]  
[19:35:34.798]  <debugvars>
[19:35:34.798]    // Pre-defined
[19:35:34.798]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:35:34.798]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:35:34.798]    __dp=0x00000000
[19:35:34.799]    __ap=0x00000000
[19:35:34.799]    __traceout=0x00000000      (Trace Disabled)
[19:35:34.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:35:34.799]    __FlashAddr=0x00000000
[19:35:34.799]    __FlashLen=0x00000000
[19:35:34.799]    __FlashArg=0x00000000
[19:35:34.799]    __FlashOp=0x00000000
[19:35:34.799]    __Result=0x00000000
[19:35:34.800]  </debugvars>
[19:35:34.800]  
[19:35:34.800]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:35:34.800]    <block atomic="false" info="">
[19:35:34.800]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:35:34.800]        // -> [isSWJ <= 0x00000001]
[19:35:34.801]      __var hasDormant = __protocol & 0x00020000;
[19:35:34.801]        // -> [hasDormant <= 0x00000000]
[19:35:34.801]      __var protType   = __protocol & 0x0000FFFF;
[19:35:34.801]        // -> [protType <= 0x00000002]
[19:35:34.801]    </block>
[19:35:34.801]    <control if="protType == 1" while="" timeout="0" info="">
[19:35:34.801]      // if-block "protType == 1"
[19:35:34.801]        // =>  FALSE
[19:35:34.801]      // skip if-block "protType == 1"
[19:35:34.801]    </control>
[19:35:34.801]    <control if="protType == 2" while="" timeout="0" info="">
[19:35:34.801]      // if-block "protType == 2"
[19:35:34.801]        // =>  TRUE
[19:35:34.801]      <control if="isSWJ" while="" timeout="0" info="">
[19:35:34.801]        // if-block "isSWJ"
[19:35:34.802]          // =>  TRUE
[19:35:34.802]        <control if="hasDormant" while="" timeout="0" info="">
[19:35:34.802]          // if-block "hasDormant"
[19:35:34.802]            // =>  FALSE
[19:35:34.802]          // skip if-block "hasDormant"
[19:35:34.802]        </control>
[19:35:34.802]        <control if="!hasDormant" while="" timeout="0" info="">
[19:35:34.802]          // if-block "!hasDormant"
[19:35:34.802]            // =>  TRUE
[19:35:34.802]          <block atomic="false" info="">
[19:35:34.802]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:35:34.802]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:35:34.804]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:35:34.804]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:35:34.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:35:34.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:35:34.805]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:35:34.805]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:35:34.805]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:35:34.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:35:34.805]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:35:34.805]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:35:34.806]          </block>
[19:35:34.806]          // end if-block "!hasDormant"
[19:35:34.806]        </control>
[19:35:34.806]        // end if-block "isSWJ"
[19:35:34.806]      </control>
[19:35:34.806]      <control if="!isSWJ" while="" timeout="0" info="">
[19:35:34.806]        // if-block "!isSWJ"
[19:35:34.807]          // =>  FALSE
[19:35:34.807]        // skip if-block "!isSWJ"
[19:35:34.807]      </control>
[19:35:34.807]      <block atomic="false" info="">
[19:35:34.807]        ReadDP(0x0);
[19:35:34.807]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:35:34.807]      </block>
[19:35:34.807]      // end if-block "protType == 2"
[19:35:34.808]    </control>
[19:35:34.808]  </sequence>
[19:35:34.808]  
[19:35:34.808]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:35:34.808]  
[19:35:34.808]  <debugvars>
[19:35:34.808]    // Pre-defined
[19:35:34.809]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:35:34.809]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:35:34.809]    __dp=0x00000000
[19:35:34.809]    __ap=0x00000000
[19:35:34.809]    __traceout=0x00000000      (Trace Disabled)
[19:35:34.809]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:35:34.809]    __FlashAddr=0x00000000
[19:35:34.809]    __FlashLen=0x00000000
[19:35:34.809]    __FlashArg=0x00000000
[19:35:34.809]    __FlashOp=0x00000000
[19:35:34.809]    __Result=0x00000000
[19:35:34.809]  </debugvars>
[19:35:34.809]  
[19:35:34.809]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:35:34.809]    <block atomic="false" info="">
[19:35:34.809]      __var SW_DP_ABORT       = 0x0;
[19:35:34.809]        // -> [SW_DP_ABORT <= 0x00000000]
[19:35:34.811]      __var DP_CTRL_STAT      = 0x4;
[19:35:34.811]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:35:34.811]      __var DP_SELECT         = 0x8;
[19:35:34.811]        // -> [DP_SELECT <= 0x00000008]
[19:35:34.811]      __var powered_down      = 0;
[19:35:34.811]        // -> [powered_down <= 0x00000000]
[19:35:34.812]      WriteDP(DP_SELECT, 0x00000000);
[19:35:34.812]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:35:34.812]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:35:34.813]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:35:34.813]        // -> [powered_down <= 0x00000001]
[19:35:34.813]    </block>
[19:35:34.813]    <control if="powered_down" while="" timeout="0" info="">
[19:35:34.813]      // if-block "powered_down"
[19:35:34.813]        // =>  TRUE
[19:35:34.813]      <block atomic="false" info="">
[19:35:34.813]        Message(0, "Debug/System power-up request sent");
[19:35:34.814]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:35:34.815]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:35:34.815]      </block>
[19:35:34.815]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:35:34.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:35:34.816]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:35:34.816]        // while-condition  =>  FALSE
[19:35:34.816]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:35:34.816]      </control>
[19:35:34.817]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:35:34.817]        // if-block "(__protocol & 0xFFFF) == 1"
[19:35:34.817]          // =>  FALSE
[19:35:34.817]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:35:34.817]      </control>
[19:35:34.817]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:35:34.817]        // if-block "(__protocol & 0xFFFF) == 2"
[19:35:34.818]          // =>  TRUE
[19:35:34.818]        <block atomic="false" info="">
[19:35:34.819]          Message(0, "executing SWD power up");
[19:35:34.820]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:35:34.820]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:35:34.820]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:35:34.821]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:35:34.821]        </block>
[19:35:34.821]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:35:34.821]      </control>
[19:35:34.821]      // end if-block "powered_down"
[19:35:34.821]    </control>
[19:35:34.821]    <block atomic="false" info="">
[19:35:34.821]      __var DEBUG_PORT_VAL    = 0;
[19:35:34.822]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:35:34.822]      __var ACCESS_POINT_VAL  = 0;
[19:35:34.822]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:35:34.822]      __ap = 1; 
[19:35:34.822]        // -> [__ap <= 0x00000001]
[19:35:34.822]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:35:34.823]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:35:34.823]      __ap = 4;
[19:35:34.823]        // -> [__ap <= 0x00000004]
[19:35:34.823]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:35:34.824]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:35:34.824]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:35:34.824]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:35:34.826]    </block>
[19:35:34.827]    <block atomic="false" info="">
[19:35:34.827]      __var nReset = 0x80;
[19:35:34.827]        // -> [nReset <= 0x00000080]
[19:35:34.827]      __var canReadPins = 0;
[19:35:34.827]        // -> [canReadPins <= 0x00000000]
[19:35:34.827]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:35:34.827]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:35:34.828]        // -> [canReadPins <= 0x00000001]
[19:35:34.828]    </block>
[19:35:34.828]    <control if="" while="1" timeout="200" info="">
[19:35:34.828]      // while "1"  (timeout="200")
[19:35:34.828]      // while-condition  =>  TRUE
[19:35:34.828]      // while "1"  (timeout="200")
[19:35:34.828]      // while-condition  =>  TRUE
[19:35:34.828]      // while "1"  (timeout="200")
[19:35:34.828]      // while-condition  =>  TRUE
[19:35:34.828]      // while "1"  (timeout="200")
[19:35:34.828]      // while-condition  =>  TRUE
[19:35:34.828]      // while "1"  (timeout="200")
[19:35:34.828]      // while-condition  =>  TRUE
[19:35:34.828]      // while "1"  (timeout="200")
[19:35:34.828]      // while-condition  =>  TRUE
[19:35:34.828]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.829]      // while "1"  (timeout="200")
[19:35:34.829]      // while-condition  =>  TRUE
[19:35:34.831]      // while "1"  (timeout="200")
[19:35:34.831]      // while-condition  =>  TRUE
[19:35:34.831]      // while "1"  (timeout="200")
[19:35:34.831]      // while-condition  =>  TRUE
[19:35:34.831]      // while "1"  (timeout="200")
[19:35:34.831]      // while-condition  =>  TRUE
[19:35:34.831]      // while "1"  (timeout="200")
[19:35:34.831]      // while-condition  =>  TRUE
[19:35:34.831]      // while "1"  (timeout="200")
[19:35:34.831]      // while-condition  =>  TRUE
[19:35:34.831]      // while "1"  (timeout="200")
[19:35:34.832]      // while-condition  =>  TRUE
[19:35:34.832]      // while "1"  (timeout="200")
[19:35:34.832]      // while-condition  =>  TRUE
[19:35:34.832]      // while "1"  (timeout="200")
[19:35:34.832]      // while-condition  =>  TRUE
[19:35:34.832]      // while "1"  (timeout="200")
[19:35:34.832]      // while-condition  =>  TRUE
[19:35:34.832]      // while "1"  (timeout="200")
[19:35:34.832]      // while  =>  TIMEOUT
[19:35:34.832]      // end while "1"
[19:35:34.833]    </control>
[19:35:34.833]    <control if="canReadPins" while="" timeout="0" info="">
[19:35:34.833]      // if-block "canReadPins"
[19:35:34.833]        // =>  TRUE
[19:35:34.833]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:35:34.833]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:35:34.833]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:35:34.833]        // while-condition  =>  FALSE
[19:35:34.833]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:35:34.834]      </control>
[19:35:34.834]      // end if-block "canReadPins"
[19:35:34.834]    </control>
[19:35:34.834]    <control if="!canReadPins" while="" timeout="0" info="">
[19:35:34.834]      // if-block "!canReadPins"
[19:35:34.834]        // =>  FALSE
[19:35:34.834]      // skip if-block "!canReadPins"
[19:35:34.834]    </control>
[19:35:34.834]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:35:34.834]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:35:34.834]        // =>  TRUE
[19:35:34.835]      <block atomic="false" info="">
[19:35:34.835]        WriteAP(0x00, 0x190008);
[19:35:34.835]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:35:34.835]        WriteAP(0xF0, 0x01);
[19:35:34.836]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:35:34.836]      </block>
[19:35:34.837]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:35:34.837]    </control>
[19:35:34.837]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:35:34.837]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:35:34.837]        // =>  FALSE
[19:35:34.837]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:35:34.837]    </control>
[19:35:34.837]    <block atomic="false" info="">
[19:35:34.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:35:34.838]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:35:34.838]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:35:34.839]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:35:34.841]      __ap = 0; //lets make sure we reset the access point selection
[19:35:34.841]        // -> [__ap <= 0x00000000]
[19:35:34.841]    </block>
[19:35:34.841]  </sequence>
[19:35:34.841]  
[19:35:34.846]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:35:34.846]  
[19:35:34.846]  <debugvars>
[19:35:34.847]    // Pre-defined
[19:35:34.847]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:35:34.847]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:35:34.847]    __dp=0x00000000
[19:35:34.847]    __ap=0x00000000
[19:35:34.847]    __traceout=0x00000000      (Trace Disabled)
[19:35:34.847]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:35:34.847]    __FlashAddr=0x00000000
[19:35:34.847]    __FlashLen=0x00000000
[19:35:34.847]    __FlashArg=0x00000000
[19:35:34.848]    __FlashOp=0x00000000
[19:35:34.848]    __Result=0x00000000
[19:35:34.848]  </debugvars>
[19:35:34.848]  
[19:35:34.848]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:35:34.848]    <block atomic="false" info="">
[19:35:34.848]      __var deviceID = 0;
[19:35:34.848]        // -> [deviceID <= 0x00000000]
[19:35:34.848]      __var version = 0;
[19:35:34.849]        // -> [version <= 0x00000000]
[19:35:34.849]      __var partNum = 0;
[19:35:34.849]        // -> [partNum <= 0x00000000]
[19:35:34.849]      __var manuf = 0;
[19:35:34.849]        // -> [manuf <= 0x00000000]
[19:35:34.849]      __var isMSPM0G1X0X_G3X0X = 0;
[19:35:34.849]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:35:34.849]      __var isProduction = 0;
[19:35:34.849]        // -> [isProduction <= 0x00000000]
[19:35:34.849]      __var continueId = 0;
[19:35:34.850]        // -> [continueId <= 0x00000000]
[19:35:34.850]      deviceID =   Read32(0x41C40004);
[19:35:34.851]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:35:34.851]        // -> [deviceID <= 0x2BB8802F]
[19:35:34.851]      version = deviceID >> 28;
[19:35:34.851]        // -> [version <= 0x00000002]
[19:35:34.851]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:35:34.852]        // -> [partNum <= 0x0000BB88]
[19:35:34.852]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:35:34.852]        // -> [manuf <= 0x00000017]
[19:35:34.852]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:35:34.852]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:35:34.852]      isProduction = (version > 0);
[19:35:34.852]        // -> [isProduction <= 0x00000001]
[19:35:34.853]    </block>
[19:35:34.853]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:35:34.853]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:35:34.853]        // =>  FALSE
[19:35:34.853]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:35:34.853]    </control>
[19:35:34.853]    <control if="continueId == 4" while="" timeout="0" info="">
[19:35:34.853]      // if-block "continueId == 4"
[19:35:34.853]        // =>  FALSE
[19:35:34.853]      // skip if-block "continueId == 4"
[19:35:34.853]    </control>
[19:35:34.853]    <control if="!isProduction" while="" timeout="0" info="">
[19:35:34.854]      // if-block "!isProduction"
[19:35:34.854]        // =>  FALSE
[19:35:34.854]      // skip if-block "!isProduction"
[19:35:34.854]    </control>
[19:35:34.854]  </sequence>
[19:35:34.854]  
[19:37:07.979]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:37:07.979]  
[19:37:07.987]  <debugvars>
[19:37:07.987]    // Pre-defined
[19:37:07.988]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:07.988]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:07.988]    __dp=0x00000000
[19:37:07.988]    __ap=0x00000000
[19:37:07.988]    __traceout=0x00000000      (Trace Disabled)
[19:37:07.988]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:07.988]    __FlashAddr=0x00000000
[19:37:07.988]    __FlashLen=0x00000000
[19:37:07.988]    __FlashArg=0x00000000
[19:37:07.988]    __FlashOp=0x00000000
[19:37:07.988]    __Result=0x00000000
[19:37:07.988]  </debugvars>
[19:37:07.989]  
[19:37:07.989]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:37:07.989]    <block atomic="false" info="">
[19:37:07.989]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:37:07.989]        // -> [isSWJ <= 0x00000001]
[19:37:07.989]      __var hasDormant = __protocol & 0x00020000;
[19:37:07.989]        // -> [hasDormant <= 0x00000000]
[19:37:07.989]      __var protType   = __protocol & 0x0000FFFF;
[19:37:07.989]        // -> [protType <= 0x00000002]
[19:37:07.989]    </block>
[19:37:07.989]    <control if="protType == 1" while="" timeout="0" info="">
[19:37:07.989]      // if-block "protType == 1"
[19:37:07.989]        // =>  FALSE
[19:37:07.989]      // skip if-block "protType == 1"
[19:37:07.989]    </control>
[19:37:07.989]    <control if="protType == 2" while="" timeout="0" info="">
[19:37:07.989]      // if-block "protType == 2"
[19:37:07.989]        // =>  TRUE
[19:37:07.991]      <control if="isSWJ" while="" timeout="0" info="">
[19:37:07.991]        // if-block "isSWJ"
[19:37:07.991]          // =>  TRUE
[19:37:07.991]        <control if="hasDormant" while="" timeout="0" info="">
[19:37:07.991]          // if-block "hasDormant"
[19:37:07.991]            // =>  FALSE
[19:37:07.991]          // skip if-block "hasDormant"
[19:37:07.991]        </control>
[19:37:07.991]        <control if="!hasDormant" while="" timeout="0" info="">
[19:37:07.991]          // if-block "!hasDormant"
[19:37:07.991]            // =>  TRUE
[19:37:07.992]          <block atomic="false" info="">
[19:37:07.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:37:07.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:07.992]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:37:07.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:37:07.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:37:07.993]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:07.993]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:37:07.993]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:37:07.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:37:07.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:07.994]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:37:07.994]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:37:07.994]          </block>
[19:37:07.994]          // end if-block "!hasDormant"
[19:37:07.994]        </control>
[19:37:07.994]        // end if-block "isSWJ"
[19:37:07.994]      </control>
[19:37:07.995]      <control if="!isSWJ" while="" timeout="0" info="">
[19:37:07.995]        // if-block "!isSWJ"
[19:37:07.995]          // =>  FALSE
[19:37:07.995]        // skip if-block "!isSWJ"
[19:37:07.995]      </control>
[19:37:07.995]      <block atomic="false" info="">
[19:37:07.995]        ReadDP(0x0);
[19:37:07.995]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:37:07.996]      </block>
[19:37:07.996]      // end if-block "protType == 2"
[19:37:07.996]    </control>
[19:37:07.996]  </sequence>
[19:37:07.996]  
[19:37:07.996]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:37:07.996]  
[19:37:07.997]  <debugvars>
[19:37:07.997]    // Pre-defined
[19:37:07.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:07.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:07.997]    __dp=0x00000000
[19:37:07.997]    __ap=0x00000000
[19:37:07.997]    __traceout=0x00000000      (Trace Disabled)
[19:37:07.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:07.997]    __FlashAddr=0x00000000
[19:37:07.997]    __FlashLen=0x00000000
[19:37:07.997]    __FlashArg=0x00000000
[19:37:07.997]    __FlashOp=0x00000000
[19:37:07.998]    __Result=0x00000000
[19:37:07.998]  </debugvars>
[19:37:07.998]  
[19:37:07.998]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:37:07.998]    <block atomic="false" info="">
[19:37:07.998]      __var SW_DP_ABORT       = 0x0;
[19:37:07.998]        // -> [SW_DP_ABORT <= 0x00000000]
[19:37:07.998]      __var DP_CTRL_STAT      = 0x4;
[19:37:07.998]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:37:07.998]      __var DP_SELECT         = 0x8;
[19:37:07.998]        // -> [DP_SELECT <= 0x00000008]
[19:37:07.998]      __var powered_down      = 0;
[19:37:07.999]        // -> [powered_down <= 0x00000000]
[19:37:07.999]      WriteDP(DP_SELECT, 0x00000000);
[19:37:07.999]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:37:07.999]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:37:08.000]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:37:08.001]        // -> [powered_down <= 0x00000001]
[19:37:08.001]    </block>
[19:37:08.001]    <control if="powered_down" while="" timeout="0" info="">
[19:37:08.001]      // if-block "powered_down"
[19:37:08.001]        // =>  TRUE
[19:37:08.001]      <block atomic="false" info="">
[19:37:08.001]        Message(0, "Debug/System power-up request sent");
[19:37:08.003]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:37:08.003]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:37:08.004]      </block>
[19:37:08.004]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:37:08.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:37:08.004]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:37:08.004]        // while-condition  =>  FALSE
[19:37:08.005]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:37:08.005]      </control>
[19:37:08.005]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:37:08.005]        // if-block "(__protocol & 0xFFFF) == 1"
[19:37:08.005]          // =>  FALSE
[19:37:08.005]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:37:08.005]      </control>
[19:37:08.005]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:37:08.005]        // if-block "(__protocol & 0xFFFF) == 2"
[19:37:08.005]          // =>  TRUE
[19:37:08.005]        <block atomic="false" info="">
[19:37:08.005]          Message(0, "executing SWD power up");
[19:37:08.007]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:37:08.007]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:37:08.007]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:37:08.008]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:37:08.008]        </block>
[19:37:08.008]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:37:08.008]      </control>
[19:37:08.008]      // end if-block "powered_down"
[19:37:08.008]    </control>
[19:37:08.009]    <block atomic="false" info="">
[19:37:08.009]      __var DEBUG_PORT_VAL    = 0;
[19:37:08.009]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:37:08.009]      __var ACCESS_POINT_VAL  = 0;
[19:37:08.009]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:37:08.009]      __ap = 1; 
[19:37:08.009]        // -> [__ap <= 0x00000001]
[19:37:08.009]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:37:08.010]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:37:08.010]      __ap = 4;
[19:37:08.010]        // -> [__ap <= 0x00000004]
[19:37:08.010]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:08.011]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:37:08.012]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:37:08.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:08.014]    </block>
[19:37:08.014]    <block atomic="false" info="">
[19:37:08.014]      __var nReset = 0x80;
[19:37:08.014]        // -> [nReset <= 0x00000080]
[19:37:08.014]      __var canReadPins = 0;
[19:37:08.014]        // -> [canReadPins <= 0x00000000]
[19:37:08.014]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:37:08.015]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:37:08.015]        // -> [canReadPins <= 0x00000001]
[19:37:08.015]    </block>
[19:37:08.015]    <control if="" while="1" timeout="200" info="">
[19:37:08.015]      // while "1"  (timeout="200")
[19:37:08.015]      // while-condition  =>  TRUE
[19:37:08.015]      // while "1"  (timeout="200")
[19:37:08.015]      // while-condition  =>  TRUE
[19:37:08.016]      // while "1"  (timeout="200")
[19:37:08.016]      // while-condition  =>  TRUE
[19:37:08.016]      // while "1"  (timeout="200")
[19:37:08.016]      // while-condition  =>  TRUE
[19:37:08.016]      // while "1"  (timeout="200")
[19:37:08.016]      // while-condition  =>  TRUE
[19:37:08.016]      // while "1"  (timeout="200")
[19:37:08.016]      // while-condition  =>  TRUE
[19:37:08.016]      // while "1"  (timeout="200")
[19:37:08.016]      // while-condition  =>  TRUE
[19:37:08.016]      // while "1"  (timeout="200")
[19:37:08.017]      // while-condition  =>  TRUE
[19:37:08.017]      // while "1"  (timeout="200")
[19:37:08.017]      // while-condition  =>  TRUE
[19:37:08.017]      // while "1"  (timeout="200")
[19:37:08.017]      // while-condition  =>  TRUE
[19:37:08.017]      // while "1"  (timeout="200")
[19:37:08.017]      // while-condition  =>  TRUE
[19:37:08.017]      // while "1"  (timeout="200")
[19:37:08.017]      // while-condition  =>  TRUE
[19:37:08.017]      // while "1"  (timeout="200")
[19:37:08.018]      // while-condition  =>  TRUE
[19:37:08.018]      // while "1"  (timeout="200")
[19:37:08.018]      // while-condition  =>  TRUE
[19:37:08.018]      // while "1"  (timeout="200")
[19:37:08.018]      // while-condition  =>  TRUE
[19:37:08.018]      // while "1"  (timeout="200")
[19:37:08.018]      // while-condition  =>  TRUE
[19:37:08.018]      // while "1"  (timeout="200")
[19:37:08.018]      // while-condition  =>  TRUE
[19:37:08.018]      // while "1"  (timeout="200")
[19:37:08.018]      // while-condition  =>  TRUE
[19:37:08.018]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.019]      // while "1"  (timeout="200")
[19:37:08.019]      // while-condition  =>  TRUE
[19:37:08.020]      // while "1"  (timeout="200")
[19:37:08.020]      // while  =>  TIMEOUT
[19:37:08.020]      // end while "1"
[19:37:08.020]    </control>
[19:37:08.020]    <control if="canReadPins" while="" timeout="0" info="">
[19:37:08.020]      // if-block "canReadPins"
[19:37:08.020]        // =>  TRUE
[19:37:08.020]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:37:08.021]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:37:08.022]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:37:08.022]        // while-condition  =>  FALSE
[19:37:08.022]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:37:08.022]      </control>
[19:37:08.022]      // end if-block "canReadPins"
[19:37:08.022]    </control>
[19:37:08.022]    <control if="!canReadPins" while="" timeout="0" info="">
[19:37:08.022]      // if-block "!canReadPins"
[19:37:08.022]        // =>  FALSE
[19:37:08.022]      // skip if-block "!canReadPins"
[19:37:08.022]    </control>
[19:37:08.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:37:08.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:08.023]        // =>  TRUE
[19:37:08.023]      <block atomic="false" info="">
[19:37:08.023]        WriteAP(0x00, 0x190008);
[19:37:08.024]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:08.024]        WriteAP(0xF0, 0x01);
[19:37:08.025]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:08.025]      </block>
[19:37:08.025]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:08.025]    </control>
[19:37:08.026]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:37:08.026]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:08.026]        // =>  FALSE
[19:37:08.026]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:08.026]    </control>
[19:37:08.026]    <block atomic="false" info="">
[19:37:08.026]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:08.027]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:37:08.027]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:37:08.027]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:08.029]      __ap = 0; //lets make sure we reset the access point selection
[19:37:08.029]        // -> [__ap <= 0x00000000]
[19:37:08.029]    </block>
[19:37:08.030]  </sequence>
[19:37:08.030]  
[19:37:08.036]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:37:08.036]  
[19:37:08.036]  <debugvars>
[19:37:08.036]    // Pre-defined
[19:37:08.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:08.036]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:08.036]    __dp=0x00000000
[19:37:08.036]    __ap=0x00000000
[19:37:08.036]    __traceout=0x00000000      (Trace Disabled)
[19:37:08.036]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:08.036]    __FlashAddr=0x00000000
[19:37:08.037]    __FlashLen=0x00000000
[19:37:08.037]    __FlashArg=0x00000000
[19:37:08.037]    __FlashOp=0x00000000
[19:37:08.037]    __Result=0x00000000
[19:37:08.037]  </debugvars>
[19:37:08.037]  
[19:37:08.037]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:37:08.037]    <block atomic="false" info="">
[19:37:08.037]      __var deviceID = 0;
[19:37:08.037]        // -> [deviceID <= 0x00000000]
[19:37:08.037]      __var version = 0;
[19:37:08.037]        // -> [version <= 0x00000000]
[19:37:08.037]      __var partNum = 0;
[19:37:08.038]        // -> [partNum <= 0x00000000]
[19:37:08.038]      __var manuf = 0;
[19:37:08.038]        // -> [manuf <= 0x00000000]
[19:37:08.038]      __var isMSPM0G1X0X_G3X0X = 0;
[19:37:08.038]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:37:08.038]      __var isProduction = 0;
[19:37:08.038]        // -> [isProduction <= 0x00000000]
[19:37:08.038]      __var continueId = 0;
[19:37:08.038]        // -> [continueId <= 0x00000000]
[19:37:08.038]      deviceID =   Read32(0x41C40004);
[19:37:08.041]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:37:08.041]        // -> [deviceID <= 0x2BB8802F]
[19:37:08.041]      version = deviceID >> 28;
[19:37:08.041]        // -> [version <= 0x00000002]
[19:37:08.041]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:37:08.041]        // -> [partNum <= 0x0000BB88]
[19:37:08.041]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:37:08.041]        // -> [manuf <= 0x00000017]
[19:37:08.042]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:37:08.042]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:37:08.042]      isProduction = (version > 0);
[19:37:08.042]        // -> [isProduction <= 0x00000001]
[19:37:08.042]    </block>
[19:37:08.042]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:37:08.042]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:37:08.042]        // =>  FALSE
[19:37:08.042]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:37:08.042]    </control>
[19:37:08.043]    <control if="continueId == 4" while="" timeout="0" info="">
[19:37:08.043]      // if-block "continueId == 4"
[19:37:08.043]        // =>  FALSE
[19:37:08.043]      // skip if-block "continueId == 4"
[19:37:08.043]    </control>
[19:37:08.043]    <control if="!isProduction" while="" timeout="0" info="">
[19:37:08.043]      // if-block "!isProduction"
[19:37:08.043]        // =>  FALSE
[19:37:08.043]      // skip if-block "!isProduction"
[19:37:08.043]    </control>
[19:37:08.043]  </sequence>
[19:37:08.044]  
[19:37:21.925]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:37:21.925]  
[19:37:21.933]  <debugvars>
[19:37:21.933]    // Pre-defined
[19:37:21.933]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:21.933]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:21.933]    __dp=0x00000000
[19:37:21.933]    __ap=0x00000000
[19:37:21.934]    __traceout=0x00000000      (Trace Disabled)
[19:37:21.934]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:21.934]    __FlashAddr=0x00000000
[19:37:21.934]    __FlashLen=0x00000000
[19:37:21.934]    __FlashArg=0x00000000
[19:37:21.934]    __FlashOp=0x00000000
[19:37:21.934]    __Result=0x00000000
[19:37:21.934]  </debugvars>
[19:37:21.934]  
[19:37:21.934]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:37:21.934]    <block atomic="false" info="">
[19:37:21.935]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:37:21.935]        // -> [isSWJ <= 0x00000001]
[19:37:21.935]      __var hasDormant = __protocol & 0x00020000;
[19:37:21.935]        // -> [hasDormant <= 0x00000000]
[19:37:21.935]      __var protType   = __protocol & 0x0000FFFF;
[19:37:21.935]        // -> [protType <= 0x00000002]
[19:37:21.935]    </block>
[19:37:21.936]    <control if="protType == 1" while="" timeout="0" info="">
[19:37:21.936]      // if-block "protType == 1"
[19:37:21.936]        // =>  FALSE
[19:37:21.936]      // skip if-block "protType == 1"
[19:37:21.936]    </control>
[19:37:21.936]    <control if="protType == 2" while="" timeout="0" info="">
[19:37:21.936]      // if-block "protType == 2"
[19:37:21.937]        // =>  TRUE
[19:37:21.937]      <control if="isSWJ" while="" timeout="0" info="">
[19:37:21.937]        // if-block "isSWJ"
[19:37:21.937]          // =>  TRUE
[19:37:21.937]        <control if="hasDormant" while="" timeout="0" info="">
[19:37:21.937]          // if-block "hasDormant"
[19:37:21.937]            // =>  FALSE
[19:37:21.937]          // skip if-block "hasDormant"
[19:37:21.937]        </control>
[19:37:21.937]        <control if="!hasDormant" while="" timeout="0" info="">
[19:37:21.938]          // if-block "!hasDormant"
[19:37:21.938]            // =>  TRUE
[19:37:21.938]          <block atomic="false" info="">
[19:37:21.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:37:21.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:21.939]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:37:21.939]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:37:21.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:37:21.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:21.940]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:37:21.940]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:37:21.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:37:21.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:21.941]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:37:21.942]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:37:21.942]          </block>
[19:37:21.942]          // end if-block "!hasDormant"
[19:37:21.942]        </control>
[19:37:21.942]        // end if-block "isSWJ"
[19:37:21.942]      </control>
[19:37:21.942]      <control if="!isSWJ" while="" timeout="0" info="">
[19:37:21.942]        // if-block "!isSWJ"
[19:37:21.942]          // =>  FALSE
[19:37:21.942]        // skip if-block "!isSWJ"
[19:37:21.942]      </control>
[19:37:21.942]      <block atomic="false" info="">
[19:37:21.942]        ReadDP(0x0);
[19:37:21.942]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:37:21.943]      </block>
[19:37:21.943]      // end if-block "protType == 2"
[19:37:21.943]    </control>
[19:37:21.943]  </sequence>
[19:37:21.943]  
[19:37:21.943]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:37:21.943]  
[19:37:21.943]  <debugvars>
[19:37:21.943]    // Pre-defined
[19:37:21.943]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:21.943]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:21.945]    __dp=0x00000000
[19:37:21.945]    __ap=0x00000000
[19:37:21.945]    __traceout=0x00000000      (Trace Disabled)
[19:37:21.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:21.945]    __FlashAddr=0x00000000
[19:37:21.945]    __FlashLen=0x00000000
[19:37:21.946]    __FlashArg=0x00000000
[19:37:21.946]    __FlashOp=0x00000000
[19:37:21.946]    __Result=0x00000000
[19:37:21.946]  </debugvars>
[19:37:21.946]  
[19:37:21.946]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:37:21.946]    <block atomic="false" info="">
[19:37:21.946]      __var SW_DP_ABORT       = 0x0;
[19:37:21.946]        // -> [SW_DP_ABORT <= 0x00000000]
[19:37:21.946]      __var DP_CTRL_STAT      = 0x4;
[19:37:21.946]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:37:21.946]      __var DP_SELECT         = 0x8;
[19:37:21.946]        // -> [DP_SELECT <= 0x00000008]
[19:37:21.946]      __var powered_down      = 0;
[19:37:21.946]        // -> [powered_down <= 0x00000000]
[19:37:21.947]      WriteDP(DP_SELECT, 0x00000000);
[19:37:21.947]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:37:21.947]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:37:21.948]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:37:21.948]        // -> [powered_down <= 0x00000001]
[19:37:21.948]    </block>
[19:37:21.948]    <control if="powered_down" while="" timeout="0" info="">
[19:37:21.948]      // if-block "powered_down"
[19:37:21.948]        // =>  TRUE
[19:37:21.948]      <block atomic="false" info="">
[19:37:21.948]        Message(0, "Debug/System power-up request sent");
[19:37:21.949]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:37:21.951]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:37:21.951]      </block>
[19:37:21.951]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:37:21.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:37:21.952]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:37:21.952]        // while-condition  =>  FALSE
[19:37:21.952]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:37:21.952]      </control>
[19:37:21.952]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:37:21.952]        // if-block "(__protocol & 0xFFFF) == 1"
[19:37:21.952]          // =>  FALSE
[19:37:21.952]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:37:21.952]      </control>
[19:37:21.952]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:37:21.952]        // if-block "(__protocol & 0xFFFF) == 2"
[19:37:21.952]          // =>  TRUE
[19:37:21.952]        <block atomic="false" info="">
[19:37:21.952]          Message(0, "executing SWD power up");
[19:37:21.957]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:37:21.957]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:37:21.957]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:37:21.959]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:37:21.959]        </block>
[19:37:21.959]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:37:21.959]      </control>
[19:37:21.959]      // end if-block "powered_down"
[19:37:21.959]    </control>
[19:37:21.959]    <block atomic="false" info="">
[19:37:21.959]      __var DEBUG_PORT_VAL    = 0;
[19:37:21.959]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:37:21.959]      __var ACCESS_POINT_VAL  = 0;
[19:37:21.959]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:37:21.959]      __ap = 1; 
[19:37:21.959]        // -> [__ap <= 0x00000001]
[19:37:21.959]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:37:21.961]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:37:21.962]      __ap = 4;
[19:37:21.962]        // -> [__ap <= 0x00000004]
[19:37:21.962]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:21.963]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:37:21.963]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:37:21.963]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:21.964]    </block>
[19:37:21.964]    <block atomic="false" info="">
[19:37:21.964]      __var nReset = 0x80;
[19:37:21.964]        // -> [nReset <= 0x00000080]
[19:37:21.964]      __var canReadPins = 0;
[19:37:21.964]        // -> [canReadPins <= 0x00000000]
[19:37:21.965]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:37:21.965]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:37:21.966]        // -> [canReadPins <= 0x00000001]
[19:37:21.966]    </block>
[19:37:21.966]    <control if="" while="1" timeout="200" info="">
[19:37:21.966]      // while "1"  (timeout="200")
[19:37:21.966]      // while-condition  =>  TRUE
[19:37:21.966]      // while "1"  (timeout="200")
[19:37:21.966]      // while-condition  =>  TRUE
[19:37:21.966]      // while "1"  (timeout="200")
[19:37:21.966]      // while-condition  =>  TRUE
[19:37:21.966]      // while "1"  (timeout="200")
[19:37:21.966]      // while-condition  =>  TRUE
[19:37:21.966]      // while "1"  (timeout="200")
[19:37:21.966]      // while-condition  =>  TRUE
[19:37:21.966]      // while "1"  (timeout="200")
[19:37:21.966]      // while-condition  =>  TRUE
[19:37:21.966]      // while "1"  (timeout="200")
[19:37:21.967]      // while-condition  =>  TRUE
[19:37:21.967]      // while "1"  (timeout="200")
[19:37:21.967]      // while-condition  =>  TRUE
[19:37:21.967]      // while "1"  (timeout="200")
[19:37:21.967]      // while-condition  =>  TRUE
[19:37:21.967]      // while "1"  (timeout="200")
[19:37:21.967]      // while-condition  =>  TRUE
[19:37:21.967]      // while "1"  (timeout="200")
[19:37:21.967]      // while-condition  =>  TRUE
[19:37:21.967]      // while "1"  (timeout="200")
[19:37:21.968]      // while-condition  =>  TRUE
[19:37:21.968]      // while "1"  (timeout="200")
[19:37:21.968]      // while-condition  =>  TRUE
[19:37:21.968]      // while "1"  (timeout="200")
[19:37:21.968]      // while-condition  =>  TRUE
[19:37:21.968]      // while "1"  (timeout="200")
[19:37:21.968]      // while-condition  =>  TRUE
[19:37:21.968]      // while "1"  (timeout="200")
[19:37:21.969]      // while-condition  =>  TRUE
[19:37:21.969]      // while "1"  (timeout="200")
[19:37:21.969]      // while-condition  =>  TRUE
[19:37:21.969]      // while "1"  (timeout="200")
[19:37:21.969]      // while-condition  =>  TRUE
[19:37:21.969]      // while "1"  (timeout="200")
[19:37:21.969]      // while-condition  =>  TRUE
[19:37:21.969]      // while "1"  (timeout="200")
[19:37:21.969]      // while-condition  =>  TRUE
[19:37:21.969]      // while "1"  (timeout="200")
[19:37:21.969]      // while-condition  =>  TRUE
[19:37:21.969]      // while "1"  (timeout="200")
[19:37:21.969]      // while-condition  =>  TRUE
[19:37:21.969]      // while "1"  (timeout="200")
[19:37:21.971]      // while-condition  =>  TRUE
[19:37:21.971]      // while "1"  (timeout="200")
[19:37:21.971]      // while-condition  =>  TRUE
[19:37:21.971]      // while "1"  (timeout="200")
[19:37:21.971]      // while-condition  =>  TRUE
[19:37:21.971]      // while "1"  (timeout="200")
[19:37:21.971]      // while-condition  =>  TRUE
[19:37:21.971]      // while "1"  (timeout="200")
[19:37:21.971]      // while-condition  =>  TRUE
[19:37:21.971]      // while "1"  (timeout="200")
[19:37:21.971]      // while-condition  =>  TRUE
[19:37:21.971]      // while "1"  (timeout="200")
[19:37:21.972]      // while-condition  =>  TRUE
[19:37:21.972]      // while "1"  (timeout="200")
[19:37:21.972]      // while-condition  =>  TRUE
[19:37:21.972]      // while "1"  (timeout="200")
[19:37:21.972]      // while-condition  =>  TRUE
[19:37:21.972]      // while "1"  (timeout="200")
[19:37:21.972]      // while-condition  =>  TRUE
[19:37:21.972]      // while "1"  (timeout="200")
[19:37:21.972]      // while-condition  =>  TRUE
[19:37:21.972]      // while "1"  (timeout="200")
[19:37:21.973]      // while-condition  =>  TRUE
[19:37:21.973]      // while "1"  (timeout="200")
[19:37:21.973]      // while  =>  TIMEOUT
[19:37:21.973]      // end while "1"
[19:37:21.973]    </control>
[19:37:21.973]    <control if="canReadPins" while="" timeout="0" info="">
[19:37:21.973]      // if-block "canReadPins"
[19:37:21.973]        // =>  TRUE
[19:37:21.973]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:37:21.973]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:37:21.973]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:37:21.973]        // while-condition  =>  FALSE
[19:37:21.974]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:37:21.974]      </control>
[19:37:21.974]      // end if-block "canReadPins"
[19:37:21.974]    </control>
[19:37:21.974]    <control if="!canReadPins" while="" timeout="0" info="">
[19:37:21.974]      // if-block "!canReadPins"
[19:37:21.975]        // =>  FALSE
[19:37:21.975]      // skip if-block "!canReadPins"
[19:37:21.975]    </control>
[19:37:21.975]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:37:21.975]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:21.975]        // =>  TRUE
[19:37:21.975]      <block atomic="false" info="">
[19:37:21.975]        WriteAP(0x00, 0x190008);
[19:37:21.975]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:21.977]        WriteAP(0xF0, 0x01);
[19:37:21.978]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:21.978]      </block>
[19:37:21.978]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:21.978]    </control>
[19:37:21.978]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:37:21.978]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:21.978]        // =>  FALSE
[19:37:21.978]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:21.978]    </control>
[19:37:21.979]    <block atomic="false" info="">
[19:37:21.979]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:21.980]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:37:21.980]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:37:21.980]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:21.982]      __ap = 0; //lets make sure we reset the access point selection
[19:37:21.982]        // -> [__ap <= 0x00000000]
[19:37:21.982]    </block>
[19:37:21.982]  </sequence>
[19:37:21.982]  
[19:37:21.987]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:37:21.987]  
[19:37:21.987]  <debugvars>
[19:37:21.987]    // Pre-defined
[19:37:21.987]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:21.987]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:21.987]    __dp=0x00000000
[19:37:21.989]    __ap=0x00000000
[19:37:21.989]    __traceout=0x00000000      (Trace Disabled)
[19:37:21.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:21.989]    __FlashAddr=0x00000000
[19:37:21.989]    __FlashLen=0x00000000
[19:37:21.989]    __FlashArg=0x00000000
[19:37:21.989]    __FlashOp=0x00000000
[19:37:21.989]    __Result=0x00000000
[19:37:21.989]  </debugvars>
[19:37:21.989]  
[19:37:21.989]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:37:21.989]    <block atomic="false" info="">
[19:37:21.989]      __var deviceID = 0;
[19:37:21.989]        // -> [deviceID <= 0x00000000]
[19:37:21.989]      __var version = 0;
[19:37:21.990]        // -> [version <= 0x00000000]
[19:37:21.990]      __var partNum = 0;
[19:37:21.990]        // -> [partNum <= 0x00000000]
[19:37:21.991]      __var manuf = 0;
[19:37:21.991]        // -> [manuf <= 0x00000000]
[19:37:21.991]      __var isMSPM0G1X0X_G3X0X = 0;
[19:37:21.991]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:37:21.991]      __var isProduction = 0;
[19:37:21.991]        // -> [isProduction <= 0x00000000]
[19:37:21.991]      __var continueId = 0;
[19:37:21.991]        // -> [continueId <= 0x00000000]
[19:37:21.991]      deviceID =   Read32(0x41C40004);
[19:37:21.993]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:37:21.993]        // -> [deviceID <= 0x2BB8802F]
[19:37:21.993]      version = deviceID >> 28;
[19:37:21.993]        // -> [version <= 0x00000002]
[19:37:21.993]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:37:21.994]        // -> [partNum <= 0x0000BB88]
[19:37:21.994]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:37:21.994]        // -> [manuf <= 0x00000017]
[19:37:21.994]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:37:21.994]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:37:21.994]      isProduction = (version > 0);
[19:37:21.994]        // -> [isProduction <= 0x00000001]
[19:37:21.994]    </block>
[19:37:21.994]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:37:21.994]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:37:21.994]        // =>  FALSE
[19:37:21.994]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:37:21.994]    </control>
[19:37:21.994]    <control if="continueId == 4" while="" timeout="0" info="">
[19:37:21.995]      // if-block "continueId == 4"
[19:37:21.995]        // =>  FALSE
[19:37:21.995]      // skip if-block "continueId == 4"
[19:37:21.995]    </control>
[19:37:21.995]    <control if="!isProduction" while="" timeout="0" info="">
[19:37:21.995]      // if-block "!isProduction"
[19:37:21.995]        // =>  FALSE
[19:37:21.995]      // skip if-block "!isProduction"
[19:37:21.995]    </control>
[19:37:21.995]  </sequence>
[19:37:21.995]  
[19:37:36.139]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:37:36.139]  
[19:37:36.148]  <debugvars>
[19:37:36.148]    // Pre-defined
[19:37:36.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:36.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:36.148]    __dp=0x00000000
[19:37:36.148]    __ap=0x00000000
[19:37:36.148]    __traceout=0x00000000      (Trace Disabled)
[19:37:36.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:36.148]    __FlashAddr=0x00000000
[19:37:36.149]    __FlashLen=0x00000000
[19:37:36.149]    __FlashArg=0x00000000
[19:37:36.149]    __FlashOp=0x00000000
[19:37:36.149]    __Result=0x00000000
[19:37:36.149]  </debugvars>
[19:37:36.149]  
[19:37:36.149]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:37:36.149]    <block atomic="false" info="">
[19:37:36.149]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:37:36.149]        // -> [isSWJ <= 0x00000001]
[19:37:36.149]      __var hasDormant = __protocol & 0x00020000;
[19:37:36.149]        // -> [hasDormant <= 0x00000000]
[19:37:36.150]      __var protType   = __protocol & 0x0000FFFF;
[19:37:36.150]        // -> [protType <= 0x00000002]
[19:37:36.150]    </block>
[19:37:36.150]    <control if="protType == 1" while="" timeout="0" info="">
[19:37:36.150]      // if-block "protType == 1"
[19:37:36.150]        // =>  FALSE
[19:37:36.150]      // skip if-block "protType == 1"
[19:37:36.150]    </control>
[19:37:36.150]    <control if="protType == 2" while="" timeout="0" info="">
[19:37:36.150]      // if-block "protType == 2"
[19:37:36.150]        // =>  TRUE
[19:37:36.150]      <control if="isSWJ" while="" timeout="0" info="">
[19:37:36.150]        // if-block "isSWJ"
[19:37:36.150]          // =>  TRUE
[19:37:36.151]        <control if="hasDormant" while="" timeout="0" info="">
[19:37:36.151]          // if-block "hasDormant"
[19:37:36.151]            // =>  FALSE
[19:37:36.151]          // skip if-block "hasDormant"
[19:37:36.151]        </control>
[19:37:36.151]        <control if="!hasDormant" while="" timeout="0" info="">
[19:37:36.152]          // if-block "!hasDormant"
[19:37:36.153]            // =>  TRUE
[19:37:36.153]          <block atomic="false" info="">
[19:37:36.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:37:36.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:36.153]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:37:36.153]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:37:36.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:37:36.154]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:36.154]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:37:36.155]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:37:36.155]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:37:36.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:36.155]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:37:36.155]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:37:36.155]          </block>
[19:37:36.155]          // end if-block "!hasDormant"
[19:37:36.155]        </control>
[19:37:36.155]        // end if-block "isSWJ"
[19:37:36.155]      </control>
[19:37:36.155]      <control if="!isSWJ" while="" timeout="0" info="">
[19:37:36.155]        // if-block "!isSWJ"
[19:37:36.155]          // =>  FALSE
[19:37:36.155]        // skip if-block "!isSWJ"
[19:37:36.155]      </control>
[19:37:36.155]      <block atomic="false" info="">
[19:37:36.156]        ReadDP(0x0);
[19:37:36.156]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:37:36.156]      </block>
[19:37:36.156]      // end if-block "protType == 2"
[19:37:36.156]    </control>
[19:37:36.156]  </sequence>
[19:37:36.156]  
[19:37:36.157]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:37:36.157]  
[19:37:36.157]  <debugvars>
[19:37:36.157]    // Pre-defined
[19:37:36.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:36.158]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:36.158]    __dp=0x00000000
[19:37:36.158]    __ap=0x00000000
[19:37:36.158]    __traceout=0x00000000      (Trace Disabled)
[19:37:36.158]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:36.158]    __FlashAddr=0x00000000
[19:37:36.158]    __FlashLen=0x00000000
[19:37:36.158]    __FlashArg=0x00000000
[19:37:36.159]    __FlashOp=0x00000000
[19:37:36.159]    __Result=0x00000000
[19:37:36.159]  </debugvars>
[19:37:36.159]  
[19:37:36.159]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:37:36.159]    <block atomic="false" info="">
[19:37:36.159]      __var SW_DP_ABORT       = 0x0;
[19:37:36.159]        // -> [SW_DP_ABORT <= 0x00000000]
[19:37:36.159]      __var DP_CTRL_STAT      = 0x4;
[19:37:36.159]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:37:36.159]      __var DP_SELECT         = 0x8;
[19:37:36.161]        // -> [DP_SELECT <= 0x00000008]
[19:37:36.161]      __var powered_down      = 0;
[19:37:36.161]        // -> [powered_down <= 0x00000000]
[19:37:36.161]      WriteDP(DP_SELECT, 0x00000000);
[19:37:36.161]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:37:36.161]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:37:36.162]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:37:36.162]        // -> [powered_down <= 0x00000001]
[19:37:36.162]    </block>
[19:37:36.162]    <control if="powered_down" while="" timeout="0" info="">
[19:37:36.162]      // if-block "powered_down"
[19:37:36.162]        // =>  TRUE
[19:37:36.162]      <block atomic="false" info="">
[19:37:36.162]        Message(0, "Debug/System power-up request sent");
[19:37:36.164]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:37:36.164]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:37:36.165]      </block>
[19:37:36.165]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:37:36.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:37:36.165]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:37:36.165]        // while-condition  =>  FALSE
[19:37:36.167]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:37:36.167]      </control>
[19:37:36.167]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:37:36.167]        // if-block "(__protocol & 0xFFFF) == 1"
[19:37:36.167]          // =>  FALSE
[19:37:36.167]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:37:36.167]      </control>
[19:37:36.167]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:37:36.167]        // if-block "(__protocol & 0xFFFF) == 2"
[19:37:36.168]          // =>  TRUE
[19:37:36.168]        <block atomic="false" info="">
[19:37:36.168]          Message(0, "executing SWD power up");
[19:37:36.169]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:37:36.170]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:37:36.170]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:37:36.170]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:37:36.171]        </block>
[19:37:36.171]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:37:36.171]      </control>
[19:37:36.171]      // end if-block "powered_down"
[19:37:36.171]    </control>
[19:37:36.171]    <block atomic="false" info="">
[19:37:36.171]      __var DEBUG_PORT_VAL    = 0;
[19:37:36.171]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:37:36.172]      __var ACCESS_POINT_VAL  = 0;
[19:37:36.172]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:37:36.172]      __ap = 1; 
[19:37:36.172]        // -> [__ap <= 0x00000001]
[19:37:36.172]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:37:36.173]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:37:36.173]      __ap = 4;
[19:37:36.173]        // -> [__ap <= 0x00000004]
[19:37:36.173]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:36.175]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:37:36.175]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:37:36.175]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:36.176]    </block>
[19:37:36.176]    <block atomic="false" info="">
[19:37:36.176]      __var nReset = 0x80;
[19:37:36.177]        // -> [nReset <= 0x00000080]
[19:37:36.177]      __var canReadPins = 0;
[19:37:36.177]        // -> [canReadPins <= 0x00000000]
[19:37:36.177]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:37:36.177]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:37:36.177]        // -> [canReadPins <= 0x00000001]
[19:37:36.177]    </block>
[19:37:36.178]    <control if="" while="1" timeout="200" info="">
[19:37:36.178]      // while "1"  (timeout="200")
[19:37:36.178]      // while-condition  =>  TRUE
[19:37:36.178]      // while "1"  (timeout="200")
[19:37:36.178]      // while-condition  =>  TRUE
[19:37:36.178]      // while "1"  (timeout="200")
[19:37:36.178]      // while-condition  =>  TRUE
[19:37:36.178]      // while "1"  (timeout="200")
[19:37:36.178]      // while-condition  =>  TRUE
[19:37:36.178]      // while "1"  (timeout="200")
[19:37:36.178]      // while-condition  =>  TRUE
[19:37:36.178]      // while "1"  (timeout="200")
[19:37:36.179]      // while-condition  =>  TRUE
[19:37:36.179]      // while "1"  (timeout="200")
[19:37:36.179]      // while-condition  =>  TRUE
[19:37:36.179]      // while "1"  (timeout="200")
[19:37:36.179]      // while-condition  =>  TRUE
[19:37:36.179]      // while "1"  (timeout="200")
[19:37:36.179]      // while-condition  =>  TRUE
[19:37:36.179]      // while "1"  (timeout="200")
[19:37:36.179]      // while-condition  =>  TRUE
[19:37:36.179]      // while "1"  (timeout="200")
[19:37:36.179]      // while-condition  =>  TRUE
[19:37:36.179]      // while "1"  (timeout="200")
[19:37:36.179]      // while-condition  =>  TRUE
[19:37:36.179]      // while "1"  (timeout="200")
[19:37:36.180]      // while-condition  =>  TRUE
[19:37:36.180]      // while "1"  (timeout="200")
[19:37:36.180]      // while-condition  =>  TRUE
[19:37:36.181]      // while "1"  (timeout="200")
[19:37:36.181]      // while-condition  =>  TRUE
[19:37:36.181]      // while "1"  (timeout="200")
[19:37:36.181]      // while-condition  =>  TRUE
[19:37:36.181]      // while "1"  (timeout="200")
[19:37:36.181]      // while-condition  =>  TRUE
[19:37:36.181]      // while "1"  (timeout="200")
[19:37:36.181]      // while-condition  =>  TRUE
[19:37:36.182]      // while "1"  (timeout="200")
[19:37:36.182]      // while-condition  =>  TRUE
[19:37:36.182]      // while "1"  (timeout="200")
[19:37:36.182]      // while-condition  =>  TRUE
[19:37:36.182]      // while "1"  (timeout="200")
[19:37:36.182]      // while-condition  =>  TRUE
[19:37:36.182]      // while "1"  (timeout="200")
[19:37:36.182]      // while-condition  =>  TRUE
[19:37:36.182]      // while "1"  (timeout="200")
[19:37:36.182]      // while-condition  =>  TRUE
[19:37:36.182]      // while "1"  (timeout="200")
[19:37:36.182]      // while-condition  =>  TRUE
[19:37:36.182]      // while "1"  (timeout="200")
[19:37:36.183]      // while-condition  =>  TRUE
[19:37:36.183]      // while "1"  (timeout="200")
[19:37:36.183]      // while-condition  =>  TRUE
[19:37:36.183]      // while "1"  (timeout="200")
[19:37:36.183]      // while-condition  =>  TRUE
[19:37:36.183]      // while "1"  (timeout="200")
[19:37:36.183]      // while-condition  =>  TRUE
[19:37:36.183]      // while "1"  (timeout="200")
[19:37:36.184]      // while-condition  =>  TRUE
[19:37:36.184]      // while "1"  (timeout="200")
[19:37:36.184]      // while-condition  =>  TRUE
[19:37:36.184]      // while "1"  (timeout="200")
[19:37:36.184]      // while-condition  =>  TRUE
[19:37:36.184]      // while "1"  (timeout="200")
[19:37:36.184]      // while-condition  =>  TRUE
[19:37:36.184]      // while "1"  (timeout="200")
[19:37:36.184]      // while-condition  =>  TRUE
[19:37:36.184]      // while "1"  (timeout="200")
[19:37:36.184]      // while-condition  =>  TRUE
[19:37:36.184]      // while "1"  (timeout="200")
[19:37:36.184]      // while-condition  =>  TRUE
[19:37:36.185]      // while "1"  (timeout="200")
[19:37:36.185]      // while-condition  =>  TRUE
[19:37:36.185]      // while "1"  (timeout="200")
[19:37:36.185]      // while-condition  =>  TRUE
[19:37:36.185]      // while "1"  (timeout="200")
[19:37:36.185]      // while-condition  =>  TRUE
[19:37:36.185]      // while "1"  (timeout="200")
[19:37:36.185]      // while-condition  =>  TRUE
[19:37:36.185]      // while "1"  (timeout="200")
[19:37:36.185]      // while-condition  =>  TRUE
[19:37:36.185]      // while "1"  (timeout="200")
[19:37:36.185]      // while-condition  =>  TRUE
[19:37:36.186]      // while "1"  (timeout="200")
[19:37:36.186]      // while-condition  =>  TRUE
[19:37:36.186]      // while "1"  (timeout="200")
[19:37:36.186]      // while-condition  =>  TRUE
[19:37:36.186]      // while "1"  (timeout="200")
[19:37:36.186]      // while-condition  =>  TRUE
[19:37:36.186]      // while "1"  (timeout="200")
[19:37:36.186]      // while-condition  =>  TRUE
[19:37:36.186]      // while "1"  (timeout="200")
[19:37:36.186]      // while-condition  =>  TRUE
[19:37:36.187]      // while "1"  (timeout="200")
[19:37:36.187]      // while-condition  =>  TRUE
[19:37:36.187]      // while "1"  (timeout="200")
[19:37:36.187]      // while-condition  =>  TRUE
[19:37:36.187]      // while "1"  (timeout="200")
[19:37:36.187]      // while-condition  =>  TRUE
[19:37:36.187]      // while "1"  (timeout="200")
[19:37:36.187]      // while-condition  =>  TRUE
[19:37:36.187]      // while "1"  (timeout="200")
[19:37:36.187]      // while-condition  =>  TRUE
[19:37:36.188]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.189]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.189]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.189]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.189]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.189]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.189]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.189]      // while "1"  (timeout="200")
[19:37:36.189]      // while-condition  =>  TRUE
[19:37:36.190]      // while "1"  (timeout="200")
[19:37:36.190]      // while-condition  =>  TRUE
[19:37:36.190]      // while "1"  (timeout="200")
[19:37:36.190]      // while-condition  =>  TRUE
[19:37:36.190]      // while "1"  (timeout="200")
[19:37:36.190]      // while-condition  =>  TRUE
[19:37:36.191]      // while "1"  (timeout="200")
[19:37:36.191]      // while-condition  =>  TRUE
[19:37:36.191]      // while "1"  (timeout="200")
[19:37:36.191]      // while-condition  =>  TRUE
[19:37:36.191]      // while "1"  (timeout="200")
[19:37:36.191]      // while-condition  =>  TRUE
[19:37:36.191]      // while "1"  (timeout="200")
[19:37:36.191]      // while-condition  =>  TRUE
[19:37:36.191]      // while "1"  (timeout="200")
[19:37:36.191]      // while-condition  =>  TRUE
[19:37:36.191]      // while "1"  (timeout="200")
[19:37:36.192]      // while-condition  =>  TRUE
[19:37:36.192]      // while "1"  (timeout="200")
[19:37:36.192]      // while  =>  TIMEOUT
[19:37:36.192]      // end while "1"
[19:37:36.192]    </control>
[19:37:36.192]    <control if="canReadPins" while="" timeout="0" info="">
[19:37:36.192]      // if-block "canReadPins"
[19:37:36.192]        // =>  TRUE
[19:37:36.192]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:37:36.192]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:37:36.193]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:37:36.193]        // while-condition  =>  FALSE
[19:37:36.193]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:37:36.193]      </control>
[19:37:36.193]      // end if-block "canReadPins"
[19:37:36.193]    </control>
[19:37:36.193]    <control if="!canReadPins" while="" timeout="0" info="">
[19:37:36.193]      // if-block "!canReadPins"
[19:37:36.193]        // =>  FALSE
[19:37:36.193]      // skip if-block "!canReadPins"
[19:37:36.193]    </control>
[19:37:36.193]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:37:36.193]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:36.194]        // =>  TRUE
[19:37:36.194]      <block atomic="false" info="">
[19:37:36.194]        WriteAP(0x00, 0x190008);
[19:37:36.194]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:36.194]        WriteAP(0xF0, 0x01);
[19:37:36.196]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:36.196]      </block>
[19:37:36.196]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:36.196]    </control>
[19:37:36.196]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:37:36.196]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:36.196]        // =>  FALSE
[19:37:36.196]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:36.196]    </control>
[19:37:36.196]    <block atomic="false" info="">
[19:37:36.196]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:36.198]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:37:36.198]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:37:36.198]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:36.200]      __ap = 0; //lets make sure we reset the access point selection
[19:37:36.200]        // -> [__ap <= 0x00000000]
[19:37:36.200]    </block>
[19:37:36.200]  </sequence>
[19:37:36.201]  
[19:37:36.206]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:37:36.206]  
[19:37:36.206]  <debugvars>
[19:37:36.206]    // Pre-defined
[19:37:36.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:36.207]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:36.207]    __dp=0x00000000
[19:37:36.207]    __ap=0x00000000
[19:37:36.207]    __traceout=0x00000000      (Trace Disabled)
[19:37:36.207]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:36.207]    __FlashAddr=0x00000000
[19:37:36.208]    __FlashLen=0x00000000
[19:37:36.208]    __FlashArg=0x00000000
[19:37:36.208]    __FlashOp=0x00000000
[19:37:36.208]    __Result=0x00000000
[19:37:36.208]  </debugvars>
[19:37:36.208]  
[19:37:36.208]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:37:36.208]    <block atomic="false" info="">
[19:37:36.208]      __var deviceID = 0;
[19:37:36.209]        // -> [deviceID <= 0x00000000]
[19:37:36.209]      __var version = 0;
[19:37:36.209]        // -> [version <= 0x00000000]
[19:37:36.209]      __var partNum = 0;
[19:37:36.209]        // -> [partNum <= 0x00000000]
[19:37:36.209]      __var manuf = 0;
[19:37:36.209]        // -> [manuf <= 0x00000000]
[19:37:36.209]      __var isMSPM0G1X0X_G3X0X = 0;
[19:37:36.209]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:37:36.209]      __var isProduction = 0;
[19:37:36.209]        // -> [isProduction <= 0x00000000]
[19:37:36.209]      __var continueId = 0;
[19:37:36.209]        // -> [continueId <= 0x00000000]
[19:37:36.210]      deviceID =   Read32(0x41C40004);
[19:37:36.211]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:37:36.211]        // -> [deviceID <= 0x2BB8802F]
[19:37:36.211]      version = deviceID >> 28;
[19:37:36.212]        // -> [version <= 0x00000002]
[19:37:36.212]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:37:36.212]        // -> [partNum <= 0x0000BB88]
[19:37:36.213]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:37:36.213]        // -> [manuf <= 0x00000017]
[19:37:36.213]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:37:36.213]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:37:36.213]      isProduction = (version > 0);
[19:37:36.213]        // -> [isProduction <= 0x00000001]
[19:37:36.213]    </block>
[19:37:36.214]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:37:36.214]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:37:36.214]        // =>  FALSE
[19:37:36.214]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:37:36.214]    </control>
[19:37:36.214]    <control if="continueId == 4" while="" timeout="0" info="">
[19:37:36.214]      // if-block "continueId == 4"
[19:37:36.214]        // =>  FALSE
[19:37:36.214]      // skip if-block "continueId == 4"
[19:37:36.214]    </control>
[19:37:36.214]    <control if="!isProduction" while="" timeout="0" info="">
[19:37:36.215]      // if-block "!isProduction"
[19:37:36.215]        // =>  FALSE
[19:37:36.215]      // skip if-block "!isProduction"
[19:37:36.215]    </control>
[19:37:36.215]  </sequence>
[19:37:36.215]  
[19:37:42.564]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:37:42.564]  
[19:37:42.572]  <debugvars>
[19:37:42.572]    // Pre-defined
[19:37:42.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:42.572]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:37:42.572]    __dp=0x00000000
[19:37:42.572]    __ap=0x00000000
[19:37:42.572]    __traceout=0x00000000      (Trace Disabled)
[19:37:42.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:42.572]    __FlashAddr=0x00000000
[19:37:42.572]    __FlashLen=0x00000000
[19:37:42.573]    __FlashArg=0x00000000
[19:37:42.573]    __FlashOp=0x00000000
[19:37:42.573]    __Result=0x00000000
[19:37:42.573]  </debugvars>
[19:37:42.573]  
[19:37:42.573]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:37:42.573]    <block atomic="false" info="">
[19:37:42.573]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:37:42.575]        // -> [isSWJ <= 0x00000001]
[19:37:42.575]      __var hasDormant = __protocol & 0x00020000;
[19:37:42.575]        // -> [hasDormant <= 0x00000000]
[19:37:42.575]      __var protType   = __protocol & 0x0000FFFF;
[19:37:42.575]        // -> [protType <= 0x00000002]
[19:37:42.575]    </block>
[19:37:42.575]    <control if="protType == 1" while="" timeout="0" info="">
[19:37:42.575]      // if-block "protType == 1"
[19:37:42.575]        // =>  FALSE
[19:37:42.575]      // skip if-block "protType == 1"
[19:37:42.575]    </control>
[19:37:42.575]    <control if="protType == 2" while="" timeout="0" info="">
[19:37:42.575]      // if-block "protType == 2"
[19:37:42.575]        // =>  TRUE
[19:37:42.575]      <control if="isSWJ" while="" timeout="0" info="">
[19:37:42.575]        // if-block "isSWJ"
[19:37:42.575]          // =>  TRUE
[19:37:42.575]        <control if="hasDormant" while="" timeout="0" info="">
[19:37:42.576]          // if-block "hasDormant"
[19:37:42.576]            // =>  FALSE
[19:37:42.576]          // skip if-block "hasDormant"
[19:37:42.576]        </control>
[19:37:42.576]        <control if="!hasDormant" while="" timeout="0" info="">
[19:37:42.576]          // if-block "!hasDormant"
[19:37:42.576]            // =>  TRUE
[19:37:42.576]          <block atomic="false" info="">
[19:37:42.576]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:37:42.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:42.577]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:37:42.577]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:37:42.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:37:42.578]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:42.578]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:37:42.578]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:37:42.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:37:42.579]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:42.579]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:37:42.579]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:37:42.579]          </block>
[19:37:42.579]          // end if-block "!hasDormant"
[19:37:42.579]        </control>
[19:37:42.579]        // end if-block "isSWJ"
[19:37:42.579]      </control>
[19:37:42.579]      <control if="!isSWJ" while="" timeout="0" info="">
[19:37:42.579]        // if-block "!isSWJ"
[19:37:42.579]          // =>  FALSE
[19:37:42.579]        // skip if-block "!isSWJ"
[19:37:42.579]      </control>
[19:37:42.579]      <block atomic="false" info="">
[19:37:42.580]        ReadDP(0x0);
[19:37:42.580]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:37:42.580]      </block>
[19:37:42.580]      // end if-block "protType == 2"
[19:37:42.580]    </control>
[19:37:42.580]  </sequence>
[19:37:42.580]  
[19:37:42.581]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:37:42.581]  
[19:37:42.581]  <debugvars>
[19:37:42.581]    // Pre-defined
[19:37:42.581]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:42.581]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:37:42.583]    __dp=0x00000000
[19:37:42.583]    __ap=0x00000000
[19:37:42.583]    __traceout=0x00000000      (Trace Disabled)
[19:37:42.583]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:42.583]    __FlashAddr=0x00000000
[19:37:42.583]    __FlashLen=0x00000000
[19:37:42.583]    __FlashArg=0x00000000
[19:37:42.583]    __FlashOp=0x00000000
[19:37:42.583]    __Result=0x00000000
[19:37:42.583]  </debugvars>
[19:37:42.583]  
[19:37:42.583]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:37:42.583]    <block atomic="false" info="">
[19:37:42.583]      __var SW_DP_ABORT       = 0x0;
[19:37:42.583]        // -> [SW_DP_ABORT <= 0x00000000]
[19:37:42.584]      __var DP_CTRL_STAT      = 0x4;
[19:37:42.584]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:37:42.584]      __var DP_SELECT         = 0x8;
[19:37:42.584]        // -> [DP_SELECT <= 0x00000008]
[19:37:42.584]      __var powered_down      = 0;
[19:37:42.585]        // -> [powered_down <= 0x00000000]
[19:37:42.585]      WriteDP(DP_SELECT, 0x00000000);
[19:37:42.585]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:37:42.585]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:37:42.586]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:37:42.586]        // -> [powered_down <= 0x00000001]
[19:37:42.586]    </block>
[19:37:42.586]    <control if="powered_down" while="" timeout="0" info="">
[19:37:42.586]      // if-block "powered_down"
[19:37:42.586]        // =>  TRUE
[19:37:42.586]      <block atomic="false" info="">
[19:37:42.586]        Message(0, "Debug/System power-up request sent");
[19:37:42.588]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:37:42.588]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:37:42.588]      </block>
[19:37:42.588]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:37:42.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:37:42.589]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:37:42.589]        // while-condition  =>  FALSE
[19:37:42.589]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:37:42.589]      </control>
[19:37:42.589]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:37:42.589]        // if-block "(__protocol & 0xFFFF) == 1"
[19:37:42.589]          // =>  FALSE
[19:37:42.589]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:37:42.589]      </control>
[19:37:42.591]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:37:42.591]        // if-block "(__protocol & 0xFFFF) == 2"
[19:37:42.591]          // =>  TRUE
[19:37:42.591]        <block atomic="false" info="">
[19:37:42.591]          Message(0, "executing SWD power up");
[19:37:42.592]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:37:42.593]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:37:42.593]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:37:42.593]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:37:42.593]        </block>
[19:37:42.593]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:37:42.593]      </control>
[19:37:42.594]      // end if-block "powered_down"
[19:37:42.594]    </control>
[19:37:42.594]    <block atomic="false" info="">
[19:37:42.594]      __var DEBUG_PORT_VAL    = 0;
[19:37:42.594]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:37:42.594]      __var ACCESS_POINT_VAL  = 0;
[19:37:42.594]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:37:42.594]      __ap = 1; 
[19:37:42.594]        // -> [__ap <= 0x00000001]
[19:37:42.594]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:37:42.595]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:37:42.595]      __ap = 4;
[19:37:42.596]        // -> [__ap <= 0x00000004]
[19:37:42.596]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:42.597]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:37:42.597]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:37:42.597]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:42.599]    </block>
[19:37:42.599]    <block atomic="false" info="">
[19:37:42.599]      __var nReset = 0x80;
[19:37:42.599]        // -> [nReset <= 0x00000080]
[19:37:42.600]      __var canReadPins = 0;
[19:37:42.600]        // -> [canReadPins <= 0x00000000]
[19:37:42.600]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:37:42.601]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:37:42.601]        // -> [canReadPins <= 0x00000001]
[19:37:42.601]    </block>
[19:37:42.601]    <control if="" while="1" timeout="200" info="">
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.601]      // while "1"  (timeout="200")
[19:37:42.601]      // while-condition  =>  TRUE
[19:37:42.603]      // while "1"  (timeout="200")
[19:37:42.603]      // while-condition  =>  TRUE
[19:37:42.603]      // while "1"  (timeout="200")
[19:37:42.603]      // while-condition  =>  TRUE
[19:37:42.603]      // while "1"  (timeout="200")
[19:37:42.603]      // while-condition  =>  TRUE
[19:37:42.603]      // while "1"  (timeout="200")
[19:37:42.603]      // while-condition  =>  TRUE
[19:37:42.603]      // while "1"  (timeout="200")
[19:37:42.603]      // while-condition  =>  TRUE
[19:37:42.603]      // while "1"  (timeout="200")
[19:37:42.603]      // while-condition  =>  TRUE
[19:37:42.604]      // while "1"  (timeout="200")
[19:37:42.604]      // while-condition  =>  TRUE
[19:37:42.604]      // while "1"  (timeout="200")
[19:37:42.604]      // while-condition  =>  TRUE
[19:37:42.604]      // while "1"  (timeout="200")
[19:37:42.604]      // while-condition  =>  TRUE
[19:37:42.604]      // while "1"  (timeout="200")
[19:37:42.604]      // while-condition  =>  TRUE
[19:37:42.604]      // while "1"  (timeout="200")
[19:37:42.605]      // while-condition  =>  TRUE
[19:37:42.605]      // while "1"  (timeout="200")
[19:37:42.605]      // while-condition  =>  TRUE
[19:37:42.605]      // while "1"  (timeout="200")
[19:37:42.605]      // while-condition  =>  TRUE
[19:37:42.605]      // while "1"  (timeout="200")
[19:37:42.605]      // while-condition  =>  TRUE
[19:37:42.605]      // while "1"  (timeout="200")
[19:37:42.605]      // while-condition  =>  TRUE
[19:37:42.606]      // while "1"  (timeout="200")
[19:37:42.606]      // while-condition  =>  TRUE
[19:37:42.606]      // while "1"  (timeout="200")
[19:37:42.606]      // while-condition  =>  TRUE
[19:37:42.606]      // while "1"  (timeout="200")
[19:37:42.606]      // while-condition  =>  TRUE
[19:37:42.606]      // while "1"  (timeout="200")
[19:37:42.606]      // while-condition  =>  TRUE
[19:37:42.606]      // while "1"  (timeout="200")
[19:37:42.606]      // while-condition  =>  TRUE
[19:37:42.606]      // while "1"  (timeout="200")
[19:37:42.607]      // while-condition  =>  TRUE
[19:37:42.607]      // while "1"  (timeout="200")
[19:37:42.607]      // while-condition  =>  TRUE
[19:37:42.607]      // while "1"  (timeout="200")
[19:37:42.607]      // while-condition  =>  TRUE
[19:37:42.607]      // while "1"  (timeout="200")
[19:37:42.607]      // while-condition  =>  TRUE
[19:37:42.607]      // while "1"  (timeout="200")
[19:37:42.607]      // while-condition  =>  TRUE
[19:37:42.607]      // while "1"  (timeout="200")
[19:37:42.607]      // while-condition  =>  TRUE
[19:37:42.608]      // while "1"  (timeout="200")
[19:37:42.608]      // while-condition  =>  TRUE
[19:37:42.608]      // while "1"  (timeout="200")
[19:37:42.608]      // while-condition  =>  TRUE
[19:37:42.608]      // while "1"  (timeout="200")
[19:37:42.608]      // while-condition  =>  TRUE
[19:37:42.608]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.609]      // while "1"  (timeout="200")
[19:37:42.609]      // while-condition  =>  TRUE
[19:37:42.611]      // while "1"  (timeout="200")
[19:37:42.611]      // while-condition  =>  TRUE
[19:37:42.611]      // while "1"  (timeout="200")
[19:37:42.611]      // while-condition  =>  TRUE
[19:37:42.611]      // while "1"  (timeout="200")
[19:37:42.611]      // while-condition  =>  TRUE
[19:37:42.611]      // while "1"  (timeout="200")
[19:37:42.611]      // while-condition  =>  TRUE
[19:37:42.611]      // while "1"  (timeout="200")
[19:37:42.611]      // while-condition  =>  TRUE
[19:37:42.612]      // while "1"  (timeout="200")
[19:37:42.612]      // while-condition  =>  TRUE
[19:37:42.612]      // while "1"  (timeout="200")
[19:37:42.612]      // while-condition  =>  TRUE
[19:37:42.612]      // while "1"  (timeout="200")
[19:37:42.612]      // while-condition  =>  TRUE
[19:37:42.612]      // while "1"  (timeout="200")
[19:37:42.612]      // while-condition  =>  TRUE
[19:37:42.612]      // while "1"  (timeout="200")
[19:37:42.612]      // while-condition  =>  TRUE
[19:37:42.612]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.613]      // while-condition  =>  TRUE
[19:37:42.613]      // while "1"  (timeout="200")
[19:37:42.614]      // while-condition  =>  TRUE
[19:37:42.614]      // while "1"  (timeout="200")
[19:37:42.614]      // while  =>  TIMEOUT
[19:37:42.614]      // end while "1"
[19:37:42.614]    </control>
[19:37:42.614]    <control if="canReadPins" while="" timeout="0" info="">
[19:37:42.614]      // if-block "canReadPins"
[19:37:42.615]        // =>  TRUE
[19:37:42.615]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:37:42.615]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:37:42.615]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:37:42.615]        // while-condition  =>  FALSE
[19:37:42.616]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:37:42.616]      </control>
[19:37:42.616]      // end if-block "canReadPins"
[19:37:42.616]    </control>
[19:37:42.616]    <control if="!canReadPins" while="" timeout="0" info="">
[19:37:42.616]      // if-block "!canReadPins"
[19:37:42.616]        // =>  FALSE
[19:37:42.616]      // skip if-block "!canReadPins"
[19:37:42.616]    </control>
[19:37:42.616]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:37:42.617]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:42.617]        // =>  TRUE
[19:37:42.617]      <block atomic="false" info="">
[19:37:42.617]        WriteAP(0x00, 0x190008);
[19:37:42.618]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:42.618]        WriteAP(0xF0, 0x01);
[19:37:42.619]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:42.619]      </block>
[19:37:42.619]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:42.619]    </control>
[19:37:42.619]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:37:42.619]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:42.620]        // =>  FALSE
[19:37:42.620]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:42.620]    </control>
[19:37:42.620]    <block atomic="false" info="">
[19:37:42.620]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:42.621]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:37:42.621]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:37:42.621]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:42.623]      __ap = 0; //lets make sure we reset the access point selection
[19:37:42.623]        // -> [__ap <= 0x00000000]
[19:37:42.623]    </block>
[19:37:42.623]  </sequence>
[19:37:42.623]  
[19:37:42.629]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:37:42.629]  
[19:37:42.629]  <debugvars>
[19:37:42.629]    // Pre-defined
[19:37:42.629]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:42.629]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:37:42.629]    __dp=0x00000000
[19:37:42.629]    __ap=0x00000000
[19:37:42.629]    __traceout=0x00000000      (Trace Disabled)
[19:37:42.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:42.631]    __FlashAddr=0x00000000
[19:37:42.631]    __FlashLen=0x00000000
[19:37:42.631]    __FlashArg=0x00000000
[19:37:42.631]    __FlashOp=0x00000000
[19:37:42.631]    __Result=0x00000000
[19:37:42.631]  </debugvars>
[19:37:42.631]  
[19:37:42.632]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:37:42.632]    <block atomic="false" info="">
[19:37:42.632]      __var deviceID = 0;
[19:37:42.632]        // -> [deviceID <= 0x00000000]
[19:37:42.632]      __var version = 0;
[19:37:42.632]        // -> [version <= 0x00000000]
[19:37:42.632]      __var partNum = 0;
[19:37:42.632]        // -> [partNum <= 0x00000000]
[19:37:42.632]      __var manuf = 0;
[19:37:42.632]        // -> [manuf <= 0x00000000]
[19:37:42.633]      __var isMSPM0G1X0X_G3X0X = 0;
[19:37:42.633]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:37:42.633]      __var isProduction = 0;
[19:37:42.633]        // -> [isProduction <= 0x00000000]
[19:37:42.633]      __var continueId = 0;
[19:37:42.633]        // -> [continueId <= 0x00000000]
[19:37:42.633]      deviceID =   Read32(0x41C40004);
[19:37:42.634]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:37:42.634]        // -> [deviceID <= 0x2BB8802F]
[19:37:42.634]      version = deviceID >> 28;
[19:37:42.634]        // -> [version <= 0x00000002]
[19:37:42.634]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:37:42.634]        // -> [partNum <= 0x0000BB88]
[19:37:42.635]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:37:42.635]        // -> [manuf <= 0x00000017]
[19:37:42.635]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:37:42.635]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:37:42.635]      isProduction = (version > 0);
[19:37:42.635]        // -> [isProduction <= 0x00000001]
[19:37:42.635]    </block>
[19:37:42.635]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:37:42.635]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:37:42.635]        // =>  FALSE
[19:37:42.635]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:37:42.636]    </control>
[19:37:42.636]    <control if="continueId == 4" while="" timeout="0" info="">
[19:37:42.636]      // if-block "continueId == 4"
[19:37:42.636]        // =>  FALSE
[19:37:42.636]      // skip if-block "continueId == 4"
[19:37:42.636]    </control>
[19:37:42.636]    <control if="!isProduction" while="" timeout="0" info="">
[19:37:42.636]      // if-block "!isProduction"
[19:37:42.636]        // =>  FALSE
[19:37:42.636]      // skip if-block "!isProduction"
[19:37:42.636]    </control>
[19:37:42.636]  </sequence>
[19:37:42.637]  
[19:38:51.419]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:38:51.419]  
[19:38:51.427]  <debugvars>
[19:38:51.427]    // Pre-defined
[19:38:51.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:38:51.427]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:38:51.427]    __dp=0x00000000
[19:38:51.428]    __ap=0x00000000
[19:38:51.428]    __traceout=0x00000000      (Trace Disabled)
[19:38:51.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:38:51.428]    __FlashAddr=0x00000000
[19:38:51.428]    __FlashLen=0x00000000
[19:38:51.428]    __FlashArg=0x00000000
[19:38:51.428]    __FlashOp=0x00000000
[19:38:51.428]    __Result=0x00000000
[19:38:51.428]  </debugvars>
[19:38:51.428]  
[19:38:51.428]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:38:51.428]    <block atomic="false" info="">
[19:38:51.429]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:38:51.429]        // -> [isSWJ <= 0x00000001]
[19:38:51.429]      __var hasDormant = __protocol & 0x00020000;
[19:38:51.429]        // -> [hasDormant <= 0x00000000]
[19:38:51.429]      __var protType   = __protocol & 0x0000FFFF;
[19:38:51.429]        // -> [protType <= 0x00000002]
[19:38:51.429]    </block>
[19:38:51.429]    <control if="protType == 1" while="" timeout="0" info="">
[19:38:51.429]      // if-block "protType == 1"
[19:38:51.429]        // =>  FALSE
[19:38:51.429]      // skip if-block "protType == 1"
[19:38:51.429]    </control>
[19:38:51.429]    <control if="protType == 2" while="" timeout="0" info="">
[19:38:51.429]      // if-block "protType == 2"
[19:38:51.429]        // =>  TRUE
[19:38:51.431]      <control if="isSWJ" while="" timeout="0" info="">
[19:38:51.431]        // if-block "isSWJ"
[19:38:51.431]          // =>  TRUE
[19:38:51.431]        <control if="hasDormant" while="" timeout="0" info="">
[19:38:51.431]          // if-block "hasDormant"
[19:38:51.431]            // =>  FALSE
[19:38:51.431]          // skip if-block "hasDormant"
[19:38:51.431]        </control>
[19:38:51.431]        <control if="!hasDormant" while="" timeout="0" info="">
[19:38:51.431]          // if-block "!hasDormant"
[19:38:51.431]            // =>  TRUE
[19:38:51.432]          <block atomic="false" info="">
[19:38:51.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:38:51.432]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:38:51.432]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:38:51.432]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:38:51.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:38:51.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:38:51.433]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:38:51.433]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:38:51.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:38:51.434]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:38:51.434]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:38:51.434]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:38:51.434]          </block>
[19:38:51.434]          // end if-block "!hasDormant"
[19:38:51.435]        </control>
[19:38:51.435]        // end if-block "isSWJ"
[19:38:51.435]      </control>
[19:38:51.435]      <control if="!isSWJ" while="" timeout="0" info="">
[19:38:51.435]        // if-block "!isSWJ"
[19:38:51.435]          // =>  FALSE
[19:38:51.435]        // skip if-block "!isSWJ"
[19:38:51.435]      </control>
[19:38:51.435]      <block atomic="false" info="">
[19:38:51.435]        ReadDP(0x0);
[19:38:51.436]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:38:51.436]      </block>
[19:38:51.436]      // end if-block "protType == 2"
[19:38:51.436]    </control>
[19:38:51.436]  </sequence>
[19:38:51.436]  
[19:38:51.437]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:38:51.437]  
[19:38:51.437]  <debugvars>
[19:38:51.437]    // Pre-defined
[19:38:51.437]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:38:51.437]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:38:51.437]    __dp=0x00000000
[19:38:51.437]    __ap=0x00000000
[19:38:51.438]    __traceout=0x00000000      (Trace Disabled)
[19:38:51.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:38:51.438]    __FlashAddr=0x00000000
[19:38:51.438]    __FlashLen=0x00000000
[19:38:51.438]    __FlashArg=0x00000000
[19:38:51.438]    __FlashOp=0x00000000
[19:38:51.438]    __Result=0x00000000
[19:38:51.438]  </debugvars>
[19:38:51.438]  
[19:38:51.438]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:38:51.438]    <block atomic="false" info="">
[19:38:51.439]      __var SW_DP_ABORT       = 0x0;
[19:38:51.439]        // -> [SW_DP_ABORT <= 0x00000000]
[19:38:51.439]      __var DP_CTRL_STAT      = 0x4;
[19:38:51.439]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:38:51.439]      __var DP_SELECT         = 0x8;
[19:38:51.439]        // -> [DP_SELECT <= 0x00000008]
[19:38:51.440]      __var powered_down      = 0;
[19:38:51.440]        // -> [powered_down <= 0x00000000]
[19:38:51.440]      WriteDP(DP_SELECT, 0x00000000);
[19:38:51.441]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:38:51.441]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:38:51.441]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:38:51.441]        // -> [powered_down <= 0x00000001]
[19:38:51.441]    </block>
[19:38:51.441]    <control if="powered_down" while="" timeout="0" info="">
[19:38:51.441]      // if-block "powered_down"
[19:38:51.442]        // =>  TRUE
[19:38:51.442]      <block atomic="false" info="">
[19:38:51.442]        Message(0, "Debug/System power-up request sent");
[19:38:51.445]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:38:51.445]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:38:51.445]      </block>
[19:38:51.446]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:38:51.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:38:51.446]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:38:51.446]        // while-condition  =>  FALSE
[19:38:51.446]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:38:51.446]      </control>
[19:38:51.447]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:38:51.447]        // if-block "(__protocol & 0xFFFF) == 1"
[19:38:51.447]          // =>  FALSE
[19:38:51.447]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:38:51.447]      </control>
[19:38:51.447]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:38:51.447]        // if-block "(__protocol & 0xFFFF) == 2"
[19:38:51.447]          // =>  TRUE
[19:38:51.447]        <block atomic="false" info="">
[19:38:51.447]          Message(0, "executing SWD power up");
[19:38:51.449]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:38:51.449]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:38:51.450]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:38:51.450]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:38:51.450]        </block>
[19:38:51.450]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:38:51.451]      </control>
[19:38:51.451]      // end if-block "powered_down"
[19:38:51.451]    </control>
[19:38:51.451]    <block atomic="false" info="">
[19:38:51.451]      __var DEBUG_PORT_VAL    = 0;
[19:38:51.451]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:38:51.451]      __var ACCESS_POINT_VAL  = 0;
[19:38:51.451]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:38:51.451]      __ap = 1; 
[19:38:51.451]        // -> [__ap <= 0x00000001]
[19:38:51.451]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:38:51.452]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:38:51.453]      __ap = 4;
[19:38:51.453]        // -> [__ap <= 0x00000004]
[19:38:51.453]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:38:51.453]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:38:51.455]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:38:51.455]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:38:51.456]    </block>
[19:38:51.456]    <block atomic="false" info="">
[19:38:51.457]      __var nReset = 0x80;
[19:38:51.457]        // -> [nReset <= 0x00000080]
[19:38:51.457]      __var canReadPins = 0;
[19:38:51.457]        // -> [canReadPins <= 0x00000000]
[19:38:51.457]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:38:51.457]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:38:51.457]        // -> [canReadPins <= 0x00000001]
[19:38:51.458]    </block>
[19:38:51.458]    <control if="" while="1" timeout="200" info="">
[19:38:51.458]      // while "1"  (timeout="200")
[19:38:51.458]      // while-condition  =>  TRUE
[19:38:51.458]      // while "1"  (timeout="200")
[19:38:51.458]      // while-condition  =>  TRUE
[19:38:51.459]      // while "1"  (timeout="200")
[19:38:51.459]      // while-condition  =>  TRUE
[19:38:51.459]      // while "1"  (timeout="200")
[19:38:51.459]      // while-condition  =>  TRUE
[19:38:51.459]      // while "1"  (timeout="200")
[19:38:51.459]      // while-condition  =>  TRUE
[19:38:51.459]      // while "1"  (timeout="200")
[19:38:51.459]      // while-condition  =>  TRUE
[19:38:51.460]      // while "1"  (timeout="200")
[19:38:51.460]      // while-condition  =>  TRUE
[19:38:51.460]      // while "1"  (timeout="200")
[19:38:51.460]      // while-condition  =>  TRUE
[19:38:51.460]      // while "1"  (timeout="200")
[19:38:51.460]      // while-condition  =>  TRUE
[19:38:51.461]      // while "1"  (timeout="200")
[19:38:51.461]      // while-condition  =>  TRUE
[19:38:51.461]      // while "1"  (timeout="200")
[19:38:51.461]      // while-condition  =>  TRUE
[19:38:51.461]      // while "1"  (timeout="200")
[19:38:51.461]      // while-condition  =>  TRUE
[19:38:51.461]      // while "1"  (timeout="200")
[19:38:51.461]      // while-condition  =>  TRUE
[19:38:51.461]      // while "1"  (timeout="200")
[19:38:51.461]      // while-condition  =>  TRUE
[19:38:51.462]      // while "1"  (timeout="200")
[19:38:51.462]      // while-condition  =>  TRUE
[19:38:51.462]      // while "1"  (timeout="200")
[19:38:51.462]      // while-condition  =>  TRUE
[19:38:51.462]      // while "1"  (timeout="200")
[19:38:51.462]      // while-condition  =>  TRUE
[19:38:51.462]      // while "1"  (timeout="200")
[19:38:51.462]      // while-condition  =>  TRUE
[19:38:51.462]      // while "1"  (timeout="200")
[19:38:51.462]      // while-condition  =>  TRUE
[19:38:51.463]      // while "1"  (timeout="200")
[19:38:51.463]      // while-condition  =>  TRUE
[19:38:51.463]      // while "1"  (timeout="200")
[19:38:51.463]      // while-condition  =>  TRUE
[19:38:51.463]      // while "1"  (timeout="200")
[19:38:51.463]      // while-condition  =>  TRUE
[19:38:51.463]      // while "1"  (timeout="200")
[19:38:51.463]      // while-condition  =>  TRUE
[19:38:51.463]      // while "1"  (timeout="200")
[19:38:51.463]      // while-condition  =>  TRUE
[19:38:51.463]      // while "1"  (timeout="200")
[19:38:51.464]      // while-condition  =>  TRUE
[19:38:51.464]      // while "1"  (timeout="200")
[19:38:51.464]      // while-condition  =>  TRUE
[19:38:51.464]      // while "1"  (timeout="200")
[19:38:51.464]      // while-condition  =>  TRUE
[19:38:51.464]      // while "1"  (timeout="200")
[19:38:51.464]      // while-condition  =>  TRUE
[19:38:51.464]      // while "1"  (timeout="200")
[19:38:51.464]      // while-condition  =>  TRUE
[19:38:51.464]      // while "1"  (timeout="200")
[19:38:51.464]      // while-condition  =>  TRUE
[19:38:51.465]      // while "1"  (timeout="200")
[19:38:51.465]      // while-condition  =>  TRUE
[19:38:51.465]      // while "1"  (timeout="200")
[19:38:51.465]      // while-condition  =>  TRUE
[19:38:51.465]      // while "1"  (timeout="200")
[19:38:51.465]      // while-condition  =>  TRUE
[19:38:51.465]      // while "1"  (timeout="200")
[19:38:51.465]      // while-condition  =>  TRUE
[19:38:51.465]      // while "1"  (timeout="200")
[19:38:51.465]      // while-condition  =>  TRUE
[19:38:51.466]      // while "1"  (timeout="200")
[19:38:51.466]      // while-condition  =>  TRUE
[19:38:51.466]      // while "1"  (timeout="200")
[19:38:51.466]      // while-condition  =>  TRUE
[19:38:51.466]      // while "1"  (timeout="200")
[19:38:51.466]      // while-condition  =>  TRUE
[19:38:51.466]      // while "1"  (timeout="200")
[19:38:51.466]      // while-condition  =>  TRUE
[19:38:51.466]      // while "1"  (timeout="200")
[19:38:51.466]      // while-condition  =>  TRUE
[19:38:51.466]      // while "1"  (timeout="200")
[19:38:51.466]      // while-condition  =>  TRUE
[19:38:51.466]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.467]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.467]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.467]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.467]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.467]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.467]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.467]      // while "1"  (timeout="200")
[19:38:51.467]      // while-condition  =>  TRUE
[19:38:51.468]      // while "1"  (timeout="200")
[19:38:51.468]      // while-condition  =>  TRUE
[19:38:51.468]      // while "1"  (timeout="200")
[19:38:51.468]      // while-condition  =>  TRUE
[19:38:51.468]      // while "1"  (timeout="200")
[19:38:51.468]      // while-condition  =>  TRUE
[19:38:51.468]      // while "1"  (timeout="200")
[19:38:51.468]      // while-condition  =>  TRUE
[19:38:51.468]      // while "1"  (timeout="200")
[19:38:51.468]      // while-condition  =>  TRUE
[19:38:51.469]      // while "1"  (timeout="200")
[19:38:51.469]      // while-condition  =>  TRUE
[19:38:51.469]      // while "1"  (timeout="200")
[19:38:51.469]      // while-condition  =>  TRUE
[19:38:51.469]      // while "1"  (timeout="200")
[19:38:51.469]      // while-condition  =>  TRUE
[19:38:51.469]      // while "1"  (timeout="200")
[19:38:51.469]      // while-condition  =>  TRUE
[19:38:51.469]      // while "1"  (timeout="200")
[19:38:51.469]      // while-condition  =>  TRUE
[19:38:51.469]      // while "1"  (timeout="200")
[19:38:51.470]      // while-condition  =>  TRUE
[19:38:51.470]      // while "1"  (timeout="200")
[19:38:51.470]      // while-condition  =>  TRUE
[19:38:51.470]      // while "1"  (timeout="200")
[19:38:51.470]      // while-condition  =>  TRUE
[19:38:51.470]      // while "1"  (timeout="200")
[19:38:51.471]      // while-condition  =>  TRUE
[19:38:51.471]      // while "1"  (timeout="200")
[19:38:51.471]      // while-condition  =>  TRUE
[19:38:51.471]      // while "1"  (timeout="200")
[19:38:51.471]      // while-condition  =>  TRUE
[19:38:51.471]      // while "1"  (timeout="200")
[19:38:51.471]      // while-condition  =>  TRUE
[19:38:51.471]      // while "1"  (timeout="200")
[19:38:51.471]      // while-condition  =>  TRUE
[19:38:51.471]      // while "1"  (timeout="200")
[19:38:51.471]      // while-condition  =>  TRUE
[19:38:51.471]      // while "1"  (timeout="200")
[19:38:51.471]      // while-condition  =>  TRUE
[19:38:51.471]      // while "1"  (timeout="200")
[19:38:51.472]      // while-condition  =>  TRUE
[19:38:51.472]      // while "1"  (timeout="200")
[19:38:51.472]      // while-condition  =>  TRUE
[19:38:51.472]      // while "1"  (timeout="200")
[19:38:51.472]      // while-condition  =>  TRUE
[19:38:51.472]      // while "1"  (timeout="200")
[19:38:51.472]      // while-condition  =>  TRUE
[19:38:51.472]      // while "1"  (timeout="200")
[19:38:51.472]      // while-condition  =>  TRUE
[19:38:51.472]      // while "1"  (timeout="200")
[19:38:51.472]      // while-condition  =>  TRUE
[19:38:51.473]      // while "1"  (timeout="200")
[19:38:51.473]      // while  =>  TIMEOUT
[19:38:51.473]      // end while "1"
[19:38:51.473]    </control>
[19:38:51.473]    <control if="canReadPins" while="" timeout="0" info="">
[19:38:51.473]      // if-block "canReadPins"
[19:38:51.473]        // =>  TRUE
[19:38:51.473]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:38:51.474]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:38:51.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:38:51.474]        // while-condition  =>  FALSE
[19:38:51.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:38:51.474]      </control>
[19:38:51.474]      // end if-block "canReadPins"
[19:38:51.476]    </control>
[19:38:51.476]    <control if="!canReadPins" while="" timeout="0" info="">
[19:38:51.476]      // if-block "!canReadPins"
[19:38:51.476]        // =>  FALSE
[19:38:51.476]      // skip if-block "!canReadPins"
[19:38:51.476]    </control>
[19:38:51.476]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:38:51.476]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:38:51.476]        // =>  TRUE
[19:38:51.476]      <block atomic="false" info="">
[19:38:51.477]        WriteAP(0x00, 0x190008);
[19:38:51.477]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:38:51.477]        WriteAP(0xF0, 0x01);
[19:38:51.479]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:38:51.479]      </block>
[19:38:51.479]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:38:51.479]    </control>
[19:38:51.479]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:38:51.479]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:38:51.479]        // =>  FALSE
[19:38:51.479]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:38:51.479]    </control>
[19:38:51.480]    <block atomic="false" info="">
[19:38:51.480]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:38:51.481]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:38:51.481]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:38:51.481]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:38:51.483]      __ap = 0; //lets make sure we reset the access point selection
[19:38:51.483]        // -> [__ap <= 0x00000000]
[19:38:51.483]    </block>
[19:38:51.483]  </sequence>
[19:38:51.483]  
[19:38:51.489]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:38:51.489]  
[19:38:51.490]  <debugvars>
[19:38:51.490]    // Pre-defined
[19:38:51.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:38:51.490]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:38:51.490]    __dp=0x00000000
[19:38:51.490]    __ap=0x00000000
[19:38:51.490]    __traceout=0x00000000      (Trace Disabled)
[19:38:51.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:38:51.490]    __FlashAddr=0x00000000
[19:38:51.490]    __FlashLen=0x00000000
[19:38:51.490]    __FlashArg=0x00000000
[19:38:51.491]    __FlashOp=0x00000000
[19:38:51.491]    __Result=0x00000000
[19:38:51.491]  </debugvars>
[19:38:51.491]  
[19:38:51.491]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:38:51.491]    <block atomic="false" info="">
[19:38:51.491]      __var deviceID = 0;
[19:38:51.491]        // -> [deviceID <= 0x00000000]
[19:38:51.491]      __var version = 0;
[19:38:51.492]        // -> [version <= 0x00000000]
[19:38:51.492]      __var partNum = 0;
[19:38:51.492]        // -> [partNum <= 0x00000000]
[19:38:51.492]      __var manuf = 0;
[19:38:51.492]        // -> [manuf <= 0x00000000]
[19:38:51.492]      __var isMSPM0G1X0X_G3X0X = 0;
[19:38:51.492]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:38:51.492]      __var isProduction = 0;
[19:38:51.492]        // -> [isProduction <= 0x00000000]
[19:38:51.492]      __var continueId = 0;
[19:38:51.493]        // -> [continueId <= 0x00000000]
[19:38:51.493]      deviceID =   Read32(0x41C40004);
[19:38:51.494]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:38:51.494]        // -> [deviceID <= 0x2BB8802F]
[19:38:51.494]      version = deviceID >> 28;
[19:38:51.494]        // -> [version <= 0x00000002]
[19:38:51.494]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:38:51.495]        // -> [partNum <= 0x0000BB88]
[19:38:51.495]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:38:51.495]        // -> [manuf <= 0x00000017]
[19:38:51.495]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:38:51.495]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:38:51.495]      isProduction = (version > 0);
[19:38:51.495]        // -> [isProduction <= 0x00000001]
[19:38:51.495]    </block>
[19:38:51.495]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:38:51.495]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:38:51.495]        // =>  FALSE
[19:38:51.495]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:38:51.496]    </control>
[19:38:51.496]    <control if="continueId == 4" while="" timeout="0" info="">
[19:38:51.496]      // if-block "continueId == 4"
[19:38:51.496]        // =>  FALSE
[19:38:51.496]      // skip if-block "continueId == 4"
[19:38:51.496]    </control>
[19:38:51.496]    <control if="!isProduction" while="" timeout="0" info="">
[19:38:51.496]      // if-block "!isProduction"
[19:38:51.496]        // =>  FALSE
[19:38:51.496]      // skip if-block "!isProduction"
[19:38:51.496]    </control>
[19:38:51.497]  </sequence>
[19:38:51.497]  
[19:40:00.871]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:40:00.871]  
[19:40:00.880]  <debugvars>
[19:40:00.880]    // Pre-defined
[19:40:00.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:00.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:40:00.880]    __dp=0x00000000
[19:40:00.880]    __ap=0x00000000
[19:40:00.880]    __traceout=0x00000000      (Trace Disabled)
[19:40:00.880]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:00.880]    __FlashAddr=0x00000000
[19:40:00.880]    __FlashLen=0x00000000
[19:40:00.881]    __FlashArg=0x00000000
[19:40:00.881]    __FlashOp=0x00000000
[19:40:00.881]    __Result=0x00000000
[19:40:00.881]  </debugvars>
[19:40:00.881]  
[19:40:00.881]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:40:00.881]    <block atomic="false" info="">
[19:40:00.881]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:40:00.882]        // -> [isSWJ <= 0x00000001]
[19:40:00.882]      __var hasDormant = __protocol & 0x00020000;
[19:40:00.882]        // -> [hasDormant <= 0x00000000]
[19:40:00.882]      __var protType   = __protocol & 0x0000FFFF;
[19:40:00.882]        // -> [protType <= 0x00000002]
[19:40:00.882]    </block>
[19:40:00.882]    <control if="protType == 1" while="" timeout="0" info="">
[19:40:00.882]      // if-block "protType == 1"
[19:40:00.882]        // =>  FALSE
[19:40:00.882]      // skip if-block "protType == 1"
[19:40:00.882]    </control>
[19:40:00.882]    <control if="protType == 2" while="" timeout="0" info="">
[19:40:00.882]      // if-block "protType == 2"
[19:40:00.882]        // =>  TRUE
[19:40:00.883]      <control if="isSWJ" while="" timeout="0" info="">
[19:40:00.883]        // if-block "isSWJ"
[19:40:00.883]          // =>  TRUE
[19:40:00.883]        <control if="hasDormant" while="" timeout="0" info="">
[19:40:00.883]          // if-block "hasDormant"
[19:40:00.883]            // =>  FALSE
[19:40:00.883]          // skip if-block "hasDormant"
[19:40:00.883]        </control>
[19:40:00.883]        <control if="!hasDormant" while="" timeout="0" info="">
[19:40:00.883]          // if-block "!hasDormant"
[19:40:00.883]            // =>  TRUE
[19:40:00.883]          <block atomic="false" info="">
[19:40:00.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:40:00.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:00.885]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:40:00.885]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:40:00.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:40:00.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:00.885]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:40:00.886]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:40:00.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:40:00.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:00.886]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:40:00.886]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:40:00.886]          </block>
[19:40:00.886]          // end if-block "!hasDormant"
[19:40:00.886]        </control>
[19:40:00.888]        // end if-block "isSWJ"
[19:40:00.888]      </control>
[19:40:00.888]      <control if="!isSWJ" while="" timeout="0" info="">
[19:40:00.888]        // if-block "!isSWJ"
[19:40:00.888]          // =>  FALSE
[19:40:00.888]        // skip if-block "!isSWJ"
[19:40:00.888]      </control>
[19:40:00.888]      <block atomic="false" info="">
[19:40:00.888]        ReadDP(0x0);
[19:40:00.888]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:40:00.888]      </block>
[19:40:00.888]      // end if-block "protType == 2"
[19:40:00.889]    </control>
[19:40:00.889]  </sequence>
[19:40:00.889]  
[19:40:00.889]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:40:00.889]  
[19:40:00.889]  <debugvars>
[19:40:00.889]    // Pre-defined
[19:40:00.891]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:00.891]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:40:00.891]    __dp=0x00000000
[19:40:00.891]    __ap=0x00000000
[19:40:00.891]    __traceout=0x00000000      (Trace Disabled)
[19:40:00.891]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:00.891]    __FlashAddr=0x00000000
[19:40:00.891]    __FlashLen=0x00000000
[19:40:00.891]    __FlashArg=0x00000000
[19:40:00.891]    __FlashOp=0x00000000
[19:40:00.892]    __Result=0x00000000
[19:40:00.892]  </debugvars>
[19:40:00.892]  
[19:40:00.892]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:40:00.892]    <block atomic="false" info="">
[19:40:00.892]      __var SW_DP_ABORT       = 0x0;
[19:40:00.892]        // -> [SW_DP_ABORT <= 0x00000000]
[19:40:00.892]      __var DP_CTRL_STAT      = 0x4;
[19:40:00.892]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:40:00.892]      __var DP_SELECT         = 0x8;
[19:40:00.893]        // -> [DP_SELECT <= 0x00000008]
[19:40:00.893]      __var powered_down      = 0;
[19:40:00.893]        // -> [powered_down <= 0x00000000]
[19:40:00.893]      WriteDP(DP_SELECT, 0x00000000);
[19:40:00.893]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:40:00.893]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:40:00.894]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:40:00.894]        // -> [powered_down <= 0x00000001]
[19:40:00.894]    </block>
[19:40:00.894]    <control if="powered_down" while="" timeout="0" info="">
[19:40:00.894]      // if-block "powered_down"
[19:40:00.894]        // =>  TRUE
[19:40:00.894]      <block atomic="false" info="">
[19:40:00.894]        Message(0, "Debug/System power-up request sent");
[19:40:00.897]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:40:00.899]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:40:00.899]      </block>
[19:40:00.899]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:40:00.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:40:00.899]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:40:00.899]        // while-condition  =>  FALSE
[19:40:00.899]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:40:00.899]      </control>
[19:40:00.899]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:40:00.899]        // if-block "(__protocol & 0xFFFF) == 1"
[19:40:00.900]          // =>  FALSE
[19:40:00.900]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:40:00.900]      </control>
[19:40:00.900]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:40:00.900]        // if-block "(__protocol & 0xFFFF) == 2"
[19:40:00.900]          // =>  TRUE
[19:40:00.900]        <block atomic="false" info="">
[19:40:00.900]          Message(0, "executing SWD power up");
[19:40:00.902]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:40:00.903]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:40:00.903]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:40:00.903]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:40:00.903]        </block>
[19:40:00.903]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:40:00.904]      </control>
[19:40:00.904]      // end if-block "powered_down"
[19:40:00.904]    </control>
[19:40:00.904]    <block atomic="false" info="">
[19:40:00.904]      __var DEBUG_PORT_VAL    = 0;
[19:40:00.904]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:40:00.904]      __var ACCESS_POINT_VAL  = 0;
[19:40:00.904]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:40:00.904]      __ap = 1; 
[19:40:00.904]        // -> [__ap <= 0x00000001]
[19:40:00.904]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:40:00.906]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:40:00.907]      __ap = 4;
[19:40:00.907]        // -> [__ap <= 0x00000004]
[19:40:00.907]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:40:00.908]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:40:00.908]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:40:00.908]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:40:00.909]    </block>
[19:40:00.909]    <block atomic="false" info="">
[19:40:00.909]      __var nReset = 0x80;
[19:40:00.909]        // -> [nReset <= 0x00000080]
[19:40:00.909]      __var canReadPins = 0;
[19:40:00.909]        // -> [canReadPins <= 0x00000000]
[19:40:00.909]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:40:00.911]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:40:00.911]        // -> [canReadPins <= 0x00000001]
[19:40:00.911]    </block>
[19:40:00.911]    <control if="" while="1" timeout="200" info="">
[19:40:00.911]      // while "1"  (timeout="200")
[19:40:00.911]      // while-condition  =>  TRUE
[19:40:00.911]      // while "1"  (timeout="200")
[19:40:00.911]      // while-condition  =>  TRUE
[19:40:00.911]      // while "1"  (timeout="200")
[19:40:00.911]      // while-condition  =>  TRUE
[19:40:00.911]      // while "1"  (timeout="200")
[19:40:00.912]      // while-condition  =>  TRUE
[19:40:00.912]      // while "1"  (timeout="200")
[19:40:00.912]      // while-condition  =>  TRUE
[19:40:00.912]      // while "1"  (timeout="200")
[19:40:00.912]      // while-condition  =>  TRUE
[19:40:00.912]      // while "1"  (timeout="200")
[19:40:00.912]      // while-condition  =>  TRUE
[19:40:00.913]      // while "1"  (timeout="200")
[19:40:00.913]      // while-condition  =>  TRUE
[19:40:00.913]      // while "1"  (timeout="200")
[19:40:00.913]      // while-condition  =>  TRUE
[19:40:00.913]      // while "1"  (timeout="200")
[19:40:00.913]      // while-condition  =>  TRUE
[19:40:00.913]      // while "1"  (timeout="200")
[19:40:00.913]      // while-condition  =>  TRUE
[19:40:00.913]      // while "1"  (timeout="200")
[19:40:00.913]      // while-condition  =>  TRUE
[19:40:00.914]      // while "1"  (timeout="200")
[19:40:00.914]      // while-condition  =>  TRUE
[19:40:00.914]      // while "1"  (timeout="200")
[19:40:00.914]      // while-condition  =>  TRUE
[19:40:00.914]      // while "1"  (timeout="200")
[19:40:00.914]      // while-condition  =>  TRUE
[19:40:00.914]      // while "1"  (timeout="200")
[19:40:00.914]      // while-condition  =>  TRUE
[19:40:00.914]      // while "1"  (timeout="200")
[19:40:00.914]      // while-condition  =>  TRUE
[19:40:00.914]      // while "1"  (timeout="200")
[19:40:00.915]      // while-condition  =>  TRUE
[19:40:00.915]      // while "1"  (timeout="200")
[19:40:00.915]      // while-condition  =>  TRUE
[19:40:00.915]      // while "1"  (timeout="200")
[19:40:00.915]      // while-condition  =>  TRUE
[19:40:00.915]      // while "1"  (timeout="200")
[19:40:00.915]      // while-condition  =>  TRUE
[19:40:00.915]      // while "1"  (timeout="200")
[19:40:00.915]      // while-condition  =>  TRUE
[19:40:00.915]      // while "1"  (timeout="200")
[19:40:00.915]      // while-condition  =>  TRUE
[19:40:00.915]      // while "1"  (timeout="200")
[19:40:00.916]      // while-condition  =>  TRUE
[19:40:00.916]      // while "1"  (timeout="200")
[19:40:00.916]      // while-condition  =>  TRUE
[19:40:00.916]      // while "1"  (timeout="200")
[19:40:00.916]      // while-condition  =>  TRUE
[19:40:00.916]      // while "1"  (timeout="200")
[19:40:00.916]      // while-condition  =>  TRUE
[19:40:00.916]      // while "1"  (timeout="200")
[19:40:00.916]      // while-condition  =>  TRUE
[19:40:00.916]      // while "1"  (timeout="200")
[19:40:00.916]      // while-condition  =>  TRUE
[19:40:00.917]      // while "1"  (timeout="200")
[19:40:00.917]      // while-condition  =>  TRUE
[19:40:00.917]      // while "1"  (timeout="200")
[19:40:00.917]      // while-condition  =>  TRUE
[19:40:00.917]      // while "1"  (timeout="200")
[19:40:00.917]      // while-condition  =>  TRUE
[19:40:00.917]      // while "1"  (timeout="200")
[19:40:00.917]      // while-condition  =>  TRUE
[19:40:00.917]      // while "1"  (timeout="200")
[19:40:00.917]      // while-condition  =>  TRUE
[19:40:00.917]      // while "1"  (timeout="200")
[19:40:00.917]      // while-condition  =>  TRUE
[19:40:00.917]      // while "1"  (timeout="200")
[19:40:00.918]      // while-condition  =>  TRUE
[19:40:00.918]      // while "1"  (timeout="200")
[19:40:00.918]      // while-condition  =>  TRUE
[19:40:00.918]      // while "1"  (timeout="200")
[19:40:00.918]      // while-condition  =>  TRUE
[19:40:00.918]      // while "1"  (timeout="200")
[19:40:00.918]      // while-condition  =>  TRUE
[19:40:00.918]      // while "1"  (timeout="200")
[19:40:00.918]      // while-condition  =>  TRUE
[19:40:00.918]      // while "1"  (timeout="200")
[19:40:00.918]      // while-condition  =>  TRUE
[19:40:00.919]      // while "1"  (timeout="200")
[19:40:00.919]      // while-condition  =>  TRUE
[19:40:00.919]      // while "1"  (timeout="200")
[19:40:00.920]      // while-condition  =>  TRUE
[19:40:00.920]      // while "1"  (timeout="200")
[19:40:00.920]      // while-condition  =>  TRUE
[19:40:00.920]      // while "1"  (timeout="200")
[19:40:00.920]      // while-condition  =>  TRUE
[19:40:00.922]      // while "1"  (timeout="200")
[19:40:00.922]      // while-condition  =>  TRUE
[19:40:00.922]      // while "1"  (timeout="200")
[19:40:00.922]      // while-condition  =>  TRUE
[19:40:00.922]      // while "1"  (timeout="200")
[19:40:00.922]      // while-condition  =>  TRUE
[19:40:00.922]      // while "1"  (timeout="200")
[19:40:00.922]      // while-condition  =>  TRUE
[19:40:00.922]      // while "1"  (timeout="200")
[19:40:00.922]      // while-condition  =>  TRUE
[19:40:00.922]      // while "1"  (timeout="200")
[19:40:00.922]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.923]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.923]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.923]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.923]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.923]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.923]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.923]      // while-condition  =>  TRUE
[19:40:00.923]      // while "1"  (timeout="200")
[19:40:00.924]      // while-condition  =>  TRUE
[19:40:00.924]      // while "1"  (timeout="200")
[19:40:00.924]      // while-condition  =>  TRUE
[19:40:00.924]      // while "1"  (timeout="200")
[19:40:00.924]      // while-condition  =>  TRUE
[19:40:00.924]      // while "1"  (timeout="200")
[19:40:00.924]      // while-condition  =>  TRUE
[19:40:00.924]      // while "1"  (timeout="200")
[19:40:00.924]      // while-condition  =>  TRUE
[19:40:00.924]      // while "1"  (timeout="200")
[19:40:00.924]      // while-condition  =>  TRUE
[19:40:00.924]      // while "1"  (timeout="200")
[19:40:00.924]      // while-condition  =>  TRUE
[19:40:00.924]      // while "1"  (timeout="200")
[19:40:00.926]      // while-condition  =>  TRUE
[19:40:00.926]      // while "1"  (timeout="200")
[19:40:00.926]      // while-condition  =>  TRUE
[19:40:00.926]      // while "1"  (timeout="200")
[19:40:00.926]      // while-condition  =>  TRUE
[19:40:00.926]      // while "1"  (timeout="200")
[19:40:00.927]      // while  =>  TIMEOUT
[19:40:00.927]      // end while "1"
[19:40:00.927]    </control>
[19:40:00.927]    <control if="canReadPins" while="" timeout="0" info="">
[19:40:00.927]      // if-block "canReadPins"
[19:40:00.927]        // =>  TRUE
[19:40:00.927]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:40:00.927]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:40:00.928]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:40:00.928]        // while-condition  =>  FALSE
[19:40:00.928]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:40:00.928]      </control>
[19:40:00.928]      // end if-block "canReadPins"
[19:40:00.928]    </control>
[19:40:00.929]    <control if="!canReadPins" while="" timeout="0" info="">
[19:40:00.929]      // if-block "!canReadPins"
[19:40:00.929]        // =>  FALSE
[19:40:00.929]      // skip if-block "!canReadPins"
[19:40:00.929]    </control>
[19:40:00.929]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:40:00.929]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:40:00.930]        // =>  TRUE
[19:40:00.930]      <block atomic="false" info="">
[19:40:00.930]        WriteAP(0x00, 0x190008);
[19:40:00.930]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:40:00.931]        WriteAP(0xF0, 0x01);
[19:40:00.931]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:40:00.931]      </block>
[19:40:00.931]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:40:00.932]    </control>
[19:40:00.932]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:40:00.932]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:40:00.932]        // =>  FALSE
[19:40:00.932]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:40:00.932]    </control>
[19:40:00.933]    <block atomic="false" info="">
[19:40:00.934]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:40:00.935]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:40:00.935]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:40:00.935]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:40:00.936]      __ap = 0; //lets make sure we reset the access point selection
[19:40:00.936]        // -> [__ap <= 0x00000000]
[19:40:00.936]    </block>
[19:40:00.936]  </sequence>
[19:40:00.937]  
[19:40:00.943]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:40:00.943]  
[19:40:00.943]  <debugvars>
[19:40:00.943]    // Pre-defined
[19:40:00.943]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:00.943]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:40:00.943]    __dp=0x00000000
[19:40:00.943]    __ap=0x00000000
[19:40:00.944]    __traceout=0x00000000      (Trace Disabled)
[19:40:00.944]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:00.944]    __FlashAddr=0x00000000
[19:40:00.944]    __FlashLen=0x00000000
[19:40:00.944]    __FlashArg=0x00000000
[19:40:00.944]    __FlashOp=0x00000000
[19:40:00.944]    __Result=0x00000000
[19:40:00.944]  </debugvars>
[19:40:00.944]  
[19:40:00.945]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:40:00.945]    <block atomic="false" info="">
[19:40:00.945]      __var deviceID = 0;
[19:40:00.945]        // -> [deviceID <= 0x00000000]
[19:40:00.945]      __var version = 0;
[19:40:00.945]        // -> [version <= 0x00000000]
[19:40:00.945]      __var partNum = 0;
[19:40:00.945]        // -> [partNum <= 0x00000000]
[19:40:00.946]      __var manuf = 0;
[19:40:00.946]        // -> [manuf <= 0x00000000]
[19:40:00.946]      __var isMSPM0G1X0X_G3X0X = 0;
[19:40:00.946]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:40:00.946]      __var isProduction = 0;
[19:40:00.946]        // -> [isProduction <= 0x00000000]
[19:40:00.946]      __var continueId = 0;
[19:40:00.946]        // -> [continueId <= 0x00000000]
[19:40:00.946]      deviceID =   Read32(0x41C40004);
[19:40:00.948]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:40:00.948]        // -> [deviceID <= 0x2BB8802F]
[19:40:00.948]      version = deviceID >> 28;
[19:40:00.948]        // -> [version <= 0x00000002]
[19:40:00.948]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:40:00.948]        // -> [partNum <= 0x0000BB88]
[19:40:00.948]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:40:00.949]        // -> [manuf <= 0x00000017]
[19:40:00.949]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:40:00.949]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:40:00.949]      isProduction = (version > 0);
[19:40:00.949]        // -> [isProduction <= 0x00000001]
[19:40:00.949]    </block>
[19:40:00.949]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:40:00.949]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:40:00.949]        // =>  FALSE
[19:40:00.949]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:40:00.949]    </control>
[19:40:00.949]    <control if="continueId == 4" while="" timeout="0" info="">
[19:40:00.950]      // if-block "continueId == 4"
[19:40:00.950]        // =>  FALSE
[19:40:00.950]      // skip if-block "continueId == 4"
[19:40:00.950]    </control>
[19:40:00.950]    <control if="!isProduction" while="" timeout="0" info="">
[19:40:00.951]      // if-block "!isProduction"
[19:40:00.951]        // =>  FALSE
[19:40:00.951]      // skip if-block "!isProduction"
[19:40:00.951]    </control>
[19:40:00.951]  </sequence>
[19:40:00.951]  
[19:40:04.138]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:40:04.138]  
[19:40:04.146]  <debugvars>
[19:40:04.146]    // Pre-defined
[19:40:04.146]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:04.146]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:40:04.146]    __dp=0x00000000
[19:40:04.147]    __ap=0x00000000
[19:40:04.147]    __traceout=0x00000000      (Trace Disabled)
[19:40:04.147]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:04.147]    __FlashAddr=0x00000000
[19:40:04.147]    __FlashLen=0x00000000
[19:40:04.147]    __FlashArg=0x00000000
[19:40:04.147]    __FlashOp=0x00000000
[19:40:04.147]    __Result=0x00000000
[19:40:04.147]  </debugvars>
[19:40:04.147]  
[19:40:04.147]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:40:04.148]    <block atomic="false" info="">
[19:40:04.148]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:40:04.148]        // -> [isSWJ <= 0x00000001]
[19:40:04.148]      __var hasDormant = __protocol & 0x00020000;
[19:40:04.148]        // -> [hasDormant <= 0x00000000]
[19:40:04.148]      __var protType   = __protocol & 0x0000FFFF;
[19:40:04.149]        // -> [protType <= 0x00000002]
[19:40:04.149]    </block>
[19:40:04.149]    <control if="protType == 1" while="" timeout="0" info="">
[19:40:04.149]      // if-block "protType == 1"
[19:40:04.149]        // =>  FALSE
[19:40:04.149]      // skip if-block "protType == 1"
[19:40:04.149]    </control>
[19:40:04.149]    <control if="protType == 2" while="" timeout="0" info="">
[19:40:04.149]      // if-block "protType == 2"
[19:40:04.149]        // =>  TRUE
[19:40:04.149]      <control if="isSWJ" while="" timeout="0" info="">
[19:40:04.149]        // if-block "isSWJ"
[19:40:04.149]          // =>  TRUE
[19:40:04.149]        <control if="hasDormant" while="" timeout="0" info="">
[19:40:04.149]          // if-block "hasDormant"
[19:40:04.150]            // =>  FALSE
[19:40:04.150]          // skip if-block "hasDormant"
[19:40:04.150]        </control>
[19:40:04.150]        <control if="!hasDormant" while="" timeout="0" info="">
[19:40:04.150]          // if-block "!hasDormant"
[19:40:04.150]            // =>  TRUE
[19:40:04.150]          <block atomic="false" info="">
[19:40:04.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:40:04.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:04.150]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:40:04.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:40:04.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:40:04.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:04.152]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:40:04.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:40:04.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:40:04.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:04.153]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:40:04.153]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:40:04.154]          </block>
[19:40:04.154]          // end if-block "!hasDormant"
[19:40:04.154]        </control>
[19:40:04.154]        // end if-block "isSWJ"
[19:40:04.154]      </control>
[19:40:04.154]      <control if="!isSWJ" while="" timeout="0" info="">
[19:40:04.154]        // if-block "!isSWJ"
[19:40:04.154]          // =>  FALSE
[19:40:04.154]        // skip if-block "!isSWJ"
[19:40:04.154]      </control>
[19:40:04.154]      <block atomic="false" info="">
[19:40:04.155]        ReadDP(0x0);
[19:40:04.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:40:04.155]      </block>
[19:40:04.155]      // end if-block "protType == 2"
[19:40:04.155]    </control>
[19:40:04.156]  </sequence>
[19:40:04.156]  
[19:40:04.156]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:40:04.156]  
[19:40:04.156]  <debugvars>
[19:40:04.156]    // Pre-defined
[19:40:04.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:04.156]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:40:04.156]    __dp=0x00000000
[19:40:04.156]    __ap=0x00000000
[19:40:04.156]    __traceout=0x00000000      (Trace Disabled)
[19:40:04.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:04.156]    __FlashAddr=0x00000000
[19:40:04.156]    __FlashLen=0x00000000
[19:40:04.156]    __FlashArg=0x00000000
[19:40:04.156]    __FlashOp=0x00000000
[19:40:04.158]    __Result=0x00000000
[19:40:04.158]  </debugvars>
[19:40:04.158]  
[19:40:04.158]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:40:04.158]    <block atomic="false" info="">
[19:40:04.158]      __var SW_DP_ABORT       = 0x0;
[19:40:04.158]        // -> [SW_DP_ABORT <= 0x00000000]
[19:40:04.158]      __var DP_CTRL_STAT      = 0x4;
[19:40:04.159]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:40:04.159]      __var DP_SELECT         = 0x8;
[19:40:04.159]        // -> [DP_SELECT <= 0x00000008]
[19:40:04.159]      __var powered_down      = 0;
[19:40:04.159]        // -> [powered_down <= 0x00000000]
[19:40:04.159]      WriteDP(DP_SELECT, 0x00000000);
[19:40:04.160]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:40:04.160]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:40:04.161]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:40:04.161]        // -> [powered_down <= 0x00000001]
[19:40:04.161]    </block>
[19:40:04.161]    <control if="powered_down" while="" timeout="0" info="">
[19:40:04.161]      // if-block "powered_down"
[19:40:04.161]        // =>  TRUE
[19:40:04.161]      <block atomic="false" info="">
[19:40:04.161]        Message(0, "Debug/System power-up request sent");
[19:40:04.163]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:40:04.163]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:40:04.163]      </block>
[19:40:04.163]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:40:04.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:40:04.164]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:40:04.164]        // while-condition  =>  FALSE
[19:40:04.164]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:40:04.164]      </control>
[19:40:04.164]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:40:04.164]        // if-block "(__protocol & 0xFFFF) == 1"
[19:40:04.164]          // =>  FALSE
[19:40:04.164]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:40:04.164]      </control>
[19:40:04.164]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:40:04.164]        // if-block "(__protocol & 0xFFFF) == 2"
[19:40:04.164]          // =>  TRUE
[19:40:04.165]        <block atomic="false" info="">
[19:40:04.165]          Message(0, "executing SWD power up");
[19:40:04.166]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:40:04.166]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:40:04.166]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:40:04.168]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:40:04.168]        </block>
[19:40:04.168]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:40:04.168]      </control>
[19:40:04.168]      // end if-block "powered_down"
[19:40:04.168]    </control>
[19:40:04.168]    <block atomic="false" info="">
[19:40:04.168]      __var DEBUG_PORT_VAL    = 0;
[19:40:04.168]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:40:04.168]      __var ACCESS_POINT_VAL  = 0;
[19:40:04.169]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:40:04.169]      __ap = 1; 
[19:40:04.169]        // -> [__ap <= 0x00000001]
[19:40:04.169]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:40:04.170]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:40:04.170]      __ap = 4;
[19:40:04.170]        // -> [__ap <= 0x00000004]
[19:40:04.170]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:40:04.171]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:40:04.171]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:40:04.172]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:40:04.173]    </block>
[19:40:04.174]    <block atomic="false" info="">
[19:40:04.174]      __var nReset = 0x80;
[19:40:04.174]        // -> [nReset <= 0x00000080]
[19:40:04.174]      __var canReadPins = 0;
[19:40:04.174]        // -> [canReadPins <= 0x00000000]
[19:40:04.175]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:40:04.175]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:40:04.175]        // -> [canReadPins <= 0x00000001]
[19:40:04.175]    </block>
[19:40:04.175]    <control if="" while="1" timeout="200" info="">
[19:40:04.175]      // while "1"  (timeout="200")
[19:40:04.175]      // while-condition  =>  TRUE
[19:40:04.176]      // while "1"  (timeout="200")
[19:40:04.176]      // while  =>  TIMEOUT
[19:40:04.176]      // end while "1"
[19:40:04.176]    </control>
[19:40:04.176]    <control if="canReadPins" while="" timeout="0" info="">
[19:40:04.176]      // if-block "canReadPins"
[19:40:04.176]        // =>  TRUE
[19:40:04.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:40:04.176]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:40:04.177]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:40:04.177]        // while-condition  =>  FALSE
[19:40:04.177]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:40:04.177]      </control>
[19:40:04.177]      // end if-block "canReadPins"
[19:40:04.177]    </control>
[19:40:04.177]    <control if="!canReadPins" while="" timeout="0" info="">
[19:40:04.177]      // if-block "!canReadPins"
[19:40:04.177]        // =>  FALSE
[19:40:04.178]      // skip if-block "!canReadPins"
[19:40:04.178]    </control>
[19:40:04.178]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:40:04.178]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:40:04.178]        // =>  TRUE
[19:40:04.178]      <block atomic="false" info="">
[19:40:04.178]        WriteAP(0x00, 0x190008);
[19:40:04.178]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:40:04.178]        WriteAP(0xF0, 0x01);
[19:40:04.179]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:40:04.179]      </block>
[19:40:04.179]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:40:04.179]    </control>
[19:40:04.179]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:40:04.179]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:40:04.181]        // =>  FALSE
[19:40:04.181]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:40:04.181]    </control>
[19:40:04.181]    <block atomic="false" info="">
[19:40:04.181]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:40:04.182]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:40:04.182]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:40:04.182]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:40:04.184]      __ap = 0; //lets make sure we reset the access point selection
[19:40:04.184]        // -> [__ap <= 0x00000000]
[19:40:04.184]    </block>
[19:40:04.184]  </sequence>
[19:40:04.184]  
[19:40:04.189]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:40:04.189]  
[19:40:04.191]  <debugvars>
[19:40:04.191]    // Pre-defined
[19:40:04.191]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:04.191]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:40:04.191]    __dp=0x00000000
[19:40:04.191]    __ap=0x00000000
[19:40:04.191]    __traceout=0x00000000      (Trace Disabled)
[19:40:04.191]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:04.191]    __FlashAddr=0x00000000
[19:40:04.191]    __FlashLen=0x00000000
[19:40:04.191]    __FlashArg=0x00000000
[19:40:04.191]    __FlashOp=0x00000000
[19:40:04.191]    __Result=0x00000000
[19:40:04.191]  </debugvars>
[19:40:04.191]  
[19:40:04.191]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:40:04.191]    <block atomic="false" info="">
[19:40:04.191]      __var deviceID = 0;
[19:40:04.191]        // -> [deviceID <= 0x00000000]
[19:40:04.191]      __var version = 0;
[19:40:04.191]        // -> [version <= 0x00000000]
[19:40:04.192]      __var partNum = 0;
[19:40:04.192]        // -> [partNum <= 0x00000000]
[19:40:04.192]      __var manuf = 0;
[19:40:04.192]        // -> [manuf <= 0x00000000]
[19:40:04.192]      __var isMSPM0G1X0X_G3X0X = 0;
[19:40:04.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:40:04.192]      __var isProduction = 0;
[19:40:04.193]        // -> [isProduction <= 0x00000000]
[19:40:04.193]      __var continueId = 0;
[19:40:04.193]        // -> [continueId <= 0x00000000]
[19:40:04.193]      deviceID =   Read32(0x41C40004);
[19:40:04.195]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:40:04.195]        // -> [deviceID <= 0x2BB8802F]
[19:40:04.195]      version = deviceID >> 28;
[19:40:04.195]        // -> [version <= 0x00000002]
[19:40:04.195]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:40:04.195]        // -> [partNum <= 0x0000BB88]
[19:40:04.195]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:40:04.195]        // -> [manuf <= 0x00000017]
[19:40:04.195]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:40:04.195]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:40:04.196]      isProduction = (version > 0);
[19:40:04.196]        // -> [isProduction <= 0x00000001]
[19:40:04.196]    </block>
[19:40:04.196]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:40:04.196]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:40:04.196]        // =>  FALSE
[19:40:04.196]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:40:04.198]    </control>
[19:40:04.198]    <control if="continueId == 4" while="" timeout="0" info="">
[19:40:04.198]      // if-block "continueId == 4"
[19:40:04.198]        // =>  FALSE
[19:40:04.198]      // skip if-block "continueId == 4"
[19:40:04.198]    </control>
[19:40:04.198]    <control if="!isProduction" while="" timeout="0" info="">
[19:40:04.198]      // if-block "!isProduction"
[19:40:04.198]        // =>  FALSE
[19:40:04.198]      // skip if-block "!isProduction"
[19:40:04.198]    </control>
[19:40:04.198]  </sequence>
[19:40:04.198]  
[19:41:02.482]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:41:02.482]  
[19:41:02.483]  <debugvars>
[19:41:02.483]    // Pre-defined
[19:41:02.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:02.483]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:02.483]    __dp=0x00000000
[19:41:02.483]    __ap=0x00000000
[19:41:02.483]    __traceout=0x00000000      (Trace Disabled)
[19:41:02.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:02.483]    __FlashAddr=0x00000000
[19:41:02.483]    __FlashLen=0x00000000
[19:41:02.483]    __FlashArg=0x00000000
[19:41:02.483]    __FlashOp=0x00000000
[19:41:02.483]    __Result=0x00000000
[19:41:02.485]  </debugvars>
[19:41:02.485]  
[19:41:02.485]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:41:02.485]    <block atomic="false" info="">
[19:41:02.485]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:41:02.485]        // -> [isSWJ <= 0x00000001]
[19:41:02.485]      __var hasDormant = __protocol & 0x00020000;
[19:41:02.485]        // -> [hasDormant <= 0x00000000]
[19:41:02.485]      __var protType   = __protocol & 0x0000FFFF;
[19:41:02.485]        // -> [protType <= 0x00000002]
[19:41:02.486]    </block>
[19:41:02.486]    <control if="protType == 1" while="" timeout="0" info="">
[19:41:02.486]      // if-block "protType == 1"
[19:41:02.486]        // =>  FALSE
[19:41:02.486]      // skip if-block "protType == 1"
[19:41:02.486]    </control>
[19:41:02.486]    <control if="protType == 2" while="" timeout="0" info="">
[19:41:02.486]      // if-block "protType == 2"
[19:41:02.486]        // =>  TRUE
[19:41:02.486]      <control if="isSWJ" while="" timeout="0" info="">
[19:41:02.486]        // if-block "isSWJ"
[19:41:02.486]          // =>  TRUE
[19:41:02.487]        <control if="hasDormant" while="" timeout="0" info="">
[19:41:02.487]          // if-block "hasDormant"
[19:41:02.487]            // =>  FALSE
[19:41:02.487]          // skip if-block "hasDormant"
[19:41:02.487]        </control>
[19:41:02.487]        <control if="!hasDormant" while="" timeout="0" info="">
[19:41:02.487]          // if-block "!hasDormant"
[19:41:02.487]            // =>  TRUE
[19:41:02.487]          <block atomic="false" info="">
[19:41:02.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:41:02.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:02.488]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:41:02.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:41:02.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:41:02.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:02.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:41:02.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:41:02.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:41:02.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:02.490]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:41:02.490]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:41:02.491]          </block>
[19:41:02.491]          // end if-block "!hasDormant"
[19:41:02.491]        </control>
[19:41:02.491]        // end if-block "isSWJ"
[19:41:02.491]      </control>
[19:41:02.491]      <control if="!isSWJ" while="" timeout="0" info="">
[19:41:02.491]        // if-block "!isSWJ"
[19:41:02.491]          // =>  FALSE
[19:41:02.491]        // skip if-block "!isSWJ"
[19:41:02.491]      </control>
[19:41:02.491]      <block atomic="false" info="">
[19:41:02.491]        ReadDP(0x0);
[19:41:02.492]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:41:02.492]      </block>
[19:41:02.492]      // end if-block "protType == 2"
[19:41:02.492]    </control>
[19:41:02.492]  </sequence>
[19:41:02.492]  
[19:41:02.492]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:41:02.492]  
[19:41:02.492]  <debugvars>
[19:41:02.492]    // Pre-defined
[19:41:02.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:02.493]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:02.493]    __dp=0x00000000
[19:41:02.493]    __ap=0x00000000
[19:41:02.493]    __traceout=0x00000000      (Trace Disabled)
[19:41:02.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:02.493]    __FlashAddr=0x00000000
[19:41:02.493]    __FlashLen=0x00000000
[19:41:02.493]    __FlashArg=0x00000000
[19:41:02.493]    __FlashOp=0x00000000
[19:41:02.493]    __Result=0x00000000
[19:41:02.494]  </debugvars>
[19:41:02.495]  
[19:41:02.495]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:41:02.495]    <block atomic="false" info="">
[19:41:02.495]      __var SW_DP_ABORT       = 0x0;
[19:41:02.495]        // -> [SW_DP_ABORT <= 0x00000000]
[19:41:02.495]      __var DP_CTRL_STAT      = 0x4;
[19:41:02.495]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:41:02.495]      __var DP_SELECT         = 0x8;
[19:41:02.495]        // -> [DP_SELECT <= 0x00000008]
[19:41:02.495]      __var powered_down      = 0;
[19:41:02.496]        // -> [powered_down <= 0x00000000]
[19:41:02.496]      WriteDP(DP_SELECT, 0x00000000);
[19:41:02.496]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:41:02.496]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:41:02.497]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:41:02.497]        // -> [powered_down <= 0x00000001]
[19:41:02.497]    </block>
[19:41:02.497]    <control if="powered_down" while="" timeout="0" info="">
[19:41:02.497]      // if-block "powered_down"
[19:41:02.497]        // =>  TRUE
[19:41:02.497]      <block atomic="false" info="">
[19:41:02.497]        Message(0, "Debug/System power-up request sent");
[19:41:02.500]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:41:02.501]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:41:02.501]      </block>
[19:41:02.501]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:41:02.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:41:02.502]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:41:02.502]        // while-condition  =>  FALSE
[19:41:02.503]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:41:02.503]      </control>
[19:41:02.503]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:41:02.503]        // if-block "(__protocol & 0xFFFF) == 1"
[19:41:02.503]          // =>  FALSE
[19:41:02.503]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:41:02.503]      </control>
[19:41:02.503]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:41:02.503]        // if-block "(__protocol & 0xFFFF) == 2"
[19:41:02.504]          // =>  TRUE
[19:41:02.504]        <block atomic="false" info="">
[19:41:02.504]          Message(0, "executing SWD power up");
[19:41:02.505]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:41:02.506]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:41:02.506]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:41:02.506]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:41:02.507]        </block>
[19:41:02.507]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:41:02.507]      </control>
[19:41:02.507]      // end if-block "powered_down"
[19:41:02.507]    </control>
[19:41:02.507]    <block atomic="false" info="">
[19:41:02.507]      __var DEBUG_PORT_VAL    = 0;
[19:41:02.507]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:41:02.507]      __var ACCESS_POINT_VAL  = 0;
[19:41:02.507]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:41:02.507]      __ap = 1; 
[19:41:02.507]        // -> [__ap <= 0x00000001]
[19:41:02.508]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:41:02.509]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:41:02.509]      __ap = 4;
[19:41:02.509]        // -> [__ap <= 0x00000004]
[19:41:02.509]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:02.511]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:41:02.511]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:41:02.511]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:02.512]    </block>
[19:41:02.512]    <block atomic="false" info="">
[19:41:02.512]      __var nReset = 0x80;
[19:41:02.512]        // -> [nReset <= 0x00000080]
[19:41:02.512]      __var canReadPins = 0;
[19:41:02.513]        // -> [canReadPins <= 0x00000000]
[19:41:02.513]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:41:02.513]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:41:02.514]        // -> [canReadPins <= 0x00000001]
[19:41:02.514]    </block>
[19:41:02.514]    <control if="" while="1" timeout="200" info="">
[19:41:02.514]      // while "1"  (timeout="200")
[19:41:02.514]      // while-condition  =>  TRUE
[19:41:02.514]      // while "1"  (timeout="200")
[19:41:02.514]      // while-condition  =>  TRUE
[19:41:02.514]      // while "1"  (timeout="200")
[19:41:02.514]      // while-condition  =>  TRUE
[19:41:02.514]      // while "1"  (timeout="200")
[19:41:02.514]      // while-condition  =>  TRUE
[19:41:02.515]      // while "1"  (timeout="200")
[19:41:02.515]      // while-condition  =>  TRUE
[19:41:02.515]      // while "1"  (timeout="200")
[19:41:02.515]      // while-condition  =>  TRUE
[19:41:02.515]      // while "1"  (timeout="200")
[19:41:02.515]      // while-condition  =>  TRUE
[19:41:02.515]      // while "1"  (timeout="200")
[19:41:02.515]      // while-condition  =>  TRUE
[19:41:02.515]      // while "1"  (timeout="200")
[19:41:02.515]      // while-condition  =>  TRUE
[19:41:02.515]      // while "1"  (timeout="200")
[19:41:02.515]      // while-condition  =>  TRUE
[19:41:02.515]      // while "1"  (timeout="200")
[19:41:02.516]      // while-condition  =>  TRUE
[19:41:02.516]      // while "1"  (timeout="200")
[19:41:02.516]      // while-condition  =>  TRUE
[19:41:02.516]      // while "1"  (timeout="200")
[19:41:02.516]      // while-condition  =>  TRUE
[19:41:02.516]      // while "1"  (timeout="200")
[19:41:02.516]      // while-condition  =>  TRUE
[19:41:02.516]      // while "1"  (timeout="200")
[19:41:02.516]      // while-condition  =>  TRUE
[19:41:02.517]      // while "1"  (timeout="200")
[19:41:02.517]      // while-condition  =>  TRUE
[19:41:02.517]      // while "1"  (timeout="200")
[19:41:02.517]      // while-condition  =>  TRUE
[19:41:02.517]      // while "1"  (timeout="200")
[19:41:02.517]      // while-condition  =>  TRUE
[19:41:02.517]      // while "1"  (timeout="200")
[19:41:02.517]      // while-condition  =>  TRUE
[19:41:02.517]      // while "1"  (timeout="200")
[19:41:02.517]      // while-condition  =>  TRUE
[19:41:02.517]      // while "1"  (timeout="200")
[19:41:02.518]      // while-condition  =>  TRUE
[19:41:02.518]      // while "1"  (timeout="200")
[19:41:02.518]      // while-condition  =>  TRUE
[19:41:02.518]      // while "1"  (timeout="200")
[19:41:02.518]      // while-condition  =>  TRUE
[19:41:02.518]      // while "1"  (timeout="200")
[19:41:02.518]      // while-condition  =>  TRUE
[19:41:02.518]      // while "1"  (timeout="200")
[19:41:02.518]      // while-condition  =>  TRUE
[19:41:02.518]      // while "1"  (timeout="200")
[19:41:02.518]      // while-condition  =>  TRUE
[19:41:02.518]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.519]      // while "1"  (timeout="200")
[19:41:02.519]      // while-condition  =>  TRUE
[19:41:02.521]      // while "1"  (timeout="200")
[19:41:02.521]      // while  =>  TIMEOUT
[19:41:02.521]      // end while "1"
[19:41:02.521]    </control>
[19:41:02.521]    <control if="canReadPins" while="" timeout="0" info="">
[19:41:02.521]      // if-block "canReadPins"
[19:41:02.521]        // =>  TRUE
[19:41:02.522]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:41:02.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:41:02.522]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:41:02.522]        // while-condition  =>  FALSE
[19:41:02.522]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:41:02.523]      </control>
[19:41:02.523]      // end if-block "canReadPins"
[19:41:02.523]    </control>
[19:41:02.523]    <control if="!canReadPins" while="" timeout="0" info="">
[19:41:02.523]      // if-block "!canReadPins"
[19:41:02.523]        // =>  FALSE
[19:41:02.523]      // skip if-block "!canReadPins"
[19:41:02.523]    </control>
[19:41:02.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:41:02.524]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:02.524]        // =>  TRUE
[19:41:02.524]      <block atomic="false" info="">
[19:41:02.524]        WriteAP(0x00, 0x190008);
[19:41:02.524]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:02.525]        WriteAP(0xF0, 0x01);
[19:41:02.526]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:02.526]      </block>
[19:41:02.526]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:02.526]    </control>
[19:41:02.526]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:41:02.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:02.526]        // =>  FALSE
[19:41:02.526]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:02.526]    </control>
[19:41:02.526]    <block atomic="false" info="">
[19:41:02.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:02.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:41:02.527]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:41:02.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:02.530]      __ap = 0; //lets make sure we reset the access point selection
[19:41:02.530]        // -> [__ap <= 0x00000000]
[19:41:02.530]    </block>
[19:41:02.530]  </sequence>
[19:41:02.530]  
[19:41:02.536]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:41:02.536]  
[19:41:02.536]  <debugvars>
[19:41:02.537]    // Pre-defined
[19:41:02.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:02.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:02.537]    __dp=0x00000000
[19:41:02.537]    __ap=0x00000000
[19:41:02.537]    __traceout=0x00000000      (Trace Disabled)
[19:41:02.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:02.537]    __FlashAddr=0x00000000
[19:41:02.537]    __FlashLen=0x00000000
[19:41:02.537]    __FlashArg=0x00000000
[19:41:02.537]    __FlashOp=0x00000000
[19:41:02.538]    __Result=0x00000000
[19:41:02.538]  </debugvars>
[19:41:02.538]  
[19:41:02.538]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:41:02.538]    <block atomic="false" info="">
[19:41:02.538]      __var deviceID = 0;
[19:41:02.538]        // -> [deviceID <= 0x00000000]
[19:41:02.538]      __var version = 0;
[19:41:02.538]        // -> [version <= 0x00000000]
[19:41:02.538]      __var partNum = 0;
[19:41:02.538]        // -> [partNum <= 0x00000000]
[19:41:02.538]      __var manuf = 0;
[19:41:02.539]        // -> [manuf <= 0x00000000]
[19:41:02.539]      __var isMSPM0G1X0X_G3X0X = 0;
[19:41:02.539]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:41:02.539]      __var isProduction = 0;
[19:41:02.539]        // -> [isProduction <= 0x00000000]
[19:41:02.539]      __var continueId = 0;
[19:41:02.539]        // -> [continueId <= 0x00000000]
[19:41:02.539]      deviceID =   Read32(0x41C40004);
[19:41:02.540]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:41:02.540]        // -> [deviceID <= 0x2BB8802F]
[19:41:02.540]      version = deviceID >> 28;
[19:41:02.540]        // -> [version <= 0x00000002]
[19:41:02.542]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:41:02.542]        // -> [partNum <= 0x0000BB88]
[19:41:02.542]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:41:02.542]        // -> [manuf <= 0x00000017]
[19:41:02.542]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:41:02.542]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:41:02.543]      isProduction = (version > 0);
[19:41:02.543]        // -> [isProduction <= 0x00000001]
[19:41:02.543]    </block>
[19:41:02.543]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:41:02.543]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:41:02.543]        // =>  FALSE
[19:41:02.543]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:41:02.543]    </control>
[19:41:02.543]    <control if="continueId == 4" while="" timeout="0" info="">
[19:41:02.543]      // if-block "continueId == 4"
[19:41:02.543]        // =>  FALSE
[19:41:02.544]      // skip if-block "continueId == 4"
[19:41:02.544]    </control>
[19:41:02.544]    <control if="!isProduction" while="" timeout="0" info="">
[19:41:02.544]      // if-block "!isProduction"
[19:41:02.544]        // =>  FALSE
[19:41:02.544]      // skip if-block "!isProduction"
[19:41:02.544]    </control>
[19:41:02.544]  </sequence>
[19:41:02.544]  
[19:41:27.474]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:41:27.474]  
[19:41:27.475]  <debugvars>
[19:41:27.475]    // Pre-defined
[19:41:27.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:27.475]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:27.475]    __dp=0x00000000
[19:41:27.475]    __ap=0x00000000
[19:41:27.475]    __traceout=0x00000000      (Trace Disabled)
[19:41:27.475]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:27.475]    __FlashAddr=0x00000000
[19:41:27.475]    __FlashLen=0x00000000
[19:41:27.475]    __FlashArg=0x00000000
[19:41:27.476]    __FlashOp=0x00000000
[19:41:27.476]    __Result=0x00000000
[19:41:27.476]  </debugvars>
[19:41:27.476]  
[19:41:27.476]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:41:27.476]    <block atomic="false" info="">
[19:41:27.476]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:41:27.476]        // -> [isSWJ <= 0x00000001]
[19:41:27.477]      __var hasDormant = __protocol & 0x00020000;
[19:41:27.477]        // -> [hasDormant <= 0x00000000]
[19:41:27.477]      __var protType   = __protocol & 0x0000FFFF;
[19:41:27.477]        // -> [protType <= 0x00000002]
[19:41:27.477]    </block>
[19:41:27.477]    <control if="protType == 1" while="" timeout="0" info="">
[19:41:27.477]      // if-block "protType == 1"
[19:41:27.477]        // =>  FALSE
[19:41:27.477]      // skip if-block "protType == 1"
[19:41:27.478]    </control>
[19:41:27.478]    <control if="protType == 2" while="" timeout="0" info="">
[19:41:27.478]      // if-block "protType == 2"
[19:41:27.478]        // =>  TRUE
[19:41:27.478]      <control if="isSWJ" while="" timeout="0" info="">
[19:41:27.478]        // if-block "isSWJ"
[19:41:27.478]          // =>  TRUE
[19:41:27.478]        <control if="hasDormant" while="" timeout="0" info="">
[19:41:27.478]          // if-block "hasDormant"
[19:41:27.478]            // =>  FALSE
[19:41:27.478]          // skip if-block "hasDormant"
[19:41:27.479]        </control>
[19:41:27.479]        <control if="!hasDormant" while="" timeout="0" info="">
[19:41:27.479]          // if-block "!hasDormant"
[19:41:27.479]            // =>  TRUE
[19:41:27.479]          <block atomic="false" info="">
[19:41:27.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:41:27.480]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:27.480]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:41:27.480]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:41:27.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:41:27.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:27.481]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:41:27.481]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:41:27.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:41:27.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:27.482]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:41:27.482]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:41:27.482]          </block>
[19:41:27.482]          // end if-block "!hasDormant"
[19:41:27.482]        </control>
[19:41:27.482]        // end if-block "isSWJ"
[19:41:27.482]      </control>
[19:41:27.482]      <control if="!isSWJ" while="" timeout="0" info="">
[19:41:27.483]        // if-block "!isSWJ"
[19:41:27.483]          // =>  FALSE
[19:41:27.483]        // skip if-block "!isSWJ"
[19:41:27.483]      </control>
[19:41:27.483]      <block atomic="false" info="">
[19:41:27.483]        ReadDP(0x0);
[19:41:27.483]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:41:27.484]      </block>
[19:41:27.484]      // end if-block "protType == 2"
[19:41:27.484]    </control>
[19:41:27.484]  </sequence>
[19:41:27.484]  
[19:41:27.484]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:41:27.484]  
[19:41:27.484]  <debugvars>
[19:41:27.484]    // Pre-defined
[19:41:27.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:27.484]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:27.485]    __dp=0x00000000
[19:41:27.485]    __ap=0x00000000
[19:41:27.485]    __traceout=0x00000000      (Trace Disabled)
[19:41:27.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:27.485]    __FlashAddr=0x00000000
[19:41:27.485]    __FlashLen=0x00000000
[19:41:27.485]    __FlashArg=0x00000000
[19:41:27.485]    __FlashOp=0x00000000
[19:41:27.485]    __Result=0x00000000
[19:41:27.485]  </debugvars>
[19:41:27.485]  
[19:41:27.485]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:41:27.486]    <block atomic="false" info="">
[19:41:27.486]      __var SW_DP_ABORT       = 0x0;
[19:41:27.486]        // -> [SW_DP_ABORT <= 0x00000000]
[19:41:27.486]      __var DP_CTRL_STAT      = 0x4;
[19:41:27.486]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:41:27.486]      __var DP_SELECT         = 0x8;
[19:41:27.486]        // -> [DP_SELECT <= 0x00000008]
[19:41:27.486]      __var powered_down      = 0;
[19:41:27.486]        // -> [powered_down <= 0x00000000]
[19:41:27.486]      WriteDP(DP_SELECT, 0x00000000);
[19:41:27.487]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:41:27.487]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:41:27.487]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:41:27.487]        // -> [powered_down <= 0x00000001]
[19:41:27.487]    </block>
[19:41:27.487]    <control if="powered_down" while="" timeout="0" info="">
[19:41:27.487]      // if-block "powered_down"
[19:41:27.489]        // =>  TRUE
[19:41:27.489]      <block atomic="false" info="">
[19:41:27.489]        Message(0, "Debug/System power-up request sent");
[19:41:27.493]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:41:27.493]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:41:27.493]      </block>
[19:41:27.493]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:41:27.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:41:27.494]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:41:27.494]        // while-condition  =>  FALSE
[19:41:27.494]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:41:27.495]      </control>
[19:41:27.495]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:41:27.495]        // if-block "(__protocol & 0xFFFF) == 1"
[19:41:27.495]          // =>  FALSE
[19:41:27.495]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:41:27.495]      </control>
[19:41:27.495]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:41:27.495]        // if-block "(__protocol & 0xFFFF) == 2"
[19:41:27.496]          // =>  TRUE
[19:41:27.496]        <block atomic="false" info="">
[19:41:27.496]          Message(0, "executing SWD power up");
[19:41:27.499]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:41:27.499]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:41:27.499]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:41:27.500]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:41:27.500]        </block>
[19:41:27.500]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:41:27.500]      </control>
[19:41:27.500]      // end if-block "powered_down"
[19:41:27.500]    </control>
[19:41:27.500]    <block atomic="false" info="">
[19:41:27.500]      __var DEBUG_PORT_VAL    = 0;
[19:41:27.500]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:41:27.500]      __var ACCESS_POINT_VAL  = 0;
[19:41:27.501]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:41:27.501]      __ap = 1; 
[19:41:27.501]        // -> [__ap <= 0x00000001]
[19:41:27.501]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:41:27.502]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:41:27.502]      __ap = 4;
[19:41:27.502]        // -> [__ap <= 0x00000004]
[19:41:27.502]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:27.502]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:41:27.504]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:41:27.504]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:27.506]    </block>
[19:41:27.506]    <block atomic="false" info="">
[19:41:27.506]      __var nReset = 0x80;
[19:41:27.507]        // -> [nReset <= 0x00000080]
[19:41:27.507]      __var canReadPins = 0;
[19:41:27.507]        // -> [canReadPins <= 0x00000000]
[19:41:27.507]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:41:27.507]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:41:27.507]        // -> [canReadPins <= 0x00000001]
[19:41:27.508]    </block>
[19:41:27.508]    <control if="" while="1" timeout="200" info="">
[19:41:27.508]      // while "1"  (timeout="200")
[19:41:27.508]      // while-condition  =>  TRUE
[19:41:27.508]      // while "1"  (timeout="200")
[19:41:27.508]      // while-condition  =>  TRUE
[19:41:27.509]      // while "1"  (timeout="200")
[19:41:27.509]      // while-condition  =>  TRUE
[19:41:27.509]      // while "1"  (timeout="200")
[19:41:27.509]      // while-condition  =>  TRUE
[19:41:27.509]      // while "1"  (timeout="200")
[19:41:27.509]      // while-condition  =>  TRUE
[19:41:27.510]      // while "1"  (timeout="200")
[19:41:27.510]      // while-condition  =>  TRUE
[19:41:27.510]      // while "1"  (timeout="200")
[19:41:27.510]      // while-condition  =>  TRUE
[19:41:27.510]      // while "1"  (timeout="200")
[19:41:27.510]      // while-condition  =>  TRUE
[19:41:27.511]      // while "1"  (timeout="200")
[19:41:27.511]      // while-condition  =>  TRUE
[19:41:27.511]      // while "1"  (timeout="200")
[19:41:27.511]      // while-condition  =>  TRUE
[19:41:27.511]      // while "1"  (timeout="200")
[19:41:27.511]      // while-condition  =>  TRUE
[19:41:27.511]      // while "1"  (timeout="200")
[19:41:27.511]      // while-condition  =>  TRUE
[19:41:27.511]      // while "1"  (timeout="200")
[19:41:27.511]      // while-condition  =>  TRUE
[19:41:27.511]      // while "1"  (timeout="200")
[19:41:27.511]      // while-condition  =>  TRUE
[19:41:27.512]      // while "1"  (timeout="200")
[19:41:27.512]      // while-condition  =>  TRUE
[19:41:27.512]      // while "1"  (timeout="200")
[19:41:27.512]      // while-condition  =>  TRUE
[19:41:27.512]      // while "1"  (timeout="200")
[19:41:27.512]      // while-condition  =>  TRUE
[19:41:27.512]      // while "1"  (timeout="200")
[19:41:27.512]      // while-condition  =>  TRUE
[19:41:27.512]      // while "1"  (timeout="200")
[19:41:27.512]      // while-condition  =>  TRUE
[19:41:27.512]      // while "1"  (timeout="200")
[19:41:27.512]      // while-condition  =>  TRUE
[19:41:27.512]      // while "1"  (timeout="200")
[19:41:27.512]      // while-condition  =>  TRUE
[19:41:27.513]      // while "1"  (timeout="200")
[19:41:27.513]      // while-condition  =>  TRUE
[19:41:27.513]      // while "1"  (timeout="200")
[19:41:27.513]      // while-condition  =>  TRUE
[19:41:27.513]      // while "1"  (timeout="200")
[19:41:27.513]      // while-condition  =>  TRUE
[19:41:27.513]      // while "1"  (timeout="200")
[19:41:27.513]      // while-condition  =>  TRUE
[19:41:27.513]      // while "1"  (timeout="200")
[19:41:27.515]      // while-condition  =>  TRUE
[19:41:27.515]      // while "1"  (timeout="200")
[19:41:27.515]      // while-condition  =>  TRUE
[19:41:27.515]      // while "1"  (timeout="200")
[19:41:27.515]      // while-condition  =>  TRUE
[19:41:27.515]      // while "1"  (timeout="200")
[19:41:27.515]      // while-condition  =>  TRUE
[19:41:27.515]      // while "1"  (timeout="200")
[19:41:27.516]      // while-condition  =>  TRUE
[19:41:27.516]      // while "1"  (timeout="200")
[19:41:27.516]      // while-condition  =>  TRUE
[19:41:27.516]      // while "1"  (timeout="200")
[19:41:27.516]      // while-condition  =>  TRUE
[19:41:27.516]      // while "1"  (timeout="200")
[19:41:27.516]      // while-condition  =>  TRUE
[19:41:27.516]      // while "1"  (timeout="200")
[19:41:27.516]      // while-condition  =>  TRUE
[19:41:27.516]      // while "1"  (timeout="200")
[19:41:27.516]      // while-condition  =>  TRUE
[19:41:27.516]      // while "1"  (timeout="200")
[19:41:27.516]      // while-condition  =>  TRUE
[19:41:27.517]      // while "1"  (timeout="200")
[19:41:27.517]      // while-condition  =>  TRUE
[19:41:27.517]      // while "1"  (timeout="200")
[19:41:27.517]      // while-condition  =>  TRUE
[19:41:27.517]      // while "1"  (timeout="200")
[19:41:27.517]      // while-condition  =>  TRUE
[19:41:27.517]      // while "1"  (timeout="200")
[19:41:27.517]      // while-condition  =>  TRUE
[19:41:27.517]      // while "1"  (timeout="200")
[19:41:27.517]      // while-condition  =>  TRUE
[19:41:27.517]      // while "1"  (timeout="200")
[19:41:27.517]      // while-condition  =>  TRUE
[19:41:27.517]      // while "1"  (timeout="200")
[19:41:27.518]      // while-condition  =>  TRUE
[19:41:27.518]      // while "1"  (timeout="200")
[19:41:27.518]      // while-condition  =>  TRUE
[19:41:27.518]      // while "1"  (timeout="200")
[19:41:27.518]      // while-condition  =>  TRUE
[19:41:27.518]      // while "1"  (timeout="200")
[19:41:27.518]      // while-condition  =>  TRUE
[19:41:27.518]      // while "1"  (timeout="200")
[19:41:27.518]      // while-condition  =>  TRUE
[19:41:27.518]      // while "1"  (timeout="200")
[19:41:27.519]      // while-condition  =>  TRUE
[19:41:27.519]      // while "1"  (timeout="200")
[19:41:27.519]      // while-condition  =>  TRUE
[19:41:27.519]      // while "1"  (timeout="200")
[19:41:27.519]      // while-condition  =>  TRUE
[19:41:27.519]      // while "1"  (timeout="200")
[19:41:27.519]      // while-condition  =>  TRUE
[19:41:27.519]      // while "1"  (timeout="200")
[19:41:27.519]      // while-condition  =>  TRUE
[19:41:27.519]      // while "1"  (timeout="200")
[19:41:27.519]      // while-condition  =>  TRUE
[19:41:27.519]      // while "1"  (timeout="200")
[19:41:27.520]      // while-condition  =>  TRUE
[19:41:27.520]      // while "1"  (timeout="200")
[19:41:27.520]      // while  =>  TIMEOUT
[19:41:27.520]      // end while "1"
[19:41:27.520]    </control>
[19:41:27.521]    <control if="canReadPins" while="" timeout="0" info="">
[19:41:27.521]      // if-block "canReadPins"
[19:41:27.521]        // =>  TRUE
[19:41:27.521]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:41:27.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:41:27.522]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:41:27.522]        // while-condition  =>  FALSE
[19:41:27.522]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:41:27.522]      </control>
[19:41:27.522]      // end if-block "canReadPins"
[19:41:27.522]    </control>
[19:41:27.522]    <control if="!canReadPins" while="" timeout="0" info="">
[19:41:27.522]      // if-block "!canReadPins"
[19:41:27.522]        // =>  FALSE
[19:41:27.522]      // skip if-block "!canReadPins"
[19:41:27.522]    </control>
[19:41:27.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:41:27.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:27.523]        // =>  TRUE
[19:41:27.523]      <block atomic="false" info="">
[19:41:27.523]        WriteAP(0x00, 0x190008);
[19:41:27.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:27.523]        WriteAP(0xF0, 0x01);
[19:41:27.526]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:27.526]      </block>
[19:41:27.526]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:27.526]    </control>
[19:41:27.526]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:41:27.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:27.526]        // =>  FALSE
[19:41:27.526]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:27.526]    </control>
[19:41:27.526]    <block atomic="false" info="">
[19:41:27.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:27.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:41:27.528]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:41:27.528]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:27.529]      __ap = 0; //lets make sure we reset the access point selection
[19:41:27.529]        // -> [__ap <= 0x00000000]
[19:41:27.530]    </block>
[19:41:27.530]  </sequence>
[19:41:27.530]  
[19:41:27.536]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:41:27.536]  
[19:41:27.536]  <debugvars>
[19:41:27.537]    // Pre-defined
[19:41:27.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:27.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:27.537]    __dp=0x00000000
[19:41:27.537]    __ap=0x00000000
[19:41:27.537]    __traceout=0x00000000      (Trace Disabled)
[19:41:27.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:27.537]    __FlashAddr=0x00000000
[19:41:27.537]    __FlashLen=0x00000000
[19:41:27.537]    __FlashArg=0x00000000
[19:41:27.537]    __FlashOp=0x00000000
[19:41:27.538]    __Result=0x00000000
[19:41:27.538]  </debugvars>
[19:41:27.538]  
[19:41:27.538]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:41:27.538]    <block atomic="false" info="">
[19:41:27.538]      __var deviceID = 0;
[19:41:27.538]        // -> [deviceID <= 0x00000000]
[19:41:27.539]      __var version = 0;
[19:41:27.539]        // -> [version <= 0x00000000]
[19:41:27.539]      __var partNum = 0;
[19:41:27.539]        // -> [partNum <= 0x00000000]
[19:41:27.539]      __var manuf = 0;
[19:41:27.539]        // -> [manuf <= 0x00000000]
[19:41:27.539]      __var isMSPM0G1X0X_G3X0X = 0;
[19:41:27.539]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:41:27.539]      __var isProduction = 0;
[19:41:27.539]        // -> [isProduction <= 0x00000000]
[19:41:27.539]      __var continueId = 0;
[19:41:27.539]        // -> [continueId <= 0x00000000]
[19:41:27.539]      deviceID =   Read32(0x41C40004);
[19:41:27.541]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:41:27.541]        // -> [deviceID <= 0x2BB8802F]
[19:41:27.541]      version = deviceID >> 28;
[19:41:27.541]        // -> [version <= 0x00000002]
[19:41:27.541]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:41:27.541]        // -> [partNum <= 0x0000BB88]
[19:41:27.541]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:41:27.541]        // -> [manuf <= 0x00000017]
[19:41:27.541]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:41:27.542]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:41:27.542]      isProduction = (version > 0);
[19:41:27.542]        // -> [isProduction <= 0x00000001]
[19:41:27.542]    </block>
[19:41:27.542]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:41:27.542]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:41:27.542]        // =>  FALSE
[19:41:27.542]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:41:27.542]    </control>
[19:41:27.542]    <control if="continueId == 4" while="" timeout="0" info="">
[19:41:27.542]      // if-block "continueId == 4"
[19:41:27.542]        // =>  FALSE
[19:41:27.543]      // skip if-block "continueId == 4"
[19:41:27.543]    </control>
[19:41:27.543]    <control if="!isProduction" while="" timeout="0" info="">
[19:41:27.543]      // if-block "!isProduction"
[19:41:27.543]        // =>  FALSE
[19:41:27.543]      // skip if-block "!isProduction"
[19:41:27.543]    </control>
[19:41:27.543]  </sequence>
[19:41:27.543]  
[19:42:05.641]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:42:05.641]  
[19:42:05.649]  <debugvars>
[19:42:05.649]    // Pre-defined
[19:42:05.649]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:05.649]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:05.649]    __dp=0x00000000
[19:42:05.649]    __ap=0x00000000
[19:42:05.649]    __traceout=0x00000000      (Trace Disabled)
[19:42:05.649]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:05.649]    __FlashAddr=0x00000000
[19:42:05.649]    __FlashLen=0x00000000
[19:42:05.649]    __FlashArg=0x00000000
[19:42:05.649]    __FlashOp=0x00000000
[19:42:05.649]    __Result=0x00000000
[19:42:05.650]  </debugvars>
[19:42:05.650]  
[19:42:05.650]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:42:05.650]    <block atomic="false" info="">
[19:42:05.650]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:42:05.650]        // -> [isSWJ <= 0x00000001]
[19:42:05.650]      __var hasDormant = __protocol & 0x00020000;
[19:42:05.651]        // -> [hasDormant <= 0x00000000]
[19:42:05.651]      __var protType   = __protocol & 0x0000FFFF;
[19:42:05.651]        // -> [protType <= 0x00000002]
[19:42:05.651]    </block>
[19:42:05.651]    <control if="protType == 1" while="" timeout="0" info="">
[19:42:05.651]      // if-block "protType == 1"
[19:42:05.651]        // =>  FALSE
[19:42:05.651]      // skip if-block "protType == 1"
[19:42:05.651]    </control>
[19:42:05.651]    <control if="protType == 2" while="" timeout="0" info="">
[19:42:05.651]      // if-block "protType == 2"
[19:42:05.651]        // =>  TRUE
[19:42:05.651]      <control if="isSWJ" while="" timeout="0" info="">
[19:42:05.651]        // if-block "isSWJ"
[19:42:05.651]          // =>  TRUE
[19:42:05.651]        <control if="hasDormant" while="" timeout="0" info="">
[19:42:05.651]          // if-block "hasDormant"
[19:42:05.652]            // =>  FALSE
[19:42:05.653]          // skip if-block "hasDormant"
[19:42:05.653]        </control>
[19:42:05.653]        <control if="!hasDormant" while="" timeout="0" info="">
[19:42:05.653]          // if-block "!hasDormant"
[19:42:05.653]            // =>  TRUE
[19:42:05.653]          <block atomic="false" info="">
[19:42:05.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:42:05.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:05.653]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:42:05.653]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:42:05.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:42:05.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:05.654]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:42:05.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:42:05.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:42:05.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:05.655]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:42:05.655]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:42:05.655]          </block>
[19:42:05.655]          // end if-block "!hasDormant"
[19:42:05.656]        </control>
[19:42:05.656]        // end if-block "isSWJ"
[19:42:05.656]      </control>
[19:42:05.656]      <control if="!isSWJ" while="" timeout="0" info="">
[19:42:05.656]        // if-block "!isSWJ"
[19:42:05.656]          // =>  FALSE
[19:42:05.656]        // skip if-block "!isSWJ"
[19:42:05.656]      </control>
[19:42:05.657]      <block atomic="false" info="">
[19:42:05.657]        ReadDP(0x0);
[19:42:05.657]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:42:05.657]      </block>
[19:42:05.657]      // end if-block "protType == 2"
[19:42:05.657]    </control>
[19:42:05.658]  </sequence>
[19:42:05.658]  
[19:42:05.658]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:42:05.658]  
[19:42:05.658]  <debugvars>
[19:42:05.658]    // Pre-defined
[19:42:05.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:05.659]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:05.659]    __dp=0x00000000
[19:42:05.659]    __ap=0x00000000
[19:42:05.659]    __traceout=0x00000000      (Trace Disabled)
[19:42:05.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:05.659]    __FlashAddr=0x00000000
[19:42:05.659]    __FlashLen=0x00000000
[19:42:05.659]    __FlashArg=0x00000000
[19:42:05.659]    __FlashOp=0x00000000
[19:42:05.659]    __Result=0x00000000
[19:42:05.659]  </debugvars>
[19:42:05.659]  
[19:42:05.659]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:42:05.659]    <block atomic="false" info="">
[19:42:05.659]      __var SW_DP_ABORT       = 0x0;
[19:42:05.659]        // -> [SW_DP_ABORT <= 0x00000000]
[19:42:05.661]      __var DP_CTRL_STAT      = 0x4;
[19:42:05.661]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:42:05.661]      __var DP_SELECT         = 0x8;
[19:42:05.661]        // -> [DP_SELECT <= 0x00000008]
[19:42:05.661]      __var powered_down      = 0;
[19:42:05.661]        // -> [powered_down <= 0x00000000]
[19:42:05.661]      WriteDP(DP_SELECT, 0x00000000);
[19:42:05.662]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:42:05.662]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:42:05.662]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:42:05.662]        // -> [powered_down <= 0x00000001]
[19:42:05.662]    </block>
[19:42:05.662]    <control if="powered_down" while="" timeout="0" info="">
[19:42:05.662]      // if-block "powered_down"
[19:42:05.663]        // =>  TRUE
[19:42:05.663]      <block atomic="false" info="">
[19:42:05.663]        Message(0, "Debug/System power-up request sent");
[19:42:05.665]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:42:05.665]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:42:05.665]      </block>
[19:42:05.665]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:42:05.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:42:05.666]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:42:05.666]        // while-condition  =>  FALSE
[19:42:05.666]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:42:05.666]      </control>
[19:42:05.666]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:42:05.666]        // if-block "(__protocol & 0xFFFF) == 1"
[19:42:05.666]          // =>  FALSE
[19:42:05.666]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:42:05.666]      </control>
[19:42:05.667]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:42:05.667]        // if-block "(__protocol & 0xFFFF) == 2"
[19:42:05.667]          // =>  TRUE
[19:42:05.667]        <block atomic="false" info="">
[19:42:05.667]          Message(0, "executing SWD power up");
[19:42:05.668]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:42:05.669]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:42:05.669]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:42:05.669]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:42:05.669]        </block>
[19:42:05.669]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:42:05.669]      </control>
[19:42:05.670]      // end if-block "powered_down"
[19:42:05.670]    </control>
[19:42:05.670]    <block atomic="false" info="">
[19:42:05.670]      __var DEBUG_PORT_VAL    = 0;
[19:42:05.670]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:42:05.670]      __var ACCESS_POINT_VAL  = 0;
[19:42:05.670]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:42:05.670]      __ap = 1; 
[19:42:05.670]        // -> [__ap <= 0x00000001]
[19:42:05.670]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:42:05.672]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:42:05.673]      __ap = 4;
[19:42:05.673]        // -> [__ap <= 0x00000004]
[19:42:05.673]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:05.674]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:42:05.674]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:42:05.674]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:05.676]    </block>
[19:42:05.676]    <block atomic="false" info="">
[19:42:05.676]      __var nReset = 0x80;
[19:42:05.676]        // -> [nReset <= 0x00000080]
[19:42:05.676]      __var canReadPins = 0;
[19:42:05.676]        // -> [canReadPins <= 0x00000000]
[19:42:05.676]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:42:05.677]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:42:05.677]        // -> [canReadPins <= 0x00000001]
[19:42:05.677]    </block>
[19:42:05.677]    <control if="" while="1" timeout="200" info="">
[19:42:05.677]      // while "1"  (timeout="200")
[19:42:05.677]      // while-condition  =>  TRUE
[19:42:05.678]      // while "1"  (timeout="200")
[19:42:05.678]      // while-condition  =>  TRUE
[19:42:05.678]      // while "1"  (timeout="200")
[19:42:05.678]      // while-condition  =>  TRUE
[19:42:05.678]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.679]      // while-condition  =>  TRUE
[19:42:05.679]      // while "1"  (timeout="200")
[19:42:05.680]      // while-condition  =>  TRUE
[19:42:05.680]      // while "1"  (timeout="200")
[19:42:05.680]      // while-condition  =>  TRUE
[19:42:05.680]      // while "1"  (timeout="200")
[19:42:05.680]      // while-condition  =>  TRUE
[19:42:05.680]      // while "1"  (timeout="200")
[19:42:05.680]      // while-condition  =>  TRUE
[19:42:05.680]      // while "1"  (timeout="200")
[19:42:05.680]      // while-condition  =>  TRUE
[19:42:05.680]      // while "1"  (timeout="200")
[19:42:05.680]      // while-condition  =>  TRUE
[19:42:05.681]      // while "1"  (timeout="200")
[19:42:05.681]      // while-condition  =>  TRUE
[19:42:05.681]      // while "1"  (timeout="200")
[19:42:05.681]      // while-condition  =>  TRUE
[19:42:05.681]      // while "1"  (timeout="200")
[19:42:05.681]      // while-condition  =>  TRUE
[19:42:05.681]      // while "1"  (timeout="200")
[19:42:05.681]      // while-condition  =>  TRUE
[19:42:05.681]      // while "1"  (timeout="200")
[19:42:05.681]      // while-condition  =>  TRUE
[19:42:05.681]      // while "1"  (timeout="200")
[19:42:05.681]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.682]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.682]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.682]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.682]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.682]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.682]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.682]      // while-condition  =>  TRUE
[19:42:05.682]      // while "1"  (timeout="200")
[19:42:05.684]      // while-condition  =>  TRUE
[19:42:05.684]      // while "1"  (timeout="200")
[19:42:05.684]      // while-condition  =>  TRUE
[19:42:05.684]      // while "1"  (timeout="200")
[19:42:05.684]      // while-condition  =>  TRUE
[19:42:05.684]      // while "1"  (timeout="200")
[19:42:05.684]      // while-condition  =>  TRUE
[19:42:05.685]      // while "1"  (timeout="200")
[19:42:05.685]      // while-condition  =>  TRUE
[19:42:05.685]      // while "1"  (timeout="200")
[19:42:05.685]      // while-condition  =>  TRUE
[19:42:05.685]      // while "1"  (timeout="200")
[19:42:05.685]      // while-condition  =>  TRUE
[19:42:05.686]      // while "1"  (timeout="200")
[19:42:05.686]      // while-condition  =>  TRUE
[19:42:05.686]      // while "1"  (timeout="200")
[19:42:05.686]      // while-condition  =>  TRUE
[19:42:05.686]      // while "1"  (timeout="200")
[19:42:05.686]      // while-condition  =>  TRUE
[19:42:05.686]      // while "1"  (timeout="200")
[19:42:05.686]      // while-condition  =>  TRUE
[19:42:05.686]      // while "1"  (timeout="200")
[19:42:05.686]      // while-condition  =>  TRUE
[19:42:05.686]      // while "1"  (timeout="200")
[19:42:05.687]      // while-condition  =>  TRUE
[19:42:05.687]      // while "1"  (timeout="200")
[19:42:05.687]      // while-condition  =>  TRUE
[19:42:05.687]      // while "1"  (timeout="200")
[19:42:05.687]      // while-condition  =>  TRUE
[19:42:05.687]      // while "1"  (timeout="200")
[19:42:05.687]      // while-condition  =>  TRUE
[19:42:05.688]      // while "1"  (timeout="200")
[19:42:05.688]      // while-condition  =>  TRUE
[19:42:05.688]      // while "1"  (timeout="200")
[19:42:05.688]      // while-condition  =>  TRUE
[19:42:05.688]      // while "1"  (timeout="200")
[19:42:05.688]      // while-condition  =>  TRUE
[19:42:05.688]      // while "1"  (timeout="200")
[19:42:05.688]      // while-condition  =>  TRUE
[19:42:05.688]      // while "1"  (timeout="200")
[19:42:05.688]      // while-condition  =>  TRUE
[19:42:05.688]      // while "1"  (timeout="200")
[19:42:05.689]      // while-condition  =>  TRUE
[19:42:05.689]      // while "1"  (timeout="200")
[19:42:05.689]      // while-condition  =>  TRUE
[19:42:05.689]      // while "1"  (timeout="200")
[19:42:05.689]      // while-condition  =>  TRUE
[19:42:05.689]      // while "1"  (timeout="200")
[19:42:05.689]      // while-condition  =>  TRUE
[19:42:05.690]      // while "1"  (timeout="200")
[19:42:05.690]      // while-condition  =>  TRUE
[19:42:05.690]      // while "1"  (timeout="200")
[19:42:05.690]      // while-condition  =>  TRUE
[19:42:05.690]      // while "1"  (timeout="200")
[19:42:05.690]      // while-condition  =>  TRUE
[19:42:05.690]      // while "1"  (timeout="200")
[19:42:05.690]      // while-condition  =>  TRUE
[19:42:05.691]      // while "1"  (timeout="200")
[19:42:05.691]      // while  =>  TIMEOUT
[19:42:05.691]      // end while "1"
[19:42:05.691]    </control>
[19:42:05.691]    <control if="canReadPins" while="" timeout="0" info="">
[19:42:05.691]      // if-block "canReadPins"
[19:42:05.691]        // =>  TRUE
[19:42:05.691]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:42:05.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:42:05.692]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:42:05.692]        // while-condition  =>  FALSE
[19:42:05.692]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:42:05.692]      </control>
[19:42:05.692]      // end if-block "canReadPins"
[19:42:05.692]    </control>
[19:42:05.692]    <control if="!canReadPins" while="" timeout="0" info="">
[19:42:05.692]      // if-block "!canReadPins"
[19:42:05.692]        // =>  FALSE
[19:42:05.692]      // skip if-block "!canReadPins"
[19:42:05.693]    </control>
[19:42:05.693]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:42:05.693]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:05.693]        // =>  TRUE
[19:42:05.693]      <block atomic="false" info="">
[19:42:05.693]        WriteAP(0x00, 0x190008);
[19:42:05.695]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:05.695]        WriteAP(0xF0, 0x01);
[19:42:05.695]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:05.696]      </block>
[19:42:05.696]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:05.696]    </control>
[19:42:05.696]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:42:05.696]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:05.696]        // =>  FALSE
[19:42:05.696]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:05.696]    </control>
[19:42:05.696]    <block atomic="false" info="">
[19:42:05.696]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:05.697]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:42:05.697]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:42:05.697]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:05.701]      __ap = 0; //lets make sure we reset the access point selection
[19:42:05.701]        // -> [__ap <= 0x00000000]
[19:42:05.701]    </block>
[19:42:05.701]  </sequence>
[19:42:05.701]  
[19:42:05.707]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:42:05.707]  
[19:42:05.707]  <debugvars>
[19:42:05.707]    // Pre-defined
[19:42:05.707]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:05.707]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:05.708]    __dp=0x00000000
[19:42:05.708]    __ap=0x00000000
[19:42:05.708]    __traceout=0x00000000      (Trace Disabled)
[19:42:05.708]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:05.708]    __FlashAddr=0x00000000
[19:42:05.708]    __FlashLen=0x00000000
[19:42:05.708]    __FlashArg=0x00000000
[19:42:05.708]    __FlashOp=0x00000000
[19:42:05.708]    __Result=0x00000000
[19:42:05.708]  </debugvars>
[19:42:05.708]  
[19:42:05.709]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:42:05.709]    <block atomic="false" info="">
[19:42:05.709]      __var deviceID = 0;
[19:42:05.709]        // -> [deviceID <= 0x00000000]
[19:42:05.709]      __var version = 0;
[19:42:05.709]        // -> [version <= 0x00000000]
[19:42:05.709]      __var partNum = 0;
[19:42:05.709]        // -> [partNum <= 0x00000000]
[19:42:05.709]      __var manuf = 0;
[19:42:05.709]        // -> [manuf <= 0x00000000]
[19:42:05.709]      __var isMSPM0G1X0X_G3X0X = 0;
[19:42:05.709]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:42:05.709]      __var isProduction = 0;
[19:42:05.709]        // -> [isProduction <= 0x00000000]
[19:42:05.709]      __var continueId = 0;
[19:42:05.710]        // -> [continueId <= 0x00000000]
[19:42:05.710]      deviceID =   Read32(0x41C40004);
[19:42:05.711]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:42:05.711]        // -> [deviceID <= 0x2BB8802F]
[19:42:05.711]      version = deviceID >> 28;
[19:42:05.711]        // -> [version <= 0x00000002]
[19:42:05.711]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:42:05.712]        // -> [partNum <= 0x0000BB88]
[19:42:05.712]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:42:05.712]        // -> [manuf <= 0x00000017]
[19:42:05.712]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:42:05.713]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:42:05.713]      isProduction = (version > 0);
[19:42:05.713]        // -> [isProduction <= 0x00000001]
[19:42:05.714]    </block>
[19:42:05.714]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:42:05.714]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:42:05.714]        // =>  FALSE
[19:42:05.714]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:42:05.714]    </control>
[19:42:05.714]    <control if="continueId == 4" while="" timeout="0" info="">
[19:42:05.714]      // if-block "continueId == 4"
[19:42:05.714]        // =>  FALSE
[19:42:05.714]      // skip if-block "continueId == 4"
[19:42:05.714]    </control>
[19:42:05.714]    <control if="!isProduction" while="" timeout="0" info="">
[19:42:05.714]      // if-block "!isProduction"
[19:42:05.715]        // =>  FALSE
[19:42:05.715]      // skip if-block "!isProduction"
[19:42:05.715]    </control>
[19:42:05.715]  </sequence>
[19:42:05.715]  
[19:42:22.684]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:42:22.684]  
[19:42:22.693]  <debugvars>
[19:42:22.693]    // Pre-defined
[19:42:22.693]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:22.693]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:22.693]    __dp=0x00000000
[19:42:22.694]    __ap=0x00000000
[19:42:22.694]    __traceout=0x00000000      (Trace Disabled)
[19:42:22.694]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:22.694]    __FlashAddr=0x00000000
[19:42:22.694]    __FlashLen=0x00000000
[19:42:22.694]    __FlashArg=0x00000000
[19:42:22.694]    __FlashOp=0x00000000
[19:42:22.694]    __Result=0x00000000
[19:42:22.694]  </debugvars>
[19:42:22.694]  
[19:42:22.694]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:42:22.694]    <block atomic="false" info="">
[19:42:22.694]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:42:22.694]        // -> [isSWJ <= 0x00000001]
[19:42:22.694]      __var hasDormant = __protocol & 0x00020000;
[19:42:22.694]        // -> [hasDormant <= 0x00000000]
[19:42:22.694]      __var protType   = __protocol & 0x0000FFFF;
[19:42:22.694]        // -> [protType <= 0x00000002]
[19:42:22.695]    </block>
[19:42:22.695]    <control if="protType == 1" while="" timeout="0" info="">
[19:42:22.695]      // if-block "protType == 1"
[19:42:22.695]        // =>  FALSE
[19:42:22.695]      // skip if-block "protType == 1"
[19:42:22.695]    </control>
[19:42:22.695]    <control if="protType == 2" while="" timeout="0" info="">
[19:42:22.695]      // if-block "protType == 2"
[19:42:22.695]        // =>  TRUE
[19:42:22.695]      <control if="isSWJ" while="" timeout="0" info="">
[19:42:22.695]        // if-block "isSWJ"
[19:42:22.696]          // =>  TRUE
[19:42:22.696]        <control if="hasDormant" while="" timeout="0" info="">
[19:42:22.696]          // if-block "hasDormant"
[19:42:22.696]            // =>  FALSE
[19:42:22.696]          // skip if-block "hasDormant"
[19:42:22.696]        </control>
[19:42:22.696]        <control if="!hasDormant" while="" timeout="0" info="">
[19:42:22.696]          // if-block "!hasDormant"
[19:42:22.696]            // =>  TRUE
[19:42:22.697]          <block atomic="false" info="">
[19:42:22.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:42:22.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:22.697]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:42:22.698]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:42:22.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:42:22.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:22.698]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:42:22.700]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:42:22.700]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:42:22.700]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:22.700]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:42:22.700]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:42:22.701]          </block>
[19:42:22.701]          // end if-block "!hasDormant"
[19:42:22.701]        </control>
[19:42:22.701]        // end if-block "isSWJ"
[19:42:22.701]      </control>
[19:42:22.701]      <control if="!isSWJ" while="" timeout="0" info="">
[19:42:22.701]        // if-block "!isSWJ"
[19:42:22.701]          // =>  FALSE
[19:42:22.701]        // skip if-block "!isSWJ"
[19:42:22.701]      </control>
[19:42:22.701]      <block atomic="false" info="">
[19:42:22.701]        ReadDP(0x0);
[19:42:22.702]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:42:22.702]      </block>
[19:42:22.702]      // end if-block "protType == 2"
[19:42:22.702]    </control>
[19:42:22.702]  </sequence>
[19:42:22.702]  
[19:42:22.703]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:42:22.703]  
[19:42:22.703]  <debugvars>
[19:42:22.703]    // Pre-defined
[19:42:22.703]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:22.703]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:22.703]    __dp=0x00000000
[19:42:22.703]    __ap=0x00000000
[19:42:22.703]    __traceout=0x00000000      (Trace Disabled)
[19:42:22.703]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:22.704]    __FlashAddr=0x00000000
[19:42:22.704]    __FlashLen=0x00000000
[19:42:22.704]    __FlashArg=0x00000000
[19:42:22.704]    __FlashOp=0x00000000
[19:42:22.704]    __Result=0x00000000
[19:42:22.704]  </debugvars>
[19:42:22.704]  
[19:42:22.704]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:42:22.704]    <block atomic="false" info="">
[19:42:22.704]      __var SW_DP_ABORT       = 0x0;
[19:42:22.704]        // -> [SW_DP_ABORT <= 0x00000000]
[19:42:22.705]      __var DP_CTRL_STAT      = 0x4;
[19:42:22.705]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:42:22.705]      __var DP_SELECT         = 0x8;
[19:42:22.705]        // -> [DP_SELECT <= 0x00000008]
[19:42:22.705]      __var powered_down      = 0;
[19:42:22.705]        // -> [powered_down <= 0x00000000]
[19:42:22.705]      WriteDP(DP_SELECT, 0x00000000);
[19:42:22.707]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:42:22.707]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:42:22.707]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:42:22.707]        // -> [powered_down <= 0x00000001]
[19:42:22.707]    </block>
[19:42:22.707]    <control if="powered_down" while="" timeout="0" info="">
[19:42:22.708]      // if-block "powered_down"
[19:42:22.708]        // =>  TRUE
[19:42:22.708]      <block atomic="false" info="">
[19:42:22.708]        Message(0, "Debug/System power-up request sent");
[19:42:22.710]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:42:22.710]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:42:22.711]      </block>
[19:42:22.711]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:42:22.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:42:22.712]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:42:22.712]        // while-condition  =>  FALSE
[19:42:22.712]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:42:22.712]      </control>
[19:42:22.712]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:42:22.712]        // if-block "(__protocol & 0xFFFF) == 1"
[19:42:22.712]          // =>  FALSE
[19:42:22.712]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:42:22.712]      </control>
[19:42:22.712]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:42:22.712]        // if-block "(__protocol & 0xFFFF) == 2"
[19:42:22.713]          // =>  TRUE
[19:42:22.713]        <block atomic="false" info="">
[19:42:22.713]          Message(0, "executing SWD power up");
[19:42:22.714]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:42:22.715]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:42:22.715]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:42:22.715]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:42:22.715]        </block>
[19:42:22.716]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:42:22.716]      </control>
[19:42:22.716]      // end if-block "powered_down"
[19:42:22.716]    </control>
[19:42:22.716]    <block atomic="false" info="">
[19:42:22.716]      __var DEBUG_PORT_VAL    = 0;
[19:42:22.716]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:42:22.716]      __var ACCESS_POINT_VAL  = 0;
[19:42:22.717]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:42:22.717]      __ap = 1; 
[19:42:22.717]        // -> [__ap <= 0x00000001]
[19:42:22.717]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:42:22.718]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:42:22.718]      __ap = 4;
[19:42:22.718]        // -> [__ap <= 0x00000004]
[19:42:22.719]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:22.719]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:42:22.720]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:42:22.720]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:22.722]    </block>
[19:42:22.722]    <block atomic="false" info="">
[19:42:22.722]      __var nReset = 0x80;
[19:42:22.722]        // -> [nReset <= 0x00000080]
[19:42:22.722]      __var canReadPins = 0;
[19:42:22.722]        // -> [canReadPins <= 0x00000000]
[19:42:22.722]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:42:22.723]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:42:22.723]        // -> [canReadPins <= 0x00000001]
[19:42:22.723]    </block>
[19:42:22.723]    <control if="" while="1" timeout="200" info="">
[19:42:22.723]      // while "1"  (timeout="200")
[19:42:22.723]      // while-condition  =>  TRUE
[19:42:22.724]      // while "1"  (timeout="200")
[19:42:22.724]      // while-condition  =>  TRUE
[19:42:22.724]      // while "1"  (timeout="200")
[19:42:22.724]      // while-condition  =>  TRUE
[19:42:22.724]      // while "1"  (timeout="200")
[19:42:22.724]      // while-condition  =>  TRUE
[19:42:22.724]      // while "1"  (timeout="200")
[19:42:22.725]      // while-condition  =>  TRUE
[19:42:22.725]      // while "1"  (timeout="200")
[19:42:22.725]      // while-condition  =>  TRUE
[19:42:22.725]      // while "1"  (timeout="200")
[19:42:22.725]      // while-condition  =>  TRUE
[19:42:22.725]      // while "1"  (timeout="200")
[19:42:22.725]      // while-condition  =>  TRUE
[19:42:22.725]      // while "1"  (timeout="200")
[19:42:22.725]      // while-condition  =>  TRUE
[19:42:22.725]      // while "1"  (timeout="200")
[19:42:22.725]      // while-condition  =>  TRUE
[19:42:22.726]      // while "1"  (timeout="200")
[19:42:22.726]      // while-condition  =>  TRUE
[19:42:22.726]      // while "1"  (timeout="200")
[19:42:22.726]      // while-condition  =>  TRUE
[19:42:22.726]      // while "1"  (timeout="200")
[19:42:22.726]      // while-condition  =>  TRUE
[19:42:22.726]      // while "1"  (timeout="200")
[19:42:22.726]      // while-condition  =>  TRUE
[19:42:22.726]      // while "1"  (timeout="200")
[19:42:22.726]      // while-condition  =>  TRUE
[19:42:22.726]      // while "1"  (timeout="200")
[19:42:22.726]      // while-condition  =>  TRUE
[19:42:22.726]      // while "1"  (timeout="200")
[19:42:22.727]      // while-condition  =>  TRUE
[19:42:22.727]      // while "1"  (timeout="200")
[19:42:22.727]      // while-condition  =>  TRUE
[19:42:22.727]      // while "1"  (timeout="200")
[19:42:22.727]      // while-condition  =>  TRUE
[19:42:22.727]      // while "1"  (timeout="200")
[19:42:22.727]      // while-condition  =>  TRUE
[19:42:22.727]      // while "1"  (timeout="200")
[19:42:22.727]      // while-condition  =>  TRUE
[19:42:22.727]      // while "1"  (timeout="200")
[19:42:22.727]      // while-condition  =>  TRUE
[19:42:22.727]      // while "1"  (timeout="200")
[19:42:22.729]      // while-condition  =>  TRUE
[19:42:22.729]      // while "1"  (timeout="200")
[19:42:22.729]      // while-condition  =>  TRUE
[19:42:22.729]      // while "1"  (timeout="200")
[19:42:22.729]      // while-condition  =>  TRUE
[19:42:22.729]      // while "1"  (timeout="200")
[19:42:22.729]      // while-condition  =>  TRUE
[19:42:22.729]      // while "1"  (timeout="200")
[19:42:22.729]      // while-condition  =>  TRUE
[19:42:22.729]      // while "1"  (timeout="200")
[19:42:22.729]      // while-condition  =>  TRUE
[19:42:22.729]      // while "1"  (timeout="200")
[19:42:22.729]      // while-condition  =>  TRUE
[19:42:22.729]      // while "1"  (timeout="200")
[19:42:22.730]      // while-condition  =>  TRUE
[19:42:22.730]      // while "1"  (timeout="200")
[19:42:22.730]      // while-condition  =>  TRUE
[19:42:22.730]      // while "1"  (timeout="200")
[19:42:22.730]      // while-condition  =>  TRUE
[19:42:22.730]      // while "1"  (timeout="200")
[19:42:22.730]      // while-condition  =>  TRUE
[19:42:22.730]      // while "1"  (timeout="200")
[19:42:22.730]      // while-condition  =>  TRUE
[19:42:22.730]      // while "1"  (timeout="200")
[19:42:22.730]      // while-condition  =>  TRUE
[19:42:22.730]      // while "1"  (timeout="200")
[19:42:22.730]      // while-condition  =>  TRUE
[19:42:22.731]      // while "1"  (timeout="200")
[19:42:22.731]      // while-condition  =>  TRUE
[19:42:22.731]      // while "1"  (timeout="200")
[19:42:22.731]      // while-condition  =>  TRUE
[19:42:22.731]      // while "1"  (timeout="200")
[19:42:22.732]      // while-condition  =>  TRUE
[19:42:22.732]      // while "1"  (timeout="200")
[19:42:22.732]      // while-condition  =>  TRUE
[19:42:22.732]      // while "1"  (timeout="200")
[19:42:22.732]      // while-condition  =>  TRUE
[19:42:22.732]      // while "1"  (timeout="200")
[19:42:22.732]      // while-condition  =>  TRUE
[19:42:22.732]      // while "1"  (timeout="200")
[19:42:22.732]      // while-condition  =>  TRUE
[19:42:22.732]      // while "1"  (timeout="200")
[19:42:22.732]      // while-condition  =>  TRUE
[19:42:22.733]      // while "1"  (timeout="200")
[19:42:22.733]      // while-condition  =>  TRUE
[19:42:22.733]      // while "1"  (timeout="200")
[19:42:22.733]      // while-condition  =>  TRUE
[19:42:22.733]      // while "1"  (timeout="200")
[19:42:22.733]      // while-condition  =>  TRUE
[19:42:22.733]      // while "1"  (timeout="200")
[19:42:22.734]      // while-condition  =>  TRUE
[19:42:22.734]      // while "1"  (timeout="200")
[19:42:22.734]      // while-condition  =>  TRUE
[19:42:22.734]      // while "1"  (timeout="200")
[19:42:22.734]      // while-condition  =>  TRUE
[19:42:22.735]      // while "1"  (timeout="200")
[19:42:22.735]      // while-condition  =>  TRUE
[19:42:22.735]      // while "1"  (timeout="200")
[19:42:22.735]      // while-condition  =>  TRUE
[19:42:22.735]      // while "1"  (timeout="200")
[19:42:22.735]      // while-condition  =>  TRUE
[19:42:22.735]      // while "1"  (timeout="200")
[19:42:22.735]      // while-condition  =>  TRUE
[19:42:22.736]      // while "1"  (timeout="200")
[19:42:22.736]      // while-condition  =>  TRUE
[19:42:22.736]      // while "1"  (timeout="200")
[19:42:22.736]      // while-condition  =>  TRUE
[19:42:22.736]      // while "1"  (timeout="200")
[19:42:22.736]      // while-condition  =>  TRUE
[19:42:22.737]      // while "1"  (timeout="200")
[19:42:22.737]      // while-condition  =>  TRUE
[19:42:22.737]      // while "1"  (timeout="200")
[19:42:22.737]      // while-condition  =>  TRUE
[19:42:22.737]      // while "1"  (timeout="200")
[19:42:22.737]      // while-condition  =>  TRUE
[19:42:22.737]      // while "1"  (timeout="200")
[19:42:22.737]      // while-condition  =>  TRUE
[19:42:22.737]      // while "1"  (timeout="200")
[19:42:22.737]      // while-condition  =>  TRUE
[19:42:22.737]      // while "1"  (timeout="200")
[19:42:22.737]      // while-condition  =>  TRUE
[19:42:22.738]      // while "1"  (timeout="200")
[19:42:22.738]      // while-condition  =>  TRUE
[19:42:22.738]      // while "1"  (timeout="200")
[19:42:22.738]      // while-condition  =>  TRUE
[19:42:22.738]      // while "1"  (timeout="200")
[19:42:22.738]      // while-condition  =>  TRUE
[19:42:22.738]      // while "1"  (timeout="200")
[19:42:22.738]      // while-condition  =>  TRUE
[19:42:22.738]      // while "1"  (timeout="200")
[19:42:22.738]      // while-condition  =>  TRUE
[19:42:22.739]      // while "1"  (timeout="200")
[19:42:22.739]      // while  =>  TIMEOUT
[19:42:22.739]      // end while "1"
[19:42:22.739]    </control>
[19:42:22.739]    <control if="canReadPins" while="" timeout="0" info="">
[19:42:22.739]      // if-block "canReadPins"
[19:42:22.739]        // =>  TRUE
[19:42:22.739]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:42:22.739]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:42:22.740]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:42:22.740]        // while-condition  =>  FALSE
[19:42:22.740]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:42:22.740]      </control>
[19:42:22.741]      // end if-block "canReadPins"
[19:42:22.741]    </control>
[19:42:22.741]    <control if="!canReadPins" while="" timeout="0" info="">
[19:42:22.741]      // if-block "!canReadPins"
[19:42:22.741]        // =>  FALSE
[19:42:22.741]      // skip if-block "!canReadPins"
[19:42:22.741]    </control>
[19:42:22.741]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:42:22.741]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:22.741]        // =>  TRUE
[19:42:22.741]      <block atomic="false" info="">
[19:42:22.741]        WriteAP(0x00, 0x190008);
[19:42:22.742]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:22.742]        WriteAP(0xF0, 0x01);
[19:42:22.744]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:22.744]      </block>
[19:42:22.744]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:22.744]    </control>
[19:42:22.744]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:42:22.744]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:22.744]        // =>  FALSE
[19:42:22.745]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:22.745]    </control>
[19:42:22.745]    <block atomic="false" info="">
[19:42:22.745]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:22.746]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:42:22.746]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:42:22.746]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:22.748]      __ap = 0; //lets make sure we reset the access point selection
[19:42:22.748]        // -> [__ap <= 0x00000000]
[19:42:22.748]    </block>
[19:42:22.748]  </sequence>
[19:42:22.748]  
[19:42:22.755]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:42:22.755]  
[19:42:22.755]  <debugvars>
[19:42:22.755]    // Pre-defined
[19:42:22.755]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:22.755]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:22.755]    __dp=0x00000000
[19:42:22.755]    __ap=0x00000000
[19:42:22.755]    __traceout=0x00000000      (Trace Disabled)
[19:42:22.755]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:22.755]    __FlashAddr=0x00000000
[19:42:22.755]    __FlashLen=0x00000000
[19:42:22.755]    __FlashArg=0x00000000
[19:42:22.755]    __FlashOp=0x00000000
[19:42:22.755]    __Result=0x00000000
[19:42:22.755]  </debugvars>
[19:42:22.757]  
[19:42:22.757]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:42:22.757]    <block atomic="false" info="">
[19:42:22.757]      __var deviceID = 0;
[19:42:22.757]        // -> [deviceID <= 0x00000000]
[19:42:22.757]      __var version = 0;
[19:42:22.757]        // -> [version <= 0x00000000]
[19:42:22.757]      __var partNum = 0;
[19:42:22.757]        // -> [partNum <= 0x00000000]
[19:42:22.757]      __var manuf = 0;
[19:42:22.757]        // -> [manuf <= 0x00000000]
[19:42:22.758]      __var isMSPM0G1X0X_G3X0X = 0;
[19:42:22.758]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:42:22.758]      __var isProduction = 0;
[19:42:22.758]        // -> [isProduction <= 0x00000000]
[19:42:22.758]      __var continueId = 0;
[19:42:22.758]        // -> [continueId <= 0x00000000]
[19:42:22.758]      deviceID =   Read32(0x41C40004);
[19:42:22.760]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:42:22.760]        // -> [deviceID <= 0x2BB8802F]
[19:42:22.760]      version = deviceID >> 28;
[19:42:22.760]        // -> [version <= 0x00000002]
[19:42:22.760]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:42:22.760]        // -> [partNum <= 0x0000BB88]
[19:42:22.760]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:42:22.760]        // -> [manuf <= 0x00000017]
[19:42:22.760]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:42:22.760]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:42:22.760]      isProduction = (version > 0);
[19:42:22.761]        // -> [isProduction <= 0x00000001]
[19:42:22.761]    </block>
[19:42:22.761]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:42:22.761]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:42:22.761]        // =>  FALSE
[19:42:22.761]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:42:22.761]    </control>
[19:42:22.761]    <control if="continueId == 4" while="" timeout="0" info="">
[19:42:22.761]      // if-block "continueId == 4"
[19:42:22.761]        // =>  FALSE
[19:42:22.761]      // skip if-block "continueId == 4"
[19:42:22.762]    </control>
[19:42:22.762]    <control if="!isProduction" while="" timeout="0" info="">
[19:42:22.762]      // if-block "!isProduction"
[19:42:22.762]        // =>  FALSE
[19:42:22.763]      // skip if-block "!isProduction"
[19:42:22.763]    </control>
[19:42:22.763]  </sequence>
[19:42:22.763]  
[19:42:36.169]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:42:36.169]  
[19:42:36.178]  <debugvars>
[19:42:36.178]    // Pre-defined
[19:42:36.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:36.178]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:36.178]    __dp=0x00000000
[19:42:36.178]    __ap=0x00000000
[19:42:36.178]    __traceout=0x00000000      (Trace Disabled)
[19:42:36.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:36.179]    __FlashAddr=0x00000000
[19:42:36.179]    __FlashLen=0x00000000
[19:42:36.179]    __FlashArg=0x00000000
[19:42:36.179]    __FlashOp=0x00000000
[19:42:36.179]    __Result=0x00000000
[19:42:36.179]  </debugvars>
[19:42:36.179]  
[19:42:36.179]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:42:36.179]    <block atomic="false" info="">
[19:42:36.179]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:42:36.179]        // -> [isSWJ <= 0x00000001]
[19:42:36.179]      __var hasDormant = __protocol & 0x00020000;
[19:42:36.179]        // -> [hasDormant <= 0x00000000]
[19:42:36.179]      __var protType   = __protocol & 0x0000FFFF;
[19:42:36.179]        // -> [protType <= 0x00000002]
[19:42:36.179]    </block>
[19:42:36.179]    <control if="protType == 1" while="" timeout="0" info="">
[19:42:36.179]      // if-block "protType == 1"
[19:42:36.179]        // =>  FALSE
[19:42:36.181]      // skip if-block "protType == 1"
[19:42:36.181]    </control>
[19:42:36.181]    <control if="protType == 2" while="" timeout="0" info="">
[19:42:36.181]      // if-block "protType == 2"
[19:42:36.181]        // =>  TRUE
[19:42:36.181]      <control if="isSWJ" while="" timeout="0" info="">
[19:42:36.181]        // if-block "isSWJ"
[19:42:36.181]          // =>  TRUE
[19:42:36.181]        <control if="hasDormant" while="" timeout="0" info="">
[19:42:36.181]          // if-block "hasDormant"
[19:42:36.181]            // =>  FALSE
[19:42:36.181]          // skip if-block "hasDormant"
[19:42:36.181]        </control>
[19:42:36.181]        <control if="!hasDormant" while="" timeout="0" info="">
[19:42:36.181]          // if-block "!hasDormant"
[19:42:36.181]            // =>  TRUE
[19:42:36.182]          <block atomic="false" info="">
[19:42:36.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:42:36.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:36.182]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:42:36.182]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:42:36.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:42:36.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:36.183]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:42:36.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:42:36.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:42:36.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:36.185]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:42:36.185]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:42:36.186]          </block>
[19:42:36.186]          // end if-block "!hasDormant"
[19:42:36.186]        </control>
[19:42:36.186]        // end if-block "isSWJ"
[19:42:36.186]      </control>
[19:42:36.186]      <control if="!isSWJ" while="" timeout="0" info="">
[19:42:36.186]        // if-block "!isSWJ"
[19:42:36.186]          // =>  FALSE
[19:42:36.186]        // skip if-block "!isSWJ"
[19:42:36.186]      </control>
[19:42:36.186]      <block atomic="false" info="">
[19:42:36.186]        ReadDP(0x0);
[19:42:36.187]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:42:36.187]      </block>
[19:42:36.187]      // end if-block "protType == 2"
[19:42:36.187]    </control>
[19:42:36.188]  </sequence>
[19:42:36.188]  
[19:42:36.188]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:42:36.188]  
[19:42:36.189]  <debugvars>
[19:42:36.189]    // Pre-defined
[19:42:36.189]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:36.189]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:36.189]    __dp=0x00000000
[19:42:36.189]    __ap=0x00000000
[19:42:36.189]    __traceout=0x00000000      (Trace Disabled)
[19:42:36.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:36.189]    __FlashAddr=0x00000000
[19:42:36.189]    __FlashLen=0x00000000
[19:42:36.189]    __FlashArg=0x00000000
[19:42:36.189]    __FlashOp=0x00000000
[19:42:36.189]    __Result=0x00000000
[19:42:36.189]  </debugvars>
[19:42:36.191]  
[19:42:36.191]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:42:36.191]    <block atomic="false" info="">
[19:42:36.191]      __var SW_DP_ABORT       = 0x0;
[19:42:36.191]        // -> [SW_DP_ABORT <= 0x00000000]
[19:42:36.191]      __var DP_CTRL_STAT      = 0x4;
[19:42:36.191]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:42:36.191]      __var DP_SELECT         = 0x8;
[19:42:36.191]        // -> [DP_SELECT <= 0x00000008]
[19:42:36.191]      __var powered_down      = 0;
[19:42:36.191]        // -> [powered_down <= 0x00000000]
[19:42:36.192]      WriteDP(DP_SELECT, 0x00000000);
[19:42:36.192]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:42:36.192]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:42:36.193]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:42:36.193]        // -> [powered_down <= 0x00000001]
[19:42:36.193]    </block>
[19:42:36.193]    <control if="powered_down" while="" timeout="0" info="">
[19:42:36.193]      // if-block "powered_down"
[19:42:36.193]        // =>  TRUE
[19:42:36.193]      <block atomic="false" info="">
[19:42:36.193]        Message(0, "Debug/System power-up request sent");
[19:42:36.194]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:42:36.196]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:42:36.196]      </block>
[19:42:36.196]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:42:36.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:42:36.196]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:42:36.196]        // while-condition  =>  FALSE
[19:42:36.196]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:42:36.196]      </control>
[19:42:36.196]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:42:36.196]        // if-block "(__protocol & 0xFFFF) == 1"
[19:42:36.196]          // =>  FALSE
[19:42:36.197]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:42:36.197]      </control>
[19:42:36.197]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:42:36.197]        // if-block "(__protocol & 0xFFFF) == 2"
[19:42:36.197]          // =>  TRUE
[19:42:36.197]        <block atomic="false" info="">
[19:42:36.197]          Message(0, "executing SWD power up");
[19:42:36.200]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:42:36.200]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:42:36.201]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:42:36.201]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:42:36.201]        </block>
[19:42:36.201]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:42:36.201]      </control>
[19:42:36.201]      // end if-block "powered_down"
[19:42:36.202]    </control>
[19:42:36.202]    <block atomic="false" info="">
[19:42:36.202]      __var DEBUG_PORT_VAL    = 0;
[19:42:36.202]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:42:36.202]      __var ACCESS_POINT_VAL  = 0;
[19:42:36.202]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:42:36.202]      __ap = 1; 
[19:42:36.202]        // -> [__ap <= 0x00000001]
[19:42:36.203]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:42:36.203]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:42:36.203]      __ap = 4;
[19:42:36.203]        // -> [__ap <= 0x00000004]
[19:42:36.203]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:36.205]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:42:36.205]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:42:36.205]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:36.207]    </block>
[19:42:36.207]    <block atomic="false" info="">
[19:42:36.207]      __var nReset = 0x80;
[19:42:36.207]        // -> [nReset <= 0x00000080]
[19:42:36.207]      __var canReadPins = 0;
[19:42:36.207]        // -> [canReadPins <= 0x00000000]
[19:42:36.207]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:42:36.207]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:42:36.207]        // -> [canReadPins <= 0x00000001]
[19:42:36.207]    </block>
[19:42:36.207]    <control if="" while="1" timeout="200" info="">
[19:42:36.207]      // while "1"  (timeout="200")
[19:42:36.208]      // while-condition  =>  TRUE
[19:42:36.208]      // while "1"  (timeout="200")
[19:42:36.208]      // while-condition  =>  TRUE
[19:42:36.208]      // while "1"  (timeout="200")
[19:42:36.208]      // while-condition  =>  TRUE
[19:42:36.208]      // while "1"  (timeout="200")
[19:42:36.208]      // while-condition  =>  TRUE
[19:42:36.208]      // while "1"  (timeout="200")
[19:42:36.208]      // while-condition  =>  TRUE
[19:42:36.208]      // while "1"  (timeout="200")
[19:42:36.209]      // while-condition  =>  TRUE
[19:42:36.209]      // while "1"  (timeout="200")
[19:42:36.209]      // while-condition  =>  TRUE
[19:42:36.209]      // while "1"  (timeout="200")
[19:42:36.209]      // while-condition  =>  TRUE
[19:42:36.209]      // while "1"  (timeout="200")
[19:42:36.209]      // while-condition  =>  TRUE
[19:42:36.209]      // while "1"  (timeout="200")
[19:42:36.209]      // while-condition  =>  TRUE
[19:42:36.209]      // while "1"  (timeout="200")
[19:42:36.209]      // while-condition  =>  TRUE
[19:42:36.209]      // while "1"  (timeout="200")
[19:42:36.210]      // while-condition  =>  TRUE
[19:42:36.210]      // while "1"  (timeout="200")
[19:42:36.210]      // while-condition  =>  TRUE
[19:42:36.210]      // while "1"  (timeout="200")
[19:42:36.210]      // while-condition  =>  TRUE
[19:42:36.210]      // while "1"  (timeout="200")
[19:42:36.210]      // while-condition  =>  TRUE
[19:42:36.210]      // while "1"  (timeout="200")
[19:42:36.211]      // while-condition  =>  TRUE
[19:42:36.211]      // while "1"  (timeout="200")
[19:42:36.211]      // while-condition  =>  TRUE
[19:42:36.211]      // while "1"  (timeout="200")
[19:42:36.211]      // while-condition  =>  TRUE
[19:42:36.211]      // while "1"  (timeout="200")
[19:42:36.211]      // while-condition  =>  TRUE
[19:42:36.211]      // while "1"  (timeout="200")
[19:42:36.211]      // while-condition  =>  TRUE
[19:42:36.211]      // while "1"  (timeout="200")
[19:42:36.213]      // while-condition  =>  TRUE
[19:42:36.213]      // while "1"  (timeout="200")
[19:42:36.213]      // while-condition  =>  TRUE
[19:42:36.213]      // while "1"  (timeout="200")
[19:42:36.213]      // while-condition  =>  TRUE
[19:42:36.213]      // while "1"  (timeout="200")
[19:42:36.213]      // while-condition  =>  TRUE
[19:42:36.213]      // while "1"  (timeout="200")
[19:42:36.213]      // while-condition  =>  TRUE
[19:42:36.213]      // while "1"  (timeout="200")
[19:42:36.213]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.214]      // while "1"  (timeout="200")
[19:42:36.214]      // while-condition  =>  TRUE
[19:42:36.215]      // while "1"  (timeout="200")
[19:42:36.215]      // while-condition  =>  TRUE
[19:42:36.215]      // while "1"  (timeout="200")
[19:42:36.215]      // while-condition  =>  TRUE
[19:42:36.215]      // while "1"  (timeout="200")
[19:42:36.215]      // while-condition  =>  TRUE
[19:42:36.215]      // while "1"  (timeout="200")
[19:42:36.215]      // while-condition  =>  TRUE
[19:42:36.215]      // while "1"  (timeout="200")
[19:42:36.215]      // while-condition  =>  TRUE
[19:42:36.215]      // while "1"  (timeout="200")
[19:42:36.216]      // while-condition  =>  TRUE
[19:42:36.216]      // while "1"  (timeout="200")
[19:42:36.216]      // while-condition  =>  TRUE
[19:42:36.216]      // while "1"  (timeout="200")
[19:42:36.216]      // while-condition  =>  TRUE
[19:42:36.216]      // while "1"  (timeout="200")
[19:42:36.216]      // while-condition  =>  TRUE
[19:42:36.216]      // while "1"  (timeout="200")
[19:42:36.216]      // while-condition  =>  TRUE
[19:42:36.216]      // while "1"  (timeout="200")
[19:42:36.216]      // while-condition  =>  TRUE
[19:42:36.216]      // while "1"  (timeout="200")
[19:42:36.216]      // while-condition  =>  TRUE
[19:42:36.218]      // while "1"  (timeout="200")
[19:42:36.218]      // while-condition  =>  TRUE
[19:42:36.218]      // while "1"  (timeout="200")
[19:42:36.218]      // while-condition  =>  TRUE
[19:42:36.218]      // while "1"  (timeout="200")
[19:42:36.218]      // while-condition  =>  TRUE
[19:42:36.218]      // while "1"  (timeout="200")
[19:42:36.218]      // while-condition  =>  TRUE
[19:42:36.218]      // while "1"  (timeout="200")
[19:42:36.218]      // while-condition  =>  TRUE
[19:42:36.219]      // while "1"  (timeout="200")
[19:42:36.219]      // while-condition  =>  TRUE
[19:42:36.219]      // while "1"  (timeout="200")
[19:42:36.219]      // while-condition  =>  TRUE
[19:42:36.219]      // while "1"  (timeout="200")
[19:42:36.219]      // while-condition  =>  TRUE
[19:42:36.219]      // while "1"  (timeout="200")
[19:42:36.219]      // while-condition  =>  TRUE
[19:42:36.219]      // while "1"  (timeout="200")
[19:42:36.220]      // while-condition  =>  TRUE
[19:42:36.220]      // while "1"  (timeout="200")
[19:42:36.220]      // while-condition  =>  TRUE
[19:42:36.220]      // while "1"  (timeout="200")
[19:42:36.220]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.221]      // while "1"  (timeout="200")
[19:42:36.221]      // while-condition  =>  TRUE
[19:42:36.222]      // while "1"  (timeout="200")
[19:42:36.222]      // while-condition  =>  TRUE
[19:42:36.222]      // while "1"  (timeout="200")
[19:42:36.222]      // while-condition  =>  TRUE
[19:42:36.222]      // while "1"  (timeout="200")
[19:42:36.222]      // while-condition  =>  TRUE
[19:42:36.222]      // while "1"  (timeout="200")
[19:42:36.222]      // while-condition  =>  TRUE
[19:42:36.222]      // while "1"  (timeout="200")
[19:42:36.222]      // while-condition  =>  TRUE
[19:42:36.222]      // while "1"  (timeout="200")
[19:42:36.223]      // while-condition  =>  TRUE
[19:42:36.223]      // while "1"  (timeout="200")
[19:42:36.223]      // while  =>  TIMEOUT
[19:42:36.223]      // end while "1"
[19:42:36.223]    </control>
[19:42:36.223]    <control if="canReadPins" while="" timeout="0" info="">
[19:42:36.223]      // if-block "canReadPins"
[19:42:36.223]        // =>  TRUE
[19:42:36.225]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:42:36.225]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:42:36.225]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:42:36.225]        // while-condition  =>  FALSE
[19:42:36.226]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:42:36.226]      </control>
[19:42:36.226]      // end if-block "canReadPins"
[19:42:36.226]    </control>
[19:42:36.226]    <control if="!canReadPins" while="" timeout="0" info="">
[19:42:36.226]      // if-block "!canReadPins"
[19:42:36.226]        // =>  FALSE
[19:42:36.227]      // skip if-block "!canReadPins"
[19:42:36.227]    </control>
[19:42:36.227]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:42:36.227]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:36.227]        // =>  TRUE
[19:42:36.228]      <block atomic="false" info="">
[19:42:36.228]        WriteAP(0x00, 0x190008);
[19:42:36.228]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:36.228]        WriteAP(0xF0, 0x01);
[19:42:36.229]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:36.229]      </block>
[19:42:36.229]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:36.229]    </control>
[19:42:36.229]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:42:36.229]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:36.229]        // =>  FALSE
[19:42:36.229]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:36.231]    </control>
[19:42:36.231]    <block atomic="false" info="">
[19:42:36.231]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:36.231]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:42:36.232]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:42:36.232]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:36.234]      __ap = 0; //lets make sure we reset the access point selection
[19:42:36.234]        // -> [__ap <= 0x00000000]
[19:42:36.234]    </block>
[19:42:36.234]  </sequence>
[19:42:36.235]  
[19:42:36.241]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:42:36.241]  
[19:42:36.241]  <debugvars>
[19:42:36.241]    // Pre-defined
[19:42:36.242]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:36.242]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:36.242]    __dp=0x00000000
[19:42:36.242]    __ap=0x00000000
[19:42:36.242]    __traceout=0x00000000      (Trace Disabled)
[19:42:36.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:36.243]    __FlashAddr=0x00000000
[19:42:36.243]    __FlashLen=0x00000000
[19:42:36.243]    __FlashArg=0x00000000
[19:42:36.243]    __FlashOp=0x00000000
[19:42:36.243]    __Result=0x00000000
[19:42:36.243]  </debugvars>
[19:42:36.243]  
[19:42:36.243]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:42:36.243]    <block atomic="false" info="">
[19:42:36.243]      __var deviceID = 0;
[19:42:36.243]        // -> [deviceID <= 0x00000000]
[19:42:36.243]      __var version = 0;
[19:42:36.243]        // -> [version <= 0x00000000]
[19:42:36.243]      __var partNum = 0;
[19:42:36.243]        // -> [partNum <= 0x00000000]
[19:42:36.243]      __var manuf = 0;
[19:42:36.244]        // -> [manuf <= 0x00000000]
[19:42:36.244]      __var isMSPM0G1X0X_G3X0X = 0;
[19:42:36.244]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:42:36.244]      __var isProduction = 0;
[19:42:36.244]        // -> [isProduction <= 0x00000000]
[19:42:36.244]      __var continueId = 0;
[19:42:36.244]        // -> [continueId <= 0x00000000]
[19:42:36.244]      deviceID =   Read32(0x41C40004);
[19:42:36.246]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:42:36.246]        // -> [deviceID <= 0x2BB8802F]
[19:42:36.246]      version = deviceID >> 28;
[19:42:36.246]        // -> [version <= 0x00000002]
[19:42:36.246]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:42:36.246]        // -> [partNum <= 0x0000BB88]
[19:42:36.246]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:42:36.246]        // -> [manuf <= 0x00000017]
[19:42:36.247]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:42:36.247]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:42:36.247]      isProduction = (version > 0);
[19:42:36.247]        // -> [isProduction <= 0x00000001]
[19:42:36.247]    </block>
[19:42:36.247]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:42:36.247]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:42:36.247]        // =>  FALSE
[19:42:36.247]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:42:36.247]    </control>
[19:42:36.247]    <control if="continueId == 4" while="" timeout="0" info="">
[19:42:36.248]      // if-block "continueId == 4"
[19:42:36.248]        // =>  FALSE
[19:42:36.248]      // skip if-block "continueId == 4"
[19:42:36.248]    </control>
[19:42:36.248]    <control if="!isProduction" while="" timeout="0" info="">
[19:42:36.249]      // if-block "!isProduction"
[19:42:36.249]        // =>  FALSE
[19:42:36.249]      // skip if-block "!isProduction"
[19:42:36.249]    </control>
[19:42:36.249]  </sequence>
[19:42:36.249]  
