/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0029.log
 *  Created     : 11:25:02 (28/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[11:25:02.241]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:25:02.241]  
[11:25:02.241]  <debugvars>
[11:25:02.241]    // Pre-defined
[11:25:02.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:25:02.241]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:25:02.241]    __dp=0x00000000
[11:25:02.241]    __ap=0x00000000
[11:25:02.241]    __traceout=0x00000000      (Trace Disabled)
[11:25:02.241]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:25:02.251]    __FlashAddr=0x00000000
[11:25:02.251]    __FlashLen=0x00000000
[11:25:02.251]    __FlashArg=0x00000000
[11:25:02.251]    __FlashOp=0x00000000
[11:25:02.251]    __Result=0x00000000
[11:25:02.251]  </debugvars>
[11:25:02.251]  
[11:25:02.251]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:25:02.251]    <block atomic="false" info="">
[11:25:02.251]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:25:02.251]        // -> [isSWJ <= 0x00000001]
[11:25:02.251]      __var hasDormant = __protocol & 0x00020000;
[11:25:02.251]        // -> [hasDormant <= 0x00000000]
[11:25:02.251]      __var protType   = __protocol & 0x0000FFFF;
[11:25:02.251]        // -> [protType <= 0x00000002]
[11:25:02.251]    </block>
[11:25:02.251]    <control if="protType == 1" while="" timeout="0" info="">
[11:25:02.251]      // if-block "protType == 1"
[11:25:02.251]        // =>  FALSE
[11:25:02.251]      // skip if-block "protType == 1"
[11:25:02.251]    </control>
[11:25:02.251]    <control if="protType == 2" while="" timeout="0" info="">
[11:25:02.251]      // if-block "protType == 2"
[11:25:02.251]        // =>  TRUE
[11:25:02.251]      <control if="isSWJ" while="" timeout="0" info="">
[11:25:02.251]        // if-block "isSWJ"
[11:25:02.251]          // =>  TRUE
[11:25:02.251]        <control if="hasDormant" while="" timeout="0" info="">
[11:25:02.251]          // if-block "hasDormant"
[11:25:02.251]            // =>  FALSE
[11:25:02.251]          // skip if-block "hasDormant"
[11:25:02.251]        </control>
[11:25:02.251]        <control if="!hasDormant" while="" timeout="0" info="">
[11:25:02.251]          // if-block "!hasDormant"
[11:25:02.251]            // =>  TRUE
[11:25:02.251]          <block atomic="false" info="">
[11:25:02.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:25:02.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:02.256]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:25:02.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:25:02.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:25:02.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:02.311]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:25:02.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:25:02.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:25:02.382]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:02.382]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:25:02.392]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:25:02.392]          </block>
[11:25:02.392]          // end if-block "!hasDormant"
[11:25:02.392]        </control>
[11:25:02.392]        // end if-block "isSWJ"
[11:25:02.392]      </control>
[11:25:02.392]      <control if="!isSWJ" while="" timeout="0" info="">
[11:25:02.392]        // if-block "!isSWJ"
[11:25:02.393]          // =>  FALSE
[11:25:02.393]        // skip if-block "!isSWJ"
[11:25:02.393]      </control>
[11:25:02.393]      <block atomic="false" info="">
[11:25:02.393]        ReadDP(0x0);
[11:25:02.402]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:25:02.402]      </block>
[11:25:02.402]      // end if-block "protType == 2"
[11:25:02.402]    </control>
[11:25:02.402]  </sequence>
[11:25:02.402]  
[11:25:05.470]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:25:05.470]  
[11:25:05.470]  <debugvars>
[11:25:05.470]    // Pre-defined
[11:25:05.470]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:25:05.470]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:25:05.470]    __dp=0x00000000
[11:25:05.473]    __ap=0x00000000
[11:25:05.473]    __traceout=0x00000000      (Trace Disabled)
[11:25:05.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:25:05.473]    __FlashAddr=0x00000000
[11:25:05.473]    __FlashLen=0x00000000
[11:25:05.473]    __FlashArg=0x00000000
[11:25:05.473]    __FlashOp=0x00000000
[11:25:05.473]    __Result=0x00000000
[11:25:05.473]  </debugvars>
[11:25:05.473]  
[11:25:05.473]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:25:05.473]    <block atomic="false" info="">
[11:25:05.473]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:25:05.473]        // -> [isSWJ <= 0x00000001]
[11:25:05.473]      __var hasDormant = __protocol & 0x00020000;
[11:25:05.473]        // -> [hasDormant <= 0x00000000]
[11:25:05.473]      __var protType   = __protocol & 0x0000FFFF;
[11:25:05.473]        // -> [protType <= 0x00000002]
[11:25:05.473]    </block>
[11:25:05.473]    <control if="protType == 1" while="" timeout="0" info="">
[11:25:05.473]      // if-block "protType == 1"
[11:25:05.473]        // =>  FALSE
[11:25:05.473]      // skip if-block "protType == 1"
[11:25:05.473]    </control>
[11:25:05.473]    <control if="protType == 2" while="" timeout="0" info="">
[11:25:05.473]      // if-block "protType == 2"
[11:25:05.473]        // =>  TRUE
[11:25:05.475]      <control if="isSWJ" while="" timeout="0" info="">
[11:25:05.475]        // if-block "isSWJ"
[11:25:05.475]          // =>  TRUE
[11:25:05.475]        <control if="hasDormant" while="" timeout="0" info="">
[11:25:05.475]          // if-block "hasDormant"
[11:25:05.475]            // =>  FALSE
[11:25:05.475]          // skip if-block "hasDormant"
[11:25:05.475]        </control>
[11:25:05.475]        <control if="!hasDormant" while="" timeout="0" info="">
[11:25:05.475]          // if-block "!hasDormant"
[11:25:05.475]            // =>  TRUE
[11:25:05.475]          <block atomic="false" info="">
[11:25:05.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:25:05.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:05.495]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:25:05.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:25:05.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:25:05.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:05.526]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:25:05.536]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:25:05.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:25:05.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:05.586]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:25:05.606]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:25:05.606]          </block>
[11:25:05.606]          // end if-block "!hasDormant"
[11:25:05.606]        </control>
[11:25:05.606]        // end if-block "isSWJ"
[11:25:05.606]      </control>
[11:25:05.606]      <control if="!isSWJ" while="" timeout="0" info="">
[11:25:05.606]        // if-block "!isSWJ"
[11:25:05.606]          // =>  FALSE
[11:25:05.606]        // skip if-block "!isSWJ"
[11:25:05.606]      </control>
[11:25:05.606]      <block atomic="false" info="">
[11:25:05.606]        ReadDP(0x0);
[11:25:05.637]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:25:05.647]      </block>
[11:25:05.647]      // end if-block "protType == 2"
[11:25:05.647]    </control>
[11:25:05.647]  </sequence>
[11:25:05.647]  
[11:25:09.002]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:25:09.002]  
[11:25:09.002]  <debugvars>
[11:25:09.002]    // Pre-defined
[11:25:09.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:25:09.002]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:25:09.002]    __dp=0x00000000
[11:25:09.002]    __ap=0x00000000
[11:25:09.002]    __traceout=0x00000000      (Trace Disabled)
[11:25:09.002]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:25:09.002]    __FlashAddr=0x00000000
[11:25:09.002]    __FlashLen=0x00000000
[11:25:09.002]    __FlashArg=0x00000000
[11:25:09.002]    __FlashOp=0x00000000
[11:25:09.002]    __Result=0x00000000
[11:25:09.002]  </debugvars>
[11:25:09.002]  
[11:25:09.002]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:25:09.002]    <block atomic="false" info="">
[11:25:09.002]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:25:09.002]        // -> [isSWJ <= 0x00000001]
[11:25:09.002]      __var hasDormant = __protocol & 0x00020000;
[11:25:09.002]        // -> [hasDormant <= 0x00000000]
[11:25:09.002]      __var protType   = __protocol & 0x0000FFFF;
[11:25:09.002]        // -> [protType <= 0x00000002]
[11:25:09.002]    </block>
[11:25:09.002]    <control if="protType == 1" while="" timeout="0" info="">
[11:25:09.002]      // if-block "protType == 1"
[11:25:09.002]        // =>  FALSE
[11:25:09.002]      // skip if-block "protType == 1"
[11:25:09.002]    </control>
[11:25:09.002]    <control if="protType == 2" while="" timeout="0" info="">
[11:25:09.002]      // if-block "protType == 2"
[11:25:09.002]        // =>  TRUE
[11:25:09.002]      <control if="isSWJ" while="" timeout="0" info="">
[11:25:09.002]        // if-block "isSWJ"
[11:25:09.002]          // =>  TRUE
[11:25:09.002]        <control if="hasDormant" while="" timeout="0" info="">
[11:25:09.002]          // if-block "hasDormant"
[11:25:09.002]            // =>  FALSE
[11:25:09.002]          // skip if-block "hasDormant"
[11:25:09.002]        </control>
[11:25:09.002]        <control if="!hasDormant" while="" timeout="0" info="">
[11:25:09.002]          // if-block "!hasDormant"
[11:25:09.002]            // =>  TRUE
[11:25:09.002]          <block atomic="false" info="">
[11:25:09.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:25:09.012]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:09.012]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:25:09.043]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:25:09.043]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:25:09.052]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:09.052]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:25:09.062]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:25:09.062]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:25:09.082]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:25:09.082]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:25:09.112]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:25:09.112]          </block>
[11:25:09.112]          // end if-block "!hasDormant"
[11:25:09.112]        </control>
[11:25:09.112]        // end if-block "isSWJ"
[11:25:09.112]      </control>
[11:25:09.112]      <control if="!isSWJ" while="" timeout="0" info="">
[11:25:09.112]        // if-block "!isSWJ"
[11:25:09.112]          // =>  FALSE
[11:25:09.112]        // skip if-block "!isSWJ"
[11:25:09.112]      </control>
[11:25:09.112]      <block atomic="false" info="">
[11:25:09.112]        ReadDP(0x0);
[11:25:09.122]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:25:09.122]      </block>
[11:25:09.122]      // end if-block "protType == 2"
[11:25:09.122]    </control>
[11:25:09.122]  </sequence>
[11:25:09.122]  
[11:25:09.132]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:25:09.132]  
[11:25:09.132]  <debugvars>
[11:25:09.132]    // Pre-defined
[11:25:09.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:25:09.132]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:25:09.132]    __dp=0x00000000
[11:25:09.132]    __ap=0x00000000
[11:25:09.132]    __traceout=0x00000000      (Trace Disabled)
[11:25:09.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:25:09.132]    __FlashAddr=0x00000000
[11:25:09.132]    __FlashLen=0x00000000
[11:25:09.132]    __FlashArg=0x00000000
[11:25:09.132]    __FlashOp=0x00000000
[11:25:09.132]    __Result=0x00000000
[11:25:09.132]  </debugvars>
[11:25:09.132]  
[11:25:09.132]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:25:09.132]    <block atomic="false" info="">
[11:25:09.132]      __var SW_DP_ABORT       = 0x0;
[11:25:09.132]        // -> [SW_DP_ABORT <= 0x00000000]
[11:25:09.132]      __var DP_CTRL_STAT      = 0x4;
[11:25:09.132]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:25:09.132]      __var DP_SELECT         = 0x8;
[11:25:09.132]        // -> [DP_SELECT <= 0x00000008]
[11:25:09.132]      __var powered_down      = 0;
[11:25:09.132]        // -> [powered_down <= 0x00000000]
[11:25:09.132]      WriteDP(DP_SELECT, 0x00000000);
[11:25:09.162]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:25:09.162]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:25:09.192]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:25:09.192]        // -> [powered_down <= 0x00000001]
[11:25:09.192]    </block>
[11:25:09.192]    <control if="powered_down" while="" timeout="0" info="">
[11:25:09.192]      // if-block "powered_down"
[11:25:09.192]        // =>  TRUE
[11:25:09.192]      <block atomic="false" info="">
[11:25:09.192]        Message(0, "Debug/System power-up request sent");
[11:25:09.202]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:25:09.212]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:25:09.212]      </block>
[11:25:09.212]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:25:09.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:25:09.232]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:25:09.232]        // while-condition  =>  FALSE
[11:25:09.232]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:25:09.232]      </control>
[11:25:09.232]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:25:09.232]        // if-block "(__protocol & 0xFFFF) == 1"
[11:25:09.232]          // =>  FALSE
[11:25:09.232]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:25:09.232]      </control>
[11:25:09.232]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:25:09.232]        // if-block "(__protocol & 0xFFFF) == 2"
[11:25:09.232]          // =>  TRUE
[11:25:09.232]        <block atomic="false" info="">
[11:25:09.232]          Message(0, "executing SWD power up");
[11:25:09.232]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:25:09.282]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:25:09.282]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:25:09.304]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:25:09.304]        </block>
[11:25:09.304]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:25:09.304]      </control>
[11:25:09.304]      // end if-block "powered_down"
[11:25:09.304]    </control>
[11:25:09.304]    <block atomic="false" info="">
[11:25:09.304]      __var DEBUG_PORT_VAL    = 0;
[11:25:09.304]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:25:09.304]      __var ACCESS_POINT_VAL  = 0;
[11:25:09.304]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:25:09.304]      __ap = 1; 
[11:25:09.304]        // -> [__ap <= 0x00000001]
[11:25:09.304]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:25:09.343]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:25:09.343]      __ap = 4;
[11:25:09.343]        // -> [__ap <= 0x00000004]
[11:25:09.343]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:25:09.393]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:25:09.393]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:25:09.393]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:25:09.403]    </block>
[11:25:09.403]    <block atomic="false" info="">
[11:25:09.403]      __var nReset = 0x80;
[11:25:09.403]        // -> [nReset <= 0x00000080]
[11:25:09.403]      __var canReadPins = 0;
[11:25:09.403]        // -> [canReadPins <= 0x00000000]
[11:25:09.403]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:25:09.413]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:25:09.413]        // -> [canReadPins <= 0x00000001]
[11:25:09.413]    </block>
[11:25:09.413]    <control if="" while="1" timeout="200" info="">
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.413]      // while-condition  =>  TRUE
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.413]      // while-condition  =>  TRUE
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.413]      // while-condition  =>  TRUE
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.413]      // while-condition  =>  TRUE
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.413]      // while-condition  =>  TRUE
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.413]      // while-condition  =>  TRUE
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.413]      // while-condition  =>  TRUE
[11:25:09.413]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.423]      // while "1"  (timeout="200")
[11:25:09.423]      // while-condition  =>  TRUE
[11:25:09.433]      // while "1"  (timeout="200")
[11:25:09.433]      // while  =>  TIMEOUT
[11:25:09.433]      // end while "1"
[11:25:09.433]    </control>
[11:25:09.433]    <control if="canReadPins" while="" timeout="0" info="">
[11:25:09.433]      // if-block "canReadPins"
[11:25:09.433]        // =>  TRUE
[11:25:09.433]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:25:09.433]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:25:09.453]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:25:09.453]        // while-condition  =>  FALSE
[11:25:09.453]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:25:09.453]      </control>
[11:25:09.453]      // end if-block "canReadPins"
[11:25:09.453]    </control>
[11:25:09.453]    <control if="!canReadPins" while="" timeout="0" info="">
[11:25:09.453]      // if-block "!canReadPins"
[11:25:09.453]        // =>  FALSE
[11:25:09.453]      // skip if-block "!canReadPins"
[11:25:09.453]    </control>
[11:25:09.453]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:25:09.453]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:25:09.453]        // =>  TRUE
[11:25:09.453]      <block atomic="false" info="">
[11:25:09.453]        WriteAP(0x00, 0x190008);
[11:25:09.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:25:09.523]        WriteAP(0xF0, 0x01);
[11:25:09.563]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:25:09.563]      </block>
[11:25:09.563]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:25:09.563]    </control>
[11:25:09.563]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:25:09.563]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:25:09.563]        // =>  FALSE
[11:25:09.563]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:25:09.563]    </control>
[11:25:09.563]    <block atomic="false" info="">
[11:25:09.563]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:25:09.603]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:25:09.603]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:25:09.603]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:25:09.603]      __ap = 0; //lets make sure we reset the access point selection
[11:25:09.603]        // -> [__ap <= 0x00000000]
[11:25:09.603]    </block>
[11:25:09.603]  </sequence>
[11:25:09.603]  
[11:25:09.853]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:25:09.853]  
[11:25:09.853]  <debugvars>
[11:25:09.853]    // Pre-defined
[11:25:09.853]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:25:09.853]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:25:09.853]    __dp=0x00000000
[11:25:09.853]    __ap=0x00000000
[11:25:09.853]    __traceout=0x00000000      (Trace Disabled)
[11:25:09.853]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:25:09.853]    __FlashAddr=0x00000000
[11:25:09.853]    __FlashLen=0x00000000
[11:25:09.853]    __FlashArg=0x00000000
[11:25:09.853]    __FlashOp=0x00000000
[11:25:09.853]    __Result=0x00000000
[11:25:09.853]  </debugvars>
[11:25:09.853]  
[11:25:09.853]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:25:09.853]    <block atomic="false" info="">
[11:25:09.853]      __var deviceID = 0;
[11:25:09.853]        // -> [deviceID <= 0x00000000]
[11:25:09.853]      __var version = 0;
[11:25:09.853]        // -> [version <= 0x00000000]
[11:25:09.853]      __var partNum = 0;
[11:25:09.853]        // -> [partNum <= 0x00000000]
[11:25:09.853]      __var manuf = 0;
[11:25:09.853]        // -> [manuf <= 0x00000000]
[11:25:09.853]      __var isMSPM0G1X0X_G3X0X = 0;
[11:25:09.853]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:25:09.853]      __var isProduction = 0;
[11:25:09.853]        // -> [isProduction <= 0x00000000]
[11:25:09.853]      __var continueId = 0;
[11:25:09.853]        // -> [continueId <= 0x00000000]
[11:25:09.853]      deviceID =   Read32(0x41C40004);
[11:25:09.883]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:25:09.883]        // -> [deviceID <= 0x2BB8802F]
[11:25:09.883]      version = deviceID >> 28;
[11:25:09.883]        // -> [version <= 0x00000002]
[11:25:09.883]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:25:09.883]        // -> [partNum <= 0x0000BB88]
[11:25:09.883]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:25:09.883]        // -> [manuf <= 0x00000017]
[11:25:09.883]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:25:09.883]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:25:09.883]      isProduction = (version > 0);
[11:25:09.883]        // -> [isProduction <= 0x00000001]
[11:25:09.883]    </block>
[11:25:09.883]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:25:09.883]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:25:09.883]        // =>  FALSE
[11:25:09.883]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:25:09.883]    </control>
[11:25:09.883]    <control if="continueId == 4" while="" timeout="0" info="">
[11:25:09.883]      // if-block "continueId == 4"
[11:25:09.883]        // =>  FALSE
[11:25:09.883]      // skip if-block "continueId == 4"
[11:25:09.883]    </control>
[11:25:09.883]    <control if="!isProduction" while="" timeout="0" info="">
[11:25:09.883]      // if-block "!isProduction"
[11:25:09.883]        // =>  FALSE
[11:25:09.883]      // skip if-block "!isProduction"
[11:25:09.883]    </control>
[11:25:09.883]  </sequence>
[11:25:09.883]  
[11:39:04.296]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:39:04.296]  
[11:39:04.305]  <debugvars>
[11:39:04.305]    // Pre-defined
[11:39:04.305]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:39:04.305]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:39:04.305]    __dp=0x00000000
[11:39:04.305]    __ap=0x00000000
[11:39:04.305]    __traceout=0x00000000      (Trace Disabled)
[11:39:04.305]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:39:04.305]    __FlashAddr=0x00000000
[11:39:04.305]    __FlashLen=0x00000000
[11:39:04.305]    __FlashArg=0x00000000
[11:39:04.305]    __FlashOp=0x00000000
[11:39:04.305]    __Result=0x00000000
[11:39:04.305]  </debugvars>
[11:39:04.305]  
[11:39:04.306]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:39:04.306]    <block atomic="false" info="">
[11:39:04.306]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:39:04.306]        // -> [isSWJ <= 0x00000001]
[11:39:04.306]      __var hasDormant = __protocol & 0x00020000;
[11:39:04.306]        // -> [hasDormant <= 0x00000000]
[11:39:04.306]      __var protType   = __protocol & 0x0000FFFF;
[11:39:04.306]        // -> [protType <= 0x00000002]
[11:39:04.306]    </block>
[11:39:04.306]    <control if="protType == 1" while="" timeout="0" info="">
[11:39:04.306]      // if-block "protType == 1"
[11:39:04.306]        // =>  FALSE
[11:39:04.306]      // skip if-block "protType == 1"
[11:39:04.306]    </control>
[11:39:04.306]    <control if="protType == 2" while="" timeout="0" info="">
[11:39:04.306]      // if-block "protType == 2"
[11:39:04.306]        // =>  TRUE
[11:39:04.306]      <control if="isSWJ" while="" timeout="0" info="">
[11:39:04.306]        // if-block "isSWJ"
[11:39:04.306]          // =>  TRUE
[11:39:04.306]        <control if="hasDormant" while="" timeout="0" info="">
[11:39:04.306]          // if-block "hasDormant"
[11:39:04.306]            // =>  FALSE
[11:39:04.306]          // skip if-block "hasDormant"
[11:39:04.306]        </control>
[11:39:04.306]        <control if="!hasDormant" while="" timeout="0" info="">
[11:39:04.306]          // if-block "!hasDormant"
[11:39:04.306]            // =>  TRUE
[11:39:04.306]          <block atomic="false" info="">
[11:39:04.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:39:04.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:39:04.306]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:39:04.306]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:39:04.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:39:04.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:39:04.306]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:39:04.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:39:04.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:39:04.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:39:04.316]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:39:04.316]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:39:04.316]          </block>
[11:39:04.316]          // end if-block "!hasDormant"
[11:39:04.316]        </control>
[11:39:04.316]        // end if-block "isSWJ"
[11:39:04.316]      </control>
[11:39:04.316]      <control if="!isSWJ" while="" timeout="0" info="">
[11:39:04.316]        // if-block "!isSWJ"
[11:39:04.316]          // =>  FALSE
[11:39:04.316]        // skip if-block "!isSWJ"
[11:39:04.316]      </control>
[11:39:04.316]      <block atomic="false" info="">
[11:39:04.316]        ReadDP(0x0);
[11:39:04.326]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:39:04.326]      </block>
[11:39:04.326]      // end if-block "protType == 2"
[11:39:04.326]    </control>
[11:39:04.326]  </sequence>
[11:39:04.326]  
[11:39:04.336]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:39:04.336]  
[11:39:04.336]  <debugvars>
[11:39:04.336]    // Pre-defined
[11:39:04.336]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:39:04.336]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:39:04.336]    __dp=0x00000000
[11:39:04.336]    __ap=0x00000000
[11:39:04.336]    __traceout=0x00000000      (Trace Disabled)
[11:39:04.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:39:04.336]    __FlashAddr=0x00000000
[11:39:04.336]    __FlashLen=0x00000000
[11:39:04.336]    __FlashArg=0x00000000
[11:39:04.336]    __FlashOp=0x00000000
[11:39:04.336]    __Result=0x00000000
[11:39:04.336]  </debugvars>
[11:39:04.336]  
[11:39:04.336]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:39:04.336]    <block atomic="false" info="">
[11:39:04.336]      __var SW_DP_ABORT       = 0x0;
[11:39:04.336]        // -> [SW_DP_ABORT <= 0x00000000]
[11:39:04.336]      __var DP_CTRL_STAT      = 0x4;
[11:39:04.336]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:39:04.336]      __var DP_SELECT         = 0x8;
[11:39:04.336]        // -> [DP_SELECT <= 0x00000008]
[11:39:04.336]      __var powered_down      = 0;
[11:39:04.336]        // -> [powered_down <= 0x00000000]
[11:39:04.336]      WriteDP(DP_SELECT, 0x00000000);
[11:39:04.336]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:39:04.336]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:39:04.346]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:39:04.346]        // -> [powered_down <= 0x00000001]
[11:39:04.346]    </block>
[11:39:04.346]    <control if="powered_down" while="" timeout="0" info="">
[11:39:04.346]      // if-block "powered_down"
[11:39:04.346]        // =>  TRUE
[11:39:04.346]      <block atomic="false" info="">
[11:39:04.346]        Message(0, "Debug/System power-up request sent");
[11:39:04.348]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:39:04.348]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:39:04.348]      </block>
[11:39:04.348]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:39:04.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:39:04.348]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:39:04.348]        // while-condition  =>  FALSE
[11:39:04.348]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:39:04.348]      </control>
[11:39:04.348]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:39:04.348]        // if-block "(__protocol & 0xFFFF) == 1"
[11:39:04.348]          // =>  FALSE
[11:39:04.348]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:39:04.348]      </control>
[11:39:04.348]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:39:04.348]        // if-block "(__protocol & 0xFFFF) == 2"
[11:39:04.348]          // =>  TRUE
[11:39:04.348]        <block atomic="false" info="">
[11:39:04.348]          Message(0, "executing SWD power up");
[11:39:04.357]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:39:04.357]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:39:04.357]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:39:04.361]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:39:04.361]        </block>
[11:39:04.361]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:39:04.361]      </control>
[11:39:04.361]      // end if-block "powered_down"
[11:39:04.361]    </control>
[11:39:04.361]    <block atomic="false" info="">
[11:39:04.361]      __var DEBUG_PORT_VAL    = 0;
[11:39:04.361]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:39:04.361]      __var ACCESS_POINT_VAL  = 0;
[11:39:04.361]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:39:04.361]      __ap = 1; 
[11:39:04.363]        // -> [__ap <= 0x00000001]
[11:39:04.363]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:39:04.368]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:39:04.369]      __ap = 4;
[11:39:04.369]        // -> [__ap <= 0x00000004]
[11:39:04.369]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:39:04.371]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:39:04.371]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:39:04.371]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:39:04.371]    </block>
[11:39:04.371]    <block atomic="false" info="">
[11:39:04.371]      __var nReset = 0x80;
[11:39:04.371]        // -> [nReset <= 0x00000080]
[11:39:04.371]      __var canReadPins = 0;
[11:39:04.371]        // -> [canReadPins <= 0x00000000]
[11:39:04.371]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:39:04.377]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:39:04.377]        // -> [canReadPins <= 0x00000001]
[11:39:04.377]    </block>
[11:39:04.377]    <control if="" while="1" timeout="200" info="">
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.377]      // while-condition  =>  TRUE
[11:39:04.377]      // while "1"  (timeout="200")
[11:39:04.382]      // while-condition  =>  TRUE
[11:39:04.382]      // while "1"  (timeout="200")
[11:39:04.382]      // while  =>  TIMEOUT
[11:39:04.382]      // end while "1"
[11:39:04.382]    </control>
[11:39:04.382]    <control if="canReadPins" while="" timeout="0" info="">
[11:39:04.382]      // if-block "canReadPins"
[11:39:04.382]        // =>  TRUE
[11:39:04.382]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:39:04.382]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:39:04.383]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:39:04.383]        // while-condition  =>  FALSE
[11:39:04.383]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:39:04.383]      </control>
[11:39:04.383]      // end if-block "canReadPins"
[11:39:04.383]    </control>
[11:39:04.383]    <control if="!canReadPins" while="" timeout="0" info="">
[11:39:04.383]      // if-block "!canReadPins"
[11:39:04.383]        // =>  FALSE
[11:39:04.383]      // skip if-block "!canReadPins"
[11:39:04.383]    </control>
[11:39:04.383]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:39:04.383]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:39:04.385]        // =>  TRUE
[11:39:04.385]      <block atomic="false" info="">
[11:39:04.385]        WriteAP(0x00, 0x190008);
[11:39:04.385]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:39:04.387]        WriteAP(0xF0, 0x01);
[11:39:04.387]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:39:04.387]      </block>
[11:39:04.387]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:39:04.387]    </control>
[11:39:04.387]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:39:04.387]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:39:04.387]        // =>  FALSE
[11:39:04.387]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:39:04.387]    </control>
[11:39:04.387]    <block atomic="false" info="">
[11:39:04.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:39:04.399]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:39:04.399]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:39:04.399]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:39:04.399]      __ap = 0; //lets make sure we reset the access point selection
[11:39:04.399]        // -> [__ap <= 0x00000000]
[11:39:04.399]    </block>
[11:39:04.399]  </sequence>
[11:39:04.399]  
[11:39:04.428]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:39:04.428]  
[11:39:04.428]  <debugvars>
[11:39:04.428]    // Pre-defined
[11:39:04.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:39:04.428]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:39:04.428]    __dp=0x00000000
[11:39:04.428]    __ap=0x00000000
[11:39:04.428]    __traceout=0x00000000      (Trace Disabled)
[11:39:04.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:39:04.428]    __FlashAddr=0x00000000
[11:39:04.428]    __FlashLen=0x00000000
[11:39:04.428]    __FlashArg=0x00000000
[11:39:04.428]    __FlashOp=0x00000000
[11:39:04.428]    __Result=0x00000000
[11:39:04.428]  </debugvars>
[11:39:04.428]  
[11:39:04.428]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:39:04.428]    <block atomic="false" info="">
[11:39:04.428]      __var deviceID = 0;
[11:39:04.428]        // -> [deviceID <= 0x00000000]
[11:39:04.428]      __var version = 0;
[11:39:04.431]        // -> [version <= 0x00000000]
[11:39:04.431]      __var partNum = 0;
[11:39:04.431]        // -> [partNum <= 0x00000000]
[11:39:04.431]      __var manuf = 0;
[11:39:04.431]        // -> [manuf <= 0x00000000]
[11:39:04.431]      __var isMSPM0G1X0X_G3X0X = 0;
[11:39:04.431]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:39:04.431]      __var isProduction = 0;
[11:39:04.432]        // -> [isProduction <= 0x00000000]
[11:39:04.432]      __var continueId = 0;
[11:39:04.432]        // -> [continueId <= 0x00000000]
[11:39:04.432]      deviceID =   Read32(0x41C40004);
[11:39:04.437]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:39:04.437]        // -> [deviceID <= 0x2BB8802F]
[11:39:04.437]      version = deviceID >> 28;
[11:39:04.437]        // -> [version <= 0x00000002]
[11:39:04.437]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:39:04.437]        // -> [partNum <= 0x0000BB88]
[11:39:04.437]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:39:04.437]        // -> [manuf <= 0x00000017]
[11:39:04.445]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:39:04.445]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:39:04.445]      isProduction = (version > 0);
[11:39:04.445]        // -> [isProduction <= 0x00000001]
[11:39:04.445]    </block>
[11:39:04.445]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:39:04.445]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:39:04.445]        // =>  FALSE
[11:39:04.445]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:39:04.445]    </control>
[11:39:04.446]    <control if="continueId == 4" while="" timeout="0" info="">
[11:39:04.446]      // if-block "continueId == 4"
[11:39:04.446]        // =>  FALSE
[11:39:04.446]      // skip if-block "continueId == 4"
[11:39:04.446]    </control>
[11:39:04.446]    <control if="!isProduction" while="" timeout="0" info="">
[11:39:04.446]      // if-block "!isProduction"
[11:39:04.446]        // =>  FALSE
[11:39:04.446]      // skip if-block "!isProduction"
[11:39:04.447]    </control>
[11:39:04.447]  </sequence>
[11:39:04.447]  
[11:39:10.186]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:39:10.186]  
[11:39:10.186]  <debugvars>
[11:39:10.186]    // Pre-defined
[11:39:10.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:39:10.186]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:39:10.186]    __dp=0x00000000
[11:39:10.186]    __ap=0x00000000
[11:39:10.186]    __traceout=0x00000000      (Trace Disabled)
[11:39:10.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:39:10.186]    __FlashAddr=0x00000000
[11:39:10.186]    __FlashLen=0x00000000
[11:39:10.186]    __FlashArg=0x00000000
[11:39:10.186]    __FlashOp=0x00000000
[11:39:10.186]    __Result=0x00000000
[11:39:10.186]  </debugvars>
[11:39:10.186]  
[11:39:10.186]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:39:10.186]    <block atomic="false" info="">
[11:39:10.186]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:39:10.186]        // -> [isSWJ <= 0x00000001]
[11:39:10.186]      __var hasDormant = __protocol & 0x00020000;
[11:39:10.186]        // -> [hasDormant <= 0x00000000]
[11:39:10.186]      __var protType   = __protocol & 0x0000FFFF;
[11:39:10.186]        // -> [protType <= 0x00000002]
[11:39:10.186]    </block>
[11:39:10.186]    <control if="protType == 1" while="" timeout="0" info="">
[11:39:10.186]      // if-block "protType == 1"
[11:39:10.186]        // =>  FALSE
[11:39:10.186]      // skip if-block "protType == 1"
[11:39:10.186]    </control>
[11:39:10.186]    <control if="protType == 2" while="" timeout="0" info="">
[11:39:10.186]      // if-block "protType == 2"
[11:39:10.186]        // =>  TRUE
[11:39:10.186]      <control if="isSWJ" while="" timeout="0" info="">
[11:39:10.186]        // if-block "isSWJ"
[11:39:10.186]          // =>  TRUE
[11:39:10.186]        <control if="hasDormant" while="" timeout="0" info="">
[11:39:10.186]          // if-block "hasDormant"
[11:39:10.186]            // =>  FALSE
[11:39:10.186]          // skip if-block "hasDormant"
[11:39:10.186]        </control>
[11:39:10.186]        <control if="!hasDormant" while="" timeout="0" info="">
[11:39:10.186]          // if-block "!hasDormant"
[11:39:10.186]            // =>  TRUE
[11:39:10.186]          <block atomic="false" info="">
[11:39:10.186]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:39:10.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:39:10.196]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:39:10.196]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:39:10.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:39:10.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:39:10.196]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:39:10.196]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:39:10.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:39:10.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:39:10.196]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:39:10.196]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:39:10.196]          </block>
[11:39:10.196]          // end if-block "!hasDormant"
[11:39:10.196]        </control>
[11:39:10.196]        // end if-block "isSWJ"
[11:39:10.196]      </control>
[11:39:10.196]      <control if="!isSWJ" while="" timeout="0" info="">
[11:39:10.196]        // if-block "!isSWJ"
[11:39:10.196]          // =>  FALSE
[11:39:10.196]        // skip if-block "!isSWJ"
[11:39:10.196]      </control>
[11:39:10.196]      <block atomic="false" info="">
[11:39:10.196]        ReadDP(0x0);
[11:39:10.206]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:39:10.206]      </block>
[11:39:10.206]      // end if-block "protType == 2"
[11:39:10.206]    </control>
[11:39:10.206]  </sequence>
[11:39:10.206]  
[11:39:10.206]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:39:10.206]  
[11:39:10.206]  <debugvars>
[11:39:10.206]    // Pre-defined
[11:39:10.206]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:39:10.206]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:39:10.206]    __dp=0x00000000
[11:39:10.206]    __ap=0x00000000
[11:39:10.206]    __traceout=0x00000000      (Trace Disabled)
[11:39:10.206]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:39:10.206]    __FlashAddr=0x00000000
[11:39:10.206]    __FlashLen=0x00000000
[11:39:10.206]    __FlashArg=0x00000000
[11:39:10.206]    __FlashOp=0x00000000
[11:39:10.206]    __Result=0x00000000
[11:39:10.206]  </debugvars>
[11:39:10.206]  
[11:39:10.206]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:39:10.206]    <block atomic="false" info="">
[11:39:10.206]      __var SW_DP_ABORT       = 0x0;
[11:39:10.206]        // -> [SW_DP_ABORT <= 0x00000000]
[11:39:10.206]      __var DP_CTRL_STAT      = 0x4;
[11:39:10.206]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:39:10.206]      __var DP_SELECT         = 0x8;
[11:39:10.206]        // -> [DP_SELECT <= 0x00000008]
[11:39:10.206]      __var powered_down      = 0;
[11:39:10.206]        // -> [powered_down <= 0x00000000]
[11:39:10.206]      WriteDP(DP_SELECT, 0x00000000);
[11:39:10.216]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:39:10.216]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:39:10.218]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:39:10.218]        // -> [powered_down <= 0x00000001]
[11:39:10.218]    </block>
[11:39:10.218]    <control if="powered_down" while="" timeout="0" info="">
[11:39:10.218]      // if-block "powered_down"
[11:39:10.218]        // =>  TRUE
[11:39:10.218]      <block atomic="false" info="">
[11:39:10.218]        Message(0, "Debug/System power-up request sent");
[11:39:10.218]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:39:10.218]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:39:10.218]      </block>
[11:39:10.218]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:39:10.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:39:10.218]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:39:10.218]        // while-condition  =>  FALSE
[11:39:10.218]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:39:10.218]      </control>
[11:39:10.218]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:39:10.218]        // if-block "(__protocol & 0xFFFF) == 1"
[11:39:10.218]          // =>  FALSE
[11:39:10.226]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:39:10.226]      </control>
[11:39:10.226]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:39:10.226]        // if-block "(__protocol & 0xFFFF) == 2"
[11:39:10.226]          // =>  TRUE
[11:39:10.226]        <block atomic="false" info="">
[11:39:10.226]          Message(0, "executing SWD power up");
[11:39:10.226]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:39:10.226]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:39:10.226]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:39:10.226]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:39:10.226]        </block>
[11:39:10.226]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:39:10.226]      </control>
[11:39:10.226]      // end if-block "powered_down"
[11:39:10.226]    </control>
[11:39:10.226]    <block atomic="false" info="">
[11:39:10.226]      __var DEBUG_PORT_VAL    = 0;
[11:39:10.226]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:39:10.226]      __var ACCESS_POINT_VAL  = 0;
[11:39:10.226]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:39:10.226]      __ap = 1; 
[11:39:10.226]        // -> [__ap <= 0x00000001]
[11:39:10.226]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:39:10.236]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:39:10.236]      __ap = 4;
[11:39:10.236]        // -> [__ap <= 0x00000004]
[11:39:10.236]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:39:10.236]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:39:10.236]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:39:10.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:39:10.236]    </block>
[11:39:10.236]    <block atomic="false" info="">
[11:39:10.236]      __var nReset = 0x80;
[11:39:10.236]        // -> [nReset <= 0x00000080]
[11:39:10.236]      __var canReadPins = 0;
[11:39:10.246]        // -> [canReadPins <= 0x00000000]
[11:39:10.246]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:39:10.246]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:39:10.246]        // -> [canReadPins <= 0x00000001]
[11:39:10.246]    </block>
[11:39:10.246]    <control if="" while="1" timeout="200" info="">
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.246]      // while "1"  (timeout="200")
[11:39:10.246]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.256]      // while-condition  =>  TRUE
[11:39:10.256]      // while "1"  (timeout="200")
[11:39:10.266]      // while-condition  =>  TRUE
[11:39:10.266]      // while "1"  (timeout="200")
[11:39:10.266]      // while  =>  TIMEOUT
[11:39:10.266]      // end while "1"
[11:39:10.266]    </control>
[11:39:10.266]    <control if="canReadPins" while="" timeout="0" info="">
[11:39:10.266]      // if-block "canReadPins"
[11:39:10.266]        // =>  TRUE
[11:39:10.266]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:39:10.266]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:39:10.266]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:39:10.266]        // while-condition  =>  FALSE
[11:39:10.266]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:39:10.266]      </control>
[11:39:10.266]      // end if-block "canReadPins"
[11:39:10.266]    </control>
[11:39:10.266]    <control if="!canReadPins" while="" timeout="0" info="">
[11:39:10.266]      // if-block "!canReadPins"
[11:39:10.266]        // =>  FALSE
[11:39:10.266]      // skip if-block "!canReadPins"
[11:39:10.266]    </control>
[11:39:10.266]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:39:10.266]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:39:10.266]        // =>  TRUE
[11:39:10.266]      <block atomic="false" info="">
[11:39:10.266]        WriteAP(0x00, 0x190008);
[11:39:10.276]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:39:10.276]        WriteAP(0xF0, 0x01);
[11:39:10.276]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:39:10.276]      </block>
[11:39:10.276]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:39:10.276]    </control>
[11:39:10.276]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:39:10.276]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:39:10.276]        // =>  FALSE
[11:39:10.276]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:39:10.276]    </control>
[11:39:10.276]    <block atomic="false" info="">
[11:39:10.276]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:39:10.276]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:39:10.286]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:39:10.286]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:39:10.286]      __ap = 0; //lets make sure we reset the access point selection
[11:39:10.286]        // -> [__ap <= 0x00000000]
[11:39:10.286]    </block>
[11:39:10.286]  </sequence>
[11:39:10.286]  
[11:39:10.306]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:39:10.306]  
[11:39:10.306]  <debugvars>
[11:39:10.316]    // Pre-defined
[11:39:10.316]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:39:10.316]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:39:10.316]    __dp=0x00000000
[11:39:10.316]    __ap=0x00000000
[11:39:10.316]    __traceout=0x00000000      (Trace Disabled)
[11:39:10.316]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:39:10.316]    __FlashAddr=0x00000000
[11:39:10.316]    __FlashLen=0x00000000
[11:39:10.316]    __FlashArg=0x00000000
[11:39:10.316]    __FlashOp=0x00000000
[11:39:10.316]    __Result=0x00000000
[11:39:10.316]  </debugvars>
[11:39:10.316]  
[11:39:10.316]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:39:10.316]    <block atomic="false" info="">
[11:39:10.316]      __var deviceID = 0;
[11:39:10.316]        // -> [deviceID <= 0x00000000]
[11:39:10.316]      __var version = 0;
[11:39:10.316]        // -> [version <= 0x00000000]
[11:39:10.316]      __var partNum = 0;
[11:39:10.316]        // -> [partNum <= 0x00000000]
[11:39:10.316]      __var manuf = 0;
[11:39:10.316]        // -> [manuf <= 0x00000000]
[11:39:10.316]      __var isMSPM0G1X0X_G3X0X = 0;
[11:39:10.316]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:39:10.316]      __var isProduction = 0;
[11:39:10.316]        // -> [isProduction <= 0x00000000]
[11:39:10.316]      __var continueId = 0;
[11:39:10.316]        // -> [continueId <= 0x00000000]
[11:39:10.316]      deviceID =   Read32(0x41C40004);
[11:39:10.326]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:39:10.326]        // -> [deviceID <= 0x2BB8802F]
[11:39:10.326]      version = deviceID >> 28;
[11:39:10.326]        // -> [version <= 0x00000002]
[11:39:10.326]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:39:10.326]        // -> [partNum <= 0x0000BB88]
[11:39:10.326]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:39:10.326]        // -> [manuf <= 0x00000017]
[11:39:10.326]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:39:10.326]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:39:10.326]      isProduction = (version > 0);
[11:39:10.326]        // -> [isProduction <= 0x00000001]
[11:39:10.326]    </block>
[11:39:10.326]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:39:10.326]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:39:10.326]        // =>  FALSE
[11:39:10.326]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:39:10.326]    </control>
[11:39:10.326]    <control if="continueId == 4" while="" timeout="0" info="">
[11:39:10.326]      // if-block "continueId == 4"
[11:39:10.326]        // =>  FALSE
[11:39:10.326]      // skip if-block "continueId == 4"
[11:39:10.326]    </control>
[11:39:10.326]    <control if="!isProduction" while="" timeout="0" info="">
[11:39:10.326]      // if-block "!isProduction"
[11:39:10.326]        // =>  FALSE
[11:39:10.326]      // skip if-block "!isProduction"
[11:39:10.326]    </control>
[11:39:10.326]  </sequence>
[11:39:10.326]  
[12:02:07.658]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:02:07.658]  
[12:02:07.658]  <debugvars>
[12:02:07.658]    // Pre-defined
[12:02:07.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:02:07.658]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:02:07.658]    __dp=0x00000000
[12:02:07.662]    __ap=0x00000000
[12:02:07.662]    __traceout=0x00000000      (Trace Disabled)
[12:02:07.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:02:07.662]    __FlashAddr=0x00000000
[12:02:07.662]    __FlashLen=0x00000000
[12:02:07.662]    __FlashArg=0x00000000
[12:02:07.662]    __FlashOp=0x00000000
[12:02:07.662]    __Result=0x00000000
[12:02:07.662]  </debugvars>
[12:02:07.662]  
[12:02:07.662]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:02:07.662]    <block atomic="false" info="">
[12:02:07.662]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:02:07.662]        // -> [isSWJ <= 0x00000001]
[12:02:07.662]      __var hasDormant = __protocol & 0x00020000;
[12:02:07.662]        // -> [hasDormant <= 0x00000000]
[12:02:07.662]      __var protType   = __protocol & 0x0000FFFF;
[12:02:07.662]        // -> [protType <= 0x00000002]
[12:02:07.662]    </block>
[12:02:07.662]    <control if="protType == 1" while="" timeout="0" info="">
[12:02:07.662]      // if-block "protType == 1"
[12:02:07.662]        // =>  FALSE
[12:02:07.662]      // skip if-block "protType == 1"
[12:02:07.662]    </control>
[12:02:07.662]    <control if="protType == 2" while="" timeout="0" info="">
[12:02:07.662]      // if-block "protType == 2"
[12:02:07.662]        // =>  TRUE
[12:02:07.662]      <control if="isSWJ" while="" timeout="0" info="">
[12:02:07.662]        // if-block "isSWJ"
[12:02:07.662]          // =>  TRUE
[12:02:07.662]        <control if="hasDormant" while="" timeout="0" info="">
[12:02:07.662]          // if-block "hasDormant"
[12:02:07.662]            // =>  FALSE
[12:02:07.662]          // skip if-block "hasDormant"
[12:02:07.662]        </control>
[12:02:07.662]        <control if="!hasDormant" while="" timeout="0" info="">
[12:02:07.662]          // if-block "!hasDormant"
[12:02:07.662]            // =>  TRUE
[12:02:07.662]          <block atomic="false" info="">
[12:02:07.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:02:07.668]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:02:07.668]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:02:07.668]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:02:07.668]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:02:07.668]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:02:07.668]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:02:07.672]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:02:07.672]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:02:07.672]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:02:07.672]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:02:07.672]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:02:07.672]          </block>
[12:02:07.672]          // end if-block "!hasDormant"
[12:02:07.672]        </control>
[12:02:07.672]        // end if-block "isSWJ"
[12:02:07.672]      </control>
[12:02:07.672]      <control if="!isSWJ" while="" timeout="0" info="">
[12:02:07.672]        // if-block "!isSWJ"
[12:02:07.672]          // =>  FALSE
[12:02:07.672]        // skip if-block "!isSWJ"
[12:02:07.672]      </control>
[12:02:07.672]      <block atomic="false" info="">
[12:02:07.672]        ReadDP(0x0);
[12:02:07.678]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:02:07.678]      </block>
[12:02:07.678]      // end if-block "protType == 2"
[12:02:07.678]    </control>
[12:02:07.678]  </sequence>
[12:02:07.678]  
[12:02:07.682]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:02:07.682]  
[12:02:07.682]  <debugvars>
[12:02:07.682]    // Pre-defined
[12:02:07.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:02:07.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:02:07.682]    __dp=0x00000000
[12:02:07.682]    __ap=0x00000000
[12:02:07.682]    __traceout=0x00000000      (Trace Disabled)
[12:02:07.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:02:07.682]    __FlashAddr=0x00000000
[12:02:07.682]    __FlashLen=0x00000000
[12:02:07.682]    __FlashArg=0x00000000
[12:02:07.682]    __FlashOp=0x00000000
[12:02:07.682]    __Result=0x00000000
[12:02:07.682]  </debugvars>
[12:02:07.682]  
[12:02:07.682]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:02:07.682]    <block atomic="false" info="">
[12:02:07.682]      __var SW_DP_ABORT       = 0x0;
[12:02:07.682]        // -> [SW_DP_ABORT <= 0x00000000]
[12:02:07.682]      __var DP_CTRL_STAT      = 0x4;
[12:02:07.682]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:02:07.682]      __var DP_SELECT         = 0x8;
[12:02:07.682]        // -> [DP_SELECT <= 0x00000008]
[12:02:07.682]      __var powered_down      = 0;
[12:02:07.682]        // -> [powered_down <= 0x00000000]
[12:02:07.682]      WriteDP(DP_SELECT, 0x00000000);
[12:02:07.682]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:02:07.682]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:02:07.688]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:02:07.688]        // -> [powered_down <= 0x00000001]
[12:02:07.688]    </block>
[12:02:07.688]    <control if="powered_down" while="" timeout="0" info="">
[12:02:07.688]      // if-block "powered_down"
[12:02:07.688]        // =>  TRUE
[12:02:07.688]      <block atomic="false" info="">
[12:02:07.688]        Message(0, "Debug/System power-up request sent");
[12:02:07.688]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:02:07.692]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:02:07.692]      </block>
[12:02:07.692]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:02:07.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:02:07.694]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:02:07.694]        // while-condition  =>  FALSE
[12:02:07.694]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:02:07.694]      </control>
[12:02:07.694]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:02:07.694]        // if-block "(__protocol & 0xFFFF) == 1"
[12:02:07.694]          // =>  FALSE
[12:02:07.694]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:02:07.694]      </control>
[12:02:07.694]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:02:07.694]        // if-block "(__protocol & 0xFFFF) == 2"
[12:02:07.694]          // =>  TRUE
[12:02:07.694]        <block atomic="false" info="">
[12:02:07.694]          Message(0, "executing SWD power up");
[12:02:07.698]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:02:07.698]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:02:07.698]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:02:07.698]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:02:07.698]        </block>
[12:02:07.698]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:02:07.702]      </control>
[12:02:07.702]      // end if-block "powered_down"
[12:02:07.702]    </control>
[12:02:07.702]    <block atomic="false" info="">
[12:02:07.702]      __var DEBUG_PORT_VAL    = 0;
[12:02:07.702]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:02:07.702]      __var ACCESS_POINT_VAL  = 0;
[12:02:07.702]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:02:07.702]      __ap = 1; 
[12:02:07.702]        // -> [__ap <= 0x00000001]
[12:02:07.702]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:02:07.704]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:02:07.704]      __ap = 4;
[12:02:07.704]        // -> [__ap <= 0x00000004]
[12:02:07.704]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:02:07.708]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:02:07.708]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:02:07.708]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:02:07.708]    </block>
[12:02:07.708]    <block atomic="false" info="">
[12:02:07.708]      __var nReset = 0x80;
[12:02:07.708]        // -> [nReset <= 0x00000080]
[12:02:07.708]      __var canReadPins = 0;
[12:02:07.708]        // -> [canReadPins <= 0x00000000]
[12:02:07.708]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:02:07.713]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:02:07.713]        // -> [canReadPins <= 0x00000001]
[12:02:07.713]    </block>
[12:02:07.713]    <control if="" while="1" timeout="200" info="">
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.713]      // while "1"  (timeout="200")
[12:02:07.713]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.718]      // while "1"  (timeout="200")
[12:02:07.718]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.723]      // while "1"  (timeout="200")
[12:02:07.723]      // while-condition  =>  TRUE
[12:02:07.729]      // while "1"  (timeout="200")
[12:02:07.729]      // while  =>  TIMEOUT
[12:02:07.729]      // end while "1"
[12:02:07.729]    </control>
[12:02:07.729]    <control if="canReadPins" while="" timeout="0" info="">
[12:02:07.729]      // if-block "canReadPins"
[12:02:07.729]        // =>  TRUE
[12:02:07.729]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:02:07.729]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:02:07.729]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:02:07.729]        // while-condition  =>  FALSE
[12:02:07.729]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:02:07.729]      </control>
[12:02:07.729]      // end if-block "canReadPins"
[12:02:07.729]    </control>
[12:02:07.729]    <control if="!canReadPins" while="" timeout="0" info="">
[12:02:07.729]      // if-block "!canReadPins"
[12:02:07.729]        // =>  FALSE
[12:02:07.729]      // skip if-block "!canReadPins"
[12:02:07.729]    </control>
[12:02:07.729]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:02:07.733]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:02:07.733]        // =>  TRUE
[12:02:07.733]      <block atomic="false" info="">
[12:02:07.733]        WriteAP(0x00, 0x190008);
[12:02:07.733]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:02:07.733]        WriteAP(0xF0, 0x01);
[12:02:07.739]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:02:07.739]      </block>
[12:02:07.739]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:02:07.739]    </control>
[12:02:07.739]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:02:07.739]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:02:07.739]        // =>  FALSE
[12:02:07.739]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:02:07.739]    </control>
[12:02:07.739]    <block atomic="false" info="">
[12:02:07.739]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:02:07.743]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:02:07.743]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:02:07.743]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:02:07.744]      __ap = 0; //lets make sure we reset the access point selection
[12:02:07.744]        // -> [__ap <= 0x00000000]
[12:02:07.744]    </block>
[12:02:07.744]  </sequence>
[12:02:07.744]  
[12:02:07.763]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:02:07.763]  
[12:02:07.763]  <debugvars>
[12:02:07.763]    // Pre-defined
[12:02:07.763]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:02:07.763]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:02:07.763]    __dp=0x00000000
[12:02:07.763]    __ap=0x00000000
[12:02:07.763]    __traceout=0x00000000      (Trace Disabled)
[12:02:07.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:02:07.763]    __FlashAddr=0x00000000
[12:02:07.763]    __FlashLen=0x00000000
[12:02:07.763]    __FlashArg=0x00000000
[12:02:07.763]    __FlashOp=0x00000000
[12:02:07.763]    __Result=0x00000000
[12:02:07.763]  </debugvars>
[12:02:07.763]  
[12:02:07.763]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:02:07.763]    <block atomic="false" info="">
[12:02:07.763]      __var deviceID = 0;
[12:02:07.763]        // -> [deviceID <= 0x00000000]
[12:02:07.763]      __var version = 0;
[12:02:07.763]        // -> [version <= 0x00000000]
[12:02:07.763]      __var partNum = 0;
[12:02:07.763]        // -> [partNum <= 0x00000000]
[12:02:07.763]      __var manuf = 0;
[12:02:07.763]        // -> [manuf <= 0x00000000]
[12:02:07.763]      __var isMSPM0G1X0X_G3X0X = 0;
[12:02:07.763]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:02:07.763]      __var isProduction = 0;
[12:02:07.763]        // -> [isProduction <= 0x00000000]
[12:02:07.763]      __var continueId = 0;
[12:02:07.763]        // -> [continueId <= 0x00000000]
[12:02:07.763]      deviceID =   Read32(0x41C40004);
[12:02:07.768]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:02:07.768]        // -> [deviceID <= 0x2BB8802F]
[12:02:07.768]      version = deviceID >> 28;
[12:02:07.768]        // -> [version <= 0x00000002]
[12:02:07.768]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:02:07.768]        // -> [partNum <= 0x0000BB88]
[12:02:07.768]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:02:07.768]        // -> [manuf <= 0x00000017]
[12:02:07.768]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:02:07.768]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:02:07.768]      isProduction = (version > 0);
[12:02:07.768]        // -> [isProduction <= 0x00000001]
[12:02:07.768]    </block>
[12:02:07.768]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:02:07.773]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:02:07.773]        // =>  FALSE
[12:02:07.773]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:02:07.773]    </control>
[12:02:07.773]    <control if="continueId == 4" while="" timeout="0" info="">
[12:02:07.773]      // if-block "continueId == 4"
[12:02:07.773]        // =>  FALSE
[12:02:07.773]      // skip if-block "continueId == 4"
[12:02:07.773]    </control>
[12:02:07.773]    <control if="!isProduction" while="" timeout="0" info="">
[12:02:07.773]      // if-block "!isProduction"
[12:02:07.773]        // =>  FALSE
[12:02:07.773]      // skip if-block "!isProduction"
[12:02:07.773]    </control>
[12:02:07.773]  </sequence>
[12:02:07.773]  
[12:04:04.154]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:04:04.154]  
[12:04:04.163]  <debugvars>
[12:04:04.163]    // Pre-defined
[12:04:04.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:04:04.163]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:04:04.164]    __dp=0x00000000
[12:04:04.164]    __ap=0x00000000
[12:04:04.164]    __traceout=0x00000000      (Trace Disabled)
[12:04:04.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:04:04.164]    __FlashAddr=0x00000000
[12:04:04.164]    __FlashLen=0x00000000
[12:04:04.164]    __FlashArg=0x00000000
[12:04:04.164]    __FlashOp=0x00000000
[12:04:04.164]    __Result=0x00000000
[12:04:04.164]  </debugvars>
[12:04:04.164]  
[12:04:04.164]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:04:04.164]    <block atomic="false" info="">
[12:04:04.164]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:04:04.164]        // -> [isSWJ <= 0x00000001]
[12:04:04.164]      __var hasDormant = __protocol & 0x00020000;
[12:04:04.164]        // -> [hasDormant <= 0x00000000]
[12:04:04.164]      __var protType   = __protocol & 0x0000FFFF;
[12:04:04.164]        // -> [protType <= 0x00000002]
[12:04:04.164]    </block>
[12:04:04.164]    <control if="protType == 1" while="" timeout="0" info="">
[12:04:04.164]      // if-block "protType == 1"
[12:04:04.164]        // =>  FALSE
[12:04:04.164]      // skip if-block "protType == 1"
[12:04:04.164]    </control>
[12:04:04.164]    <control if="protType == 2" while="" timeout="0" info="">
[12:04:04.164]      // if-block "protType == 2"
[12:04:04.164]        // =>  TRUE
[12:04:04.164]      <control if="isSWJ" while="" timeout="0" info="">
[12:04:04.164]        // if-block "isSWJ"
[12:04:04.164]          // =>  TRUE
[12:04:04.164]        <control if="hasDormant" while="" timeout="0" info="">
[12:04:04.164]          // if-block "hasDormant"
[12:04:04.164]            // =>  FALSE
[12:04:04.164]          // skip if-block "hasDormant"
[12:04:04.164]        </control>
[12:04:04.164]        <control if="!hasDormant" while="" timeout="0" info="">
[12:04:04.167]          // if-block "!hasDormant"
[12:04:04.167]            // =>  TRUE
[12:04:04.167]          <block atomic="false" info="">
[12:04:04.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:04:04.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:04:04.167]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:04:04.167]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:04:04.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:04:04.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:04:04.174]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:04:04.174]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:04:04.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:04:04.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:04:04.174]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:04:04.177]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:04:04.177]          </block>
[12:04:04.177]          // end if-block "!hasDormant"
[12:04:04.177]        </control>
[12:04:04.177]        // end if-block "isSWJ"
[12:04:04.177]      </control>
[12:04:04.177]      <control if="!isSWJ" while="" timeout="0" info="">
[12:04:04.177]        // if-block "!isSWJ"
[12:04:04.177]          // =>  FALSE
[12:04:04.177]        // skip if-block "!isSWJ"
[12:04:04.177]      </control>
[12:04:04.177]      <block atomic="false" info="">
[12:04:04.177]        ReadDP(0x0);
[12:04:04.177]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:04:04.177]      </block>
[12:04:04.177]      // end if-block "protType == 2"
[12:04:04.177]    </control>
[12:04:04.177]  </sequence>
[12:04:04.177]  
[12:04:04.184]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:04:04.184]  
[12:04:04.184]  <debugvars>
[12:04:04.184]    // Pre-defined
[12:04:04.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:04:04.184]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:04:04.184]    __dp=0x00000000
[12:04:04.184]    __ap=0x00000000
[12:04:04.184]    __traceout=0x00000000      (Trace Disabled)
[12:04:04.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:04:04.184]    __FlashAddr=0x00000000
[12:04:04.184]    __FlashLen=0x00000000
[12:04:04.184]    __FlashArg=0x00000000
[12:04:04.184]    __FlashOp=0x00000000
[12:04:04.184]    __Result=0x00000000
[12:04:04.184]  </debugvars>
[12:04:04.184]  
[12:04:04.184]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:04:04.184]    <block atomic="false" info="">
[12:04:04.184]      __var SW_DP_ABORT       = 0x0;
[12:04:04.184]        // -> [SW_DP_ABORT <= 0x00000000]
[12:04:04.184]      __var DP_CTRL_STAT      = 0x4;
[12:04:04.184]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:04:04.184]      __var DP_SELECT         = 0x8;
[12:04:04.184]        // -> [DP_SELECT <= 0x00000008]
[12:04:04.184]      __var powered_down      = 0;
[12:04:04.184]        // -> [powered_down <= 0x00000000]
[12:04:04.184]      WriteDP(DP_SELECT, 0x00000000);
[12:04:04.187]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:04:04.187]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:04:04.187]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:04:04.187]        // -> [powered_down <= 0x00000001]
[12:04:04.187]    </block>
[12:04:04.187]    <control if="powered_down" while="" timeout="0" info="">
[12:04:04.187]      // if-block "powered_down"
[12:04:04.187]        // =>  TRUE
[12:04:04.187]      <block atomic="false" info="">
[12:04:04.187]        Message(0, "Debug/System power-up request sent");
[12:04:04.187]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:04:04.187]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:04:04.187]      </block>
[12:04:04.187]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:04:04.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:04:04.194]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:04:04.194]        // while-condition  =>  FALSE
[12:04:04.194]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:04:04.194]      </control>
[12:04:04.194]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:04:04.194]        // if-block "(__protocol & 0xFFFF) == 1"
[12:04:04.194]          // =>  FALSE
[12:04:04.194]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:04:04.194]      </control>
[12:04:04.194]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:04:04.194]        // if-block "(__protocol & 0xFFFF) == 2"
[12:04:04.194]          // =>  TRUE
[12:04:04.194]        <block atomic="false" info="">
[12:04:04.194]          Message(0, "executing SWD power up");
[12:04:04.198]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:04:04.198]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:04:04.198]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:04:04.198]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:04:04.198]        </block>
[12:04:04.198]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:04:04.198]      </control>
[12:04:04.198]      // end if-block "powered_down"
[12:04:04.198]    </control>
[12:04:04.198]    <block atomic="false" info="">
[12:04:04.198]      __var DEBUG_PORT_VAL    = 0;
[12:04:04.198]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:04:04.198]      __var ACCESS_POINT_VAL  = 0;
[12:04:04.198]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:04:04.198]      __ap = 1; 
[12:04:04.198]        // -> [__ap <= 0x00000001]
[12:04:04.198]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:04:04.203]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:04:04.203]      __ap = 4;
[12:04:04.203]        // -> [__ap <= 0x00000004]
[12:04:04.203]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:04:04.207]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:04:04.207]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:04:04.207]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:04:04.207]    </block>
[12:04:04.207]    <block atomic="false" info="">
[12:04:04.207]      __var nReset = 0x80;
[12:04:04.207]        // -> [nReset <= 0x00000080]
[12:04:04.207]      __var canReadPins = 0;
[12:04:04.207]        // -> [canReadPins <= 0x00000000]
[12:04:04.207]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:04:04.213]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:04:04.213]        // -> [canReadPins <= 0x00000001]
[12:04:04.213]    </block>
[12:04:04.213]    <control if="" while="1" timeout="200" info="">
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.213]      // while "1"  (timeout="200")
[12:04:04.213]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.217]      // while "1"  (timeout="200")
[12:04:04.217]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.223]      // while "1"  (timeout="200")
[12:04:04.223]      // while-condition  =>  TRUE
[12:04:04.227]      // while "1"  (timeout="200")
[12:04:04.227]      // while  =>  TIMEOUT
[12:04:04.227]      // end while "1"
[12:04:04.227]    </control>
[12:04:04.227]    <control if="canReadPins" while="" timeout="0" info="">
[12:04:04.227]      // if-block "canReadPins"
[12:04:04.227]        // =>  TRUE
[12:04:04.227]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:04:04.227]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:04:04.227]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:04:04.227]        // while-condition  =>  FALSE
[12:04:04.227]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:04:04.227]      </control>
[12:04:04.227]      // end if-block "canReadPins"
[12:04:04.227]    </control>
[12:04:04.227]    <control if="!canReadPins" while="" timeout="0" info="">
[12:04:04.227]      // if-block "!canReadPins"
[12:04:04.227]        // =>  FALSE
[12:04:04.227]      // skip if-block "!canReadPins"
[12:04:04.227]    </control>
[12:04:04.227]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:04:04.227]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:04:04.227]        // =>  TRUE
[12:04:04.227]      <block atomic="false" info="">
[12:04:04.227]        WriteAP(0x00, 0x190008);
[12:04:04.227]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:04:04.227]        WriteAP(0xF0, 0x01);
[12:04:04.233]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:04:04.233]      </block>
[12:04:04.233]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:04:04.233]    </control>
[12:04:04.233]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:04:04.233]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:04:04.233]        // =>  FALSE
[12:04:04.233]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:04:04.233]    </control>
[12:04:04.233]    <block atomic="false" info="">
[12:04:04.233]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:04:04.237]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:04:04.237]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:04:04.237]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:04:04.237]      __ap = 0; //lets make sure we reset the access point selection
[12:04:04.237]        // -> [__ap <= 0x00000000]
[12:04:04.243]    </block>
[12:04:04.243]  </sequence>
[12:04:04.243]  
[12:04:04.274]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:04:04.274]  
[12:04:04.274]  <debugvars>
[12:04:04.274]    // Pre-defined
[12:04:04.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:04:04.274]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:04:04.274]    __dp=0x00000000
[12:04:04.274]    __ap=0x00000000
[12:04:04.274]    __traceout=0x00000000      (Trace Disabled)
[12:04:04.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:04:04.274]    __FlashAddr=0x00000000
[12:04:04.274]    __FlashLen=0x00000000
[12:04:04.274]    __FlashArg=0x00000000
[12:04:04.274]    __FlashOp=0x00000000
[12:04:04.274]    __Result=0x00000000
[12:04:04.274]  </debugvars>
[12:04:04.274]  
[12:04:04.274]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:04:04.274]    <block atomic="false" info="">
[12:04:04.274]      __var deviceID = 0;
[12:04:04.274]        // -> [deviceID <= 0x00000000]
[12:04:04.274]      __var version = 0;
[12:04:04.274]        // -> [version <= 0x00000000]
[12:04:04.274]      __var partNum = 0;
[12:04:04.274]        // -> [partNum <= 0x00000000]
[12:04:04.278]      __var manuf = 0;
[12:04:04.278]        // -> [manuf <= 0x00000000]
[12:04:04.278]      __var isMSPM0G1X0X_G3X0X = 0;
[12:04:04.278]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:04:04.278]      __var isProduction = 0;
[12:04:04.278]        // -> [isProduction <= 0x00000000]
[12:04:04.278]      __var continueId = 0;
[12:04:04.278]        // -> [continueId <= 0x00000000]
[12:04:04.278]      deviceID =   Read32(0x41C40004);
[12:04:04.308]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:04:04.308]        // -> [deviceID <= 0x2BB8802F]
[12:04:04.308]      version = deviceID >> 28;
[12:04:04.308]        // -> [version <= 0x00000002]
[12:04:04.308]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:04:04.308]        // -> [partNum <= 0x0000BB88]
[12:04:04.308]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:04:04.308]        // -> [manuf <= 0x00000017]
[12:04:04.308]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:04:04.308]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:04:04.308]      isProduction = (version > 0);
[12:04:04.308]        // -> [isProduction <= 0x00000001]
[12:04:04.308]    </block>
[12:04:04.308]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:04:04.308]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:04:04.308]        // =>  FALSE
[12:04:04.308]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:04:04.308]    </control>
[12:04:04.308]    <control if="continueId == 4" while="" timeout="0" info="">
[12:04:04.308]      // if-block "continueId == 4"
[12:04:04.313]        // =>  FALSE
[12:04:04.313]      // skip if-block "continueId == 4"
[12:04:04.313]    </control>
[12:04:04.313]    <control if="!isProduction" while="" timeout="0" info="">
[12:04:04.313]      // if-block "!isProduction"
[12:04:04.313]        // =>  FALSE
[12:04:04.313]      // skip if-block "!isProduction"
[12:04:04.313]    </control>
[12:04:04.313]  </sequence>
[12:04:04.313]  
[12:07:04.810]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:07:04.810]  
[12:07:04.810]  <debugvars>
[12:07:04.810]    // Pre-defined
[12:07:04.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:07:04.810]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:07:04.810]    __dp=0x00000000
[12:07:04.810]    __ap=0x00000000
[12:07:04.810]    __traceout=0x00000000      (Trace Disabled)
[12:07:04.810]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:07:04.810]    __FlashAddr=0x00000000
[12:07:04.810]    __FlashLen=0x00000000
[12:07:04.810]    __FlashArg=0x00000000
[12:07:04.810]    __FlashOp=0x00000000
[12:07:04.812]    __Result=0x00000000
[12:07:04.812]  </debugvars>
[12:07:04.812]  
[12:07:04.812]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:07:04.812]    <block atomic="false" info="">
[12:07:04.812]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:07:04.812]        // -> [isSWJ <= 0x00000001]
[12:07:04.812]      __var hasDormant = __protocol & 0x00020000;
[12:07:04.812]        // -> [hasDormant <= 0x00000000]
[12:07:04.812]      __var protType   = __protocol & 0x0000FFFF;
[12:07:04.812]        // -> [protType <= 0x00000002]
[12:07:04.812]    </block>
[12:07:04.812]    <control if="protType == 1" while="" timeout="0" info="">
[12:07:04.812]      // if-block "protType == 1"
[12:07:04.812]        // =>  FALSE
[12:07:04.812]      // skip if-block "protType == 1"
[12:07:04.812]    </control>
[12:07:04.812]    <control if="protType == 2" while="" timeout="0" info="">
[12:07:04.812]      // if-block "protType == 2"
[12:07:04.812]        // =>  TRUE
[12:07:04.812]      <control if="isSWJ" while="" timeout="0" info="">
[12:07:04.812]        // if-block "isSWJ"
[12:07:04.812]          // =>  TRUE
[12:07:04.812]        <control if="hasDormant" while="" timeout="0" info="">
[12:07:04.812]          // if-block "hasDormant"
[12:07:04.812]            // =>  FALSE
[12:07:04.812]          // skip if-block "hasDormant"
[12:07:04.812]        </control>
[12:07:04.812]        <control if="!hasDormant" while="" timeout="0" info="">
[12:07:04.812]          // if-block "!hasDormant"
[12:07:04.812]            // =>  TRUE
[12:07:04.812]          <block atomic="false" info="">
[12:07:04.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:07:04.812]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:07:04.812]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:07:04.812]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:07:04.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:07:04.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:07:04.820]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:07:04.820]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:07:04.820]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:07:04.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:07:04.822]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:07:04.822]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:07:04.822]          </block>
[12:07:04.822]          // end if-block "!hasDormant"
[12:07:04.822]        </control>
[12:07:04.822]        // end if-block "isSWJ"
[12:07:04.822]      </control>
[12:07:04.822]      <control if="!isSWJ" while="" timeout="0" info="">
[12:07:04.822]        // if-block "!isSWJ"
[12:07:04.822]          // =>  FALSE
[12:07:04.822]        // skip if-block "!isSWJ"
[12:07:04.822]      </control>
[12:07:04.822]      <block atomic="false" info="">
[12:07:04.822]        ReadDP(0x0);
[12:07:04.822]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:07:04.822]      </block>
[12:07:04.822]      // end if-block "protType == 2"
[12:07:04.822]    </control>
[12:07:04.822]  </sequence>
[12:07:04.822]  
[12:07:04.831]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:07:04.831]  
[12:07:04.831]  <debugvars>
[12:07:04.832]    // Pre-defined
[12:07:04.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:07:04.832]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:07:04.832]    __dp=0x00000000
[12:07:04.832]    __ap=0x00000000
[12:07:04.832]    __traceout=0x00000000      (Trace Disabled)
[12:07:04.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:07:04.832]    __FlashAddr=0x00000000
[12:07:04.832]    __FlashLen=0x00000000
[12:07:04.832]    __FlashArg=0x00000000
[12:07:04.832]    __FlashOp=0x00000000
[12:07:04.832]    __Result=0x00000000
[12:07:04.832]  </debugvars>
[12:07:04.832]  
[12:07:04.832]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:07:04.832]    <block atomic="false" info="">
[12:07:04.832]      __var SW_DP_ABORT       = 0x0;
[12:07:04.832]        // -> [SW_DP_ABORT <= 0x00000000]
[12:07:04.832]      __var DP_CTRL_STAT      = 0x4;
[12:07:04.832]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:07:04.832]      __var DP_SELECT         = 0x8;
[12:07:04.832]        // -> [DP_SELECT <= 0x00000008]
[12:07:04.832]      __var powered_down      = 0;
[12:07:04.832]        // -> [powered_down <= 0x00000000]
[12:07:04.832]      WriteDP(DP_SELECT, 0x00000000);
[12:07:04.832]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:07:04.832]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:07:04.832]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:07:04.832]        // -> [powered_down <= 0x00000001]
[12:07:04.832]    </block>
[12:07:04.832]    <control if="powered_down" while="" timeout="0" info="">
[12:07:04.832]      // if-block "powered_down"
[12:07:04.832]        // =>  TRUE
[12:07:04.832]      <block atomic="false" info="">
[12:07:04.832]        Message(0, "Debug/System power-up request sent");
[12:07:04.832]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:07:04.842]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:07:04.842]      </block>
[12:07:04.842]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:07:04.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:07:04.843]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:07:04.843]        // while-condition  =>  FALSE
[12:07:04.843]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:07:04.843]      </control>
[12:07:04.843]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:07:04.843]        // if-block "(__protocol & 0xFFFF) == 1"
[12:07:04.843]          // =>  FALSE
[12:07:04.843]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:07:04.843]      </control>
[12:07:04.843]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:07:04.843]        // if-block "(__protocol & 0xFFFF) == 2"
[12:07:04.843]          // =>  TRUE
[12:07:04.843]        <block atomic="false" info="">
[12:07:04.843]          Message(0, "executing SWD power up");
[12:07:04.843]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:07:04.843]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:07:04.843]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:07:04.843]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:07:04.851]        </block>
[12:07:04.851]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:07:04.851]      </control>
[12:07:04.851]      // end if-block "powered_down"
[12:07:04.851]    </control>
[12:07:04.851]    <block atomic="false" info="">
[12:07:04.851]      __var DEBUG_PORT_VAL    = 0;
[12:07:04.851]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:07:04.851]      __var ACCESS_POINT_VAL  = 0;
[12:07:04.852]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:07:04.852]      __ap = 1; 
[12:07:04.852]        // -> [__ap <= 0x00000001]
[12:07:04.852]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:07:04.852]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:07:04.852]      __ap = 4;
[12:07:04.852]        // -> [__ap <= 0x00000004]
[12:07:04.852]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:07:04.852]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:07:04.852]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:07:04.852]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:07:04.861]    </block>
[12:07:04.861]    <block atomic="false" info="">
[12:07:04.861]      __var nReset = 0x80;
[12:07:04.861]        // -> [nReset <= 0x00000080]
[12:07:04.861]      __var canReadPins = 0;
[12:07:04.861]        // -> [canReadPins <= 0x00000000]
[12:07:04.862]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:07:04.862]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:07:04.862]        // -> [canReadPins <= 0x00000001]
[12:07:04.862]    </block>
[12:07:04.862]    <control if="" while="1" timeout="200" info="">
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.862]      // while "1"  (timeout="200")
[12:07:04.862]      // while-condition  =>  TRUE
[12:07:04.871]      // while "1"  (timeout="200")
[12:07:04.871]      // while  =>  TIMEOUT
[12:07:04.871]      // end while "1"
[12:07:04.871]    </control>
[12:07:04.871]    <control if="canReadPins" while="" timeout="0" info="">
[12:07:04.871]      // if-block "canReadPins"
[12:07:04.872]        // =>  TRUE
[12:07:04.872]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:07:04.872]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:07:04.872]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:07:04.872]        // while-condition  =>  FALSE
[12:07:04.872]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:07:04.872]      </control>
[12:07:04.872]      // end if-block "canReadPins"
[12:07:04.872]    </control>
[12:07:04.872]    <control if="!canReadPins" while="" timeout="0" info="">
[12:07:04.872]      // if-block "!canReadPins"
[12:07:04.872]        // =>  FALSE
[12:07:04.872]      // skip if-block "!canReadPins"
[12:07:04.872]    </control>
[12:07:04.872]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:07:04.872]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:07:04.872]        // =>  TRUE
[12:07:04.872]      <block atomic="false" info="">
[12:07:04.872]        WriteAP(0x00, 0x190008);
[12:07:04.872]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:07:04.872]        WriteAP(0xF0, 0x01);
[12:07:04.882]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:07:04.882]      </block>
[12:07:04.882]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:07:04.882]    </control>
[12:07:04.882]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:07:04.882]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:07:04.882]        // =>  FALSE
[12:07:04.882]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:07:04.882]    </control>
[12:07:04.882]    <block atomic="false" info="">
[12:07:04.882]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:07:04.882]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:07:04.882]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:07:04.882]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:07:04.882]      __ap = 0; //lets make sure we reset the access point selection
[12:07:04.882]        // -> [__ap <= 0x00000000]
[12:07:04.882]    </block>
[12:07:04.882]  </sequence>
[12:07:04.882]  
[12:07:04.912]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:07:04.912]  
[12:07:04.912]  <debugvars>
[12:07:04.912]    // Pre-defined
[12:07:04.912]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:07:04.912]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:07:04.912]    __dp=0x00000000
[12:07:04.912]    __ap=0x00000000
[12:07:04.912]    __traceout=0x00000000      (Trace Disabled)
[12:07:04.912]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:07:04.912]    __FlashAddr=0x00000000
[12:07:04.912]    __FlashLen=0x00000000
[12:07:04.912]    __FlashArg=0x00000000
[12:07:04.912]    __FlashOp=0x00000000
[12:07:04.912]    __Result=0x00000000
[12:07:04.912]  </debugvars>
[12:07:04.912]  
[12:07:04.912]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:07:04.912]    <block atomic="false" info="">
[12:07:04.912]      __var deviceID = 0;
[12:07:04.912]        // -> [deviceID <= 0x00000000]
[12:07:04.912]      __var version = 0;
[12:07:04.912]        // -> [version <= 0x00000000]
[12:07:04.912]      __var partNum = 0;
[12:07:04.912]        // -> [partNum <= 0x00000000]
[12:07:04.912]      __var manuf = 0;
[12:07:04.912]        // -> [manuf <= 0x00000000]
[12:07:04.912]      __var isMSPM0G1X0X_G3X0X = 0;
[12:07:04.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:07:04.912]      __var isProduction = 0;
[12:07:04.912]        // -> [isProduction <= 0x00000000]
[12:07:04.912]      __var continueId = 0;
[12:07:04.912]        // -> [continueId <= 0x00000000]
[12:07:04.912]      deviceID =   Read32(0x41C40004);
[12:07:04.922]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:07:04.922]        // -> [deviceID <= 0x2BB8802F]
[12:07:04.922]      version = deviceID >> 28;
[12:07:04.922]        // -> [version <= 0x00000002]
[12:07:04.922]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:07:04.922]        // -> [partNum <= 0x0000BB88]
[12:07:04.922]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:07:04.922]        // -> [manuf <= 0x00000017]
[12:07:04.922]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:07:04.922]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:07:04.922]      isProduction = (version > 0);
[12:07:04.922]        // -> [isProduction <= 0x00000001]
[12:07:04.922]    </block>
[12:07:04.922]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:07:04.922]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:07:04.922]        // =>  FALSE
[12:07:04.922]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:07:04.922]    </control>
[12:07:04.922]    <control if="continueId == 4" while="" timeout="0" info="">
[12:07:04.922]      // if-block "continueId == 4"
[12:07:04.922]        // =>  FALSE
[12:07:04.922]      // skip if-block "continueId == 4"
[12:07:04.922]    </control>
[12:07:04.922]    <control if="!isProduction" while="" timeout="0" info="">
[12:07:04.922]      // if-block "!isProduction"
[12:07:04.922]        // =>  FALSE
[12:07:04.922]      // skip if-block "!isProduction"
[12:07:04.922]    </control>
[12:07:04.922]  </sequence>
[12:07:04.922]  
[12:09:21.502]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:09:21.502]  
[12:09:21.512]  <debugvars>
[12:09:21.512]    // Pre-defined
[12:09:21.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:09:21.512]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:09:21.512]    __dp=0x00000000
[12:09:21.512]    __ap=0x00000000
[12:09:21.512]    __traceout=0x00000000      (Trace Disabled)
[12:09:21.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:09:21.512]    __FlashAddr=0x00000000
[12:09:21.512]    __FlashLen=0x00000000
[12:09:21.512]    __FlashArg=0x00000000
[12:09:21.512]    __FlashOp=0x00000000
[12:09:21.512]    __Result=0x00000000
[12:09:21.512]  </debugvars>
[12:09:21.512]  
[12:09:21.512]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:09:21.512]    <block atomic="false" info="">
[12:09:21.512]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:09:21.512]        // -> [isSWJ <= 0x00000001]
[12:09:21.512]      __var hasDormant = __protocol & 0x00020000;
[12:09:21.512]        // -> [hasDormant <= 0x00000000]
[12:09:21.512]      __var protType   = __protocol & 0x0000FFFF;
[12:09:21.512]        // -> [protType <= 0x00000002]
[12:09:21.512]    </block>
[12:09:21.512]    <control if="protType == 1" while="" timeout="0" info="">
[12:09:21.512]      // if-block "protType == 1"
[12:09:21.512]        // =>  FALSE
[12:09:21.512]      // skip if-block "protType == 1"
[12:09:21.512]    </control>
[12:09:21.512]    <control if="protType == 2" while="" timeout="0" info="">
[12:09:21.512]      // if-block "protType == 2"
[12:09:21.512]        // =>  TRUE
[12:09:21.512]      <control if="isSWJ" while="" timeout="0" info="">
[12:09:21.512]        // if-block "isSWJ"
[12:09:21.512]          // =>  TRUE
[12:09:21.512]        <control if="hasDormant" while="" timeout="0" info="">
[12:09:21.512]          // if-block "hasDormant"
[12:09:21.512]            // =>  FALSE
[12:09:21.512]          // skip if-block "hasDormant"
[12:09:21.512]        </control>
[12:09:21.512]        <control if="!hasDormant" while="" timeout="0" info="">
[12:09:21.512]          // if-block "!hasDormant"
[12:09:21.512]            // =>  TRUE
[12:09:21.512]          <block atomic="false" info="">
[12:09:21.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:09:21.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:09:21.518]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:09:21.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:09:21.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:09:21.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:09:21.518]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:09:21.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:09:21.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:09:21.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:09:21.518]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:09:21.518]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:09:21.518]          </block>
[12:09:21.518]          // end if-block "!hasDormant"
[12:09:21.518]        </control>
[12:09:21.518]        // end if-block "isSWJ"
[12:09:21.518]      </control>
[12:09:21.518]      <control if="!isSWJ" while="" timeout="0" info="">
[12:09:21.518]        // if-block "!isSWJ"
[12:09:21.518]          // =>  FALSE
[12:09:21.518]        // skip if-block "!isSWJ"
[12:09:21.518]      </control>
[12:09:21.528]      <block atomic="false" info="">
[12:09:21.528]        ReadDP(0x0);
[12:09:21.529]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:09:21.530]      </block>
[12:09:21.530]      // end if-block "protType == 2"
[12:09:21.530]    </control>
[12:09:21.530]  </sequence>
[12:09:21.530]  
[12:09:21.530]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:09:21.530]  
[12:09:21.530]  <debugvars>
[12:09:21.530]    // Pre-defined
[12:09:21.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:09:21.530]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:09:21.530]    __dp=0x00000000
[12:09:21.530]    __ap=0x00000000
[12:09:21.530]    __traceout=0x00000000      (Trace Disabled)
[12:09:21.530]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:09:21.530]    __FlashAddr=0x00000000
[12:09:21.530]    __FlashLen=0x00000000
[12:09:21.530]    __FlashArg=0x00000000
[12:09:21.530]    __FlashOp=0x00000000
[12:09:21.530]    __Result=0x00000000
[12:09:21.530]  </debugvars>
[12:09:21.530]  
[12:09:21.530]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:09:21.530]    <block atomic="false" info="">
[12:09:21.530]      __var SW_DP_ABORT       = 0x0;
[12:09:21.530]        // -> [SW_DP_ABORT <= 0x00000000]
[12:09:21.530]      __var DP_CTRL_STAT      = 0x4;
[12:09:21.530]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:09:21.530]      __var DP_SELECT         = 0x8;
[12:09:21.530]        // -> [DP_SELECT <= 0x00000008]
[12:09:21.530]      __var powered_down      = 0;
[12:09:21.530]        // -> [powered_down <= 0x00000000]
[12:09:21.530]      WriteDP(DP_SELECT, 0x00000000);
[12:09:21.530]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:09:21.530]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:09:21.538]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:09:21.539]        // -> [powered_down <= 0x00000001]
[12:09:21.539]    </block>
[12:09:21.539]    <control if="powered_down" while="" timeout="0" info="">
[12:09:21.539]      // if-block "powered_down"
[12:09:21.539]        // =>  TRUE
[12:09:21.539]      <block atomic="false" info="">
[12:09:21.539]        Message(0, "Debug/System power-up request sent");
[12:09:21.539]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:09:21.539]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:09:21.539]      </block>
[12:09:21.539]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:09:21.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:09:21.539]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:09:21.539]        // while-condition  =>  FALSE
[12:09:21.546]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:09:21.546]      </control>
[12:09:21.546]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:09:21.546]        // if-block "(__protocol & 0xFFFF) == 1"
[12:09:21.546]          // =>  FALSE
[12:09:21.546]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:09:21.546]      </control>
[12:09:21.546]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:09:21.546]        // if-block "(__protocol & 0xFFFF) == 2"
[12:09:21.546]          // =>  TRUE
[12:09:21.546]        <block atomic="false" info="">
[12:09:21.546]          Message(0, "executing SWD power up");
[12:09:21.546]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:09:21.549]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:09:21.549]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:09:21.549]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:09:21.549]        </block>
[12:09:21.549]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:09:21.549]      </control>
[12:09:21.549]      // end if-block "powered_down"
[12:09:21.549]    </control>
[12:09:21.549]    <block atomic="false" info="">
[12:09:21.549]      __var DEBUG_PORT_VAL    = 0;
[12:09:21.549]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:09:21.549]      __var ACCESS_POINT_VAL  = 0;
[12:09:21.549]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:09:21.549]      __ap = 1; 
[12:09:21.549]        // -> [__ap <= 0x00000001]
[12:09:21.549]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:09:21.549]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:09:21.549]      __ap = 4;
[12:09:21.549]        // -> [__ap <= 0x00000004]
[12:09:21.549]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:09:21.560]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:09:21.560]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:09:21.560]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:09:21.560]    </block>
[12:09:21.560]    <block atomic="false" info="">
[12:09:21.560]      __var nReset = 0x80;
[12:09:21.560]        // -> [nReset <= 0x00000080]
[12:09:21.560]      __var canReadPins = 0;
[12:09:21.560]        // -> [canReadPins <= 0x00000000]
[12:09:21.560]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:09:21.560]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:09:21.560]        // -> [canReadPins <= 0x00000001]
[12:09:21.560]    </block>
[12:09:21.560]    <control if="" while="1" timeout="200" info="">
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.560]      // while "1"  (timeout="200")
[12:09:21.560]      // while-condition  =>  TRUE
[12:09:21.569]      // while "1"  (timeout="200")
[12:09:21.569]      // while  =>  TIMEOUT
[12:09:21.569]      // end while "1"
[12:09:21.569]    </control>
[12:09:21.570]    <control if="canReadPins" while="" timeout="0" info="">
[12:09:21.570]      // if-block "canReadPins"
[12:09:21.570]        // =>  TRUE
[12:09:21.570]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:09:21.570]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:09:21.571]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:09:21.571]        // while-condition  =>  FALSE
[12:09:21.571]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:09:21.571]      </control>
[12:09:21.571]      // end if-block "canReadPins"
[12:09:21.571]    </control>
[12:09:21.571]    <control if="!canReadPins" while="" timeout="0" info="">
[12:09:21.571]      // if-block "!canReadPins"
[12:09:21.571]        // =>  FALSE
[12:09:21.571]      // skip if-block "!canReadPins"
[12:09:21.571]    </control>
[12:09:21.571]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:09:21.571]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:09:21.571]        // =>  TRUE
[12:09:21.571]      <block atomic="false" info="">
[12:09:21.571]        WriteAP(0x00, 0x190008);
[12:09:21.571]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:09:21.571]        WriteAP(0xF0, 0x01);
[12:09:21.571]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:09:21.571]      </block>
[12:09:21.579]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:09:21.579]    </control>
[12:09:21.579]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:09:21.579]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:09:21.579]        // =>  FALSE
[12:09:21.579]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:09:21.579]    </control>
[12:09:21.579]    <block atomic="false" info="">
[12:09:21.579]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:09:21.579]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:09:21.579]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:09:21.579]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:09:21.579]      __ap = 0; //lets make sure we reset the access point selection
[12:09:21.579]        // -> [__ap <= 0x00000000]
[12:09:21.579]    </block>
[12:09:21.579]  </sequence>
[12:09:21.579]  
[12:09:21.600]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:09:21.600]  
[12:09:21.600]  <debugvars>
[12:09:21.600]    // Pre-defined
[12:09:21.600]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:09:21.600]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:09:21.600]    __dp=0x00000000
[12:09:21.600]    __ap=0x00000000
[12:09:21.600]    __traceout=0x00000000      (Trace Disabled)
[12:09:21.600]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:09:21.600]    __FlashAddr=0x00000000
[12:09:21.600]    __FlashLen=0x00000000
[12:09:21.600]    __FlashArg=0x00000000
[12:09:21.600]    __FlashOp=0x00000000
[12:09:21.600]    __Result=0x00000000
[12:09:21.600]  </debugvars>
[12:09:21.600]  
[12:09:21.600]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:09:21.600]    <block atomic="false" info="">
[12:09:21.600]      __var deviceID = 0;
[12:09:21.600]        // -> [deviceID <= 0x00000000]
[12:09:21.600]      __var version = 0;
[12:09:21.600]        // -> [version <= 0x00000000]
[12:09:21.600]      __var partNum = 0;
[12:09:21.600]        // -> [partNum <= 0x00000000]
[12:09:21.600]      __var manuf = 0;
[12:09:21.600]        // -> [manuf <= 0x00000000]
[12:09:21.600]      __var isMSPM0G1X0X_G3X0X = 0;
[12:09:21.600]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:09:21.600]      __var isProduction = 0;
[12:09:21.600]        // -> [isProduction <= 0x00000000]
[12:09:21.600]      __var continueId = 0;
[12:09:21.600]        // -> [continueId <= 0x00000000]
[12:09:21.600]      deviceID =   Read32(0x41C40004);
[12:09:21.611]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:09:21.611]        // -> [deviceID <= 0x2BB8802F]
[12:09:21.611]      version = deviceID >> 28;
[12:09:21.611]        // -> [version <= 0x00000002]
[12:09:21.611]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:09:21.611]        // -> [partNum <= 0x0000BB88]
[12:09:21.611]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:09:21.611]        // -> [manuf <= 0x00000017]
[12:09:21.611]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:09:21.611]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:09:21.611]      isProduction = (version > 0);
[12:09:21.611]        // -> [isProduction <= 0x00000001]
[12:09:21.611]    </block>
[12:09:21.611]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:09:21.611]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:09:21.611]        // =>  FALSE
[12:09:21.611]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:09:21.611]    </control>
[12:09:21.611]    <control if="continueId == 4" while="" timeout="0" info="">
[12:09:21.611]      // if-block "continueId == 4"
[12:09:21.611]        // =>  FALSE
[12:09:21.611]      // skip if-block "continueId == 4"
[12:09:21.611]    </control>
[12:09:21.611]    <control if="!isProduction" while="" timeout="0" info="">
[12:09:21.611]      // if-block "!isProduction"
[12:09:21.611]        // =>  FALSE
[12:09:21.611]      // skip if-block "!isProduction"
[12:09:21.611]    </control>
[12:09:21.611]  </sequence>
[12:09:21.611]  
[12:11:07.018]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:11:07.018]  
[12:11:07.026]  <debugvars>
[12:11:07.026]    // Pre-defined
[12:11:07.026]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:11:07.026]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:11:07.026]    __dp=0x00000000
[12:11:07.026]    __ap=0x00000000
[12:11:07.026]    __traceout=0x00000000      (Trace Disabled)
[12:11:07.026]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:11:07.026]    __FlashAddr=0x00000000
[12:11:07.026]    __FlashLen=0x00000000
[12:11:07.026]    __FlashArg=0x00000000
[12:11:07.026]    __FlashOp=0x00000000
[12:11:07.026]    __Result=0x00000000
[12:11:07.028]  </debugvars>
[12:11:07.028]  
[12:11:07.028]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:11:07.028]    <block atomic="false" info="">
[12:11:07.028]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:11:07.028]        // -> [isSWJ <= 0x00000001]
[12:11:07.028]      __var hasDormant = __protocol & 0x00020000;
[12:11:07.028]        // -> [hasDormant <= 0x00000000]
[12:11:07.028]      __var protType   = __protocol & 0x0000FFFF;
[12:11:07.028]        // -> [protType <= 0x00000002]
[12:11:07.028]    </block>
[12:11:07.028]    <control if="protType == 1" while="" timeout="0" info="">
[12:11:07.028]      // if-block "protType == 1"
[12:11:07.028]        // =>  FALSE
[12:11:07.028]      // skip if-block "protType == 1"
[12:11:07.028]    </control>
[12:11:07.028]    <control if="protType == 2" while="" timeout="0" info="">
[12:11:07.028]      // if-block "protType == 2"
[12:11:07.028]        // =>  TRUE
[12:11:07.028]      <control if="isSWJ" while="" timeout="0" info="">
[12:11:07.028]        // if-block "isSWJ"
[12:11:07.028]          // =>  TRUE
[12:11:07.028]        <control if="hasDormant" while="" timeout="0" info="">
[12:11:07.028]          // if-block "hasDormant"
[12:11:07.028]            // =>  FALSE
[12:11:07.028]          // skip if-block "hasDormant"
[12:11:07.028]        </control>
[12:11:07.028]        <control if="!hasDormant" while="" timeout="0" info="">
[12:11:07.028]          // if-block "!hasDormant"
[12:11:07.028]            // =>  TRUE
[12:11:07.028]          <block atomic="false" info="">
[12:11:07.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:11:07.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:11:07.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:11:07.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:11:07.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:11:07.037]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:11:07.037]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:11:07.040]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:11:07.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:11:07.040]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:11:07.040]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:11:07.047]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:11:07.049]          </block>
[12:11:07.049]          // end if-block "!hasDormant"
[12:11:07.049]        </control>
[12:11:07.049]        // end if-block "isSWJ"
[12:11:07.049]      </control>
[12:11:07.049]      <control if="!isSWJ" while="" timeout="0" info="">
[12:11:07.049]        // if-block "!isSWJ"
[12:11:07.049]          // =>  FALSE
[12:11:07.049]        // skip if-block "!isSWJ"
[12:11:07.049]      </control>
[12:11:07.049]      <block atomic="false" info="">
[12:11:07.049]        ReadDP(0x0);
[12:11:07.049]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:11:07.049]      </block>
[12:11:07.049]      // end if-block "protType == 2"
[12:11:07.049]    </control>
[12:11:07.049]  </sequence>
[12:11:07.049]  
[12:11:07.049]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:11:07.049]  
[12:11:07.049]  <debugvars>
[12:11:07.049]    // Pre-defined
[12:11:07.049]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:11:07.049]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:11:07.049]    __dp=0x00000000
[12:11:07.049]    __ap=0x00000000
[12:11:07.049]    __traceout=0x00000000      (Trace Disabled)
[12:11:07.049]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:11:07.049]    __FlashAddr=0x00000000
[12:11:07.049]    __FlashLen=0x00000000
[12:11:07.049]    __FlashArg=0x00000000
[12:11:07.049]    __FlashOp=0x00000000
[12:11:07.049]    __Result=0x00000000
[12:11:07.049]  </debugvars>
[12:11:07.049]  
[12:11:07.049]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:11:07.049]    <block atomic="false" info="">
[12:11:07.049]      __var SW_DP_ABORT       = 0x0;
[12:11:07.049]        // -> [SW_DP_ABORT <= 0x00000000]
[12:11:07.049]      __var DP_CTRL_STAT      = 0x4;
[12:11:07.049]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:11:07.049]      __var DP_SELECT         = 0x8;
[12:11:07.049]        // -> [DP_SELECT <= 0x00000008]
[12:11:07.049]      __var powered_down      = 0;
[12:11:07.049]        // -> [powered_down <= 0x00000000]
[12:11:07.049]      WriteDP(DP_SELECT, 0x00000000);
[12:11:07.057]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:11:07.057]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:11:07.057]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:11:07.057]        // -> [powered_down <= 0x00000001]
[12:11:07.057]    </block>
[12:11:07.057]    <control if="powered_down" while="" timeout="0" info="">
[12:11:07.057]      // if-block "powered_down"
[12:11:07.057]        // =>  TRUE
[12:11:07.057]      <block atomic="false" info="">
[12:11:07.057]        Message(0, "Debug/System power-up request sent");
[12:11:07.057]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:11:07.063]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:11:07.063]      </block>
[12:11:07.063]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:11:07.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:11:07.064]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:11:07.064]        // while-condition  =>  FALSE
[12:11:07.064]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:11:07.064]      </control>
[12:11:07.066]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:11:07.066]        // if-block "(__protocol & 0xFFFF) == 1"
[12:11:07.066]          // =>  FALSE
[12:11:07.066]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:11:07.066]      </control>
[12:11:07.066]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:11:07.066]        // if-block "(__protocol & 0xFFFF) == 2"
[12:11:07.066]          // =>  TRUE
[12:11:07.066]        <block atomic="false" info="">
[12:11:07.066]          Message(0, "executing SWD power up");
[12:11:07.067]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:11:07.067]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:11:07.070]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:11:07.071]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:11:07.071]        </block>
[12:11:07.071]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:11:07.071]      </control>
[12:11:07.071]      // end if-block "powered_down"
[12:11:07.071]    </control>
[12:11:07.071]    <block atomic="false" info="">
[12:11:07.072]      __var DEBUG_PORT_VAL    = 0;
[12:11:07.072]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:11:07.072]      __var ACCESS_POINT_VAL  = 0;
[12:11:07.072]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:11:07.072]      __ap = 1; 
[12:11:07.072]        // -> [__ap <= 0x00000001]
[12:11:07.072]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:11:07.076]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:11:07.076]      __ap = 4;
[12:11:07.076]        // -> [__ap <= 0x00000004]
[12:11:07.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:11:07.078]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:11:07.078]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:11:07.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:11:07.081]    </block>
[12:11:07.081]    <block atomic="false" info="">
[12:11:07.081]      __var nReset = 0x80;
[12:11:07.081]        // -> [nReset <= 0x00000080]
[12:11:07.081]      __var canReadPins = 0;
[12:11:07.081]        // -> [canReadPins <= 0x00000000]
[12:11:07.082]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:11:07.083]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:11:07.083]        // -> [canReadPins <= 0x00000001]
[12:11:07.083]    </block>
[12:11:07.083]    <control if="" while="1" timeout="200" info="">
[12:11:07.083]      // while "1"  (timeout="200")
[12:11:07.084]      // while-condition  =>  TRUE
[12:11:07.084]      // while "1"  (timeout="200")
[12:11:07.084]      // while-condition  =>  TRUE
[12:11:07.084]      // while "1"  (timeout="200")
[12:11:07.084]      // while-condition  =>  TRUE
[12:11:07.084]      // while "1"  (timeout="200")
[12:11:07.084]      // while-condition  =>  TRUE
[12:11:07.084]      // while "1"  (timeout="200")
[12:11:07.084]      // while-condition  =>  TRUE
[12:11:07.084]      // while "1"  (timeout="200")
[12:11:07.084]      // while-condition  =>  TRUE
[12:11:07.085]      // while "1"  (timeout="200")
[12:11:07.085]      // while  =>  TIMEOUT
[12:11:07.085]      // end while "1"
[12:11:07.085]    </control>
[12:11:07.085]    <control if="canReadPins" while="" timeout="0" info="">
[12:11:07.085]      // if-block "canReadPins"
[12:11:07.085]        // =>  TRUE
[12:11:07.085]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:11:07.085]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:11:07.086]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:11:07.086]        // while-condition  =>  FALSE
[12:11:07.088]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:11:07.088]      </control>
[12:11:07.088]      // end if-block "canReadPins"
[12:11:07.088]    </control>
[12:11:07.088]    <control if="!canReadPins" while="" timeout="0" info="">
[12:11:07.088]      // if-block "!canReadPins"
[12:11:07.088]        // =>  FALSE
[12:11:07.088]      // skip if-block "!canReadPins"
[12:11:07.088]    </control>
[12:11:07.088]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:11:07.088]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:11:07.089]        // =>  TRUE
[12:11:07.089]      <block atomic="false" info="">
[12:11:07.089]        WriteAP(0x00, 0x190008);
[12:11:07.089]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:11:07.089]        WriteAP(0xF0, 0x01);
[12:11:07.089]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:11:07.089]      </block>
[12:11:07.089]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:11:07.089]    </control>
[12:11:07.089]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:11:07.089]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:11:07.089]        // =>  FALSE
[12:11:07.089]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:11:07.089]    </control>
[12:11:07.089]    <block atomic="false" info="">
[12:11:07.089]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:11:07.098]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:11:07.098]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:11:07.098]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:11:07.098]      __ap = 0; //lets make sure we reset the access point selection
[12:11:07.098]        // -> [__ap <= 0x00000000]
[12:11:07.098]    </block>
[12:11:07.098]  </sequence>
[12:11:07.098]  
[12:11:07.118]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:11:07.118]  
[12:11:07.118]  <debugvars>
[12:11:07.118]    // Pre-defined
[12:11:07.120]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:11:07.120]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:11:07.120]    __dp=0x00000000
[12:11:07.120]    __ap=0x00000000
[12:11:07.120]    __traceout=0x00000000      (Trace Disabled)
[12:11:07.120]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:11:07.120]    __FlashAddr=0x00000000
[12:11:07.120]    __FlashLen=0x00000000
[12:11:07.120]    __FlashArg=0x00000000
[12:11:07.120]    __FlashOp=0x00000000
[12:11:07.120]    __Result=0x00000000
[12:11:07.120]  </debugvars>
[12:11:07.120]  
[12:11:07.120]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:11:07.120]    <block atomic="false" info="">
[12:11:07.120]      __var deviceID = 0;
[12:11:07.120]        // -> [deviceID <= 0x00000000]
[12:11:07.120]      __var version = 0;
[12:11:07.120]        // -> [version <= 0x00000000]
[12:11:07.120]      __var partNum = 0;
[12:11:07.120]        // -> [partNum <= 0x00000000]
[12:11:07.120]      __var manuf = 0;
[12:11:07.120]        // -> [manuf <= 0x00000000]
[12:11:07.120]      __var isMSPM0G1X0X_G3X0X = 0;
[12:11:07.120]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:11:07.120]      __var isProduction = 0;
[12:11:07.120]        // -> [isProduction <= 0x00000000]
[12:11:07.120]      __var continueId = 0;
[12:11:07.120]        // -> [continueId <= 0x00000000]
[12:11:07.120]      deviceID =   Read32(0x41C40004);
[12:11:07.120]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:11:07.120]        // -> [deviceID <= 0x2BB8802F]
[12:11:07.120]      version = deviceID >> 28;
[12:11:07.128]        // -> [version <= 0x00000002]
[12:11:07.128]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:11:07.128]        // -> [partNum <= 0x0000BB88]
[12:11:07.128]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:11:07.128]        // -> [manuf <= 0x00000017]
[12:11:07.128]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:11:07.128]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:11:07.129]      isProduction = (version > 0);
[12:11:07.129]        // -> [isProduction <= 0x00000001]
[12:11:07.129]    </block>
[12:11:07.129]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:11:07.129]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:11:07.129]        // =>  FALSE
[12:11:07.129]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:11:07.129]    </control>
[12:11:07.129]    <control if="continueId == 4" while="" timeout="0" info="">
[12:11:07.129]      // if-block "continueId == 4"
[12:11:07.129]        // =>  FALSE
[12:11:07.129]      // skip if-block "continueId == 4"
[12:11:07.129]    </control>
[12:11:07.129]    <control if="!isProduction" while="" timeout="0" info="">
[12:11:07.129]      // if-block "!isProduction"
[12:11:07.129]        // =>  FALSE
[12:11:07.129]      // skip if-block "!isProduction"
[12:11:07.129]    </control>
[12:11:07.129]  </sequence>
[12:11:07.131]  
[12:11:12.081]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:11:12.081]  
[12:11:12.093]  <debugvars>
[12:11:12.093]    // Pre-defined
[12:11:12.093]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:11:12.093]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:11:12.093]    __dp=0x00000000
[12:11:12.093]    __ap=0x00000000
[12:11:12.093]    __traceout=0x00000000      (Trace Disabled)
[12:11:12.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:11:12.093]    __FlashAddr=0x00000000
[12:11:12.094]    __FlashLen=0x00000000
[12:11:12.094]    __FlashArg=0x00000000
[12:11:12.094]    __FlashOp=0x00000000
[12:11:12.094]    __Result=0x00000000
[12:11:12.094]  </debugvars>
[12:11:12.094]  
[12:11:12.094]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:11:12.095]    <block atomic="false" info="">
[12:11:12.095]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:11:12.095]        // -> [isSWJ <= 0x00000001]
[12:11:12.095]      __var hasDormant = __protocol & 0x00020000;
[12:11:12.095]        // -> [hasDormant <= 0x00000000]
[12:11:12.095]      __var protType   = __protocol & 0x0000FFFF;
[12:11:12.095]        // -> [protType <= 0x00000002]
[12:11:12.095]    </block>
[12:11:12.095]    <control if="protType == 1" while="" timeout="0" info="">
[12:11:12.095]      // if-block "protType == 1"
[12:11:12.096]        // =>  FALSE
[12:11:12.096]      // skip if-block "protType == 1"
[12:11:12.096]    </control>
[12:11:12.096]    <control if="protType == 2" while="" timeout="0" info="">
[12:11:12.096]      // if-block "protType == 2"
[12:11:12.096]        // =>  TRUE
[12:11:12.096]      <control if="isSWJ" while="" timeout="0" info="">
[12:11:12.096]        // if-block "isSWJ"
[12:11:12.096]          // =>  TRUE
[12:11:12.096]        <control if="hasDormant" while="" timeout="0" info="">
[12:11:12.096]          // if-block "hasDormant"
[12:11:12.096]            // =>  FALSE
[12:11:12.096]          // skip if-block "hasDormant"
[12:11:12.097]        </control>
[12:11:12.097]        <control if="!hasDormant" while="" timeout="0" info="">
[12:11:12.097]          // if-block "!hasDormant"
[12:11:12.097]            // =>  TRUE
[12:11:12.097]          <block atomic="false" info="">
[12:11:12.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:11:12.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:11:12.099]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:11:12.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:11:12.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:11:12.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:11:12.099]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:11:12.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:11:12.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:11:12.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:11:12.099]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:11:12.099]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:11:12.099]          </block>
[12:11:12.099]          // end if-block "!hasDormant"
[12:11:12.099]        </control>
[12:11:12.099]        // end if-block "isSWJ"
[12:11:12.099]      </control>
[12:11:12.099]      <control if="!isSWJ" while="" timeout="0" info="">
[12:11:12.099]        // if-block "!isSWJ"
[12:11:12.099]          // =>  FALSE
[12:11:12.099]        // skip if-block "!isSWJ"
[12:11:12.099]      </control>
[12:11:12.099]      <block atomic="false" info="">
[12:11:12.099]        ReadDP(0x0);
[12:11:12.109]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:11:12.109]      </block>
[12:11:12.109]      // end if-block "protType == 2"
[12:11:12.109]    </control>
[12:11:12.109]  </sequence>
[12:11:12.109]  
[12:11:12.109]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:11:12.109]  
[12:11:12.109]  <debugvars>
[12:11:12.109]    // Pre-defined
[12:11:12.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:11:12.109]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:11:12.109]    __dp=0x00000000
[12:11:12.109]    __ap=0x00000000
[12:11:12.109]    __traceout=0x00000000      (Trace Disabled)
[12:11:12.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:11:12.109]    __FlashAddr=0x00000000
[12:11:12.109]    __FlashLen=0x00000000
[12:11:12.109]    __FlashArg=0x00000000
[12:11:12.109]    __FlashOp=0x00000000
[12:11:12.109]    __Result=0x00000000
[12:11:12.109]  </debugvars>
[12:11:12.109]  
[12:11:12.109]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:11:12.109]    <block atomic="false" info="">
[12:11:12.109]      __var SW_DP_ABORT       = 0x0;
[12:11:12.109]        // -> [SW_DP_ABORT <= 0x00000000]
[12:11:12.109]      __var DP_CTRL_STAT      = 0x4;
[12:11:12.109]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:11:12.109]      __var DP_SELECT         = 0x8;
[12:11:12.116]        // -> [DP_SELECT <= 0x00000008]
[12:11:12.116]      __var powered_down      = 0;
[12:11:12.116]        // -> [powered_down <= 0x00000000]
[12:11:12.116]      WriteDP(DP_SELECT, 0x00000000);
[12:11:12.119]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:11:12.119]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:11:12.121]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:11:12.121]        // -> [powered_down <= 0x00000001]
[12:11:12.121]    </block>
[12:11:12.121]    <control if="powered_down" while="" timeout="0" info="">
[12:11:12.121]      // if-block "powered_down"
[12:11:12.121]        // =>  TRUE
[12:11:12.121]      <block atomic="false" info="">
[12:11:12.121]        Message(0, "Debug/System power-up request sent");
[12:11:12.121]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:11:12.121]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:11:12.121]      </block>
[12:11:12.121]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:11:12.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:11:12.121]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:11:12.121]        // while-condition  =>  FALSE
[12:11:12.121]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:11:12.121]      </control>
[12:11:12.121]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:11:12.121]        // if-block "(__protocol & 0xFFFF) == 1"
[12:11:12.121]          // =>  FALSE
[12:11:12.121]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:11:12.121]      </control>
[12:11:12.121]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:11:12.121]        // if-block "(__protocol & 0xFFFF) == 2"
[12:11:12.121]          // =>  TRUE
[12:11:12.121]        <block atomic="false" info="">
[12:11:12.121]          Message(0, "executing SWD power up");
[12:11:12.130]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:11:12.130]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:11:12.130]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:11:12.130]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:11:12.130]        </block>
[12:11:12.130]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:11:12.130]      </control>
[12:11:12.130]      // end if-block "powered_down"
[12:11:12.130]    </control>
[12:11:12.130]    <block atomic="false" info="">
[12:11:12.130]      __var DEBUG_PORT_VAL    = 0;
[12:11:12.130]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:11:12.130]      __var ACCESS_POINT_VAL  = 0;
[12:11:12.130]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:11:12.130]      __ap = 1; 
[12:11:12.130]        // -> [__ap <= 0x00000001]
[12:11:12.130]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:11:12.130]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:11:12.130]      __ap = 4;
[12:11:12.130]        // -> [__ap <= 0x00000004]
[12:11:12.130]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:11:12.140]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:11:12.140]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:11:12.142]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:11:12.144]    </block>
[12:11:12.144]    <block atomic="false" info="">
[12:11:12.145]      __var nReset = 0x80;
[12:11:12.145]        // -> [nReset <= 0x00000080]
[12:11:12.145]      __var canReadPins = 0;
[12:11:12.145]        // -> [canReadPins <= 0x00000000]
[12:11:12.145]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:11:12.145]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:11:12.145]        // -> [canReadPins <= 0x00000001]
[12:11:12.145]    </block>
[12:11:12.145]    <control if="" while="1" timeout="200" info="">
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.145]      // while "1"  (timeout="200")
[12:11:12.145]      // while-condition  =>  TRUE
[12:11:12.150]      // while "1"  (timeout="200")
[12:11:12.150]      // while  =>  TIMEOUT
[12:11:12.150]      // end while "1"
[12:11:12.150]    </control>
[12:11:12.150]    <control if="canReadPins" while="" timeout="0" info="">
[12:11:12.150]      // if-block "canReadPins"
[12:11:12.151]        // =>  TRUE
[12:11:12.151]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:11:12.151]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:11:12.153]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:11:12.153]        // while-condition  =>  FALSE
[12:11:12.153]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:11:12.153]      </control>
[12:11:12.154]      // end if-block "canReadPins"
[12:11:12.154]    </control>
[12:11:12.154]    <control if="!canReadPins" while="" timeout="0" info="">
[12:11:12.154]      // if-block "!canReadPins"
[12:11:12.154]        // =>  FALSE
[12:11:12.154]      // skip if-block "!canReadPins"
[12:11:12.154]    </control>
[12:11:12.154]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:11:12.154]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:11:12.154]        // =>  TRUE
[12:11:12.154]      <block atomic="false" info="">
[12:11:12.155]        WriteAP(0x00, 0x190008);
[12:11:12.157]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:11:12.157]        WriteAP(0xF0, 0x01);
[12:11:12.160]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:11:12.160]      </block>
[12:11:12.160]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:11:12.160]    </control>
[12:11:12.160]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:11:12.160]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:11:12.160]        // =>  FALSE
[12:11:12.163]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:11:12.163]    </control>
[12:11:12.163]    <block atomic="false" info="">
[12:11:12.163]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:11:12.167]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:11:12.167]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:11:12.167]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:11:12.169]      __ap = 0; //lets make sure we reset the access point selection
[12:11:12.169]        // -> [__ap <= 0x00000000]
[12:11:12.169]    </block>
[12:11:12.169]  </sequence>
[12:11:12.169]  
[12:11:12.184]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:11:12.184]  
[12:11:12.184]  <debugvars>
[12:11:12.184]    // Pre-defined
[12:11:12.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:11:12.184]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:11:12.184]    __dp=0x00000000
[12:11:12.184]    __ap=0x00000000
[12:11:12.184]    __traceout=0x00000000      (Trace Disabled)
[12:11:12.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:11:12.184]    __FlashAddr=0x00000000
[12:11:12.184]    __FlashLen=0x00000000
[12:11:12.184]    __FlashArg=0x00000000
[12:11:12.184]    __FlashOp=0x00000000
[12:11:12.184]    __Result=0x00000000
[12:11:12.184]  </debugvars>
[12:11:12.184]  
[12:11:12.184]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:11:12.184]    <block atomic="false" info="">
[12:11:12.184]      __var deviceID = 0;
[12:11:12.184]        // -> [deviceID <= 0x00000000]
[12:11:12.184]      __var version = 0;
[12:11:12.184]        // -> [version <= 0x00000000]
[12:11:12.191]      __var partNum = 0;
[12:11:12.191]        // -> [partNum <= 0x00000000]
[12:11:12.192]      __var manuf = 0;
[12:11:12.192]        // -> [manuf <= 0x00000000]
[12:11:12.192]      __var isMSPM0G1X0X_G3X0X = 0;
[12:11:12.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:11:12.192]      __var isProduction = 0;
[12:11:12.192]        // -> [isProduction <= 0x00000000]
[12:11:12.192]      __var continueId = 0;
[12:11:12.192]        // -> [continueId <= 0x00000000]
[12:11:12.192]      deviceID =   Read32(0x41C40004);
[12:11:12.197]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:11:12.197]        // -> [deviceID <= 0x2BB8802F]
[12:11:12.197]      version = deviceID >> 28;
[12:11:12.197]        // -> [version <= 0x00000002]
[12:11:12.197]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:11:12.197]        // -> [partNum <= 0x0000BB88]
[12:11:12.197]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:11:12.197]        // -> [manuf <= 0x00000017]
[12:11:12.197]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:11:12.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:11:12.197]      isProduction = (version > 0);
[12:11:12.197]        // -> [isProduction <= 0x00000001]
[12:11:12.197]    </block>
[12:11:12.197]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:11:12.197]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:11:12.197]        // =>  FALSE
[12:11:12.197]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:11:12.197]    </control>
[12:11:12.197]    <control if="continueId == 4" while="" timeout="0" info="">
[12:11:12.197]      // if-block "continueId == 4"
[12:11:12.197]        // =>  FALSE
[12:11:12.199]      // skip if-block "continueId == 4"
[12:11:12.199]    </control>
[12:11:12.199]    <control if="!isProduction" while="" timeout="0" info="">
[12:11:12.199]      // if-block "!isProduction"
[12:11:12.199]        // =>  FALSE
[12:11:12.199]      // skip if-block "!isProduction"
[12:11:12.199]    </control>
[12:11:12.199]  </sequence>
[12:11:12.199]  
[12:18:44.479]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:18:44.479]  
[12:18:44.489]  <debugvars>
[12:18:44.489]    // Pre-defined
[12:18:44.489]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:18:44.489]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:18:44.489]    __dp=0x00000000
[12:18:44.489]    __ap=0x00000000
[12:18:44.489]    __traceout=0x00000000      (Trace Disabled)
[12:18:44.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:18:44.489]    __FlashAddr=0x00000000
[12:18:44.489]    __FlashLen=0x00000000
[12:18:44.489]    __FlashArg=0x00000000
[12:18:44.489]    __FlashOp=0x00000000
[12:18:44.489]    __Result=0x00000000
[12:18:44.489]  </debugvars>
[12:18:44.489]  
[12:18:44.489]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:18:44.489]    <block atomic="false" info="">
[12:18:44.489]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:18:44.489]        // -> [isSWJ <= 0x00000001]
[12:18:44.489]      __var hasDormant = __protocol & 0x00020000;
[12:18:44.489]        // -> [hasDormant <= 0x00000000]
[12:18:44.489]      __var protType   = __protocol & 0x0000FFFF;
[12:18:44.489]        // -> [protType <= 0x00000002]
[12:18:44.489]    </block>
[12:18:44.489]    <control if="protType == 1" while="" timeout="0" info="">
[12:18:44.489]      // if-block "protType == 1"
[12:18:44.489]        // =>  FALSE
[12:18:44.489]      // skip if-block "protType == 1"
[12:18:44.489]    </control>
[12:18:44.489]    <control if="protType == 2" while="" timeout="0" info="">
[12:18:44.489]      // if-block "protType == 2"
[12:18:44.489]        // =>  TRUE
[12:18:44.489]      <control if="isSWJ" while="" timeout="0" info="">
[12:18:44.489]        // if-block "isSWJ"
[12:18:44.489]          // =>  TRUE
[12:18:44.489]        <control if="hasDormant" while="" timeout="0" info="">
[12:18:44.489]          // if-block "hasDormant"
[12:18:44.489]            // =>  FALSE
[12:18:44.489]          // skip if-block "hasDormant"
[12:18:44.489]        </control>
[12:18:44.489]        <control if="!hasDormant" while="" timeout="0" info="">
[12:18:44.489]          // if-block "!hasDormant"
[12:18:44.489]            // =>  TRUE
[12:18:44.489]          <block atomic="false" info="">
[12:18:44.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:18:44.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:18:44.489]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:18:44.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:18:44.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:18:44.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:18:44.499]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:18:44.499]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:18:44.499]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:18:44.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:18:44.499]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:18:44.499]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:18:44.499]          </block>
[12:18:44.499]          // end if-block "!hasDormant"
[12:18:44.499]        </control>
[12:18:44.499]        // end if-block "isSWJ"
[12:18:44.499]      </control>
[12:18:44.499]      <control if="!isSWJ" while="" timeout="0" info="">
[12:18:44.499]        // if-block "!isSWJ"
[12:18:44.499]          // =>  FALSE
[12:18:44.499]        // skip if-block "!isSWJ"
[12:18:44.499]      </control>
[12:18:44.499]      <block atomic="false" info="">
[12:18:44.499]        ReadDP(0x0);
[12:18:44.499]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:18:44.499]      </block>
[12:18:44.499]      // end if-block "protType == 2"
[12:18:44.499]    </control>
[12:18:44.499]  </sequence>
[12:18:44.499]  
[12:18:44.509]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:18:44.509]  
[12:18:44.509]  <debugvars>
[12:18:44.510]    // Pre-defined
[12:18:44.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:18:44.510]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:18:44.510]    __dp=0x00000000
[12:18:44.510]    __ap=0x00000000
[12:18:44.510]    __traceout=0x00000000      (Trace Disabled)
[12:18:44.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:18:44.510]    __FlashAddr=0x00000000
[12:18:44.510]    __FlashLen=0x00000000
[12:18:44.510]    __FlashArg=0x00000000
[12:18:44.510]    __FlashOp=0x00000000
[12:18:44.510]    __Result=0x00000000
[12:18:44.510]  </debugvars>
[12:18:44.510]  
[12:18:44.510]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:18:44.510]    <block atomic="false" info="">
[12:18:44.510]      __var SW_DP_ABORT       = 0x0;
[12:18:44.510]        // -> [SW_DP_ABORT <= 0x00000000]
[12:18:44.510]      __var DP_CTRL_STAT      = 0x4;
[12:18:44.510]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:18:44.510]      __var DP_SELECT         = 0x8;
[12:18:44.510]        // -> [DP_SELECT <= 0x00000008]
[12:18:44.510]      __var powered_down      = 0;
[12:18:44.510]        // -> [powered_down <= 0x00000000]
[12:18:44.510]      WriteDP(DP_SELECT, 0x00000000);
[12:18:44.510]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:18:44.510]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:18:44.510]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:18:44.510]        // -> [powered_down <= 0x00000001]
[12:18:44.510]    </block>
[12:18:44.510]    <control if="powered_down" while="" timeout="0" info="">
[12:18:44.510]      // if-block "powered_down"
[12:18:44.510]        // =>  TRUE
[12:18:44.510]      <block atomic="false" info="">
[12:18:44.510]        Message(0, "Debug/System power-up request sent");
[12:18:44.510]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:18:44.518]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:18:44.518]      </block>
[12:18:44.518]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:18:44.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:18:44.518]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:18:44.518]        // while-condition  =>  FALSE
[12:18:44.518]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:18:44.518]      </control>
[12:18:44.518]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:18:44.518]        // if-block "(__protocol & 0xFFFF) == 1"
[12:18:44.518]          // =>  FALSE
[12:18:44.518]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:18:44.518]      </control>
[12:18:44.518]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:18:44.518]        // if-block "(__protocol & 0xFFFF) == 2"
[12:18:44.518]          // =>  TRUE
[12:18:44.518]        <block atomic="false" info="">
[12:18:44.518]          Message(0, "executing SWD power up");
[12:18:44.518]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:18:44.518]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:18:44.518]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:18:44.528]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:18:44.529]        </block>
[12:18:44.529]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:18:44.529]      </control>
[12:18:44.529]      // end if-block "powered_down"
[12:18:44.529]    </control>
[12:18:44.529]    <block atomic="false" info="">
[12:18:44.529]      __var DEBUG_PORT_VAL    = 0;
[12:18:44.529]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:18:44.530]      __var ACCESS_POINT_VAL  = 0;
[12:18:44.530]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:18:44.530]      __ap = 1; 
[12:18:44.530]        // -> [__ap <= 0x00000001]
[12:18:44.530]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:18:44.534]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:18:44.534]      __ap = 4;
[12:18:44.534]        // -> [__ap <= 0x00000004]
[12:18:44.534]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:18:44.538]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:18:44.538]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:18:44.538]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:18:44.539]    </block>
[12:18:44.539]    <block atomic="false" info="">
[12:18:44.539]      __var nReset = 0x80;
[12:18:44.539]        // -> [nReset <= 0x00000080]
[12:18:44.539]      __var canReadPins = 0;
[12:18:44.539]        // -> [canReadPins <= 0x00000000]
[12:18:44.539]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:18:44.541]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:18:44.541]        // -> [canReadPins <= 0x00000001]
[12:18:44.542]    </block>
[12:18:44.542]    <control if="" while="1" timeout="200" info="">
[12:18:44.542]      // while "1"  (timeout="200")
[12:18:44.542]      // while-condition  =>  TRUE
[12:18:44.542]      // while "1"  (timeout="200")
[12:18:44.542]      // while-condition  =>  TRUE
[12:18:44.542]      // while "1"  (timeout="200")
[12:18:44.542]      // while-condition  =>  TRUE
[12:18:44.542]      // while "1"  (timeout="200")
[12:18:44.542]      // while-condition  =>  TRUE
[12:18:44.542]      // while "1"  (timeout="200")
[12:18:44.542]      // while-condition  =>  TRUE
[12:18:44.543]      // while "1"  (timeout="200")
[12:18:44.543]      // while-condition  =>  TRUE
[12:18:44.543]      // while "1"  (timeout="200")
[12:18:44.543]      // while-condition  =>  TRUE
[12:18:44.543]      // while "1"  (timeout="200")
[12:18:44.543]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.544]      // while "1"  (timeout="200")
[12:18:44.544]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.546]      // while-condition  =>  TRUE
[12:18:44.546]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.548]      // while "1"  (timeout="200")
[12:18:44.548]      // while-condition  =>  TRUE
[12:18:44.551]      // while "1"  (timeout="200")
[12:18:44.551]      // while-condition  =>  TRUE
[12:18:44.551]      // while "1"  (timeout="200")
[12:18:44.551]      // while-condition  =>  TRUE
[12:18:44.551]      // while "1"  (timeout="200")
[12:18:44.551]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.552]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.552]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.552]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.552]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.552]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.552]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.552]      // while-condition  =>  TRUE
[12:18:44.552]      // while "1"  (timeout="200")
[12:18:44.553]      // while-condition  =>  TRUE
[12:18:44.553]      // while "1"  (timeout="200")
[12:18:44.553]      // while  =>  TIMEOUT
[12:18:44.553]      // end while "1"
[12:18:44.553]    </control>
[12:18:44.553]    <control if="canReadPins" while="" timeout="0" info="">
[12:18:44.553]      // if-block "canReadPins"
[12:18:44.553]        // =>  TRUE
[12:18:44.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:18:44.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:18:44.555]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:18:44.555]        // while-condition  =>  FALSE
[12:18:44.555]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:18:44.555]      </control>
[12:18:44.555]      // end if-block "canReadPins"
[12:18:44.555]    </control>
[12:18:44.555]    <control if="!canReadPins" while="" timeout="0" info="">
[12:18:44.555]      // if-block "!canReadPins"
[12:18:44.555]        // =>  FALSE
[12:18:44.555]      // skip if-block "!canReadPins"
[12:18:44.557]    </control>
[12:18:44.557]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:18:44.557]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:18:44.557]        // =>  TRUE
[12:18:44.557]      <block atomic="false" info="">
[12:18:44.557]        WriteAP(0x00, 0x190008);
[12:18:44.559]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:18:44.559]        WriteAP(0xF0, 0x01);
[12:18:44.560]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:18:44.560]      </block>
[12:18:44.560]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:18:44.560]    </control>
[12:18:44.560]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:18:44.560]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:18:44.560]        // =>  FALSE
[12:18:44.560]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:18:44.560]    </control>
[12:18:44.560]    <block atomic="false" info="">
[12:18:44.560]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:18:44.560]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:18:44.560]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:18:44.560]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:18:44.569]      __ap = 0; //lets make sure we reset the access point selection
[12:18:44.569]        // -> [__ap <= 0x00000000]
[12:18:44.569]    </block>
[12:18:44.569]  </sequence>
[12:18:44.569]  
[12:18:44.589]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:18:44.589]  
[12:18:44.589]  <debugvars>
[12:18:44.591]    // Pre-defined
[12:18:44.591]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:18:44.591]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:18:44.591]    __dp=0x00000000
[12:18:44.591]    __ap=0x00000000
[12:18:44.591]    __traceout=0x00000000      (Trace Disabled)
[12:18:44.591]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:18:44.591]    __FlashAddr=0x00000000
[12:18:44.591]    __FlashLen=0x00000000
[12:18:44.591]    __FlashArg=0x00000000
[12:18:44.591]    __FlashOp=0x00000000
[12:18:44.591]    __Result=0x00000000
[12:18:44.591]  </debugvars>
[12:18:44.591]  
[12:18:44.591]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:18:44.591]    <block atomic="false" info="">
[12:18:44.591]      __var deviceID = 0;
[12:18:44.591]        // -> [deviceID <= 0x00000000]
[12:18:44.591]      __var version = 0;
[12:18:44.594]        // -> [version <= 0x00000000]
[12:18:44.594]      __var partNum = 0;
[12:18:44.594]        // -> [partNum <= 0x00000000]
[12:18:44.594]      __var manuf = 0;
[12:18:44.594]        // -> [manuf <= 0x00000000]
[12:18:44.594]      __var isMSPM0G1X0X_G3X0X = 0;
[12:18:44.594]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:18:44.594]      __var isProduction = 0;
[12:18:44.594]        // -> [isProduction <= 0x00000000]
[12:18:44.594]      __var continueId = 0;
[12:18:44.594]        // -> [continueId <= 0x00000000]
[12:18:44.594]      deviceID =   Read32(0x41C40004);
[12:18:44.599]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:18:44.599]        // -> [deviceID <= 0x2BB8802F]
[12:18:44.599]      version = deviceID >> 28;
[12:18:44.599]        // -> [version <= 0x00000002]
[12:18:44.599]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:18:44.599]        // -> [partNum <= 0x0000BB88]
[12:18:44.599]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:18:44.599]        // -> [manuf <= 0x00000017]
[12:18:44.599]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:18:44.599]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:18:44.599]      isProduction = (version > 0);
[12:18:44.599]        // -> [isProduction <= 0x00000001]
[12:18:44.599]    </block>
[12:18:44.599]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:18:44.599]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:18:44.599]        // =>  FALSE
[12:18:44.599]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:18:44.599]    </control>
[12:18:44.599]    <control if="continueId == 4" while="" timeout="0" info="">
[12:18:44.599]      // if-block "continueId == 4"
[12:18:44.599]        // =>  FALSE
[12:18:44.599]      // skip if-block "continueId == 4"
[12:18:44.599]    </control>
[12:18:44.599]    <control if="!isProduction" while="" timeout="0" info="">
[12:18:44.599]      // if-block "!isProduction"
[12:18:44.599]        // =>  FALSE
[12:18:44.599]      // skip if-block "!isProduction"
[12:18:44.599]    </control>
[12:18:44.599]  </sequence>
[12:18:44.599]  
[12:20:11.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:20:11.455]  
[12:20:11.457]  <debugvars>
[12:20:11.457]    // Pre-defined
[12:20:11.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:20:11.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:20:11.457]    __dp=0x00000000
[12:20:11.457]    __ap=0x00000000
[12:20:11.457]    __traceout=0x00000000      (Trace Disabled)
[12:20:11.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:20:11.457]    __FlashAddr=0x00000000
[12:20:11.457]    __FlashLen=0x00000000
[12:20:11.457]    __FlashArg=0x00000000
[12:20:11.457]    __FlashOp=0x00000000
[12:20:11.457]    __Result=0x00000000
[12:20:11.457]  </debugvars>
[12:20:11.457]  
[12:20:11.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:20:11.457]    <block atomic="false" info="">
[12:20:11.457]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:20:11.457]        // -> [isSWJ <= 0x00000001]
[12:20:11.457]      __var hasDormant = __protocol & 0x00020000;
[12:20:11.457]        // -> [hasDormant <= 0x00000000]
[12:20:11.457]      __var protType   = __protocol & 0x0000FFFF;
[12:20:11.457]        // -> [protType <= 0x00000002]
[12:20:11.457]    </block>
[12:20:11.457]    <control if="protType == 1" while="" timeout="0" info="">
[12:20:11.457]      // if-block "protType == 1"
[12:20:11.457]        // =>  FALSE
[12:20:11.457]      // skip if-block "protType == 1"
[12:20:11.457]    </control>
[12:20:11.457]    <control if="protType == 2" while="" timeout="0" info="">
[12:20:11.457]      // if-block "protType == 2"
[12:20:11.457]        // =>  TRUE
[12:20:11.457]      <control if="isSWJ" while="" timeout="0" info="">
[12:20:11.457]        // if-block "isSWJ"
[12:20:11.457]          // =>  TRUE
[12:20:11.457]        <control if="hasDormant" while="" timeout="0" info="">
[12:20:11.457]          // if-block "hasDormant"
[12:20:11.457]            // =>  FALSE
[12:20:11.457]          // skip if-block "hasDormant"
[12:20:11.457]        </control>
[12:20:11.457]        <control if="!hasDormant" while="" timeout="0" info="">
[12:20:11.457]          // if-block "!hasDormant"
[12:20:11.457]            // =>  TRUE
[12:20:11.457]          <block atomic="false" info="">
[12:20:11.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:20:11.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:20:11.457]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:20:11.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:20:11.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:20:11.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:20:11.465]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:20:11.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:20:11.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:20:11.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:20:11.465]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:20:11.465]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:20:11.465]          </block>
[12:20:11.465]          // end if-block "!hasDormant"
[12:20:11.465]        </control>
[12:20:11.465]        // end if-block "isSWJ"
[12:20:11.465]      </control>
[12:20:11.465]      <control if="!isSWJ" while="" timeout="0" info="">
[12:20:11.465]        // if-block "!isSWJ"
[12:20:11.465]          // =>  FALSE
[12:20:11.465]        // skip if-block "!isSWJ"
[12:20:11.465]      </control>
[12:20:11.465]      <block atomic="false" info="">
[12:20:11.473]        ReadDP(0x0);
[12:20:11.473]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:20:11.473]      </block>
[12:20:11.473]      // end if-block "protType == 2"
[12:20:11.473]    </control>
[12:20:11.473]  </sequence>
[12:20:11.473]  
[12:20:11.473]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:20:11.473]  
[12:20:11.473]  <debugvars>
[12:20:11.473]    // Pre-defined
[12:20:11.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:20:11.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:20:11.473]    __dp=0x00000000
[12:20:11.473]    __ap=0x00000000
[12:20:11.473]    __traceout=0x00000000      (Trace Disabled)
[12:20:11.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:20:11.473]    __FlashAddr=0x00000000
[12:20:11.473]    __FlashLen=0x00000000
[12:20:11.473]    __FlashArg=0x00000000
[12:20:11.473]    __FlashOp=0x00000000
[12:20:11.473]    __Result=0x00000000
[12:20:11.473]  </debugvars>
[12:20:11.473]  
[12:20:11.473]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:20:11.473]    <block atomic="false" info="">
[12:20:11.473]      __var SW_DP_ABORT       = 0x0;
[12:20:11.473]        // -> [SW_DP_ABORT <= 0x00000000]
[12:20:11.473]      __var DP_CTRL_STAT      = 0x4;
[12:20:11.473]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:20:11.473]      __var DP_SELECT         = 0x8;
[12:20:11.473]        // -> [DP_SELECT <= 0x00000008]
[12:20:11.473]      __var powered_down      = 0;
[12:20:11.473]        // -> [powered_down <= 0x00000000]
[12:20:11.473]      WriteDP(DP_SELECT, 0x00000000);
[12:20:11.473]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:20:11.473]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:20:11.483]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:20:11.483]        // -> [powered_down <= 0x00000001]
[12:20:11.483]    </block>
[12:20:11.483]    <control if="powered_down" while="" timeout="0" info="">
[12:20:11.483]      // if-block "powered_down"
[12:20:11.483]        // =>  TRUE
[12:20:11.483]      <block atomic="false" info="">
[12:20:11.483]        Message(0, "Debug/System power-up request sent");
[12:20:11.483]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:20:11.483]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:20:11.483]      </block>
[12:20:11.483]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:20:11.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:20:11.483]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:20:11.483]        // while-condition  =>  FALSE
[12:20:11.483]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:20:11.483]      </control>
[12:20:11.483]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:20:11.483]        // if-block "(__protocol & 0xFFFF) == 1"
[12:20:11.483]          // =>  FALSE
[12:20:11.483]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:20:11.483]      </control>
[12:20:11.483]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:20:11.483]        // if-block "(__protocol & 0xFFFF) == 2"
[12:20:11.483]          // =>  TRUE
[12:20:11.483]        <block atomic="false" info="">
[12:20:11.483]          Message(0, "executing SWD power up");
[12:20:11.483]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:20:11.493]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:20:11.493]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:20:11.493]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:20:11.493]        </block>
[12:20:11.493]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:20:11.493]      </control>
[12:20:11.493]      // end if-block "powered_down"
[12:20:11.493]    </control>
[12:20:11.493]    <block atomic="false" info="">
[12:20:11.493]      __var DEBUG_PORT_VAL    = 0;
[12:20:11.493]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:20:11.493]      __var ACCESS_POINT_VAL  = 0;
[12:20:11.493]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:20:11.493]      __ap = 1; 
[12:20:11.493]        // -> [__ap <= 0x00000001]
[12:20:11.493]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:20:11.500]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:20:11.500]      __ap = 4;
[12:20:11.500]        // -> [__ap <= 0x00000004]
[12:20:11.500]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:20:11.504]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:20:11.504]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:20:11.504]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:20:11.504]    </block>
[12:20:11.507]    <block atomic="false" info="">
[12:20:11.507]      __var nReset = 0x80;
[12:20:11.507]        // -> [nReset <= 0x00000080]
[12:20:11.507]      __var canReadPins = 0;
[12:20:11.507]        // -> [canReadPins <= 0x00000000]
[12:20:11.507]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:20:11.507]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:20:11.507]        // -> [canReadPins <= 0x00000001]
[12:20:11.507]    </block>
[12:20:11.507]    <control if="" while="1" timeout="200" info="">
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.507]      // while "1"  (timeout="200")
[12:20:11.507]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.513]      // while "1"  (timeout="200")
[12:20:11.513]      // while-condition  =>  TRUE
[12:20:11.523]      // while "1"  (timeout="200")
[12:20:11.523]      // while  =>  TIMEOUT
[12:20:11.523]      // end while "1"
[12:20:11.523]    </control>
[12:20:11.523]    <control if="canReadPins" while="" timeout="0" info="">
[12:20:11.523]      // if-block "canReadPins"
[12:20:11.523]        // =>  TRUE
[12:20:11.523]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:20:11.523]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:20:11.523]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:20:11.523]        // while-condition  =>  FALSE
[12:20:11.523]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:20:11.523]      </control>
[12:20:11.523]      // end if-block "canReadPins"
[12:20:11.523]    </control>
[12:20:11.523]    <control if="!canReadPins" while="" timeout="0" info="">
[12:20:11.523]      // if-block "!canReadPins"
[12:20:11.523]        // =>  FALSE
[12:20:11.523]      // skip if-block "!canReadPins"
[12:20:11.523]    </control>
[12:20:11.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:20:11.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:20:11.523]        // =>  TRUE
[12:20:11.523]      <block atomic="false" info="">
[12:20:11.523]        WriteAP(0x00, 0x190008);
[12:20:11.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:20:11.523]        WriteAP(0xF0, 0x01);
[12:20:11.523]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:20:11.523]      </block>
[12:20:11.533]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:20:11.533]    </control>
[12:20:11.534]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:20:11.534]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:20:11.534]        // =>  FALSE
[12:20:11.534]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:20:11.534]    </control>
[12:20:11.534]    <block atomic="false" info="">
[12:20:11.534]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:20:11.534]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:20:11.534]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:20:11.534]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:20:11.534]      __ap = 0; //lets make sure we reset the access point selection
[12:20:11.534]        // -> [__ap <= 0x00000000]
[12:20:11.534]    </block>
[12:20:11.534]  </sequence>
[12:20:11.534]  
[12:20:11.555]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:20:11.555]  
[12:20:11.555]  <debugvars>
[12:20:11.555]    // Pre-defined
[12:20:11.555]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:20:11.555]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:20:11.555]    __dp=0x00000000
[12:20:11.555]    __ap=0x00000000
[12:20:11.555]    __traceout=0x00000000      (Trace Disabled)
[12:20:11.555]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:20:11.555]    __FlashAddr=0x00000000
[12:20:11.555]    __FlashLen=0x00000000
[12:20:11.555]    __FlashArg=0x00000000
[12:20:11.555]    __FlashOp=0x00000000
[12:20:11.555]    __Result=0x00000000
[12:20:11.555]  </debugvars>
[12:20:11.555]  
[12:20:11.555]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:20:11.555]    <block atomic="false" info="">
[12:20:11.555]      __var deviceID = 0;
[12:20:11.555]        // -> [deviceID <= 0x00000000]
[12:20:11.555]      __var version = 0;
[12:20:11.555]        // -> [version <= 0x00000000]
[12:20:11.555]      __var partNum = 0;
[12:20:11.555]        // -> [partNum <= 0x00000000]
[12:20:11.555]      __var manuf = 0;
[12:20:11.555]        // -> [manuf <= 0x00000000]
[12:20:11.555]      __var isMSPM0G1X0X_G3X0X = 0;
[12:20:11.555]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:20:11.555]      __var isProduction = 0;
[12:20:11.555]        // -> [isProduction <= 0x00000000]
[12:20:11.555]      __var continueId = 0;
[12:20:11.555]        // -> [continueId <= 0x00000000]
[12:20:11.555]      deviceID =   Read32(0x41C40004);
[12:20:11.564]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:20:11.564]        // -> [deviceID <= 0x2BB8802F]
[12:20:11.564]      version = deviceID >> 28;
[12:20:11.564]        // -> [version <= 0x00000002]
[12:20:11.564]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:20:11.564]        // -> [partNum <= 0x0000BB88]
[12:20:11.564]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:20:11.564]        // -> [manuf <= 0x00000017]
[12:20:11.564]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:20:11.573]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:20:11.573]      isProduction = (version > 0);
[12:20:11.573]        // -> [isProduction <= 0x00000001]
[12:20:11.573]    </block>
[12:20:11.573]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:20:11.573]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:20:11.573]        // =>  FALSE
[12:20:11.573]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:20:11.573]    </control>
[12:20:11.573]    <control if="continueId == 4" while="" timeout="0" info="">
[12:20:11.573]      // if-block "continueId == 4"
[12:20:11.573]        // =>  FALSE
[12:20:11.573]      // skip if-block "continueId == 4"
[12:20:11.573]    </control>
[12:20:11.573]    <control if="!isProduction" while="" timeout="0" info="">
[12:20:11.573]      // if-block "!isProduction"
[12:20:11.573]        // =>  FALSE
[12:20:11.573]      // skip if-block "!isProduction"
[12:20:11.573]    </control>
[12:20:11.573]  </sequence>
[12:20:11.573]  
[12:20:16.776]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:20:16.776]  
[12:20:16.776]  <debugvars>
[12:20:16.776]    // Pre-defined
[12:20:16.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:20:16.776]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:20:16.776]    __dp=0x00000000
[12:20:16.776]    __ap=0x00000000
[12:20:16.776]    __traceout=0x00000000      (Trace Disabled)
[12:20:16.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:20:16.776]    __FlashAddr=0x00000000
[12:20:16.776]    __FlashLen=0x00000000
[12:20:16.776]    __FlashArg=0x00000000
[12:20:16.776]    __FlashOp=0x00000000
[12:20:16.776]    __Result=0x00000000
[12:20:16.776]  </debugvars>
[12:20:16.776]  
[12:20:16.776]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:20:16.776]    <block atomic="false" info="">
[12:20:16.776]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:20:16.783]        // -> [isSWJ <= 0x00000001]
[12:20:16.783]      __var hasDormant = __protocol & 0x00020000;
[12:20:16.783]        // -> [hasDormant <= 0x00000000]
[12:20:16.783]      __var protType   = __protocol & 0x0000FFFF;
[12:20:16.783]        // -> [protType <= 0x00000002]
[12:20:16.783]    </block>
[12:20:16.783]    <control if="protType == 1" while="" timeout="0" info="">
[12:20:16.783]      // if-block "protType == 1"
[12:20:16.783]        // =>  FALSE
[12:20:16.783]      // skip if-block "protType == 1"
[12:20:16.783]    </control>
[12:20:16.785]    <control if="protType == 2" while="" timeout="0" info="">
[12:20:16.785]      // if-block "protType == 2"
[12:20:16.785]        // =>  TRUE
[12:20:16.785]      <control if="isSWJ" while="" timeout="0" info="">
[12:20:16.785]        // if-block "isSWJ"
[12:20:16.785]          // =>  TRUE
[12:20:16.785]        <control if="hasDormant" while="" timeout="0" info="">
[12:20:16.785]          // if-block "hasDormant"
[12:20:16.785]            // =>  FALSE
[12:20:16.785]          // skip if-block "hasDormant"
[12:20:16.785]        </control>
[12:20:16.786]        <control if="!hasDormant" while="" timeout="0" info="">
[12:20:16.786]          // if-block "!hasDormant"
[12:20:16.786]            // =>  TRUE
[12:20:16.786]          <block atomic="false" info="">
[12:20:16.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:20:16.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:20:16.787]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:20:16.787]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:20:16.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:20:16.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:20:16.787]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:20:16.787]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:20:16.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:20:16.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:20:16.794]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:20:16.795]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:20:16.795]          </block>
[12:20:16.795]          // end if-block "!hasDormant"
[12:20:16.795]        </control>
[12:20:16.795]        // end if-block "isSWJ"
[12:20:16.795]      </control>
[12:20:16.795]      <control if="!isSWJ" while="" timeout="0" info="">
[12:20:16.795]        // if-block "!isSWJ"
[12:20:16.795]          // =>  FALSE
[12:20:16.795]        // skip if-block "!isSWJ"
[12:20:16.795]      </control>
[12:20:16.795]      <block atomic="false" info="">
[12:20:16.795]        ReadDP(0x0);
[12:20:16.795]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:20:16.795]      </block>
[12:20:16.795]      // end if-block "protType == 2"
[12:20:16.795]    </control>
[12:20:16.795]  </sequence>
[12:20:16.795]  
[12:20:16.795]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:20:16.795]  
[12:20:16.795]  <debugvars>
[12:20:16.795]    // Pre-defined
[12:20:16.795]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:20:16.795]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:20:16.795]    __dp=0x00000000
[12:20:16.795]    __ap=0x00000000
[12:20:16.795]    __traceout=0x00000000      (Trace Disabled)
[12:20:16.795]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:20:16.795]    __FlashAddr=0x00000000
[12:20:16.795]    __FlashLen=0x00000000
[12:20:16.795]    __FlashArg=0x00000000
[12:20:16.795]    __FlashOp=0x00000000
[12:20:16.795]    __Result=0x00000000
[12:20:16.795]  </debugvars>
[12:20:16.795]  
[12:20:16.804]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:20:16.804]    <block atomic="false" info="">
[12:20:16.804]      __var SW_DP_ABORT       = 0x0;
[12:20:16.804]        // -> [SW_DP_ABORT <= 0x00000000]
[12:20:16.804]      __var DP_CTRL_STAT      = 0x4;
[12:20:16.804]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:20:16.805]      __var DP_SELECT         = 0x8;
[12:20:16.805]        // -> [DP_SELECT <= 0x00000008]
[12:20:16.805]      __var powered_down      = 0;
[12:20:16.805]        // -> [powered_down <= 0x00000000]
[12:20:16.805]      WriteDP(DP_SELECT, 0x00000000);
[12:20:16.805]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:20:16.805]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:20:16.805]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:20:16.805]        // -> [powered_down <= 0x00000001]
[12:20:16.805]    </block>
[12:20:16.805]    <control if="powered_down" while="" timeout="0" info="">
[12:20:16.805]      // if-block "powered_down"
[12:20:16.805]        // =>  TRUE
[12:20:16.805]      <block atomic="false" info="">
[12:20:16.805]        Message(0, "Debug/System power-up request sent");
[12:20:16.805]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:20:16.805]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:20:16.805]      </block>
[12:20:16.805]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:20:16.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:20:16.814]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:20:16.814]        // while-condition  =>  FALSE
[12:20:16.814]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:20:16.814]      </control>
[12:20:16.814]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:20:16.814]        // if-block "(__protocol & 0xFFFF) == 1"
[12:20:16.814]          // =>  FALSE
[12:20:16.814]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:20:16.814]      </control>
[12:20:16.814]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:20:16.814]        // if-block "(__protocol & 0xFFFF) == 2"
[12:20:16.814]          // =>  TRUE
[12:20:16.814]        <block atomic="false" info="">
[12:20:16.814]          Message(0, "executing SWD power up");
[12:20:16.814]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:20:16.814]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:20:16.814]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:20:16.824]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:20:16.824]        </block>
[12:20:16.824]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:20:16.824]      </control>
[12:20:16.824]      // end if-block "powered_down"
[12:20:16.824]    </control>
[12:20:16.824]    <block atomic="false" info="">
[12:20:16.824]      __var DEBUG_PORT_VAL    = 0;
[12:20:16.824]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:20:16.824]      __var ACCESS_POINT_VAL  = 0;
[12:20:16.824]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:20:16.824]      __ap = 1; 
[12:20:16.824]        // -> [__ap <= 0x00000001]
[12:20:16.824]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:20:16.824]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:20:16.824]      __ap = 4;
[12:20:16.824]        // -> [__ap <= 0x00000004]
[12:20:16.824]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:20:16.834]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:20:16.834]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:20:16.834]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:20:16.834]    </block>
[12:20:16.834]    <block atomic="false" info="">
[12:20:16.834]      __var nReset = 0x80;
[12:20:16.834]        // -> [nReset <= 0x00000080]
[12:20:16.834]      __var canReadPins = 0;
[12:20:16.834]        // -> [canReadPins <= 0x00000000]
[12:20:16.834]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:20:16.844]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:20:16.844]        // -> [canReadPins <= 0x00000001]
[12:20:16.844]    </block>
[12:20:16.844]    <control if="" while="1" timeout="200" info="">
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.844]      // while-condition  =>  TRUE
[12:20:16.844]      // while "1"  (timeout="200")
[12:20:16.854]      // while-condition  =>  TRUE
[12:20:16.854]      // while "1"  (timeout="200")
[12:20:16.854]      // while  =>  TIMEOUT
[12:20:16.854]      // end while "1"
[12:20:16.854]    </control>
[12:20:16.854]    <control if="canReadPins" while="" timeout="0" info="">
[12:20:16.854]      // if-block "canReadPins"
[12:20:16.854]        // =>  TRUE
[12:20:16.854]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:20:16.854]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:20:16.854]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:20:16.854]        // while-condition  =>  FALSE
[12:20:16.854]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:20:16.854]      </control>
[12:20:16.854]      // end if-block "canReadPins"
[12:20:16.854]    </control>
[12:20:16.854]    <control if="!canReadPins" while="" timeout="0" info="">
[12:20:16.854]      // if-block "!canReadPins"
[12:20:16.854]        // =>  FALSE
[12:20:16.854]      // skip if-block "!canReadPins"
[12:20:16.854]    </control>
[12:20:16.864]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:20:16.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:20:16.864]        // =>  TRUE
[12:20:16.864]      <block atomic="false" info="">
[12:20:16.864]        WriteAP(0x00, 0x190008);
[12:20:16.864]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:20:16.864]        WriteAP(0xF0, 0x01);
[12:20:16.874]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:20:16.874]      </block>
[12:20:16.874]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:20:16.874]    </control>
[12:20:16.874]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:20:16.874]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:20:16.874]        // =>  FALSE
[12:20:16.874]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:20:16.874]    </control>
[12:20:16.874]    <block atomic="false" info="">
[12:20:16.874]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:20:16.884]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:20:16.884]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:20:16.884]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:20:16.886]      __ap = 0; //lets make sure we reset the access point selection
[12:20:16.886]        // -> [__ap <= 0x00000000]
[12:20:16.886]    </block>
[12:20:16.886]  </sequence>
[12:20:16.886]  
[12:20:16.910]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:20:16.910]  
[12:20:16.910]  <debugvars>
[12:20:16.910]    // Pre-defined
[12:20:16.910]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:20:16.910]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:20:16.910]    __dp=0x00000000
[12:20:16.910]    __ap=0x00000000
[12:20:16.910]    __traceout=0x00000000      (Trace Disabled)
[12:20:16.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:20:16.911]    __FlashAddr=0x00000000
[12:20:16.911]    __FlashLen=0x00000000
[12:20:16.911]    __FlashArg=0x00000000
[12:20:16.911]    __FlashOp=0x00000000
[12:20:16.911]    __Result=0x00000000
[12:20:16.911]  </debugvars>
[12:20:16.911]  
[12:20:16.911]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:20:16.911]    <block atomic="false" info="">
[12:20:16.911]      __var deviceID = 0;
[12:20:16.911]        // -> [deviceID <= 0x00000000]
[12:20:16.911]      __var version = 0;
[12:20:16.911]        // -> [version <= 0x00000000]
[12:20:16.911]      __var partNum = 0;
[12:20:16.911]        // -> [partNum <= 0x00000000]
[12:20:16.911]      __var manuf = 0;
[12:20:16.911]        // -> [manuf <= 0x00000000]
[12:20:16.911]      __var isMSPM0G1X0X_G3X0X = 0;
[12:20:16.911]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:20:16.911]      __var isProduction = 0;
[12:20:16.911]        // -> [isProduction <= 0x00000000]
[12:20:16.911]      __var continueId = 0;
[12:20:16.911]        // -> [continueId <= 0x00000000]
[12:20:16.911]      deviceID =   Read32(0x41C40004);
[12:20:16.919]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:20:16.919]        // -> [deviceID <= 0x2BB8802F]
[12:20:16.919]      version = deviceID >> 28;
[12:20:16.919]        // -> [version <= 0x00000002]
[12:20:16.919]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:20:16.919]        // -> [partNum <= 0x0000BB88]
[12:20:16.919]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:20:16.919]        // -> [manuf <= 0x00000017]
[12:20:16.919]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:20:16.919]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:20:16.919]      isProduction = (version > 0);
[12:20:16.919]        // -> [isProduction <= 0x00000001]
[12:20:16.919]    </block>
[12:20:16.919]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:20:16.919]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:20:16.919]        // =>  FALSE
[12:20:16.919]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:20:16.919]    </control>
[12:20:16.919]    <control if="continueId == 4" while="" timeout="0" info="">
[12:20:16.919]      // if-block "continueId == 4"
[12:20:16.919]        // =>  FALSE
[12:20:16.922]      // skip if-block "continueId == 4"
[12:20:16.922]    </control>
[12:20:16.922]    <control if="!isProduction" while="" timeout="0" info="">
[12:20:16.922]      // if-block "!isProduction"
[12:20:16.922]        // =>  FALSE
[12:20:16.922]      // skip if-block "!isProduction"
[12:20:16.922]    </control>
[12:20:16.922]  </sequence>
[12:20:16.923]  
[12:22:31.675]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:22:31.675]  
[12:22:31.675]  <debugvars>
[12:22:31.675]    // Pre-defined
[12:22:31.675]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:22:31.675]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:22:31.675]    __dp=0x00000000
[12:22:31.675]    __ap=0x00000000
[12:22:31.675]    __traceout=0x00000000      (Trace Disabled)
[12:22:31.675]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:22:31.675]    __FlashAddr=0x00000000
[12:22:31.675]    __FlashLen=0x00000000
[12:22:31.675]    __FlashArg=0x00000000
[12:22:31.675]    __FlashOp=0x00000000
[12:22:31.675]    __Result=0x00000000
[12:22:31.675]  </debugvars>
[12:22:31.675]  
[12:22:31.675]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:22:31.675]    <block atomic="false" info="">
[12:22:31.675]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:22:31.675]        // -> [isSWJ <= 0x00000001]
[12:22:31.675]      __var hasDormant = __protocol & 0x00020000;
[12:22:31.675]        // -> [hasDormant <= 0x00000000]
[12:22:31.675]      __var protType   = __protocol & 0x0000FFFF;
[12:22:31.675]        // -> [protType <= 0x00000002]
[12:22:31.675]    </block>
[12:22:31.675]    <control if="protType == 1" while="" timeout="0" info="">
[12:22:31.675]      // if-block "protType == 1"
[12:22:31.675]        // =>  FALSE
[12:22:31.675]      // skip if-block "protType == 1"
[12:22:31.675]    </control>
[12:22:31.675]    <control if="protType == 2" while="" timeout="0" info="">
[12:22:31.675]      // if-block "protType == 2"
[12:22:31.675]        // =>  TRUE
[12:22:31.675]      <control if="isSWJ" while="" timeout="0" info="">
[12:22:31.675]        // if-block "isSWJ"
[12:22:31.675]          // =>  TRUE
[12:22:31.675]        <control if="hasDormant" while="" timeout="0" info="">
[12:22:31.675]          // if-block "hasDormant"
[12:22:31.675]            // =>  FALSE
[12:22:31.675]          // skip if-block "hasDormant"
[12:22:31.675]        </control>
[12:22:31.675]        <control if="!hasDormant" while="" timeout="0" info="">
[12:22:31.675]          // if-block "!hasDormant"
[12:22:31.675]            // =>  TRUE
[12:22:31.675]          <block atomic="false" info="">
[12:22:31.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:22:31.675]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:22:31.675]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:22:31.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:22:31.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:22:31.686]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:22:31.686]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:22:31.686]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:22:31.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:22:31.686]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:22:31.686]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:22:31.686]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:22:31.686]          </block>
[12:22:31.686]          // end if-block "!hasDormant"
[12:22:31.686]        </control>
[12:22:31.686]        // end if-block "isSWJ"
[12:22:31.686]      </control>
[12:22:31.686]      <control if="!isSWJ" while="" timeout="0" info="">
[12:22:31.686]        // if-block "!isSWJ"
[12:22:31.686]          // =>  FALSE
[12:22:31.686]        // skip if-block "!isSWJ"
[12:22:31.686]      </control>
[12:22:31.686]      <block atomic="false" info="">
[12:22:31.686]        ReadDP(0x0);
[12:22:31.686]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:22:31.686]      </block>
[12:22:31.686]      // end if-block "protType == 2"
[12:22:31.686]    </control>
[12:22:31.686]  </sequence>
[12:22:31.686]  
[12:22:31.695]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:22:31.695]  
[12:22:31.695]  <debugvars>
[12:22:31.695]    // Pre-defined
[12:22:31.695]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:22:31.695]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:22:31.695]    __dp=0x00000000
[12:22:31.695]    __ap=0x00000000
[12:22:31.695]    __traceout=0x00000000      (Trace Disabled)
[12:22:31.695]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:22:31.695]    __FlashAddr=0x00000000
[12:22:31.695]    __FlashLen=0x00000000
[12:22:31.695]    __FlashArg=0x00000000
[12:22:31.695]    __FlashOp=0x00000000
[12:22:31.695]    __Result=0x00000000
[12:22:31.695]  </debugvars>
[12:22:31.695]  
[12:22:31.695]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:22:31.695]    <block atomic="false" info="">
[12:22:31.695]      __var SW_DP_ABORT       = 0x0;
[12:22:31.695]        // -> [SW_DP_ABORT <= 0x00000000]
[12:22:31.695]      __var DP_CTRL_STAT      = 0x4;
[12:22:31.695]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:22:31.695]      __var DP_SELECT         = 0x8;
[12:22:31.695]        // -> [DP_SELECT <= 0x00000008]
[12:22:31.695]      __var powered_down      = 0;
[12:22:31.695]        // -> [powered_down <= 0x00000000]
[12:22:31.695]      WriteDP(DP_SELECT, 0x00000000);
[12:22:31.695]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:22:31.695]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:22:31.695]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:22:31.695]        // -> [powered_down <= 0x00000001]
[12:22:31.695]    </block>
[12:22:31.695]    <control if="powered_down" while="" timeout="0" info="">
[12:22:31.695]      // if-block "powered_down"
[12:22:31.695]        // =>  TRUE
[12:22:31.695]      <block atomic="false" info="">
[12:22:31.695]        Message(0, "Debug/System power-up request sent");
[12:22:31.705]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:22:31.705]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:22:31.705]      </block>
[12:22:31.705]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:22:31.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:22:31.712]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:22:31.712]        // while-condition  =>  FALSE
[12:22:31.712]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:22:31.712]      </control>
[12:22:31.712]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:22:31.712]        // if-block "(__protocol & 0xFFFF) == 1"
[12:22:31.712]          // =>  FALSE
[12:22:31.712]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:22:31.712]      </control>
[12:22:31.712]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:22:31.712]        // if-block "(__protocol & 0xFFFF) == 2"
[12:22:31.712]          // =>  TRUE
[12:22:31.712]        <block atomic="false" info="">
[12:22:31.712]          Message(0, "executing SWD power up");
[12:22:31.716]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:22:31.718]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:22:31.718]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:22:31.718]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:22:31.720]        </block>
[12:22:31.720]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:22:31.720]      </control>
[12:22:31.720]      // end if-block "powered_down"
[12:22:31.720]    </control>
[12:22:31.720]    <block atomic="false" info="">
[12:22:31.720]      __var DEBUG_PORT_VAL    = 0;
[12:22:31.720]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:22:31.720]      __var ACCESS_POINT_VAL  = 0;
[12:22:31.720]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:22:31.720]      __ap = 1; 
[12:22:31.720]        // -> [__ap <= 0x00000001]
[12:22:31.720]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:22:31.724]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:22:31.724]      __ap = 4;
[12:22:31.724]        // -> [__ap <= 0x00000004]
[12:22:31.724]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:22:31.726]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:22:31.726]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:22:31.726]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:22:31.726]    </block>
[12:22:31.726]    <block atomic="false" info="">
[12:22:31.726]      __var nReset = 0x80;
[12:22:31.726]        // -> [nReset <= 0x00000080]
[12:22:31.726]      __var canReadPins = 0;
[12:22:31.726]        // -> [canReadPins <= 0x00000000]
[12:22:31.726]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:22:31.726]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:22:31.726]        // -> [canReadPins <= 0x00000001]
[12:22:31.726]    </block>
[12:22:31.726]    <control if="" while="1" timeout="200" info="">
[12:22:31.726]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.733]      // while "1"  (timeout="200")
[12:22:31.733]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.736]      // while-condition  =>  TRUE
[12:22:31.736]      // while "1"  (timeout="200")
[12:22:31.746]      // while-condition  =>  TRUE
[12:22:31.746]      // while "1"  (timeout="200")
[12:22:31.746]      // while  =>  TIMEOUT
[12:22:31.746]      // end while "1"
[12:22:31.746]    </control>
[12:22:31.746]    <control if="canReadPins" while="" timeout="0" info="">
[12:22:31.746]      // if-block "canReadPins"
[12:22:31.746]        // =>  TRUE
[12:22:31.746]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:22:31.746]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:22:31.746]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:22:31.746]        // while-condition  =>  FALSE
[12:22:31.746]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:22:31.746]      </control>
[12:22:31.746]      // end if-block "canReadPins"
[12:22:31.746]    </control>
[12:22:31.746]    <control if="!canReadPins" while="" timeout="0" info="">
[12:22:31.746]      // if-block "!canReadPins"
[12:22:31.746]        // =>  FALSE
[12:22:31.746]      // skip if-block "!canReadPins"
[12:22:31.746]    </control>
[12:22:31.746]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:22:31.746]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:22:31.746]        // =>  TRUE
[12:22:31.746]      <block atomic="false" info="">
[12:22:31.746]        WriteAP(0x00, 0x190008);
[12:22:31.746]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:22:31.746]        WriteAP(0xF0, 0x01);
[12:22:31.756]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:22:31.756]      </block>
[12:22:31.756]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:22:31.756]    </control>
[12:22:31.756]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:22:31.756]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:22:31.756]        // =>  FALSE
[12:22:31.756]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:22:31.756]    </control>
[12:22:31.756]    <block atomic="false" info="">
[12:22:31.756]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:22:31.756]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:22:31.756]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:22:31.756]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:22:31.756]      __ap = 0; //lets make sure we reset the access point selection
[12:22:31.756]        // -> [__ap <= 0x00000000]
[12:22:31.756]    </block>
[12:22:31.756]  </sequence>
[12:22:31.756]  
[12:22:31.776]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:22:31.776]  
[12:22:31.776]  <debugvars>
[12:22:31.776]    // Pre-defined
[12:22:31.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:22:31.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:22:31.776]    __dp=0x00000000
[12:22:31.776]    __ap=0x00000000
[12:22:31.776]    __traceout=0x00000000      (Trace Disabled)
[12:22:31.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:22:31.776]    __FlashAddr=0x00000000
[12:22:31.776]    __FlashLen=0x00000000
[12:22:31.776]    __FlashArg=0x00000000
[12:22:31.776]    __FlashOp=0x00000000
[12:22:31.776]    __Result=0x00000000
[12:22:31.776]  </debugvars>
[12:22:31.776]  
[12:22:31.776]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:22:31.776]    <block atomic="false" info="">
[12:22:31.776]      __var deviceID = 0;
[12:22:31.776]        // -> [deviceID <= 0x00000000]
[12:22:31.776]      __var version = 0;
[12:22:31.776]        // -> [version <= 0x00000000]
[12:22:31.776]      __var partNum = 0;
[12:22:31.776]        // -> [partNum <= 0x00000000]
[12:22:31.776]      __var manuf = 0;
[12:22:31.776]        // -> [manuf <= 0x00000000]
[12:22:31.776]      __var isMSPM0G1X0X_G3X0X = 0;
[12:22:31.776]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:22:31.776]      __var isProduction = 0;
[12:22:31.776]        // -> [isProduction <= 0x00000000]
[12:22:31.776]      __var continueId = 0;
[12:22:31.776]        // -> [continueId <= 0x00000000]
[12:22:31.776]      deviceID =   Read32(0x41C40004);
[12:22:31.786]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:22:31.786]        // -> [deviceID <= 0x2BB8802F]
[12:22:31.786]      version = deviceID >> 28;
[12:22:31.786]        // -> [version <= 0x00000002]
[12:22:31.786]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:22:31.786]        // -> [partNum <= 0x0000BB88]
[12:22:31.786]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:22:31.786]        // -> [manuf <= 0x00000017]
[12:22:31.786]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:22:31.786]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:22:31.786]      isProduction = (version > 0);
[12:22:31.786]        // -> [isProduction <= 0x00000001]
[12:22:31.786]    </block>
[12:22:31.786]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:22:31.786]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:22:31.786]        // =>  FALSE
[12:22:31.786]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:22:31.786]    </control>
[12:22:31.786]    <control if="continueId == 4" while="" timeout="0" info="">
[12:22:31.786]      // if-block "continueId == 4"
[12:22:31.786]        // =>  FALSE
[12:22:31.786]      // skip if-block "continueId == 4"
[12:22:31.786]    </control>
[12:22:31.786]    <control if="!isProduction" while="" timeout="0" info="">
[12:22:31.786]      // if-block "!isProduction"
[12:22:31.786]        // =>  FALSE
[12:22:31.786]      // skip if-block "!isProduction"
[12:22:31.786]    </control>
[12:22:31.786]  </sequence>
[12:22:31.786]  
[12:22:37.619]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:22:37.619]  
[12:22:37.619]  <debugvars>
[12:22:37.619]    // Pre-defined
[12:22:37.619]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:22:37.619]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:22:37.619]    __dp=0x00000000
[12:22:37.619]    __ap=0x00000000
[12:22:37.619]    __traceout=0x00000000      (Trace Disabled)
[12:22:37.619]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:22:37.619]    __FlashAddr=0x00000000
[12:22:37.619]    __FlashLen=0x00000000
[12:22:37.619]    __FlashArg=0x00000000
[12:22:37.619]    __FlashOp=0x00000000
[12:22:37.619]    __Result=0x00000000
[12:22:37.619]  </debugvars>
[12:22:37.619]  
[12:22:37.619]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:22:37.619]    <block atomic="false" info="">
[12:22:37.619]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:22:37.619]        // -> [isSWJ <= 0x00000001]
[12:22:37.619]      __var hasDormant = __protocol & 0x00020000;
[12:22:37.619]        // -> [hasDormant <= 0x00000000]
[12:22:37.619]      __var protType   = __protocol & 0x0000FFFF;
[12:22:37.619]        // -> [protType <= 0x00000002]
[12:22:37.619]    </block>
[12:22:37.619]    <control if="protType == 1" while="" timeout="0" info="">
[12:22:37.619]      // if-block "protType == 1"
[12:22:37.619]        // =>  FALSE
[12:22:37.619]      // skip if-block "protType == 1"
[12:22:37.619]    </control>
[12:22:37.619]    <control if="protType == 2" while="" timeout="0" info="">
[12:22:37.619]      // if-block "protType == 2"
[12:22:37.619]        // =>  TRUE
[12:22:37.619]      <control if="isSWJ" while="" timeout="0" info="">
[12:22:37.619]        // if-block "isSWJ"
[12:22:37.619]          // =>  TRUE
[12:22:37.619]        <control if="hasDormant" while="" timeout="0" info="">
[12:22:37.619]          // if-block "hasDormant"
[12:22:37.619]            // =>  FALSE
[12:22:37.619]          // skip if-block "hasDormant"
[12:22:37.619]        </control>
[12:22:37.619]        <control if="!hasDormant" while="" timeout="0" info="">
[12:22:37.619]          // if-block "!hasDormant"
[12:22:37.619]            // =>  TRUE
[12:22:37.619]          <block atomic="false" info="">
[12:22:37.619]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:22:37.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:22:37.619]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:22:37.629]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:22:37.629]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:22:37.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:22:37.629]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:22:37.629]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:22:37.629]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:22:37.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:22:37.629]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:22:37.629]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:22:37.629]          </block>
[12:22:37.629]          // end if-block "!hasDormant"
[12:22:37.629]        </control>
[12:22:37.629]        // end if-block "isSWJ"
[12:22:37.629]      </control>
[12:22:37.629]      <control if="!isSWJ" while="" timeout="0" info="">
[12:22:37.629]        // if-block "!isSWJ"
[12:22:37.629]          // =>  FALSE
[12:22:37.629]        // skip if-block "!isSWJ"
[12:22:37.629]      </control>
[12:22:37.629]      <block atomic="false" info="">
[12:22:37.629]        ReadDP(0x0);
[12:22:37.629]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:22:37.629]      </block>
[12:22:37.639]      // end if-block "protType == 2"
[12:22:37.639]    </control>
[12:22:37.639]  </sequence>
[12:22:37.639]  
[12:22:37.639]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:22:37.639]  
[12:22:37.639]  <debugvars>
[12:22:37.639]    // Pre-defined
[12:22:37.639]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:22:37.639]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:22:37.639]    __dp=0x00000000
[12:22:37.639]    __ap=0x00000000
[12:22:37.639]    __traceout=0x00000000      (Trace Disabled)
[12:22:37.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:22:37.639]    __FlashAddr=0x00000000
[12:22:37.639]    __FlashLen=0x00000000
[12:22:37.639]    __FlashArg=0x00000000
[12:22:37.639]    __FlashOp=0x00000000
[12:22:37.639]    __Result=0x00000000
[12:22:37.639]  </debugvars>
[12:22:37.639]  
[12:22:37.639]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:22:37.639]    <block atomic="false" info="">
[12:22:37.639]      __var SW_DP_ABORT       = 0x0;
[12:22:37.639]        // -> [SW_DP_ABORT <= 0x00000000]
[12:22:37.639]      __var DP_CTRL_STAT      = 0x4;
[12:22:37.639]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:22:37.639]      __var DP_SELECT         = 0x8;
[12:22:37.639]        // -> [DP_SELECT <= 0x00000008]
[12:22:37.639]      __var powered_down      = 0;
[12:22:37.639]        // -> [powered_down <= 0x00000000]
[12:22:37.639]      WriteDP(DP_SELECT, 0x00000000);
[12:22:37.639]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:22:37.639]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:22:37.649]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:22:37.649]        // -> [powered_down <= 0x00000001]
[12:22:37.649]    </block>
[12:22:37.649]    <control if="powered_down" while="" timeout="0" info="">
[12:22:37.649]      // if-block "powered_down"
[12:22:37.649]        // =>  TRUE
[12:22:37.649]      <block atomic="false" info="">
[12:22:37.649]        Message(0, "Debug/System power-up request sent");
[12:22:37.649]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:22:37.649]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:22:37.649]      </block>
[12:22:37.649]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:22:37.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:22:37.649]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:22:37.649]        // while-condition  =>  FALSE
[12:22:37.649]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:22:37.649]      </control>
[12:22:37.649]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:22:37.649]        // if-block "(__protocol & 0xFFFF) == 1"
[12:22:37.649]          // =>  FALSE
[12:22:37.649]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:22:37.649]      </control>
[12:22:37.649]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:22:37.649]        // if-block "(__protocol & 0xFFFF) == 2"
[12:22:37.649]          // =>  TRUE
[12:22:37.649]        <block atomic="false" info="">
[12:22:37.649]          Message(0, "executing SWD power up");
[12:22:37.649]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:22:37.659]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:22:37.659]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:22:37.659]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:22:37.659]        </block>
[12:22:37.659]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:22:37.659]      </control>
[12:22:37.659]      // end if-block "powered_down"
[12:22:37.659]    </control>
[12:22:37.659]    <block atomic="false" info="">
[12:22:37.659]      __var DEBUG_PORT_VAL    = 0;
[12:22:37.659]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:22:37.659]      __var ACCESS_POINT_VAL  = 0;
[12:22:37.659]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:22:37.659]      __ap = 1; 
[12:22:37.659]        // -> [__ap <= 0x00000001]
[12:22:37.659]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:22:37.659]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:22:37.659]      __ap = 4;
[12:22:37.659]        // -> [__ap <= 0x00000004]
[12:22:37.659]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:22:37.669]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:22:37.669]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:22:37.669]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:22:37.669]    </block>
[12:22:37.669]    <block atomic="false" info="">
[12:22:37.669]      __var nReset = 0x80;
[12:22:37.669]        // -> [nReset <= 0x00000080]
[12:22:37.669]      __var canReadPins = 0;
[12:22:37.669]        // -> [canReadPins <= 0x00000000]
[12:22:37.669]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:22:37.669]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:22:37.669]        // -> [canReadPins <= 0x00000001]
[12:22:37.669]    </block>
[12:22:37.669]    <control if="" while="1" timeout="200" info="">
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.669]      // while "1"  (timeout="200")
[12:22:37.669]      // while-condition  =>  TRUE
[12:22:37.679]      // while "1"  (timeout="200")
[12:22:37.679]      // while  =>  TIMEOUT
[12:22:37.679]      // end while "1"
[12:22:37.679]    </control>
[12:22:37.679]    <control if="canReadPins" while="" timeout="0" info="">
[12:22:37.679]      // if-block "canReadPins"
[12:22:37.679]        // =>  TRUE
[12:22:37.679]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:22:37.679]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:22:37.679]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:22:37.679]        // while-condition  =>  FALSE
[12:22:37.679]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:22:37.679]      </control>
[12:22:37.679]      // end if-block "canReadPins"
[12:22:37.679]    </control>
[12:22:37.679]    <control if="!canReadPins" while="" timeout="0" info="">
[12:22:37.679]      // if-block "!canReadPins"
[12:22:37.679]        // =>  FALSE
[12:22:37.679]      // skip if-block "!canReadPins"
[12:22:37.679]    </control>
[12:22:37.679]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:22:37.679]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:22:37.679]        // =>  TRUE
[12:22:37.679]      <block atomic="false" info="">
[12:22:37.679]        WriteAP(0x00, 0x190008);
[12:22:37.684]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:22:37.684]        WriteAP(0xF0, 0x01);
[12:22:37.688]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:22:37.688]      </block>
[12:22:37.688]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:22:37.688]    </control>
[12:22:37.688]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:22:37.688]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:22:37.688]        // =>  FALSE
[12:22:37.688]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:22:37.689]    </control>
[12:22:37.689]    <block atomic="false" info="">
[12:22:37.689]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:22:37.689]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:22:37.689]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:22:37.689]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:22:37.689]      __ap = 0; //lets make sure we reset the access point selection
[12:22:37.689]        // -> [__ap <= 0x00000000]
[12:22:37.689]    </block>
[12:22:37.689]  </sequence>
[12:22:37.689]  
[12:22:37.709]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:22:37.709]  
[12:22:37.709]  <debugvars>
[12:22:37.709]    // Pre-defined
[12:22:37.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:22:37.709]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:22:37.709]    __dp=0x00000000
[12:22:37.709]    __ap=0x00000000
[12:22:37.709]    __traceout=0x00000000      (Trace Disabled)
[12:22:37.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:22:37.709]    __FlashAddr=0x00000000
[12:22:37.709]    __FlashLen=0x00000000
[12:22:37.709]    __FlashArg=0x00000000
[12:22:37.709]    __FlashOp=0x00000000
[12:22:37.709]    __Result=0x00000000
[12:22:37.709]  </debugvars>
[12:22:37.719]  
[12:22:37.719]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:22:37.719]    <block atomic="false" info="">
[12:22:37.719]      __var deviceID = 0;
[12:22:37.719]        // -> [deviceID <= 0x00000000]
[12:22:37.719]      __var version = 0;
[12:22:37.719]        // -> [version <= 0x00000000]
[12:22:37.719]      __var partNum = 0;
[12:22:37.719]        // -> [partNum <= 0x00000000]
[12:22:37.719]      __var manuf = 0;
[12:22:37.719]        // -> [manuf <= 0x00000000]
[12:22:37.719]      __var isMSPM0G1X0X_G3X0X = 0;
[12:22:37.719]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:22:37.719]      __var isProduction = 0;
[12:22:37.719]        // -> [isProduction <= 0x00000000]
[12:22:37.719]      __var continueId = 0;
[12:22:37.719]        // -> [continueId <= 0x00000000]
[12:22:37.719]      deviceID =   Read32(0x41C40004);
[12:22:37.719]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:22:37.719]        // -> [deviceID <= 0x2BB8802F]
[12:22:37.719]      version = deviceID >> 28;
[12:22:37.719]        // -> [version <= 0x00000002]
[12:22:37.719]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:22:37.719]        // -> [partNum <= 0x0000BB88]
[12:22:37.719]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:22:37.719]        // -> [manuf <= 0x00000017]
[12:22:37.719]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:22:37.719]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:22:37.719]      isProduction = (version > 0);
[12:22:37.719]        // -> [isProduction <= 0x00000001]
[12:22:37.719]    </block>
[12:22:37.719]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:22:37.719]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:22:37.719]        // =>  FALSE
[12:22:37.719]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:22:37.719]    </control>
[12:22:37.719]    <control if="continueId == 4" while="" timeout="0" info="">
[12:22:37.719]      // if-block "continueId == 4"
[12:22:37.719]        // =>  FALSE
[12:22:37.719]      // skip if-block "continueId == 4"
[12:22:37.719]    </control>
[12:22:37.719]    <control if="!isProduction" while="" timeout="0" info="">
[12:22:37.719]      // if-block "!isProduction"
[12:22:37.719]        // =>  FALSE
[12:22:37.719]      // skip if-block "!isProduction"
[12:22:37.719]    </control>
[12:22:37.719]  </sequence>
[12:22:37.719]  
[12:23:32.417]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:23:32.417]  
[12:23:32.430]  <debugvars>
[12:23:32.430]    // Pre-defined
[12:23:32.430]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:23:32.430]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:23:32.430]    __dp=0x00000000
[12:23:32.430]    __ap=0x00000000
[12:23:32.430]    __traceout=0x00000000      (Trace Disabled)
[12:23:32.430]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:23:32.430]    __FlashAddr=0x00000000
[12:23:32.430]    __FlashLen=0x00000000
[12:23:32.430]    __FlashArg=0x00000000
[12:23:32.430]    __FlashOp=0x00000000
[12:23:32.430]    __Result=0x00000000
[12:23:32.430]  </debugvars>
[12:23:32.430]  
[12:23:32.430]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:23:32.430]    <block atomic="false" info="">
[12:23:32.430]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:23:32.430]        // -> [isSWJ <= 0x00000001]
[12:23:32.430]      __var hasDormant = __protocol & 0x00020000;
[12:23:32.430]        // -> [hasDormant <= 0x00000000]
[12:23:32.430]      __var protType   = __protocol & 0x0000FFFF;
[12:23:32.430]        // -> [protType <= 0x00000002]
[12:23:32.430]    </block>
[12:23:32.430]    <control if="protType == 1" while="" timeout="0" info="">
[12:23:32.430]      // if-block "protType == 1"
[12:23:32.430]        // =>  FALSE
[12:23:32.430]      // skip if-block "protType == 1"
[12:23:32.430]    </control>
[12:23:32.430]    <control if="protType == 2" while="" timeout="0" info="">
[12:23:32.430]      // if-block "protType == 2"
[12:23:32.430]        // =>  TRUE
[12:23:32.430]      <control if="isSWJ" while="" timeout="0" info="">
[12:23:32.430]        // if-block "isSWJ"
[12:23:32.430]          // =>  TRUE
[12:23:32.430]        <control if="hasDormant" while="" timeout="0" info="">
[12:23:32.430]          // if-block "hasDormant"
[12:23:32.430]            // =>  FALSE
[12:23:32.430]          // skip if-block "hasDormant"
[12:23:32.430]        </control>
[12:23:32.430]        <control if="!hasDormant" while="" timeout="0" info="">
[12:23:32.430]          // if-block "!hasDormant"
[12:23:32.430]            // =>  TRUE
[12:23:32.430]          <block atomic="false" info="">
[12:23:32.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:23:32.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:23:32.430]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:23:32.437]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:23:32.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:23:32.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:23:32.437]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:23:32.437]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:23:32.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:23:32.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:23:32.437]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:23:32.437]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:23:32.437]          </block>
[12:23:32.437]          // end if-block "!hasDormant"
[12:23:32.437]        </control>
[12:23:32.437]        // end if-block "isSWJ"
[12:23:32.437]      </control>
[12:23:32.437]      <control if="!isSWJ" while="" timeout="0" info="">
[12:23:32.437]        // if-block "!isSWJ"
[12:23:32.437]          // =>  FALSE
[12:23:32.437]        // skip if-block "!isSWJ"
[12:23:32.437]      </control>
[12:23:32.437]      <block atomic="false" info="">
[12:23:32.437]        ReadDP(0x0);
[12:23:32.437]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:23:32.437]      </block>
[12:23:32.437]      // end if-block "protType == 2"
[12:23:32.437]    </control>
[12:23:32.437]  </sequence>
[12:23:32.437]  
[12:23:32.447]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:23:32.447]  
[12:23:32.447]  <debugvars>
[12:23:32.447]    // Pre-defined
[12:23:32.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:23:32.447]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:23:32.447]    __dp=0x00000000
[12:23:32.447]    __ap=0x00000000
[12:23:32.447]    __traceout=0x00000000      (Trace Disabled)
[12:23:32.447]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:23:32.447]    __FlashAddr=0x00000000
[12:23:32.447]    __FlashLen=0x00000000
[12:23:32.447]    __FlashArg=0x00000000
[12:23:32.447]    __FlashOp=0x00000000
[12:23:32.447]    __Result=0x00000000
[12:23:32.447]  </debugvars>
[12:23:32.447]  
[12:23:32.447]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:23:32.447]    <block atomic="false" info="">
[12:23:32.447]      __var SW_DP_ABORT       = 0x0;
[12:23:32.447]        // -> [SW_DP_ABORT <= 0x00000000]
[12:23:32.447]      __var DP_CTRL_STAT      = 0x4;
[12:23:32.447]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:23:32.447]      __var DP_SELECT         = 0x8;
[12:23:32.447]        // -> [DP_SELECT <= 0x00000008]
[12:23:32.447]      __var powered_down      = 0;
[12:23:32.447]        // -> [powered_down <= 0x00000000]
[12:23:32.447]      WriteDP(DP_SELECT, 0x00000000);
[12:23:32.447]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:23:32.447]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:23:32.447]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:23:32.447]        // -> [powered_down <= 0x00000001]
[12:23:32.447]    </block>
[12:23:32.447]    <control if="powered_down" while="" timeout="0" info="">
[12:23:32.447]      // if-block "powered_down"
[12:23:32.447]        // =>  TRUE
[12:23:32.447]      <block atomic="false" info="">
[12:23:32.447]        Message(0, "Debug/System power-up request sent");
[12:23:32.457]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:23:32.457]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:23:32.457]      </block>
[12:23:32.457]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:23:32.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:23:32.457]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:23:32.457]        // while-condition  =>  FALSE
[12:23:32.457]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:23:32.457]      </control>
[12:23:32.457]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:23:32.457]        // if-block "(__protocol & 0xFFFF) == 1"
[12:23:32.457]          // =>  FALSE
[12:23:32.457]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:23:32.457]      </control>
[12:23:32.457]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:23:32.457]        // if-block "(__protocol & 0xFFFF) == 2"
[12:23:32.457]          // =>  TRUE
[12:23:32.457]        <block atomic="false" info="">
[12:23:32.457]          Message(0, "executing SWD power up");
[12:23:32.457]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:23:32.457]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:23:32.457]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:23:32.467]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:23:32.467]        </block>
[12:23:32.469]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:23:32.469]      </control>
[12:23:32.469]      // end if-block "powered_down"
[12:23:32.469]    </control>
[12:23:32.469]    <block atomic="false" info="">
[12:23:32.469]      __var DEBUG_PORT_VAL    = 0;
[12:23:32.469]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:23:32.469]      __var ACCESS_POINT_VAL  = 0;
[12:23:32.469]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:23:32.469]      __ap = 1; 
[12:23:32.469]        // -> [__ap <= 0x00000001]
[12:23:32.469]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:23:32.469]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:23:32.469]      __ap = 4;
[12:23:32.469]        // -> [__ap <= 0x00000004]
[12:23:32.469]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:23:32.478]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:23:32.478]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:23:32.478]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:23:32.478]    </block>
[12:23:32.478]    <block atomic="false" info="">
[12:23:32.478]      __var nReset = 0x80;
[12:23:32.478]        // -> [nReset <= 0x00000080]
[12:23:32.478]      __var canReadPins = 0;
[12:23:32.478]        // -> [canReadPins <= 0x00000000]
[12:23:32.478]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:23:32.488]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:23:32.488]        // -> [canReadPins <= 0x00000001]
[12:23:32.488]    </block>
[12:23:32.488]    <control if="" while="1" timeout="200" info="">
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.488]      // while-condition  =>  TRUE
[12:23:32.488]      // while "1"  (timeout="200")
[12:23:32.498]      // while-condition  =>  TRUE
[12:23:32.498]      // while "1"  (timeout="200")
[12:23:32.498]      // while  =>  TIMEOUT
[12:23:32.498]      // end while "1"
[12:23:32.498]    </control>
[12:23:32.498]    <control if="canReadPins" while="" timeout="0" info="">
[12:23:32.498]      // if-block "canReadPins"
[12:23:32.498]        // =>  TRUE
[12:23:32.498]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:23:32.498]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:23:32.498]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:23:32.498]        // while-condition  =>  FALSE
[12:23:32.498]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:23:32.498]      </control>
[12:23:32.498]      // end if-block "canReadPins"
[12:23:32.498]    </control>
[12:23:32.498]    <control if="!canReadPins" while="" timeout="0" info="">
[12:23:32.498]      // if-block "!canReadPins"
[12:23:32.498]        // =>  FALSE
[12:23:32.498]      // skip if-block "!canReadPins"
[12:23:32.498]    </control>
[12:23:32.498]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:23:32.498]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:23:32.498]        // =>  TRUE
[12:23:32.498]      <block atomic="false" info="">
[12:23:32.498]        WriteAP(0x00, 0x190008);
[12:23:32.498]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:23:32.498]        WriteAP(0xF0, 0x01);
[12:23:32.508]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:23:32.508]      </block>
[12:23:32.508]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:23:32.508]    </control>
[12:23:32.508]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:23:32.508]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:23:32.508]        // =>  FALSE
[12:23:32.508]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:23:32.508]    </control>
[12:23:32.508]    <block atomic="false" info="">
[12:23:32.508]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:23:32.508]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:23:32.508]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:23:32.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:23:32.508]      __ap = 0; //lets make sure we reset the access point selection
[12:23:32.508]        // -> [__ap <= 0x00000000]
[12:23:32.518]    </block>
[12:23:32.518]  </sequence>
[12:23:32.518]  
[12:23:32.540]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:23:32.540]  
[12:23:32.540]  <debugvars>
[12:23:32.540]    // Pre-defined
[12:23:32.540]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:23:32.541]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:23:32.541]    __dp=0x00000000
[12:23:32.541]    __ap=0x00000000
[12:23:32.541]    __traceout=0x00000000      (Trace Disabled)
[12:23:32.541]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:23:32.541]    __FlashAddr=0x00000000
[12:23:32.541]    __FlashLen=0x00000000
[12:23:32.541]    __FlashArg=0x00000000
[12:23:32.541]    __FlashOp=0x00000000
[12:23:32.541]    __Result=0x00000000
[12:23:32.541]  </debugvars>
[12:23:32.541]  
[12:23:32.541]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:23:32.541]    <block atomic="false" info="">
[12:23:32.541]      __var deviceID = 0;
[12:23:32.543]        // -> [deviceID <= 0x00000000]
[12:23:32.543]      __var version = 0;
[12:23:32.543]        // -> [version <= 0x00000000]
[12:23:32.543]      __var partNum = 0;
[12:23:32.543]        // -> [partNum <= 0x00000000]
[12:23:32.543]      __var manuf = 0;
[12:23:32.543]        // -> [manuf <= 0x00000000]
[12:23:32.543]      __var isMSPM0G1X0X_G3X0X = 0;
[12:23:32.543]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:23:32.543]      __var isProduction = 0;
[12:23:32.543]        // -> [isProduction <= 0x00000000]
[12:23:32.543]      __var continueId = 0;
[12:23:32.544]        // -> [continueId <= 0x00000000]
[12:23:32.544]      deviceID =   Read32(0x41C40004);
[12:23:32.549]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:23:32.549]        // -> [deviceID <= 0x2BB8802F]
[12:23:32.549]      version = deviceID >> 28;
[12:23:32.549]        // -> [version <= 0x00000002]
[12:23:32.549]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:23:32.549]        // -> [partNum <= 0x0000BB88]
[12:23:32.549]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:23:32.549]        // -> [manuf <= 0x00000017]
[12:23:32.549]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:23:32.549]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:23:32.549]      isProduction = (version > 0);
[12:23:32.549]        // -> [isProduction <= 0x00000001]
[12:23:32.549]    </block>
[12:23:32.549]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:23:32.549]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:23:32.549]        // =>  FALSE
[12:23:32.549]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:23:32.549]    </control>
[12:23:32.549]    <control if="continueId == 4" while="" timeout="0" info="">
[12:23:32.550]      // if-block "continueId == 4"
[12:23:32.550]        // =>  FALSE
[12:23:32.550]      // skip if-block "continueId == 4"
[12:23:32.550]    </control>
[12:23:32.550]    <control if="!isProduction" while="" timeout="0" info="">
[12:23:32.550]      // if-block "!isProduction"
[12:23:32.550]        // =>  FALSE
[12:23:32.550]      // skip if-block "!isProduction"
[12:23:32.550]    </control>
[12:23:32.550]  </sequence>
[12:23:32.550]  
[12:23:37.583]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:23:37.583]  
[12:23:37.595]  <debugvars>
[12:23:37.595]    // Pre-defined
[12:23:37.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:23:37.595]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:23:37.595]    __dp=0x00000000
[12:23:37.595]    __ap=0x00000000
[12:23:37.595]    __traceout=0x00000000      (Trace Disabled)
[12:23:37.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:23:37.595]    __FlashAddr=0x00000000
[12:23:37.595]    __FlashLen=0x00000000
[12:23:37.595]    __FlashArg=0x00000000
[12:23:37.595]    __FlashOp=0x00000000
[12:23:37.595]    __Result=0x00000000
[12:23:37.595]  </debugvars>
[12:23:37.595]  
[12:23:37.595]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:23:37.595]    <block atomic="false" info="">
[12:23:37.595]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:23:37.595]        // -> [isSWJ <= 0x00000001]
[12:23:37.595]      __var hasDormant = __protocol & 0x00020000;
[12:23:37.595]        // -> [hasDormant <= 0x00000000]
[12:23:37.595]      __var protType   = __protocol & 0x0000FFFF;
[12:23:37.595]        // -> [protType <= 0x00000002]
[12:23:37.595]    </block>
[12:23:37.595]    <control if="protType == 1" while="" timeout="0" info="">
[12:23:37.595]      // if-block "protType == 1"
[12:23:37.595]        // =>  FALSE
[12:23:37.595]      // skip if-block "protType == 1"
[12:23:37.595]    </control>
[12:23:37.595]    <control if="protType == 2" while="" timeout="0" info="">
[12:23:37.595]      // if-block "protType == 2"
[12:23:37.595]        // =>  TRUE
[12:23:37.595]      <control if="isSWJ" while="" timeout="0" info="">
[12:23:37.595]        // if-block "isSWJ"
[12:23:37.595]          // =>  TRUE
[12:23:37.595]        <control if="hasDormant" while="" timeout="0" info="">
[12:23:37.595]          // if-block "hasDormant"
[12:23:37.595]            // =>  FALSE
[12:23:37.595]          // skip if-block "hasDormant"
[12:23:37.595]        </control>
[12:23:37.595]        <control if="!hasDormant" while="" timeout="0" info="">
[12:23:37.595]          // if-block "!hasDormant"
[12:23:37.595]            // =>  TRUE
[12:23:37.595]          <block atomic="false" info="">
[12:23:37.595]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:23:37.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:23:37.605]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:23:37.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:23:37.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:23:37.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:23:37.605]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:23:37.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:23:37.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:23:37.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:23:37.605]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:23:37.613]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:23:37.613]          </block>
[12:23:37.613]          // end if-block "!hasDormant"
[12:23:37.613]        </control>
[12:23:37.613]        // end if-block "isSWJ"
[12:23:37.613]      </control>
[12:23:37.613]      <control if="!isSWJ" while="" timeout="0" info="">
[12:23:37.613]        // if-block "!isSWJ"
[12:23:37.613]          // =>  FALSE
[12:23:37.613]        // skip if-block "!isSWJ"
[12:23:37.613]      </control>
[12:23:37.613]      <block atomic="false" info="">
[12:23:37.613]        ReadDP(0x0);
[12:23:37.613]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:23:37.613]      </block>
[12:23:37.613]      // end if-block "protType == 2"
[12:23:37.613]    </control>
[12:23:37.613]  </sequence>
[12:23:37.613]  
[12:23:37.613]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:23:37.613]  
[12:23:37.613]  <debugvars>
[12:23:37.613]    // Pre-defined
[12:23:37.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:23:37.613]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:23:37.613]    __dp=0x00000000
[12:23:37.613]    __ap=0x00000000
[12:23:37.613]    __traceout=0x00000000      (Trace Disabled)
[12:23:37.613]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:23:37.613]    __FlashAddr=0x00000000
[12:23:37.613]    __FlashLen=0x00000000
[12:23:37.613]    __FlashArg=0x00000000
[12:23:37.613]    __FlashOp=0x00000000
[12:23:37.613]    __Result=0x00000000
[12:23:37.613]  </debugvars>
[12:23:37.613]  
[12:23:37.613]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:23:37.613]    <block atomic="false" info="">
[12:23:37.613]      __var SW_DP_ABORT       = 0x0;
[12:23:37.613]        // -> [SW_DP_ABORT <= 0x00000000]
[12:23:37.613]      __var DP_CTRL_STAT      = 0x4;
[12:23:37.613]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:23:37.613]      __var DP_SELECT         = 0x8;
[12:23:37.613]        // -> [DP_SELECT <= 0x00000008]
[12:23:37.613]      __var powered_down      = 0;
[12:23:37.613]        // -> [powered_down <= 0x00000000]
[12:23:37.613]      WriteDP(DP_SELECT, 0x00000000);
[12:23:37.623]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:23:37.623]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:23:37.623]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:23:37.623]        // -> [powered_down <= 0x00000001]
[12:23:37.623]    </block>
[12:23:37.623]    <control if="powered_down" while="" timeout="0" info="">
[12:23:37.623]      // if-block "powered_down"
[12:23:37.623]        // =>  TRUE
[12:23:37.623]      <block atomic="false" info="">
[12:23:37.623]        Message(0, "Debug/System power-up request sent");
[12:23:37.623]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:23:37.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:23:37.623]      </block>
[12:23:37.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:23:37.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:23:37.623]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:23:37.623]        // while-condition  =>  FALSE
[12:23:37.623]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:23:37.623]      </control>
[12:23:37.623]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:23:37.623]        // if-block "(__protocol & 0xFFFF) == 1"
[12:23:37.623]          // =>  FALSE
[12:23:37.623]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:23:37.623]      </control>
[12:23:37.623]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:23:37.623]        // if-block "(__protocol & 0xFFFF) == 2"
[12:23:37.623]          // =>  TRUE
[12:23:37.623]        <block atomic="false" info="">
[12:23:37.623]          Message(0, "executing SWD power up");
[12:23:37.635]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:23:37.635]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:23:37.635]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:23:37.635]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:23:37.635]        </block>
[12:23:37.635]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:23:37.635]      </control>
[12:23:37.635]      // end if-block "powered_down"
[12:23:37.635]    </control>
[12:23:37.635]    <block atomic="false" info="">
[12:23:37.635]      __var DEBUG_PORT_VAL    = 0;
[12:23:37.644]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:23:37.644]      __var ACCESS_POINT_VAL  = 0;
[12:23:37.644]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:23:37.644]      __ap = 1; 
[12:23:37.644]        // -> [__ap <= 0x00000001]
[12:23:37.644]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:23:37.647]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:23:37.648]      __ap = 4;
[12:23:37.648]        // -> [__ap <= 0x00000004]
[12:23:37.648]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:23:37.650]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:23:37.650]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:23:37.650]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:23:37.652]    </block>
[12:23:37.652]    <block atomic="false" info="">
[12:23:37.652]      __var nReset = 0x80;
[12:23:37.652]        // -> [nReset <= 0x00000080]
[12:23:37.652]      __var canReadPins = 0;
[12:23:37.652]        // -> [canReadPins <= 0x00000000]
[12:23:37.652]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:23:37.654]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:23:37.655]        // -> [canReadPins <= 0x00000001]
[12:23:37.655]    </block>
[12:23:37.655]    <control if="" while="1" timeout="200" info="">
[12:23:37.655]      // while "1"  (timeout="200")
[12:23:37.655]      // while-condition  =>  TRUE
[12:23:37.655]      // while "1"  (timeout="200")
[12:23:37.655]      // while-condition  =>  TRUE
[12:23:37.655]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.656]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.656]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.656]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.656]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.656]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.656]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.656]      // while "1"  (timeout="200")
[12:23:37.656]      // while-condition  =>  TRUE
[12:23:37.658]      // while "1"  (timeout="200")
[12:23:37.658]      // while-condition  =>  TRUE
[12:23:37.658]      // while "1"  (timeout="200")
[12:23:37.658]      // while-condition  =>  TRUE
[12:23:37.658]      // while "1"  (timeout="200")
[12:23:37.658]      // while-condition  =>  TRUE
[12:23:37.658]      // while "1"  (timeout="200")
[12:23:37.658]      // while-condition  =>  TRUE
[12:23:37.658]      // while "1"  (timeout="200")
[12:23:37.658]      // while-condition  =>  TRUE
[12:23:37.658]      // while "1"  (timeout="200")
[12:23:37.658]      // while-condition  =>  TRUE
[12:23:37.658]      // while "1"  (timeout="200")
[12:23:37.658]      // while-condition  =>  TRUE
[12:23:37.659]      // while "1"  (timeout="200")
[12:23:37.659]      // while-condition  =>  TRUE
[12:23:37.659]      // while "1"  (timeout="200")
[12:23:37.659]      // while-condition  =>  TRUE
[12:23:37.659]      // while "1"  (timeout="200")
[12:23:37.659]      // while-condition  =>  TRUE
[12:23:37.659]      // while "1"  (timeout="200")
[12:23:37.659]      // while-condition  =>  TRUE
[12:23:37.659]      // while "1"  (timeout="200")
[12:23:37.659]      // while-condition  =>  TRUE
[12:23:37.659]      // while "1"  (timeout="200")
[12:23:37.660]      // while-condition  =>  TRUE
[12:23:37.660]      // while "1"  (timeout="200")
[12:23:37.660]      // while-condition  =>  TRUE
[12:23:37.660]      // while "1"  (timeout="200")
[12:23:37.660]      // while-condition  =>  TRUE
[12:23:37.660]      // while "1"  (timeout="200")
[12:23:37.660]      // while-condition  =>  TRUE
[12:23:37.660]      // while "1"  (timeout="200")
[12:23:37.660]      // while-condition  =>  TRUE
[12:23:37.660]      // while "1"  (timeout="200")
[12:23:37.660]      // while-condition  =>  TRUE
[12:23:37.660]      // while "1"  (timeout="200")
[12:23:37.660]      // while-condition  =>  TRUE
[12:23:37.662]      // while "1"  (timeout="200")
[12:23:37.662]      // while-condition  =>  TRUE
[12:23:37.662]      // while "1"  (timeout="200")
[12:23:37.662]      // while-condition  =>  TRUE
[12:23:37.662]      // while "1"  (timeout="200")
[12:23:37.662]      // while-condition  =>  TRUE
[12:23:37.662]      // while "1"  (timeout="200")
[12:23:37.662]      // while-condition  =>  TRUE
[12:23:37.662]      // while "1"  (timeout="200")
[12:23:37.662]      // while-condition  =>  TRUE
[12:23:37.662]      // while "1"  (timeout="200")
[12:23:37.662]      // while-condition  =>  TRUE
[12:23:37.662]      // while "1"  (timeout="200")
[12:23:37.663]      // while-condition  =>  TRUE
[12:23:37.663]      // while "1"  (timeout="200")
[12:23:37.663]      // while  =>  TIMEOUT
[12:23:37.663]      // end while "1"
[12:23:37.663]    </control>
[12:23:37.663]    <control if="canReadPins" while="" timeout="0" info="">
[12:23:37.663]      // if-block "canReadPins"
[12:23:37.663]        // =>  TRUE
[12:23:37.663]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:23:37.663]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:23:37.664]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:23:37.664]        // while-condition  =>  FALSE
[12:23:37.664]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:23:37.664]      </control>
[12:23:37.664]      // end if-block "canReadPins"
[12:23:37.664]    </control>
[12:23:37.664]    <control if="!canReadPins" while="" timeout="0" info="">
[12:23:37.664]      // if-block "!canReadPins"
[12:23:37.664]        // =>  FALSE
[12:23:37.664]      // skip if-block "!canReadPins"
[12:23:37.664]    </control>
[12:23:37.664]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:23:37.664]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:23:37.664]        // =>  TRUE
[12:23:37.666]      <block atomic="false" info="">
[12:23:37.666]        WriteAP(0x00, 0x190008);
[12:23:37.668]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:23:37.668]        WriteAP(0xF0, 0x01);
[12:23:37.671]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:23:37.671]      </block>
[12:23:37.671]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:23:37.671]    </control>
[12:23:37.671]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:23:37.671]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:23:37.671]        // =>  FALSE
[12:23:37.671]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:23:37.671]    </control>
[12:23:37.671]    <block atomic="false" info="">
[12:23:37.671]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:23:37.676]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:23:37.676]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:23:37.676]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:23:37.677]      __ap = 0; //lets make sure we reset the access point selection
[12:23:37.677]        // -> [__ap <= 0x00000000]
[12:23:37.677]    </block>
[12:23:37.677]  </sequence>
[12:23:37.677]  
[12:23:37.697]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:23:37.697]  
[12:23:37.697]  <debugvars>
[12:23:37.697]    // Pre-defined
[12:23:37.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:23:37.697]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:23:37.697]    __dp=0x00000000
[12:23:37.697]    __ap=0x00000000
[12:23:37.697]    __traceout=0x00000000      (Trace Disabled)
[12:23:37.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:23:37.697]    __FlashAddr=0x00000000
[12:23:37.697]    __FlashLen=0x00000000
[12:23:37.697]    __FlashArg=0x00000000
[12:23:37.697]    __FlashOp=0x00000000
[12:23:37.697]    __Result=0x00000000
[12:23:37.697]  </debugvars>
[12:23:37.697]  
[12:23:37.697]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:23:37.697]    <block atomic="false" info="">
[12:23:37.697]      __var deviceID = 0;
[12:23:37.697]        // -> [deviceID <= 0x00000000]
[12:23:37.697]      __var version = 0;
[12:23:37.697]        // -> [version <= 0x00000000]
[12:23:37.697]      __var partNum = 0;
[12:23:37.697]        // -> [partNum <= 0x00000000]
[12:23:37.697]      __var manuf = 0;
[12:23:37.697]        // -> [manuf <= 0x00000000]
[12:23:37.705]      __var isMSPM0G1X0X_G3X0X = 0;
[12:23:37.705]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:23:37.705]      __var isProduction = 0;
[12:23:37.705]        // -> [isProduction <= 0x00000000]
[12:23:37.705]      __var continueId = 0;
[12:23:37.705]        // -> [continueId <= 0x00000000]
[12:23:37.705]      deviceID =   Read32(0x41C40004);
[12:23:37.705]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:23:37.705]        // -> [deviceID <= 0x2BB8802F]
[12:23:37.705]      version = deviceID >> 28;
[12:23:37.705]        // -> [version <= 0x00000002]
[12:23:37.705]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:23:37.705]        // -> [partNum <= 0x0000BB88]
[12:23:37.705]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:23:37.705]        // -> [manuf <= 0x00000017]
[12:23:37.705]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:23:37.705]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:23:37.705]      isProduction = (version > 0);
[12:23:37.705]        // -> [isProduction <= 0x00000001]
[12:23:37.705]    </block>
[12:23:37.705]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:23:37.705]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:23:37.705]        // =>  FALSE
[12:23:37.705]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:23:37.705]    </control>
[12:23:37.705]    <control if="continueId == 4" while="" timeout="0" info="">
[12:23:37.705]      // if-block "continueId == 4"
[12:23:37.705]        // =>  FALSE
[12:23:37.705]      // skip if-block "continueId == 4"
[12:23:37.705]    </control>
[12:23:37.705]    <control if="!isProduction" while="" timeout="0" info="">
[12:23:37.705]      // if-block "!isProduction"
[12:23:37.705]        // =>  FALSE
[12:23:37.705]      // skip if-block "!isProduction"
[12:23:37.705]    </control>
[12:23:37.705]  </sequence>
[12:23:37.705]  
[12:24:03.269]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:24:03.269]  
[12:24:03.282]  <debugvars>
[12:24:03.282]    // Pre-defined
[12:24:03.282]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:03.282]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:24:03.282]    __dp=0x00000000
[12:24:03.282]    __ap=0x00000000
[12:24:03.282]    __traceout=0x00000000      (Trace Disabled)
[12:24:03.282]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:03.282]    __FlashAddr=0x00000000
[12:24:03.282]    __FlashLen=0x00000000
[12:24:03.282]    __FlashArg=0x00000000
[12:24:03.282]    __FlashOp=0x00000000
[12:24:03.282]    __Result=0x00000000
[12:24:03.282]  </debugvars>
[12:24:03.282]  
[12:24:03.282]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:24:03.282]    <block atomic="false" info="">
[12:24:03.282]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:24:03.282]        // -> [isSWJ <= 0x00000001]
[12:24:03.282]      __var hasDormant = __protocol & 0x00020000;
[12:24:03.282]        // -> [hasDormant <= 0x00000000]
[12:24:03.282]      __var protType   = __protocol & 0x0000FFFF;
[12:24:03.282]        // -> [protType <= 0x00000002]
[12:24:03.282]    </block>
[12:24:03.282]    <control if="protType == 1" while="" timeout="0" info="">
[12:24:03.282]      // if-block "protType == 1"
[12:24:03.282]        // =>  FALSE
[12:24:03.285]      // skip if-block "protType == 1"
[12:24:03.285]    </control>
[12:24:03.285]    <control if="protType == 2" while="" timeout="0" info="">
[12:24:03.285]      // if-block "protType == 2"
[12:24:03.285]        // =>  TRUE
[12:24:03.285]      <control if="isSWJ" while="" timeout="0" info="">
[12:24:03.285]        // if-block "isSWJ"
[12:24:03.285]          // =>  TRUE
[12:24:03.285]        <control if="hasDormant" while="" timeout="0" info="">
[12:24:03.285]          // if-block "hasDormant"
[12:24:03.285]            // =>  FALSE
[12:24:03.285]          // skip if-block "hasDormant"
[12:24:03.285]        </control>
[12:24:03.285]        <control if="!hasDormant" while="" timeout="0" info="">
[12:24:03.285]          // if-block "!hasDormant"
[12:24:03.285]            // =>  TRUE
[12:24:03.285]          <block atomic="false" info="">
[12:24:03.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:24:03.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:03.285]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:24:03.289]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:24:03.289]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:24:03.289]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:03.289]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:24:03.289]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:24:03.289]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:24:03.289]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:03.289]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:24:03.295]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:24:03.295]          </block>
[12:24:03.295]          // end if-block "!hasDormant"
[12:24:03.295]        </control>
[12:24:03.295]        // end if-block "isSWJ"
[12:24:03.295]      </control>
[12:24:03.295]      <control if="!isSWJ" while="" timeout="0" info="">
[12:24:03.295]        // if-block "!isSWJ"
[12:24:03.295]          // =>  FALSE
[12:24:03.295]        // skip if-block "!isSWJ"
[12:24:03.295]      </control>
[12:24:03.295]      <block atomic="false" info="">
[12:24:03.295]        ReadDP(0x0);
[12:24:03.298]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:24:03.298]      </block>
[12:24:03.298]      // end if-block "protType == 2"
[12:24:03.298]    </control>
[12:24:03.298]  </sequence>
[12:24:03.298]  
[12:24:03.299]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:24:03.299]  
[12:24:03.299]  <debugvars>
[12:24:03.299]    // Pre-defined
[12:24:03.299]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:03.299]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:24:03.299]    __dp=0x00000000
[12:24:03.299]    __ap=0x00000000
[12:24:03.299]    __traceout=0x00000000      (Trace Disabled)
[12:24:03.299]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:03.299]    __FlashAddr=0x00000000
[12:24:03.299]    __FlashLen=0x00000000
[12:24:03.299]    __FlashArg=0x00000000
[12:24:03.299]    __FlashOp=0x00000000
[12:24:03.299]    __Result=0x00000000
[12:24:03.299]  </debugvars>
[12:24:03.299]  
[12:24:03.299]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:24:03.299]    <block atomic="false" info="">
[12:24:03.299]      __var SW_DP_ABORT       = 0x0;
[12:24:03.299]        // -> [SW_DP_ABORT <= 0x00000000]
[12:24:03.299]      __var DP_CTRL_STAT      = 0x4;
[12:24:03.299]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:24:03.299]      __var DP_SELECT         = 0x8;
[12:24:03.299]        // -> [DP_SELECT <= 0x00000008]
[12:24:03.299]      __var powered_down      = 0;
[12:24:03.299]        // -> [powered_down <= 0x00000000]
[12:24:03.299]      WriteDP(DP_SELECT, 0x00000000);
[12:24:03.305]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:24:03.305]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:24:03.305]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:24:03.305]        // -> [powered_down <= 0x00000001]
[12:24:03.305]    </block>
[12:24:03.305]    <control if="powered_down" while="" timeout="0" info="">
[12:24:03.305]      // if-block "powered_down"
[12:24:03.305]        // =>  TRUE
[12:24:03.305]      <block atomic="false" info="">
[12:24:03.305]        Message(0, "Debug/System power-up request sent");
[12:24:03.312]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:24:03.313]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:24:03.313]      </block>
[12:24:03.313]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:24:03.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:24:03.315]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:24:03.315]        // while-condition  =>  FALSE
[12:24:03.315]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:24:03.315]      </control>
[12:24:03.315]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:24:03.315]        // if-block "(__protocol & 0xFFFF) == 1"
[12:24:03.315]          // =>  FALSE
[12:24:03.315]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:24:03.315]      </control>
[12:24:03.315]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:24:03.315]        // if-block "(__protocol & 0xFFFF) == 2"
[12:24:03.315]          // =>  TRUE
[12:24:03.315]        <block atomic="false" info="">
[12:24:03.315]          Message(0, "executing SWD power up");
[12:24:03.315]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:24:03.319]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:24:03.319]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:24:03.325]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:24:03.325]        </block>
[12:24:03.325]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:24:03.325]      </control>
[12:24:03.325]      // end if-block "powered_down"
[12:24:03.325]    </control>
[12:24:03.325]    <block atomic="false" info="">
[12:24:03.325]      __var DEBUG_PORT_VAL    = 0;
[12:24:03.325]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:24:03.325]      __var ACCESS_POINT_VAL  = 0;
[12:24:03.325]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:24:03.325]      __ap = 1; 
[12:24:03.325]        // -> [__ap <= 0x00000001]
[12:24:03.325]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:24:03.329]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:24:03.329]      __ap = 4;
[12:24:03.329]        // -> [__ap <= 0x00000004]
[12:24:03.329]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:03.329]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:24:03.329]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:24:03.329]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:03.335]    </block>
[12:24:03.335]    <block atomic="false" info="">
[12:24:03.335]      __var nReset = 0x80;
[12:24:03.335]        // -> [nReset <= 0x00000080]
[12:24:03.335]      __var canReadPins = 0;
[12:24:03.335]        // -> [canReadPins <= 0x00000000]
[12:24:03.335]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:24:03.336]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:24:03.336]        // -> [canReadPins <= 0x00000001]
[12:24:03.336]    </block>
[12:24:03.336]    <control if="" while="1" timeout="200" info="">
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.336]      // while-condition  =>  TRUE
[12:24:03.336]      // while "1"  (timeout="200")
[12:24:03.340]      // while-condition  =>  TRUE
[12:24:03.340]      // while "1"  (timeout="200")
[12:24:03.340]      // while-condition  =>  TRUE
[12:24:03.340]      // while "1"  (timeout="200")
[12:24:03.340]      // while-condition  =>  TRUE
[12:24:03.340]      // while "1"  (timeout="200")
[12:24:03.340]      // while-condition  =>  TRUE
[12:24:03.340]      // while "1"  (timeout="200")
[12:24:03.340]      // while-condition  =>  TRUE
[12:24:03.340]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.341]      // while "1"  (timeout="200")
[12:24:03.341]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.345]      // while "1"  (timeout="200")
[12:24:03.345]      // while-condition  =>  TRUE
[12:24:03.350]      // while "1"  (timeout="200")
[12:24:03.350]      // while  =>  TIMEOUT
[12:24:03.350]      // end while "1"
[12:24:03.350]    </control>
[12:24:03.351]    <control if="canReadPins" while="" timeout="0" info="">
[12:24:03.351]      // if-block "canReadPins"
[12:24:03.351]        // =>  TRUE
[12:24:03.351]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:24:03.351]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:24:03.352]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:24:03.352]        // while-condition  =>  FALSE
[12:24:03.352]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:24:03.352]      </control>
[12:24:03.352]      // end if-block "canReadPins"
[12:24:03.352]    </control>
[12:24:03.352]    <control if="!canReadPins" while="" timeout="0" info="">
[12:24:03.352]      // if-block "!canReadPins"
[12:24:03.352]        // =>  FALSE
[12:24:03.352]      // skip if-block "!canReadPins"
[12:24:03.352]    </control>
[12:24:03.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:24:03.354]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:03.354]        // =>  TRUE
[12:24:03.354]      <block atomic="false" info="">
[12:24:03.354]        WriteAP(0x00, 0x190008);
[12:24:03.357]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:03.357]        WriteAP(0xF0, 0x01);
[12:24:03.362]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:03.363]      </block>
[12:24:03.363]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:03.363]    </control>
[12:24:03.363]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:24:03.363]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:03.363]        // =>  FALSE
[12:24:03.363]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:03.363]    </control>
[12:24:03.363]    <block atomic="false" info="">
[12:24:03.363]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:03.367]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:24:03.367]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:24:03.367]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:03.368]      __ap = 0; //lets make sure we reset the access point selection
[12:24:03.368]        // -> [__ap <= 0x00000000]
[12:24:03.368]    </block>
[12:24:03.368]  </sequence>
[12:24:03.368]  
[12:24:03.385]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:24:03.385]  
[12:24:03.385]  <debugvars>
[12:24:03.385]    // Pre-defined
[12:24:03.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:03.385]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:24:03.385]    __dp=0x00000000
[12:24:03.385]    __ap=0x00000000
[12:24:03.385]    __traceout=0x00000000      (Trace Disabled)
[12:24:03.385]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:03.385]    __FlashAddr=0x00000000
[12:24:03.385]    __FlashLen=0x00000000
[12:24:03.385]    __FlashArg=0x00000000
[12:24:03.385]    __FlashOp=0x00000000
[12:24:03.385]    __Result=0x00000000
[12:24:03.385]  </debugvars>
[12:24:03.385]  
[12:24:03.391]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:24:03.391]    <block atomic="false" info="">
[12:24:03.391]      __var deviceID = 0;
[12:24:03.391]        // -> [deviceID <= 0x00000000]
[12:24:03.391]      __var version = 0;
[12:24:03.391]        // -> [version <= 0x00000000]
[12:24:03.391]      __var partNum = 0;
[12:24:03.391]        // -> [partNum <= 0x00000000]
[12:24:03.391]      __var manuf = 0;
[12:24:03.391]        // -> [manuf <= 0x00000000]
[12:24:03.391]      __var isMSPM0G1X0X_G3X0X = 0;
[12:24:03.391]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:24:03.391]      __var isProduction = 0;
[12:24:03.391]        // -> [isProduction <= 0x00000000]
[12:24:03.391]      __var continueId = 0;
[12:24:03.391]        // -> [continueId <= 0x00000000]
[12:24:03.391]      deviceID =   Read32(0x41C40004);
[12:24:03.395]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:24:03.395]        // -> [deviceID <= 0x2BB8802F]
[12:24:03.395]      version = deviceID >> 28;
[12:24:03.395]        // -> [version <= 0x00000002]
[12:24:03.395]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:24:03.395]        // -> [partNum <= 0x0000BB88]
[12:24:03.395]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:24:03.395]        // -> [manuf <= 0x00000017]
[12:24:03.395]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:24:03.395]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:24:03.395]      isProduction = (version > 0);
[12:24:03.395]        // -> [isProduction <= 0x00000001]
[12:24:03.395]    </block>
[12:24:03.395]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:24:03.395]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:24:03.395]        // =>  FALSE
[12:24:03.395]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:24:03.395]    </control>
[12:24:03.395]    <control if="continueId == 4" while="" timeout="0" info="">
[12:24:03.395]      // if-block "continueId == 4"
[12:24:03.395]        // =>  FALSE
[12:24:03.395]      // skip if-block "continueId == 4"
[12:24:03.395]    </control>
[12:24:03.395]    <control if="!isProduction" while="" timeout="0" info="">
[12:24:03.395]      // if-block "!isProduction"
[12:24:03.395]        // =>  FALSE
[12:24:03.395]      // skip if-block "!isProduction"
[12:24:03.395]    </control>
[12:24:03.395]  </sequence>
[12:24:03.395]  
[12:24:08.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:24:08.455]  
[12:24:08.455]  <debugvars>
[12:24:08.455]    // Pre-defined
[12:24:08.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:08.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:08.455]    __dp=0x00000000
[12:24:08.455]    __ap=0x00000000
[12:24:08.455]    __traceout=0x00000000      (Trace Disabled)
[12:24:08.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:08.455]    __FlashAddr=0x00000000
[12:24:08.455]    __FlashLen=0x00000000
[12:24:08.455]    __FlashArg=0x00000000
[12:24:08.455]    __FlashOp=0x00000000
[12:24:08.455]    __Result=0x00000000
[12:24:08.455]  </debugvars>
[12:24:08.455]  
[12:24:08.455]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:24:08.455]    <block atomic="false" info="">
[12:24:08.455]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:24:08.455]        // -> [isSWJ <= 0x00000001]
[12:24:08.455]      __var hasDormant = __protocol & 0x00020000;
[12:24:08.455]        // -> [hasDormant <= 0x00000000]
[12:24:08.455]      __var protType   = __protocol & 0x0000FFFF;
[12:24:08.455]        // -> [protType <= 0x00000002]
[12:24:08.455]    </block>
[12:24:08.455]    <control if="protType == 1" while="" timeout="0" info="">
[12:24:08.455]      // if-block "protType == 1"
[12:24:08.455]        // =>  FALSE
[12:24:08.455]      // skip if-block "protType == 1"
[12:24:08.455]    </control>
[12:24:08.455]    <control if="protType == 2" while="" timeout="0" info="">
[12:24:08.464]      // if-block "protType == 2"
[12:24:08.464]        // =>  TRUE
[12:24:08.464]      <control if="isSWJ" while="" timeout="0" info="">
[12:24:08.464]        // if-block "isSWJ"
[12:24:08.464]          // =>  TRUE
[12:24:08.464]        <control if="hasDormant" while="" timeout="0" info="">
[12:24:08.464]          // if-block "hasDormant"
[12:24:08.464]            // =>  FALSE
[12:24:08.464]          // skip if-block "hasDormant"
[12:24:08.464]        </control>
[12:24:08.464]        <control if="!hasDormant" while="" timeout="0" info="">
[12:24:08.464]          // if-block "!hasDormant"
[12:24:08.464]            // =>  TRUE
[12:24:08.464]          <block atomic="false" info="">
[12:24:08.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:24:08.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:08.464]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:24:08.464]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:24:08.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:24:08.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:08.464]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:24:08.464]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:24:08.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:24:08.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:08.464]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:24:08.474]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:24:08.474]          </block>
[12:24:08.474]          // end if-block "!hasDormant"
[12:24:08.474]        </control>
[12:24:08.474]        // end if-block "isSWJ"
[12:24:08.474]      </control>
[12:24:08.474]      <control if="!isSWJ" while="" timeout="0" info="">
[12:24:08.474]        // if-block "!isSWJ"
[12:24:08.474]          // =>  FALSE
[12:24:08.474]        // skip if-block "!isSWJ"
[12:24:08.474]      </control>
[12:24:08.474]      <block atomic="false" info="">
[12:24:08.474]        ReadDP(0x0);
[12:24:08.474]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:24:08.474]      </block>
[12:24:08.474]      // end if-block "protType == 2"
[12:24:08.474]    </control>
[12:24:08.474]  </sequence>
[12:24:08.474]  
[12:24:08.474]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:24:08.474]  
[12:24:08.474]  <debugvars>
[12:24:08.474]    // Pre-defined
[12:24:08.474]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:08.474]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:08.474]    __dp=0x00000000
[12:24:08.474]    __ap=0x00000000
[12:24:08.474]    __traceout=0x00000000      (Trace Disabled)
[12:24:08.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:08.474]    __FlashAddr=0x00000000
[12:24:08.474]    __FlashLen=0x00000000
[12:24:08.474]    __FlashArg=0x00000000
[12:24:08.474]    __FlashOp=0x00000000
[12:24:08.474]    __Result=0x00000000
[12:24:08.474]  </debugvars>
[12:24:08.474]  
[12:24:08.474]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:24:08.474]    <block atomic="false" info="">
[12:24:08.474]      __var SW_DP_ABORT       = 0x0;
[12:24:08.474]        // -> [SW_DP_ABORT <= 0x00000000]
[12:24:08.474]      __var DP_CTRL_STAT      = 0x4;
[12:24:08.484]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:24:08.484]      __var DP_SELECT         = 0x8;
[12:24:08.484]        // -> [DP_SELECT <= 0x00000008]
[12:24:08.484]      __var powered_down      = 0;
[12:24:08.484]        // -> [powered_down <= 0x00000000]
[12:24:08.484]      WriteDP(DP_SELECT, 0x00000000);
[12:24:08.484]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:24:08.484]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:24:08.484]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:24:08.484]        // -> [powered_down <= 0x00000001]
[12:24:08.484]    </block>
[12:24:08.484]    <control if="powered_down" while="" timeout="0" info="">
[12:24:08.484]      // if-block "powered_down"
[12:24:08.484]        // =>  TRUE
[12:24:08.484]      <block atomic="false" info="">
[12:24:08.484]        Message(0, "Debug/System power-up request sent");
[12:24:08.484]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:24:08.484]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:24:08.484]      </block>
[12:24:08.484]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:24:08.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:24:08.484]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:24:08.484]        // while-condition  =>  FALSE
[12:24:08.494]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:24:08.494]      </control>
[12:24:08.494]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:24:08.494]        // if-block "(__protocol & 0xFFFF) == 1"
[12:24:08.494]          // =>  FALSE
[12:24:08.494]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:24:08.494]      </control>
[12:24:08.494]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:24:08.494]        // if-block "(__protocol & 0xFFFF) == 2"
[12:24:08.494]          // =>  TRUE
[12:24:08.494]        <block atomic="false" info="">
[12:24:08.494]          Message(0, "executing SWD power up");
[12:24:08.494]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:24:08.494]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:24:08.494]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:24:08.494]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:24:08.494]        </block>
[12:24:08.494]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:24:08.494]      </control>
[12:24:08.494]      // end if-block "powered_down"
[12:24:08.494]    </control>
[12:24:08.494]    <block atomic="false" info="">
[12:24:08.494]      __var DEBUG_PORT_VAL    = 0;
[12:24:08.494]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:24:08.494]      __var ACCESS_POINT_VAL  = 0;
[12:24:08.494]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:24:08.494]      __ap = 1; 
[12:24:08.494]        // -> [__ap <= 0x00000001]
[12:24:08.494]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:24:08.504]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:24:08.504]      __ap = 4;
[12:24:08.504]        // -> [__ap <= 0x00000004]
[12:24:08.504]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:08.504]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:24:08.504]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:24:08.504]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:08.504]    </block>
[12:24:08.504]    <block atomic="false" info="">
[12:24:08.504]      __var nReset = 0x80;
[12:24:08.504]        // -> [nReset <= 0x00000080]
[12:24:08.504]      __var canReadPins = 0;
[12:24:08.504]        // -> [canReadPins <= 0x00000000]
[12:24:08.504]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:24:08.504]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:24:08.504]        // -> [canReadPins <= 0x00000001]
[12:24:08.504]    </block>
[12:24:08.504]    <control if="" while="1" timeout="200" info="">
[12:24:08.504]      // while "1"  (timeout="200")
[12:24:08.504]      // while-condition  =>  TRUE
[12:24:08.504]      // while "1"  (timeout="200")
[12:24:08.504]      // while-condition  =>  TRUE
[12:24:08.504]      // while "1"  (timeout="200")
[12:24:08.504]      // while-condition  =>  TRUE
[12:24:08.504]      // while "1"  (timeout="200")
[12:24:08.504]      // while-condition  =>  TRUE
[12:24:08.504]      // while "1"  (timeout="200")
[12:24:08.504]      // while-condition  =>  TRUE
[12:24:08.504]      // while "1"  (timeout="200")
[12:24:08.504]      // while-condition  =>  TRUE
[12:24:08.514]      // while "1"  (timeout="200")
[12:24:08.514]      // while  =>  TIMEOUT
[12:24:08.514]      // end while "1"
[12:24:08.514]    </control>
[12:24:08.514]    <control if="canReadPins" while="" timeout="0" info="">
[12:24:08.514]      // if-block "canReadPins"
[12:24:08.514]        // =>  TRUE
[12:24:08.514]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:24:08.514]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:24:08.514]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:24:08.514]        // while-condition  =>  FALSE
[12:24:08.514]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:24:08.514]      </control>
[12:24:08.514]      // end if-block "canReadPins"
[12:24:08.514]    </control>
[12:24:08.514]    <control if="!canReadPins" while="" timeout="0" info="">
[12:24:08.514]      // if-block "!canReadPins"
[12:24:08.514]        // =>  FALSE
[12:24:08.514]      // skip if-block "!canReadPins"
[12:24:08.514]    </control>
[12:24:08.514]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:24:08.514]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:08.514]        // =>  TRUE
[12:24:08.514]      <block atomic="false" info="">
[12:24:08.514]        WriteAP(0x00, 0x190008);
[12:24:08.514]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:08.514]        WriteAP(0xF0, 0x01);
[12:24:08.524]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:08.524]      </block>
[12:24:08.524]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:08.524]    </control>
[12:24:08.524]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:24:08.524]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:08.524]        // =>  FALSE
[12:24:08.524]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:08.524]    </control>
[12:24:08.524]    <block atomic="false" info="">
[12:24:08.524]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:08.524]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:24:08.524]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:24:08.524]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:08.524]      __ap = 0; //lets make sure we reset the access point selection
[12:24:08.524]        // -> [__ap <= 0x00000000]
[12:24:08.524]    </block>
[12:24:08.524]  </sequence>
[12:24:08.524]  
[12:24:08.544]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:24:08.544]  
[12:24:08.544]  <debugvars>
[12:24:08.544]    // Pre-defined
[12:24:08.544]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:08.544]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:08.544]    __dp=0x00000000
[12:24:08.544]    __ap=0x00000000
[12:24:08.544]    __traceout=0x00000000      (Trace Disabled)
[12:24:08.544]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:08.544]    __FlashAddr=0x00000000
[12:24:08.544]    __FlashLen=0x00000000
[12:24:08.544]    __FlashArg=0x00000000
[12:24:08.544]    __FlashOp=0x00000000
[12:24:08.544]    __Result=0x00000000
[12:24:08.544]  </debugvars>
[12:24:08.544]  
[12:24:08.544]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:24:08.544]    <block atomic="false" info="">
[12:24:08.544]      __var deviceID = 0;
[12:24:08.544]        // -> [deviceID <= 0x00000000]
[12:24:08.554]      __var version = 0;
[12:24:08.554]        // -> [version <= 0x00000000]
[12:24:08.554]      __var partNum = 0;
[12:24:08.554]        // -> [partNum <= 0x00000000]
[12:24:08.554]      __var manuf = 0;
[12:24:08.554]        // -> [manuf <= 0x00000000]
[12:24:08.554]      __var isMSPM0G1X0X_G3X0X = 0;
[12:24:08.554]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:24:08.554]      __var isProduction = 0;
[12:24:08.554]        // -> [isProduction <= 0x00000000]
[12:24:08.554]      __var continueId = 0;
[12:24:08.554]        // -> [continueId <= 0x00000000]
[12:24:08.554]      deviceID =   Read32(0x41C40004);
[12:24:08.554]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:24:08.554]        // -> [deviceID <= 0x2BB8802F]
[12:24:08.554]      version = deviceID >> 28;
[12:24:08.554]        // -> [version <= 0x00000002]
[12:24:08.554]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:24:08.554]        // -> [partNum <= 0x0000BB88]
[12:24:08.554]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:24:08.554]        // -> [manuf <= 0x00000017]
[12:24:08.554]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:24:08.554]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:24:08.554]      isProduction = (version > 0);
[12:24:08.554]        // -> [isProduction <= 0x00000001]
[12:24:08.554]    </block>
[12:24:08.554]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:24:08.554]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:24:08.554]        // =>  FALSE
[12:24:08.554]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:24:08.554]    </control>
[12:24:08.554]    <control if="continueId == 4" while="" timeout="0" info="">
[12:24:08.554]      // if-block "continueId == 4"
[12:24:08.554]        // =>  FALSE
[12:24:08.554]      // skip if-block "continueId == 4"
[12:24:08.554]    </control>
[12:24:08.554]    <control if="!isProduction" while="" timeout="0" info="">
[12:24:08.554]      // if-block "!isProduction"
[12:24:08.554]        // =>  FALSE
[12:24:08.554]      // skip if-block "!isProduction"
[12:24:08.564]    </control>
[12:24:08.564]  </sequence>
[12:24:08.564]  
[12:25:19.767]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:25:19.767]  
[12:25:19.776]  <debugvars>
[12:25:19.776]    // Pre-defined
[12:25:19.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:25:19.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:25:19.776]    __dp=0x00000000
[12:25:19.776]    __ap=0x00000000
[12:25:19.776]    __traceout=0x00000000      (Trace Disabled)
[12:25:19.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:25:19.776]    __FlashAddr=0x00000000
[12:25:19.777]    __FlashLen=0x00000000
[12:25:19.777]    __FlashArg=0x00000000
[12:25:19.777]    __FlashOp=0x00000000
[12:25:19.777]    __Result=0x00000000
[12:25:19.777]  </debugvars>
[12:25:19.777]  
[12:25:19.777]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:25:19.777]    <block atomic="false" info="">
[12:25:19.777]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:25:19.777]        // -> [isSWJ <= 0x00000001]
[12:25:19.777]      __var hasDormant = __protocol & 0x00020000;
[12:25:19.777]        // -> [hasDormant <= 0x00000000]
[12:25:19.777]      __var protType   = __protocol & 0x0000FFFF;
[12:25:19.777]        // -> [protType <= 0x00000002]
[12:25:19.777]    </block>
[12:25:19.777]    <control if="protType == 1" while="" timeout="0" info="">
[12:25:19.777]      // if-block "protType == 1"
[12:25:19.777]        // =>  FALSE
[12:25:19.777]      // skip if-block "protType == 1"
[12:25:19.777]    </control>
[12:25:19.777]    <control if="protType == 2" while="" timeout="0" info="">
[12:25:19.777]      // if-block "protType == 2"
[12:25:19.777]        // =>  TRUE
[12:25:19.777]      <control if="isSWJ" while="" timeout="0" info="">
[12:25:19.777]        // if-block "isSWJ"
[12:25:19.777]          // =>  TRUE
[12:25:19.777]        <control if="hasDormant" while="" timeout="0" info="">
[12:25:19.777]          // if-block "hasDormant"
[12:25:19.777]            // =>  FALSE
[12:25:19.777]          // skip if-block "hasDormant"
[12:25:19.777]        </control>
[12:25:19.777]        <control if="!hasDormant" while="" timeout="0" info="">
[12:25:19.777]          // if-block "!hasDormant"
[12:25:19.777]            // =>  TRUE
[12:25:19.777]          <block atomic="false" info="">
[12:25:19.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:25:19.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:25:19.782]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:25:19.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:25:19.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:25:19.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:25:19.782]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:25:19.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:25:19.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:25:19.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:25:19.787]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:25:19.787]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:25:19.787]          </block>
[12:25:19.787]          // end if-block "!hasDormant"
[12:25:19.787]        </control>
[12:25:19.787]        // end if-block "isSWJ"
[12:25:19.787]      </control>
[12:25:19.787]      <control if="!isSWJ" while="" timeout="0" info="">
[12:25:19.787]        // if-block "!isSWJ"
[12:25:19.787]          // =>  FALSE
[12:25:19.787]        // skip if-block "!isSWJ"
[12:25:19.787]      </control>
[12:25:19.787]      <block atomic="false" info="">
[12:25:19.787]        ReadDP(0x0);
[12:25:19.792]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:25:19.792]      </block>
[12:25:19.792]      // end if-block "protType == 2"
[12:25:19.792]    </control>
[12:25:19.792]  </sequence>
[12:25:19.792]  
[12:25:19.792]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:25:19.792]  
[12:25:19.792]  <debugvars>
[12:25:19.792]    // Pre-defined
[12:25:19.792]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:25:19.792]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:25:19.792]    __dp=0x00000000
[12:25:19.792]    __ap=0x00000000
[12:25:19.792]    __traceout=0x00000000      (Trace Disabled)
[12:25:19.792]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:25:19.792]    __FlashAddr=0x00000000
[12:25:19.792]    __FlashLen=0x00000000
[12:25:19.792]    __FlashArg=0x00000000
[12:25:19.792]    __FlashOp=0x00000000
[12:25:19.792]    __Result=0x00000000
[12:25:19.792]  </debugvars>
[12:25:19.797]  
[12:25:19.797]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:25:19.797]    <block atomic="false" info="">
[12:25:19.797]      __var SW_DP_ABORT       = 0x0;
[12:25:19.797]        // -> [SW_DP_ABORT <= 0x00000000]
[12:25:19.797]      __var DP_CTRL_STAT      = 0x4;
[12:25:19.797]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:25:19.797]      __var DP_SELECT         = 0x8;
[12:25:19.797]        // -> [DP_SELECT <= 0x00000008]
[12:25:19.797]      __var powered_down      = 0;
[12:25:19.797]        // -> [powered_down <= 0x00000000]
[12:25:19.797]      WriteDP(DP_SELECT, 0x00000000);
[12:25:19.797]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:25:19.797]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:25:19.802]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:25:19.802]        // -> [powered_down <= 0x00000001]
[12:25:19.802]    </block>
[12:25:19.802]    <control if="powered_down" while="" timeout="0" info="">
[12:25:19.802]      // if-block "powered_down"
[12:25:19.802]        // =>  TRUE
[12:25:19.802]      <block atomic="false" info="">
[12:25:19.802]        Message(0, "Debug/System power-up request sent");
[12:25:19.802]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:25:19.802]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:25:19.802]      </block>
[12:25:19.802]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:25:19.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:25:19.807]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:25:19.807]        // while-condition  =>  FALSE
[12:25:19.807]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:25:19.807]      </control>
[12:25:19.807]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:25:19.807]        // if-block "(__protocol & 0xFFFF) == 1"
[12:25:19.807]          // =>  FALSE
[12:25:19.807]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:25:19.807]      </control>
[12:25:19.807]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:25:19.807]        // if-block "(__protocol & 0xFFFF) == 2"
[12:25:19.807]          // =>  TRUE
[12:25:19.807]        <block atomic="false" info="">
[12:25:19.807]          Message(0, "executing SWD power up");
[12:25:19.807]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:25:19.812]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:25:19.812]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:25:19.812]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:25:19.812]        </block>
[12:25:19.812]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:25:19.812]      </control>
[12:25:19.812]      // end if-block "powered_down"
[12:25:19.812]    </control>
[12:25:19.812]    <block atomic="false" info="">
[12:25:19.812]      __var DEBUG_PORT_VAL    = 0;
[12:25:19.817]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:25:19.817]      __var ACCESS_POINT_VAL  = 0;
[12:25:19.817]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:25:19.817]      __ap = 1; 
[12:25:19.817]        // -> [__ap <= 0x00000001]
[12:25:19.817]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:25:19.817]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:25:19.817]      __ap = 4;
[12:25:19.817]        // -> [__ap <= 0x00000004]
[12:25:19.817]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:25:19.822]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:25:19.822]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:25:19.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:25:19.822]    </block>
[12:25:19.822]    <block atomic="false" info="">
[12:25:19.822]      __var nReset = 0x80;
[12:25:19.822]        // -> [nReset <= 0x00000080]
[12:25:19.822]      __var canReadPins = 0;
[12:25:19.822]        // -> [canReadPins <= 0x00000000]
[12:25:19.822]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:25:19.827]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:25:19.827]        // -> [canReadPins <= 0x00000001]
[12:25:19.827]    </block>
[12:25:19.827]    <control if="" while="1" timeout="200" info="">
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.827]      // while "1"  (timeout="200")
[12:25:19.827]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.832]      // while-condition  =>  TRUE
[12:25:19.832]      // while "1"  (timeout="200")
[12:25:19.837]      // while-condition  =>  TRUE
[12:25:19.837]      // while "1"  (timeout="200")
[12:25:19.837]      // while  =>  TIMEOUT
[12:25:19.837]      // end while "1"
[12:25:19.837]    </control>
[12:25:19.837]    <control if="canReadPins" while="" timeout="0" info="">
[12:25:19.837]      // if-block "canReadPins"
[12:25:19.837]        // =>  TRUE
[12:25:19.837]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:25:19.837]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:25:19.837]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:25:19.837]        // while-condition  =>  FALSE
[12:25:19.837]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:25:19.837]      </control>
[12:25:19.837]      // end if-block "canReadPins"
[12:25:19.837]    </control>
[12:25:19.837]    <control if="!canReadPins" while="" timeout="0" info="">
[12:25:19.837]      // if-block "!canReadPins"
[12:25:19.837]        // =>  FALSE
[12:25:19.837]      // skip if-block "!canReadPins"
[12:25:19.837]    </control>
[12:25:19.837]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:25:19.837]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:25:19.837]        // =>  TRUE
[12:25:19.837]      <block atomic="false" info="">
[12:25:19.837]        WriteAP(0x00, 0x190008);
[12:25:19.842]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:25:19.842]        WriteAP(0xF0, 0x01);
[12:25:19.842]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:25:19.842]      </block>
[12:25:19.842]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:25:19.842]    </control>
[12:25:19.847]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:25:19.847]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:25:19.847]        // =>  FALSE
[12:25:19.847]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:25:19.847]    </control>
[12:25:19.847]    <block atomic="false" info="">
[12:25:19.847]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:25:19.852]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:25:19.852]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:25:19.852]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:25:19.854]      __ap = 0; //lets make sure we reset the access point selection
[12:25:19.854]        // -> [__ap <= 0x00000000]
[12:25:19.854]    </block>
[12:25:19.854]  </sequence>
[12:25:19.854]  
[12:25:19.872]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:25:19.872]  
[12:25:19.872]  <debugvars>
[12:25:19.872]    // Pre-defined
[12:25:19.872]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:25:19.872]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:25:19.872]    __dp=0x00000000
[12:25:19.872]    __ap=0x00000000
[12:25:19.872]    __traceout=0x00000000      (Trace Disabled)
[12:25:19.872]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:25:19.872]    __FlashAddr=0x00000000
[12:25:19.872]    __FlashLen=0x00000000
[12:25:19.872]    __FlashArg=0x00000000
[12:25:19.872]    __FlashOp=0x00000000
[12:25:19.872]    __Result=0x00000000
[12:25:19.872]  </debugvars>
[12:25:19.872]  
[12:25:19.872]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:25:19.872]    <block atomic="false" info="">
[12:25:19.872]      __var deviceID = 0;
[12:25:19.877]        // -> [deviceID <= 0x00000000]
[12:25:19.877]      __var version = 0;
[12:25:19.877]        // -> [version <= 0x00000000]
[12:25:19.877]      __var partNum = 0;
[12:25:19.877]        // -> [partNum <= 0x00000000]
[12:25:19.877]      __var manuf = 0;
[12:25:19.877]        // -> [manuf <= 0x00000000]
[12:25:19.877]      __var isMSPM0G1X0X_G3X0X = 0;
[12:25:19.877]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:25:19.877]      __var isProduction = 0;
[12:25:19.877]        // -> [isProduction <= 0x00000000]
[12:25:19.877]      __var continueId = 0;
[12:25:19.877]        // -> [continueId <= 0x00000000]
[12:25:19.877]      deviceID =   Read32(0x41C40004);
[12:25:19.882]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:25:19.882]        // -> [deviceID <= 0x2BB8802F]
[12:25:19.882]      version = deviceID >> 28;
[12:25:19.882]        // -> [version <= 0x00000002]
[12:25:19.887]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:25:19.887]        // -> [partNum <= 0x0000BB88]
[12:25:19.887]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:25:19.887]        // -> [manuf <= 0x00000017]
[12:25:19.887]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:25:19.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:25:19.887]      isProduction = (version > 0);
[12:25:19.887]        // -> [isProduction <= 0x00000001]
[12:25:19.887]    </block>
[12:25:19.887]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:25:19.887]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:25:19.887]        // =>  FALSE
[12:25:19.887]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:25:19.887]    </control>
[12:25:19.887]    <control if="continueId == 4" while="" timeout="0" info="">
[12:25:19.887]      // if-block "continueId == 4"
[12:25:19.887]        // =>  FALSE
[12:25:19.887]      // skip if-block "continueId == 4"
[12:25:19.887]    </control>
[12:25:19.887]    <control if="!isProduction" while="" timeout="0" info="">
[12:25:19.887]      // if-block "!isProduction"
[12:25:19.887]        // =>  FALSE
[12:25:19.887]      // skip if-block "!isProduction"
[12:25:19.887]    </control>
[12:25:19.887]  </sequence>
[12:25:19.887]  
[12:25:37.095]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:25:37.095]  
[12:25:37.095]  <debugvars>
[12:25:37.095]    // Pre-defined
[12:25:37.095]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:25:37.095]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:25:37.095]    __dp=0x00000000
[12:25:37.095]    __ap=0x00000000
[12:25:37.095]    __traceout=0x00000000      (Trace Disabled)
[12:25:37.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:25:37.095]    __FlashAddr=0x00000000
[12:25:37.095]    __FlashLen=0x00000000
[12:25:37.095]    __FlashArg=0x00000000
[12:25:37.095]    __FlashOp=0x00000000
[12:25:37.095]    __Result=0x00000000
[12:25:37.095]  </debugvars>
[12:25:37.095]  
[12:25:37.095]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:25:37.095]    <block atomic="false" info="">
[12:25:37.095]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:25:37.095]        // -> [isSWJ <= 0x00000001]
[12:25:37.095]      __var hasDormant = __protocol & 0x00020000;
[12:25:37.095]        // -> [hasDormant <= 0x00000000]
[12:25:37.095]      __var protType   = __protocol & 0x0000FFFF;
[12:25:37.095]        // -> [protType <= 0x00000002]
[12:25:37.095]    </block>
[12:25:37.095]    <control if="protType == 1" while="" timeout="0" info="">
[12:25:37.095]      // if-block "protType == 1"
[12:25:37.095]        // =>  FALSE
[12:25:37.095]      // skip if-block "protType == 1"
[12:25:37.095]    </control>
[12:25:37.095]    <control if="protType == 2" while="" timeout="0" info="">
[12:25:37.095]      // if-block "protType == 2"
[12:25:37.095]        // =>  TRUE
[12:25:37.095]      <control if="isSWJ" while="" timeout="0" info="">
[12:25:37.095]        // if-block "isSWJ"
[12:25:37.095]          // =>  TRUE
[12:25:37.095]        <control if="hasDormant" while="" timeout="0" info="">
[12:25:37.095]          // if-block "hasDormant"
[12:25:37.095]            // =>  FALSE
[12:25:37.095]          // skip if-block "hasDormant"
[12:25:37.095]        </control>
[12:25:37.095]        <control if="!hasDormant" while="" timeout="0" info="">
[12:25:37.095]          // if-block "!hasDormant"
[12:25:37.095]            // =>  TRUE
[12:25:37.095]          <block atomic="false" info="">
[12:25:37.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:25:37.095]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:25:37.095]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:25:37.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:25:37.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:25:37.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:25:37.105]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:25:37.105]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:25:37.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:25:37.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:25:37.105]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:25:37.105]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:25:37.105]          </block>
[12:25:37.105]          // end if-block "!hasDormant"
[12:25:37.105]        </control>
[12:25:37.105]        // end if-block "isSWJ"
[12:25:37.115]      </control>
[12:25:37.115]      <control if="!isSWJ" while="" timeout="0" info="">
[12:25:37.115]        // if-block "!isSWJ"
[12:25:37.115]          // =>  FALSE
[12:25:37.115]        // skip if-block "!isSWJ"
[12:25:37.115]      </control>
[12:25:37.115]      <block atomic="false" info="">
[12:25:37.115]        ReadDP(0x0);
[12:25:37.115]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:25:37.115]      </block>
[12:25:37.115]      // end if-block "protType == 2"
[12:25:37.115]    </control>
[12:25:37.115]  </sequence>
[12:25:37.115]  
[12:25:37.115]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:25:37.115]  
[12:25:37.115]  <debugvars>
[12:25:37.115]    // Pre-defined
[12:25:37.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:25:37.115]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:25:37.115]    __dp=0x00000000
[12:25:37.115]    __ap=0x00000000
[12:25:37.115]    __traceout=0x00000000      (Trace Disabled)
[12:25:37.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:25:37.115]    __FlashAddr=0x00000000
[12:25:37.115]    __FlashLen=0x00000000
[12:25:37.115]    __FlashArg=0x00000000
[12:25:37.115]    __FlashOp=0x00000000
[12:25:37.115]    __Result=0x00000000
[12:25:37.115]  </debugvars>
[12:25:37.115]  
[12:25:37.115]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:25:37.115]    <block atomic="false" info="">
[12:25:37.115]      __var SW_DP_ABORT       = 0x0;
[12:25:37.115]        // -> [SW_DP_ABORT <= 0x00000000]
[12:25:37.115]      __var DP_CTRL_STAT      = 0x4;
[12:25:37.115]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:25:37.115]      __var DP_SELECT         = 0x8;
[12:25:37.115]        // -> [DP_SELECT <= 0x00000008]
[12:25:37.115]      __var powered_down      = 0;
[12:25:37.115]        // -> [powered_down <= 0x00000000]
[12:25:37.115]      WriteDP(DP_SELECT, 0x00000000);
[12:25:37.115]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:25:37.115]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:25:37.125]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:25:37.125]        // -> [powered_down <= 0x00000001]
[12:25:37.125]    </block>
[12:25:37.125]    <control if="powered_down" while="" timeout="0" info="">
[12:25:37.125]      // if-block "powered_down"
[12:25:37.125]        // =>  TRUE
[12:25:37.125]      <block atomic="false" info="">
[12:25:37.125]        Message(0, "Debug/System power-up request sent");
[12:25:37.125]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:25:37.125]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:25:37.125]      </block>
[12:25:37.125]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:25:37.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:25:37.125]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:25:37.125]        // while-condition  =>  FALSE
[12:25:37.125]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:25:37.125]      </control>
[12:25:37.125]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:25:37.125]        // if-block "(__protocol & 0xFFFF) == 1"
[12:25:37.125]          // =>  FALSE
[12:25:37.125]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:25:37.125]      </control>
[12:25:37.125]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:25:37.125]        // if-block "(__protocol & 0xFFFF) == 2"
[12:25:37.125]          // =>  TRUE
[12:25:37.125]        <block atomic="false" info="">
[12:25:37.125]          Message(0, "executing SWD power up");
[12:25:37.135]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:25:37.135]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:25:37.135]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:25:37.135]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:25:37.135]        </block>
[12:25:37.135]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:25:37.135]      </control>
[12:25:37.135]      // end if-block "powered_down"
[12:25:37.135]    </control>
[12:25:37.141]    <block atomic="false" info="">
[12:25:37.141]      __var DEBUG_PORT_VAL    = 0;
[12:25:37.141]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:25:37.141]      __var ACCESS_POINT_VAL  = 0;
[12:25:37.141]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:25:37.141]      __ap = 1; 
[12:25:37.141]        // -> [__ap <= 0x00000001]
[12:25:37.142]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:25:37.145]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:25:37.145]      __ap = 4;
[12:25:37.145]        // -> [__ap <= 0x00000004]
[12:25:37.145]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:25:37.150]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:25:37.150]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:25:37.150]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:25:37.151]    </block>
[12:25:37.151]    <block atomic="false" info="">
[12:25:37.151]      __var nReset = 0x80;
[12:25:37.151]        // -> [nReset <= 0x00000080]
[12:25:37.151]      __var canReadPins = 0;
[12:25:37.151]        // -> [canReadPins <= 0x00000000]
[12:25:37.151]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:25:37.153]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:25:37.153]        // -> [canReadPins <= 0x00000001]
[12:25:37.153]    </block>
[12:25:37.153]    <control if="" while="1" timeout="200" info="">
[12:25:37.153]      // while "1"  (timeout="200")
[12:25:37.153]      // while-condition  =>  TRUE
[12:25:37.153]      // while "1"  (timeout="200")
[12:25:37.155]      // while-condition  =>  TRUE
[12:25:37.155]      // while "1"  (timeout="200")
[12:25:37.155]      // while-condition  =>  TRUE
[12:25:37.155]      // while "1"  (timeout="200")
[12:25:37.155]      // while-condition  =>  TRUE
[12:25:37.155]      // while "1"  (timeout="200")
[12:25:37.155]      // while-condition  =>  TRUE
[12:25:37.155]      // while "1"  (timeout="200")
[12:25:37.155]      // while-condition  =>  TRUE
[12:25:37.156]      // while "1"  (timeout="200")
[12:25:37.156]      // while-condition  =>  TRUE
[12:25:37.156]      // while "1"  (timeout="200")
[12:25:37.156]      // while-condition  =>  TRUE
[12:25:37.156]      // while "1"  (timeout="200")
[12:25:37.156]      // while-condition  =>  TRUE
[12:25:37.156]      // while "1"  (timeout="200")
[12:25:37.156]      // while-condition  =>  TRUE
[12:25:37.156]      // while "1"  (timeout="200")
[12:25:37.156]      // while-condition  =>  TRUE
[12:25:37.157]      // while "1"  (timeout="200")
[12:25:37.157]      // while-condition  =>  TRUE
[12:25:37.157]      // while "1"  (timeout="200")
[12:25:37.157]      // while-condition  =>  TRUE
[12:25:37.157]      // while "1"  (timeout="200")
[12:25:37.157]      // while-condition  =>  TRUE
[12:25:37.157]      // while "1"  (timeout="200")
[12:25:37.157]      // while-condition  =>  TRUE
[12:25:37.157]      // while "1"  (timeout="200")
[12:25:37.158]      // while-condition  =>  TRUE
[12:25:37.158]      // while "1"  (timeout="200")
[12:25:37.158]      // while-condition  =>  TRUE
[12:25:37.158]      // while "1"  (timeout="200")
[12:25:37.158]      // while-condition  =>  TRUE
[12:25:37.158]      // while "1"  (timeout="200")
[12:25:37.158]      // while-condition  =>  TRUE
[12:25:37.158]      // while "1"  (timeout="200")
[12:25:37.158]      // while-condition  =>  TRUE
[12:25:37.158]      // while "1"  (timeout="200")
[12:25:37.158]      // while-condition  =>  TRUE
[12:25:37.158]      // while "1"  (timeout="200")
[12:25:37.158]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.160]      // while "1"  (timeout="200")
[12:25:37.160]      // while-condition  =>  TRUE
[12:25:37.161]      // while "1"  (timeout="200")
[12:25:37.161]      // while-condition  =>  TRUE
[12:25:37.161]      // while "1"  (timeout="200")
[12:25:37.161]      // while-condition  =>  TRUE
[12:25:37.161]      // while "1"  (timeout="200")
[12:25:37.161]      // while-condition  =>  TRUE
[12:25:37.161]      // while "1"  (timeout="200")
[12:25:37.161]      // while-condition  =>  TRUE
[12:25:37.161]      // while "1"  (timeout="200")
[12:25:37.161]      // while-condition  =>  TRUE
[12:25:37.161]      // while "1"  (timeout="200")
[12:25:37.161]      // while-condition  =>  TRUE
[12:25:37.161]      // while "1"  (timeout="200")
[12:25:37.161]      // while-condition  =>  TRUE
[12:25:37.163]      // while "1"  (timeout="200")
[12:25:37.163]      // while  =>  TIMEOUT
[12:25:37.163]      // end while "1"
[12:25:37.163]    </control>
[12:25:37.163]    <control if="canReadPins" while="" timeout="0" info="">
[12:25:37.163]      // if-block "canReadPins"
[12:25:37.163]        // =>  TRUE
[12:25:37.163]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:25:37.163]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:25:37.165]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:25:37.165]        // while-condition  =>  FALSE
[12:25:37.165]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:25:37.165]      </control>
[12:25:37.166]      // end if-block "canReadPins"
[12:25:37.166]    </control>
[12:25:37.166]    <control if="!canReadPins" while="" timeout="0" info="">
[12:25:37.166]      // if-block "!canReadPins"
[12:25:37.166]        // =>  FALSE
[12:25:37.166]      // skip if-block "!canReadPins"
[12:25:37.166]    </control>
[12:25:37.167]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:25:37.167]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:25:37.167]        // =>  TRUE
[12:25:37.167]      <block atomic="false" info="">
[12:25:37.167]        WriteAP(0x00, 0x190008);
[12:25:37.167]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:25:37.167]        WriteAP(0xF0, 0x01);
[12:25:37.167]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:25:37.167]      </block>
[12:25:37.167]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:25:37.167]    </control>
[12:25:37.167]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:25:37.167]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:25:37.167]        // =>  FALSE
[12:25:37.167]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:25:37.167]    </control>
[12:25:37.167]    <block atomic="false" info="">
[12:25:37.167]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:25:37.176]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:25:37.176]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:25:37.176]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:25:37.176]      __ap = 0; //lets make sure we reset the access point selection
[12:25:37.176]        // -> [__ap <= 0x00000000]
[12:25:37.176]    </block>
[12:25:37.176]  </sequence>
[12:25:37.176]  
[12:25:37.198]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:25:37.198]  
[12:25:37.198]  <debugvars>
[12:25:37.198]    // Pre-defined
[12:25:37.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:25:37.198]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:25:37.198]    __dp=0x00000000
[12:25:37.198]    __ap=0x00000000
[12:25:37.198]    __traceout=0x00000000      (Trace Disabled)
[12:25:37.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:25:37.198]    __FlashAddr=0x00000000
[12:25:37.198]    __FlashLen=0x00000000
[12:25:37.198]    __FlashArg=0x00000000
[12:25:37.198]    __FlashOp=0x00000000
[12:25:37.198]    __Result=0x00000000
[12:25:37.198]  </debugvars>
[12:25:37.198]  
[12:25:37.198]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:25:37.198]    <block atomic="false" info="">
[12:25:37.198]      __var deviceID = 0;
[12:25:37.198]        // -> [deviceID <= 0x00000000]
[12:25:37.198]      __var version = 0;
[12:25:37.200]        // -> [version <= 0x00000000]
[12:25:37.200]      __var partNum = 0;
[12:25:37.200]        // -> [partNum <= 0x00000000]
[12:25:37.200]      __var manuf = 0;
[12:25:37.200]        // -> [manuf <= 0x00000000]
[12:25:37.200]      __var isMSPM0G1X0X_G3X0X = 0;
[12:25:37.200]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:25:37.200]      __var isProduction = 0;
[12:25:37.201]        // -> [isProduction <= 0x00000000]
[12:25:37.201]      __var continueId = 0;
[12:25:37.201]        // -> [continueId <= 0x00000000]
[12:25:37.201]      deviceID =   Read32(0x41C40004);
[12:25:37.201]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:25:37.201]        // -> [deviceID <= 0x2BB8802F]
[12:25:37.201]      version = deviceID >> 28;
[12:25:37.201]        // -> [version <= 0x00000002]
[12:25:37.201]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:25:37.207]        // -> [partNum <= 0x0000BB88]
[12:25:37.207]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:25:37.207]        // -> [manuf <= 0x00000017]
[12:25:37.207]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:25:37.207]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:25:37.207]      isProduction = (version > 0);
[12:25:37.207]        // -> [isProduction <= 0x00000001]
[12:25:37.207]    </block>
[12:25:37.207]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:25:37.207]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:25:37.207]        // =>  FALSE
[12:25:37.209]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:25:37.209]    </control>
[12:25:37.209]    <control if="continueId == 4" while="" timeout="0" info="">
[12:25:37.210]      // if-block "continueId == 4"
[12:25:37.210]        // =>  FALSE
[12:25:37.210]      // skip if-block "continueId == 4"
[12:25:37.210]    </control>
[12:25:37.210]    <control if="!isProduction" while="" timeout="0" info="">
[12:25:37.210]      // if-block "!isProduction"
[12:25:37.210]        // =>  FALSE
[12:25:37.210]      // skip if-block "!isProduction"
[12:25:37.210]    </control>
[12:25:37.210]  </sequence>
[12:25:37.210]  
[12:26:59.376]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:26:59.376]  
[12:26:59.380]  <debugvars>
[12:26:59.380]    // Pre-defined
[12:26:59.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:59.380]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:26:59.380]    __dp=0x00000000
[12:26:59.380]    __ap=0x00000000
[12:26:59.380]    __traceout=0x00000000      (Trace Disabled)
[12:26:59.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:59.380]    __FlashAddr=0x00000000
[12:26:59.380]    __FlashLen=0x00000000
[12:26:59.380]    __FlashArg=0x00000000
[12:26:59.380]    __FlashOp=0x00000000
[12:26:59.380]    __Result=0x00000000
[12:26:59.380]  </debugvars>
[12:26:59.380]  
[12:26:59.380]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:26:59.380]    <block atomic="false" info="">
[12:26:59.380]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:26:59.380]        // -> [isSWJ <= 0x00000001]
[12:26:59.380]      __var hasDormant = __protocol & 0x00020000;
[12:26:59.380]        // -> [hasDormant <= 0x00000000]
[12:26:59.380]      __var protType   = __protocol & 0x0000FFFF;
[12:26:59.380]        // -> [protType <= 0x00000002]
[12:26:59.380]    </block>
[12:26:59.380]    <control if="protType == 1" while="" timeout="0" info="">
[12:26:59.380]      // if-block "protType == 1"
[12:26:59.380]        // =>  FALSE
[12:26:59.380]      // skip if-block "protType == 1"
[12:26:59.380]    </control>
[12:26:59.380]    <control if="protType == 2" while="" timeout="0" info="">
[12:26:59.380]      // if-block "protType == 2"
[12:26:59.380]        // =>  TRUE
[12:26:59.380]      <control if="isSWJ" while="" timeout="0" info="">
[12:26:59.380]        // if-block "isSWJ"
[12:26:59.380]          // =>  TRUE
[12:26:59.380]        <control if="hasDormant" while="" timeout="0" info="">
[12:26:59.380]          // if-block "hasDormant"
[12:26:59.380]            // =>  FALSE
[12:26:59.380]          // skip if-block "hasDormant"
[12:26:59.380]        </control>
[12:26:59.380]        <control if="!hasDormant" while="" timeout="0" info="">
[12:26:59.380]          // if-block "!hasDormant"
[12:26:59.380]            // =>  TRUE
[12:26:59.380]          <block atomic="false" info="">
[12:26:59.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:26:59.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:59.387]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:26:59.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:26:59.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:26:59.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:59.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:26:59.391]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:26:59.391]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:26:59.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:59.391]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:26:59.391]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:26:59.391]          </block>
[12:26:59.391]          // end if-block "!hasDormant"
[12:26:59.391]        </control>
[12:26:59.391]        // end if-block "isSWJ"
[12:26:59.391]      </control>
[12:26:59.391]      <control if="!isSWJ" while="" timeout="0" info="">
[12:26:59.391]        // if-block "!isSWJ"
[12:26:59.397]          // =>  FALSE
[12:26:59.397]        // skip if-block "!isSWJ"
[12:26:59.397]      </control>
[12:26:59.397]      <block atomic="false" info="">
[12:26:59.397]        ReadDP(0x0);
[12:26:59.400]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:26:59.400]      </block>
[12:26:59.400]      // end if-block "protType == 2"
[12:26:59.400]    </control>
[12:26:59.400]  </sequence>
[12:26:59.400]  
[12:26:59.401]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:26:59.401]  
[12:26:59.401]  <debugvars>
[12:26:59.401]    // Pre-defined
[12:26:59.401]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:59.401]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:26:59.401]    __dp=0x00000000
[12:26:59.401]    __ap=0x00000000
[12:26:59.401]    __traceout=0x00000000      (Trace Disabled)
[12:26:59.401]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:59.401]    __FlashAddr=0x00000000
[12:26:59.401]    __FlashLen=0x00000000
[12:26:59.401]    __FlashArg=0x00000000
[12:26:59.401]    __FlashOp=0x00000000
[12:26:59.401]    __Result=0x00000000
[12:26:59.401]  </debugvars>
[12:26:59.401]  
[12:26:59.401]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:26:59.401]    <block atomic="false" info="">
[12:26:59.405]      __var SW_DP_ABORT       = 0x0;
[12:26:59.405]        // -> [SW_DP_ABORT <= 0x00000000]
[12:26:59.405]      __var DP_CTRL_STAT      = 0x4;
[12:26:59.405]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:26:59.405]      __var DP_SELECT         = 0x8;
[12:26:59.405]        // -> [DP_SELECT <= 0x00000008]
[12:26:59.405]      __var powered_down      = 0;
[12:26:59.405]        // -> [powered_down <= 0x00000000]
[12:26:59.405]      WriteDP(DP_SELECT, 0x00000000);
[12:26:59.407]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:26:59.407]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:26:59.407]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:26:59.407]        // -> [powered_down <= 0x00000001]
[12:26:59.407]    </block>
[12:26:59.407]    <control if="powered_down" while="" timeout="0" info="">
[12:26:59.407]      // if-block "powered_down"
[12:26:59.407]        // =>  TRUE
[12:26:59.407]      <block atomic="false" info="">
[12:26:59.407]        Message(0, "Debug/System power-up request sent");
[12:26:59.411]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:26:59.413]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:26:59.413]      </block>
[12:26:59.413]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:26:59.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:26:59.413]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:26:59.413]        // while-condition  =>  FALSE
[12:26:59.413]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:26:59.413]      </control>
[12:26:59.413]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:26:59.413]        // if-block "(__protocol & 0xFFFF) == 1"
[12:26:59.413]          // =>  FALSE
[12:26:59.413]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:26:59.413]      </control>
[12:26:59.413]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:26:59.413]        // if-block "(__protocol & 0xFFFF) == 2"
[12:26:59.413]          // =>  TRUE
[12:26:59.413]        <block atomic="false" info="">
[12:26:59.413]          Message(0, "executing SWD power up");
[12:26:59.413]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:26:59.418]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:26:59.418]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:26:59.421]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:26:59.421]        </block>
[12:26:59.421]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:26:59.421]      </control>
[12:26:59.421]      // end if-block "powered_down"
[12:26:59.421]    </control>
[12:26:59.421]    <block atomic="false" info="">
[12:26:59.422]      __var DEBUG_PORT_VAL    = 0;
[12:26:59.422]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:26:59.422]      __var ACCESS_POINT_VAL  = 0;
[12:26:59.422]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:26:59.422]      __ap = 1; 
[12:26:59.422]        // -> [__ap <= 0x00000001]
[12:26:59.422]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:26:59.422]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:26:59.422]      __ap = 4;
[12:26:59.422]        // -> [__ap <= 0x00000004]
[12:26:59.422]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:26:59.432]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:26:59.432]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:26:59.432]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:26:59.435]    </block>
[12:26:59.435]    <block atomic="false" info="">
[12:26:59.435]      __var nReset = 0x80;
[12:26:59.435]        // -> [nReset <= 0x00000080]
[12:26:59.435]      __var canReadPins = 0;
[12:26:59.435]        // -> [canReadPins <= 0x00000000]
[12:26:59.435]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:26:59.435]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:26:59.435]        // -> [canReadPins <= 0x00000001]
[12:26:59.435]    </block>
[12:26:59.438]    <control if="" while="1" timeout="200" info="">
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.438]      // while "1"  (timeout="200")
[12:26:59.438]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.441]      // while "1"  (timeout="200")
[12:26:59.441]      // while-condition  =>  TRUE
[12:26:59.448]      // while "1"  (timeout="200")
[12:26:59.448]      // while  =>  TIMEOUT
[12:26:59.448]      // end while "1"
[12:26:59.448]    </control>
[12:26:59.448]    <control if="canReadPins" while="" timeout="0" info="">
[12:26:59.448]      // if-block "canReadPins"
[12:26:59.448]        // =>  TRUE
[12:26:59.448]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:26:59.448]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:26:59.451]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:26:59.451]        // while-condition  =>  FALSE
[12:26:59.451]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:26:59.451]      </control>
[12:26:59.451]      // end if-block "canReadPins"
[12:26:59.451]    </control>
[12:26:59.451]    <control if="!canReadPins" while="" timeout="0" info="">
[12:26:59.451]      // if-block "!canReadPins"
[12:26:59.451]        // =>  FALSE
[12:26:59.451]      // skip if-block "!canReadPins"
[12:26:59.451]    </control>
[12:26:59.451]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:26:59.451]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:26:59.451]        // =>  TRUE
[12:26:59.451]      <block atomic="false" info="">
[12:26:59.451]        WriteAP(0x00, 0x190008);
[12:26:59.451]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:26:59.451]        WriteAP(0xF0, 0x01);
[12:26:59.451]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:26:59.451]      </block>
[12:26:59.451]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:26:59.451]    </control>
[12:26:59.451]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:26:59.458]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:26:59.458]        // =>  FALSE
[12:26:59.458]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:26:59.458]    </control>
[12:26:59.458]    <block atomic="false" info="">
[12:26:59.458]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:26:59.461]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:26:59.461]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:26:59.462]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:26:59.463]      __ap = 0; //lets make sure we reset the access point selection
[12:26:59.463]        // -> [__ap <= 0x00000000]
[12:26:59.463]    </block>
[12:26:59.463]  </sequence>
[12:26:59.463]  
[12:26:59.484]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:26:59.484]  
[12:26:59.484]  <debugvars>
[12:26:59.484]    // Pre-defined
[12:26:59.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:59.484]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:26:59.484]    __dp=0x00000000
[12:26:59.484]    __ap=0x00000000
[12:26:59.484]    __traceout=0x00000000      (Trace Disabled)
[12:26:59.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:59.484]    __FlashAddr=0x00000000
[12:26:59.484]    __FlashLen=0x00000000
[12:26:59.484]    __FlashArg=0x00000000
[12:26:59.484]    __FlashOp=0x00000000
[12:26:59.485]    __Result=0x00000000
[12:26:59.485]  </debugvars>
[12:26:59.485]  
[12:26:59.485]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:26:59.485]    <block atomic="false" info="">
[12:26:59.485]      __var deviceID = 0;
[12:26:59.485]        // -> [deviceID <= 0x00000000]
[12:26:59.485]      __var version = 0;
[12:26:59.485]        // -> [version <= 0x00000000]
[12:26:59.485]      __var partNum = 0;
[12:26:59.485]        // -> [partNum <= 0x00000000]
[12:26:59.485]      __var manuf = 0;
[12:26:59.485]        // -> [manuf <= 0x00000000]
[12:26:59.485]      __var isMSPM0G1X0X_G3X0X = 0;
[12:26:59.485]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:26:59.485]      __var isProduction = 0;
[12:26:59.485]        // -> [isProduction <= 0x00000000]
[12:26:59.485]      __var continueId = 0;
[12:26:59.487]        // -> [continueId <= 0x00000000]
[12:26:59.487]      deviceID =   Read32(0x41C40004);
[12:26:59.492]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:26:59.492]        // -> [deviceID <= 0x2BB8802F]
[12:26:59.492]      version = deviceID >> 28;
[12:26:59.492]        // -> [version <= 0x00000002]
[12:26:59.492]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:26:59.492]        // -> [partNum <= 0x0000BB88]
[12:26:59.492]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:26:59.492]        // -> [manuf <= 0x00000017]
[12:26:59.492]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:26:59.492]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:26:59.492]      isProduction = (version > 0);
[12:26:59.492]        // -> [isProduction <= 0x00000001]
[12:26:59.492]    </block>
[12:26:59.492]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:26:59.492]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:26:59.492]        // =>  FALSE
[12:26:59.492]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:26:59.492]    </control>
[12:26:59.492]    <control if="continueId == 4" while="" timeout="0" info="">
[12:26:59.492]      // if-block "continueId == 4"
[12:26:59.492]        // =>  FALSE
[12:26:59.492]      // skip if-block "continueId == 4"
[12:26:59.492]    </control>
[12:26:59.492]    <control if="!isProduction" while="" timeout="0" info="">
[12:26:59.492]      // if-block "!isProduction"
[12:26:59.492]        // =>  FALSE
[12:26:59.492]      // skip if-block "!isProduction"
[12:26:59.492]    </control>
[12:26:59.492]  </sequence>
[12:26:59.492]  
[12:27:04.599]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:27:04.599]  
[12:27:04.607]  <debugvars>
[12:27:04.607]    // Pre-defined
[12:27:04.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:04.607]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:04.607]    __dp=0x00000000
[12:27:04.607]    __ap=0x00000000
[12:27:04.607]    __traceout=0x00000000      (Trace Disabled)
[12:27:04.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:04.607]    __FlashAddr=0x00000000
[12:27:04.607]    __FlashLen=0x00000000
[12:27:04.607]    __FlashArg=0x00000000
[12:27:04.607]    __FlashOp=0x00000000
[12:27:04.607]    __Result=0x00000000
[12:27:04.607]  </debugvars>
[12:27:04.609]  
[12:27:04.609]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:27:04.609]    <block atomic="false" info="">
[12:27:04.609]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:27:04.609]        // -> [isSWJ <= 0x00000001]
[12:27:04.610]      __var hasDormant = __protocol & 0x00020000;
[12:27:04.610]        // -> [hasDormant <= 0x00000000]
[12:27:04.610]      __var protType   = __protocol & 0x0000FFFF;
[12:27:04.610]        // -> [protType <= 0x00000002]
[12:27:04.610]    </block>
[12:27:04.610]    <control if="protType == 1" while="" timeout="0" info="">
[12:27:04.610]      // if-block "protType == 1"
[12:27:04.610]        // =>  FALSE
[12:27:04.610]      // skip if-block "protType == 1"
[12:27:04.610]    </control>
[12:27:04.610]    <control if="protType == 2" while="" timeout="0" info="">
[12:27:04.610]      // if-block "protType == 2"
[12:27:04.610]        // =>  TRUE
[12:27:04.610]      <control if="isSWJ" while="" timeout="0" info="">
[12:27:04.610]        // if-block "isSWJ"
[12:27:04.610]          // =>  TRUE
[12:27:04.610]        <control if="hasDormant" while="" timeout="0" info="">
[12:27:04.611]          // if-block "hasDormant"
[12:27:04.611]            // =>  FALSE
[12:27:04.611]          // skip if-block "hasDormant"
[12:27:04.611]        </control>
[12:27:04.611]        <control if="!hasDormant" while="" timeout="0" info="">
[12:27:04.611]          // if-block "!hasDormant"
[12:27:04.611]            // =>  TRUE
[12:27:04.611]          <block atomic="false" info="">
[12:27:04.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:27:04.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:04.613]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:27:04.615]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:27:04.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:27:04.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:04.617]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:27:04.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:27:04.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:27:04.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:04.620]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:27:04.620]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:27:04.620]          </block>
[12:27:04.620]          // end if-block "!hasDormant"
[12:27:04.620]        </control>
[12:27:04.620]        // end if-block "isSWJ"
[12:27:04.620]      </control>
[12:27:04.620]      <control if="!isSWJ" while="" timeout="0" info="">
[12:27:04.623]        // if-block "!isSWJ"
[12:27:04.623]          // =>  FALSE
[12:27:04.623]        // skip if-block "!isSWJ"
[12:27:04.623]      </control>
[12:27:04.623]      <block atomic="false" info="">
[12:27:04.623]        ReadDP(0x0);
[12:27:04.624]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:27:04.624]      </block>
[12:27:04.624]      // end if-block "protType == 2"
[12:27:04.624]    </control>
[12:27:04.624]  </sequence>
[12:27:04.624]  
[12:27:04.627]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:27:04.627]  
[12:27:04.627]  <debugvars>
[12:27:04.627]    // Pre-defined
[12:27:04.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:04.627]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:04.627]    __dp=0x00000000
[12:27:04.627]    __ap=0x00000000
[12:27:04.627]    __traceout=0x00000000      (Trace Disabled)
[12:27:04.627]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:04.627]    __FlashAddr=0x00000000
[12:27:04.627]    __FlashLen=0x00000000
[12:27:04.627]    __FlashArg=0x00000000
[12:27:04.627]    __FlashOp=0x00000000
[12:27:04.627]    __Result=0x00000000
[12:27:04.629]  </debugvars>
[12:27:04.629]  
[12:27:04.629]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:27:04.630]    <block atomic="false" info="">
[12:27:04.630]      __var SW_DP_ABORT       = 0x0;
[12:27:04.630]        // -> [SW_DP_ABORT <= 0x00000000]
[12:27:04.630]      __var DP_CTRL_STAT      = 0x4;
[12:27:04.630]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:27:04.630]      __var DP_SELECT         = 0x8;
[12:27:04.630]        // -> [DP_SELECT <= 0x00000008]
[12:27:04.630]      __var powered_down      = 0;
[12:27:04.630]        // -> [powered_down <= 0x00000000]
[12:27:04.630]      WriteDP(DP_SELECT, 0x00000000);
[12:27:04.632]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:27:04.632]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:27:04.634]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:27:04.634]        // -> [powered_down <= 0x00000001]
[12:27:04.634]    </block>
[12:27:04.634]    <control if="powered_down" while="" timeout="0" info="">
[12:27:04.634]      // if-block "powered_down"
[12:27:04.634]        // =>  TRUE
[12:27:04.634]      <block atomic="false" info="">
[12:27:04.634]        Message(0, "Debug/System power-up request sent");
[12:27:04.636]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:27:04.637]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:27:04.637]      </block>
[12:27:04.637]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:27:04.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:27:04.639]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:27:04.639]        // while-condition  =>  FALSE
[12:27:04.639]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:27:04.639]      </control>
[12:27:04.639]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:27:04.639]        // if-block "(__protocol & 0xFFFF) == 1"
[12:27:04.640]          // =>  FALSE
[12:27:04.640]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:27:04.640]      </control>
[12:27:04.640]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:27:04.640]        // if-block "(__protocol & 0xFFFF) == 2"
[12:27:04.640]          // =>  TRUE
[12:27:04.640]        <block atomic="false" info="">
[12:27:04.640]          Message(0, "executing SWD power up");
[12:27:04.641]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:27:04.643]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:27:04.643]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:27:04.645]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:27:04.645]        </block>
[12:27:04.645]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:27:04.645]      </control>
[12:27:04.645]      // end if-block "powered_down"
[12:27:04.645]    </control>
[12:27:04.647]    <block atomic="false" info="">
[12:27:04.647]      __var DEBUG_PORT_VAL    = 0;
[12:27:04.647]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:27:04.647]      __var ACCESS_POINT_VAL  = 0;
[12:27:04.647]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:27:04.647]      __ap = 1; 
[12:27:04.647]        // -> [__ap <= 0x00000001]
[12:27:04.647]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:27:04.650]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:27:04.650]      __ap = 4;
[12:27:04.650]        // -> [__ap <= 0x00000004]
[12:27:04.650]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:04.650]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:27:04.650]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:27:04.650]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:04.650]    </block>
[12:27:04.650]    <block atomic="false" info="">
[12:27:04.650]      __var nReset = 0x80;
[12:27:04.650]        // -> [nReset <= 0x00000080]
[12:27:04.650]      __var canReadPins = 0;
[12:27:04.650]        // -> [canReadPins <= 0x00000000]
[12:27:04.650]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:27:04.650]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:27:04.650]        // -> [canReadPins <= 0x00000001]
[12:27:04.650]    </block>
[12:27:04.650]    <control if="" while="1" timeout="200" info="">
[12:27:04.650]      // while "1"  (timeout="200")
[12:27:04.650]      // while-condition  =>  TRUE
[12:27:04.650]      // while "1"  (timeout="200")
[12:27:04.650]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.659]      // while-condition  =>  TRUE
[12:27:04.659]      // while "1"  (timeout="200")
[12:27:04.669]      // while-condition  =>  TRUE
[12:27:04.669]      // while "1"  (timeout="200")
[12:27:04.669]      // while  =>  TIMEOUT
[12:27:04.669]      // end while "1"
[12:27:04.669]    </control>
[12:27:04.670]    <control if="canReadPins" while="" timeout="0" info="">
[12:27:04.670]      // if-block "canReadPins"
[12:27:04.670]        // =>  TRUE
[12:27:04.670]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:27:04.670]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:27:04.672]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:27:04.672]        // while-condition  =>  FALSE
[12:27:04.672]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:27:04.672]      </control>
[12:27:04.672]      // end if-block "canReadPins"
[12:27:04.672]    </control>
[12:27:04.672]    <control if="!canReadPins" while="" timeout="0" info="">
[12:27:04.672]      // if-block "!canReadPins"
[12:27:04.673]        // =>  FALSE
[12:27:04.673]      // skip if-block "!canReadPins"
[12:27:04.673]    </control>
[12:27:04.673]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:27:04.673]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:04.673]        // =>  TRUE
[12:27:04.673]      <block atomic="false" info="">
[12:27:04.673]        WriteAP(0x00, 0x190008);
[12:27:04.676]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:04.676]        WriteAP(0xF0, 0x01);
[12:27:04.679]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:04.679]      </block>
[12:27:04.679]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:04.679]    </control>
[12:27:04.679]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:27:04.679]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:04.679]        // =>  FALSE
[12:27:04.679]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:04.679]    </control>
[12:27:04.679]    <block atomic="false" info="">
[12:27:04.679]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:04.683]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:27:04.684]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:27:04.684]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:04.685]      __ap = 0; //lets make sure we reset the access point selection
[12:27:04.685]        // -> [__ap <= 0x00000000]
[12:27:04.685]    </block>
[12:27:04.685]  </sequence>
[12:27:04.685]  
[12:27:04.710]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:27:04.710]  
[12:27:04.710]  <debugvars>
[12:27:04.710]    // Pre-defined
[12:27:04.710]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:04.710]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:04.710]    __dp=0x00000000
[12:27:04.710]    __ap=0x00000000
[12:27:04.710]    __traceout=0x00000000      (Trace Disabled)
[12:27:04.710]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:04.710]    __FlashAddr=0x00000000
[12:27:04.710]    __FlashLen=0x00000000
[12:27:04.710]    __FlashArg=0x00000000
[12:27:04.712]    __FlashOp=0x00000000
[12:27:04.712]    __Result=0x00000000
[12:27:04.712]  </debugvars>
[12:27:04.712]  
[12:27:04.712]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:27:04.712]    <block atomic="false" info="">
[12:27:04.712]      __var deviceID = 0;
[12:27:04.712]        // -> [deviceID <= 0x00000000]
[12:27:04.712]      __var version = 0;
[12:27:04.712]        // -> [version <= 0x00000000]
[12:27:04.712]      __var partNum = 0;
[12:27:04.712]        // -> [partNum <= 0x00000000]
[12:27:04.712]      __var manuf = 0;
[12:27:04.712]        // -> [manuf <= 0x00000000]
[12:27:04.713]      __var isMSPM0G1X0X_G3X0X = 0;
[12:27:04.713]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:27:04.713]      __var isProduction = 0;
[12:27:04.713]        // -> [isProduction <= 0x00000000]
[12:27:04.713]      __var continueId = 0;
[12:27:04.713]        // -> [continueId <= 0x00000000]
[12:27:04.713]      deviceID =   Read32(0x41C40004);
[12:27:04.719]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:27:04.719]        // -> [deviceID <= 0x2BB8802F]
[12:27:04.719]      version = deviceID >> 28;
[12:27:04.719]        // -> [version <= 0x00000002]
[12:27:04.719]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:27:04.719]        // -> [partNum <= 0x0000BB88]
[12:27:04.719]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:27:04.719]        // -> [manuf <= 0x00000017]
[12:27:04.719]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:27:04.719]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:27:04.719]      isProduction = (version > 0);
[12:27:04.720]        // -> [isProduction <= 0x00000001]
[12:27:04.720]    </block>
[12:27:04.720]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:27:04.720]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:27:04.720]        // =>  FALSE
[12:27:04.720]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:27:04.720]    </control>
[12:27:04.720]    <control if="continueId == 4" while="" timeout="0" info="">
[12:27:04.720]      // if-block "continueId == 4"
[12:27:04.720]        // =>  FALSE
[12:27:04.721]      // skip if-block "continueId == 4"
[12:27:04.721]    </control>
[12:27:04.721]    <control if="!isProduction" while="" timeout="0" info="">
[12:27:04.721]      // if-block "!isProduction"
[12:27:04.721]        // =>  FALSE
[12:27:04.721]      // skip if-block "!isProduction"
[12:27:04.721]    </control>
[12:27:04.721]  </sequence>
[12:27:04.721]  
[12:27:39.085]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:27:39.085]  
[12:27:39.097]  <debugvars>
[12:27:39.097]    // Pre-defined
[12:27:39.097]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:39.097]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:27:39.097]    __dp=0x00000000
[12:27:39.097]    __ap=0x00000000
[12:27:39.097]    __traceout=0x00000000      (Trace Disabled)
[12:27:39.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:39.097]    __FlashAddr=0x00000000
[12:27:39.097]    __FlashLen=0x00000000
[12:27:39.097]    __FlashArg=0x00000000
[12:27:39.097]    __FlashOp=0x00000000
[12:27:39.097]    __Result=0x00000000
[12:27:39.097]  </debugvars>
[12:27:39.097]  
[12:27:39.097]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:27:39.097]    <block atomic="false" info="">
[12:27:39.097]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:27:39.097]        // -> [isSWJ <= 0x00000001]
[12:27:39.097]      __var hasDormant = __protocol & 0x00020000;
[12:27:39.097]        // -> [hasDormant <= 0x00000000]
[12:27:39.097]      __var protType   = __protocol & 0x0000FFFF;
[12:27:39.097]        // -> [protType <= 0x00000002]
[12:27:39.097]    </block>
[12:27:39.097]    <control if="protType == 1" while="" timeout="0" info="">
[12:27:39.097]      // if-block "protType == 1"
[12:27:39.097]        // =>  FALSE
[12:27:39.097]      // skip if-block "protType == 1"
[12:27:39.097]    </control>
[12:27:39.097]    <control if="protType == 2" while="" timeout="0" info="">
[12:27:39.097]      // if-block "protType == 2"
[12:27:39.097]        // =>  TRUE
[12:27:39.097]      <control if="isSWJ" while="" timeout="0" info="">
[12:27:39.097]        // if-block "isSWJ"
[12:27:39.097]          // =>  TRUE
[12:27:39.097]        <control if="hasDormant" while="" timeout="0" info="">
[12:27:39.097]          // if-block "hasDormant"
[12:27:39.097]            // =>  FALSE
[12:27:39.097]          // skip if-block "hasDormant"
[12:27:39.097]        </control>
[12:27:39.097]        <control if="!hasDormant" while="" timeout="0" info="">
[12:27:39.097]          // if-block "!hasDormant"
[12:27:39.097]            // =>  TRUE
[12:27:39.097]          <block atomic="false" info="">
[12:27:39.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:27:39.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:39.097]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:27:39.097]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:27:39.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:27:39.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:39.105]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:27:39.105]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:27:39.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:27:39.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:39.105]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:27:39.105]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:27:39.105]          </block>
[12:27:39.105]          // end if-block "!hasDormant"
[12:27:39.105]        </control>
[12:27:39.105]        // end if-block "isSWJ"
[12:27:39.105]      </control>
[12:27:39.105]      <control if="!isSWJ" while="" timeout="0" info="">
[12:27:39.105]        // if-block "!isSWJ"
[12:27:39.105]          // =>  FALSE
[12:27:39.105]        // skip if-block "!isSWJ"
[12:27:39.105]      </control>
[12:27:39.105]      <block atomic="false" info="">
[12:27:39.105]        ReadDP(0x0);
[12:27:39.105]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:27:39.105]      </block>
[12:27:39.105]      // end if-block "protType == 2"
[12:27:39.105]    </control>
[12:27:39.105]  </sequence>
[12:27:39.105]  
[12:27:39.115]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:27:39.115]  
[12:27:39.115]  <debugvars>
[12:27:39.115]    // Pre-defined
[12:27:39.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:39.115]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:27:39.115]    __dp=0x00000000
[12:27:39.115]    __ap=0x00000000
[12:27:39.115]    __traceout=0x00000000      (Trace Disabled)
[12:27:39.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:39.115]    __FlashAddr=0x00000000
[12:27:39.115]    __FlashLen=0x00000000
[12:27:39.115]    __FlashArg=0x00000000
[12:27:39.115]    __FlashOp=0x00000000
[12:27:39.115]    __Result=0x00000000
[12:27:39.115]  </debugvars>
[12:27:39.115]  
[12:27:39.115]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:27:39.115]    <block atomic="false" info="">
[12:27:39.115]      __var SW_DP_ABORT       = 0x0;
[12:27:39.115]        // -> [SW_DP_ABORT <= 0x00000000]
[12:27:39.115]      __var DP_CTRL_STAT      = 0x4;
[12:27:39.115]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:27:39.115]      __var DP_SELECT         = 0x8;
[12:27:39.115]        // -> [DP_SELECT <= 0x00000008]
[12:27:39.115]      __var powered_down      = 0;
[12:27:39.115]        // -> [powered_down <= 0x00000000]
[12:27:39.115]      WriteDP(DP_SELECT, 0x00000000);
[12:27:39.125]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:27:39.125]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:27:39.125]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:27:39.125]        // -> [powered_down <= 0x00000001]
[12:27:39.125]    </block>
[12:27:39.125]    <control if="powered_down" while="" timeout="0" info="">
[12:27:39.125]      // if-block "powered_down"
[12:27:39.125]        // =>  TRUE
[12:27:39.125]      <block atomic="false" info="">
[12:27:39.125]        Message(0, "Debug/System power-up request sent");
[12:27:39.125]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:27:39.125]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:27:39.125]      </block>
[12:27:39.125]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:27:39.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:27:39.125]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:27:39.135]        // while-condition  =>  FALSE
[12:27:39.135]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:27:39.135]      </control>
[12:27:39.135]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:27:39.135]        // if-block "(__protocol & 0xFFFF) == 1"
[12:27:39.135]          // =>  FALSE
[12:27:39.135]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:27:39.135]      </control>
[12:27:39.135]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:27:39.135]        // if-block "(__protocol & 0xFFFF) == 2"
[12:27:39.135]          // =>  TRUE
[12:27:39.135]        <block atomic="false" info="">
[12:27:39.135]          Message(0, "executing SWD power up");
[12:27:39.135]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:27:39.135]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:27:39.135]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:27:39.135]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:27:39.135]        </block>
[12:27:39.135]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:27:39.135]      </control>
[12:27:39.135]      // end if-block "powered_down"
[12:27:39.135]    </control>
[12:27:39.135]    <block atomic="false" info="">
[12:27:39.135]      __var DEBUG_PORT_VAL    = 0;
[12:27:39.135]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:27:39.135]      __var ACCESS_POINT_VAL  = 0;
[12:27:39.135]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:27:39.135]      __ap = 1; 
[12:27:39.135]        // -> [__ap <= 0x00000001]
[12:27:39.135]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:27:39.145]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:27:39.145]      __ap = 4;
[12:27:39.145]        // -> [__ap <= 0x00000004]
[12:27:39.145]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:39.145]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:27:39.145]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:27:39.145]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:39.145]    </block>
[12:27:39.145]    <block atomic="false" info="">
[12:27:39.145]      __var nReset = 0x80;
[12:27:39.145]        // -> [nReset <= 0x00000080]
[12:27:39.145]      __var canReadPins = 0;
[12:27:39.145]        // -> [canReadPins <= 0x00000000]
[12:27:39.145]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:27:39.155]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:27:39.155]        // -> [canReadPins <= 0x00000001]
[12:27:39.155]    </block>
[12:27:39.155]    <control if="" while="1" timeout="200" info="">
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.155]      // while-condition  =>  TRUE
[12:27:39.155]      // while "1"  (timeout="200")
[12:27:39.165]      // while-condition  =>  TRUE
[12:27:39.165]      // while "1"  (timeout="200")
[12:27:39.165]      // while  =>  TIMEOUT
[12:27:39.165]      // end while "1"
[12:27:39.165]    </control>
[12:27:39.165]    <control if="canReadPins" while="" timeout="0" info="">
[12:27:39.165]      // if-block "canReadPins"
[12:27:39.165]        // =>  TRUE
[12:27:39.165]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:27:39.165]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:27:39.165]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:27:39.165]        // while-condition  =>  FALSE
[12:27:39.165]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:27:39.165]      </control>
[12:27:39.165]      // end if-block "canReadPins"
[12:27:39.165]    </control>
[12:27:39.165]    <control if="!canReadPins" while="" timeout="0" info="">
[12:27:39.165]      // if-block "!canReadPins"
[12:27:39.165]        // =>  FALSE
[12:27:39.165]      // skip if-block "!canReadPins"
[12:27:39.165]    </control>
[12:27:39.165]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:27:39.165]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:39.165]        // =>  TRUE
[12:27:39.165]      <block atomic="false" info="">
[12:27:39.165]        WriteAP(0x00, 0x190008);
[12:27:39.165]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:39.165]        WriteAP(0xF0, 0x01);
[12:27:39.175]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:39.175]      </block>
[12:27:39.175]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:39.175]    </control>
[12:27:39.175]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:27:39.175]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:39.175]        // =>  FALSE
[12:27:39.175]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:39.175]    </control>
[12:27:39.175]    <block atomic="false" info="">
[12:27:39.175]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:39.175]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:27:39.175]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:27:39.175]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:39.175]      __ap = 0; //lets make sure we reset the access point selection
[12:27:39.175]        // -> [__ap <= 0x00000000]
[12:27:39.175]    </block>
[12:27:39.175]  </sequence>
[12:27:39.175]  
[12:27:39.195]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:27:39.195]  
[12:27:39.195]  <debugvars>
[12:27:39.195]    // Pre-defined
[12:27:39.195]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:39.195]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:27:39.195]    __dp=0x00000000
[12:27:39.195]    __ap=0x00000000
[12:27:39.195]    __traceout=0x00000000      (Trace Disabled)
[12:27:39.195]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:39.195]    __FlashAddr=0x00000000
[12:27:39.195]    __FlashLen=0x00000000
[12:27:39.195]    __FlashArg=0x00000000
[12:27:39.195]    __FlashOp=0x00000000
[12:27:39.195]    __Result=0x00000000
[12:27:39.195]  </debugvars>
[12:27:39.195]  
[12:27:39.195]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:27:39.195]    <block atomic="false" info="">
[12:27:39.195]      __var deviceID = 0;
[12:27:39.195]        // -> [deviceID <= 0x00000000]
[12:27:39.195]      __var version = 0;
[12:27:39.195]        // -> [version <= 0x00000000]
[12:27:39.195]      __var partNum = 0;
[12:27:39.195]        // -> [partNum <= 0x00000000]
[12:27:39.205]      __var manuf = 0;
[12:27:39.205]        // -> [manuf <= 0x00000000]
[12:27:39.205]      __var isMSPM0G1X0X_G3X0X = 0;
[12:27:39.205]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:27:39.205]      __var isProduction = 0;
[12:27:39.205]        // -> [isProduction <= 0x00000000]
[12:27:39.205]      __var continueId = 0;
[12:27:39.205]        // -> [continueId <= 0x00000000]
[12:27:39.205]      deviceID =   Read32(0x41C40004);
[12:27:39.205]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:27:39.205]        // -> [deviceID <= 0x2BB8802F]
[12:27:39.205]      version = deviceID >> 28;
[12:27:39.205]        // -> [version <= 0x00000002]
[12:27:39.205]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:27:39.205]        // -> [partNum <= 0x0000BB88]
[12:27:39.205]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:27:39.205]        // -> [manuf <= 0x00000017]
[12:27:39.205]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:27:39.205]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:27:39.205]      isProduction = (version > 0);
[12:27:39.205]        // -> [isProduction <= 0x00000001]
[12:27:39.205]    </block>
[12:27:39.205]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:27:39.205]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:27:39.205]        // =>  FALSE
[12:27:39.205]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:27:39.205]    </control>
[12:27:39.205]    <control if="continueId == 4" while="" timeout="0" info="">
[12:27:39.205]      // if-block "continueId == 4"
[12:27:39.205]        // =>  FALSE
[12:27:39.205]      // skip if-block "continueId == 4"
[12:27:39.205]    </control>
[12:27:39.205]    <control if="!isProduction" while="" timeout="0" info="">
[12:27:39.205]      // if-block "!isProduction"
[12:27:39.205]        // =>  FALSE
[12:27:39.205]      // skip if-block "!isProduction"
[12:27:39.205]    </control>
[12:27:39.205]  </sequence>
[12:27:39.205]  
[12:27:44.396]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:27:44.396]  
[12:27:44.414]  <debugvars>
[12:27:44.414]    // Pre-defined
[12:27:44.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:44.414]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:44.414]    __dp=0x00000000
[12:27:44.414]    __ap=0x00000000
[12:27:44.414]    __traceout=0x00000000      (Trace Disabled)
[12:27:44.414]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:44.414]    __FlashAddr=0x00000000
[12:27:44.414]    __FlashLen=0x00000000
[12:27:44.414]    __FlashArg=0x00000000
[12:27:44.414]    __FlashOp=0x00000000
[12:27:44.414]    __Result=0x00000000
[12:27:44.414]  </debugvars>
[12:27:44.414]  
[12:27:44.414]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:27:44.414]    <block atomic="false" info="">
[12:27:44.416]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:27:44.416]        // -> [isSWJ <= 0x00000001]
[12:27:44.416]      __var hasDormant = __protocol & 0x00020000;
[12:27:44.416]        // -> [hasDormant <= 0x00000000]
[12:27:44.416]      __var protType   = __protocol & 0x0000FFFF;
[12:27:44.416]        // -> [protType <= 0x00000002]
[12:27:44.416]    </block>
[12:27:44.416]    <control if="protType == 1" while="" timeout="0" info="">
[12:27:44.416]      // if-block "protType == 1"
[12:27:44.416]        // =>  FALSE
[12:27:44.416]      // skip if-block "protType == 1"
[12:27:44.416]    </control>
[12:27:44.416]    <control if="protType == 2" while="" timeout="0" info="">
[12:27:44.416]      // if-block "protType == 2"
[12:27:44.416]        // =>  TRUE
[12:27:44.416]      <control if="isSWJ" while="" timeout="0" info="">
[12:27:44.416]        // if-block "isSWJ"
[12:27:44.416]          // =>  TRUE
[12:27:44.416]        <control if="hasDormant" while="" timeout="0" info="">
[12:27:44.416]          // if-block "hasDormant"
[12:27:44.416]            // =>  FALSE
[12:27:44.416]          // skip if-block "hasDormant"
[12:27:44.416]        </control>
[12:27:44.416]        <control if="!hasDormant" while="" timeout="0" info="">
[12:27:44.416]          // if-block "!hasDormant"
[12:27:44.416]            // =>  TRUE
[12:27:44.416]          <block atomic="false" info="">
[12:27:44.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:27:44.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:44.420]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:27:44.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:27:44.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:27:44.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:44.422]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:27:44.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:27:44.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:27:44.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:44.426]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:27:44.426]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:27:44.426]          </block>
[12:27:44.426]          // end if-block "!hasDormant"
[12:27:44.426]        </control>
[12:27:44.426]        // end if-block "isSWJ"
[12:27:44.426]      </control>
[12:27:44.426]      <control if="!isSWJ" while="" timeout="0" info="">
[12:27:44.426]        // if-block "!isSWJ"
[12:27:44.426]          // =>  FALSE
[12:27:44.426]        // skip if-block "!isSWJ"
[12:27:44.426]      </control>
[12:27:44.426]      <block atomic="false" info="">
[12:27:44.426]        ReadDP(0x0);
[12:27:44.426]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:27:44.426]      </block>
[12:27:44.426]      // end if-block "protType == 2"
[12:27:44.426]    </control>
[12:27:44.426]  </sequence>
[12:27:44.426]  
[12:27:44.438]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:27:44.438]  
[12:27:44.438]  <debugvars>
[12:27:44.438]    // Pre-defined
[12:27:44.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:44.438]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:44.438]    __dp=0x00000000
[12:27:44.438]    __ap=0x00000000
[12:27:44.438]    __traceout=0x00000000      (Trace Disabled)
[12:27:44.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:44.438]    __FlashAddr=0x00000000
[12:27:44.438]    __FlashLen=0x00000000
[12:27:44.438]    __FlashArg=0x00000000
[12:27:44.438]    __FlashOp=0x00000000
[12:27:44.438]    __Result=0x00000000
[12:27:44.438]  </debugvars>
[12:27:44.438]  
[12:27:44.438]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:27:44.438]    <block atomic="false" info="">
[12:27:44.438]      __var SW_DP_ABORT       = 0x0;
[12:27:44.438]        // -> [SW_DP_ABORT <= 0x00000000]
[12:27:44.438]      __var DP_CTRL_STAT      = 0x4;
[12:27:44.438]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:27:44.438]      __var DP_SELECT         = 0x8;
[12:27:44.438]        // -> [DP_SELECT <= 0x00000008]
[12:27:44.438]      __var powered_down      = 0;
[12:27:44.438]        // -> [powered_down <= 0x00000000]
[12:27:44.438]      WriteDP(DP_SELECT, 0x00000000);
[12:27:44.438]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:27:44.438]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:27:44.446]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:27:44.446]        // -> [powered_down <= 0x00000001]
[12:27:44.446]    </block>
[12:27:44.446]    <control if="powered_down" while="" timeout="0" info="">
[12:27:44.446]      // if-block "powered_down"
[12:27:44.446]        // =>  TRUE
[12:27:44.446]      <block atomic="false" info="">
[12:27:44.446]        Message(0, "Debug/System power-up request sent");
[12:27:44.446]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:27:44.446]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:27:44.446]      </block>
[12:27:44.446]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:27:44.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:27:44.446]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:27:44.446]        // while-condition  =>  FALSE
[12:27:44.446]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:27:44.446]      </control>
[12:27:44.446]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:27:44.446]        // if-block "(__protocol & 0xFFFF) == 1"
[12:27:44.446]          // =>  FALSE
[12:27:44.446]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:27:44.446]      </control>
[12:27:44.446]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:27:44.446]        // if-block "(__protocol & 0xFFFF) == 2"
[12:27:44.446]          // =>  TRUE
[12:27:44.446]        <block atomic="false" info="">
[12:27:44.446]          Message(0, "executing SWD power up");
[12:27:44.446]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:27:44.457]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:27:44.457]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:27:44.457]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:27:44.457]        </block>
[12:27:44.457]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:27:44.457]      </control>
[12:27:44.457]      // end if-block "powered_down"
[12:27:44.457]    </control>
[12:27:44.457]    <block atomic="false" info="">
[12:27:44.457]      __var DEBUG_PORT_VAL    = 0;
[12:27:44.457]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:27:44.457]      __var ACCESS_POINT_VAL  = 0;
[12:27:44.457]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:27:44.457]      __ap = 1; 
[12:27:44.457]        // -> [__ap <= 0x00000001]
[12:27:44.457]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:27:44.457]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:27:44.457]      __ap = 4;
[12:27:44.457]        // -> [__ap <= 0x00000004]
[12:27:44.457]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:44.468]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:27:44.468]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:27:44.468]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:44.468]    </block>
[12:27:44.468]    <block atomic="false" info="">
[12:27:44.468]      __var nReset = 0x80;
[12:27:44.468]        // -> [nReset <= 0x00000080]
[12:27:44.468]      __var canReadPins = 0;
[12:27:44.468]        // -> [canReadPins <= 0x00000000]
[12:27:44.468]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:27:44.468]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:27:44.468]        // -> [canReadPins <= 0x00000001]
[12:27:44.468]    </block>
[12:27:44.468]    <control if="" while="1" timeout="200" info="">
[12:27:44.468]      // while "1"  (timeout="200")
[12:27:44.468]      // while-condition  =>  TRUE
[12:27:44.468]      // while "1"  (timeout="200")
[12:27:44.468]      // while-condition  =>  TRUE
[12:27:44.468]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.474]      // while-condition  =>  TRUE
[12:27:44.474]      // while "1"  (timeout="200")
[12:27:44.477]      // while-condition  =>  TRUE
[12:27:44.477]      // while "1"  (timeout="200")
[12:27:44.477]      // while  =>  TIMEOUT
[12:27:44.477]      // end while "1"
[12:27:44.477]    </control>
[12:27:44.477]    <control if="canReadPins" while="" timeout="0" info="">
[12:27:44.477]      // if-block "canReadPins"
[12:27:44.477]        // =>  TRUE
[12:27:44.477]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:27:44.477]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:27:44.477]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:27:44.477]        // while-condition  =>  FALSE
[12:27:44.477]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:27:44.477]      </control>
[12:27:44.477]      // end if-block "canReadPins"
[12:27:44.477]    </control>
[12:27:44.477]    <control if="!canReadPins" while="" timeout="0" info="">
[12:27:44.477]      // if-block "!canReadPins"
[12:27:44.477]        // =>  FALSE
[12:27:44.477]      // skip if-block "!canReadPins"
[12:27:44.477]    </control>
[12:27:44.477]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:27:44.477]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:44.477]        // =>  TRUE
[12:27:44.477]      <block atomic="false" info="">
[12:27:44.477]        WriteAP(0x00, 0x190008);
[12:27:44.477]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:44.477]        WriteAP(0xF0, 0x01);
[12:27:44.477]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:44.477]      </block>
[12:27:44.477]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:44.477]    </control>
[12:27:44.477]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:27:44.477]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:44.487]        // =>  FALSE
[12:27:44.487]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:44.487]    </control>
[12:27:44.487]    <block atomic="false" info="">
[12:27:44.487]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:44.487]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:27:44.487]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:27:44.487]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:44.487]      __ap = 0; //lets make sure we reset the access point selection
[12:27:44.487]        // -> [__ap <= 0x00000000]
[12:27:44.487]    </block>
[12:27:44.487]  </sequence>
[12:27:44.487]  
[12:27:44.507]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:27:44.507]  
[12:27:44.507]  <debugvars>
[12:27:44.507]    // Pre-defined
[12:27:44.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:44.507]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:44.507]    __dp=0x00000000
[12:27:44.507]    __ap=0x00000000
[12:27:44.507]    __traceout=0x00000000      (Trace Disabled)
[12:27:44.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:44.507]    __FlashAddr=0x00000000
[12:27:44.507]    __FlashLen=0x00000000
[12:27:44.507]    __FlashArg=0x00000000
[12:27:44.507]    __FlashOp=0x00000000
[12:27:44.507]    __Result=0x00000000
[12:27:44.507]  </debugvars>
[12:27:44.507]  
[12:27:44.507]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:27:44.507]    <block atomic="false" info="">
[12:27:44.507]      __var deviceID = 0;
[12:27:44.507]        // -> [deviceID <= 0x00000000]
[12:27:44.507]      __var version = 0;
[12:27:44.507]        // -> [version <= 0x00000000]
[12:27:44.507]      __var partNum = 0;
[12:27:44.507]        // -> [partNum <= 0x00000000]
[12:27:44.507]      __var manuf = 0;
[12:27:44.507]        // -> [manuf <= 0x00000000]
[12:27:44.507]      __var isMSPM0G1X0X_G3X0X = 0;
[12:27:44.507]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:27:44.507]      __var isProduction = 0;
[12:27:44.507]        // -> [isProduction <= 0x00000000]
[12:27:44.507]      __var continueId = 0;
[12:27:44.507]        // -> [continueId <= 0x00000000]
[12:27:44.507]      deviceID =   Read32(0x41C40004);
[12:27:44.517]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:27:44.517]        // -> [deviceID <= 0x2BB8802F]
[12:27:44.517]      version = deviceID >> 28;
[12:27:44.517]        // -> [version <= 0x00000002]
[12:27:44.517]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:27:44.517]        // -> [partNum <= 0x0000BB88]
[12:27:44.517]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:27:44.517]        // -> [manuf <= 0x00000017]
[12:27:44.517]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:27:44.517]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:27:44.517]      isProduction = (version > 0);
[12:27:44.517]        // -> [isProduction <= 0x00000001]
[12:27:44.517]    </block>
[12:27:44.517]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:27:44.517]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:27:44.517]        // =>  FALSE
[12:27:44.517]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:27:44.517]    </control>
[12:27:44.517]    <control if="continueId == 4" while="" timeout="0" info="">
[12:27:44.517]      // if-block "continueId == 4"
[12:27:44.517]        // =>  FALSE
[12:27:44.517]      // skip if-block "continueId == 4"
[12:27:44.517]    </control>
[12:27:44.517]    <control if="!isProduction" while="" timeout="0" info="">
[12:27:44.517]      // if-block "!isProduction"
[12:27:44.517]        // =>  FALSE
[12:27:44.517]      // skip if-block "!isProduction"
[12:27:44.517]    </control>
[12:27:44.517]  </sequence>
[12:27:44.517]  
[12:28:20.279]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:28:20.279]  
[12:28:20.290]  <debugvars>
[12:28:20.290]    // Pre-defined
[12:28:20.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:28:20.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:28:20.290]    __dp=0x00000000
[12:28:20.290]    __ap=0x00000000
[12:28:20.290]    __traceout=0x00000000      (Trace Disabled)
[12:28:20.290]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:28:20.290]    __FlashAddr=0x00000000
[12:28:20.290]    __FlashLen=0x00000000
[12:28:20.290]    __FlashArg=0x00000000
[12:28:20.290]    __FlashOp=0x00000000
[12:28:20.290]    __Result=0x00000000
[12:28:20.290]  </debugvars>
[12:28:20.290]  
[12:28:20.290]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:28:20.290]    <block atomic="false" info="">
[12:28:20.290]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:28:20.290]        // -> [isSWJ <= 0x00000001]
[12:28:20.290]      __var hasDormant = __protocol & 0x00020000;
[12:28:20.290]        // -> [hasDormant <= 0x00000000]
[12:28:20.290]      __var protType   = __protocol & 0x0000FFFF;
[12:28:20.290]        // -> [protType <= 0x00000002]
[12:28:20.290]    </block>
[12:28:20.290]    <control if="protType == 1" while="" timeout="0" info="">
[12:28:20.290]      // if-block "protType == 1"
[12:28:20.290]        // =>  FALSE
[12:28:20.290]      // skip if-block "protType == 1"
[12:28:20.290]    </control>
[12:28:20.290]    <control if="protType == 2" while="" timeout="0" info="">
[12:28:20.290]      // if-block "protType == 2"
[12:28:20.290]        // =>  TRUE
[12:28:20.290]      <control if="isSWJ" while="" timeout="0" info="">
[12:28:20.290]        // if-block "isSWJ"
[12:28:20.290]          // =>  TRUE
[12:28:20.290]        <control if="hasDormant" while="" timeout="0" info="">
[12:28:20.295]          // if-block "hasDormant"
[12:28:20.295]            // =>  FALSE
[12:28:20.295]          // skip if-block "hasDormant"
[12:28:20.295]        </control>
[12:28:20.295]        <control if="!hasDormant" while="" timeout="0" info="">
[12:28:20.295]          // if-block "!hasDormant"
[12:28:20.295]            // =>  TRUE
[12:28:20.295]          <block atomic="false" info="">
[12:28:20.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:28:20.295]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:28:20.295]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:28:20.295]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:28:20.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:28:20.299]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:28:20.299]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:28:20.299]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:28:20.299]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:28:20.299]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:28:20.299]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:28:20.299]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:28:20.305]          </block>
[12:28:20.305]          // end if-block "!hasDormant"
[12:28:20.305]        </control>
[12:28:20.305]        // end if-block "isSWJ"
[12:28:20.305]      </control>
[12:28:20.305]      <control if="!isSWJ" while="" timeout="0" info="">
[12:28:20.305]        // if-block "!isSWJ"
[12:28:20.305]          // =>  FALSE
[12:28:20.305]        // skip if-block "!isSWJ"
[12:28:20.305]      </control>
[12:28:20.305]      <block atomic="false" info="">
[12:28:20.305]        ReadDP(0x0);
[12:28:20.305]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:28:20.305]      </block>
[12:28:20.305]      // end if-block "protType == 2"
[12:28:20.305]    </control>
[12:28:20.305]  </sequence>
[12:28:20.305]  
[12:28:20.309]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:28:20.309]  
[12:28:20.309]  <debugvars>
[12:28:20.309]    // Pre-defined
[12:28:20.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:28:20.309]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:28:20.309]    __dp=0x00000000
[12:28:20.309]    __ap=0x00000000
[12:28:20.309]    __traceout=0x00000000      (Trace Disabled)
[12:28:20.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:28:20.309]    __FlashAddr=0x00000000
[12:28:20.309]    __FlashLen=0x00000000
[12:28:20.309]    __FlashArg=0x00000000
[12:28:20.309]    __FlashOp=0x00000000
[12:28:20.309]    __Result=0x00000000
[12:28:20.309]  </debugvars>
[12:28:20.309]  
[12:28:20.309]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:28:20.309]    <block atomic="false" info="">
[12:28:20.309]      __var SW_DP_ABORT       = 0x0;
[12:28:20.309]        // -> [SW_DP_ABORT <= 0x00000000]
[12:28:20.309]      __var DP_CTRL_STAT      = 0x4;
[12:28:20.309]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:28:20.309]      __var DP_SELECT         = 0x8;
[12:28:20.309]        // -> [DP_SELECT <= 0x00000008]
[12:28:20.309]      __var powered_down      = 0;
[12:28:20.309]        // -> [powered_down <= 0x00000000]
[12:28:20.309]      WriteDP(DP_SELECT, 0x00000000);
[12:28:20.309]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:28:20.309]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:28:20.315]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:28:20.315]        // -> [powered_down <= 0x00000001]
[12:28:20.315]    </block>
[12:28:20.315]    <control if="powered_down" while="" timeout="0" info="">
[12:28:20.315]      // if-block "powered_down"
[12:28:20.315]        // =>  TRUE
[12:28:20.315]      <block atomic="false" info="">
[12:28:20.315]        Message(0, "Debug/System power-up request sent");
[12:28:20.315]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:28:20.320]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:28:20.320]      </block>
[12:28:20.320]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:28:20.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:28:20.322]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:28:20.322]        // while-condition  =>  FALSE
[12:28:20.322]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:28:20.322]      </control>
[12:28:20.322]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:28:20.322]        // if-block "(__protocol & 0xFFFF) == 1"
[12:28:20.322]          // =>  FALSE
[12:28:20.322]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:28:20.322]      </control>
[12:28:20.322]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:28:20.322]        // if-block "(__protocol & 0xFFFF) == 2"
[12:28:20.322]          // =>  TRUE
[12:28:20.322]        <block atomic="false" info="">
[12:28:20.322]          Message(0, "executing SWD power up");
[12:28:20.325]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:28:20.325]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:28:20.325]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:28:20.325]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:28:20.325]        </block>
[12:28:20.325]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:28:20.325]      </control>
[12:28:20.325]      // end if-block "powered_down"
[12:28:20.325]    </control>
[12:28:20.325]    <block atomic="false" info="">
[12:28:20.325]      __var DEBUG_PORT_VAL    = 0;
[12:28:20.325]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:28:20.325]      __var ACCESS_POINT_VAL  = 0;
[12:28:20.325]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:28:20.325]      __ap = 1; 
[12:28:20.325]        // -> [__ap <= 0x00000001]
[12:28:20.325]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:28:20.330]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:28:20.330]      __ap = 4;
[12:28:20.330]        // -> [__ap <= 0x00000004]
[12:28:20.330]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:28:20.335]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:28:20.335]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:28:20.335]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:28:20.335]    </block>
[12:28:20.335]    <block atomic="false" info="">
[12:28:20.340]      __var nReset = 0x80;
[12:28:20.340]        // -> [nReset <= 0x00000080]
[12:28:20.341]      __var canReadPins = 0;
[12:28:20.341]        // -> [canReadPins <= 0x00000000]
[12:28:20.341]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:28:20.341]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:28:20.341]        // -> [canReadPins <= 0x00000001]
[12:28:20.341]    </block>
[12:28:20.341]    <control if="" while="1" timeout="200" info="">
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.341]      // while-condition  =>  TRUE
[12:28:20.341]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.345]      // while "1"  (timeout="200")
[12:28:20.345]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.350]      // while-condition  =>  TRUE
[12:28:20.350]      // while "1"  (timeout="200")
[12:28:20.355]      // while-condition  =>  TRUE
[12:28:20.355]      // while "1"  (timeout="200")
[12:28:20.355]      // while  =>  TIMEOUT
[12:28:20.355]      // end while "1"
[12:28:20.355]    </control>
[12:28:20.355]    <control if="canReadPins" while="" timeout="0" info="">
[12:28:20.355]      // if-block "canReadPins"
[12:28:20.355]        // =>  TRUE
[12:28:20.355]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:28:20.355]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:28:20.355]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:28:20.355]        // while-condition  =>  FALSE
[12:28:20.355]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:28:20.355]      </control>
[12:28:20.355]      // end if-block "canReadPins"
[12:28:20.355]    </control>
[12:28:20.355]    <control if="!canReadPins" while="" timeout="0" info="">
[12:28:20.355]      // if-block "!canReadPins"
[12:28:20.355]        // =>  FALSE
[12:28:20.355]      // skip if-block "!canReadPins"
[12:28:20.355]    </control>
[12:28:20.355]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:28:20.355]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:28:20.355]        // =>  TRUE
[12:28:20.355]      <block atomic="false" info="">
[12:28:20.355]        WriteAP(0x00, 0x190008);
[12:28:20.360]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:28:20.360]        WriteAP(0xF0, 0x01);
[12:28:20.360]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:28:20.360]      </block>
[12:28:20.360]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:28:20.360]    </control>
[12:28:20.360]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:28:20.360]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:28:20.360]        // =>  FALSE
[12:28:20.360]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:28:20.360]    </control>
[12:28:20.360]    <block atomic="false" info="">
[12:28:20.360]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:28:20.365]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:28:20.365]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:28:20.365]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:28:20.370]      __ap = 0; //lets make sure we reset the access point selection
[12:28:20.370]        // -> [__ap <= 0x00000000]
[12:28:20.371]    </block>
[12:28:20.371]  </sequence>
[12:28:20.371]  
[12:28:20.400]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:28:20.400]  
[12:28:20.400]  <debugvars>
[12:28:20.400]    // Pre-defined
[12:28:20.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:28:20.400]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:28:20.400]    __dp=0x00000000
[12:28:20.400]    __ap=0x00000000
[12:28:20.400]    __traceout=0x00000000      (Trace Disabled)
[12:28:20.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:28:20.400]    __FlashAddr=0x00000000
[12:28:20.400]    __FlashLen=0x00000000
[12:28:20.400]    __FlashArg=0x00000000
[12:28:20.400]    __FlashOp=0x00000000
[12:28:20.400]    __Result=0x00000000
[12:28:20.400]  </debugvars>
[12:28:20.400]  
[12:28:20.400]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:28:20.400]    <block atomic="false" info="">
[12:28:20.400]      __var deviceID = 0;
[12:28:20.400]        // -> [deviceID <= 0x00000000]
[12:28:20.400]      __var version = 0;
[12:28:20.400]        // -> [version <= 0x00000000]
[12:28:20.400]      __var partNum = 0;
[12:28:20.400]        // -> [partNum <= 0x00000000]
[12:28:20.400]      __var manuf = 0;
[12:28:20.400]        // -> [manuf <= 0x00000000]
[12:28:20.405]      __var isMSPM0G1X0X_G3X0X = 0;
[12:28:20.405]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:28:20.405]      __var isProduction = 0;
[12:28:20.405]        // -> [isProduction <= 0x00000000]
[12:28:20.405]      __var continueId = 0;
[12:28:20.405]        // -> [continueId <= 0x00000000]
[12:28:20.405]      deviceID =   Read32(0x41C40004);
[12:28:20.410]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:28:20.410]        // -> [deviceID <= 0x2BB8802F]
[12:28:20.410]      version = deviceID >> 28;
[12:28:20.410]        // -> [version <= 0x00000002]
[12:28:20.410]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:28:20.410]        // -> [partNum <= 0x0000BB88]
[12:28:20.410]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:28:20.410]        // -> [manuf <= 0x00000017]
[12:28:20.410]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:28:20.410]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:28:20.410]      isProduction = (version > 0);
[12:28:20.410]        // -> [isProduction <= 0x00000001]
[12:28:20.410]    </block>
[12:28:20.410]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:28:20.410]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:28:20.410]        // =>  FALSE
[12:28:20.410]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:28:20.410]    </control>
[12:28:20.410]    <control if="continueId == 4" while="" timeout="0" info="">
[12:28:20.410]      // if-block "continueId == 4"
[12:28:20.410]        // =>  FALSE
[12:28:20.410]      // skip if-block "continueId == 4"
[12:28:20.410]    </control>
[12:28:20.410]    <control if="!isProduction" while="" timeout="0" info="">
[12:28:20.410]      // if-block "!isProduction"
[12:28:20.410]        // =>  FALSE
[12:28:20.410]      // skip if-block "!isProduction"
[12:28:20.410]    </control>
[12:28:20.410]  </sequence>
[12:28:20.410]  
[12:28:25.536]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:28:25.536]  
[12:28:25.545]  <debugvars>
[12:28:25.545]    // Pre-defined
[12:28:25.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:28:25.545]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:28:25.545]    __dp=0x00000000
[12:28:25.545]    __ap=0x00000000
[12:28:25.545]    __traceout=0x00000000      (Trace Disabled)
[12:28:25.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:28:25.545]    __FlashAddr=0x00000000
[12:28:25.545]    __FlashLen=0x00000000
[12:28:25.545]    __FlashArg=0x00000000
[12:28:25.545]    __FlashOp=0x00000000
[12:28:25.545]    __Result=0x00000000
[12:28:25.545]  </debugvars>
[12:28:25.546]  
[12:28:25.546]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:28:25.546]    <block atomic="false" info="">
[12:28:25.546]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:28:25.546]        // -> [isSWJ <= 0x00000001]
[12:28:25.546]      __var hasDormant = __protocol & 0x00020000;
[12:28:25.546]        // -> [hasDormant <= 0x00000000]
[12:28:25.546]      __var protType   = __protocol & 0x0000FFFF;
[12:28:25.546]        // -> [protType <= 0x00000002]
[12:28:25.546]    </block>
[12:28:25.548]    <control if="protType == 1" while="" timeout="0" info="">
[12:28:25.548]      // if-block "protType == 1"
[12:28:25.548]        // =>  FALSE
[12:28:25.548]      // skip if-block "protType == 1"
[12:28:25.548]    </control>
[12:28:25.548]    <control if="protType == 2" while="" timeout="0" info="">
[12:28:25.548]      // if-block "protType == 2"
[12:28:25.548]        // =>  TRUE
[12:28:25.548]      <control if="isSWJ" while="" timeout="0" info="">
[12:28:25.548]        // if-block "isSWJ"
[12:28:25.548]          // =>  TRUE
[12:28:25.548]        <control if="hasDormant" while="" timeout="0" info="">
[12:28:25.548]          // if-block "hasDormant"
[12:28:25.548]            // =>  FALSE
[12:28:25.548]          // skip if-block "hasDormant"
[12:28:25.548]        </control>
[12:28:25.548]        <control if="!hasDormant" while="" timeout="0" info="">
[12:28:25.548]          // if-block "!hasDormant"
[12:28:25.548]            // =>  TRUE
[12:28:25.548]          <block atomic="false" info="">
[12:28:25.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:28:25.548]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:28:25.548]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:28:25.548]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:28:25.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:28:25.548]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:28:25.548]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:28:25.548]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:28:25.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:28:25.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:28:25.557]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:28:25.557]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:28:25.557]          </block>
[12:28:25.557]          // end if-block "!hasDormant"
[12:28:25.557]        </control>
[12:28:25.557]        // end if-block "isSWJ"
[12:28:25.557]      </control>
[12:28:25.557]      <control if="!isSWJ" while="" timeout="0" info="">
[12:28:25.557]        // if-block "!isSWJ"
[12:28:25.557]          // =>  FALSE
[12:28:25.557]        // skip if-block "!isSWJ"
[12:28:25.557]      </control>
[12:28:25.557]      <block atomic="false" info="">
[12:28:25.557]        ReadDP(0x0);
[12:28:25.557]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:28:25.557]      </block>
[12:28:25.557]      // end if-block "protType == 2"
[12:28:25.557]    </control>
[12:28:25.557]  </sequence>
[12:28:25.557]  
[12:28:25.557]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:28:25.557]  
[12:28:25.557]  <debugvars>
[12:28:25.557]    // Pre-defined
[12:28:25.557]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:28:25.557]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:28:25.557]    __dp=0x00000000
[12:28:25.557]    __ap=0x00000000
[12:28:25.557]    __traceout=0x00000000      (Trace Disabled)
[12:28:25.557]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:28:25.567]    __FlashAddr=0x00000000
[12:28:25.567]    __FlashLen=0x00000000
[12:28:25.567]    __FlashArg=0x00000000
[12:28:25.567]    __FlashOp=0x00000000
[12:28:25.567]    __Result=0x00000000
[12:28:25.567]  </debugvars>
[12:28:25.567]  
[12:28:25.567]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:28:25.567]    <block atomic="false" info="">
[12:28:25.567]      __var SW_DP_ABORT       = 0x0;
[12:28:25.567]        // -> [SW_DP_ABORT <= 0x00000000]
[12:28:25.567]      __var DP_CTRL_STAT      = 0x4;
[12:28:25.567]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:28:25.567]      __var DP_SELECT         = 0x8;
[12:28:25.567]        // -> [DP_SELECT <= 0x00000008]
[12:28:25.567]      __var powered_down      = 0;
[12:28:25.567]        // -> [powered_down <= 0x00000000]
[12:28:25.567]      WriteDP(DP_SELECT, 0x00000000);
[12:28:25.567]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:28:25.567]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:28:25.567]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:28:25.567]        // -> [powered_down <= 0x00000001]
[12:28:25.567]    </block>
[12:28:25.567]    <control if="powered_down" while="" timeout="0" info="">
[12:28:25.567]      // if-block "powered_down"
[12:28:25.567]        // =>  TRUE
[12:28:25.567]      <block atomic="false" info="">
[12:28:25.567]        Message(0, "Debug/System power-up request sent");
[12:28:25.567]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:28:25.567]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:28:25.567]      </block>
[12:28:25.577]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:28:25.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:28:25.577]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:28:25.577]        // while-condition  =>  FALSE
[12:28:25.577]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:28:25.577]      </control>
[12:28:25.577]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:28:25.577]        // if-block "(__protocol & 0xFFFF) == 1"
[12:28:25.577]          // =>  FALSE
[12:28:25.577]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:28:25.577]      </control>
[12:28:25.577]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:28:25.577]        // if-block "(__protocol & 0xFFFF) == 2"
[12:28:25.577]          // =>  TRUE
[12:28:25.577]        <block atomic="false" info="">
[12:28:25.577]          Message(0, "executing SWD power up");
[12:28:25.577]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:28:25.577]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:28:25.577]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:28:25.577]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:28:25.577]        </block>
[12:28:25.577]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:28:25.577]      </control>
[12:28:25.577]      // end if-block "powered_down"
[12:28:25.577]    </control>
[12:28:25.577]    <block atomic="false" info="">
[12:28:25.577]      __var DEBUG_PORT_VAL    = 0;
[12:28:25.577]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:28:25.577]      __var ACCESS_POINT_VAL  = 0;
[12:28:25.577]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:28:25.587]      __ap = 1; 
[12:28:25.587]        // -> [__ap <= 0x00000001]
[12:28:25.587]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:28:25.588]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:28:25.588]      __ap = 4;
[12:28:25.588]        // -> [__ap <= 0x00000004]
[12:28:25.588]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:28:25.588]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:28:25.588]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:28:25.588]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:28:25.588]    </block>
[12:28:25.588]    <block atomic="false" info="">
[12:28:25.588]      __var nReset = 0x80;
[12:28:25.588]        // -> [nReset <= 0x00000080]
[12:28:25.588]      __var canReadPins = 0;
[12:28:25.588]        // -> [canReadPins <= 0x00000000]
[12:28:25.588]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:28:25.597]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:28:25.597]        // -> [canReadPins <= 0x00000001]
[12:28:25.597]    </block>
[12:28:25.597]    <control if="" while="1" timeout="200" info="">
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.597]      // while "1"  (timeout="200")
[12:28:25.597]      // while-condition  =>  TRUE
[12:28:25.607]      // while "1"  (timeout="200")
[12:28:25.607]      // while  =>  TIMEOUT
[12:28:25.607]      // end while "1"
[12:28:25.607]    </control>
[12:28:25.607]    <control if="canReadPins" while="" timeout="0" info="">
[12:28:25.607]      // if-block "canReadPins"
[12:28:25.607]        // =>  TRUE
[12:28:25.607]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:28:25.607]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:28:25.609]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:28:25.609]        // while-condition  =>  FALSE
[12:28:25.609]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:28:25.609]      </control>
[12:28:25.609]      // end if-block "canReadPins"
[12:28:25.609]    </control>
[12:28:25.609]    <control if="!canReadPins" while="" timeout="0" info="">
[12:28:25.609]      // if-block "!canReadPins"
[12:28:25.609]        // =>  FALSE
[12:28:25.609]      // skip if-block "!canReadPins"
[12:28:25.609]    </control>
[12:28:25.609]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:28:25.609]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:28:25.609]        // =>  TRUE
[12:28:25.609]      <block atomic="false" info="">
[12:28:25.609]        WriteAP(0x00, 0x190008);
[12:28:25.609]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:28:25.609]        WriteAP(0xF0, 0x01);
[12:28:25.609]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:28:25.609]      </block>
[12:28:25.609]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:28:25.609]    </control>
[12:28:25.609]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:28:25.617]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:28:25.617]        // =>  FALSE
[12:28:25.617]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:28:25.617]    </control>
[12:28:25.617]    <block atomic="false" info="">
[12:28:25.617]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:28:25.619]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:28:25.619]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:28:25.619]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:28:25.619]      __ap = 0; //lets make sure we reset the access point selection
[12:28:25.619]        // -> [__ap <= 0x00000000]
[12:28:25.619]    </block>
[12:28:25.624]  </sequence>
[12:28:25.624]  
[12:28:25.640]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:28:25.640]  
[12:28:25.640]  <debugvars>
[12:28:25.640]    // Pre-defined
[12:28:25.640]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:28:25.640]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:28:25.640]    __dp=0x00000000
[12:28:25.640]    __ap=0x00000000
[12:28:25.640]    __traceout=0x00000000      (Trace Disabled)
[12:28:25.640]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:28:25.640]    __FlashAddr=0x00000000
[12:28:25.640]    __FlashLen=0x00000000
[12:28:25.640]    __FlashArg=0x00000000
[12:28:25.640]    __FlashOp=0x00000000
[12:28:25.640]    __Result=0x00000000
[12:28:25.640]  </debugvars>
[12:28:25.640]  
[12:28:25.640]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:28:25.640]    <block atomic="false" info="">
[12:28:25.640]      __var deviceID = 0;
[12:28:25.640]        // -> [deviceID <= 0x00000000]
[12:28:25.640]      __var version = 0;
[12:28:25.640]        // -> [version <= 0x00000000]
[12:28:25.640]      __var partNum = 0;
[12:28:25.640]        // -> [partNum <= 0x00000000]
[12:28:25.640]      __var manuf = 0;
[12:28:25.640]        // -> [manuf <= 0x00000000]
[12:28:25.640]      __var isMSPM0G1X0X_G3X0X = 0;
[12:28:25.640]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:28:25.640]      __var isProduction = 0;
[12:28:25.640]        // -> [isProduction <= 0x00000000]
[12:28:25.640]      __var continueId = 0;
[12:28:25.640]        // -> [continueId <= 0x00000000]
[12:28:25.640]      deviceID =   Read32(0x41C40004);
[12:28:25.648]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:28:25.648]        // -> [deviceID <= 0x2BB8802F]
[12:28:25.650]      version = deviceID >> 28;
[12:28:25.650]        // -> [version <= 0x00000002]
[12:28:25.650]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:28:25.650]        // -> [partNum <= 0x0000BB88]
[12:28:25.650]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:28:25.650]        // -> [manuf <= 0x00000017]
[12:28:25.650]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:28:25.650]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:28:25.650]      isProduction = (version > 0);
[12:28:25.651]        // -> [isProduction <= 0x00000001]
[12:28:25.651]    </block>
[12:28:25.651]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:28:25.651]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:28:25.651]        // =>  FALSE
[12:28:25.651]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:28:25.651]    </control>
[12:28:25.651]    <control if="continueId == 4" while="" timeout="0" info="">
[12:28:25.651]      // if-block "continueId == 4"
[12:28:25.651]        // =>  FALSE
[12:28:25.651]      // skip if-block "continueId == 4"
[12:28:25.651]    </control>
[12:28:25.651]    <control if="!isProduction" while="" timeout="0" info="">
[12:28:25.651]      // if-block "!isProduction"
[12:28:25.651]        // =>  FALSE
[12:28:25.651]      // skip if-block "!isProduction"
[12:28:25.651]    </control>
[12:28:25.651]  </sequence>
[12:28:25.651]  
[12:29:12.111]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:29:12.111]  
[12:29:12.122]  <debugvars>
[12:29:12.122]    // Pre-defined
[12:29:12.122]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:12.122]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:29:12.122]    __dp=0x00000000
[12:29:12.122]    __ap=0x00000000
[12:29:12.122]    __traceout=0x00000000      (Trace Disabled)
[12:29:12.122]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:12.122]    __FlashAddr=0x00000000
[12:29:12.122]    __FlashLen=0x00000000
[12:29:12.122]    __FlashArg=0x00000000
[12:29:12.122]    __FlashOp=0x00000000
[12:29:12.122]    __Result=0x00000000
[12:29:12.122]  </debugvars>
[12:29:12.122]  
[12:29:12.122]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:29:12.122]    <block atomic="false" info="">
[12:29:12.122]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:29:12.122]        // -> [isSWJ <= 0x00000001]
[12:29:12.122]      __var hasDormant = __protocol & 0x00020000;
[12:29:12.122]        // -> [hasDormant <= 0x00000000]
[12:29:12.122]      __var protType   = __protocol & 0x0000FFFF;
[12:29:12.122]        // -> [protType <= 0x00000002]
[12:29:12.122]    </block>
[12:29:12.126]    <control if="protType == 1" while="" timeout="0" info="">
[12:29:12.126]      // if-block "protType == 1"
[12:29:12.126]        // =>  FALSE
[12:29:12.126]      // skip if-block "protType == 1"
[12:29:12.126]    </control>
[12:29:12.126]    <control if="protType == 2" while="" timeout="0" info="">
[12:29:12.126]      // if-block "protType == 2"
[12:29:12.126]        // =>  TRUE
[12:29:12.126]      <control if="isSWJ" while="" timeout="0" info="">
[12:29:12.126]        // if-block "isSWJ"
[12:29:12.126]          // =>  TRUE
[12:29:12.126]        <control if="hasDormant" while="" timeout="0" info="">
[12:29:12.126]          // if-block "hasDormant"
[12:29:12.126]            // =>  FALSE
[12:29:12.126]          // skip if-block "hasDormant"
[12:29:12.126]        </control>
[12:29:12.126]        <control if="!hasDormant" while="" timeout="0" info="">
[12:29:12.126]          // if-block "!hasDormant"
[12:29:12.127]            // =>  TRUE
[12:29:12.127]          <block atomic="false" info="">
[12:29:12.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:29:12.129]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:12.129]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:29:12.130]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:29:12.130]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:29:12.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:12.130]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:29:12.130]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:29:12.130]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:29:12.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:12.130]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:29:12.130]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:29:12.130]          </block>
[12:29:12.130]          // end if-block "!hasDormant"
[12:29:12.130]        </control>
[12:29:12.130]        // end if-block "isSWJ"
[12:29:12.130]      </control>
[12:29:12.130]      <control if="!isSWJ" while="" timeout="0" info="">
[12:29:12.130]        // if-block "!isSWJ"
[12:29:12.130]          // =>  FALSE
[12:29:12.139]        // skip if-block "!isSWJ"
[12:29:12.139]      </control>
[12:29:12.139]      <block atomic="false" info="">
[12:29:12.139]        ReadDP(0x0);
[12:29:12.140]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:29:12.140]      </block>
[12:29:12.140]      // end if-block "protType == 2"
[12:29:12.140]    </control>
[12:29:12.140]  </sequence>
[12:29:12.140]  
[12:29:12.140]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:29:12.140]  
[12:29:12.140]  <debugvars>
[12:29:12.140]    // Pre-defined
[12:29:12.140]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:12.140]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:29:12.140]    __dp=0x00000000
[12:29:12.140]    __ap=0x00000000
[12:29:12.140]    __traceout=0x00000000      (Trace Disabled)
[12:29:12.140]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:12.140]    __FlashAddr=0x00000000
[12:29:12.140]    __FlashLen=0x00000000
[12:29:12.140]    __FlashArg=0x00000000
[12:29:12.140]    __FlashOp=0x00000000
[12:29:12.140]    __Result=0x00000000
[12:29:12.140]  </debugvars>
[12:29:12.140]  
[12:29:12.140]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:29:12.140]    <block atomic="false" info="">
[12:29:12.140]      __var SW_DP_ABORT       = 0x0;
[12:29:12.140]        // -> [SW_DP_ABORT <= 0x00000000]
[12:29:12.140]      __var DP_CTRL_STAT      = 0x4;
[12:29:12.140]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:29:12.140]      __var DP_SELECT         = 0x8;
[12:29:12.140]        // -> [DP_SELECT <= 0x00000008]
[12:29:12.140]      __var powered_down      = 0;
[12:29:12.140]        // -> [powered_down <= 0x00000000]
[12:29:12.140]      WriteDP(DP_SELECT, 0x00000000);
[12:29:12.149]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:29:12.149]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:29:12.149]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:29:12.149]        // -> [powered_down <= 0x00000001]
[12:29:12.149]    </block>
[12:29:12.149]    <control if="powered_down" while="" timeout="0" info="">
[12:29:12.149]      // if-block "powered_down"
[12:29:12.149]        // =>  TRUE
[12:29:12.149]      <block atomic="false" info="">
[12:29:12.149]        Message(0, "Debug/System power-up request sent");
[12:29:12.149]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:29:12.149]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:29:12.149]      </block>
[12:29:12.149]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:29:12.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:29:12.149]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:29:12.149]        // while-condition  =>  FALSE
[12:29:12.149]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:29:12.149]      </control>
[12:29:12.149]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:29:12.149]        // if-block "(__protocol & 0xFFFF) == 1"
[12:29:12.149]          // =>  FALSE
[12:29:12.149]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:29:12.149]      </control>
[12:29:12.149]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:29:12.149]        // if-block "(__protocol & 0xFFFF) == 2"
[12:29:12.149]          // =>  TRUE
[12:29:12.159]        <block atomic="false" info="">
[12:29:12.159]          Message(0, "executing SWD power up");
[12:29:12.159]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:29:12.159]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:29:12.159]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:29:12.159]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:29:12.159]        </block>
[12:29:12.159]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:29:12.159]      </control>
[12:29:12.159]      // end if-block "powered_down"
[12:29:12.159]    </control>
[12:29:12.159]    <block atomic="false" info="">
[12:29:12.159]      __var DEBUG_PORT_VAL    = 0;
[12:29:12.159]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:29:12.159]      __var ACCESS_POINT_VAL  = 0;
[12:29:12.159]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:29:12.159]      __ap = 1; 
[12:29:12.159]        // -> [__ap <= 0x00000001]
[12:29:12.159]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:29:12.159]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:29:12.159]      __ap = 4;
[12:29:12.159]        // -> [__ap <= 0x00000004]
[12:29:12.169]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:12.170]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:29:12.170]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:29:12.170]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:12.170]    </block>
[12:29:12.170]    <block atomic="false" info="">
[12:29:12.170]      __var nReset = 0x80;
[12:29:12.170]        // -> [nReset <= 0x00000080]
[12:29:12.170]      __var canReadPins = 0;
[12:29:12.170]        // -> [canReadPins <= 0x00000000]
[12:29:12.170]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:29:12.170]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:29:12.170]        // -> [canReadPins <= 0x00000001]
[12:29:12.170]    </block>
[12:29:12.170]    <control if="" while="1" timeout="200" info="">
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.170]      // while-condition  =>  TRUE
[12:29:12.170]      // while "1"  (timeout="200")
[12:29:12.179]      // while-condition  =>  TRUE
[12:29:12.179]      // while "1"  (timeout="200")
[12:29:12.179]      // while  =>  TIMEOUT
[12:29:12.179]      // end while "1"
[12:29:12.180]    </control>
[12:29:12.180]    <control if="canReadPins" while="" timeout="0" info="">
[12:29:12.180]      // if-block "canReadPins"
[12:29:12.180]        // =>  TRUE
[12:29:12.180]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:29:12.180]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:29:12.180]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:29:12.180]        // while-condition  =>  FALSE
[12:29:12.180]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:29:12.180]      </control>
[12:29:12.180]      // end if-block "canReadPins"
[12:29:12.180]    </control>
[12:29:12.180]    <control if="!canReadPins" while="" timeout="0" info="">
[12:29:12.180]      // if-block "!canReadPins"
[12:29:12.180]        // =>  FALSE
[12:29:12.180]      // skip if-block "!canReadPins"
[12:29:12.180]    </control>
[12:29:12.180]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:29:12.180]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:12.180]        // =>  TRUE
[12:29:12.180]      <block atomic="false" info="">
[12:29:12.180]        WriteAP(0x00, 0x190008);
[12:29:12.185]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:12.185]        WriteAP(0xF0, 0x01);
[12:29:12.188]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:12.188]      </block>
[12:29:12.188]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:12.188]    </control>
[12:29:12.188]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:29:12.188]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:12.188]        // =>  FALSE
[12:29:12.188]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:12.188]    </control>
[12:29:12.188]    <block atomic="false" info="">
[12:29:12.188]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:12.192]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:29:12.192]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:29:12.192]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:12.193]      __ap = 0; //lets make sure we reset the access point selection
[12:29:12.193]        // -> [__ap <= 0x00000000]
[12:29:12.193]    </block>
[12:29:12.193]  </sequence>
[12:29:12.193]  
[12:29:12.220]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:29:12.220]  
[12:29:12.220]  <debugvars>
[12:29:12.220]    // Pre-defined
[12:29:12.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:12.220]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:29:12.220]    __dp=0x00000000
[12:29:12.220]    __ap=0x00000000
[12:29:12.220]    __traceout=0x00000000      (Trace Disabled)
[12:29:12.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:12.220]    __FlashAddr=0x00000000
[12:29:12.222]    __FlashLen=0x00000000
[12:29:12.222]    __FlashArg=0x00000000
[12:29:12.222]    __FlashOp=0x00000000
[12:29:12.222]    __Result=0x00000000
[12:29:12.222]  </debugvars>
[12:29:12.222]  
[12:29:12.222]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:29:12.222]    <block atomic="false" info="">
[12:29:12.222]      __var deviceID = 0;
[12:29:12.222]        // -> [deviceID <= 0x00000000]
[12:29:12.222]      __var version = 0;
[12:29:12.222]        // -> [version <= 0x00000000]
[12:29:12.222]      __var partNum = 0;
[12:29:12.222]        // -> [partNum <= 0x00000000]
[12:29:12.222]      __var manuf = 0;
[12:29:12.222]        // -> [manuf <= 0x00000000]
[12:29:12.222]      __var isMSPM0G1X0X_G3X0X = 0;
[12:29:12.222]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:29:12.223]      __var isProduction = 0;
[12:29:12.223]        // -> [isProduction <= 0x00000000]
[12:29:12.223]      __var continueId = 0;
[12:29:12.223]        // -> [continueId <= 0x00000000]
[12:29:12.223]      deviceID =   Read32(0x41C40004);
[12:29:12.228]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:29:12.228]        // -> [deviceID <= 0x2BB8802F]
[12:29:12.228]      version = deviceID >> 28;
[12:29:12.228]        // -> [version <= 0x00000002]
[12:29:12.228]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:29:12.228]        // -> [partNum <= 0x0000BB88]
[12:29:12.228]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:29:12.228]        // -> [manuf <= 0x00000017]
[12:29:12.228]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:29:12.228]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:29:12.228]      isProduction = (version > 0);
[12:29:12.228]        // -> [isProduction <= 0x00000001]
[12:29:12.228]    </block>
[12:29:12.230]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:29:12.230]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:29:12.230]        // =>  FALSE
[12:29:12.230]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:29:12.230]    </control>
[12:29:12.230]    <control if="continueId == 4" while="" timeout="0" info="">
[12:29:12.230]      // if-block "continueId == 4"
[12:29:12.230]        // =>  FALSE
[12:29:12.230]      // skip if-block "continueId == 4"
[12:29:12.230]    </control>
[12:29:12.230]    <control if="!isProduction" while="" timeout="0" info="">
[12:29:12.230]      // if-block "!isProduction"
[12:29:12.230]        // =>  FALSE
[12:29:12.230]      // skip if-block "!isProduction"
[12:29:12.230]    </control>
[12:29:12.230]  </sequence>
[12:29:12.230]  
[12:29:17.364]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:29:17.364]  
[12:29:17.376]  <debugvars>
[12:29:17.376]    // Pre-defined
[12:29:17.376]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:17.376]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:29:17.376]    __dp=0x00000000
[12:29:17.376]    __ap=0x00000000
[12:29:17.376]    __traceout=0x00000000      (Trace Disabled)
[12:29:17.376]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:17.376]    __FlashAddr=0x00000000
[12:29:17.376]    __FlashLen=0x00000000
[12:29:17.376]    __FlashArg=0x00000000
[12:29:17.376]    __FlashOp=0x00000000
[12:29:17.376]    __Result=0x00000000
[12:29:17.376]  </debugvars>
[12:29:17.376]  
[12:29:17.376]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:29:17.376]    <block atomic="false" info="">
[12:29:17.376]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:29:17.376]        // -> [isSWJ <= 0x00000001]
[12:29:17.376]      __var hasDormant = __protocol & 0x00020000;
[12:29:17.376]        // -> [hasDormant <= 0x00000000]
[12:29:17.376]      __var protType   = __protocol & 0x0000FFFF;
[12:29:17.376]        // -> [protType <= 0x00000002]
[12:29:17.376]    </block>
[12:29:17.376]    <control if="protType == 1" while="" timeout="0" info="">
[12:29:17.376]      // if-block "protType == 1"
[12:29:17.376]        // =>  FALSE
[12:29:17.376]      // skip if-block "protType == 1"
[12:29:17.376]    </control>
[12:29:17.376]    <control if="protType == 2" while="" timeout="0" info="">
[12:29:17.376]      // if-block "protType == 2"
[12:29:17.376]        // =>  TRUE
[12:29:17.376]      <control if="isSWJ" while="" timeout="0" info="">
[12:29:17.376]        // if-block "isSWJ"
[12:29:17.376]          // =>  TRUE
[12:29:17.376]        <control if="hasDormant" while="" timeout="0" info="">
[12:29:17.376]          // if-block "hasDormant"
[12:29:17.376]            // =>  FALSE
[12:29:17.376]          // skip if-block "hasDormant"
[12:29:17.376]        </control>
[12:29:17.376]        <control if="!hasDormant" while="" timeout="0" info="">
[12:29:17.376]          // if-block "!hasDormant"
[12:29:17.376]            // =>  TRUE
[12:29:17.376]          <block atomic="false" info="">
[12:29:17.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:29:17.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:17.376]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:29:17.385]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:29:17.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:29:17.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:17.385]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:29:17.385]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:29:17.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:29:17.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:17.385]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:29:17.385]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:29:17.385]          </block>
[12:29:17.385]          // end if-block "!hasDormant"
[12:29:17.385]        </control>
[12:29:17.385]        // end if-block "isSWJ"
[12:29:17.385]      </control>
[12:29:17.385]      <control if="!isSWJ" while="" timeout="0" info="">
[12:29:17.385]        // if-block "!isSWJ"
[12:29:17.385]          // =>  FALSE
[12:29:17.385]        // skip if-block "!isSWJ"
[12:29:17.385]      </control>
[12:29:17.385]      <block atomic="false" info="">
[12:29:17.385]        ReadDP(0x0);
[12:29:17.385]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:29:17.385]      </block>
[12:29:17.385]      // end if-block "protType == 2"
[12:29:17.385]    </control>
[12:29:17.385]  </sequence>
[12:29:17.395]  
[12:29:17.395]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:29:17.395]  
[12:29:17.395]  <debugvars>
[12:29:17.395]    // Pre-defined
[12:29:17.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:17.395]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:29:17.395]    __dp=0x00000000
[12:29:17.395]    __ap=0x00000000
[12:29:17.395]    __traceout=0x00000000      (Trace Disabled)
[12:29:17.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:17.395]    __FlashAddr=0x00000000
[12:29:17.395]    __FlashLen=0x00000000
[12:29:17.395]    __FlashArg=0x00000000
[12:29:17.395]    __FlashOp=0x00000000
[12:29:17.395]    __Result=0x00000000
[12:29:17.395]  </debugvars>
[12:29:17.395]  
[12:29:17.395]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:29:17.395]    <block atomic="false" info="">
[12:29:17.395]      __var SW_DP_ABORT       = 0x0;
[12:29:17.395]        // -> [SW_DP_ABORT <= 0x00000000]
[12:29:17.395]      __var DP_CTRL_STAT      = 0x4;
[12:29:17.395]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:29:17.395]      __var DP_SELECT         = 0x8;
[12:29:17.400]        // -> [DP_SELECT <= 0x00000008]
[12:29:17.400]      __var powered_down      = 0;
[12:29:17.400]        // -> [powered_down <= 0x00000000]
[12:29:17.400]      WriteDP(DP_SELECT, 0x00000000);
[12:29:17.400]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:29:17.400]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:29:17.400]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:29:17.400]        // -> [powered_down <= 0x00000001]
[12:29:17.400]    </block>
[12:29:17.400]    <control if="powered_down" while="" timeout="0" info="">
[12:29:17.400]      // if-block "powered_down"
[12:29:17.400]        // =>  TRUE
[12:29:17.400]      <block atomic="false" info="">
[12:29:17.400]        Message(0, "Debug/System power-up request sent");
[12:29:17.405]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:29:17.405]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:29:17.405]      </block>
[12:29:17.405]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:29:17.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:29:17.405]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:29:17.405]        // while-condition  =>  FALSE
[12:29:17.405]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:29:17.405]      </control>
[12:29:17.405]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:29:17.405]        // if-block "(__protocol & 0xFFFF) == 1"
[12:29:17.405]          // =>  FALSE
[12:29:17.405]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:29:17.405]      </control>
[12:29:17.405]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:29:17.405]        // if-block "(__protocol & 0xFFFF) == 2"
[12:29:17.405]          // =>  TRUE
[12:29:17.405]        <block atomic="false" info="">
[12:29:17.405]          Message(0, "executing SWD power up");
[12:29:17.405]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:29:17.415]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:29:17.415]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:29:17.415]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:29:17.415]        </block>
[12:29:17.415]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:29:17.415]      </control>
[12:29:17.415]      // end if-block "powered_down"
[12:29:17.415]    </control>
[12:29:17.415]    <block atomic="false" info="">
[12:29:17.415]      __var DEBUG_PORT_VAL    = 0;
[12:29:17.415]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:29:17.415]      __var ACCESS_POINT_VAL  = 0;
[12:29:17.415]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:29:17.415]      __ap = 1; 
[12:29:17.415]        // -> [__ap <= 0x00000001]
[12:29:17.415]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:29:17.415]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:29:17.415]      __ap = 4;
[12:29:17.415]        // -> [__ap <= 0x00000004]
[12:29:17.415]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:17.425]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:29:17.425]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:29:17.425]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:17.427]    </block>
[12:29:17.428]    <block atomic="false" info="">
[12:29:17.428]      __var nReset = 0x80;
[12:29:17.428]        // -> [nReset <= 0x00000080]
[12:29:17.428]      __var canReadPins = 0;
[12:29:17.428]        // -> [canReadPins <= 0x00000000]
[12:29:17.428]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:29:17.431]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:29:17.431]        // -> [canReadPins <= 0x00000001]
[12:29:17.431]    </block>
[12:29:17.431]    <control if="" while="1" timeout="200" info="">
[12:29:17.431]      // while "1"  (timeout="200")
[12:29:17.431]      // while-condition  =>  TRUE
[12:29:17.432]      // while "1"  (timeout="200")
[12:29:17.432]      // while-condition  =>  TRUE
[12:29:17.432]      // while "1"  (timeout="200")
[12:29:17.432]      // while-condition  =>  TRUE
[12:29:17.432]      // while "1"  (timeout="200")
[12:29:17.432]      // while-condition  =>  TRUE
[12:29:17.432]      // while "1"  (timeout="200")
[12:29:17.432]      // while-condition  =>  TRUE
[12:29:17.432]      // while "1"  (timeout="200")
[12:29:17.433]      // while-condition  =>  TRUE
[12:29:17.433]      // while "1"  (timeout="200")
[12:29:17.433]      // while-condition  =>  TRUE
[12:29:17.433]      // while "1"  (timeout="200")
[12:29:17.433]      // while-condition  =>  TRUE
[12:29:17.433]      // while "1"  (timeout="200")
[12:29:17.433]      // while-condition  =>  TRUE
[12:29:17.433]      // while "1"  (timeout="200")
[12:29:17.433]      // while-condition  =>  TRUE
[12:29:17.433]      // while "1"  (timeout="200")
[12:29:17.434]      // while-condition  =>  TRUE
[12:29:17.434]      // while "1"  (timeout="200")
[12:29:17.434]      // while-condition  =>  TRUE
[12:29:17.435]      // while "1"  (timeout="200")
[12:29:17.435]      // while-condition  =>  TRUE
[12:29:17.435]      // while "1"  (timeout="200")
[12:29:17.435]      // while-condition  =>  TRUE
[12:29:17.435]      // while "1"  (timeout="200")
[12:29:17.435]      // while-condition  =>  TRUE
[12:29:17.435]      // while "1"  (timeout="200")
[12:29:17.436]      // while-condition  =>  TRUE
[12:29:17.436]      // while "1"  (timeout="200")
[12:29:17.436]      // while-condition  =>  TRUE
[12:29:17.436]      // while "1"  (timeout="200")
[12:29:17.436]      // while-condition  =>  TRUE
[12:29:17.436]      // while "1"  (timeout="200")
[12:29:17.436]      // while-condition  =>  TRUE
[12:29:17.436]      // while "1"  (timeout="200")
[12:29:17.437]      // while-condition  =>  TRUE
[12:29:17.437]      // while "1"  (timeout="200")
[12:29:17.437]      // while-condition  =>  TRUE
[12:29:17.437]      // while "1"  (timeout="200")
[12:29:17.437]      // while-condition  =>  TRUE
[12:29:17.437]      // while "1"  (timeout="200")
[12:29:17.437]      // while-condition  =>  TRUE
[12:29:17.437]      // while "1"  (timeout="200")
[12:29:17.437]      // while-condition  =>  TRUE
[12:29:17.437]      // while "1"  (timeout="200")
[12:29:17.438]      // while-condition  =>  TRUE
[12:29:17.438]      // while "1"  (timeout="200")
[12:29:17.438]      // while-condition  =>  TRUE
[12:29:17.438]      // while "1"  (timeout="200")
[12:29:17.438]      // while-condition  =>  TRUE
[12:29:17.438]      // while "1"  (timeout="200")
[12:29:17.438]      // while-condition  =>  TRUE
[12:29:17.438]      // while "1"  (timeout="200")
[12:29:17.439]      // while-condition  =>  TRUE
[12:29:17.439]      // while "1"  (timeout="200")
[12:29:17.439]      // while-condition  =>  TRUE
[12:29:17.439]      // while "1"  (timeout="200")
[12:29:17.439]      // while-condition  =>  TRUE
[12:29:17.439]      // while "1"  (timeout="200")
[12:29:17.439]      // while-condition  =>  TRUE
[12:29:17.439]      // while "1"  (timeout="200")
[12:29:17.439]      // while-condition  =>  TRUE
[12:29:17.439]      // while "1"  (timeout="200")
[12:29:17.440]      // while-condition  =>  TRUE
[12:29:17.440]      // while "1"  (timeout="200")
[12:29:17.440]      // while-condition  =>  TRUE
[12:29:17.440]      // while "1"  (timeout="200")
[12:29:17.440]      // while-condition  =>  TRUE
[12:29:17.440]      // while "1"  (timeout="200")
[12:29:17.440]      // while-condition  =>  TRUE
[12:29:17.440]      // while "1"  (timeout="200")
[12:29:17.440]      // while-condition  =>  TRUE
[12:29:17.440]      // while "1"  (timeout="200")
[12:29:17.441]      // while-condition  =>  TRUE
[12:29:17.441]      // while "1"  (timeout="200")
[12:29:17.441]      // while-condition  =>  TRUE
[12:29:17.441]      // while "1"  (timeout="200")
[12:29:17.441]      // while-condition  =>  TRUE
[12:29:17.442]      // while "1"  (timeout="200")
[12:29:17.442]      // while-condition  =>  TRUE
[12:29:17.442]      // while "1"  (timeout="200")
[12:29:17.442]      // while-condition  =>  TRUE
[12:29:17.442]      // while "1"  (timeout="200")
[12:29:17.442]      // while-condition  =>  TRUE
[12:29:17.442]      // while "1"  (timeout="200")
[12:29:17.442]      // while-condition  =>  TRUE
[12:29:17.442]      // while "1"  (timeout="200")
[12:29:17.442]      // while-condition  =>  TRUE
[12:29:17.442]      // while "1"  (timeout="200")
[12:29:17.443]      // while-condition  =>  TRUE
[12:29:17.443]      // while "1"  (timeout="200")
[12:29:17.443]      // while-condition  =>  TRUE
[12:29:17.443]      // while "1"  (timeout="200")
[12:29:17.443]      // while-condition  =>  TRUE
[12:29:17.443]      // while "1"  (timeout="200")
[12:29:17.443]      // while-condition  =>  TRUE
[12:29:17.443]      // while "1"  (timeout="200")
[12:29:17.443]      // while-condition  =>  TRUE
[12:29:17.443]      // while "1"  (timeout="200")
[12:29:17.444]      // while-condition  =>  TRUE
[12:29:17.444]      // while "1"  (timeout="200")
[12:29:17.444]      // while  =>  TIMEOUT
[12:29:17.444]      // end while "1"
[12:29:17.444]    </control>
[12:29:17.444]    <control if="canReadPins" while="" timeout="0" info="">
[12:29:17.444]      // if-block "canReadPins"
[12:29:17.444]        // =>  TRUE
[12:29:17.444]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:29:17.444]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:29:17.452]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:29:17.452]        // while-condition  =>  FALSE
[12:29:17.452]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:29:17.453]      </control>
[12:29:17.453]      // end if-block "canReadPins"
[12:29:17.453]    </control>
[12:29:17.453]    <control if="!canReadPins" while="" timeout="0" info="">
[12:29:17.453]      // if-block "!canReadPins"
[12:29:17.453]        // =>  FALSE
[12:29:17.453]      // skip if-block "!canReadPins"
[12:29:17.453]    </control>
[12:29:17.453]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:29:17.454]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:17.454]        // =>  TRUE
[12:29:17.454]      <block atomic="false" info="">
[12:29:17.454]        WriteAP(0x00, 0x190008);
[12:29:17.455]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:17.455]        WriteAP(0xF0, 0x01);
[12:29:17.457]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:17.457]      </block>
[12:29:17.457]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:17.457]    </control>
[12:29:17.457]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:29:17.457]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:17.457]        // =>  FALSE
[12:29:17.457]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:17.460]    </control>
[12:29:17.460]    <block atomic="false" info="">
[12:29:17.460]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:17.460]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:29:17.465]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:29:17.465]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:17.466]      __ap = 0; //lets make sure we reset the access point selection
[12:29:17.466]        // -> [__ap <= 0x00000000]
[12:29:17.466]    </block>
[12:29:17.466]  </sequence>
[12:29:17.466]  
[12:29:17.485]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:29:17.485]  
[12:29:17.485]  <debugvars>
[12:29:17.485]    // Pre-defined
[12:29:17.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:17.485]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:29:17.485]    __dp=0x00000000
[12:29:17.485]    __ap=0x00000000
[12:29:17.485]    __traceout=0x00000000      (Trace Disabled)
[12:29:17.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:17.485]    __FlashAddr=0x00000000
[12:29:17.485]    __FlashLen=0x00000000
[12:29:17.485]    __FlashArg=0x00000000
[12:29:17.485]    __FlashOp=0x00000000
[12:29:17.485]    __Result=0x00000000
[12:29:17.485]  </debugvars>
[12:29:17.485]  
[12:29:17.485]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:29:17.485]    <block atomic="false" info="">
[12:29:17.485]      __var deviceID = 0;
[12:29:17.485]        // -> [deviceID <= 0x00000000]
[12:29:17.485]      __var version = 0;
[12:29:17.485]        // -> [version <= 0x00000000]
[12:29:17.485]      __var partNum = 0;
[12:29:17.485]        // -> [partNum <= 0x00000000]
[12:29:17.485]      __var manuf = 0;
[12:29:17.485]        // -> [manuf <= 0x00000000]
[12:29:17.485]      __var isMSPM0G1X0X_G3X0X = 0;
[12:29:17.485]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:29:17.485]      __var isProduction = 0;
[12:29:17.485]        // -> [isProduction <= 0x00000000]
[12:29:17.485]      __var continueId = 0;
[12:29:17.495]        // -> [continueId <= 0x00000000]
[12:29:17.495]      deviceID =   Read32(0x41C40004);
[12:29:17.495]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:29:17.495]        // -> [deviceID <= 0x2BB8802F]
[12:29:17.495]      version = deviceID >> 28;
[12:29:17.495]        // -> [version <= 0x00000002]
[12:29:17.495]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:29:17.495]        // -> [partNum <= 0x0000BB88]
[12:29:17.495]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:29:17.495]        // -> [manuf <= 0x00000017]
[12:29:17.495]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:29:17.495]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:29:17.495]      isProduction = (version > 0);
[12:29:17.495]        // -> [isProduction <= 0x00000001]
[12:29:17.495]    </block>
[12:29:17.495]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:29:17.495]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:29:17.495]        // =>  FALSE
[12:29:17.495]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:29:17.495]    </control>
[12:29:17.495]    <control if="continueId == 4" while="" timeout="0" info="">
[12:29:17.495]      // if-block "continueId == 4"
[12:29:17.495]        // =>  FALSE
[12:29:17.495]      // skip if-block "continueId == 4"
[12:29:17.495]    </control>
[12:29:17.495]    <control if="!isProduction" while="" timeout="0" info="">
[12:29:17.495]      // if-block "!isProduction"
[12:29:17.495]        // =>  FALSE
[12:29:17.495]      // skip if-block "!isProduction"
[12:29:17.495]    </control>
[12:29:17.495]  </sequence>
[12:29:17.495]  
[12:30:11.978]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:30:11.978]  
[12:30:11.991]  <debugvars>
[12:30:11.991]    // Pre-defined
[12:30:11.991]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:11.991]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:30:11.991]    __dp=0x00000000
[12:30:11.991]    __ap=0x00000000
[12:30:11.991]    __traceout=0x00000000      (Trace Disabled)
[12:30:11.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:11.991]    __FlashAddr=0x00000000
[12:30:11.991]    __FlashLen=0x00000000
[12:30:11.991]    __FlashArg=0x00000000
[12:30:11.991]    __FlashOp=0x00000000
[12:30:11.991]    __Result=0x00000000
[12:30:11.991]  </debugvars>
[12:30:11.991]  
[12:30:11.991]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:30:11.991]    <block atomic="false" info="">
[12:30:11.991]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:30:11.991]        // -> [isSWJ <= 0x00000001]
[12:30:11.991]      __var hasDormant = __protocol & 0x00020000;
[12:30:11.991]        // -> [hasDormant <= 0x00000000]
[12:30:11.991]      __var protType   = __protocol & 0x0000FFFF;
[12:30:11.991]        // -> [protType <= 0x00000002]
[12:30:11.991]    </block>
[12:30:11.994]    <control if="protType == 1" while="" timeout="0" info="">
[12:30:11.994]      // if-block "protType == 1"
[12:30:11.994]        // =>  FALSE
[12:30:11.994]      // skip if-block "protType == 1"
[12:30:11.994]    </control>
[12:30:11.994]    <control if="protType == 2" while="" timeout="0" info="">
[12:30:11.994]      // if-block "protType == 2"
[12:30:11.994]        // =>  TRUE
[12:30:11.994]      <control if="isSWJ" while="" timeout="0" info="">
[12:30:11.994]        // if-block "isSWJ"
[12:30:11.994]          // =>  TRUE
[12:30:11.994]        <control if="hasDormant" while="" timeout="0" info="">
[12:30:11.994]          // if-block "hasDormant"
[12:30:11.994]            // =>  FALSE
[12:30:11.994]          // skip if-block "hasDormant"
[12:30:11.994]        </control>
[12:30:11.994]        <control if="!hasDormant" while="" timeout="0" info="">
[12:30:11.996]          // if-block "!hasDormant"
[12:30:11.996]            // =>  TRUE
[12:30:11.996]          <block atomic="false" info="">
[12:30:11.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:30:11.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:11.997]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:30:11.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:30:11.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:30:11.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:11.997]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:30:11.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:30:11.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:30:11.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:11.997]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:30:12.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:30:12.005]          </block>
[12:30:12.005]          // end if-block "!hasDormant"
[12:30:12.005]        </control>
[12:30:12.005]        // end if-block "isSWJ"
[12:30:12.005]      </control>
[12:30:12.005]      <control if="!isSWJ" while="" timeout="0" info="">
[12:30:12.005]        // if-block "!isSWJ"
[12:30:12.006]          // =>  FALSE
[12:30:12.006]        // skip if-block "!isSWJ"
[12:30:12.006]      </control>
[12:30:12.006]      <block atomic="false" info="">
[12:30:12.006]        ReadDP(0x0);
[12:30:12.007]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:30:12.007]      </block>
[12:30:12.007]      // end if-block "protType == 2"
[12:30:12.007]    </control>
[12:30:12.007]  </sequence>
[12:30:12.007]  
[12:30:12.013]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:30:12.013]  
[12:30:12.013]  <debugvars>
[12:30:12.013]    // Pre-defined
[12:30:12.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:12.013]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:30:12.013]    __dp=0x00000000
[12:30:12.013]    __ap=0x00000000
[12:30:12.013]    __traceout=0x00000000      (Trace Disabled)
[12:30:12.013]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:12.013]    __FlashAddr=0x00000000
[12:30:12.013]    __FlashLen=0x00000000
[12:30:12.013]    __FlashArg=0x00000000
[12:30:12.014]    __FlashOp=0x00000000
[12:30:12.014]    __Result=0x00000000
[12:30:12.014]  </debugvars>
[12:30:12.014]  
[12:30:12.014]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:30:12.014]    <block atomic="false" info="">
[12:30:12.014]      __var SW_DP_ABORT       = 0x0;
[12:30:12.014]        // -> [SW_DP_ABORT <= 0x00000000]
[12:30:12.014]      __var DP_CTRL_STAT      = 0x4;
[12:30:12.014]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:30:12.014]      __var DP_SELECT         = 0x8;
[12:30:12.014]        // -> [DP_SELECT <= 0x00000008]
[12:30:12.016]      __var powered_down      = 0;
[12:30:12.016]        // -> [powered_down <= 0x00000000]
[12:30:12.016]      WriteDP(DP_SELECT, 0x00000000);
[12:30:12.016]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:30:12.016]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:30:12.019]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:30:12.019]        // -> [powered_down <= 0x00000001]
[12:30:12.019]    </block>
[12:30:12.019]    <control if="powered_down" while="" timeout="0" info="">
[12:30:12.019]      // if-block "powered_down"
[12:30:12.019]        // =>  TRUE
[12:30:12.019]      <block atomic="false" info="">
[12:30:12.019]        Message(0, "Debug/System power-up request sent");
[12:30:12.020]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:30:12.022]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:30:12.022]      </block>
[12:30:12.022]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:30:12.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:30:12.025]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:30:12.025]        // while-condition  =>  FALSE
[12:30:12.025]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:30:12.025]      </control>
[12:30:12.025]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:30:12.026]        // if-block "(__protocol & 0xFFFF) == 1"
[12:30:12.026]          // =>  FALSE
[12:30:12.026]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:30:12.026]      </control>
[12:30:12.026]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:30:12.026]        // if-block "(__protocol & 0xFFFF) == 2"
[12:30:12.026]          // =>  TRUE
[12:30:12.026]        <block atomic="false" info="">
[12:30:12.026]          Message(0, "executing SWD power up");
[12:30:12.027]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:30:12.029]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:30:12.030]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:30:12.031]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:30:12.031]        </block>
[12:30:12.031]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:30:12.031]      </control>
[12:30:12.031]      // end if-block "powered_down"
[12:30:12.031]    </control>
[12:30:12.031]    <block atomic="false" info="">
[12:30:12.031]      __var DEBUG_PORT_VAL    = 0;
[12:30:12.031]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:30:12.031]      __var ACCESS_POINT_VAL  = 0;
[12:30:12.031]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:30:12.031]      __ap = 1; 
[12:30:12.031]        // -> [__ap <= 0x00000001]
[12:30:12.031]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:30:12.035]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:30:12.036]      __ap = 4;
[12:30:12.036]        // -> [__ap <= 0x00000004]
[12:30:12.036]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:12.037]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:30:12.037]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:30:12.039]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:12.040]    </block>
[12:30:12.040]    <block atomic="false" info="">
[12:30:12.040]      __var nReset = 0x80;
[12:30:12.040]        // -> [nReset <= 0x00000080]
[12:30:12.040]      __var canReadPins = 0;
[12:30:12.040]        // -> [canReadPins <= 0x00000000]
[12:30:12.040]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:30:12.042]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:30:12.042]        // -> [canReadPins <= 0x00000001]
[12:30:12.042]    </block>
[12:30:12.042]    <control if="" while="1" timeout="200" info="">
[12:30:12.042]      // while "1"  (timeout="200")
[12:30:12.042]      // while-condition  =>  TRUE
[12:30:12.042]      // while "1"  (timeout="200")
[12:30:12.042]      // while-condition  =>  TRUE
[12:30:12.042]      // while "1"  (timeout="200")
[12:30:12.042]      // while-condition  =>  TRUE
[12:30:12.042]      // while "1"  (timeout="200")
[12:30:12.042]      // while-condition  =>  TRUE
[12:30:12.042]      // while "1"  (timeout="200")
[12:30:12.042]      // while-condition  =>  TRUE
[12:30:12.042]      // while "1"  (timeout="200")
[12:30:12.042]      // while-condition  =>  TRUE
[12:30:12.045]      // while "1"  (timeout="200")
[12:30:12.045]      // while-condition  =>  TRUE
[12:30:12.045]      // while "1"  (timeout="200")
[12:30:12.045]      // while-condition  =>  TRUE
[12:30:12.045]      // while "1"  (timeout="200")
[12:30:12.045]      // while-condition  =>  TRUE
[12:30:12.045]      // while "1"  (timeout="200")
[12:30:12.045]      // while-condition  =>  TRUE
[12:30:12.045]      // while "1"  (timeout="200")
[12:30:12.045]      // while-condition  =>  TRUE
[12:30:12.045]      // while "1"  (timeout="200")
[12:30:12.045]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.046]      // while "1"  (timeout="200")
[12:30:12.046]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.048]      // while "1"  (timeout="200")
[12:30:12.048]      // while-condition  =>  TRUE
[12:30:12.049]      // while "1"  (timeout="200")
[12:30:12.049]      // while-condition  =>  TRUE
[12:30:12.049]      // while "1"  (timeout="200")
[12:30:12.049]      // while-condition  =>  TRUE
[12:30:12.049]      // while "1"  (timeout="200")
[12:30:12.049]      // while-condition  =>  TRUE
[12:30:12.049]      // while "1"  (timeout="200")
[12:30:12.049]      // while-condition  =>  TRUE
[12:30:12.049]      // while "1"  (timeout="200")
[12:30:12.049]      // while-condition  =>  TRUE
[12:30:12.049]      // while "1"  (timeout="200")
[12:30:12.049]      // while-condition  =>  TRUE
[12:30:12.049]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.051]      // while-condition  =>  TRUE
[12:30:12.051]      // while "1"  (timeout="200")
[12:30:12.054]      // while-condition  =>  TRUE
[12:30:12.054]      // while "1"  (timeout="200")
[12:30:12.054]      // while  =>  TIMEOUT
[12:30:12.054]      // end while "1"
[12:30:12.054]    </control>
[12:30:12.054]    <control if="canReadPins" while="" timeout="0" info="">
[12:30:12.054]      // if-block "canReadPins"
[12:30:12.054]        // =>  TRUE
[12:30:12.054]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:30:12.054]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:30:12.057]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:30:12.057]        // while-condition  =>  FALSE
[12:30:12.057]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:30:12.057]      </control>
[12:30:12.057]      // end if-block "canReadPins"
[12:30:12.057]    </control>
[12:30:12.057]    <control if="!canReadPins" while="" timeout="0" info="">
[12:30:12.057]      // if-block "!canReadPins"
[12:30:12.057]        // =>  FALSE
[12:30:12.057]      // skip if-block "!canReadPins"
[12:30:12.059]    </control>
[12:30:12.059]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:30:12.059]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:12.059]        // =>  TRUE
[12:30:12.059]      <block atomic="false" info="">
[12:30:12.059]        WriteAP(0x00, 0x190008);
[12:30:12.061]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:12.061]        WriteAP(0xF0, 0x01);
[12:30:12.064]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:12.064]      </block>
[12:30:12.064]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:12.064]    </control>
[12:30:12.064]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:30:12.064]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:12.064]        // =>  FALSE
[12:30:12.064]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:12.064]    </control>
[12:30:12.064]    <block atomic="false" info="">
[12:30:12.064]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:12.068]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:30:12.068]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:30:12.068]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:12.069]      __ap = 0; //lets make sure we reset the access point selection
[12:30:12.069]        // -> [__ap <= 0x00000000]
[12:30:12.069]    </block>
[12:30:12.069]  </sequence>
[12:30:12.069]  
[12:30:12.086]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:30:12.086]  
[12:30:12.086]  <debugvars>
[12:30:12.086]    // Pre-defined
[12:30:12.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:12.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:30:12.086]    __dp=0x00000000
[12:30:12.086]    __ap=0x00000000
[12:30:12.086]    __traceout=0x00000000      (Trace Disabled)
[12:30:12.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:12.086]    __FlashAddr=0x00000000
[12:30:12.086]    __FlashLen=0x00000000
[12:30:12.086]    __FlashArg=0x00000000
[12:30:12.090]    __FlashOp=0x00000000
[12:30:12.090]    __Result=0x00000000
[12:30:12.090]  </debugvars>
[12:30:12.090]  
[12:30:12.090]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:30:12.090]    <block atomic="false" info="">
[12:30:12.090]      __var deviceID = 0;
[12:30:12.090]        // -> [deviceID <= 0x00000000]
[12:30:12.090]      __var version = 0;
[12:30:12.090]        // -> [version <= 0x00000000]
[12:30:12.090]      __var partNum = 0;
[12:30:12.090]        // -> [partNum <= 0x00000000]
[12:30:12.090]      __var manuf = 0;
[12:30:12.090]        // -> [manuf <= 0x00000000]
[12:30:12.090]      __var isMSPM0G1X0X_G3X0X = 0;
[12:30:12.090]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:30:12.090]      __var isProduction = 0;
[12:30:12.090]        // -> [isProduction <= 0x00000000]
[12:30:12.090]      __var continueId = 0;
[12:30:12.092]        // -> [continueId <= 0x00000000]
[12:30:12.092]      deviceID =   Read32(0x41C40004);
[12:30:12.096]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:30:12.096]        // -> [deviceID <= 0x2BB8802F]
[12:30:12.096]      version = deviceID >> 28;
[12:30:12.096]        // -> [version <= 0x00000002]
[12:30:12.096]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:30:12.096]        // -> [partNum <= 0x0000BB88]
[12:30:12.096]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:30:12.096]        // -> [manuf <= 0x00000017]
[12:30:12.096]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:30:12.096]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:30:12.096]      isProduction = (version > 0);
[12:30:12.096]        // -> [isProduction <= 0x00000001]
[12:30:12.096]    </block>
[12:30:12.096]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:30:12.096]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:30:12.096]        // =>  FALSE
[12:30:12.096]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:30:12.096]    </control>
[12:30:12.096]    <control if="continueId == 4" while="" timeout="0" info="">
[12:30:12.096]      // if-block "continueId == 4"
[12:30:12.096]        // =>  FALSE
[12:30:12.096]      // skip if-block "continueId == 4"
[12:30:12.100]    </control>
[12:30:12.100]    <control if="!isProduction" while="" timeout="0" info="">
[12:30:12.100]      // if-block "!isProduction"
[12:30:12.100]        // =>  FALSE
[12:30:12.100]      // skip if-block "!isProduction"
[12:30:12.100]    </control>
[12:30:12.100]  </sequence>
[12:30:12.100]  
[12:30:17.164]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:30:17.164]  
[12:30:17.181]  <debugvars>
[12:30:17.181]    // Pre-defined
[12:30:17.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:17.181]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:30:17.181]    __dp=0x00000000
[12:30:17.181]    __ap=0x00000000
[12:30:17.181]    __traceout=0x00000000      (Trace Disabled)
[12:30:17.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:17.181]    __FlashAddr=0x00000000
[12:30:17.181]    __FlashLen=0x00000000
[12:30:17.181]    __FlashArg=0x00000000
[12:30:17.181]    __FlashOp=0x00000000
[12:30:17.181]    __Result=0x00000000
[12:30:17.181]  </debugvars>
[12:30:17.181]  
[12:30:17.181]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:30:17.181]    <block atomic="false" info="">
[12:30:17.181]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:30:17.181]        // -> [isSWJ <= 0x00000001]
[12:30:17.181]      __var hasDormant = __protocol & 0x00020000;
[12:30:17.181]        // -> [hasDormant <= 0x00000000]
[12:30:17.181]      __var protType   = __protocol & 0x0000FFFF;
[12:30:17.181]        // -> [protType <= 0x00000002]
[12:30:17.181]    </block>
[12:30:17.181]    <control if="protType == 1" while="" timeout="0" info="">
[12:30:17.181]      // if-block "protType == 1"
[12:30:17.181]        // =>  FALSE
[12:30:17.181]      // skip if-block "protType == 1"
[12:30:17.184]    </control>
[12:30:17.184]    <control if="protType == 2" while="" timeout="0" info="">
[12:30:17.184]      // if-block "protType == 2"
[12:30:17.184]        // =>  TRUE
[12:30:17.184]      <control if="isSWJ" while="" timeout="0" info="">
[12:30:17.184]        // if-block "isSWJ"
[12:30:17.184]          // =>  TRUE
[12:30:17.184]        <control if="hasDormant" while="" timeout="0" info="">
[12:30:17.184]          // if-block "hasDormant"
[12:30:17.184]            // =>  FALSE
[12:30:17.184]          // skip if-block "hasDormant"
[12:30:17.184]        </control>
[12:30:17.184]        <control if="!hasDormant" while="" timeout="0" info="">
[12:30:17.184]          // if-block "!hasDormant"
[12:30:17.184]            // =>  TRUE
[12:30:17.184]          <block atomic="false" info="">
[12:30:17.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:30:17.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:17.184]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:30:17.184]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:30:17.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:30:17.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:17.184]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:30:17.184]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:30:17.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:30:17.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:17.194]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:30:17.195]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:30:17.195]          </block>
[12:30:17.195]          // end if-block "!hasDormant"
[12:30:17.195]        </control>
[12:30:17.195]        // end if-block "isSWJ"
[12:30:17.195]      </control>
[12:30:17.195]      <control if="!isSWJ" while="" timeout="0" info="">
[12:30:17.195]        // if-block "!isSWJ"
[12:30:17.195]          // =>  FALSE
[12:30:17.195]        // skip if-block "!isSWJ"
[12:30:17.195]      </control>
[12:30:17.195]      <block atomic="false" info="">
[12:30:17.195]        ReadDP(0x0);
[12:30:17.195]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:30:17.195]      </block>
[12:30:17.195]      // end if-block "protType == 2"
[12:30:17.195]    </control>
[12:30:17.195]  </sequence>
[12:30:17.195]  
[12:30:17.195]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:30:17.195]  
[12:30:17.195]  <debugvars>
[12:30:17.195]    // Pre-defined
[12:30:17.195]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:17.195]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:30:17.195]    __dp=0x00000000
[12:30:17.195]    __ap=0x00000000
[12:30:17.195]    __traceout=0x00000000      (Trace Disabled)
[12:30:17.195]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:17.195]    __FlashAddr=0x00000000
[12:30:17.195]    __FlashLen=0x00000000
[12:30:17.195]    __FlashArg=0x00000000
[12:30:17.195]    __FlashOp=0x00000000
[12:30:17.195]    __Result=0x00000000
[12:30:17.195]  </debugvars>
[12:30:17.195]  
[12:30:17.195]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:30:17.195]    <block atomic="false" info="">
[12:30:17.195]      __var SW_DP_ABORT       = 0x0;
[12:30:17.195]        // -> [SW_DP_ABORT <= 0x00000000]
[12:30:17.195]      __var DP_CTRL_STAT      = 0x4;
[12:30:17.204]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:30:17.204]      __var DP_SELECT         = 0x8;
[12:30:17.204]        // -> [DP_SELECT <= 0x00000008]
[12:30:17.204]      __var powered_down      = 0;
[12:30:17.204]        // -> [powered_down <= 0x00000000]
[12:30:17.204]      WriteDP(DP_SELECT, 0x00000000);
[12:30:17.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:30:17.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:30:17.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:30:17.204]        // -> [powered_down <= 0x00000001]
[12:30:17.204]    </block>
[12:30:17.204]    <control if="powered_down" while="" timeout="0" info="">
[12:30:17.204]      // if-block "powered_down"
[12:30:17.204]        // =>  TRUE
[12:30:17.204]      <block atomic="false" info="">
[12:30:17.204]        Message(0, "Debug/System power-up request sent");
[12:30:17.204]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:30:17.204]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:30:17.204]      </block>
[12:30:17.204]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:30:17.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:30:17.204]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:30:17.214]        // while-condition  =>  FALSE
[12:30:17.214]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:30:17.214]      </control>
[12:30:17.214]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:30:17.214]        // if-block "(__protocol & 0xFFFF) == 1"
[12:30:17.214]          // =>  FALSE
[12:30:17.214]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:30:17.214]      </control>
[12:30:17.214]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:30:17.214]        // if-block "(__protocol & 0xFFFF) == 2"
[12:30:17.214]          // =>  TRUE
[12:30:17.214]        <block atomic="false" info="">
[12:30:17.214]          Message(0, "executing SWD power up");
[12:30:17.214]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:30:17.214]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:30:17.214]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:30:17.220]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:30:17.220]        </block>
[12:30:17.220]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:30:17.221]      </control>
[12:30:17.221]      // end if-block "powered_down"
[12:30:17.221]    </control>
[12:30:17.221]    <block atomic="false" info="">
[12:30:17.221]      __var DEBUG_PORT_VAL    = 0;
[12:30:17.221]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:30:17.221]      __var ACCESS_POINT_VAL  = 0;
[12:30:17.221]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:30:17.221]      __ap = 1; 
[12:30:17.221]        // -> [__ap <= 0x00000001]
[12:30:17.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:30:17.224]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:30:17.224]      __ap = 4;
[12:30:17.224]        // -> [__ap <= 0x00000004]
[12:30:17.224]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:17.224]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:30:17.224]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:30:17.224]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:17.224]    </block>
[12:30:17.224]    <block atomic="false" info="">
[12:30:17.224]      __var nReset = 0x80;
[12:30:17.224]        // -> [nReset <= 0x00000080]
[12:30:17.224]      __var canReadPins = 0;
[12:30:17.224]        // -> [canReadPins <= 0x00000000]
[12:30:17.224]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:30:17.224]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:30:17.224]        // -> [canReadPins <= 0x00000001]
[12:30:17.224]    </block>
[12:30:17.224]    <control if="" while="1" timeout="200" info="">
[12:30:17.224]      // while "1"  (timeout="200")
[12:30:17.224]      // while-condition  =>  TRUE
[12:30:17.224]      // while "1"  (timeout="200")
[12:30:17.224]      // while-condition  =>  TRUE
[12:30:17.224]      // while "1"  (timeout="200")
[12:30:17.224]      // while-condition  =>  TRUE
[12:30:17.224]      // while "1"  (timeout="200")
[12:30:17.224]      // while-condition  =>  TRUE
[12:30:17.234]      // while "1"  (timeout="200")
[12:30:17.234]      // while  =>  TIMEOUT
[12:30:17.234]      // end while "1"
[12:30:17.234]    </control>
[12:30:17.234]    <control if="canReadPins" while="" timeout="0" info="">
[12:30:17.234]      // if-block "canReadPins"
[12:30:17.234]        // =>  TRUE
[12:30:17.234]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:30:17.234]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:30:17.234]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:30:17.234]        // while-condition  =>  FALSE
[12:30:17.234]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:30:17.234]      </control>
[12:30:17.234]      // end if-block "canReadPins"
[12:30:17.234]    </control>
[12:30:17.234]    <control if="!canReadPins" while="" timeout="0" info="">
[12:30:17.234]      // if-block "!canReadPins"
[12:30:17.234]        // =>  FALSE
[12:30:17.234]      // skip if-block "!canReadPins"
[12:30:17.234]    </control>
[12:30:17.234]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:30:17.234]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:17.234]        // =>  TRUE
[12:30:17.234]      <block atomic="false" info="">
[12:30:17.234]        WriteAP(0x00, 0x190008);
[12:30:17.234]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:17.234]        WriteAP(0xF0, 0x01);
[12:30:17.234]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:17.234]      </block>
[12:30:17.244]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:17.244]    </control>
[12:30:17.244]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:30:17.244]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:17.244]        // =>  FALSE
[12:30:17.244]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:17.244]    </control>
[12:30:17.244]    <block atomic="false" info="">
[12:30:17.244]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:17.244]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:30:17.244]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:30:17.244]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:17.244]      __ap = 0; //lets make sure we reset the access point selection
[12:30:17.244]        // -> [__ap <= 0x00000000]
[12:30:17.244]    </block>
[12:30:17.244]  </sequence>
[12:30:17.244]  
[12:30:17.269]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:30:17.269]  
[12:30:17.269]  <debugvars>
[12:30:17.269]    // Pre-defined
[12:30:17.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:17.269]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:30:17.269]    __dp=0x00000000
[12:30:17.270]    __ap=0x00000000
[12:30:17.270]    __traceout=0x00000000      (Trace Disabled)
[12:30:17.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:17.270]    __FlashAddr=0x00000000
[12:30:17.270]    __FlashLen=0x00000000
[12:30:17.270]    __FlashArg=0x00000000
[12:30:17.270]    __FlashOp=0x00000000
[12:30:17.270]    __Result=0x00000000
[12:30:17.271]  </debugvars>
[12:30:17.271]  
[12:30:17.271]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:30:17.271]    <block atomic="false" info="">
[12:30:17.271]      __var deviceID = 0;
[12:30:17.271]        // -> [deviceID <= 0x00000000]
[12:30:17.271]      __var version = 0;
[12:30:17.271]        // -> [version <= 0x00000000]
[12:30:17.271]      __var partNum = 0;
[12:30:17.272]        // -> [partNum <= 0x00000000]
[12:30:17.272]      __var manuf = 0;
[12:30:17.272]        // -> [manuf <= 0x00000000]
[12:30:17.272]      __var isMSPM0G1X0X_G3X0X = 0;
[12:30:17.273]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:30:17.273]      __var isProduction = 0;
[12:30:17.273]        // -> [isProduction <= 0x00000000]
[12:30:17.273]      __var continueId = 0;
[12:30:17.273]        // -> [continueId <= 0x00000000]
[12:30:17.273]      deviceID =   Read32(0x41C40004);
[12:30:17.283]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:30:17.283]        // -> [deviceID <= 0x2BB8802F]
[12:30:17.283]      version = deviceID >> 28;
[12:30:17.283]        // -> [version <= 0x00000002]
[12:30:17.283]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:30:17.283]        // -> [partNum <= 0x0000BB88]
[12:30:17.283]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:30:17.283]        // -> [manuf <= 0x00000017]
[12:30:17.283]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:30:17.284]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:30:17.284]      isProduction = (version > 0);
[12:30:17.284]        // -> [isProduction <= 0x00000001]
[12:30:17.284]    </block>
[12:30:17.284]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:30:17.284]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:30:17.284]        // =>  FALSE
[12:30:17.284]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:30:17.284]    </control>
[12:30:17.285]    <control if="continueId == 4" while="" timeout="0" info="">
[12:30:17.285]      // if-block "continueId == 4"
[12:30:17.285]        // =>  FALSE
[12:30:17.285]      // skip if-block "continueId == 4"
[12:30:17.285]    </control>
[12:30:17.285]    <control if="!isProduction" while="" timeout="0" info="">
[12:30:17.285]      // if-block "!isProduction"
[12:30:17.285]        // =>  FALSE
[12:30:17.285]      // skip if-block "!isProduction"
[12:30:17.285]    </control>
[12:30:17.286]  </sequence>
[12:30:17.286]  
[12:30:42.630]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:30:42.630]  
[12:30:42.644]  <debugvars>
[12:30:42.644]    // Pre-defined
[12:30:42.644]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:42.644]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:30:42.644]    __dp=0x00000000
[12:30:42.644]    __ap=0x00000000
[12:30:42.644]    __traceout=0x00000000      (Trace Disabled)
[12:30:42.644]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:42.644]    __FlashAddr=0x00000000
[12:30:42.644]    __FlashLen=0x00000000
[12:30:42.644]    __FlashArg=0x00000000
[12:30:42.644]    __FlashOp=0x00000000
[12:30:42.644]    __Result=0x00000000
[12:30:42.644]  </debugvars>
[12:30:42.644]  
[12:30:42.644]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:30:42.644]    <block atomic="false" info="">
[12:30:42.644]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:30:42.644]        // -> [isSWJ <= 0x00000001]
[12:30:42.644]      __var hasDormant = __protocol & 0x00020000;
[12:30:42.644]        // -> [hasDormant <= 0x00000000]
[12:30:42.644]      __var protType   = __protocol & 0x0000FFFF;
[12:30:42.644]        // -> [protType <= 0x00000002]
[12:30:42.644]    </block>
[12:30:42.644]    <control if="protType == 1" while="" timeout="0" info="">
[12:30:42.644]      // if-block "protType == 1"
[12:30:42.644]        // =>  FALSE
[12:30:42.644]      // skip if-block "protType == 1"
[12:30:42.647]    </control>
[12:30:42.647]    <control if="protType == 2" while="" timeout="0" info="">
[12:30:42.647]      // if-block "protType == 2"
[12:30:42.647]        // =>  TRUE
[12:30:42.647]      <control if="isSWJ" while="" timeout="0" info="">
[12:30:42.647]        // if-block "isSWJ"
[12:30:42.647]          // =>  TRUE
[12:30:42.647]        <control if="hasDormant" while="" timeout="0" info="">
[12:30:42.647]          // if-block "hasDormant"
[12:30:42.647]            // =>  FALSE
[12:30:42.647]          // skip if-block "hasDormant"
[12:30:42.647]        </control>
[12:30:42.647]        <control if="!hasDormant" while="" timeout="0" info="">
[12:30:42.648]          // if-block "!hasDormant"
[12:30:42.648]            // =>  TRUE
[12:30:42.648]          <block atomic="false" info="">
[12:30:42.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:30:42.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:42.650]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:30:42.650]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:30:42.650]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:30:42.650]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:42.650]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:30:42.650]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:30:42.650]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:30:42.650]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:42.650]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:30:42.650]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:30:42.650]          </block>
[12:30:42.650]          // end if-block "!hasDormant"
[12:30:42.650]        </control>
[12:30:42.650]        // end if-block "isSWJ"
[12:30:42.650]      </control>
[12:30:42.650]      <control if="!isSWJ" while="" timeout="0" info="">
[12:30:42.650]        // if-block "!isSWJ"
[12:30:42.650]          // =>  FALSE
[12:30:42.650]        // skip if-block "!isSWJ"
[12:30:42.650]      </control>
[12:30:42.650]      <block atomic="false" info="">
[12:30:42.650]        ReadDP(0x0);
[12:30:42.660]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:30:42.660]      </block>
[12:30:42.660]      // end if-block "protType == 2"
[12:30:42.660]    </control>
[12:30:42.660]  </sequence>
[12:30:42.660]  
[12:30:42.660]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:30:42.660]  
[12:30:42.660]  <debugvars>
[12:30:42.660]    // Pre-defined
[12:30:42.660]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:42.660]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:30:42.660]    __dp=0x00000000
[12:30:42.660]    __ap=0x00000000
[12:30:42.660]    __traceout=0x00000000      (Trace Disabled)
[12:30:42.660]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:42.660]    __FlashAddr=0x00000000
[12:30:42.660]    __FlashLen=0x00000000
[12:30:42.660]    __FlashArg=0x00000000
[12:30:42.660]    __FlashOp=0x00000000
[12:30:42.660]    __Result=0x00000000
[12:30:42.660]  </debugvars>
[12:30:42.660]  
[12:30:42.660]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:30:42.660]    <block atomic="false" info="">
[12:30:42.660]      __var SW_DP_ABORT       = 0x0;
[12:30:42.660]        // -> [SW_DP_ABORT <= 0x00000000]
[12:30:42.660]      __var DP_CTRL_STAT      = 0x4;
[12:30:42.660]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:30:42.660]      __var DP_SELECT         = 0x8;
[12:30:42.660]        // -> [DP_SELECT <= 0x00000008]
[12:30:42.660]      __var powered_down      = 0;
[12:30:42.666]        // -> [powered_down <= 0x00000000]
[12:30:42.666]      WriteDP(DP_SELECT, 0x00000000);
[12:30:42.667]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:30:42.667]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:30:42.671]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:30:42.671]        // -> [powered_down <= 0x00000001]
[12:30:42.671]    </block>
[12:30:42.671]    <control if="powered_down" while="" timeout="0" info="">
[12:30:42.671]      // if-block "powered_down"
[12:30:42.671]        // =>  TRUE
[12:30:42.671]      <block atomic="false" info="">
[12:30:42.671]        Message(0, "Debug/System power-up request sent");
[12:30:42.673]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:30:42.675]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:30:42.675]      </block>
[12:30:42.675]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:30:42.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:30:42.677]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:30:42.677]        // while-condition  =>  FALSE
[12:30:42.677]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:30:42.677]      </control>
[12:30:42.677]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:30:42.677]        // if-block "(__protocol & 0xFFFF) == 1"
[12:30:42.677]          // =>  FALSE
[12:30:42.677]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:30:42.677]      </control>
[12:30:42.677]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:30:42.677]        // if-block "(__protocol & 0xFFFF) == 2"
[12:30:42.677]          // =>  TRUE
[12:30:42.677]        <block atomic="false" info="">
[12:30:42.677]          Message(0, "executing SWD power up");
[12:30:42.680]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:30:42.682]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:30:42.682]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:30:42.684]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:30:42.684]        </block>
[12:30:42.684]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:30:42.684]      </control>
[12:30:42.684]      // end if-block "powered_down"
[12:30:42.684]    </control>
[12:30:42.684]    <block atomic="false" info="">
[12:30:42.684]      __var DEBUG_PORT_VAL    = 0;
[12:30:42.684]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:30:42.684]      __var ACCESS_POINT_VAL  = 0;
[12:30:42.684]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:30:42.684]      __ap = 1; 
[12:30:42.684]        // -> [__ap <= 0x00000001]
[12:30:42.684]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:30:42.688]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:30:42.688]      __ap = 4;
[12:30:42.688]        // -> [__ap <= 0x00000004]
[12:30:42.688]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:42.690]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:30:42.690]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:30:42.690]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:42.690]    </block>
[12:30:42.690]    <block atomic="false" info="">
[12:30:42.690]      __var nReset = 0x80;
[12:30:42.690]        // -> [nReset <= 0x00000080]
[12:30:42.690]      __var canReadPins = 0;
[12:30:42.690]        // -> [canReadPins <= 0x00000000]
[12:30:42.690]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:30:42.690]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:30:42.690]        // -> [canReadPins <= 0x00000001]
[12:30:42.690]    </block>
[12:30:42.690]    <control if="" while="1" timeout="200" info="">
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.690]      // while "1"  (timeout="200")
[12:30:42.690]      // while-condition  =>  TRUE
[12:30:42.698]      // while "1"  (timeout="200")
[12:30:42.698]      // while  =>  TIMEOUT
[12:30:42.698]      // end while "1"
[12:30:42.698]    </control>
[12:30:42.698]    <control if="canReadPins" while="" timeout="0" info="">
[12:30:42.698]      // if-block "canReadPins"
[12:30:42.698]        // =>  TRUE
[12:30:42.698]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:30:42.698]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:30:42.700]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:30:42.700]        // while-condition  =>  FALSE
[12:30:42.700]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:30:42.700]      </control>
[12:30:42.701]      // end if-block "canReadPins"
[12:30:42.701]    </control>
[12:30:42.701]    <control if="!canReadPins" while="" timeout="0" info="">
[12:30:42.701]      // if-block "!canReadPins"
[12:30:42.701]        // =>  FALSE
[12:30:42.701]      // skip if-block "!canReadPins"
[12:30:42.701]    </control>
[12:30:42.701]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:30:42.701]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:42.701]        // =>  TRUE
[12:30:42.701]      <block atomic="false" info="">
[12:30:42.701]        WriteAP(0x00, 0x190008);
[12:30:42.703]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:42.703]        WriteAP(0xF0, 0x01);
[12:30:42.707]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:42.707]      </block>
[12:30:42.707]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:42.707]    </control>
[12:30:42.707]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:30:42.707]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:42.707]        // =>  FALSE
[12:30:42.707]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:42.709]    </control>
[12:30:42.709]    <block atomic="false" info="">
[12:30:42.709]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:42.712]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:30:42.712]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:30:42.712]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:42.712]      __ap = 0; //lets make sure we reset the access point selection
[12:30:42.712]        // -> [__ap <= 0x00000000]
[12:30:42.712]    </block>
[12:30:42.712]  </sequence>
[12:30:42.712]  
[12:30:42.732]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:30:42.732]  
[12:30:42.732]  <debugvars>
[12:30:42.732]    // Pre-defined
[12:30:42.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:42.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:30:42.732]    __dp=0x00000000
[12:30:42.732]    __ap=0x00000000
[12:30:42.732]    __traceout=0x00000000      (Trace Disabled)
[12:30:42.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:42.732]    __FlashAddr=0x00000000
[12:30:42.732]    __FlashLen=0x00000000
[12:30:42.732]    __FlashArg=0x00000000
[12:30:42.732]    __FlashOp=0x00000000
[12:30:42.732]    __Result=0x00000000
[12:30:42.732]  </debugvars>
[12:30:42.732]  
[12:30:42.732]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:30:42.732]    <block atomic="false" info="">
[12:30:42.732]      __var deviceID = 0;
[12:30:42.732]        // -> [deviceID <= 0x00000000]
[12:30:42.732]      __var version = 0;
[12:30:42.732]        // -> [version <= 0x00000000]
[12:30:42.732]      __var partNum = 0;
[12:30:42.732]        // -> [partNum <= 0x00000000]
[12:30:42.732]      __var manuf = 0;
[12:30:42.732]        // -> [manuf <= 0x00000000]
[12:30:42.732]      __var isMSPM0G1X0X_G3X0X = 0;
[12:30:42.732]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:30:42.741]      __var isProduction = 0;
[12:30:42.741]        // -> [isProduction <= 0x00000000]
[12:30:42.741]      __var continueId = 0;
[12:30:42.741]        // -> [continueId <= 0x00000000]
[12:30:42.741]      deviceID =   Read32(0x41C40004);
[12:30:42.742]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:30:42.742]        // -> [deviceID <= 0x2BB8802F]
[12:30:42.742]      version = deviceID >> 28;
[12:30:42.742]        // -> [version <= 0x00000002]
[12:30:42.742]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:30:42.742]        // -> [partNum <= 0x0000BB88]
[12:30:42.742]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:30:42.742]        // -> [manuf <= 0x00000017]
[12:30:42.742]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:30:42.742]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:30:42.742]      isProduction = (version > 0);
[12:30:42.742]        // -> [isProduction <= 0x00000001]
[12:30:42.742]    </block>
[12:30:42.742]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:30:42.742]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:30:42.742]        // =>  FALSE
[12:30:42.742]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:30:42.742]    </control>
[12:30:42.742]    <control if="continueId == 4" while="" timeout="0" info="">
[12:30:42.742]      // if-block "continueId == 4"
[12:30:42.742]        // =>  FALSE
[12:30:42.742]      // skip if-block "continueId == 4"
[12:30:42.742]    </control>
[12:30:42.742]    <control if="!isProduction" while="" timeout="0" info="">
[12:30:42.742]      // if-block "!isProduction"
[12:30:42.742]        // =>  FALSE
[12:30:42.742]      // skip if-block "!isProduction"
[12:30:42.749]    </control>
[12:30:42.749]  </sequence>
[12:30:42.749]  
[12:30:47.889]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:30:47.889]  
[12:30:47.889]  <debugvars>
[12:30:47.889]    // Pre-defined
[12:30:47.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:47.889]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:30:47.889]    __dp=0x00000000
[12:30:47.889]    __ap=0x00000000
[12:30:47.889]    __traceout=0x00000000      (Trace Disabled)
[12:30:47.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:47.889]    __FlashAddr=0x00000000
[12:30:47.889]    __FlashLen=0x00000000
[12:30:47.889]    __FlashArg=0x00000000
[12:30:47.889]    __FlashOp=0x00000000
[12:30:47.889]    __Result=0x00000000
[12:30:47.889]  </debugvars>
[12:30:47.889]  
[12:30:47.889]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:30:47.889]    <block atomic="false" info="">
[12:30:47.889]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:30:47.889]        // -> [isSWJ <= 0x00000001]
[12:30:47.889]      __var hasDormant = __protocol & 0x00020000;
[12:30:47.889]        // -> [hasDormant <= 0x00000000]
[12:30:47.889]      __var protType   = __protocol & 0x0000FFFF;
[12:30:47.889]        // -> [protType <= 0x00000002]
[12:30:47.889]    </block>
[12:30:47.889]    <control if="protType == 1" while="" timeout="0" info="">
[12:30:47.889]      // if-block "protType == 1"
[12:30:47.889]        // =>  FALSE
[12:30:47.889]      // skip if-block "protType == 1"
[12:30:47.896]    </control>
[12:30:47.896]    <control if="protType == 2" while="" timeout="0" info="">
[12:30:47.896]      // if-block "protType == 2"
[12:30:47.896]        // =>  TRUE
[12:30:47.896]      <control if="isSWJ" while="" timeout="0" info="">
[12:30:47.896]        // if-block "isSWJ"
[12:30:47.896]          // =>  TRUE
[12:30:47.896]        <control if="hasDormant" while="" timeout="0" info="">
[12:30:47.896]          // if-block "hasDormant"
[12:30:47.896]            // =>  FALSE
[12:30:47.896]          // skip if-block "hasDormant"
[12:30:47.897]        </control>
[12:30:47.897]        <control if="!hasDormant" while="" timeout="0" info="">
[12:30:47.897]          // if-block "!hasDormant"
[12:30:47.897]            // =>  TRUE
[12:30:47.897]          <block atomic="false" info="">
[12:30:47.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:30:47.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:47.897]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:30:47.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:30:47.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:30:47.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:47.897]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:30:47.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:30:47.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:30:47.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:30:47.897]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:30:47.906]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:30:47.906]          </block>
[12:30:47.906]          // end if-block "!hasDormant"
[12:30:47.906]        </control>
[12:30:47.906]        // end if-block "isSWJ"
[12:30:47.906]      </control>
[12:30:47.906]      <control if="!isSWJ" while="" timeout="0" info="">
[12:30:47.906]        // if-block "!isSWJ"
[12:30:47.906]          // =>  FALSE
[12:30:47.906]        // skip if-block "!isSWJ"
[12:30:47.906]      </control>
[12:30:47.908]      <block atomic="false" info="">
[12:30:47.908]        ReadDP(0x0);
[12:30:47.908]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:30:47.908]      </block>
[12:30:47.908]      // end if-block "protType == 2"
[12:30:47.908]    </control>
[12:30:47.908]  </sequence>
[12:30:47.908]  
[12:30:47.908]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:30:47.908]  
[12:30:47.908]  <debugvars>
[12:30:47.908]    // Pre-defined
[12:30:47.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:47.908]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:30:47.908]    __dp=0x00000000
[12:30:47.908]    __ap=0x00000000
[12:30:47.908]    __traceout=0x00000000      (Trace Disabled)
[12:30:47.908]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:47.908]    __FlashAddr=0x00000000
[12:30:47.908]    __FlashLen=0x00000000
[12:30:47.908]    __FlashArg=0x00000000
[12:30:47.908]    __FlashOp=0x00000000
[12:30:47.908]    __Result=0x00000000
[12:30:47.908]  </debugvars>
[12:30:47.908]  
[12:30:47.908]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:30:47.908]    <block atomic="false" info="">
[12:30:47.908]      __var SW_DP_ABORT       = 0x0;
[12:30:47.908]        // -> [SW_DP_ABORT <= 0x00000000]
[12:30:47.908]      __var DP_CTRL_STAT      = 0x4;
[12:30:47.908]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:30:47.908]      __var DP_SELECT         = 0x8;
[12:30:47.908]        // -> [DP_SELECT <= 0x00000008]
[12:30:47.908]      __var powered_down      = 0;
[12:30:47.908]        // -> [powered_down <= 0x00000000]
[12:30:47.908]      WriteDP(DP_SELECT, 0x00000000);
[12:30:47.916]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:30:47.916]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:30:47.918]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:30:47.918]        // -> [powered_down <= 0x00000001]
[12:30:47.918]    </block>
[12:30:47.918]    <control if="powered_down" while="" timeout="0" info="">
[12:30:47.918]      // if-block "powered_down"
[12:30:47.918]        // =>  TRUE
[12:30:47.918]      <block atomic="false" info="">
[12:30:47.918]        Message(0, "Debug/System power-up request sent");
[12:30:47.918]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:30:47.923]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:30:47.923]      </block>
[12:30:47.923]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:30:47.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:30:47.923]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:30:47.923]        // while-condition  =>  FALSE
[12:30:47.923]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:30:47.923]      </control>
[12:30:47.923]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:30:47.923]        // if-block "(__protocol & 0xFFFF) == 1"
[12:30:47.923]          // =>  FALSE
[12:30:47.923]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:30:47.923]      </control>
[12:30:47.923]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:30:47.923]        // if-block "(__protocol & 0xFFFF) == 2"
[12:30:47.923]          // =>  TRUE
[12:30:47.923]        <block atomic="false" info="">
[12:30:47.923]          Message(0, "executing SWD power up");
[12:30:47.927]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:30:47.929]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:30:47.929]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:30:47.929]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:30:47.929]        </block>
[12:30:47.929]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:30:47.929]      </control>
[12:30:47.929]      // end if-block "powered_down"
[12:30:47.929]    </control>
[12:30:47.929]    <block atomic="false" info="">
[12:30:47.929]      __var DEBUG_PORT_VAL    = 0;
[12:30:47.929]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:30:47.929]      __var ACCESS_POINT_VAL  = 0;
[12:30:47.929]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:30:47.929]      __ap = 1; 
[12:30:47.929]        // -> [__ap <= 0x00000001]
[12:30:47.929]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:30:47.929]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:30:47.929]      __ap = 4;
[12:30:47.929]        // -> [__ap <= 0x00000004]
[12:30:47.937]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:47.937]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:30:47.937]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:30:47.937]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:47.942]    </block>
[12:30:47.942]    <block atomic="false" info="">
[12:30:47.942]      __var nReset = 0x80;
[12:30:47.942]        // -> [nReset <= 0x00000080]
[12:30:47.942]      __var canReadPins = 0;
[12:30:47.942]        // -> [canReadPins <= 0x00000000]
[12:30:47.942]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:30:47.942]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:30:47.942]        // -> [canReadPins <= 0x00000001]
[12:30:47.942]    </block>
[12:30:47.942]    <control if="" while="1" timeout="200" info="">
[12:30:47.945]      // while "1"  (timeout="200")
[12:30:47.945]      // while-condition  =>  TRUE
[12:30:47.945]      // while "1"  (timeout="200")
[12:30:47.945]      // while-condition  =>  TRUE
[12:30:47.945]      // while "1"  (timeout="200")
[12:30:47.945]      // while-condition  =>  TRUE
[12:30:47.945]      // while "1"  (timeout="200")
[12:30:47.945]      // while-condition  =>  TRUE
[12:30:47.945]      // while "1"  (timeout="200")
[12:30:47.945]      // while-condition  =>  TRUE
[12:30:47.945]      // while "1"  (timeout="200")
[12:30:47.946]      // while-condition  =>  TRUE
[12:30:47.946]      // while "1"  (timeout="200")
[12:30:47.946]      // while-condition  =>  TRUE
[12:30:47.946]      // while "1"  (timeout="200")
[12:30:47.946]      // while-condition  =>  TRUE
[12:30:47.946]      // while "1"  (timeout="200")
[12:30:47.946]      // while-condition  =>  TRUE
[12:30:47.946]      // while "1"  (timeout="200")
[12:30:47.946]      // while-condition  =>  TRUE
[12:30:47.946]      // while "1"  (timeout="200")
[12:30:47.946]      // while-condition  =>  TRUE
[12:30:47.948]      // while "1"  (timeout="200")
[12:30:47.948]      // while-condition  =>  TRUE
[12:30:47.948]      // while "1"  (timeout="200")
[12:30:47.948]      // while-condition  =>  TRUE
[12:30:47.948]      // while "1"  (timeout="200")
[12:30:47.949]      // while-condition  =>  TRUE
[12:30:47.949]      // while "1"  (timeout="200")
[12:30:47.949]      // while-condition  =>  TRUE
[12:30:47.949]      // while "1"  (timeout="200")
[12:30:47.949]      // while-condition  =>  TRUE
[12:30:47.949]      // while "1"  (timeout="200")
[12:30:47.949]      // while-condition  =>  TRUE
[12:30:47.949]      // while "1"  (timeout="200")
[12:30:47.949]      // while-condition  =>  TRUE
[12:30:47.949]      // while "1"  (timeout="200")
[12:30:47.950]      // while-condition  =>  TRUE
[12:30:47.950]      // while "1"  (timeout="200")
[12:30:47.950]      // while-condition  =>  TRUE
[12:30:47.950]      // while "1"  (timeout="200")
[12:30:47.950]      // while-condition  =>  TRUE
[12:30:47.950]      // while "1"  (timeout="200")
[12:30:47.950]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.951]      // while-condition  =>  TRUE
[12:30:47.951]      // while "1"  (timeout="200")
[12:30:47.953]      // while-condition  =>  TRUE
[12:30:47.953]      // while "1"  (timeout="200")
[12:30:47.953]      // while-condition  =>  TRUE
[12:30:47.953]      // while "1"  (timeout="200")
[12:30:47.953]      // while-condition  =>  TRUE
[12:30:47.953]      // while "1"  (timeout="200")
[12:30:47.953]      // while-condition  =>  TRUE
[12:30:47.953]      // while "1"  (timeout="200")
[12:30:47.953]      // while-condition  =>  TRUE
[12:30:47.953]      // while "1"  (timeout="200")
[12:30:47.953]      // while-condition  =>  TRUE
[12:30:47.953]      // while "1"  (timeout="200")
[12:30:47.953]      // while-condition  =>  TRUE
[12:30:47.953]      // while "1"  (timeout="200")
[12:30:47.954]      // while-condition  =>  TRUE
[12:30:47.954]      // while "1"  (timeout="200")
[12:30:47.954]      // while-condition  =>  TRUE
[12:30:47.954]      // while "1"  (timeout="200")
[12:30:47.954]      // while-condition  =>  TRUE
[12:30:47.954]      // while "1"  (timeout="200")
[12:30:47.954]      // while-condition  =>  TRUE
[12:30:47.954]      // while "1"  (timeout="200")
[12:30:47.954]      // while-condition  =>  TRUE
[12:30:47.954]      // while "1"  (timeout="200")
[12:30:47.954]      // while-condition  =>  TRUE
[12:30:47.954]      // while "1"  (timeout="200")
[12:30:47.954]      // while-condition  =>  TRUE
[12:30:47.956]      // while "1"  (timeout="200")
[12:30:47.956]      // while-condition  =>  TRUE
[12:30:47.956]      // while "1"  (timeout="200")
[12:30:47.956]      // while-condition  =>  TRUE
[12:30:47.956]      // while "1"  (timeout="200")
[12:30:47.956]      // while-condition  =>  TRUE
[12:30:47.956]      // while "1"  (timeout="200")
[12:30:47.956]      // while-condition  =>  TRUE
[12:30:47.956]      // while "1"  (timeout="200")
[12:30:47.956]      // while-condition  =>  TRUE
[12:30:47.956]      // while "1"  (timeout="200")
[12:30:47.957]      // while-condition  =>  TRUE
[12:30:47.957]      // while "1"  (timeout="200")
[12:30:47.957]      // while-condition  =>  TRUE
[12:30:47.957]      // while "1"  (timeout="200")
[12:30:47.957]      // while-condition  =>  TRUE
[12:30:47.957]      // while "1"  (timeout="200")
[12:30:47.957]      // while-condition  =>  TRUE
[12:30:47.957]      // while "1"  (timeout="200")
[12:30:47.957]      // while-condition  =>  TRUE
[12:30:47.957]      // while "1"  (timeout="200")
[12:30:47.957]      // while-condition  =>  TRUE
[12:30:47.957]      // while "1"  (timeout="200")
[12:30:47.957]      // while-condition  =>  TRUE
[12:30:47.957]      // while "1"  (timeout="200")
[12:30:47.958]      // while-condition  =>  TRUE
[12:30:47.958]      // while "1"  (timeout="200")
[12:30:47.958]      // while-condition  =>  TRUE
[12:30:47.958]      // while "1"  (timeout="200")
[12:30:47.958]      // while-condition  =>  TRUE
[12:30:47.958]      // while "1"  (timeout="200")
[12:30:47.958]      // while-condition  =>  TRUE
[12:30:47.958]      // while "1"  (timeout="200")
[12:30:47.959]      // while-condition  =>  TRUE
[12:30:47.959]      // while "1"  (timeout="200")
[12:30:47.959]      // while  =>  TIMEOUT
[12:30:47.959]      // end while "1"
[12:30:47.959]    </control>
[12:30:47.959]    <control if="canReadPins" while="" timeout="0" info="">
[12:30:47.959]      // if-block "canReadPins"
[12:30:47.959]        // =>  TRUE
[12:30:47.959]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:30:47.959]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:30:47.965]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:30:47.965]        // while-condition  =>  FALSE
[12:30:47.965]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:30:47.965]      </control>
[12:30:47.965]      // end if-block "canReadPins"
[12:30:47.965]    </control>
[12:30:47.965]    <control if="!canReadPins" while="" timeout="0" info="">
[12:30:47.966]      // if-block "!canReadPins"
[12:30:47.966]        // =>  FALSE
[12:30:47.966]      // skip if-block "!canReadPins"
[12:30:47.966]    </control>
[12:30:47.966]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:30:47.966]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:47.966]        // =>  TRUE
[12:30:47.966]      <block atomic="false" info="">
[12:30:47.966]        WriteAP(0x00, 0x190008);
[12:30:47.971]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:47.971]        WriteAP(0xF0, 0x01);
[12:30:47.971]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:30:47.971]      </block>
[12:30:47.971]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:30:47.971]    </control>
[12:30:47.971]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:30:47.971]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:47.971]        // =>  FALSE
[12:30:47.971]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:30:47.971]    </control>
[12:30:47.971]    <block atomic="false" info="">
[12:30:47.971]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:30:47.979]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:30:47.979]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:30:47.979]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:30:47.979]      __ap = 0; //lets make sure we reset the access point selection
[12:30:47.979]        // -> [__ap <= 0x00000000]
[12:30:47.979]    </block>
[12:30:47.979]  </sequence>
[12:30:47.979]  
[12:30:48.001]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:30:48.001]  
[12:30:48.001]  <debugvars>
[12:30:48.001]    // Pre-defined
[12:30:48.001]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:30:48.001]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:30:48.001]    __dp=0x00000000
[12:30:48.001]    __ap=0x00000000
[12:30:48.001]    __traceout=0x00000000      (Trace Disabled)
[12:30:48.001]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:30:48.001]    __FlashAddr=0x00000000
[12:30:48.001]    __FlashLen=0x00000000
[12:30:48.001]    __FlashArg=0x00000000
[12:30:48.001]    __FlashOp=0x00000000
[12:30:48.001]    __Result=0x00000000
[12:30:48.001]  </debugvars>
[12:30:48.001]  
[12:30:48.001]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:30:48.001]    <block atomic="false" info="">
[12:30:48.001]      __var deviceID = 0;
[12:30:48.001]        // -> [deviceID <= 0x00000000]
[12:30:48.001]      __var version = 0;
[12:30:48.001]        // -> [version <= 0x00000000]
[12:30:48.001]      __var partNum = 0;
[12:30:48.001]        // -> [partNum <= 0x00000000]
[12:30:48.001]      __var manuf = 0;
[12:30:48.001]        // -> [manuf <= 0x00000000]
[12:30:48.001]      __var isMSPM0G1X0X_G3X0X = 0;
[12:30:48.001]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:30:48.001]      __var isProduction = 0;
[12:30:48.001]        // -> [isProduction <= 0x00000000]
[12:30:48.001]      __var continueId = 0;
[12:30:48.001]        // -> [continueId <= 0x00000000]
[12:30:48.001]      deviceID =   Read32(0x41C40004);
[12:30:48.009]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:30:48.009]        // -> [deviceID <= 0x2BB8802F]
[12:30:48.009]      version = deviceID >> 28;
[12:30:48.009]        // -> [version <= 0x00000002]
[12:30:48.009]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:30:48.009]        // -> [partNum <= 0x0000BB88]
[12:30:48.009]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:30:48.009]        // -> [manuf <= 0x00000017]
[12:30:48.009]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:30:48.009]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:30:48.009]      isProduction = (version > 0);
[12:30:48.009]        // -> [isProduction <= 0x00000001]
[12:30:48.009]    </block>
[12:30:48.009]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:30:48.011]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:30:48.011]        // =>  FALSE
[12:30:48.011]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:30:48.011]    </control>
[12:30:48.011]    <control if="continueId == 4" while="" timeout="0" info="">
[12:30:48.011]      // if-block "continueId == 4"
[12:30:48.011]        // =>  FALSE
[12:30:48.011]      // skip if-block "continueId == 4"
[12:30:48.011]    </control>
[12:30:48.011]    <control if="!isProduction" while="" timeout="0" info="">
[12:30:48.011]      // if-block "!isProduction"
[12:30:48.011]        // =>  FALSE
[12:30:48.011]      // skip if-block "!isProduction"
[12:30:48.013]    </control>
[12:30:48.013]  </sequence>
[12:30:48.013]  
[12:33:36.806]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:33:36.806]  
[12:33:36.817]  <debugvars>
[12:33:36.817]    // Pre-defined
[12:33:36.817]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:36.817]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:33:36.817]    __dp=0x00000000
[12:33:36.817]    __ap=0x00000000
[12:33:36.817]    __traceout=0x00000000      (Trace Disabled)
[12:33:36.817]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:36.817]    __FlashAddr=0x00000000
[12:33:36.819]    __FlashLen=0x00000000
[12:33:36.819]    __FlashArg=0x00000000
[12:33:36.819]    __FlashOp=0x00000000
[12:33:36.819]    __Result=0x00000000
[12:33:36.819]  </debugvars>
[12:33:36.819]  
[12:33:36.819]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:33:36.819]    <block atomic="false" info="">
[12:33:36.819]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:33:36.819]        // -> [isSWJ <= 0x00000001]
[12:33:36.819]      __var hasDormant = __protocol & 0x00020000;
[12:33:36.819]        // -> [hasDormant <= 0x00000000]
[12:33:36.819]      __var protType   = __protocol & 0x0000FFFF;
[12:33:36.819]        // -> [protType <= 0x00000002]
[12:33:36.819]    </block>
[12:33:36.819]    <control if="protType == 1" while="" timeout="0" info="">
[12:33:36.821]      // if-block "protType == 1"
[12:33:36.821]        // =>  FALSE
[12:33:36.821]      // skip if-block "protType == 1"
[12:33:36.821]    </control>
[12:33:36.821]    <control if="protType == 2" while="" timeout="0" info="">
[12:33:36.821]      // if-block "protType == 2"
[12:33:36.821]        // =>  TRUE
[12:33:36.821]      <control if="isSWJ" while="" timeout="0" info="">
[12:33:36.821]        // if-block "isSWJ"
[12:33:36.821]          // =>  TRUE
[12:33:36.821]        <control if="hasDormant" while="" timeout="0" info="">
[12:33:36.821]          // if-block "hasDormant"
[12:33:36.821]            // =>  FALSE
[12:33:36.821]          // skip if-block "hasDormant"
[12:33:36.821]        </control>
[12:33:36.821]        <control if="!hasDormant" while="" timeout="0" info="">
[12:33:36.821]          // if-block "!hasDormant"
[12:33:36.821]            // =>  TRUE
[12:33:36.821]          <block atomic="false" info="">
[12:33:36.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:33:36.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:36.821]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:33:36.821]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:33:36.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:33:36.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:36.826]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:33:36.828]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:33:36.828]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:33:36.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:36.831]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:33:36.832]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:33:36.833]          </block>
[12:33:36.833]          // end if-block "!hasDormant"
[12:33:36.833]        </control>
[12:33:36.833]        // end if-block "isSWJ"
[12:33:36.833]      </control>
[12:33:36.833]      <control if="!isSWJ" while="" timeout="0" info="">
[12:33:36.833]        // if-block "!isSWJ"
[12:33:36.833]          // =>  FALSE
[12:33:36.833]        // skip if-block "!isSWJ"
[12:33:36.833]      </control>
[12:33:36.833]      <block atomic="false" info="">
[12:33:36.834]        ReadDP(0x0);
[12:33:36.834]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:33:36.834]      </block>
[12:33:36.834]      // end if-block "protType == 2"
[12:33:36.834]    </control>
[12:33:36.834]  </sequence>
[12:33:36.834]  
[12:33:36.837]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:33:36.837]  
[12:33:36.837]  <debugvars>
[12:33:36.837]    // Pre-defined
[12:33:36.837]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:36.837]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:33:36.837]    __dp=0x00000000
[12:33:36.837]    __ap=0x00000000
[12:33:36.837]    __traceout=0x00000000      (Trace Disabled)
[12:33:36.837]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:36.837]    __FlashAddr=0x00000000
[12:33:36.837]    __FlashLen=0x00000000
[12:33:36.837]    __FlashArg=0x00000000
[12:33:36.837]    __FlashOp=0x00000000
[12:33:36.837]    __Result=0x00000000
[12:33:36.837]  </debugvars>
[12:33:36.837]  
[12:33:36.841]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:33:36.841]    <block atomic="false" info="">
[12:33:36.841]      __var SW_DP_ABORT       = 0x0;
[12:33:36.841]        // -> [SW_DP_ABORT <= 0x00000000]
[12:33:36.841]      __var DP_CTRL_STAT      = 0x4;
[12:33:36.841]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:33:36.841]      __var DP_SELECT         = 0x8;
[12:33:36.841]        // -> [DP_SELECT <= 0x00000008]
[12:33:36.841]      __var powered_down      = 0;
[12:33:36.841]        // -> [powered_down <= 0x00000000]
[12:33:36.841]      WriteDP(DP_SELECT, 0x00000000);
[12:33:36.843]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:33:36.843]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:33:36.843]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:33:36.843]        // -> [powered_down <= 0x00000001]
[12:33:36.843]    </block>
[12:33:36.843]    <control if="powered_down" while="" timeout="0" info="">
[12:33:36.843]      // if-block "powered_down"
[12:33:36.843]        // =>  TRUE
[12:33:36.843]      <block atomic="false" info="">
[12:33:36.843]        Message(0, "Debug/System power-up request sent");
[12:33:36.849]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:33:36.851]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:33:36.851]      </block>
[12:33:36.851]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:33:36.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:33:36.851]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:33:36.851]        // while-condition  =>  FALSE
[12:33:36.851]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:33:36.851]      </control>
[12:33:36.851]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:33:36.851]        // if-block "(__protocol & 0xFFFF) == 1"
[12:33:36.851]          // =>  FALSE
[12:33:36.851]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:33:36.851]      </control>
[12:33:36.851]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:33:36.851]        // if-block "(__protocol & 0xFFFF) == 2"
[12:33:36.851]          // =>  TRUE
[12:33:36.851]        <block atomic="false" info="">
[12:33:36.851]          Message(0, "executing SWD power up");
[12:33:36.851]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:33:36.857]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:33:36.857]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:33:36.857]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:33:36.857]        </block>
[12:33:36.857]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:33:36.857]      </control>
[12:33:36.857]      // end if-block "powered_down"
[12:33:36.857]    </control>
[12:33:36.857]    <block atomic="false" info="">
[12:33:36.857]      __var DEBUG_PORT_VAL    = 0;
[12:33:36.857]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:33:36.857]      __var ACCESS_POINT_VAL  = 0;
[12:33:36.857]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:33:36.857]      __ap = 1; 
[12:33:36.857]        // -> [__ap <= 0x00000001]
[12:33:36.857]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:33:36.867]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:33:36.867]      __ap = 4;
[12:33:36.867]        // -> [__ap <= 0x00000004]
[12:33:36.867]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:36.870]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:33:36.870]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:33:36.870]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:36.870]    </block>
[12:33:36.870]    <block atomic="false" info="">
[12:33:36.870]      __var nReset = 0x80;
[12:33:36.870]        // -> [nReset <= 0x00000080]
[12:33:36.870]      __var canReadPins = 0;
[12:33:36.870]        // -> [canReadPins <= 0x00000000]
[12:33:36.870]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:33:36.870]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:33:36.870]        // -> [canReadPins <= 0x00000001]
[12:33:36.870]    </block>
[12:33:36.870]    <control if="" while="1" timeout="200" info="">
[12:33:36.870]      // while "1"  (timeout="200")
[12:33:36.870]      // while-condition  =>  TRUE
[12:33:36.870]      // while "1"  (timeout="200")
[12:33:36.870]      // while-condition  =>  TRUE
[12:33:36.870]      // while "1"  (timeout="200")
[12:33:36.870]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.878]      // while "1"  (timeout="200")
[12:33:36.878]      // while-condition  =>  TRUE
[12:33:36.881]      // while "1"  (timeout="200")
[12:33:36.881]      // while-condition  =>  TRUE
[12:33:36.881]      // while "1"  (timeout="200")
[12:33:36.881]      // while-condition  =>  TRUE
[12:33:36.881]      // while "1"  (timeout="200")
[12:33:36.881]      // while-condition  =>  TRUE
[12:33:36.881]      // while "1"  (timeout="200")
[12:33:36.881]      // while-condition  =>  TRUE
[12:33:36.881]      // while "1"  (timeout="200")
[12:33:36.881]      // while-condition  =>  TRUE
[12:33:36.881]      // while "1"  (timeout="200")
[12:33:36.882]      // while-condition  =>  TRUE
[12:33:36.883]      // while "1"  (timeout="200")
[12:33:36.883]      // while  =>  TIMEOUT
[12:33:36.883]      // end while "1"
[12:33:36.883]    </control>
[12:33:36.883]    <control if="canReadPins" while="" timeout="0" info="">
[12:33:36.883]      // if-block "canReadPins"
[12:33:36.883]        // =>  TRUE
[12:33:36.883]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:33:36.883]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:33:36.884]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:33:36.884]        // while-condition  =>  FALSE
[12:33:36.884]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:33:36.884]      </control>
[12:33:36.884]      // end if-block "canReadPins"
[12:33:36.884]    </control>
[12:33:36.884]    <control if="!canReadPins" while="" timeout="0" info="">
[12:33:36.884]      // if-block "!canReadPins"
[12:33:36.884]        // =>  FALSE
[12:33:36.884]      // skip if-block "!canReadPins"
[12:33:36.884]    </control>
[12:33:36.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:33:36.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:36.884]        // =>  TRUE
[12:33:36.884]      <block atomic="false" info="">
[12:33:36.884]        WriteAP(0x00, 0x190008);
[12:33:36.888]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:36.888]        WriteAP(0xF0, 0x01);
[12:33:36.891]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:36.891]      </block>
[12:33:36.891]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:36.891]    </control>
[12:33:36.891]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:33:36.891]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:36.891]        // =>  FALSE
[12:33:36.891]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:36.891]    </control>
[12:33:36.891]    <block atomic="false" info="">
[12:33:36.891]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:36.891]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:33:36.891]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:33:36.891]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:36.891]      __ap = 0; //lets make sure we reset the access point selection
[12:33:36.891]        // -> [__ap <= 0x00000000]
[12:33:36.891]    </block>
[12:33:36.891]  </sequence>
[12:33:36.891]  
[12:33:36.916]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:33:36.916]  
[12:33:36.916]  <debugvars>
[12:33:36.916]    // Pre-defined
[12:33:36.918]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:36.918]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:33:36.918]    __dp=0x00000000
[12:33:36.918]    __ap=0x00000000
[12:33:36.918]    __traceout=0x00000000      (Trace Disabled)
[12:33:36.918]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:36.918]    __FlashAddr=0x00000000
[12:33:36.918]    __FlashLen=0x00000000
[12:33:36.918]    __FlashArg=0x00000000
[12:33:36.918]    __FlashOp=0x00000000
[12:33:36.918]    __Result=0x00000000
[12:33:36.918]  </debugvars>
[12:33:36.918]  
[12:33:36.918]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:33:36.918]    <block atomic="false" info="">
[12:33:36.918]      __var deviceID = 0;
[12:33:36.918]        // -> [deviceID <= 0x00000000]
[12:33:36.918]      __var version = 0;
[12:33:36.918]        // -> [version <= 0x00000000]
[12:33:36.918]      __var partNum = 0;
[12:33:36.918]        // -> [partNum <= 0x00000000]
[12:33:36.918]      __var manuf = 0;
[12:33:36.921]        // -> [manuf <= 0x00000000]
[12:33:36.921]      __var isMSPM0G1X0X_G3X0X = 0;
[12:33:36.921]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:33:36.921]      __var isProduction = 0;
[12:33:36.921]        // -> [isProduction <= 0x00000000]
[12:33:36.921]      __var continueId = 0;
[12:33:36.921]        // -> [continueId <= 0x00000000]
[12:33:36.921]      deviceID =   Read32(0x41C40004);
[12:33:36.923]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:33:36.923]        // -> [deviceID <= 0x2BB8802F]
[12:33:36.923]      version = deviceID >> 28;
[12:33:36.923]        // -> [version <= 0x00000002]
[12:33:36.923]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:33:36.923]        // -> [partNum <= 0x0000BB88]
[12:33:36.923]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:33:36.923]        // -> [manuf <= 0x00000017]
[12:33:36.923]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:33:36.923]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:33:36.923]      isProduction = (version > 0);
[12:33:36.923]        // -> [isProduction <= 0x00000001]
[12:33:36.923]    </block>
[12:33:36.923]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:33:36.923]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:33:36.923]        // =>  FALSE
[12:33:36.923]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:33:36.923]    </control>
[12:33:36.923]    <control if="continueId == 4" while="" timeout="0" info="">
[12:33:36.923]      // if-block "continueId == 4"
[12:33:36.923]        // =>  FALSE
[12:33:36.923]      // skip if-block "continueId == 4"
[12:33:36.923]    </control>
[12:33:36.923]    <control if="!isProduction" while="" timeout="0" info="">
[12:33:36.923]      // if-block "!isProduction"
[12:33:36.929]        // =>  FALSE
[12:33:36.929]      // skip if-block "!isProduction"
[12:33:36.929]    </control>
[12:33:36.929]  </sequence>
[12:33:36.929]  
[12:33:41.940]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:33:41.940]  
[12:33:41.953]  <debugvars>
[12:33:41.953]    // Pre-defined
[12:33:41.953]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:41.953]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:33:41.953]    __dp=0x00000000
[12:33:41.953]    __ap=0x00000000
[12:33:41.953]    __traceout=0x00000000      (Trace Disabled)
[12:33:41.953]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:41.953]    __FlashAddr=0x00000000
[12:33:41.953]    __FlashLen=0x00000000
[12:33:41.953]    __FlashArg=0x00000000
[12:33:41.953]    __FlashOp=0x00000000
[12:33:41.953]    __Result=0x00000000
[12:33:41.953]  </debugvars>
[12:33:41.953]  
[12:33:41.953]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:33:41.953]    <block atomic="false" info="">
[12:33:41.953]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:33:41.953]        // -> [isSWJ <= 0x00000001]
[12:33:41.953]      __var hasDormant = __protocol & 0x00020000;
[12:33:41.953]        // -> [hasDormant <= 0x00000000]
[12:33:41.955]      __var protType   = __protocol & 0x0000FFFF;
[12:33:41.955]        // -> [protType <= 0x00000002]
[12:33:41.955]    </block>
[12:33:41.955]    <control if="protType == 1" while="" timeout="0" info="">
[12:33:41.955]      // if-block "protType == 1"
[12:33:41.955]        // =>  FALSE
[12:33:41.955]      // skip if-block "protType == 1"
[12:33:41.955]    </control>
[12:33:41.955]    <control if="protType == 2" while="" timeout="0" info="">
[12:33:41.955]      // if-block "protType == 2"
[12:33:41.956]        // =>  TRUE
[12:33:41.956]      <control if="isSWJ" while="" timeout="0" info="">
[12:33:41.956]        // if-block "isSWJ"
[12:33:41.956]          // =>  TRUE
[12:33:41.956]        <control if="hasDormant" while="" timeout="0" info="">
[12:33:41.956]          // if-block "hasDormant"
[12:33:41.956]            // =>  FALSE
[12:33:41.956]          // skip if-block "hasDormant"
[12:33:41.956]        </control>
[12:33:41.956]        <control if="!hasDormant" while="" timeout="0" info="">
[12:33:41.956]          // if-block "!hasDormant"
[12:33:41.956]            // =>  TRUE
[12:33:41.956]          <block atomic="false" info="">
[12:33:41.956]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:33:41.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:41.960]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:33:41.960]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:33:41.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:33:41.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:41.960]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:33:41.960]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:33:41.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:33:41.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:41.960]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:33:41.960]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:33:41.960]          </block>
[12:33:41.960]          // end if-block "!hasDormant"
[12:33:41.960]        </control>
[12:33:41.960]        // end if-block "isSWJ"
[12:33:41.960]      </control>
[12:33:41.960]      <control if="!isSWJ" while="" timeout="0" info="">
[12:33:41.960]        // if-block "!isSWJ"
[12:33:41.960]          // =>  FALSE
[12:33:41.960]        // skip if-block "!isSWJ"
[12:33:41.960]      </control>
[12:33:41.960]      <block atomic="false" info="">
[12:33:41.960]        ReadDP(0x0);
[12:33:41.969]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:33:41.970]      </block>
[12:33:41.970]      // end if-block "protType == 2"
[12:33:41.970]    </control>
[12:33:41.970]  </sequence>
[12:33:41.970]  
[12:33:41.972]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:33:41.972]  
[12:33:41.972]  <debugvars>
[12:33:41.972]    // Pre-defined
[12:33:41.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:41.972]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:33:41.972]    __dp=0x00000000
[12:33:41.972]    __ap=0x00000000
[12:33:41.972]    __traceout=0x00000000      (Trace Disabled)
[12:33:41.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:41.972]    __FlashAddr=0x00000000
[12:33:41.972]    __FlashLen=0x00000000
[12:33:41.972]    __FlashArg=0x00000000
[12:33:41.972]    __FlashOp=0x00000000
[12:33:41.972]    __Result=0x00000000
[12:33:41.972]  </debugvars>
[12:33:41.972]  
[12:33:41.972]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:33:41.972]    <block atomic="false" info="">
[12:33:41.972]      __var SW_DP_ABORT       = 0x0;
[12:33:41.972]        // -> [SW_DP_ABORT <= 0x00000000]
[12:33:41.972]      __var DP_CTRL_STAT      = 0x4;
[12:33:41.972]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:33:41.975]      __var DP_SELECT         = 0x8;
[12:33:41.975]        // -> [DP_SELECT <= 0x00000008]
[12:33:41.975]      __var powered_down      = 0;
[12:33:41.975]        // -> [powered_down <= 0x00000000]
[12:33:41.975]      WriteDP(DP_SELECT, 0x00000000);
[12:33:41.975]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:33:41.975]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:33:41.978]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:33:41.978]        // -> [powered_down <= 0x00000001]
[12:33:41.978]    </block>
[12:33:41.978]    <control if="powered_down" while="" timeout="0" info="">
[12:33:41.978]      // if-block "powered_down"
[12:33:41.978]        // =>  TRUE
[12:33:41.978]      <block atomic="false" info="">
[12:33:41.978]        Message(0, "Debug/System power-up request sent");
[12:33:41.980]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:33:41.980]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:33:41.980]      </block>
[12:33:41.980]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:33:41.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:33:41.985]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:33:41.986]        // while-condition  =>  FALSE
[12:33:41.986]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:33:41.986]      </control>
[12:33:41.986]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:33:41.986]        // if-block "(__protocol & 0xFFFF) == 1"
[12:33:41.986]          // =>  FALSE
[12:33:41.986]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:33:41.986]      </control>
[12:33:41.986]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:33:41.986]        // if-block "(__protocol & 0xFFFF) == 2"
[12:33:41.986]          // =>  TRUE
[12:33:41.986]        <block atomic="false" info="">
[12:33:41.986]          Message(0, "executing SWD power up");
[12:33:41.988]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:33:41.990]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:33:41.990]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:33:41.992]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:33:41.992]        </block>
[12:33:41.992]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:33:41.992]      </control>
[12:33:41.992]      // end if-block "powered_down"
[12:33:41.992]    </control>
[12:33:41.992]    <block atomic="false" info="">
[12:33:41.992]      __var DEBUG_PORT_VAL    = 0;
[12:33:41.992]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:33:41.992]      __var ACCESS_POINT_VAL  = 0;
[12:33:41.992]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:33:41.992]      __ap = 1; 
[12:33:41.992]        // -> [__ap <= 0x00000001]
[12:33:41.992]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:33:41.992]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:33:41.992]      __ap = 4;
[12:33:41.992]        // -> [__ap <= 0x00000004]
[12:33:41.992]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:42.001]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:33:42.001]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:33:42.001]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:42.001]    </block>
[12:33:42.001]    <block atomic="false" info="">
[12:33:42.001]      __var nReset = 0x80;
[12:33:42.001]        // -> [nReset <= 0x00000080]
[12:33:42.001]      __var canReadPins = 0;
[12:33:42.001]        // -> [canReadPins <= 0x00000000]
[12:33:42.001]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:33:42.001]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:33:42.001]        // -> [canReadPins <= 0x00000001]
[12:33:42.001]    </block>
[12:33:42.001]    <control if="" while="1" timeout="200" info="">
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.001]      // while "1"  (timeout="200")
[12:33:42.001]      // while-condition  =>  TRUE
[12:33:42.009]      // while "1"  (timeout="200")
[12:33:42.009]      // while  =>  TIMEOUT
[12:33:42.009]      // end while "1"
[12:33:42.009]    </control>
[12:33:42.009]    <control if="canReadPins" while="" timeout="0" info="">
[12:33:42.009]      // if-block "canReadPins"
[12:33:42.009]        // =>  TRUE
[12:33:42.009]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:33:42.009]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:33:42.009]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:33:42.009]        // while-condition  =>  FALSE
[12:33:42.009]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:33:42.009]      </control>
[12:33:42.009]      // end if-block "canReadPins"
[12:33:42.009]    </control>
[12:33:42.009]    <control if="!canReadPins" while="" timeout="0" info="">
[12:33:42.009]      // if-block "!canReadPins"
[12:33:42.009]        // =>  FALSE
[12:33:42.009]      // skip if-block "!canReadPins"
[12:33:42.009]    </control>
[12:33:42.009]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:33:42.009]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:42.009]        // =>  TRUE
[12:33:42.009]      <block atomic="false" info="">
[12:33:42.009]        WriteAP(0x00, 0x190008);
[12:33:42.009]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:42.009]        WriteAP(0xF0, 0x01);
[12:33:42.009]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:42.009]      </block>
[12:33:42.009]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:42.009]    </control>
[12:33:42.009]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:33:42.019]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:42.019]        // =>  FALSE
[12:33:42.019]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:42.019]    </control>
[12:33:42.019]    <block atomic="false" info="">
[12:33:42.019]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:42.019]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:33:42.019]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:33:42.019]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:42.019]      __ap = 0; //lets make sure we reset the access point selection
[12:33:42.019]        // -> [__ap <= 0x00000000]
[12:33:42.019]    </block>
[12:33:42.019]  </sequence>
[12:33:42.019]  
[12:33:42.039]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:33:42.039]  
[12:33:42.039]  <debugvars>
[12:33:42.039]    // Pre-defined
[12:33:42.039]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:42.039]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:33:42.039]    __dp=0x00000000
[12:33:42.039]    __ap=0x00000000
[12:33:42.039]    __traceout=0x00000000      (Trace Disabled)
[12:33:42.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:42.039]    __FlashAddr=0x00000000
[12:33:42.039]    __FlashLen=0x00000000
[12:33:42.039]    __FlashArg=0x00000000
[12:33:42.039]    __FlashOp=0x00000000
[12:33:42.039]    __Result=0x00000000
[12:33:42.039]  </debugvars>
[12:33:42.039]  
[12:33:42.039]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:33:42.049]    <block atomic="false" info="">
[12:33:42.049]      __var deviceID = 0;
[12:33:42.049]        // -> [deviceID <= 0x00000000]
[12:33:42.049]      __var version = 0;
[12:33:42.049]        // -> [version <= 0x00000000]
[12:33:42.050]      __var partNum = 0;
[12:33:42.050]        // -> [partNum <= 0x00000000]
[12:33:42.050]      __var manuf = 0;
[12:33:42.050]        // -> [manuf <= 0x00000000]
[12:33:42.050]      __var isMSPM0G1X0X_G3X0X = 0;
[12:33:42.050]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:33:42.050]      __var isProduction = 0;
[12:33:42.050]        // -> [isProduction <= 0x00000000]
[12:33:42.050]      __var continueId = 0;
[12:33:42.050]        // -> [continueId <= 0x00000000]
[12:33:42.050]      deviceID =   Read32(0x41C40004);
[12:33:42.055]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:33:42.055]        // -> [deviceID <= 0x2BB8802F]
[12:33:42.055]      version = deviceID >> 28;
[12:33:42.055]        // -> [version <= 0x00000002]
[12:33:42.055]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:33:42.055]        // -> [partNum <= 0x0000BB88]
[12:33:42.055]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:33:42.055]        // -> [manuf <= 0x00000017]
[12:33:42.055]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:33:42.055]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:33:42.055]      isProduction = (version > 0);
[12:33:42.055]        // -> [isProduction <= 0x00000001]
[12:33:42.055]    </block>
[12:33:42.055]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:33:42.055]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:33:42.055]        // =>  FALSE
[12:33:42.055]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:33:42.055]    </control>
[12:33:42.055]    <control if="continueId == 4" while="" timeout="0" info="">
[12:33:42.055]      // if-block "continueId == 4"
[12:33:42.055]        // =>  FALSE
[12:33:42.057]      // skip if-block "continueId == 4"
[12:33:42.057]    </control>
[12:33:42.057]    <control if="!isProduction" while="" timeout="0" info="">
[12:33:42.057]      // if-block "!isProduction"
[12:33:42.057]        // =>  FALSE
[12:33:42.057]      // skip if-block "!isProduction"
[12:33:42.057]    </control>
[12:33:42.057]  </sequence>
[12:33:42.057]  
[12:34:21.264]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:34:21.264]  
[12:34:21.264]  <debugvars>
[12:34:21.264]    // Pre-defined
[12:34:21.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:21.264]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:34:21.264]    __dp=0x00000000
[12:34:21.264]    __ap=0x00000000
[12:34:21.264]    __traceout=0x00000000      (Trace Disabled)
[12:34:21.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:21.264]    __FlashAddr=0x00000000
[12:34:21.264]    __FlashLen=0x00000000
[12:34:21.264]    __FlashArg=0x00000000
[12:34:21.264]    __FlashOp=0x00000000
[12:34:21.264]    __Result=0x00000000
[12:34:21.264]  </debugvars>
[12:34:21.264]  
[12:34:21.264]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:34:21.264]    <block atomic="false" info="">
[12:34:21.264]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:34:21.264]        // -> [isSWJ <= 0x00000001]
[12:34:21.264]      __var hasDormant = __protocol & 0x00020000;
[12:34:21.264]        // -> [hasDormant <= 0x00000000]
[12:34:21.264]      __var protType   = __protocol & 0x0000FFFF;
[12:34:21.264]        // -> [protType <= 0x00000002]
[12:34:21.264]    </block>
[12:34:21.264]    <control if="protType == 1" while="" timeout="0" info="">
[12:34:21.264]      // if-block "protType == 1"
[12:34:21.264]        // =>  FALSE
[12:34:21.264]      // skip if-block "protType == 1"
[12:34:21.264]    </control>
[12:34:21.273]    <control if="protType == 2" while="" timeout="0" info="">
[12:34:21.273]      // if-block "protType == 2"
[12:34:21.273]        // =>  TRUE
[12:34:21.273]      <control if="isSWJ" while="" timeout="0" info="">
[12:34:21.273]        // if-block "isSWJ"
[12:34:21.273]          // =>  TRUE
[12:34:21.273]        <control if="hasDormant" while="" timeout="0" info="">
[12:34:21.273]          // if-block "hasDormant"
[12:34:21.273]            // =>  FALSE
[12:34:21.273]          // skip if-block "hasDormant"
[12:34:21.273]        </control>
[12:34:21.273]        <control if="!hasDormant" while="" timeout="0" info="">
[12:34:21.273]          // if-block "!hasDormant"
[12:34:21.273]            // =>  TRUE
[12:34:21.273]          <block atomic="false" info="">
[12:34:21.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:34:21.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:21.274]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:34:21.274]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:34:21.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:34:21.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:21.274]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:34:21.274]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:34:21.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:34:21.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:21.283]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:34:21.283]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:34:21.283]          </block>
[12:34:21.283]          // end if-block "!hasDormant"
[12:34:21.283]        </control>
[12:34:21.283]        // end if-block "isSWJ"
[12:34:21.283]      </control>
[12:34:21.283]      <control if="!isSWJ" while="" timeout="0" info="">
[12:34:21.283]        // if-block "!isSWJ"
[12:34:21.283]          // =>  FALSE
[12:34:21.283]        // skip if-block "!isSWJ"
[12:34:21.283]      </control>
[12:34:21.283]      <block atomic="false" info="">
[12:34:21.283]        ReadDP(0x0);
[12:34:21.283]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:34:21.283]      </block>
[12:34:21.283]      // end if-block "protType == 2"
[12:34:21.283]    </control>
[12:34:21.283]  </sequence>
[12:34:21.283]  
[12:34:21.283]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:34:21.283]  
[12:34:21.283]  <debugvars>
[12:34:21.283]    // Pre-defined
[12:34:21.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:21.283]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:34:21.283]    __dp=0x00000000
[12:34:21.283]    __ap=0x00000000
[12:34:21.283]    __traceout=0x00000000      (Trace Disabled)
[12:34:21.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:21.283]    __FlashAddr=0x00000000
[12:34:21.283]    __FlashLen=0x00000000
[12:34:21.283]    __FlashArg=0x00000000
[12:34:21.283]    __FlashOp=0x00000000
[12:34:21.283]    __Result=0x00000000
[12:34:21.283]  </debugvars>
[12:34:21.283]  
[12:34:21.283]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:34:21.283]    <block atomic="false" info="">
[12:34:21.283]      __var SW_DP_ABORT       = 0x0;
[12:34:21.283]        // -> [SW_DP_ABORT <= 0x00000000]
[12:34:21.283]      __var DP_CTRL_STAT      = 0x4;
[12:34:21.283]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:34:21.283]      __var DP_SELECT         = 0x8;
[12:34:21.283]        // -> [DP_SELECT <= 0x00000008]
[12:34:21.283]      __var powered_down      = 0;
[12:34:21.283]        // -> [powered_down <= 0x00000000]
[12:34:21.293]      WriteDP(DP_SELECT, 0x00000000);
[12:34:21.294]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:34:21.294]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:34:21.294]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:34:21.294]        // -> [powered_down <= 0x00000001]
[12:34:21.294]    </block>
[12:34:21.294]    <control if="powered_down" while="" timeout="0" info="">
[12:34:21.294]      // if-block "powered_down"
[12:34:21.294]        // =>  TRUE
[12:34:21.294]      <block atomic="false" info="">
[12:34:21.294]        Message(0, "Debug/System power-up request sent");
[12:34:21.294]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:34:21.294]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:34:21.294]      </block>
[12:34:21.294]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:34:21.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:34:21.302]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:34:21.302]        // while-condition  =>  FALSE
[12:34:21.302]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:34:21.302]      </control>
[12:34:21.302]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:34:21.302]        // if-block "(__protocol & 0xFFFF) == 1"
[12:34:21.302]          // =>  FALSE
[12:34:21.302]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:34:21.303]      </control>
[12:34:21.303]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:34:21.303]        // if-block "(__protocol & 0xFFFF) == 2"
[12:34:21.303]          // =>  TRUE
[12:34:21.303]        <block atomic="false" info="">
[12:34:21.303]          Message(0, "executing SWD power up");
[12:34:21.304]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:34:21.304]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:34:21.304]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:34:21.304]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:34:21.304]        </block>
[12:34:21.304]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:34:21.304]      </control>
[12:34:21.304]      // end if-block "powered_down"
[12:34:21.304]    </control>
[12:34:21.304]    <block atomic="false" info="">
[12:34:21.304]      __var DEBUG_PORT_VAL    = 0;
[12:34:21.304]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:34:21.304]      __var ACCESS_POINT_VAL  = 0;
[12:34:21.304]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:34:21.304]      __ap = 1; 
[12:34:21.304]        // -> [__ap <= 0x00000001]
[12:34:21.304]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:34:21.304]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:34:21.304]      __ap = 4;
[12:34:21.304]        // -> [__ap <= 0x00000004]
[12:34:21.304]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:21.313]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:34:21.313]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:34:21.313]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:21.313]    </block>
[12:34:21.313]    <block atomic="false" info="">
[12:34:21.313]      __var nReset = 0x80;
[12:34:21.313]        // -> [nReset <= 0x00000080]
[12:34:21.313]      __var canReadPins = 0;
[12:34:21.313]        // -> [canReadPins <= 0x00000000]
[12:34:21.313]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:34:21.313]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:34:21.313]        // -> [canReadPins <= 0x00000001]
[12:34:21.313]    </block>
[12:34:21.313]    <control if="" while="1" timeout="200" info="">
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.313]      // while "1"  (timeout="200")
[12:34:21.313]      // while-condition  =>  TRUE
[12:34:21.322]      // while "1"  (timeout="200")
[12:34:21.322]      // while  =>  TIMEOUT
[12:34:21.322]      // end while "1"
[12:34:21.322]    </control>
[12:34:21.322]    <control if="canReadPins" while="" timeout="0" info="">
[12:34:21.322]      // if-block "canReadPins"
[12:34:21.322]        // =>  TRUE
[12:34:21.322]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:34:21.322]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:34:21.324]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:34:21.324]        // while-condition  =>  FALSE
[12:34:21.324]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:34:21.324]      </control>
[12:34:21.324]      // end if-block "canReadPins"
[12:34:21.324]    </control>
[12:34:21.324]    <control if="!canReadPins" while="" timeout="0" info="">
[12:34:21.324]      // if-block "!canReadPins"
[12:34:21.324]        // =>  FALSE
[12:34:21.324]      // skip if-block "!canReadPins"
[12:34:21.324]    </control>
[12:34:21.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:34:21.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:21.324]        // =>  TRUE
[12:34:21.324]      <block atomic="false" info="">
[12:34:21.324]        WriteAP(0x00, 0x190008);
[12:34:21.324]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:21.324]        WriteAP(0xF0, 0x01);
[12:34:21.324]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:21.324]      </block>
[12:34:21.324]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:21.324]    </control>
[12:34:21.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:34:21.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:21.324]        // =>  FALSE
[12:34:21.324]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:21.324]    </control>
[12:34:21.324]    <block atomic="false" info="">
[12:34:21.324]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:21.334]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:34:21.334]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:34:21.334]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:21.334]      __ap = 0; //lets make sure we reset the access point selection
[12:34:21.334]        // -> [__ap <= 0x00000000]
[12:34:21.334]    </block>
[12:34:21.334]  </sequence>
[12:34:21.334]  
[12:34:21.355]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:34:21.355]  
[12:34:21.356]  <debugvars>
[12:34:21.356]    // Pre-defined
[12:34:21.356]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:21.356]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:34:21.356]    __dp=0x00000000
[12:34:21.356]    __ap=0x00000000
[12:34:21.356]    __traceout=0x00000000      (Trace Disabled)
[12:34:21.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:21.356]    __FlashAddr=0x00000000
[12:34:21.356]    __FlashLen=0x00000000
[12:34:21.356]    __FlashArg=0x00000000
[12:34:21.356]    __FlashOp=0x00000000
[12:34:21.356]    __Result=0x00000000
[12:34:21.356]  </debugvars>
[12:34:21.356]  
[12:34:21.356]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:34:21.356]    <block atomic="false" info="">
[12:34:21.356]      __var deviceID = 0;
[12:34:21.356]        // -> [deviceID <= 0x00000000]
[12:34:21.356]      __var version = 0;
[12:34:21.356]        // -> [version <= 0x00000000]
[12:34:21.356]      __var partNum = 0;
[12:34:21.356]        // -> [partNum <= 0x00000000]
[12:34:21.356]      __var manuf = 0;
[12:34:21.356]        // -> [manuf <= 0x00000000]
[12:34:21.356]      __var isMSPM0G1X0X_G3X0X = 0;
[12:34:21.356]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:34:21.356]      __var isProduction = 0;
[12:34:21.356]        // -> [isProduction <= 0x00000000]
[12:34:21.356]      __var continueId = 0;
[12:34:21.356]        // -> [continueId <= 0x00000000]
[12:34:21.356]      deviceID =   Read32(0x41C40004);
[12:34:21.364]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:34:21.364]        // -> [deviceID <= 0x2BB8802F]
[12:34:21.364]      version = deviceID >> 28;
[12:34:21.364]        // -> [version <= 0x00000002]
[12:34:21.364]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:34:21.364]        // -> [partNum <= 0x0000BB88]
[12:34:21.364]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:34:21.364]        // -> [manuf <= 0x00000017]
[12:34:21.364]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:34:21.364]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:34:21.364]      isProduction = (version > 0);
[12:34:21.364]        // -> [isProduction <= 0x00000001]
[12:34:21.364]    </block>
[12:34:21.364]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:34:21.364]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:34:21.364]        // =>  FALSE
[12:34:21.364]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:34:21.364]    </control>
[12:34:21.364]    <control if="continueId == 4" while="" timeout="0" info="">
[12:34:21.364]      // if-block "continueId == 4"
[12:34:21.364]        // =>  FALSE
[12:34:21.364]      // skip if-block "continueId == 4"
[12:34:21.364]    </control>
[12:34:21.364]    <control if="!isProduction" while="" timeout="0" info="">
[12:34:21.364]      // if-block "!isProduction"
[12:34:21.364]        // =>  FALSE
[12:34:21.364]      // skip if-block "!isProduction"
[12:34:21.364]    </control>
[12:34:21.364]  </sequence>
[12:34:21.364]  
[12:34:26.333]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:34:26.333]  
[12:34:26.351]  <debugvars>
[12:34:26.351]    // Pre-defined
[12:34:26.351]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:26.351]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:34:26.351]    __dp=0x00000000
[12:34:26.351]    __ap=0x00000000
[12:34:26.351]    __traceout=0x00000000      (Trace Disabled)
[12:34:26.351]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:26.351]    __FlashAddr=0x00000000
[12:34:26.351]    __FlashLen=0x00000000
[12:34:26.351]    __FlashArg=0x00000000
[12:34:26.351]    __FlashOp=0x00000000
[12:34:26.351]    __Result=0x00000000
[12:34:26.351]  </debugvars>
[12:34:26.351]  
[12:34:26.351]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:34:26.351]    <block atomic="false" info="">
[12:34:26.351]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:34:26.351]        // -> [isSWJ <= 0x00000001]
[12:34:26.351]      __var hasDormant = __protocol & 0x00020000;
[12:34:26.351]        // -> [hasDormant <= 0x00000000]
[12:34:26.351]      __var protType   = __protocol & 0x0000FFFF;
[12:34:26.351]        // -> [protType <= 0x00000002]
[12:34:26.351]    </block>
[12:34:26.351]    <control if="protType == 1" while="" timeout="0" info="">
[12:34:26.351]      // if-block "protType == 1"
[12:34:26.351]        // =>  FALSE
[12:34:26.351]      // skip if-block "protType == 1"
[12:34:26.351]    </control>
[12:34:26.354]    <control if="protType == 2" while="" timeout="0" info="">
[12:34:26.354]      // if-block "protType == 2"
[12:34:26.354]        // =>  TRUE
[12:34:26.354]      <control if="isSWJ" while="" timeout="0" info="">
[12:34:26.354]        // if-block "isSWJ"
[12:34:26.354]          // =>  TRUE
[12:34:26.354]        <control if="hasDormant" while="" timeout="0" info="">
[12:34:26.354]          // if-block "hasDormant"
[12:34:26.354]            // =>  FALSE
[12:34:26.354]          // skip if-block "hasDormant"
[12:34:26.354]        </control>
[12:34:26.354]        <control if="!hasDormant" while="" timeout="0" info="">
[12:34:26.354]          // if-block "!hasDormant"
[12:34:26.354]            // =>  TRUE
[12:34:26.354]          <block atomic="false" info="">
[12:34:26.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:34:26.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:26.354]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:34:26.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:34:26.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:34:26.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:26.354]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:34:26.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:34:26.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:34:26.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:26.364]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:34:26.364]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:34:26.364]          </block>
[12:34:26.364]          // end if-block "!hasDormant"
[12:34:26.364]        </control>
[12:34:26.364]        // end if-block "isSWJ"
[12:34:26.364]      </control>
[12:34:26.364]      <control if="!isSWJ" while="" timeout="0" info="">
[12:34:26.364]        // if-block "!isSWJ"
[12:34:26.364]          // =>  FALSE
[12:34:26.364]        // skip if-block "!isSWJ"
[12:34:26.364]      </control>
[12:34:26.364]      <block atomic="false" info="">
[12:34:26.364]        ReadDP(0x0);
[12:34:26.364]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:34:26.364]      </block>
[12:34:26.364]      // end if-block "protType == 2"
[12:34:26.364]    </control>
[12:34:26.364]  </sequence>
[12:34:26.364]  
[12:34:26.364]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:34:26.364]  
[12:34:26.364]  <debugvars>
[12:34:26.364]    // Pre-defined
[12:34:26.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:26.364]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:34:26.364]    __dp=0x00000000
[12:34:26.364]    __ap=0x00000000
[12:34:26.364]    __traceout=0x00000000      (Trace Disabled)
[12:34:26.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:26.364]    __FlashAddr=0x00000000
[12:34:26.364]    __FlashLen=0x00000000
[12:34:26.364]    __FlashArg=0x00000000
[12:34:26.364]    __FlashOp=0x00000000
[12:34:26.364]    __Result=0x00000000
[12:34:26.364]  </debugvars>
[12:34:26.364]  
[12:34:26.364]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:34:26.364]    <block atomic="false" info="">
[12:34:26.364]      __var SW_DP_ABORT       = 0x0;
[12:34:26.364]        // -> [SW_DP_ABORT <= 0x00000000]
[12:34:26.364]      __var DP_CTRL_STAT      = 0x4;
[12:34:26.364]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:34:26.364]      __var DP_SELECT         = 0x8;
[12:34:26.364]        // -> [DP_SELECT <= 0x00000008]
[12:34:26.364]      __var powered_down      = 0;
[12:34:26.364]        // -> [powered_down <= 0x00000000]
[12:34:26.364]      WriteDP(DP_SELECT, 0x00000000);
[12:34:26.375]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:34:26.375]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:34:26.375]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:34:26.375]        // -> [powered_down <= 0x00000001]
[12:34:26.375]    </block>
[12:34:26.375]    <control if="powered_down" while="" timeout="0" info="">
[12:34:26.375]      // if-block "powered_down"
[12:34:26.375]        // =>  TRUE
[12:34:26.375]      <block atomic="false" info="">
[12:34:26.375]        Message(0, "Debug/System power-up request sent");
[12:34:26.375]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:34:26.382]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:34:26.382]      </block>
[12:34:26.382]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:34:26.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:34:26.384]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:34:26.384]        // while-condition  =>  FALSE
[12:34:26.384]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:34:26.384]      </control>
[12:34:26.384]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:34:26.384]        // if-block "(__protocol & 0xFFFF) == 1"
[12:34:26.384]          // =>  FALSE
[12:34:26.384]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:34:26.384]      </control>
[12:34:26.384]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:34:26.384]        // if-block "(__protocol & 0xFFFF) == 2"
[12:34:26.384]          // =>  TRUE
[12:34:26.384]        <block atomic="false" info="">
[12:34:26.384]          Message(0, "executing SWD power up");
[12:34:26.384]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:34:26.384]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:34:26.384]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:34:26.384]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:34:26.384]        </block>
[12:34:26.384]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:34:26.384]      </control>
[12:34:26.384]      // end if-block "powered_down"
[12:34:26.384]    </control>
[12:34:26.384]    <block atomic="false" info="">
[12:34:26.384]      __var DEBUG_PORT_VAL    = 0;
[12:34:26.384]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:34:26.384]      __var ACCESS_POINT_VAL  = 0;
[12:34:26.384]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:34:26.384]      __ap = 1; 
[12:34:26.384]        // -> [__ap <= 0x00000001]
[12:34:26.384]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:34:26.394]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:34:26.394]      __ap = 4;
[12:34:26.394]        // -> [__ap <= 0x00000004]
[12:34:26.394]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:26.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:34:26.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:34:26.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:26.394]    </block>
[12:34:26.394]    <block atomic="false" info="">
[12:34:26.394]      __var nReset = 0x80;
[12:34:26.394]        // -> [nReset <= 0x00000080]
[12:34:26.394]      __var canReadPins = 0;
[12:34:26.394]        // -> [canReadPins <= 0x00000000]
[12:34:26.394]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:34:26.404]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:34:26.404]        // -> [canReadPins <= 0x00000001]
[12:34:26.404]    </block>
[12:34:26.404]    <control if="" while="1" timeout="200" info="">
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.404]      // while "1"  (timeout="200")
[12:34:26.404]      // while-condition  =>  TRUE
[12:34:26.414]      // while "1"  (timeout="200")
[12:34:26.414]      // while  =>  TIMEOUT
[12:34:26.414]      // end while "1"
[12:34:26.414]    </control>
[12:34:26.414]    <control if="canReadPins" while="" timeout="0" info="">
[12:34:26.414]      // if-block "canReadPins"
[12:34:26.414]        // =>  TRUE
[12:34:26.414]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:34:26.414]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:34:26.414]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:34:26.414]        // while-condition  =>  FALSE
[12:34:26.414]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:34:26.414]      </control>
[12:34:26.414]      // end if-block "canReadPins"
[12:34:26.414]    </control>
[12:34:26.414]    <control if="!canReadPins" while="" timeout="0" info="">
[12:34:26.414]      // if-block "!canReadPins"
[12:34:26.414]        // =>  FALSE
[12:34:26.414]      // skip if-block "!canReadPins"
[12:34:26.414]    </control>
[12:34:26.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:34:26.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:26.414]        // =>  TRUE
[12:34:26.414]      <block atomic="false" info="">
[12:34:26.414]        WriteAP(0x00, 0x190008);
[12:34:26.414]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:26.414]        WriteAP(0xF0, 0x01);
[12:34:26.414]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:26.424]      </block>
[12:34:26.424]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:26.424]    </control>
[12:34:26.424]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:34:26.424]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:26.424]        // =>  FALSE
[12:34:26.424]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:26.424]    </control>
[12:34:26.424]    <block atomic="false" info="">
[12:34:26.424]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:26.424]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:34:26.424]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:34:26.424]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:26.424]      __ap = 0; //lets make sure we reset the access point selection
[12:34:26.424]        // -> [__ap <= 0x00000000]
[12:34:26.424]    </block>
[12:34:26.424]  </sequence>
[12:34:26.424]  
[12:34:26.444]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:34:26.444]  
[12:34:26.444]  <debugvars>
[12:34:26.444]    // Pre-defined
[12:34:26.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:26.444]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:34:26.444]    __dp=0x00000000
[12:34:26.444]    __ap=0x00000000
[12:34:26.444]    __traceout=0x00000000      (Trace Disabled)
[12:34:26.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:26.444]    __FlashAddr=0x00000000
[12:34:26.444]    __FlashLen=0x00000000
[12:34:26.444]    __FlashArg=0x00000000
[12:34:26.444]    __FlashOp=0x00000000
[12:34:26.444]    __Result=0x00000000
[12:34:26.444]  </debugvars>
[12:34:26.444]  
[12:34:26.444]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:34:26.444]    <block atomic="false" info="">
[12:34:26.444]      __var deviceID = 0;
[12:34:26.444]        // -> [deviceID <= 0x00000000]
[12:34:26.444]      __var version = 0;
[12:34:26.444]        // -> [version <= 0x00000000]
[12:34:26.444]      __var partNum = 0;
[12:34:26.444]        // -> [partNum <= 0x00000000]
[12:34:26.444]      __var manuf = 0;
[12:34:26.444]        // -> [manuf <= 0x00000000]
[12:34:26.444]      __var isMSPM0G1X0X_G3X0X = 0;
[12:34:26.444]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:34:26.444]      __var isProduction = 0;
[12:34:26.444]        // -> [isProduction <= 0x00000000]
[12:34:26.444]      __var continueId = 0;
[12:34:26.444]        // -> [continueId <= 0x00000000]
[12:34:26.444]      deviceID =   Read32(0x41C40004);
[12:34:26.456]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:34:26.456]        // -> [deviceID <= 0x2BB8802F]
[12:34:26.456]      version = deviceID >> 28;
[12:34:26.456]        // -> [version <= 0x00000002]
[12:34:26.456]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:34:26.456]        // -> [partNum <= 0x0000BB88]
[12:34:26.456]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:34:26.456]        // -> [manuf <= 0x00000017]
[12:34:26.456]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:34:26.456]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:34:26.456]      isProduction = (version > 0);
[12:34:26.456]        // -> [isProduction <= 0x00000001]
[12:34:26.456]    </block>
[12:34:26.456]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:34:26.456]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:34:26.456]        // =>  FALSE
[12:34:26.456]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:34:26.456]    </control>
[12:34:26.456]    <control if="continueId == 4" while="" timeout="0" info="">
[12:34:26.456]      // if-block "continueId == 4"
[12:34:26.456]        // =>  FALSE
[12:34:26.456]      // skip if-block "continueId == 4"
[12:34:26.456]    </control>
[12:34:26.456]    <control if="!isProduction" while="" timeout="0" info="">
[12:34:26.456]      // if-block "!isProduction"
[12:34:26.456]        // =>  FALSE
[12:34:26.456]      // skip if-block "!isProduction"
[12:34:26.456]    </control>
[12:34:26.456]  </sequence>
[12:34:26.456]  
[12:35:14.851]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:35:14.851]  
[12:35:14.851]  <debugvars>
[12:35:14.851]    // Pre-defined
[12:35:14.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:35:14.851]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:35:14.851]    __dp=0x00000000
[12:35:14.851]    __ap=0x00000000
[12:35:14.851]    __traceout=0x00000000      (Trace Disabled)
[12:35:14.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:35:14.851]    __FlashAddr=0x00000000
[12:35:14.851]    __FlashLen=0x00000000
[12:35:14.851]    __FlashArg=0x00000000
[12:35:14.851]    __FlashOp=0x00000000
[12:35:14.851]    __Result=0x00000000
[12:35:14.851]  </debugvars>
[12:35:14.851]  
[12:35:14.851]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:35:14.851]    <block atomic="false" info="">
[12:35:14.851]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:35:14.851]        // -> [isSWJ <= 0x00000001]
[12:35:14.851]      __var hasDormant = __protocol & 0x00020000;
[12:35:14.851]        // -> [hasDormant <= 0x00000000]
[12:35:14.851]      __var protType   = __protocol & 0x0000FFFF;
[12:35:14.851]        // -> [protType <= 0x00000002]
[12:35:14.851]    </block>
[12:35:14.851]    <control if="protType == 1" while="" timeout="0" info="">
[12:35:14.851]      // if-block "protType == 1"
[12:35:14.851]        // =>  FALSE
[12:35:14.851]      // skip if-block "protType == 1"
[12:35:14.851]    </control>
[12:35:14.851]    <control if="protType == 2" while="" timeout="0" info="">
[12:35:14.851]      // if-block "protType == 2"
[12:35:14.851]        // =>  TRUE
[12:35:14.851]      <control if="isSWJ" while="" timeout="0" info="">
[12:35:14.851]        // if-block "isSWJ"
[12:35:14.851]          // =>  TRUE
[12:35:14.851]        <control if="hasDormant" while="" timeout="0" info="">
[12:35:14.851]          // if-block "hasDormant"
[12:35:14.851]            // =>  FALSE
[12:35:14.851]          // skip if-block "hasDormant"
[12:35:14.851]        </control>
[12:35:14.851]        <control if="!hasDormant" while="" timeout="0" info="">
[12:35:14.851]          // if-block "!hasDormant"
[12:35:14.851]            // =>  TRUE
[12:35:14.851]          <block atomic="false" info="">
[12:35:14.851]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:35:14.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:35:14.861]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:35:14.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:35:14.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:35:14.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:35:14.861]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:35:14.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:35:14.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:35:14.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:35:14.861]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:35:14.861]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:35:14.861]          </block>
[12:35:14.861]          // end if-block "!hasDormant"
[12:35:14.861]        </control>
[12:35:14.861]        // end if-block "isSWJ"
[12:35:14.861]      </control>
[12:35:14.861]      <control if="!isSWJ" while="" timeout="0" info="">
[12:35:14.861]        // if-block "!isSWJ"
[12:35:14.861]          // =>  FALSE
[12:35:14.861]        // skip if-block "!isSWJ"
[12:35:14.861]      </control>
[12:35:14.861]      <block atomic="false" info="">
[12:35:14.861]        ReadDP(0x0);
[12:35:14.871]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:35:14.871]      </block>
[12:35:14.871]      // end if-block "protType == 2"
[12:35:14.871]    </control>
[12:35:14.873]  </sequence>
[12:35:14.873]  
[12:35:14.873]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:35:14.873]  
[12:35:14.873]  <debugvars>
[12:35:14.873]    // Pre-defined
[12:35:14.873]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:35:14.873]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:35:14.873]    __dp=0x00000000
[12:35:14.873]    __ap=0x00000000
[12:35:14.873]    __traceout=0x00000000      (Trace Disabled)
[12:35:14.873]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:35:14.873]    __FlashAddr=0x00000000
[12:35:14.873]    __FlashLen=0x00000000
[12:35:14.873]    __FlashArg=0x00000000
[12:35:14.873]    __FlashOp=0x00000000
[12:35:14.873]    __Result=0x00000000
[12:35:14.873]  </debugvars>
[12:35:14.873]  
[12:35:14.873]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:35:14.873]    <block atomic="false" info="">
[12:35:14.873]      __var SW_DP_ABORT       = 0x0;
[12:35:14.873]        // -> [SW_DP_ABORT <= 0x00000000]
[12:35:14.873]      __var DP_CTRL_STAT      = 0x4;
[12:35:14.873]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:35:14.873]      __var DP_SELECT         = 0x8;
[12:35:14.873]        // -> [DP_SELECT <= 0x00000008]
[12:35:14.873]      __var powered_down      = 0;
[12:35:14.873]        // -> [powered_down <= 0x00000000]
[12:35:14.873]      WriteDP(DP_SELECT, 0x00000000);
[12:35:14.873]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:35:14.873]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:35:14.873]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:35:14.873]        // -> [powered_down <= 0x00000001]
[12:35:14.873]    </block>
[12:35:14.873]    <control if="powered_down" while="" timeout="0" info="">
[12:35:14.873]      // if-block "powered_down"
[12:35:14.881]        // =>  TRUE
[12:35:14.881]      <block atomic="false" info="">
[12:35:14.881]        Message(0, "Debug/System power-up request sent");
[12:35:14.881]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:35:14.881]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:35:14.881]      </block>
[12:35:14.881]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:35:14.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:35:14.881]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:35:14.881]        // while-condition  =>  FALSE
[12:35:14.881]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:35:14.881]      </control>
[12:35:14.881]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:35:14.881]        // if-block "(__protocol & 0xFFFF) == 1"
[12:35:14.881]          // =>  FALSE
[12:35:14.881]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:35:14.881]      </control>
[12:35:14.881]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:35:14.881]        // if-block "(__protocol & 0xFFFF) == 2"
[12:35:14.881]          // =>  TRUE
[12:35:14.881]        <block atomic="false" info="">
[12:35:14.881]          Message(0, "executing SWD power up");
[12:35:14.881]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:35:14.891]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:35:14.891]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:35:14.891]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:35:14.891]        </block>
[12:35:14.891]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:35:14.891]      </control>
[12:35:14.891]      // end if-block "powered_down"
[12:35:14.891]    </control>
[12:35:14.891]    <block atomic="false" info="">
[12:35:14.891]      __var DEBUG_PORT_VAL    = 0;
[12:35:14.891]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:35:14.891]      __var ACCESS_POINT_VAL  = 0;
[12:35:14.891]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:35:14.891]      __ap = 1; 
[12:35:14.891]        // -> [__ap <= 0x00000001]
[12:35:14.891]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:35:14.891]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:35:14.891]      __ap = 4;
[12:35:14.891]        // -> [__ap <= 0x00000004]
[12:35:14.891]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:35:14.891]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:35:14.891]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:35:14.891]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:35:14.901]    </block>
[12:35:14.901]    <block atomic="false" info="">
[12:35:14.901]      __var nReset = 0x80;
[12:35:14.901]        // -> [nReset <= 0x00000080]
[12:35:14.901]      __var canReadPins = 0;
[12:35:14.901]        // -> [canReadPins <= 0x00000000]
[12:35:14.901]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:35:14.901]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:35:14.901]        // -> [canReadPins <= 0x00000001]
[12:35:14.901]    </block>
[12:35:14.901]    <control if="" while="1" timeout="200" info="">
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.901]      // while "1"  (timeout="200")
[12:35:14.901]      // while-condition  =>  TRUE
[12:35:14.911]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.912]      // while-condition  =>  TRUE
[12:35:14.912]      // while "1"  (timeout="200")
[12:35:14.922]      // while-condition  =>  TRUE
[12:35:14.922]      // while "1"  (timeout="200")
[12:35:14.922]      // while  =>  TIMEOUT
[12:35:14.922]      // end while "1"
[12:35:14.922]    </control>
[12:35:14.922]    <control if="canReadPins" while="" timeout="0" info="">
[12:35:14.922]      // if-block "canReadPins"
[12:35:14.922]        // =>  TRUE
[12:35:14.922]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:35:14.922]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:35:14.922]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:35:14.922]        // while-condition  =>  FALSE
[12:35:14.922]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:35:14.922]      </control>
[12:35:14.922]      // end if-block "canReadPins"
[12:35:14.922]    </control>
[12:35:14.922]    <control if="!canReadPins" while="" timeout="0" info="">
[12:35:14.922]      // if-block "!canReadPins"
[12:35:14.922]        // =>  FALSE
[12:35:14.922]      // skip if-block "!canReadPins"
[12:35:14.922]    </control>
[12:35:14.922]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:35:14.922]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:35:14.922]        // =>  TRUE
[12:35:14.922]      <block atomic="false" info="">
[12:35:14.922]        WriteAP(0x00, 0x190008);
[12:35:14.922]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:35:14.922]        WriteAP(0xF0, 0x01);
[12:35:14.922]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:35:14.922]      </block>
[12:35:14.922]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:35:14.922]    </control>
[12:35:14.922]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:35:14.922]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:35:14.922]        // =>  FALSE
[12:35:14.922]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:35:14.922]    </control>
[12:35:14.922]    <block atomic="false" info="">
[12:35:14.922]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:35:14.932]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:35:14.932]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:35:14.932]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:35:14.932]      __ap = 0; //lets make sure we reset the access point selection
[12:35:14.932]        // -> [__ap <= 0x00000000]
[12:35:14.932]    </block>
[12:35:14.932]  </sequence>
[12:35:14.932]  
[12:35:14.952]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:35:14.952]  
[12:35:14.952]  <debugvars>
[12:35:14.952]    // Pre-defined
[12:35:14.952]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:35:14.952]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:35:14.952]    __dp=0x00000000
[12:35:14.952]    __ap=0x00000000
[12:35:14.952]    __traceout=0x00000000      (Trace Disabled)
[12:35:14.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:35:14.952]    __FlashAddr=0x00000000
[12:35:14.952]    __FlashLen=0x00000000
[12:35:14.952]    __FlashArg=0x00000000
[12:35:14.952]    __FlashOp=0x00000000
[12:35:14.952]    __Result=0x00000000
[12:35:14.952]  </debugvars>
[12:35:14.952]  
[12:35:14.952]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:35:14.952]    <block atomic="false" info="">
[12:35:14.952]      __var deviceID = 0;
[12:35:14.952]        // -> [deviceID <= 0x00000000]
[12:35:14.952]      __var version = 0;
[12:35:14.952]        // -> [version <= 0x00000000]
[12:35:14.952]      __var partNum = 0;
[12:35:14.952]        // -> [partNum <= 0x00000000]
[12:35:14.952]      __var manuf = 0;
[12:35:14.952]        // -> [manuf <= 0x00000000]
[12:35:14.952]      __var isMSPM0G1X0X_G3X0X = 0;
[12:35:14.952]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:35:14.952]      __var isProduction = 0;
[12:35:14.952]        // -> [isProduction <= 0x00000000]
[12:35:14.952]      __var continueId = 0;
[12:35:14.952]        // -> [continueId <= 0x00000000]
[12:35:14.952]      deviceID =   Read32(0x41C40004);
[12:35:14.961]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:35:14.961]        // -> [deviceID <= 0x2BB8802F]
[12:35:14.961]      version = deviceID >> 28;
[12:35:14.961]        // -> [version <= 0x00000002]
[12:35:14.961]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:35:14.961]        // -> [partNum <= 0x0000BB88]
[12:35:14.961]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:35:14.961]        // -> [manuf <= 0x00000017]
[12:35:14.961]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:35:14.961]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:35:14.961]      isProduction = (version > 0);
[12:35:14.961]        // -> [isProduction <= 0x00000001]
[12:35:14.961]    </block>
[12:35:14.961]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:35:14.961]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:35:14.961]        // =>  FALSE
[12:35:14.961]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:35:14.961]    </control>
[12:35:14.961]    <control if="continueId == 4" while="" timeout="0" info="">
[12:35:14.961]      // if-block "continueId == 4"
[12:35:14.961]        // =>  FALSE
[12:35:14.961]      // skip if-block "continueId == 4"
[12:35:14.961]    </control>
[12:35:14.961]    <control if="!isProduction" while="" timeout="0" info="">
[12:35:14.961]      // if-block "!isProduction"
[12:35:14.961]        // =>  FALSE
[12:35:14.961]      // skip if-block "!isProduction"
[12:35:14.961]    </control>
[12:35:14.961]  </sequence>
[12:35:14.961]  
[12:35:19.952]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:35:19.952]  
[12:35:19.952]  <debugvars>
[12:35:19.952]    // Pre-defined
[12:35:19.952]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:35:19.953]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:35:19.953]    __dp=0x00000000
[12:35:19.953]    __ap=0x00000000
[12:35:19.953]    __traceout=0x00000000      (Trace Disabled)
[12:35:19.953]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:35:19.953]    __FlashAddr=0x00000000
[12:35:19.953]    __FlashLen=0x00000000
[12:35:19.953]    __FlashArg=0x00000000
[12:35:19.953]    __FlashOp=0x00000000
[12:35:19.953]    __Result=0x00000000
[12:35:19.955]  </debugvars>
[12:35:19.955]  
[12:35:19.955]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:35:19.955]    <block atomic="false" info="">
[12:35:19.955]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:35:19.955]        // -> [isSWJ <= 0x00000001]
[12:35:19.955]      __var hasDormant = __protocol & 0x00020000;
[12:35:19.955]        // -> [hasDormant <= 0x00000000]
[12:35:19.955]      __var protType   = __protocol & 0x0000FFFF;
[12:35:19.955]        // -> [protType <= 0x00000002]
[12:35:19.955]    </block>
[12:35:19.956]    <control if="protType == 1" while="" timeout="0" info="">
[12:35:19.956]      // if-block "protType == 1"
[12:35:19.956]        // =>  FALSE
[12:35:19.956]      // skip if-block "protType == 1"
[12:35:19.956]    </control>
[12:35:19.956]    <control if="protType == 2" while="" timeout="0" info="">
[12:35:19.956]      // if-block "protType == 2"
[12:35:19.956]        // =>  TRUE
[12:35:19.956]      <control if="isSWJ" while="" timeout="0" info="">
[12:35:19.956]        // if-block "isSWJ"
[12:35:19.956]          // =>  TRUE
[12:35:19.956]        <control if="hasDormant" while="" timeout="0" info="">
[12:35:19.956]          // if-block "hasDormant"
[12:35:19.956]            // =>  FALSE
[12:35:19.956]          // skip if-block "hasDormant"
[12:35:19.956]        </control>
[12:35:19.956]        <control if="!hasDormant" while="" timeout="0" info="">
[12:35:19.957]          // if-block "!hasDormant"
[12:35:19.957]            // =>  TRUE
[12:35:19.957]          <block atomic="false" info="">
[12:35:19.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:35:19.959]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:35:19.959]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:35:19.960]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:35:19.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:35:19.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:35:19.961]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:35:19.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:35:19.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:35:19.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:35:19.965]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:35:19.967]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:35:19.967]          </block>
[12:35:19.967]          // end if-block "!hasDormant"
[12:35:19.967]        </control>
[12:35:19.967]        // end if-block "isSWJ"
[12:35:19.967]      </control>
[12:35:19.967]      <control if="!isSWJ" while="" timeout="0" info="">
[12:35:19.967]        // if-block "!isSWJ"
[12:35:19.967]          // =>  FALSE
[12:35:19.967]        // skip if-block "!isSWJ"
[12:35:19.967]      </control>
[12:35:19.967]      <block atomic="false" info="">
[12:35:19.967]        ReadDP(0x0);
[12:35:19.969]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:35:19.969]      </block>
[12:35:19.969]      // end if-block "protType == 2"
[12:35:19.969]    </control>
[12:35:19.969]  </sequence>
[12:35:19.969]  
[12:35:19.972]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:35:19.972]  
[12:35:19.972]  <debugvars>
[12:35:19.972]    // Pre-defined
[12:35:19.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:35:19.972]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:35:19.972]    __dp=0x00000000
[12:35:19.972]    __ap=0x00000000
[12:35:19.973]    __traceout=0x00000000      (Trace Disabled)
[12:35:19.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:35:19.973]    __FlashAddr=0x00000000
[12:35:19.973]    __FlashLen=0x00000000
[12:35:19.973]    __FlashArg=0x00000000
[12:35:19.973]    __FlashOp=0x00000000
[12:35:19.973]    __Result=0x00000000
[12:35:19.973]  </debugvars>
[12:35:19.973]  
[12:35:19.973]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:35:19.973]    <block atomic="false" info="">
[12:35:19.973]      __var SW_DP_ABORT       = 0x0;
[12:35:19.973]        // -> [SW_DP_ABORT <= 0x00000000]
[12:35:19.973]      __var DP_CTRL_STAT      = 0x4;
[12:35:19.973]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:35:19.973]      __var DP_SELECT         = 0x8;
[12:35:19.974]        // -> [DP_SELECT <= 0x00000008]
[12:35:19.974]      __var powered_down      = 0;
[12:35:19.974]        // -> [powered_down <= 0x00000000]
[12:35:19.974]      WriteDP(DP_SELECT, 0x00000000);
[12:35:19.974]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:35:19.974]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:35:19.978]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:35:19.978]        // -> [powered_down <= 0x00000001]
[12:35:19.978]    </block>
[12:35:19.978]    <control if="powered_down" while="" timeout="0" info="">
[12:35:19.978]      // if-block "powered_down"
[12:35:19.978]        // =>  TRUE
[12:35:19.978]      <block atomic="false" info="">
[12:35:19.978]        Message(0, "Debug/System power-up request sent");
[12:35:19.979]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:35:19.983]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:35:19.983]      </block>
[12:35:19.983]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:35:19.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:35:19.984]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:35:19.984]        // while-condition  =>  FALSE
[12:35:19.984]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:35:19.984]      </control>
[12:35:19.984]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:35:19.984]        // if-block "(__protocol & 0xFFFF) == 1"
[12:35:19.984]          // =>  FALSE
[12:35:19.984]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:35:19.986]      </control>
[12:35:19.986]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:35:19.986]        // if-block "(__protocol & 0xFFFF) == 2"
[12:35:19.986]          // =>  TRUE
[12:35:19.986]        <block atomic="false" info="">
[12:35:19.986]          Message(0, "executing SWD power up");
[12:35:19.987]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:35:19.988]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:35:19.988]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:35:19.990]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:35:19.990]        </block>
[12:35:19.990]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:35:19.990]      </control>
[12:35:19.990]      // end if-block "powered_down"
[12:35:19.990]    </control>
[12:35:19.990]    <block atomic="false" info="">
[12:35:19.990]      __var DEBUG_PORT_VAL    = 0;
[12:35:19.990]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:35:19.992]      __var ACCESS_POINT_VAL  = 0;
[12:35:19.992]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:35:19.992]      __ap = 1; 
[12:35:19.992]        // -> [__ap <= 0x00000001]
[12:35:19.992]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:35:19.995]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:35:19.995]      __ap = 4;
[12:35:19.995]        // -> [__ap <= 0x00000004]
[12:35:19.995]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:35:19.997]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:35:19.997]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:35:19.997]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:35:20.000]    </block>
[12:35:20.000]    <block atomic="false" info="">
[12:35:20.000]      __var nReset = 0x80;
[12:35:20.000]        // -> [nReset <= 0x00000080]
[12:35:20.000]      __var canReadPins = 0;
[12:35:20.000]        // -> [canReadPins <= 0x00000000]
[12:35:20.000]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:35:20.002]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:35:20.002]        // -> [canReadPins <= 0x00000001]
[12:35:20.002]    </block>
[12:35:20.002]    <control if="" while="1" timeout="200" info="">
[12:35:20.002]      // while "1"  (timeout="200")
[12:35:20.002]      // while-condition  =>  TRUE
[12:35:20.002]      // while "1"  (timeout="200")
[12:35:20.002]      // while-condition  =>  TRUE
[12:35:20.002]      // while "1"  (timeout="200")
[12:35:20.002]      // while-condition  =>  TRUE
[12:35:20.002]      // while "1"  (timeout="200")
[12:35:20.002]      // while-condition  =>  TRUE
[12:35:20.002]      // while "1"  (timeout="200")
[12:35:20.002]      // while-condition  =>  TRUE
[12:35:20.002]      // while "1"  (timeout="200")
[12:35:20.002]      // while-condition  =>  TRUE
[12:35:20.002]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.005]      // while "1"  (timeout="200")
[12:35:20.005]      // while-condition  =>  TRUE
[12:35:20.007]      // while "1"  (timeout="200")
[12:35:20.007]      // while  =>  TIMEOUT
[12:35:20.007]      // end while "1"
[12:35:20.007]    </control>
[12:35:20.007]    <control if="canReadPins" while="" timeout="0" info="">
[12:35:20.007]      // if-block "canReadPins"
[12:35:20.007]        // =>  TRUE
[12:35:20.007]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:35:20.007]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:35:20.009]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:35:20.009]        // while-condition  =>  FALSE
[12:35:20.009]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:35:20.009]      </control>
[12:35:20.009]      // end if-block "canReadPins"
[12:35:20.009]    </control>
[12:35:20.009]    <control if="!canReadPins" while="" timeout="0" info="">
[12:35:20.009]      // if-block "!canReadPins"
[12:35:20.009]        // =>  FALSE
[12:35:20.009]      // skip if-block "!canReadPins"
[12:35:20.009]    </control>
[12:35:20.009]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:35:20.009]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:35:20.009]        // =>  TRUE
[12:35:20.009]      <block atomic="false" info="">
[12:35:20.009]        WriteAP(0x00, 0x190008);
[12:35:20.013]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:35:20.013]        WriteAP(0xF0, 0x01);
[12:35:20.017]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:35:20.017]      </block>
[12:35:20.017]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:35:20.017]    </control>
[12:35:20.017]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:35:20.017]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:35:20.017]        // =>  FALSE
[12:35:20.017]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:35:20.017]    </control>
[12:35:20.017]    <block atomic="false" info="">
[12:35:20.017]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:35:20.019]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:35:20.019]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:35:20.019]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:35:20.019]      __ap = 0; //lets make sure we reset the access point selection
[12:35:20.019]        // -> [__ap <= 0x00000000]
[12:35:20.023]    </block>
[12:35:20.023]  </sequence>
[12:35:20.023]  
[12:35:20.045]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:35:20.045]  
[12:35:20.045]  <debugvars>
[12:35:20.045]    // Pre-defined
[12:35:20.045]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:35:20.045]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:35:20.045]    __dp=0x00000000
[12:35:20.045]    __ap=0x00000000
[12:35:20.045]    __traceout=0x00000000      (Trace Disabled)
[12:35:20.045]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:35:20.045]    __FlashAddr=0x00000000
[12:35:20.045]    __FlashLen=0x00000000
[12:35:20.045]    __FlashArg=0x00000000
[12:35:20.045]    __FlashOp=0x00000000
[12:35:20.045]    __Result=0x00000000
[12:35:20.045]  </debugvars>
[12:35:20.045]  
[12:35:20.047]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:35:20.047]    <block atomic="false" info="">
[12:35:20.047]      __var deviceID = 0;
[12:35:20.047]        // -> [deviceID <= 0x00000000]
[12:35:20.047]      __var version = 0;
[12:35:20.047]        // -> [version <= 0x00000000]
[12:35:20.047]      __var partNum = 0;
[12:35:20.047]        // -> [partNum <= 0x00000000]
[12:35:20.047]      __var manuf = 0;
[12:35:20.047]        // -> [manuf <= 0x00000000]
[12:35:20.047]      __var isMSPM0G1X0X_G3X0X = 0;
[12:35:20.047]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:35:20.047]      __var isProduction = 0;
[12:35:20.049]        // -> [isProduction <= 0x00000000]
[12:35:20.049]      __var continueId = 0;
[12:35:20.049]        // -> [continueId <= 0x00000000]
[12:35:20.049]      deviceID =   Read32(0x41C40004);
[12:35:20.049]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:35:20.049]        // -> [deviceID <= 0x2BB8802F]
[12:35:20.049]      version = deviceID >> 28;
[12:35:20.049]        // -> [version <= 0x00000002]
[12:35:20.049]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:35:20.049]        // -> [partNum <= 0x0000BB88]
[12:35:20.049]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:35:20.049]        // -> [manuf <= 0x00000017]
[12:35:20.049]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:35:20.049]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:35:20.049]      isProduction = (version > 0);
[12:35:20.049]        // -> [isProduction <= 0x00000001]
[12:35:20.049]    </block>
[12:35:20.049]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:35:20.049]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:35:20.049]        // =>  FALSE
[12:35:20.049]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:35:20.049]    </control>
[12:35:20.049]    <control if="continueId == 4" while="" timeout="0" info="">
[12:35:20.049]      // if-block "continueId == 4"
[12:35:20.049]        // =>  FALSE
[12:35:20.049]      // skip if-block "continueId == 4"
[12:35:20.049]    </control>
[12:35:20.049]    <control if="!isProduction" while="" timeout="0" info="">
[12:35:20.049]      // if-block "!isProduction"
[12:35:20.056]        // =>  FALSE
[12:35:20.056]      // skip if-block "!isProduction"
[12:35:20.056]    </control>
[12:35:20.056]  </sequence>
[12:35:20.056]  
[12:36:32.930]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:36:32.930]  
[12:36:32.930]  <debugvars>
[12:36:32.930]    // Pre-defined
[12:36:32.930]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:36:32.930]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:36:32.930]    __dp=0x00000000
[12:36:32.930]    __ap=0x00000000
[12:36:32.930]    __traceout=0x00000000      (Trace Disabled)
[12:36:32.930]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:36:32.930]    __FlashAddr=0x00000000
[12:36:32.930]    __FlashLen=0x00000000
[12:36:32.930]    __FlashArg=0x00000000
[12:36:32.930]    __FlashOp=0x00000000
[12:36:32.930]    __Result=0x00000000
[12:36:32.930]  </debugvars>
[12:36:32.930]  
[12:36:32.930]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:36:32.930]    <block atomic="false" info="">
[12:36:32.930]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:36:32.930]        // -> [isSWJ <= 0x00000001]
[12:36:32.930]      __var hasDormant = __protocol & 0x00020000;
[12:36:32.930]        // -> [hasDormant <= 0x00000000]
[12:36:32.930]      __var protType   = __protocol & 0x0000FFFF;
[12:36:32.930]        // -> [protType <= 0x00000002]
[12:36:32.930]    </block>
[12:36:32.930]    <control if="protType == 1" while="" timeout="0" info="">
[12:36:32.933]      // if-block "protType == 1"
[12:36:32.934]        // =>  FALSE
[12:36:32.934]      // skip if-block "protType == 1"
[12:36:32.934]    </control>
[12:36:32.934]    <control if="protType == 2" while="" timeout="0" info="">
[12:36:32.934]      // if-block "protType == 2"
[12:36:32.934]        // =>  TRUE
[12:36:32.934]      <control if="isSWJ" while="" timeout="0" info="">
[12:36:32.935]        // if-block "isSWJ"
[12:36:32.935]          // =>  TRUE
[12:36:32.935]        <control if="hasDormant" while="" timeout="0" info="">
[12:36:32.935]          // if-block "hasDormant"
[12:36:32.935]            // =>  FALSE
[12:36:32.935]          // skip if-block "hasDormant"
[12:36:32.935]        </control>
[12:36:32.935]        <control if="!hasDormant" while="" timeout="0" info="">
[12:36:32.935]          // if-block "!hasDormant"
[12:36:32.935]            // =>  TRUE
[12:36:32.935]          <block atomic="false" info="">
[12:36:32.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:36:32.937]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:36:32.937]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:36:32.937]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:36:32.937]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:36:32.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:36:32.940]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:36:32.940]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:36:32.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:36:32.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:36:32.944]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:36:32.946]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:36:32.946]          </block>
[12:36:32.946]          // end if-block "!hasDormant"
[12:36:32.946]        </control>
[12:36:32.946]        // end if-block "isSWJ"
[12:36:32.946]      </control>
[12:36:32.946]      <control if="!isSWJ" while="" timeout="0" info="">
[12:36:32.946]        // if-block "!isSWJ"
[12:36:32.946]          // =>  FALSE
[12:36:32.946]        // skip if-block "!isSWJ"
[12:36:32.950]      </control>
[12:36:32.950]      <block atomic="false" info="">
[12:36:32.950]        ReadDP(0x0);
[12:36:32.950]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:36:32.950]      </block>
[12:36:32.950]      // end if-block "protType == 2"
[12:36:32.950]    </control>
[12:36:32.950]  </sequence>
[12:36:32.950]  
[12:36:32.954]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:36:32.954]  
[12:36:32.954]  <debugvars>
[12:36:32.954]    // Pre-defined
[12:36:32.954]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:36:32.954]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:36:32.954]    __dp=0x00000000
[12:36:32.954]    __ap=0x00000000
[12:36:32.954]    __traceout=0x00000000      (Trace Disabled)
[12:36:32.954]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:36:32.954]    __FlashAddr=0x00000000
[12:36:32.954]    __FlashLen=0x00000000
[12:36:32.954]    __FlashArg=0x00000000
[12:36:32.954]    __FlashOp=0x00000000
[12:36:32.954]    __Result=0x00000000
[12:36:32.954]  </debugvars>
[12:36:32.954]  
[12:36:32.954]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:36:32.954]    <block atomic="false" info="">
[12:36:32.954]      __var SW_DP_ABORT       = 0x0;
[12:36:32.954]        // -> [SW_DP_ABORT <= 0x00000000]
[12:36:32.954]      __var DP_CTRL_STAT      = 0x4;
[12:36:32.954]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:36:32.954]      __var DP_SELECT         = 0x8;
[12:36:32.954]        // -> [DP_SELECT <= 0x00000008]
[12:36:32.954]      __var powered_down      = 0;
[12:36:32.954]        // -> [powered_down <= 0x00000000]
[12:36:32.954]      WriteDP(DP_SELECT, 0x00000000);
[12:36:32.954]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:36:32.954]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:36:32.960]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:36:32.960]        // -> [powered_down <= 0x00000001]
[12:36:32.960]    </block>
[12:36:32.960]    <control if="powered_down" while="" timeout="0" info="">
[12:36:32.960]      // if-block "powered_down"
[12:36:32.960]        // =>  TRUE
[12:36:32.960]      <block atomic="false" info="">
[12:36:32.960]        Message(0, "Debug/System power-up request sent");
[12:36:32.960]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:36:32.960]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:36:32.960]      </block>
[12:36:32.965]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:36:32.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:36:32.965]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:36:32.965]        // while-condition  =>  FALSE
[12:36:32.965]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:36:32.965]      </control>
[12:36:32.965]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:36:32.965]        // if-block "(__protocol & 0xFFFF) == 1"
[12:36:32.965]          // =>  FALSE
[12:36:32.965]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:36:32.965]      </control>
[12:36:32.965]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:36:32.965]        // if-block "(__protocol & 0xFFFF) == 2"
[12:36:32.965]          // =>  TRUE
[12:36:32.965]        <block atomic="false" info="">
[12:36:32.965]          Message(0, "executing SWD power up");
[12:36:32.965]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:36:32.970]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:36:32.970]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:36:32.970]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:36:32.970]        </block>
[12:36:32.970]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:36:32.970]      </control>
[12:36:32.970]      // end if-block "powered_down"
[12:36:32.970]    </control>
[12:36:32.970]    <block atomic="false" info="">
[12:36:32.970]      __var DEBUG_PORT_VAL    = 0;
[12:36:32.970]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:36:32.970]      __var ACCESS_POINT_VAL  = 0;
[12:36:32.975]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:36:32.975]      __ap = 1; 
[12:36:32.975]        // -> [__ap <= 0x00000001]
[12:36:32.975]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:36:32.975]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:36:32.975]      __ap = 4;
[12:36:32.975]        // -> [__ap <= 0x00000004]
[12:36:32.975]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:36:32.980]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:36:32.980]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:36:32.980]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:36:32.980]    </block>
[12:36:32.980]    <block atomic="false" info="">
[12:36:32.980]      __var nReset = 0x80;
[12:36:32.980]        // -> [nReset <= 0x00000080]
[12:36:32.980]      __var canReadPins = 0;
[12:36:32.980]        // -> [canReadPins <= 0x00000000]
[12:36:32.980]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:36:32.985]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:36:32.985]        // -> [canReadPins <= 0x00000001]
[12:36:32.985]    </block>
[12:36:32.985]    <control if="" while="1" timeout="200" info="">
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.985]      // while "1"  (timeout="200")
[12:36:32.985]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.990]      // while "1"  (timeout="200")
[12:36:32.990]      // while-condition  =>  TRUE
[12:36:32.995]      // while "1"  (timeout="200")
[12:36:32.995]      // while  =>  TIMEOUT
[12:36:32.995]      // end while "1"
[12:36:32.995]    </control>
[12:36:32.995]    <control if="canReadPins" while="" timeout="0" info="">
[12:36:32.995]      // if-block "canReadPins"
[12:36:32.995]        // =>  TRUE
[12:36:32.995]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:36:32.995]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:36:32.997]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:36:32.997]        // while-condition  =>  FALSE
[12:36:32.997]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:36:32.997]      </control>
[12:36:32.997]      // end if-block "canReadPins"
[12:36:32.997]    </control>
[12:36:32.997]    <control if="!canReadPins" while="" timeout="0" info="">
[12:36:32.997]      // if-block "!canReadPins"
[12:36:32.997]        // =>  FALSE
[12:36:32.997]      // skip if-block "!canReadPins"
[12:36:32.997]    </control>
[12:36:32.997]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:36:32.997]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:36:32.997]        // =>  TRUE
[12:36:32.997]      <block atomic="false" info="">
[12:36:32.997]        WriteAP(0x00, 0x190008);
[12:36:33.000]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:36:33.000]        WriteAP(0xF0, 0x01);
[12:36:33.000]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:36:33.000]      </block>
[12:36:33.000]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:36:33.000]    </control>
[12:36:33.000]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:36:33.000]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:36:33.000]        // =>  FALSE
[12:36:33.000]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:36:33.005]    </control>
[12:36:33.005]    <block atomic="false" info="">
[12:36:33.005]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:36:33.005]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:36:33.005]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:36:33.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:36:33.010]      __ap = 0; //lets make sure we reset the access point selection
[12:36:33.010]        // -> [__ap <= 0x00000000]
[12:36:33.010]    </block>
[12:36:33.010]  </sequence>
[12:36:33.010]  
[12:36:33.026]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:36:33.026]  
[12:36:33.026]  <debugvars>
[12:36:33.026]    // Pre-defined
[12:36:33.026]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:36:33.030]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:36:33.030]    __dp=0x00000000
[12:36:33.030]    __ap=0x00000000
[12:36:33.030]    __traceout=0x00000000      (Trace Disabled)
[12:36:33.030]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:36:33.030]    __FlashAddr=0x00000000
[12:36:33.030]    __FlashLen=0x00000000
[12:36:33.030]    __FlashArg=0x00000000
[12:36:33.030]    __FlashOp=0x00000000
[12:36:33.030]    __Result=0x00000000
[12:36:33.030]  </debugvars>
[12:36:33.030]  
[12:36:33.030]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:36:33.030]    <block atomic="false" info="">
[12:36:33.030]      __var deviceID = 0;
[12:36:33.030]        // -> [deviceID <= 0x00000000]
[12:36:33.030]      __var version = 0;
[12:36:33.030]        // -> [version <= 0x00000000]
[12:36:33.030]      __var partNum = 0;
[12:36:33.030]        // -> [partNum <= 0x00000000]
[12:36:33.030]      __var manuf = 0;
[12:36:33.030]        // -> [manuf <= 0x00000000]
[12:36:33.030]      __var isMSPM0G1X0X_G3X0X = 0;
[12:36:33.030]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:36:33.030]      __var isProduction = 0;
[12:36:33.030]        // -> [isProduction <= 0x00000000]
[12:36:33.030]      __var continueId = 0;
[12:36:33.030]        // -> [continueId <= 0x00000000]
[12:36:33.030]      deviceID =   Read32(0x41C40004);
[12:36:33.036]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:36:33.036]        // -> [deviceID <= 0x2BB8802F]
[12:36:33.036]      version = deviceID >> 28;
[12:36:33.036]        // -> [version <= 0x00000002]
[12:36:33.036]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:36:33.036]        // -> [partNum <= 0x0000BB88]
[12:36:33.036]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:36:33.036]        // -> [manuf <= 0x00000017]
[12:36:33.036]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:36:33.036]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:36:33.036]      isProduction = (version > 0);
[12:36:33.036]        // -> [isProduction <= 0x00000001]
[12:36:33.036]    </block>
[12:36:33.036]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:36:33.036]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:36:33.036]        // =>  FALSE
[12:36:33.036]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:36:33.036]    </control>
[12:36:33.036]    <control if="continueId == 4" while="" timeout="0" info="">
[12:36:33.036]      // if-block "continueId == 4"
[12:36:33.036]        // =>  FALSE
[12:36:33.036]      // skip if-block "continueId == 4"
[12:36:33.036]    </control>
[12:36:33.036]    <control if="!isProduction" while="" timeout="0" info="">
[12:36:33.036]      // if-block "!isProduction"
[12:36:33.040]        // =>  FALSE
[12:36:33.040]      // skip if-block "!isProduction"
[12:36:33.040]    </control>
[12:36:33.040]  </sequence>
[12:36:33.040]  
[12:36:38.374]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:36:38.374]  
[12:36:38.374]  <debugvars>
[12:36:38.374]    // Pre-defined
[12:36:38.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:36:38.374]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:36:38.374]    __dp=0x00000000
[12:36:38.374]    __ap=0x00000000
[12:36:38.374]    __traceout=0x00000000      (Trace Disabled)
[12:36:38.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:36:38.374]    __FlashAddr=0x00000000
[12:36:38.374]    __FlashLen=0x00000000
[12:36:38.374]    __FlashArg=0x00000000
[12:36:38.374]    __FlashOp=0x00000000
[12:36:38.374]    __Result=0x00000000
[12:36:38.374]  </debugvars>
[12:36:38.374]  
[12:36:38.374]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:36:38.374]    <block atomic="false" info="">
[12:36:38.374]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:36:38.374]        // -> [isSWJ <= 0x00000001]
[12:36:38.374]      __var hasDormant = __protocol & 0x00020000;
[12:36:38.374]        // -> [hasDormant <= 0x00000000]
[12:36:38.374]      __var protType   = __protocol & 0x0000FFFF;
[12:36:38.374]        // -> [protType <= 0x00000002]
[12:36:38.374]    </block>
[12:36:38.374]    <control if="protType == 1" while="" timeout="0" info="">
[12:36:38.374]      // if-block "protType == 1"
[12:36:38.374]        // =>  FALSE
[12:36:38.374]      // skip if-block "protType == 1"
[12:36:38.374]    </control>
[12:36:38.374]    <control if="protType == 2" while="" timeout="0" info="">
[12:36:38.384]      // if-block "protType == 2"
[12:36:38.384]        // =>  TRUE
[12:36:38.384]      <control if="isSWJ" while="" timeout="0" info="">
[12:36:38.384]        // if-block "isSWJ"
[12:36:38.384]          // =>  TRUE
[12:36:38.384]        <control if="hasDormant" while="" timeout="0" info="">
[12:36:38.384]          // if-block "hasDormant"
[12:36:38.384]            // =>  FALSE
[12:36:38.384]          // skip if-block "hasDormant"
[12:36:38.384]        </control>
[12:36:38.384]        <control if="!hasDormant" while="" timeout="0" info="">
[12:36:38.384]          // if-block "!hasDormant"
[12:36:38.384]            // =>  TRUE
[12:36:38.384]          <block atomic="false" info="">
[12:36:38.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:36:38.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:36:38.384]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:36:38.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:36:38.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:36:38.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:36:38.384]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:36:38.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:36:38.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:36:38.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:36:38.384]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:36:38.394]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:36:38.394]          </block>
[12:36:38.394]          // end if-block "!hasDormant"
[12:36:38.394]        </control>
[12:36:38.394]        // end if-block "isSWJ"
[12:36:38.394]      </control>
[12:36:38.394]      <control if="!isSWJ" while="" timeout="0" info="">
[12:36:38.394]        // if-block "!isSWJ"
[12:36:38.394]          // =>  FALSE
[12:36:38.394]        // skip if-block "!isSWJ"
[12:36:38.394]      </control>
[12:36:38.394]      <block atomic="false" info="">
[12:36:38.394]        ReadDP(0x0);
[12:36:38.394]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:36:38.394]      </block>
[12:36:38.394]      // end if-block "protType == 2"
[12:36:38.394]    </control>
[12:36:38.394]  </sequence>
[12:36:38.394]  
[12:36:38.394]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:36:38.394]  
[12:36:38.394]  <debugvars>
[12:36:38.394]    // Pre-defined
[12:36:38.394]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:36:38.394]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:36:38.394]    __dp=0x00000000
[12:36:38.394]    __ap=0x00000000
[12:36:38.394]    __traceout=0x00000000      (Trace Disabled)
[12:36:38.394]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:36:38.394]    __FlashAddr=0x00000000
[12:36:38.394]    __FlashLen=0x00000000
[12:36:38.394]    __FlashArg=0x00000000
[12:36:38.394]    __FlashOp=0x00000000
[12:36:38.394]    __Result=0x00000000
[12:36:38.394]  </debugvars>
[12:36:38.394]  
[12:36:38.394]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:36:38.394]    <block atomic="false" info="">
[12:36:38.394]      __var SW_DP_ABORT       = 0x0;
[12:36:38.394]        // -> [SW_DP_ABORT <= 0x00000000]
[12:36:38.394]      __var DP_CTRL_STAT      = 0x4;
[12:36:38.394]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:36:38.394]      __var DP_SELECT         = 0x8;
[12:36:38.394]        // -> [DP_SELECT <= 0x00000008]
[12:36:38.394]      __var powered_down      = 0;
[12:36:38.394]        // -> [powered_down <= 0x00000000]
[12:36:38.394]      WriteDP(DP_SELECT, 0x00000000);
[12:36:38.404]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:36:38.404]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:36:38.404]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:36:38.404]        // -> [powered_down <= 0x00000001]
[12:36:38.404]    </block>
[12:36:38.404]    <control if="powered_down" while="" timeout="0" info="">
[12:36:38.404]      // if-block "powered_down"
[12:36:38.404]        // =>  TRUE
[12:36:38.404]      <block atomic="false" info="">
[12:36:38.404]        Message(0, "Debug/System power-up request sent");
[12:36:38.404]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:36:38.404]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:36:38.404]      </block>
[12:36:38.404]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:36:38.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:36:38.404]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:36:38.404]        // while-condition  =>  FALSE
[12:36:38.404]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:36:38.404]      </control>
[12:36:38.404]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:36:38.404]        // if-block "(__protocol & 0xFFFF) == 1"
[12:36:38.404]          // =>  FALSE
[12:36:38.404]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:36:38.404]      </control>
[12:36:38.404]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:36:38.404]        // if-block "(__protocol & 0xFFFF) == 2"
[12:36:38.404]          // =>  TRUE
[12:36:38.414]        <block atomic="false" info="">
[12:36:38.414]          Message(0, "executing SWD power up");
[12:36:38.414]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:36:38.416]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:36:38.416]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:36:38.416]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:36:38.416]        </block>
[12:36:38.416]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:36:38.416]      </control>
[12:36:38.416]      // end if-block "powered_down"
[12:36:38.416]    </control>
[12:36:38.416]    <block atomic="false" info="">
[12:36:38.416]      __var DEBUG_PORT_VAL    = 0;
[12:36:38.416]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:36:38.416]      __var ACCESS_POINT_VAL  = 0;
[12:36:38.416]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:36:38.416]      __ap = 1; 
[12:36:38.416]        // -> [__ap <= 0x00000001]
[12:36:38.416]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:36:38.424]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:36:38.424]      __ap = 4;
[12:36:38.424]        // -> [__ap <= 0x00000004]
[12:36:38.424]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:36:38.424]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:36:38.424]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:36:38.424]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:36:38.434]    </block>
[12:36:38.434]    <block atomic="false" info="">
[12:36:38.434]      __var nReset = 0x80;
[12:36:38.434]        // -> [nReset <= 0x00000080]
[12:36:38.435]      __var canReadPins = 0;
[12:36:38.435]        // -> [canReadPins <= 0x00000000]
[12:36:38.435]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:36:38.435]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:36:38.435]        // -> [canReadPins <= 0x00000001]
[12:36:38.435]    </block>
[12:36:38.435]    <control if="" while="1" timeout="200" info="">
[12:36:38.435]      // while "1"  (timeout="200")
[12:36:38.435]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.438]      // while "1"  (timeout="200")
[12:36:38.438]      // while-condition  =>  TRUE
[12:36:38.444]      // while "1"  (timeout="200")
[12:36:38.444]      // while  =>  TIMEOUT
[12:36:38.444]      // end while "1"
[12:36:38.444]    </control>
[12:36:38.444]    <control if="canReadPins" while="" timeout="0" info="">
[12:36:38.444]      // if-block "canReadPins"
[12:36:38.444]        // =>  TRUE
[12:36:38.444]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:36:38.444]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:36:38.446]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:36:38.446]        // while-condition  =>  FALSE
[12:36:38.446]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:36:38.446]      </control>
[12:36:38.446]      // end if-block "canReadPins"
[12:36:38.446]    </control>
[12:36:38.446]    <control if="!canReadPins" while="" timeout="0" info="">
[12:36:38.446]      // if-block "!canReadPins"
[12:36:38.446]        // =>  FALSE
[12:36:38.446]      // skip if-block "!canReadPins"
[12:36:38.446]    </control>
[12:36:38.446]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:36:38.446]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:36:38.446]        // =>  TRUE
[12:36:38.446]      <block atomic="false" info="">
[12:36:38.446]        WriteAP(0x00, 0x190008);
[12:36:38.446]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:36:38.446]        WriteAP(0xF0, 0x01);
[12:36:38.446]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:36:38.446]      </block>
[12:36:38.446]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:36:38.446]    </control>
[12:36:38.454]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:36:38.454]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:36:38.454]        // =>  FALSE
[12:36:38.454]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:36:38.454]    </control>
[12:36:38.454]    <block atomic="false" info="">
[12:36:38.454]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:36:38.454]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:36:38.454]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:36:38.454]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:36:38.454]      __ap = 0; //lets make sure we reset the access point selection
[12:36:38.454]        // -> [__ap <= 0x00000000]
[12:36:38.454]    </block>
[12:36:38.454]  </sequence>
[12:36:38.454]  
[12:36:38.476]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:36:38.476]  
[12:36:38.476]  <debugvars>
[12:36:38.476]    // Pre-defined
[12:36:38.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:36:38.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:36:38.476]    __dp=0x00000000
[12:36:38.476]    __ap=0x00000000
[12:36:38.476]    __traceout=0x00000000      (Trace Disabled)
[12:36:38.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:36:38.476]    __FlashAddr=0x00000000
[12:36:38.476]    __FlashLen=0x00000000
[12:36:38.476]    __FlashArg=0x00000000
[12:36:38.476]    __FlashOp=0x00000000
[12:36:38.476]    __Result=0x00000000
[12:36:38.476]  </debugvars>
[12:36:38.476]  
[12:36:38.476]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:36:38.476]    <block atomic="false" info="">
[12:36:38.476]      __var deviceID = 0;
[12:36:38.476]        // -> [deviceID <= 0x00000000]
[12:36:38.476]      __var version = 0;
[12:36:38.476]        // -> [version <= 0x00000000]
[12:36:38.476]      __var partNum = 0;
[12:36:38.485]        // -> [partNum <= 0x00000000]
[12:36:38.485]      __var manuf = 0;
[12:36:38.485]        // -> [manuf <= 0x00000000]
[12:36:38.485]      __var isMSPM0G1X0X_G3X0X = 0;
[12:36:38.485]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:36:38.485]      __var isProduction = 0;
[12:36:38.485]        // -> [isProduction <= 0x00000000]
[12:36:38.485]      __var continueId = 0;
[12:36:38.485]        // -> [continueId <= 0x00000000]
[12:36:38.485]      deviceID =   Read32(0x41C40004);
[12:36:38.488]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:36:38.488]        // -> [deviceID <= 0x2BB8802F]
[12:36:38.488]      version = deviceID >> 28;
[12:36:38.488]        // -> [version <= 0x00000002]
[12:36:38.488]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:36:38.488]        // -> [partNum <= 0x0000BB88]
[12:36:38.488]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:36:38.488]        // -> [manuf <= 0x00000017]
[12:36:38.488]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:36:38.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:36:38.488]      isProduction = (version > 0);
[12:36:38.488]        // -> [isProduction <= 0x00000001]
[12:36:38.488]    </block>
[12:36:38.488]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:36:38.488]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:36:38.488]        // =>  FALSE
[12:36:38.488]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:36:38.488]    </control>
[12:36:38.488]    <control if="continueId == 4" while="" timeout="0" info="">
[12:36:38.488]      // if-block "continueId == 4"
[12:36:38.488]        // =>  FALSE
[12:36:38.488]      // skip if-block "continueId == 4"
[12:36:38.488]    </control>
[12:36:38.488]    <control if="!isProduction" while="" timeout="0" info="">
[12:36:38.488]      // if-block "!isProduction"
[12:36:38.488]        // =>  FALSE
[12:36:38.488]      // skip if-block "!isProduction"
[12:36:38.488]    </control>
[12:36:38.488]  </sequence>
[12:36:38.488]  
[12:37:51.466]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:37:51.466]  
[12:37:51.481]  <debugvars>
[12:37:51.481]    // Pre-defined
[12:37:51.481]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:37:51.481]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:37:51.481]    __dp=0x00000000
[12:37:51.481]    __ap=0x00000000
[12:37:51.481]    __traceout=0x00000000      (Trace Disabled)
[12:37:51.481]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:37:51.481]    __FlashAddr=0x00000000
[12:37:51.481]    __FlashLen=0x00000000
[12:37:51.481]    __FlashArg=0x00000000
[12:37:51.481]    __FlashOp=0x00000000
[12:37:51.481]    __Result=0x00000000
[12:37:51.481]  </debugvars>
[12:37:51.481]  
[12:37:51.481]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:37:51.481]    <block atomic="false" info="">
[12:37:51.481]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:37:51.481]        // -> [isSWJ <= 0x00000001]
[12:37:51.481]      __var hasDormant = __protocol & 0x00020000;
[12:37:51.481]        // -> [hasDormant <= 0x00000000]
[12:37:51.481]      __var protType   = __protocol & 0x0000FFFF;
[12:37:51.481]        // -> [protType <= 0x00000002]
[12:37:51.481]    </block>
[12:37:51.481]    <control if="protType == 1" while="" timeout="0" info="">
[12:37:51.481]      // if-block "protType == 1"
[12:37:51.481]        // =>  FALSE
[12:37:51.481]      // skip if-block "protType == 1"
[12:37:51.481]    </control>
[12:37:51.481]    <control if="protType == 2" while="" timeout="0" info="">
[12:37:51.481]      // if-block "protType == 2"
[12:37:51.481]        // =>  TRUE
[12:37:51.481]      <control if="isSWJ" while="" timeout="0" info="">
[12:37:51.481]        // if-block "isSWJ"
[12:37:51.481]          // =>  TRUE
[12:37:51.481]        <control if="hasDormant" while="" timeout="0" info="">
[12:37:51.481]          // if-block "hasDormant"
[12:37:51.481]            // =>  FALSE
[12:37:51.481]          // skip if-block "hasDormant"
[12:37:51.481]        </control>
[12:37:51.481]        <control if="!hasDormant" while="" timeout="0" info="">
[12:37:51.481]          // if-block "!hasDormant"
[12:37:51.481]            // =>  TRUE
[12:37:51.481]          <block atomic="false" info="">
[12:37:51.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:37:51.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:37:51.487]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:37:51.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:37:51.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:37:51.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:37:51.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:37:51.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:37:51.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:37:51.497]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:37:51.497]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:37:51.497]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:37:51.497]          </block>
[12:37:51.497]          // end if-block "!hasDormant"
[12:37:51.497]        </control>
[12:37:51.497]        // end if-block "isSWJ"
[12:37:51.497]      </control>
[12:37:51.497]      <control if="!isSWJ" while="" timeout="0" info="">
[12:37:51.497]        // if-block "!isSWJ"
[12:37:51.497]          // =>  FALSE
[12:37:51.497]        // skip if-block "!isSWJ"
[12:37:51.497]      </control>
[12:37:51.497]      <block atomic="false" info="">
[12:37:51.497]        ReadDP(0x0);
[12:37:51.497]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:37:51.497]      </block>
[12:37:51.497]      // end if-block "protType == 2"
[12:37:51.497]    </control>
[12:37:51.497]  </sequence>
[12:37:51.497]  
[12:37:51.497]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:37:51.497]  
[12:37:51.497]  <debugvars>
[12:37:51.497]    // Pre-defined
[12:37:51.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:37:51.497]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:37:51.497]    __dp=0x00000000
[12:37:51.497]    __ap=0x00000000
[12:37:51.497]    __traceout=0x00000000      (Trace Disabled)
[12:37:51.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:37:51.497]    __FlashAddr=0x00000000
[12:37:51.497]    __FlashLen=0x00000000
[12:37:51.497]    __FlashArg=0x00000000
[12:37:51.497]    __FlashOp=0x00000000
[12:37:51.497]    __Result=0x00000000
[12:37:51.497]  </debugvars>
[12:37:51.497]  
[12:37:51.497]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:37:51.497]    <block atomic="false" info="">
[12:37:51.497]      __var SW_DP_ABORT       = 0x0;
[12:37:51.497]        // -> [SW_DP_ABORT <= 0x00000000]
[12:37:51.497]      __var DP_CTRL_STAT      = 0x4;
[12:37:51.497]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:37:51.497]      __var DP_SELECT         = 0x8;
[12:37:51.497]        // -> [DP_SELECT <= 0x00000008]
[12:37:51.497]      __var powered_down      = 0;
[12:37:51.507]        // -> [powered_down <= 0x00000000]
[12:37:51.507]      WriteDP(DP_SELECT, 0x00000000);
[12:37:51.509]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:37:51.509]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:37:51.509]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:37:51.509]        // -> [powered_down <= 0x00000001]
[12:37:51.509]    </block>
[12:37:51.509]    <control if="powered_down" while="" timeout="0" info="">
[12:37:51.509]      // if-block "powered_down"
[12:37:51.509]        // =>  TRUE
[12:37:51.509]      <block atomic="false" info="">
[12:37:51.509]        Message(0, "Debug/System power-up request sent");
[12:37:51.509]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:37:51.509]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:37:51.509]      </block>
[12:37:51.509]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:37:51.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:37:51.509]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:37:51.509]        // while-condition  =>  FALSE
[12:37:51.509]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:37:51.509]      </control>
[12:37:51.517]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:37:51.517]        // if-block "(__protocol & 0xFFFF) == 1"
[12:37:51.517]          // =>  FALSE
[12:37:51.517]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:37:51.517]      </control>
[12:37:51.517]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:37:51.518]        // if-block "(__protocol & 0xFFFF) == 2"
[12:37:51.518]          // =>  TRUE
[12:37:51.518]        <block atomic="false" info="">
[12:37:51.518]          Message(0, "executing SWD power up");
[12:37:51.519]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:37:51.521]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:37:51.521]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:37:51.522]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:37:51.522]        </block>
[12:37:51.522]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:37:51.522]      </control>
[12:37:51.522]      // end if-block "powered_down"
[12:37:51.522]    </control>
[12:37:51.522]    <block atomic="false" info="">
[12:37:51.522]      __var DEBUG_PORT_VAL    = 0;
[12:37:51.522]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:37:51.522]      __var ACCESS_POINT_VAL  = 0;
[12:37:51.522]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:37:51.522]      __ap = 1; 
[12:37:51.524]        // -> [__ap <= 0x00000001]
[12:37:51.524]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:37:51.527]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:37:51.527]      __ap = 4;
[12:37:51.527]        // -> [__ap <= 0x00000004]
[12:37:51.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:37:51.532]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:37:51.532]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:37:51.532]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:37:51.532]    </block>
[12:37:51.532]    <block atomic="false" info="">
[12:37:51.532]      __var nReset = 0x80;
[12:37:51.532]        // -> [nReset <= 0x00000080]
[12:37:51.532]      __var canReadPins = 0;
[12:37:51.532]        // -> [canReadPins <= 0x00000000]
[12:37:51.532]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:37:51.538]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:37:51.538]        // -> [canReadPins <= 0x00000001]
[12:37:51.538]    </block>
[12:37:51.538]    <control if="" while="1" timeout="200" info="">
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.538]      // while "1"  (timeout="200")
[12:37:51.538]      // while-condition  =>  TRUE
[12:37:51.542]      // while "1"  (timeout="200")
[12:37:51.542]      // while-condition  =>  TRUE
[12:37:51.542]      // while "1"  (timeout="200")
[12:37:51.542]      // while-condition  =>  TRUE
[12:37:51.542]      // while "1"  (timeout="200")
[12:37:51.542]      // while-condition  =>  TRUE
[12:37:51.542]      // while "1"  (timeout="200")
[12:37:51.542]      // while-condition  =>  TRUE
[12:37:51.542]      // while "1"  (timeout="200")
[12:37:51.542]      // while-condition  =>  TRUE
[12:37:51.543]      // while "1"  (timeout="200")
[12:37:51.543]      // while-condition  =>  TRUE
[12:37:51.543]      // while "1"  (timeout="200")
[12:37:51.543]      // while-condition  =>  TRUE
[12:37:51.543]      // while "1"  (timeout="200")
[12:37:51.543]      // while-condition  =>  TRUE
[12:37:51.543]      // while "1"  (timeout="200")
[12:37:51.543]      // while-condition  =>  TRUE
[12:37:51.543]      // while "1"  (timeout="200")
[12:37:51.543]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.544]      // while "1"  (timeout="200")
[12:37:51.544]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.548]      // while-condition  =>  TRUE
[12:37:51.548]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.551]      // while "1"  (timeout="200")
[12:37:51.551]      // while-condition  =>  TRUE
[12:37:51.553]      // while "1"  (timeout="200")
[12:37:51.553]      // while-condition  =>  TRUE
[12:37:51.553]      // while "1"  (timeout="200")
[12:37:51.553]      // while-condition  =>  TRUE
[12:37:51.553]      // while "1"  (timeout="200")
[12:37:51.553]      // while-condition  =>  TRUE
[12:37:51.553]      // while "1"  (timeout="200")
[12:37:51.553]      // while-condition  =>  TRUE
[12:37:51.553]      // while "1"  (timeout="200")
[12:37:51.554]      // while-condition  =>  TRUE
[12:37:51.554]      // while "1"  (timeout="200")
[12:37:51.554]      // while  =>  TIMEOUT
[12:37:51.554]      // end while "1"
[12:37:51.554]    </control>
[12:37:51.554]    <control if="canReadPins" while="" timeout="0" info="">
[12:37:51.554]      // if-block "canReadPins"
[12:37:51.554]        // =>  TRUE
[12:37:51.554]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:37:51.554]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:37:51.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:37:51.554]        // while-condition  =>  FALSE
[12:37:51.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:37:51.554]      </control>
[12:37:51.554]      // end if-block "canReadPins"
[12:37:51.554]    </control>
[12:37:51.554]    <control if="!canReadPins" while="" timeout="0" info="">
[12:37:51.554]      // if-block "!canReadPins"
[12:37:51.554]        // =>  FALSE
[12:37:51.554]      // skip if-block "!canReadPins"
[12:37:51.558]    </control>
[12:37:51.558]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:37:51.558]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:37:51.559]        // =>  TRUE
[12:37:51.559]      <block atomic="false" info="">
[12:37:51.559]        WriteAP(0x00, 0x190008);
[12:37:51.560]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:37:51.560]        WriteAP(0xF0, 0x01);
[12:37:51.563]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:37:51.563]      </block>
[12:37:51.563]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:37:51.563]    </control>
[12:37:51.563]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:37:51.563]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:37:51.563]        // =>  FALSE
[12:37:51.565]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:37:51.565]    </control>
[12:37:51.565]    <block atomic="false" info="">
[12:37:51.565]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:37:51.570]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:37:51.570]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:37:51.570]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:37:51.570]      __ap = 0; //lets make sure we reset the access point selection
[12:37:51.570]        // -> [__ap <= 0x00000000]
[12:37:51.570]    </block>
[12:37:51.570]  </sequence>
[12:37:51.570]  
[12:37:51.596]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:37:51.596]  
[12:37:51.596]  <debugvars>
[12:37:51.596]    // Pre-defined
[12:37:51.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:37:51.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:37:51.597]    __dp=0x00000000
[12:37:51.597]    __ap=0x00000000
[12:37:51.597]    __traceout=0x00000000      (Trace Disabled)
[12:37:51.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:37:51.597]    __FlashAddr=0x00000000
[12:37:51.597]    __FlashLen=0x00000000
[12:37:51.597]    __FlashArg=0x00000000
[12:37:51.597]    __FlashOp=0x00000000
[12:37:51.597]    __Result=0x00000000
[12:37:51.597]  </debugvars>
[12:37:51.597]  
[12:37:51.597]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:37:51.598]    <block atomic="false" info="">
[12:37:51.598]      __var deviceID = 0;
[12:37:51.598]        // -> [deviceID <= 0x00000000]
[12:37:51.598]      __var version = 0;
[12:37:51.598]        // -> [version <= 0x00000000]
[12:37:51.598]      __var partNum = 0;
[12:37:51.598]        // -> [partNum <= 0x00000000]
[12:37:51.598]      __var manuf = 0;
[12:37:51.598]        // -> [manuf <= 0x00000000]
[12:37:51.598]      __var isMSPM0G1X0X_G3X0X = 0;
[12:37:51.598]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:37:51.598]      __var isProduction = 0;
[12:37:51.599]        // -> [isProduction <= 0x00000000]
[12:37:51.599]      __var continueId = 0;
[12:37:51.599]        // -> [continueId <= 0x00000000]
[12:37:51.599]      deviceID =   Read32(0x41C40004);
[12:37:51.603]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:37:51.604]        // -> [deviceID <= 0x2BB8802F]
[12:37:51.604]      version = deviceID >> 28;
[12:37:51.604]        // -> [version <= 0x00000002]
[12:37:51.604]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:37:51.604]        // -> [partNum <= 0x0000BB88]
[12:37:51.604]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:37:51.604]        // -> [manuf <= 0x00000017]
[12:37:51.604]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:37:51.604]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:37:51.605]      isProduction = (version > 0);
[12:37:51.605]        // -> [isProduction <= 0x00000001]
[12:37:51.605]    </block>
[12:37:51.605]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:37:51.605]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:37:51.605]        // =>  FALSE
[12:37:51.605]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:37:51.605]    </control>
[12:37:51.605]    <control if="continueId == 4" while="" timeout="0" info="">
[12:37:51.605]      // if-block "continueId == 4"
[12:37:51.605]        // =>  FALSE
[12:37:51.606]      // skip if-block "continueId == 4"
[12:37:51.606]    </control>
[12:37:51.606]    <control if="!isProduction" while="" timeout="0" info="">
[12:37:51.606]      // if-block "!isProduction"
[12:37:51.606]        // =>  FALSE
[12:37:51.606]      // skip if-block "!isProduction"
[12:37:51.606]    </control>
[12:37:51.606]  </sequence>
[12:37:51.606]  
[12:37:56.926]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:37:56.926]  
[12:37:56.941]  <debugvars>
[12:37:56.941]    // Pre-defined
[12:37:56.941]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:37:56.941]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:37:56.941]    __dp=0x00000000
[12:37:56.941]    __ap=0x00000000
[12:37:56.941]    __traceout=0x00000000      (Trace Disabled)
[12:37:56.941]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:37:56.942]    __FlashAddr=0x00000000
[12:37:56.942]    __FlashLen=0x00000000
[12:37:56.942]    __FlashArg=0x00000000
[12:37:56.942]    __FlashOp=0x00000000
[12:37:56.942]    __Result=0x00000000
[12:37:56.942]  </debugvars>
[12:37:56.942]  
[12:37:56.942]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:37:56.942]    <block atomic="false" info="">
[12:37:56.942]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:37:56.942]        // -> [isSWJ <= 0x00000001]
[12:37:56.942]      __var hasDormant = __protocol & 0x00020000;
[12:37:56.942]        // -> [hasDormant <= 0x00000000]
[12:37:56.942]      __var protType   = __protocol & 0x0000FFFF;
[12:37:56.942]        // -> [protType <= 0x00000002]
[12:37:56.942]    </block>
[12:37:56.942]    <control if="protType == 1" while="" timeout="0" info="">
[12:37:56.942]      // if-block "protType == 1"
[12:37:56.942]        // =>  FALSE
[12:37:56.944]      // skip if-block "protType == 1"
[12:37:56.944]    </control>
[12:37:56.944]    <control if="protType == 2" while="" timeout="0" info="">
[12:37:56.944]      // if-block "protType == 2"
[12:37:56.944]        // =>  TRUE
[12:37:56.944]      <control if="isSWJ" while="" timeout="0" info="">
[12:37:56.944]        // if-block "isSWJ"
[12:37:56.944]          // =>  TRUE
[12:37:56.944]        <control if="hasDormant" while="" timeout="0" info="">
[12:37:56.944]          // if-block "hasDormant"
[12:37:56.944]            // =>  FALSE
[12:37:56.944]          // skip if-block "hasDormant"
[12:37:56.944]        </control>
[12:37:56.944]        <control if="!hasDormant" while="" timeout="0" info="">
[12:37:56.944]          // if-block "!hasDormant"
[12:37:56.944]            // =>  TRUE
[12:37:56.944]          <block atomic="false" info="">
[12:37:56.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:37:56.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:37:56.947]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:37:56.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:37:56.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:37:56.952]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:37:56.952]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:37:56.953]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:37:56.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:37:56.954]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:37:56.954]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:37:56.956]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:37:56.957]          </block>
[12:37:56.958]          // end if-block "!hasDormant"
[12:37:56.958]        </control>
[12:37:56.958]        // end if-block "isSWJ"
[12:37:56.958]      </control>
[12:37:56.958]      <control if="!isSWJ" while="" timeout="0" info="">
[12:37:56.958]        // if-block "!isSWJ"
[12:37:56.958]          // =>  FALSE
[12:37:56.958]        // skip if-block "!isSWJ"
[12:37:56.958]      </control>
[12:37:56.958]      <block atomic="false" info="">
[12:37:56.958]        ReadDP(0x0);
[12:37:56.959]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:37:56.960]      </block>
[12:37:56.960]      // end if-block "protType == 2"
[12:37:56.960]    </control>
[12:37:56.960]  </sequence>
[12:37:56.960]  
[12:37:56.963]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:37:56.963]  
[12:37:56.963]  <debugvars>
[12:37:56.963]    // Pre-defined
[12:37:56.963]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:37:56.963]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:37:56.963]    __dp=0x00000000
[12:37:56.965]    __ap=0x00000000
[12:37:56.965]    __traceout=0x00000000      (Trace Disabled)
[12:37:56.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:37:56.965]    __FlashAddr=0x00000000
[12:37:56.965]    __FlashLen=0x00000000
[12:37:56.965]    __FlashArg=0x00000000
[12:37:56.965]    __FlashOp=0x00000000
[12:37:56.965]    __Result=0x00000000
[12:37:56.965]  </debugvars>
[12:37:56.965]  
[12:37:56.966]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:37:56.966]    <block atomic="false" info="">
[12:37:56.966]      __var SW_DP_ABORT       = 0x0;
[12:37:56.966]        // -> [SW_DP_ABORT <= 0x00000000]
[12:37:56.966]      __var DP_CTRL_STAT      = 0x4;
[12:37:56.966]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:37:56.966]      __var DP_SELECT         = 0x8;
[12:37:56.966]        // -> [DP_SELECT <= 0x00000008]
[12:37:56.966]      __var powered_down      = 0;
[12:37:56.966]        // -> [powered_down <= 0x00000000]
[12:37:56.966]      WriteDP(DP_SELECT, 0x00000000);
[12:37:56.969]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:37:56.969]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:37:56.970]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:37:56.970]        // -> [powered_down <= 0x00000001]
[12:37:56.970]    </block>
[12:37:56.971]    <control if="powered_down" while="" timeout="0" info="">
[12:37:56.971]      // if-block "powered_down"
[12:37:56.971]        // =>  TRUE
[12:37:56.971]      <block atomic="false" info="">
[12:37:56.971]        Message(0, "Debug/System power-up request sent");
[12:37:56.972]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:37:56.972]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:37:56.972]      </block>
[12:37:56.972]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:37:56.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:37:56.977]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:37:56.977]        // while-condition  =>  FALSE
[12:37:56.977]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:37:56.977]      </control>
[12:37:56.977]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:37:56.977]        // if-block "(__protocol & 0xFFFF) == 1"
[12:37:56.977]          // =>  FALSE
[12:37:56.977]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:37:56.977]      </control>
[12:37:56.978]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:37:56.978]        // if-block "(__protocol & 0xFFFF) == 2"
[12:37:56.978]          // =>  TRUE
[12:37:56.978]        <block atomic="false" info="">
[12:37:56.978]          Message(0, "executing SWD power up");
[12:37:56.979]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:37:56.982]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:37:56.982]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:37:56.983]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:37:56.983]        </block>
[12:37:56.983]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:37:56.983]      </control>
[12:37:56.983]      // end if-block "powered_down"
[12:37:56.983]    </control>
[12:37:56.983]    <block atomic="false" info="">
[12:37:56.983]      __var DEBUG_PORT_VAL    = 0;
[12:37:56.983]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:37:56.983]      __var ACCESS_POINT_VAL  = 0;
[12:37:56.983]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:37:56.983]      __ap = 1; 
[12:37:56.983]        // -> [__ap <= 0x00000001]
[12:37:56.983]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:37:56.988]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:37:56.988]      __ap = 4;
[12:37:56.988]        // -> [__ap <= 0x00000004]
[12:37:56.988]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:37:56.988]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:37:56.988]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:37:56.988]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:37:56.988]    </block>
[12:37:56.988]    <block atomic="false" info="">
[12:37:56.988]      __var nReset = 0x80;
[12:37:56.988]        // -> [nReset <= 0x00000080]
[12:37:56.988]      __var canReadPins = 0;
[12:37:56.988]        // -> [canReadPins <= 0x00000000]
[12:37:56.988]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:37:57.000]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:37:57.000]        // -> [canReadPins <= 0x00000001]
[12:37:57.000]    </block>
[12:37:57.000]    <control if="" while="1" timeout="200" info="">
[12:37:57.000]      // while "1"  (timeout="200")
[12:37:57.000]      // while-condition  =>  TRUE
[12:37:57.000]      // while "1"  (timeout="200")
[12:37:57.000]      // while-condition  =>  TRUE
[12:37:57.000]      // while "1"  (timeout="200")
[12:37:57.000]      // while-condition  =>  TRUE
[12:37:57.000]      // while "1"  (timeout="200")
[12:37:57.000]      // while-condition  =>  TRUE
[12:37:57.000]      // while "1"  (timeout="200")
[12:37:57.000]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.001]      // while-condition  =>  TRUE
[12:37:57.001]      // while "1"  (timeout="200")
[12:37:57.009]      // while-condition  =>  TRUE
[12:37:57.009]      // while "1"  (timeout="200")
[12:37:57.009]      // while  =>  TIMEOUT
[12:37:57.009]      // end while "1"
[12:37:57.009]    </control>
[12:37:57.009]    <control if="canReadPins" while="" timeout="0" info="">
[12:37:57.009]      // if-block "canReadPins"
[12:37:57.009]        // =>  TRUE
[12:37:57.009]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:37:57.009]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:37:57.011]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:37:57.011]        // while-condition  =>  FALSE
[12:37:57.011]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:37:57.011]      </control>
[12:37:57.011]      // end if-block "canReadPins"
[12:37:57.011]    </control>
[12:37:57.011]    <control if="!canReadPins" while="" timeout="0" info="">
[12:37:57.011]      // if-block "!canReadPins"
[12:37:57.011]        // =>  FALSE
[12:37:57.011]      // skip if-block "!canReadPins"
[12:37:57.011]    </control>
[12:37:57.011]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:37:57.011]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:37:57.011]        // =>  TRUE
[12:37:57.011]      <block atomic="false" info="">
[12:37:57.011]        WriteAP(0x00, 0x190008);
[12:37:57.011]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:37:57.011]        WriteAP(0xF0, 0x01);
[12:37:57.019]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:37:57.019]      </block>
[12:37:57.019]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:37:57.019]    </control>
[12:37:57.019]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:37:57.019]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:37:57.019]        // =>  FALSE
[12:37:57.019]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:37:57.019]    </control>
[12:37:57.019]    <block atomic="false" info="">
[12:37:57.019]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:37:57.019]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:37:57.019]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:37:57.019]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:37:57.019]      __ap = 0; //lets make sure we reset the access point selection
[12:37:57.019]        // -> [__ap <= 0x00000000]
[12:37:57.019]    </block>
[12:37:57.019]  </sequence>
[12:37:57.019]  
[12:37:57.056]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:37:57.056]  
[12:37:57.056]  <debugvars>
[12:37:57.056]    // Pre-defined
[12:37:57.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:37:57.056]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:37:57.056]    __dp=0x00000000
[12:37:57.056]    __ap=0x00000000
[12:37:57.056]    __traceout=0x00000000      (Trace Disabled)
[12:37:57.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:37:57.056]    __FlashAddr=0x00000000
[12:37:57.056]    __FlashLen=0x00000000
[12:37:57.058]    __FlashArg=0x00000000
[12:37:57.058]    __FlashOp=0x00000000
[12:37:57.058]    __Result=0x00000000
[12:37:57.058]  </debugvars>
[12:37:57.058]  
[12:37:57.058]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:37:57.058]    <block atomic="false" info="">
[12:37:57.058]      __var deviceID = 0;
[12:37:57.058]        // -> [deviceID <= 0x00000000]
[12:37:57.058]      __var version = 0;
[12:37:57.060]        // -> [version <= 0x00000000]
[12:37:57.060]      __var partNum = 0;
[12:37:57.060]        // -> [partNum <= 0x00000000]
[12:37:57.060]      __var manuf = 0;
[12:37:57.060]        // -> [manuf <= 0x00000000]
[12:37:57.060]      __var isMSPM0G1X0X_G3X0X = 0;
[12:37:57.060]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:37:57.060]      __var isProduction = 0;
[12:37:57.060]        // -> [isProduction <= 0x00000000]
[12:37:57.061]      __var continueId = 0;
[12:37:57.061]        // -> [continueId <= 0x00000000]
[12:37:57.061]      deviceID =   Read32(0x41C40004);
[12:37:57.062]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:37:57.062]        // -> [deviceID <= 0x2BB8802F]
[12:37:57.062]      version = deviceID >> 28;
[12:37:57.062]        // -> [version <= 0x00000002]
[12:37:57.062]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:37:57.062]        // -> [partNum <= 0x0000BB88]
[12:37:57.062]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:37:57.062]        // -> [manuf <= 0x00000017]
[12:37:57.062]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:37:57.062]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:37:57.062]      isProduction = (version > 0);
[12:37:57.062]        // -> [isProduction <= 0x00000001]
[12:37:57.062]    </block>
[12:37:57.062]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:37:57.062]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:37:57.062]        // =>  FALSE
[12:37:57.062]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:37:57.062]    </control>
[12:37:57.062]    <control if="continueId == 4" while="" timeout="0" info="">
[12:37:57.062]      // if-block "continueId == 4"
[12:37:57.062]        // =>  FALSE
[12:37:57.062]      // skip if-block "continueId == 4"
[12:37:57.062]    </control>
[12:37:57.062]    <control if="!isProduction" while="" timeout="0" info="">
[12:37:57.062]      // if-block "!isProduction"
[12:37:57.062]        // =>  FALSE
[12:37:57.062]      // skip if-block "!isProduction"
[12:37:57.062]    </control>
[12:37:57.062]  </sequence>
[12:37:57.062]  
[12:38:42.330]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:38:42.330]  
[12:38:42.330]  <debugvars>
[12:38:42.330]    // Pre-defined
[12:38:42.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:38:42.330]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:38:42.330]    __dp=0x00000000
[12:38:42.330]    __ap=0x00000000
[12:38:42.330]    __traceout=0x00000000      (Trace Disabled)
[12:38:42.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:38:42.330]    __FlashAddr=0x00000000
[12:38:42.330]    __FlashLen=0x00000000
[12:38:42.330]    __FlashArg=0x00000000
[12:38:42.330]    __FlashOp=0x00000000
[12:38:42.339]    __Result=0x00000000
[12:38:42.339]  </debugvars>
[12:38:42.339]  
[12:38:42.339]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:38:42.339]    <block atomic="false" info="">
[12:38:42.339]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:38:42.339]        // -> [isSWJ <= 0x00000001]
[12:38:42.340]      __var hasDormant = __protocol & 0x00020000;
[12:38:42.340]        // -> [hasDormant <= 0x00000000]
[12:38:42.340]      __var protType   = __protocol & 0x0000FFFF;
[12:38:42.340]        // -> [protType <= 0x00000002]
[12:38:42.340]    </block>
[12:38:42.340]    <control if="protType == 1" while="" timeout="0" info="">
[12:38:42.340]      // if-block "protType == 1"
[12:38:42.340]        // =>  FALSE
[12:38:42.340]      // skip if-block "protType == 1"
[12:38:42.340]    </control>
[12:38:42.340]    <control if="protType == 2" while="" timeout="0" info="">
[12:38:42.340]      // if-block "protType == 2"
[12:38:42.340]        // =>  TRUE
[12:38:42.340]      <control if="isSWJ" while="" timeout="0" info="">
[12:38:42.340]        // if-block "isSWJ"
[12:38:42.340]          // =>  TRUE
[12:38:42.340]        <control if="hasDormant" while="" timeout="0" info="">
[12:38:42.340]          // if-block "hasDormant"
[12:38:42.340]            // =>  FALSE
[12:38:42.340]          // skip if-block "hasDormant"
[12:38:42.340]        </control>
[12:38:42.340]        <control if="!hasDormant" while="" timeout="0" info="">
[12:38:42.340]          // if-block "!hasDormant"
[12:38:42.340]            // =>  TRUE
[12:38:42.340]          <block atomic="false" info="">
[12:38:42.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:38:42.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:38:42.343]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:38:42.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:38:42.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:38:42.347]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:38:42.347]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:38:42.348]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:38:42.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:38:42.350]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:38:42.350]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:38:42.351]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:38:42.351]          </block>
[12:38:42.351]          // end if-block "!hasDormant"
[12:38:42.351]        </control>
[12:38:42.351]        // end if-block "isSWJ"
[12:38:42.351]      </control>
[12:38:42.351]      <control if="!isSWJ" while="" timeout="0" info="">
[12:38:42.351]        // if-block "!isSWJ"
[12:38:42.351]          // =>  FALSE
[12:38:42.351]        // skip if-block "!isSWJ"
[12:38:42.351]      </control>
[12:38:42.351]      <block atomic="false" info="">
[12:38:42.351]        ReadDP(0x0);
[12:38:42.355]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:38:42.355]      </block>
[12:38:42.355]      // end if-block "protType == 2"
[12:38:42.355]    </control>
[12:38:42.355]  </sequence>
[12:38:42.357]  
[12:38:42.358]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:38:42.358]  
[12:38:42.358]  <debugvars>
[12:38:42.360]    // Pre-defined
[12:38:42.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:38:42.360]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:38:42.360]    __dp=0x00000000
[12:38:42.360]    __ap=0x00000000
[12:38:42.360]    __traceout=0x00000000      (Trace Disabled)
[12:38:42.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:38:42.360]    __FlashAddr=0x00000000
[12:38:42.360]    __FlashLen=0x00000000
[12:38:42.360]    __FlashArg=0x00000000
[12:38:42.360]    __FlashOp=0x00000000
[12:38:42.360]    __Result=0x00000000
[12:38:42.360]  </debugvars>
[12:38:42.360]  
[12:38:42.360]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:38:42.360]    <block atomic="false" info="">
[12:38:42.360]      __var SW_DP_ABORT       = 0x0;
[12:38:42.360]        // -> [SW_DP_ABORT <= 0x00000000]
[12:38:42.360]      __var DP_CTRL_STAT      = 0x4;
[12:38:42.360]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:38:42.360]      __var DP_SELECT         = 0x8;
[12:38:42.360]        // -> [DP_SELECT <= 0x00000008]
[12:38:42.360]      __var powered_down      = 0;
[12:38:42.360]        // -> [powered_down <= 0x00000000]
[12:38:42.360]      WriteDP(DP_SELECT, 0x00000000);
[12:38:42.360]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:38:42.360]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:38:42.366]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:38:42.366]        // -> [powered_down <= 0x00000001]
[12:38:42.366]    </block>
[12:38:42.366]    <control if="powered_down" while="" timeout="0" info="">
[12:38:42.366]      // if-block "powered_down"
[12:38:42.366]        // =>  TRUE
[12:38:42.366]      <block atomic="false" info="">
[12:38:42.366]        Message(0, "Debug/System power-up request sent");
[12:38:42.368]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:38:42.370]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:38:42.370]      </block>
[12:38:42.370]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:38:42.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:38:42.375]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:38:42.375]        // while-condition  =>  FALSE
[12:38:42.375]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:38:42.375]      </control>
[12:38:42.375]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:38:42.375]        // if-block "(__protocol & 0xFFFF) == 1"
[12:38:42.376]          // =>  FALSE
[12:38:42.376]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:38:42.376]      </control>
[12:38:42.376]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:38:42.376]        // if-block "(__protocol & 0xFFFF) == 2"
[12:38:42.376]          // =>  TRUE
[12:38:42.376]        <block atomic="false" info="">
[12:38:42.376]          Message(0, "executing SWD power up");
[12:38:42.378]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:38:42.380]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:38:42.380]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:38:42.381]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:38:42.381]        </block>
[12:38:42.381]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:38:42.381]      </control>
[12:38:42.381]      // end if-block "powered_down"
[12:38:42.381]    </control>
[12:38:42.381]    <block atomic="false" info="">
[12:38:42.381]      __var DEBUG_PORT_VAL    = 0;
[12:38:42.381]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:38:42.381]      __var ACCESS_POINT_VAL  = 0;
[12:38:42.381]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:38:42.381]      __ap = 1; 
[12:38:42.381]        // -> [__ap <= 0x00000001]
[12:38:42.381]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:38:42.399]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:38:42.400]      __ap = 4;
[12:38:42.400]        // -> [__ap <= 0x00000004]
[12:38:42.400]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:38:42.402]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:38:42.402]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:38:42.402]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:38:42.406]    </block>
[12:38:42.406]    <block atomic="false" info="">
[12:38:42.406]      __var nReset = 0x80;
[12:38:42.406]        // -> [nReset <= 0x00000080]
[12:38:42.406]      __var canReadPins = 0;
[12:38:42.406]        // -> [canReadPins <= 0x00000000]
[12:38:42.406]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:38:42.409]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:38:42.409]        // -> [canReadPins <= 0x00000001]
[12:38:42.409]    </block>
[12:38:42.409]    <control if="" while="1" timeout="200" info="">
[12:38:42.409]      // while "1"  (timeout="200")
[12:38:42.409]      // while-condition  =>  TRUE
[12:38:42.409]      // while "1"  (timeout="200")
[12:38:42.409]      // while-condition  =>  TRUE
[12:38:42.409]      // while "1"  (timeout="200")
[12:38:42.409]      // while-condition  =>  TRUE
[12:38:42.409]      // while "1"  (timeout="200")
[12:38:42.409]      // while-condition  =>  TRUE
[12:38:42.409]      // while "1"  (timeout="200")
[12:38:42.409]      // while-condition  =>  TRUE
[12:38:42.409]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.410]      // while-condition  =>  TRUE
[12:38:42.410]      // while "1"  (timeout="200")
[12:38:42.414]      // while-condition  =>  TRUE
[12:38:42.414]      // while "1"  (timeout="200")
[12:38:42.414]      // while  =>  TIMEOUT
[12:38:42.414]      // end while "1"
[12:38:42.414]    </control>
[12:38:42.414]    <control if="canReadPins" while="" timeout="0" info="">
[12:38:42.414]      // if-block "canReadPins"
[12:38:42.414]        // =>  TRUE
[12:38:42.414]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:38:42.414]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:38:42.419]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:38:42.420]        // while-condition  =>  FALSE
[12:38:42.420]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:38:42.420]      </control>
[12:38:42.420]      // end if-block "canReadPins"
[12:38:42.420]    </control>
[12:38:42.420]    <control if="!canReadPins" while="" timeout="0" info="">
[12:38:42.420]      // if-block "!canReadPins"
[12:38:42.420]        // =>  FALSE
[12:38:42.420]      // skip if-block "!canReadPins"
[12:38:42.420]    </control>
[12:38:42.420]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:38:42.420]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:38:42.420]        // =>  TRUE
[12:38:42.420]      <block atomic="false" info="">
[12:38:42.420]        WriteAP(0x00, 0x190008);
[12:38:42.420]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:38:42.420]        WriteAP(0xF0, 0x01);
[12:38:42.431]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:38:42.431]      </block>
[12:38:42.431]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:38:42.431]    </control>
[12:38:42.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:38:42.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:38:42.431]        // =>  FALSE
[12:38:42.431]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:38:42.431]    </control>
[12:38:42.431]    <block atomic="false" info="">
[12:38:42.431]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:38:42.435]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:38:42.435]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:38:42.435]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:38:42.437]      __ap = 0; //lets make sure we reset the access point selection
[12:38:42.437]        // -> [__ap <= 0x00000000]
[12:38:42.437]    </block>
[12:38:42.437]  </sequence>
[12:38:42.437]  
[12:38:42.465]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:38:42.465]  
[12:38:42.465]  <debugvars>
[12:38:42.465]    // Pre-defined
[12:38:42.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:38:42.465]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:38:42.465]    __dp=0x00000000
[12:38:42.465]    __ap=0x00000000
[12:38:42.469]    __traceout=0x00000000      (Trace Disabled)
[12:38:42.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:38:42.469]    __FlashAddr=0x00000000
[12:38:42.469]    __FlashLen=0x00000000
[12:38:42.469]    __FlashArg=0x00000000
[12:38:42.469]    __FlashOp=0x00000000
[12:38:42.469]    __Result=0x00000000
[12:38:42.469]  </debugvars>
[12:38:42.469]  
[12:38:42.469]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:38:42.469]    <block atomic="false" info="">
[12:38:42.470]      __var deviceID = 0;
[12:38:42.470]        // -> [deviceID <= 0x00000000]
[12:38:42.470]      __var version = 0;
[12:38:42.470]        // -> [version <= 0x00000000]
[12:38:42.470]      __var partNum = 0;
[12:38:42.470]        // -> [partNum <= 0x00000000]
[12:38:42.470]      __var manuf = 0;
[12:38:42.470]        // -> [manuf <= 0x00000000]
[12:38:42.470]      __var isMSPM0G1X0X_G3X0X = 0;
[12:38:42.470]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:38:42.470]      __var isProduction = 0;
[12:38:42.470]        // -> [isProduction <= 0x00000000]
[12:38:42.470]      __var continueId = 0;
[12:38:42.472]        // -> [continueId <= 0x00000000]
[12:38:42.472]      deviceID =   Read32(0x41C40004);
[12:38:42.480]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:38:42.481]        // -> [deviceID <= 0x2BB8802F]
[12:38:42.481]      version = deviceID >> 28;
[12:38:42.481]        // -> [version <= 0x00000002]
[12:38:42.481]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:38:42.481]        // -> [partNum <= 0x0000BB88]
[12:38:42.481]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:38:42.481]        // -> [manuf <= 0x00000017]
[12:38:42.481]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:38:42.481]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:38:42.481]      isProduction = (version > 0);
[12:38:42.481]        // -> [isProduction <= 0x00000001]
[12:38:42.481]    </block>
[12:38:42.481]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:38:42.481]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:38:42.481]        // =>  FALSE
[12:38:42.481]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:38:42.482]    </control>
[12:38:42.482]    <control if="continueId == 4" while="" timeout="0" info="">
[12:38:42.482]      // if-block "continueId == 4"
[12:38:42.482]        // =>  FALSE
[12:38:42.482]      // skip if-block "continueId == 4"
[12:38:42.482]    </control>
[12:38:42.482]    <control if="!isProduction" while="" timeout="0" info="">
[12:38:42.482]      // if-block "!isProduction"
[12:38:42.482]        // =>  FALSE
[12:38:42.482]      // skip if-block "!isProduction"
[12:38:42.482]    </control>
[12:38:42.482]  </sequence>
[12:38:42.484]  
[12:38:47.948]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:38:47.948]  
[12:38:47.959]  <debugvars>
[12:38:47.959]    // Pre-defined
[12:38:47.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:38:47.959]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:38:47.959]    __dp=0x00000000
[12:38:47.959]    __ap=0x00000000
[12:38:47.959]    __traceout=0x00000000      (Trace Disabled)
[12:38:47.959]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:38:47.959]    __FlashAddr=0x00000000
[12:38:47.959]    __FlashLen=0x00000000
[12:38:47.959]    __FlashArg=0x00000000
[12:38:47.959]    __FlashOp=0x00000000
[12:38:47.959]    __Result=0x00000000
[12:38:47.959]  </debugvars>
[12:38:47.961]  
[12:38:47.961]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:38:47.961]    <block atomic="false" info="">
[12:38:47.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:38:47.961]        // -> [isSWJ <= 0x00000001]
[12:38:47.961]      __var hasDormant = __protocol & 0x00020000;
[12:38:47.962]        // -> [hasDormant <= 0x00000000]
[12:38:47.962]      __var protType   = __protocol & 0x0000FFFF;
[12:38:47.962]        // -> [protType <= 0x00000002]
[12:38:47.962]    </block>
[12:38:47.962]    <control if="protType == 1" while="" timeout="0" info="">
[12:38:47.962]      // if-block "protType == 1"
[12:38:47.962]        // =>  FALSE
[12:38:47.962]      // skip if-block "protType == 1"
[12:38:47.962]    </control>
[12:38:47.962]    <control if="protType == 2" while="" timeout="0" info="">
[12:38:47.962]      // if-block "protType == 2"
[12:38:47.962]        // =>  TRUE
[12:38:47.962]      <control if="isSWJ" while="" timeout="0" info="">
[12:38:47.962]        // if-block "isSWJ"
[12:38:47.962]          // =>  TRUE
[12:38:47.962]        <control if="hasDormant" while="" timeout="0" info="">
[12:38:47.964]          // if-block "hasDormant"
[12:38:47.964]            // =>  FALSE
[12:38:47.964]          // skip if-block "hasDormant"
[12:38:47.964]        </control>
[12:38:47.964]        <control if="!hasDormant" while="" timeout="0" info="">
[12:38:47.964]          // if-block "!hasDormant"
[12:38:47.964]            // =>  TRUE
[12:38:47.964]          <block atomic="false" info="">
[12:38:47.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:38:47.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:38:47.964]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:38:47.964]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:38:47.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:38:47.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:38:47.969]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:38:47.971]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:38:47.971]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:38:47.972]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:38:47.972]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:38:47.973]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:38:47.973]          </block>
[12:38:47.973]          // end if-block "!hasDormant"
[12:38:47.973]        </control>
[12:38:47.973]        // end if-block "isSWJ"
[12:38:47.973]      </control>
[12:38:47.975]      <control if="!isSWJ" while="" timeout="0" info="">
[12:38:47.975]        // if-block "!isSWJ"
[12:38:47.975]          // =>  FALSE
[12:38:47.975]        // skip if-block "!isSWJ"
[12:38:47.975]      </control>
[12:38:47.975]      <block atomic="false" info="">
[12:38:47.975]        ReadDP(0x0);
[12:38:47.976]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:38:47.976]      </block>
[12:38:47.976]      // end if-block "protType == 2"
[12:38:47.976]    </control>
[12:38:47.976]  </sequence>
[12:38:47.976]  
[12:38:47.979]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:38:47.979]  
[12:38:47.979]  <debugvars>
[12:38:47.979]    // Pre-defined
[12:38:47.979]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:38:47.981]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:38:47.981]    __dp=0x00000000
[12:38:47.981]    __ap=0x00000000
[12:38:47.981]    __traceout=0x00000000      (Trace Disabled)
[12:38:47.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:38:47.981]    __FlashAddr=0x00000000
[12:38:47.982]    __FlashLen=0x00000000
[12:38:47.982]    __FlashArg=0x00000000
[12:38:47.982]    __FlashOp=0x00000000
[12:38:47.982]    __Result=0x00000000
[12:38:47.982]  </debugvars>
[12:38:47.983]  
[12:38:47.983]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:38:47.983]    <block atomic="false" info="">
[12:38:47.983]      __var SW_DP_ABORT       = 0x0;
[12:38:47.983]        // -> [SW_DP_ABORT <= 0x00000000]
[12:38:47.983]      __var DP_CTRL_STAT      = 0x4;
[12:38:47.983]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:38:47.983]      __var DP_SELECT         = 0x8;
[12:38:47.983]        // -> [DP_SELECT <= 0x00000008]
[12:38:47.983]      __var powered_down      = 0;
[12:38:47.983]        // -> [powered_down <= 0x00000000]
[12:38:47.983]      WriteDP(DP_SELECT, 0x00000000);
[12:38:47.984]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:38:47.984]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:38:47.986]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:38:47.986]        // -> [powered_down <= 0x00000001]
[12:38:47.986]    </block>
[12:38:47.986]    <control if="powered_down" while="" timeout="0" info="">
[12:38:47.986]      // if-block "powered_down"
[12:38:47.986]        // =>  TRUE
[12:38:47.986]      <block atomic="false" info="">
[12:38:47.986]        Message(0, "Debug/System power-up request sent");
[12:38:47.990]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:38:47.991]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:38:47.991]      </block>
[12:38:47.991]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:38:47.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:38:47.993]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:38:47.993]        // while-condition  =>  FALSE
[12:38:47.993]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:38:47.993]      </control>
[12:38:47.993]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:38:47.993]        // if-block "(__protocol & 0xFFFF) == 1"
[12:38:47.993]          // =>  FALSE
[12:38:47.993]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:38:47.994]      </control>
[12:38:47.994]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:38:47.994]        // if-block "(__protocol & 0xFFFF) == 2"
[12:38:47.994]          // =>  TRUE
[12:38:47.994]        <block atomic="false" info="">
[12:38:47.994]          Message(0, "executing SWD power up");
[12:38:47.994]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:38:47.998]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:38:47.998]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:38:48.003]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:38:48.003]        </block>
[12:38:48.003]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:38:48.003]      </control>
[12:38:48.003]      // end if-block "powered_down"
[12:38:48.004]    </control>
[12:38:48.004]    <block atomic="false" info="">
[12:38:48.004]      __var DEBUG_PORT_VAL    = 0;
[12:38:48.004]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:38:48.004]      __var ACCESS_POINT_VAL  = 0;
[12:38:48.004]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:38:48.004]      __ap = 1; 
[12:38:48.004]        // -> [__ap <= 0x00000001]
[12:38:48.004]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:38:48.006]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:38:48.008]      __ap = 4;
[12:38:48.008]        // -> [__ap <= 0x00000004]
[12:38:48.008]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:38:48.011]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:38:48.011]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:38:48.011]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:38:48.011]    </block>
[12:38:48.011]    <block atomic="false" info="">
[12:38:48.011]      __var nReset = 0x80;
[12:38:48.011]        // -> [nReset <= 0x00000080]
[12:38:48.011]      __var canReadPins = 0;
[12:38:48.011]        // -> [canReadPins <= 0x00000000]
[12:38:48.011]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:38:48.011]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:38:48.011]        // -> [canReadPins <= 0x00000001]
[12:38:48.011]    </block>
[12:38:48.022]    <control if="" while="1" timeout="200" info="">
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.022]      // while "1"  (timeout="200")
[12:38:48.022]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.032]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.032]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.032]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.032]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.032]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.032]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.032]      // while-condition  =>  TRUE
[12:38:48.032]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.034]      // while-condition  =>  TRUE
[12:38:48.034]      // while "1"  (timeout="200")
[12:38:48.042]      // while-condition  =>  TRUE
[12:38:48.042]      // while "1"  (timeout="200")
[12:38:48.042]      // while  =>  TIMEOUT
[12:38:48.042]      // end while "1"
[12:38:48.042]    </control>
[12:38:48.042]    <control if="canReadPins" while="" timeout="0" info="">
[12:38:48.042]      // if-block "canReadPins"
[12:38:48.042]        // =>  TRUE
[12:38:48.042]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:38:48.042]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:38:48.044]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:38:48.044]        // while-condition  =>  FALSE
[12:38:48.044]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:38:48.044]      </control>
[12:38:48.044]      // end if-block "canReadPins"
[12:38:48.044]    </control>
[12:38:48.044]    <control if="!canReadPins" while="" timeout="0" info="">
[12:38:48.044]      // if-block "!canReadPins"
[12:38:48.044]        // =>  FALSE
[12:38:48.044]      // skip if-block "!canReadPins"
[12:38:48.044]    </control>
[12:38:48.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:38:48.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:38:48.044]        // =>  TRUE
[12:38:48.044]      <block atomic="false" info="">
[12:38:48.044]        WriteAP(0x00, 0x190008);
[12:38:48.044]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:38:48.044]        WriteAP(0xF0, 0x01);
[12:38:48.044]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:38:48.044]      </block>
[12:38:48.044]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:38:48.052]    </control>
[12:38:48.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:38:48.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:38:48.052]        // =>  FALSE
[12:38:48.052]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:38:48.052]    </control>
[12:38:48.052]    <block atomic="false" info="">
[12:38:48.052]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:38:48.052]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:38:48.052]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:38:48.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:38:48.052]      __ap = 0; //lets make sure we reset the access point selection
[12:38:48.052]        // -> [__ap <= 0x00000000]
[12:38:48.052]    </block>
[12:38:48.052]  </sequence>
[12:38:48.052]  
[12:38:48.072]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:38:48.072]  
[12:38:48.072]  <debugvars>
[12:38:48.072]    // Pre-defined
[12:38:48.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:38:48.072]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:38:48.072]    __dp=0x00000000
[12:38:48.072]    __ap=0x00000000
[12:38:48.072]    __traceout=0x00000000      (Trace Disabled)
[12:38:48.072]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:38:48.072]    __FlashAddr=0x00000000
[12:38:48.072]    __FlashLen=0x00000000
[12:38:48.072]    __FlashArg=0x00000000
[12:38:48.072]    __FlashOp=0x00000000
[12:38:48.072]    __Result=0x00000000
[12:38:48.072]  </debugvars>
[12:38:48.072]  
[12:38:48.072]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:38:48.072]    <block atomic="false" info="">
[12:38:48.072]      __var deviceID = 0;
[12:38:48.072]        // -> [deviceID <= 0x00000000]
[12:38:48.072]      __var version = 0;
[12:38:48.072]        // -> [version <= 0x00000000]
[12:38:48.072]      __var partNum = 0;
[12:38:48.072]        // -> [partNum <= 0x00000000]
[12:38:48.072]      __var manuf = 0;
[12:38:48.072]        // -> [manuf <= 0x00000000]
[12:38:48.072]      __var isMSPM0G1X0X_G3X0X = 0;
[12:38:48.072]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:38:48.072]      __var isProduction = 0;
[12:38:48.072]        // -> [isProduction <= 0x00000000]
[12:38:48.072]      __var continueId = 0;
[12:38:48.072]        // -> [continueId <= 0x00000000]
[12:38:48.082]      deviceID =   Read32(0x41C40004);
[12:38:48.082]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:38:48.082]        // -> [deviceID <= 0x2BB8802F]
[12:38:48.082]      version = deviceID >> 28;
[12:38:48.082]        // -> [version <= 0x00000002]
[12:38:48.082]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:38:48.082]        // -> [partNum <= 0x0000BB88]
[12:38:48.082]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:38:48.082]        // -> [manuf <= 0x00000017]
[12:38:48.082]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:38:48.082]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:38:48.082]      isProduction = (version > 0);
[12:38:48.082]        // -> [isProduction <= 0x00000001]
[12:38:48.082]    </block>
[12:38:48.092]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:38:48.092]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:38:48.092]        // =>  FALSE
[12:38:48.092]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:38:48.092]    </control>
[12:38:48.092]    <control if="continueId == 4" while="" timeout="0" info="">
[12:38:48.092]      // if-block "continueId == 4"
[12:38:48.092]        // =>  FALSE
[12:38:48.092]      // skip if-block "continueId == 4"
[12:38:48.092]    </control>
[12:38:48.092]    <control if="!isProduction" while="" timeout="0" info="">
[12:38:48.092]      // if-block "!isProduction"
[12:38:48.092]        // =>  FALSE
[12:38:48.092]      // skip if-block "!isProduction"
[12:38:48.092]    </control>
[12:38:48.092]  </sequence>
[12:38:48.092]  
[12:39:39.729]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:39:39.729]  
[12:39:39.740]  <debugvars>
[12:39:39.740]    // Pre-defined
[12:39:39.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:39.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:39:39.740]    __dp=0x00000000
[12:39:39.740]    __ap=0x00000000
[12:39:39.740]    __traceout=0x00000000      (Trace Disabled)
[12:39:39.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:39.740]    __FlashAddr=0x00000000
[12:39:39.740]    __FlashLen=0x00000000
[12:39:39.740]    __FlashArg=0x00000000
[12:39:39.740]    __FlashOp=0x00000000
[12:39:39.740]    __Result=0x00000000
[12:39:39.740]  </debugvars>
[12:39:39.740]  
[12:39:39.740]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:39:39.740]    <block atomic="false" info="">
[12:39:39.740]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:39:39.740]        // -> [isSWJ <= 0x00000001]
[12:39:39.740]      __var hasDormant = __protocol & 0x00020000;
[12:39:39.740]        // -> [hasDormant <= 0x00000000]
[12:39:39.740]      __var protType   = __protocol & 0x0000FFFF;
[12:39:39.740]        // -> [protType <= 0x00000002]
[12:39:39.740]    </block>
[12:39:39.740]    <control if="protType == 1" while="" timeout="0" info="">
[12:39:39.740]      // if-block "protType == 1"
[12:39:39.740]        // =>  FALSE
[12:39:39.740]      // skip if-block "protType == 1"
[12:39:39.740]    </control>
[12:39:39.740]    <control if="protType == 2" while="" timeout="0" info="">
[12:39:39.740]      // if-block "protType == 2"
[12:39:39.740]        // =>  TRUE
[12:39:39.740]      <control if="isSWJ" while="" timeout="0" info="">
[12:39:39.740]        // if-block "isSWJ"
[12:39:39.740]          // =>  TRUE
[12:39:39.740]        <control if="hasDormant" while="" timeout="0" info="">
[12:39:39.740]          // if-block "hasDormant"
[12:39:39.740]            // =>  FALSE
[12:39:39.740]          // skip if-block "hasDormant"
[12:39:39.740]        </control>
[12:39:39.740]        <control if="!hasDormant" while="" timeout="0" info="">
[12:39:39.740]          // if-block "!hasDormant"
[12:39:39.740]            // =>  TRUE
[12:39:39.740]          <block atomic="false" info="">
[12:39:39.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:39:39.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:39.740]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:39:39.740]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:39:39.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:39:39.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:39.749]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:39:39.750]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:39:39.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:39:39.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:39.750]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:39:39.750]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:39:39.750]          </block>
[12:39:39.750]          // end if-block "!hasDormant"
[12:39:39.750]        </control>
[12:39:39.750]        // end if-block "isSWJ"
[12:39:39.750]      </control>
[12:39:39.750]      <control if="!isSWJ" while="" timeout="0" info="">
[12:39:39.750]        // if-block "!isSWJ"
[12:39:39.750]          // =>  FALSE
[12:39:39.750]        // skip if-block "!isSWJ"
[12:39:39.750]      </control>
[12:39:39.750]      <block atomic="false" info="">
[12:39:39.750]        ReadDP(0x0);
[12:39:39.750]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:39:39.750]      </block>
[12:39:39.750]      // end if-block "protType == 2"
[12:39:39.750]    </control>
[12:39:39.750]  </sequence>
[12:39:39.750]  
[12:39:39.759]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:39:39.759]  
[12:39:39.759]  <debugvars>
[12:39:39.759]    // Pre-defined
[12:39:39.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:39.759]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:39:39.759]    __dp=0x00000000
[12:39:39.759]    __ap=0x00000000
[12:39:39.759]    __traceout=0x00000000      (Trace Disabled)
[12:39:39.760]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:39.760]    __FlashAddr=0x00000000
[12:39:39.760]    __FlashLen=0x00000000
[12:39:39.760]    __FlashArg=0x00000000
[12:39:39.760]    __FlashOp=0x00000000
[12:39:39.760]    __Result=0x00000000
[12:39:39.760]  </debugvars>
[12:39:39.760]  
[12:39:39.760]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:39:39.760]    <block atomic="false" info="">
[12:39:39.760]      __var SW_DP_ABORT       = 0x0;
[12:39:39.760]        // -> [SW_DP_ABORT <= 0x00000000]
[12:39:39.760]      __var DP_CTRL_STAT      = 0x4;
[12:39:39.760]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:39:39.760]      __var DP_SELECT         = 0x8;
[12:39:39.760]        // -> [DP_SELECT <= 0x00000008]
[12:39:39.760]      __var powered_down      = 0;
[12:39:39.760]        // -> [powered_down <= 0x00000000]
[12:39:39.760]      WriteDP(DP_SELECT, 0x00000000);
[12:39:39.760]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:39:39.760]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:39:39.760]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:39:39.760]        // -> [powered_down <= 0x00000001]
[12:39:39.760]    </block>
[12:39:39.760]    <control if="powered_down" while="" timeout="0" info="">
[12:39:39.760]      // if-block "powered_down"
[12:39:39.760]        // =>  TRUE
[12:39:39.760]      <block atomic="false" info="">
[12:39:39.760]        Message(0, "Debug/System power-up request sent");
[12:39:39.760]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:39:39.769]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:39:39.769]      </block>
[12:39:39.769]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:39:39.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:39:39.769]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:39:39.769]        // while-condition  =>  FALSE
[12:39:39.769]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:39:39.769]      </control>
[12:39:39.769]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:39:39.769]        // if-block "(__protocol & 0xFFFF) == 1"
[12:39:39.769]          // =>  FALSE
[12:39:39.769]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:39:39.769]      </control>
[12:39:39.769]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:39:39.769]        // if-block "(__protocol & 0xFFFF) == 2"
[12:39:39.769]          // =>  TRUE
[12:39:39.769]        <block atomic="false" info="">
[12:39:39.769]          Message(0, "executing SWD power up");
[12:39:39.769]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:39:39.769]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:39:39.769]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:39:39.779]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:39:39.779]        </block>
[12:39:39.779]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:39:39.779]      </control>
[12:39:39.780]      // end if-block "powered_down"
[12:39:39.780]    </control>
[12:39:39.780]    <block atomic="false" info="">
[12:39:39.780]      __var DEBUG_PORT_VAL    = 0;
[12:39:39.780]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:39:39.780]      __var ACCESS_POINT_VAL  = 0;
[12:39:39.780]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:39:39.780]      __ap = 1; 
[12:39:39.780]        // -> [__ap <= 0x00000001]
[12:39:39.780]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:39:39.783]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:39:39.784]      __ap = 4;
[12:39:39.784]        // -> [__ap <= 0x00000004]
[12:39:39.784]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:39:39.785]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:39:39.785]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:39:39.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:39:39.788]    </block>
[12:39:39.788]    <block atomic="false" info="">
[12:39:39.788]      __var nReset = 0x80;
[12:39:39.789]        // -> [nReset <= 0x00000080]
[12:39:39.789]      __var canReadPins = 0;
[12:39:39.789]        // -> [canReadPins <= 0x00000000]
[12:39:39.789]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:39:39.789]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:39:39.791]        // -> [canReadPins <= 0x00000001]
[12:39:39.791]    </block>
[12:39:39.791]    <control if="" while="1" timeout="200" info="">
[12:39:39.791]      // while "1"  (timeout="200")
[12:39:39.791]      // while-condition  =>  TRUE
[12:39:39.791]      // while "1"  (timeout="200")
[12:39:39.791]      // while-condition  =>  TRUE
[12:39:39.791]      // while "1"  (timeout="200")
[12:39:39.791]      // while-condition  =>  TRUE
[12:39:39.792]      // while "1"  (timeout="200")
[12:39:39.792]      // while-condition  =>  TRUE
[12:39:39.792]      // while "1"  (timeout="200")
[12:39:39.792]      // while-condition  =>  TRUE
[12:39:39.792]      // while "1"  (timeout="200")
[12:39:39.792]      // while-condition  =>  TRUE
[12:39:39.792]      // while "1"  (timeout="200")
[12:39:39.792]      // while-condition  =>  TRUE
[12:39:39.792]      // while "1"  (timeout="200")
[12:39:39.792]      // while-condition  =>  TRUE
[12:39:39.792]      // while "1"  (timeout="200")
[12:39:39.792]      // while-condition  =>  TRUE
[12:39:39.793]      // while "1"  (timeout="200")
[12:39:39.793]      // while-condition  =>  TRUE
[12:39:39.793]      // while "1"  (timeout="200")
[12:39:39.793]      // while-condition  =>  TRUE
[12:39:39.793]      // while "1"  (timeout="200")
[12:39:39.793]      // while-condition  =>  TRUE
[12:39:39.793]      // while "1"  (timeout="200")
[12:39:39.793]      // while-condition  =>  TRUE
[12:39:39.793]      // while "1"  (timeout="200")
[12:39:39.793]      // while-condition  =>  TRUE
[12:39:39.793]      // while "1"  (timeout="200")
[12:39:39.793]      // while-condition  =>  TRUE
[12:39:39.795]      // while "1"  (timeout="200")
[12:39:39.795]      // while-condition  =>  TRUE
[12:39:39.795]      // while "1"  (timeout="200")
[12:39:39.795]      // while-condition  =>  TRUE
[12:39:39.795]      // while "1"  (timeout="200")
[12:39:39.795]      // while-condition  =>  TRUE
[12:39:39.795]      // while "1"  (timeout="200")
[12:39:39.795]      // while-condition  =>  TRUE
[12:39:39.795]      // while "1"  (timeout="200")
[12:39:39.795]      // while-condition  =>  TRUE
[12:39:39.797]      // while "1"  (timeout="200")
[12:39:39.797]      // while-condition  =>  TRUE
[12:39:39.797]      // while "1"  (timeout="200")
[12:39:39.797]      // while-condition  =>  TRUE
[12:39:39.797]      // while "1"  (timeout="200")
[12:39:39.797]      // while-condition  =>  TRUE
[12:39:39.797]      // while "1"  (timeout="200")
[12:39:39.797]      // while-condition  =>  TRUE
[12:39:39.797]      // while "1"  (timeout="200")
[12:39:39.797]      // while-condition  =>  TRUE
[12:39:39.797]      // while "1"  (timeout="200")
[12:39:39.799]      // while-condition  =>  TRUE
[12:39:39.799]      // while "1"  (timeout="200")
[12:39:39.799]      // while-condition  =>  TRUE
[12:39:39.799]      // while "1"  (timeout="200")
[12:39:39.799]      // while-condition  =>  TRUE
[12:39:39.799]      // while "1"  (timeout="200")
[12:39:39.799]      // while-condition  =>  TRUE
[12:39:39.799]      // while "1"  (timeout="200")
[12:39:39.799]      // while-condition  =>  TRUE
[12:39:39.799]      // while "1"  (timeout="200")
[12:39:39.800]      // while-condition  =>  TRUE
[12:39:39.800]      // while "1"  (timeout="200")
[12:39:39.800]      // while-condition  =>  TRUE
[12:39:39.800]      // while "1"  (timeout="200")
[12:39:39.800]      // while-condition  =>  TRUE
[12:39:39.800]      // while "1"  (timeout="200")
[12:39:39.800]      // while-condition  =>  TRUE
[12:39:39.801]      // while "1"  (timeout="200")
[12:39:39.801]      // while-condition  =>  TRUE
[12:39:39.801]      // while "1"  (timeout="200")
[12:39:39.801]      // while-condition  =>  TRUE
[12:39:39.801]      // while "1"  (timeout="200")
[12:39:39.801]      // while-condition  =>  TRUE
[12:39:39.801]      // while "1"  (timeout="200")
[12:39:39.801]      // while-condition  =>  TRUE
[12:39:39.802]      // while "1"  (timeout="200")
[12:39:39.802]      // while-condition  =>  TRUE
[12:39:39.802]      // while "1"  (timeout="200")
[12:39:39.802]      // while-condition  =>  TRUE
[12:39:39.802]      // while "1"  (timeout="200")
[12:39:39.802]      // while-condition  =>  TRUE
[12:39:39.802]      // while "1"  (timeout="200")
[12:39:39.802]      // while-condition  =>  TRUE
[12:39:39.802]      // while "1"  (timeout="200")
[12:39:39.802]      // while-condition  =>  TRUE
[12:39:39.803]      // while "1"  (timeout="200")
[12:39:39.803]      // while-condition  =>  TRUE
[12:39:39.803]      // while "1"  (timeout="200")
[12:39:39.803]      // while-condition  =>  TRUE
[12:39:39.803]      // while "1"  (timeout="200")
[12:39:39.803]      // while-condition  =>  TRUE
[12:39:39.803]      // while "1"  (timeout="200")
[12:39:39.803]      // while-condition  =>  TRUE
[12:39:39.803]      // while "1"  (timeout="200")
[12:39:39.803]      // while-condition  =>  TRUE
[12:39:39.803]      // while "1"  (timeout="200")
[12:39:39.803]      // while-condition  =>  TRUE
[12:39:39.803]      // while "1"  (timeout="200")
[12:39:39.803]      // while-condition  =>  TRUE
[12:39:39.805]      // while "1"  (timeout="200")
[12:39:39.805]      // while  =>  TIMEOUT
[12:39:39.805]      // end while "1"
[12:39:39.805]    </control>
[12:39:39.805]    <control if="canReadPins" while="" timeout="0" info="">
[12:39:39.805]      // if-block "canReadPins"
[12:39:39.805]        // =>  TRUE
[12:39:39.805]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:39:39.805]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:39:39.807]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:39:39.807]        // while-condition  =>  FALSE
[12:39:39.807]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:39:39.807]      </control>
[12:39:39.807]      // end if-block "canReadPins"
[12:39:39.807]    </control>
[12:39:39.807]    <control if="!canReadPins" while="" timeout="0" info="">
[12:39:39.807]      // if-block "!canReadPins"
[12:39:39.807]        // =>  FALSE
[12:39:39.807]      // skip if-block "!canReadPins"
[12:39:39.807]    </control>
[12:39:39.807]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:39:39.807]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:39:39.807]        // =>  TRUE
[12:39:39.807]      <block atomic="false" info="">
[12:39:39.807]        WriteAP(0x00, 0x190008);
[12:39:39.810]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:39:39.811]        WriteAP(0xF0, 0x01);
[12:39:39.813]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:39:39.813]      </block>
[12:39:39.813]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:39:39.813]    </control>
[12:39:39.813]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:39:39.813]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:39:39.813]        // =>  FALSE
[12:39:39.813]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:39:39.813]    </control>
[12:39:39.813]    <block atomic="false" info="">
[12:39:39.813]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:39:39.818]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:39:39.818]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:39:39.818]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:39:39.820]      __ap = 0; //lets make sure we reset the access point selection
[12:39:39.820]        // -> [__ap <= 0x00000000]
[12:39:39.820]    </block>
[12:39:39.820]  </sequence>
[12:39:39.820]  
[12:39:39.842]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:39:39.842]  
[12:39:39.842]  <debugvars>
[12:39:39.842]    // Pre-defined
[12:39:39.842]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:39.842]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:39:39.842]    __dp=0x00000000
[12:39:39.842]    __ap=0x00000000
[12:39:39.842]    __traceout=0x00000000      (Trace Disabled)
[12:39:39.842]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:39.842]    __FlashAddr=0x00000000
[12:39:39.842]    __FlashLen=0x00000000
[12:39:39.842]    __FlashArg=0x00000000
[12:39:39.842]    __FlashOp=0x00000000
[12:39:39.842]    __Result=0x00000000
[12:39:39.842]  </debugvars>
[12:39:39.842]  
[12:39:39.842]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:39:39.842]    <block atomic="false" info="">
[12:39:39.842]      __var deviceID = 0;
[12:39:39.842]        // -> [deviceID <= 0x00000000]
[12:39:39.842]      __var version = 0;
[12:39:39.842]        // -> [version <= 0x00000000]
[12:39:39.842]      __var partNum = 0;
[12:39:39.842]        // -> [partNum <= 0x00000000]
[12:39:39.842]      __var manuf = 0;
[12:39:39.842]        // -> [manuf <= 0x00000000]
[12:39:39.842]      __var isMSPM0G1X0X_G3X0X = 0;
[12:39:39.842]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:39:39.842]      __var isProduction = 0;
[12:39:39.842]        // -> [isProduction <= 0x00000000]
[12:39:39.842]      __var continueId = 0;
[12:39:39.842]        // -> [continueId <= 0x00000000]
[12:39:39.842]      deviceID =   Read32(0x41C40004);
[12:39:39.852]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:39:39.852]        // -> [deviceID <= 0x2BB8802F]
[12:39:39.852]      version = deviceID >> 28;
[12:39:39.852]        // -> [version <= 0x00000002]
[12:39:39.852]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:39:39.852]        // -> [partNum <= 0x0000BB88]
[12:39:39.852]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:39:39.852]        // -> [manuf <= 0x00000017]
[12:39:39.852]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:39:39.852]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:39:39.852]      isProduction = (version > 0);
[12:39:39.852]        // -> [isProduction <= 0x00000001]
[12:39:39.852]    </block>
[12:39:39.852]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:39:39.852]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:39:39.852]        // =>  FALSE
[12:39:39.852]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:39:39.852]    </control>
[12:39:39.852]    <control if="continueId == 4" while="" timeout="0" info="">
[12:39:39.852]      // if-block "continueId == 4"
[12:39:39.852]        // =>  FALSE
[12:39:39.852]      // skip if-block "continueId == 4"
[12:39:39.852]    </control>
[12:39:39.852]    <control if="!isProduction" while="" timeout="0" info="">
[12:39:39.852]      // if-block "!isProduction"
[12:39:39.852]        // =>  FALSE
[12:39:39.852]      // skip if-block "!isProduction"
[12:39:39.852]    </control>
[12:39:39.852]  </sequence>
[12:39:39.852]  
[12:39:44.951]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:39:44.951]  
[12:39:44.951]  <debugvars>
[12:39:44.951]    // Pre-defined
[12:39:44.951]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:44.951]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:39:44.951]    __dp=0x00000000
[12:39:44.951]    __ap=0x00000000
[12:39:44.951]    __traceout=0x00000000      (Trace Disabled)
[12:39:44.951]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:44.951]    __FlashAddr=0x00000000
[12:39:44.951]    __FlashLen=0x00000000
[12:39:44.951]    __FlashArg=0x00000000
[12:39:44.951]    __FlashOp=0x00000000
[12:39:44.951]    __Result=0x00000000
[12:39:44.951]  </debugvars>
[12:39:44.951]  
[12:39:44.951]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:39:44.951]    <block atomic="false" info="">
[12:39:44.951]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:39:44.951]        // -> [isSWJ <= 0x00000001]
[12:39:44.951]      __var hasDormant = __protocol & 0x00020000;
[12:39:44.951]        // -> [hasDormant <= 0x00000000]
[12:39:44.951]      __var protType   = __protocol & 0x0000FFFF;
[12:39:44.951]        // -> [protType <= 0x00000002]
[12:39:44.951]    </block>
[12:39:44.951]    <control if="protType == 1" while="" timeout="0" info="">
[12:39:44.951]      // if-block "protType == 1"
[12:39:44.951]        // =>  FALSE
[12:39:44.951]      // skip if-block "protType == 1"
[12:39:44.951]    </control>
[12:39:44.951]    <control if="protType == 2" while="" timeout="0" info="">
[12:39:44.951]      // if-block "protType == 2"
[12:39:44.951]        // =>  TRUE
[12:39:44.951]      <control if="isSWJ" while="" timeout="0" info="">
[12:39:44.951]        // if-block "isSWJ"
[12:39:44.951]          // =>  TRUE
[12:39:44.951]        <control if="hasDormant" while="" timeout="0" info="">
[12:39:44.951]          // if-block "hasDormant"
[12:39:44.951]            // =>  FALSE
[12:39:44.951]          // skip if-block "hasDormant"
[12:39:44.951]        </control>
[12:39:44.951]        <control if="!hasDormant" while="" timeout="0" info="">
[12:39:44.951]          // if-block "!hasDormant"
[12:39:44.951]            // =>  TRUE
[12:39:44.951]          <block atomic="false" info="">
[12:39:44.951]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:39:44.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:44.951]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:39:44.951]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:39:44.951]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:39:44.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:44.962]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:39:44.962]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:39:44.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:39:44.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:44.962]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:39:44.962]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:39:44.962]          </block>
[12:39:44.962]          // end if-block "!hasDormant"
[12:39:44.962]        </control>
[12:39:44.962]        // end if-block "isSWJ"
[12:39:44.962]      </control>
[12:39:44.962]      <control if="!isSWJ" while="" timeout="0" info="">
[12:39:44.962]        // if-block "!isSWJ"
[12:39:44.962]          // =>  FALSE
[12:39:44.962]        // skip if-block "!isSWJ"
[12:39:44.962]      </control>
[12:39:44.962]      <block atomic="false" info="">
[12:39:44.962]        ReadDP(0x0);
[12:39:44.962]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:39:44.962]      </block>
[12:39:44.962]      // end if-block "protType == 2"
[12:39:44.962]    </control>
[12:39:44.962]  </sequence>
[12:39:44.962]  
[12:39:44.972]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:39:44.972]  
[12:39:44.972]  <debugvars>
[12:39:44.972]    // Pre-defined
[12:39:44.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:44.972]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:39:44.972]    __dp=0x00000000
[12:39:44.972]    __ap=0x00000000
[12:39:44.972]    __traceout=0x00000000      (Trace Disabled)
[12:39:44.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:44.972]    __FlashAddr=0x00000000
[12:39:44.972]    __FlashLen=0x00000000
[12:39:44.972]    __FlashArg=0x00000000
[12:39:44.972]    __FlashOp=0x00000000
[12:39:44.972]    __Result=0x00000000
[12:39:44.972]  </debugvars>
[12:39:44.972]  
[12:39:44.974]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:39:44.974]    <block atomic="false" info="">
[12:39:44.974]      __var SW_DP_ABORT       = 0x0;
[12:39:44.974]        // -> [SW_DP_ABORT <= 0x00000000]
[12:39:44.974]      __var DP_CTRL_STAT      = 0x4;
[12:39:44.974]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:39:44.974]      __var DP_SELECT         = 0x8;
[12:39:44.974]        // -> [DP_SELECT <= 0x00000008]
[12:39:44.974]      __var powered_down      = 0;
[12:39:44.974]        // -> [powered_down <= 0x00000000]
[12:39:44.975]      WriteDP(DP_SELECT, 0x00000000);
[12:39:44.977]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:39:44.977]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:39:44.977]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:39:44.977]        // -> [powered_down <= 0x00000001]
[12:39:44.977]    </block>
[12:39:44.982]    <control if="powered_down" while="" timeout="0" info="">
[12:39:44.982]      // if-block "powered_down"
[12:39:44.982]        // =>  TRUE
[12:39:44.982]      <block atomic="false" info="">
[12:39:44.982]        Message(0, "Debug/System power-up request sent");
[12:39:44.982]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:39:44.982]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:39:44.982]      </block>
[12:39:44.982]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:39:44.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:39:44.982]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:39:44.982]        // while-condition  =>  FALSE
[12:39:44.982]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:39:44.982]      </control>
[12:39:44.982]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:39:44.982]        // if-block "(__protocol & 0xFFFF) == 1"
[12:39:44.982]          // =>  FALSE
[12:39:44.982]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:39:44.982]      </control>
[12:39:44.982]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:39:44.982]        // if-block "(__protocol & 0xFFFF) == 2"
[12:39:44.982]          // =>  TRUE
[12:39:44.982]        <block atomic="false" info="">
[12:39:44.982]          Message(0, "executing SWD power up");
[12:39:44.982]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:39:44.992]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:39:44.992]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:39:44.992]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:39:44.992]        </block>
[12:39:44.992]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:39:44.992]      </control>
[12:39:44.992]      // end if-block "powered_down"
[12:39:44.992]    </control>
[12:39:44.992]    <block atomic="false" info="">
[12:39:44.992]      __var DEBUG_PORT_VAL    = 0;
[12:39:44.992]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:39:44.992]      __var ACCESS_POINT_VAL  = 0;
[12:39:44.992]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:39:44.992]      __ap = 1; 
[12:39:44.992]        // -> [__ap <= 0x00000001]
[12:39:44.992]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:39:44.992]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:39:44.992]      __ap = 4;
[12:39:44.992]        // -> [__ap <= 0x00000004]
[12:39:44.992]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:39:45.002]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:39:45.002]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:39:45.002]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:39:45.002]    </block>
[12:39:45.002]    <block atomic="false" info="">
[12:39:45.002]      __var nReset = 0x80;
[12:39:45.002]        // -> [nReset <= 0x00000080]
[12:39:45.002]      __var canReadPins = 0;
[12:39:45.002]        // -> [canReadPins <= 0x00000000]
[12:39:45.002]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:39:45.002]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:39:45.002]        // -> [canReadPins <= 0x00000001]
[12:39:45.002]    </block>
[12:39:45.002]    <control if="" while="1" timeout="200" info="">
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.002]      // while "1"  (timeout="200")
[12:39:45.002]      // while-condition  =>  TRUE
[12:39:45.012]      // while "1"  (timeout="200")
[12:39:45.012]      // while  =>  TIMEOUT
[12:39:45.012]      // end while "1"
[12:39:45.012]    </control>
[12:39:45.012]    <control if="canReadPins" while="" timeout="0" info="">
[12:39:45.012]      // if-block "canReadPins"
[12:39:45.012]        // =>  TRUE
[12:39:45.012]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:39:45.012]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:39:45.014]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:39:45.014]        // while-condition  =>  FALSE
[12:39:45.014]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:39:45.014]      </control>
[12:39:45.014]      // end if-block "canReadPins"
[12:39:45.014]    </control>
[12:39:45.014]    <control if="!canReadPins" while="" timeout="0" info="">
[12:39:45.014]      // if-block "!canReadPins"
[12:39:45.014]        // =>  FALSE
[12:39:45.014]      // skip if-block "!canReadPins"
[12:39:45.014]    </control>
[12:39:45.014]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:39:45.014]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:39:45.014]        // =>  TRUE
[12:39:45.014]      <block atomic="false" info="">
[12:39:45.014]        WriteAP(0x00, 0x190008);
[12:39:45.014]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:39:45.014]        WriteAP(0xF0, 0x01);
[12:39:45.014]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:39:45.014]      </block>
[12:39:45.014]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:39:45.014]    </control>
[12:39:45.014]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:39:45.014]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:39:45.014]        // =>  FALSE
[12:39:45.022]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:39:45.022]    </control>
[12:39:45.022]    <block atomic="false" info="">
[12:39:45.022]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:39:45.024]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:39:45.024]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:39:45.024]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:39:45.024]      __ap = 0; //lets make sure we reset the access point selection
[12:39:45.024]        // -> [__ap <= 0x00000000]
[12:39:45.024]    </block>
[12:39:45.024]  </sequence>
[12:39:45.024]  
[12:39:45.042]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:39:45.042]  
[12:39:45.042]  <debugvars>
[12:39:45.042]    // Pre-defined
[12:39:45.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:45.042]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:39:45.042]    __dp=0x00000000
[12:39:45.042]    __ap=0x00000000
[12:39:45.042]    __traceout=0x00000000      (Trace Disabled)
[12:39:45.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:45.042]    __FlashAddr=0x00000000
[12:39:45.042]    __FlashLen=0x00000000
[12:39:45.042]    __FlashArg=0x00000000
[12:39:45.042]    __FlashOp=0x00000000
[12:39:45.042]    __Result=0x00000000
[12:39:45.042]  </debugvars>
[12:39:45.042]  
[12:39:45.042]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:39:45.042]    <block atomic="false" info="">
[12:39:45.042]      __var deviceID = 0;
[12:39:45.042]        // -> [deviceID <= 0x00000000]
[12:39:45.042]      __var version = 0;
[12:39:45.042]        // -> [version <= 0x00000000]
[12:39:45.042]      __var partNum = 0;
[12:39:45.042]        // -> [partNum <= 0x00000000]
[12:39:45.042]      __var manuf = 0;
[12:39:45.042]        // -> [manuf <= 0x00000000]
[12:39:45.042]      __var isMSPM0G1X0X_G3X0X = 0;
[12:39:45.042]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:39:45.042]      __var isProduction = 0;
[12:39:45.042]        // -> [isProduction <= 0x00000000]
[12:39:45.042]      __var continueId = 0;
[12:39:45.042]        // -> [continueId <= 0x00000000]
[12:39:45.042]      deviceID =   Read32(0x41C40004);
[12:39:45.052]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:39:45.052]        // -> [deviceID <= 0x2BB8802F]
[12:39:45.052]      version = deviceID >> 28;
[12:39:45.052]        // -> [version <= 0x00000002]
[12:39:45.052]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:39:45.052]        // -> [partNum <= 0x0000BB88]
[12:39:45.052]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:39:45.052]        // -> [manuf <= 0x00000017]
[12:39:45.052]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:39:45.052]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:39:45.052]      isProduction = (version > 0);
[12:39:45.052]        // -> [isProduction <= 0x00000001]
[12:39:45.052]    </block>
[12:39:45.052]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:39:45.052]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:39:45.052]        // =>  FALSE
[12:39:45.052]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:39:45.052]    </control>
[12:39:45.052]    <control if="continueId == 4" while="" timeout="0" info="">
[12:39:45.052]      // if-block "continueId == 4"
[12:39:45.052]        // =>  FALSE
[12:39:45.052]      // skip if-block "continueId == 4"
[12:39:45.062]    </control>
[12:39:45.062]    <control if="!isProduction" while="" timeout="0" info="">
[12:39:45.062]      // if-block "!isProduction"
[12:39:45.062]        // =>  FALSE
[12:39:45.062]      // skip if-block "!isProduction"
[12:39:45.062]    </control>
[12:39:45.062]  </sequence>
[12:39:45.062]  
[12:41:17.608]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:41:17.608]  
[12:41:17.620]  <debugvars>
[12:41:17.620]    // Pre-defined
[12:41:17.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:41:17.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:41:17.620]    __dp=0x00000000
[12:41:17.620]    __ap=0x00000000
[12:41:17.620]    __traceout=0x00000000      (Trace Disabled)
[12:41:17.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:41:17.620]    __FlashAddr=0x00000000
[12:41:17.620]    __FlashLen=0x00000000
[12:41:17.620]    __FlashArg=0x00000000
[12:41:17.620]    __FlashOp=0x00000000
[12:41:17.622]    __Result=0x00000000
[12:41:17.622]  </debugvars>
[12:41:17.622]  
[12:41:17.622]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:41:17.622]    <block atomic="false" info="">
[12:41:17.622]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:41:17.622]        // -> [isSWJ <= 0x00000001]
[12:41:17.622]      __var hasDormant = __protocol & 0x00020000;
[12:41:17.622]        // -> [hasDormant <= 0x00000000]
[12:41:17.622]      __var protType   = __protocol & 0x0000FFFF;
[12:41:17.622]        // -> [protType <= 0x00000002]
[12:41:17.622]    </block>
[12:41:17.622]    <control if="protType == 1" while="" timeout="0" info="">
[12:41:17.622]      // if-block "protType == 1"
[12:41:17.622]        // =>  FALSE
[12:41:17.622]      // skip if-block "protType == 1"
[12:41:17.622]    </control>
[12:41:17.622]    <control if="protType == 2" while="" timeout="0" info="">
[12:41:17.622]      // if-block "protType == 2"
[12:41:17.622]        // =>  TRUE
[12:41:17.622]      <control if="isSWJ" while="" timeout="0" info="">
[12:41:17.622]        // if-block "isSWJ"
[12:41:17.622]          // =>  TRUE
[12:41:17.622]        <control if="hasDormant" while="" timeout="0" info="">
[12:41:17.622]          // if-block "hasDormant"
[12:41:17.622]            // =>  FALSE
[12:41:17.622]          // skip if-block "hasDormant"
[12:41:17.622]        </control>
[12:41:17.622]        <control if="!hasDormant" while="" timeout="0" info="">
[12:41:17.622]          // if-block "!hasDormant"
[12:41:17.622]            // =>  TRUE
[12:41:17.622]          <block atomic="false" info="">
[12:41:17.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:41:17.627]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:41:17.627]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:41:17.627]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:41:17.627]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:41:17.627]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:41:17.627]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:41:17.627]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:41:17.627]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:41:17.627]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:41:17.627]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:41:17.627]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:41:17.627]          </block>
[12:41:17.627]          // end if-block "!hasDormant"
[12:41:17.627]        </control>
[12:41:17.627]        // end if-block "isSWJ"
[12:41:17.627]      </control>
[12:41:17.627]      <control if="!isSWJ" while="" timeout="0" info="">
[12:41:17.627]        // if-block "!isSWJ"
[12:41:17.627]          // =>  FALSE
[12:41:17.627]        // skip if-block "!isSWJ"
[12:41:17.627]      </control>
[12:41:17.627]      <block atomic="false" info="">
[12:41:17.627]        ReadDP(0x0);
[12:41:17.637]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:41:17.637]      </block>
[12:41:17.637]      // end if-block "protType == 2"
[12:41:17.637]    </control>
[12:41:17.637]  </sequence>
[12:41:17.637]  
[12:41:17.637]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:41:17.637]  
[12:41:17.637]  <debugvars>
[12:41:17.637]    // Pre-defined
[12:41:17.637]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:41:17.637]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:41:17.637]    __dp=0x00000000
[12:41:17.637]    __ap=0x00000000
[12:41:17.637]    __traceout=0x00000000      (Trace Disabled)
[12:41:17.637]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:41:17.637]    __FlashAddr=0x00000000
[12:41:17.637]    __FlashLen=0x00000000
[12:41:17.637]    __FlashArg=0x00000000
[12:41:17.637]    __FlashOp=0x00000000
[12:41:17.637]    __Result=0x00000000
[12:41:17.637]  </debugvars>
[12:41:17.637]  
[12:41:17.637]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:41:17.637]    <block atomic="false" info="">
[12:41:17.637]      __var SW_DP_ABORT       = 0x0;
[12:41:17.637]        // -> [SW_DP_ABORT <= 0x00000000]
[12:41:17.637]      __var DP_CTRL_STAT      = 0x4;
[12:41:17.637]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:41:17.637]      __var DP_SELECT         = 0x8;
[12:41:17.637]        // -> [DP_SELECT <= 0x00000008]
[12:41:17.637]      __var powered_down      = 0;
[12:41:17.637]        // -> [powered_down <= 0x00000000]
[12:41:17.637]      WriteDP(DP_SELECT, 0x00000000);
[12:41:17.637]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:41:17.637]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:41:17.637]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:41:17.637]        // -> [powered_down <= 0x00000001]
[12:41:17.637]    </block>
[12:41:17.637]    <control if="powered_down" while="" timeout="0" info="">
[12:41:17.637]      // if-block "powered_down"
[12:41:17.637]        // =>  TRUE
[12:41:17.637]      <block atomic="false" info="">
[12:41:17.647]        Message(0, "Debug/System power-up request sent");
[12:41:17.647]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:41:17.651]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:41:17.651]      </block>
[12:41:17.651]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:41:17.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:41:17.651]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:41:17.651]        // while-condition  =>  FALSE
[12:41:17.651]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:41:17.651]      </control>
[12:41:17.651]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:41:17.651]        // if-block "(__protocol & 0xFFFF) == 1"
[12:41:17.651]          // =>  FALSE
[12:41:17.651]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:41:17.651]      </control>
[12:41:17.651]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:41:17.651]        // if-block "(__protocol & 0xFFFF) == 2"
[12:41:17.651]          // =>  TRUE
[12:41:17.651]        <block atomic="false" info="">
[12:41:17.651]          Message(0, "executing SWD power up");
[12:41:17.656]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:41:17.658]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:41:17.658]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:41:17.658]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:41:17.661]        </block>
[12:41:17.661]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:41:17.661]      </control>
[12:41:17.661]      // end if-block "powered_down"
[12:41:17.661]    </control>
[12:41:17.661]    <block atomic="false" info="">
[12:41:17.661]      __var DEBUG_PORT_VAL    = 0;
[12:41:17.661]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:41:17.661]      __var ACCESS_POINT_VAL  = 0;
[12:41:17.661]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:41:17.661]      __ap = 1; 
[12:41:17.661]        // -> [__ap <= 0x00000001]
[12:41:17.661]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:41:17.661]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:41:17.661]      __ap = 4;
[12:41:17.661]        // -> [__ap <= 0x00000004]
[12:41:17.661]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:41:17.668]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:41:17.668]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:41:17.668]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:41:17.668]    </block>
[12:41:17.668]    <block atomic="false" info="">
[12:41:17.668]      __var nReset = 0x80;
[12:41:17.668]        // -> [nReset <= 0x00000080]
[12:41:17.668]      __var canReadPins = 0;
[12:41:17.668]        // -> [canReadPins <= 0x00000000]
[12:41:17.668]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:41:17.668]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:41:17.668]        // -> [canReadPins <= 0x00000001]
[12:41:17.668]    </block>
[12:41:17.668]    <control if="" while="1" timeout="200" info="">
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.668]      // while-condition  =>  TRUE
[12:41:17.668]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.678]      // while-condition  =>  TRUE
[12:41:17.678]      // while "1"  (timeout="200")
[12:41:17.688]      // while-condition  =>  TRUE
[12:41:17.688]      // while "1"  (timeout="200")
[12:41:17.688]      // while  =>  TIMEOUT
[12:41:17.688]      // end while "1"
[12:41:17.688]    </control>
[12:41:17.688]    <control if="canReadPins" while="" timeout="0" info="">
[12:41:17.688]      // if-block "canReadPins"
[12:41:17.688]        // =>  TRUE
[12:41:17.688]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:41:17.688]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:41:17.690]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:41:17.690]        // while-condition  =>  FALSE
[12:41:17.690]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:41:17.690]      </control>
[12:41:17.690]      // end if-block "canReadPins"
[12:41:17.690]    </control>
[12:41:17.690]    <control if="!canReadPins" while="" timeout="0" info="">
[12:41:17.690]      // if-block "!canReadPins"
[12:41:17.690]        // =>  FALSE
[12:41:17.691]      // skip if-block "!canReadPins"
[12:41:17.691]    </control>
[12:41:17.691]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:41:17.691]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:41:17.691]        // =>  TRUE
[12:41:17.691]      <block atomic="false" info="">
[12:41:17.691]        WriteAP(0x00, 0x190008);
[12:41:17.692]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:41:17.692]        WriteAP(0xF0, 0x01);
[12:41:17.694]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:41:17.694]      </block>
[12:41:17.694]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:41:17.694]    </control>
[12:41:17.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:41:17.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:41:17.694]        // =>  FALSE
[12:41:17.694]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:41:17.694]    </control>
[12:41:17.694]    <block atomic="false" info="">
[12:41:17.694]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:41:17.699]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:41:17.699]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:41:17.699]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:41:17.702]      __ap = 0; //lets make sure we reset the access point selection
[12:41:17.702]        // -> [__ap <= 0x00000000]
[12:41:17.702]    </block>
[12:41:17.703]  </sequence>
[12:41:17.703]  
[12:41:17.720]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:41:17.720]  
[12:41:17.720]  <debugvars>
[12:41:17.720]    // Pre-defined
[12:41:17.720]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:41:17.720]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:41:17.720]    __dp=0x00000000
[12:41:17.720]    __ap=0x00000000
[12:41:17.720]    __traceout=0x00000000      (Trace Disabled)
[12:41:17.720]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:41:17.720]    __FlashAddr=0x00000000
[12:41:17.720]    __FlashLen=0x00000000
[12:41:17.720]    __FlashArg=0x00000000
[12:41:17.720]    __FlashOp=0x00000000
[12:41:17.720]    __Result=0x00000000
[12:41:17.720]  </debugvars>
[12:41:17.720]  
[12:41:17.720]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:41:17.720]    <block atomic="false" info="">
[12:41:17.720]      __var deviceID = 0;
[12:41:17.720]        // -> [deviceID <= 0x00000000]
[12:41:17.720]      __var version = 0;
[12:41:17.720]        // -> [version <= 0x00000000]
[12:41:17.720]      __var partNum = 0;
[12:41:17.720]        // -> [partNum <= 0x00000000]
[12:41:17.720]      __var manuf = 0;
[12:41:17.720]        // -> [manuf <= 0x00000000]
[12:41:17.720]      __var isMSPM0G1X0X_G3X0X = 0;
[12:41:17.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:41:17.720]      __var isProduction = 0;
[12:41:17.720]        // -> [isProduction <= 0x00000000]
[12:41:17.720]      __var continueId = 0;
[12:41:17.720]        // -> [continueId <= 0x00000000]
[12:41:17.720]      deviceID =   Read32(0x41C40004);
[12:41:17.728]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:41:17.728]        // -> [deviceID <= 0x2BB8802F]
[12:41:17.728]      version = deviceID >> 28;
[12:41:17.728]        // -> [version <= 0x00000002]
[12:41:17.728]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:41:17.728]        // -> [partNum <= 0x0000BB88]
[12:41:17.728]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:41:17.728]        // -> [manuf <= 0x00000017]
[12:41:17.728]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:41:17.728]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:41:17.728]      isProduction = (version > 0);
[12:41:17.728]        // -> [isProduction <= 0x00000001]
[12:41:17.728]    </block>
[12:41:17.728]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:41:17.728]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:41:17.728]        // =>  FALSE
[12:41:17.728]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:41:17.728]    </control>
[12:41:17.728]    <control if="continueId == 4" while="" timeout="0" info="">
[12:41:17.728]      // if-block "continueId == 4"
[12:41:17.728]        // =>  FALSE
[12:41:17.728]      // skip if-block "continueId == 4"
[12:41:17.728]    </control>
[12:41:17.728]    <control if="!isProduction" while="" timeout="0" info="">
[12:41:17.728]      // if-block "!isProduction"
[12:41:17.728]        // =>  FALSE
[12:41:17.728]      // skip if-block "!isProduction"
[12:41:17.728]    </control>
[12:41:17.728]  </sequence>
[12:41:17.728]  
[12:41:22.479]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:41:22.479]  
[12:41:22.479]  <debugvars>
[12:41:22.479]    // Pre-defined
[12:41:22.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:41:22.479]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:41:22.479]    __dp=0x00000000
[12:41:22.479]    __ap=0x00000000
[12:41:22.479]    __traceout=0x00000000      (Trace Disabled)
[12:41:22.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:41:22.479]    __FlashAddr=0x00000000
[12:41:22.479]    __FlashLen=0x00000000
[12:41:22.479]    __FlashArg=0x00000000
[12:41:22.479]    __FlashOp=0x00000000
[12:41:22.479]    __Result=0x00000000
[12:41:22.479]  </debugvars>
[12:41:22.479]  
[12:41:22.479]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:41:22.479]    <block atomic="false" info="">
[12:41:22.479]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:41:22.479]        // -> [isSWJ <= 0x00000001]
[12:41:22.479]      __var hasDormant = __protocol & 0x00020000;
[12:41:22.479]        // -> [hasDormant <= 0x00000000]
[12:41:22.479]      __var protType   = __protocol & 0x0000FFFF;
[12:41:22.479]        // -> [protType <= 0x00000002]
[12:41:22.479]    </block>
[12:41:22.479]    <control if="protType == 1" while="" timeout="0" info="">
[12:41:22.479]      // if-block "protType == 1"
[12:41:22.479]        // =>  FALSE
[12:41:22.479]      // skip if-block "protType == 1"
[12:41:22.479]    </control>
[12:41:22.479]    <control if="protType == 2" while="" timeout="0" info="">
[12:41:22.479]      // if-block "protType == 2"
[12:41:22.479]        // =>  TRUE
[12:41:22.479]      <control if="isSWJ" while="" timeout="0" info="">
[12:41:22.479]        // if-block "isSWJ"
[12:41:22.479]          // =>  TRUE
[12:41:22.479]        <control if="hasDormant" while="" timeout="0" info="">
[12:41:22.479]          // if-block "hasDormant"
[12:41:22.479]            // =>  FALSE
[12:41:22.479]          // skip if-block "hasDormant"
[12:41:22.479]        </control>
[12:41:22.479]        <control if="!hasDormant" while="" timeout="0" info="">
[12:41:22.479]          // if-block "!hasDormant"
[12:41:22.479]            // =>  TRUE
[12:41:22.479]          <block atomic="false" info="">
[12:41:22.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:41:22.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:41:22.479]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:41:22.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:41:22.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:41:22.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:41:22.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:41:22.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:41:22.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:41:22.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:41:22.489]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:41:22.489]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:41:22.489]          </block>
[12:41:22.489]          // end if-block "!hasDormant"
[12:41:22.489]        </control>
[12:41:22.489]        // end if-block "isSWJ"
[12:41:22.489]      </control>
[12:41:22.489]      <control if="!isSWJ" while="" timeout="0" info="">
[12:41:22.489]        // if-block "!isSWJ"
[12:41:22.489]          // =>  FALSE
[12:41:22.489]        // skip if-block "!isSWJ"
[12:41:22.489]      </control>
[12:41:22.489]      <block atomic="false" info="">
[12:41:22.489]        ReadDP(0x0);
[12:41:22.489]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:41:22.489]      </block>
[12:41:22.489]      // end if-block "protType == 2"
[12:41:22.489]    </control>
[12:41:22.489]  </sequence>
[12:41:22.489]  
[12:41:22.499]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:41:22.499]  
[12:41:22.499]  <debugvars>
[12:41:22.499]    // Pre-defined
[12:41:22.499]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:41:22.499]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:41:22.499]    __dp=0x00000000
[12:41:22.499]    __ap=0x00000000
[12:41:22.499]    __traceout=0x00000000      (Trace Disabled)
[12:41:22.499]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:41:22.499]    __FlashAddr=0x00000000
[12:41:22.499]    __FlashLen=0x00000000
[12:41:22.499]    __FlashArg=0x00000000
[12:41:22.499]    __FlashOp=0x00000000
[12:41:22.499]    __Result=0x00000000
[12:41:22.499]  </debugvars>
[12:41:22.499]  
[12:41:22.499]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:41:22.499]    <block atomic="false" info="">
[12:41:22.499]      __var SW_DP_ABORT       = 0x0;
[12:41:22.499]        // -> [SW_DP_ABORT <= 0x00000000]
[12:41:22.499]      __var DP_CTRL_STAT      = 0x4;
[12:41:22.499]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:41:22.499]      __var DP_SELECT         = 0x8;
[12:41:22.499]        // -> [DP_SELECT <= 0x00000008]
[12:41:22.499]      __var powered_down      = 0;
[12:41:22.499]        // -> [powered_down <= 0x00000000]
[12:41:22.499]      WriteDP(DP_SELECT, 0x00000000);
[12:41:22.499]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:41:22.499]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:41:22.499]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:41:22.499]        // -> [powered_down <= 0x00000001]
[12:41:22.499]    </block>
[12:41:22.499]    <control if="powered_down" while="" timeout="0" info="">
[12:41:22.499]      // if-block "powered_down"
[12:41:22.499]        // =>  TRUE
[12:41:22.499]      <block atomic="false" info="">
[12:41:22.499]        Message(0, "Debug/System power-up request sent");
[12:41:22.509]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:41:22.509]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:41:22.509]      </block>
[12:41:22.509]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:41:22.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:41:22.509]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:41:22.509]        // while-condition  =>  FALSE
[12:41:22.509]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:41:22.509]      </control>
[12:41:22.509]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:41:22.509]        // if-block "(__protocol & 0xFFFF) == 1"
[12:41:22.509]          // =>  FALSE
[12:41:22.509]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:41:22.509]      </control>
[12:41:22.509]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:41:22.509]        // if-block "(__protocol & 0xFFFF) == 2"
[12:41:22.509]          // =>  TRUE
[12:41:22.509]        <block atomic="false" info="">
[12:41:22.509]          Message(0, "executing SWD power up");
[12:41:22.509]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:41:22.509]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:41:22.509]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:41:22.509]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:41:22.509]        </block>
[12:41:22.509]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:41:22.509]      </control>
[12:41:22.519]      // end if-block "powered_down"
[12:41:22.519]    </control>
[12:41:22.519]    <block atomic="false" info="">
[12:41:22.519]      __var DEBUG_PORT_VAL    = 0;
[12:41:22.519]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:41:22.519]      __var ACCESS_POINT_VAL  = 0;
[12:41:22.519]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:41:22.520]      __ap = 1; 
[12:41:22.520]        // -> [__ap <= 0x00000001]
[12:41:22.520]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:41:22.523]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:41:22.523]      __ap = 4;
[12:41:22.523]        // -> [__ap <= 0x00000004]
[12:41:22.523]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:41:22.527]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:41:22.527]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:41:22.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:41:22.528]    </block>
[12:41:22.528]    <block atomic="false" info="">
[12:41:22.528]      __var nReset = 0x80;
[12:41:22.528]        // -> [nReset <= 0x00000080]
[12:41:22.528]      __var canReadPins = 0;
[12:41:22.528]        // -> [canReadPins <= 0x00000000]
[12:41:22.528]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:41:22.529]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:41:22.529]        // -> [canReadPins <= 0x00000001]
[12:41:22.529]    </block>
[12:41:22.529]    <control if="" while="1" timeout="200" info="">
[12:41:22.529]      // while "1"  (timeout="200")
[12:41:22.529]      // while-condition  =>  TRUE
[12:41:22.529]      // while "1"  (timeout="200")
[12:41:22.529]      // while-condition  =>  TRUE
[12:41:22.529]      // while "1"  (timeout="200")
[12:41:22.529]      // while-condition  =>  TRUE
[12:41:22.529]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.532]      // while-condition  =>  TRUE
[12:41:22.532]      // while "1"  (timeout="200")
[12:41:22.536]      // while-condition  =>  TRUE
[12:41:22.536]      // while "1"  (timeout="200")
[12:41:22.536]      // while-condition  =>  TRUE
[12:41:22.536]      // while "1"  (timeout="200")
[12:41:22.536]      // while-condition  =>  TRUE
[12:41:22.536]      // while "1"  (timeout="200")
[12:41:22.536]      // while-condition  =>  TRUE
[12:41:22.536]      // while "1"  (timeout="200")
[12:41:22.536]      // while-condition  =>  TRUE
[12:41:22.536]      // while "1"  (timeout="200")
[12:41:22.536]      // while-condition  =>  TRUE
[12:41:22.537]      // while "1"  (timeout="200")
[12:41:22.537]      // while-condition  =>  TRUE
[12:41:22.537]      // while "1"  (timeout="200")
[12:41:22.537]      // while-condition  =>  TRUE
[12:41:22.537]      // while "1"  (timeout="200")
[12:41:22.537]      // while-condition  =>  TRUE
[12:41:22.537]      // while "1"  (timeout="200")
[12:41:22.537]      // while-condition  =>  TRUE
[12:41:22.537]      // while "1"  (timeout="200")
[12:41:22.537]      // while-condition  =>  TRUE
[12:41:22.537]      // while "1"  (timeout="200")
[12:41:22.538]      // while-condition  =>  TRUE
[12:41:22.538]      // while "1"  (timeout="200")
[12:41:22.538]      // while  =>  TIMEOUT
[12:41:22.538]      // end while "1"
[12:41:22.538]    </control>
[12:41:22.538]    <control if="canReadPins" while="" timeout="0" info="">
[12:41:22.538]      // if-block "canReadPins"
[12:41:22.538]        // =>  TRUE
[12:41:22.538]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:41:22.538]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:41:22.541]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:41:22.541]        // while-condition  =>  FALSE
[12:41:22.541]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:41:22.541]      </control>
[12:41:22.541]      // end if-block "canReadPins"
[12:41:22.541]    </control>
[12:41:22.541]    <control if="!canReadPins" while="" timeout="0" info="">
[12:41:22.541]      // if-block "!canReadPins"
[12:41:22.541]        // =>  FALSE
[12:41:22.541]      // skip if-block "!canReadPins"
[12:41:22.541]    </control>
[12:41:22.541]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:41:22.544]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:41:22.544]        // =>  TRUE
[12:41:22.544]      <block atomic="false" info="">
[12:41:22.544]        WriteAP(0x00, 0x190008);
[12:41:22.545]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:41:22.545]        WriteAP(0xF0, 0x01);
[12:41:22.549]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:41:22.549]      </block>
[12:41:22.549]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:41:22.549]    </control>
[12:41:22.549]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:41:22.551]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:41:22.551]        // =>  FALSE
[12:41:22.551]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:41:22.551]    </control>
[12:41:22.551]    <block atomic="false" info="">
[12:41:22.551]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:41:22.552]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:41:22.552]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:41:22.554]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:41:22.555]      __ap = 0; //lets make sure we reset the access point selection
[12:41:22.555]        // -> [__ap <= 0x00000000]
[12:41:22.555]    </block>
[12:41:22.555]  </sequence>
[12:41:22.555]  
[12:41:22.571]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:41:22.571]  
[12:41:22.571]  <debugvars>
[12:41:22.571]    // Pre-defined
[12:41:22.571]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:41:22.571]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:41:22.571]    __dp=0x00000000
[12:41:22.571]    __ap=0x00000000
[12:41:22.571]    __traceout=0x00000000      (Trace Disabled)
[12:41:22.571]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:41:22.571]    __FlashAddr=0x00000000
[12:41:22.571]    __FlashLen=0x00000000
[12:41:22.571]    __FlashArg=0x00000000
[12:41:22.571]    __FlashOp=0x00000000
[12:41:22.571]    __Result=0x00000000
[12:41:22.571]  </debugvars>
[12:41:22.571]  
[12:41:22.571]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:41:22.571]    <block atomic="false" info="">
[12:41:22.571]      __var deviceID = 0;
[12:41:22.571]        // -> [deviceID <= 0x00000000]
[12:41:22.571]      __var version = 0;
[12:41:22.571]        // -> [version <= 0x00000000]
[12:41:22.571]      __var partNum = 0;
[12:41:22.571]        // -> [partNum <= 0x00000000]
[12:41:22.571]      __var manuf = 0;
[12:41:22.571]        // -> [manuf <= 0x00000000]
[12:41:22.571]      __var isMSPM0G1X0X_G3X0X = 0;
[12:41:22.571]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:41:22.571]      __var isProduction = 0;
[12:41:22.571]        // -> [isProduction <= 0x00000000]
[12:41:22.571]      __var continueId = 0;
[12:41:22.571]        // -> [continueId <= 0x00000000]
[12:41:22.571]      deviceID =   Read32(0x41C40004);
[12:41:22.580]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:41:22.580]        // -> [deviceID <= 0x2BB8802F]
[12:41:22.580]      version = deviceID >> 28;
[12:41:22.580]        // -> [version <= 0x00000002]
[12:41:22.580]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:41:22.580]        // -> [partNum <= 0x0000BB88]
[12:41:22.580]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:41:22.580]        // -> [manuf <= 0x00000017]
[12:41:22.580]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:41:22.580]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:41:22.580]      isProduction = (version > 0);
[12:41:22.580]        // -> [isProduction <= 0x00000001]
[12:41:22.580]    </block>
[12:41:22.580]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:41:22.580]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:41:22.580]        // =>  FALSE
[12:41:22.580]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:41:22.580]    </control>
[12:41:22.580]    <control if="continueId == 4" while="" timeout="0" info="">
[12:41:22.580]      // if-block "continueId == 4"
[12:41:22.580]        // =>  FALSE
[12:41:22.580]      // skip if-block "continueId == 4"
[12:41:22.580]    </control>
[12:41:22.580]    <control if="!isProduction" while="" timeout="0" info="">
[12:41:22.580]      // if-block "!isProduction"
[12:41:22.580]        // =>  FALSE
[12:41:22.580]      // skip if-block "!isProduction"
[12:41:22.580]    </control>
[12:41:22.580]  </sequence>
[12:41:22.580]  
[12:42:13.576]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:42:13.576]  
[12:42:13.576]  <debugvars>
[12:42:13.576]    // Pre-defined
[12:42:13.576]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:42:13.576]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:42:13.576]    __dp=0x00000000
[12:42:13.576]    __ap=0x00000000
[12:42:13.576]    __traceout=0x00000000      (Trace Disabled)
[12:42:13.576]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:42:13.576]    __FlashAddr=0x00000000
[12:42:13.576]    __FlashLen=0x00000000
[12:42:13.576]    __FlashArg=0x00000000
[12:42:13.576]    __FlashOp=0x00000000
[12:42:13.576]    __Result=0x00000000
[12:42:13.576]  </debugvars>
[12:42:13.576]  
[12:42:13.576]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:42:13.576]    <block atomic="false" info="">
[12:42:13.576]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:42:13.576]        // -> [isSWJ <= 0x00000001]
[12:42:13.576]      __var hasDormant = __protocol & 0x00020000;
[12:42:13.576]        // -> [hasDormant <= 0x00000000]
[12:42:13.576]      __var protType   = __protocol & 0x0000FFFF;
[12:42:13.580]        // -> [protType <= 0x00000002]
[12:42:13.580]    </block>
[12:42:13.580]    <control if="protType == 1" while="" timeout="0" info="">
[12:42:13.580]      // if-block "protType == 1"
[12:42:13.580]        // =>  FALSE
[12:42:13.580]      // skip if-block "protType == 1"
[12:42:13.580]    </control>
[12:42:13.580]    <control if="protType == 2" while="" timeout="0" info="">
[12:42:13.580]      // if-block "protType == 2"
[12:42:13.580]        // =>  TRUE
[12:42:13.580]      <control if="isSWJ" while="" timeout="0" info="">
[12:42:13.580]        // if-block "isSWJ"
[12:42:13.580]          // =>  TRUE
[12:42:13.580]        <control if="hasDormant" while="" timeout="0" info="">
[12:42:13.580]          // if-block "hasDormant"
[12:42:13.580]            // =>  FALSE
[12:42:13.580]          // skip if-block "hasDormant"
[12:42:13.580]        </control>
[12:42:13.580]        <control if="!hasDormant" while="" timeout="0" info="">
[12:42:13.580]          // if-block "!hasDormant"
[12:42:13.580]            // =>  TRUE
[12:42:13.580]          <block atomic="false" info="">
[12:42:13.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:42:13.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:42:13.583]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:42:13.585]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:42:13.585]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:42:13.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:42:13.586]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:42:13.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:42:13.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:42:13.590]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:42:13.590]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:42:13.590]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:42:13.590]          </block>
[12:42:13.590]          // end if-block "!hasDormant"
[12:42:13.590]        </control>
[12:42:13.590]        // end if-block "isSWJ"
[12:42:13.590]      </control>
[12:42:13.590]      <control if="!isSWJ" while="" timeout="0" info="">
[12:42:13.590]        // if-block "!isSWJ"
[12:42:13.590]          // =>  FALSE
[12:42:13.590]        // skip if-block "!isSWJ"
[12:42:13.590]      </control>
[12:42:13.590]      <block atomic="false" info="">
[12:42:13.590]        ReadDP(0x0);
[12:42:13.595]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:42:13.595]      </block>
[12:42:13.595]      // end if-block "protType == 2"
[12:42:13.595]    </control>
[12:42:13.595]  </sequence>
[12:42:13.595]  
[12:42:13.597]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:42:13.597]  
[12:42:13.597]  <debugvars>
[12:42:13.597]    // Pre-defined
[12:42:13.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:42:13.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:42:13.597]    __dp=0x00000000
[12:42:13.597]    __ap=0x00000000
[12:42:13.597]    __traceout=0x00000000      (Trace Disabled)
[12:42:13.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:42:13.597]    __FlashAddr=0x00000000
[12:42:13.597]    __FlashLen=0x00000000
[12:42:13.597]    __FlashArg=0x00000000
[12:42:13.597]    __FlashOp=0x00000000
[12:42:13.597]    __Result=0x00000000
[12:42:13.597]  </debugvars>
[12:42:13.597]  
[12:42:13.597]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:42:13.597]    <block atomic="false" info="">
[12:42:13.597]      __var SW_DP_ABORT       = 0x0;
[12:42:13.597]        // -> [SW_DP_ABORT <= 0x00000000]
[12:42:13.597]      __var DP_CTRL_STAT      = 0x4;
[12:42:13.597]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:42:13.597]      __var DP_SELECT         = 0x8;
[12:42:13.597]        // -> [DP_SELECT <= 0x00000008]
[12:42:13.597]      __var powered_down      = 0;
[12:42:13.597]        // -> [powered_down <= 0x00000000]
[12:42:13.601]      WriteDP(DP_SELECT, 0x00000000);
[12:42:13.601]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:42:13.601]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:42:13.601]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:42:13.601]        // -> [powered_down <= 0x00000001]
[12:42:13.601]    </block>
[12:42:13.601]    <control if="powered_down" while="" timeout="0" info="">
[12:42:13.601]      // if-block "powered_down"
[12:42:13.601]        // =>  TRUE
[12:42:13.601]      <block atomic="false" info="">
[12:42:13.601]        Message(0, "Debug/System power-up request sent");
[12:42:13.607]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:42:13.607]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:42:13.607]      </block>
[12:42:13.607]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:42:13.607]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:42:13.607]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:42:13.607]        // while-condition  =>  FALSE
[12:42:13.611]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:42:13.611]      </control>
[12:42:13.611]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:42:13.611]        // if-block "(__protocol & 0xFFFF) == 1"
[12:42:13.611]          // =>  FALSE
[12:42:13.611]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:42:13.611]      </control>
[12:42:13.611]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:42:13.611]        // if-block "(__protocol & 0xFFFF) == 2"
[12:42:13.611]          // =>  TRUE
[12:42:13.611]        <block atomic="false" info="">
[12:42:13.611]          Message(0, "executing SWD power up");
[12:42:13.611]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:42:13.611]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:42:13.611]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:42:13.615]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:42:13.615]        </block>
[12:42:13.615]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:42:13.615]      </control>
[12:42:13.615]      // end if-block "powered_down"
[12:42:13.615]    </control>
[12:42:13.615]    <block atomic="false" info="">
[12:42:13.618]      __var DEBUG_PORT_VAL    = 0;
[12:42:13.618]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:42:13.618]      __var ACCESS_POINT_VAL  = 0;
[12:42:13.618]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:42:13.618]      __ap = 1; 
[12:42:13.618]        // -> [__ap <= 0x00000001]
[12:42:13.618]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:42:13.620]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:42:13.620]      __ap = 4;
[12:42:13.620]        // -> [__ap <= 0x00000004]
[12:42:13.620]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:42:13.620]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:42:13.620]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:42:13.620]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:42:13.625]    </block>
[12:42:13.625]    <block atomic="false" info="">
[12:42:13.625]      __var nReset = 0x80;
[12:42:13.625]        // -> [nReset <= 0x00000080]
[12:42:13.625]      __var canReadPins = 0;
[12:42:13.625]        // -> [canReadPins <= 0x00000000]
[12:42:13.625]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:42:13.625]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:42:13.625]        // -> [canReadPins <= 0x00000001]
[12:42:13.625]    </block>
[12:42:13.625]    <control if="" while="1" timeout="200" info="">
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.630]      // while-condition  =>  TRUE
[12:42:13.630]      // while "1"  (timeout="200")
[12:42:13.632]      // while-condition  =>  TRUE
[12:42:13.632]      // while "1"  (timeout="200")
[12:42:13.632]      // while  =>  TIMEOUT
[12:42:13.632]      // end while "1"
[12:42:13.632]    </control>
[12:42:13.632]    <control if="canReadPins" while="" timeout="0" info="">
[12:42:13.632]      // if-block "canReadPins"
[12:42:13.632]        // =>  TRUE
[12:42:13.632]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:42:13.632]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:42:13.634]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:42:13.634]        // while-condition  =>  FALSE
[12:42:13.634]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:42:13.634]      </control>
[12:42:13.634]      // end if-block "canReadPins"
[12:42:13.634]    </control>
[12:42:13.634]    <control if="!canReadPins" while="" timeout="0" info="">
[12:42:13.634]      // if-block "!canReadPins"
[12:42:13.636]        // =>  FALSE
[12:42:13.636]      // skip if-block "!canReadPins"
[12:42:13.636]    </control>
[12:42:13.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:42:13.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:42:13.636]        // =>  TRUE
[12:42:13.636]      <block atomic="false" info="">
[12:42:13.636]        WriteAP(0x00, 0x190008);
[12:42:13.637]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:42:13.637]        WriteAP(0xF0, 0x01);
[12:42:13.640]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:42:13.640]      </block>
[12:42:13.640]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:42:13.640]    </control>
[12:42:13.640]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:42:13.640]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:42:13.640]        // =>  FALSE
[12:42:13.640]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:42:13.640]    </control>
[12:42:13.640]    <block atomic="false" info="">
[12:42:13.640]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:42:13.646]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:42:13.646]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:42:13.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:42:13.649]      __ap = 0; //lets make sure we reset the access point selection
[12:42:13.649]        // -> [__ap <= 0x00000000]
[12:42:13.649]    </block>
[12:42:13.649]  </sequence>
[12:42:13.649]  
[12:42:13.669]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:42:13.669]  
[12:42:13.669]  <debugvars>
[12:42:13.669]    // Pre-defined
[12:42:13.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:42:13.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:42:13.669]    __dp=0x00000000
[12:42:13.669]    __ap=0x00000000
[12:42:13.669]    __traceout=0x00000000      (Trace Disabled)
[12:42:13.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:42:13.669]    __FlashAddr=0x00000000
[12:42:13.669]    __FlashLen=0x00000000
[12:42:13.669]    __FlashArg=0x00000000
[12:42:13.669]    __FlashOp=0x00000000
[12:42:13.669]    __Result=0x00000000
[12:42:13.669]  </debugvars>
[12:42:13.669]  
[12:42:13.669]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:42:13.669]    <block atomic="false" info="">
[12:42:13.669]      __var deviceID = 0;
[12:42:13.669]        // -> [deviceID <= 0x00000000]
[12:42:13.669]      __var version = 0;
[12:42:13.669]        // -> [version <= 0x00000000]
[12:42:13.669]      __var partNum = 0;
[12:42:13.669]        // -> [partNum <= 0x00000000]
[12:42:13.669]      __var manuf = 0;
[12:42:13.669]        // -> [manuf <= 0x00000000]
[12:42:13.669]      __var isMSPM0G1X0X_G3X0X = 0;
[12:42:13.669]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:42:13.669]      __var isProduction = 0;
[12:42:13.669]        // -> [isProduction <= 0x00000000]
[12:42:13.669]      __var continueId = 0;
[12:42:13.669]        // -> [continueId <= 0x00000000]
[12:42:13.669]      deviceID =   Read32(0x41C40004);
[12:42:13.677]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:42:13.677]        // -> [deviceID <= 0x2BB8802F]
[12:42:13.677]      version = deviceID >> 28;
[12:42:13.677]        // -> [version <= 0x00000002]
[12:42:13.677]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:42:13.677]        // -> [partNum <= 0x0000BB88]
[12:42:13.677]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:42:13.677]        // -> [manuf <= 0x00000017]
[12:42:13.677]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:42:13.677]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:42:13.677]      isProduction = (version > 0);
[12:42:13.677]        // -> [isProduction <= 0x00000001]
[12:42:13.677]    </block>
[12:42:13.677]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:42:13.677]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:42:13.677]        // =>  FALSE
[12:42:13.677]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:42:13.677]    </control>
[12:42:13.677]    <control if="continueId == 4" while="" timeout="0" info="">
[12:42:13.677]      // if-block "continueId == 4"
[12:42:13.677]        // =>  FALSE
[12:42:13.677]      // skip if-block "continueId == 4"
[12:42:13.677]    </control>
[12:42:13.677]    <control if="!isProduction" while="" timeout="0" info="">
[12:42:13.677]      // if-block "!isProduction"
[12:42:13.677]        // =>  FALSE
[12:42:13.677]      // skip if-block "!isProduction"
[12:42:13.677]    </control>
[12:42:13.677]  </sequence>
[12:42:13.677]  
[12:42:18.786]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:42:18.786]  
[12:42:18.797]  <debugvars>
[12:42:18.797]    // Pre-defined
[12:42:18.797]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:42:18.797]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:42:18.797]    __dp=0x00000000
[12:42:18.797]    __ap=0x00000000
[12:42:18.797]    __traceout=0x00000000      (Trace Disabled)
[12:42:18.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:42:18.797]    __FlashAddr=0x00000000
[12:42:18.797]    __FlashLen=0x00000000
[12:42:18.797]    __FlashArg=0x00000000
[12:42:18.797]    __FlashOp=0x00000000
[12:42:18.797]    __Result=0x00000000
[12:42:18.797]  </debugvars>
[12:42:18.797]  
[12:42:18.797]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:42:18.797]    <block atomic="false" info="">
[12:42:18.797]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:42:18.797]        // -> [isSWJ <= 0x00000001]
[12:42:18.797]      __var hasDormant = __protocol & 0x00020000;
[12:42:18.797]        // -> [hasDormant <= 0x00000000]
[12:42:18.797]      __var protType   = __protocol & 0x0000FFFF;
[12:42:18.797]        // -> [protType <= 0x00000002]
[12:42:18.797]    </block>
[12:42:18.797]    <control if="protType == 1" while="" timeout="0" info="">
[12:42:18.797]      // if-block "protType == 1"
[12:42:18.797]        // =>  FALSE
[12:42:18.797]      // skip if-block "protType == 1"
[12:42:18.797]    </control>
[12:42:18.797]    <control if="protType == 2" while="" timeout="0" info="">
[12:42:18.797]      // if-block "protType == 2"
[12:42:18.797]        // =>  TRUE
[12:42:18.797]      <control if="isSWJ" while="" timeout="0" info="">
[12:42:18.797]        // if-block "isSWJ"
[12:42:18.797]          // =>  TRUE
[12:42:18.797]        <control if="hasDormant" while="" timeout="0" info="">
[12:42:18.797]          // if-block "hasDormant"
[12:42:18.797]            // =>  FALSE
[12:42:18.797]          // skip if-block "hasDormant"
[12:42:18.797]        </control>
[12:42:18.797]        <control if="!hasDormant" while="" timeout="0" info="">
[12:42:18.797]          // if-block "!hasDormant"
[12:42:18.797]            // =>  TRUE
[12:42:18.797]          <block atomic="false" info="">
[12:42:18.797]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:42:18.797]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:42:18.797]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:42:18.797]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:42:18.797]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:42:18.797]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:42:18.797]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:42:18.806]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:42:18.806]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:42:18.806]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:42:18.806]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:42:18.806]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:42:18.806]          </block>
[12:42:18.806]          // end if-block "!hasDormant"
[12:42:18.806]        </control>
[12:42:18.806]        // end if-block "isSWJ"
[12:42:18.806]      </control>
[12:42:18.806]      <control if="!isSWJ" while="" timeout="0" info="">
[12:42:18.806]        // if-block "!isSWJ"
[12:42:18.806]          // =>  FALSE
[12:42:18.806]        // skip if-block "!isSWJ"
[12:42:18.806]      </control>
[12:42:18.806]      <block atomic="false" info="">
[12:42:18.806]        ReadDP(0x0);
[12:42:18.806]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:42:18.806]      </block>
[12:42:18.806]      // end if-block "protType == 2"
[12:42:18.806]    </control>
[12:42:18.806]  </sequence>
[12:42:18.806]  
[12:42:18.816]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:42:18.816]  
[12:42:18.816]  <debugvars>
[12:42:18.816]    // Pre-defined
[12:42:18.816]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:42:18.816]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:42:18.816]    __dp=0x00000000
[12:42:18.816]    __ap=0x00000000
[12:42:18.816]    __traceout=0x00000000      (Trace Disabled)
[12:42:18.816]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:42:18.816]    __FlashAddr=0x00000000
[12:42:18.816]    __FlashLen=0x00000000
[12:42:18.816]    __FlashArg=0x00000000
[12:42:18.816]    __FlashOp=0x00000000
[12:42:18.816]    __Result=0x00000000
[12:42:18.816]  </debugvars>
[12:42:18.816]  
[12:42:18.816]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:42:18.816]    <block atomic="false" info="">
[12:42:18.816]      __var SW_DP_ABORT       = 0x0;
[12:42:18.816]        // -> [SW_DP_ABORT <= 0x00000000]
[12:42:18.816]      __var DP_CTRL_STAT      = 0x4;
[12:42:18.816]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:42:18.816]      __var DP_SELECT         = 0x8;
[12:42:18.816]        // -> [DP_SELECT <= 0x00000008]
[12:42:18.816]      __var powered_down      = 0;
[12:42:18.816]        // -> [powered_down <= 0x00000000]
[12:42:18.816]      WriteDP(DP_SELECT, 0x00000000);
[12:42:18.816]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:42:18.816]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:42:18.816]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:42:18.816]        // -> [powered_down <= 0x00000001]
[12:42:18.816]    </block>
[12:42:18.816]    <control if="powered_down" while="" timeout="0" info="">
[12:42:18.816]      // if-block "powered_down"
[12:42:18.816]        // =>  TRUE
[12:42:18.816]      <block atomic="false" info="">
[12:42:18.816]        Message(0, "Debug/System power-up request sent");
[12:42:18.826]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:42:18.826]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:42:18.826]      </block>
[12:42:18.826]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:42:18.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:42:18.826]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:42:18.826]        // while-condition  =>  FALSE
[12:42:18.826]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:42:18.826]      </control>
[12:42:18.826]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:42:18.826]        // if-block "(__protocol & 0xFFFF) == 1"
[12:42:18.826]          // =>  FALSE
[12:42:18.826]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:42:18.826]      </control>
[12:42:18.826]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:42:18.826]        // if-block "(__protocol & 0xFFFF) == 2"
[12:42:18.826]          // =>  TRUE
[12:42:18.826]        <block atomic="false" info="">
[12:42:18.826]          Message(0, "executing SWD power up");
[12:42:18.826]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:42:18.826]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:42:18.826]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:42:18.836]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:42:18.836]        </block>
[12:42:18.836]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:42:18.836]      </control>
[12:42:18.836]      // end if-block "powered_down"
[12:42:18.836]    </control>
[12:42:18.836]    <block atomic="false" info="">
[12:42:18.836]      __var DEBUG_PORT_VAL    = 0;
[12:42:18.836]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:42:18.836]      __var ACCESS_POINT_VAL  = 0;
[12:42:18.836]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:42:18.836]      __ap = 1; 
[12:42:18.836]        // -> [__ap <= 0x00000001]
[12:42:18.836]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:42:18.838]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:42:18.838]      __ap = 4;
[12:42:18.838]        // -> [__ap <= 0x00000004]
[12:42:18.838]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:42:18.838]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:42:18.838]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:42:18.838]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:42:18.838]    </block>
[12:42:18.838]    <block atomic="false" info="">
[12:42:18.838]      __var nReset = 0x80;
[12:42:18.838]        // -> [nReset <= 0x00000080]
[12:42:18.838]      __var canReadPins = 0;
[12:42:18.847]        // -> [canReadPins <= 0x00000000]
[12:42:18.847]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:42:18.847]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:42:18.847]        // -> [canReadPins <= 0x00000001]
[12:42:18.847]    </block>
[12:42:18.847]    <control if="" while="1" timeout="200" info="">
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.847]      // while "1"  (timeout="200")
[12:42:18.847]      // while-condition  =>  TRUE
[12:42:18.857]      // while "1"  (timeout="200")
[12:42:18.857]      // while  =>  TIMEOUT
[12:42:18.857]      // end while "1"
[12:42:18.857]    </control>
[12:42:18.857]    <control if="canReadPins" while="" timeout="0" info="">
[12:42:18.857]      // if-block "canReadPins"
[12:42:18.857]        // =>  TRUE
[12:42:18.857]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:42:18.857]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:42:18.858]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:42:18.858]        // while-condition  =>  FALSE
[12:42:18.858]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:42:18.858]      </control>
[12:42:18.858]      // end if-block "canReadPins"
[12:42:18.858]    </control>
[12:42:18.858]    <control if="!canReadPins" while="" timeout="0" info="">
[12:42:18.858]      // if-block "!canReadPins"
[12:42:18.858]        // =>  FALSE
[12:42:18.858]      // skip if-block "!canReadPins"
[12:42:18.858]    </control>
[12:42:18.858]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:42:18.858]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:42:18.858]        // =>  TRUE
[12:42:18.858]      <block atomic="false" info="">
[12:42:18.858]        WriteAP(0x00, 0x190008);
[12:42:18.858]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:42:18.858]        WriteAP(0xF0, 0x01);
[12:42:18.867]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:42:18.867]      </block>
[12:42:18.867]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:42:18.867]    </control>
[12:42:18.867]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:42:18.867]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:42:18.867]        // =>  FALSE
[12:42:18.867]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:42:18.867]    </control>
[12:42:18.867]    <block atomic="false" info="">
[12:42:18.867]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:42:18.867]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:42:18.867]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:42:18.867]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:42:18.867]      __ap = 0; //lets make sure we reset the access point selection
[12:42:18.867]        // -> [__ap <= 0x00000000]
[12:42:18.867]    </block>
[12:42:18.867]  </sequence>
[12:42:18.867]  
[12:42:18.887]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:42:18.887]  
[12:42:18.887]  <debugvars>
[12:42:18.887]    // Pre-defined
[12:42:18.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:42:18.887]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:42:18.887]    __dp=0x00000000
[12:42:18.887]    __ap=0x00000000
[12:42:18.887]    __traceout=0x00000000      (Trace Disabled)
[12:42:18.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:42:18.887]    __FlashAddr=0x00000000
[12:42:18.887]    __FlashLen=0x00000000
[12:42:18.887]    __FlashArg=0x00000000
[12:42:18.887]    __FlashOp=0x00000000
[12:42:18.887]    __Result=0x00000000
[12:42:18.887]  </debugvars>
[12:42:18.887]  
[12:42:18.887]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:42:18.887]    <block atomic="false" info="">
[12:42:18.887]      __var deviceID = 0;
[12:42:18.887]        // -> [deviceID <= 0x00000000]
[12:42:18.887]      __var version = 0;
[12:42:18.887]        // -> [version <= 0x00000000]
[12:42:18.887]      __var partNum = 0;
[12:42:18.887]        // -> [partNum <= 0x00000000]
[12:42:18.887]      __var manuf = 0;
[12:42:18.887]        // -> [manuf <= 0x00000000]
[12:42:18.887]      __var isMSPM0G1X0X_G3X0X = 0;
[12:42:18.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:42:18.887]      __var isProduction = 0;
[12:42:18.887]        // -> [isProduction <= 0x00000000]
[12:42:18.887]      __var continueId = 0;
[12:42:18.887]        // -> [continueId <= 0x00000000]
[12:42:18.887]      deviceID =   Read32(0x41C40004);
[12:42:18.897]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:42:18.897]        // -> [deviceID <= 0x2BB8802F]
[12:42:18.897]      version = deviceID >> 28;
[12:42:18.897]        // -> [version <= 0x00000002]
[12:42:18.897]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:42:18.897]        // -> [partNum <= 0x0000BB88]
[12:42:18.897]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:42:18.897]        // -> [manuf <= 0x00000017]
[12:42:18.897]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:42:18.897]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:42:18.897]      isProduction = (version > 0);
[12:42:18.897]        // -> [isProduction <= 0x00000001]
[12:42:18.897]    </block>
[12:42:18.897]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:42:18.897]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:42:18.897]        // =>  FALSE
[12:42:18.897]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:42:18.897]    </control>
[12:42:18.897]    <control if="continueId == 4" while="" timeout="0" info="">
[12:42:18.897]      // if-block "continueId == 4"
[12:42:18.897]        // =>  FALSE
[12:42:18.897]      // skip if-block "continueId == 4"
[12:42:18.897]    </control>
[12:42:18.897]    <control if="!isProduction" while="" timeout="0" info="">
[12:42:18.897]      // if-block "!isProduction"
[12:42:18.897]        // =>  FALSE
[12:42:18.897]      // skip if-block "!isProduction"
[12:42:18.897]    </control>
[12:42:18.897]  </sequence>
[12:42:18.897]  
[12:44:22.447]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:44:22.447]  
[12:44:22.456]  <debugvars>
[12:44:22.456]    // Pre-defined
[12:44:22.456]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:44:22.456]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:44:22.456]    __dp=0x00000000
[12:44:22.456]    __ap=0x00000000
[12:44:22.456]    __traceout=0x00000000      (Trace Disabled)
[12:44:22.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:44:22.456]    __FlashAddr=0x00000000
[12:44:22.456]    __FlashLen=0x00000000
[12:44:22.456]    __FlashArg=0x00000000
[12:44:22.457]    __FlashOp=0x00000000
[12:44:22.457]    __Result=0x00000000
[12:44:22.457]  </debugvars>
[12:44:22.457]  
[12:44:22.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:44:22.457]    <block atomic="false" info="">
[12:44:22.457]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:44:22.457]        // -> [isSWJ <= 0x00000001]
[12:44:22.457]      __var hasDormant = __protocol & 0x00020000;
[12:44:22.457]        // -> [hasDormant <= 0x00000000]
[12:44:22.457]      __var protType   = __protocol & 0x0000FFFF;
[12:44:22.457]        // -> [protType <= 0x00000002]
[12:44:22.457]    </block>
[12:44:22.457]    <control if="protType == 1" while="" timeout="0" info="">
[12:44:22.457]      // if-block "protType == 1"
[12:44:22.457]        // =>  FALSE
[12:44:22.457]      // skip if-block "protType == 1"
[12:44:22.457]    </control>
[12:44:22.457]    <control if="protType == 2" while="" timeout="0" info="">
[12:44:22.457]      // if-block "protType == 2"
[12:44:22.457]        // =>  TRUE
[12:44:22.457]      <control if="isSWJ" while="" timeout="0" info="">
[12:44:22.457]        // if-block "isSWJ"
[12:44:22.457]          // =>  TRUE
[12:44:22.457]        <control if="hasDormant" while="" timeout="0" info="">
[12:44:22.457]          // if-block "hasDormant"
[12:44:22.457]            // =>  FALSE
[12:44:22.457]          // skip if-block "hasDormant"
[12:44:22.457]        </control>
[12:44:22.457]        <control if="!hasDormant" while="" timeout="0" info="">
[12:44:22.457]          // if-block "!hasDormant"
[12:44:22.457]            // =>  TRUE
[12:44:22.457]          <block atomic="false" info="">
[12:44:22.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:44:22.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:44:22.457]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:44:22.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:44:22.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:44:22.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:44:22.467]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:44:22.468]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:44:22.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:44:22.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:44:22.469]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:44:22.469]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:44:22.469]          </block>
[12:44:22.469]          // end if-block "!hasDormant"
[12:44:22.469]        </control>
[12:44:22.469]        // end if-block "isSWJ"
[12:44:22.469]      </control>
[12:44:22.477]      <control if="!isSWJ" while="" timeout="0" info="">
[12:44:22.477]        // if-block "!isSWJ"
[12:44:22.477]          // =>  FALSE
[12:44:22.477]        // skip if-block "!isSWJ"
[12:44:22.477]      </control>
[12:44:22.477]      <block atomic="false" info="">
[12:44:22.477]        ReadDP(0x0);
[12:44:22.479]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:44:22.479]      </block>
[12:44:22.479]      // end if-block "protType == 2"
[12:44:22.479]    </control>
[12:44:22.479]  </sequence>
[12:44:22.479]  
[12:44:22.479]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:44:22.479]  
[12:44:22.479]  <debugvars>
[12:44:22.479]    // Pre-defined
[12:44:22.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:44:22.479]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:44:22.479]    __dp=0x00000000
[12:44:22.479]    __ap=0x00000000
[12:44:22.479]    __traceout=0x00000000      (Trace Disabled)
[12:44:22.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:44:22.479]    __FlashAddr=0x00000000
[12:44:22.479]    __FlashLen=0x00000000
[12:44:22.479]    __FlashArg=0x00000000
[12:44:22.479]    __FlashOp=0x00000000
[12:44:22.479]    __Result=0x00000000
[12:44:22.479]  </debugvars>
[12:44:22.479]  
[12:44:22.479]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:44:22.479]    <block atomic="false" info="">
[12:44:22.479]      __var SW_DP_ABORT       = 0x0;
[12:44:22.479]        // -> [SW_DP_ABORT <= 0x00000000]
[12:44:22.479]      __var DP_CTRL_STAT      = 0x4;
[12:44:22.479]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:44:22.479]      __var DP_SELECT         = 0x8;
[12:44:22.479]        // -> [DP_SELECT <= 0x00000008]
[12:44:22.479]      __var powered_down      = 0;
[12:44:22.479]        // -> [powered_down <= 0x00000000]
[12:44:22.479]      WriteDP(DP_SELECT, 0x00000000);
[12:44:22.479]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:44:22.479]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:44:22.488]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:44:22.488]        // -> [powered_down <= 0x00000001]
[12:44:22.488]    </block>
[12:44:22.488]    <control if="powered_down" while="" timeout="0" info="">
[12:44:22.488]      // if-block "powered_down"
[12:44:22.489]        // =>  TRUE
[12:44:22.489]      <block atomic="false" info="">
[12:44:22.489]        Message(0, "Debug/System power-up request sent");
[12:44:22.489]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:44:22.489]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:44:22.489]      </block>
[12:44:22.489]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:44:22.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:44:22.494]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:44:22.494]        // while-condition  =>  FALSE
[12:44:22.494]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:44:22.494]      </control>
[12:44:22.494]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:44:22.494]        // if-block "(__protocol & 0xFFFF) == 1"
[12:44:22.494]          // =>  FALSE
[12:44:22.494]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:44:22.494]      </control>
[12:44:22.494]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:44:22.494]        // if-block "(__protocol & 0xFFFF) == 2"
[12:44:22.494]          // =>  TRUE
[12:44:22.494]        <block atomic="false" info="">
[12:44:22.494]          Message(0, "executing SWD power up");
[12:44:22.494]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:44:22.498]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:44:22.498]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:44:22.500]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:44:22.500]        </block>
[12:44:22.500]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:44:22.500]      </control>
[12:44:22.500]      // end if-block "powered_down"
[12:44:22.500]    </control>
[12:44:22.500]    <block atomic="false" info="">
[12:44:22.500]      __var DEBUG_PORT_VAL    = 0;
[12:44:22.501]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:44:22.501]      __var ACCESS_POINT_VAL  = 0;
[12:44:22.501]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:44:22.501]      __ap = 1; 
[12:44:22.501]        // -> [__ap <= 0x00000001]
[12:44:22.501]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:44:22.504]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:44:22.504]      __ap = 4;
[12:44:22.504]        // -> [__ap <= 0x00000004]
[12:44:22.504]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:44:22.508]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:44:22.508]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:44:22.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:44:22.511]    </block>
[12:44:22.511]    <block atomic="false" info="">
[12:44:22.511]      __var nReset = 0x80;
[12:44:22.511]        // -> [nReset <= 0x00000080]
[12:44:22.511]      __var canReadPins = 0;
[12:44:22.511]        // -> [canReadPins <= 0x00000000]
[12:44:22.511]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:44:22.513]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:44:22.513]        // -> [canReadPins <= 0x00000001]
[12:44:22.515]    </block>
[12:44:22.515]    <control if="" while="1" timeout="200" info="">
[12:44:22.515]      // while "1"  (timeout="200")
[12:44:22.515]      // while-condition  =>  TRUE
[12:44:22.515]      // while "1"  (timeout="200")
[12:44:22.515]      // while-condition  =>  TRUE
[12:44:22.515]      // while "1"  (timeout="200")
[12:44:22.515]      // while-condition  =>  TRUE
[12:44:22.515]      // while "1"  (timeout="200")
[12:44:22.515]      // while-condition  =>  TRUE
[12:44:22.515]      // while "1"  (timeout="200")
[12:44:22.516]      // while-condition  =>  TRUE
[12:44:22.516]      // while "1"  (timeout="200")
[12:44:22.516]      // while-condition  =>  TRUE
[12:44:22.516]      // while "1"  (timeout="200")
[12:44:22.516]      // while-condition  =>  TRUE
[12:44:22.516]      // while "1"  (timeout="200")
[12:44:22.516]      // while-condition  =>  TRUE
[12:44:22.516]      // while "1"  (timeout="200")
[12:44:22.516]      // while-condition  =>  TRUE
[12:44:22.516]      // while "1"  (timeout="200")
[12:44:22.516]      // while-condition  =>  TRUE
[12:44:22.516]      // while "1"  (timeout="200")
[12:44:22.516]      // while-condition  =>  TRUE
[12:44:22.518]      // while "1"  (timeout="200")
[12:44:22.518]      // while-condition  =>  TRUE
[12:44:22.518]      // while "1"  (timeout="200")
[12:44:22.518]      // while-condition  =>  TRUE
[12:44:22.518]      // while "1"  (timeout="200")
[12:44:22.518]      // while-condition  =>  TRUE
[12:44:22.518]      // while "1"  (timeout="200")
[12:44:22.518]      // while-condition  =>  TRUE
[12:44:22.518]      // while "1"  (timeout="200")
[12:44:22.518]      // while-condition  =>  TRUE
[12:44:22.518]      // while "1"  (timeout="200")
[12:44:22.518]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.519]      // while "1"  (timeout="200")
[12:44:22.519]      // while-condition  =>  TRUE
[12:44:22.521]      // while "1"  (timeout="200")
[12:44:22.521]      // while-condition  =>  TRUE
[12:44:22.521]      // while "1"  (timeout="200")
[12:44:22.521]      // while-condition  =>  TRUE
[12:44:22.521]      // while "1"  (timeout="200")
[12:44:22.521]      // while-condition  =>  TRUE
[12:44:22.521]      // while "1"  (timeout="200")
[12:44:22.521]      // while-condition  =>  TRUE
[12:44:22.521]      // while "1"  (timeout="200")
[12:44:22.521]      // while-condition  =>  TRUE
[12:44:22.521]      // while "1"  (timeout="200")
[12:44:22.521]      // while-condition  =>  TRUE
[12:44:22.522]      // while "1"  (timeout="200")
[12:44:22.522]      // while  =>  TIMEOUT
[12:44:22.522]      // end while "1"
[12:44:22.522]    </control>
[12:44:22.522]    <control if="canReadPins" while="" timeout="0" info="">
[12:44:22.522]      // if-block "canReadPins"
[12:44:22.522]        // =>  TRUE
[12:44:22.522]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:44:22.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:44:22.524]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:44:22.524]        // while-condition  =>  FALSE
[12:44:22.524]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:44:22.524]      </control>
[12:44:22.524]      // end if-block "canReadPins"
[12:44:22.524]    </control>
[12:44:22.524]    <control if="!canReadPins" while="" timeout="0" info="">
[12:44:22.524]      // if-block "!canReadPins"
[12:44:22.524]        // =>  FALSE
[12:44:22.524]      // skip if-block "!canReadPins"
[12:44:22.524]    </control>
[12:44:22.524]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:44:22.524]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:44:22.524]        // =>  TRUE
[12:44:22.524]      <block atomic="false" info="">
[12:44:22.524]        WriteAP(0x00, 0x190008);
[12:44:22.527]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:44:22.527]        WriteAP(0xF0, 0x01);
[12:44:22.529]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:44:22.529]      </block>
[12:44:22.529]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:44:22.529]    </control>
[12:44:22.529]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:44:22.529]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:44:22.529]        // =>  FALSE
[12:44:22.529]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:44:22.529]    </control>
[12:44:22.529]    <block atomic="false" info="">
[12:44:22.529]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:44:22.535]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:44:22.539]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:44:22.539]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:44:22.539]      __ap = 0; //lets make sure we reset the access point selection
[12:44:22.539]        // -> [__ap <= 0x00000000]
[12:44:22.539]    </block>
[12:44:22.542]  </sequence>
[12:44:22.542]  
[12:44:22.561]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:44:22.561]  
[12:44:22.561]  <debugvars>
[12:44:22.561]    // Pre-defined
[12:44:22.561]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:44:22.561]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:44:22.561]    __dp=0x00000000
[12:44:22.561]    __ap=0x00000000
[12:44:22.561]    __traceout=0x00000000      (Trace Disabled)
[12:44:22.561]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:44:22.561]    __FlashAddr=0x00000000
[12:44:22.561]    __FlashLen=0x00000000
[12:44:22.561]    __FlashArg=0x00000000
[12:44:22.561]    __FlashOp=0x00000000
[12:44:22.561]    __Result=0x00000000
[12:44:22.561]  </debugvars>
[12:44:22.561]  
[12:44:22.561]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:44:22.561]    <block atomic="false" info="">
[12:44:22.565]      __var deviceID = 0;
[12:44:22.565]        // -> [deviceID <= 0x00000000]
[12:44:22.565]      __var version = 0;
[12:44:22.565]        // -> [version <= 0x00000000]
[12:44:22.565]      __var partNum = 0;
[12:44:22.565]        // -> [partNum <= 0x00000000]
[12:44:22.565]      __var manuf = 0;
[12:44:22.565]        // -> [manuf <= 0x00000000]
[12:44:22.565]      __var isMSPM0G1X0X_G3X0X = 0;
[12:44:22.565]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:44:22.565]      __var isProduction = 0;
[12:44:22.565]        // -> [isProduction <= 0x00000000]
[12:44:22.565]      __var continueId = 0;
[12:44:22.565]        // -> [continueId <= 0x00000000]
[12:44:22.565]      deviceID =   Read32(0x41C40004);
[12:44:22.571]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:44:22.571]        // -> [deviceID <= 0x2BB8802F]
[12:44:22.571]      version = deviceID >> 28;
[12:44:22.571]        // -> [version <= 0x00000002]
[12:44:22.571]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:44:22.571]        // -> [partNum <= 0x0000BB88]
[12:44:22.571]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:44:22.571]        // -> [manuf <= 0x00000017]
[12:44:22.571]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:44:22.571]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:44:22.571]      isProduction = (version > 0);
[12:44:22.571]        // -> [isProduction <= 0x00000001]
[12:44:22.571]    </block>
[12:44:22.571]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:44:22.571]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:44:22.571]        // =>  FALSE
[12:44:22.571]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:44:22.571]    </control>
[12:44:22.571]    <control if="continueId == 4" while="" timeout="0" info="">
[12:44:22.571]      // if-block "continueId == 4"
[12:44:22.571]        // =>  FALSE
[12:44:22.571]      // skip if-block "continueId == 4"
[12:44:22.571]    </control>
[12:44:22.571]    <control if="!isProduction" while="" timeout="0" info="">
[12:44:22.571]      // if-block "!isProduction"
[12:44:22.571]        // =>  FALSE
[12:44:22.571]      // skip if-block "!isProduction"
[12:44:22.571]    </control>
[12:44:22.571]  </sequence>
[12:44:22.571]  
[12:44:27.685]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:44:27.685]  
[12:44:27.702]  <debugvars>
[12:44:27.702]    // Pre-defined
[12:44:27.702]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:44:27.702]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:44:27.702]    __dp=0x00000000
[12:44:27.702]    __ap=0x00000000
[12:44:27.702]    __traceout=0x00000000      (Trace Disabled)
[12:44:27.702]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:44:27.702]    __FlashAddr=0x00000000
[12:44:27.702]    __FlashLen=0x00000000
[12:44:27.703]    __FlashArg=0x00000000
[12:44:27.703]    __FlashOp=0x00000000
[12:44:27.703]    __Result=0x00000000
[12:44:27.703]  </debugvars>
[12:44:27.703]  
[12:44:27.703]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:44:27.703]    <block atomic="false" info="">
[12:44:27.703]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:44:27.703]        // -> [isSWJ <= 0x00000001]
[12:44:27.703]      __var hasDormant = __protocol & 0x00020000;
[12:44:27.703]        // -> [hasDormant <= 0x00000000]
[12:44:27.703]      __var protType   = __protocol & 0x0000FFFF;
[12:44:27.703]        // -> [protType <= 0x00000002]
[12:44:27.703]    </block>
[12:44:27.705]    <control if="protType == 1" while="" timeout="0" info="">
[12:44:27.705]      // if-block "protType == 1"
[12:44:27.705]        // =>  FALSE
[12:44:27.705]      // skip if-block "protType == 1"
[12:44:27.705]    </control>
[12:44:27.705]    <control if="protType == 2" while="" timeout="0" info="">
[12:44:27.705]      // if-block "protType == 2"
[12:44:27.706]        // =>  TRUE
[12:44:27.707]      <control if="isSWJ" while="" timeout="0" info="">
[12:44:27.707]        // if-block "isSWJ"
[12:44:27.707]          // =>  TRUE
[12:44:27.707]        <control if="hasDormant" while="" timeout="0" info="">
[12:44:27.707]          // if-block "hasDormant"
[12:44:27.707]            // =>  FALSE
[12:44:27.707]          // skip if-block "hasDormant"
[12:44:27.707]        </control>
[12:44:27.707]        <control if="!hasDormant" while="" timeout="0" info="">
[12:44:27.707]          // if-block "!hasDormant"
[12:44:27.715]            // =>  TRUE
[12:44:27.715]          <block atomic="false" info="">
[12:44:27.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:44:27.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:44:27.720]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:44:27.721]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:44:27.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:44:27.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:44:27.723]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:44:27.724]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:44:27.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:44:27.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:44:27.726]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:44:27.727]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:44:27.727]          </block>
[12:44:27.727]          // end if-block "!hasDormant"
[12:44:27.727]        </control>
[12:44:27.727]        // end if-block "isSWJ"
[12:44:27.727]      </control>
[12:44:27.727]      <control if="!isSWJ" while="" timeout="0" info="">
[12:44:27.727]        // if-block "!isSWJ"
[12:44:27.727]          // =>  FALSE
[12:44:27.727]        // skip if-block "!isSWJ"
[12:44:27.727]      </control>
[12:44:27.727]      <block atomic="false" info="">
[12:44:27.727]        ReadDP(0x0);
[12:44:27.727]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:44:27.727]      </block>
[12:44:27.727]      // end if-block "protType == 2"
[12:44:27.727]    </control>
[12:44:27.727]  </sequence>
[12:44:27.727]  
[12:44:27.736]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:44:27.736]  
[12:44:27.736]  <debugvars>
[12:44:27.736]    // Pre-defined
[12:44:27.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:44:27.736]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:44:27.736]    __dp=0x00000000
[12:44:27.736]    __ap=0x00000000
[12:44:27.736]    __traceout=0x00000000      (Trace Disabled)
[12:44:27.736]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:44:27.736]    __FlashAddr=0x00000000
[12:44:27.738]    __FlashLen=0x00000000
[12:44:27.738]    __FlashArg=0x00000000
[12:44:27.738]    __FlashOp=0x00000000
[12:44:27.738]    __Result=0x00000000
[12:44:27.738]  </debugvars>
[12:44:27.738]  
[12:44:27.738]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:44:27.738]    <block atomic="false" info="">
[12:44:27.738]      __var SW_DP_ABORT       = 0x0;
[12:44:27.739]        // -> [SW_DP_ABORT <= 0x00000000]
[12:44:27.739]      __var DP_CTRL_STAT      = 0x4;
[12:44:27.739]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:44:27.739]      __var DP_SELECT         = 0x8;
[12:44:27.739]        // -> [DP_SELECT <= 0x00000008]
[12:44:27.739]      __var powered_down      = 0;
[12:44:27.739]        // -> [powered_down <= 0x00000000]
[12:44:27.739]      WriteDP(DP_SELECT, 0x00000000);
[12:44:27.741]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:44:27.741]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:44:27.741]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:44:27.741]        // -> [powered_down <= 0x00000001]
[12:44:27.741]    </block>
[12:44:27.741]    <control if="powered_down" while="" timeout="0" info="">
[12:44:27.741]      // if-block "powered_down"
[12:44:27.741]        // =>  TRUE
[12:44:27.741]      <block atomic="false" info="">
[12:44:27.741]        Message(0, "Debug/System power-up request sent");
[12:44:27.741]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:44:27.746]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:44:27.746]      </block>
[12:44:27.746]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:44:27.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:44:27.746]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:44:27.746]        // while-condition  =>  FALSE
[12:44:27.746]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:44:27.746]      </control>
[12:44:27.746]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:44:27.746]        // if-block "(__protocol & 0xFFFF) == 1"
[12:44:27.749]          // =>  FALSE
[12:44:27.749]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:44:27.749]      </control>
[12:44:27.749]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:44:27.749]        // if-block "(__protocol & 0xFFFF) == 2"
[12:44:27.749]          // =>  TRUE
[12:44:27.749]        <block atomic="false" info="">
[12:44:27.749]          Message(0, "executing SWD power up");
[12:44:27.750]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:44:27.750]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:44:27.750]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:44:27.750]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:44:27.750]        </block>
[12:44:27.750]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:44:27.750]      </control>
[12:44:27.750]      // end if-block "powered_down"
[12:44:27.750]    </control>
[12:44:27.750]    <block atomic="false" info="">
[12:44:27.750]      __var DEBUG_PORT_VAL    = 0;
[12:44:27.750]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:44:27.756]      __var ACCESS_POINT_VAL  = 0;
[12:44:27.756]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:44:27.756]      __ap = 1; 
[12:44:27.756]        // -> [__ap <= 0x00000001]
[12:44:27.756]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:44:27.758]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:44:27.758]      __ap = 4;
[12:44:27.758]        // -> [__ap <= 0x00000004]
[12:44:27.758]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:44:27.758]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:44:27.758]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:44:27.758]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:44:27.758]    </block>
[12:44:27.758]    <block atomic="false" info="">
[12:44:27.758]      __var nReset = 0x80;
[12:44:27.758]        // -> [nReset <= 0x00000080]
[12:44:27.758]      __var canReadPins = 0;
[12:44:27.758]        // -> [canReadPins <= 0x00000000]
[12:44:27.758]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:44:27.768]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:44:27.768]        // -> [canReadPins <= 0x00000001]
[12:44:27.768]    </block>
[12:44:27.768]    <control if="" while="1" timeout="200" info="">
[12:44:27.768]      // while "1"  (timeout="200")
[12:44:27.768]      // while-condition  =>  TRUE
[12:44:27.768]      // while "1"  (timeout="200")
[12:44:27.768]      // while-condition  =>  TRUE
[12:44:27.768]      // while "1"  (timeout="200")
[12:44:27.768]      // while-condition  =>  TRUE
[12:44:27.768]      // while "1"  (timeout="200")
[12:44:27.768]      // while-condition  =>  TRUE
[12:44:27.768]      // while "1"  (timeout="200")
[12:44:27.768]      // while-condition  =>  TRUE
[12:44:27.770]      // while "1"  (timeout="200")
[12:44:27.770]      // while-condition  =>  TRUE
[12:44:27.770]      // while "1"  (timeout="200")
[12:44:27.770]      // while-condition  =>  TRUE
[12:44:27.770]      // while "1"  (timeout="200")
[12:44:27.770]      // while-condition  =>  TRUE
[12:44:27.770]      // while "1"  (timeout="200")
[12:44:27.770]      // while-condition  =>  TRUE
[12:44:27.770]      // while "1"  (timeout="200")
[12:44:27.770]      // while-condition  =>  TRUE
[12:44:27.770]      // while "1"  (timeout="200")
[12:44:27.771]      // while-condition  =>  TRUE
[12:44:27.771]      // while "1"  (timeout="200")
[12:44:27.771]      // while-condition  =>  TRUE
[12:44:27.771]      // while "1"  (timeout="200")
[12:44:27.771]      // while-condition  =>  TRUE
[12:44:27.771]      // while "1"  (timeout="200")
[12:44:27.771]      // while-condition  =>  TRUE
[12:44:27.771]      // while "1"  (timeout="200")
[12:44:27.771]      // while-condition  =>  TRUE
[12:44:27.771]      // while "1"  (timeout="200")
[12:44:27.771]      // while-condition  =>  TRUE
[12:44:27.771]      // while "1"  (timeout="200")
[12:44:27.771]      // while-condition  =>  TRUE
[12:44:27.771]      // while "1"  (timeout="200")
[12:44:27.773]      // while-condition  =>  TRUE
[12:44:27.773]      // while "1"  (timeout="200")
[12:44:27.773]      // while  =>  TIMEOUT
[12:44:27.773]      // end while "1"
[12:44:27.773]    </control>
[12:44:27.773]    <control if="canReadPins" while="" timeout="0" info="">
[12:44:27.773]      // if-block "canReadPins"
[12:44:27.773]        // =>  TRUE
[12:44:27.773]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:44:27.773]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:44:27.775]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:44:27.775]        // while-condition  =>  FALSE
[12:44:27.775]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:44:27.775]      </control>
[12:44:27.775]      // end if-block "canReadPins"
[12:44:27.775]    </control>
[12:44:27.775]    <control if="!canReadPins" while="" timeout="0" info="">
[12:44:27.775]      // if-block "!canReadPins"
[12:44:27.775]        // =>  FALSE
[12:44:27.775]      // skip if-block "!canReadPins"
[12:44:27.775]    </control>
[12:44:27.775]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:44:27.775]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:44:27.777]        // =>  TRUE
[12:44:27.777]      <block atomic="false" info="">
[12:44:27.777]        WriteAP(0x00, 0x190008);
[12:44:27.779]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:44:27.779]        WriteAP(0xF0, 0x01);
[12:44:27.779]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:44:27.779]      </block>
[12:44:27.779]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:44:27.779]    </control>
[12:44:27.779]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:44:27.779]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:44:27.779]        // =>  FALSE
[12:44:27.779]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:44:27.779]    </control>
[12:44:27.779]    <block atomic="false" info="">
[12:44:27.779]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:44:27.787]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:44:27.787]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:44:27.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:44:27.787]      __ap = 0; //lets make sure we reset the access point selection
[12:44:27.787]        // -> [__ap <= 0x00000000]
[12:44:27.787]    </block>
[12:44:27.787]  </sequence>
[12:44:27.787]  
[12:44:27.808]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:44:27.808]  
[12:44:27.808]  <debugvars>
[12:44:27.808]    // Pre-defined
[12:44:27.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:44:27.808]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:44:27.808]    __dp=0x00000000
[12:44:27.808]    __ap=0x00000000
[12:44:27.808]    __traceout=0x00000000      (Trace Disabled)
[12:44:27.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:44:27.808]    __FlashAddr=0x00000000
[12:44:27.808]    __FlashLen=0x00000000
[12:44:27.808]    __FlashArg=0x00000000
[12:44:27.808]    __FlashOp=0x00000000
[12:44:27.808]    __Result=0x00000000
[12:44:27.808]  </debugvars>
[12:44:27.808]  
[12:44:27.808]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:44:27.808]    <block atomic="false" info="">
[12:44:27.808]      __var deviceID = 0;
[12:44:27.808]        // -> [deviceID <= 0x00000000]
[12:44:27.808]      __var version = 0;
[12:44:27.808]        // -> [version <= 0x00000000]
[12:44:27.808]      __var partNum = 0;
[12:44:27.815]        // -> [partNum <= 0x00000000]
[12:44:27.815]      __var manuf = 0;
[12:44:27.815]        // -> [manuf <= 0x00000000]
[12:44:27.815]      __var isMSPM0G1X0X_G3X0X = 0;
[12:44:27.815]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:44:27.815]      __var isProduction = 0;
[12:44:27.815]        // -> [isProduction <= 0x00000000]
[12:44:27.815]      __var continueId = 0;
[12:44:27.815]        // -> [continueId <= 0x00000000]
[12:44:27.815]      deviceID =   Read32(0x41C40004);
[12:44:27.818]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:44:27.818]        // -> [deviceID <= 0x2BB8802F]
[12:44:27.818]      version = deviceID >> 28;
[12:44:27.818]        // -> [version <= 0x00000002]
[12:44:27.818]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:44:27.818]        // -> [partNum <= 0x0000BB88]
[12:44:27.818]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:44:27.818]        // -> [manuf <= 0x00000017]
[12:44:27.818]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:44:27.818]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:44:27.818]      isProduction = (version > 0);
[12:44:27.818]        // -> [isProduction <= 0x00000001]
[12:44:27.818]    </block>
[12:44:27.818]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:44:27.818]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:44:27.818]        // =>  FALSE
[12:44:27.818]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:44:27.818]    </control>
[12:44:27.818]    <control if="continueId == 4" while="" timeout="0" info="">
[12:44:27.818]      // if-block "continueId == 4"
[12:44:27.818]        // =>  FALSE
[12:44:27.818]      // skip if-block "continueId == 4"
[12:44:27.818]    </control>
[12:44:27.818]    <control if="!isProduction" while="" timeout="0" info="">
[12:44:27.818]      // if-block "!isProduction"
[12:44:27.818]        // =>  FALSE
[12:44:27.818]      // skip if-block "!isProduction"
[12:44:27.818]    </control>
[12:44:27.818]  </sequence>
[12:44:27.818]  
[12:45:36.923]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:45:36.923]  
[12:45:36.923]  <debugvars>
[12:45:36.923]    // Pre-defined
[12:45:36.923]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:45:36.923]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:45:36.923]    __dp=0x00000000
[12:45:36.923]    __ap=0x00000000
[12:45:36.923]    __traceout=0x00000000      (Trace Disabled)
[12:45:36.923]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:45:36.923]    __FlashAddr=0x00000000
[12:45:36.923]    __FlashLen=0x00000000
[12:45:36.923]    __FlashArg=0x00000000
[12:45:36.923]    __FlashOp=0x00000000
[12:45:36.923]    __Result=0x00000000
[12:45:36.923]  </debugvars>
[12:45:36.923]  
[12:45:36.923]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:45:36.923]    <block atomic="false" info="">
[12:45:36.923]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:45:36.923]        // -> [isSWJ <= 0x00000001]
[12:45:36.923]      __var hasDormant = __protocol & 0x00020000;
[12:45:36.923]        // -> [hasDormant <= 0x00000000]
[12:45:36.923]      __var protType   = __protocol & 0x0000FFFF;
[12:45:36.923]        // -> [protType <= 0x00000002]
[12:45:36.923]    </block>
[12:45:36.929]    <control if="protType == 1" while="" timeout="0" info="">
[12:45:36.929]      // if-block "protType == 1"
[12:45:36.929]        // =>  FALSE
[12:45:36.929]      // skip if-block "protType == 1"
[12:45:36.929]    </control>
[12:45:36.929]    <control if="protType == 2" while="" timeout="0" info="">
[12:45:36.929]      // if-block "protType == 2"
[12:45:36.929]        // =>  TRUE
[12:45:36.929]      <control if="isSWJ" while="" timeout="0" info="">
[12:45:36.929]        // if-block "isSWJ"
[12:45:36.929]          // =>  TRUE
[12:45:36.929]        <control if="hasDormant" while="" timeout="0" info="">
[12:45:36.930]          // if-block "hasDormant"
[12:45:36.930]            // =>  FALSE
[12:45:36.930]          // skip if-block "hasDormant"
[12:45:36.930]        </control>
[12:45:36.930]        <control if="!hasDormant" while="" timeout="0" info="">
[12:45:36.930]          // if-block "!hasDormant"
[12:45:36.930]            // =>  TRUE
[12:45:36.930]          <block atomic="false" info="">
[12:45:36.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:45:36.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:45:36.932]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:45:36.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:45:36.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:45:36.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:45:36.934]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:45:36.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:45:36.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:45:36.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:45:36.934]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:45:36.934]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:45:36.934]          </block>
[12:45:36.934]          // end if-block "!hasDormant"
[12:45:36.934]        </control>
[12:45:36.934]        // end if-block "isSWJ"
[12:45:36.934]      </control>
[12:45:36.934]      <control if="!isSWJ" while="" timeout="0" info="">
[12:45:36.934]        // if-block "!isSWJ"
[12:45:36.934]          // =>  FALSE
[12:45:36.934]        // skip if-block "!isSWJ"
[12:45:36.934]      </control>
[12:45:36.934]      <block atomic="false" info="">
[12:45:36.934]        ReadDP(0x0);
[12:45:36.943]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:45:36.943]      </block>
[12:45:36.943]      // end if-block "protType == 2"
[12:45:36.943]    </control>
[12:45:36.943]  </sequence>
[12:45:36.943]  
[12:45:36.944]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:45:36.944]  
[12:45:36.944]  <debugvars>
[12:45:36.944]    // Pre-defined
[12:45:36.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:45:36.944]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:45:36.944]    __dp=0x00000000
[12:45:36.944]    __ap=0x00000000
[12:45:36.944]    __traceout=0x00000000      (Trace Disabled)
[12:45:36.944]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:45:36.944]    __FlashAddr=0x00000000
[12:45:36.944]    __FlashLen=0x00000000
[12:45:36.944]    __FlashArg=0x00000000
[12:45:36.944]    __FlashOp=0x00000000
[12:45:36.944]    __Result=0x00000000
[12:45:36.944]  </debugvars>
[12:45:36.944]  
[12:45:36.944]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:45:36.944]    <block atomic="false" info="">
[12:45:36.944]      __var SW_DP_ABORT       = 0x0;
[12:45:36.944]        // -> [SW_DP_ABORT <= 0x00000000]
[12:45:36.944]      __var DP_CTRL_STAT      = 0x4;
[12:45:36.944]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:45:36.944]      __var DP_SELECT         = 0x8;
[12:45:36.944]        // -> [DP_SELECT <= 0x00000008]
[12:45:36.944]      __var powered_down      = 0;
[12:45:36.944]        // -> [powered_down <= 0x00000000]
[12:45:36.944]      WriteDP(DP_SELECT, 0x00000000);
[12:45:36.951]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:45:36.951]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:45:36.953]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:45:36.953]        // -> [powered_down <= 0x00000001]
[12:45:36.953]    </block>
[12:45:36.953]    <control if="powered_down" while="" timeout="0" info="">
[12:45:36.953]      // if-block "powered_down"
[12:45:36.953]        // =>  TRUE
[12:45:36.953]      <block atomic="false" info="">
[12:45:36.953]        Message(0, "Debug/System power-up request sent");
[12:45:36.955]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:45:36.955]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:45:36.955]      </block>
[12:45:36.955]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:45:36.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:45:36.955]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:45:36.955]        // while-condition  =>  FALSE
[12:45:36.955]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:45:36.955]      </control>
[12:45:36.955]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:45:36.955]        // if-block "(__protocol & 0xFFFF) == 1"
[12:45:36.955]          // =>  FALSE
[12:45:36.955]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:45:36.955]      </control>
[12:45:36.955]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:45:36.955]        // if-block "(__protocol & 0xFFFF) == 2"
[12:45:36.955]          // =>  TRUE
[12:45:36.955]        <block atomic="false" info="">
[12:45:36.955]          Message(0, "executing SWD power up");
[12:45:36.964]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:45:36.964]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:45:36.964]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:45:36.964]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:45:36.964]        </block>
[12:45:36.964]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:45:36.964]      </control>
[12:45:36.964]      // end if-block "powered_down"
[12:45:36.964]    </control>
[12:45:36.964]    <block atomic="false" info="">
[12:45:36.964]      __var DEBUG_PORT_VAL    = 0;
[12:45:36.964]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:45:36.964]      __var ACCESS_POINT_VAL  = 0;
[12:45:36.964]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:45:36.964]      __ap = 1; 
[12:45:36.964]        // -> [__ap <= 0x00000001]
[12:45:36.964]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:45:36.964]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:45:36.964]      __ap = 4;
[12:45:36.973]        // -> [__ap <= 0x00000004]
[12:45:36.973]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:45:36.973]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:45:36.973]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:45:36.973]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:45:36.977]    </block>
[12:45:36.977]    <block atomic="false" info="">
[12:45:36.977]      __var nReset = 0x80;
[12:45:36.977]        // -> [nReset <= 0x00000080]
[12:45:36.977]      __var canReadPins = 0;
[12:45:36.977]        // -> [canReadPins <= 0x00000000]
[12:45:36.977]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:45:36.977]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:45:36.977]        // -> [canReadPins <= 0x00000001]
[12:45:36.977]    </block>
[12:45:36.977]    <control if="" while="1" timeout="200" info="">
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.977]      // while-condition  =>  TRUE
[12:45:36.977]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.983]      // while "1"  (timeout="200")
[12:45:36.983]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.985]      // while "1"  (timeout="200")
[12:45:36.985]      // while-condition  =>  TRUE
[12:45:36.988]      // while "1"  (timeout="200")
[12:45:36.988]      // while-condition  =>  TRUE
[12:45:36.988]      // while "1"  (timeout="200")
[12:45:36.988]      // while-condition  =>  TRUE
[12:45:36.988]      // while "1"  (timeout="200")
[12:45:36.988]      // while-condition  =>  TRUE
[12:45:36.988]      // while "1"  (timeout="200")
[12:45:36.988]      // while-condition  =>  TRUE
[12:45:36.988]      // while "1"  (timeout="200")
[12:45:36.988]      // while-condition  =>  TRUE
[12:45:36.988]      // while "1"  (timeout="200")
[12:45:36.988]      // while-condition  =>  TRUE
[12:45:36.989]      // while "1"  (timeout="200")
[12:45:36.989]      // while-condition  =>  TRUE
[12:45:36.989]      // while "1"  (timeout="200")
[12:45:36.989]      // while-condition  =>  TRUE
[12:45:36.989]      // while "1"  (timeout="200")
[12:45:36.989]      // while-condition  =>  TRUE
[12:45:36.989]      // while "1"  (timeout="200")
[12:45:36.989]      // while-condition  =>  TRUE
[12:45:36.989]      // while "1"  (timeout="200")
[12:45:36.989]      // while-condition  =>  TRUE
[12:45:36.989]      // while "1"  (timeout="200")
[12:45:36.989]      // while-condition  =>  TRUE
[12:45:36.989]      // while "1"  (timeout="200")
[12:45:36.991]      // while-condition  =>  TRUE
[12:45:36.991]      // while "1"  (timeout="200")
[12:45:36.991]      // while  =>  TIMEOUT
[12:45:36.991]      // end while "1"
[12:45:36.991]    </control>
[12:45:36.991]    <control if="canReadPins" while="" timeout="0" info="">
[12:45:36.991]      // if-block "canReadPins"
[12:45:36.991]        // =>  TRUE
[12:45:36.991]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:45:36.991]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:45:36.994]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:45:36.994]        // while-condition  =>  FALSE
[12:45:36.994]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:45:36.994]      </control>
[12:45:36.994]      // end if-block "canReadPins"
[12:45:36.994]    </control>
[12:45:36.994]    <control if="!canReadPins" while="" timeout="0" info="">
[12:45:36.994]      // if-block "!canReadPins"
[12:45:36.994]        // =>  FALSE
[12:45:36.994]      // skip if-block "!canReadPins"
[12:45:36.994]    </control>
[12:45:36.994]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:45:36.994]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:45:36.994]        // =>  TRUE
[12:45:36.994]      <block atomic="false" info="">
[12:45:36.996]        WriteAP(0x00, 0x190008);
[12:45:36.997]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:45:36.997]        WriteAP(0xF0, 0x01);
[12:45:37.001]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:45:37.001]      </block>
[12:45:37.001]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:45:37.001]    </control>
[12:45:37.001]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:45:37.001]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:45:37.001]        // =>  FALSE
[12:45:37.001]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:45:37.001]    </control>
[12:45:37.001]    <block atomic="false" info="">
[12:45:37.001]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:45:37.004]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:45:37.004]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:45:37.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:45:37.007]      __ap = 0; //lets make sure we reset the access point selection
[12:45:37.007]        // -> [__ap <= 0x00000000]
[12:45:37.007]    </block>
[12:45:37.007]  </sequence>
[12:45:37.007]  
[12:45:37.033]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:45:37.033]  
[12:45:37.033]  <debugvars>
[12:45:37.034]    // Pre-defined
[12:45:37.034]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:45:37.034]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:45:37.034]    __dp=0x00000000
[12:45:37.034]    __ap=0x00000000
[12:45:37.034]    __traceout=0x00000000      (Trace Disabled)
[12:45:37.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:45:37.035]    __FlashAddr=0x00000000
[12:45:37.035]    __FlashLen=0x00000000
[12:45:37.035]    __FlashArg=0x00000000
[12:45:37.035]    __FlashOp=0x00000000
[12:45:37.035]    __Result=0x00000000
[12:45:37.035]  </debugvars>
[12:45:37.035]  
[12:45:37.035]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:45:37.036]    <block atomic="false" info="">
[12:45:37.036]      __var deviceID = 0;
[12:45:37.036]        // -> [deviceID <= 0x00000000]
[12:45:37.036]      __var version = 0;
[12:45:37.036]        // -> [version <= 0x00000000]
[12:45:37.036]      __var partNum = 0;
[12:45:37.037]        // -> [partNum <= 0x00000000]
[12:45:37.037]      __var manuf = 0;
[12:45:37.037]        // -> [manuf <= 0x00000000]
[12:45:37.037]      __var isMSPM0G1X0X_G3X0X = 0;
[12:45:37.037]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:45:37.037]      __var isProduction = 0;
[12:45:37.037]        // -> [isProduction <= 0x00000000]
[12:45:37.037]      __var continueId = 0;
[12:45:37.037]        // -> [continueId <= 0x00000000]
[12:45:37.037]      deviceID =   Read32(0x41C40004);
[12:45:37.043]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:45:37.043]        // -> [deviceID <= 0x2BB8802F]
[12:45:37.043]      version = deviceID >> 28;
[12:45:37.043]        // -> [version <= 0x00000002]
[12:45:37.043]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:45:37.043]        // -> [partNum <= 0x0000BB88]
[12:45:37.043]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:45:37.043]        // -> [manuf <= 0x00000017]
[12:45:37.044]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:45:37.044]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:45:37.044]      isProduction = (version > 0);
[12:45:37.044]        // -> [isProduction <= 0x00000001]
[12:45:37.044]    </block>
[12:45:37.045]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:45:37.045]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:45:37.045]        // =>  FALSE
[12:45:37.045]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:45:37.045]    </control>
[12:45:37.045]    <control if="continueId == 4" while="" timeout="0" info="">
[12:45:37.045]      // if-block "continueId == 4"
[12:45:37.045]        // =>  FALSE
[12:45:37.045]      // skip if-block "continueId == 4"
[12:45:37.045]    </control>
[12:45:37.045]    <control if="!isProduction" while="" timeout="0" info="">
[12:45:37.046]      // if-block "!isProduction"
[12:45:37.046]        // =>  FALSE
[12:45:37.046]      // skip if-block "!isProduction"
[12:45:37.046]    </control>
[12:45:37.046]  </sequence>
[12:45:37.046]  
[12:46:48.668]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:46:48.668]  
[12:46:48.668]  <debugvars>
[12:46:48.668]    // Pre-defined
[12:46:48.668]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:48.668]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:46:48.668]    __dp=0x00000000
[12:46:48.668]    __ap=0x00000000
[12:46:48.668]    __traceout=0x00000000      (Trace Disabled)
[12:46:48.668]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:48.668]    __FlashAddr=0x00000000
[12:46:48.668]    __FlashLen=0x00000000
[12:46:48.675]    __FlashArg=0x00000000
[12:46:48.675]    __FlashOp=0x00000000
[12:46:48.676]    __Result=0x00000000
[12:46:48.676]  </debugvars>
[12:46:48.676]  
[12:46:48.676]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:46:48.676]    <block atomic="false" info="">
[12:46:48.676]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:46:48.676]        // -> [isSWJ <= 0x00000001]
[12:46:48.676]      __var hasDormant = __protocol & 0x00020000;
[12:46:48.676]        // -> [hasDormant <= 0x00000000]
[12:46:48.676]      __var protType   = __protocol & 0x0000FFFF;
[12:46:48.676]        // -> [protType <= 0x00000002]
[12:46:48.676]    </block>
[12:46:48.676]    <control if="protType == 1" while="" timeout="0" info="">
[12:46:48.676]      // if-block "protType == 1"
[12:46:48.676]        // =>  FALSE
[12:46:48.676]      // skip if-block "protType == 1"
[12:46:48.676]    </control>
[12:46:48.676]    <control if="protType == 2" while="" timeout="0" info="">
[12:46:48.676]      // if-block "protType == 2"
[12:46:48.676]        // =>  TRUE
[12:46:48.676]      <control if="isSWJ" while="" timeout="0" info="">
[12:46:48.676]        // if-block "isSWJ"
[12:46:48.676]          // =>  TRUE
[12:46:48.676]        <control if="hasDormant" while="" timeout="0" info="">
[12:46:48.676]          // if-block "hasDormant"
[12:46:48.676]            // =>  FALSE
[12:46:48.676]          // skip if-block "hasDormant"
[12:46:48.676]        </control>
[12:46:48.676]        <control if="!hasDormant" while="" timeout="0" info="">
[12:46:48.676]          // if-block "!hasDormant"
[12:46:48.676]            // =>  TRUE
[12:46:48.676]          <block atomic="false" info="">
[12:46:48.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:46:48.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:48.676]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:46:48.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:46:48.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:46:48.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:48.676]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:46:48.685]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:46:48.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:46:48.685]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:48.685]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:46:48.685]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:46:48.685]          </block>
[12:46:48.685]          // end if-block "!hasDormant"
[12:46:48.685]        </control>
[12:46:48.685]        // end if-block "isSWJ"
[12:46:48.685]      </control>
[12:46:48.685]      <control if="!isSWJ" while="" timeout="0" info="">
[12:46:48.685]        // if-block "!isSWJ"
[12:46:48.685]          // =>  FALSE
[12:46:48.685]        // skip if-block "!isSWJ"
[12:46:48.685]      </control>
[12:46:48.685]      <block atomic="false" info="">
[12:46:48.685]        ReadDP(0x0);
[12:46:48.685]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:46:48.685]      </block>
[12:46:48.685]      // end if-block "protType == 2"
[12:46:48.685]    </control>
[12:46:48.685]  </sequence>
[12:46:48.685]  
[12:46:48.696]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:46:48.696]  
[12:46:48.696]  <debugvars>
[12:46:48.696]    // Pre-defined
[12:46:48.696]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:48.696]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:46:48.696]    __dp=0x00000000
[12:46:48.696]    __ap=0x00000000
[12:46:48.696]    __traceout=0x00000000      (Trace Disabled)
[12:46:48.696]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:48.696]    __FlashAddr=0x00000000
[12:46:48.696]    __FlashLen=0x00000000
[12:46:48.696]    __FlashArg=0x00000000
[12:46:48.696]    __FlashOp=0x00000000
[12:46:48.696]    __Result=0x00000000
[12:46:48.696]  </debugvars>
[12:46:48.696]  
[12:46:48.696]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:46:48.696]    <block atomic="false" info="">
[12:46:48.696]      __var SW_DP_ABORT       = 0x0;
[12:46:48.696]        // -> [SW_DP_ABORT <= 0x00000000]
[12:46:48.696]      __var DP_CTRL_STAT      = 0x4;
[12:46:48.696]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:46:48.696]      __var DP_SELECT         = 0x8;
[12:46:48.696]        // -> [DP_SELECT <= 0x00000008]
[12:46:48.696]      __var powered_down      = 0;
[12:46:48.696]        // -> [powered_down <= 0x00000000]
[12:46:48.696]      WriteDP(DP_SELECT, 0x00000000);
[12:46:48.699]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:46:48.699]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:46:48.699]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:46:48.699]        // -> [powered_down <= 0x00000001]
[12:46:48.699]    </block>
[12:46:48.699]    <control if="powered_down" while="" timeout="0" info="">
[12:46:48.699]      // if-block "powered_down"
[12:46:48.699]        // =>  TRUE
[12:46:48.699]      <block atomic="false" info="">
[12:46:48.699]        Message(0, "Debug/System power-up request sent");
[12:46:48.699]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:46:48.705]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:46:48.705]      </block>
[12:46:48.705]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:46:48.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:46:48.705]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:46:48.705]        // while-condition  =>  FALSE
[12:46:48.705]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:46:48.705]      </control>
[12:46:48.705]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:46:48.705]        // if-block "(__protocol & 0xFFFF) == 1"
[12:46:48.705]          // =>  FALSE
[12:46:48.705]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:46:48.705]      </control>
[12:46:48.705]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:46:48.705]        // if-block "(__protocol & 0xFFFF) == 2"
[12:46:48.705]          // =>  TRUE
[12:46:48.705]        <block atomic="false" info="">
[12:46:48.705]          Message(0, "executing SWD power up");
[12:46:48.705]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:46:48.705]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:46:48.705]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:46:48.705]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:46:48.705]        </block>
[12:46:48.705]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:46:48.705]      </control>
[12:46:48.705]      // end if-block "powered_down"
[12:46:48.705]    </control>
[12:46:48.705]    <block atomic="false" info="">
[12:46:48.705]      __var DEBUG_PORT_VAL    = 0;
[12:46:48.705]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:46:48.705]      __var ACCESS_POINT_VAL  = 0;
[12:46:48.705]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:46:48.715]      __ap = 1; 
[12:46:48.715]        // -> [__ap <= 0x00000001]
[12:46:48.715]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:46:48.715]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:46:48.715]      __ap = 4;
[12:46:48.715]        // -> [__ap <= 0x00000004]
[12:46:48.715]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:46:48.720]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:46:48.720]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:46:48.720]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:46:48.720]    </block>
[12:46:48.720]    <block atomic="false" info="">
[12:46:48.720]      __var nReset = 0x80;
[12:46:48.720]        // -> [nReset <= 0x00000080]
[12:46:48.720]      __var canReadPins = 0;
[12:46:48.720]        // -> [canReadPins <= 0x00000000]
[12:46:48.720]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:46:48.726]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:46:48.726]        // -> [canReadPins <= 0x00000001]
[12:46:48.726]    </block>
[12:46:48.727]    <control if="" while="1" timeout="200" info="">
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.727]      // while "1"  (timeout="200")
[12:46:48.727]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.736]      // while "1"  (timeout="200")
[12:46:48.736]      // while-condition  =>  TRUE
[12:46:48.745]      // while "1"  (timeout="200")
[12:46:48.746]      // while  =>  TIMEOUT
[12:46:48.746]      // end while "1"
[12:46:48.746]    </control>
[12:46:48.746]    <control if="canReadPins" while="" timeout="0" info="">
[12:46:48.746]      // if-block "canReadPins"
[12:46:48.746]        // =>  TRUE
[12:46:48.746]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:46:48.746]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:46:48.747]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:46:48.747]        // while-condition  =>  FALSE
[12:46:48.747]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:46:48.747]      </control>
[12:46:48.747]      // end if-block "canReadPins"
[12:46:48.747]    </control>
[12:46:48.747]    <control if="!canReadPins" while="" timeout="0" info="">
[12:46:48.747]      // if-block "!canReadPins"
[12:46:48.747]        // =>  FALSE
[12:46:48.747]      // skip if-block "!canReadPins"
[12:46:48.747]    </control>
[12:46:48.747]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:46:48.747]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:46:48.747]        // =>  TRUE
[12:46:48.747]      <block atomic="false" info="">
[12:46:48.747]        WriteAP(0x00, 0x190008);
[12:46:48.747]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:46:48.747]        WriteAP(0xF0, 0x01);
[12:46:48.747]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:46:48.747]      </block>
[12:46:48.747]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:46:48.747]    </control>
[12:46:48.755]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:46:48.755]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:46:48.755]        // =>  FALSE
[12:46:48.755]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:46:48.755]    </control>
[12:46:48.755]    <block atomic="false" info="">
[12:46:48.755]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:46:48.755]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:46:48.755]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:46:48.755]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:46:48.755]      __ap = 0; //lets make sure we reset the access point selection
[12:46:48.755]        // -> [__ap <= 0x00000000]
[12:46:48.755]    </block>
[12:46:48.755]  </sequence>
[12:46:48.755]  
[12:46:48.776]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:46:48.776]  
[12:46:48.776]  <debugvars>
[12:46:48.776]    // Pre-defined
[12:46:48.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:48.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:46:48.776]    __dp=0x00000000
[12:46:48.776]    __ap=0x00000000
[12:46:48.776]    __traceout=0x00000000      (Trace Disabled)
[12:46:48.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:48.776]    __FlashAddr=0x00000000
[12:46:48.776]    __FlashLen=0x00000000
[12:46:48.776]    __FlashArg=0x00000000
[12:46:48.776]    __FlashOp=0x00000000
[12:46:48.776]    __Result=0x00000000
[12:46:48.776]  </debugvars>
[12:46:48.776]  
[12:46:48.776]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:46:48.776]    <block atomic="false" info="">
[12:46:48.776]      __var deviceID = 0;
[12:46:48.776]        // -> [deviceID <= 0x00000000]
[12:46:48.776]      __var version = 0;
[12:46:48.776]        // -> [version <= 0x00000000]
[12:46:48.776]      __var partNum = 0;
[12:46:48.776]        // -> [partNum <= 0x00000000]
[12:46:48.776]      __var manuf = 0;
[12:46:48.776]        // -> [manuf <= 0x00000000]
[12:46:48.776]      __var isMSPM0G1X0X_G3X0X = 0;
[12:46:48.776]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:46:48.776]      __var isProduction = 0;
[12:46:48.776]        // -> [isProduction <= 0x00000000]
[12:46:48.776]      __var continueId = 0;
[12:46:48.776]        // -> [continueId <= 0x00000000]
[12:46:48.776]      deviceID =   Read32(0x41C40004);
[12:46:48.785]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:46:48.785]        // -> [deviceID <= 0x2BB8802F]
[12:46:48.785]      version = deviceID >> 28;
[12:46:48.785]        // -> [version <= 0x00000002]
[12:46:48.785]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:46:48.785]        // -> [partNum <= 0x0000BB88]
[12:46:48.785]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:46:48.785]        // -> [manuf <= 0x00000017]
[12:46:48.785]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:46:48.785]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:46:48.785]      isProduction = (version > 0);
[12:46:48.785]        // -> [isProduction <= 0x00000001]
[12:46:48.785]    </block>
[12:46:48.785]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:46:48.785]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:46:48.785]        // =>  FALSE
[12:46:48.785]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:46:48.785]    </control>
[12:46:48.785]    <control if="continueId == 4" while="" timeout="0" info="">
[12:46:48.785]      // if-block "continueId == 4"
[12:46:48.785]        // =>  FALSE
[12:46:48.785]      // skip if-block "continueId == 4"
[12:46:48.785]    </control>
[12:46:48.785]    <control if="!isProduction" while="" timeout="0" info="">
[12:46:48.785]      // if-block "!isProduction"
[12:46:48.785]        // =>  FALSE
[12:46:48.785]      // skip if-block "!isProduction"
[12:46:48.785]    </control>
[12:46:48.785]  </sequence>
[12:46:48.785]  
[12:50:10.682]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:50:10.682]  
[12:50:10.682]  <debugvars>
[12:50:10.682]    // Pre-defined
[12:50:10.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:10.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:10.682]    __dp=0x00000000
[12:50:10.682]    __ap=0x00000000
[12:50:10.682]    __traceout=0x00000000      (Trace Disabled)
[12:50:10.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:10.682]    __FlashAddr=0x00000000
[12:50:10.682]    __FlashLen=0x00000000
[12:50:10.682]    __FlashArg=0x00000000
[12:50:10.682]    __FlashOp=0x00000000
[12:50:10.682]    __Result=0x00000000
[12:50:10.682]  </debugvars>
[12:50:10.682]  
[12:50:10.682]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:50:10.682]    <block atomic="false" info="">
[12:50:10.682]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:50:10.682]        // -> [isSWJ <= 0x00000001]
[12:50:10.682]      __var hasDormant = __protocol & 0x00020000;
[12:50:10.682]        // -> [hasDormant <= 0x00000000]
[12:50:10.682]      __var protType   = __protocol & 0x0000FFFF;
[12:50:10.682]        // -> [protType <= 0x00000002]
[12:50:10.682]    </block>
[12:50:10.682]    <control if="protType == 1" while="" timeout="0" info="">
[12:50:10.682]      // if-block "protType == 1"
[12:50:10.682]        // =>  FALSE
[12:50:10.682]      // skip if-block "protType == 1"
[12:50:10.682]    </control>
[12:50:10.682]    <control if="protType == 2" while="" timeout="0" info="">
[12:50:10.682]      // if-block "protType == 2"
[12:50:10.682]        // =>  TRUE
[12:50:10.682]      <control if="isSWJ" while="" timeout="0" info="">
[12:50:10.682]        // if-block "isSWJ"
[12:50:10.690]          // =>  TRUE
[12:50:10.690]        <control if="hasDormant" while="" timeout="0" info="">
[12:50:10.690]          // if-block "hasDormant"
[12:50:10.690]            // =>  FALSE
[12:50:10.690]          // skip if-block "hasDormant"
[12:50:10.690]        </control>
[12:50:10.690]        <control if="!hasDormant" while="" timeout="0" info="">
[12:50:10.690]          // if-block "!hasDormant"
[12:50:10.690]            // =>  TRUE
[12:50:10.690]          <block atomic="false" info="">
[12:50:10.690]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:50:10.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:10.692]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:50:10.692]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:50:10.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:50:10.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:10.692]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:50:10.692]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:50:10.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:50:10.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:10.692]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:50:10.692]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:50:10.701]          </block>
[12:50:10.701]          // end if-block "!hasDormant"
[12:50:10.701]        </control>
[12:50:10.701]        // end if-block "isSWJ"
[12:50:10.701]      </control>
[12:50:10.701]      <control if="!isSWJ" while="" timeout="0" info="">
[12:50:10.701]        // if-block "!isSWJ"
[12:50:10.701]          // =>  FALSE
[12:50:10.702]        // skip if-block "!isSWJ"
[12:50:10.702]      </control>
[12:50:10.702]      <block atomic="false" info="">
[12:50:10.702]        ReadDP(0x0);
[12:50:10.702]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:50:10.702]      </block>
[12:50:10.702]      // end if-block "protType == 2"
[12:50:10.702]    </control>
[12:50:10.702]  </sequence>
[12:50:10.702]  
[12:50:10.705]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:50:10.705]  
[12:50:10.705]  <debugvars>
[12:50:10.705]    // Pre-defined
[12:50:10.705]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:10.705]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:10.705]    __dp=0x00000000
[12:50:10.705]    __ap=0x00000000
[12:50:10.705]    __traceout=0x00000000      (Trace Disabled)
[12:50:10.705]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:10.705]    __FlashAddr=0x00000000
[12:50:10.705]    __FlashLen=0x00000000
[12:50:10.705]    __FlashArg=0x00000000
[12:50:10.705]    __FlashOp=0x00000000
[12:50:10.705]    __Result=0x00000000
[12:50:10.705]  </debugvars>
[12:50:10.705]  
[12:50:10.705]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:50:10.705]    <block atomic="false" info="">
[12:50:10.705]      __var SW_DP_ABORT       = 0x0;
[12:50:10.705]        // -> [SW_DP_ABORT <= 0x00000000]
[12:50:10.705]      __var DP_CTRL_STAT      = 0x4;
[12:50:10.705]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:50:10.705]      __var DP_SELECT         = 0x8;
[12:50:10.705]        // -> [DP_SELECT <= 0x00000008]
[12:50:10.705]      __var powered_down      = 0;
[12:50:10.705]        // -> [powered_down <= 0x00000000]
[12:50:10.705]      WriteDP(DP_SELECT, 0x00000000);
[12:50:10.712]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:50:10.712]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:50:10.712]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:50:10.712]        // -> [powered_down <= 0x00000001]
[12:50:10.712]    </block>
[12:50:10.712]    <control if="powered_down" while="" timeout="0" info="">
[12:50:10.712]      // if-block "powered_down"
[12:50:10.712]        // =>  TRUE
[12:50:10.712]      <block atomic="false" info="">
[12:50:10.712]        Message(0, "Debug/System power-up request sent");
[12:50:10.715]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:50:10.717]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:50:10.718]      </block>
[12:50:10.718]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:50:10.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:50:10.719]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:50:10.719]        // while-condition  =>  FALSE
[12:50:10.719]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:50:10.719]      </control>
[12:50:10.719]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:50:10.719]        // if-block "(__protocol & 0xFFFF) == 1"
[12:50:10.719]          // =>  FALSE
[12:50:10.719]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:50:10.719]      </control>
[12:50:10.719]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:50:10.719]        // if-block "(__protocol & 0xFFFF) == 2"
[12:50:10.719]          // =>  TRUE
[12:50:10.719]        <block atomic="false" info="">
[12:50:10.722]          Message(0, "executing SWD power up");
[12:50:10.722]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:50:10.725]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:50:10.725]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:50:10.726]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:50:10.726]        </block>
[12:50:10.726]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:50:10.726]      </control>
[12:50:10.726]      // end if-block "powered_down"
[12:50:10.726]    </control>
[12:50:10.726]    <block atomic="false" info="">
[12:50:10.728]      __var DEBUG_PORT_VAL    = 0;
[12:50:10.728]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:50:10.728]      __var ACCESS_POINT_VAL  = 0;
[12:50:10.728]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:50:10.728]      __ap = 1; 
[12:50:10.728]        // -> [__ap <= 0x00000001]
[12:50:10.728]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:50:10.732]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:50:10.732]      __ap = 4;
[12:50:10.732]        // -> [__ap <= 0x00000004]
[12:50:10.732]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:10.736]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:50:10.736]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:50:10.736]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:10.740]    </block>
[12:50:10.740]    <block atomic="false" info="">
[12:50:10.740]      __var nReset = 0x80;
[12:50:10.740]        // -> [nReset <= 0x00000080]
[12:50:10.740]      __var canReadPins = 0;
[12:50:10.740]        // -> [canReadPins <= 0x00000000]
[12:50:10.740]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:50:10.743]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:50:10.743]        // -> [canReadPins <= 0x00000001]
[12:50:10.743]    </block>
[12:50:10.743]    <control if="" while="1" timeout="200" info="">
[12:50:10.743]      // while "1"  (timeout="200")
[12:50:10.743]      // while-condition  =>  TRUE
[12:50:10.743]      // while "1"  (timeout="200")
[12:50:10.743]      // while-condition  =>  TRUE
[12:50:10.743]      // while "1"  (timeout="200")
[12:50:10.743]      // while-condition  =>  TRUE
[12:50:10.743]      // while "1"  (timeout="200")
[12:50:10.743]      // while-condition  =>  TRUE
[12:50:10.743]      // while "1"  (timeout="200")
[12:50:10.743]      // while-condition  =>  TRUE
[12:50:10.744]      // while "1"  (timeout="200")
[12:50:10.744]      // while-condition  =>  TRUE
[12:50:10.744]      // while "1"  (timeout="200")
[12:50:10.744]      // while-condition  =>  TRUE
[12:50:10.744]      // while "1"  (timeout="200")
[12:50:10.744]      // while-condition  =>  TRUE
[12:50:10.744]      // while "1"  (timeout="200")
[12:50:10.744]      // while-condition  =>  TRUE
[12:50:10.744]      // while "1"  (timeout="200")
[12:50:10.744]      // while-condition  =>  TRUE
[12:50:10.744]      // while "1"  (timeout="200")
[12:50:10.744]      // while-condition  =>  TRUE
[12:50:10.744]      // while "1"  (timeout="200")
[12:50:10.745]      // while-condition  =>  TRUE
[12:50:10.745]      // while "1"  (timeout="200")
[12:50:10.745]      // while-condition  =>  TRUE
[12:50:10.745]      // while "1"  (timeout="200")
[12:50:10.745]      // while-condition  =>  TRUE
[12:50:10.745]      // while "1"  (timeout="200")
[12:50:10.745]      // while-condition  =>  TRUE
[12:50:10.745]      // while "1"  (timeout="200")
[12:50:10.746]      // while-condition  =>  TRUE
[12:50:10.746]      // while "1"  (timeout="200")
[12:50:10.746]      // while-condition  =>  TRUE
[12:50:10.746]      // while "1"  (timeout="200")
[12:50:10.746]      // while-condition  =>  TRUE
[12:50:10.746]      // while "1"  (timeout="200")
[12:50:10.746]      // while-condition  =>  TRUE
[12:50:10.746]      // while "1"  (timeout="200")
[12:50:10.746]      // while-condition  =>  TRUE
[12:50:10.746]      // while "1"  (timeout="200")
[12:50:10.746]      // while-condition  =>  TRUE
[12:50:10.746]      // while "1"  (timeout="200")
[12:50:10.746]      // while-condition  =>  TRUE
[12:50:10.747]      // while "1"  (timeout="200")
[12:50:10.747]      // while-condition  =>  TRUE
[12:50:10.747]      // while "1"  (timeout="200")
[12:50:10.747]      // while-condition  =>  TRUE
[12:50:10.747]      // while "1"  (timeout="200")
[12:50:10.747]      // while-condition  =>  TRUE
[12:50:10.747]      // while "1"  (timeout="200")
[12:50:10.747]      // while-condition  =>  TRUE
[12:50:10.747]      // while "1"  (timeout="200")
[12:50:10.747]      // while-condition  =>  TRUE
[12:50:10.747]      // while "1"  (timeout="200")
[12:50:10.747]      // while-condition  =>  TRUE
[12:50:10.747]      // while "1"  (timeout="200")
[12:50:10.749]      // while-condition  =>  TRUE
[12:50:10.749]      // while "1"  (timeout="200")
[12:50:10.749]      // while-condition  =>  TRUE
[12:50:10.749]      // while "1"  (timeout="200")
[12:50:10.749]      // while-condition  =>  TRUE
[12:50:10.749]      // while "1"  (timeout="200")
[12:50:10.749]      // while-condition  =>  TRUE
[12:50:10.749]      // while "1"  (timeout="200")
[12:50:10.749]      // while-condition  =>  TRUE
[12:50:10.749]      // while "1"  (timeout="200")
[12:50:10.749]      // while-condition  =>  TRUE
[12:50:10.750]      // while "1"  (timeout="200")
[12:50:10.750]      // while-condition  =>  TRUE
[12:50:10.750]      // while "1"  (timeout="200")
[12:50:10.750]      // while-condition  =>  TRUE
[12:50:10.750]      // while "1"  (timeout="200")
[12:50:10.750]      // while-condition  =>  TRUE
[12:50:10.750]      // while "1"  (timeout="200")
[12:50:10.750]      // while-condition  =>  TRUE
[12:50:10.750]      // while "1"  (timeout="200")
[12:50:10.750]      // while-condition  =>  TRUE
[12:50:10.750]      // while "1"  (timeout="200")
[12:50:10.751]      // while-condition  =>  TRUE
[12:50:10.751]      // while "1"  (timeout="200")
[12:50:10.751]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.752]      // while-condition  =>  TRUE
[12:50:10.752]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.754]      // while "1"  (timeout="200")
[12:50:10.754]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.755]      // while-condition  =>  TRUE
[12:50:10.755]      // while "1"  (timeout="200")
[12:50:10.757]      // while-condition  =>  TRUE
[12:50:10.757]      // while "1"  (timeout="200")
[12:50:10.757]      // while  =>  TIMEOUT
[12:50:10.757]      // end while "1"
[12:50:10.757]    </control>
[12:50:10.757]    <control if="canReadPins" while="" timeout="0" info="">
[12:50:10.757]      // if-block "canReadPins"
[12:50:10.757]        // =>  TRUE
[12:50:10.757]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:50:10.757]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:50:10.759]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:50:10.759]        // while-condition  =>  FALSE
[12:50:10.759]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:50:10.759]      </control>
[12:50:10.759]      // end if-block "canReadPins"
[12:50:10.759]    </control>
[12:50:10.759]    <control if="!canReadPins" while="" timeout="0" info="">
[12:50:10.759]      // if-block "!canReadPins"
[12:50:10.759]        // =>  FALSE
[12:50:10.761]      // skip if-block "!canReadPins"
[12:50:10.761]    </control>
[12:50:10.761]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:50:10.761]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:10.761]        // =>  TRUE
[12:50:10.762]      <block atomic="false" info="">
[12:50:10.762]        WriteAP(0x00, 0x190008);
[12:50:10.763]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:10.763]        WriteAP(0xF0, 0x01);
[12:50:10.767]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:10.767]      </block>
[12:50:10.767]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:10.767]    </control>
[12:50:10.767]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:50:10.767]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:10.767]        // =>  FALSE
[12:50:10.767]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:10.767]    </control>
[12:50:10.767]    <block atomic="false" info="">
[12:50:10.767]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:10.771]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:50:10.771]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:50:10.771]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:10.772]      __ap = 0; //lets make sure we reset the access point selection
[12:50:10.772]        // -> [__ap <= 0x00000000]
[12:50:10.772]    </block>
[12:50:10.772]  </sequence>
[12:50:10.772]  
[12:50:10.792]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:50:10.792]  
[12:50:10.792]  <debugvars>
[12:50:10.792]    // Pre-defined
[12:50:10.792]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:10.792]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:10.792]    __dp=0x00000000
[12:50:10.792]    __ap=0x00000000
[12:50:10.792]    __traceout=0x00000000      (Trace Disabled)
[12:50:10.792]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:10.792]    __FlashAddr=0x00000000
[12:50:10.792]    __FlashLen=0x00000000
[12:50:10.792]    __FlashArg=0x00000000
[12:50:10.792]    __FlashOp=0x00000000
[12:50:10.792]    __Result=0x00000000
[12:50:10.792]  </debugvars>
[12:50:10.792]  
[12:50:10.792]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:50:10.792]    <block atomic="false" info="">
[12:50:10.792]      __var deviceID = 0;
[12:50:10.792]        // -> [deviceID <= 0x00000000]
[12:50:10.792]      __var version = 0;
[12:50:10.792]        // -> [version <= 0x00000000]
[12:50:10.792]      __var partNum = 0;
[12:50:10.792]        // -> [partNum <= 0x00000000]
[12:50:10.792]      __var manuf = 0;
[12:50:10.792]        // -> [manuf <= 0x00000000]
[12:50:10.792]      __var isMSPM0G1X0X_G3X0X = 0;
[12:50:10.792]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:50:10.792]      __var isProduction = 0;
[12:50:10.792]        // -> [isProduction <= 0x00000000]
[12:50:10.792]      __var continueId = 0;
[12:50:10.792]        // -> [continueId <= 0x00000000]
[12:50:10.796]      deviceID =   Read32(0x41C40004);
[12:50:10.796]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:50:10.796]        // -> [deviceID <= 0x2BB8802F]
[12:50:10.796]      version = deviceID >> 28;
[12:50:10.796]        // -> [version <= 0x00000002]
[12:50:10.796]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:50:10.796]        // -> [partNum <= 0x0000BB88]
[12:50:10.796]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:50:10.796]        // -> [manuf <= 0x00000017]
[12:50:10.796]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:50:10.796]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:50:10.796]      isProduction = (version > 0);
[12:50:10.796]        // -> [isProduction <= 0x00000001]
[12:50:10.796]    </block>
[12:50:10.796]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:50:10.796]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:50:10.796]        // =>  FALSE
[12:50:10.796]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:50:10.802]    </control>
[12:50:10.802]    <control if="continueId == 4" while="" timeout="0" info="">
[12:50:10.802]      // if-block "continueId == 4"
[12:50:10.802]        // =>  FALSE
[12:50:10.802]      // skip if-block "continueId == 4"
[12:50:10.802]    </control>
[12:50:10.802]    <control if="!isProduction" while="" timeout="0" info="">
[12:50:10.802]      // if-block "!isProduction"
[12:50:10.802]        // =>  FALSE
[12:50:10.802]      // skip if-block "!isProduction"
[12:50:10.802]    </control>
[12:50:10.802]  </sequence>
[12:50:10.802]  
[12:50:49.590]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:50:49.590]  
[12:50:49.602]  <debugvars>
[12:50:49.602]    // Pre-defined
[12:50:49.602]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:49.602]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:49.602]    __dp=0x00000000
[12:50:49.602]    __ap=0x00000000
[12:50:49.602]    __traceout=0x00000000      (Trace Disabled)
[12:50:49.602]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:49.603]    __FlashAddr=0x00000000
[12:50:49.603]    __FlashLen=0x00000000
[12:50:49.603]    __FlashArg=0x00000000
[12:50:49.603]    __FlashOp=0x00000000
[12:50:49.603]    __Result=0x00000000
[12:50:49.603]  </debugvars>
[12:50:49.603]  
[12:50:49.603]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:50:49.603]    <block atomic="false" info="">
[12:50:49.603]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:50:49.603]        // -> [isSWJ <= 0x00000001]
[12:50:49.603]      __var hasDormant = __protocol & 0x00020000;
[12:50:49.603]        // -> [hasDormant <= 0x00000000]
[12:50:49.603]      __var protType   = __protocol & 0x0000FFFF;
[12:50:49.603]        // -> [protType <= 0x00000002]
[12:50:49.603]    </block>
[12:50:49.606]    <control if="protType == 1" while="" timeout="0" info="">
[12:50:49.606]      // if-block "protType == 1"
[12:50:49.606]        // =>  FALSE
[12:50:49.606]      // skip if-block "protType == 1"
[12:50:49.606]    </control>
[12:50:49.606]    <control if="protType == 2" while="" timeout="0" info="">
[12:50:49.606]      // if-block "protType == 2"
[12:50:49.606]        // =>  TRUE
[12:50:49.606]      <control if="isSWJ" while="" timeout="0" info="">
[12:50:49.606]        // if-block "isSWJ"
[12:50:49.607]          // =>  TRUE
[12:50:49.607]        <control if="hasDormant" while="" timeout="0" info="">
[12:50:49.607]          // if-block "hasDormant"
[12:50:49.607]            // =>  FALSE
[12:50:49.607]          // skip if-block "hasDormant"
[12:50:49.607]        </control>
[12:50:49.608]        <control if="!hasDormant" while="" timeout="0" info="">
[12:50:49.608]          // if-block "!hasDormant"
[12:50:49.608]            // =>  TRUE
[12:50:49.608]          <block atomic="false" info="">
[12:50:49.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:50:49.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:49.608]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:50:49.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:50:49.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:50:49.612]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:49.613]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:50:49.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:50:49.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:50:49.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:49.616]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:50:49.617]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:50:49.617]          </block>
[12:50:49.617]          // end if-block "!hasDormant"
[12:50:49.617]        </control>
[12:50:49.618]        // end if-block "isSWJ"
[12:50:49.618]      </control>
[12:50:49.618]      <control if="!isSWJ" while="" timeout="0" info="">
[12:50:49.618]        // if-block "!isSWJ"
[12:50:49.618]          // =>  FALSE
[12:50:49.618]        // skip if-block "!isSWJ"
[12:50:49.618]      </control>
[12:50:49.618]      <block atomic="false" info="">
[12:50:49.618]        ReadDP(0x0);
[12:50:49.620]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:50:49.620]      </block>
[12:50:49.620]      // end if-block "protType == 2"
[12:50:49.620]    </control>
[12:50:49.620]  </sequence>
[12:50:49.620]  
[12:50:49.629]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:50:49.629]  
[12:50:49.629]  <debugvars>
[12:50:49.630]    // Pre-defined
[12:50:49.630]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:49.630]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:49.630]    __dp=0x00000000
[12:50:49.631]    __ap=0x00000000
[12:50:49.631]    __traceout=0x00000000      (Trace Disabled)
[12:50:49.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:49.631]    __FlashAddr=0x00000000
[12:50:49.631]    __FlashLen=0x00000000
[12:50:49.631]    __FlashArg=0x00000000
[12:50:49.631]    __FlashOp=0x00000000
[12:50:49.631]    __Result=0x00000000
[12:50:49.631]  </debugvars>
[12:50:49.632]  
[12:50:49.632]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:50:49.632]    <block atomic="false" info="">
[12:50:49.632]      __var SW_DP_ABORT       = 0x0;
[12:50:49.632]        // -> [SW_DP_ABORT <= 0x00000000]
[12:50:49.632]      __var DP_CTRL_STAT      = 0x4;
[12:50:49.632]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:50:49.632]      __var DP_SELECT         = 0x8;
[12:50:49.632]        // -> [DP_SELECT <= 0x00000008]
[12:50:49.632]      __var powered_down      = 0;
[12:50:49.633]        // -> [powered_down <= 0x00000000]
[12:50:49.633]      WriteDP(DP_SELECT, 0x00000000);
[12:50:49.634]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:50:49.634]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:50:49.636]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:50:49.636]        // -> [powered_down <= 0x00000001]
[12:50:49.636]    </block>
[12:50:49.636]    <control if="powered_down" while="" timeout="0" info="">
[12:50:49.636]      // if-block "powered_down"
[12:50:49.636]        // =>  TRUE
[12:50:49.636]      <block atomic="false" info="">
[12:50:49.636]        Message(0, "Debug/System power-up request sent");
[12:50:49.638]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:50:49.640]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:50:49.640]      </block>
[12:50:49.641]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:50:49.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:50:49.644]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:50:49.644]        // while-condition  =>  FALSE
[12:50:49.644]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:50:49.644]      </control>
[12:50:49.644]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:50:49.645]        // if-block "(__protocol & 0xFFFF) == 1"
[12:50:49.645]          // =>  FALSE
[12:50:49.645]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:50:49.645]      </control>
[12:50:49.645]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:50:49.645]        // if-block "(__protocol & 0xFFFF) == 2"
[12:50:49.645]          // =>  TRUE
[12:50:49.645]        <block atomic="false" info="">
[12:50:49.645]          Message(0, "executing SWD power up");
[12:50:49.648]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:50:49.649]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:50:49.649]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:50:49.649]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:50:49.649]        </block>
[12:50:49.649]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:50:49.649]      </control>
[12:50:49.649]      // end if-block "powered_down"
[12:50:49.656]    </control>
[12:50:49.656]    <block atomic="false" info="">
[12:50:49.656]      __var DEBUG_PORT_VAL    = 0;
[12:50:49.656]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:50:49.656]      __var ACCESS_POINT_VAL  = 0;
[12:50:49.656]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:50:49.656]      __ap = 1; 
[12:50:49.656]        // -> [__ap <= 0x00000001]
[12:50:49.656]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:50:49.657]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:50:49.657]      __ap = 4;
[12:50:49.657]        // -> [__ap <= 0x00000004]
[12:50:49.657]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:49.668]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:50:49.668]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:50:49.668]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:49.668]    </block>
[12:50:49.668]    <block atomic="false" info="">
[12:50:49.668]      __var nReset = 0x80;
[12:50:49.668]        // -> [nReset <= 0x00000080]
[12:50:49.668]      __var canReadPins = 0;
[12:50:49.668]        // -> [canReadPins <= 0x00000000]
[12:50:49.668]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:50:49.668]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:50:49.668]        // -> [canReadPins <= 0x00000001]
[12:50:49.668]    </block>
[12:50:49.668]    <control if="" while="1" timeout="200" info="">
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.668]      // while-condition  =>  TRUE
[12:50:49.668]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.676]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.676]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.676]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.676]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.676]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.676]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.676]      // while "1"  (timeout="200")
[12:50:49.676]      // while-condition  =>  TRUE
[12:50:49.678]      // while "1"  (timeout="200")
[12:50:49.678]      // while  =>  TIMEOUT
[12:50:49.678]      // end while "1"
[12:50:49.678]    </control>
[12:50:49.678]    <control if="canReadPins" while="" timeout="0" info="">
[12:50:49.678]      // if-block "canReadPins"
[12:50:49.678]        // =>  TRUE
[12:50:49.678]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:50:49.678]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:50:49.678]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:50:49.678]        // while-condition  =>  FALSE
[12:50:49.678]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:50:49.678]      </control>
[12:50:49.678]      // end if-block "canReadPins"
[12:50:49.678]    </control>
[12:50:49.678]    <control if="!canReadPins" while="" timeout="0" info="">
[12:50:49.678]      // if-block "!canReadPins"
[12:50:49.678]        // =>  FALSE
[12:50:49.678]      // skip if-block "!canReadPins"
[12:50:49.678]    </control>
[12:50:49.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:50:49.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:49.678]        // =>  TRUE
[12:50:49.678]      <block atomic="false" info="">
[12:50:49.678]        WriteAP(0x00, 0x190008);
[12:50:49.686]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:49.686]        WriteAP(0xF0, 0x01);
[12:50:49.686]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:49.686]      </block>
[12:50:49.686]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:49.686]    </control>
[12:50:49.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:50:49.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:49.686]        // =>  FALSE
[12:50:49.686]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:49.686]    </control>
[12:50:49.686]    <block atomic="false" info="">
[12:50:49.686]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:49.686]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:50:49.686]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:50:49.686]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:49.686]      __ap = 0; //lets make sure we reset the access point selection
[12:50:49.686]        // -> [__ap <= 0x00000000]
[12:50:49.686]    </block>
[12:50:49.697]  </sequence>
[12:50:49.697]  
[12:50:49.727]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:50:49.727]  
[12:50:49.727]  <debugvars>
[12:50:49.727]    // Pre-defined
[12:50:49.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:49.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:49.727]    __dp=0x00000000
[12:50:49.727]    __ap=0x00000000
[12:50:49.727]    __traceout=0x00000000      (Trace Disabled)
[12:50:49.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:49.727]    __FlashAddr=0x00000000
[12:50:49.727]    __FlashLen=0x00000000
[12:50:49.727]    __FlashArg=0x00000000
[12:50:49.727]    __FlashOp=0x00000000
[12:50:49.727]    __Result=0x00000000
[12:50:49.727]  </debugvars>
[12:50:49.727]  
[12:50:49.727]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:50:49.730]    <block atomic="false" info="">
[12:50:49.730]      __var deviceID = 0;
[12:50:49.730]        // -> [deviceID <= 0x00000000]
[12:50:49.730]      __var version = 0;
[12:50:49.730]        // -> [version <= 0x00000000]
[12:50:49.730]      __var partNum = 0;
[12:50:49.730]        // -> [partNum <= 0x00000000]
[12:50:49.730]      __var manuf = 0;
[12:50:49.730]        // -> [manuf <= 0x00000000]
[12:50:49.730]      __var isMSPM0G1X0X_G3X0X = 0;
[12:50:49.730]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:50:49.730]      __var isProduction = 0;
[12:50:49.730]        // -> [isProduction <= 0x00000000]
[12:50:49.730]      __var continueId = 0;
[12:50:49.730]        // -> [continueId <= 0x00000000]
[12:50:49.730]      deviceID =   Read32(0x41C40004);
[12:50:49.737]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:50:49.737]        // -> [deviceID <= 0x2BB8802F]
[12:50:49.737]      version = deviceID >> 28;
[12:50:49.737]        // -> [version <= 0x00000002]
[12:50:49.737]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:50:49.737]        // -> [partNum <= 0x0000BB88]
[12:50:49.737]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:50:49.737]        // -> [manuf <= 0x00000017]
[12:50:49.737]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:50:49.737]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:50:49.737]      isProduction = (version > 0);
[12:50:49.737]        // -> [isProduction <= 0x00000001]
[12:50:49.737]    </block>
[12:50:49.737]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:50:49.737]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:50:49.737]        // =>  FALSE
[12:50:49.737]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:50:49.737]    </control>
[12:50:49.737]    <control if="continueId == 4" while="" timeout="0" info="">
[12:50:49.737]      // if-block "continueId == 4"
[12:50:49.737]        // =>  FALSE
[12:50:49.737]      // skip if-block "continueId == 4"
[12:50:49.737]    </control>
[12:50:49.737]    <control if="!isProduction" while="" timeout="0" info="">
[12:50:49.737]      // if-block "!isProduction"
[12:50:49.737]        // =>  FALSE
[12:50:49.737]      // skip if-block "!isProduction"
[12:50:49.737]    </control>
[12:50:49.737]  </sequence>
[12:50:49.737]  
[12:51:15.482]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:51:15.482]  
[12:51:15.496]  <debugvars>
[12:51:15.496]    // Pre-defined
[12:51:15.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:51:15.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:51:15.496]    __dp=0x00000000
[12:51:15.496]    __ap=0x00000000
[12:51:15.496]    __traceout=0x00000000      (Trace Disabled)
[12:51:15.496]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:51:15.496]    __FlashAddr=0x00000000
[12:51:15.496]    __FlashLen=0x00000000
[12:51:15.496]    __FlashArg=0x00000000
[12:51:15.496]    __FlashOp=0x00000000
[12:51:15.496]    __Result=0x00000000
[12:51:15.496]  </debugvars>
[12:51:15.496]  
[12:51:15.496]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:51:15.496]    <block atomic="false" info="">
[12:51:15.496]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:51:15.496]        // -> [isSWJ <= 0x00000001]
[12:51:15.496]      __var hasDormant = __protocol & 0x00020000;
[12:51:15.496]        // -> [hasDormant <= 0x00000000]
[12:51:15.496]      __var protType   = __protocol & 0x0000FFFF;
[12:51:15.496]        // -> [protType <= 0x00000002]
[12:51:15.496]    </block>
[12:51:15.496]    <control if="protType == 1" while="" timeout="0" info="">
[12:51:15.496]      // if-block "protType == 1"
[12:51:15.496]        // =>  FALSE
[12:51:15.496]      // skip if-block "protType == 1"
[12:51:15.496]    </control>
[12:51:15.496]    <control if="protType == 2" while="" timeout="0" info="">
[12:51:15.496]      // if-block "protType == 2"
[12:51:15.496]        // =>  TRUE
[12:51:15.496]      <control if="isSWJ" while="" timeout="0" info="">
[12:51:15.496]        // if-block "isSWJ"
[12:51:15.496]          // =>  TRUE
[12:51:15.496]        <control if="hasDormant" while="" timeout="0" info="">
[12:51:15.496]          // if-block "hasDormant"
[12:51:15.496]            // =>  FALSE
[12:51:15.496]          // skip if-block "hasDormant"
[12:51:15.496]        </control>
[12:51:15.500]        <control if="!hasDormant" while="" timeout="0" info="">
[12:51:15.500]          // if-block "!hasDormant"
[12:51:15.500]            // =>  TRUE
[12:51:15.500]          <block atomic="false" info="">
[12:51:15.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:51:15.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:51:15.501]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:51:15.501]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:51:15.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:51:15.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:51:15.501]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:51:15.501]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:51:15.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:51:15.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:51:15.501]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:51:15.501]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:51:15.511]          </block>
[12:51:15.511]          // end if-block "!hasDormant"
[12:51:15.511]        </control>
[12:51:15.511]        // end if-block "isSWJ"
[12:51:15.511]      </control>
[12:51:15.511]      <control if="!isSWJ" while="" timeout="0" info="">
[12:51:15.511]        // if-block "!isSWJ"
[12:51:15.511]          // =>  FALSE
[12:51:15.512]        // skip if-block "!isSWJ"
[12:51:15.512]      </control>
[12:51:15.512]      <block atomic="false" info="">
[12:51:15.512]        ReadDP(0x0);
[12:51:15.512]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:51:15.512]      </block>
[12:51:15.512]      // end if-block "protType == 2"
[12:51:15.512]    </control>
[12:51:15.512]  </sequence>
[12:51:15.512]  
[12:51:15.512]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:51:15.512]  
[12:51:15.512]  <debugvars>
[12:51:15.512]    // Pre-defined
[12:51:15.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:51:15.517]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:51:15.517]    __dp=0x00000000
[12:51:15.517]    __ap=0x00000000
[12:51:15.517]    __traceout=0x00000000      (Trace Disabled)
[12:51:15.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:51:15.517]    __FlashAddr=0x00000000
[12:51:15.517]    __FlashLen=0x00000000
[12:51:15.517]    __FlashArg=0x00000000
[12:51:15.517]    __FlashOp=0x00000000
[12:51:15.517]    __Result=0x00000000
[12:51:15.517]  </debugvars>
[12:51:15.517]  
[12:51:15.517]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:51:15.517]    <block atomic="false" info="">
[12:51:15.517]      __var SW_DP_ABORT       = 0x0;
[12:51:15.517]        // -> [SW_DP_ABORT <= 0x00000000]
[12:51:15.517]      __var DP_CTRL_STAT      = 0x4;
[12:51:15.517]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:51:15.517]      __var DP_SELECT         = 0x8;
[12:51:15.517]        // -> [DP_SELECT <= 0x00000008]
[12:51:15.517]      __var powered_down      = 0;
[12:51:15.517]        // -> [powered_down <= 0x00000000]
[12:51:15.517]      WriteDP(DP_SELECT, 0x00000000);
[12:51:15.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:51:15.522]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:51:15.522]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:51:15.522]        // -> [powered_down <= 0x00000001]
[12:51:15.522]    </block>
[12:51:15.522]    <control if="powered_down" while="" timeout="0" info="">
[12:51:15.522]      // if-block "powered_down"
[12:51:15.522]        // =>  TRUE
[12:51:15.522]      <block atomic="false" info="">
[12:51:15.522]        Message(0, "Debug/System power-up request sent");
[12:51:15.527]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:51:15.527]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:51:15.527]      </block>
[12:51:15.527]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:51:15.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:51:15.527]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:51:15.527]        // while-condition  =>  FALSE
[12:51:15.527]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:51:15.527]      </control>
[12:51:15.527]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:51:15.531]        // if-block "(__protocol & 0xFFFF) == 1"
[12:51:15.531]          // =>  FALSE
[12:51:15.531]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:51:15.531]      </control>
[12:51:15.531]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:51:15.531]        // if-block "(__protocol & 0xFFFF) == 2"
[12:51:15.531]          // =>  TRUE
[12:51:15.531]        <block atomic="false" info="">
[12:51:15.532]          Message(0, "executing SWD power up");
[12:51:15.532]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:51:15.532]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:51:15.532]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:51:15.532]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:51:15.532]        </block>
[12:51:15.532]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:51:15.532]      </control>
[12:51:15.537]      // end if-block "powered_down"
[12:51:15.537]    </control>
[12:51:15.537]    <block atomic="false" info="">
[12:51:15.537]      __var DEBUG_PORT_VAL    = 0;
[12:51:15.537]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:51:15.537]      __var ACCESS_POINT_VAL  = 0;
[12:51:15.537]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:51:15.537]      __ap = 1; 
[12:51:15.537]        // -> [__ap <= 0x00000001]
[12:51:15.537]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:51:15.537]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:51:15.537]      __ap = 4;
[12:51:15.537]        // -> [__ap <= 0x00000004]
[12:51:15.541]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:51:15.542]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:51:15.542]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:51:15.542]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:51:15.542]    </block>
[12:51:15.542]    <block atomic="false" info="">
[12:51:15.542]      __var nReset = 0x80;
[12:51:15.542]        // -> [nReset <= 0x00000080]
[12:51:15.542]      __var canReadPins = 0;
[12:51:15.552]        // -> [canReadPins <= 0x00000000]
[12:51:15.552]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:51:15.552]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:51:15.552]        // -> [canReadPins <= 0x00000001]
[12:51:15.552]    </block>
[12:51:15.552]    <control if="" while="1" timeout="200" info="">
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.552]      // while-condition  =>  TRUE
[12:51:15.552]      // while "1"  (timeout="200")
[12:51:15.562]      // while-condition  =>  TRUE
[12:51:15.562]      // while "1"  (timeout="200")
[12:51:15.562]      // while  =>  TIMEOUT
[12:51:15.562]      // end while "1"
[12:51:15.562]    </control>
[12:51:15.562]    <control if="canReadPins" while="" timeout="0" info="">
[12:51:15.562]      // if-block "canReadPins"
[12:51:15.562]        // =>  TRUE
[12:51:15.562]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:51:15.562]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:51:15.562]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:51:15.562]        // while-condition  =>  FALSE
[12:51:15.562]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:51:15.562]      </control>
[12:51:15.562]      // end if-block "canReadPins"
[12:51:15.562]    </control>
[12:51:15.562]    <control if="!canReadPins" while="" timeout="0" info="">
[12:51:15.562]      // if-block "!canReadPins"
[12:51:15.562]        // =>  FALSE
[12:51:15.562]      // skip if-block "!canReadPins"
[12:51:15.562]    </control>
[12:51:15.562]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:51:15.562]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:51:15.562]        // =>  TRUE
[12:51:15.562]      <block atomic="false" info="">
[12:51:15.562]        WriteAP(0x00, 0x190008);
[12:51:15.562]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:51:15.562]        WriteAP(0xF0, 0x01);
[12:51:15.572]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:51:15.572]      </block>
[12:51:15.572]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:51:15.572]    </control>
[12:51:15.572]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:51:15.572]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:51:15.572]        // =>  FALSE
[12:51:15.572]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:51:15.572]    </control>
[12:51:15.572]    <block atomic="false" info="">
[12:51:15.572]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:51:15.572]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:51:15.572]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:51:15.572]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:51:15.572]      __ap = 0; //lets make sure we reset the access point selection
[12:51:15.572]        // -> [__ap <= 0x00000000]
[12:51:15.572]    </block>
[12:51:15.572]  </sequence>
[12:51:15.572]  
[12:51:15.592]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:51:15.592]  
[12:51:15.592]  <debugvars>
[12:51:15.592]    // Pre-defined
[12:51:15.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:51:15.592]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:51:15.592]    __dp=0x00000000
[12:51:15.592]    __ap=0x00000000
[12:51:15.592]    __traceout=0x00000000      (Trace Disabled)
[12:51:15.592]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:51:15.592]    __FlashAddr=0x00000000
[12:51:15.592]    __FlashLen=0x00000000
[12:51:15.592]    __FlashArg=0x00000000
[12:51:15.592]    __FlashOp=0x00000000
[12:51:15.592]    __Result=0x00000000
[12:51:15.592]  </debugvars>
[12:51:15.592]  
[12:51:15.592]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:51:15.592]    <block atomic="false" info="">
[12:51:15.592]      __var deviceID = 0;
[12:51:15.592]        // -> [deviceID <= 0x00000000]
[12:51:15.592]      __var version = 0;
[12:51:15.592]        // -> [version <= 0x00000000]
[12:51:15.592]      __var partNum = 0;
[12:51:15.592]        // -> [partNum <= 0x00000000]
[12:51:15.592]      __var manuf = 0;
[12:51:15.592]        // -> [manuf <= 0x00000000]
[12:51:15.592]      __var isMSPM0G1X0X_G3X0X = 0;
[12:51:15.592]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:51:15.592]      __var isProduction = 0;
[12:51:15.592]        // -> [isProduction <= 0x00000000]
[12:51:15.592]      __var continueId = 0;
[12:51:15.592]        // -> [continueId <= 0x00000000]
[12:51:15.592]      deviceID =   Read32(0x41C40004);
[12:51:15.602]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:51:15.602]        // -> [deviceID <= 0x2BB8802F]
[12:51:15.602]      version = deviceID >> 28;
[12:51:15.602]        // -> [version <= 0x00000002]
[12:51:15.602]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:51:15.602]        // -> [partNum <= 0x0000BB88]
[12:51:15.602]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:51:15.602]        // -> [manuf <= 0x00000017]
[12:51:15.602]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:51:15.602]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:51:15.602]      isProduction = (version > 0);
[12:51:15.602]        // -> [isProduction <= 0x00000001]
[12:51:15.602]    </block>
[12:51:15.602]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:51:15.602]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:51:15.602]        // =>  FALSE
[12:51:15.602]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:51:15.602]    </control>
[12:51:15.602]    <control if="continueId == 4" while="" timeout="0" info="">
[12:51:15.602]      // if-block "continueId == 4"
[12:51:15.602]        // =>  FALSE
[12:51:15.602]      // skip if-block "continueId == 4"
[12:51:15.602]    </control>
[12:51:15.602]    <control if="!isProduction" while="" timeout="0" info="">
[12:51:15.602]      // if-block "!isProduction"
[12:51:15.602]        // =>  FALSE
[12:51:15.602]      // skip if-block "!isProduction"
[12:51:15.602]    </control>
[12:51:15.602]  </sequence>
[12:51:15.602]  
[12:51:47.423]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:51:47.423]  
[12:51:47.423]  <debugvars>
[12:51:47.423]    // Pre-defined
[12:51:47.424]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:51:47.424]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:51:47.424]    __dp=0x00000000
[12:51:47.424]    __ap=0x00000000
[12:51:47.424]    __traceout=0x00000000      (Trace Disabled)
[12:51:47.424]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:51:47.424]    __FlashAddr=0x00000000
[12:51:47.424]    __FlashLen=0x00000000
[12:51:47.424]    __FlashArg=0x00000000
[12:51:47.424]    __FlashOp=0x00000000
[12:51:47.424]    __Result=0x00000000
[12:51:47.424]  </debugvars>
[12:51:47.424]  
[12:51:47.424]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:51:47.424]    <block atomic="false" info="">
[12:51:47.424]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:51:47.424]        // -> [isSWJ <= 0x00000001]
[12:51:47.424]      __var hasDormant = __protocol & 0x00020000;
[12:51:47.424]        // -> [hasDormant <= 0x00000000]
[12:51:47.424]      __var protType   = __protocol & 0x0000FFFF;
[12:51:47.424]        // -> [protType <= 0x00000002]
[12:51:47.426]    </block>
[12:51:47.426]    <control if="protType == 1" while="" timeout="0" info="">
[12:51:47.426]      // if-block "protType == 1"
[12:51:47.426]        // =>  FALSE
[12:51:47.426]      // skip if-block "protType == 1"
[12:51:47.426]    </control>
[12:51:47.426]    <control if="protType == 2" while="" timeout="0" info="">
[12:51:47.426]      // if-block "protType == 2"
[12:51:47.426]        // =>  TRUE
[12:51:47.426]      <control if="isSWJ" while="" timeout="0" info="">
[12:51:47.426]        // if-block "isSWJ"
[12:51:47.426]          // =>  TRUE
[12:51:47.426]        <control if="hasDormant" while="" timeout="0" info="">
[12:51:47.426]          // if-block "hasDormant"
[12:51:47.427]            // =>  FALSE
[12:51:47.427]          // skip if-block "hasDormant"
[12:51:47.427]        </control>
[12:51:47.427]        <control if="!hasDormant" while="" timeout="0" info="">
[12:51:47.427]          // if-block "!hasDormant"
[12:51:47.427]            // =>  TRUE
[12:51:47.427]          <block atomic="false" info="">
[12:51:47.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:51:47.429]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:51:47.429]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:51:47.430]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:51:47.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:51:47.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:51:47.430]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:51:47.433]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:51:47.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:51:47.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:51:47.433]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:51:47.433]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:51:47.433]          </block>
[12:51:47.433]          // end if-block "!hasDormant"
[12:51:47.433]        </control>
[12:51:47.433]        // end if-block "isSWJ"
[12:51:47.433]      </control>
[12:51:47.433]      <control if="!isSWJ" while="" timeout="0" info="">
[12:51:47.433]        // if-block "!isSWJ"
[12:51:47.433]          // =>  FALSE
[12:51:47.433]        // skip if-block "!isSWJ"
[12:51:47.433]      </control>
[12:51:47.433]      <block atomic="false" info="">
[12:51:47.433]        ReadDP(0x0);
[12:51:47.433]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:51:47.433]      </block>
[12:51:47.433]      // end if-block "protType == 2"
[12:51:47.433]    </control>
[12:51:47.433]  </sequence>
[12:51:47.433]  
[12:51:47.442]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:51:47.442]  
[12:51:47.442]  <debugvars>
[12:51:47.442]    // Pre-defined
[12:51:47.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:51:47.442]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:51:47.442]    __dp=0x00000000
[12:51:47.442]    __ap=0x00000000
[12:51:47.442]    __traceout=0x00000000      (Trace Disabled)
[12:51:47.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:51:47.443]    __FlashAddr=0x00000000
[12:51:47.443]    __FlashLen=0x00000000
[12:51:47.443]    __FlashArg=0x00000000
[12:51:47.443]    __FlashOp=0x00000000
[12:51:47.443]    __Result=0x00000000
[12:51:47.444]  </debugvars>
[12:51:47.444]  
[12:51:47.444]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:51:47.444]    <block atomic="false" info="">
[12:51:47.444]      __var SW_DP_ABORT       = 0x0;
[12:51:47.444]        // -> [SW_DP_ABORT <= 0x00000000]
[12:51:47.444]      __var DP_CTRL_STAT      = 0x4;
[12:51:47.444]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:51:47.444]      __var DP_SELECT         = 0x8;
[12:51:47.444]        // -> [DP_SELECT <= 0x00000008]
[12:51:47.444]      __var powered_down      = 0;
[12:51:47.444]        // -> [powered_down <= 0x00000000]
[12:51:47.444]      WriteDP(DP_SELECT, 0x00000000);
[12:51:47.446]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:51:47.446]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:51:47.446]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:51:47.446]        // -> [powered_down <= 0x00000001]
[12:51:47.446]    </block>
[12:51:47.446]    <control if="powered_down" while="" timeout="0" info="">
[12:51:47.446]      // if-block "powered_down"
[12:51:47.446]        // =>  TRUE
[12:51:47.450]      <block atomic="false" info="">
[12:51:47.450]        Message(0, "Debug/System power-up request sent");
[12:51:47.451]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:51:47.453]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:51:47.453]      </block>
[12:51:47.453]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:51:47.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:51:47.454]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:51:47.454]        // while-condition  =>  FALSE
[12:51:47.454]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:51:47.454]      </control>
[12:51:47.454]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:51:47.454]        // if-block "(__protocol & 0xFFFF) == 1"
[12:51:47.454]          // =>  FALSE
[12:51:47.454]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:51:47.454]      </control>
[12:51:47.454]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:51:47.454]        // if-block "(__protocol & 0xFFFF) == 2"
[12:51:47.454]          // =>  TRUE
[12:51:47.454]        <block atomic="false" info="">
[12:51:47.454]          Message(0, "executing SWD power up");
[12:51:47.454]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:51:47.460]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:51:47.460]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:51:47.462]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:51:47.462]        </block>
[12:51:47.462]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:51:47.464]      </control>
[12:51:47.464]      // end if-block "powered_down"
[12:51:47.464]    </control>
[12:51:47.464]    <block atomic="false" info="">
[12:51:47.464]      __var DEBUG_PORT_VAL    = 0;
[12:51:47.464]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:51:47.464]      __var ACCESS_POINT_VAL  = 0;
[12:51:47.464]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:51:47.464]      __ap = 1; 
[12:51:47.464]        // -> [__ap <= 0x00000001]
[12:51:47.464]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:51:47.464]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:51:47.464]      __ap = 4;
[12:51:47.464]        // -> [__ap <= 0x00000004]
[12:51:47.464]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:51:47.470]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:51:47.470]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:51:47.470]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:51:47.470]    </block>
[12:51:47.470]    <block atomic="false" info="">
[12:51:47.470]      __var nReset = 0x80;
[12:51:47.470]        // -> [nReset <= 0x00000080]
[12:51:47.470]      __var canReadPins = 0;
[12:51:47.470]        // -> [canReadPins <= 0x00000000]
[12:51:47.474]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:51:47.475]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:51:47.475]        // -> [canReadPins <= 0x00000001]
[12:51:47.475]    </block>
[12:51:47.475]    <control if="" while="1" timeout="200" info="">
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.475]      // while-condition  =>  TRUE
[12:51:47.475]      // while "1"  (timeout="200")
[12:51:47.479]      // while-condition  =>  TRUE
[12:51:47.479]      // while "1"  (timeout="200")
[12:51:47.479]      // while  =>  TIMEOUT
[12:51:47.479]      // end while "1"
[12:51:47.479]    </control>
[12:51:47.479]    <control if="canReadPins" while="" timeout="0" info="">
[12:51:47.480]      // if-block "canReadPins"
[12:51:47.480]        // =>  TRUE
[12:51:47.480]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:51:47.480]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:51:47.480]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:51:47.480]        // while-condition  =>  FALSE
[12:51:47.480]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:51:47.480]      </control>
[12:51:47.480]      // end if-block "canReadPins"
[12:51:47.482]    </control>
[12:51:47.482]    <control if="!canReadPins" while="" timeout="0" info="">
[12:51:47.482]      // if-block "!canReadPins"
[12:51:47.482]        // =>  FALSE
[12:51:47.482]      // skip if-block "!canReadPins"
[12:51:47.482]    </control>
[12:51:47.482]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:51:47.482]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:51:47.482]        // =>  TRUE
[12:51:47.482]      <block atomic="false" info="">
[12:51:47.482]        WriteAP(0x00, 0x190008);
[12:51:47.484]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:51:47.484]        WriteAP(0xF0, 0x01);
[12:51:47.487]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:51:47.487]      </block>
[12:51:47.487]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:51:47.487]    </control>
[12:51:47.487]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:51:47.487]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:51:47.487]        // =>  FALSE
[12:51:47.487]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:51:47.487]    </control>
[12:51:47.487]    <block atomic="false" info="">
[12:51:47.487]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:51:47.490]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:51:47.490]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:51:47.490]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:51:47.494]      __ap = 0; //lets make sure we reset the access point selection
[12:51:47.494]        // -> [__ap <= 0x00000000]
[12:51:47.494]    </block>
[12:51:47.494]  </sequence>
[12:51:47.494]  
[12:51:47.517]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:51:47.517]  
[12:51:47.517]  <debugvars>
[12:51:47.517]    // Pre-defined
[12:51:47.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:51:47.517]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:51:47.517]    __dp=0x00000000
[12:51:47.517]    __ap=0x00000000
[12:51:47.517]    __traceout=0x00000000      (Trace Disabled)
[12:51:47.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:51:47.520]    __FlashAddr=0x00000000
[12:51:47.520]    __FlashLen=0x00000000
[12:51:47.520]    __FlashArg=0x00000000
[12:51:47.520]    __FlashOp=0x00000000
[12:51:47.520]    __Result=0x00000000
[12:51:47.520]  </debugvars>
[12:51:47.520]  
[12:51:47.520]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:51:47.520]    <block atomic="false" info="">
[12:51:47.520]      __var deviceID = 0;
[12:51:47.520]        // -> [deviceID <= 0x00000000]
[12:51:47.520]      __var version = 0;
[12:51:47.520]        // -> [version <= 0x00000000]
[12:51:47.520]      __var partNum = 0;
[12:51:47.520]        // -> [partNum <= 0x00000000]
[12:51:47.520]      __var manuf = 0;
[12:51:47.522]        // -> [manuf <= 0x00000000]
[12:51:47.522]      __var isMSPM0G1X0X_G3X0X = 0;
[12:51:47.522]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:51:47.522]      __var isProduction = 0;
[12:51:47.522]        // -> [isProduction <= 0x00000000]
[12:51:47.522]      __var continueId = 0;
[12:51:47.522]        // -> [continueId <= 0x00000000]
[12:51:47.522]      deviceID =   Read32(0x41C40004);
[12:51:47.525]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:51:47.525]        // -> [deviceID <= 0x2BB8802F]
[12:51:47.525]      version = deviceID >> 28;
[12:51:47.525]        // -> [version <= 0x00000002]
[12:51:47.525]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:51:47.525]        // -> [partNum <= 0x0000BB88]
[12:51:47.525]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:51:47.525]        // -> [manuf <= 0x00000017]
[12:51:47.525]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:51:47.525]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:51:47.525]      isProduction = (version > 0);
[12:51:47.525]        // -> [isProduction <= 0x00000001]
[12:51:47.525]    </block>
[12:51:47.525]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:51:47.525]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:51:47.525]        // =>  FALSE
[12:51:47.525]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:51:47.525]    </control>
[12:51:47.525]    <control if="continueId == 4" while="" timeout="0" info="">
[12:51:47.525]      // if-block "continueId == 4"
[12:51:47.525]        // =>  FALSE
[12:51:47.525]      // skip if-block "continueId == 4"
[12:51:47.525]    </control>
[12:51:47.525]    <control if="!isProduction" while="" timeout="0" info="">
[12:51:47.525]      // if-block "!isProduction"
[12:51:47.525]        // =>  FALSE
[12:51:47.529]      // skip if-block "!isProduction"
[12:51:47.529]    </control>
[12:51:47.529]  </sequence>
[12:51:47.529]  
[12:52:08.394]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:52:08.394]  
[12:52:08.403]  <debugvars>
[12:52:08.403]    // Pre-defined
[12:52:08.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:08.403]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:52:08.403]    __dp=0x00000000
[12:52:08.404]    __ap=0x00000000
[12:52:08.404]    __traceout=0x00000000      (Trace Disabled)
[12:52:08.404]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:08.404]    __FlashAddr=0x00000000
[12:52:08.404]    __FlashLen=0x00000000
[12:52:08.404]    __FlashArg=0x00000000
[12:52:08.404]    __FlashOp=0x00000000
[12:52:08.404]    __Result=0x00000000
[12:52:08.404]  </debugvars>
[12:52:08.404]  
[12:52:08.404]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:52:08.404]    <block atomic="false" info="">
[12:52:08.404]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:52:08.405]        // -> [isSWJ <= 0x00000001]
[12:52:08.405]      __var hasDormant = __protocol & 0x00020000;
[12:52:08.405]        // -> [hasDormant <= 0x00000000]
[12:52:08.405]      __var protType   = __protocol & 0x0000FFFF;
[12:52:08.405]        // -> [protType <= 0x00000002]
[12:52:08.405]    </block>
[12:52:08.405]    <control if="protType == 1" while="" timeout="0" info="">
[12:52:08.405]      // if-block "protType == 1"
[12:52:08.405]        // =>  FALSE
[12:52:08.405]      // skip if-block "protType == 1"
[12:52:08.405]    </control>
[12:52:08.405]    <control if="protType == 2" while="" timeout="0" info="">
[12:52:08.405]      // if-block "protType == 2"
[12:52:08.405]        // =>  TRUE
[12:52:08.405]      <control if="isSWJ" while="" timeout="0" info="">
[12:52:08.405]        // if-block "isSWJ"
[12:52:08.405]          // =>  TRUE
[12:52:08.405]        <control if="hasDormant" while="" timeout="0" info="">
[12:52:08.405]          // if-block "hasDormant"
[12:52:08.405]            // =>  FALSE
[12:52:08.407]          // skip if-block "hasDormant"
[12:52:08.407]        </control>
[12:52:08.407]        <control if="!hasDormant" while="" timeout="0" info="">
[12:52:08.407]          // if-block "!hasDormant"
[12:52:08.407]            // =>  TRUE
[12:52:08.407]          <block atomic="false" info="">
[12:52:08.407]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:52:08.409]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:08.409]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:52:08.411]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:52:08.411]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:52:08.411]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:08.411]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:52:08.413]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:52:08.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:52:08.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:08.414]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:52:08.414]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:52:08.414]          </block>
[12:52:08.414]          // end if-block "!hasDormant"
[12:52:08.414]        </control>
[12:52:08.414]        // end if-block "isSWJ"
[12:52:08.414]      </control>
[12:52:08.414]      <control if="!isSWJ" while="" timeout="0" info="">
[12:52:08.414]        // if-block "!isSWJ"
[12:52:08.414]          // =>  FALSE
[12:52:08.414]        // skip if-block "!isSWJ"
[12:52:08.414]      </control>
[12:52:08.414]      <block atomic="false" info="">
[12:52:08.414]        ReadDP(0x0);
[12:52:08.419]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:52:08.419]      </block>
[12:52:08.419]      // end if-block "protType == 2"
[12:52:08.419]    </control>
[12:52:08.420]  </sequence>
[12:52:08.420]  
[12:52:08.423]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:52:08.423]  
[12:52:08.423]  <debugvars>
[12:52:08.423]    // Pre-defined
[12:52:08.423]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:08.423]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:52:08.423]    __dp=0x00000000
[12:52:08.423]    __ap=0x00000000
[12:52:08.424]    __traceout=0x00000000      (Trace Disabled)
[12:52:08.424]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:08.424]    __FlashAddr=0x00000000
[12:52:08.424]    __FlashLen=0x00000000
[12:52:08.424]    __FlashArg=0x00000000
[12:52:08.424]    __FlashOp=0x00000000
[12:52:08.424]    __Result=0x00000000
[12:52:08.424]  </debugvars>
[12:52:08.424]  
[12:52:08.424]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:52:08.424]    <block atomic="false" info="">
[12:52:08.424]      __var SW_DP_ABORT       = 0x0;
[12:52:08.424]        // -> [SW_DP_ABORT <= 0x00000000]
[12:52:08.425]      __var DP_CTRL_STAT      = 0x4;
[12:52:08.425]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:52:08.425]      __var DP_SELECT         = 0x8;
[12:52:08.425]        // -> [DP_SELECT <= 0x00000008]
[12:52:08.425]      __var powered_down      = 0;
[12:52:08.425]        // -> [powered_down <= 0x00000000]
[12:52:08.425]      WriteDP(DP_SELECT, 0x00000000);
[12:52:08.427]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:52:08.427]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:52:08.427]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:52:08.427]        // -> [powered_down <= 0x00000001]
[12:52:08.427]    </block>
[12:52:08.427]    <control if="powered_down" while="" timeout="0" info="">
[12:52:08.429]      // if-block "powered_down"
[12:52:08.429]        // =>  TRUE
[12:52:08.429]      <block atomic="false" info="">
[12:52:08.429]        Message(0, "Debug/System power-up request sent");
[12:52:08.430]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:52:08.430]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:52:08.433]      </block>
[12:52:08.433]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:52:08.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:52:08.435]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:52:08.435]        // while-condition  =>  FALSE
[12:52:08.435]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:52:08.435]      </control>
[12:52:08.435]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:52:08.435]        // if-block "(__protocol & 0xFFFF) == 1"
[12:52:08.435]          // =>  FALSE
[12:52:08.435]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:52:08.435]      </control>
[12:52:08.435]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:52:08.435]        // if-block "(__protocol & 0xFFFF) == 2"
[12:52:08.435]          // =>  TRUE
[12:52:08.435]        <block atomic="false" info="">
[12:52:08.435]          Message(0, "executing SWD power up");
[12:52:08.437]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:52:08.437]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:52:08.439]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:52:08.439]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:52:08.439]        </block>
[12:52:08.439]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:52:08.439]      </control>
[12:52:08.439]      // end if-block "powered_down"
[12:52:08.439]    </control>
[12:52:08.439]    <block atomic="false" info="">
[12:52:08.439]      __var DEBUG_PORT_VAL    = 0;
[12:52:08.439]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:52:08.442]      __var ACCESS_POINT_VAL  = 0;
[12:52:08.442]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:52:08.442]      __ap = 1; 
[12:52:08.442]        // -> [__ap <= 0x00000001]
[12:52:08.442]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:52:08.444]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:52:08.444]      __ap = 4;
[12:52:08.444]        // -> [__ap <= 0x00000004]
[12:52:08.444]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:52:08.449]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:52:08.449]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:52:08.449]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:52:08.451]    </block>
[12:52:08.451]    <block atomic="false" info="">
[12:52:08.451]      __var nReset = 0x80;
[12:52:08.451]        // -> [nReset <= 0x00000080]
[12:52:08.451]      __var canReadPins = 0;
[12:52:08.451]        // -> [canReadPins <= 0x00000000]
[12:52:08.451]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:52:08.453]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:52:08.453]        // -> [canReadPins <= 0x00000001]
[12:52:08.453]    </block>
[12:52:08.453]    <control if="" while="1" timeout="200" info="">
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.453]      // while-condition  =>  TRUE
[12:52:08.453]      // while "1"  (timeout="200")
[12:52:08.458]      // while-condition  =>  TRUE
[12:52:08.458]      // while "1"  (timeout="200")
[12:52:08.458]      // while-condition  =>  TRUE
[12:52:08.458]      // while "1"  (timeout="200")
[12:52:08.458]      // while-condition  =>  TRUE
[12:52:08.458]      // while "1"  (timeout="200")
[12:52:08.458]      // while-condition  =>  TRUE
[12:52:08.458]      // while "1"  (timeout="200")
[12:52:08.458]      // while-condition  =>  TRUE
[12:52:08.458]      // while "1"  (timeout="200")
[12:52:08.458]      // while-condition  =>  TRUE
[12:52:08.459]      // while "1"  (timeout="200")
[12:52:08.459]      // while-condition  =>  TRUE
[12:52:08.459]      // while "1"  (timeout="200")
[12:52:08.459]      // while-condition  =>  TRUE
[12:52:08.459]      // while "1"  (timeout="200")
[12:52:08.459]      // while-condition  =>  TRUE
[12:52:08.459]      // while "1"  (timeout="200")
[12:52:08.459]      // while-condition  =>  TRUE
[12:52:08.459]      // while "1"  (timeout="200")
[12:52:08.460]      // while-condition  =>  TRUE
[12:52:08.460]      // while "1"  (timeout="200")
[12:52:08.460]      // while  =>  TIMEOUT
[12:52:08.460]      // end while "1"
[12:52:08.460]    </control>
[12:52:08.460]    <control if="canReadPins" while="" timeout="0" info="">
[12:52:08.460]      // if-block "canReadPins"
[12:52:08.460]        // =>  TRUE
[12:52:08.460]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:52:08.461]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:52:08.461]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:52:08.461]        // while-condition  =>  FALSE
[12:52:08.461]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:52:08.461]      </control>
[12:52:08.461]      // end if-block "canReadPins"
[12:52:08.461]    </control>
[12:52:08.461]    <control if="!canReadPins" while="" timeout="0" info="">
[12:52:08.464]      // if-block "!canReadPins"
[12:52:08.464]        // =>  FALSE
[12:52:08.464]      // skip if-block "!canReadPins"
[12:52:08.464]    </control>
[12:52:08.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:52:08.465]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:52:08.465]        // =>  TRUE
[12:52:08.465]      <block atomic="false" info="">
[12:52:08.465]        WriteAP(0x00, 0x190008);
[12:52:08.465]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:52:08.465]        WriteAP(0xF0, 0x01);
[12:52:08.469]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:52:08.469]      </block>
[12:52:08.469]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:52:08.469]    </control>
[12:52:08.469]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:52:08.469]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:52:08.469]        // =>  FALSE
[12:52:08.469]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:52:08.469]    </control>
[12:52:08.469]    <block atomic="false" info="">
[12:52:08.469]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:52:08.474]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:52:08.474]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:52:08.474]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:52:08.474]      __ap = 0; //lets make sure we reset the access point selection
[12:52:08.474]        // -> [__ap <= 0x00000000]
[12:52:08.474]    </block>
[12:52:08.474]  </sequence>
[12:52:08.474]  
[12:52:08.494]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:52:08.494]  
[12:52:08.494]  <debugvars>
[12:52:08.494]    // Pre-defined
[12:52:08.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:08.494]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:52:08.494]    __dp=0x00000000
[12:52:08.494]    __ap=0x00000000
[12:52:08.494]    __traceout=0x00000000      (Trace Disabled)
[12:52:08.494]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:08.494]    __FlashAddr=0x00000000
[12:52:08.494]    __FlashLen=0x00000000
[12:52:08.494]    __FlashArg=0x00000000
[12:52:08.494]    __FlashOp=0x00000000
[12:52:08.494]    __Result=0x00000000
[12:52:08.494]  </debugvars>
[12:52:08.494]  
[12:52:08.494]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:52:08.494]    <block atomic="false" info="">
[12:52:08.494]      __var deviceID = 0;
[12:52:08.494]        // -> [deviceID <= 0x00000000]
[12:52:08.494]      __var version = 0;
[12:52:08.494]        // -> [version <= 0x00000000]
[12:52:08.494]      __var partNum = 0;
[12:52:08.499]        // -> [partNum <= 0x00000000]
[12:52:08.499]      __var manuf = 0;
[12:52:08.499]        // -> [manuf <= 0x00000000]
[12:52:08.499]      __var isMSPM0G1X0X_G3X0X = 0;
[12:52:08.499]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:52:08.499]      __var isProduction = 0;
[12:52:08.499]        // -> [isProduction <= 0x00000000]
[12:52:08.499]      __var continueId = 0;
[12:52:08.499]        // -> [continueId <= 0x00000000]
[12:52:08.499]      deviceID =   Read32(0x41C40004);
[12:52:08.504]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:52:08.504]        // -> [deviceID <= 0x2BB8802F]
[12:52:08.504]      version = deviceID >> 28;
[12:52:08.504]        // -> [version <= 0x00000002]
[12:52:08.504]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:52:08.504]        // -> [partNum <= 0x0000BB88]
[12:52:08.504]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:52:08.504]        // -> [manuf <= 0x00000017]
[12:52:08.504]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:52:08.504]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:52:08.504]      isProduction = (version > 0);
[12:52:08.504]        // -> [isProduction <= 0x00000001]
[12:52:08.504]    </block>
[12:52:08.504]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:52:08.504]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:52:08.504]        // =>  FALSE
[12:52:08.504]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:52:08.504]    </control>
[12:52:08.504]    <control if="continueId == 4" while="" timeout="0" info="">
[12:52:08.504]      // if-block "continueId == 4"
[12:52:08.504]        // =>  FALSE
[12:52:08.504]      // skip if-block "continueId == 4"
[12:52:08.504]    </control>
[12:52:08.504]    <control if="!isProduction" while="" timeout="0" info="">
[12:52:08.504]      // if-block "!isProduction"
[12:52:08.504]        // =>  FALSE
[12:52:08.504]      // skip if-block "!isProduction"
[12:52:08.504]    </control>
[12:52:08.504]  </sequence>
[12:52:08.504]  
[12:54:58.994]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:54:58.994]  
[12:54:59.003]  <debugvars>
[12:54:59.003]    // Pre-defined
[12:54:59.003]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:59.003]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:54:59.003]    __dp=0x00000000
[12:54:59.004]    __ap=0x00000000
[12:54:59.004]    __traceout=0x00000000      (Trace Disabled)
[12:54:59.004]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:59.004]    __FlashAddr=0x00000000
[12:54:59.004]    __FlashLen=0x00000000
[12:54:59.004]    __FlashArg=0x00000000
[12:54:59.004]    __FlashOp=0x00000000
[12:54:59.004]    __Result=0x00000000
[12:54:59.004]  </debugvars>
[12:54:59.004]  
[12:54:59.004]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:54:59.004]    <block atomic="false" info="">
[12:54:59.004]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:54:59.004]        // -> [isSWJ <= 0x00000001]
[12:54:59.004]      __var hasDormant = __protocol & 0x00020000;
[12:54:59.004]        // -> [hasDormant <= 0x00000000]
[12:54:59.004]      __var protType   = __protocol & 0x0000FFFF;
[12:54:59.004]        // -> [protType <= 0x00000002]
[12:54:59.004]    </block>
[12:54:59.004]    <control if="protType == 1" while="" timeout="0" info="">
[12:54:59.004]      // if-block "protType == 1"
[12:54:59.004]        // =>  FALSE
[12:54:59.004]      // skip if-block "protType == 1"
[12:54:59.004]    </control>
[12:54:59.004]    <control if="protType == 2" while="" timeout="0" info="">
[12:54:59.004]      // if-block "protType == 2"
[12:54:59.004]        // =>  TRUE
[12:54:59.004]      <control if="isSWJ" while="" timeout="0" info="">
[12:54:59.004]        // if-block "isSWJ"
[12:54:59.004]          // =>  TRUE
[12:54:59.004]        <control if="hasDormant" while="" timeout="0" info="">
[12:54:59.004]          // if-block "hasDormant"
[12:54:59.004]            // =>  FALSE
[12:54:59.004]          // skip if-block "hasDormant"
[12:54:59.004]        </control>
[12:54:59.004]        <control if="!hasDormant" while="" timeout="0" info="">
[12:54:59.004]          // if-block "!hasDormant"
[12:54:59.004]            // =>  TRUE
[12:54:59.004]          <block atomic="false" info="">
[12:54:59.004]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:54:59.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:59.010]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:54:59.014]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:54:59.014]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:54:59.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:59.014]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:54:59.014]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:54:59.014]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:54:59.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:59.014]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:54:59.020]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:54:59.020]          </block>
[12:54:59.020]          // end if-block "!hasDormant"
[12:54:59.020]        </control>
[12:54:59.020]        // end if-block "isSWJ"
[12:54:59.020]      </control>
[12:54:59.020]      <control if="!isSWJ" while="" timeout="0" info="">
[12:54:59.020]        // if-block "!isSWJ"
[12:54:59.020]          // =>  FALSE
[12:54:59.020]        // skip if-block "!isSWJ"
[12:54:59.020]      </control>
[12:54:59.020]      <block atomic="false" info="">
[12:54:59.020]        ReadDP(0x0);
[12:54:59.020]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:54:59.020]      </block>
[12:54:59.020]      // end if-block "protType == 2"
[12:54:59.024]    </control>
[12:54:59.024]  </sequence>
[12:54:59.024]  
[12:54:59.024]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:54:59.024]  
[12:54:59.024]  <debugvars>
[12:54:59.024]    // Pre-defined
[12:54:59.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:59.031]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:54:59.031]    __dp=0x00000000
[12:54:59.031]    __ap=0x00000000
[12:54:59.031]    __traceout=0x00000000      (Trace Disabled)
[12:54:59.031]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:59.031]    __FlashAddr=0x00000000
[12:54:59.032]    __FlashLen=0x00000000
[12:54:59.032]    __FlashArg=0x00000000
[12:54:59.032]    __FlashOp=0x00000000
[12:54:59.032]    __Result=0x00000000
[12:54:59.032]  </debugvars>
[12:54:59.032]  
[12:54:59.032]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:54:59.032]    <block atomic="false" info="">
[12:54:59.032]      __var SW_DP_ABORT       = 0x0;
[12:54:59.032]        // -> [SW_DP_ABORT <= 0x00000000]
[12:54:59.032]      __var DP_CTRL_STAT      = 0x4;
[12:54:59.032]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:54:59.032]      __var DP_SELECT         = 0x8;
[12:54:59.032]        // -> [DP_SELECT <= 0x00000008]
[12:54:59.032]      __var powered_down      = 0;
[12:54:59.032]        // -> [powered_down <= 0x00000000]
[12:54:59.033]      WriteDP(DP_SELECT, 0x00000000);
[12:54:59.034]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:54:59.034]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:54:59.036]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:54:59.036]        // -> [powered_down <= 0x00000001]
[12:54:59.037]    </block>
[12:54:59.037]    <control if="powered_down" while="" timeout="0" info="">
[12:54:59.037]      // if-block "powered_down"
[12:54:59.037]        // =>  TRUE
[12:54:59.037]      <block atomic="false" info="">
[12:54:59.037]        Message(0, "Debug/System power-up request sent");
[12:54:59.038]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:54:59.038]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:54:59.038]      </block>
[12:54:59.041]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:54:59.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:54:59.042]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:54:59.042]        // while-condition  =>  FALSE
[12:54:59.042]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:54:59.042]      </control>
[12:54:59.042]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:54:59.042]        // if-block "(__protocol & 0xFFFF) == 1"
[12:54:59.042]          // =>  FALSE
[12:54:59.042]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:54:59.042]      </control>
[12:54:59.042]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:54:59.042]        // if-block "(__protocol & 0xFFFF) == 2"
[12:54:59.042]          // =>  TRUE
[12:54:59.042]        <block atomic="false" info="">
[12:54:59.042]          Message(0, "executing SWD power up");
[12:54:59.045]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:54:59.046]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:54:59.046]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:54:59.051]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:54:59.051]        </block>
[12:54:59.051]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:54:59.051]      </control>
[12:54:59.051]      // end if-block "powered_down"
[12:54:59.051]    </control>
[12:54:59.051]    <block atomic="false" info="">
[12:54:59.051]      __var DEBUG_PORT_VAL    = 0;
[12:54:59.051]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:54:59.051]      __var ACCESS_POINT_VAL  = 0;
[12:54:59.051]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:54:59.051]      __ap = 1; 
[12:54:59.051]        // -> [__ap <= 0x00000001]
[12:54:59.051]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:54:59.054]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:54:59.054]      __ap = 4;
[12:54:59.054]        // -> [__ap <= 0x00000004]
[12:54:59.054]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:54:59.060]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:54:59.060]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:54:59.060]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:54:59.061]    </block>
[12:54:59.061]    <block atomic="false" info="">
[12:54:59.061]      __var nReset = 0x80;
[12:54:59.061]        // -> [nReset <= 0x00000080]
[12:54:59.061]      __var canReadPins = 0;
[12:54:59.061]        // -> [canReadPins <= 0x00000000]
[12:54:59.061]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:54:59.063]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:54:59.064]        // -> [canReadPins <= 0x00000001]
[12:54:59.064]    </block>
[12:54:59.064]    <control if="" while="1" timeout="200" info="">
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.064]      // while "1"  (timeout="200")
[12:54:59.064]      // while-condition  =>  TRUE
[12:54:59.066]      // while "1"  (timeout="200")
[12:54:59.066]      // while-condition  =>  TRUE
[12:54:59.066]      // while "1"  (timeout="200")
[12:54:59.066]      // while-condition  =>  TRUE
[12:54:59.066]      // while "1"  (timeout="200")
[12:54:59.066]      // while-condition  =>  TRUE
[12:54:59.066]      // while "1"  (timeout="200")
[12:54:59.066]      // while-condition  =>  TRUE
[12:54:59.066]      // while "1"  (timeout="200")
[12:54:59.066]      // while-condition  =>  TRUE
[12:54:59.066]      // while "1"  (timeout="200")
[12:54:59.066]      // while-condition  =>  TRUE
[12:54:59.067]      // while "1"  (timeout="200")
[12:54:59.067]      // while-condition  =>  TRUE
[12:54:59.067]      // while "1"  (timeout="200")
[12:54:59.067]      // while-condition  =>  TRUE
[12:54:59.067]      // while "1"  (timeout="200")
[12:54:59.067]      // while-condition  =>  TRUE
[12:54:59.067]      // while "1"  (timeout="200")
[12:54:59.067]      // while-condition  =>  TRUE
[12:54:59.067]      // while "1"  (timeout="200")
[12:54:59.067]      // while-condition  =>  TRUE
[12:54:59.067]      // while "1"  (timeout="200")
[12:54:59.069]      // while-condition  =>  TRUE
[12:54:59.069]      // while "1"  (timeout="200")
[12:54:59.069]      // while-condition  =>  TRUE
[12:54:59.069]      // while "1"  (timeout="200")
[12:54:59.069]      // while-condition  =>  TRUE
[12:54:59.069]      // while "1"  (timeout="200")
[12:54:59.069]      // while-condition  =>  TRUE
[12:54:59.069]      // while "1"  (timeout="200")
[12:54:59.069]      // while-condition  =>  TRUE
[12:54:59.069]      // while "1"  (timeout="200")
[12:54:59.069]      // while-condition  =>  TRUE
[12:54:59.070]      // while "1"  (timeout="200")
[12:54:59.070]      // while  =>  TIMEOUT
[12:54:59.070]      // end while "1"
[12:54:59.070]    </control>
[12:54:59.070]    <control if="canReadPins" while="" timeout="0" info="">
[12:54:59.070]      // if-block "canReadPins"
[12:54:59.070]        // =>  TRUE
[12:54:59.070]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:54:59.070]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:54:59.071]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:54:59.071]        // while-condition  =>  FALSE
[12:54:59.071]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:54:59.072]      </control>
[12:54:59.072]      // end if-block "canReadPins"
[12:54:59.072]    </control>
[12:54:59.072]    <control if="!canReadPins" while="" timeout="0" info="">
[12:54:59.072]      // if-block "!canReadPins"
[12:54:59.072]        // =>  FALSE
[12:54:59.072]      // skip if-block "!canReadPins"
[12:54:59.072]    </control>
[12:54:59.072]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:54:59.072]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:54:59.072]        // =>  TRUE
[12:54:59.072]      <block atomic="false" info="">
[12:54:59.072]        WriteAP(0x00, 0x190008);
[12:54:59.075]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:54:59.075]        WriteAP(0xF0, 0x01);
[12:54:59.078]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:54:59.078]      </block>
[12:54:59.078]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:54:59.078]    </control>
[12:54:59.078]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:54:59.078]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:54:59.078]        // =>  FALSE
[12:54:59.080]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:54:59.080]    </control>
[12:54:59.080]    <block atomic="false" info="">
[12:54:59.080]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:54:59.082]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:54:59.082]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:54:59.082]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:54:59.084]      __ap = 0; //lets make sure we reset the access point selection
[12:54:59.085]        // -> [__ap <= 0x00000000]
[12:54:59.085]    </block>
[12:54:59.085]  </sequence>
[12:54:59.085]  
[12:54:59.111]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:54:59.111]  
[12:54:59.112]  <debugvars>
[12:54:59.112]    // Pre-defined
[12:54:59.112]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:59.112]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:54:59.112]    __dp=0x00000000
[12:54:59.112]    __ap=0x00000000
[12:54:59.112]    __traceout=0x00000000      (Trace Disabled)
[12:54:59.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:59.113]    __FlashAddr=0x00000000
[12:54:59.113]    __FlashLen=0x00000000
[12:54:59.113]    __FlashArg=0x00000000
[12:54:59.113]    __FlashOp=0x00000000
[12:54:59.113]    __Result=0x00000000
[12:54:59.113]  </debugvars>
[12:54:59.113]  
[12:54:59.113]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:54:59.113]    <block atomic="false" info="">
[12:54:59.113]      __var deviceID = 0;
[12:54:59.113]        // -> [deviceID <= 0x00000000]
[12:54:59.113]      __var version = 0;
[12:54:59.114]        // -> [version <= 0x00000000]
[12:54:59.114]      __var partNum = 0;
[12:54:59.114]        // -> [partNum <= 0x00000000]
[12:54:59.114]      __var manuf = 0;
[12:54:59.114]        // -> [manuf <= 0x00000000]
[12:54:59.114]      __var isMSPM0G1X0X_G3X0X = 0;
[12:54:59.114]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:54:59.114]      __var isProduction = 0;
[12:54:59.114]        // -> [isProduction <= 0x00000000]
[12:54:59.115]      __var continueId = 0;
[12:54:59.115]        // -> [continueId <= 0x00000000]
[12:54:59.115]      deviceID =   Read32(0x41C40004);
[12:54:59.116]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:54:59.116]        // -> [deviceID <= 0x2BB8802F]
[12:54:59.116]      version = deviceID >> 28;
[12:54:59.116]        // -> [version <= 0x00000002]
[12:54:59.116]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:54:59.116]        // -> [partNum <= 0x0000BB88]
[12:54:59.116]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:54:59.116]        // -> [manuf <= 0x00000017]
[12:54:59.116]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:54:59.116]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:54:59.116]      isProduction = (version > 0);
[12:54:59.116]        // -> [isProduction <= 0x00000001]
[12:54:59.116]    </block>
[12:54:59.116]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:54:59.116]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:54:59.116]        // =>  FALSE
[12:54:59.116]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:54:59.116]    </control>
[12:54:59.116]    <control if="continueId == 4" while="" timeout="0" info="">
[12:54:59.116]      // if-block "continueId == 4"
[12:54:59.116]        // =>  FALSE
[12:54:59.116]      // skip if-block "continueId == 4"
[12:54:59.122]    </control>
[12:54:59.122]    <control if="!isProduction" while="" timeout="0" info="">
[12:54:59.122]      // if-block "!isProduction"
[12:54:59.122]        // =>  FALSE
[12:54:59.122]      // skip if-block "!isProduction"
[12:54:59.122]    </control>
[12:54:59.122]  </sequence>
[12:54:59.122]  
[13:00:18.052]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:00:18.052]  
[13:00:18.060]  <debugvars>
[13:00:18.060]    // Pre-defined
[13:00:18.060]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:18.060]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:18.060]    __dp=0x00000000
[13:00:18.060]    __ap=0x00000000
[13:00:18.060]    __traceout=0x00000000      (Trace Disabled)
[13:00:18.060]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:18.060]    __FlashAddr=0x00000000
[13:00:18.060]    __FlashLen=0x00000000
[13:00:18.060]    __FlashArg=0x00000000
[13:00:18.060]    __FlashOp=0x00000000
[13:00:18.060]    __Result=0x00000000
[13:00:18.060]  </debugvars>
[13:00:18.060]  
[13:00:18.060]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:00:18.062]    <block atomic="false" info="">
[13:00:18.062]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:00:18.062]        // -> [isSWJ <= 0x00000001]
[13:00:18.062]      __var hasDormant = __protocol & 0x00020000;
[13:00:18.062]        // -> [hasDormant <= 0x00000000]
[13:00:18.062]      __var protType   = __protocol & 0x0000FFFF;
[13:00:18.062]        // -> [protType <= 0x00000002]
[13:00:18.062]    </block>
[13:00:18.062]    <control if="protType == 1" while="" timeout="0" info="">
[13:00:18.062]      // if-block "protType == 1"
[13:00:18.062]        // =>  FALSE
[13:00:18.062]      // skip if-block "protType == 1"
[13:00:18.062]    </control>
[13:00:18.062]    <control if="protType == 2" while="" timeout="0" info="">
[13:00:18.062]      // if-block "protType == 2"
[13:00:18.062]        // =>  TRUE
[13:00:18.062]      <control if="isSWJ" while="" timeout="0" info="">
[13:00:18.062]        // if-block "isSWJ"
[13:00:18.062]          // =>  TRUE
[13:00:18.062]        <control if="hasDormant" while="" timeout="0" info="">
[13:00:18.062]          // if-block "hasDormant"
[13:00:18.062]            // =>  FALSE
[13:00:18.062]          // skip if-block "hasDormant"
[13:00:18.062]        </control>
[13:00:18.062]        <control if="!hasDormant" while="" timeout="0" info="">
[13:00:18.062]          // if-block "!hasDormant"
[13:00:18.062]            // =>  TRUE
[13:00:18.062]          <block atomic="false" info="">
[13:00:18.062]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:00:18.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:18.066]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:00:18.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:00:18.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:00:18.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:18.066]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:00:18.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:00:18.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:00:18.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:18.072]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:00:18.072]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:00:18.072]          </block>
[13:00:18.072]          // end if-block "!hasDormant"
[13:00:18.072]        </control>
[13:00:18.072]        // end if-block "isSWJ"
[13:00:18.072]      </control>
[13:00:18.072]      <control if="!isSWJ" while="" timeout="0" info="">
[13:00:18.072]        // if-block "!isSWJ"
[13:00:18.072]          // =>  FALSE
[13:00:18.072]        // skip if-block "!isSWJ"
[13:00:18.072]      </control>
[13:00:18.072]      <block atomic="false" info="">
[13:00:18.072]        ReadDP(0x0);
[13:00:18.077]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:00:18.077]      </block>
[13:00:18.077]      // end if-block "protType == 2"
[13:00:18.077]    </control>
[13:00:18.077]  </sequence>
[13:00:18.077]  
[13:00:18.077]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:00:18.077]  
[13:00:18.077]  <debugvars>
[13:00:18.077]    // Pre-defined
[13:00:18.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:18.077]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:18.077]    __dp=0x00000000
[13:00:18.077]    __ap=0x00000000
[13:00:18.077]    __traceout=0x00000000      (Trace Disabled)
[13:00:18.077]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:18.077]    __FlashAddr=0x00000000
[13:00:18.077]    __FlashLen=0x00000000
[13:00:18.077]    __FlashArg=0x00000000
[13:00:18.077]    __FlashOp=0x00000000
[13:00:18.082]    __Result=0x00000000
[13:00:18.082]  </debugvars>
[13:00:18.082]  
[13:00:18.082]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:00:18.082]    <block atomic="false" info="">
[13:00:18.082]      __var SW_DP_ABORT       = 0x0;
[13:00:18.082]        // -> [SW_DP_ABORT <= 0x00000000]
[13:00:18.082]      __var DP_CTRL_STAT      = 0x4;
[13:00:18.082]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:00:18.082]      __var DP_SELECT         = 0x8;
[13:00:18.082]        // -> [DP_SELECT <= 0x00000008]
[13:00:18.082]      __var powered_down      = 0;
[13:00:18.082]        // -> [powered_down <= 0x00000000]
[13:00:18.082]      WriteDP(DP_SELECT, 0x00000000);
[13:00:18.082]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:00:18.082]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:00:18.087]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:00:18.087]        // -> [powered_down <= 0x00000001]
[13:00:18.087]    </block>
[13:00:18.087]    <control if="powered_down" while="" timeout="0" info="">
[13:00:18.087]      // if-block "powered_down"
[13:00:18.087]        // =>  TRUE
[13:00:18.087]      <block atomic="false" info="">
[13:00:18.087]        Message(0, "Debug/System power-up request sent");
[13:00:18.087]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:00:18.092]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:00:18.092]      </block>
[13:00:18.092]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:00:18.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:00:18.092]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:00:18.092]        // while-condition  =>  FALSE
[13:00:18.092]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:00:18.092]      </control>
[13:00:18.092]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:00:18.092]        // if-block "(__protocol & 0xFFFF) == 1"
[13:00:18.092]          // =>  FALSE
[13:00:18.092]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:00:18.092]      </control>
[13:00:18.092]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:00:18.092]        // if-block "(__protocol & 0xFFFF) == 2"
[13:00:18.092]          // =>  TRUE
[13:00:18.092]        <block atomic="false" info="">
[13:00:18.092]          Message(0, "executing SWD power up");
[13:00:18.096]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:00:18.103]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:00:18.103]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:00:18.103]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:00:18.103]        </block>
[13:00:18.103]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:00:18.103]      </control>
[13:00:18.107]      // end if-block "powered_down"
[13:00:18.107]    </control>
[13:00:18.107]    <block atomic="false" info="">
[13:00:18.107]      __var DEBUG_PORT_VAL    = 0;
[13:00:18.107]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:00:18.107]      __var ACCESS_POINT_VAL  = 0;
[13:00:18.107]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:00:18.107]      __ap = 1; 
[13:00:18.107]        // -> [__ap <= 0x00000001]
[13:00:18.107]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:00:18.113]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:00:18.113]      __ap = 4;
[13:00:18.113]        // -> [__ap <= 0x00000004]
[13:00:18.113]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:18.123]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:00:18.123]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:00:18.123]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:18.126]    </block>
[13:00:18.126]    <block atomic="false" info="">
[13:00:18.126]      __var nReset = 0x80;
[13:00:18.126]        // -> [nReset <= 0x00000080]
[13:00:18.126]      __var canReadPins = 0;
[13:00:18.126]        // -> [canReadPins <= 0x00000000]
[13:00:18.126]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:00:18.126]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:00:18.126]        // -> [canReadPins <= 0x00000001]
[13:00:18.126]    </block>
[13:00:18.126]    <control if="" while="1" timeout="200" info="">
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.126]      // while-condition  =>  TRUE
[13:00:18.126]      // while "1"  (timeout="200")
[13:00:18.132]      // while-condition  =>  TRUE
[13:00:18.132]      // while "1"  (timeout="200")
[13:00:18.132]      // while  =>  TIMEOUT
[13:00:18.132]      // end while "1"
[13:00:18.132]    </control>
[13:00:18.132]    <control if="canReadPins" while="" timeout="0" info="">
[13:00:18.132]      // if-block "canReadPins"
[13:00:18.132]        // =>  TRUE
[13:00:18.132]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:00:18.132]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:00:18.133]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:00:18.133]        // while-condition  =>  FALSE
[13:00:18.135]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:00:18.135]      </control>
[13:00:18.135]      // end if-block "canReadPins"
[13:00:18.135]    </control>
[13:00:18.135]    <control if="!canReadPins" while="" timeout="0" info="">
[13:00:18.135]      // if-block "!canReadPins"
[13:00:18.135]        // =>  FALSE
[13:00:18.135]      // skip if-block "!canReadPins"
[13:00:18.135]    </control>
[13:00:18.135]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:00:18.135]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:18.135]        // =>  TRUE
[13:00:18.135]      <block atomic="false" info="">
[13:00:18.135]        WriteAP(0x00, 0x190008);
[13:00:18.138]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:18.138]        WriteAP(0xF0, 0x01);
[13:00:18.144]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:18.144]      </block>
[13:00:18.144]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:18.144]    </control>
[13:00:18.144]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:00:18.144]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:18.144]        // =>  FALSE
[13:00:18.144]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:18.144]    </control>
[13:00:18.147]    <block atomic="false" info="">
[13:00:18.147]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:18.147]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:00:18.147]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:00:18.147]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:18.147]      __ap = 0; //lets make sure we reset the access point selection
[13:00:18.147]        // -> [__ap <= 0x00000000]
[13:00:18.147]    </block>
[13:00:18.147]  </sequence>
[13:00:18.147]  
[13:00:18.164]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:00:18.164]  
[13:00:18.164]  <debugvars>
[13:00:18.164]    // Pre-defined
[13:00:18.164]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:18.164]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:18.164]    __dp=0x00000000
[13:00:18.164]    __ap=0x00000000
[13:00:18.164]    __traceout=0x00000000      (Trace Disabled)
[13:00:18.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:18.164]    __FlashAddr=0x00000000
[13:00:18.164]    __FlashLen=0x00000000
[13:00:18.164]    __FlashArg=0x00000000
[13:00:18.164]    __FlashOp=0x00000000
[13:00:18.164]    __Result=0x00000000
[13:00:18.164]  </debugvars>
[13:00:18.174]  
[13:00:18.174]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:00:18.174]    <block atomic="false" info="">
[13:00:18.174]      __var deviceID = 0;
[13:00:18.174]        // -> [deviceID <= 0x00000000]
[13:00:18.174]      __var version = 0;
[13:00:18.174]        // -> [version <= 0x00000000]
[13:00:18.174]      __var partNum = 0;
[13:00:18.174]        // -> [partNum <= 0x00000000]
[13:00:18.174]      __var manuf = 0;
[13:00:18.174]        // -> [manuf <= 0x00000000]
[13:00:18.174]      __var isMSPM0G1X0X_G3X0X = 0;
[13:00:18.174]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:00:18.174]      __var isProduction = 0;
[13:00:18.174]        // -> [isProduction <= 0x00000000]
[13:00:18.174]      __var continueId = 0;
[13:00:18.174]        // -> [continueId <= 0x00000000]
[13:00:18.174]      deviceID =   Read32(0x41C40004);
[13:00:18.174]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:00:18.174]        // -> [deviceID <= 0x2BB8802F]
[13:00:18.174]      version = deviceID >> 28;
[13:00:18.174]        // -> [version <= 0x00000002]
[13:00:18.174]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:00:18.174]        // -> [partNum <= 0x0000BB88]
[13:00:18.174]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:00:18.174]        // -> [manuf <= 0x00000017]
[13:00:18.174]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:00:18.174]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:00:18.174]      isProduction = (version > 0);
[13:00:18.174]        // -> [isProduction <= 0x00000001]
[13:00:18.174]    </block>
[13:00:18.174]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:00:18.174]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:00:18.174]        // =>  FALSE
[13:00:18.174]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:00:18.174]    </control>
[13:00:18.174]    <control if="continueId == 4" while="" timeout="0" info="">
[13:00:18.184]      // if-block "continueId == 4"
[13:00:18.184]        // =>  FALSE
[13:00:18.184]      // skip if-block "continueId == 4"
[13:00:18.184]    </control>
[13:00:18.184]    <control if="!isProduction" while="" timeout="0" info="">
[13:00:18.184]      // if-block "!isProduction"
[13:00:18.184]        // =>  FALSE
[13:00:18.184]      // skip if-block "!isProduction"
[13:00:18.184]    </control>
[13:00:18.184]  </sequence>
[13:00:18.184]  
[13:00:58.139]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:00:58.139]  
[13:00:58.139]  <debugvars>
[13:00:58.139]    // Pre-defined
[13:00:58.139]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:58.139]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:58.139]    __dp=0x00000000
[13:00:58.139]    __ap=0x00000000
[13:00:58.139]    __traceout=0x00000000      (Trace Disabled)
[13:00:58.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:58.139]    __FlashAddr=0x00000000
[13:00:58.139]    __FlashLen=0x00000000
[13:00:58.139]    __FlashArg=0x00000000
[13:00:58.139]    __FlashOp=0x00000000
[13:00:58.139]    __Result=0x00000000
[13:00:58.139]  </debugvars>
[13:00:58.139]  
[13:00:58.139]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:00:58.139]    <block atomic="false" info="">
[13:00:58.139]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:00:58.139]        // -> [isSWJ <= 0x00000001]
[13:00:58.139]      __var hasDormant = __protocol & 0x00020000;
[13:00:58.139]        // -> [hasDormant <= 0x00000000]
[13:00:58.139]      __var protType   = __protocol & 0x0000FFFF;
[13:00:58.139]        // -> [protType <= 0x00000002]
[13:00:58.139]    </block>
[13:00:58.139]    <control if="protType == 1" while="" timeout="0" info="">
[13:00:58.139]      // if-block "protType == 1"
[13:00:58.139]        // =>  FALSE
[13:00:58.139]      // skip if-block "protType == 1"
[13:00:58.147]    </control>
[13:00:58.147]    <control if="protType == 2" while="" timeout="0" info="">
[13:00:58.147]      // if-block "protType == 2"
[13:00:58.147]        // =>  TRUE
[13:00:58.147]      <control if="isSWJ" while="" timeout="0" info="">
[13:00:58.147]        // if-block "isSWJ"
[13:00:58.147]          // =>  TRUE
[13:00:58.147]        <control if="hasDormant" while="" timeout="0" info="">
[13:00:58.147]          // if-block "hasDormant"
[13:00:58.147]            // =>  FALSE
[13:00:58.147]          // skip if-block "hasDormant"
[13:00:58.147]        </control>
[13:00:58.147]        <control if="!hasDormant" while="" timeout="0" info="">
[13:00:58.147]          // if-block "!hasDormant"
[13:00:58.147]            // =>  TRUE
[13:00:58.147]          <block atomic="false" info="">
[13:00:58.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:00:58.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:58.149]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:00:58.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:00:58.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:00:58.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:58.151]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:00:58.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:00:58.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:00:58.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:58.151]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:00:58.151]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:00:58.151]          </block>
[13:00:58.151]          // end if-block "!hasDormant"
[13:00:58.151]        </control>
[13:00:58.151]        // end if-block "isSWJ"
[13:00:58.151]      </control>
[13:00:58.151]      <control if="!isSWJ" while="" timeout="0" info="">
[13:00:58.151]        // if-block "!isSWJ"
[13:00:58.151]          // =>  FALSE
[13:00:58.151]        // skip if-block "!isSWJ"
[13:00:58.151]      </control>
[13:00:58.151]      <block atomic="false" info="">
[13:00:58.151]        ReadDP(0x0);
[13:00:58.159]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:00:58.159]      </block>
[13:00:58.159]      // end if-block "protType == 2"
[13:00:58.159]    </control>
[13:00:58.159]  </sequence>
[13:00:58.159]  
[13:00:58.159]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:00:58.159]  
[13:00:58.159]  <debugvars>
[13:00:58.159]    // Pre-defined
[13:00:58.159]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:58.159]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:58.159]    __dp=0x00000000
[13:00:58.159]    __ap=0x00000000
[13:00:58.159]    __traceout=0x00000000      (Trace Disabled)
[13:00:58.159]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:58.159]    __FlashAddr=0x00000000
[13:00:58.159]    __FlashLen=0x00000000
[13:00:58.159]    __FlashArg=0x00000000
[13:00:58.159]    __FlashOp=0x00000000
[13:00:58.159]    __Result=0x00000000
[13:00:58.159]  </debugvars>
[13:00:58.159]  
[13:00:58.159]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:00:58.159]    <block atomic="false" info="">
[13:00:58.159]      __var SW_DP_ABORT       = 0x0;
[13:00:58.164]        // -> [SW_DP_ABORT <= 0x00000000]
[13:00:58.164]      __var DP_CTRL_STAT      = 0x4;
[13:00:58.164]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:00:58.164]      __var DP_SELECT         = 0x8;
[13:00:58.164]        // -> [DP_SELECT <= 0x00000008]
[13:00:58.164]      __var powered_down      = 0;
[13:00:58.164]        // -> [powered_down <= 0x00000000]
[13:00:58.164]      WriteDP(DP_SELECT, 0x00000000);
[13:00:58.164]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:00:58.164]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:00:58.164]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:00:58.164]        // -> [powered_down <= 0x00000001]
[13:00:58.164]    </block>
[13:00:58.164]    <control if="powered_down" while="" timeout="0" info="">
[13:00:58.164]      // if-block "powered_down"
[13:00:58.164]        // =>  TRUE
[13:00:58.164]      <block atomic="false" info="">
[13:00:58.164]        Message(0, "Debug/System power-up request sent");
[13:00:58.170]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:00:58.170]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:00:58.172]      </block>
[13:00:58.172]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:00:58.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:00:58.173]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:00:58.173]        // while-condition  =>  FALSE
[13:00:58.173]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:00:58.173]      </control>
[13:00:58.173]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:00:58.173]        // if-block "(__protocol & 0xFFFF) == 1"
[13:00:58.173]          // =>  FALSE
[13:00:58.173]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:00:58.173]      </control>
[13:00:58.173]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:00:58.173]        // if-block "(__protocol & 0xFFFF) == 2"
[13:00:58.173]          // =>  TRUE
[13:00:58.173]        <block atomic="false" info="">
[13:00:58.173]          Message(0, "executing SWD power up");
[13:00:58.175]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:00:58.177]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:00:58.177]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:00:58.179]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:00:58.179]        </block>
[13:00:58.179]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:00:58.179]      </control>
[13:00:58.179]      // end if-block "powered_down"
[13:00:58.179]    </control>
[13:00:58.180]    <block atomic="false" info="">
[13:00:58.180]      __var DEBUG_PORT_VAL    = 0;
[13:00:58.180]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:00:58.180]      __var ACCESS_POINT_VAL  = 0;
[13:00:58.180]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:00:58.180]      __ap = 1; 
[13:00:58.180]        // -> [__ap <= 0x00000001]
[13:00:58.180]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:00:58.181]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:00:58.181]      __ap = 4;
[13:00:58.181]        // -> [__ap <= 0x00000004]
[13:00:58.181]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:58.187]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:00:58.187]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:00:58.187]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:58.190]    </block>
[13:00:58.190]    <block atomic="false" info="">
[13:00:58.190]      __var nReset = 0x80;
[13:00:58.190]        // -> [nReset <= 0x00000080]
[13:00:58.190]      __var canReadPins = 0;
[13:00:58.190]        // -> [canReadPins <= 0x00000000]
[13:00:58.191]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:00:58.192]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:00:58.192]        // -> [canReadPins <= 0x00000001]
[13:00:58.192]    </block>
[13:00:58.192]    <control if="" while="1" timeout="200" info="">
[13:00:58.192]      // while "1"  (timeout="200")
[13:00:58.192]      // while-condition  =>  TRUE
[13:00:58.192]      // while "1"  (timeout="200")
[13:00:58.192]      // while-condition  =>  TRUE
[13:00:58.192]      // while "1"  (timeout="200")
[13:00:58.192]      // while-condition  =>  TRUE
[13:00:58.194]      // while "1"  (timeout="200")
[13:00:58.194]      // while  =>  TIMEOUT
[13:00:58.194]      // end while "1"
[13:00:58.194]    </control>
[13:00:58.194]    <control if="canReadPins" while="" timeout="0" info="">
[13:00:58.194]      // if-block "canReadPins"
[13:00:58.194]        // =>  TRUE
[13:00:58.194]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:00:58.194]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:00:58.196]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:00:58.196]        // while-condition  =>  FALSE
[13:00:58.196]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:00:58.196]      </control>
[13:00:58.196]      // end if-block "canReadPins"
[13:00:58.196]    </control>
[13:00:58.196]    <control if="!canReadPins" while="" timeout="0" info="">
[13:00:58.196]      // if-block "!canReadPins"
[13:00:58.196]        // =>  FALSE
[13:00:58.196]      // skip if-block "!canReadPins"
[13:00:58.196]    </control>
[13:00:58.196]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:00:58.196]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:58.196]        // =>  TRUE
[13:00:58.196]      <block atomic="false" info="">
[13:00:58.198]        WriteAP(0x00, 0x190008);
[13:00:58.199]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:58.199]        WriteAP(0xF0, 0x01);
[13:00:58.204]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:58.204]      </block>
[13:00:58.204]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:58.204]    </control>
[13:00:58.204]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:00:58.204]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:58.204]        // =>  FALSE
[13:00:58.204]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:58.204]    </control>
[13:00:58.204]    <block atomic="false" info="">
[13:00:58.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:58.209]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:00:58.209]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:00:58.209]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:58.209]      __ap = 0; //lets make sure we reset the access point selection
[13:00:58.209]        // -> [__ap <= 0x00000000]
[13:00:58.209]    </block>
[13:00:58.209]  </sequence>
[13:00:58.209]  
[13:00:58.229]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:00:58.229]  
[13:00:58.229]  <debugvars>
[13:00:58.229]    // Pre-defined
[13:00:58.229]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:58.229]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:58.229]    __dp=0x00000000
[13:00:58.229]    __ap=0x00000000
[13:00:58.229]    __traceout=0x00000000      (Trace Disabled)
[13:00:58.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:58.229]    __FlashAddr=0x00000000
[13:00:58.229]    __FlashLen=0x00000000
[13:00:58.229]    __FlashArg=0x00000000
[13:00:58.229]    __FlashOp=0x00000000
[13:00:58.229]    __Result=0x00000000
[13:00:58.229]  </debugvars>
[13:00:58.229]  
[13:00:58.229]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:00:58.229]    <block atomic="false" info="">
[13:00:58.229]      __var deviceID = 0;
[13:00:58.229]        // -> [deviceID <= 0x00000000]
[13:00:58.229]      __var version = 0;
[13:00:58.229]        // -> [version <= 0x00000000]
[13:00:58.229]      __var partNum = 0;
[13:00:58.229]        // -> [partNum <= 0x00000000]
[13:00:58.229]      __var manuf = 0;
[13:00:58.229]        // -> [manuf <= 0x00000000]
[13:00:58.236]      __var isMSPM0G1X0X_G3X0X = 0;
[13:00:58.236]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:00:58.236]      __var isProduction = 0;
[13:00:58.236]        // -> [isProduction <= 0x00000000]
[13:00:58.236]      __var continueId = 0;
[13:00:58.237]        // -> [continueId <= 0x00000000]
[13:00:58.237]      deviceID =   Read32(0x41C40004);
[13:00:58.240]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:00:58.240]        // -> [deviceID <= 0x2BB8802F]
[13:00:58.240]      version = deviceID >> 28;
[13:00:58.240]        // -> [version <= 0x00000002]
[13:00:58.240]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:00:58.240]        // -> [partNum <= 0x0000BB88]
[13:00:58.240]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:00:58.240]        // -> [manuf <= 0x00000017]
[13:00:58.240]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:00:58.240]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:00:58.240]      isProduction = (version > 0);
[13:00:58.240]        // -> [isProduction <= 0x00000001]
[13:00:58.240]    </block>
[13:00:58.240]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:00:58.240]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:00:58.240]        // =>  FALSE
[13:00:58.240]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:00:58.240]    </control>
[13:00:58.240]    <control if="continueId == 4" while="" timeout="0" info="">
[13:00:58.240]      // if-block "continueId == 4"
[13:00:58.240]        // =>  FALSE
[13:00:58.240]      // skip if-block "continueId == 4"
[13:00:58.240]    </control>
[13:00:58.240]    <control if="!isProduction" while="" timeout="0" info="">
[13:00:58.240]      // if-block "!isProduction"
[13:00:58.240]        // =>  FALSE
[13:00:58.240]      // skip if-block "!isProduction"
[13:00:58.240]    </control>
[13:00:58.240]  </sequence>
[13:00:58.240]  
[13:03:24.072]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:03:24.072]  
[13:03:24.072]  <debugvars>
[13:03:24.072]    // Pre-defined
[13:03:24.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:03:24.072]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:03:24.072]    __dp=0x00000000
[13:03:24.072]    __ap=0x00000000
[13:03:24.072]    __traceout=0x00000000      (Trace Disabled)
[13:03:24.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:03:24.073]    __FlashAddr=0x00000000
[13:03:24.073]    __FlashLen=0x00000000
[13:03:24.073]    __FlashArg=0x00000000
[13:03:24.073]    __FlashOp=0x00000000
[13:03:24.073]    __Result=0x00000000
[13:03:24.073]  </debugvars>
[13:03:24.073]  
[13:03:24.073]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:03:24.073]    <block atomic="false" info="">
[13:03:24.073]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:03:24.073]        // -> [isSWJ <= 0x00000001]
[13:03:24.073]      __var hasDormant = __protocol & 0x00020000;
[13:03:24.073]        // -> [hasDormant <= 0x00000000]
[13:03:24.073]      __var protType   = __protocol & 0x0000FFFF;
[13:03:24.073]        // -> [protType <= 0x00000002]
[13:03:24.073]    </block>
[13:03:24.073]    <control if="protType == 1" while="" timeout="0" info="">
[13:03:24.073]      // if-block "protType == 1"
[13:03:24.073]        // =>  FALSE
[13:03:24.073]      // skip if-block "protType == 1"
[13:03:24.073]    </control>
[13:03:24.073]    <control if="protType == 2" while="" timeout="0" info="">
[13:03:24.073]      // if-block "protType == 2"
[13:03:24.073]        // =>  TRUE
[13:03:24.073]      <control if="isSWJ" while="" timeout="0" info="">
[13:03:24.073]        // if-block "isSWJ"
[13:03:24.073]          // =>  TRUE
[13:03:24.073]        <control if="hasDormant" while="" timeout="0" info="">
[13:03:24.073]          // if-block "hasDormant"
[13:03:24.073]            // =>  FALSE
[13:03:24.073]          // skip if-block "hasDormant"
[13:03:24.073]        </control>
[13:03:24.073]        <control if="!hasDormant" while="" timeout="0" info="">
[13:03:24.073]          // if-block "!hasDormant"
[13:03:24.073]            // =>  TRUE
[13:03:24.073]          <block atomic="false" info="">
[13:03:24.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:03:24.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:03:24.078]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:03:24.080]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:03:24.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:03:24.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:03:24.080]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:03:24.080]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:03:24.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:03:24.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:03:24.080]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:03:24.088]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:03:24.088]          </block>
[13:03:24.088]          // end if-block "!hasDormant"
[13:03:24.088]        </control>
[13:03:24.088]        // end if-block "isSWJ"
[13:03:24.089]      </control>
[13:03:24.089]      <control if="!isSWJ" while="" timeout="0" info="">
[13:03:24.089]        // if-block "!isSWJ"
[13:03:24.089]          // =>  FALSE
[13:03:24.089]        // skip if-block "!isSWJ"
[13:03:24.089]      </control>
[13:03:24.089]      <block atomic="false" info="">
[13:03:24.089]        ReadDP(0x0);
[13:03:24.089]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:03:24.092]      </block>
[13:03:24.092]      // end if-block "protType == 2"
[13:03:24.092]    </control>
[13:03:24.092]  </sequence>
[13:03:24.092]  
[13:03:24.095]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:03:24.095]  
[13:03:24.095]  <debugvars>
[13:03:24.095]    // Pre-defined
[13:03:24.095]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:03:24.095]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:03:24.095]    __dp=0x00000000
[13:03:24.095]    __ap=0x00000000
[13:03:24.096]    __traceout=0x00000000      (Trace Disabled)
[13:03:24.096]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:03:24.096]    __FlashAddr=0x00000000
[13:03:24.096]    __FlashLen=0x00000000
[13:03:24.096]    __FlashArg=0x00000000
[13:03:24.096]    __FlashOp=0x00000000
[13:03:24.096]    __Result=0x00000000
[13:03:24.096]  </debugvars>
[13:03:24.096]  
[13:03:24.096]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:03:24.096]    <block atomic="false" info="">
[13:03:24.096]      __var SW_DP_ABORT       = 0x0;
[13:03:24.097]        // -> [SW_DP_ABORT <= 0x00000000]
[13:03:24.097]      __var DP_CTRL_STAT      = 0x4;
[13:03:24.097]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:03:24.097]      __var DP_SELECT         = 0x8;
[13:03:24.097]        // -> [DP_SELECT <= 0x00000008]
[13:03:24.097]      __var powered_down      = 0;
[13:03:24.097]        // -> [powered_down <= 0x00000000]
[13:03:24.097]      WriteDP(DP_SELECT, 0x00000000);
[13:03:24.098]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:03:24.098]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:03:24.103]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:03:24.103]        // -> [powered_down <= 0x00000001]
[13:03:24.103]    </block>
[13:03:24.103]    <control if="powered_down" while="" timeout="0" info="">
[13:03:24.103]      // if-block "powered_down"
[13:03:24.103]        // =>  TRUE
[13:03:24.103]      <block atomic="false" info="">
[13:03:24.103]        Message(0, "Debug/System power-up request sent");
[13:03:24.104]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:03:24.107]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:03:24.107]      </block>
[13:03:24.107]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:03:24.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:03:24.108]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:03:24.108]        // while-condition  =>  FALSE
[13:03:24.108]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:03:24.108]      </control>
[13:03:24.108]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:03:24.108]        // if-block "(__protocol & 0xFFFF) == 1"
[13:03:24.108]          // =>  FALSE
[13:03:24.108]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:03:24.108]      </control>
[13:03:24.109]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:03:24.109]        // if-block "(__protocol & 0xFFFF) == 2"
[13:03:24.109]          // =>  TRUE
[13:03:24.109]        <block atomic="false" info="">
[13:03:24.109]          Message(0, "executing SWD power up");
[13:03:24.109]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:03:24.109]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:03:24.109]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:03:24.109]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:03:24.109]        </block>
[13:03:24.109]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:03:24.109]      </control>
[13:03:24.109]      // end if-block "powered_down"
[13:03:24.109]    </control>
[13:03:24.109]    <block atomic="false" info="">
[13:03:24.109]      __var DEBUG_PORT_VAL    = 0;
[13:03:24.109]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:03:24.109]      __var ACCESS_POINT_VAL  = 0;
[13:03:24.109]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:03:24.109]      __ap = 1; 
[13:03:24.109]        // -> [__ap <= 0x00000001]
[13:03:24.109]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:03:24.121]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:03:24.121]      __ap = 4;
[13:03:24.121]        // -> [__ap <= 0x00000004]
[13:03:24.121]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:03:24.121]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:03:24.121]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:03:24.121]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:03:24.128]    </block>
[13:03:24.128]    <block atomic="false" info="">
[13:03:24.128]      __var nReset = 0x80;
[13:03:24.128]        // -> [nReset <= 0x00000080]
[13:03:24.128]      __var canReadPins = 0;
[13:03:24.128]        // -> [canReadPins <= 0x00000000]
[13:03:24.128]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:03:24.128]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:03:24.128]        // -> [canReadPins <= 0x00000001]
[13:03:24.128]    </block>
[13:03:24.128]    <control if="" while="1" timeout="200" info="">
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.128]      // while-condition  =>  TRUE
[13:03:24.128]      // while "1"  (timeout="200")
[13:03:24.138]      // while-condition  =>  TRUE
[13:03:24.138]      // while "1"  (timeout="200")
[13:03:24.138]      // while  =>  TIMEOUT
[13:03:24.138]      // end while "1"
[13:03:24.138]    </control>
[13:03:24.138]    <control if="canReadPins" while="" timeout="0" info="">
[13:03:24.138]      // if-block "canReadPins"
[13:03:24.138]        // =>  TRUE
[13:03:24.138]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:03:24.138]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:03:24.140]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:03:24.140]        // while-condition  =>  FALSE
[13:03:24.140]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:03:24.140]      </control>
[13:03:24.140]      // end if-block "canReadPins"
[13:03:24.140]    </control>
[13:03:24.140]    <control if="!canReadPins" while="" timeout="0" info="">
[13:03:24.140]      // if-block "!canReadPins"
[13:03:24.140]        // =>  FALSE
[13:03:24.140]      // skip if-block "!canReadPins"
[13:03:24.140]    </control>
[13:03:24.140]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:03:24.140]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:03:24.140]        // =>  TRUE
[13:03:24.140]      <block atomic="false" info="">
[13:03:24.140]        WriteAP(0x00, 0x190008);
[13:03:24.140]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:03:24.140]        WriteAP(0xF0, 0x01);
[13:03:24.148]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:03:24.148]      </block>
[13:03:24.148]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:03:24.148]    </control>
[13:03:24.148]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:03:24.148]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:03:24.148]        // =>  FALSE
[13:03:24.148]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:03:24.148]    </control>
[13:03:24.148]    <block atomic="false" info="">
[13:03:24.148]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:03:24.148]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:03:24.148]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:03:24.148]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:03:24.158]      __ap = 0; //lets make sure we reset the access point selection
[13:03:24.158]        // -> [__ap <= 0x00000000]
[13:03:24.158]    </block>
[13:03:24.159]  </sequence>
[13:03:24.159]  
[13:03:24.185]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:03:24.185]  
[13:03:24.185]  <debugvars>
[13:03:24.185]    // Pre-defined
[13:03:24.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:03:24.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:03:24.186]    __dp=0x00000000
[13:03:24.186]    __ap=0x00000000
[13:03:24.186]    __traceout=0x00000000      (Trace Disabled)
[13:03:24.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:03:24.186]    __FlashAddr=0x00000000
[13:03:24.186]    __FlashLen=0x00000000
[13:03:24.186]    __FlashArg=0x00000000
[13:03:24.186]    __FlashOp=0x00000000
[13:03:24.186]    __Result=0x00000000
[13:03:24.186]  </debugvars>
[13:03:24.186]  
[13:03:24.188]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:03:24.188]    <block atomic="false" info="">
[13:03:24.188]      __var deviceID = 0;
[13:03:24.188]        // -> [deviceID <= 0x00000000]
[13:03:24.188]      __var version = 0;
[13:03:24.188]        // -> [version <= 0x00000000]
[13:03:24.188]      __var partNum = 0;
[13:03:24.188]        // -> [partNum <= 0x00000000]
[13:03:24.188]      __var manuf = 0;
[13:03:24.188]        // -> [manuf <= 0x00000000]
[13:03:24.188]      __var isMSPM0G1X0X_G3X0X = 0;
[13:03:24.188]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:03:24.190]      __var isProduction = 0;
[13:03:24.190]        // -> [isProduction <= 0x00000000]
[13:03:24.190]      __var continueId = 0;
[13:03:24.190]        // -> [continueId <= 0x00000000]
[13:03:24.190]      deviceID =   Read32(0x41C40004);
[13:03:24.198]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:03:24.198]        // -> [deviceID <= 0x2BB8802F]
[13:03:24.198]      version = deviceID >> 28;
[13:03:24.198]        // -> [version <= 0x00000002]
[13:03:24.198]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:03:24.198]        // -> [partNum <= 0x0000BB88]
[13:03:24.198]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:03:24.198]        // -> [manuf <= 0x00000017]
[13:03:24.198]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:03:24.198]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:03:24.198]      isProduction = (version > 0);
[13:03:24.198]        // -> [isProduction <= 0x00000001]
[13:03:24.198]    </block>
[13:03:24.198]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:03:24.198]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:03:24.198]        // =>  FALSE
[13:03:24.198]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:03:24.198]    </control>
[13:03:24.198]    <control if="continueId == 4" while="" timeout="0" info="">
[13:03:24.198]      // if-block "continueId == 4"
[13:03:24.198]        // =>  FALSE
[13:03:24.198]      // skip if-block "continueId == 4"
[13:03:24.198]    </control>
[13:03:24.198]    <control if="!isProduction" while="" timeout="0" info="">
[13:03:24.198]      // if-block "!isProduction"
[13:03:24.198]        // =>  FALSE
[13:03:24.198]      // skip if-block "!isProduction"
[13:03:24.198]    </control>
[13:03:24.198]  </sequence>
[13:03:24.198]  
[13:10:46.574]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:10:46.574]  
[13:10:46.582]  <debugvars>
[13:10:46.582]    // Pre-defined
[13:10:46.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:10:46.582]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:10:46.582]    __dp=0x00000000
[13:10:46.582]    __ap=0x00000000
[13:10:46.582]    __traceout=0x00000000      (Trace Disabled)
[13:10:46.582]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:10:46.582]    __FlashAddr=0x00000000
[13:10:46.582]    __FlashLen=0x00000000
[13:10:46.582]    __FlashArg=0x00000000
[13:10:46.582]    __FlashOp=0x00000000
[13:10:46.582]    __Result=0x00000000
[13:10:46.582]  </debugvars>
[13:10:46.582]  
[13:10:46.582]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:10:46.582]    <block atomic="false" info="">
[13:10:46.582]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:10:46.582]        // -> [isSWJ <= 0x00000001]
[13:10:46.582]      __var hasDormant = __protocol & 0x00020000;
[13:10:46.582]        // -> [hasDormant <= 0x00000000]
[13:10:46.582]      __var protType   = __protocol & 0x0000FFFF;
[13:10:46.582]        // -> [protType <= 0x00000002]
[13:10:46.582]    </block>
[13:10:46.582]    <control if="protType == 1" while="" timeout="0" info="">
[13:10:46.582]      // if-block "protType == 1"
[13:10:46.582]        // =>  FALSE
[13:10:46.582]      // skip if-block "protType == 1"
[13:10:46.582]    </control>
[13:10:46.582]    <control if="protType == 2" while="" timeout="0" info="">
[13:10:46.582]      // if-block "protType == 2"
[13:10:46.582]        // =>  TRUE
[13:10:46.582]      <control if="isSWJ" while="" timeout="0" info="">
[13:10:46.582]        // if-block "isSWJ"
[13:10:46.582]          // =>  TRUE
[13:10:46.582]        <control if="hasDormant" while="" timeout="0" info="">
[13:10:46.582]          // if-block "hasDormant"
[13:10:46.582]            // =>  FALSE
[13:10:46.582]          // skip if-block "hasDormant"
[13:10:46.582]        </control>
[13:10:46.582]        <control if="!hasDormant" while="" timeout="0" info="">
[13:10:46.582]          // if-block "!hasDormant"
[13:10:46.582]            // =>  TRUE
[13:10:46.582]          <block atomic="false" info="">
[13:10:46.582]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:10:46.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:10:46.582]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:10:46.582]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:10:46.582]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:10:46.592]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:10:46.592]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:10:46.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:10:46.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:10:46.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:10:46.593]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:10:46.599]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:10:46.599]          </block>
[13:10:46.599]          // end if-block "!hasDormant"
[13:10:46.599]        </control>
[13:10:46.599]        // end if-block "isSWJ"
[13:10:46.599]      </control>
[13:10:46.599]      <control if="!isSWJ" while="" timeout="0" info="">
[13:10:46.599]        // if-block "!isSWJ"
[13:10:46.599]          // =>  FALSE
[13:10:46.599]        // skip if-block "!isSWJ"
[13:10:46.599]      </control>
[13:10:46.599]      <block atomic="false" info="">
[13:10:46.599]        ReadDP(0x0);
[13:10:46.602]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:10:46.602]      </block>
[13:10:46.602]      // end if-block "protType == 2"
[13:10:46.602]    </control>
[13:10:46.602]  </sequence>
[13:10:46.602]  
[13:10:46.612]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:10:46.612]  
[13:10:46.612]  <debugvars>
[13:10:46.612]    // Pre-defined
[13:10:46.612]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:10:46.612]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:10:46.612]    __dp=0x00000000
[13:10:46.612]    __ap=0x00000000
[13:10:46.612]    __traceout=0x00000000      (Trace Disabled)
[13:10:46.612]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:10:46.612]    __FlashAddr=0x00000000
[13:10:46.612]    __FlashLen=0x00000000
[13:10:46.612]    __FlashArg=0x00000000
[13:10:46.612]    __FlashOp=0x00000000
[13:10:46.612]    __Result=0x00000000
[13:10:46.612]  </debugvars>
[13:10:46.612]  
[13:10:46.612]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:10:46.612]    <block atomic="false" info="">
[13:10:46.612]      __var SW_DP_ABORT       = 0x0;
[13:10:46.612]        // -> [SW_DP_ABORT <= 0x00000000]
[13:10:46.612]      __var DP_CTRL_STAT      = 0x4;
[13:10:46.612]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:10:46.612]      __var DP_SELECT         = 0x8;
[13:10:46.612]        // -> [DP_SELECT <= 0x00000008]
[13:10:46.612]      __var powered_down      = 0;
[13:10:46.612]        // -> [powered_down <= 0x00000000]
[13:10:46.612]      WriteDP(DP_SELECT, 0x00000000);
[13:10:46.622]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:10:46.622]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:10:46.622]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:10:46.622]        // -> [powered_down <= 0x00000001]
[13:10:46.622]    </block>
[13:10:46.622]    <control if="powered_down" while="" timeout="0" info="">
[13:10:46.622]      // if-block "powered_down"
[13:10:46.622]        // =>  TRUE
[13:10:46.622]      <block atomic="false" info="">
[13:10:46.622]        Message(0, "Debug/System power-up request sent");
[13:10:46.622]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:10:46.631]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:10:46.631]      </block>
[13:10:46.631]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:10:46.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:10:46.632]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:10:46.632]        // while-condition  =>  FALSE
[13:10:46.632]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:10:46.632]      </control>
[13:10:46.632]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:10:46.632]        // if-block "(__protocol & 0xFFFF) == 1"
[13:10:46.632]          // =>  FALSE
[13:10:46.632]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:10:46.632]      </control>
[13:10:46.632]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:10:46.632]        // if-block "(__protocol & 0xFFFF) == 2"
[13:10:46.632]          // =>  TRUE
[13:10:46.632]        <block atomic="false" info="">
[13:10:46.632]          Message(0, "executing SWD power up");
[13:10:46.632]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:10:46.632]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:10:46.632]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:10:46.641]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:10:46.641]        </block>
[13:10:46.641]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:10:46.641]      </control>
[13:10:46.641]      // end if-block "powered_down"
[13:10:46.641]    </control>
[13:10:46.641]    <block atomic="false" info="">
[13:10:46.641]      __var DEBUG_PORT_VAL    = 0;
[13:10:46.641]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:10:46.641]      __var ACCESS_POINT_VAL  = 0;
[13:10:46.642]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:10:46.642]      __ap = 1; 
[13:10:46.642]        // -> [__ap <= 0x00000001]
[13:10:46.642]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:10:46.643]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:10:46.643]      __ap = 4;
[13:10:46.643]        // -> [__ap <= 0x00000004]
[13:10:46.643]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:10:46.648]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:10:46.648]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:10:46.648]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:10:46.648]    </block>
[13:10:46.648]    <block atomic="false" info="">
[13:10:46.648]      __var nReset = 0x80;
[13:10:46.648]        // -> [nReset <= 0x00000080]
[13:10:46.648]      __var canReadPins = 0;
[13:10:46.652]        // -> [canReadPins <= 0x00000000]
[13:10:46.652]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:10:46.655]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:10:46.655]        // -> [canReadPins <= 0x00000001]
[13:10:46.655]    </block>
[13:10:46.655]    <control if="" while="1" timeout="200" info="">
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.655]      // while-condition  =>  TRUE
[13:10:46.655]      // while "1"  (timeout="200")
[13:10:46.663]      // while-condition  =>  TRUE
[13:10:46.663]      // while "1"  (timeout="200")
[13:10:46.663]      // while  =>  TIMEOUT
[13:10:46.663]      // end while "1"
[13:10:46.663]    </control>
[13:10:46.663]    <control if="canReadPins" while="" timeout="0" info="">
[13:10:46.663]      // if-block "canReadPins"
[13:10:46.663]        // =>  TRUE
[13:10:46.663]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:10:46.663]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:10:46.663]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:10:46.663]        // while-condition  =>  FALSE
[13:10:46.663]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:10:46.663]      </control>
[13:10:46.663]      // end if-block "canReadPins"
[13:10:46.663]    </control>
[13:10:46.663]    <control if="!canReadPins" while="" timeout="0" info="">
[13:10:46.663]      // if-block "!canReadPins"
[13:10:46.663]        // =>  FALSE
[13:10:46.663]      // skip if-block "!canReadPins"
[13:10:46.663]    </control>
[13:10:46.663]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:10:46.663]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:10:46.663]        // =>  TRUE
[13:10:46.663]      <block atomic="false" info="">
[13:10:46.663]        WriteAP(0x00, 0x190008);
[13:10:46.669]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:10:46.669]        WriteAP(0xF0, 0x01);
[13:10:46.673]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:10:46.673]      </block>
[13:10:46.673]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:10:46.673]    </control>
[13:10:46.673]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:10:46.673]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:10:46.673]        // =>  FALSE
[13:10:46.673]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:10:46.673]    </control>
[13:10:46.673]    <block atomic="false" info="">
[13:10:46.673]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:10:46.673]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:10:46.673]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:10:46.673]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:10:46.673]      __ap = 0; //lets make sure we reset the access point selection
[13:10:46.673]        // -> [__ap <= 0x00000000]
[13:10:46.673]    </block>
[13:10:46.673]  </sequence>
[13:10:46.673]  
[13:10:46.716]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:10:46.716]  
[13:10:46.716]  <debugvars>
[13:10:46.716]    // Pre-defined
[13:10:46.716]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:10:46.716]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:10:46.716]    __dp=0x00000000
[13:10:46.716]    __ap=0x00000000
[13:10:46.716]    __traceout=0x00000000      (Trace Disabled)
[13:10:46.716]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:10:46.716]    __FlashAddr=0x00000000
[13:10:46.716]    __FlashLen=0x00000000
[13:10:46.716]    __FlashArg=0x00000000
[13:10:46.716]    __FlashOp=0x00000000
[13:10:46.716]    __Result=0x00000000
[13:10:46.716]  </debugvars>
[13:10:46.716]  
[13:10:46.716]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:10:46.716]    <block atomic="false" info="">
[13:10:46.716]      __var deviceID = 0;
[13:10:46.716]        // -> [deviceID <= 0x00000000]
[13:10:46.716]      __var version = 0;
[13:10:46.716]        // -> [version <= 0x00000000]
[13:10:46.716]      __var partNum = 0;
[13:10:46.716]        // -> [partNum <= 0x00000000]
[13:10:46.716]      __var manuf = 0;
[13:10:46.716]        // -> [manuf <= 0x00000000]
[13:10:46.716]      __var isMSPM0G1X0X_G3X0X = 0;
[13:10:46.716]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:10:46.716]      __var isProduction = 0;
[13:10:46.716]        // -> [isProduction <= 0x00000000]
[13:10:46.716]      __var continueId = 0;
[13:10:46.721]        // -> [continueId <= 0x00000000]
[13:10:46.721]      deviceID =   Read32(0x41C40004);
[13:10:46.735]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:10:46.735]        // -> [deviceID <= 0x2BB8802F]
[13:10:46.735]      version = deviceID >> 28;
[13:10:46.735]        // -> [version <= 0x00000002]
[13:10:46.735]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:10:46.735]        // -> [partNum <= 0x0000BB88]
[13:10:46.735]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:10:46.735]        // -> [manuf <= 0x00000017]
[13:10:46.735]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:10:46.735]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:10:46.735]      isProduction = (version > 0);
[13:10:46.735]        // -> [isProduction <= 0x00000001]
[13:10:46.735]    </block>
[13:10:46.735]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:10:46.735]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:10:46.735]        // =>  FALSE
[13:10:46.735]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:10:46.735]    </control>
[13:10:46.735]    <control if="continueId == 4" while="" timeout="0" info="">
[13:10:46.735]      // if-block "continueId == 4"
[13:10:46.735]        // =>  FALSE
[13:10:46.735]      // skip if-block "continueId == 4"
[13:10:46.737]    </control>
[13:10:46.737]    <control if="!isProduction" while="" timeout="0" info="">
[13:10:46.737]      // if-block "!isProduction"
[13:10:46.737]        // =>  FALSE
[13:10:46.737]      // skip if-block "!isProduction"
[13:10:46.737]    </control>
[13:10:46.737]  </sequence>
[13:10:46.737]  
[13:11:01.025]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:11:01.025]  
[13:11:01.033]  <debugvars>
[13:11:01.033]    // Pre-defined
[13:11:01.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:01.033]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:01.034]    __dp=0x00000000
[13:11:01.034]    __ap=0x00000000
[13:11:01.034]    __traceout=0x00000000      (Trace Disabled)
[13:11:01.034]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:01.034]    __FlashAddr=0x00000000
[13:11:01.034]    __FlashLen=0x00000000
[13:11:01.034]    __FlashArg=0x00000000
[13:11:01.034]    __FlashOp=0x00000000
[13:11:01.034]    __Result=0x00000000
[13:11:01.034]  </debugvars>
[13:11:01.034]  
[13:11:01.034]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:11:01.035]    <block atomic="false" info="">
[13:11:01.035]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:11:01.035]        // -> [isSWJ <= 0x00000001]
[13:11:01.035]      __var hasDormant = __protocol & 0x00020000;
[13:11:01.035]        // -> [hasDormant <= 0x00000000]
[13:11:01.035]      __var protType   = __protocol & 0x0000FFFF;
[13:11:01.035]        // -> [protType <= 0x00000002]
[13:11:01.035]    </block>
[13:11:01.035]    <control if="protType == 1" while="" timeout="0" info="">
[13:11:01.035]      // if-block "protType == 1"
[13:11:01.035]        // =>  FALSE
[13:11:01.035]      // skip if-block "protType == 1"
[13:11:01.035]    </control>
[13:11:01.035]    <control if="protType == 2" while="" timeout="0" info="">
[13:11:01.035]      // if-block "protType == 2"
[13:11:01.035]        // =>  TRUE
[13:11:01.035]      <control if="isSWJ" while="" timeout="0" info="">
[13:11:01.035]        // if-block "isSWJ"
[13:11:01.035]          // =>  TRUE
[13:11:01.035]        <control if="hasDormant" while="" timeout="0" info="">
[13:11:01.035]          // if-block "hasDormant"
[13:11:01.035]            // =>  FALSE
[13:11:01.035]          // skip if-block "hasDormant"
[13:11:01.035]        </control>
[13:11:01.035]        <control if="!hasDormant" while="" timeout="0" info="">
[13:11:01.037]          // if-block "!hasDormant"
[13:11:01.037]            // =>  TRUE
[13:11:01.037]          <block atomic="false" info="">
[13:11:01.037]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:11:01.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:01.039]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:11:01.040]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:11:01.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:11:01.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:01.041]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:11:01.046]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:11:01.046]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:11:01.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:01.047]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:11:01.050]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:11:01.050]          </block>
[13:11:01.050]          // end if-block "!hasDormant"
[13:11:01.050]        </control>
[13:11:01.050]        // end if-block "isSWJ"
[13:11:01.050]      </control>
[13:11:01.051]      <control if="!isSWJ" while="" timeout="0" info="">
[13:11:01.051]        // if-block "!isSWJ"
[13:11:01.051]          // =>  FALSE
[13:11:01.051]        // skip if-block "!isSWJ"
[13:11:01.051]      </control>
[13:11:01.051]      <block atomic="false" info="">
[13:11:01.051]        ReadDP(0x0);
[13:11:01.052]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:11:01.052]      </block>
[13:11:01.052]      // end if-block "protType == 2"
[13:11:01.052]    </control>
[13:11:01.052]  </sequence>
[13:11:01.052]  
[13:11:01.056]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:11:01.056]  
[13:11:01.056]  <debugvars>
[13:11:01.056]    // Pre-defined
[13:11:01.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:01.057]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:01.057]    __dp=0x00000000
[13:11:01.057]    __ap=0x00000000
[13:11:01.057]    __traceout=0x00000000      (Trace Disabled)
[13:11:01.057]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:01.057]    __FlashAddr=0x00000000
[13:11:01.057]    __FlashLen=0x00000000
[13:11:01.057]    __FlashArg=0x00000000
[13:11:01.057]    __FlashOp=0x00000000
[13:11:01.057]    __Result=0x00000000
[13:11:01.057]  </debugvars>
[13:11:01.057]  
[13:11:01.057]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:11:01.057]    <block atomic="false" info="">
[13:11:01.057]      __var SW_DP_ABORT       = 0x0;
[13:11:01.057]        // -> [SW_DP_ABORT <= 0x00000000]
[13:11:01.057]      __var DP_CTRL_STAT      = 0x4;
[13:11:01.057]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:11:01.057]      __var DP_SELECT         = 0x8;
[13:11:01.057]        // -> [DP_SELECT <= 0x00000008]
[13:11:01.057]      __var powered_down      = 0;
[13:11:01.057]        // -> [powered_down <= 0x00000000]
[13:11:01.057]      WriteDP(DP_SELECT, 0x00000000);
[13:11:01.061]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:11:01.061]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:11:01.061]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:11:01.061]        // -> [powered_down <= 0x00000001]
[13:11:01.061]    </block>
[13:11:01.061]    <control if="powered_down" while="" timeout="0" info="">
[13:11:01.061]      // if-block "powered_down"
[13:11:01.061]        // =>  TRUE
[13:11:01.061]      <block atomic="false" info="">
[13:11:01.061]        Message(0, "Debug/System power-up request sent");
[13:11:01.066]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:11:01.071]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:11:01.071]      </block>
[13:11:01.071]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:11:01.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:11:01.074]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:11:01.074]        // while-condition  =>  FALSE
[13:11:01.074]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:11:01.074]      </control>
[13:11:01.074]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:11:01.074]        // if-block "(__protocol & 0xFFFF) == 1"
[13:11:01.074]          // =>  FALSE
[13:11:01.074]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:11:01.074]      </control>
[13:11:01.074]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:11:01.074]        // if-block "(__protocol & 0xFFFF) == 2"
[13:11:01.074]          // =>  TRUE
[13:11:01.074]        <block atomic="false" info="">
[13:11:01.074]          Message(0, "executing SWD power up");
[13:11:01.077]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:11:01.079]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:11:01.079]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:11:01.081]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:11:01.081]        </block>
[13:11:01.081]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:11:01.081]      </control>
[13:11:01.081]      // end if-block "powered_down"
[13:11:01.081]    </control>
[13:11:01.081]    <block atomic="false" info="">
[13:11:01.081]      __var DEBUG_PORT_VAL    = 0;
[13:11:01.081]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:11:01.081]      __var ACCESS_POINT_VAL  = 0;
[13:11:01.081]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:11:01.081]      __ap = 1; 
[13:11:01.081]        // -> [__ap <= 0x00000001]
[13:11:01.081]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:11:01.086]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:11:01.086]      __ap = 4;
[13:11:01.086]        // -> [__ap <= 0x00000004]
[13:11:01.086]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:01.093]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:11:01.093]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:11:01.093]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:01.095]    </block>
[13:11:01.095]    <block atomic="false" info="">
[13:11:01.095]      __var nReset = 0x80;
[13:11:01.095]        // -> [nReset <= 0x00000080]
[13:11:01.095]      __var canReadPins = 0;
[13:11:01.095]        // -> [canReadPins <= 0x00000000]
[13:11:01.095]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:11:01.095]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:11:01.095]        // -> [canReadPins <= 0x00000001]
[13:11:01.095]    </block>
[13:11:01.095]    <control if="" while="1" timeout="200" info="">
[13:11:01.095]      // while "1"  (timeout="200")
[13:11:01.095]      // while-condition  =>  TRUE
[13:11:01.101]      // while "1"  (timeout="200")
[13:11:01.101]      // while  =>  TIMEOUT
[13:11:01.101]      // end while "1"
[13:11:01.101]    </control>
[13:11:01.101]    <control if="canReadPins" while="" timeout="0" info="">
[13:11:01.101]      // if-block "canReadPins"
[13:11:01.101]        // =>  TRUE
[13:11:01.101]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:11:01.101]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:11:01.101]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:11:01.101]        // while-condition  =>  FALSE
[13:11:01.101]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:11:01.101]      </control>
[13:11:01.101]      // end if-block "canReadPins"
[13:11:01.101]    </control>
[13:11:01.101]    <control if="!canReadPins" while="" timeout="0" info="">
[13:11:01.101]      // if-block "!canReadPins"
[13:11:01.101]        // =>  FALSE
[13:11:01.105]      // skip if-block "!canReadPins"
[13:11:01.105]    </control>
[13:11:01.105]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:11:01.105]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:01.105]        // =>  TRUE
[13:11:01.105]      <block atomic="false" info="">
[13:11:01.105]        WriteAP(0x00, 0x190008);
[13:11:01.107]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:01.107]        WriteAP(0xF0, 0x01);
[13:11:01.111]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:01.111]      </block>
[13:11:01.111]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:01.111]    </control>
[13:11:01.111]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:11:01.111]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:01.111]        // =>  FALSE
[13:11:01.111]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:01.111]    </control>
[13:11:01.111]    <block atomic="false" info="">
[13:11:01.111]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:01.115]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:11:01.115]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:11:01.115]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:01.115]      __ap = 0; //lets make sure we reset the access point selection
[13:11:01.115]        // -> [__ap <= 0x00000000]
[13:11:01.115]    </block>
[13:11:01.115]  </sequence>
[13:11:01.115]  
[13:11:01.141]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:11:01.141]  
[13:11:01.141]  <debugvars>
[13:11:01.141]    // Pre-defined
[13:11:01.141]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:01.141]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:01.141]    __dp=0x00000000
[13:11:01.141]    __ap=0x00000000
[13:11:01.141]    __traceout=0x00000000      (Trace Disabled)
[13:11:01.141]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:01.141]    __FlashAddr=0x00000000
[13:11:01.141]    __FlashLen=0x00000000
[13:11:01.141]    __FlashArg=0x00000000
[13:11:01.141]    __FlashOp=0x00000000
[13:11:01.141]    __Result=0x00000000
[13:11:01.141]  </debugvars>
[13:11:01.141]  
[13:11:01.141]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:11:01.145]    <block atomic="false" info="">
[13:11:01.145]      __var deviceID = 0;
[13:11:01.145]        // -> [deviceID <= 0x00000000]
[13:11:01.145]      __var version = 0;
[13:11:01.145]        // -> [version <= 0x00000000]
[13:11:01.145]      __var partNum = 0;
[13:11:01.145]        // -> [partNum <= 0x00000000]
[13:11:01.145]      __var manuf = 0;
[13:11:01.145]        // -> [manuf <= 0x00000000]
[13:11:01.145]      __var isMSPM0G1X0X_G3X0X = 0;
[13:11:01.145]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:11:01.145]      __var isProduction = 0;
[13:11:01.145]        // -> [isProduction <= 0x00000000]
[13:11:01.145]      __var continueId = 0;
[13:11:01.145]        // -> [continueId <= 0x00000000]
[13:11:01.145]      deviceID =   Read32(0x41C40004);
[13:11:01.155]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:11:01.155]        // -> [deviceID <= 0x2BB8802F]
[13:11:01.155]      version = deviceID >> 28;
[13:11:01.155]        // -> [version <= 0x00000002]
[13:11:01.156]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:11:01.156]        // -> [partNum <= 0x0000BB88]
[13:11:01.156]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:11:01.156]        // -> [manuf <= 0x00000017]
[13:11:01.156]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:11:01.156]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:11:01.156]      isProduction = (version > 0);
[13:11:01.156]        // -> [isProduction <= 0x00000001]
[13:11:01.156]    </block>
[13:11:01.156]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:11:01.156]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:11:01.156]        // =>  FALSE
[13:11:01.156]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:11:01.156]    </control>
[13:11:01.156]    <control if="continueId == 4" while="" timeout="0" info="">
[13:11:01.156]      // if-block "continueId == 4"
[13:11:01.156]        // =>  FALSE
[13:11:01.156]      // skip if-block "continueId == 4"
[13:11:01.156]    </control>
[13:11:01.156]    <control if="!isProduction" while="" timeout="0" info="">
[13:11:01.156]      // if-block "!isProduction"
[13:11:01.156]        // =>  FALSE
[13:11:01.156]      // skip if-block "!isProduction"
[13:11:01.156]    </control>
[13:11:01.156]  </sequence>
[13:11:01.156]  
[13:11:28.968]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:11:28.968]  
[13:11:28.978]  <debugvars>
[13:11:28.978]    // Pre-defined
[13:11:28.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:28.978]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:28.978]    __dp=0x00000000
[13:11:28.978]    __ap=0x00000000
[13:11:28.978]    __traceout=0x00000000      (Trace Disabled)
[13:11:28.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:28.978]    __FlashAddr=0x00000000
[13:11:28.978]    __FlashLen=0x00000000
[13:11:28.978]    __FlashArg=0x00000000
[13:11:28.978]    __FlashOp=0x00000000
[13:11:28.978]    __Result=0x00000000
[13:11:28.978]  </debugvars>
[13:11:28.978]  
[13:11:28.978]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:11:28.978]    <block atomic="false" info="">
[13:11:28.978]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:11:28.978]        // -> [isSWJ <= 0x00000001]
[13:11:28.978]      __var hasDormant = __protocol & 0x00020000;
[13:11:28.978]        // -> [hasDormant <= 0x00000000]
[13:11:28.978]      __var protType   = __protocol & 0x0000FFFF;
[13:11:28.978]        // -> [protType <= 0x00000002]
[13:11:28.978]    </block>
[13:11:28.978]    <control if="protType == 1" while="" timeout="0" info="">
[13:11:28.978]      // if-block "protType == 1"
[13:11:28.980]        // =>  FALSE
[13:11:28.980]      // skip if-block "protType == 1"
[13:11:28.980]    </control>
[13:11:28.980]    <control if="protType == 2" while="" timeout="0" info="">
[13:11:28.980]      // if-block "protType == 2"
[13:11:28.980]        // =>  TRUE
[13:11:28.980]      <control if="isSWJ" while="" timeout="0" info="">
[13:11:28.980]        // if-block "isSWJ"
[13:11:28.980]          // =>  TRUE
[13:11:28.980]        <control if="hasDormant" while="" timeout="0" info="">
[13:11:28.980]          // if-block "hasDormant"
[13:11:28.980]            // =>  FALSE
[13:11:28.980]          // skip if-block "hasDormant"
[13:11:28.980]        </control>
[13:11:28.980]        <control if="!hasDormant" while="" timeout="0" info="">
[13:11:28.980]          // if-block "!hasDormant"
[13:11:28.980]            // =>  TRUE
[13:11:28.980]          <block atomic="false" info="">
[13:11:28.980]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:11:28.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:28.988]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:11:28.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:11:28.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:11:28.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:28.992]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:11:28.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:11:28.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:11:28.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:28.996]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:11:28.996]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:11:28.996]          </block>
[13:11:28.996]          // end if-block "!hasDormant"
[13:11:28.996]        </control>
[13:11:28.996]        // end if-block "isSWJ"
[13:11:28.996]      </control>
[13:11:28.996]      <control if="!isSWJ" while="" timeout="0" info="">
[13:11:28.996]        // if-block "!isSWJ"
[13:11:28.996]          // =>  FALSE
[13:11:28.996]        // skip if-block "!isSWJ"
[13:11:28.996]      </control>
[13:11:28.996]      <block atomic="false" info="">
[13:11:28.996]        ReadDP(0x0);
[13:11:29.001]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:11:29.001]      </block>
[13:11:29.001]      // end if-block "protType == 2"
[13:11:29.002]    </control>
[13:11:29.002]  </sequence>
[13:11:29.002]  
[13:11:29.003]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:11:29.003]  
[13:11:29.003]  <debugvars>
[13:11:29.003]    // Pre-defined
[13:11:29.003]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:29.003]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:29.003]    __dp=0x00000000
[13:11:29.003]    __ap=0x00000000
[13:11:29.003]    __traceout=0x00000000      (Trace Disabled)
[13:11:29.003]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:29.003]    __FlashAddr=0x00000000
[13:11:29.003]    __FlashLen=0x00000000
[13:11:29.003]    __FlashArg=0x00000000
[13:11:29.003]    __FlashOp=0x00000000
[13:11:29.003]    __Result=0x00000000
[13:11:29.003]  </debugvars>
[13:11:29.003]  
[13:11:29.003]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:11:29.003]    <block atomic="false" info="">
[13:11:29.003]      __var SW_DP_ABORT       = 0x0;
[13:11:29.003]        // -> [SW_DP_ABORT <= 0x00000000]
[13:11:29.003]      __var DP_CTRL_STAT      = 0x4;
[13:11:29.003]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:11:29.003]      __var DP_SELECT         = 0x8;
[13:11:29.003]        // -> [DP_SELECT <= 0x00000008]
[13:11:29.003]      __var powered_down      = 0;
[13:11:29.003]        // -> [powered_down <= 0x00000000]
[13:11:29.003]      WriteDP(DP_SELECT, 0x00000000);
[13:11:29.003]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:11:29.003]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:11:29.017]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:11:29.017]        // -> [powered_down <= 0x00000001]
[13:11:29.017]    </block>
[13:11:29.017]    <control if="powered_down" while="" timeout="0" info="">
[13:11:29.017]      // if-block "powered_down"
[13:11:29.017]        // =>  TRUE
[13:11:29.017]      <block atomic="false" info="">
[13:11:29.017]        Message(0, "Debug/System power-up request sent");
[13:11:29.020]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:11:29.024]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:11:29.024]      </block>
[13:11:29.024]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:11:29.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:11:29.024]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:11:29.024]        // while-condition  =>  FALSE
[13:11:29.024]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:11:29.024]      </control>
[13:11:29.024]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:11:29.024]        // if-block "(__protocol & 0xFFFF) == 1"
[13:11:29.024]          // =>  FALSE
[13:11:29.024]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:11:29.024]      </control>
[13:11:29.024]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:11:29.024]        // if-block "(__protocol & 0xFFFF) == 2"
[13:11:29.024]          // =>  TRUE
[13:11:29.024]        <block atomic="false" info="">
[13:11:29.024]          Message(0, "executing SWD power up");
[13:11:29.033]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:11:29.033]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:11:29.033]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:11:29.036]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:11:29.036]        </block>
[13:11:29.039]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:11:29.039]      </control>
[13:11:29.039]      // end if-block "powered_down"
[13:11:29.039]    </control>
[13:11:29.039]    <block atomic="false" info="">
[13:11:29.039]      __var DEBUG_PORT_VAL    = 0;
[13:11:29.039]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:11:29.039]      __var ACCESS_POINT_VAL  = 0;
[13:11:29.039]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:11:29.039]      __ap = 1; 
[13:11:29.039]        // -> [__ap <= 0x00000001]
[13:11:29.039]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:11:29.039]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:11:29.039]      __ap = 4;
[13:11:29.043]        // -> [__ap <= 0x00000004]
[13:11:29.043]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:29.052]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:11:29.052]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:11:29.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:29.053]    </block>
[13:11:29.053]    <block atomic="false" info="">
[13:11:29.055]      __var nReset = 0x80;
[13:11:29.055]        // -> [nReset <= 0x00000080]
[13:11:29.055]      __var canReadPins = 0;
[13:11:29.055]        // -> [canReadPins <= 0x00000000]
[13:11:29.055]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:11:29.059]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:11:29.059]        // -> [canReadPins <= 0x00000001]
[13:11:29.059]    </block>
[13:11:29.059]    <control if="" while="1" timeout="200" info="">
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.059]      // while-condition  =>  TRUE
[13:11:29.059]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.064]      // while "1"  (timeout="200")
[13:11:29.064]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.065]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.065]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.065]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.065]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.065]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.065]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.065]      // while-condition  =>  TRUE
[13:11:29.065]      // while "1"  (timeout="200")
[13:11:29.067]      // while-condition  =>  TRUE
[13:11:29.067]      // while "1"  (timeout="200")
[13:11:29.067]      // while-condition  =>  TRUE
[13:11:29.067]      // while "1"  (timeout="200")
[13:11:29.067]      // while-condition  =>  TRUE
[13:11:29.067]      // while "1"  (timeout="200")
[13:11:29.067]      // while-condition  =>  TRUE
[13:11:29.067]      // while "1"  (timeout="200")
[13:11:29.067]      // while-condition  =>  TRUE
[13:11:29.067]      // while "1"  (timeout="200")
[13:11:29.067]      // while-condition  =>  TRUE
[13:11:29.067]      // while "1"  (timeout="200")
[13:11:29.067]      // while-condition  =>  TRUE
[13:11:29.067]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.068]      // while "1"  (timeout="200")
[13:11:29.068]      // while-condition  =>  TRUE
[13:11:29.070]      // while "1"  (timeout="200")
[13:11:29.070]      // while  =>  TIMEOUT
[13:11:29.070]      // end while "1"
[13:11:29.070]    </control>
[13:11:29.070]    <control if="canReadPins" while="" timeout="0" info="">
[13:11:29.070]      // if-block "canReadPins"
[13:11:29.070]        // =>  TRUE
[13:11:29.070]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:11:29.070]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:11:29.072]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:11:29.072]        // while-condition  =>  FALSE
[13:11:29.072]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:11:29.072]      </control>
[13:11:29.072]      // end if-block "canReadPins"
[13:11:29.073]    </control>
[13:11:29.073]    <control if="!canReadPins" while="" timeout="0" info="">
[13:11:29.073]      // if-block "!canReadPins"
[13:11:29.073]        // =>  FALSE
[13:11:29.073]      // skip if-block "!canReadPins"
[13:11:29.073]    </control>
[13:11:29.073]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:11:29.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:29.073]        // =>  TRUE
[13:11:29.073]      <block atomic="false" info="">
[13:11:29.073]        WriteAP(0x00, 0x190008);
[13:11:29.082]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:29.082]        WriteAP(0xF0, 0x01);
[13:11:29.085]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:29.085]      </block>
[13:11:29.085]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:29.085]    </control>
[13:11:29.085]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:11:29.085]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:29.085]        // =>  FALSE
[13:11:29.085]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:29.085]    </control>
[13:11:29.085]    <block atomic="false" info="">
[13:11:29.085]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:29.085]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:11:29.085]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:11:29.085]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:29.085]      __ap = 0; //lets make sure we reset the access point selection
[13:11:29.085]        // -> [__ap <= 0x00000000]
[13:11:29.085]    </block>
[13:11:29.085]  </sequence>
[13:11:29.085]  
[13:11:29.118]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:11:29.118]  
[13:11:29.118]  <debugvars>
[13:11:29.118]    // Pre-defined
[13:11:29.121]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:29.121]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:29.121]    __dp=0x00000000
[13:11:29.121]    __ap=0x00000000
[13:11:29.121]    __traceout=0x00000000      (Trace Disabled)
[13:11:29.121]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:29.121]    __FlashAddr=0x00000000
[13:11:29.121]    __FlashLen=0x00000000
[13:11:29.121]    __FlashArg=0x00000000
[13:11:29.121]    __FlashOp=0x00000000
[13:11:29.121]    __Result=0x00000000
[13:11:29.121]  </debugvars>
[13:11:29.121]  
[13:11:29.121]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:11:29.121]    <block atomic="false" info="">
[13:11:29.121]      __var deviceID = 0;
[13:11:29.121]        // -> [deviceID <= 0x00000000]
[13:11:29.121]      __var version = 0;
[13:11:29.121]        // -> [version <= 0x00000000]
[13:11:29.121]      __var partNum = 0;
[13:11:29.121]        // -> [partNum <= 0x00000000]
[13:11:29.121]      __var manuf = 0;
[13:11:29.121]        // -> [manuf <= 0x00000000]
[13:11:29.121]      __var isMSPM0G1X0X_G3X0X = 0;
[13:11:29.121]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:11:29.121]      __var isProduction = 0;
[13:11:29.121]        // -> [isProduction <= 0x00000000]
[13:11:29.121]      __var continueId = 0;
[13:11:29.121]        // -> [continueId <= 0x00000000]
[13:11:29.121]      deviceID =   Read32(0x41C40004);
[13:11:29.129]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:11:29.132]        // -> [deviceID <= 0x2BB8802F]
[13:11:29.132]      version = deviceID >> 28;
[13:11:29.132]        // -> [version <= 0x00000002]
[13:11:29.132]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:11:29.132]        // -> [partNum <= 0x0000BB88]
[13:11:29.132]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:11:29.132]        // -> [manuf <= 0x00000017]
[13:11:29.132]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:11:29.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:11:29.132]      isProduction = (version > 0);
[13:11:29.132]        // -> [isProduction <= 0x00000001]
[13:11:29.132]    </block>
[13:11:29.132]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:11:29.134]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:11:29.134]        // =>  FALSE
[13:11:29.134]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:11:29.134]    </control>
[13:11:29.134]    <control if="continueId == 4" while="" timeout="0" info="">
[13:11:29.134]      // if-block "continueId == 4"
[13:11:29.134]        // =>  FALSE
[13:11:29.134]      // skip if-block "continueId == 4"
[13:11:29.134]    </control>
[13:11:29.134]    <control if="!isProduction" while="" timeout="0" info="">
[13:11:29.134]      // if-block "!isProduction"
[13:11:29.134]        // =>  FALSE
[13:11:29.134]      // skip if-block "!isProduction"
[13:11:29.135]    </control>
[13:11:29.135]  </sequence>
[13:11:29.135]  
[13:14:27.996]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:14:27.996]  
[13:14:27.996]  <debugvars>
[13:14:27.996]    // Pre-defined
[13:14:27.996]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:27.996]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:14:27.996]    __dp=0x00000000
[13:14:27.996]    __ap=0x00000000
[13:14:27.996]    __traceout=0x00000000      (Trace Disabled)
[13:14:27.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:27.996]    __FlashAddr=0x00000000
[13:14:27.996]    __FlashLen=0x00000000
[13:14:27.996]    __FlashArg=0x00000000
[13:14:27.996]    __FlashOp=0x00000000
[13:14:27.996]    __Result=0x00000000
[13:14:27.996]  </debugvars>
[13:14:27.996]  
[13:14:27.996]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:14:27.996]    <block atomic="false" info="">
[13:14:27.996]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:14:27.996]        // -> [isSWJ <= 0x00000001]
[13:14:27.999]      __var hasDormant = __protocol & 0x00020000;
[13:14:27.999]        // -> [hasDormant <= 0x00000000]
[13:14:27.999]      __var protType   = __protocol & 0x0000FFFF;
[13:14:27.999]        // -> [protType <= 0x00000002]
[13:14:27.999]    </block>
[13:14:27.999]    <control if="protType == 1" while="" timeout="0" info="">
[13:14:28.000]      // if-block "protType == 1"
[13:14:28.000]        // =>  FALSE
[13:14:28.000]      // skip if-block "protType == 1"
[13:14:28.000]    </control>
[13:14:28.000]    <control if="protType == 2" while="" timeout="0" info="">
[13:14:28.000]      // if-block "protType == 2"
[13:14:28.000]        // =>  TRUE
[13:14:28.000]      <control if="isSWJ" while="" timeout="0" info="">
[13:14:28.000]        // if-block "isSWJ"
[13:14:28.000]          // =>  TRUE
[13:14:28.000]        <control if="hasDormant" while="" timeout="0" info="">
[13:14:28.000]          // if-block "hasDormant"
[13:14:28.000]            // =>  FALSE
[13:14:28.000]          // skip if-block "hasDormant"
[13:14:28.000]        </control>
[13:14:28.000]        <control if="!hasDormant" while="" timeout="0" info="">
[13:14:28.000]          // if-block "!hasDormant"
[13:14:28.002]            // =>  TRUE
[13:14:28.002]          <block atomic="false" info="">
[13:14:28.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:14:28.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:28.002]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:14:28.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:14:28.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:14:28.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:28.006]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:14:28.009]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:14:28.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:14:28.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:28.010]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:14:28.011]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:14:28.011]          </block>
[13:14:28.011]          // end if-block "!hasDormant"
[13:14:28.011]        </control>
[13:14:28.011]        // end if-block "isSWJ"
[13:14:28.011]      </control>
[13:14:28.011]      <control if="!isSWJ" while="" timeout="0" info="">
[13:14:28.013]        // if-block "!isSWJ"
[13:14:28.013]          // =>  FALSE
[13:14:28.013]        // skip if-block "!isSWJ"
[13:14:28.013]      </control>
[13:14:28.013]      <block atomic="false" info="">
[13:14:28.013]        ReadDP(0x0);
[13:14:28.016]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:14:28.016]      </block>
[13:14:28.016]      // end if-block "protType == 2"
[13:14:28.016]    </control>
[13:14:28.016]  </sequence>
[13:14:28.016]  
[13:14:28.027]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:14:28.027]  
[13:14:28.027]  <debugvars>
[13:14:28.027]    // Pre-defined
[13:14:28.027]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:28.027]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:14:28.027]    __dp=0x00000000
[13:14:28.027]    __ap=0x00000000
[13:14:28.027]    __traceout=0x00000000      (Trace Disabled)
[13:14:28.027]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:28.027]    __FlashAddr=0x00000000
[13:14:28.027]    __FlashLen=0x00000000
[13:14:28.027]    __FlashArg=0x00000000
[13:14:28.029]    __FlashOp=0x00000000
[13:14:28.029]    __Result=0x00000000
[13:14:28.029]  </debugvars>
[13:14:28.029]  
[13:14:28.029]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:14:28.029]    <block atomic="false" info="">
[13:14:28.029]      __var SW_DP_ABORT       = 0x0;
[13:14:28.029]        // -> [SW_DP_ABORT <= 0x00000000]
[13:14:28.029]      __var DP_CTRL_STAT      = 0x4;
[13:14:28.029]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:14:28.029]      __var DP_SELECT         = 0x8;
[13:14:28.029]        // -> [DP_SELECT <= 0x00000008]
[13:14:28.029]      __var powered_down      = 0;
[13:14:28.029]        // -> [powered_down <= 0x00000000]
[13:14:28.029]      WriteDP(DP_SELECT, 0x00000000);
[13:14:28.034]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:14:28.034]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:14:28.041]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:14:28.041]        // -> [powered_down <= 0x00000001]
[13:14:28.041]    </block>
[13:14:28.041]    <control if="powered_down" while="" timeout="0" info="">
[13:14:28.041]      // if-block "powered_down"
[13:14:28.041]        // =>  TRUE
[13:14:28.041]      <block atomic="false" info="">
[13:14:28.041]        Message(0, "Debug/System power-up request sent");
[13:14:28.044]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:14:28.046]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:14:28.046]      </block>
[13:14:28.046]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:14:28.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:14:28.046]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:14:28.046]        // while-condition  =>  FALSE
[13:14:28.046]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:14:28.046]      </control>
[13:14:28.046]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:14:28.046]        // if-block "(__protocol & 0xFFFF) == 1"
[13:14:28.046]          // =>  FALSE
[13:14:28.046]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:14:28.046]      </control>
[13:14:28.046]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:14:28.046]        // if-block "(__protocol & 0xFFFF) == 2"
[13:14:28.046]          // =>  TRUE
[13:14:28.046]        <block atomic="false" info="">
[13:14:28.046]          Message(0, "executing SWD power up");
[13:14:28.049]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:14:28.051]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:14:28.051]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:14:28.054]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:14:28.054]        </block>
[13:14:28.054]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:14:28.054]      </control>
[13:14:28.054]      // end if-block "powered_down"
[13:14:28.054]    </control>
[13:14:28.054]    <block atomic="false" info="">
[13:14:28.054]      __var DEBUG_PORT_VAL    = 0;
[13:14:28.054]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:14:28.054]      __var ACCESS_POINT_VAL  = 0;
[13:14:28.054]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:14:28.054]      __ap = 1; 
[13:14:28.054]        // -> [__ap <= 0x00000001]
[13:14:28.054]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:14:28.058]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:14:28.058]      __ap = 4;
[13:14:28.058]        // -> [__ap <= 0x00000004]
[13:14:28.058]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:28.061]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:14:28.061]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:14:28.061]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:28.064]    </block>
[13:14:28.064]    <block atomic="false" info="">
[13:14:28.064]      __var nReset = 0x80;
[13:14:28.064]        // -> [nReset <= 0x00000080]
[13:14:28.064]      __var canReadPins = 0;
[13:14:28.064]        // -> [canReadPins <= 0x00000000]
[13:14:28.064]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:14:28.066]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:14:28.066]        // -> [canReadPins <= 0x00000001]
[13:14:28.066]    </block>
[13:14:28.066]    <control if="" while="1" timeout="200" info="">
[13:14:28.066]      // while "1"  (timeout="200")
[13:14:28.066]      // while-condition  =>  TRUE
[13:14:28.066]      // while "1"  (timeout="200")
[13:14:28.066]      // while-condition  =>  TRUE
[13:14:28.066]      // while "1"  (timeout="200")
[13:14:28.066]      // while-condition  =>  TRUE
[13:14:28.066]      // while "1"  (timeout="200")
[13:14:28.066]      // while-condition  =>  TRUE
[13:14:28.066]      // while "1"  (timeout="200")
[13:14:28.066]      // while-condition  =>  TRUE
[13:14:28.066]      // while "1"  (timeout="200")
[13:14:28.068]      // while-condition  =>  TRUE
[13:14:28.068]      // while "1"  (timeout="200")
[13:14:28.068]      // while-condition  =>  TRUE
[13:14:28.068]      // while "1"  (timeout="200")
[13:14:28.068]      // while-condition  =>  TRUE
[13:14:28.068]      // while "1"  (timeout="200")
[13:14:28.068]      // while-condition  =>  TRUE
[13:14:28.068]      // while "1"  (timeout="200")
[13:14:28.068]      // while-condition  =>  TRUE
[13:14:28.068]      // while "1"  (timeout="200")
[13:14:28.068]      // while-condition  =>  TRUE
[13:14:28.068]      // while "1"  (timeout="200")
[13:14:28.069]      // while-condition  =>  TRUE
[13:14:28.069]      // while "1"  (timeout="200")
[13:14:28.069]      // while  =>  TIMEOUT
[13:14:28.069]      // end while "1"
[13:14:28.069]    </control>
[13:14:28.069]    <control if="canReadPins" while="" timeout="0" info="">
[13:14:28.069]      // if-block "canReadPins"
[13:14:28.069]        // =>  TRUE
[13:14:28.069]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:14:28.069]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:14:28.074]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:14:28.075]        // while-condition  =>  FALSE
[13:14:28.075]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:14:28.075]      </control>
[13:14:28.075]      // end if-block "canReadPins"
[13:14:28.075]    </control>
[13:14:28.075]    <control if="!canReadPins" while="" timeout="0" info="">
[13:14:28.075]      // if-block "!canReadPins"
[13:14:28.075]        // =>  FALSE
[13:14:28.075]      // skip if-block "!canReadPins"
[13:14:28.076]    </control>
[13:14:28.076]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:14:28.076]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:28.076]        // =>  TRUE
[13:14:28.076]      <block atomic="false" info="">
[13:14:28.076]        WriteAP(0x00, 0x190008);
[13:14:28.077]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:28.077]        WriteAP(0xF0, 0x01);
[13:14:28.086]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:28.086]      </block>
[13:14:28.086]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:28.086]    </control>
[13:14:28.086]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:14:28.086]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:28.086]        // =>  FALSE
[13:14:28.086]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:28.086]    </control>
[13:14:28.086]    <block atomic="false" info="">
[13:14:28.086]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:28.091]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:14:28.091]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:14:28.092]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:28.093]      __ap = 0; //lets make sure we reset the access point selection
[13:14:28.093]        // -> [__ap <= 0x00000000]
[13:14:28.093]    </block>
[13:14:28.093]  </sequence>
[13:14:28.093]  
[13:14:28.122]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:14:28.122]  
[13:14:28.122]  <debugvars>
[13:14:28.122]    // Pre-defined
[13:14:28.122]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:28.122]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:14:28.122]    __dp=0x00000000
[13:14:28.123]    __ap=0x00000000
[13:14:28.123]    __traceout=0x00000000      (Trace Disabled)
[13:14:28.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:28.123]    __FlashAddr=0x00000000
[13:14:28.123]    __FlashLen=0x00000000
[13:14:28.123]    __FlashArg=0x00000000
[13:14:28.123]    __FlashOp=0x00000000
[13:14:28.123]    __Result=0x00000000
[13:14:28.123]  </debugvars>
[13:14:28.123]  
[13:14:28.124]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:14:28.124]    <block atomic="false" info="">
[13:14:28.124]      __var deviceID = 0;
[13:14:28.124]        // -> [deviceID <= 0x00000000]
[13:14:28.124]      __var version = 0;
[13:14:28.124]        // -> [version <= 0x00000000]
[13:14:28.124]      __var partNum = 0;
[13:14:28.124]        // -> [partNum <= 0x00000000]
[13:14:28.124]      __var manuf = 0;
[13:14:28.124]        // -> [manuf <= 0x00000000]
[13:14:28.124]      __var isMSPM0G1X0X_G3X0X = 0;
[13:14:28.124]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:14:28.124]      __var isProduction = 0;
[13:14:28.126]        // -> [isProduction <= 0x00000000]
[13:14:28.126]      __var continueId = 0;
[13:14:28.126]        // -> [continueId <= 0x00000000]
[13:14:28.126]      deviceID =   Read32(0x41C40004);
[13:14:28.130]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:14:28.130]        // -> [deviceID <= 0x2BB8802F]
[13:14:28.130]      version = deviceID >> 28;
[13:14:28.130]        // -> [version <= 0x00000002]
[13:14:28.130]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:14:28.130]        // -> [partNum <= 0x0000BB88]
[13:14:28.130]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:14:28.130]        // -> [manuf <= 0x00000017]
[13:14:28.130]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:14:28.130]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:14:28.130]      isProduction = (version > 0);
[13:14:28.132]        // -> [isProduction <= 0x00000001]
[13:14:28.132]    </block>
[13:14:28.132]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:14:28.132]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:14:28.132]        // =>  FALSE
[13:14:28.132]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:14:28.132]    </control>
[13:14:28.132]    <control if="continueId == 4" while="" timeout="0" info="">
[13:14:28.132]      // if-block "continueId == 4"
[13:14:28.132]        // =>  FALSE
[13:14:28.132]      // skip if-block "continueId == 4"
[13:14:28.132]    </control>
[13:14:28.132]    <control if="!isProduction" while="" timeout="0" info="">
[13:14:28.132]      // if-block "!isProduction"
[13:14:28.132]        // =>  FALSE
[13:14:28.132]      // skip if-block "!isProduction"
[13:14:28.132]    </control>
[13:14:28.134]  </sequence>
[13:14:28.134]  
[13:15:43.950]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:15:43.950]  
[13:15:43.962]  <debugvars>
[13:15:43.962]    // Pre-defined
[13:15:43.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:15:43.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:15:43.962]    __dp=0x00000000
[13:15:43.962]    __ap=0x00000000
[13:15:43.962]    __traceout=0x00000000      (Trace Disabled)
[13:15:43.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:15:43.962]    __FlashAddr=0x00000000
[13:15:43.962]    __FlashLen=0x00000000
[13:15:43.962]    __FlashArg=0x00000000
[13:15:43.962]    __FlashOp=0x00000000
[13:15:43.962]    __Result=0x00000000
[13:15:43.962]  </debugvars>
[13:15:43.962]  
[13:15:43.962]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:15:43.962]    <block atomic="false" info="">
[13:15:43.962]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:15:43.962]        // -> [isSWJ <= 0x00000001]
[13:15:43.962]      __var hasDormant = __protocol & 0x00020000;
[13:15:43.962]        // -> [hasDormant <= 0x00000000]
[13:15:43.962]      __var protType   = __protocol & 0x0000FFFF;
[13:15:43.962]        // -> [protType <= 0x00000002]
[13:15:43.962]    </block>
[13:15:43.962]    <control if="protType == 1" while="" timeout="0" info="">
[13:15:43.962]      // if-block "protType == 1"
[13:15:43.962]        // =>  FALSE
[13:15:43.962]      // skip if-block "protType == 1"
[13:15:43.962]    </control>
[13:15:43.962]    <control if="protType == 2" while="" timeout="0" info="">
[13:15:43.962]      // if-block "protType == 2"
[13:15:43.962]        // =>  TRUE
[13:15:43.962]      <control if="isSWJ" while="" timeout="0" info="">
[13:15:43.962]        // if-block "isSWJ"
[13:15:43.962]          // =>  TRUE
[13:15:43.962]        <control if="hasDormant" while="" timeout="0" info="">
[13:15:43.962]          // if-block "hasDormant"
[13:15:43.962]            // =>  FALSE
[13:15:43.962]          // skip if-block "hasDormant"
[13:15:43.962]        </control>
[13:15:43.962]        <control if="!hasDormant" while="" timeout="0" info="">
[13:15:43.962]          // if-block "!hasDormant"
[13:15:43.962]            // =>  TRUE
[13:15:43.962]          <block atomic="false" info="">
[13:15:43.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:15:43.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:15:43.962]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:15:43.970]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:15:43.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:15:43.970]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:15:43.970]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:15:43.970]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:15:43.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:15:43.970]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:15:43.970]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:15:43.981]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:15:43.981]          </block>
[13:15:43.981]          // end if-block "!hasDormant"
[13:15:43.981]        </control>
[13:15:43.981]        // end if-block "isSWJ"
[13:15:43.981]      </control>
[13:15:43.981]      <control if="!isSWJ" while="" timeout="0" info="">
[13:15:43.981]        // if-block "!isSWJ"
[13:15:43.981]          // =>  FALSE
[13:15:43.981]        // skip if-block "!isSWJ"
[13:15:43.981]      </control>
[13:15:43.981]      <block atomic="false" info="">
[13:15:43.981]        ReadDP(0x0);
[13:15:43.981]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:15:43.981]      </block>
[13:15:43.981]      // end if-block "protType == 2"
[13:15:43.981]    </control>
[13:15:43.981]  </sequence>
[13:15:43.981]  
[13:15:43.990]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:15:43.990]  
[13:15:43.990]  <debugvars>
[13:15:43.990]    // Pre-defined
[13:15:43.990]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:15:43.990]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:15:43.990]    __dp=0x00000000
[13:15:43.990]    __ap=0x00000000
[13:15:43.990]    __traceout=0x00000000      (Trace Disabled)
[13:15:43.990]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:15:43.990]    __FlashAddr=0x00000000
[13:15:43.990]    __FlashLen=0x00000000
[13:15:43.990]    __FlashArg=0x00000000
[13:15:43.990]    __FlashOp=0x00000000
[13:15:43.990]    __Result=0x00000000
[13:15:43.990]  </debugvars>
[13:15:43.990]  
[13:15:43.990]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:15:43.990]    <block atomic="false" info="">
[13:15:43.990]      __var SW_DP_ABORT       = 0x0;
[13:15:43.990]        // -> [SW_DP_ABORT <= 0x00000000]
[13:15:43.990]      __var DP_CTRL_STAT      = 0x4;
[13:15:43.990]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:15:43.990]      __var DP_SELECT         = 0x8;
[13:15:43.990]        // -> [DP_SELECT <= 0x00000008]
[13:15:43.990]      __var powered_down      = 0;
[13:15:43.990]        // -> [powered_down <= 0x00000000]
[13:15:43.990]      WriteDP(DP_SELECT, 0x00000000);
[13:15:43.990]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:15:43.990]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:15:43.990]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:15:43.990]        // -> [powered_down <= 0x00000001]
[13:15:43.990]    </block>
[13:15:43.990]    <control if="powered_down" while="" timeout="0" info="">
[13:15:43.990]      // if-block "powered_down"
[13:15:43.990]        // =>  TRUE
[13:15:44.000]      <block atomic="false" info="">
[13:15:44.000]        Message(0, "Debug/System power-up request sent");
[13:15:44.000]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:15:44.000]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:15:44.000]      </block>
[13:15:44.000]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:15:44.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:15:44.000]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:15:44.000]        // while-condition  =>  FALSE
[13:15:44.000]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:15:44.000]      </control>
[13:15:44.000]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:15:44.000]        // if-block "(__protocol & 0xFFFF) == 1"
[13:15:44.000]          // =>  FALSE
[13:15:44.000]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:15:44.000]      </control>
[13:15:44.000]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:15:44.000]        // if-block "(__protocol & 0xFFFF) == 2"
[13:15:44.000]          // =>  TRUE
[13:15:44.000]        <block atomic="false" info="">
[13:15:44.000]          Message(0, "executing SWD power up");
[13:15:44.010]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:15:44.013]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:15:44.013]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:15:44.013]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:15:44.013]        </block>
[13:15:44.013]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:15:44.013]      </control>
[13:15:44.013]      // end if-block "powered_down"
[13:15:44.013]    </control>
[13:15:44.013]    <block atomic="false" info="">
[13:15:44.013]      __var DEBUG_PORT_VAL    = 0;
[13:15:44.013]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:15:44.013]      __var ACCESS_POINT_VAL  = 0;
[13:15:44.013]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:15:44.013]      __ap = 1; 
[13:15:44.013]        // -> [__ap <= 0x00000001]
[13:15:44.013]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:15:44.021]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:15:44.021]      __ap = 4;
[13:15:44.021]        // -> [__ap <= 0x00000004]
[13:15:44.021]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:15:44.021]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:15:44.021]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:15:44.021]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:15:44.021]    </block>
[13:15:44.021]    <block atomic="false" info="">
[13:15:44.021]      __var nReset = 0x80;
[13:15:44.021]        // -> [nReset <= 0x00000080]
[13:15:44.021]      __var canReadPins = 0;
[13:15:44.021]        // -> [canReadPins <= 0x00000000]
[13:15:44.021]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:15:44.021]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:15:44.021]        // -> [canReadPins <= 0x00000001]
[13:15:44.021]    </block>
[13:15:44.021]    <control if="" while="1" timeout="200" info="">
[13:15:44.021]      // while "1"  (timeout="200")
[13:15:44.021]      // while-condition  =>  TRUE
[13:15:44.021]      // while "1"  (timeout="200")
[13:15:44.021]      // while-condition  =>  TRUE
[13:15:44.021]      // while "1"  (timeout="200")
[13:15:44.021]      // while-condition  =>  TRUE
[13:15:44.021]      // while "1"  (timeout="200")
[13:15:44.021]      // while-condition  =>  TRUE
[13:15:44.021]      // while "1"  (timeout="200")
[13:15:44.021]      // while-condition  =>  TRUE
[13:15:44.021]      // while "1"  (timeout="200")
[13:15:44.031]      // while-condition  =>  TRUE
[13:15:44.031]      // while "1"  (timeout="200")
[13:15:44.031]      // while  =>  TIMEOUT
[13:15:44.031]      // end while "1"
[13:15:44.031]    </control>
[13:15:44.031]    <control if="canReadPins" while="" timeout="0" info="">
[13:15:44.031]      // if-block "canReadPins"
[13:15:44.031]        // =>  TRUE
[13:15:44.031]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:15:44.031]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:15:44.031]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:15:44.031]        // while-condition  =>  FALSE
[13:15:44.031]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:15:44.031]      </control>
[13:15:44.031]      // end if-block "canReadPins"
[13:15:44.031]    </control>
[13:15:44.031]    <control if="!canReadPins" while="" timeout="0" info="">
[13:15:44.031]      // if-block "!canReadPins"
[13:15:44.031]        // =>  FALSE
[13:15:44.031]      // skip if-block "!canReadPins"
[13:15:44.031]    </control>
[13:15:44.031]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:15:44.031]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:15:44.031]        // =>  TRUE
[13:15:44.031]      <block atomic="false" info="">
[13:15:44.031]        WriteAP(0x00, 0x190008);
[13:15:44.031]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:15:44.031]        WriteAP(0xF0, 0x01);
[13:15:44.031]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:15:44.031]      </block>
[13:15:44.031]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:15:44.031]    </control>
[13:15:44.031]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:15:44.031]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:15:44.031]        // =>  FALSE
[13:15:44.031]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:15:44.031]    </control>
[13:15:44.041]    <block atomic="false" info="">
[13:15:44.041]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:15:44.042]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:15:44.042]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:15:44.042]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:15:44.042]      __ap = 0; //lets make sure we reset the access point selection
[13:15:44.042]        // -> [__ap <= 0x00000000]
[13:15:44.042]    </block>
[13:15:44.042]  </sequence>
[13:15:44.042]  
[13:15:44.071]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:15:44.071]  
[13:15:44.071]  <debugvars>
[13:15:44.071]    // Pre-defined
[13:15:44.071]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:15:44.071]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:15:44.071]    __dp=0x00000000
[13:15:44.071]    __ap=0x00000000
[13:15:44.071]    __traceout=0x00000000      (Trace Disabled)
[13:15:44.071]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:15:44.071]    __FlashAddr=0x00000000
[13:15:44.071]    __FlashLen=0x00000000
[13:15:44.071]    __FlashArg=0x00000000
[13:15:44.071]    __FlashOp=0x00000000
[13:15:44.071]    __Result=0x00000000
[13:15:44.071]  </debugvars>
[13:15:44.071]  
[13:15:44.071]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:15:44.071]    <block atomic="false" info="">
[13:15:44.071]      __var deviceID = 0;
[13:15:44.071]        // -> [deviceID <= 0x00000000]
[13:15:44.071]      __var version = 0;
[13:15:44.071]        // -> [version <= 0x00000000]
[13:15:44.071]      __var partNum = 0;
[13:15:44.071]        // -> [partNum <= 0x00000000]
[13:15:44.071]      __var manuf = 0;
[13:15:44.071]        // -> [manuf <= 0x00000000]
[13:15:44.071]      __var isMSPM0G1X0X_G3X0X = 0;
[13:15:44.071]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:15:44.071]      __var isProduction = 0;
[13:15:44.077]        // -> [isProduction <= 0x00000000]
[13:15:44.077]      __var continueId = 0;
[13:15:44.077]        // -> [continueId <= 0x00000000]
[13:15:44.077]      deviceID =   Read32(0x41C40004);
[13:15:44.081]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:15:44.081]        // -> [deviceID <= 0x2BB8802F]
[13:15:44.081]      version = deviceID >> 28;
[13:15:44.081]        // -> [version <= 0x00000002]
[13:15:44.081]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:15:44.081]        // -> [partNum <= 0x0000BB88]
[13:15:44.081]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:15:44.081]        // -> [manuf <= 0x00000017]
[13:15:44.081]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:15:44.081]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:15:44.081]      isProduction = (version > 0);
[13:15:44.081]        // -> [isProduction <= 0x00000001]
[13:15:44.081]    </block>
[13:15:44.081]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:15:44.081]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:15:44.081]        // =>  FALSE
[13:15:44.081]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:15:44.085]    </control>
[13:15:44.085]    <control if="continueId == 4" while="" timeout="0" info="">
[13:15:44.085]      // if-block "continueId == 4"
[13:15:44.085]        // =>  FALSE
[13:15:44.085]      // skip if-block "continueId == 4"
[13:15:44.085]    </control>
[13:15:44.085]    <control if="!isProduction" while="" timeout="0" info="">
[13:15:44.085]      // if-block "!isProduction"
[13:15:44.085]        // =>  FALSE
[13:15:44.085]      // skip if-block "!isProduction"
[13:15:44.085]    </control>
[13:15:44.085]  </sequence>
[13:15:44.085]  
[13:16:24.656]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:16:24.656]  
[13:16:24.665]  <debugvars>
[13:16:24.665]    // Pre-defined
[13:16:24.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:24.665]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:24.665]    __dp=0x00000000
[13:16:24.665]    __ap=0x00000000
[13:16:24.665]    __traceout=0x00000000      (Trace Disabled)
[13:16:24.665]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:24.665]    __FlashAddr=0x00000000
[13:16:24.665]    __FlashLen=0x00000000
[13:16:24.665]    __FlashArg=0x00000000
[13:16:24.665]    __FlashOp=0x00000000
[13:16:24.665]    __Result=0x00000000
[13:16:24.665]  </debugvars>
[13:16:24.665]  
[13:16:24.665]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:16:24.665]    <block atomic="false" info="">
[13:16:24.665]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:16:24.665]        // -> [isSWJ <= 0x00000001]
[13:16:24.665]      __var hasDormant = __protocol & 0x00020000;
[13:16:24.665]        // -> [hasDormant <= 0x00000000]
[13:16:24.665]      __var protType   = __protocol & 0x0000FFFF;
[13:16:24.665]        // -> [protType <= 0x00000002]
[13:16:24.665]    </block>
[13:16:24.665]    <control if="protType == 1" while="" timeout="0" info="">
[13:16:24.665]      // if-block "protType == 1"
[13:16:24.665]        // =>  FALSE
[13:16:24.665]      // skip if-block "protType == 1"
[13:16:24.665]    </control>
[13:16:24.665]    <control if="protType == 2" while="" timeout="0" info="">
[13:16:24.665]      // if-block "protType == 2"
[13:16:24.665]        // =>  TRUE
[13:16:24.665]      <control if="isSWJ" while="" timeout="0" info="">
[13:16:24.665]        // if-block "isSWJ"
[13:16:24.665]          // =>  TRUE
[13:16:24.665]        <control if="hasDormant" while="" timeout="0" info="">
[13:16:24.665]          // if-block "hasDormant"
[13:16:24.665]            // =>  FALSE
[13:16:24.665]          // skip if-block "hasDormant"
[13:16:24.665]        </control>
[13:16:24.665]        <control if="!hasDormant" while="" timeout="0" info="">
[13:16:24.665]          // if-block "!hasDormant"
[13:16:24.665]            // =>  TRUE
[13:16:24.665]          <block atomic="false" info="">
[13:16:24.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:16:24.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:24.670]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:16:24.670]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:16:24.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:16:24.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:24.675]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:16:24.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:16:24.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:16:24.678]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:24.678]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:16:24.678]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:16:24.678]          </block>
[13:16:24.678]          // end if-block "!hasDormant"
[13:16:24.678]        </control>
[13:16:24.678]        // end if-block "isSWJ"
[13:16:24.678]      </control>
[13:16:24.678]      <control if="!isSWJ" while="" timeout="0" info="">
[13:16:24.678]        // if-block "!isSWJ"
[13:16:24.678]          // =>  FALSE
[13:16:24.678]        // skip if-block "!isSWJ"
[13:16:24.678]      </control>
[13:16:24.678]      <block atomic="false" info="">
[13:16:24.678]        ReadDP(0x0);
[13:16:24.682]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:16:24.682]      </block>
[13:16:24.682]      // end if-block "protType == 2"
[13:16:24.682]    </control>
[13:16:24.682]  </sequence>
[13:16:24.682]  
[13:16:24.682]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:16:24.682]  
[13:16:24.682]  <debugvars>
[13:16:24.682]    // Pre-defined
[13:16:24.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:24.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:24.682]    __dp=0x00000000
[13:16:24.685]    __ap=0x00000000
[13:16:24.685]    __traceout=0x00000000      (Trace Disabled)
[13:16:24.685]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:24.685]    __FlashAddr=0x00000000
[13:16:24.685]    __FlashLen=0x00000000
[13:16:24.685]    __FlashArg=0x00000000
[13:16:24.685]    __FlashOp=0x00000000
[13:16:24.685]    __Result=0x00000000
[13:16:24.686]  </debugvars>
[13:16:24.686]  
[13:16:24.686]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:16:24.686]    <block atomic="false" info="">
[13:16:24.686]      __var SW_DP_ABORT       = 0x0;
[13:16:24.686]        // -> [SW_DP_ABORT <= 0x00000000]
[13:16:24.686]      __var DP_CTRL_STAT      = 0x4;
[13:16:24.686]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:16:24.686]      __var DP_SELECT         = 0x8;
[13:16:24.686]        // -> [DP_SELECT <= 0x00000008]
[13:16:24.686]      __var powered_down      = 0;
[13:16:24.686]        // -> [powered_down <= 0x00000000]
[13:16:24.686]      WriteDP(DP_SELECT, 0x00000000);
[13:16:24.689]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:16:24.689]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:16:24.689]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:16:24.689]        // -> [powered_down <= 0x00000001]
[13:16:24.689]    </block>
[13:16:24.689]    <control if="powered_down" while="" timeout="0" info="">
[13:16:24.689]      // if-block "powered_down"
[13:16:24.689]        // =>  TRUE
[13:16:24.689]      <block atomic="false" info="">
[13:16:24.689]        Message(0, "Debug/System power-up request sent");
[13:16:24.689]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:16:24.696]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:16:24.696]      </block>
[13:16:24.696]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:16:24.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:16:24.696]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:16:24.696]        // while-condition  =>  FALSE
[13:16:24.696]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:16:24.696]      </control>
[13:16:24.696]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:16:24.696]        // if-block "(__protocol & 0xFFFF) == 1"
[13:16:24.696]          // =>  FALSE
[13:16:24.696]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:16:24.696]      </control>
[13:16:24.696]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:16:24.696]        // if-block "(__protocol & 0xFFFF) == 2"
[13:16:24.696]          // =>  TRUE
[13:16:24.696]        <block atomic="false" info="">
[13:16:24.696]          Message(0, "executing SWD power up");
[13:16:24.702]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:16:24.705]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:16:24.705]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:16:24.705]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:16:24.705]        </block>
[13:16:24.705]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:16:24.705]      </control>
[13:16:24.705]      // end if-block "powered_down"
[13:16:24.705]    </control>
[13:16:24.705]    <block atomic="false" info="">
[13:16:24.705]      __var DEBUG_PORT_VAL    = 0;
[13:16:24.705]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:16:24.705]      __var ACCESS_POINT_VAL  = 0;
[13:16:24.705]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:16:24.705]      __ap = 1; 
[13:16:24.705]        // -> [__ap <= 0x00000001]
[13:16:24.710]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:16:24.718]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:16:24.718]      __ap = 4;
[13:16:24.718]        // -> [__ap <= 0x00000004]
[13:16:24.718]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:24.727]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:16:24.727]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:16:24.727]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:24.728]    </block>
[13:16:24.728]    <block atomic="false" info="">
[13:16:24.728]      __var nReset = 0x80;
[13:16:24.728]        // -> [nReset <= 0x00000080]
[13:16:24.728]      __var canReadPins = 0;
[13:16:24.728]        // -> [canReadPins <= 0x00000000]
[13:16:24.728]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:16:24.731]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:16:24.731]        // -> [canReadPins <= 0x00000001]
[13:16:24.731]    </block>
[13:16:24.731]    <control if="" while="1" timeout="200" info="">
[13:16:24.731]      // while "1"  (timeout="200")
[13:16:24.731]      // while-condition  =>  TRUE
[13:16:24.731]      // while "1"  (timeout="200")
[13:16:24.731]      // while-condition  =>  TRUE
[13:16:24.731]      // while "1"  (timeout="200")
[13:16:24.731]      // while-condition  =>  TRUE
[13:16:24.731]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.733]      // while "1"  (timeout="200")
[13:16:24.733]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.735]      // while-condition  =>  TRUE
[13:16:24.735]      // while "1"  (timeout="200")
[13:16:24.737]      // while-condition  =>  TRUE
[13:16:24.737]      // while "1"  (timeout="200")
[13:16:24.737]      // while-condition  =>  TRUE
[13:16:24.737]      // while "1"  (timeout="200")
[13:16:24.737]      // while-condition  =>  TRUE
[13:16:24.737]      // while "1"  (timeout="200")
[13:16:24.737]      // while-condition  =>  TRUE
[13:16:24.737]      // while "1"  (timeout="200")
[13:16:24.738]      // while-condition  =>  TRUE
[13:16:24.738]      // while "1"  (timeout="200")
[13:16:24.738]      // while-condition  =>  TRUE
[13:16:24.738]      // while "1"  (timeout="200")
[13:16:24.738]      // while-condition  =>  TRUE
[13:16:24.738]      // while "1"  (timeout="200")
[13:16:24.738]      // while-condition  =>  TRUE
[13:16:24.738]      // while "1"  (timeout="200")
[13:16:24.738]      // while-condition  =>  TRUE
[13:16:24.738]      // while "1"  (timeout="200")
[13:16:24.738]      // while-condition  =>  TRUE
[13:16:24.738]      // while "1"  (timeout="200")
[13:16:24.738]      // while-condition  =>  TRUE
[13:16:24.738]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.740]      // while "1"  (timeout="200")
[13:16:24.740]      // while-condition  =>  TRUE
[13:16:24.741]      // while "1"  (timeout="200")
[13:16:24.741]      // while  =>  TIMEOUT
[13:16:24.741]      // end while "1"
[13:16:24.741]    </control>
[13:16:24.741]    <control if="canReadPins" while="" timeout="0" info="">
[13:16:24.741]      // if-block "canReadPins"
[13:16:24.742]        // =>  TRUE
[13:16:24.742]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:16:24.742]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:16:24.743]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:16:24.743]        // while-condition  =>  FALSE
[13:16:24.743]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:16:24.744]      </control>
[13:16:24.744]      // end if-block "canReadPins"
[13:16:24.744]    </control>
[13:16:24.744]    <control if="!canReadPins" while="" timeout="0" info="">
[13:16:24.744]      // if-block "!canReadPins"
[13:16:24.744]        // =>  FALSE
[13:16:24.744]      // skip if-block "!canReadPins"
[13:16:24.744]    </control>
[13:16:24.744]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:16:24.744]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:24.744]        // =>  TRUE
[13:16:24.744]      <block atomic="false" info="">
[13:16:24.744]        WriteAP(0x00, 0x190008);
[13:16:24.745]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:24.745]        WriteAP(0xF0, 0x01);
[13:16:24.745]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:24.745]      </block>
[13:16:24.745]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:24.745]    </control>
[13:16:24.745]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:16:24.745]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:24.745]        // =>  FALSE
[13:16:24.745]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:24.745]    </control>
[13:16:24.745]    <block atomic="false" info="">
[13:16:24.745]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:24.752]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:16:24.752]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:16:24.752]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:24.756]      __ap = 0; //lets make sure we reset the access point selection
[13:16:24.756]        // -> [__ap <= 0x00000000]
[13:16:24.756]    </block>
[13:16:24.756]  </sequence>
[13:16:24.756]  
[13:16:24.776]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:16:24.776]  
[13:16:24.776]  <debugvars>
[13:16:24.776]    // Pre-defined
[13:16:24.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:24.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:24.776]    __dp=0x00000000
[13:16:24.776]    __ap=0x00000000
[13:16:24.785]    __traceout=0x00000000      (Trace Disabled)
[13:16:24.785]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:24.785]    __FlashAddr=0x00000000
[13:16:24.785]    __FlashLen=0x00000000
[13:16:24.785]    __FlashArg=0x00000000
[13:16:24.785]    __FlashOp=0x00000000
[13:16:24.785]    __Result=0x00000000
[13:16:24.785]  </debugvars>
[13:16:24.785]  
[13:16:24.785]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:16:24.786]    <block atomic="false" info="">
[13:16:24.786]      __var deviceID = 0;
[13:16:24.786]        // -> [deviceID <= 0x00000000]
[13:16:24.786]      __var version = 0;
[13:16:24.786]        // -> [version <= 0x00000000]
[13:16:24.786]      __var partNum = 0;
[13:16:24.786]        // -> [partNum <= 0x00000000]
[13:16:24.786]      __var manuf = 0;
[13:16:24.786]        // -> [manuf <= 0x00000000]
[13:16:24.786]      __var isMSPM0G1X0X_G3X0X = 0;
[13:16:24.786]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:16:24.786]      __var isProduction = 0;
[13:16:24.786]        // -> [isProduction <= 0x00000000]
[13:16:24.786]      __var continueId = 0;
[13:16:24.788]        // -> [continueId <= 0x00000000]
[13:16:24.788]      deviceID =   Read32(0x41C40004);
[13:16:24.795]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:16:24.795]        // -> [deviceID <= 0x2BB8802F]
[13:16:24.795]      version = deviceID >> 28;
[13:16:24.795]        // -> [version <= 0x00000002]
[13:16:24.795]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:16:24.795]        // -> [partNum <= 0x0000BB88]
[13:16:24.795]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:16:24.795]        // -> [manuf <= 0x00000017]
[13:16:24.795]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:16:24.795]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:16:24.795]      isProduction = (version > 0);
[13:16:24.795]        // -> [isProduction <= 0x00000001]
[13:16:24.795]    </block>
[13:16:24.795]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:16:24.795]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:16:24.795]        // =>  FALSE
[13:16:24.795]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:16:24.795]    </control>
[13:16:24.795]    <control if="continueId == 4" while="" timeout="0" info="">
[13:16:24.795]      // if-block "continueId == 4"
[13:16:24.795]        // =>  FALSE
[13:16:24.795]      // skip if-block "continueId == 4"
[13:16:24.795]    </control>
[13:16:24.795]    <control if="!isProduction" while="" timeout="0" info="">
[13:16:24.795]      // if-block "!isProduction"
[13:16:24.795]        // =>  FALSE
[13:16:24.795]      // skip if-block "!isProduction"
[13:16:24.795]    </control>
[13:16:24.795]  </sequence>
[13:16:24.795]  
[13:16:48.033]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:16:48.033]  
[13:16:48.033]  <debugvars>
[13:16:48.033]    // Pre-defined
[13:16:48.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:48.033]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:48.033]    __dp=0x00000000
[13:16:48.033]    __ap=0x00000000
[13:16:48.033]    __traceout=0x00000000      (Trace Disabled)
[13:16:48.033]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:48.033]    __FlashAddr=0x00000000
[13:16:48.033]    __FlashLen=0x00000000
[13:16:48.033]    __FlashArg=0x00000000
[13:16:48.033]    __FlashOp=0x00000000
[13:16:48.033]    __Result=0x00000000
[13:16:48.033]  </debugvars>
[13:16:48.033]  
[13:16:48.033]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:16:48.033]    <block atomic="false" info="">
[13:16:48.033]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:16:48.033]        // -> [isSWJ <= 0x00000001]
[13:16:48.033]      __var hasDormant = __protocol & 0x00020000;
[13:16:48.033]        // -> [hasDormant <= 0x00000000]
[13:16:48.041]      __var protType   = __protocol & 0x0000FFFF;
[13:16:48.041]        // -> [protType <= 0x00000002]
[13:16:48.041]    </block>
[13:16:48.041]    <control if="protType == 1" while="" timeout="0" info="">
[13:16:48.041]      // if-block "protType == 1"
[13:16:48.041]        // =>  FALSE
[13:16:48.041]      // skip if-block "protType == 1"
[13:16:48.041]    </control>
[13:16:48.041]    <control if="protType == 2" while="" timeout="0" info="">
[13:16:48.041]      // if-block "protType == 2"
[13:16:48.041]        // =>  TRUE
[13:16:48.041]      <control if="isSWJ" while="" timeout="0" info="">
[13:16:48.041]        // if-block "isSWJ"
[13:16:48.041]          // =>  TRUE
[13:16:48.041]        <control if="hasDormant" while="" timeout="0" info="">
[13:16:48.041]          // if-block "hasDormant"
[13:16:48.041]            // =>  FALSE
[13:16:48.041]          // skip if-block "hasDormant"
[13:16:48.041]        </control>
[13:16:48.041]        <control if="!hasDormant" while="" timeout="0" info="">
[13:16:48.041]          // if-block "!hasDormant"
[13:16:48.041]            // =>  TRUE
[13:16:48.041]          <block atomic="false" info="">
[13:16:48.041]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:16:48.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:48.041]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:16:48.051]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:16:48.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:16:48.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:48.051]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:16:48.051]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:16:48.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:16:48.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:48.051]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:16:48.051]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:16:48.051]          </block>
[13:16:48.051]          // end if-block "!hasDormant"
[13:16:48.061]        </control>
[13:16:48.061]        // end if-block "isSWJ"
[13:16:48.061]      </control>
[13:16:48.061]      <control if="!isSWJ" while="" timeout="0" info="">
[13:16:48.061]        // if-block "!isSWJ"
[13:16:48.061]          // =>  FALSE
[13:16:48.061]        // skip if-block "!isSWJ"
[13:16:48.061]      </control>
[13:16:48.062]      <block atomic="false" info="">
[13:16:48.062]        ReadDP(0x0);
[13:16:48.062]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:16:48.062]      </block>
[13:16:48.062]      // end if-block "protType == 2"
[13:16:48.062]    </control>
[13:16:48.062]  </sequence>
[13:16:48.062]  
[13:16:48.062]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:16:48.062]  
[13:16:48.062]  <debugvars>
[13:16:48.062]    // Pre-defined
[13:16:48.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:48.062]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:48.062]    __dp=0x00000000
[13:16:48.062]    __ap=0x00000000
[13:16:48.062]    __traceout=0x00000000      (Trace Disabled)
[13:16:48.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:48.062]    __FlashAddr=0x00000000
[13:16:48.062]    __FlashLen=0x00000000
[13:16:48.071]    __FlashArg=0x00000000
[13:16:48.071]    __FlashOp=0x00000000
[13:16:48.071]    __Result=0x00000000
[13:16:48.071]  </debugvars>
[13:16:48.071]  
[13:16:48.071]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:16:48.071]    <block atomic="false" info="">
[13:16:48.071]      __var SW_DP_ABORT       = 0x0;
[13:16:48.071]        // -> [SW_DP_ABORT <= 0x00000000]
[13:16:48.071]      __var DP_CTRL_STAT      = 0x4;
[13:16:48.071]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:16:48.071]      __var DP_SELECT         = 0x8;
[13:16:48.071]        // -> [DP_SELECT <= 0x00000008]
[13:16:48.071]      __var powered_down      = 0;
[13:16:48.071]        // -> [powered_down <= 0x00000000]
[13:16:48.071]      WriteDP(DP_SELECT, 0x00000000);
[13:16:48.071]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:16:48.071]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:16:48.081]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:16:48.081]        // -> [powered_down <= 0x00000001]
[13:16:48.081]    </block>
[13:16:48.081]    <control if="powered_down" while="" timeout="0" info="">
[13:16:48.081]      // if-block "powered_down"
[13:16:48.081]        // =>  TRUE
[13:16:48.081]      <block atomic="false" info="">
[13:16:48.081]        Message(0, "Debug/System power-up request sent");
[13:16:48.081]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:16:48.091]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:16:48.091]      </block>
[13:16:48.091]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:16:48.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:16:48.091]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:16:48.091]        // while-condition  =>  FALSE
[13:16:48.091]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:16:48.091]      </control>
[13:16:48.091]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:16:48.091]        // if-block "(__protocol & 0xFFFF) == 1"
[13:16:48.091]          // =>  FALSE
[13:16:48.091]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:16:48.091]      </control>
[13:16:48.091]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:16:48.091]        // if-block "(__protocol & 0xFFFF) == 2"
[13:16:48.091]          // =>  TRUE
[13:16:48.091]        <block atomic="false" info="">
[13:16:48.091]          Message(0, "executing SWD power up");
[13:16:48.091]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:16:48.101]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:16:48.101]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:16:48.101]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:16:48.101]        </block>
[13:16:48.101]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:16:48.101]      </control>
[13:16:48.101]      // end if-block "powered_down"
[13:16:48.101]    </control>
[13:16:48.101]    <block atomic="false" info="">
[13:16:48.101]      __var DEBUG_PORT_VAL    = 0;
[13:16:48.101]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:16:48.101]      __var ACCESS_POINT_VAL  = 0;
[13:16:48.101]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:16:48.101]      __ap = 1; 
[13:16:48.101]        // -> [__ap <= 0x00000001]
[13:16:48.101]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:16:48.101]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:16:48.111]      __ap = 4;
[13:16:48.111]        // -> [__ap <= 0x00000004]
[13:16:48.111]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:48.111]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:16:48.111]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:16:48.111]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:48.111]    </block>
[13:16:48.111]    <block atomic="false" info="">
[13:16:48.111]      __var nReset = 0x80;
[13:16:48.111]        // -> [nReset <= 0x00000080]
[13:16:48.111]      __var canReadPins = 0;
[13:16:48.111]        // -> [canReadPins <= 0x00000000]
[13:16:48.111]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:16:48.111]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:16:48.111]        // -> [canReadPins <= 0x00000001]
[13:16:48.111]    </block>
[13:16:48.111]    <control if="" while="1" timeout="200" info="">
[13:16:48.111]      // while "1"  (timeout="200")
[13:16:48.111]      // while-condition  =>  TRUE
[13:16:48.111]      // while "1"  (timeout="200")
[13:16:48.111]      // while-condition  =>  TRUE
[13:16:48.111]      // while "1"  (timeout="200")
[13:16:48.111]      // while-condition  =>  TRUE
[13:16:48.111]      // while "1"  (timeout="200")
[13:16:48.111]      // while-condition  =>  TRUE
[13:16:48.111]      // while "1"  (timeout="200")
[13:16:48.111]      // while-condition  =>  TRUE
[13:16:48.111]      // while "1"  (timeout="200")
[13:16:48.111]      // while-condition  =>  TRUE
[13:16:48.111]      // while "1"  (timeout="200")
[13:16:48.111]      // while-condition  =>  TRUE
[13:16:48.121]      // while "1"  (timeout="200")
[13:16:48.121]      // while  =>  TIMEOUT
[13:16:48.121]      // end while "1"
[13:16:48.121]    </control>
[13:16:48.122]    <control if="canReadPins" while="" timeout="0" info="">
[13:16:48.122]      // if-block "canReadPins"
[13:16:48.122]        // =>  TRUE
[13:16:48.122]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:16:48.122]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:16:48.123]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:16:48.123]        // while-condition  =>  FALSE
[13:16:48.123]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:16:48.125]      </control>
[13:16:48.125]      // end if-block "canReadPins"
[13:16:48.125]    </control>
[13:16:48.125]    <control if="!canReadPins" while="" timeout="0" info="">
[13:16:48.125]      // if-block "!canReadPins"
[13:16:48.125]        // =>  FALSE
[13:16:48.125]      // skip if-block "!canReadPins"
[13:16:48.125]    </control>
[13:16:48.125]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:16:48.125]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:48.125]        // =>  TRUE
[13:16:48.125]      <block atomic="false" info="">
[13:16:48.127]        WriteAP(0x00, 0x190008);
[13:16:48.128]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:48.128]        WriteAP(0xF0, 0x01);
[13:16:48.132]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:48.132]      </block>
[13:16:48.132]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:48.132]    </control>
[13:16:48.132]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:16:48.132]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:48.132]        // =>  FALSE
[13:16:48.132]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:48.132]    </control>
[13:16:48.132]    <block atomic="false" info="">
[13:16:48.132]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:48.132]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:16:48.132]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:16:48.132]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:48.132]      __ap = 0; //lets make sure we reset the access point selection
[13:16:48.132]        // -> [__ap <= 0x00000000]
[13:16:48.132]    </block>
[13:16:48.132]  </sequence>
[13:16:48.132]  
[13:16:48.152]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:16:48.152]  
[13:16:48.152]  <debugvars>
[13:16:48.152]    // Pre-defined
[13:16:48.152]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:48.152]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:48.152]    __dp=0x00000000
[13:16:48.152]    __ap=0x00000000
[13:16:48.152]    __traceout=0x00000000      (Trace Disabled)
[13:16:48.152]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:48.152]    __FlashAddr=0x00000000
[13:16:48.152]    __FlashLen=0x00000000
[13:16:48.152]    __FlashArg=0x00000000
[13:16:48.152]    __FlashOp=0x00000000
[13:16:48.152]    __Result=0x00000000
[13:16:48.152]  </debugvars>
[13:16:48.152]  
[13:16:48.152]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:16:48.152]    <block atomic="false" info="">
[13:16:48.152]      __var deviceID = 0;
[13:16:48.152]        // -> [deviceID <= 0x00000000]
[13:16:48.152]      __var version = 0;
[13:16:48.152]        // -> [version <= 0x00000000]
[13:16:48.152]      __var partNum = 0;
[13:16:48.152]        // -> [partNum <= 0x00000000]
[13:16:48.152]      __var manuf = 0;
[13:16:48.152]        // -> [manuf <= 0x00000000]
[13:16:48.152]      __var isMSPM0G1X0X_G3X0X = 0;
[13:16:48.152]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:16:48.152]      __var isProduction = 0;
[13:16:48.152]        // -> [isProduction <= 0x00000000]
[13:16:48.152]      __var continueId = 0;
[13:16:48.152]        // -> [continueId <= 0x00000000]
[13:16:48.152]      deviceID =   Read32(0x41C40004);
[13:16:48.162]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:16:48.162]        // -> [deviceID <= 0x2BB8802F]
[13:16:48.162]      version = deviceID >> 28;
[13:16:48.162]        // -> [version <= 0x00000002]
[13:16:48.162]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:16:48.162]        // -> [partNum <= 0x0000BB88]
[13:16:48.162]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:16:48.162]        // -> [manuf <= 0x00000017]
[13:16:48.162]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:16:48.162]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:16:48.162]      isProduction = (version > 0);
[13:16:48.162]        // -> [isProduction <= 0x00000001]
[13:16:48.162]    </block>
[13:16:48.162]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:16:48.162]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:16:48.162]        // =>  FALSE
[13:16:48.162]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:16:48.162]    </control>
[13:16:48.162]    <control if="continueId == 4" while="" timeout="0" info="">
[13:16:48.162]      // if-block "continueId == 4"
[13:16:48.162]        // =>  FALSE
[13:16:48.162]      // skip if-block "continueId == 4"
[13:16:48.162]    </control>
[13:16:48.162]    <control if="!isProduction" while="" timeout="0" info="">
[13:16:48.162]      // if-block "!isProduction"
[13:16:48.168]        // =>  FALSE
[13:16:48.168]      // skip if-block "!isProduction"
[13:16:48.168]    </control>
[13:16:48.168]  </sequence>
[13:16:48.168]  
[14:57:47.841]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:57:47.841]  
[14:57:47.856]  <debugvars>
[14:57:47.856]    // Pre-defined
[14:57:47.856]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:57:47.856]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:57:47.856]    __dp=0x00000000
[14:57:47.856]    __ap=0x00000000
[14:57:47.856]    __traceout=0x00000000      (Trace Disabled)
[14:57:47.856]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:57:47.856]    __FlashAddr=0x00000000
[14:57:47.856]    __FlashLen=0x00000000
[14:57:47.856]    __FlashArg=0x00000000
[14:57:47.856]    __FlashOp=0x00000000
[14:57:47.856]    __Result=0x00000000
[14:57:47.856]  </debugvars>
[14:57:47.856]  
[14:57:47.856]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:57:47.856]    <block atomic="false" info="">
[14:57:47.856]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:57:47.856]        // -> [isSWJ <= 0x00000001]
[14:57:47.856]      __var hasDormant = __protocol & 0x00020000;
[14:57:47.856]        // -> [hasDormant <= 0x00000000]
[14:57:47.856]      __var protType   = __protocol & 0x0000FFFF;
[14:57:47.856]        // -> [protType <= 0x00000002]
[14:57:47.856]    </block>
[14:57:47.856]    <control if="protType == 1" while="" timeout="0" info="">
[14:57:47.856]      // if-block "protType == 1"
[14:57:47.856]        // =>  FALSE
[14:57:47.856]      // skip if-block "protType == 1"
[14:57:47.856]    </control>
[14:57:47.856]    <control if="protType == 2" while="" timeout="0" info="">
[14:57:47.856]      // if-block "protType == 2"
[14:57:47.856]        // =>  TRUE
[14:57:47.856]      <control if="isSWJ" while="" timeout="0" info="">
[14:57:47.856]        // if-block "isSWJ"
[14:57:47.856]          // =>  TRUE
[14:57:47.856]        <control if="hasDormant" while="" timeout="0" info="">
[14:57:47.856]          // if-block "hasDormant"
[14:57:47.856]            // =>  FALSE
[14:57:47.856]          // skip if-block "hasDormant"
[14:57:47.860]        </control>
[14:57:47.860]        <control if="!hasDormant" while="" timeout="0" info="">
[14:57:47.860]          // if-block "!hasDormant"
[14:57:47.860]            // =>  TRUE
[14:57:47.860]          <block atomic="false" info="">
[14:57:47.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:57:47.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:57:47.860]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:57:47.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:57:47.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:57:47.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:57:47.860]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:57:47.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:57:47.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:57:47.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:57:47.860]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:57:47.871]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:57:47.871]          </block>
[14:57:47.871]          // end if-block "!hasDormant"
[14:57:47.871]        </control>
[14:57:47.871]        // end if-block "isSWJ"
[14:57:47.871]      </control>
[14:57:47.871]      <control if="!isSWJ" while="" timeout="0" info="">
[14:57:47.871]        // if-block "!isSWJ"
[14:57:47.871]          // =>  FALSE
[14:57:47.871]        // skip if-block "!isSWJ"
[14:57:47.871]      </control>
[14:57:47.871]      <block atomic="false" info="">
[14:57:47.872]        ReadDP(0x0);
[14:57:47.873]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:57:47.873]      </block>
[14:57:47.873]      // end if-block "protType == 2"
[14:57:47.873]    </control>
[14:57:47.873]  </sequence>
[14:57:47.873]  
[14:57:47.873]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:57:47.873]  
[14:57:47.873]  <debugvars>
[14:57:47.873]    // Pre-defined
[14:57:47.873]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:57:47.873]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:57:47.873]    __dp=0x00000000
[14:57:47.873]    __ap=0x00000000
[14:57:47.873]    __traceout=0x00000000      (Trace Disabled)
[14:57:47.873]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:57:47.873]    __FlashAddr=0x00000000
[14:57:47.873]    __FlashLen=0x00000000
[14:57:47.873]    __FlashArg=0x00000000
[14:57:47.873]    __FlashOp=0x00000000
[14:57:47.873]    __Result=0x00000000
[14:57:47.873]  </debugvars>
[14:57:47.873]  
[14:57:47.873]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:57:47.873]    <block atomic="false" info="">
[14:57:47.873]      __var SW_DP_ABORT       = 0x0;
[14:57:47.873]        // -> [SW_DP_ABORT <= 0x00000000]
[14:57:47.873]      __var DP_CTRL_STAT      = 0x4;
[14:57:47.873]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:57:47.873]      __var DP_SELECT         = 0x8;
[14:57:47.873]        // -> [DP_SELECT <= 0x00000008]
[14:57:47.873]      __var powered_down      = 0;
[14:57:47.873]        // -> [powered_down <= 0x00000000]
[14:57:47.873]      WriteDP(DP_SELECT, 0x00000000);
[14:57:47.881]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:57:47.881]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:57:47.881]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:57:47.881]        // -> [powered_down <= 0x00000001]
[14:57:47.881]    </block>
[14:57:47.881]    <control if="powered_down" while="" timeout="0" info="">
[14:57:47.881]      // if-block "powered_down"
[14:57:47.881]        // =>  TRUE
[14:57:47.881]      <block atomic="false" info="">
[14:57:47.881]        Message(0, "Debug/System power-up request sent");
[14:57:47.881]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:57:47.881]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:57:47.881]      </block>
[14:57:47.881]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:57:47.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:57:47.881]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:57:47.881]        // while-condition  =>  FALSE
[14:57:47.881]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:57:47.881]      </control>
[14:57:47.881]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:57:47.881]        // if-block "(__protocol & 0xFFFF) == 1"
[14:57:47.881]          // =>  FALSE
[14:57:47.881]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:57:47.881]      </control>
[14:57:47.881]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:57:47.881]        // if-block "(__protocol & 0xFFFF) == 2"
[14:57:47.881]          // =>  TRUE
[14:57:47.881]        <block atomic="false" info="">
[14:57:47.881]          Message(0, "executing SWD power up");
[14:57:47.881]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:57:47.881]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:57:47.881]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:57:47.891]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:57:47.891]        </block>
[14:57:47.891]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:57:47.891]      </control>
[14:57:47.891]      // end if-block "powered_down"
[14:57:47.891]    </control>
[14:57:47.891]    <block atomic="false" info="">
[14:57:47.891]      __var DEBUG_PORT_VAL    = 0;
[14:57:47.891]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:57:47.891]      __var ACCESS_POINT_VAL  = 0;
[14:57:47.891]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:57:47.891]      __ap = 1; 
[14:57:47.891]        // -> [__ap <= 0x00000001]
[14:57:47.891]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:57:47.891]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:57:47.891]      __ap = 4;
[14:57:47.891]        // -> [__ap <= 0x00000004]
[14:57:47.891]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:57:47.901]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:57:47.901]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:57:47.901]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:57:47.901]    </block>
[14:57:47.901]    <block atomic="false" info="">
[14:57:47.901]      __var nReset = 0x80;
[14:57:47.901]        // -> [nReset <= 0x00000080]
[14:57:47.901]      __var canReadPins = 0;
[14:57:47.901]        // -> [canReadPins <= 0x00000000]
[14:57:47.901]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:57:47.901]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:57:47.901]        // -> [canReadPins <= 0x00000001]
[14:57:47.901]    </block>
[14:57:47.901]    <control if="" while="1" timeout="200" info="">
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.901]      // while-condition  =>  TRUE
[14:57:47.901]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.911]      // while-condition  =>  TRUE
[14:57:47.911]      // while "1"  (timeout="200")
[14:57:47.921]      // while-condition  =>  TRUE
[14:57:47.921]      // while "1"  (timeout="200")
[14:57:47.921]      // while  =>  TIMEOUT
[14:57:47.921]      // end while "1"
[14:57:47.922]    </control>
[14:57:47.922]    <control if="canReadPins" while="" timeout="0" info="">
[14:57:47.922]      // if-block "canReadPins"
[14:57:47.922]        // =>  TRUE
[14:57:47.922]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:57:47.922]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:57:47.923]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:57:47.923]        // while-condition  =>  FALSE
[14:57:47.923]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:57:47.923]      </control>
[14:57:47.923]      // end if-block "canReadPins"
[14:57:47.923]    </control>
[14:57:47.923]    <control if="!canReadPins" while="" timeout="0" info="">
[14:57:47.923]      // if-block "!canReadPins"
[14:57:47.923]        // =>  FALSE
[14:57:47.923]      // skip if-block "!canReadPins"
[14:57:47.925]    </control>
[14:57:47.925]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:57:47.925]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:57:47.925]        // =>  TRUE
[14:57:47.925]      <block atomic="false" info="">
[14:57:47.925]        WriteAP(0x00, 0x190008);
[14:57:47.926]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:57:47.926]        WriteAP(0xF0, 0x01);
[14:57:47.932]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:57:47.932]      </block>
[14:57:47.932]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:57:47.932]    </control>
[14:57:47.932]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:57:47.932]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:57:47.932]        // =>  FALSE
[14:57:47.932]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:57:47.932]    </control>
[14:57:47.934]    <block atomic="false" info="">
[14:57:47.934]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:57:47.938]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:57:47.938]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:57:47.938]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:57:47.938]      __ap = 0; //lets make sure we reset the access point selection
[14:57:47.938]        // -> [__ap <= 0x00000000]
[14:57:47.938]    </block>
[14:57:47.938]  </sequence>
[14:57:47.938]  
[14:57:47.968]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:57:47.968]  
[14:57:47.968]  <debugvars>
[14:57:47.968]    // Pre-defined
[14:57:47.968]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:57:47.968]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:57:47.968]    __dp=0x00000000
[14:57:47.968]    __ap=0x00000000
[14:57:47.968]    __traceout=0x00000000      (Trace Disabled)
[14:57:47.968]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:57:47.968]    __FlashAddr=0x00000000
[14:57:47.968]    __FlashLen=0x00000000
[14:57:47.968]    __FlashArg=0x00000000
[14:57:47.968]    __FlashOp=0x00000000
[14:57:47.968]    __Result=0x00000000
[14:57:47.968]  </debugvars>
[14:57:47.968]  
[14:57:47.968]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:57:47.968]    <block atomic="false" info="">
[14:57:47.968]      __var deviceID = 0;
[14:57:47.968]        // -> [deviceID <= 0x00000000]
[14:57:47.968]      __var version = 0;
[14:57:47.968]        // -> [version <= 0x00000000]
[14:57:47.968]      __var partNum = 0;
[14:57:47.968]        // -> [partNum <= 0x00000000]
[14:57:47.968]      __var manuf = 0;
[14:57:47.968]        // -> [manuf <= 0x00000000]
[14:57:47.972]      __var isMSPM0G1X0X_G3X0X = 0;
[14:57:47.972]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:57:47.972]      __var isProduction = 0;
[14:57:47.972]        // -> [isProduction <= 0x00000000]
[14:57:47.972]      __var continueId = 0;
[14:57:47.972]        // -> [continueId <= 0x00000000]
[14:57:47.972]      deviceID =   Read32(0x41C40004);
[14:57:47.977]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:57:47.977]        // -> [deviceID <= 0x2BB8802F]
[14:57:47.977]      version = deviceID >> 28;
[14:57:47.977]        // -> [version <= 0x00000002]
[14:57:47.977]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:57:47.977]        // -> [partNum <= 0x0000BB88]
[14:57:47.977]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:57:47.977]        // -> [manuf <= 0x00000017]
[14:57:47.977]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:57:47.977]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:57:47.977]      isProduction = (version > 0);
[14:57:47.977]        // -> [isProduction <= 0x00000001]
[14:57:47.977]    </block>
[14:57:47.977]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:57:47.977]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:57:47.977]        // =>  FALSE
[14:57:47.977]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:57:47.977]    </control>
[14:57:47.977]    <control if="continueId == 4" while="" timeout="0" info="">
[14:57:47.977]      // if-block "continueId == 4"
[14:57:47.977]        // =>  FALSE
[14:57:47.977]      // skip if-block "continueId == 4"
[14:57:47.977]    </control>
[14:57:47.977]    <control if="!isProduction" while="" timeout="0" info="">
[14:57:47.977]      // if-block "!isProduction"
[14:57:47.977]        // =>  FALSE
[14:57:47.977]      // skip if-block "!isProduction"
[14:57:47.977]    </control>
[14:57:47.977]  </sequence>
[14:57:47.977]  
[14:58:51.794]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:58:51.794]  
[14:58:51.808]  <debugvars>
[14:58:51.808]    // Pre-defined
[14:58:51.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:51.808]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:51.808]    __dp=0x00000000
[14:58:51.808]    __ap=0x00000000
[14:58:51.808]    __traceout=0x00000000      (Trace Disabled)
[14:58:51.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:51.808]    __FlashAddr=0x00000000
[14:58:51.808]    __FlashLen=0x00000000
[14:58:51.808]    __FlashArg=0x00000000
[14:58:51.808]    __FlashOp=0x00000000
[14:58:51.808]    __Result=0x00000000
[14:58:51.808]  </debugvars>
[14:58:51.808]  
[14:58:51.808]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:58:51.808]    <block atomic="false" info="">
[14:58:51.808]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:58:51.808]        // -> [isSWJ <= 0x00000001]
[14:58:51.808]      __var hasDormant = __protocol & 0x00020000;
[14:58:51.808]        // -> [hasDormant <= 0x00000000]
[14:58:51.808]      __var protType   = __protocol & 0x0000FFFF;
[14:58:51.808]        // -> [protType <= 0x00000002]
[14:58:51.808]    </block>
[14:58:51.808]    <control if="protType == 1" while="" timeout="0" info="">
[14:58:51.808]      // if-block "protType == 1"
[14:58:51.808]        // =>  FALSE
[14:58:51.808]      // skip if-block "protType == 1"
[14:58:51.808]    </control>
[14:58:51.808]    <control if="protType == 2" while="" timeout="0" info="">
[14:58:51.808]      // if-block "protType == 2"
[14:58:51.808]        // =>  TRUE
[14:58:51.812]      <control if="isSWJ" while="" timeout="0" info="">
[14:58:51.812]        // if-block "isSWJ"
[14:58:51.812]          // =>  TRUE
[14:58:51.812]        <control if="hasDormant" while="" timeout="0" info="">
[14:58:51.812]          // if-block "hasDormant"
[14:58:51.812]            // =>  FALSE
[14:58:51.812]          // skip if-block "hasDormant"
[14:58:51.812]        </control>
[14:58:51.812]        <control if="!hasDormant" while="" timeout="0" info="">
[14:58:51.812]          // if-block "!hasDormant"
[14:58:51.812]            // =>  TRUE
[14:58:51.812]          <block atomic="false" info="">
[14:58:51.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:58:51.812]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:51.812]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:58:51.812]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:58:51.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:58:51.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:51.822]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:58:51.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:58:51.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:58:51.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:51.822]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:58:51.832]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:58:51.832]          </block>
[14:58:51.832]          // end if-block "!hasDormant"
[14:58:51.832]        </control>
[14:58:51.832]        // end if-block "isSWJ"
[14:58:51.832]      </control>
[14:58:51.832]      <control if="!isSWJ" while="" timeout="0" info="">
[14:58:51.832]        // if-block "!isSWJ"
[14:58:51.832]          // =>  FALSE
[14:58:51.832]        // skip if-block "!isSWJ"
[14:58:51.832]      </control>
[14:58:51.832]      <block atomic="false" info="">
[14:58:51.832]        ReadDP(0x0);
[14:58:51.832]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:58:51.832]      </block>
[14:58:51.832]      // end if-block "protType == 2"
[14:58:51.832]    </control>
[14:58:51.832]  </sequence>
[14:58:51.832]  
[14:58:51.845]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:58:51.845]  
[14:58:51.845]  <debugvars>
[14:58:51.845]    // Pre-defined
[14:58:51.845]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:51.845]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:51.845]    __dp=0x00000000
[14:58:51.845]    __ap=0x00000000
[14:58:51.845]    __traceout=0x00000000      (Trace Disabled)
[14:58:51.845]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:51.845]    __FlashAddr=0x00000000
[14:58:51.845]    __FlashLen=0x00000000
[14:58:51.845]    __FlashArg=0x00000000
[14:58:51.845]    __FlashOp=0x00000000
[14:58:51.845]    __Result=0x00000000
[14:58:51.845]  </debugvars>
[14:58:51.845]  
[14:58:51.845]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:58:51.845]    <block atomic="false" info="">
[14:58:51.845]      __var SW_DP_ABORT       = 0x0;
[14:58:51.845]        // -> [SW_DP_ABORT <= 0x00000000]
[14:58:51.845]      __var DP_CTRL_STAT      = 0x4;
[14:58:51.845]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:58:51.845]      __var DP_SELECT         = 0x8;
[14:58:51.845]        // -> [DP_SELECT <= 0x00000008]
[14:58:51.845]      __var powered_down      = 0;
[14:58:51.845]        // -> [powered_down <= 0x00000000]
[14:58:51.845]      WriteDP(DP_SELECT, 0x00000000);
[14:58:51.845]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:58:51.845]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:58:51.845]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:58:51.845]        // -> [powered_down <= 0x00000001]
[14:58:51.845]    </block>
[14:58:51.845]    <control if="powered_down" while="" timeout="0" info="">
[14:58:51.845]      // if-block "powered_down"
[14:58:51.845]        // =>  TRUE
[14:58:51.845]      <block atomic="false" info="">
[14:58:51.845]        Message(0, "Debug/System power-up request sent");
[14:58:51.856]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:58:51.856]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:58:51.856]      </block>
[14:58:51.856]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:58:51.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:58:51.856]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:58:51.856]        // while-condition  =>  FALSE
[14:58:51.856]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:58:51.856]      </control>
[14:58:51.856]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:58:51.856]        // if-block "(__protocol & 0xFFFF) == 1"
[14:58:51.856]          // =>  FALSE
[14:58:51.856]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:58:51.856]      </control>
[14:58:51.856]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:58:51.856]        // if-block "(__protocol & 0xFFFF) == 2"
[14:58:51.856]          // =>  TRUE
[14:58:51.856]        <block atomic="false" info="">
[14:58:51.856]          Message(0, "executing SWD power up");
[14:58:51.863]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:58:51.863]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:58:51.863]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:58:51.869]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:58:51.869]        </block>
[14:58:51.869]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:58:51.869]      </control>
[14:58:51.869]      // end if-block "powered_down"
[14:58:51.869]    </control>
[14:58:51.869]    <block atomic="false" info="">
[14:58:51.869]      __var DEBUG_PORT_VAL    = 0;
[14:58:51.869]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:58:51.869]      __var ACCESS_POINT_VAL  = 0;
[14:58:51.869]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:58:51.869]      __ap = 1; 
[14:58:51.869]        // -> [__ap <= 0x00000001]
[14:58:51.869]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:58:51.875]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:58:51.875]      __ap = 4;
[14:58:51.875]        // -> [__ap <= 0x00000004]
[14:58:51.875]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:58:51.875]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:58:51.875]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:58:51.875]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:58:51.875]    </block>
[14:58:51.875]    <block atomic="false" info="">
[14:58:51.875]      __var nReset = 0x80;
[14:58:51.884]        // -> [nReset <= 0x00000080]
[14:58:51.884]      __var canReadPins = 0;
[14:58:51.884]        // -> [canReadPins <= 0x00000000]
[14:58:51.884]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:58:51.884]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:58:51.884]        // -> [canReadPins <= 0x00000001]
[14:58:51.884]    </block>
[14:58:51.884]    <control if="" while="1" timeout="200" info="">
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.884]      // while-condition  =>  TRUE
[14:58:51.884]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.894]      // while-condition  =>  TRUE
[14:58:51.894]      // while "1"  (timeout="200")
[14:58:51.904]      // while-condition  =>  TRUE
[14:58:51.904]      // while "1"  (timeout="200")
[14:58:51.904]      // while  =>  TIMEOUT
[14:58:51.904]      // end while "1"
[14:58:51.904]    </control>
[14:58:51.904]    <control if="canReadPins" while="" timeout="0" info="">
[14:58:51.904]      // if-block "canReadPins"
[14:58:51.904]        // =>  TRUE
[14:58:51.904]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:58:51.904]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:58:51.904]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:58:51.904]        // while-condition  =>  FALSE
[14:58:51.904]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:58:51.904]      </control>
[14:58:51.904]      // end if-block "canReadPins"
[14:58:51.904]    </control>
[14:58:51.904]    <control if="!canReadPins" while="" timeout="0" info="">
[14:58:51.904]      // if-block "!canReadPins"
[14:58:51.904]        // =>  FALSE
[14:58:51.904]      // skip if-block "!canReadPins"
[14:58:51.904]    </control>
[14:58:51.904]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:58:51.904]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:58:51.904]        // =>  TRUE
[14:58:51.904]      <block atomic="false" info="">
[14:58:51.904]        WriteAP(0x00, 0x190008);
[14:58:51.916]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:58:51.916]        WriteAP(0xF0, 0x01);
[14:58:51.916]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:58:51.916]      </block>
[14:58:51.916]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:58:51.916]    </control>
[14:58:51.916]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:58:51.916]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:58:51.916]        // =>  FALSE
[14:58:51.916]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:58:51.916]    </control>
[14:58:51.916]    <block atomic="false" info="">
[14:58:51.916]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:58:51.916]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:58:51.916]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:58:51.916]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:58:51.925]      __ap = 0; //lets make sure we reset the access point selection
[14:58:51.925]        // -> [__ap <= 0x00000000]
[14:58:51.925]    </block>
[14:58:51.925]  </sequence>
[14:58:51.925]  
[14:58:51.964]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:58:51.964]  
[14:58:51.964]  <debugvars>
[14:58:51.964]    // Pre-defined
[14:58:51.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:51.964]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:51.964]    __dp=0x00000000
[14:58:51.964]    __ap=0x00000000
[14:58:51.964]    __traceout=0x00000000      (Trace Disabled)
[14:58:51.964]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:51.964]    __FlashAddr=0x00000000
[14:58:51.964]    __FlashLen=0x00000000
[14:58:51.964]    __FlashArg=0x00000000
[14:58:51.964]    __FlashOp=0x00000000
[14:58:51.966]    __Result=0x00000000
[14:58:51.966]  </debugvars>
[14:58:51.966]  
[14:58:51.966]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:58:51.966]    <block atomic="false" info="">
[14:58:51.967]      __var deviceID = 0;
[14:58:51.967]        // -> [deviceID <= 0x00000000]
[14:58:51.967]      __var version = 0;
[14:58:51.967]        // -> [version <= 0x00000000]
[14:58:51.967]      __var partNum = 0;
[14:58:51.967]        // -> [partNum <= 0x00000000]
[14:58:51.967]      __var manuf = 0;
[14:58:51.967]        // -> [manuf <= 0x00000000]
[14:58:51.967]      __var isMSPM0G1X0X_G3X0X = 0;
[14:58:51.967]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:58:51.967]      __var isProduction = 0;
[14:58:51.968]        // -> [isProduction <= 0x00000000]
[14:58:51.968]      __var continueId = 0;
[14:58:51.968]        // -> [continueId <= 0x00000000]
[14:58:51.968]      deviceID =   Read32(0x41C40004);
[14:58:51.974]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:58:51.974]        // -> [deviceID <= 0x2BB8802F]
[14:58:51.974]      version = deviceID >> 28;
[14:58:51.974]        // -> [version <= 0x00000002]
[14:58:51.974]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:58:51.974]        // -> [partNum <= 0x0000BB88]
[14:58:51.974]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:58:51.974]        // -> [manuf <= 0x00000017]
[14:58:51.974]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:58:51.974]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:58:51.974]      isProduction = (version > 0);
[14:58:51.974]        // -> [isProduction <= 0x00000001]
[14:58:51.978]    </block>
[14:58:51.978]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:58:51.978]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:58:51.978]        // =>  FALSE
[14:58:51.978]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:58:51.978]    </control>
[14:58:51.978]    <control if="continueId == 4" while="" timeout="0" info="">
[14:58:51.978]      // if-block "continueId == 4"
[14:58:51.978]        // =>  FALSE
[14:58:51.978]      // skip if-block "continueId == 4"
[14:58:51.980]    </control>
[14:58:51.980]    <control if="!isProduction" while="" timeout="0" info="">
[14:58:51.980]      // if-block "!isProduction"
[14:58:51.980]        // =>  FALSE
[14:58:51.980]      // skip if-block "!isProduction"
[14:58:51.980]    </control>
[14:58:51.980]  </sequence>
[14:58:51.980]  
[14:58:58.265]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[14:58:58.265]  
[14:58:58.275]  <debugvars>
[14:58:58.275]    // Pre-defined
[14:58:58.275]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:58.275]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:58.275]    __dp=0x00000000
[14:58:58.275]    __ap=0x00000000
[14:58:58.275]    __traceout=0x00000000      (Trace Disabled)
[14:58:58.275]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:58.275]    __FlashAddr=0x00000000
[14:58:58.275]    __FlashLen=0x00000000
[14:58:58.275]    __FlashArg=0x00000000
[14:58:58.275]    __FlashOp=0x00000000
[14:58:58.275]    __Result=0x00000000
[14:58:58.275]  </debugvars>
[14:58:58.275]  
[14:58:58.275]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:58:58.275]    <block atomic="false" info="">
[14:58:58.275]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:58:58.275]        // -> [isSWJ <= 0x00000001]
[14:58:58.275]      __var hasDormant = __protocol & 0x00020000;
[14:58:58.275]        // -> [hasDormant <= 0x00000000]
[14:58:58.275]      __var protType   = __protocol & 0x0000FFFF;
[14:58:58.275]        // -> [protType <= 0x00000002]
[14:58:58.275]    </block>
[14:58:58.275]    <control if="protType == 1" while="" timeout="0" info="">
[14:58:58.275]      // if-block "protType == 1"
[14:58:58.275]        // =>  FALSE
[14:58:58.275]      // skip if-block "protType == 1"
[14:58:58.275]    </control>
[14:58:58.275]    <control if="protType == 2" while="" timeout="0" info="">
[14:58:58.275]      // if-block "protType == 2"
[14:58:58.275]        // =>  TRUE
[14:58:58.275]      <control if="isSWJ" while="" timeout="0" info="">
[14:58:58.275]        // if-block "isSWJ"
[14:58:58.275]          // =>  TRUE
[14:58:58.275]        <control if="hasDormant" while="" timeout="0" info="">
[14:58:58.275]          // if-block "hasDormant"
[14:58:58.275]            // =>  FALSE
[14:58:58.275]          // skip if-block "hasDormant"
[14:58:58.275]        </control>
[14:58:58.275]        <control if="!hasDormant" while="" timeout="0" info="">
[14:58:58.275]          // if-block "!hasDormant"
[14:58:58.275]            // =>  TRUE
[14:58:58.275]          <block atomic="false" info="">
[14:58:58.275]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:58:58.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.275]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:58:58.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:58:58.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:58:58.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.285]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:58:58.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:58:58.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:58:58.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.285]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:58:58.295]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:58:58.295]          </block>
[14:58:58.295]          // end if-block "!hasDormant"
[14:58:58.295]        </control>
[14:58:58.295]        // end if-block "isSWJ"
[14:58:58.295]      </control>
[14:58:58.295]      <control if="!isSWJ" while="" timeout="0" info="">
[14:58:58.295]        // if-block "!isSWJ"
[14:58:58.295]          // =>  FALSE
[14:58:58.295]        // skip if-block "!isSWJ"
[14:58:58.295]      </control>
[14:58:58.295]      <block atomic="false" info="">
[14:58:58.295]        ReadDP(0x0);
[14:58:58.315]  
[14:58:58.315]  !!! E310 : Debug access failed - cannot read DP register 0x00
[14:58:58.315]  
[14:58:58.315]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:58:58.315]      </block>
[14:58:58.315]      // end if-block "protType == 2"
[14:58:58.315]    </control>
[14:58:58.315]  </sequence>
[14:58:58.315]  
[14:58:58.567]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[14:58:58.567]  
[14:58:58.576]  <debugvars>
[14:58:58.576]    // Pre-defined
[14:58:58.576]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:58.576]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:58.576]    __dp=0x00000000
[14:58:58.576]    __ap=0x00000000
[14:58:58.576]    __traceout=0x00000000      (Trace Disabled)
[14:58:58.576]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:58.576]    __FlashAddr=0x00000000
[14:58:58.576]    __FlashLen=0x00000000
[14:58:58.576]    __FlashArg=0x00000000
[14:58:58.576]    __FlashOp=0x00000000
[14:58:58.576]    __Result=0x00000000
[14:58:58.576]  </debugvars>
[14:58:58.576]  
[14:58:58.576]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:58:58.576]    <block atomic="false" info="">
[14:58:58.576]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:58:58.578]        // -> [isSWJ <= 0x00000001]
[14:58:58.578]      __var hasDormant = __protocol & 0x00020000;
[14:58:58.578]        // -> [hasDormant <= 0x00000000]
[14:58:58.578]      __var protType   = __protocol & 0x0000FFFF;
[14:58:58.578]        // -> [protType <= 0x00000002]
[14:58:58.578]    </block>
[14:58:58.578]    <control if="protType == 1" while="" timeout="0" info="">
[14:58:58.578]      // if-block "protType == 1"
[14:58:58.578]        // =>  FALSE
[14:58:58.578]      // skip if-block "protType == 1"
[14:58:58.578]    </control>
[14:58:58.578]    <control if="protType == 2" while="" timeout="0" info="">
[14:58:58.578]      // if-block "protType == 2"
[14:58:58.578]        // =>  TRUE
[14:58:58.578]      <control if="isSWJ" while="" timeout="0" info="">
[14:58:58.578]        // if-block "isSWJ"
[14:58:58.578]          // =>  TRUE
[14:58:58.578]        <control if="hasDormant" while="" timeout="0" info="">
[14:58:58.578]          // if-block "hasDormant"
[14:58:58.578]            // =>  FALSE
[14:58:58.578]          // skip if-block "hasDormant"
[14:58:58.578]        </control>
[14:58:58.578]        <control if="!hasDormant" while="" timeout="0" info="">
[14:58:58.578]          // if-block "!hasDormant"
[14:58:58.578]            // =>  TRUE
[14:58:58.578]          <block atomic="false" info="">
[14:58:58.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:58:58.578]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.578]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:58:58.578]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:58:58.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:58:58.578]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.578]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:58:58.578]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:58:58.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:58:58.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.588]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:58:58.588]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:58:58.588]          </block>
[14:58:58.588]          // end if-block "!hasDormant"
[14:58:58.588]        </control>
[14:58:58.588]        // end if-block "isSWJ"
[14:58:58.588]      </control>
[14:58:58.588]      <control if="!isSWJ" while="" timeout="0" info="">
[14:58:58.588]        // if-block "!isSWJ"
[14:58:58.588]          // =>  FALSE
[14:58:58.588]        // skip if-block "!isSWJ"
[14:58:58.588]      </control>
[14:58:58.588]      <block atomic="false" info="">
[14:58:58.588]        ReadDP(0x0);
[14:58:58.598]  
[14:58:58.598]  !!! E310 : Debug access failed - cannot read DP register 0x00
[14:58:58.598]  
[14:58:58.598]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:58:58.598]      </block>
[14:58:58.598]      // end if-block "protType == 2"
[14:58:58.598]    </control>
[14:58:58.598]  </sequence>
[14:58:58.598]  
[14:58:58.849]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[14:58:58.849]  
[14:58:58.858]  <debugvars>
[14:58:58.858]    // Pre-defined
[14:58:58.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:58.858]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:58.858]    __dp=0x00000000
[14:58:58.858]    __ap=0x00000000
[14:58:58.858]    __traceout=0x00000000      (Trace Disabled)
[14:58:58.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:58.858]    __FlashAddr=0x00000000
[14:58:58.858]    __FlashLen=0x00000000
[14:58:58.858]    __FlashArg=0x00000000
[14:58:58.858]    __FlashOp=0x00000000
[14:58:58.858]    __Result=0x00000000
[14:58:58.858]  </debugvars>
[14:58:58.858]  
[14:58:58.860]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:58:58.860]    <block atomic="false" info="">
[14:58:58.860]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:58:58.860]        // -> [isSWJ <= 0x00000001]
[14:58:58.860]      __var hasDormant = __protocol & 0x00020000;
[14:58:58.860]        // -> [hasDormant <= 0x00000000]
[14:58:58.860]      __var protType   = __protocol & 0x0000FFFF;
[14:58:58.860]        // -> [protType <= 0x00000002]
[14:58:58.860]    </block>
[14:58:58.860]    <control if="protType == 1" while="" timeout="0" info="">
[14:58:58.860]      // if-block "protType == 1"
[14:58:58.860]        // =>  FALSE
[14:58:58.860]      // skip if-block "protType == 1"
[14:58:58.860]    </control>
[14:58:58.860]    <control if="protType == 2" while="" timeout="0" info="">
[14:58:58.860]      // if-block "protType == 2"
[14:58:58.860]        // =>  TRUE
[14:58:58.860]      <control if="isSWJ" while="" timeout="0" info="">
[14:58:58.860]        // if-block "isSWJ"
[14:58:58.860]          // =>  TRUE
[14:58:58.860]        <control if="hasDormant" while="" timeout="0" info="">
[14:58:58.860]          // if-block "hasDormant"
[14:58:58.860]            // =>  FALSE
[14:58:58.860]          // skip if-block "hasDormant"
[14:58:58.860]        </control>
[14:58:58.860]        <control if="!hasDormant" while="" timeout="0" info="">
[14:58:58.860]          // if-block "!hasDormant"
[14:58:58.860]            // =>  TRUE
[14:58:58.860]          <block atomic="false" info="">
[14:58:58.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:58:58.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.870]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:58:58.870]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:58:58.870]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:58:58.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.870]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:58:58.870]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:58:58.870]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:58:58.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:58.880]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:58:58.880]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:58:58.880]          </block>
[14:58:58.880]          // end if-block "!hasDormant"
[14:58:58.880]        </control>
[14:58:58.880]        // end if-block "isSWJ"
[14:58:58.880]      </control>
[14:58:58.880]      <control if="!isSWJ" while="" timeout="0" info="">
[14:58:58.880]        // if-block "!isSWJ"
[14:58:58.880]          // =>  FALSE
[14:58:58.880]        // skip if-block "!isSWJ"
[14:58:58.880]      </control>
[14:58:58.880]      <block atomic="false" info="">
[14:58:58.880]        ReadDP(0x0);
[14:58:58.892]  
[14:58:58.892]  !!! E310 : Debug access failed - cannot read DP register 0x00
[14:58:58.892]  
[14:58:58.892]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:58:58.892]      </block>
[14:58:58.892]      // end if-block "protType == 2"
[14:58:58.892]    </control>
[14:58:58.892]  </sequence>
[14:58:58.892]  
[14:58:59.143]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[14:58:59.143]  
[14:58:59.151]  <debugvars>
[14:58:59.151]    // Pre-defined
[14:58:59.151]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:59.151]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:59.152]    __dp=0x00000000
[14:58:59.152]    __ap=0x00000000
[14:58:59.152]    __traceout=0x00000000      (Trace Disabled)
[14:58:59.152]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:59.152]    __FlashAddr=0x00000000
[14:58:59.152]    __FlashLen=0x00000000
[14:58:59.152]    __FlashArg=0x00000000
[14:58:59.152]    __FlashOp=0x00000000
[14:58:59.152]    __Result=0x00000000
[14:58:59.152]  </debugvars>
[14:58:59.152]  
[14:58:59.152]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:58:59.153]    <block atomic="false" info="">
[14:58:59.153]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:58:59.153]        // -> [isSWJ <= 0x00000001]
[14:58:59.153]      __var hasDormant = __protocol & 0x00020000;
[14:58:59.153]        // -> [hasDormant <= 0x00000000]
[14:58:59.153]      __var protType   = __protocol & 0x0000FFFF;
[14:58:59.153]        // -> [protType <= 0x00000002]
[14:58:59.153]    </block>
[14:58:59.153]    <control if="protType == 1" while="" timeout="0" info="">
[14:58:59.153]      // if-block "protType == 1"
[14:58:59.154]        // =>  FALSE
[14:58:59.154]      // skip if-block "protType == 1"
[14:58:59.154]    </control>
[14:58:59.154]    <control if="protType == 2" while="" timeout="0" info="">
[14:58:59.154]      // if-block "protType == 2"
[14:58:59.154]        // =>  TRUE
[14:58:59.154]      <control if="isSWJ" while="" timeout="0" info="">
[14:58:59.154]        // if-block "isSWJ"
[14:58:59.154]          // =>  TRUE
[14:58:59.154]        <control if="hasDormant" while="" timeout="0" info="">
[14:58:59.154]          // if-block "hasDormant"
[14:58:59.155]            // =>  FALSE
[14:58:59.155]          // skip if-block "hasDormant"
[14:58:59.155]        </control>
[14:58:59.155]        <control if="!hasDormant" while="" timeout="0" info="">
[14:58:59.155]          // if-block "!hasDormant"
[14:58:59.155]            // =>  TRUE
[14:58:59.155]          <block atomic="false" info="">
[14:58:59.155]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:58:59.160]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:59.160]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:58:59.163]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:58:59.163]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:58:59.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:59.165]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:58:59.167]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:58:59.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:58:59.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:59.177]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:58:59.177]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:58:59.177]          </block>
[14:58:59.183]          // end if-block "!hasDormant"
[14:58:59.183]        </control>
[14:58:59.183]        // end if-block "isSWJ"
[14:58:59.183]      </control>
[14:58:59.183]      <control if="!isSWJ" while="" timeout="0" info="">
[14:58:59.183]        // if-block "!isSWJ"
[14:58:59.183]          // =>  FALSE
[14:58:59.183]        // skip if-block "!isSWJ"
[14:58:59.183]      </control>
[14:58:59.183]      <block atomic="false" info="">
[14:58:59.183]        ReadDP(0x0);
[14:58:59.193]  
[14:58:59.193]  !!! E310 : Debug access failed - cannot read DP register 0x00
[14:58:59.193]  
[14:58:59.193]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:58:59.193]      </block>
[14:58:59.193]      // end if-block "protType == 2"
[14:58:59.193]    </control>
[14:58:59.193]  </sequence>
[14:58:59.193]  
[14:58:59.445]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[14:58:59.445]  
[14:58:59.455]  <debugvars>
[14:58:59.455]    // Pre-defined
[14:58:59.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:58:59.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:58:59.455]    __dp=0x00000000
[14:58:59.455]    __ap=0x00000000
[14:58:59.455]    __traceout=0x00000000      (Trace Disabled)
[14:58:59.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:58:59.455]    __FlashAddr=0x00000000
[14:58:59.455]    __FlashLen=0x00000000
[14:58:59.455]    __FlashArg=0x00000000
[14:58:59.455]    __FlashOp=0x00000000
[14:58:59.455]    __Result=0x00000000
[14:58:59.455]  </debugvars>
[14:58:59.455]  
[14:58:59.455]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:58:59.455]    <block atomic="false" info="">
[14:58:59.455]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:58:59.455]        // -> [isSWJ <= 0x00000001]
[14:58:59.455]      __var hasDormant = __protocol & 0x00020000;
[14:58:59.455]        // -> [hasDormant <= 0x00000000]
[14:58:59.455]      __var protType   = __protocol & 0x0000FFFF;
[14:58:59.455]        // -> [protType <= 0x00000002]
[14:58:59.455]    </block>
[14:58:59.455]    <control if="protType == 1" while="" timeout="0" info="">
[14:58:59.455]      // if-block "protType == 1"
[14:58:59.455]        // =>  FALSE
[14:58:59.455]      // skip if-block "protType == 1"
[14:58:59.455]    </control>
[14:58:59.455]    <control if="protType == 2" while="" timeout="0" info="">
[14:58:59.455]      // if-block "protType == 2"
[14:58:59.455]        // =>  TRUE
[14:58:59.455]      <control if="isSWJ" while="" timeout="0" info="">
[14:58:59.455]        // if-block "isSWJ"
[14:58:59.455]          // =>  TRUE
[14:58:59.455]        <control if="hasDormant" while="" timeout="0" info="">
[14:58:59.455]          // if-block "hasDormant"
[14:58:59.455]            // =>  FALSE
[14:58:59.455]          // skip if-block "hasDormant"
[14:58:59.455]        </control>
[14:58:59.455]        <control if="!hasDormant" while="" timeout="0" info="">
[14:58:59.455]          // if-block "!hasDormant"
[14:58:59.455]            // =>  TRUE
[14:58:59.455]          <block atomic="false" info="">
[14:58:59.455]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:58:59.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:59.455]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:58:59.455]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:58:59.455]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:58:59.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:59.466]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:58:59.466]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:58:59.466]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:58:59.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:58:59.466]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:58:59.466]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:58:59.466]          </block>
[14:58:59.466]          // end if-block "!hasDormant"
[14:58:59.466]        </control>
[14:58:59.466]        // end if-block "isSWJ"
[14:58:59.466]      </control>
[14:58:59.466]      <control if="!isSWJ" while="" timeout="0" info="">
[14:58:59.466]        // if-block "!isSWJ"
[14:58:59.466]          // =>  FALSE
[14:58:59.466]        // skip if-block "!isSWJ"
[14:58:59.475]      </control>
[14:58:59.475]      <block atomic="false" info="">
[14:58:59.475]        ReadDP(0x0);
[14:58:59.485]  
[14:58:59.485]  !!! E310 : Debug access failed - cannot read DP register 0x00
[14:58:59.485]  
[14:58:59.485]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:58:59.485]      </block>
[14:58:59.485]      // end if-block "protType == 2"
[14:58:59.485]    </control>
[14:58:59.485]  </sequence>
[14:58:59.485]  
