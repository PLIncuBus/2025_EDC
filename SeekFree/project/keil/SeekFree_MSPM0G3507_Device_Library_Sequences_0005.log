/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0005.log
 *  Created     : 20:58:04 (22/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[20:58:04.296]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:58:04.296]  
[20:58:04.296]  <debugvars>
[20:58:04.297]    // Pre-defined
[20:58:04.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:58:04.297]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:58:04.297]    __dp=0x00000000
[20:58:04.297]    __ap=0x00000000
[20:58:04.297]    __traceout=0x00000000      (Trace Disabled)
[20:58:04.298]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:58:04.298]    __FlashAddr=0x00000000
[20:58:04.298]    __FlashLen=0x00000000
[20:58:04.298]    __FlashArg=0x00000000
[20:58:04.298]    __FlashOp=0x00000000
[20:58:04.299]    __Result=0x00000000
[20:58:04.299]  </debugvars>
[20:58:04.299]  
[20:58:04.300]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:58:04.300]    <block atomic="false" info="">
[20:58:04.300]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:58:04.300]        // -> [isSWJ <= 0x00000001]
[20:58:04.300]      __var hasDormant = __protocol & 0x00020000;
[20:58:04.300]        // -> [hasDormant <= 0x00000000]
[20:58:04.300]      __var protType   = __protocol & 0x0000FFFF;
[20:58:04.300]        // -> [protType <= 0x00000002]
[20:58:04.300]    </block>
[20:58:04.301]    <control if="protType == 1" while="" timeout="0" info="">
[20:58:04.301]      // if-block "protType == 1"
[20:58:04.301]        // =>  FALSE
[20:58:04.301]      // skip if-block "protType == 1"
[20:58:04.301]    </control>
[20:58:04.301]    <control if="protType == 2" while="" timeout="0" info="">
[20:58:04.301]      // if-block "protType == 2"
[20:58:04.301]        // =>  TRUE
[20:58:04.301]      <control if="isSWJ" while="" timeout="0" info="">
[20:58:04.302]        // if-block "isSWJ"
[20:58:04.302]          // =>  TRUE
[20:58:04.302]        <control if="hasDormant" while="" timeout="0" info="">
[20:58:04.302]          // if-block "hasDormant"
[20:58:04.302]            // =>  FALSE
[20:58:04.302]          // skip if-block "hasDormant"
[20:58:04.302]        </control>
[20:58:04.302]        <control if="!hasDormant" while="" timeout="0" info="">
[20:58:04.302]          // if-block "!hasDormant"
[20:58:04.302]            // =>  TRUE
[20:58:04.302]          <block atomic="false" info="">
[20:58:04.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:58:04.302]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:58:04.303]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:58:04.303]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:58:04.304]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:58:04.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:58:04.304]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:58:04.304]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:58:04.304]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:58:04.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:58:04.304]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:58:04.304]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:58:04.304]          </block>
[20:58:04.306]          // end if-block "!hasDormant"
[20:58:04.306]        </control>
[20:58:04.306]        // end if-block "isSWJ"
[20:58:04.306]      </control>
[20:58:04.306]      <control if="!isSWJ" while="" timeout="0" info="">
[20:58:04.306]        // if-block "!isSWJ"
[20:58:04.306]          // =>  FALSE
[20:58:04.306]        // skip if-block "!isSWJ"
[20:58:04.306]      </control>
[20:58:04.306]      <block atomic="false" info="">
[20:58:04.307]        ReadDP(0x0);
[20:58:04.307]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:58:04.307]      </block>
[20:58:04.307]      // end if-block "protType == 2"
[20:58:04.307]    </control>
[20:58:04.307]  </sequence>
[20:58:04.307]  
[20:58:04.308]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:58:04.308]  
[20:58:04.308]  <debugvars>
[20:58:04.308]    // Pre-defined
[20:58:04.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:58:04.309]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:58:04.309]    __dp=0x00000000
[20:58:04.309]    __ap=0x00000000
[20:58:04.309]    __traceout=0x00000000      (Trace Disabled)
[20:58:04.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:58:04.309]    __FlashAddr=0x00000000
[20:58:04.309]    __FlashLen=0x00000000
[20:58:04.309]    __FlashArg=0x00000000
[20:58:04.309]    __FlashOp=0x00000000
[20:58:04.310]    __Result=0x00000000
[20:58:04.310]  </debugvars>
[20:58:04.310]  
[20:58:04.310]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:58:04.310]    <block atomic="false" info="">
[20:58:04.310]      __var SW_DP_ABORT       = 0x0;
[20:58:04.310]        // -> [SW_DP_ABORT <= 0x00000000]
[20:58:04.310]      __var DP_CTRL_STAT      = 0x4;
[20:58:04.310]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:58:04.310]      __var DP_SELECT         = 0x8;
[20:58:04.311]        // -> [DP_SELECT <= 0x00000008]
[20:58:04.311]      __var powered_down      = 0;
[20:58:04.311]        // -> [powered_down <= 0x00000000]
[20:58:04.311]      WriteDP(DP_SELECT, 0x00000000);
[20:58:04.311]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:58:04.311]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:58:04.311]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[20:58:04.312]        // -> [powered_down <= 0x00000000]
[20:58:04.312]    </block>
[20:58:04.312]    <control if="powered_down" while="" timeout="0" info="">
[20:58:04.312]      // if-block "powered_down"
[20:58:04.312]        // =>  FALSE
[20:58:04.312]      // skip if-block "powered_down"
[20:58:04.312]    </control>
[20:58:04.312]    <block atomic="false" info="">
[20:58:04.313]      __var DEBUG_PORT_VAL    = 0;
[20:58:04.313]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:58:04.313]      __var ACCESS_POINT_VAL  = 0;
[20:58:04.313]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:58:04.314]      __ap = 1; 
[20:58:04.314]        // -> [__ap <= 0x00000001]
[20:58:04.314]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:58:04.315]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:58:04.315]      __ap = 4;
[20:58:04.315]        // -> [__ap <= 0x00000004]
[20:58:04.315]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:58:04.317]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[20:58:04.317]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[20:58:04.317]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:58:04.317]    </block>
[20:58:04.317]    <block atomic="false" info="">
[20:58:04.317]      __var nReset = 0x80;
[20:58:04.317]        // -> [nReset <= 0x00000080]
[20:58:04.318]      __var canReadPins = 0;
[20:58:04.318]        // -> [canReadPins <= 0x00000000]
[20:58:04.318]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:58:04.318]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:58:04.319]        // -> [canReadPins <= 0x00000001]
[20:58:04.319]    </block>
[20:58:04.319]    <control if="" while="1" timeout="200" info="">
[20:58:04.319]      // while "1"  (timeout="200")
[20:58:04.319]      // while-condition  =>  TRUE
[20:58:04.319]      // while "1"  (timeout="200")
[20:58:04.319]      // while-condition  =>  TRUE
[20:58:04.319]      // while "1"  (timeout="200")
[20:58:04.319]      // while-condition  =>  TRUE
[20:58:04.319]      // while "1"  (timeout="200")
[20:58:04.320]      // while-condition  =>  TRUE
[20:58:04.320]      // while "1"  (timeout="200")
[20:58:04.320]      // while-condition  =>  TRUE
[20:58:04.320]      // while "1"  (timeout="200")
[20:58:04.320]      // while-condition  =>  TRUE
[20:58:04.320]      // while "1"  (timeout="200")
[20:58:04.320]      // while-condition  =>  TRUE
[20:58:04.320]      // while "1"  (timeout="200")
[20:58:04.320]      // while-condition  =>  TRUE
[20:58:04.321]      // while "1"  (timeout="200")
[20:58:04.321]      // while-condition  =>  TRUE
[20:58:04.321]      // while "1"  (timeout="200")
[20:58:04.321]      // while-condition  =>  TRUE
[20:58:04.321]      // while "1"  (timeout="200")
[20:58:04.321]      // while-condition  =>  TRUE
[20:58:04.321]      // while "1"  (timeout="200")
[20:58:04.321]      // while-condition  =>  TRUE
[20:58:04.321]      // while "1"  (timeout="200")
[20:58:04.321]      // while-condition  =>  TRUE
[20:58:04.321]      // while "1"  (timeout="200")
[20:58:04.322]      // while-condition  =>  TRUE
[20:58:04.322]      // while "1"  (timeout="200")
[20:58:04.322]      // while-condition  =>  TRUE
[20:58:04.323]      // while "1"  (timeout="200")
[20:58:04.323]      // while-condition  =>  TRUE
[20:58:04.323]      // while "1"  (timeout="200")
[20:58:04.323]      // while-condition  =>  TRUE
[20:58:04.323]      // while "1"  (timeout="200")
[20:58:04.323]      // while-condition  =>  TRUE
[20:58:04.323]      // while "1"  (timeout="200")
[20:58:04.323]      // while-condition  =>  TRUE
[20:58:04.323]      // while "1"  (timeout="200")
[20:58:04.324]      // while-condition  =>  TRUE
[20:58:04.324]      // while "1"  (timeout="200")
[20:58:04.324]      // while-condition  =>  TRUE
[20:58:04.324]      // while "1"  (timeout="200")
[20:58:04.324]      // while-condition  =>  TRUE
[20:58:04.325]      // while "1"  (timeout="200")
[20:58:04.325]      // while-condition  =>  TRUE
[20:58:04.325]      // while "1"  (timeout="200")
[20:58:04.325]      // while-condition  =>  TRUE
[20:58:04.325]      // while "1"  (timeout="200")
[20:58:04.325]      // while-condition  =>  TRUE
[20:58:04.325]      // while "1"  (timeout="200")
[20:58:04.325]      // while-condition  =>  TRUE
[20:58:04.325]      // while "1"  (timeout="200")
[20:58:04.326]      // while-condition  =>  TRUE
[20:58:04.326]      // while "1"  (timeout="200")
[20:58:04.326]      // while-condition  =>  TRUE
[20:58:04.326]      // while "1"  (timeout="200")
[20:58:04.326]      // while-condition  =>  TRUE
[20:58:04.326]      // while "1"  (timeout="200")
[20:58:04.326]      // while-condition  =>  TRUE
[20:58:04.326]      // while "1"  (timeout="200")
[20:58:04.326]      // while-condition  =>  TRUE
[20:58:04.326]      // while "1"  (timeout="200")
[20:58:04.326]      // while-condition  =>  TRUE
[20:58:04.327]      // while "1"  (timeout="200")
[20:58:04.327]      // while-condition  =>  TRUE
[20:58:04.327]      // while "1"  (timeout="200")
[20:58:04.327]      // while-condition  =>  TRUE
[20:58:04.327]      // while "1"  (timeout="200")
[20:58:04.327]      // while-condition  =>  TRUE
[20:58:04.327]      // while "1"  (timeout="200")
[20:58:04.328]      // while-condition  =>  TRUE
[20:58:04.328]      // while "1"  (timeout="200")
[20:58:04.328]      // while-condition  =>  TRUE
[20:58:04.328]      // while "1"  (timeout="200")
[20:58:04.328]      // while-condition  =>  TRUE
[20:58:04.328]      // while "1"  (timeout="200")
[20:58:04.328]      // while-condition  =>  TRUE
[20:58:04.328]      // while "1"  (timeout="200")
[20:58:04.328]      // while-condition  =>  TRUE
[20:58:04.328]      // while "1"  (timeout="200")
[20:58:04.329]      // while-condition  =>  TRUE
[20:58:04.329]      // while "1"  (timeout="200")
[20:58:04.329]      // while-condition  =>  TRUE
[20:58:04.329]      // while "1"  (timeout="200")
[20:58:04.330]      // while-condition  =>  TRUE
[20:58:04.330]      // while "1"  (timeout="200")
[20:58:04.330]      // while-condition  =>  TRUE
[20:58:04.330]      // while "1"  (timeout="200")
[20:58:04.330]      // while-condition  =>  TRUE
[20:58:04.330]      // while "1"  (timeout="200")
[20:58:04.330]      // while-condition  =>  TRUE
[20:58:04.330]      // while "1"  (timeout="200")
[20:58:04.331]      // while-condition  =>  TRUE
[20:58:04.331]      // while "1"  (timeout="200")
[20:58:04.331]      // while-condition  =>  TRUE
[20:58:04.331]      // while "1"  (timeout="200")
[20:58:04.331]      // while-condition  =>  TRUE
[20:58:04.331]      // while "1"  (timeout="200")
[20:58:04.331]      // while-condition  =>  TRUE
[20:58:04.331]      // while "1"  (timeout="200")
[20:58:04.331]      // while-condition  =>  TRUE
[20:58:04.331]      // while "1"  (timeout="200")
[20:58:04.331]      // while-condition  =>  TRUE
[20:58:04.331]      // while "1"  (timeout="200")
[20:58:04.331]      // while-condition  =>  TRUE
[20:58:04.331]      // while "1"  (timeout="200")
[20:58:04.332]      // while-condition  =>  TRUE
[20:58:04.332]      // while "1"  (timeout="200")
[20:58:04.332]      // while  =>  TIMEOUT
[20:58:04.332]      // end while "1"
[20:58:04.332]    </control>
[20:58:04.332]    <control if="canReadPins" while="" timeout="0" info="">
[20:58:04.332]      // if-block "canReadPins"
[20:58:04.332]        // =>  TRUE
[20:58:04.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:58:04.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:58:04.333]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:58:04.334]        // while-condition  =>  FALSE
[20:58:04.334]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:58:04.334]      </control>
[20:58:04.334]      // end if-block "canReadPins"
[20:58:04.334]    </control>
[20:58:04.334]    <control if="!canReadPins" while="" timeout="0" info="">
[20:58:04.334]      // if-block "!canReadPins"
[20:58:04.334]        // =>  FALSE
[20:58:04.334]      // skip if-block "!canReadPins"
[20:58:04.334]    </control>
[20:58:04.334]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:58:04.334]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:58:04.334]        // =>  FALSE
[20:58:04.334]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:58:04.336]    </control>
[20:58:04.336]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:58:04.336]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:58:04.336]        // =>  TRUE
[20:58:04.336]      <block atomic="false" info="">
[20:58:04.336]        WriteAP(0xF0, 0x01);
[20:58:04.337]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:58:04.337]        WriteAP(0x00, 0xF90008);
[20:58:04.338]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[20:58:04.338]        WriteAP(0xF0, 0x01);
[20:58:04.340]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:58:04.340]      </block>
[20:58:04.340]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:58:04.340]    </control>
[20:58:04.340]    <block atomic="false" info="">
[20:58:04.340]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:58:04.341]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[20:58:04.341]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[20:58:04.341]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:58:04.342]      __ap = 0; //lets make sure we reset the access point selection
[20:58:04.342]        // -> [__ap <= 0x00000000]
[20:58:04.343]    </block>
[20:58:04.343]  </sequence>
[20:58:04.343]  
[20:58:04.348]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:58:04.348]  
[20:58:04.348]  <debugvars>
[20:58:04.349]    // Pre-defined
[20:58:04.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:58:04.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:58:04.349]    __dp=0x00000000
[20:58:04.349]    __ap=0x00000000
[20:58:04.349]    __traceout=0x00000000      (Trace Disabled)
[20:58:04.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:58:04.349]    __FlashAddr=0x00000000
[20:58:04.349]    __FlashLen=0x00000000
[20:58:04.349]    __FlashArg=0x00000000
[20:58:04.349]    __FlashOp=0x00000000
[20:58:04.351]    __Result=0x00000000
[20:58:04.351]  </debugvars>
[20:58:04.351]  
[20:58:04.351]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:58:04.351]    <block atomic="false" info="">
[20:58:04.351]      __var deviceID = 0;
[20:58:04.351]        // -> [deviceID <= 0x00000000]
[20:58:04.352]      __var version = 0;
[20:58:04.352]        // -> [version <= 0x00000000]
[20:58:04.352]      __var partNum = 0;
[20:58:04.352]        // -> [partNum <= 0x00000000]
[20:58:04.352]      __var manuf = 0;
[20:58:04.352]        // -> [manuf <= 0x00000000]
[20:58:04.352]      __var isMSPM0G1X0X_G3X0X = 0;
[20:58:04.352]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:58:04.352]      __var isProduction = 0;
[20:58:04.353]        // -> [isProduction <= 0x00000000]
[20:58:04.353]      __var continueId = 0;
[20:58:04.353]        // -> [continueId <= 0x00000000]
[20:58:04.353]      deviceID =   Read32(0x41C40004);
[20:58:04.355]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:58:04.355]        // -> [deviceID <= 0x2BB8802F]
[20:58:04.355]      version = deviceID >> 28;
[20:58:04.355]        // -> [version <= 0x00000002]
[20:58:04.355]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:58:04.355]        // -> [partNum <= 0x0000BB88]
[20:58:04.355]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:58:04.355]        // -> [manuf <= 0x00000017]
[20:58:04.355]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:58:04.356]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:58:04.356]      isProduction = (version > 0);
[20:58:04.356]        // -> [isProduction <= 0x00000001]
[20:58:04.356]    </block>
[20:58:04.356]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:58:04.356]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:58:04.356]        // =>  FALSE
[20:58:04.356]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:58:04.357]    </control>
[20:58:04.357]    <control if="continueId == 4" while="" timeout="0" info="">
[20:58:04.357]      // if-block "continueId == 4"
[20:58:04.357]        // =>  FALSE
[20:58:04.357]      // skip if-block "continueId == 4"
[20:58:04.357]    </control>
[20:58:04.357]    <control if="!isProduction" while="" timeout="0" info="">
[20:58:04.357]      // if-block "!isProduction"
[20:58:04.358]        // =>  FALSE
[20:58:04.358]      // skip if-block "!isProduction"
[20:58:04.358]    </control>
[20:58:04.358]  </sequence>
[20:58:04.358]  
[20:58:57.291]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:58:57.291]  
[20:58:57.301]  <debugvars>
[20:58:57.301]    // Pre-defined
[20:58:57.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:58:57.301]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:58:57.301]    __dp=0x00000000
[20:58:57.302]    __ap=0x00000000
[20:58:57.302]    __traceout=0x00000000      (Trace Disabled)
[20:58:57.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:58:57.302]    __FlashAddr=0x00000000
[20:58:57.302]    __FlashLen=0x00000000
[20:58:57.302]    __FlashArg=0x00000000
[20:58:57.302]    __FlashOp=0x00000000
[20:58:57.302]    __Result=0x00000000
[20:58:57.302]  </debugvars>
[20:58:57.302]  
[20:58:57.302]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:58:57.302]    <block atomic="false" info="">
[20:58:57.302]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:58:57.302]        // -> [isSWJ <= 0x00000001]
[20:58:57.302]      __var hasDormant = __protocol & 0x00020000;
[20:58:57.302]        // -> [hasDormant <= 0x00000000]
[20:58:57.303]      __var protType   = __protocol & 0x0000FFFF;
[20:58:57.303]        // -> [protType <= 0x00000002]
[20:58:57.303]    </block>
[20:58:57.303]    <control if="protType == 1" while="" timeout="0" info="">
[20:58:57.303]      // if-block "protType == 1"
[20:58:57.303]        // =>  FALSE
[20:58:57.303]      // skip if-block "protType == 1"
[20:58:57.303]    </control>
[20:58:57.303]    <control if="protType == 2" while="" timeout="0" info="">
[20:58:57.303]      // if-block "protType == 2"
[20:58:57.304]        // =>  TRUE
[20:58:57.304]      <control if="isSWJ" while="" timeout="0" info="">
[20:58:57.304]        // if-block "isSWJ"
[20:58:57.304]          // =>  TRUE
[20:58:57.304]        <control if="hasDormant" while="" timeout="0" info="">
[20:58:57.304]          // if-block "hasDormant"
[20:58:57.304]            // =>  FALSE
[20:58:57.304]          // skip if-block "hasDormant"
[20:58:57.304]        </control>
[20:58:57.304]        <control if="!hasDormant" while="" timeout="0" info="">
[20:58:57.304]          // if-block "!hasDormant"
[20:58:57.305]            // =>  TRUE
[20:58:57.305]          <block atomic="false" info="">
[20:58:57.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:58:57.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:58:57.305]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:58:57.305]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:58:57.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:58:57.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:58:57.306]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:58:57.307]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:58:57.307]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:58:57.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:58:57.307]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:58:57.308]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:58:57.308]          </block>
[20:58:57.308]          // end if-block "!hasDormant"
[20:58:57.308]        </control>
[20:58:57.308]        // end if-block "isSWJ"
[20:58:57.308]      </control>
[20:58:57.308]      <control if="!isSWJ" while="" timeout="0" info="">
[20:58:57.308]        // if-block "!isSWJ"
[20:58:57.308]          // =>  FALSE
[20:58:57.308]        // skip if-block "!isSWJ"
[20:58:57.308]      </control>
[20:58:57.308]      <block atomic="false" info="">
[20:58:57.309]        ReadDP(0x0);
[20:58:57.309]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:58:57.309]      </block>
[20:58:57.309]      // end if-block "protType == 2"
[20:58:57.309]    </control>
[20:58:57.309]  </sequence>
[20:58:57.309]  
[20:58:57.311]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:58:57.311]  
[20:58:57.311]  <debugvars>
[20:58:57.311]    // Pre-defined
[20:58:57.311]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:58:57.311]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:58:57.311]    __dp=0x00000000
[20:58:57.311]    __ap=0x00000000
[20:58:57.311]    __traceout=0x00000000      (Trace Disabled)
[20:58:57.311]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:58:57.311]    __FlashAddr=0x00000000
[20:58:57.311]    __FlashLen=0x00000000
[20:58:57.312]    __FlashArg=0x00000000
[20:58:57.312]    __FlashOp=0x00000000
[20:58:57.312]    __Result=0x00000000
[20:58:57.312]  </debugvars>
[20:58:57.312]  
[20:58:57.312]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:58:57.312]    <block atomic="false" info="">
[20:58:57.312]      __var SW_DP_ABORT       = 0x0;
[20:58:57.312]        // -> [SW_DP_ABORT <= 0x00000000]
[20:58:57.312]      __var DP_CTRL_STAT      = 0x4;
[20:58:57.312]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:58:57.313]      __var DP_SELECT         = 0x8;
[20:58:57.313]        // -> [DP_SELECT <= 0x00000008]
[20:58:57.313]      __var powered_down      = 0;
[20:58:57.313]        // -> [powered_down <= 0x00000000]
[20:58:57.313]      WriteDP(DP_SELECT, 0x00000000);
[20:58:57.314]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:58:57.314]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:58:57.314]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:58:57.314]        // -> [powered_down <= 0x00000001]
[20:58:57.314]    </block>
[20:58:57.314]    <control if="powered_down" while="" timeout="0" info="">
[20:58:57.314]      // if-block "powered_down"
[20:58:57.314]        // =>  TRUE
[20:58:57.314]      <block atomic="false" info="">
[20:58:57.316]        Message(0, "Debug/System power-up request sent");
[20:58:57.316]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:58:57.316]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:58:57.317]      </block>
[20:58:57.317]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:58:57.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:58:57.317]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:58:57.317]        // while-condition  =>  FALSE
[20:58:57.317]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:58:57.317]      </control>
[20:58:57.318]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:58:57.318]        // if-block "(__protocol & 0xFFFF) == 1"
[20:58:57.318]          // =>  FALSE
[20:58:57.318]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:58:57.318]      </control>
[20:58:57.318]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:58:57.318]        // if-block "(__protocol & 0xFFFF) == 2"
[20:58:57.318]          // =>  TRUE
[20:58:57.318]        <block atomic="false" info="">
[20:58:57.318]          Message(0, "executing SWD power up");
[20:58:57.323]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:58:57.324]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:58:57.324]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:58:57.325]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:58:57.325]        </block>
[20:58:57.325]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:58:57.325]      </control>
[20:58:57.325]      // end if-block "powered_down"
[20:58:57.325]    </control>
[20:58:57.325]    <block atomic="false" info="">
[20:58:57.325]      __var DEBUG_PORT_VAL    = 0;
[20:58:57.325]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:58:57.325]      __var ACCESS_POINT_VAL  = 0;
[20:58:57.325]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:58:57.325]      __ap = 1; 
[20:58:57.326]        // -> [__ap <= 0x00000001]
[20:58:57.326]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:58:57.327]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:58:57.327]      __ap = 4;
[20:58:57.327]        // -> [__ap <= 0x00000004]
[20:58:57.327]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:58:57.329]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:58:57.329]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:58:57.329]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:58:57.331]    </block>
[20:58:57.331]    <block atomic="false" info="">
[20:58:57.331]      __var nReset = 0x80;
[20:58:57.331]        // -> [nReset <= 0x00000080]
[20:58:57.331]      __var canReadPins = 0;
[20:58:57.331]        // -> [canReadPins <= 0x00000000]
[20:58:57.331]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:58:57.331]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:58:57.331]        // -> [canReadPins <= 0x00000001]
[20:58:57.331]    </block>
[20:58:57.333]    <control if="" while="1" timeout="200" info="">
[20:58:57.333]      // while "1"  (timeout="200")
[20:58:57.333]      // while-condition  =>  TRUE
[20:58:57.333]      // while "1"  (timeout="200")
[20:58:57.333]      // while-condition  =>  TRUE
[20:58:57.333]      // while "1"  (timeout="200")
[20:58:57.333]      // while-condition  =>  TRUE
[20:58:57.333]      // while "1"  (timeout="200")
[20:58:57.333]      // while-condition  =>  TRUE
[20:58:57.333]      // while "1"  (timeout="200")
[20:58:57.333]      // while-condition  =>  TRUE
[20:58:57.333]      // while "1"  (timeout="200")
[20:58:57.334]      // while-condition  =>  TRUE
[20:58:57.334]      // while "1"  (timeout="200")
[20:58:57.334]      // while-condition  =>  TRUE
[20:58:57.334]      // while "1"  (timeout="200")
[20:58:57.334]      // while-condition  =>  TRUE
[20:58:57.334]      // while "1"  (timeout="200")
[20:58:57.334]      // while-condition  =>  TRUE
[20:58:57.334]      // while "1"  (timeout="200")
[20:58:57.334]      // while-condition  =>  TRUE
[20:58:57.334]      // while "1"  (timeout="200")
[20:58:57.334]      // while-condition  =>  TRUE
[20:58:57.335]      // while "1"  (timeout="200")
[20:58:57.335]      // while-condition  =>  TRUE
[20:58:57.335]      // while "1"  (timeout="200")
[20:58:57.335]      // while-condition  =>  TRUE
[20:58:57.335]      // while "1"  (timeout="200")
[20:58:57.335]      // while-condition  =>  TRUE
[20:58:57.335]      // while "1"  (timeout="200")
[20:58:57.335]      // while-condition  =>  TRUE
[20:58:57.335]      // while "1"  (timeout="200")
[20:58:57.336]      // while-condition  =>  TRUE
[20:58:57.336]      // while "1"  (timeout="200")
[20:58:57.336]      // while-condition  =>  TRUE
[20:58:57.336]      // while "1"  (timeout="200")
[20:58:57.336]      // while-condition  =>  TRUE
[20:58:57.336]      // while "1"  (timeout="200")
[20:58:57.336]      // while-condition  =>  TRUE
[20:58:57.336]      // while "1"  (timeout="200")
[20:58:57.336]      // while-condition  =>  TRUE
[20:58:57.336]      // while "1"  (timeout="200")
[20:58:57.336]      // while-condition  =>  TRUE
[20:58:57.336]      // while "1"  (timeout="200")
[20:58:57.336]      // while-condition  =>  TRUE
[20:58:57.336]      // while "1"  (timeout="200")
[20:58:57.337]      // while-condition  =>  TRUE
[20:58:57.337]      // while "1"  (timeout="200")
[20:58:57.337]      // while-condition  =>  TRUE
[20:58:57.337]      // while "1"  (timeout="200")
[20:58:57.337]      // while-condition  =>  TRUE
[20:58:57.337]      // while "1"  (timeout="200")
[20:58:57.337]      // while-condition  =>  TRUE
[20:58:57.337]      // while "1"  (timeout="200")
[20:58:57.337]      // while-condition  =>  TRUE
[20:58:57.337]      // while "1"  (timeout="200")
[20:58:57.338]      // while-condition  =>  TRUE
[20:58:57.338]      // while "1"  (timeout="200")
[20:58:57.338]      // while-condition  =>  TRUE
[20:58:57.338]      // while "1"  (timeout="200")
[20:58:57.338]      // while-condition  =>  TRUE
[20:58:57.338]      // while "1"  (timeout="200")
[20:58:57.338]      // while-condition  =>  TRUE
[20:58:57.338]      // while "1"  (timeout="200")
[20:58:57.338]      // while-condition  =>  TRUE
[20:58:57.339]      // while "1"  (timeout="200")
[20:58:57.339]      // while-condition  =>  TRUE
[20:58:57.339]      // while "1"  (timeout="200")
[20:58:57.339]      // while-condition  =>  TRUE
[20:58:57.339]      // while "1"  (timeout="200")
[20:58:57.339]      // while-condition  =>  TRUE
[20:58:57.339]      // while "1"  (timeout="200")
[20:58:57.339]      // while-condition  =>  TRUE
[20:58:57.339]      // while "1"  (timeout="200")
[20:58:57.339]      // while-condition  =>  TRUE
[20:58:57.339]      // while "1"  (timeout="200")
[20:58:57.340]      // while-condition  =>  TRUE
[20:58:57.340]      // while "1"  (timeout="200")
[20:58:57.340]      // while-condition  =>  TRUE
[20:58:57.340]      // while "1"  (timeout="200")
[20:58:57.340]      // while-condition  =>  TRUE
[20:58:57.340]      // while "1"  (timeout="200")
[20:58:57.340]      // while-condition  =>  TRUE
[20:58:57.340]      // while "1"  (timeout="200")
[20:58:57.340]      // while-condition  =>  TRUE
[20:58:57.340]      // while "1"  (timeout="200")
[20:58:57.340]      // while-condition  =>  TRUE
[20:58:57.341]      // while "1"  (timeout="200")
[20:58:57.341]      // while-condition  =>  TRUE
[20:58:57.341]      // while "1"  (timeout="200")
[20:58:57.341]      // while-condition  =>  TRUE
[20:58:57.341]      // while "1"  (timeout="200")
[20:58:57.341]      // while-condition  =>  TRUE
[20:58:57.341]      // while "1"  (timeout="200")
[20:58:57.341]      // while-condition  =>  TRUE
[20:58:57.341]      // while "1"  (timeout="200")
[20:58:57.341]      // while-condition  =>  TRUE
[20:58:57.341]      // while "1"  (timeout="200")
[20:58:57.341]      // while-condition  =>  TRUE
[20:58:57.341]      // while "1"  (timeout="200")
[20:58:57.343]      // while-condition  =>  TRUE
[20:58:57.343]      // while "1"  (timeout="200")
[20:58:57.343]      // while-condition  =>  TRUE
[20:58:57.343]      // while "1"  (timeout="200")
[20:58:57.343]      // while-condition  =>  TRUE
[20:58:57.343]      // while "1"  (timeout="200")
[20:58:57.343]      // while-condition  =>  TRUE
[20:58:57.343]      // while "1"  (timeout="200")
[20:58:57.343]      // while-condition  =>  TRUE
[20:58:57.343]      // while "1"  (timeout="200")
[20:58:57.343]      // while-condition  =>  TRUE
[20:58:57.343]      // while "1"  (timeout="200")
[20:58:57.344]      // while-condition  =>  TRUE
[20:58:57.344]      // while "1"  (timeout="200")
[20:58:57.344]      // while-condition  =>  TRUE
[20:58:57.344]      // while "1"  (timeout="200")
[20:58:57.344]      // while-condition  =>  TRUE
[20:58:57.344]      // while "1"  (timeout="200")
[20:58:57.344]      // while-condition  =>  TRUE
[20:58:57.345]      // while "1"  (timeout="200")
[20:58:57.345]      // while-condition  =>  TRUE
[20:58:57.345]      // while "1"  (timeout="200")
[20:58:57.345]      // while-condition  =>  TRUE
[20:58:57.345]      // while "1"  (timeout="200")
[20:58:57.345]      // while-condition  =>  TRUE
[20:58:57.345]      // while "1"  (timeout="200")
[20:58:57.345]      // while-condition  =>  TRUE
[20:58:57.345]      // while "1"  (timeout="200")
[20:58:57.346]      // while-condition  =>  TRUE
[20:58:57.346]      // while "1"  (timeout="200")
[20:58:57.346]      // while-condition  =>  TRUE
[20:58:57.346]      // while "1"  (timeout="200")
[20:58:57.346]      // while-condition  =>  TRUE
[20:58:57.346]      // while "1"  (timeout="200")
[20:58:57.346]      // while-condition  =>  TRUE
[20:58:57.346]      // while "1"  (timeout="200")
[20:58:57.346]      // while-condition  =>  TRUE
[20:58:57.346]      // while "1"  (timeout="200")
[20:58:57.346]      // while-condition  =>  TRUE
[20:58:57.346]      // while "1"  (timeout="200")
[20:58:57.347]      // while-condition  =>  TRUE
[20:58:57.347]      // while "1"  (timeout="200")
[20:58:57.347]      // while-condition  =>  TRUE
[20:58:57.347]      // while "1"  (timeout="200")
[20:58:57.347]      // while-condition  =>  TRUE
[20:58:57.347]      // while "1"  (timeout="200")
[20:58:57.347]      // while-condition  =>  TRUE
[20:58:57.347]      // while "1"  (timeout="200")
[20:58:57.347]      // while-condition  =>  TRUE
[20:58:57.347]      // while "1"  (timeout="200")
[20:58:57.347]      // while-condition  =>  TRUE
[20:58:57.348]      // while "1"  (timeout="200")
[20:58:57.348]      // while  =>  TIMEOUT
[20:58:57.348]      // end while "1"
[20:58:57.348]    </control>
[20:58:57.348]    <control if="canReadPins" while="" timeout="0" info="">
[20:58:57.348]      // if-block "canReadPins"
[20:58:57.348]        // =>  TRUE
[20:58:57.348]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:58:57.348]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:58:57.349]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:58:57.349]        // while-condition  =>  FALSE
[20:58:57.349]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:58:57.349]      </control>
[20:58:57.349]      // end if-block "canReadPins"
[20:58:57.349]    </control>
[20:58:57.349]    <control if="!canReadPins" while="" timeout="0" info="">
[20:58:57.349]      // if-block "!canReadPins"
[20:58:57.350]        // =>  FALSE
[20:58:57.350]      // skip if-block "!canReadPins"
[20:58:57.350]    </control>
[20:58:57.350]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:58:57.350]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:58:57.350]        // =>  TRUE
[20:58:57.350]      <block atomic="false" info="">
[20:58:57.350]        WriteAP(0x00, 0x190008);
[20:58:57.351]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:58:57.351]        WriteAP(0xF0, 0x01);
[20:58:57.352]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:58:57.352]      </block>
[20:58:57.352]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:58:57.352]    </control>
[20:58:57.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:58:57.353]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:58:57.353]        // =>  FALSE
[20:58:57.353]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:58:57.353]    </control>
[20:58:57.353]    <block atomic="false" info="">
[20:58:57.353]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:58:57.354]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:58:57.354]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:58:57.354]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:58:57.356]      __ap = 0; //lets make sure we reset the access point selection
[20:58:57.356]        // -> [__ap <= 0x00000000]
[20:58:57.357]    </block>
[20:58:57.357]  </sequence>
[20:58:57.357]  
[20:58:57.363]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:58:57.363]  
[20:58:57.363]  <debugvars>
[20:58:57.363]    // Pre-defined
[20:58:57.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:58:57.363]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:58:57.364]    __dp=0x00000000
[20:58:57.364]    __ap=0x00000000
[20:58:57.364]    __traceout=0x00000000      (Trace Disabled)
[20:58:57.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:58:57.364]    __FlashAddr=0x00000000
[20:58:57.364]    __FlashLen=0x00000000
[20:58:57.364]    __FlashArg=0x00000000
[20:58:57.364]    __FlashOp=0x00000000
[20:58:57.365]    __Result=0x00000000
[20:58:57.365]  </debugvars>
[20:58:57.365]  
[20:58:57.365]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:58:57.365]    <block atomic="false" info="">
[20:58:57.365]      __var deviceID = 0;
[20:58:57.365]        // -> [deviceID <= 0x00000000]
[20:58:57.365]      __var version = 0;
[20:58:57.365]        // -> [version <= 0x00000000]
[20:58:57.365]      __var partNum = 0;
[20:58:57.365]        // -> [partNum <= 0x00000000]
[20:58:57.365]      __var manuf = 0;
[20:58:57.366]        // -> [manuf <= 0x00000000]
[20:58:57.366]      __var isMSPM0G1X0X_G3X0X = 0;
[20:58:57.366]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:58:57.366]      __var isProduction = 0;
[20:58:57.366]        // -> [isProduction <= 0x00000000]
[20:58:57.366]      __var continueId = 0;
[20:58:57.366]        // -> [continueId <= 0x00000000]
[20:58:57.366]      deviceID =   Read32(0x41C40004);
[20:58:57.368]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:58:57.368]        // -> [deviceID <= 0x2BB8802F]
[20:58:57.368]      version = deviceID >> 28;
[20:58:57.368]        // -> [version <= 0x00000002]
[20:58:57.368]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:58:57.368]        // -> [partNum <= 0x0000BB88]
[20:58:57.368]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:58:57.368]        // -> [manuf <= 0x00000017]
[20:58:57.368]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:58:57.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:58:57.368]      isProduction = (version > 0);
[20:58:57.369]        // -> [isProduction <= 0x00000001]
[20:58:57.369]    </block>
[20:58:57.369]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:58:57.369]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:58:57.369]        // =>  FALSE
[20:58:57.369]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:58:57.369]    </control>
[20:58:57.370]    <control if="continueId == 4" while="" timeout="0" info="">
[20:58:57.370]      // if-block "continueId == 4"
[20:58:57.370]        // =>  FALSE
[20:58:57.370]      // skip if-block "continueId == 4"
[20:58:57.370]    </control>
[20:58:57.370]    <control if="!isProduction" while="" timeout="0" info="">
[20:58:57.370]      // if-block "!isProduction"
[20:58:57.370]        // =>  FALSE
[20:58:57.371]      // skip if-block "!isProduction"
[20:58:57.371]    </control>
[20:58:57.371]  </sequence>
[20:58:57.371]  
[21:01:01.199]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:01:01.199]  
[21:01:01.209]  <debugvars>
[21:01:01.209]    // Pre-defined
[21:01:01.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:01:01.209]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:01:01.209]    __dp=0x00000000
[21:01:01.209]    __ap=0x00000000
[21:01:01.209]    __traceout=0x00000000      (Trace Disabled)
[21:01:01.209]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:01:01.209]    __FlashAddr=0x00000000
[21:01:01.209]    __FlashLen=0x00000000
[21:01:01.210]    __FlashArg=0x00000000
[21:01:01.210]    __FlashOp=0x00000000
[21:01:01.210]    __Result=0x00000000
[21:01:01.210]  </debugvars>
[21:01:01.210]  
[21:01:01.210]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:01:01.210]    <block atomic="false" info="">
[21:01:01.210]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:01:01.211]        // -> [isSWJ <= 0x00000001]
[21:01:01.211]      __var hasDormant = __protocol & 0x00020000;
[21:01:01.211]        // -> [hasDormant <= 0x00000000]
[21:01:01.211]      __var protType   = __protocol & 0x0000FFFF;
[21:01:01.211]        // -> [protType <= 0x00000002]
[21:01:01.211]    </block>
[21:01:01.211]    <control if="protType == 1" while="" timeout="0" info="">
[21:01:01.211]      // if-block "protType == 1"
[21:01:01.211]        // =>  FALSE
[21:01:01.211]      // skip if-block "protType == 1"
[21:01:01.211]    </control>
[21:01:01.212]    <control if="protType == 2" while="" timeout="0" info="">
[21:01:01.212]      // if-block "protType == 2"
[21:01:01.212]        // =>  TRUE
[21:01:01.212]      <control if="isSWJ" while="" timeout="0" info="">
[21:01:01.212]        // if-block "isSWJ"
[21:01:01.212]          // =>  TRUE
[21:01:01.212]        <control if="hasDormant" while="" timeout="0" info="">
[21:01:01.212]          // if-block "hasDormant"
[21:01:01.212]            // =>  FALSE
[21:01:01.212]          // skip if-block "hasDormant"
[21:01:01.212]        </control>
[21:01:01.213]        <control if="!hasDormant" while="" timeout="0" info="">
[21:01:01.213]          // if-block "!hasDormant"
[21:01:01.213]            // =>  TRUE
[21:01:01.213]          <block atomic="false" info="">
[21:01:01.213]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:01:01.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:01:01.214]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:01:01.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:01:01.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:01:01.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:01:01.214]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:01:01.215]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:01:01.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:01:01.215]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:01:01.215]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:01:01.215]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:01:01.215]          </block>
[21:01:01.216]          // end if-block "!hasDormant"
[21:01:01.216]        </control>
[21:01:01.216]        // end if-block "isSWJ"
[21:01:01.216]      </control>
[21:01:01.216]      <control if="!isSWJ" while="" timeout="0" info="">
[21:01:01.216]        // if-block "!isSWJ"
[21:01:01.216]          // =>  FALSE
[21:01:01.216]        // skip if-block "!isSWJ"
[21:01:01.216]      </control>
[21:01:01.216]      <block atomic="false" info="">
[21:01:01.216]        ReadDP(0x0);
[21:01:01.217]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:01:01.217]      </block>
[21:01:01.217]      // end if-block "protType == 2"
[21:01:01.217]    </control>
[21:01:01.217]  </sequence>
[21:01:01.217]  
[21:01:01.218]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:01:01.218]  
[21:01:01.218]  <debugvars>
[21:01:01.218]    // Pre-defined
[21:01:01.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:01:01.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:01:01.218]    __dp=0x00000000
[21:01:01.218]    __ap=0x00000000
[21:01:01.218]    __traceout=0x00000000      (Trace Disabled)
[21:01:01.219]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:01:01.219]    __FlashAddr=0x00000000
[21:01:01.219]    __FlashLen=0x00000000
[21:01:01.219]    __FlashArg=0x00000000
[21:01:01.219]    __FlashOp=0x00000000
[21:01:01.219]    __Result=0x00000000
[21:01:01.219]  </debugvars>
[21:01:01.219]  
[21:01:01.219]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:01:01.219]    <block atomic="false" info="">
[21:01:01.219]      __var SW_DP_ABORT       = 0x0;
[21:01:01.219]        // -> [SW_DP_ABORT <= 0x00000000]
[21:01:01.220]      __var DP_CTRL_STAT      = 0x4;
[21:01:01.220]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:01:01.220]      __var DP_SELECT         = 0x8;
[21:01:01.221]        // -> [DP_SELECT <= 0x00000008]
[21:01:01.221]      __var powered_down      = 0;
[21:01:01.221]        // -> [powered_down <= 0x00000000]
[21:01:01.221]      WriteDP(DP_SELECT, 0x00000000);
[21:01:01.221]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:01:01.221]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:01:01.222]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:01:01.222]        // -> [powered_down <= 0x00000001]
[21:01:01.222]    </block>
[21:01:01.222]    <control if="powered_down" while="" timeout="0" info="">
[21:01:01.222]      // if-block "powered_down"
[21:01:01.222]        // =>  TRUE
[21:01:01.222]      <block atomic="false" info="">
[21:01:01.222]        Message(0, "Debug/System power-up request sent");
[21:01:01.228]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:01:01.229]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:01:01.229]      </block>
[21:01:01.229]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:01:01.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:01:01.229]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:01:01.230]        // while-condition  =>  FALSE
[21:01:01.230]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:01:01.230]      </control>
[21:01:01.230]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:01:01.230]        // if-block "(__protocol & 0xFFFF) == 1"
[21:01:01.230]          // =>  FALSE
[21:01:01.230]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:01:01.230]      </control>
[21:01:01.230]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:01:01.230]        // if-block "(__protocol & 0xFFFF) == 2"
[21:01:01.230]          // =>  TRUE
[21:01:01.230]        <block atomic="false" info="">
[21:01:01.230]          Message(0, "executing SWD power up");
[21:01:01.232]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:01:01.232]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:01:01.232]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:01:01.232]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:01:01.234]        </block>
[21:01:01.234]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:01:01.234]      </control>
[21:01:01.234]      // end if-block "powered_down"
[21:01:01.234]    </control>
[21:01:01.234]    <block atomic="false" info="">
[21:01:01.234]      __var DEBUG_PORT_VAL    = 0;
[21:01:01.234]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:01:01.234]      __var ACCESS_POINT_VAL  = 0;
[21:01:01.234]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:01:01.234]      __ap = 1; 
[21:01:01.234]        // -> [__ap <= 0x00000001]
[21:01:01.235]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:01:01.236]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:01:01.236]      __ap = 4;
[21:01:01.236]        // -> [__ap <= 0x00000004]
[21:01:01.236]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:01:01.237]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:01:01.237]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:01:01.237]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:01:01.239]    </block>
[21:01:01.239]    <block atomic="false" info="">
[21:01:01.239]      __var nReset = 0x80;
[21:01:01.239]        // -> [nReset <= 0x00000080]
[21:01:01.239]      __var canReadPins = 0;
[21:01:01.239]        // -> [canReadPins <= 0x00000000]
[21:01:01.239]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:01:01.240]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:01:01.240]        // -> [canReadPins <= 0x00000001]
[21:01:01.240]    </block>
[21:01:01.240]    <control if="" while="1" timeout="200" info="">
[21:01:01.240]      // while "1"  (timeout="200")
[21:01:01.240]      // while-condition  =>  TRUE
[21:01:01.240]      // while "1"  (timeout="200")
[21:01:01.240]      // while-condition  =>  TRUE
[21:01:01.241]      // while "1"  (timeout="200")
[21:01:01.241]      // while-condition  =>  TRUE
[21:01:01.241]      // while "1"  (timeout="200")
[21:01:01.241]      // while-condition  =>  TRUE
[21:01:01.241]      // while "1"  (timeout="200")
[21:01:01.241]      // while-condition  =>  TRUE
[21:01:01.241]      // while "1"  (timeout="200")
[21:01:01.241]      // while-condition  =>  TRUE
[21:01:01.241]      // while "1"  (timeout="200")
[21:01:01.241]      // while-condition  =>  TRUE
[21:01:01.241]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.242]      // while "1"  (timeout="200")
[21:01:01.242]      // while-condition  =>  TRUE
[21:01:01.244]      // while "1"  (timeout="200")
[21:01:01.244]      // while-condition  =>  TRUE
[21:01:01.244]      // while "1"  (timeout="200")
[21:01:01.244]      // while-condition  =>  TRUE
[21:01:01.244]      // while "1"  (timeout="200")
[21:01:01.244]      // while-condition  =>  TRUE
[21:01:01.244]      // while "1"  (timeout="200")
[21:01:01.244]      // while-condition  =>  TRUE
[21:01:01.244]      // while "1"  (timeout="200")
[21:01:01.244]      // while-condition  =>  TRUE
[21:01:01.244]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.245]      // while-condition  =>  TRUE
[21:01:01.245]      // while "1"  (timeout="200")
[21:01:01.246]      // while-condition  =>  TRUE
[21:01:01.246]      // while "1"  (timeout="200")
[21:01:01.246]      // while-condition  =>  TRUE
[21:01:01.246]      // while "1"  (timeout="200")
[21:01:01.246]      // while-condition  =>  TRUE
[21:01:01.246]      // while "1"  (timeout="200")
[21:01:01.246]      // while-condition  =>  TRUE
[21:01:01.246]      // while "1"  (timeout="200")
[21:01:01.246]      // while-condition  =>  TRUE
[21:01:01.246]      // while "1"  (timeout="200")
[21:01:01.246]      // while-condition  =>  TRUE
[21:01:01.246]      // while "1"  (timeout="200")
[21:01:01.248]      // while-condition  =>  TRUE
[21:01:01.248]      // while "1"  (timeout="200")
[21:01:01.248]      // while-condition  =>  TRUE
[21:01:01.248]      // while "1"  (timeout="200")
[21:01:01.248]      // while-condition  =>  TRUE
[21:01:01.248]      // while "1"  (timeout="200")
[21:01:01.248]      // while-condition  =>  TRUE
[21:01:01.248]      // while "1"  (timeout="200")
[21:01:01.248]      // while-condition  =>  TRUE
[21:01:01.248]      // while "1"  (timeout="200")
[21:01:01.248]      // while-condition  =>  TRUE
[21:01:01.249]      // while "1"  (timeout="200")
[21:01:01.249]      // while-condition  =>  TRUE
[21:01:01.249]      // while "1"  (timeout="200")
[21:01:01.249]      // while-condition  =>  TRUE
[21:01:01.249]      // while "1"  (timeout="200")
[21:01:01.249]      // while-condition  =>  TRUE
[21:01:01.249]      // while "1"  (timeout="200")
[21:01:01.249]      // while-condition  =>  TRUE
[21:01:01.249]      // while "1"  (timeout="200")
[21:01:01.250]      // while-condition  =>  TRUE
[21:01:01.250]      // while "1"  (timeout="200")
[21:01:01.250]      // while-condition  =>  TRUE
[21:01:01.250]      // while "1"  (timeout="200")
[21:01:01.250]      // while-condition  =>  TRUE
[21:01:01.250]      // while "1"  (timeout="200")
[21:01:01.250]      // while-condition  =>  TRUE
[21:01:01.250]      // while "1"  (timeout="200")
[21:01:01.250]      // while-condition  =>  TRUE
[21:01:01.251]      // while "1"  (timeout="200")
[21:01:01.251]      // while-condition  =>  TRUE
[21:01:01.251]      // while "1"  (timeout="200")
[21:01:01.251]      // while-condition  =>  TRUE
[21:01:01.251]      // while "1"  (timeout="200")
[21:01:01.251]      // while-condition  =>  TRUE
[21:01:01.251]      // while "1"  (timeout="200")
[21:01:01.251]      // while-condition  =>  TRUE
[21:01:01.251]      // while "1"  (timeout="200")
[21:01:01.251]      // while-condition  =>  TRUE
[21:01:01.251]      // while "1"  (timeout="200")
[21:01:01.252]      // while-condition  =>  TRUE
[21:01:01.252]      // while "1"  (timeout="200")
[21:01:01.252]      // while-condition  =>  TRUE
[21:01:01.252]      // while "1"  (timeout="200")
[21:01:01.252]      // while-condition  =>  TRUE
[21:01:01.252]      // while "1"  (timeout="200")
[21:01:01.252]      // while-condition  =>  TRUE
[21:01:01.252]      // while "1"  (timeout="200")
[21:01:01.252]      // while-condition  =>  TRUE
[21:01:01.252]      // while "1"  (timeout="200")
[21:01:01.253]      // while-condition  =>  TRUE
[21:01:01.253]      // while "1"  (timeout="200")
[21:01:01.253]      // while-condition  =>  TRUE
[21:01:01.253]      // while "1"  (timeout="200")
[21:01:01.253]      // while-condition  =>  TRUE
[21:01:01.253]      // while "1"  (timeout="200")
[21:01:01.253]      // while-condition  =>  TRUE
[21:01:01.253]      // while "1"  (timeout="200")
[21:01:01.254]      // while-condition  =>  TRUE
[21:01:01.254]      // while "1"  (timeout="200")
[21:01:01.254]      // while-condition  =>  TRUE
[21:01:01.254]      // while "1"  (timeout="200")
[21:01:01.254]      // while-condition  =>  TRUE
[21:01:01.254]      // while "1"  (timeout="200")
[21:01:01.254]      // while-condition  =>  TRUE
[21:01:01.254]      // while "1"  (timeout="200")
[21:01:01.255]      // while-condition  =>  TRUE
[21:01:01.255]      // while "1"  (timeout="200")
[21:01:01.255]      // while  =>  TIMEOUT
[21:01:01.255]      // end while "1"
[21:01:01.255]    </control>
[21:01:01.255]    <control if="canReadPins" while="" timeout="0" info="">
[21:01:01.255]      // if-block "canReadPins"
[21:01:01.255]        // =>  TRUE
[21:01:01.255]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:01:01.255]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:01:01.256]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:01:01.256]        // while-condition  =>  FALSE
[21:01:01.256]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:01:01.256]      </control>
[21:01:01.256]      // end if-block "canReadPins"
[21:01:01.256]    </control>
[21:01:01.256]    <control if="!canReadPins" while="" timeout="0" info="">
[21:01:01.256]      // if-block "!canReadPins"
[21:01:01.257]        // =>  FALSE
[21:01:01.257]      // skip if-block "!canReadPins"
[21:01:01.257]    </control>
[21:01:01.257]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:01:01.257]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:01:01.257]        // =>  TRUE
[21:01:01.258]      <block atomic="false" info="">
[21:01:01.258]        WriteAP(0x00, 0x190008);
[21:01:01.258]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:01:01.258]        WriteAP(0xF0, 0x01);
[21:01:01.259]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:01:01.260]      </block>
[21:01:01.260]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:01:01.260]    </control>
[21:01:01.260]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:01:01.260]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:01:01.260]        // =>  FALSE
[21:01:01.260]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:01:01.260]    </control>
[21:01:01.260]    <block atomic="false" info="">
[21:01:01.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:01:01.261]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:01:01.262]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:01:01.262]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:01:01.264]      __ap = 0; //lets make sure we reset the access point selection
[21:01:01.264]        // -> [__ap <= 0x00000000]
[21:01:01.264]    </block>
[21:01:01.264]  </sequence>
[21:01:01.264]  
[21:01:01.271]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:01:01.271]  
[21:01:01.271]  <debugvars>
[21:01:01.271]    // Pre-defined
[21:01:01.271]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:01:01.271]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:01:01.271]    __dp=0x00000000
[21:01:01.271]    __ap=0x00000000
[21:01:01.272]    __traceout=0x00000000      (Trace Disabled)
[21:01:01.272]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:01:01.272]    __FlashAddr=0x00000000
[21:01:01.272]    __FlashLen=0x00000000
[21:01:01.272]    __FlashArg=0x00000000
[21:01:01.272]    __FlashOp=0x00000000
[21:01:01.272]    __Result=0x00000000
[21:01:01.272]  </debugvars>
[21:01:01.272]  
[21:01:01.272]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:01:01.272]    <block atomic="false" info="">
[21:01:01.273]      __var deviceID = 0;
[21:01:01.273]        // -> [deviceID <= 0x00000000]
[21:01:01.273]      __var version = 0;
[21:01:01.273]        // -> [version <= 0x00000000]
[21:01:01.273]      __var partNum = 0;
[21:01:01.273]        // -> [partNum <= 0x00000000]
[21:01:01.273]      __var manuf = 0;
[21:01:01.273]        // -> [manuf <= 0x00000000]
[21:01:01.273]      __var isMSPM0G1X0X_G3X0X = 0;
[21:01:01.273]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:01:01.273]      __var isProduction = 0;
[21:01:01.273]        // -> [isProduction <= 0x00000000]
[21:01:01.273]      __var continueId = 0;
[21:01:01.274]        // -> [continueId <= 0x00000000]
[21:01:01.274]      deviceID =   Read32(0x41C40004);
[21:01:01.276]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:01:01.276]        // -> [deviceID <= 0x2BB8802F]
[21:01:01.276]      version = deviceID >> 28;
[21:01:01.276]        // -> [version <= 0x00000002]
[21:01:01.276]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:01:01.276]        // -> [partNum <= 0x0000BB88]
[21:01:01.276]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:01:01.276]        // -> [manuf <= 0x00000017]
[21:01:01.276]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:01:01.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:01:01.276]      isProduction = (version > 0);
[21:01:01.276]        // -> [isProduction <= 0x00000001]
[21:01:01.276]    </block>
[21:01:01.276]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:01:01.276]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:01:01.277]        // =>  FALSE
[21:01:01.277]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:01:01.278]    </control>
[21:01:01.278]    <control if="continueId == 4" while="" timeout="0" info="">
[21:01:01.278]      // if-block "continueId == 4"
[21:01:01.278]        // =>  FALSE
[21:01:01.278]      // skip if-block "continueId == 4"
[21:01:01.278]    </control>
[21:01:01.279]    <control if="!isProduction" while="" timeout="0" info="">
[21:01:01.279]      // if-block "!isProduction"
[21:01:01.279]        // =>  FALSE
[21:01:01.279]      // skip if-block "!isProduction"
[21:01:01.279]    </control>
[21:01:01.279]  </sequence>
[21:01:01.279]  
[21:01:32.603]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:01:32.603]  
[21:01:32.603]  <debugvars>
[21:01:32.603]    // Pre-defined
[21:01:32.603]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:01:32.603]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:01:32.603]    __dp=0x00000000
[21:01:32.604]    __ap=0x00000000
[21:01:32.604]    __traceout=0x00000000      (Trace Disabled)
[21:01:32.604]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:01:32.604]    __FlashAddr=0x00000000
[21:01:32.604]    __FlashLen=0x00000000
[21:01:32.604]    __FlashArg=0x00000000
[21:01:32.605]    __FlashOp=0x00000000
[21:01:32.605]    __Result=0x00000000
[21:01:32.605]  </debugvars>
[21:01:32.605]  
[21:01:32.605]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:01:32.605]    <block atomic="false" info="">
[21:01:32.605]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:01:32.605]        // -> [isSWJ <= 0x00000001]
[21:01:32.605]      __var hasDormant = __protocol & 0x00020000;
[21:01:32.605]        // -> [hasDormant <= 0x00000000]
[21:01:32.606]      __var protType   = __protocol & 0x0000FFFF;
[21:01:32.606]        // -> [protType <= 0x00000002]
[21:01:32.606]    </block>
[21:01:32.606]    <control if="protType == 1" while="" timeout="0" info="">
[21:01:32.606]      // if-block "protType == 1"
[21:01:32.606]        // =>  FALSE
[21:01:32.606]      // skip if-block "protType == 1"
[21:01:32.606]    </control>
[21:01:32.606]    <control if="protType == 2" while="" timeout="0" info="">
[21:01:32.606]      // if-block "protType == 2"
[21:01:32.606]        // =>  TRUE
[21:01:32.606]      <control if="isSWJ" while="" timeout="0" info="">
[21:01:32.606]        // if-block "isSWJ"
[21:01:32.606]          // =>  TRUE
[21:01:32.606]        <control if="hasDormant" while="" timeout="0" info="">
[21:01:32.607]          // if-block "hasDormant"
[21:01:32.607]            // =>  FALSE
[21:01:32.607]          // skip if-block "hasDormant"
[21:01:32.607]        </control>
[21:01:32.607]        <control if="!hasDormant" while="" timeout="0" info="">
[21:01:32.607]          // if-block "!hasDormant"
[21:01:32.607]            // =>  TRUE
[21:01:32.607]          <block atomic="false" info="">
[21:01:32.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:01:32.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:01:32.608]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:01:32.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:01:32.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:01:32.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:01:32.609]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:01:32.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:01:32.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:01:32.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:01:32.609]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:01:32.610]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:01:32.610]          </block>
[21:01:32.610]          // end if-block "!hasDormant"
[21:01:32.611]        </control>
[21:01:32.611]        // end if-block "isSWJ"
[21:01:32.611]      </control>
[21:01:32.611]      <control if="!isSWJ" while="" timeout="0" info="">
[21:01:32.611]        // if-block "!isSWJ"
[21:01:32.611]          // =>  FALSE
[21:01:32.611]        // skip if-block "!isSWJ"
[21:01:32.611]      </control>
[21:01:32.611]      <block atomic="false" info="">
[21:01:32.611]        ReadDP(0x0);
[21:01:32.611]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:01:32.611]      </block>
[21:01:32.613]      // end if-block "protType == 2"
[21:01:32.613]    </control>
[21:01:32.613]  </sequence>
[21:01:32.613]  
[21:01:32.613]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:01:32.613]  
[21:01:32.613]  <debugvars>
[21:01:32.613]    // Pre-defined
[21:01:32.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:01:32.613]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:01:32.613]    __dp=0x00000000
[21:01:32.613]    __ap=0x00000000
[21:01:32.613]    __traceout=0x00000000      (Trace Disabled)
[21:01:32.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:01:32.614]    __FlashAddr=0x00000000
[21:01:32.614]    __FlashLen=0x00000000
[21:01:32.614]    __FlashArg=0x00000000
[21:01:32.615]    __FlashOp=0x00000000
[21:01:32.615]    __Result=0x00000000
[21:01:32.615]  </debugvars>
[21:01:32.615]  
[21:01:32.615]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:01:32.616]    <block atomic="false" info="">
[21:01:32.616]      __var SW_DP_ABORT       = 0x0;
[21:01:32.616]        // -> [SW_DP_ABORT <= 0x00000000]
[21:01:32.616]      __var DP_CTRL_STAT      = 0x4;
[21:01:32.616]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:01:32.616]      __var DP_SELECT         = 0x8;
[21:01:32.616]        // -> [DP_SELECT <= 0x00000008]
[21:01:32.616]      __var powered_down      = 0;
[21:01:32.616]        // -> [powered_down <= 0x00000000]
[21:01:32.616]      WriteDP(DP_SELECT, 0x00000000);
[21:01:32.617]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:01:32.617]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:01:32.617]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:01:32.617]        // -> [powered_down <= 0x00000001]
[21:01:32.617]    </block>
[21:01:32.618]    <control if="powered_down" while="" timeout="0" info="">
[21:01:32.618]      // if-block "powered_down"
[21:01:32.618]        // =>  TRUE
[21:01:32.618]      <block atomic="false" info="">
[21:01:32.618]        Message(0, "Debug/System power-up request sent");
[21:01:32.622]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:01:32.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:01:32.623]      </block>
[21:01:32.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:01:32.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:01:32.624]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:01:32.624]        // while-condition  =>  FALSE
[21:01:32.624]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:01:32.624]      </control>
[21:01:32.624]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:01:32.624]        // if-block "(__protocol & 0xFFFF) == 1"
[21:01:32.624]          // =>  FALSE
[21:01:32.625]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:01:32.625]      </control>
[21:01:32.625]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:01:32.625]        // if-block "(__protocol & 0xFFFF) == 2"
[21:01:32.625]          // =>  TRUE
[21:01:32.625]        <block atomic="false" info="">
[21:01:32.626]          Message(0, "executing SWD power up");
[21:01:32.627]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:01:32.628]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:01:32.628]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:01:32.629]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:01:32.629]        </block>
[21:01:32.629]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:01:32.629]      </control>
[21:01:32.629]      // end if-block "powered_down"
[21:01:32.629]    </control>
[21:01:32.629]    <block atomic="false" info="">
[21:01:32.629]      __var DEBUG_PORT_VAL    = 0;
[21:01:32.629]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:01:32.631]      __var ACCESS_POINT_VAL  = 0;
[21:01:32.631]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:01:32.631]      __ap = 1; 
[21:01:32.631]        // -> [__ap <= 0x00000001]
[21:01:32.631]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:01:32.632]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:01:32.632]      __ap = 4;
[21:01:32.632]        // -> [__ap <= 0x00000004]
[21:01:32.632]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:01:32.633]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:01:32.633]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:01:32.634]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:01:32.637]    </block>
[21:01:32.637]    <block atomic="false" info="">
[21:01:32.637]      __var nReset = 0x80;
[21:01:32.637]        // -> [nReset <= 0x00000080]
[21:01:32.637]      __var canReadPins = 0;
[21:01:32.637]        // -> [canReadPins <= 0x00000000]
[21:01:32.637]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:01:32.638]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:01:32.638]        // -> [canReadPins <= 0x00000001]
[21:01:32.638]    </block>
[21:01:32.638]    <control if="" while="1" timeout="200" info="">
[21:01:32.638]      // while "1"  (timeout="200")
[21:01:32.638]      // while-condition  =>  TRUE
[21:01:32.638]      // while "1"  (timeout="200")
[21:01:32.638]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.639]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.639]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.639]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.639]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.639]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.639]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.639]      // while-condition  =>  TRUE
[21:01:32.639]      // while "1"  (timeout="200")
[21:01:32.640]      // while-condition  =>  TRUE
[21:01:32.640]      // while "1"  (timeout="200")
[21:01:32.640]      // while-condition  =>  TRUE
[21:01:32.640]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.641]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.641]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.641]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.641]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.641]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.641]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.641]      // while "1"  (timeout="200")
[21:01:32.641]      // while-condition  =>  TRUE
[21:01:32.642]      // while "1"  (timeout="200")
[21:01:32.642]      // while-condition  =>  TRUE
[21:01:32.642]      // while "1"  (timeout="200")
[21:01:32.642]      // while-condition  =>  TRUE
[21:01:32.642]      // while "1"  (timeout="200")
[21:01:32.642]      // while-condition  =>  TRUE
[21:01:32.642]      // while "1"  (timeout="200")
[21:01:32.642]      // while-condition  =>  TRUE
[21:01:32.642]      // while "1"  (timeout="200")
[21:01:32.642]      // while-condition  =>  TRUE
[21:01:32.642]      // while "1"  (timeout="200")
[21:01:32.642]      // while-condition  =>  TRUE
[21:01:32.644]      // while "1"  (timeout="200")
[21:01:32.644]      // while-condition  =>  TRUE
[21:01:32.644]      // while "1"  (timeout="200")
[21:01:32.644]      // while-condition  =>  TRUE
[21:01:32.644]      // while "1"  (timeout="200")
[21:01:32.644]      // while-condition  =>  TRUE
[21:01:32.644]      // while "1"  (timeout="200")
[21:01:32.644]      // while-condition  =>  TRUE
[21:01:32.645]      // while "1"  (timeout="200")
[21:01:32.645]      // while  =>  TIMEOUT
[21:01:32.645]      // end while "1"
[21:01:32.645]    </control>
[21:01:32.645]    <control if="canReadPins" while="" timeout="0" info="">
[21:01:32.645]      // if-block "canReadPins"
[21:01:32.645]        // =>  TRUE
[21:01:32.645]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:01:32.646]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:01:32.646]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:01:32.646]        // while-condition  =>  FALSE
[21:01:32.646]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:01:32.646]      </control>
[21:01:32.646]      // end if-block "canReadPins"
[21:01:32.646]    </control>
[21:01:32.646]    <control if="!canReadPins" while="" timeout="0" info="">
[21:01:32.647]      // if-block "!canReadPins"
[21:01:32.647]        // =>  FALSE
[21:01:32.647]      // skip if-block "!canReadPins"
[21:01:32.647]    </control>
[21:01:32.647]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:01:32.647]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:01:32.647]        // =>  TRUE
[21:01:32.647]      <block atomic="false" info="">
[21:01:32.648]        WriteAP(0x00, 0x190008);
[21:01:32.648]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:01:32.648]        WriteAP(0xF0, 0x01);
[21:01:32.649]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:01:32.649]      </block>
[21:01:32.649]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:01:32.649]    </control>
[21:01:32.651]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:01:32.651]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:01:32.651]        // =>  FALSE
[21:01:32.651]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:01:32.651]    </control>
[21:01:32.651]    <block atomic="false" info="">
[21:01:32.651]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:01:32.652]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:01:32.653]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:01:32.653]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:01:32.655]      __ap = 0; //lets make sure we reset the access point selection
[21:01:32.655]        // -> [__ap <= 0x00000000]
[21:01:32.655]    </block>
[21:01:32.655]  </sequence>
[21:01:32.655]  
[21:01:32.661]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:01:32.661]  
[21:01:32.661]  <debugvars>
[21:01:32.661]    // Pre-defined
[21:01:32.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:01:32.662]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:01:32.662]    __dp=0x00000000
[21:01:32.662]    __ap=0x00000000
[21:01:32.662]    __traceout=0x00000000      (Trace Disabled)
[21:01:32.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:01:32.662]    __FlashAddr=0x00000000
[21:01:32.662]    __FlashLen=0x00000000
[21:01:32.662]    __FlashArg=0x00000000
[21:01:32.662]    __FlashOp=0x00000000
[21:01:32.662]    __Result=0x00000000
[21:01:32.662]  </debugvars>
[21:01:32.663]  
[21:01:32.663]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:01:32.663]    <block atomic="false" info="">
[21:01:32.663]      __var deviceID = 0;
[21:01:32.664]        // -> [deviceID <= 0x00000000]
[21:01:32.664]      __var version = 0;
[21:01:32.664]        // -> [version <= 0x00000000]
[21:01:32.664]      __var partNum = 0;
[21:01:32.664]        // -> [partNum <= 0x00000000]
[21:01:32.664]      __var manuf = 0;
[21:01:32.664]        // -> [manuf <= 0x00000000]
[21:01:32.664]      __var isMSPM0G1X0X_G3X0X = 0;
[21:01:32.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:01:32.665]      __var isProduction = 0;
[21:01:32.665]        // -> [isProduction <= 0x00000000]
[21:01:32.665]      __var continueId = 0;
[21:01:32.665]        // -> [continueId <= 0x00000000]
[21:01:32.665]      deviceID =   Read32(0x41C40004);
[21:01:32.667]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:01:32.667]        // -> [deviceID <= 0x2BB8802F]
[21:01:32.667]      version = deviceID >> 28;
[21:01:32.667]        // -> [version <= 0x00000002]
[21:01:32.667]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:01:32.667]        // -> [partNum <= 0x0000BB88]
[21:01:32.667]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:01:32.668]        // -> [manuf <= 0x00000017]
[21:01:32.668]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:01:32.668]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:01:32.668]      isProduction = (version > 0);
[21:01:32.668]        // -> [isProduction <= 0x00000001]
[21:01:32.668]    </block>
[21:01:32.668]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:01:32.668]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:01:32.668]        // =>  FALSE
[21:01:32.668]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:01:32.668]    </control>
[21:01:32.668]    <control if="continueId == 4" while="" timeout="0" info="">
[21:01:32.669]      // if-block "continueId == 4"
[21:01:32.669]        // =>  FALSE
[21:01:32.669]      // skip if-block "continueId == 4"
[21:01:32.669]    </control>
[21:01:32.669]    <control if="!isProduction" while="" timeout="0" info="">
[21:01:32.669]      // if-block "!isProduction"
[21:01:32.669]        // =>  FALSE
[21:01:32.669]      // skip if-block "!isProduction"
[21:01:32.669]    </control>
[21:01:32.669]  </sequence>
[21:01:32.669]  
[21:03:47.868]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:03:47.868]  
[21:03:47.876]  <debugvars>
[21:03:47.876]    // Pre-defined
[21:03:47.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:03:47.876]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:03:47.876]    __dp=0x00000000
[21:03:47.876]    __ap=0x00000000
[21:03:47.877]    __traceout=0x00000000      (Trace Disabled)
[21:03:47.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:03:47.877]    __FlashAddr=0x00000000
[21:03:47.877]    __FlashLen=0x00000000
[21:03:47.877]    __FlashArg=0x00000000
[21:03:47.877]    __FlashOp=0x00000000
[21:03:47.877]    __Result=0x00000000
[21:03:47.877]  </debugvars>
[21:03:47.877]  
[21:03:47.878]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:03:47.878]    <block atomic="false" info="">
[21:03:47.878]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:03:47.878]        // -> [isSWJ <= 0x00000001]
[21:03:47.878]      __var hasDormant = __protocol & 0x00020000;
[21:03:47.878]        // -> [hasDormant <= 0x00000000]
[21:03:47.878]      __var protType   = __protocol & 0x0000FFFF;
[21:03:47.878]        // -> [protType <= 0x00000002]
[21:03:47.878]    </block>
[21:03:47.878]    <control if="protType == 1" while="" timeout="0" info="">
[21:03:47.878]      // if-block "protType == 1"
[21:03:47.878]        // =>  FALSE
[21:03:47.879]      // skip if-block "protType == 1"
[21:03:47.879]    </control>
[21:03:47.879]    <control if="protType == 2" while="" timeout="0" info="">
[21:03:47.879]      // if-block "protType == 2"
[21:03:47.879]        // =>  TRUE
[21:03:47.879]      <control if="isSWJ" while="" timeout="0" info="">
[21:03:47.879]        // if-block "isSWJ"
[21:03:47.880]          // =>  TRUE
[21:03:47.880]        <control if="hasDormant" while="" timeout="0" info="">
[21:03:47.880]          // if-block "hasDormant"
[21:03:47.880]            // =>  FALSE
[21:03:47.880]          // skip if-block "hasDormant"
[21:03:47.880]        </control>
[21:03:47.880]        <control if="!hasDormant" while="" timeout="0" info="">
[21:03:47.880]          // if-block "!hasDormant"
[21:03:47.880]            // =>  TRUE
[21:03:47.882]          <block atomic="false" info="">
[21:03:47.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:03:47.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:03:47.882]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:03:47.882]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:03:47.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:03:47.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:03:47.883]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:03:47.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:03:47.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:03:47.884]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:03:47.884]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:03:47.884]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:03:47.885]          </block>
[21:03:47.885]          // end if-block "!hasDormant"
[21:03:47.885]        </control>
[21:03:47.885]        // end if-block "isSWJ"
[21:03:47.885]      </control>
[21:03:47.885]      <control if="!isSWJ" while="" timeout="0" info="">
[21:03:47.885]        // if-block "!isSWJ"
[21:03:47.885]          // =>  FALSE
[21:03:47.885]        // skip if-block "!isSWJ"
[21:03:47.885]      </control>
[21:03:47.885]      <block atomic="false" info="">
[21:03:47.885]        ReadDP(0x0);
[21:03:47.885]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:03:47.885]      </block>
[21:03:47.887]      // end if-block "protType == 2"
[21:03:47.887]    </control>
[21:03:47.887]  </sequence>
[21:03:47.887]  
[21:03:47.887]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:03:47.887]  
[21:03:47.887]  <debugvars>
[21:03:47.888]    // Pre-defined
[21:03:47.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:03:47.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:03:47.888]    __dp=0x00000000
[21:03:47.888]    __ap=0x00000000
[21:03:47.888]    __traceout=0x00000000      (Trace Disabled)
[21:03:47.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:03:47.888]    __FlashAddr=0x00000000
[21:03:47.888]    __FlashLen=0x00000000
[21:03:47.889]    __FlashArg=0x00000000
[21:03:47.889]    __FlashOp=0x00000000
[21:03:47.889]    __Result=0x00000000
[21:03:47.889]  </debugvars>
[21:03:47.889]  
[21:03:47.889]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:03:47.889]    <block atomic="false" info="">
[21:03:47.889]      __var SW_DP_ABORT       = 0x0;
[21:03:47.889]        // -> [SW_DP_ABORT <= 0x00000000]
[21:03:47.890]      __var DP_CTRL_STAT      = 0x4;
[21:03:47.890]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:03:47.890]      __var DP_SELECT         = 0x8;
[21:03:47.890]        // -> [DP_SELECT <= 0x00000008]
[21:03:47.890]      __var powered_down      = 0;
[21:03:47.890]        // -> [powered_down <= 0x00000000]
[21:03:47.890]      WriteDP(DP_SELECT, 0x00000000);
[21:03:47.891]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:03:47.891]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:03:47.891]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:03:47.891]        // -> [powered_down <= 0x00000001]
[21:03:47.891]    </block>
[21:03:47.891]    <control if="powered_down" while="" timeout="0" info="">
[21:03:47.892]      // if-block "powered_down"
[21:03:47.892]        // =>  TRUE
[21:03:47.892]      <block atomic="false" info="">
[21:03:47.892]        Message(0, "Debug/System power-up request sent");
[21:03:47.894]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:03:47.894]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:03:47.895]      </block>
[21:03:47.895]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:03:47.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:03:47.895]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:03:47.895]        // while-condition  =>  FALSE
[21:03:47.895]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:03:47.895]      </control>
[21:03:47.896]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:03:47.896]        // if-block "(__protocol & 0xFFFF) == 1"
[21:03:47.896]          // =>  FALSE
[21:03:47.896]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:03:47.896]      </control>
[21:03:47.896]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:03:47.896]        // if-block "(__protocol & 0xFFFF) == 2"
[21:03:47.896]          // =>  TRUE
[21:03:47.897]        <block atomic="false" info="">
[21:03:47.897]          Message(0, "executing SWD power up");
[21:03:47.899]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:03:47.900]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:03:47.900]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:03:47.901]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:03:47.901]        </block>
[21:03:47.901]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:03:47.901]      </control>
[21:03:47.901]      // end if-block "powered_down"
[21:03:47.901]    </control>
[21:03:47.901]    <block atomic="false" info="">
[21:03:47.901]      __var DEBUG_PORT_VAL    = 0;
[21:03:47.901]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:03:47.901]      __var ACCESS_POINT_VAL  = 0;
[21:03:47.902]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:03:47.902]      __ap = 1; 
[21:03:47.902]        // -> [__ap <= 0x00000001]
[21:03:47.902]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:03:47.903]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:03:47.903]      __ap = 4;
[21:03:47.903]        // -> [__ap <= 0x00000004]
[21:03:47.903]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:03:47.905]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:03:47.905]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:03:47.905]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:03:47.906]    </block>
[21:03:47.906]    <block atomic="false" info="">
[21:03:47.906]      __var nReset = 0x80;
[21:03:47.906]        // -> [nReset <= 0x00000080]
[21:03:47.906]      __var canReadPins = 0;
[21:03:47.906]        // -> [canReadPins <= 0x00000000]
[21:03:47.907]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:03:47.907]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:03:47.907]        // -> [canReadPins <= 0x00000001]
[21:03:47.907]    </block>
[21:03:47.907]    <control if="" while="1" timeout="200" info="">
[21:03:47.908]      // while "1"  (timeout="200")
[21:03:47.908]      // while-condition  =>  TRUE
[21:03:47.908]      // while "1"  (timeout="200")
[21:03:47.908]      // while-condition  =>  TRUE
[21:03:47.908]      // while "1"  (timeout="200")
[21:03:47.908]      // while-condition  =>  TRUE
[21:03:47.908]      // while "1"  (timeout="200")
[21:03:47.908]      // while-condition  =>  TRUE
[21:03:47.909]      // while "1"  (timeout="200")
[21:03:47.909]      // while-condition  =>  TRUE
[21:03:47.909]      // while "1"  (timeout="200")
[21:03:47.909]      // while-condition  =>  TRUE
[21:03:47.909]      // while "1"  (timeout="200")
[21:03:47.909]      // while-condition  =>  TRUE
[21:03:47.909]      // while "1"  (timeout="200")
[21:03:47.909]      // while-condition  =>  TRUE
[21:03:47.909]      // while "1"  (timeout="200")
[21:03:47.909]      // while-condition  =>  TRUE
[21:03:47.909]      // while "1"  (timeout="200")
[21:03:47.910]      // while-condition  =>  TRUE
[21:03:47.910]      // while "1"  (timeout="200")
[21:03:47.910]      // while  =>  TIMEOUT
[21:03:47.910]      // end while "1"
[21:03:47.910]    </control>
[21:03:47.910]    <control if="canReadPins" while="" timeout="0" info="">
[21:03:47.910]      // if-block "canReadPins"
[21:03:47.910]        // =>  TRUE
[21:03:47.910]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:03:47.910]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:03:47.910]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:03:47.910]        // while-condition  =>  FALSE
[21:03:47.910]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:03:47.912]      </control>
[21:03:47.912]      // end if-block "canReadPins"
[21:03:47.912]    </control>
[21:03:47.912]    <control if="!canReadPins" while="" timeout="0" info="">
[21:03:47.912]      // if-block "!canReadPins"
[21:03:47.912]        // =>  FALSE
[21:03:47.912]      // skip if-block "!canReadPins"
[21:03:47.912]    </control>
[21:03:47.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:03:47.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:03:47.912]        // =>  TRUE
[21:03:47.912]      <block atomic="false" info="">
[21:03:47.912]        WriteAP(0x00, 0x190008);
[21:03:47.913]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:03:47.913]        WriteAP(0xF0, 0x01);
[21:03:47.914]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:03:47.914]      </block>
[21:03:47.915]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:03:47.915]    </control>
[21:03:47.915]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:03:47.915]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:03:47.915]        // =>  FALSE
[21:03:47.916]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:03:47.916]    </control>
[21:03:47.916]    <block atomic="false" info="">
[21:03:47.916]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:03:47.917]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:03:47.917]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:03:47.917]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:03:47.919]      __ap = 0; //lets make sure we reset the access point selection
[21:03:47.919]        // -> [__ap <= 0x00000000]
[21:03:47.919]    </block>
[21:03:47.919]  </sequence>
[21:03:47.919]  
[21:03:47.926]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:03:47.926]  
[21:03:47.926]  <debugvars>
[21:03:47.926]    // Pre-defined
[21:03:47.926]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:03:47.926]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:03:47.926]    __dp=0x00000000
[21:03:47.926]    __ap=0x00000000
[21:03:47.926]    __traceout=0x00000000      (Trace Disabled)
[21:03:47.927]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:03:47.927]    __FlashAddr=0x00000000
[21:03:47.927]    __FlashLen=0x00000000
[21:03:47.927]    __FlashArg=0x00000000
[21:03:47.927]    __FlashOp=0x00000000
[21:03:47.927]    __Result=0x00000000
[21:03:47.927]  </debugvars>
[21:03:47.927]  
[21:03:47.927]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:03:47.927]    <block atomic="false" info="">
[21:03:47.927]      __var deviceID = 0;
[21:03:47.927]        // -> [deviceID <= 0x00000000]
[21:03:47.927]      __var version = 0;
[21:03:47.928]        // -> [version <= 0x00000000]
[21:03:47.928]      __var partNum = 0;
[21:03:47.928]        // -> [partNum <= 0x00000000]
[21:03:47.928]      __var manuf = 0;
[21:03:47.928]        // -> [manuf <= 0x00000000]
[21:03:47.928]      __var isMSPM0G1X0X_G3X0X = 0;
[21:03:47.928]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:03:47.928]      __var isProduction = 0;
[21:03:47.928]        // -> [isProduction <= 0x00000000]
[21:03:47.928]      __var continueId = 0;
[21:03:47.928]        // -> [continueId <= 0x00000000]
[21:03:47.929]      deviceID =   Read32(0x41C40004);
[21:03:47.930]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:03:47.930]        // -> [deviceID <= 0x2BB8802F]
[21:03:47.930]      version = deviceID >> 28;
[21:03:47.930]        // -> [version <= 0x00000002]
[21:03:47.930]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:03:47.930]        // -> [partNum <= 0x0000BB88]
[21:03:47.930]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:03:47.932]        // -> [manuf <= 0x00000017]
[21:03:47.932]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:03:47.932]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:03:47.932]      isProduction = (version > 0);
[21:03:47.932]        // -> [isProduction <= 0x00000001]
[21:03:47.932]    </block>
[21:03:47.932]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:03:47.932]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:03:47.932]        // =>  FALSE
[21:03:47.932]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:03:47.932]    </control>
[21:03:47.932]    <control if="continueId == 4" while="" timeout="0" info="">
[21:03:47.932]      // if-block "continueId == 4"
[21:03:47.933]        // =>  FALSE
[21:03:47.933]      // skip if-block "continueId == 4"
[21:03:47.933]    </control>
[21:03:47.933]    <control if="!isProduction" while="" timeout="0" info="">
[21:03:47.934]      // if-block "!isProduction"
[21:03:47.934]        // =>  FALSE
[21:03:47.934]      // skip if-block "!isProduction"
[21:03:47.934]    </control>
[21:03:47.934]  </sequence>
[21:03:47.934]  
[21:04:09.719]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:04:09.719]  
[21:04:09.728]  <debugvars>
[21:04:09.728]    // Pre-defined
[21:04:09.728]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:09.728]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:09.728]    __dp=0x00000000
[21:04:09.728]    __ap=0x00000000
[21:04:09.728]    __traceout=0x00000000      (Trace Disabled)
[21:04:09.729]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:09.729]    __FlashAddr=0x00000000
[21:04:09.729]    __FlashLen=0x00000000
[21:04:09.729]    __FlashArg=0x00000000
[21:04:09.729]    __FlashOp=0x00000000
[21:04:09.729]    __Result=0x00000000
[21:04:09.729]  </debugvars>
[21:04:09.729]  
[21:04:09.729]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:04:09.729]    <block atomic="false" info="">
[21:04:09.730]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:04:09.730]        // -> [isSWJ <= 0x00000001]
[21:04:09.731]      __var hasDormant = __protocol & 0x00020000;
[21:04:09.731]        // -> [hasDormant <= 0x00000000]
[21:04:09.731]      __var protType   = __protocol & 0x0000FFFF;
[21:04:09.731]        // -> [protType <= 0x00000002]
[21:04:09.731]    </block>
[21:04:09.731]    <control if="protType == 1" while="" timeout="0" info="">
[21:04:09.731]      // if-block "protType == 1"
[21:04:09.731]        // =>  FALSE
[21:04:09.731]      // skip if-block "protType == 1"
[21:04:09.731]    </control>
[21:04:09.731]    <control if="protType == 2" while="" timeout="0" info="">
[21:04:09.732]      // if-block "protType == 2"
[21:04:09.732]        // =>  TRUE
[21:04:09.732]      <control if="isSWJ" while="" timeout="0" info="">
[21:04:09.732]        // if-block "isSWJ"
[21:04:09.732]          // =>  TRUE
[21:04:09.732]        <control if="hasDormant" while="" timeout="0" info="">
[21:04:09.733]          // if-block "hasDormant"
[21:04:09.733]            // =>  FALSE
[21:04:09.733]          // skip if-block "hasDormant"
[21:04:09.733]        </control>
[21:04:09.733]        <control if="!hasDormant" while="" timeout="0" info="">
[21:04:09.733]          // if-block "!hasDormant"
[21:04:09.733]            // =>  TRUE
[21:04:09.733]          <block atomic="false" info="">
[21:04:09.733]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:04:09.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:09.734]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:04:09.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:04:09.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:04:09.735]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:09.735]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:04:09.735]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:04:09.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:04:09.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:09.736]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:04:09.736]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:04:09.736]          </block>
[21:04:09.736]          // end if-block "!hasDormant"
[21:04:09.736]        </control>
[21:04:09.736]        // end if-block "isSWJ"
[21:04:09.736]      </control>
[21:04:09.737]      <control if="!isSWJ" while="" timeout="0" info="">
[21:04:09.737]        // if-block "!isSWJ"
[21:04:09.737]          // =>  FALSE
[21:04:09.737]        // skip if-block "!isSWJ"
[21:04:09.737]      </control>
[21:04:09.737]      <block atomic="false" info="">
[21:04:09.737]        ReadDP(0x0);
[21:04:09.737]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:04:09.738]      </block>
[21:04:09.738]      // end if-block "protType == 2"
[21:04:09.738]    </control>
[21:04:09.738]  </sequence>
[21:04:09.738]  
[21:04:09.739]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:04:09.739]  
[21:04:09.739]  <debugvars>
[21:04:09.739]    // Pre-defined
[21:04:09.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:09.739]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:09.739]    __dp=0x00000000
[21:04:09.739]    __ap=0x00000000
[21:04:09.739]    __traceout=0x00000000      (Trace Disabled)
[21:04:09.739]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:09.739]    __FlashAddr=0x00000000
[21:04:09.739]    __FlashLen=0x00000000
[21:04:09.740]    __FlashArg=0x00000000
[21:04:09.740]    __FlashOp=0x00000000
[21:04:09.740]    __Result=0x00000000
[21:04:09.740]  </debugvars>
[21:04:09.740]  
[21:04:09.740]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:04:09.740]    <block atomic="false" info="">
[21:04:09.741]      __var SW_DP_ABORT       = 0x0;
[21:04:09.741]        // -> [SW_DP_ABORT <= 0x00000000]
[21:04:09.741]      __var DP_CTRL_STAT      = 0x4;
[21:04:09.741]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:04:09.741]      __var DP_SELECT         = 0x8;
[21:04:09.741]        // -> [DP_SELECT <= 0x00000008]
[21:04:09.741]      __var powered_down      = 0;
[21:04:09.741]        // -> [powered_down <= 0x00000000]
[21:04:09.742]      WriteDP(DP_SELECT, 0x00000000);
[21:04:09.742]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:04:09.742]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:04:09.742]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:04:09.743]        // -> [powered_down <= 0x00000001]
[21:04:09.743]    </block>
[21:04:09.743]    <control if="powered_down" while="" timeout="0" info="">
[21:04:09.743]      // if-block "powered_down"
[21:04:09.743]        // =>  TRUE
[21:04:09.743]      <block atomic="false" info="">
[21:04:09.744]        Message(0, "Debug/System power-up request sent");
[21:04:09.747]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:04:09.747]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:04:09.747]      </block>
[21:04:09.748]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:04:09.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:04:09.748]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:04:09.748]        // while-condition  =>  FALSE
[21:04:09.748]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:04:09.748]      </control>
[21:04:09.748]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:04:09.749]        // if-block "(__protocol & 0xFFFF) == 1"
[21:04:09.749]          // =>  FALSE
[21:04:09.749]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:04:09.749]      </control>
[21:04:09.749]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:04:09.749]        // if-block "(__protocol & 0xFFFF) == 2"
[21:04:09.749]          // =>  TRUE
[21:04:09.749]        <block atomic="false" info="">
[21:04:09.749]          Message(0, "executing SWD power up");
[21:04:09.751]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:04:09.752]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:04:09.752]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:04:09.753]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:04:09.753]        </block>
[21:04:09.753]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:04:09.753]      </control>
[21:04:09.753]      // end if-block "powered_down"
[21:04:09.754]    </control>
[21:04:09.754]    <block atomic="false" info="">
[21:04:09.754]      __var DEBUG_PORT_VAL    = 0;
[21:04:09.754]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:04:09.754]      __var ACCESS_POINT_VAL  = 0;
[21:04:09.754]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:04:09.754]      __ap = 1; 
[21:04:09.754]        // -> [__ap <= 0x00000001]
[21:04:09.754]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:04:09.755]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:04:09.756]      __ap = 4;
[21:04:09.756]        // -> [__ap <= 0x00000004]
[21:04:09.756]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:09.757]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:04:09.757]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:04:09.757]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:09.759]    </block>
[21:04:09.759]    <block atomic="false" info="">
[21:04:09.760]      __var nReset = 0x80;
[21:04:09.760]        // -> [nReset <= 0x00000080]
[21:04:09.760]      __var canReadPins = 0;
[21:04:09.760]        // -> [canReadPins <= 0x00000000]
[21:04:09.760]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:04:09.760]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:04:09.760]        // -> [canReadPins <= 0x00000001]
[21:04:09.761]    </block>
[21:04:09.761]    <control if="" while="1" timeout="200" info="">
[21:04:09.761]      // while "1"  (timeout="200")
[21:04:09.761]      // while-condition  =>  TRUE
[21:04:09.761]      // while "1"  (timeout="200")
[21:04:09.761]      // while-condition  =>  TRUE
[21:04:09.761]      // while "1"  (timeout="200")
[21:04:09.761]      // while-condition  =>  TRUE
[21:04:09.762]      // while "1"  (timeout="200")
[21:04:09.762]      // while-condition  =>  TRUE
[21:04:09.762]      // while "1"  (timeout="200")
[21:04:09.762]      // while-condition  =>  TRUE
[21:04:09.762]      // while "1"  (timeout="200")
[21:04:09.762]      // while-condition  =>  TRUE
[21:04:09.762]      // while "1"  (timeout="200")
[21:04:09.762]      // while-condition  =>  TRUE
[21:04:09.762]      // while "1"  (timeout="200")
[21:04:09.762]      // while-condition  =>  TRUE
[21:04:09.762]      // while "1"  (timeout="200")
[21:04:09.762]      // while-condition  =>  TRUE
[21:04:09.763]      // while "1"  (timeout="200")
[21:04:09.763]      // while-condition  =>  TRUE
[21:04:09.763]      // while "1"  (timeout="200")
[21:04:09.763]      // while-condition  =>  TRUE
[21:04:09.763]      // while "1"  (timeout="200")
[21:04:09.763]      // while-condition  =>  TRUE
[21:04:09.763]      // while "1"  (timeout="200")
[21:04:09.764]      // while-condition  =>  TRUE
[21:04:09.764]      // while "1"  (timeout="200")
[21:04:09.764]      // while-condition  =>  TRUE
[21:04:09.764]      // while "1"  (timeout="200")
[21:04:09.764]      // while-condition  =>  TRUE
[21:04:09.764]      // while "1"  (timeout="200")
[21:04:09.764]      // while-condition  =>  TRUE
[21:04:09.764]      // while "1"  (timeout="200")
[21:04:09.764]      // while-condition  =>  TRUE
[21:04:09.764]      // while "1"  (timeout="200")
[21:04:09.764]      // while-condition  =>  TRUE
[21:04:09.764]      // while "1"  (timeout="200")
[21:04:09.765]      // while-condition  =>  TRUE
[21:04:09.765]      // while "1"  (timeout="200")
[21:04:09.765]      // while-condition  =>  TRUE
[21:04:09.765]      // while "1"  (timeout="200")
[21:04:09.765]      // while-condition  =>  TRUE
[21:04:09.765]      // while "1"  (timeout="200")
[21:04:09.765]      // while-condition  =>  TRUE
[21:04:09.765]      // while "1"  (timeout="200")
[21:04:09.765]      // while-condition  =>  TRUE
[21:04:09.765]      // while "1"  (timeout="200")
[21:04:09.765]      // while-condition  =>  TRUE
[21:04:09.765]      // while "1"  (timeout="200")
[21:04:09.766]      // while-condition  =>  TRUE
[21:04:09.766]      // while "1"  (timeout="200")
[21:04:09.766]      // while-condition  =>  TRUE
[21:04:09.766]      // while "1"  (timeout="200")
[21:04:09.766]      // while-condition  =>  TRUE
[21:04:09.767]      // while "1"  (timeout="200")
[21:04:09.767]      // while-condition  =>  TRUE
[21:04:09.767]      // while "1"  (timeout="200")
[21:04:09.767]      // while-condition  =>  TRUE
[21:04:09.767]      // while "1"  (timeout="200")
[21:04:09.767]      // while-condition  =>  TRUE
[21:04:09.767]      // while "1"  (timeout="200")
[21:04:09.767]      // while-condition  =>  TRUE
[21:04:09.768]      // while "1"  (timeout="200")
[21:04:09.768]      // while-condition  =>  TRUE
[21:04:09.768]      // while "1"  (timeout="200")
[21:04:09.768]      // while-condition  =>  TRUE
[21:04:09.768]      // while "1"  (timeout="200")
[21:04:09.768]      // while-condition  =>  TRUE
[21:04:09.768]      // while "1"  (timeout="200")
[21:04:09.768]      // while-condition  =>  TRUE
[21:04:09.768]      // while "1"  (timeout="200")
[21:04:09.768]      // while-condition  =>  TRUE
[21:04:09.768]      // while "1"  (timeout="200")
[21:04:09.769]      // while-condition  =>  TRUE
[21:04:09.769]      // while "1"  (timeout="200")
[21:04:09.769]      // while-condition  =>  TRUE
[21:04:09.769]      // while "1"  (timeout="200")
[21:04:09.769]      // while-condition  =>  TRUE
[21:04:09.769]      // while "1"  (timeout="200")
[21:04:09.769]      // while-condition  =>  TRUE
[21:04:09.769]      // while "1"  (timeout="200")
[21:04:09.769]      // while-condition  =>  TRUE
[21:04:09.769]      // while "1"  (timeout="200")
[21:04:09.769]      // while-condition  =>  TRUE
[21:04:09.770]      // while "1"  (timeout="200")
[21:04:09.770]      // while  =>  TIMEOUT
[21:04:09.770]      // end while "1"
[21:04:09.770]    </control>
[21:04:09.770]    <control if="canReadPins" while="" timeout="0" info="">
[21:04:09.770]      // if-block "canReadPins"
[21:04:09.770]        // =>  TRUE
[21:04:09.770]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:04:09.770]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:04:09.771]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:04:09.771]        // while-condition  =>  FALSE
[21:04:09.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:04:09.771]      </control>
[21:04:09.771]      // end if-block "canReadPins"
[21:04:09.771]    </control>
[21:04:09.771]    <control if="!canReadPins" while="" timeout="0" info="">
[21:04:09.771]      // if-block "!canReadPins"
[21:04:09.771]        // =>  FALSE
[21:04:09.773]      // skip if-block "!canReadPins"
[21:04:09.773]    </control>
[21:04:09.773]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:04:09.773]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:09.773]        // =>  TRUE
[21:04:09.773]      <block atomic="false" info="">
[21:04:09.773]        WriteAP(0x00, 0x190008);
[21:04:09.774]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:09.774]        WriteAP(0xF0, 0x01);
[21:04:09.775]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:09.775]      </block>
[21:04:09.775]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:09.775]    </control>
[21:04:09.775]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:04:09.775]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:09.775]        // =>  FALSE
[21:04:09.775]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:09.776]    </control>
[21:04:09.776]    <block atomic="false" info="">
[21:04:09.776]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:09.776]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:04:09.777]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:04:09.777]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:09.778]      __ap = 0; //lets make sure we reset the access point selection
[21:04:09.778]        // -> [__ap <= 0x00000000]
[21:04:09.779]    </block>
[21:04:09.779]  </sequence>
[21:04:09.779]  
[21:04:09.785]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:04:09.785]  
[21:04:09.786]  <debugvars>
[21:04:09.786]    // Pre-defined
[21:04:09.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:09.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:09.786]    __dp=0x00000000
[21:04:09.786]    __ap=0x00000000
[21:04:09.786]    __traceout=0x00000000      (Trace Disabled)
[21:04:09.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:09.786]    __FlashAddr=0x00000000
[21:04:09.786]    __FlashLen=0x00000000
[21:04:09.787]    __FlashArg=0x00000000
[21:04:09.787]    __FlashOp=0x00000000
[21:04:09.787]    __Result=0x00000000
[21:04:09.787]  </debugvars>
[21:04:09.787]  
[21:04:09.787]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:04:09.787]    <block atomic="false" info="">
[21:04:09.787]      __var deviceID = 0;
[21:04:09.787]        // -> [deviceID <= 0x00000000]
[21:04:09.787]      __var version = 0;
[21:04:09.787]        // -> [version <= 0x00000000]
[21:04:09.787]      __var partNum = 0;
[21:04:09.788]        // -> [partNum <= 0x00000000]
[21:04:09.788]      __var manuf = 0;
[21:04:09.788]        // -> [manuf <= 0x00000000]
[21:04:09.788]      __var isMSPM0G1X0X_G3X0X = 0;
[21:04:09.788]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:04:09.788]      __var isProduction = 0;
[21:04:09.788]        // -> [isProduction <= 0x00000000]
[21:04:09.788]      __var continueId = 0;
[21:04:09.788]        // -> [continueId <= 0x00000000]
[21:04:09.788]      deviceID =   Read32(0x41C40004);
[21:04:09.790]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:04:09.790]        // -> [deviceID <= 0x2BB8802F]
[21:04:09.790]      version = deviceID >> 28;
[21:04:09.790]        // -> [version <= 0x00000002]
[21:04:09.790]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:04:09.790]        // -> [partNum <= 0x0000BB88]
[21:04:09.790]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:04:09.791]        // -> [manuf <= 0x00000017]
[21:04:09.791]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:04:09.791]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:04:09.791]      isProduction = (version > 0);
[21:04:09.791]        // -> [isProduction <= 0x00000001]
[21:04:09.791]    </block>
[21:04:09.791]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:04:09.791]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:04:09.791]        // =>  FALSE
[21:04:09.791]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:04:09.791]    </control>
[21:04:09.791]    <control if="continueId == 4" while="" timeout="0" info="">
[21:04:09.791]      // if-block "continueId == 4"
[21:04:09.792]        // =>  FALSE
[21:04:09.792]      // skip if-block "continueId == 4"
[21:04:09.792]    </control>
[21:04:09.792]    <control if="!isProduction" while="" timeout="0" info="">
[21:04:09.792]      // if-block "!isProduction"
[21:04:09.792]        // =>  FALSE
[21:04:09.792]      // skip if-block "!isProduction"
[21:04:09.792]    </control>
[21:04:09.792]  </sequence>
[21:04:09.792]  
[21:04:44.858]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:04:44.858]  
[21:04:44.858]  <debugvars>
[21:04:44.858]    // Pre-defined
[21:04:44.859]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:44.859]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:04:44.859]    __dp=0x00000000
[21:04:44.859]    __ap=0x00000000
[21:04:44.859]    __traceout=0x00000000      (Trace Disabled)
[21:04:44.859]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:44.859]    __FlashAddr=0x00000000
[21:04:44.859]    __FlashLen=0x00000000
[21:04:44.859]    __FlashArg=0x00000000
[21:04:44.859]    __FlashOp=0x00000000
[21:04:44.859]    __Result=0x00000000
[21:04:44.860]  </debugvars>
[21:04:44.860]  
[21:04:44.860]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:04:44.861]    <block atomic="false" info="">
[21:04:44.861]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:04:44.861]        // -> [isSWJ <= 0x00000001]
[21:04:44.861]      __var hasDormant = __protocol & 0x00020000;
[21:04:44.861]        // -> [hasDormant <= 0x00000000]
[21:04:44.861]      __var protType   = __protocol & 0x0000FFFF;
[21:04:44.862]        // -> [protType <= 0x00000002]
[21:04:44.862]    </block>
[21:04:44.862]    <control if="protType == 1" while="" timeout="0" info="">
[21:04:44.862]      // if-block "protType == 1"
[21:04:44.862]        // =>  FALSE
[21:04:44.862]      // skip if-block "protType == 1"
[21:04:44.862]    </control>
[21:04:44.862]    <control if="protType == 2" while="" timeout="0" info="">
[21:04:44.862]      // if-block "protType == 2"
[21:04:44.862]        // =>  TRUE
[21:04:44.862]      <control if="isSWJ" while="" timeout="0" info="">
[21:04:44.862]        // if-block "isSWJ"
[21:04:44.862]          // =>  TRUE
[21:04:44.863]        <control if="hasDormant" while="" timeout="0" info="">
[21:04:44.863]          // if-block "hasDormant"
[21:04:44.863]            // =>  FALSE
[21:04:44.863]          // skip if-block "hasDormant"
[21:04:44.863]        </control>
[21:04:44.863]        <control if="!hasDormant" while="" timeout="0" info="">
[21:04:44.863]          // if-block "!hasDormant"
[21:04:44.863]            // =>  TRUE
[21:04:44.863]          <block atomic="false" info="">
[21:04:44.864]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:04:44.864]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:44.864]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:04:44.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:04:44.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:04:44.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:44.865]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:04:44.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:04:44.866]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:04:44.866]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:44.866]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:04:44.866]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:04:44.866]          </block>
[21:04:44.867]          // end if-block "!hasDormant"
[21:04:44.867]        </control>
[21:04:44.867]        // end if-block "isSWJ"
[21:04:44.867]      </control>
[21:04:44.867]      <control if="!isSWJ" while="" timeout="0" info="">
[21:04:44.867]        // if-block "!isSWJ"
[21:04:44.867]          // =>  FALSE
[21:04:44.867]        // skip if-block "!isSWJ"
[21:04:44.867]      </control>
[21:04:44.868]      <block atomic="false" info="">
[21:04:44.868]        ReadDP(0x0);
[21:04:44.868]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:04:44.868]      </block>
[21:04:44.868]      // end if-block "protType == 2"
[21:04:44.868]    </control>
[21:04:44.868]  </sequence>
[21:04:44.870]  
[21:04:44.870]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:04:44.870]  
[21:04:44.870]  <debugvars>
[21:04:44.870]    // Pre-defined
[21:04:44.870]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:44.870]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:04:44.871]    __dp=0x00000000
[21:04:44.871]    __ap=0x00000000
[21:04:44.871]    __traceout=0x00000000      (Trace Disabled)
[21:04:44.871]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:44.871]    __FlashAddr=0x00000000
[21:04:44.871]    __FlashLen=0x00000000
[21:04:44.871]    __FlashArg=0x00000000
[21:04:44.871]    __FlashOp=0x00000000
[21:04:44.872]    __Result=0x00000000
[21:04:44.872]  </debugvars>
[21:04:44.872]  
[21:04:44.872]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:04:44.872]    <block atomic="false" info="">
[21:04:44.872]      __var SW_DP_ABORT       = 0x0;
[21:04:44.872]        // -> [SW_DP_ABORT <= 0x00000000]
[21:04:44.872]      __var DP_CTRL_STAT      = 0x4;
[21:04:44.872]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:04:44.873]      __var DP_SELECT         = 0x8;
[21:04:44.873]        // -> [DP_SELECT <= 0x00000008]
[21:04:44.873]      __var powered_down      = 0;
[21:04:44.873]        // -> [powered_down <= 0x00000000]
[21:04:44.873]      WriteDP(DP_SELECT, 0x00000000);
[21:04:44.873]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:04:44.874]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:04:44.874]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:04:44.874]        // -> [powered_down <= 0x00000001]
[21:04:44.874]    </block>
[21:04:44.874]    <control if="powered_down" while="" timeout="0" info="">
[21:04:44.874]      // if-block "powered_down"
[21:04:44.874]        // =>  TRUE
[21:04:44.875]      <block atomic="false" info="">
[21:04:44.875]        Message(0, "Debug/System power-up request sent");
[21:04:44.877]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:04:44.877]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:04:44.878]      </block>
[21:04:44.878]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:04:44.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:04:44.879]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:04:44.879]        // while-condition  =>  FALSE
[21:04:44.879]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:04:44.879]      </control>
[21:04:44.879]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:04:44.879]        // if-block "(__protocol & 0xFFFF) == 1"
[21:04:44.879]          // =>  FALSE
[21:04:44.879]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:04:44.879]      </control>
[21:04:44.879]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:04:44.879]        // if-block "(__protocol & 0xFFFF) == 2"
[21:04:44.881]          // =>  TRUE
[21:04:44.881]        <block atomic="false" info="">
[21:04:44.881]          Message(0, "executing SWD power up");
[21:04:44.882]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:04:44.882]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:04:44.882]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:04:44.883]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:04:44.883]        </block>
[21:04:44.883]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:04:44.883]      </control>
[21:04:44.883]      // end if-block "powered_down"
[21:04:44.883]    </control>
[21:04:44.883]    <block atomic="false" info="">
[21:04:44.883]      __var DEBUG_PORT_VAL    = 0;
[21:04:44.883]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:04:44.883]      __var ACCESS_POINT_VAL  = 0;
[21:04:44.883]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:04:44.883]      __ap = 1; 
[21:04:44.884]        // -> [__ap <= 0x00000001]
[21:04:44.884]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:04:44.885]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:04:44.885]      __ap = 4;
[21:04:44.885]        // -> [__ap <= 0x00000004]
[21:04:44.885]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:44.887]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:04:44.887]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:04:44.887]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:44.888]    </block>
[21:04:44.888]    <block atomic="false" info="">
[21:04:44.888]      __var nReset = 0x80;
[21:04:44.888]        // -> [nReset <= 0x00000080]
[21:04:44.888]      __var canReadPins = 0;
[21:04:44.888]        // -> [canReadPins <= 0x00000000]
[21:04:44.888]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:04:44.889]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:04:44.889]        // -> [canReadPins <= 0x00000001]
[21:04:44.889]    </block>
[21:04:44.889]    <control if="" while="1" timeout="200" info="">
[21:04:44.889]      // while "1"  (timeout="200")
[21:04:44.889]      // while-condition  =>  TRUE
[21:04:44.889]      // while "1"  (timeout="200")
[21:04:44.889]      // while-condition  =>  TRUE
[21:04:44.889]      // while "1"  (timeout="200")
[21:04:44.889]      // while-condition  =>  TRUE
[21:04:44.889]      // while "1"  (timeout="200")
[21:04:44.889]      // while-condition  =>  TRUE
[21:04:44.891]      // while "1"  (timeout="200")
[21:04:44.891]      // while-condition  =>  TRUE
[21:04:44.891]      // while "1"  (timeout="200")
[21:04:44.891]      // while-condition  =>  TRUE
[21:04:44.891]      // while "1"  (timeout="200")
[21:04:44.891]      // while-condition  =>  TRUE
[21:04:44.891]      // while "1"  (timeout="200")
[21:04:44.892]      // while-condition  =>  TRUE
[21:04:44.892]      // while "1"  (timeout="200")
[21:04:44.892]      // while-condition  =>  TRUE
[21:04:44.892]      // while "1"  (timeout="200")
[21:04:44.892]      // while-condition  =>  TRUE
[21:04:44.892]      // while "1"  (timeout="200")
[21:04:44.892]      // while-condition  =>  TRUE
[21:04:44.892]      // while "1"  (timeout="200")
[21:04:44.892]      // while-condition  =>  TRUE
[21:04:44.892]      // while "1"  (timeout="200")
[21:04:44.892]      // while-condition  =>  TRUE
[21:04:44.892]      // while "1"  (timeout="200")
[21:04:44.892]      // while-condition  =>  TRUE
[21:04:44.892]      // while "1"  (timeout="200")
[21:04:44.893]      // while-condition  =>  TRUE
[21:04:44.893]      // while "1"  (timeout="200")
[21:04:44.893]      // while-condition  =>  TRUE
[21:04:44.894]      // while "1"  (timeout="200")
[21:04:44.894]      // while-condition  =>  TRUE
[21:04:44.894]      // while "1"  (timeout="200")
[21:04:44.894]      // while-condition  =>  TRUE
[21:04:44.894]      // while "1"  (timeout="200")
[21:04:44.894]      // while-condition  =>  TRUE
[21:04:44.894]      // while "1"  (timeout="200")
[21:04:44.894]      // while-condition  =>  TRUE
[21:04:44.894]      // while "1"  (timeout="200")
[21:04:44.894]      // while-condition  =>  TRUE
[21:04:44.894]      // while "1"  (timeout="200")
[21:04:44.894]      // while-condition  =>  TRUE
[21:04:44.894]      // while "1"  (timeout="200")
[21:04:44.894]      // while-condition  =>  TRUE
[21:04:44.895]      // while "1"  (timeout="200")
[21:04:44.895]      // while  =>  TIMEOUT
[21:04:44.895]      // end while "1"
[21:04:44.895]    </control>
[21:04:44.895]    <control if="canReadPins" while="" timeout="0" info="">
[21:04:44.895]      // if-block "canReadPins"
[21:04:44.895]        // =>  TRUE
[21:04:44.895]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:04:44.895]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:04:44.896]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:04:44.896]        // while-condition  =>  FALSE
[21:04:44.896]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:04:44.896]      </control>
[21:04:44.896]      // end if-block "canReadPins"
[21:04:44.897]    </control>
[21:04:44.897]    <control if="!canReadPins" while="" timeout="0" info="">
[21:04:44.897]      // if-block "!canReadPins"
[21:04:44.897]        // =>  FALSE
[21:04:44.897]      // skip if-block "!canReadPins"
[21:04:44.897]    </control>
[21:04:44.897]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:04:44.897]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:44.897]        // =>  TRUE
[21:04:44.897]      <block atomic="false" info="">
[21:04:44.897]        WriteAP(0x00, 0x190008);
[21:04:44.898]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:44.898]        WriteAP(0xF0, 0x01);
[21:04:44.899]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:44.899]      </block>
[21:04:44.900]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:44.900]    </control>
[21:04:44.900]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:04:44.900]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:44.900]        // =>  FALSE
[21:04:44.900]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:44.900]    </control>
[21:04:44.900]    <block atomic="false" info="">
[21:04:44.900]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:44.901]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:04:44.901]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:04:44.902]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:44.903]      __ap = 0; //lets make sure we reset the access point selection
[21:04:44.903]        // -> [__ap <= 0x00000000]
[21:04:44.903]    </block>
[21:04:44.903]  </sequence>
[21:04:44.903]  
[21:04:44.911]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:04:44.911]  
[21:04:44.911]  <debugvars>
[21:04:44.911]    // Pre-defined
[21:04:44.911]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:44.911]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:04:44.911]    __dp=0x00000000
[21:04:44.911]    __ap=0x00000000
[21:04:44.911]    __traceout=0x00000000      (Trace Disabled)
[21:04:44.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:44.911]    __FlashAddr=0x00000000
[21:04:44.911]    __FlashLen=0x00000000
[21:04:44.911]    __FlashArg=0x00000000
[21:04:44.912]    __FlashOp=0x00000000
[21:04:44.912]    __Result=0x00000000
[21:04:44.912]  </debugvars>
[21:04:44.912]  
[21:04:44.912]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:04:44.912]    <block atomic="false" info="">
[21:04:44.912]      __var deviceID = 0;
[21:04:44.912]        // -> [deviceID <= 0x00000000]
[21:04:44.913]      __var version = 0;
[21:04:44.913]        // -> [version <= 0x00000000]
[21:04:44.913]      __var partNum = 0;
[21:04:44.913]        // -> [partNum <= 0x00000000]
[21:04:44.913]      __var manuf = 0;
[21:04:44.913]        // -> [manuf <= 0x00000000]
[21:04:44.913]      __var isMSPM0G1X0X_G3X0X = 0;
[21:04:44.913]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:04:44.913]      __var isProduction = 0;
[21:04:44.913]        // -> [isProduction <= 0x00000000]
[21:04:44.914]      __var continueId = 0;
[21:04:44.914]        // -> [continueId <= 0x00000000]
[21:04:44.914]      deviceID =   Read32(0x41C40004);
[21:04:44.915]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:04:44.916]        // -> [deviceID <= 0x2BB8802F]
[21:04:44.916]      version = deviceID >> 28;
[21:04:44.916]        // -> [version <= 0x00000002]
[21:04:44.916]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:04:44.916]        // -> [partNum <= 0x0000BB88]
[21:04:44.916]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:04:44.916]        // -> [manuf <= 0x00000017]
[21:04:44.916]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:04:44.916]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:04:44.916]      isProduction = (version > 0);
[21:04:44.916]        // -> [isProduction <= 0x00000001]
[21:04:44.916]    </block>
[21:04:44.916]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:04:44.916]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:04:44.916]        // =>  FALSE
[21:04:44.917]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:04:44.917]    </control>
[21:04:44.917]    <control if="continueId == 4" while="" timeout="0" info="">
[21:04:44.917]      // if-block "continueId == 4"
[21:04:44.917]        // =>  FALSE
[21:04:44.917]      // skip if-block "continueId == 4"
[21:04:44.918]    </control>
[21:04:44.918]    <control if="!isProduction" while="" timeout="0" info="">
[21:04:44.918]      // if-block "!isProduction"
[21:04:44.918]        // =>  FALSE
[21:04:44.918]      // skip if-block "!isProduction"
[21:04:44.918]    </control>
[21:04:44.918]  </sequence>
[21:04:44.918]  
[21:09:16.938]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:09:16.938]  
[21:09:16.938]  <debugvars>
[21:09:16.939]    // Pre-defined
[21:09:16.939]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:09:16.939]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:09:16.939]    __dp=0x00000000
[21:09:16.939]    __ap=0x00000000
[21:09:16.939]    __traceout=0x00000000      (Trace Disabled)
[21:09:16.939]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:09:16.939]    __FlashAddr=0x00000000
[21:09:16.939]    __FlashLen=0x00000000
[21:09:16.939]    __FlashArg=0x00000000
[21:09:16.939]    __FlashOp=0x00000000
[21:09:16.941]    __Result=0x00000000
[21:09:16.941]  </debugvars>
[21:09:16.941]  
[21:09:16.941]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:09:16.941]    <block atomic="false" info="">
[21:09:16.941]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:09:16.941]        // -> [isSWJ <= 0x00000001]
[21:09:16.942]      __var hasDormant = __protocol & 0x00020000;
[21:09:16.942]        // -> [hasDormant <= 0x00000000]
[21:09:16.942]      __var protType   = __protocol & 0x0000FFFF;
[21:09:16.942]        // -> [protType <= 0x00000002]
[21:09:16.942]    </block>
[21:09:16.942]    <control if="protType == 1" while="" timeout="0" info="">
[21:09:16.942]      // if-block "protType == 1"
[21:09:16.942]        // =>  FALSE
[21:09:16.942]      // skip if-block "protType == 1"
[21:09:16.942]    </control>
[21:09:16.942]    <control if="protType == 2" while="" timeout="0" info="">
[21:09:16.942]      // if-block "protType == 2"
[21:09:16.942]        // =>  TRUE
[21:09:16.942]      <control if="isSWJ" while="" timeout="0" info="">
[21:09:16.942]        // if-block "isSWJ"
[21:09:16.942]          // =>  TRUE
[21:09:16.942]        <control if="hasDormant" while="" timeout="0" info="">
[21:09:16.942]          // if-block "hasDormant"
[21:09:16.942]            // =>  FALSE
[21:09:16.942]          // skip if-block "hasDormant"
[21:09:16.942]        </control>
[21:09:16.942]        <control if="!hasDormant" while="" timeout="0" info="">
[21:09:16.942]          // if-block "!hasDormant"
[21:09:16.944]            // =>  TRUE
[21:09:16.944]          <block atomic="false" info="">
[21:09:16.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:09:16.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:09:16.944]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:09:16.944]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:09:16.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:09:16.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:09:16.945]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:09:16.945]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:09:16.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:09:16.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:09:16.947]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:09:16.947]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:09:16.947]          </block>
[21:09:16.947]          // end if-block "!hasDormant"
[21:09:16.947]        </control>
[21:09:16.947]        // end if-block "isSWJ"
[21:09:16.947]      </control>
[21:09:16.948]      <control if="!isSWJ" while="" timeout="0" info="">
[21:09:16.948]        // if-block "!isSWJ"
[21:09:16.948]          // =>  FALSE
[21:09:16.948]        // skip if-block "!isSWJ"
[21:09:16.948]      </control>
[21:09:16.948]      <block atomic="false" info="">
[21:09:16.948]        ReadDP(0x0);
[21:09:16.948]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:09:16.948]      </block>
[21:09:16.948]      // end if-block "protType == 2"
[21:09:16.948]    </control>
[21:09:16.948]  </sequence>
[21:09:16.948]  
[21:09:16.948]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:09:16.948]  
[21:09:16.948]  <debugvars>
[21:09:16.948]    // Pre-defined
[21:09:16.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:09:16.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:09:16.948]    __dp=0x00000000
[21:09:16.948]    __ap=0x00000000
[21:09:16.948]    __traceout=0x00000000      (Trace Disabled)
[21:09:16.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:09:16.948]    __FlashAddr=0x00000000
[21:09:16.948]    __FlashLen=0x00000000
[21:09:16.948]    __FlashArg=0x00000000
[21:09:16.948]    __FlashOp=0x00000000
[21:09:16.948]    __Result=0x00000000
[21:09:16.948]  </debugvars>
[21:09:16.948]  
[21:09:16.948]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:09:16.948]    <block atomic="false" info="">
[21:09:16.952]      __var SW_DP_ABORT       = 0x0;
[21:09:16.952]        // -> [SW_DP_ABORT <= 0x00000000]
[21:09:16.952]      __var DP_CTRL_STAT      = 0x4;
[21:09:16.952]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:09:16.952]      __var DP_SELECT         = 0x8;
[21:09:16.952]        // -> [DP_SELECT <= 0x00000008]
[21:09:16.952]      __var powered_down      = 0;
[21:09:16.952]        // -> [powered_down <= 0x00000000]
[21:09:16.952]      WriteDP(DP_SELECT, 0x00000000);
[21:09:16.954]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:09:16.954]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:09:16.954]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:09:16.954]        // -> [powered_down <= 0x00000001]
[21:09:16.954]    </block>
[21:09:16.954]    <control if="powered_down" while="" timeout="0" info="">
[21:09:16.954]      // if-block "powered_down"
[21:09:16.954]        // =>  TRUE
[21:09:16.954]      <block atomic="false" info="">
[21:09:16.954]        Message(0, "Debug/System power-up request sent");
[21:09:16.956]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:09:16.958]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:09:16.958]      </block>
[21:09:16.958]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:09:16.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:09:16.958]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:09:16.958]        // while-condition  =>  FALSE
[21:09:16.959]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:09:16.959]      </control>
[21:09:16.959]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:09:16.959]        // if-block "(__protocol & 0xFFFF) == 1"
[21:09:16.959]          // =>  FALSE
[21:09:16.959]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:09:16.959]      </control>
[21:09:16.959]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:09:16.959]        // if-block "(__protocol & 0xFFFF) == 2"
[21:09:16.959]          // =>  TRUE
[21:09:16.959]        <block atomic="false" info="">
[21:09:16.959]          Message(0, "executing SWD power up");
[21:09:16.960]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:09:16.960]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:09:16.960]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:09:16.963]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:09:16.963]        </block>
[21:09:16.963]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:09:16.963]      </control>
[21:09:16.963]      // end if-block "powered_down"
[21:09:16.963]    </control>
[21:09:16.963]    <block atomic="false" info="">
[21:09:16.963]      __var DEBUG_PORT_VAL    = 0;
[21:09:16.963]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:09:16.963]      __var ACCESS_POINT_VAL  = 0;
[21:09:16.963]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:09:16.963]      __ap = 1; 
[21:09:16.963]        // -> [__ap <= 0x00000001]
[21:09:16.963]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:09:16.964]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:09:16.964]      __ap = 4;
[21:09:16.964]        // -> [__ap <= 0x00000004]
[21:09:16.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:09:16.964]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:09:16.964]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:09:16.964]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:09:16.968]    </block>
[21:09:16.968]    <block atomic="false" info="">
[21:09:16.968]      __var nReset = 0x80;
[21:09:16.968]        // -> [nReset <= 0x00000080]
[21:09:16.968]      __var canReadPins = 0;
[21:09:16.968]        // -> [canReadPins <= 0x00000000]
[21:09:16.968]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:09:16.968]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:09:16.968]        // -> [canReadPins <= 0x00000001]
[21:09:16.968]    </block>
[21:09:16.968]    <control if="" while="1" timeout="200" info="">
[21:09:16.968]      // while "1"  (timeout="200")
[21:09:16.970]      // while-condition  =>  TRUE
[21:09:16.970]      // while "1"  (timeout="200")
[21:09:16.970]      // while-condition  =>  TRUE
[21:09:16.970]      // while "1"  (timeout="200")
[21:09:16.970]      // while-condition  =>  TRUE
[21:09:16.970]      // while "1"  (timeout="200")
[21:09:16.970]      // while-condition  =>  TRUE
[21:09:16.970]      // while "1"  (timeout="200")
[21:09:16.970]      // while-condition  =>  TRUE
[21:09:16.970]      // while "1"  (timeout="200")
[21:09:16.970]      // while-condition  =>  TRUE
[21:09:16.971]      // while "1"  (timeout="200")
[21:09:16.971]      // while-condition  =>  TRUE
[21:09:16.971]      // while "1"  (timeout="200")
[21:09:16.971]      // while-condition  =>  TRUE
[21:09:16.971]      // while "1"  (timeout="200")
[21:09:16.971]      // while-condition  =>  TRUE
[21:09:16.971]      // while "1"  (timeout="200")
[21:09:16.971]      // while-condition  =>  TRUE
[21:09:16.971]      // while "1"  (timeout="200")
[21:09:16.971]      // while-condition  =>  TRUE
[21:09:16.971]      // while "1"  (timeout="200")
[21:09:16.971]      // while-condition  =>  TRUE
[21:09:16.973]      // while "1"  (timeout="200")
[21:09:16.973]      // while-condition  =>  TRUE
[21:09:16.973]      // while "1"  (timeout="200")
[21:09:16.973]      // while-condition  =>  TRUE
[21:09:16.973]      // while "1"  (timeout="200")
[21:09:16.973]      // while-condition  =>  TRUE
[21:09:16.973]      // while "1"  (timeout="200")
[21:09:16.973]      // while-condition  =>  TRUE
[21:09:16.973]      // while "1"  (timeout="200")
[21:09:16.973]      // while-condition  =>  TRUE
[21:09:16.973]      // while "1"  (timeout="200")
[21:09:16.973]      // while-condition  =>  TRUE
[21:09:16.973]      // while "1"  (timeout="200")
[21:09:16.974]      // while-condition  =>  TRUE
[21:09:16.974]      // while "1"  (timeout="200")
[21:09:16.974]      // while  =>  TIMEOUT
[21:09:16.974]      // end while "1"
[21:09:16.974]    </control>
[21:09:16.974]    <control if="canReadPins" while="" timeout="0" info="">
[21:09:16.974]      // if-block "canReadPins"
[21:09:16.974]        // =>  TRUE
[21:09:16.974]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:09:16.974]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:09:16.974]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:09:16.974]        // while-condition  =>  FALSE
[21:09:16.974]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:09:16.975]      </control>
[21:09:16.975]      // end if-block "canReadPins"
[21:09:16.975]    </control>
[21:09:16.975]    <control if="!canReadPins" while="" timeout="0" info="">
[21:09:16.975]      // if-block "!canReadPins"
[21:09:16.975]        // =>  FALSE
[21:09:16.975]      // skip if-block "!canReadPins"
[21:09:16.975]    </control>
[21:09:16.975]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:09:16.975]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:09:16.975]        // =>  TRUE
[21:09:16.975]      <block atomic="false" info="">
[21:09:16.975]        WriteAP(0x00, 0x190008);
[21:09:16.977]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:09:16.977]        WriteAP(0xF0, 0x01);
[21:09:16.978]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:09:16.979]      </block>
[21:09:16.979]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:09:16.979]    </control>
[21:09:16.979]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:09:16.979]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:09:16.979]        // =>  FALSE
[21:09:16.979]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:09:16.979]    </control>
[21:09:16.979]    <block atomic="false" info="">
[21:09:16.979]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:09:16.981]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:09:16.981]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:09:16.981]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:09:16.981]      __ap = 0; //lets make sure we reset the access point selection
[21:09:16.981]        // -> [__ap <= 0x00000000]
[21:09:16.981]    </block>
[21:09:16.981]  </sequence>
[21:09:16.981]  
[21:09:16.989]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:09:16.989]  
[21:09:16.989]  <debugvars>
[21:09:16.989]    // Pre-defined
[21:09:16.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:09:16.989]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:09:16.989]    __dp=0x00000000
[21:09:16.989]    __ap=0x00000000
[21:09:16.989]    __traceout=0x00000000      (Trace Disabled)
[21:09:16.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:09:16.989]    __FlashAddr=0x00000000
[21:09:16.989]    __FlashLen=0x00000000
[21:09:16.991]    __FlashArg=0x00000000
[21:09:16.991]    __FlashOp=0x00000000
[21:09:16.991]    __Result=0x00000000
[21:09:16.991]  </debugvars>
[21:09:16.991]  
[21:09:16.991]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:09:16.991]    <block atomic="false" info="">
[21:09:16.991]      __var deviceID = 0;
[21:09:16.991]        // -> [deviceID <= 0x00000000]
[21:09:16.991]      __var version = 0;
[21:09:16.991]        // -> [version <= 0x00000000]
[21:09:16.991]      __var partNum = 0;
[21:09:16.992]        // -> [partNum <= 0x00000000]
[21:09:16.992]      __var manuf = 0;
[21:09:16.992]        // -> [manuf <= 0x00000000]
[21:09:16.992]      __var isMSPM0G1X0X_G3X0X = 0;
[21:09:16.992]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:09:16.992]      __var isProduction = 0;
[21:09:16.992]        // -> [isProduction <= 0x00000000]
[21:09:16.992]      __var continueId = 0;
[21:09:16.993]        // -> [continueId <= 0x00000000]
[21:09:16.993]      deviceID =   Read32(0x41C40004);
[21:09:16.994]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:09:16.994]        // -> [deviceID <= 0x2BB8802F]
[21:09:16.994]      version = deviceID >> 28;
[21:09:16.994]        // -> [version <= 0x00000002]
[21:09:16.994]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:09:16.994]        // -> [partNum <= 0x0000BB88]
[21:09:16.994]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:09:16.994]        // -> [manuf <= 0x00000017]
[21:09:16.994]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:09:16.994]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:09:16.994]      isProduction = (version > 0);
[21:09:16.994]        // -> [isProduction <= 0x00000001]
[21:09:16.994]    </block>
[21:09:16.994]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:09:16.994]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:09:16.994]        // =>  FALSE
[21:09:16.994]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:09:16.994]    </control>
[21:09:16.994]    <control if="continueId == 4" while="" timeout="0" info="">
[21:09:16.994]      // if-block "continueId == 4"
[21:09:16.994]        // =>  FALSE
[21:09:16.994]      // skip if-block "continueId == 4"
[21:09:16.994]    </control>
[21:09:16.998]    <control if="!isProduction" while="" timeout="0" info="">
[21:09:16.998]      // if-block "!isProduction"
[21:09:16.998]        // =>  FALSE
[21:09:16.998]      // skip if-block "!isProduction"
[21:09:16.998]    </control>
[21:09:16.999]  </sequence>
[21:09:16.999]  
[21:10:58.952]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:10:58.952]  
[21:10:58.960]  <debugvars>
[21:10:58.960]    // Pre-defined
[21:10:58.960]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:10:58.960]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:10:58.960]    __dp=0x00000000
[21:10:58.960]    __ap=0x00000000
[21:10:58.960]    __traceout=0x00000000      (Trace Disabled)
[21:10:58.960]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:10:58.960]    __FlashAddr=0x00000000
[21:10:58.960]    __FlashLen=0x00000000
[21:10:58.960]    __FlashArg=0x00000000
[21:10:58.960]    __FlashOp=0x00000000
[21:10:58.960]    __Result=0x00000000
[21:10:58.960]  </debugvars>
[21:10:58.960]  
[21:10:58.960]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:10:58.960]    <block atomic="false" info="">
[21:10:58.960]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:10:58.960]        // -> [isSWJ <= 0x00000001]
[21:10:58.960]      __var hasDormant = __protocol & 0x00020000;
[21:10:58.960]        // -> [hasDormant <= 0x00000000]
[21:10:58.960]      __var protType   = __protocol & 0x0000FFFF;
[21:10:58.960]        // -> [protType <= 0x00000002]
[21:10:58.960]    </block>
[21:10:58.960]    <control if="protType == 1" while="" timeout="0" info="">
[21:10:58.960]      // if-block "protType == 1"
[21:10:58.960]        // =>  FALSE
[21:10:58.960]      // skip if-block "protType == 1"
[21:10:58.960]    </control>
[21:10:58.960]    <control if="protType == 2" while="" timeout="0" info="">
[21:10:58.960]      // if-block "protType == 2"
[21:10:58.960]        // =>  TRUE
[21:10:58.960]      <control if="isSWJ" while="" timeout="0" info="">
[21:10:58.960]        // if-block "isSWJ"
[21:10:58.960]          // =>  TRUE
[21:10:58.960]        <control if="hasDormant" while="" timeout="0" info="">
[21:10:58.964]          // if-block "hasDormant"
[21:10:58.964]            // =>  FALSE
[21:10:58.964]          // skip if-block "hasDormant"
[21:10:58.964]        </control>
[21:10:58.964]        <control if="!hasDormant" while="" timeout="0" info="">
[21:10:58.964]          // if-block "!hasDormant"
[21:10:58.964]            // =>  TRUE
[21:10:58.964]          <block atomic="false" info="">
[21:10:58.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:10:58.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:10:58.964]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:10:58.964]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:10:58.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:10:58.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:10:58.964]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:10:58.966]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:10:58.966]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:10:58.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:10:58.966]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:10:58.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:10:58.966]          </block>
[21:10:58.966]          // end if-block "!hasDormant"
[21:10:58.966]        </control>
[21:10:58.966]        // end if-block "isSWJ"
[21:10:58.966]      </control>
[21:10:58.966]      <control if="!isSWJ" while="" timeout="0" info="">
[21:10:58.968]        // if-block "!isSWJ"
[21:10:58.968]          // =>  FALSE
[21:10:58.968]        // skip if-block "!isSWJ"
[21:10:58.968]      </control>
[21:10:58.968]      <block atomic="false" info="">
[21:10:58.968]        ReadDP(0x0);
[21:10:58.968]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:10:58.968]      </block>
[21:10:58.968]      // end if-block "protType == 2"
[21:10:58.968]    </control>
[21:10:58.968]  </sequence>
[21:10:58.968]  
[21:10:58.969]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:10:58.969]  
[21:10:58.969]  <debugvars>
[21:10:58.969]    // Pre-defined
[21:10:58.969]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:10:58.969]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:10:58.969]    __dp=0x00000000
[21:10:58.969]    __ap=0x00000000
[21:10:58.969]    __traceout=0x00000000      (Trace Disabled)
[21:10:58.969]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:10:58.969]    __FlashAddr=0x00000000
[21:10:58.969]    __FlashLen=0x00000000
[21:10:58.969]    __FlashArg=0x00000000
[21:10:58.969]    __FlashOp=0x00000000
[21:10:58.969]    __Result=0x00000000
[21:10:58.969]  </debugvars>
[21:10:58.969]  
[21:10:58.969]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:10:58.969]    <block atomic="false" info="">
[21:10:58.972]      __var SW_DP_ABORT       = 0x0;
[21:10:58.972]        // -> [SW_DP_ABORT <= 0x00000000]
[21:10:58.972]      __var DP_CTRL_STAT      = 0x4;
[21:10:58.972]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:10:58.972]      __var DP_SELECT         = 0x8;
[21:10:58.972]        // -> [DP_SELECT <= 0x00000008]
[21:10:58.972]      __var powered_down      = 0;
[21:10:58.972]        // -> [powered_down <= 0x00000000]
[21:10:58.972]      WriteDP(DP_SELECT, 0x00000000);
[21:10:58.973]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:10:58.973]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:10:58.973]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:10:58.973]        // -> [powered_down <= 0x00000001]
[21:10:58.975]    </block>
[21:10:58.975]    <control if="powered_down" while="" timeout="0" info="">
[21:10:58.975]      // if-block "powered_down"
[21:10:58.975]        // =>  TRUE
[21:10:58.975]      <block atomic="false" info="">
[21:10:58.975]        Message(0, "Debug/System power-up request sent");
[21:10:58.978]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:10:58.980]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:10:58.980]      </block>
[21:10:58.980]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:10:58.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:10:58.980]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:10:58.980]        // while-condition  =>  FALSE
[21:10:58.980]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:10:58.980]      </control>
[21:10:58.980]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:10:58.980]        // if-block "(__protocol & 0xFFFF) == 1"
[21:10:58.980]          // =>  FALSE
[21:10:58.980]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:10:58.980]      </control>
[21:10:58.980]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:10:58.980]        // if-block "(__protocol & 0xFFFF) == 2"
[21:10:58.980]          // =>  TRUE
[21:10:58.980]        <block atomic="false" info="">
[21:10:58.980]          Message(0, "executing SWD power up");
[21:10:58.980]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:10:58.984]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:10:58.984]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:10:58.984]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:10:58.984]        </block>
[21:10:58.984]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:10:58.984]      </control>
[21:10:58.984]      // end if-block "powered_down"
[21:10:58.984]    </control>
[21:10:58.984]    <block atomic="false" info="">
[21:10:58.984]      __var DEBUG_PORT_VAL    = 0;
[21:10:58.984]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:10:58.984]      __var ACCESS_POINT_VAL  = 0;
[21:10:58.984]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:10:58.986]      __ap = 1; 
[21:10:58.986]        // -> [__ap <= 0x00000001]
[21:10:58.986]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:10:58.986]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:10:58.988]      __ap = 4;
[21:10:58.988]        // -> [__ap <= 0x00000004]
[21:10:58.988]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:10:58.989]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:10:58.990]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:10:58.990]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:10:58.990]    </block>
[21:10:58.990]    <block atomic="false" info="">
[21:10:58.990]      __var nReset = 0x80;
[21:10:58.990]        // -> [nReset <= 0x00000080]
[21:10:58.990]      __var canReadPins = 0;
[21:10:58.990]        // -> [canReadPins <= 0x00000000]
[21:10:58.990]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:10:58.992]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:10:58.992]        // -> [canReadPins <= 0x00000001]
[21:10:58.992]    </block>
[21:10:58.992]    <control if="" while="1" timeout="200" info="">
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.992]      // while "1"  (timeout="200")
[21:10:58.992]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.996]      // while "1"  (timeout="200")
[21:10:58.996]      // while-condition  =>  TRUE
[21:10:58.998]      // while "1"  (timeout="200")
[21:10:58.998]      // while-condition  =>  TRUE
[21:10:58.998]      // while "1"  (timeout="200")
[21:10:58.998]      // while-condition  =>  TRUE
[21:10:58.998]      // while "1"  (timeout="200")
[21:10:58.998]      // while-condition  =>  TRUE
[21:10:58.999]      // while "1"  (timeout="200")
[21:10:58.999]      // while-condition  =>  TRUE
[21:10:58.999]      // while "1"  (timeout="200")
[21:10:58.999]      // while-condition  =>  TRUE
[21:10:58.999]      // while "1"  (timeout="200")
[21:10:58.999]      // while-condition  =>  TRUE
[21:10:58.999]      // while "1"  (timeout="200")
[21:10:58.999]      // while-condition  =>  TRUE
[21:10:58.999]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.000]      // while-condition  =>  TRUE
[21:10:59.000]      // while "1"  (timeout="200")
[21:10:59.004]      // while-condition  =>  TRUE
[21:10:59.004]      // while "1"  (timeout="200")
[21:10:59.004]      // while  =>  TIMEOUT
[21:10:59.004]      // end while "1"
[21:10:59.004]    </control>
[21:10:59.004]    <control if="canReadPins" while="" timeout="0" info="">
[21:10:59.004]      // if-block "canReadPins"
[21:10:59.004]        // =>  TRUE
[21:10:59.004]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:10:59.004]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:10:59.004]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:10:59.004]        // while-condition  =>  FALSE
[21:10:59.004]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:10:59.004]      </control>
[21:10:59.004]      // end if-block "canReadPins"
[21:10:59.004]    </control>
[21:10:59.004]    <control if="!canReadPins" while="" timeout="0" info="">
[21:10:59.004]      // if-block "!canReadPins"
[21:10:59.004]        // =>  FALSE
[21:10:59.004]      // skip if-block "!canReadPins"
[21:10:59.004]    </control>
[21:10:59.006]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:10:59.006]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:10:59.006]        // =>  TRUE
[21:10:59.006]      <block atomic="false" info="">
[21:10:59.006]        WriteAP(0x00, 0x190008);
[21:10:59.008]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:10:59.008]        WriteAP(0xF0, 0x01);
[21:10:59.009]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:10:59.009]      </block>
[21:10:59.009]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:10:59.009]    </control>
[21:10:59.009]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:10:59.009]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:10:59.009]        // =>  FALSE
[21:10:59.009]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:10:59.009]    </control>
[21:10:59.009]    <block atomic="false" info="">
[21:10:59.009]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:10:59.009]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:10:59.009]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:10:59.009]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:10:59.014]      __ap = 0; //lets make sure we reset the access point selection
[21:10:59.014]        // -> [__ap <= 0x00000000]
[21:10:59.014]    </block>
[21:10:59.014]  </sequence>
[21:10:59.014]  
[21:10:59.020]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:10:59.020]  
[21:10:59.020]  <debugvars>
[21:10:59.020]    // Pre-defined
[21:10:59.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:10:59.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:10:59.020]    __dp=0x00000000
[21:10:59.020]    __ap=0x00000000
[21:10:59.020]    __traceout=0x00000000      (Trace Disabled)
[21:10:59.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:10:59.020]    __FlashAddr=0x00000000
[21:10:59.020]    __FlashLen=0x00000000
[21:10:59.020]    __FlashArg=0x00000000
[21:10:59.020]    __FlashOp=0x00000000
[21:10:59.020]    __Result=0x00000000
[21:10:59.020]  </debugvars>
[21:10:59.020]  
[21:10:59.020]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:10:59.020]    <block atomic="false" info="">
[21:10:59.020]      __var deviceID = 0;
[21:10:59.020]        // -> [deviceID <= 0x00000000]
[21:10:59.020]      __var version = 0;
[21:10:59.020]        // -> [version <= 0x00000000]
[21:10:59.020]      __var partNum = 0;
[21:10:59.020]        // -> [partNum <= 0x00000000]
[21:10:59.020]      __var manuf = 0;
[21:10:59.020]        // -> [manuf <= 0x00000000]
[21:10:59.020]      __var isMSPM0G1X0X_G3X0X = 0;
[21:10:59.020]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:10:59.020]      __var isProduction = 0;
[21:10:59.020]        // -> [isProduction <= 0x00000000]
[21:10:59.020]      __var continueId = 0;
[21:10:59.020]        // -> [continueId <= 0x00000000]
[21:10:59.020]      deviceID =   Read32(0x41C40004);
[21:10:59.024]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:10:59.024]        // -> [deviceID <= 0x2BB8802F]
[21:10:59.024]      version = deviceID >> 28;
[21:10:59.024]        // -> [version <= 0x00000002]
[21:10:59.024]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:10:59.024]        // -> [partNum <= 0x0000BB88]
[21:10:59.024]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:10:59.024]        // -> [manuf <= 0x00000017]
[21:10:59.024]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:10:59.024]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:10:59.024]      isProduction = (version > 0);
[21:10:59.024]        // -> [isProduction <= 0x00000001]
[21:10:59.024]    </block>
[21:10:59.024]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:10:59.024]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:10:59.026]        // =>  FALSE
[21:10:59.026]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:10:59.026]    </control>
[21:10:59.026]    <control if="continueId == 4" while="" timeout="0" info="">
[21:10:59.026]      // if-block "continueId == 4"
[21:10:59.026]        // =>  FALSE
[21:10:59.026]      // skip if-block "continueId == 4"
[21:10:59.026]    </control>
[21:10:59.026]    <control if="!isProduction" while="" timeout="0" info="">
[21:10:59.026]      // if-block "!isProduction"
[21:10:59.026]        // =>  FALSE
[21:10:59.027]      // skip if-block "!isProduction"
[21:10:59.027]    </control>
[21:10:59.027]  </sequence>
[21:10:59.027]  
[21:11:55.857]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:11:55.857]  
[21:11:55.859]  <debugvars>
[21:11:55.859]    // Pre-defined
[21:11:55.859]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:11:55.859]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:11:55.859]    __dp=0x00000000
[21:11:55.859]    __ap=0x00000000
[21:11:55.859]    __traceout=0x00000000      (Trace Disabled)
[21:11:55.859]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:11:55.859]    __FlashAddr=0x00000000
[21:11:55.859]    __FlashLen=0x00000000
[21:11:55.859]    __FlashArg=0x00000000
[21:11:55.859]    __FlashOp=0x00000000
[21:11:55.859]    __Result=0x00000000
[21:11:55.860]  </debugvars>
[21:11:55.860]  
[21:11:55.860]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:11:55.860]    <block atomic="false" info="">
[21:11:55.860]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:11:55.860]        // -> [isSWJ <= 0x00000001]
[21:11:55.860]      __var hasDormant = __protocol & 0x00020000;
[21:11:55.860]        // -> [hasDormant <= 0x00000000]
[21:11:55.860]      __var protType   = __protocol & 0x0000FFFF;
[21:11:55.860]        // -> [protType <= 0x00000002]
[21:11:55.860]    </block>
[21:11:55.860]    <control if="protType == 1" while="" timeout="0" info="">
[21:11:55.860]      // if-block "protType == 1"
[21:11:55.860]        // =>  FALSE
[21:11:55.860]      // skip if-block "protType == 1"
[21:11:55.860]    </control>
[21:11:55.861]    <control if="protType == 2" while="" timeout="0" info="">
[21:11:55.861]      // if-block "protType == 2"
[21:11:55.861]        // =>  TRUE
[21:11:55.861]      <control if="isSWJ" while="" timeout="0" info="">
[21:11:55.861]        // if-block "isSWJ"
[21:11:55.861]          // =>  TRUE
[21:11:55.861]        <control if="hasDormant" while="" timeout="0" info="">
[21:11:55.861]          // if-block "hasDormant"
[21:11:55.861]            // =>  FALSE
[21:11:55.861]          // skip if-block "hasDormant"
[21:11:55.861]        </control>
[21:11:55.861]        <control if="!hasDormant" while="" timeout="0" info="">
[21:11:55.861]          // if-block "!hasDormant"
[21:11:55.861]            // =>  TRUE
[21:11:55.861]          <block atomic="false" info="">
[21:11:55.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:11:55.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:11:55.861]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:11:55.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:11:55.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:11:55.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:11:55.861]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:11:55.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:11:55.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:11:55.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:11:55.865]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:11:55.865]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:11:55.865]          </block>
[21:11:55.865]          // end if-block "!hasDormant"
[21:11:55.865]        </control>
[21:11:55.865]        // end if-block "isSWJ"
[21:11:55.865]      </control>
[21:11:55.865]      <control if="!isSWJ" while="" timeout="0" info="">
[21:11:55.865]        // if-block "!isSWJ"
[21:11:55.865]          // =>  FALSE
[21:11:55.865]        // skip if-block "!isSWJ"
[21:11:55.865]      </control>
[21:11:55.865]      <block atomic="false" info="">
[21:11:55.865]        ReadDP(0x0);
[21:11:55.867]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:11:55.867]      </block>
[21:11:55.867]      // end if-block "protType == 2"
[21:11:55.867]    </control>
[21:11:55.867]  </sequence>
[21:11:55.867]  
[21:11:55.868]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:11:55.868]  
[21:11:55.868]  <debugvars>
[21:11:55.868]    // Pre-defined
[21:11:55.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:11:55.868]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:11:55.868]    __dp=0x00000000
[21:11:55.868]    __ap=0x00000000
[21:11:55.869]    __traceout=0x00000000      (Trace Disabled)
[21:11:55.869]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:11:55.869]    __FlashAddr=0x00000000
[21:11:55.869]    __FlashLen=0x00000000
[21:11:55.869]    __FlashArg=0x00000000
[21:11:55.869]    __FlashOp=0x00000000
[21:11:55.869]    __Result=0x00000000
[21:11:55.869]  </debugvars>
[21:11:55.871]  
[21:11:55.871]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:11:55.871]    <block atomic="false" info="">
[21:11:55.871]      __var SW_DP_ABORT       = 0x0;
[21:11:55.871]        // -> [SW_DP_ABORT <= 0x00000000]
[21:11:55.871]      __var DP_CTRL_STAT      = 0x4;
[21:11:55.871]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:11:55.871]      __var DP_SELECT         = 0x8;
[21:11:55.871]        // -> [DP_SELECT <= 0x00000008]
[21:11:55.871]      __var powered_down      = 0;
[21:11:55.871]        // -> [powered_down <= 0x00000000]
[21:11:55.871]      WriteDP(DP_SELECT, 0x00000000);
[21:11:55.871]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:11:55.871]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:11:55.871]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:11:55.871]        // -> [powered_down <= 0x00000001]
[21:11:55.871]    </block>
[21:11:55.871]    <control if="powered_down" while="" timeout="0" info="">
[21:11:55.871]      // if-block "powered_down"
[21:11:55.871]        // =>  TRUE
[21:11:55.871]      <block atomic="false" info="">
[21:11:55.871]        Message(0, "Debug/System power-up request sent");
[21:11:55.874]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:11:55.874]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:11:55.874]      </block>
[21:11:55.874]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:11:55.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:11:55.874]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:11:55.874]        // while-condition  =>  FALSE
[21:11:55.874]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:11:55.874]      </control>
[21:11:55.877]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:11:55.877]        // if-block "(__protocol & 0xFFFF) == 1"
[21:11:55.877]          // =>  FALSE
[21:11:55.878]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:11:55.878]      </control>
[21:11:55.878]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:11:55.878]        // if-block "(__protocol & 0xFFFF) == 2"
[21:11:55.878]          // =>  TRUE
[21:11:55.878]        <block atomic="false" info="">
[21:11:55.878]          Message(0, "executing SWD power up");
[21:11:55.879]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:11:55.879]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:11:55.879]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:11:55.881]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:11:55.881]        </block>
[21:11:55.881]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:11:55.881]      </control>
[21:11:55.881]      // end if-block "powered_down"
[21:11:55.881]    </control>
[21:11:55.881]    <block atomic="false" info="">
[21:11:55.881]      __var DEBUG_PORT_VAL    = 0;
[21:11:55.881]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:11:55.881]      __var ACCESS_POINT_VAL  = 0;
[21:11:55.881]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:11:55.881]      __ap = 1; 
[21:11:55.881]        // -> [__ap <= 0x00000001]
[21:11:55.881]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:11:55.881]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:11:55.881]      __ap = 4;
[21:11:55.881]        // -> [__ap <= 0x00000004]
[21:11:55.881]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:11:55.881]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:11:55.885]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:11:55.885]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:11:55.888]    </block>
[21:11:55.888]    <block atomic="false" info="">
[21:11:55.888]      __var nReset = 0x80;
[21:11:55.888]        // -> [nReset <= 0x00000080]
[21:11:55.888]      __var canReadPins = 0;
[21:11:55.888]        // -> [canReadPins <= 0x00000000]
[21:11:55.888]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:11:55.888]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:11:55.888]        // -> [canReadPins <= 0x00000001]
[21:11:55.888]    </block>
[21:11:55.888]    <control if="" while="1" timeout="200" info="">
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.889]      // while-condition  =>  TRUE
[21:11:55.889]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.893]      // while "1"  (timeout="200")
[21:11:55.893]      // while-condition  =>  TRUE
[21:11:55.897]      // while "1"  (timeout="200")
[21:11:55.897]      // while  =>  TIMEOUT
[21:11:55.897]      // end while "1"
[21:11:55.897]    </control>
[21:11:55.897]    <control if="canReadPins" while="" timeout="0" info="">
[21:11:55.897]      // if-block "canReadPins"
[21:11:55.897]        // =>  TRUE
[21:11:55.897]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:11:55.899]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:11:55.899]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:11:55.899]        // while-condition  =>  FALSE
[21:11:55.899]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:11:55.899]      </control>
[21:11:55.899]      // end if-block "canReadPins"
[21:11:55.899]    </control>
[21:11:55.899]    <control if="!canReadPins" while="" timeout="0" info="">
[21:11:55.899]      // if-block "!canReadPins"
[21:11:55.899]        // =>  FALSE
[21:11:55.899]      // skip if-block "!canReadPins"
[21:11:55.899]    </control>
[21:11:55.899]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:11:55.899]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:11:55.899]        // =>  TRUE
[21:11:55.899]      <block atomic="false" info="">
[21:11:55.899]        WriteAP(0x00, 0x190008);
[21:11:55.902]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:11:55.902]        WriteAP(0xF0, 0x01);
[21:11:55.902]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:11:55.902]      </block>
[21:11:55.902]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:11:55.902]    </control>
[21:11:55.902]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:11:55.902]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:11:55.902]        // =>  FALSE
[21:11:55.902]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:11:55.902]    </control>
[21:11:55.902]    <block atomic="false" info="">
[21:11:55.902]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:11:55.902]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:11:55.906]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:11:55.906]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:11:55.906]      __ap = 0; //lets make sure we reset the access point selection
[21:11:55.907]        // -> [__ap <= 0x00000000]
[21:11:55.907]    </block>
[21:11:55.907]  </sequence>
[21:11:55.908]  
[21:11:55.914]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:11:55.914]  
[21:11:55.914]  <debugvars>
[21:11:55.914]    // Pre-defined
[21:11:55.914]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:11:55.914]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:11:55.914]    __dp=0x00000000
[21:11:55.914]    __ap=0x00000000
[21:11:55.914]    __traceout=0x00000000      (Trace Disabled)
[21:11:55.914]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:11:55.914]    __FlashAddr=0x00000000
[21:11:55.914]    __FlashLen=0x00000000
[21:11:55.914]    __FlashArg=0x00000000
[21:11:55.914]    __FlashOp=0x00000000
[21:11:55.914]    __Result=0x00000000
[21:11:55.914]  </debugvars>
[21:11:55.914]  
[21:11:55.914]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:11:55.914]    <block atomic="false" info="">
[21:11:55.914]      __var deviceID = 0;
[21:11:55.914]        // -> [deviceID <= 0x00000000]
[21:11:55.914]      __var version = 0;
[21:11:55.914]        // -> [version <= 0x00000000]
[21:11:55.914]      __var partNum = 0;
[21:11:55.914]        // -> [partNum <= 0x00000000]
[21:11:55.914]      __var manuf = 0;
[21:11:55.914]        // -> [manuf <= 0x00000000]
[21:11:55.914]      __var isMSPM0G1X0X_G3X0X = 0;
[21:11:55.914]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:11:55.917]      __var isProduction = 0;
[21:11:55.917]        // -> [isProduction <= 0x00000000]
[21:11:55.917]      __var continueId = 0;
[21:11:55.917]        // -> [continueId <= 0x00000000]
[21:11:55.917]      deviceID =   Read32(0x41C40004);
[21:11:55.919]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:11:55.919]        // -> [deviceID <= 0x2BB8802F]
[21:11:55.919]      version = deviceID >> 28;
[21:11:55.919]        // -> [version <= 0x00000002]
[21:11:55.919]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:11:55.919]        // -> [partNum <= 0x0000BB88]
[21:11:55.919]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:11:55.919]        // -> [manuf <= 0x00000017]
[21:11:55.919]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:11:55.919]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:11:55.919]      isProduction = (version > 0);
[21:11:55.919]        // -> [isProduction <= 0x00000001]
[21:11:55.919]    </block>
[21:11:55.919]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:11:55.919]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:11:55.919]        // =>  FALSE
[21:11:55.919]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:11:55.919]    </control>
[21:11:55.921]    <control if="continueId == 4" while="" timeout="0" info="">
[21:11:55.921]      // if-block "continueId == 4"
[21:11:55.921]        // =>  FALSE
[21:11:55.921]      // skip if-block "continueId == 4"
[21:11:55.921]    </control>
[21:11:55.921]    <control if="!isProduction" while="" timeout="0" info="">
[21:11:55.921]      // if-block "!isProduction"
[21:11:55.921]        // =>  FALSE
[21:11:55.921]      // skip if-block "!isProduction"
[21:11:55.921]    </control>
[21:11:55.921]  </sequence>
[21:11:55.921]  
[21:15:03.482]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:15:03.482]  
[21:15:03.491]  <debugvars>
[21:15:03.491]    // Pre-defined
[21:15:03.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:03.491]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:15:03.491]    __dp=0x00000000
[21:15:03.491]    __ap=0x00000000
[21:15:03.491]    __traceout=0x00000000      (Trace Disabled)
[21:15:03.491]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:03.491]    __FlashAddr=0x00000000
[21:15:03.491]    __FlashLen=0x00000000
[21:15:03.492]    __FlashArg=0x00000000
[21:15:03.492]    __FlashOp=0x00000000
[21:15:03.492]    __Result=0x00000000
[21:15:03.492]  </debugvars>
[21:15:03.492]  
[21:15:03.492]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:15:03.492]    <block atomic="false" info="">
[21:15:03.492]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:15:03.492]        // -> [isSWJ <= 0x00000001]
[21:15:03.492]      __var hasDormant = __protocol & 0x00020000;
[21:15:03.492]        // -> [hasDormant <= 0x00000000]
[21:15:03.493]      __var protType   = __protocol & 0x0000FFFF;
[21:15:03.493]        // -> [protType <= 0x00000002]
[21:15:03.493]    </block>
[21:15:03.493]    <control if="protType == 1" while="" timeout="0" info="">
[21:15:03.493]      // if-block "protType == 1"
[21:15:03.493]        // =>  FALSE
[21:15:03.493]      // skip if-block "protType == 1"
[21:15:03.493]    </control>
[21:15:03.493]    <control if="protType == 2" while="" timeout="0" info="">
[21:15:03.493]      // if-block "protType == 2"
[21:15:03.493]        // =>  TRUE
[21:15:03.494]      <control if="isSWJ" while="" timeout="0" info="">
[21:15:03.494]        // if-block "isSWJ"
[21:15:03.494]          // =>  TRUE
[21:15:03.494]        <control if="hasDormant" while="" timeout="0" info="">
[21:15:03.494]          // if-block "hasDormant"
[21:15:03.494]            // =>  FALSE
[21:15:03.494]          // skip if-block "hasDormant"
[21:15:03.494]        </control>
[21:15:03.494]        <control if="!hasDormant" while="" timeout="0" info="">
[21:15:03.494]          // if-block "!hasDormant"
[21:15:03.494]            // =>  TRUE
[21:15:03.494]          <block atomic="false" info="">
[21:15:03.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:15:03.494]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:03.494]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:15:03.494]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:15:03.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:15:03.494]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:03.494]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:15:03.494]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:15:03.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:15:03.494]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:03.494]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:15:03.494]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:15:03.498]          </block>
[21:15:03.498]          // end if-block "!hasDormant"
[21:15:03.498]        </control>
[21:15:03.498]        // end if-block "isSWJ"
[21:15:03.498]      </control>
[21:15:03.498]      <control if="!isSWJ" while="" timeout="0" info="">
[21:15:03.498]        // if-block "!isSWJ"
[21:15:03.498]          // =>  FALSE
[21:15:03.498]        // skip if-block "!isSWJ"
[21:15:03.498]      </control>
[21:15:03.498]      <block atomic="false" info="">
[21:15:03.498]        ReadDP(0x0);
[21:15:03.498]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:15:03.498]      </block>
[21:15:03.498]      // end if-block "protType == 2"
[21:15:03.498]    </control>
[21:15:03.498]  </sequence>
[21:15:03.498]  
[21:15:03.501]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:15:03.501]  
[21:15:03.501]  <debugvars>
[21:15:03.501]    // Pre-defined
[21:15:03.501]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:03.501]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:15:03.501]    __dp=0x00000000
[21:15:03.501]    __ap=0x00000000
[21:15:03.501]    __traceout=0x00000000      (Trace Disabled)
[21:15:03.501]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:03.502]    __FlashAddr=0x00000000
[21:15:03.502]    __FlashLen=0x00000000
[21:15:03.502]    __FlashArg=0x00000000
[21:15:03.502]    __FlashOp=0x00000000
[21:15:03.503]    __Result=0x00000000
[21:15:03.503]  </debugvars>
[21:15:03.503]  
[21:15:03.503]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:15:03.503]    <block atomic="false" info="">
[21:15:03.503]      __var SW_DP_ABORT       = 0x0;
[21:15:03.503]        // -> [SW_DP_ABORT <= 0x00000000]
[21:15:03.503]      __var DP_CTRL_STAT      = 0x4;
[21:15:03.503]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:15:03.503]      __var DP_SELECT         = 0x8;
[21:15:03.503]        // -> [DP_SELECT <= 0x00000008]
[21:15:03.503]      __var powered_down      = 0;
[21:15:03.503]        // -> [powered_down <= 0x00000000]
[21:15:03.503]      WriteDP(DP_SELECT, 0x00000000);
[21:15:03.503]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:15:03.503]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:15:03.503]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:15:03.503]        // -> [powered_down <= 0x00000001]
[21:15:03.503]    </block>
[21:15:03.503]    <control if="powered_down" while="" timeout="0" info="">
[21:15:03.503]      // if-block "powered_down"
[21:15:03.503]        // =>  TRUE
[21:15:03.503]      <block atomic="false" info="">
[21:15:03.503]        Message(0, "Debug/System power-up request sent");
[21:15:03.503]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:15:03.506]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:15:03.506]      </block>
[21:15:03.506]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:15:03.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:15:03.506]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:15:03.506]        // while-condition  =>  FALSE
[21:15:03.506]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:15:03.506]      </control>
[21:15:03.506]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:15:03.506]        // if-block "(__protocol & 0xFFFF) == 1"
[21:15:03.506]          // =>  FALSE
[21:15:03.506]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:15:03.506]      </control>
[21:15:03.506]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:15:03.506]        // if-block "(__protocol & 0xFFFF) == 2"
[21:15:03.506]          // =>  TRUE
[21:15:03.506]        <block atomic="false" info="">
[21:15:03.506]          Message(0, "executing SWD power up");
[21:15:03.506]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:15:03.506]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:15:03.506]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:15:03.506]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:15:03.511]        </block>
[21:15:03.511]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:15:03.511]      </control>
[21:15:03.511]      // end if-block "powered_down"
[21:15:03.511]    </control>
[21:15:03.511]    <block atomic="false" info="">
[21:15:03.511]      __var DEBUG_PORT_VAL    = 0;
[21:15:03.511]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:15:03.511]      __var ACCESS_POINT_VAL  = 0;
[21:15:03.511]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:15:03.511]      __ap = 1; 
[21:15:03.511]        // -> [__ap <= 0x00000001]
[21:15:03.511]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:15:03.513]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:15:03.513]      __ap = 4;
[21:15:03.513]        // -> [__ap <= 0x00000004]
[21:15:03.513]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:15:03.514]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:15:03.514]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:15:03.514]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:15:03.515]    </block>
[21:15:03.515]    <block atomic="false" info="">
[21:15:03.515]      __var nReset = 0x80;
[21:15:03.515]        // -> [nReset <= 0x00000080]
[21:15:03.515]      __var canReadPins = 0;
[21:15:03.515]        // -> [canReadPins <= 0x00000000]
[21:15:03.515]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:15:03.515]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:15:03.515]        // -> [canReadPins <= 0x00000001]
[21:15:03.515]    </block>
[21:15:03.515]    <control if="" while="1" timeout="200" info="">
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.515]      // while "1"  (timeout="200")
[21:15:03.515]      // while-condition  =>  TRUE
[21:15:03.519]      // while "1"  (timeout="200")
[21:15:03.519]      // while-condition  =>  TRUE
[21:15:03.519]      // while "1"  (timeout="200")
[21:15:03.519]      // while-condition  =>  TRUE
[21:15:03.519]      // while "1"  (timeout="200")
[21:15:03.519]      // while-condition  =>  TRUE
[21:15:03.519]      // while "1"  (timeout="200")
[21:15:03.519]      // while-condition  =>  TRUE
[21:15:03.519]      // while "1"  (timeout="200")
[21:15:03.519]      // while-condition  =>  TRUE
[21:15:03.519]      // while "1"  (timeout="200")
[21:15:03.519]      // while-condition  =>  TRUE
[21:15:03.521]      // while "1"  (timeout="200")
[21:15:03.521]      // while  =>  TIMEOUT
[21:15:03.521]      // end while "1"
[21:15:03.521]    </control>
[21:15:03.521]    <control if="canReadPins" while="" timeout="0" info="">
[21:15:03.521]      // if-block "canReadPins"
[21:15:03.521]        // =>  TRUE
[21:15:03.521]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:15:03.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:15:03.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:15:03.521]        // while-condition  =>  FALSE
[21:15:03.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:15:03.521]      </control>
[21:15:03.522]      // end if-block "canReadPins"
[21:15:03.522]    </control>
[21:15:03.522]    <control if="!canReadPins" while="" timeout="0" info="">
[21:15:03.522]      // if-block "!canReadPins"
[21:15:03.522]        // =>  FALSE
[21:15:03.522]      // skip if-block "!canReadPins"
[21:15:03.522]    </control>
[21:15:03.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:15:03.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:15:03.522]        // =>  TRUE
[21:15:03.522]      <block atomic="false" info="">
[21:15:03.523]        WriteAP(0x00, 0x190008);
[21:15:03.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:15:03.523]        WriteAP(0xF0, 0x01);
[21:15:03.523]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:15:03.523]      </block>
[21:15:03.523]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:15:03.523]    </control>
[21:15:03.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:15:03.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:15:03.523]        // =>  FALSE
[21:15:03.523]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:15:03.523]    </control>
[21:15:03.523]    <block atomic="false" info="">
[21:15:03.523]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:15:03.523]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:15:03.523]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:15:03.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:15:03.531]      __ap = 0; //lets make sure we reset the access point selection
[21:15:03.531]        // -> [__ap <= 0x00000000]
[21:15:03.531]    </block>
[21:15:03.531]  </sequence>
[21:15:03.531]  
[21:15:03.537]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:15:03.537]  
[21:15:03.537]  <debugvars>
[21:15:03.537]    // Pre-defined
[21:15:03.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:03.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:15:03.537]    __dp=0x00000000
[21:15:03.537]    __ap=0x00000000
[21:15:03.537]    __traceout=0x00000000      (Trace Disabled)
[21:15:03.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:03.537]    __FlashAddr=0x00000000
[21:15:03.537]    __FlashLen=0x00000000
[21:15:03.537]    __FlashArg=0x00000000
[21:15:03.537]    __FlashOp=0x00000000
[21:15:03.537]    __Result=0x00000000
[21:15:03.539]  </debugvars>
[21:15:03.539]  
[21:15:03.539]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:15:03.539]    <block atomic="false" info="">
[21:15:03.539]      __var deviceID = 0;
[21:15:03.539]        // -> [deviceID <= 0x00000000]
[21:15:03.539]      __var version = 0;
[21:15:03.539]        // -> [version <= 0x00000000]
[21:15:03.539]      __var partNum = 0;
[21:15:03.539]        // -> [partNum <= 0x00000000]
[21:15:03.539]      __var manuf = 0;
[21:15:03.539]        // -> [manuf <= 0x00000000]
[21:15:03.541]      __var isMSPM0G1X0X_G3X0X = 0;
[21:15:03.541]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:15:03.541]      __var isProduction = 0;
[21:15:03.541]        // -> [isProduction <= 0x00000000]
[21:15:03.541]      __var continueId = 0;
[21:15:03.541]        // -> [continueId <= 0x00000000]
[21:15:03.541]      deviceID =   Read32(0x41C40004);
[21:15:03.542]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:15:03.542]        // -> [deviceID <= 0x2BB8802F]
[21:15:03.542]      version = deviceID >> 28;
[21:15:03.543]        // -> [version <= 0x00000002]
[21:15:03.543]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:15:03.543]        // -> [partNum <= 0x0000BB88]
[21:15:03.543]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:15:03.543]        // -> [manuf <= 0x00000017]
[21:15:03.543]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:15:03.543]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:15:03.543]      isProduction = (version > 0);
[21:15:03.543]        // -> [isProduction <= 0x00000001]
[21:15:03.543]    </block>
[21:15:03.543]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:15:03.544]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:15:03.544]        // =>  FALSE
[21:15:03.544]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:15:03.544]    </control>
[21:15:03.544]    <control if="continueId == 4" while="" timeout="0" info="">
[21:15:03.544]      // if-block "continueId == 4"
[21:15:03.544]        // =>  FALSE
[21:15:03.544]      // skip if-block "continueId == 4"
[21:15:03.544]    </control>
[21:15:03.544]    <control if="!isProduction" while="" timeout="0" info="">
[21:15:03.544]      // if-block "!isProduction"
[21:15:03.544]        // =>  FALSE
[21:15:03.544]      // skip if-block "!isProduction"
[21:15:03.544]    </control>
[21:15:03.544]  </sequence>
[21:15:03.544]  
[21:15:25.031]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:15:25.031]  
[21:15:25.031]  <debugvars>
[21:15:25.031]    // Pre-defined
[21:15:25.031]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:25.031]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:15:25.031]    __dp=0x00000000
[21:15:25.031]    __ap=0x00000000
[21:15:25.031]    __traceout=0x00000000      (Trace Disabled)
[21:15:25.032]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:25.032]    __FlashAddr=0x00000000
[21:15:25.032]    __FlashLen=0x00000000
[21:15:25.032]    __FlashArg=0x00000000
[21:15:25.032]    __FlashOp=0x00000000
[21:15:25.032]    __Result=0x00000000
[21:15:25.032]  </debugvars>
[21:15:25.032]  
[21:15:25.032]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:15:25.032]    <block atomic="false" info="">
[21:15:25.033]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:15:25.033]        // -> [isSWJ <= 0x00000001]
[21:15:25.033]      __var hasDormant = __protocol & 0x00020000;
[21:15:25.033]        // -> [hasDormant <= 0x00000000]
[21:15:25.033]      __var protType   = __protocol & 0x0000FFFF;
[21:15:25.033]        // -> [protType <= 0x00000002]
[21:15:25.033]    </block>
[21:15:25.033]    <control if="protType == 1" while="" timeout="0" info="">
[21:15:25.033]      // if-block "protType == 1"
[21:15:25.033]        // =>  FALSE
[21:15:25.033]      // skip if-block "protType == 1"
[21:15:25.034]    </control>
[21:15:25.034]    <control if="protType == 2" while="" timeout="0" info="">
[21:15:25.034]      // if-block "protType == 2"
[21:15:25.034]        // =>  TRUE
[21:15:25.034]      <control if="isSWJ" while="" timeout="0" info="">
[21:15:25.034]        // if-block "isSWJ"
[21:15:25.034]          // =>  TRUE
[21:15:25.034]        <control if="hasDormant" while="" timeout="0" info="">
[21:15:25.034]          // if-block "hasDormant"
[21:15:25.034]            // =>  FALSE
[21:15:25.034]          // skip if-block "hasDormant"
[21:15:25.034]        </control>
[21:15:25.035]        <control if="!hasDormant" while="" timeout="0" info="">
[21:15:25.035]          // if-block "!hasDormant"
[21:15:25.035]            // =>  TRUE
[21:15:25.035]          <block atomic="false" info="">
[21:15:25.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:15:25.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:25.035]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:15:25.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:15:25.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:15:25.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:25.035]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:15:25.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:15:25.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:15:25.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:25.035]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:15:25.035]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:15:25.035]          </block>
[21:15:25.039]          // end if-block "!hasDormant"
[21:15:25.039]        </control>
[21:15:25.039]        // end if-block "isSWJ"
[21:15:25.039]      </control>
[21:15:25.039]      <control if="!isSWJ" while="" timeout="0" info="">
[21:15:25.039]        // if-block "!isSWJ"
[21:15:25.039]          // =>  FALSE
[21:15:25.039]        // skip if-block "!isSWJ"
[21:15:25.039]      </control>
[21:15:25.039]      <block atomic="false" info="">
[21:15:25.039]        ReadDP(0x0);
[21:15:25.041]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:15:25.041]      </block>
[21:15:25.041]      // end if-block "protType == 2"
[21:15:25.041]    </control>
[21:15:25.041]  </sequence>
[21:15:25.041]  
[21:15:25.042]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:15:25.042]  
[21:15:25.042]  <debugvars>
[21:15:25.042]    // Pre-defined
[21:15:25.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:25.042]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:15:25.043]    __dp=0x00000000
[21:15:25.043]    __ap=0x00000000
[21:15:25.043]    __traceout=0x00000000      (Trace Disabled)
[21:15:25.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:25.043]    __FlashAddr=0x00000000
[21:15:25.043]    __FlashLen=0x00000000
[21:15:25.043]    __FlashArg=0x00000000
[21:15:25.043]    __FlashOp=0x00000000
[21:15:25.043]    __Result=0x00000000
[21:15:25.043]  </debugvars>
[21:15:25.043]  
[21:15:25.043]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:15:25.043]    <block atomic="false" info="">
[21:15:25.043]      __var SW_DP_ABORT       = 0x0;
[21:15:25.043]        // -> [SW_DP_ABORT <= 0x00000000]
[21:15:25.043]      __var DP_CTRL_STAT      = 0x4;
[21:15:25.043]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:15:25.043]      __var DP_SELECT         = 0x8;
[21:15:25.043]        // -> [DP_SELECT <= 0x00000008]
[21:15:25.043]      __var powered_down      = 0;
[21:15:25.043]        // -> [powered_down <= 0x00000000]
[21:15:25.043]      WriteDP(DP_SELECT, 0x00000000);
[21:15:25.043]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:15:25.043]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:15:25.043]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:15:25.043]        // -> [powered_down <= 0x00000001]
[21:15:25.043]    </block>
[21:15:25.043]    <control if="powered_down" while="" timeout="0" info="">
[21:15:25.043]      // if-block "powered_down"
[21:15:25.043]        // =>  TRUE
[21:15:25.043]      <block atomic="false" info="">
[21:15:25.043]        Message(0, "Debug/System power-up request sent");
[21:15:25.047]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:15:25.047]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:15:25.047]      </block>
[21:15:25.047]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:15:25.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:15:25.047]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:15:25.047]        // while-condition  =>  FALSE
[21:15:25.047]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:15:25.047]      </control>
[21:15:25.047]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:15:25.047]        // if-block "(__protocol & 0xFFFF) == 1"
[21:15:25.047]          // =>  FALSE
[21:15:25.047]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:15:25.047]      </control>
[21:15:25.047]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:15:25.047]        // if-block "(__protocol & 0xFFFF) == 2"
[21:15:25.047]          // =>  TRUE
[21:15:25.047]        <block atomic="false" info="">
[21:15:25.047]          Message(0, "executing SWD power up");
[21:15:25.052]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:15:25.052]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:15:25.052]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:15:25.053]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:15:25.053]        </block>
[21:15:25.053]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:15:25.053]      </control>
[21:15:25.053]      // end if-block "powered_down"
[21:15:25.054]    </control>
[21:15:25.054]    <block atomic="false" info="">
[21:15:25.054]      __var DEBUG_PORT_VAL    = 0;
[21:15:25.054]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:15:25.054]      __var ACCESS_POINT_VAL  = 0;
[21:15:25.054]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:15:25.054]      __ap = 1; 
[21:15:25.054]        // -> [__ap <= 0x00000001]
[21:15:25.054]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:15:25.055]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:15:25.055]      __ap = 4;
[21:15:25.055]        // -> [__ap <= 0x00000004]
[21:15:25.055]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:15:25.055]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:15:25.055]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:15:25.055]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:15:25.055]    </block>
[21:15:25.055]    <block atomic="false" info="">
[21:15:25.059]      __var nReset = 0x80;
[21:15:25.059]        // -> [nReset <= 0x00000080]
[21:15:25.059]      __var canReadPins = 0;
[21:15:25.059]        // -> [canReadPins <= 0x00000000]
[21:15:25.059]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:15:25.059]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:15:25.059]        // -> [canReadPins <= 0x00000001]
[21:15:25.059]    </block>
[21:15:25.059]    <control if="" while="1" timeout="200" info="">
[21:15:25.059]      // while "1"  (timeout="200")
[21:15:25.059]      // while-condition  =>  TRUE
[21:15:25.059]      // while "1"  (timeout="200")
[21:15:25.059]      // while-condition  =>  TRUE
[21:15:25.059]      // while "1"  (timeout="200")
[21:15:25.059]      // while-condition  =>  TRUE
[21:15:25.059]      // while "1"  (timeout="200")
[21:15:25.059]      // while-condition  =>  TRUE
[21:15:25.059]      // while "1"  (timeout="200")
[21:15:25.059]      // while-condition  =>  TRUE
[21:15:25.061]      // while "1"  (timeout="200")
[21:15:25.061]      // while-condition  =>  TRUE
[21:15:25.061]      // while "1"  (timeout="200")
[21:15:25.061]      // while-condition  =>  TRUE
[21:15:25.061]      // while "1"  (timeout="200")
[21:15:25.061]      // while-condition  =>  TRUE
[21:15:25.062]      // while "1"  (timeout="200")
[21:15:25.062]      // while-condition  =>  TRUE
[21:15:25.062]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.063]      // while-condition  =>  TRUE
[21:15:25.063]      // while "1"  (timeout="200")
[21:15:25.067]      // while-condition  =>  TRUE
[21:15:25.067]      // while "1"  (timeout="200")
[21:15:25.067]      // while  =>  TIMEOUT
[21:15:25.067]      // end while "1"
[21:15:25.067]    </control>
[21:15:25.067]    <control if="canReadPins" while="" timeout="0" info="">
[21:15:25.067]      // if-block "canReadPins"
[21:15:25.067]        // =>  TRUE
[21:15:25.067]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:15:25.067]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:15:25.067]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:15:25.067]        // while-condition  =>  FALSE
[21:15:25.067]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:15:25.067]      </control>
[21:15:25.067]      // end if-block "canReadPins"
[21:15:25.067]    </control>
[21:15:25.067]    <control if="!canReadPins" while="" timeout="0" info="">
[21:15:25.067]      // if-block "!canReadPins"
[21:15:25.067]        // =>  FALSE
[21:15:25.067]      // skip if-block "!canReadPins"
[21:15:25.067]    </control>
[21:15:25.067]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:15:25.067]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:15:25.067]        // =>  TRUE
[21:15:25.067]      <block atomic="false" info="">
[21:15:25.067]        WriteAP(0x00, 0x190008);
[21:15:25.071]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:15:25.071]        WriteAP(0xF0, 0x01);
[21:15:25.071]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:15:25.071]      </block>
[21:15:25.072]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:15:25.072]    </control>
[21:15:25.072]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:15:25.072]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:15:25.072]        // =>  FALSE
[21:15:25.072]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:15:25.073]    </control>
[21:15:25.073]    <block atomic="false" info="">
[21:15:25.073]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:15:25.074]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:15:25.074]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:15:25.074]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:15:25.075]      __ap = 0; //lets make sure we reset the access point selection
[21:15:25.075]        // -> [__ap <= 0x00000000]
[21:15:25.075]    </block>
[21:15:25.075]  </sequence>
[21:15:25.075]  
[21:15:25.082]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:15:25.082]  
[21:15:25.082]  <debugvars>
[21:15:25.082]    // Pre-defined
[21:15:25.082]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:25.082]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:15:25.082]    __dp=0x00000000
[21:15:25.083]    __ap=0x00000000
[21:15:25.083]    __traceout=0x00000000      (Trace Disabled)
[21:15:25.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:25.083]    __FlashAddr=0x00000000
[21:15:25.083]    __FlashLen=0x00000000
[21:15:25.083]    __FlashArg=0x00000000
[21:15:25.083]    __FlashOp=0x00000000
[21:15:25.083]    __Result=0x00000000
[21:15:25.084]  </debugvars>
[21:15:25.084]  
[21:15:25.084]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:15:25.084]    <block atomic="false" info="">
[21:15:25.084]      __var deviceID = 0;
[21:15:25.084]        // -> [deviceID <= 0x00000000]
[21:15:25.084]      __var version = 0;
[21:15:25.084]        // -> [version <= 0x00000000]
[21:15:25.084]      __var partNum = 0;
[21:15:25.084]        // -> [partNum <= 0x00000000]
[21:15:25.084]      __var manuf = 0;
[21:15:25.084]        // -> [manuf <= 0x00000000]
[21:15:25.084]      __var isMSPM0G1X0X_G3X0X = 0;
[21:15:25.084]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:15:25.084]      __var isProduction = 0;
[21:15:25.084]        // -> [isProduction <= 0x00000000]
[21:15:25.084]      __var continueId = 0;
[21:15:25.086]        // -> [continueId <= 0x00000000]
[21:15:25.086]      deviceID =   Read32(0x41C40004);
[21:15:25.087]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:15:25.087]        // -> [deviceID <= 0x2BB8802F]
[21:15:25.087]      version = deviceID >> 28;
[21:15:25.087]        // -> [version <= 0x00000002]
[21:15:25.087]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:15:25.087]        // -> [partNum <= 0x0000BB88]
[21:15:25.087]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:15:25.087]        // -> [manuf <= 0x00000017]
[21:15:25.087]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:15:25.087]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:15:25.087]      isProduction = (version > 0);
[21:15:25.087]        // -> [isProduction <= 0x00000001]
[21:15:25.087]    </block>
[21:15:25.087]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:15:25.087]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:15:25.087]        // =>  FALSE
[21:15:25.087]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:15:25.087]    </control>
[21:15:25.089]    <control if="continueId == 4" while="" timeout="0" info="">
[21:15:25.089]      // if-block "continueId == 4"
[21:15:25.089]        // =>  FALSE
[21:15:25.089]      // skip if-block "continueId == 4"
[21:15:25.089]    </control>
[21:15:25.089]    <control if="!isProduction" while="" timeout="0" info="">
[21:15:25.089]      // if-block "!isProduction"
[21:15:25.089]        // =>  FALSE
[21:15:25.089]      // skip if-block "!isProduction"
[21:15:25.089]    </control>
[21:15:25.089]  </sequence>
[21:15:25.089]  
[21:17:56.820]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:17:56.820]  
[21:17:56.829]  <debugvars>
[21:17:56.829]    // Pre-defined
[21:17:56.829]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:17:56.829]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:17:56.829]    __dp=0x00000000
[21:17:56.829]    __ap=0x00000000
[21:17:56.829]    __traceout=0x00000000      (Trace Disabled)
[21:17:56.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:17:56.830]    __FlashAddr=0x00000000
[21:17:56.830]    __FlashLen=0x00000000
[21:17:56.830]    __FlashArg=0x00000000
[21:17:56.830]    __FlashOp=0x00000000
[21:17:56.830]    __Result=0x00000000
[21:17:56.830]  </debugvars>
[21:17:56.830]  
[21:17:56.830]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:17:56.830]    <block atomic="false" info="">
[21:17:56.831]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:17:56.831]        // -> [isSWJ <= 0x00000001]
[21:17:56.831]      __var hasDormant = __protocol & 0x00020000;
[21:17:56.831]        // -> [hasDormant <= 0x00000000]
[21:17:56.831]      __var protType   = __protocol & 0x0000FFFF;
[21:17:56.831]        // -> [protType <= 0x00000002]
[21:17:56.831]    </block>
[21:17:56.831]    <control if="protType == 1" while="" timeout="0" info="">
[21:17:56.831]      // if-block "protType == 1"
[21:17:56.831]        // =>  FALSE
[21:17:56.831]      // skip if-block "protType == 1"
[21:17:56.831]    </control>
[21:17:56.831]    <control if="protType == 2" while="" timeout="0" info="">
[21:17:56.831]      // if-block "protType == 2"
[21:17:56.831]        // =>  TRUE
[21:17:56.831]      <control if="isSWJ" while="" timeout="0" info="">
[21:17:56.831]        // if-block "isSWJ"
[21:17:56.831]          // =>  TRUE
[21:17:56.831]        <control if="hasDormant" while="" timeout="0" info="">
[21:17:56.831]          // if-block "hasDormant"
[21:17:56.831]            // =>  FALSE
[21:17:56.831]          // skip if-block "hasDormant"
[21:17:56.831]        </control>
[21:17:56.831]        <control if="!hasDormant" while="" timeout="0" info="">
[21:17:56.831]          // if-block "!hasDormant"
[21:17:56.831]            // =>  TRUE
[21:17:56.831]          <block atomic="false" info="">
[21:17:56.831]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:17:56.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:17:56.834]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:17:56.834]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:17:56.834]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:17:56.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:17:56.834]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:17:56.834]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:17:56.834]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:17:56.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:17:56.834]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:17:56.834]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:17:56.834]          </block>
[21:17:56.834]          // end if-block "!hasDormant"
[21:17:56.834]        </control>
[21:17:56.834]        // end if-block "isSWJ"
[21:17:56.834]      </control>
[21:17:56.834]      <control if="!isSWJ" while="" timeout="0" info="">
[21:17:56.834]        // if-block "!isSWJ"
[21:17:56.834]          // =>  FALSE
[21:17:56.834]        // skip if-block "!isSWJ"
[21:17:56.834]      </control>
[21:17:56.834]      <block atomic="false" info="">
[21:17:56.834]        ReadDP(0x0);
[21:17:56.834]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:17:56.838]      </block>
[21:17:56.838]      // end if-block "protType == 2"
[21:17:56.838]    </control>
[21:17:56.838]  </sequence>
[21:17:56.838]  
[21:17:56.838]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:17:56.838]  
[21:17:56.838]  <debugvars>
[21:17:56.838]    // Pre-defined
[21:17:56.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:17:56.838]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:17:56.838]    __dp=0x00000000
[21:17:56.838]    __ap=0x00000000
[21:17:56.838]    __traceout=0x00000000      (Trace Disabled)
[21:17:56.838]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:17:56.838]    __FlashAddr=0x00000000
[21:17:56.840]    __FlashLen=0x00000000
[21:17:56.840]    __FlashArg=0x00000000
[21:17:56.840]    __FlashOp=0x00000000
[21:17:56.840]    __Result=0x00000000
[21:17:56.840]  </debugvars>
[21:17:56.840]  
[21:17:56.840]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:17:56.840]    <block atomic="false" info="">
[21:17:56.840]      __var SW_DP_ABORT       = 0x0;
[21:17:56.841]        // -> [SW_DP_ABORT <= 0x00000000]
[21:17:56.841]      __var DP_CTRL_STAT      = 0x4;
[21:17:56.841]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:17:56.841]      __var DP_SELECT         = 0x8;
[21:17:56.841]        // -> [DP_SELECT <= 0x00000008]
[21:17:56.841]      __var powered_down      = 0;
[21:17:56.841]        // -> [powered_down <= 0x00000000]
[21:17:56.841]      WriteDP(DP_SELECT, 0x00000000);
[21:17:56.842]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:17:56.842]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:17:56.842]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:17:56.842]        // -> [powered_down <= 0x00000001]
[21:17:56.842]    </block>
[21:17:56.842]    <control if="powered_down" while="" timeout="0" info="">
[21:17:56.842]      // if-block "powered_down"
[21:17:56.842]        // =>  TRUE
[21:17:56.842]      <block atomic="false" info="">
[21:17:56.842]        Message(0, "Debug/System power-up request sent");
[21:17:56.846]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:17:56.846]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:17:56.846]      </block>
[21:17:56.846]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:17:56.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:17:56.846]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:17:56.846]        // while-condition  =>  FALSE
[21:17:56.846]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:17:56.846]      </control>
[21:17:56.846]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:17:56.846]        // if-block "(__protocol & 0xFFFF) == 1"
[21:17:56.846]          // =>  FALSE
[21:17:56.846]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:17:56.846]      </control>
[21:17:56.846]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:17:56.846]        // if-block "(__protocol & 0xFFFF) == 2"
[21:17:56.846]          // =>  TRUE
[21:17:56.846]        <block atomic="false" info="">
[21:17:56.846]          Message(0, "executing SWD power up");
[21:17:56.850]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:17:56.851]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:17:56.851]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:17:56.851]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:17:56.851]        </block>
[21:17:56.851]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:17:56.851]      </control>
[21:17:56.851]      // end if-block "powered_down"
[21:17:56.851]    </control>
[21:17:56.851]    <block atomic="false" info="">
[21:17:56.851]      __var DEBUG_PORT_VAL    = 0;
[21:17:56.851]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:17:56.851]      __var ACCESS_POINT_VAL  = 0;
[21:17:56.851]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:17:56.851]      __ap = 1; 
[21:17:56.851]        // -> [__ap <= 0x00000001]
[21:17:56.851]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:17:56.854]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:17:56.854]      __ap = 4;
[21:17:56.854]        // -> [__ap <= 0x00000004]
[21:17:56.854]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:17:56.854]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:17:56.856]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:17:56.856]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:17:56.856]    </block>
[21:17:56.858]    <block atomic="false" info="">
[21:17:56.858]      __var nReset = 0x80;
[21:17:56.858]        // -> [nReset <= 0x00000080]
[21:17:56.858]      __var canReadPins = 0;
[21:17:56.858]        // -> [canReadPins <= 0x00000000]
[21:17:56.858]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:17:56.858]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:17:56.858]        // -> [canReadPins <= 0x00000001]
[21:17:56.858]    </block>
[21:17:56.858]    <control if="" while="1" timeout="200" info="">
[21:17:56.858]      // while "1"  (timeout="200")
[21:17:56.858]      // while-condition  =>  TRUE
[21:17:56.858]      // while "1"  (timeout="200")
[21:17:56.858]      // while-condition  =>  TRUE
[21:17:56.858]      // while "1"  (timeout="200")
[21:17:56.858]      // while-condition  =>  TRUE
[21:17:56.858]      // while "1"  (timeout="200")
[21:17:56.858]      // while-condition  =>  TRUE
[21:17:56.860]      // while "1"  (timeout="200")
[21:17:56.860]      // while-condition  =>  TRUE
[21:17:56.860]      // while "1"  (timeout="200")
[21:17:56.860]      // while-condition  =>  TRUE
[21:17:56.860]      // while "1"  (timeout="200")
[21:17:56.860]      // while-condition  =>  TRUE
[21:17:56.860]      // while "1"  (timeout="200")
[21:17:56.860]      // while-condition  =>  TRUE
[21:17:56.860]      // while "1"  (timeout="200")
[21:17:56.860]      // while-condition  =>  TRUE
[21:17:56.860]      // while "1"  (timeout="200")
[21:17:56.861]      // while-condition  =>  TRUE
[21:17:56.861]      // while "1"  (timeout="200")
[21:17:56.861]      // while-condition  =>  TRUE
[21:17:56.861]      // while "1"  (timeout="200")
[21:17:56.861]      // while-condition  =>  TRUE
[21:17:56.861]      // while "1"  (timeout="200")
[21:17:56.861]      // while-condition  =>  TRUE
[21:17:56.861]      // while "1"  (timeout="200")
[21:17:56.861]      // while-condition  =>  TRUE
[21:17:56.861]      // while "1"  (timeout="200")
[21:17:56.861]      // while-condition  =>  TRUE
[21:17:56.861]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.862]      // while "1"  (timeout="200")
[21:17:56.862]      // while-condition  =>  TRUE
[21:17:56.864]      // while "1"  (timeout="200")
[21:17:56.864]      // while  =>  TIMEOUT
[21:17:56.864]      // end while "1"
[21:17:56.864]    </control>
[21:17:56.864]    <control if="canReadPins" while="" timeout="0" info="">
[21:17:56.864]      // if-block "canReadPins"
[21:17:56.864]        // =>  TRUE
[21:17:56.864]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:17:56.864]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:17:56.864]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:17:56.864]        // while-condition  =>  FALSE
[21:17:56.864]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:17:56.864]      </control>
[21:17:56.864]      // end if-block "canReadPins"
[21:17:56.864]    </control>
[21:17:56.866]    <control if="!canReadPins" while="" timeout="0" info="">
[21:17:56.866]      // if-block "!canReadPins"
[21:17:56.866]        // =>  FALSE
[21:17:56.866]      // skip if-block "!canReadPins"
[21:17:56.866]    </control>
[21:17:56.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:17:56.866]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:17:56.866]        // =>  TRUE
[21:17:56.866]      <block atomic="false" info="">
[21:17:56.866]        WriteAP(0x00, 0x190008);
[21:17:56.866]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:17:56.866]        WriteAP(0xF0, 0x01);
[21:17:56.866]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:17:56.866]      </block>
[21:17:56.866]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:17:56.866]    </control>
[21:17:56.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:17:56.866]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:17:56.866]        // =>  FALSE
[21:17:56.866]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:17:56.866]    </control>
[21:17:56.870]    <block atomic="false" info="">
[21:17:56.870]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:17:56.871]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:17:56.871]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:17:56.871]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:17:56.871]      __ap = 0; //lets make sure we reset the access point selection
[21:17:56.871]        // -> [__ap <= 0x00000000]
[21:17:56.871]    </block>
[21:17:56.871]  </sequence>
[21:17:56.871]  
[21:17:56.878]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:17:56.878]  
[21:17:56.880]  <debugvars>
[21:17:56.880]    // Pre-defined
[21:17:56.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:17:56.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:17:56.880]    __dp=0x00000000
[21:17:56.880]    __ap=0x00000000
[21:17:56.880]    __traceout=0x00000000      (Trace Disabled)
[21:17:56.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:17:56.881]    __FlashAddr=0x00000000
[21:17:56.881]    __FlashLen=0x00000000
[21:17:56.881]    __FlashArg=0x00000000
[21:17:56.881]    __FlashOp=0x00000000
[21:17:56.881]    __Result=0x00000000
[21:17:56.881]  </debugvars>
[21:17:56.881]  
[21:17:56.881]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:17:56.881]    <block atomic="false" info="">
[21:17:56.882]      __var deviceID = 0;
[21:17:56.882]        // -> [deviceID <= 0x00000000]
[21:17:56.882]      __var version = 0;
[21:17:56.882]        // -> [version <= 0x00000000]
[21:17:56.882]      __var partNum = 0;
[21:17:56.882]        // -> [partNum <= 0x00000000]
[21:17:56.882]      __var manuf = 0;
[21:17:56.882]        // -> [manuf <= 0x00000000]
[21:17:56.882]      __var isMSPM0G1X0X_G3X0X = 0;
[21:17:56.882]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:17:56.882]      __var isProduction = 0;
[21:17:56.882]        // -> [isProduction <= 0x00000000]
[21:17:56.882]      __var continueId = 0;
[21:17:56.882]        // -> [continueId <= 0x00000000]
[21:17:56.882]      deviceID =   Read32(0x41C40004);
[21:17:56.884]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:17:56.884]        // -> [deviceID <= 0x2BB8802F]
[21:17:56.884]      version = deviceID >> 28;
[21:17:56.884]        // -> [version <= 0x00000002]
[21:17:56.884]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:17:56.884]        // -> [partNum <= 0x0000BB88]
[21:17:56.884]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:17:56.886]        // -> [manuf <= 0x00000017]
[21:17:56.886]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:17:56.886]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:17:56.886]      isProduction = (version > 0);
[21:17:56.886]        // -> [isProduction <= 0x00000001]
[21:17:56.886]    </block>
[21:17:56.886]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:17:56.886]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:17:56.886]        // =>  FALSE
[21:17:56.886]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:17:56.886]    </control>
[21:17:56.886]    <control if="continueId == 4" while="" timeout="0" info="">
[21:17:56.886]      // if-block "continueId == 4"
[21:17:56.886]        // =>  FALSE
[21:17:56.886]      // skip if-block "continueId == 4"
[21:17:56.886]    </control>
[21:17:56.886]    <control if="!isProduction" while="" timeout="0" info="">
[21:17:56.886]      // if-block "!isProduction"
[21:17:56.886]        // =>  FALSE
[21:17:56.886]      // skip if-block "!isProduction"
[21:17:56.886]    </control>
[21:17:56.886]  </sequence>
[21:17:56.886]  
[21:18:15.961]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:18:15.961]  
[21:18:15.970]  <debugvars>
[21:18:15.970]    // Pre-defined
[21:18:15.970]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:18:15.970]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:18:15.970]    __dp=0x00000000
[21:18:15.970]    __ap=0x00000000
[21:18:15.970]    __traceout=0x00000000      (Trace Disabled)
[21:18:15.970]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:18:15.970]    __FlashAddr=0x00000000
[21:18:15.971]    __FlashLen=0x00000000
[21:18:15.971]    __FlashArg=0x00000000
[21:18:15.971]    __FlashOp=0x00000000
[21:18:15.971]    __Result=0x00000000
[21:18:15.971]  </debugvars>
[21:18:15.971]  
[21:18:15.971]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:18:15.971]    <block atomic="false" info="">
[21:18:15.972]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:18:15.972]        // -> [isSWJ <= 0x00000001]
[21:18:15.972]      __var hasDormant = __protocol & 0x00020000;
[21:18:15.972]        // -> [hasDormant <= 0x00000000]
[21:18:15.972]      __var protType   = __protocol & 0x0000FFFF;
[21:18:15.972]        // -> [protType <= 0x00000002]
[21:18:15.972]    </block>
[21:18:15.972]    <control if="protType == 1" while="" timeout="0" info="">
[21:18:15.972]      // if-block "protType == 1"
[21:18:15.972]        // =>  FALSE
[21:18:15.972]      // skip if-block "protType == 1"
[21:18:15.972]    </control>
[21:18:15.972]    <control if="protType == 2" while="" timeout="0" info="">
[21:18:15.972]      // if-block "protType == 2"
[21:18:15.972]        // =>  TRUE
[21:18:15.972]      <control if="isSWJ" while="" timeout="0" info="">
[21:18:15.972]        // if-block "isSWJ"
[21:18:15.972]          // =>  TRUE
[21:18:15.972]        <control if="hasDormant" while="" timeout="0" info="">
[21:18:15.972]          // if-block "hasDormant"
[21:18:15.972]            // =>  FALSE
[21:18:15.972]          // skip if-block "hasDormant"
[21:18:15.972]        </control>
[21:18:15.974]        <control if="!hasDormant" while="" timeout="0" info="">
[21:18:15.974]          // if-block "!hasDormant"
[21:18:15.974]            // =>  TRUE
[21:18:15.974]          <block atomic="false" info="">
[21:18:15.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:18:15.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:18:15.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:18:15.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:18:15.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:18:15.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:18:15.974]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:18:15.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:18:15.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:18:15.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:18:15.974]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:18:15.974]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:18:15.974]          </block>
[21:18:15.974]          // end if-block "!hasDormant"
[21:18:15.974]        </control>
[21:18:15.974]        // end if-block "isSWJ"
[21:18:15.978]      </control>
[21:18:15.978]      <control if="!isSWJ" while="" timeout="0" info="">
[21:18:15.978]        // if-block "!isSWJ"
[21:18:15.978]          // =>  FALSE
[21:18:15.978]        // skip if-block "!isSWJ"
[21:18:15.978]      </control>
[21:18:15.978]      <block atomic="false" info="">
[21:18:15.978]        ReadDP(0x0);
[21:18:15.978]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:18:15.978]      </block>
[21:18:15.978]      // end if-block "protType == 2"
[21:18:15.980]    </control>
[21:18:15.980]  </sequence>
[21:18:15.980]  
[21:18:15.980]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:18:15.980]  
[21:18:15.980]  <debugvars>
[21:18:15.980]    // Pre-defined
[21:18:15.980]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:18:15.980]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:18:15.980]    __dp=0x00000000
[21:18:15.980]    __ap=0x00000000
[21:18:15.980]    __traceout=0x00000000      (Trace Disabled)
[21:18:15.980]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:18:15.980]    __FlashAddr=0x00000000
[21:18:15.980]    __FlashLen=0x00000000
[21:18:15.980]    __FlashArg=0x00000000
[21:18:15.980]    __FlashOp=0x00000000
[21:18:15.980]    __Result=0x00000000
[21:18:15.980]  </debugvars>
[21:18:15.980]  
[21:18:15.982]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:18:15.982]    <block atomic="false" info="">
[21:18:15.982]      __var SW_DP_ABORT       = 0x0;
[21:18:15.982]        // -> [SW_DP_ABORT <= 0x00000000]
[21:18:15.982]      __var DP_CTRL_STAT      = 0x4;
[21:18:15.982]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:18:15.982]      __var DP_SELECT         = 0x8;
[21:18:15.982]        // -> [DP_SELECT <= 0x00000008]
[21:18:15.982]      __var powered_down      = 0;
[21:18:15.982]        // -> [powered_down <= 0x00000000]
[21:18:15.982]      WriteDP(DP_SELECT, 0x00000000);
[21:18:15.984]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:18:15.984]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:18:15.984]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:18:15.984]        // -> [powered_down <= 0x00000001]
[21:18:15.984]    </block>
[21:18:15.984]    <control if="powered_down" while="" timeout="0" info="">
[21:18:15.984]      // if-block "powered_down"
[21:18:15.984]        // =>  TRUE
[21:18:15.984]      <block atomic="false" info="">
[21:18:15.984]        Message(0, "Debug/System power-up request sent");
[21:18:15.986]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:18:15.986]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:18:15.986]      </block>
[21:18:15.986]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:18:15.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:18:15.986]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:18:15.986]        // while-condition  =>  FALSE
[21:18:15.986]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:18:15.986]      </control>
[21:18:15.986]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:18:15.986]        // if-block "(__protocol & 0xFFFF) == 1"
[21:18:15.986]          // =>  FALSE
[21:18:15.986]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:18:15.986]      </control>
[21:18:15.986]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:18:15.986]        // if-block "(__protocol & 0xFFFF) == 2"
[21:18:15.986]          // =>  TRUE
[21:18:15.986]        <block atomic="false" info="">
[21:18:15.986]          Message(0, "executing SWD power up");
[21:18:15.991]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:18:15.991]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:18:15.991]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:18:15.991]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:18:15.991]        </block>
[21:18:15.991]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:18:15.991]      </control>
[21:18:15.991]      // end if-block "powered_down"
[21:18:15.991]    </control>
[21:18:15.991]    <block atomic="false" info="">
[21:18:15.991]      __var DEBUG_PORT_VAL    = 0;
[21:18:15.991]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:18:15.991]      __var ACCESS_POINT_VAL  = 0;
[21:18:15.991]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:18:15.994]      __ap = 1; 
[21:18:15.994]        // -> [__ap <= 0x00000001]
[21:18:15.994]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:18:15.994]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:18:15.994]      __ap = 4;
[21:18:15.994]        // -> [__ap <= 0x00000004]
[21:18:15.994]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:18:15.994]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:18:15.994]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:18:15.994]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:18:15.998]    </block>
[21:18:15.998]    <block atomic="false" info="">
[21:18:15.998]      __var nReset = 0x80;
[21:18:15.998]        // -> [nReset <= 0x00000080]
[21:18:15.998]      __var canReadPins = 0;
[21:18:15.998]        // -> [canReadPins <= 0x00000000]
[21:18:15.998]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:18:15.998]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:18:15.998]        // -> [canReadPins <= 0x00000001]
[21:18:15.998]    </block>
[21:18:15.998]    <control if="" while="1" timeout="200" info="">
[21:18:15.998]      // while "1"  (timeout="200")
[21:18:16.000]      // while-condition  =>  TRUE
[21:18:16.000]      // while "1"  (timeout="200")
[21:18:16.000]      // while-condition  =>  TRUE
[21:18:16.000]      // while "1"  (timeout="200")
[21:18:16.000]      // while-condition  =>  TRUE
[21:18:16.000]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.001]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.001]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.001]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.001]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.001]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.001]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.001]      // while "1"  (timeout="200")
[21:18:16.001]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.002]      // while-condition  =>  TRUE
[21:18:16.002]      // while "1"  (timeout="200")
[21:18:16.004]      // while-condition  =>  TRUE
[21:18:16.004]      // while "1"  (timeout="200")
[21:18:16.004]      // while  =>  TIMEOUT
[21:18:16.004]      // end while "1"
[21:18:16.004]    </control>
[21:18:16.004]    <control if="canReadPins" while="" timeout="0" info="">
[21:18:16.004]      // if-block "canReadPins"
[21:18:16.004]        // =>  TRUE
[21:18:16.004]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:18:16.004]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:18:16.005]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:18:16.005]        // while-condition  =>  FALSE
[21:18:16.005]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:18:16.005]      </control>
[21:18:16.005]      // end if-block "canReadPins"
[21:18:16.005]    </control>
[21:18:16.005]    <control if="!canReadPins" while="" timeout="0" info="">
[21:18:16.005]      // if-block "!canReadPins"
[21:18:16.006]        // =>  FALSE
[21:18:16.006]      // skip if-block "!canReadPins"
[21:18:16.006]    </control>
[21:18:16.006]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:18:16.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:18:16.007]        // =>  TRUE
[21:18:16.007]      <block atomic="false" info="">
[21:18:16.007]        WriteAP(0x00, 0x190008);
[21:18:16.007]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:18:16.008]        WriteAP(0xF0, 0x01);
[21:18:16.009]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:18:16.009]      </block>
[21:18:16.009]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:18:16.009]    </control>
[21:18:16.009]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:18:16.009]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:18:16.009]        // =>  FALSE
[21:18:16.009]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:18:16.009]    </control>
[21:18:16.009]    <block atomic="false" info="">
[21:18:16.009]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:18:16.010]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:18:16.010]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:18:16.010]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:18:16.012]      __ap = 0; //lets make sure we reset the access point selection
[21:18:16.012]        // -> [__ap <= 0x00000000]
[21:18:16.012]    </block>
[21:18:16.012]  </sequence>
[21:18:16.012]  
[21:18:16.018]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:18:16.018]  
[21:18:16.018]  <debugvars>
[21:18:16.018]    // Pre-defined
[21:18:16.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:18:16.019]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:18:16.020]    __dp=0x00000000
[21:18:16.020]    __ap=0x00000000
[21:18:16.020]    __traceout=0x00000000      (Trace Disabled)
[21:18:16.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:18:16.020]    __FlashAddr=0x00000000
[21:18:16.020]    __FlashLen=0x00000000
[21:18:16.020]    __FlashArg=0x00000000
[21:18:16.021]    __FlashOp=0x00000000
[21:18:16.021]    __Result=0x00000000
[21:18:16.021]  </debugvars>
[21:18:16.021]  
[21:18:16.021]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:18:16.021]    <block atomic="false" info="">
[21:18:16.021]      __var deviceID = 0;
[21:18:16.021]        // -> [deviceID <= 0x00000000]
[21:18:16.021]      __var version = 0;
[21:18:16.021]        // -> [version <= 0x00000000]
[21:18:16.021]      __var partNum = 0;
[21:18:16.022]        // -> [partNum <= 0x00000000]
[21:18:16.022]      __var manuf = 0;
[21:18:16.022]        // -> [manuf <= 0x00000000]
[21:18:16.022]      __var isMSPM0G1X0X_G3X0X = 0;
[21:18:16.022]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:18:16.022]      __var isProduction = 0;
[21:18:16.022]        // -> [isProduction <= 0x00000000]
[21:18:16.022]      __var continueId = 0;
[21:18:16.022]        // -> [continueId <= 0x00000000]
[21:18:16.022]      deviceID =   Read32(0x41C40004);
[21:18:16.024]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:18:16.024]        // -> [deviceID <= 0x2BB8802F]
[21:18:16.024]      version = deviceID >> 28;
[21:18:16.024]        // -> [version <= 0x00000002]
[21:18:16.024]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:18:16.024]        // -> [partNum <= 0x0000BB88]
[21:18:16.024]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:18:16.024]        // -> [manuf <= 0x00000017]
[21:18:16.024]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:18:16.026]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:18:16.026]      isProduction = (version > 0);
[21:18:16.026]        // -> [isProduction <= 0x00000001]
[21:18:16.026]    </block>
[21:18:16.026]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:18:16.026]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:18:16.026]        // =>  FALSE
[21:18:16.026]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:18:16.026]    </control>
[21:18:16.026]    <control if="continueId == 4" while="" timeout="0" info="">
[21:18:16.026]      // if-block "continueId == 4"
[21:18:16.026]        // =>  FALSE
[21:18:16.026]      // skip if-block "continueId == 4"
[21:18:16.026]    </control>
[21:18:16.026]    <control if="!isProduction" while="" timeout="0" info="">
[21:18:16.026]      // if-block "!isProduction"
[21:18:16.026]        // =>  FALSE
[21:18:16.026]      // skip if-block "!isProduction"
[21:18:16.026]    </control>
[21:18:16.026]  </sequence>
[21:18:16.026]  
[21:22:19.914]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:22:19.914]  
[21:22:19.923]  <debugvars>
[21:22:19.923]    // Pre-defined
[21:22:19.923]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:19.924]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:19.924]    __dp=0x00000000
[21:22:19.924]    __ap=0x00000000
[21:22:19.924]    __traceout=0x00000000      (Trace Disabled)
[21:22:19.924]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:19.924]    __FlashAddr=0x00000000
[21:22:19.924]    __FlashLen=0x00000000
[21:22:19.924]    __FlashArg=0x00000000
[21:22:19.924]    __FlashOp=0x00000000
[21:22:19.924]    __Result=0x00000000
[21:22:19.924]  </debugvars>
[21:22:19.924]  
[21:22:19.924]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:22:19.924]    <block atomic="false" info="">
[21:22:19.925]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:22:19.925]        // -> [isSWJ <= 0x00000001]
[21:22:19.925]      __var hasDormant = __protocol & 0x00020000;
[21:22:19.925]        // -> [hasDormant <= 0x00000000]
[21:22:19.925]      __var protType   = __protocol & 0x0000FFFF;
[21:22:19.925]        // -> [protType <= 0x00000002]
[21:22:19.925]    </block>
[21:22:19.925]    <control if="protType == 1" while="" timeout="0" info="">
[21:22:19.925]      // if-block "protType == 1"
[21:22:19.925]        // =>  FALSE
[21:22:19.925]      // skip if-block "protType == 1"
[21:22:19.925]    </control>
[21:22:19.926]    <control if="protType == 2" while="" timeout="0" info="">
[21:22:19.926]      // if-block "protType == 2"
[21:22:19.926]        // =>  TRUE
[21:22:19.926]      <control if="isSWJ" while="" timeout="0" info="">
[21:22:19.926]        // if-block "isSWJ"
[21:22:19.926]          // =>  TRUE
[21:22:19.926]        <control if="hasDormant" while="" timeout="0" info="">
[21:22:19.926]          // if-block "hasDormant"
[21:22:19.926]            // =>  FALSE
[21:22:19.926]          // skip if-block "hasDormant"
[21:22:19.926]        </control>
[21:22:19.926]        <control if="!hasDormant" while="" timeout="0" info="">
[21:22:19.926]          // if-block "!hasDormant"
[21:22:19.926]            // =>  TRUE
[21:22:19.926]          <block atomic="false" info="">
[21:22:19.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:22:19.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:19.928]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:22:19.929]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:22:19.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:22:19.929]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:19.929]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:22:19.930]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:22:19.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:22:19.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:19.930]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:22:19.930]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:22:19.930]          </block>
[21:22:19.930]          // end if-block "!hasDormant"
[21:22:19.930]        </control>
[21:22:19.930]        // end if-block "isSWJ"
[21:22:19.930]      </control>
[21:22:19.930]      <control if="!isSWJ" while="" timeout="0" info="">
[21:22:19.930]        // if-block "!isSWJ"
[21:22:19.930]          // =>  FALSE
[21:22:19.930]        // skip if-block "!isSWJ"
[21:22:19.930]      </control>
[21:22:19.930]      <block atomic="false" info="">
[21:22:19.930]        ReadDP(0x0);
[21:22:19.930]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:22:19.930]      </block>
[21:22:19.930]      // end if-block "protType == 2"
[21:22:19.930]    </control>
[21:22:19.930]  </sequence>
[21:22:19.930]  
[21:22:19.934]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:22:19.934]  
[21:22:19.934]  <debugvars>
[21:22:19.934]    // Pre-defined
[21:22:19.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:19.934]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:19.934]    __dp=0x00000000
[21:22:19.935]    __ap=0x00000000
[21:22:19.935]    __traceout=0x00000000      (Trace Disabled)
[21:22:19.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:19.935]    __FlashAddr=0x00000000
[21:22:19.935]    __FlashLen=0x00000000
[21:22:19.935]    __FlashArg=0x00000000
[21:22:19.935]    __FlashOp=0x00000000
[21:22:19.935]    __Result=0x00000000
[21:22:19.935]  </debugvars>
[21:22:19.935]  
[21:22:19.935]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:22:19.935]    <block atomic="false" info="">
[21:22:19.935]      __var SW_DP_ABORT       = 0x0;
[21:22:19.935]        // -> [SW_DP_ABORT <= 0x00000000]
[21:22:19.935]      __var DP_CTRL_STAT      = 0x4;
[21:22:19.935]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:22:19.935]      __var DP_SELECT         = 0x8;
[21:22:19.935]        // -> [DP_SELECT <= 0x00000008]
[21:22:19.935]      __var powered_down      = 0;
[21:22:19.935]        // -> [powered_down <= 0x00000000]
[21:22:19.935]      WriteDP(DP_SELECT, 0x00000000);
[21:22:19.935]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:22:19.935]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:22:19.937]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:22:19.937]        // -> [powered_down <= 0x00000001]
[21:22:19.937]    </block>
[21:22:19.937]    <control if="powered_down" while="" timeout="0" info="">
[21:22:19.937]      // if-block "powered_down"
[21:22:19.937]        // =>  TRUE
[21:22:19.937]      <block atomic="false" info="">
[21:22:19.937]        Message(0, "Debug/System power-up request sent");
[21:22:19.941]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:22:19.941]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:22:19.941]      </block>
[21:22:19.941]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:22:19.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:22:19.941]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:22:19.943]        // while-condition  =>  FALSE
[21:22:19.943]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:22:19.943]      </control>
[21:22:19.943]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:22:19.943]        // if-block "(__protocol & 0xFFFF) == 1"
[21:22:19.943]          // =>  FALSE
[21:22:19.943]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:22:19.943]      </control>
[21:22:19.944]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:22:19.944]        // if-block "(__protocol & 0xFFFF) == 2"
[21:22:19.944]          // =>  TRUE
[21:22:19.944]        <block atomic="false" info="">
[21:22:19.944]          Message(0, "executing SWD power up");
[21:22:19.950]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:22:19.950]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:22:19.950]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:22:19.950]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:22:19.950]        </block>
[21:22:19.950]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:22:19.950]      </control>
[21:22:19.950]      // end if-block "powered_down"
[21:22:19.950]    </control>
[21:22:19.950]    <block atomic="false" info="">
[21:22:19.950]      __var DEBUG_PORT_VAL    = 0;
[21:22:19.950]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:22:19.950]      __var ACCESS_POINT_VAL  = 0;
[21:22:19.950]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:22:19.950]      __ap = 1; 
[21:22:19.950]        // -> [__ap <= 0x00000001]
[21:22:19.950]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:22:19.955]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:22:19.955]      __ap = 4;
[21:22:19.955]        // -> [__ap <= 0x00000004]
[21:22:19.955]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:19.956]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:22:19.956]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:22:19.956]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:22:19.959]    </block>
[21:22:19.959]    <block atomic="false" info="">
[21:22:19.959]      __var nReset = 0x80;
[21:22:19.959]        // -> [nReset <= 0x00000080]
[21:22:19.959]      __var canReadPins = 0;
[21:22:19.959]        // -> [canReadPins <= 0x00000000]
[21:22:19.959]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:22:19.959]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:22:19.959]        // -> [canReadPins <= 0x00000001]
[21:22:19.959]    </block>
[21:22:19.959]    <control if="" while="1" timeout="200" info="">
[21:22:19.959]      // while "1"  (timeout="200")
[21:22:19.959]      // while-condition  =>  TRUE
[21:22:19.959]      // while "1"  (timeout="200")
[21:22:19.959]      // while-condition  =>  TRUE
[21:22:19.959]      // while "1"  (timeout="200")
[21:22:19.959]      // while-condition  =>  TRUE
[21:22:19.959]      // while "1"  (timeout="200")
[21:22:19.959]      // while-condition  =>  TRUE
[21:22:19.959]      // while "1"  (timeout="200")
[21:22:19.959]      // while-condition  =>  TRUE
[21:22:19.962]      // while "1"  (timeout="200")
[21:22:19.962]      // while-condition  =>  TRUE
[21:22:19.962]      // while "1"  (timeout="200")
[21:22:19.962]      // while-condition  =>  TRUE
[21:22:19.962]      // while "1"  (timeout="200")
[21:22:19.962]      // while-condition  =>  TRUE
[21:22:19.962]      // while "1"  (timeout="200")
[21:22:19.962]      // while-condition  =>  TRUE
[21:22:19.962]      // while "1"  (timeout="200")
[21:22:19.962]      // while-condition  =>  TRUE
[21:22:19.962]      // while "1"  (timeout="200")
[21:22:19.962]      // while-condition  =>  TRUE
[21:22:19.962]      // while "1"  (timeout="200")
[21:22:19.963]      // while-condition  =>  TRUE
[21:22:19.963]      // while "1"  (timeout="200")
[21:22:19.963]      // while-condition  =>  TRUE
[21:22:19.963]      // while "1"  (timeout="200")
[21:22:19.963]      // while-condition  =>  TRUE
[21:22:19.963]      // while "1"  (timeout="200")
[21:22:19.963]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.964]      // while-condition  =>  TRUE
[21:22:19.964]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.966]      // while-condition  =>  TRUE
[21:22:19.966]      // while "1"  (timeout="200")
[21:22:19.969]      // while-condition  =>  TRUE
[21:22:19.969]      // while "1"  (timeout="200")
[21:22:19.969]      // while-condition  =>  TRUE
[21:22:19.969]      // while "1"  (timeout="200")
[21:22:19.969]      // while-condition  =>  TRUE
[21:22:19.969]      // while "1"  (timeout="200")
[21:22:19.969]      // while-condition  =>  TRUE
[21:22:19.970]      // while "1"  (timeout="200")
[21:22:19.970]      // while-condition  =>  TRUE
[21:22:19.970]      // while "1"  (timeout="200")
[21:22:19.970]      // while-condition  =>  TRUE
[21:22:19.970]      // while "1"  (timeout="200")
[21:22:19.970]      // while-condition  =>  TRUE
[21:22:19.970]      // while "1"  (timeout="200")
[21:22:19.970]      // while-condition  =>  TRUE
[21:22:19.970]      // while "1"  (timeout="200")
[21:22:19.970]      // while-condition  =>  TRUE
[21:22:19.970]      // while "1"  (timeout="200")
[21:22:19.970]      // while-condition  =>  TRUE
[21:22:19.971]      // while "1"  (timeout="200")
[21:22:19.971]      // while-condition  =>  TRUE
[21:22:19.971]      // while "1"  (timeout="200")
[21:22:19.971]      // while-condition  =>  TRUE
[21:22:19.971]      // while "1"  (timeout="200")
[21:22:19.971]      // while-condition  =>  TRUE
[21:22:19.971]      // while "1"  (timeout="200")
[21:22:19.971]      // while-condition  =>  TRUE
[21:22:19.971]      // while "1"  (timeout="200")
[21:22:19.971]      // while-condition  =>  TRUE
[21:22:19.971]      // while "1"  (timeout="200")
[21:22:19.973]      // while-condition  =>  TRUE
[21:22:19.973]      // while "1"  (timeout="200")
[21:22:19.973]      // while  =>  TIMEOUT
[21:22:19.973]      // end while "1"
[21:22:19.973]    </control>
[21:22:19.974]    <control if="canReadPins" while="" timeout="0" info="">
[21:22:19.974]      // if-block "canReadPins"
[21:22:19.974]        // =>  TRUE
[21:22:19.974]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:22:19.974]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:22:19.974]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:22:19.975]        // while-condition  =>  FALSE
[21:22:19.975]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:22:19.975]      </control>
[21:22:19.975]      // end if-block "canReadPins"
[21:22:19.975]    </control>
[21:22:19.975]    <control if="!canReadPins" while="" timeout="0" info="">
[21:22:19.975]      // if-block "!canReadPins"
[21:22:19.976]        // =>  FALSE
[21:22:19.976]      // skip if-block "!canReadPins"
[21:22:19.976]    </control>
[21:22:19.976]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:22:19.976]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:19.976]        // =>  TRUE
[21:22:19.976]      <block atomic="false" info="">
[21:22:19.976]        WriteAP(0x00, 0x190008);
[21:22:19.976]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:19.976]        WriteAP(0xF0, 0x01);
[21:22:19.978]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:19.978]      </block>
[21:22:19.978]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:19.978]    </control>
[21:22:19.979]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:22:19.979]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:19.979]        // =>  FALSE
[21:22:19.979]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:19.979]    </control>
[21:22:19.979]    <block atomic="false" info="">
[21:22:19.979]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:19.979]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:22:19.979]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:22:19.979]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:22:19.982]      __ap = 0; //lets make sure we reset the access point selection
[21:22:19.982]        // -> [__ap <= 0x00000000]
[21:22:19.982]    </block>
[21:22:19.982]  </sequence>
[21:22:19.982]  
[21:22:19.989]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:22:19.989]  
[21:22:19.989]  <debugvars>
[21:22:19.989]    // Pre-defined
[21:22:19.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:19.990]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:19.990]    __dp=0x00000000
[21:22:19.990]    __ap=0x00000000
[21:22:19.990]    __traceout=0x00000000      (Trace Disabled)
[21:22:19.990]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:19.990]    __FlashAddr=0x00000000
[21:22:19.990]    __FlashLen=0x00000000
[21:22:19.990]    __FlashArg=0x00000000
[21:22:19.990]    __FlashOp=0x00000000
[21:22:19.990]    __Result=0x00000000
[21:22:19.990]  </debugvars>
[21:22:19.990]  
[21:22:19.990]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:22:19.990]    <block atomic="false" info="">
[21:22:19.990]      __var deviceID = 0;
[21:22:19.990]        // -> [deviceID <= 0x00000000]
[21:22:19.990]      __var version = 0;
[21:22:19.990]        // -> [version <= 0x00000000]
[21:22:19.990]      __var partNum = 0;
[21:22:19.990]        // -> [partNum <= 0x00000000]
[21:22:19.990]      __var manuf = 0;
[21:22:19.990]        // -> [manuf <= 0x00000000]
[21:22:19.990]      __var isMSPM0G1X0X_G3X0X = 0;
[21:22:19.990]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:22:19.990]      __var isProduction = 0;
[21:22:19.990]        // -> [isProduction <= 0x00000000]
[21:22:19.990]      __var continueId = 0;
[21:22:19.990]        // -> [continueId <= 0x00000000]
[21:22:19.990]      deviceID =   Read32(0x41C40004);
[21:22:19.994]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:22:19.994]        // -> [deviceID <= 0x2BB8802F]
[21:22:19.994]      version = deviceID >> 28;
[21:22:19.994]        // -> [version <= 0x00000002]
[21:22:19.994]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:22:19.994]        // -> [partNum <= 0x0000BB88]
[21:22:19.994]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:22:19.994]        // -> [manuf <= 0x00000017]
[21:22:19.994]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:22:19.994]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:22:19.994]      isProduction = (version > 0);
[21:22:19.994]        // -> [isProduction <= 0x00000001]
[21:22:19.994]    </block>
[21:22:19.994]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:22:19.994]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:22:19.994]        // =>  FALSE
[21:22:19.994]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:22:19.994]    </control>
[21:22:19.994]    <control if="continueId == 4" while="" timeout="0" info="">
[21:22:19.994]      // if-block "continueId == 4"
[21:22:19.994]        // =>  FALSE
[21:22:19.994]      // skip if-block "continueId == 4"
[21:22:19.994]    </control>
[21:22:19.994]    <control if="!isProduction" while="" timeout="0" info="">
[21:22:19.994]      // if-block "!isProduction"
[21:22:19.998]        // =>  FALSE
[21:22:19.998]      // skip if-block "!isProduction"
[21:22:19.998]    </control>
[21:22:19.998]  </sequence>
[21:22:19.998]  
[21:27:15.275]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:27:15.275]  
[21:27:15.276]  <debugvars>
[21:27:15.276]    // Pre-defined
[21:27:15.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:27:15.276]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:27:15.276]    __dp=0x00000000
[21:27:15.276]    __ap=0x00000000
[21:27:15.276]    __traceout=0x00000000      (Trace Disabled)
[21:27:15.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:27:15.276]    __FlashAddr=0x00000000
[21:27:15.276]    __FlashLen=0x00000000
[21:27:15.278]    __FlashArg=0x00000000
[21:27:15.278]    __FlashOp=0x00000000
[21:27:15.278]    __Result=0x00000000
[21:27:15.278]  </debugvars>
[21:27:15.278]  
[21:27:15.278]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:27:15.278]    <block atomic="false" info="">
[21:27:15.278]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:27:15.278]        // -> [isSWJ <= 0x00000001]
[21:27:15.278]      __var hasDormant = __protocol & 0x00020000;
[21:27:15.278]        // -> [hasDormant <= 0x00000000]
[21:27:15.278]      __var protType   = __protocol & 0x0000FFFF;
[21:27:15.279]        // -> [protType <= 0x00000002]
[21:27:15.279]    </block>
[21:27:15.279]    <control if="protType == 1" while="" timeout="0" info="">
[21:27:15.279]      // if-block "protType == 1"
[21:27:15.279]        // =>  FALSE
[21:27:15.279]      // skip if-block "protType == 1"
[21:27:15.279]    </control>
[21:27:15.279]    <control if="protType == 2" while="" timeout="0" info="">
[21:27:15.279]      // if-block "protType == 2"
[21:27:15.279]        // =>  TRUE
[21:27:15.279]      <control if="isSWJ" while="" timeout="0" info="">
[21:27:15.279]        // if-block "isSWJ"
[21:27:15.280]          // =>  TRUE
[21:27:15.280]        <control if="hasDormant" while="" timeout="0" info="">
[21:27:15.280]          // if-block "hasDormant"
[21:27:15.280]            // =>  FALSE
[21:27:15.280]          // skip if-block "hasDormant"
[21:27:15.280]        </control>
[21:27:15.280]        <control if="!hasDormant" while="" timeout="0" info="">
[21:27:15.280]          // if-block "!hasDormant"
[21:27:15.280]            // =>  TRUE
[21:27:15.280]          <block atomic="false" info="">
[21:27:15.280]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:27:15.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:27:15.281]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:27:15.281]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:27:15.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:27:15.282]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:27:15.282]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:27:15.283]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:27:15.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:27:15.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:27:15.283]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:27:15.283]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:27:15.283]          </block>
[21:27:15.283]          // end if-block "!hasDormant"
[21:27:15.283]        </control>
[21:27:15.284]        // end if-block "isSWJ"
[21:27:15.284]      </control>
[21:27:15.284]      <control if="!isSWJ" while="" timeout="0" info="">
[21:27:15.284]        // if-block "!isSWJ"
[21:27:15.284]          // =>  FALSE
[21:27:15.284]        // skip if-block "!isSWJ"
[21:27:15.284]      </control>
[21:27:15.285]      <block atomic="false" info="">
[21:27:15.285]        ReadDP(0x0);
[21:27:15.285]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:27:15.285]      </block>
[21:27:15.285]      // end if-block "protType == 2"
[21:27:15.285]    </control>
[21:27:15.286]  </sequence>
[21:27:15.286]  
[21:27:15.286]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:27:15.286]  
[21:27:15.286]  <debugvars>
[21:27:15.286]    // Pre-defined
[21:27:15.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:27:15.287]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:27:15.287]    __dp=0x00000000
[21:27:15.287]    __ap=0x00000000
[21:27:15.287]    __traceout=0x00000000      (Trace Disabled)
[21:27:15.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:27:15.288]    __FlashAddr=0x00000000
[21:27:15.288]    __FlashLen=0x00000000
[21:27:15.288]    __FlashArg=0x00000000
[21:27:15.288]    __FlashOp=0x00000000
[21:27:15.288]    __Result=0x00000000
[21:27:15.288]  </debugvars>
[21:27:15.288]  
[21:27:15.288]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:27:15.288]    <block atomic="false" info="">
[21:27:15.288]      __var SW_DP_ABORT       = 0x0;
[21:27:15.288]        // -> [SW_DP_ABORT <= 0x00000000]
[21:27:15.288]      __var DP_CTRL_STAT      = 0x4;
[21:27:15.289]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:27:15.289]      __var DP_SELECT         = 0x8;
[21:27:15.289]        // -> [DP_SELECT <= 0x00000008]
[21:27:15.289]      __var powered_down      = 0;
[21:27:15.289]        // -> [powered_down <= 0x00000000]
[21:27:15.289]      WriteDP(DP_SELECT, 0x00000000);
[21:27:15.290]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:27:15.290]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:27:15.290]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:27:15.291]        // -> [powered_down <= 0x00000001]
[21:27:15.291]    </block>
[21:27:15.291]    <control if="powered_down" while="" timeout="0" info="">
[21:27:15.291]      // if-block "powered_down"
[21:27:15.291]        // =>  TRUE
[21:27:15.291]      <block atomic="false" info="">
[21:27:15.292]        Message(0, "Debug/System power-up request sent");
[21:27:15.293]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:27:15.293]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:27:15.293]      </block>
[21:27:15.294]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:27:15.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:27:15.295]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:27:15.295]        // while-condition  =>  FALSE
[21:27:15.295]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:27:15.295]      </control>
[21:27:15.295]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:27:15.295]        // if-block "(__protocol & 0xFFFF) == 1"
[21:27:15.296]          // =>  FALSE
[21:27:15.296]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:27:15.296]      </control>
[21:27:15.296]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:27:15.296]        // if-block "(__protocol & 0xFFFF) == 2"
[21:27:15.297]          // =>  TRUE
[21:27:15.297]        <block atomic="false" info="">
[21:27:15.297]          Message(0, "executing SWD power up");
[21:27:15.298]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:27:15.298]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:27:15.298]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:27:15.299]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:27:15.300]        </block>
[21:27:15.300]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:27:15.300]      </control>
[21:27:15.300]      // end if-block "powered_down"
[21:27:15.300]    </control>
[21:27:15.300]    <block atomic="false" info="">
[21:27:15.300]      __var DEBUG_PORT_VAL    = 0;
[21:27:15.300]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:27:15.300]      __var ACCESS_POINT_VAL  = 0;
[21:27:15.300]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:27:15.300]      __ap = 1; 
[21:27:15.300]        // -> [__ap <= 0x00000001]
[21:27:15.300]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:27:15.301]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:27:15.302]      __ap = 4;
[21:27:15.302]        // -> [__ap <= 0x00000004]
[21:27:15.302]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:27:15.304]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:27:15.304]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:27:15.304]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:27:15.305]    </block>
[21:27:15.305]    <block atomic="false" info="">
[21:27:15.305]      __var nReset = 0x80;
[21:27:15.305]        // -> [nReset <= 0x00000080]
[21:27:15.305]      __var canReadPins = 0;
[21:27:15.305]        // -> [canReadPins <= 0x00000000]
[21:27:15.305]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:27:15.307]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:27:15.307]        // -> [canReadPins <= 0x00000001]
[21:27:15.307]    </block>
[21:27:15.307]    <control if="" while="1" timeout="200" info="">
[21:27:15.307]      // while "1"  (timeout="200")
[21:27:15.307]      // while-condition  =>  TRUE
[21:27:15.307]      // while "1"  (timeout="200")
[21:27:15.307]      // while-condition  =>  TRUE
[21:27:15.307]      // while "1"  (timeout="200")
[21:27:15.307]      // while-condition  =>  TRUE
[21:27:15.307]      // while "1"  (timeout="200")
[21:27:15.308]      // while-condition  =>  TRUE
[21:27:15.308]      // while "1"  (timeout="200")
[21:27:15.308]      // while-condition  =>  TRUE
[21:27:15.308]      // while "1"  (timeout="200")
[21:27:15.308]      // while-condition  =>  TRUE
[21:27:15.308]      // while "1"  (timeout="200")
[21:27:15.308]      // while-condition  =>  TRUE
[21:27:15.308]      // while "1"  (timeout="200")
[21:27:15.308]      // while-condition  =>  TRUE
[21:27:15.308]      // while "1"  (timeout="200")
[21:27:15.308]      // while-condition  =>  TRUE
[21:27:15.308]      // while "1"  (timeout="200")
[21:27:15.309]      // while-condition  =>  TRUE
[21:27:15.309]      // while "1"  (timeout="200")
[21:27:15.309]      // while-condition  =>  TRUE
[21:27:15.309]      // while "1"  (timeout="200")
[21:27:15.309]      // while-condition  =>  TRUE
[21:27:15.309]      // while "1"  (timeout="200")
[21:27:15.309]      // while-condition  =>  TRUE
[21:27:15.309]      // while "1"  (timeout="200")
[21:27:15.309]      // while-condition  =>  TRUE
[21:27:15.309]      // while "1"  (timeout="200")
[21:27:15.309]      // while-condition  =>  TRUE
[21:27:15.309]      // while "1"  (timeout="200")
[21:27:15.309]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.310]      // while "1"  (timeout="200")
[21:27:15.310]      // while-condition  =>  TRUE
[21:27:15.311]      // while "1"  (timeout="200")
[21:27:15.311]      // while-condition  =>  TRUE
[21:27:15.311]      // while "1"  (timeout="200")
[21:27:15.311]      // while-condition  =>  TRUE
[21:27:15.311]      // while "1"  (timeout="200")
[21:27:15.311]      // while-condition  =>  TRUE
[21:27:15.311]      // while "1"  (timeout="200")
[21:27:15.311]      // while-condition  =>  TRUE
[21:27:15.311]      // while "1"  (timeout="200")
[21:27:15.311]      // while-condition  =>  TRUE
[21:27:15.311]      // while "1"  (timeout="200")
[21:27:15.312]      // while-condition  =>  TRUE
[21:27:15.312]      // while "1"  (timeout="200")
[21:27:15.312]      // while-condition  =>  TRUE
[21:27:15.312]      // while "1"  (timeout="200")
[21:27:15.312]      // while-condition  =>  TRUE
[21:27:15.312]      // while "1"  (timeout="200")
[21:27:15.313]      // while-condition  =>  TRUE
[21:27:15.313]      // while "1"  (timeout="200")
[21:27:15.313]      // while-condition  =>  TRUE
[21:27:15.313]      // while "1"  (timeout="200")
[21:27:15.313]      // while-condition  =>  TRUE
[21:27:15.313]      // while "1"  (timeout="200")
[21:27:15.313]      // while-condition  =>  TRUE
[21:27:15.313]      // while "1"  (timeout="200")
[21:27:15.313]      // while-condition  =>  TRUE
[21:27:15.313]      // while "1"  (timeout="200")
[21:27:15.313]      // while-condition  =>  TRUE
[21:27:15.313]      // while "1"  (timeout="200")
[21:27:15.314]      // while-condition  =>  TRUE
[21:27:15.314]      // while "1"  (timeout="200")
[21:27:15.314]      // while-condition  =>  TRUE
[21:27:15.314]      // while "1"  (timeout="200")
[21:27:15.314]      // while-condition  =>  TRUE
[21:27:15.314]      // while "1"  (timeout="200")
[21:27:15.314]      // while-condition  =>  TRUE
[21:27:15.314]      // while "1"  (timeout="200")
[21:27:15.314]      // while-condition  =>  TRUE
[21:27:15.316]      // while "1"  (timeout="200")
[21:27:15.316]      // while-condition  =>  TRUE
[21:27:15.316]      // while "1"  (timeout="200")
[21:27:15.316]      // while-condition  =>  TRUE
[21:27:15.316]      // while "1"  (timeout="200")
[21:27:15.316]      // while-condition  =>  TRUE
[21:27:15.316]      // while "1"  (timeout="200")
[21:27:15.316]      // while-condition  =>  TRUE
[21:27:15.316]      // while "1"  (timeout="200")
[21:27:15.316]      // while-condition  =>  TRUE
[21:27:15.316]      // while "1"  (timeout="200")
[21:27:15.317]      // while-condition  =>  TRUE
[21:27:15.317]      // while "1"  (timeout="200")
[21:27:15.317]      // while  =>  TIMEOUT
[21:27:15.317]      // end while "1"
[21:27:15.317]    </control>
[21:27:15.317]    <control if="canReadPins" while="" timeout="0" info="">
[21:27:15.317]      // if-block "canReadPins"
[21:27:15.317]        // =>  TRUE
[21:27:15.317]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:27:15.317]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:27:15.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:27:15.318]        // while-condition  =>  FALSE
[21:27:15.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:27:15.318]      </control>
[21:27:15.318]      // end if-block "canReadPins"
[21:27:15.318]    </control>
[21:27:15.318]    <control if="!canReadPins" while="" timeout="0" info="">
[21:27:15.318]      // if-block "!canReadPins"
[21:27:15.318]        // =>  FALSE
[21:27:15.318]      // skip if-block "!canReadPins"
[21:27:15.319]    </control>
[21:27:15.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:27:15.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:27:15.319]        // =>  TRUE
[21:27:15.319]      <block atomic="false" info="">
[21:27:15.319]        WriteAP(0x00, 0x190008);
[21:27:15.320]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:27:15.320]        WriteAP(0xF0, 0x01);
[21:27:15.321]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:27:15.321]      </block>
[21:27:15.321]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:27:15.321]    </control>
[21:27:15.321]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:27:15.321]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:27:15.321]        // =>  FALSE
[21:27:15.321]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:27:15.321]    </control>
[21:27:15.321]    <block atomic="false" info="">
[21:27:15.321]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:27:15.322]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:27:15.322]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:27:15.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:27:15.325]      __ap = 0; //lets make sure we reset the access point selection
[21:27:15.325]        // -> [__ap <= 0x00000000]
[21:27:15.325]    </block>
[21:27:15.325]  </sequence>
[21:27:15.325]  
[21:27:15.331]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:27:15.331]  
[21:27:15.331]  <debugvars>
[21:27:15.331]    // Pre-defined
[21:27:15.331]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:27:15.332]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:27:15.332]    __dp=0x00000000
[21:27:15.332]    __ap=0x00000000
[21:27:15.332]    __traceout=0x00000000      (Trace Disabled)
[21:27:15.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:27:15.332]    __FlashAddr=0x00000000
[21:27:15.332]    __FlashLen=0x00000000
[21:27:15.332]    __FlashArg=0x00000000
[21:27:15.333]    __FlashOp=0x00000000
[21:27:15.333]    __Result=0x00000000
[21:27:15.333]  </debugvars>
[21:27:15.333]  
[21:27:15.333]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:27:15.333]    <block atomic="false" info="">
[21:27:15.333]      __var deviceID = 0;
[21:27:15.334]        // -> [deviceID <= 0x00000000]
[21:27:15.334]      __var version = 0;
[21:27:15.334]        // -> [version <= 0x00000000]
[21:27:15.334]      __var partNum = 0;
[21:27:15.334]        // -> [partNum <= 0x00000000]
[21:27:15.334]      __var manuf = 0;
[21:27:15.334]        // -> [manuf <= 0x00000000]
[21:27:15.334]      __var isMSPM0G1X0X_G3X0X = 0;
[21:27:15.334]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:27:15.334]      __var isProduction = 0;
[21:27:15.334]        // -> [isProduction <= 0x00000000]
[21:27:15.334]      __var continueId = 0;
[21:27:15.334]        // -> [continueId <= 0x00000000]
[21:27:15.334]      deviceID =   Read32(0x41C40004);
[21:27:15.336]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:27:15.336]        // -> [deviceID <= 0x2BB8802F]
[21:27:15.336]      version = deviceID >> 28;
[21:27:15.336]        // -> [version <= 0x00000002]
[21:27:15.336]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:27:15.336]        // -> [partNum <= 0x0000BB88]
[21:27:15.337]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:27:15.337]        // -> [manuf <= 0x00000017]
[21:27:15.337]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:27:15.337]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:27:15.337]      isProduction = (version > 0);
[21:27:15.337]        // -> [isProduction <= 0x00000001]
[21:27:15.338]    </block>
[21:27:15.338]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:27:15.338]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:27:15.338]        // =>  FALSE
[21:27:15.338]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:27:15.338]    </control>
[21:27:15.338]    <control if="continueId == 4" while="" timeout="0" info="">
[21:27:15.338]      // if-block "continueId == 4"
[21:27:15.338]        // =>  FALSE
[21:27:15.339]      // skip if-block "continueId == 4"
[21:27:15.339]    </control>
[21:27:15.339]    <control if="!isProduction" while="" timeout="0" info="">
[21:27:15.339]      // if-block "!isProduction"
[21:27:15.339]        // =>  FALSE
[21:27:15.339]      // skip if-block "!isProduction"
[21:27:15.339]    </control>
[21:27:15.339]  </sequence>
[21:27:15.339]  
[21:30:19.046]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:30:19.046]  
[21:30:19.046]  <debugvars>
[21:30:19.046]    // Pre-defined
[21:30:19.046]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:30:19.046]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:30:19.046]    __dp=0x00000000
[21:30:19.046]    __ap=0x00000000
[21:30:19.046]    __traceout=0x00000000      (Trace Disabled)
[21:30:19.046]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:30:19.047]    __FlashAddr=0x00000000
[21:30:19.047]    __FlashLen=0x00000000
[21:30:19.047]    __FlashArg=0x00000000
[21:30:19.047]    __FlashOp=0x00000000
[21:30:19.047]    __Result=0x00000000
[21:30:19.047]  </debugvars>
[21:30:19.047]  
[21:30:19.048]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:30:19.048]    <block atomic="false" info="">
[21:30:19.048]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:30:19.048]        // -> [isSWJ <= 0x00000001]
[21:30:19.048]      __var hasDormant = __protocol & 0x00020000;
[21:30:19.048]        // -> [hasDormant <= 0x00000000]
[21:30:19.048]      __var protType   = __protocol & 0x0000FFFF;
[21:30:19.048]        // -> [protType <= 0x00000002]
[21:30:19.048]    </block>
[21:30:19.048]    <control if="protType == 1" while="" timeout="0" info="">
[21:30:19.048]      // if-block "protType == 1"
[21:30:19.048]        // =>  FALSE
[21:30:19.049]      // skip if-block "protType == 1"
[21:30:19.049]    </control>
[21:30:19.049]    <control if="protType == 2" while="" timeout="0" info="">
[21:30:19.049]      // if-block "protType == 2"
[21:30:19.049]        // =>  TRUE
[21:30:19.049]      <control if="isSWJ" while="" timeout="0" info="">
[21:30:19.049]        // if-block "isSWJ"
[21:30:19.049]          // =>  TRUE
[21:30:19.050]        <control if="hasDormant" while="" timeout="0" info="">
[21:30:19.050]          // if-block "hasDormant"
[21:30:19.050]            // =>  FALSE
[21:30:19.050]          // skip if-block "hasDormant"
[21:30:19.050]        </control>
[21:30:19.051]        <control if="!hasDormant" while="" timeout="0" info="">
[21:30:19.051]          // if-block "!hasDormant"
[21:30:19.051]            // =>  TRUE
[21:30:19.051]          <block atomic="false" info="">
[21:30:19.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:30:19.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:30:19.051]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:30:19.052]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:30:19.052]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:30:19.052]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:30:19.052]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:30:19.053]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:30:19.053]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:30:19.053]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:30:19.053]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:30:19.053]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:30:19.054]          </block>
[21:30:19.054]          // end if-block "!hasDormant"
[21:30:19.054]        </control>
[21:30:19.054]        // end if-block "isSWJ"
[21:30:19.054]      </control>
[21:30:19.054]      <control if="!isSWJ" while="" timeout="0" info="">
[21:30:19.054]        // if-block "!isSWJ"
[21:30:19.054]          // =>  FALSE
[21:30:19.054]        // skip if-block "!isSWJ"
[21:30:19.054]      </control>
[21:30:19.054]      <block atomic="false" info="">
[21:30:19.054]        ReadDP(0x0);
[21:30:19.055]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:30:19.055]      </block>
[21:30:19.055]      // end if-block "protType == 2"
[21:30:19.055]    </control>
[21:30:19.055]  </sequence>
[21:30:19.055]  
[21:30:19.057]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:30:19.057]  
[21:30:19.057]  <debugvars>
[21:30:19.057]    // Pre-defined
[21:30:19.057]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:30:19.057]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:30:19.057]    __dp=0x00000000
[21:30:19.057]    __ap=0x00000000
[21:30:19.058]    __traceout=0x00000000      (Trace Disabled)
[21:30:19.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:30:19.058]    __FlashAddr=0x00000000
[21:30:19.058]    __FlashLen=0x00000000
[21:30:19.058]    __FlashArg=0x00000000
[21:30:19.058]    __FlashOp=0x00000000
[21:30:19.058]    __Result=0x00000000
[21:30:19.058]  </debugvars>
[21:30:19.058]  
[21:30:19.058]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:30:19.058]    <block atomic="false" info="">
[21:30:19.058]      __var SW_DP_ABORT       = 0x0;
[21:30:19.058]        // -> [SW_DP_ABORT <= 0x00000000]
[21:30:19.058]      __var DP_CTRL_STAT      = 0x4;
[21:30:19.058]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:30:19.059]      __var DP_SELECT         = 0x8;
[21:30:19.059]        // -> [DP_SELECT <= 0x00000008]
[21:30:19.059]      __var powered_down      = 0;
[21:30:19.059]        // -> [powered_down <= 0x00000000]
[21:30:19.059]      WriteDP(DP_SELECT, 0x00000000);
[21:30:19.060]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:30:19.060]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:30:19.061]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:30:19.061]        // -> [powered_down <= 0x00000001]
[21:30:19.061]    </block>
[21:30:19.061]    <control if="powered_down" while="" timeout="0" info="">
[21:30:19.061]      // if-block "powered_down"
[21:30:19.061]        // =>  TRUE
[21:30:19.061]      <block atomic="false" info="">
[21:30:19.062]        Message(0, "Debug/System power-up request sent");
[21:30:19.064]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:30:19.064]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:30:19.064]      </block>
[21:30:19.064]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:30:19.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:30:19.065]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:30:19.065]        // while-condition  =>  FALSE
[21:30:19.065]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:30:19.065]      </control>
[21:30:19.065]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:30:19.065]        // if-block "(__protocol & 0xFFFF) == 1"
[21:30:19.065]          // =>  FALSE
[21:30:19.065]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:30:19.065]      </control>
[21:30:19.065]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:30:19.065]        // if-block "(__protocol & 0xFFFF) == 2"
[21:30:19.065]          // =>  TRUE
[21:30:19.065]        <block atomic="false" info="">
[21:30:19.066]          Message(0, "executing SWD power up");
[21:30:19.066]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:30:19.068]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:30:19.068]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:30:19.069]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:30:19.069]        </block>
[21:30:19.069]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:30:19.070]      </control>
[21:30:19.070]      // end if-block "powered_down"
[21:30:19.070]    </control>
[21:30:19.070]    <block atomic="false" info="">
[21:30:19.071]      __var DEBUG_PORT_VAL    = 0;
[21:30:19.071]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:30:19.071]      __var ACCESS_POINT_VAL  = 0;
[21:30:19.071]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:30:19.071]      __ap = 1; 
[21:30:19.071]        // -> [__ap <= 0x00000001]
[21:30:19.071]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:30:19.071]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:30:19.071]      __ap = 4;
[21:30:19.073]        // -> [__ap <= 0x00000004]
[21:30:19.073]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:30:19.074]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:30:19.074]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:30:19.074]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:30:19.075]    </block>
[21:30:19.075]    <block atomic="false" info="">
[21:30:19.075]      __var nReset = 0x80;
[21:30:19.075]        // -> [nReset <= 0x00000080]
[21:30:19.075]      __var canReadPins = 0;
[21:30:19.075]        // -> [canReadPins <= 0x00000000]
[21:30:19.075]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:30:19.075]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:30:19.077]        // -> [canReadPins <= 0x00000001]
[21:30:19.077]    </block>
[21:30:19.077]    <control if="" while="1" timeout="200" info="">
[21:30:19.077]      // while "1"  (timeout="200")
[21:30:19.077]      // while-condition  =>  TRUE
[21:30:19.077]      // while "1"  (timeout="200")
[21:30:19.077]      // while-condition  =>  TRUE
[21:30:19.077]      // while "1"  (timeout="200")
[21:30:19.077]      // while-condition  =>  TRUE
[21:30:19.078]      // while "1"  (timeout="200")
[21:30:19.078]      // while-condition  =>  TRUE
[21:30:19.078]      // while "1"  (timeout="200")
[21:30:19.078]      // while-condition  =>  TRUE
[21:30:19.078]      // while "1"  (timeout="200")
[21:30:19.078]      // while-condition  =>  TRUE
[21:30:19.078]      // while "1"  (timeout="200")
[21:30:19.078]      // while-condition  =>  TRUE
[21:30:19.078]      // while "1"  (timeout="200")
[21:30:19.078]      // while-condition  =>  TRUE
[21:30:19.078]      // while "1"  (timeout="200")
[21:30:19.078]      // while-condition  =>  TRUE
[21:30:19.078]      // while "1"  (timeout="200")
[21:30:19.078]      // while-condition  =>  TRUE
[21:30:19.079]      // while "1"  (timeout="200")
[21:30:19.079]      // while-condition  =>  TRUE
[21:30:19.079]      // while "1"  (timeout="200")
[21:30:19.079]      // while-condition  =>  TRUE
[21:30:19.079]      // while "1"  (timeout="200")
[21:30:19.080]      // while-condition  =>  TRUE
[21:30:19.080]      // while "1"  (timeout="200")
[21:30:19.080]      // while-condition  =>  TRUE
[21:30:19.080]      // while "1"  (timeout="200")
[21:30:19.080]      // while-condition  =>  TRUE
[21:30:19.080]      // while "1"  (timeout="200")
[21:30:19.080]      // while-condition  =>  TRUE
[21:30:19.080]      // while "1"  (timeout="200")
[21:30:19.080]      // while-condition  =>  TRUE
[21:30:19.080]      // while "1"  (timeout="200")
[21:30:19.080]      // while-condition  =>  TRUE
[21:30:19.080]      // while "1"  (timeout="200")
[21:30:19.081]      // while-condition  =>  TRUE
[21:30:19.081]      // while "1"  (timeout="200")
[21:30:19.081]      // while-condition  =>  TRUE
[21:30:19.081]      // while "1"  (timeout="200")
[21:30:19.081]      // while-condition  =>  TRUE
[21:30:19.081]      // while "1"  (timeout="200")
[21:30:19.082]      // while-condition  =>  TRUE
[21:30:19.082]      // while "1"  (timeout="200")
[21:30:19.082]      // while-condition  =>  TRUE
[21:30:19.082]      // while "1"  (timeout="200")
[21:30:19.082]      // while-condition  =>  TRUE
[21:30:19.082]      // while "1"  (timeout="200")
[21:30:19.082]      // while-condition  =>  TRUE
[21:30:19.083]      // while "1"  (timeout="200")
[21:30:19.083]      // while  =>  TIMEOUT
[21:30:19.083]      // end while "1"
[21:30:19.083]    </control>
[21:30:19.083]    <control if="canReadPins" while="" timeout="0" info="">
[21:30:19.083]      // if-block "canReadPins"
[21:30:19.083]        // =>  TRUE
[21:30:19.083]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:30:19.084]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:30:19.084]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:30:19.084]        // while-condition  =>  FALSE
[21:30:19.084]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:30:19.084]      </control>
[21:30:19.084]      // end if-block "canReadPins"
[21:30:19.085]    </control>
[21:30:19.085]    <control if="!canReadPins" while="" timeout="0" info="">
[21:30:19.085]      // if-block "!canReadPins"
[21:30:19.085]        // =>  FALSE
[21:30:19.085]      // skip if-block "!canReadPins"
[21:30:19.085]    </control>
[21:30:19.085]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:30:19.085]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:30:19.085]        // =>  TRUE
[21:30:19.085]      <block atomic="false" info="">
[21:30:19.086]        WriteAP(0x00, 0x190008);
[21:30:19.086]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:30:19.086]        WriteAP(0xF0, 0x01);
[21:30:19.088]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:30:19.089]      </block>
[21:30:19.089]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:30:19.089]    </control>
[21:30:19.089]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:30:19.089]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:30:19.089]        // =>  FALSE
[21:30:19.089]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:30:19.089]    </control>
[21:30:19.089]    <block atomic="false" info="">
[21:30:19.090]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:30:19.091]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:30:19.091]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:30:19.092]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:30:19.093]      __ap = 0; //lets make sure we reset the access point selection
[21:30:19.093]        // -> [__ap <= 0x00000000]
[21:30:19.093]    </block>
[21:30:19.093]  </sequence>
[21:30:19.093]  
[21:30:19.098]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:30:19.098]  
[21:30:19.100]  <debugvars>
[21:30:19.100]    // Pre-defined
[21:30:19.100]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:30:19.100]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:30:19.100]    __dp=0x00000000
[21:30:19.100]    __ap=0x00000000
[21:30:19.100]    __traceout=0x00000000      (Trace Disabled)
[21:30:19.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:30:19.100]    __FlashAddr=0x00000000
[21:30:19.100]    __FlashLen=0x00000000
[21:30:19.100]    __FlashArg=0x00000000
[21:30:19.100]    __FlashOp=0x00000000
[21:30:19.100]    __Result=0x00000000
[21:30:19.100]  </debugvars>
[21:30:19.101]  
[21:30:19.101]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:30:19.101]    <block atomic="false" info="">
[21:30:19.101]      __var deviceID = 0;
[21:30:19.101]        // -> [deviceID <= 0x00000000]
[21:30:19.101]      __var version = 0;
[21:30:19.101]        // -> [version <= 0x00000000]
[21:30:19.101]      __var partNum = 0;
[21:30:19.101]        // -> [partNum <= 0x00000000]
[21:30:19.102]      __var manuf = 0;
[21:30:19.102]        // -> [manuf <= 0x00000000]
[21:30:19.102]      __var isMSPM0G1X0X_G3X0X = 0;
[21:30:19.102]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:30:19.102]      __var isProduction = 0;
[21:30:19.102]        // -> [isProduction <= 0x00000000]
[21:30:19.103]      __var continueId = 0;
[21:30:19.103]        // -> [continueId <= 0x00000000]
[21:30:19.103]      deviceID =   Read32(0x41C40004);
[21:30:19.104]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:30:19.104]        // -> [deviceID <= 0x2BB8802F]
[21:30:19.104]      version = deviceID >> 28;
[21:30:19.105]        // -> [version <= 0x00000002]
[21:30:19.105]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:30:19.105]        // -> [partNum <= 0x0000BB88]
[21:30:19.105]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:30:19.105]        // -> [manuf <= 0x00000017]
[21:30:19.105]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:30:19.105]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:30:19.105]      isProduction = (version > 0);
[21:30:19.105]        // -> [isProduction <= 0x00000001]
[21:30:19.105]    </block>
[21:30:19.105]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:30:19.105]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:30:19.106]        // =>  FALSE
[21:30:19.106]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:30:19.106]    </control>
[21:30:19.106]    <control if="continueId == 4" while="" timeout="0" info="">
[21:30:19.106]      // if-block "continueId == 4"
[21:30:19.106]        // =>  FALSE
[21:30:19.106]      // skip if-block "continueId == 4"
[21:30:19.106]    </control>
[21:30:19.106]    <control if="!isProduction" while="" timeout="0" info="">
[21:30:19.106]      // if-block "!isProduction"
[21:30:19.106]        // =>  FALSE
[21:30:19.107]      // skip if-block "!isProduction"
[21:30:19.108]    </control>
[21:30:19.108]  </sequence>
[21:30:19.108]  
[21:32:12.228]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:32:12.228]  
[21:32:12.237]  <debugvars>
[21:32:12.237]    // Pre-defined
[21:32:12.237]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:12.237]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:12.237]    __dp=0x00000000
[21:32:12.237]    __ap=0x00000000
[21:32:12.237]    __traceout=0x00000000      (Trace Disabled)
[21:32:12.237]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:12.237]    __FlashAddr=0x00000000
[21:32:12.237]    __FlashLen=0x00000000
[21:32:12.237]    __FlashArg=0x00000000
[21:32:12.238]    __FlashOp=0x00000000
[21:32:12.238]    __Result=0x00000000
[21:32:12.238]  </debugvars>
[21:32:12.238]  
[21:32:12.238]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:32:12.238]    <block atomic="false" info="">
[21:32:12.238]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:32:12.238]        // -> [isSWJ <= 0x00000001]
[21:32:12.239]      __var hasDormant = __protocol & 0x00020000;
[21:32:12.239]        // -> [hasDormant <= 0x00000000]
[21:32:12.239]      __var protType   = __protocol & 0x0000FFFF;
[21:32:12.239]        // -> [protType <= 0x00000002]
[21:32:12.239]    </block>
[21:32:12.239]    <control if="protType == 1" while="" timeout="0" info="">
[21:32:12.239]      // if-block "protType == 1"
[21:32:12.239]        // =>  FALSE
[21:32:12.239]      // skip if-block "protType == 1"
[21:32:12.239]    </control>
[21:32:12.240]    <control if="protType == 2" while="" timeout="0" info="">
[21:32:12.240]      // if-block "protType == 2"
[21:32:12.240]        // =>  TRUE
[21:32:12.240]      <control if="isSWJ" while="" timeout="0" info="">
[21:32:12.240]        // if-block "isSWJ"
[21:32:12.240]          // =>  TRUE
[21:32:12.240]        <control if="hasDormant" while="" timeout="0" info="">
[21:32:12.240]          // if-block "hasDormant"
[21:32:12.240]            // =>  FALSE
[21:32:12.240]          // skip if-block "hasDormant"
[21:32:12.241]        </control>
[21:32:12.241]        <control if="!hasDormant" while="" timeout="0" info="">
[21:32:12.241]          // if-block "!hasDormant"
[21:32:12.241]            // =>  TRUE
[21:32:12.241]          <block atomic="false" info="">
[21:32:12.241]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:32:12.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:12.242]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:32:12.242]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:32:12.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:32:12.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:12.242]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:32:12.243]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:32:12.243]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:32:12.243]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:12.243]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:32:12.244]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:32:12.244]          </block>
[21:32:12.244]          // end if-block "!hasDormant"
[21:32:12.244]        </control>
[21:32:12.244]        // end if-block "isSWJ"
[21:32:12.244]      </control>
[21:32:12.244]      <control if="!isSWJ" while="" timeout="0" info="">
[21:32:12.244]        // if-block "!isSWJ"
[21:32:12.244]          // =>  FALSE
[21:32:12.244]        // skip if-block "!isSWJ"
[21:32:12.245]      </control>
[21:32:12.245]      <block atomic="false" info="">
[21:32:12.245]        ReadDP(0x0);
[21:32:12.245]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:32:12.245]      </block>
[21:32:12.245]      // end if-block "protType == 2"
[21:32:12.245]    </control>
[21:32:12.246]  </sequence>
[21:32:12.246]  
[21:32:12.247]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:32:12.247]  
[21:32:12.247]  <debugvars>
[21:32:12.247]    // Pre-defined
[21:32:12.247]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:12.247]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:12.247]    __dp=0x00000000
[21:32:12.247]    __ap=0x00000000
[21:32:12.247]    __traceout=0x00000000      (Trace Disabled)
[21:32:12.247]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:12.247]    __FlashAddr=0x00000000
[21:32:12.247]    __FlashLen=0x00000000
[21:32:12.247]    __FlashArg=0x00000000
[21:32:12.247]    __FlashOp=0x00000000
[21:32:12.247]    __Result=0x00000000
[21:32:12.249]  </debugvars>
[21:32:12.249]  
[21:32:12.249]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:32:12.249]    <block atomic="false" info="">
[21:32:12.249]      __var SW_DP_ABORT       = 0x0;
[21:32:12.249]        // -> [SW_DP_ABORT <= 0x00000000]
[21:32:12.249]      __var DP_CTRL_STAT      = 0x4;
[21:32:12.249]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:32:12.249]      __var DP_SELECT         = 0x8;
[21:32:12.249]        // -> [DP_SELECT <= 0x00000008]
[21:32:12.249]      __var powered_down      = 0;
[21:32:12.250]        // -> [powered_down <= 0x00000000]
[21:32:12.250]      WriteDP(DP_SELECT, 0x00000000);
[21:32:12.250]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:32:12.250]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:32:12.251]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:32:12.251]        // -> [powered_down <= 0x00000001]
[21:32:12.251]    </block>
[21:32:12.251]    <control if="powered_down" while="" timeout="0" info="">
[21:32:12.251]      // if-block "powered_down"
[21:32:12.251]        // =>  TRUE
[21:32:12.251]      <block atomic="false" info="">
[21:32:12.251]        Message(0, "Debug/System power-up request sent");
[21:32:12.254]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:32:12.254]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:32:12.254]      </block>
[21:32:12.254]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:32:12.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:32:12.255]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:32:12.255]        // while-condition  =>  FALSE
[21:32:12.255]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:32:12.255]      </control>
[21:32:12.255]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:32:12.255]        // if-block "(__protocol & 0xFFFF) == 1"
[21:32:12.255]          // =>  FALSE
[21:32:12.255]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:32:12.255]      </control>
[21:32:12.255]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:32:12.255]        // if-block "(__protocol & 0xFFFF) == 2"
[21:32:12.255]          // =>  TRUE
[21:32:12.257]        <block atomic="false" info="">
[21:32:12.257]          Message(0, "executing SWD power up");
[21:32:12.258]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:32:12.259]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:32:12.259]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:32:12.259]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:32:12.259]        </block>
[21:32:12.260]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:32:12.260]      </control>
[21:32:12.260]      // end if-block "powered_down"
[21:32:12.260]    </control>
[21:32:12.260]    <block atomic="false" info="">
[21:32:12.260]      __var DEBUG_PORT_VAL    = 0;
[21:32:12.260]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:32:12.260]      __var ACCESS_POINT_VAL  = 0;
[21:32:12.260]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:32:12.260]      __ap = 1; 
[21:32:12.260]        // -> [__ap <= 0x00000001]
[21:32:12.261]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:32:12.262]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:32:12.262]      __ap = 4;
[21:32:12.262]        // -> [__ap <= 0x00000004]
[21:32:12.262]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:12.263]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:32:12.263]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:32:12.263]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:12.265]    </block>
[21:32:12.265]    <block atomic="false" info="">
[21:32:12.265]      __var nReset = 0x80;
[21:32:12.265]        // -> [nReset <= 0x00000080]
[21:32:12.265]      __var canReadPins = 0;
[21:32:12.265]        // -> [canReadPins <= 0x00000000]
[21:32:12.267]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:32:12.267]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:32:12.267]        // -> [canReadPins <= 0x00000001]
[21:32:12.267]    </block>
[21:32:12.267]    <control if="" while="1" timeout="200" info="">
[21:32:12.267]      // while "1"  (timeout="200")
[21:32:12.267]      // while-condition  =>  TRUE
[21:32:12.267]      // while "1"  (timeout="200")
[21:32:12.267]      // while-condition  =>  TRUE
[21:32:12.267]      // while "1"  (timeout="200")
[21:32:12.268]      // while-condition  =>  TRUE
[21:32:12.268]      // while "1"  (timeout="200")
[21:32:12.268]      // while-condition  =>  TRUE
[21:32:12.268]      // while "1"  (timeout="200")
[21:32:12.268]      // while-condition  =>  TRUE
[21:32:12.268]      // while "1"  (timeout="200")
[21:32:12.268]      // while-condition  =>  TRUE
[21:32:12.268]      // while "1"  (timeout="200")
[21:32:12.268]      // while-condition  =>  TRUE
[21:32:12.268]      // while "1"  (timeout="200")
[21:32:12.268]      // while-condition  =>  TRUE
[21:32:12.269]      // while "1"  (timeout="200")
[21:32:12.269]      // while-condition  =>  TRUE
[21:32:12.269]      // while "1"  (timeout="200")
[21:32:12.269]      // while-condition  =>  TRUE
[21:32:12.269]      // while "1"  (timeout="200")
[21:32:12.269]      // while-condition  =>  TRUE
[21:32:12.269]      // while "1"  (timeout="200")
[21:32:12.269]      // while-condition  =>  TRUE
[21:32:12.269]      // while "1"  (timeout="200")
[21:32:12.269]      // while-condition  =>  TRUE
[21:32:12.269]      // while "1"  (timeout="200")
[21:32:12.270]      // while-condition  =>  TRUE
[21:32:12.270]      // while "1"  (timeout="200")
[21:32:12.270]      // while  =>  TIMEOUT
[21:32:12.270]      // end while "1"
[21:32:12.270]    </control>
[21:32:12.270]    <control if="canReadPins" while="" timeout="0" info="">
[21:32:12.270]      // if-block "canReadPins"
[21:32:12.271]        // =>  TRUE
[21:32:12.271]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:32:12.271]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:32:12.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:32:12.271]        // while-condition  =>  FALSE
[21:32:12.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:32:12.272]      </control>
[21:32:12.272]      // end if-block "canReadPins"
[21:32:12.272]    </control>
[21:32:12.272]    <control if="!canReadPins" while="" timeout="0" info="">
[21:32:12.272]      // if-block "!canReadPins"
[21:32:12.272]        // =>  FALSE
[21:32:12.272]      // skip if-block "!canReadPins"
[21:32:12.272]    </control>
[21:32:12.272]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:32:12.272]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:12.272]        // =>  TRUE
[21:32:12.273]      <block atomic="false" info="">
[21:32:12.273]        WriteAP(0x00, 0x190008);
[21:32:12.273]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:12.273]        WriteAP(0xF0, 0x01);
[21:32:12.274]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:12.274]      </block>
[21:32:12.275]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:12.275]    </control>
[21:32:12.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:32:12.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:12.275]        // =>  FALSE
[21:32:12.275]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:12.275]    </control>
[21:32:12.275]    <block atomic="false" info="">
[21:32:12.275]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:12.276]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:32:12.276]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:32:12.277]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:12.280]      __ap = 0; //lets make sure we reset the access point selection
[21:32:12.280]        // -> [__ap <= 0x00000000]
[21:32:12.280]    </block>
[21:32:12.280]  </sequence>
[21:32:12.280]  
[21:32:12.286]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:32:12.286]  
[21:32:12.286]  <debugvars>
[21:32:12.286]    // Pre-defined
[21:32:12.286]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:12.286]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:12.287]    __dp=0x00000000
[21:32:12.287]    __ap=0x00000000
[21:32:12.287]    __traceout=0x00000000      (Trace Disabled)
[21:32:12.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:12.287]    __FlashAddr=0x00000000
[21:32:12.287]    __FlashLen=0x00000000
[21:32:12.287]    __FlashArg=0x00000000
[21:32:12.287]    __FlashOp=0x00000000
[21:32:12.287]    __Result=0x00000000
[21:32:12.287]  </debugvars>
[21:32:12.289]  
[21:32:12.289]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:32:12.289]    <block atomic="false" info="">
[21:32:12.289]      __var deviceID = 0;
[21:32:12.289]        // -> [deviceID <= 0x00000000]
[21:32:12.289]      __var version = 0;
[21:32:12.289]        // -> [version <= 0x00000000]
[21:32:12.289]      __var partNum = 0;
[21:32:12.289]        // -> [partNum <= 0x00000000]
[21:32:12.289]      __var manuf = 0;
[21:32:12.290]        // -> [manuf <= 0x00000000]
[21:32:12.290]      __var isMSPM0G1X0X_G3X0X = 0;
[21:32:12.290]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:32:12.290]      __var isProduction = 0;
[21:32:12.290]        // -> [isProduction <= 0x00000000]
[21:32:12.290]      __var continueId = 0;
[21:32:12.290]        // -> [continueId <= 0x00000000]
[21:32:12.290]      deviceID =   Read32(0x41C40004);
[21:32:12.291]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:32:12.291]        // -> [deviceID <= 0x2BB8802F]
[21:32:12.291]      version = deviceID >> 28;
[21:32:12.291]        // -> [version <= 0x00000002]
[21:32:12.291]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:32:12.291]        // -> [partNum <= 0x0000BB88]
[21:32:12.291]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:32:12.291]        // -> [manuf <= 0x00000017]
[21:32:12.291]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:32:12.291]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:32:12.293]      isProduction = (version > 0);
[21:32:12.293]        // -> [isProduction <= 0x00000001]
[21:32:12.293]    </block>
[21:32:12.293]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:32:12.293]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:32:12.293]        // =>  FALSE
[21:32:12.293]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:32:12.293]    </control>
[21:32:12.294]    <control if="continueId == 4" while="" timeout="0" info="">
[21:32:12.294]      // if-block "continueId == 4"
[21:32:12.294]        // =>  FALSE
[21:32:12.294]      // skip if-block "continueId == 4"
[21:32:12.294]    </control>
[21:32:12.294]    <control if="!isProduction" while="" timeout="0" info="">
[21:32:12.294]      // if-block "!isProduction"
[21:32:12.294]        // =>  FALSE
[21:32:12.294]      // skip if-block "!isProduction"
[21:32:12.294]    </control>
[21:32:12.294]  </sequence>
[21:32:12.295]  
[21:35:35.344]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:35:35.344]  
[21:35:35.353]  <debugvars>
[21:35:35.353]    // Pre-defined
[21:35:35.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:35:35.353]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:35:35.354]    __dp=0x00000000
[21:35:35.354]    __ap=0x00000000
[21:35:35.354]    __traceout=0x00000000      (Trace Disabled)
[21:35:35.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:35:35.354]    __FlashAddr=0x00000000
[21:35:35.354]    __FlashLen=0x00000000
[21:35:35.354]    __FlashArg=0x00000000
[21:35:35.354]    __FlashOp=0x00000000
[21:35:35.354]    __Result=0x00000000
[21:35:35.354]  </debugvars>
[21:35:35.354]  
[21:35:35.355]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:35:35.355]    <block atomic="false" info="">
[21:35:35.355]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:35:35.355]        // -> [isSWJ <= 0x00000001]
[21:35:35.355]      __var hasDormant = __protocol & 0x00020000;
[21:35:35.355]        // -> [hasDormant <= 0x00000000]
[21:35:35.355]      __var protType   = __protocol & 0x0000FFFF;
[21:35:35.355]        // -> [protType <= 0x00000002]
[21:35:35.355]    </block>
[21:35:35.355]    <control if="protType == 1" while="" timeout="0" info="">
[21:35:35.356]      // if-block "protType == 1"
[21:35:35.356]        // =>  FALSE
[21:35:35.356]      // skip if-block "protType == 1"
[21:35:35.356]    </control>
[21:35:35.356]    <control if="protType == 2" while="" timeout="0" info="">
[21:35:35.356]      // if-block "protType == 2"
[21:35:35.356]        // =>  TRUE
[21:35:35.356]      <control if="isSWJ" while="" timeout="0" info="">
[21:35:35.356]        // if-block "isSWJ"
[21:35:35.356]          // =>  TRUE
[21:35:35.356]        <control if="hasDormant" while="" timeout="0" info="">
[21:35:35.357]          // if-block "hasDormant"
[21:35:35.357]            // =>  FALSE
[21:35:35.357]          // skip if-block "hasDormant"
[21:35:35.357]        </control>
[21:35:35.357]        <control if="!hasDormant" while="" timeout="0" info="">
[21:35:35.357]          // if-block "!hasDormant"
[21:35:35.357]            // =>  TRUE
[21:35:35.357]          <block atomic="false" info="">
[21:35:35.357]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:35:35.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:35:35.358]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:35:35.358]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:35:35.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:35:35.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:35:35.359]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:35:35.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:35:35.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:35:35.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:35:35.360]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:35:35.360]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:35:35.360]          </block>
[21:35:35.360]          // end if-block "!hasDormant"
[21:35:35.361]        </control>
[21:35:35.361]        // end if-block "isSWJ"
[21:35:35.361]      </control>
[21:35:35.361]      <control if="!isSWJ" while="" timeout="0" info="">
[21:35:35.361]        // if-block "!isSWJ"
[21:35:35.361]          // =>  FALSE
[21:35:35.361]        // skip if-block "!isSWJ"
[21:35:35.361]      </control>
[21:35:35.361]      <block atomic="false" info="">
[21:35:35.361]        ReadDP(0x0);
[21:35:35.362]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:35:35.362]      </block>
[21:35:35.362]      // end if-block "protType == 2"
[21:35:35.362]    </control>
[21:35:35.362]  </sequence>
[21:35:35.362]  
[21:35:35.362]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:35:35.362]  
[21:35:35.362]  <debugvars>
[21:35:35.362]    // Pre-defined
[21:35:35.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:35:35.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:35:35.363]    __dp=0x00000000
[21:35:35.363]    __ap=0x00000000
[21:35:35.363]    __traceout=0x00000000      (Trace Disabled)
[21:35:35.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:35:35.363]    __FlashAddr=0x00000000
[21:35:35.363]    __FlashLen=0x00000000
[21:35:35.363]    __FlashArg=0x00000000
[21:35:35.363]    __FlashOp=0x00000000
[21:35:35.363]    __Result=0x00000000
[21:35:35.363]  </debugvars>
[21:35:35.363]  
[21:35:35.364]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:35:35.364]    <block atomic="false" info="">
[21:35:35.364]      __var SW_DP_ABORT       = 0x0;
[21:35:35.364]        // -> [SW_DP_ABORT <= 0x00000000]
[21:35:35.364]      __var DP_CTRL_STAT      = 0x4;
[21:35:35.364]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:35:35.364]      __var DP_SELECT         = 0x8;
[21:35:35.364]        // -> [DP_SELECT <= 0x00000008]
[21:35:35.364]      __var powered_down      = 0;
[21:35:35.364]        // -> [powered_down <= 0x00000000]
[21:35:35.364]      WriteDP(DP_SELECT, 0x00000000);
[21:35:35.365]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:35:35.365]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:35:35.367]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:35:35.367]        // -> [powered_down <= 0x00000001]
[21:35:35.367]    </block>
[21:35:35.367]    <control if="powered_down" while="" timeout="0" info="">
[21:35:35.367]      // if-block "powered_down"
[21:35:35.367]        // =>  TRUE
[21:35:35.367]      <block atomic="false" info="">
[21:35:35.367]        Message(0, "Debug/System power-up request sent");
[21:35:35.369]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:35:35.370]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:35:35.370]      </block>
[21:35:35.370]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:35:35.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:35:35.370]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:35:35.370]        // while-condition  =>  FALSE
[21:35:35.370]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:35:35.370]      </control>
[21:35:35.371]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:35:35.371]        // if-block "(__protocol & 0xFFFF) == 1"
[21:35:35.371]          // =>  FALSE
[21:35:35.371]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:35:35.371]      </control>
[21:35:35.371]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:35:35.371]        // if-block "(__protocol & 0xFFFF) == 2"
[21:35:35.371]          // =>  TRUE
[21:35:35.371]        <block atomic="false" info="">
[21:35:35.371]          Message(0, "executing SWD power up");
[21:35:35.372]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:35:35.374]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:35:35.374]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:35:35.374]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:35:35.374]        </block>
[21:35:35.374]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:35:35.374]      </control>
[21:35:35.375]      // end if-block "powered_down"
[21:35:35.375]    </control>
[21:35:35.375]    <block atomic="false" info="">
[21:35:35.375]      __var DEBUG_PORT_VAL    = 0;
[21:35:35.375]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:35:35.375]      __var ACCESS_POINT_VAL  = 0;
[21:35:35.375]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:35:35.375]      __ap = 1; 
[21:35:35.375]        // -> [__ap <= 0x00000001]
[21:35:35.375]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:35:35.376]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:35:35.376]      __ap = 4;
[21:35:35.376]        // -> [__ap <= 0x00000004]
[21:35:35.376]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:35:35.377]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:35:35.377]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:35:35.377]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:35:35.379]    </block>
[21:35:35.379]    <block atomic="false" info="">
[21:35:35.379]      __var nReset = 0x80;
[21:35:35.380]        // -> [nReset <= 0x00000080]
[21:35:35.380]      __var canReadPins = 0;
[21:35:35.381]        // -> [canReadPins <= 0x00000000]
[21:35:35.381]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:35:35.381]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:35:35.381]        // -> [canReadPins <= 0x00000001]
[21:35:35.381]    </block>
[21:35:35.381]    <control if="" while="1" timeout="200" info="">
[21:35:35.381]      // while "1"  (timeout="200")
[21:35:35.381]      // while-condition  =>  TRUE
[21:35:35.381]      // while "1"  (timeout="200")
[21:35:35.382]      // while-condition  =>  TRUE
[21:35:35.382]      // while "1"  (timeout="200")
[21:35:35.382]      // while-condition  =>  TRUE
[21:35:35.382]      // while "1"  (timeout="200")
[21:35:35.382]      // while-condition  =>  TRUE
[21:35:35.382]      // while "1"  (timeout="200")
[21:35:35.382]      // while-condition  =>  TRUE
[21:35:35.382]      // while "1"  (timeout="200")
[21:35:35.382]      // while-condition  =>  TRUE
[21:35:35.382]      // while "1"  (timeout="200")
[21:35:35.382]      // while-condition  =>  TRUE
[21:35:35.383]      // while "1"  (timeout="200")
[21:35:35.383]      // while-condition  =>  TRUE
[21:35:35.383]      // while "1"  (timeout="200")
[21:35:35.383]      // while-condition  =>  TRUE
[21:35:35.383]      // while "1"  (timeout="200")
[21:35:35.383]      // while-condition  =>  TRUE
[21:35:35.383]      // while "1"  (timeout="200")
[21:35:35.383]      // while-condition  =>  TRUE
[21:35:35.383]      // while "1"  (timeout="200")
[21:35:35.384]      // while-condition  =>  TRUE
[21:35:35.384]      // while "1"  (timeout="200")
[21:35:35.384]      // while-condition  =>  TRUE
[21:35:35.384]      // while "1"  (timeout="200")
[21:35:35.384]      // while-condition  =>  TRUE
[21:35:35.384]      // while "1"  (timeout="200")
[21:35:35.384]      // while-condition  =>  TRUE
[21:35:35.384]      // while "1"  (timeout="200")
[21:35:35.384]      // while-condition  =>  TRUE
[21:35:35.384]      // while "1"  (timeout="200")
[21:35:35.384]      // while-condition  =>  TRUE
[21:35:35.385]      // while "1"  (timeout="200")
[21:35:35.385]      // while-condition  =>  TRUE
[21:35:35.385]      // while "1"  (timeout="200")
[21:35:35.385]      // while-condition  =>  TRUE
[21:35:35.385]      // while "1"  (timeout="200")
[21:35:35.385]      // while-condition  =>  TRUE
[21:35:35.385]      // while "1"  (timeout="200")
[21:35:35.385]      // while-condition  =>  TRUE
[21:35:35.385]      // while "1"  (timeout="200")
[21:35:35.385]      // while-condition  =>  TRUE
[21:35:35.385]      // while "1"  (timeout="200")
[21:35:35.385]      // while-condition  =>  TRUE
[21:35:35.385]      // while "1"  (timeout="200")
[21:35:35.386]      // while-condition  =>  TRUE
[21:35:35.386]      // while "1"  (timeout="200")
[21:35:35.386]      // while-condition  =>  TRUE
[21:35:35.386]      // while "1"  (timeout="200")
[21:35:35.386]      // while-condition  =>  TRUE
[21:35:35.386]      // while "1"  (timeout="200")
[21:35:35.386]      // while-condition  =>  TRUE
[21:35:35.386]      // while "1"  (timeout="200")
[21:35:35.386]      // while-condition  =>  TRUE
[21:35:35.386]      // while "1"  (timeout="200")
[21:35:35.386]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.387]      // while-condition  =>  TRUE
[21:35:35.387]      // while "1"  (timeout="200")
[21:35:35.389]      // while-condition  =>  TRUE
[21:35:35.389]      // while "1"  (timeout="200")
[21:35:35.389]      // while-condition  =>  TRUE
[21:35:35.389]      // while "1"  (timeout="200")
[21:35:35.389]      // while-condition  =>  TRUE
[21:35:35.389]      // while "1"  (timeout="200")
[21:35:35.389]      // while-condition  =>  TRUE
[21:35:35.389]      // while "1"  (timeout="200")
[21:35:35.389]      // while-condition  =>  TRUE
[21:35:35.389]      // while "1"  (timeout="200")
[21:35:35.389]      // while-condition  =>  TRUE
[21:35:35.389]      // while "1"  (timeout="200")
[21:35:35.389]      // while-condition  =>  TRUE
[21:35:35.391]      // while "1"  (timeout="200")
[21:35:35.391]      // while-condition  =>  TRUE
[21:35:35.391]      // while "1"  (timeout="200")
[21:35:35.391]      // while-condition  =>  TRUE
[21:35:35.391]      // while "1"  (timeout="200")
[21:35:35.391]      // while-condition  =>  TRUE
[21:35:35.391]      // while "1"  (timeout="200")
[21:35:35.391]      // while-condition  =>  TRUE
[21:35:35.391]      // while "1"  (timeout="200")
[21:35:35.392]      // while-condition  =>  TRUE
[21:35:35.392]      // while "1"  (timeout="200")
[21:35:35.392]      // while-condition  =>  TRUE
[21:35:35.392]      // while "1"  (timeout="200")
[21:35:35.392]      // while-condition  =>  TRUE
[21:35:35.392]      // while "1"  (timeout="200")
[21:35:35.392]      // while-condition  =>  TRUE
[21:35:35.392]      // while "1"  (timeout="200")
[21:35:35.392]      // while-condition  =>  TRUE
[21:35:35.392]      // while "1"  (timeout="200")
[21:35:35.392]      // while-condition  =>  TRUE
[21:35:35.392]      // while "1"  (timeout="200")
[21:35:35.393]      // while-condition  =>  TRUE
[21:35:35.393]      // while "1"  (timeout="200")
[21:35:35.393]      // while-condition  =>  TRUE
[21:35:35.393]      // while "1"  (timeout="200")
[21:35:35.393]      // while-condition  =>  TRUE
[21:35:35.393]      // while "1"  (timeout="200")
[21:35:35.393]      // while-condition  =>  TRUE
[21:35:35.393]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.394]      // while-condition  =>  TRUE
[21:35:35.394]      // while "1"  (timeout="200")
[21:35:35.395]      // while-condition  =>  TRUE
[21:35:35.395]      // while "1"  (timeout="200")
[21:35:35.395]      // while  =>  TIMEOUT
[21:35:35.395]      // end while "1"
[21:35:35.395]    </control>
[21:35:35.395]    <control if="canReadPins" while="" timeout="0" info="">
[21:35:35.395]      // if-block "canReadPins"
[21:35:35.395]        // =>  TRUE
[21:35:35.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:35:35.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:35:35.396]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:35:35.396]        // while-condition  =>  FALSE
[21:35:35.396]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:35:35.396]      </control>
[21:35:35.396]      // end if-block "canReadPins"
[21:35:35.396]    </control>
[21:35:35.397]    <control if="!canReadPins" while="" timeout="0" info="">
[21:35:35.397]      // if-block "!canReadPins"
[21:35:35.397]        // =>  FALSE
[21:35:35.397]      // skip if-block "!canReadPins"
[21:35:35.397]    </control>
[21:35:35.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:35:35.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:35:35.397]        // =>  TRUE
[21:35:35.397]      <block atomic="false" info="">
[21:35:35.397]        WriteAP(0x00, 0x190008);
[21:35:35.399]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:35:35.399]        WriteAP(0xF0, 0x01);
[21:35:35.400]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:35:35.400]      </block>
[21:35:35.401]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:35:35.401]    </control>
[21:35:35.401]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:35:35.401]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:35:35.401]        // =>  FALSE
[21:35:35.402]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:35:35.402]    </control>
[21:35:35.402]    <block atomic="false" info="">
[21:35:35.402]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:35:35.403]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:35:35.403]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:35:35.403]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:35:35.405]      __ap = 0; //lets make sure we reset the access point selection
[21:35:35.405]        // -> [__ap <= 0x00000000]
[21:35:35.405]    </block>
[21:35:35.405]  </sequence>
[21:35:35.405]  
[21:35:35.411]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:35:35.411]  
[21:35:35.411]  <debugvars>
[21:35:35.411]    // Pre-defined
[21:35:35.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:35:35.412]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:35:35.412]    __dp=0x00000000
[21:35:35.412]    __ap=0x00000000
[21:35:35.412]    __traceout=0x00000000      (Trace Disabled)
[21:35:35.412]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:35:35.413]    __FlashAddr=0x00000000
[21:35:35.413]    __FlashLen=0x00000000
[21:35:35.413]    __FlashArg=0x00000000
[21:35:35.413]    __FlashOp=0x00000000
[21:35:35.413]    __Result=0x00000000
[21:35:35.413]  </debugvars>
[21:35:35.413]  
[21:35:35.413]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:35:35.413]    <block atomic="false" info="">
[21:35:35.413]      __var deviceID = 0;
[21:35:35.413]        // -> [deviceID <= 0x00000000]
[21:35:35.413]      __var version = 0;
[21:35:35.413]        // -> [version <= 0x00000000]
[21:35:35.413]      __var partNum = 0;
[21:35:35.413]        // -> [partNum <= 0x00000000]
[21:35:35.413]      __var manuf = 0;
[21:35:35.413]        // -> [manuf <= 0x00000000]
[21:35:35.413]      __var isMSPM0G1X0X_G3X0X = 0;
[21:35:35.415]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:35:35.415]      __var isProduction = 0;
[21:35:35.415]        // -> [isProduction <= 0x00000000]
[21:35:35.415]      __var continueId = 0;
[21:35:35.415]        // -> [continueId <= 0x00000000]
[21:35:35.415]      deviceID =   Read32(0x41C40004);
[21:35:35.417]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:35:35.417]        // -> [deviceID <= 0x2BB8802F]
[21:35:35.417]      version = deviceID >> 28;
[21:35:35.417]        // -> [version <= 0x00000002]
[21:35:35.417]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:35:35.417]        // -> [partNum <= 0x0000BB88]
[21:35:35.417]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:35:35.417]        // -> [manuf <= 0x00000017]
[21:35:35.417]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:35:35.418]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:35:35.418]      isProduction = (version > 0);
[21:35:35.418]        // -> [isProduction <= 0x00000001]
[21:35:35.418]    </block>
[21:35:35.418]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:35:35.418]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:35:35.418]        // =>  FALSE
[21:35:35.418]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:35:35.419]    </control>
[21:35:35.419]    <control if="continueId == 4" while="" timeout="0" info="">
[21:35:35.419]      // if-block "continueId == 4"
[21:35:35.419]        // =>  FALSE
[21:35:35.419]      // skip if-block "continueId == 4"
[21:35:35.419]    </control>
[21:35:35.419]    <control if="!isProduction" while="" timeout="0" info="">
[21:35:35.419]      // if-block "!isProduction"
[21:35:35.419]        // =>  FALSE
[21:35:35.419]      // skip if-block "!isProduction"
[21:35:35.420]    </control>
[21:35:35.420]  </sequence>
[21:35:35.420]  
[21:39:18.214]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:39:18.214]  
[21:39:18.223]  <debugvars>
[21:39:18.223]    // Pre-defined
[21:39:18.223]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:18.223]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:18.223]    __dp=0x00000000
[21:39:18.223]    __ap=0x00000000
[21:39:18.224]    __traceout=0x00000000      (Trace Disabled)
[21:39:18.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:18.224]    __FlashAddr=0x00000000
[21:39:18.224]    __FlashLen=0x00000000
[21:39:18.224]    __FlashArg=0x00000000
[21:39:18.224]    __FlashOp=0x00000000
[21:39:18.224]    __Result=0x00000000
[21:39:18.224]  </debugvars>
[21:39:18.224]  
[21:39:18.224]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:39:18.224]    <block atomic="false" info="">
[21:39:18.225]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:39:18.225]        // -> [isSWJ <= 0x00000001]
[21:39:18.225]      __var hasDormant = __protocol & 0x00020000;
[21:39:18.225]        // -> [hasDormant <= 0x00000000]
[21:39:18.225]      __var protType   = __protocol & 0x0000FFFF;
[21:39:18.225]        // -> [protType <= 0x00000002]
[21:39:18.225]    </block>
[21:39:18.225]    <control if="protType == 1" while="" timeout="0" info="">
[21:39:18.225]      // if-block "protType == 1"
[21:39:18.225]        // =>  FALSE
[21:39:18.225]      // skip if-block "protType == 1"
[21:39:18.225]    </control>
[21:39:18.225]    <control if="protType == 2" while="" timeout="0" info="">
[21:39:18.225]      // if-block "protType == 2"
[21:39:18.225]        // =>  TRUE
[21:39:18.227]      <control if="isSWJ" while="" timeout="0" info="">
[21:39:18.227]        // if-block "isSWJ"
[21:39:18.227]          // =>  TRUE
[21:39:18.227]        <control if="hasDormant" while="" timeout="0" info="">
[21:39:18.227]          // if-block "hasDormant"
[21:39:18.227]            // =>  FALSE
[21:39:18.227]          // skip if-block "hasDormant"
[21:39:18.228]        </control>
[21:39:18.228]        <control if="!hasDormant" while="" timeout="0" info="">
[21:39:18.228]          // if-block "!hasDormant"
[21:39:18.228]            // =>  TRUE
[21:39:18.228]          <block atomic="false" info="">
[21:39:18.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:39:18.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:18.229]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:39:18.229]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:39:18.229]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:39:18.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:18.230]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:39:18.230]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:39:18.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:39:18.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:18.231]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:39:18.231]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:39:18.231]          </block>
[21:39:18.231]          // end if-block "!hasDormant"
[21:39:18.231]        </control>
[21:39:18.231]        // end if-block "isSWJ"
[21:39:18.232]      </control>
[21:39:18.232]      <control if="!isSWJ" while="" timeout="0" info="">
[21:39:18.232]        // if-block "!isSWJ"
[21:39:18.232]          // =>  FALSE
[21:39:18.232]        // skip if-block "!isSWJ"
[21:39:18.232]      </control>
[21:39:18.232]      <block atomic="false" info="">
[21:39:18.232]        ReadDP(0x0);
[21:39:18.233]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:39:18.233]      </block>
[21:39:18.233]      // end if-block "protType == 2"
[21:39:18.233]    </control>
[21:39:18.233]  </sequence>
[21:39:18.233]  
[21:39:18.234]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:39:18.234]  
[21:39:18.234]  <debugvars>
[21:39:18.234]    // Pre-defined
[21:39:18.234]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:18.234]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:18.234]    __dp=0x00000000
[21:39:18.234]    __ap=0x00000000
[21:39:18.235]    __traceout=0x00000000      (Trace Disabled)
[21:39:18.235]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:18.235]    __FlashAddr=0x00000000
[21:39:18.235]    __FlashLen=0x00000000
[21:39:18.235]    __FlashArg=0x00000000
[21:39:18.235]    __FlashOp=0x00000000
[21:39:18.235]    __Result=0x00000000
[21:39:18.235]  </debugvars>
[21:39:18.235]  
[21:39:18.235]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:39:18.235]    <block atomic="false" info="">
[21:39:18.235]      __var SW_DP_ABORT       = 0x0;
[21:39:18.235]        // -> [SW_DP_ABORT <= 0x00000000]
[21:39:18.235]      __var DP_CTRL_STAT      = 0x4;
[21:39:18.237]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:39:18.237]      __var DP_SELECT         = 0x8;
[21:39:18.237]        // -> [DP_SELECT <= 0x00000008]
[21:39:18.237]      __var powered_down      = 0;
[21:39:18.237]        // -> [powered_down <= 0x00000000]
[21:39:18.237]      WriteDP(DP_SELECT, 0x00000000);
[21:39:18.238]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:39:18.238]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:39:18.238]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:39:18.239]        // -> [powered_down <= 0x00000001]
[21:39:18.239]    </block>
[21:39:18.239]    <control if="powered_down" while="" timeout="0" info="">
[21:39:18.239]      // if-block "powered_down"
[21:39:18.239]        // =>  TRUE
[21:39:18.239]      <block atomic="false" info="">
[21:39:18.239]        Message(0, "Debug/System power-up request sent");
[21:39:18.241]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:39:18.242]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:39:18.242]      </block>
[21:39:18.242]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:39:18.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:18.244]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:39:18.244]        // while-condition  =>  FALSE
[21:39:18.244]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:39:18.244]      </control>
[21:39:18.244]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:39:18.244]        // if-block "(__protocol & 0xFFFF) == 1"
[21:39:18.244]          // =>  FALSE
[21:39:18.244]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:39:18.244]      </control>
[21:39:18.244]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:39:18.244]        // if-block "(__protocol & 0xFFFF) == 2"
[21:39:18.244]          // =>  TRUE
[21:39:18.245]        <block atomic="false" info="">
[21:39:18.245]          Message(0, "executing SWD power up");
[21:39:18.246]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:39:18.247]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:39:18.247]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:39:18.248]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:39:18.248]        </block>
[21:39:18.248]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:39:18.248]      </control>
[21:39:18.248]      // end if-block "powered_down"
[21:39:18.248]    </control>
[21:39:18.248]    <block atomic="false" info="">
[21:39:18.248]      __var DEBUG_PORT_VAL    = 0;
[21:39:18.249]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:39:18.249]      __var ACCESS_POINT_VAL  = 0;
[21:39:18.249]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:39:18.249]      __ap = 1; 
[21:39:18.249]        // -> [__ap <= 0x00000001]
[21:39:18.249]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:39:18.250]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:39:18.250]      __ap = 4;
[21:39:18.250]        // -> [__ap <= 0x00000004]
[21:39:18.250]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:39:18.252]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:39:18.252]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:39:18.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:39:18.253]    </block>
[21:39:18.253]    <block atomic="false" info="">
[21:39:18.254]      __var nReset = 0x80;
[21:39:18.254]        // -> [nReset <= 0x00000080]
[21:39:18.254]      __var canReadPins = 0;
[21:39:18.254]        // -> [canReadPins <= 0x00000000]
[21:39:18.254]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:39:18.254]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:39:18.254]        // -> [canReadPins <= 0x00000001]
[21:39:18.255]    </block>
[21:39:18.255]    <control if="" while="1" timeout="200" info="">
[21:39:18.255]      // while "1"  (timeout="200")
[21:39:18.255]      // while-condition  =>  TRUE
[21:39:18.255]      // while "1"  (timeout="200")
[21:39:18.255]      // while-condition  =>  TRUE
[21:39:18.255]      // while "1"  (timeout="200")
[21:39:18.255]      // while-condition  =>  TRUE
[21:39:18.255]      // while "1"  (timeout="200")
[21:39:18.255]      // while-condition  =>  TRUE
[21:39:18.256]      // while "1"  (timeout="200")
[21:39:18.256]      // while-condition  =>  TRUE
[21:39:18.256]      // while "1"  (timeout="200")
[21:39:18.256]      // while-condition  =>  TRUE
[21:39:18.257]      // while "1"  (timeout="200")
[21:39:18.257]      // while-condition  =>  TRUE
[21:39:18.257]      // while "1"  (timeout="200")
[21:39:18.257]      // while-condition  =>  TRUE
[21:39:18.257]      // while "1"  (timeout="200")
[21:39:18.257]      // while-condition  =>  TRUE
[21:39:18.257]      // while "1"  (timeout="200")
[21:39:18.258]      // while-condition  =>  TRUE
[21:39:18.258]      // while "1"  (timeout="200")
[21:39:18.258]      // while-condition  =>  TRUE
[21:39:18.258]      // while "1"  (timeout="200")
[21:39:18.258]      // while-condition  =>  TRUE
[21:39:18.258]      // while "1"  (timeout="200")
[21:39:18.258]      // while-condition  =>  TRUE
[21:39:18.258]      // while "1"  (timeout="200")
[21:39:18.259]      // while-condition  =>  TRUE
[21:39:18.259]      // while "1"  (timeout="200")
[21:39:18.259]      // while-condition  =>  TRUE
[21:39:18.259]      // while "1"  (timeout="200")
[21:39:18.259]      // while-condition  =>  TRUE
[21:39:18.259]      // while "1"  (timeout="200")
[21:39:18.259]      // while-condition  =>  TRUE
[21:39:18.259]      // while "1"  (timeout="200")
[21:39:18.259]      // while-condition  =>  TRUE
[21:39:18.260]      // while "1"  (timeout="200")
[21:39:18.260]      // while-condition  =>  TRUE
[21:39:18.260]      // while "1"  (timeout="200")
[21:39:18.260]      // while-condition  =>  TRUE
[21:39:18.260]      // while "1"  (timeout="200")
[21:39:18.260]      // while-condition  =>  TRUE
[21:39:18.260]      // while "1"  (timeout="200")
[21:39:18.260]      // while-condition  =>  TRUE
[21:39:18.260]      // while "1"  (timeout="200")
[21:39:18.260]      // while-condition  =>  TRUE
[21:39:18.261]      // while "1"  (timeout="200")
[21:39:18.261]      // while-condition  =>  TRUE
[21:39:18.261]      // while "1"  (timeout="200")
[21:39:18.261]      // while-condition  =>  TRUE
[21:39:18.261]      // while "1"  (timeout="200")
[21:39:18.261]      // while-condition  =>  TRUE
[21:39:18.261]      // while "1"  (timeout="200")
[21:39:18.261]      // while-condition  =>  TRUE
[21:39:18.261]      // while "1"  (timeout="200")
[21:39:18.261]      // while-condition  =>  TRUE
[21:39:18.261]      // while "1"  (timeout="200")
[21:39:18.262]      // while-condition  =>  TRUE
[21:39:18.262]      // while "1"  (timeout="200")
[21:39:18.262]      // while-condition  =>  TRUE
[21:39:18.262]      // while "1"  (timeout="200")
[21:39:18.262]      // while-condition  =>  TRUE
[21:39:18.262]      // while "1"  (timeout="200")
[21:39:18.262]      // while-condition  =>  TRUE
[21:39:18.262]      // while "1"  (timeout="200")
[21:39:18.262]      // while-condition  =>  TRUE
[21:39:18.262]      // while "1"  (timeout="200")
[21:39:18.262]      // while-condition  =>  TRUE
[21:39:18.263]      // while "1"  (timeout="200")
[21:39:18.263]      // while-condition  =>  TRUE
[21:39:18.263]      // while "1"  (timeout="200")
[21:39:18.263]      // while-condition  =>  TRUE
[21:39:18.263]      // while "1"  (timeout="200")
[21:39:18.263]      // while-condition  =>  TRUE
[21:39:18.263]      // while "1"  (timeout="200")
[21:39:18.263]      // while-condition  =>  TRUE
[21:39:18.263]      // while "1"  (timeout="200")
[21:39:18.265]      // while-condition  =>  TRUE
[21:39:18.265]      // while "1"  (timeout="200")
[21:39:18.265]      // while-condition  =>  TRUE
[21:39:18.265]      // while "1"  (timeout="200")
[21:39:18.265]      // while-condition  =>  TRUE
[21:39:18.265]      // while "1"  (timeout="200")
[21:39:18.265]      // while-condition  =>  TRUE
[21:39:18.265]      // while "1"  (timeout="200")
[21:39:18.265]      // while-condition  =>  TRUE
[21:39:18.265]      // while "1"  (timeout="200")
[21:39:18.265]      // while-condition  =>  TRUE
[21:39:18.265]      // while "1"  (timeout="200")
[21:39:18.265]      // while-condition  =>  TRUE
[21:39:18.266]      // while "1"  (timeout="200")
[21:39:18.266]      // while-condition  =>  TRUE
[21:39:18.266]      // while "1"  (timeout="200")
[21:39:18.266]      // while-condition  =>  TRUE
[21:39:18.266]      // while "1"  (timeout="200")
[21:39:18.267]      // while-condition  =>  TRUE
[21:39:18.267]      // while "1"  (timeout="200")
[21:39:18.267]      // while-condition  =>  TRUE
[21:39:18.267]      // while "1"  (timeout="200")
[21:39:18.267]      // while-condition  =>  TRUE
[21:39:18.267]      // while "1"  (timeout="200")
[21:39:18.267]      // while-condition  =>  TRUE
[21:39:18.267]      // while "1"  (timeout="200")
[21:39:18.267]      // while-condition  =>  TRUE
[21:39:18.268]      // while "1"  (timeout="200")
[21:39:18.268]      // while-condition  =>  TRUE
[21:39:18.268]      // while "1"  (timeout="200")
[21:39:18.268]      // while-condition  =>  TRUE
[21:39:18.268]      // while "1"  (timeout="200")
[21:39:18.268]      // while-condition  =>  TRUE
[21:39:18.268]      // while "1"  (timeout="200")
[21:39:18.268]      // while-condition  =>  TRUE
[21:39:18.269]      // while "1"  (timeout="200")
[21:39:18.269]      // while-condition  =>  TRUE
[21:39:18.269]      // while "1"  (timeout="200")
[21:39:18.269]      // while-condition  =>  TRUE
[21:39:18.269]      // while "1"  (timeout="200")
[21:39:18.269]      // while-condition  =>  TRUE
[21:39:18.270]      // while "1"  (timeout="200")
[21:39:18.270]      // while  =>  TIMEOUT
[21:39:18.270]      // end while "1"
[21:39:18.270]    </control>
[21:39:18.270]    <control if="canReadPins" while="" timeout="0" info="">
[21:39:18.270]      // if-block "canReadPins"
[21:39:18.270]        // =>  TRUE
[21:39:18.270]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:39:18.270]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:39:18.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:39:18.271]        // while-condition  =>  FALSE
[21:39:18.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:39:18.271]      </control>
[21:39:18.271]      // end if-block "canReadPins"
[21:39:18.271]    </control>
[21:39:18.271]    <control if="!canReadPins" while="" timeout="0" info="">
[21:39:18.271]      // if-block "!canReadPins"
[21:39:18.272]        // =>  FALSE
[21:39:18.272]      // skip if-block "!canReadPins"
[21:39:18.272]    </control>
[21:39:18.272]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:39:18.272]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:39:18.272]        // =>  TRUE
[21:39:18.272]      <block atomic="false" info="">
[21:39:18.272]        WriteAP(0x00, 0x190008);
[21:39:18.273]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:39:18.273]        WriteAP(0xF0, 0x01);
[21:39:18.275]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:39:18.275]      </block>
[21:39:18.275]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:39:18.275]    </control>
[21:39:18.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:39:18.276]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:39:18.276]        // =>  FALSE
[21:39:18.276]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:39:18.276]    </control>
[21:39:18.276]    <block atomic="false" info="">
[21:39:18.276]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:39:18.277]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:39:18.277]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:39:18.278]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:39:18.279]      __ap = 0; //lets make sure we reset the access point selection
[21:39:18.279]        // -> [__ap <= 0x00000000]
[21:39:18.279]    </block>
[21:39:18.280]  </sequence>
[21:39:18.280]  
[21:39:18.286]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:39:18.286]  
[21:39:18.286]  <debugvars>
[21:39:18.286]    // Pre-defined
[21:39:18.286]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:18.287]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:18.287]    __dp=0x00000000
[21:39:18.287]    __ap=0x00000000
[21:39:18.287]    __traceout=0x00000000      (Trace Disabled)
[21:39:18.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:18.287]    __FlashAddr=0x00000000
[21:39:18.287]    __FlashLen=0x00000000
[21:39:18.287]    __FlashArg=0x00000000
[21:39:18.287]    __FlashOp=0x00000000
[21:39:18.287]    __Result=0x00000000
[21:39:18.287]  </debugvars>
[21:39:18.287]  
[21:39:18.287]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:39:18.287]    <block atomic="false" info="">
[21:39:18.287]      __var deviceID = 0;
[21:39:18.288]        // -> [deviceID <= 0x00000000]
[21:39:18.288]      __var version = 0;
[21:39:18.288]        // -> [version <= 0x00000000]
[21:39:18.288]      __var partNum = 0;
[21:39:18.288]        // -> [partNum <= 0x00000000]
[21:39:18.289]      __var manuf = 0;
[21:39:18.289]        // -> [manuf <= 0x00000000]
[21:39:18.289]      __var isMSPM0G1X0X_G3X0X = 0;
[21:39:18.289]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:39:18.289]      __var isProduction = 0;
[21:39:18.289]        // -> [isProduction <= 0x00000000]
[21:39:18.289]      __var continueId = 0;
[21:39:18.289]        // -> [continueId <= 0x00000000]
[21:39:18.289]      deviceID =   Read32(0x41C40004);
[21:39:18.292]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:39:18.292]        // -> [deviceID <= 0x2BB8802F]
[21:39:18.292]      version = deviceID >> 28;
[21:39:18.292]        // -> [version <= 0x00000002]
[21:39:18.293]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:39:18.293]        // -> [partNum <= 0x0000BB88]
[21:39:18.293]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:39:18.293]        // -> [manuf <= 0x00000017]
[21:39:18.293]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:39:18.293]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:39:18.293]      isProduction = (version > 0);
[21:39:18.293]        // -> [isProduction <= 0x00000001]
[21:39:18.293]    </block>
[21:39:18.294]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:39:18.294]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:39:18.294]        // =>  FALSE
[21:39:18.294]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:39:18.294]    </control>
[21:39:18.294]    <control if="continueId == 4" while="" timeout="0" info="">
[21:39:18.294]      // if-block "continueId == 4"
[21:39:18.294]        // =>  FALSE
[21:39:18.294]      // skip if-block "continueId == 4"
[21:39:18.294]    </control>
[21:39:18.295]    <control if="!isProduction" while="" timeout="0" info="">
[21:39:18.295]      // if-block "!isProduction"
[21:39:18.295]        // =>  FALSE
[21:39:18.295]      // skip if-block "!isProduction"
[21:39:18.295]    </control>
[21:39:18.295]  </sequence>
[21:39:18.295]  
[21:39:31.570]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:39:31.570]  
[21:39:31.579]  <debugvars>
[21:39:31.579]    // Pre-defined
[21:39:31.579]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:31.579]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:39:31.579]    __dp=0x00000000
[21:39:31.579]    __ap=0x00000000
[21:39:31.580]    __traceout=0x00000000      (Trace Disabled)
[21:39:31.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:31.580]    __FlashAddr=0x00000000
[21:39:31.580]    __FlashLen=0x00000000
[21:39:31.580]    __FlashArg=0x00000000
[21:39:31.580]    __FlashOp=0x00000000
[21:39:31.580]    __Result=0x00000000
[21:39:31.580]  </debugvars>
[21:39:31.580]  
[21:39:31.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:39:31.580]    <block atomic="false" info="">
[21:39:31.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:39:31.581]        // -> [isSWJ <= 0x00000001]
[21:39:31.581]      __var hasDormant = __protocol & 0x00020000;
[21:39:31.581]        // -> [hasDormant <= 0x00000000]
[21:39:31.581]      __var protType   = __protocol & 0x0000FFFF;
[21:39:31.581]        // -> [protType <= 0x00000002]
[21:39:31.581]    </block>
[21:39:31.581]    <control if="protType == 1" while="" timeout="0" info="">
[21:39:31.581]      // if-block "protType == 1"
[21:39:31.581]        // =>  FALSE
[21:39:31.581]      // skip if-block "protType == 1"
[21:39:31.582]    </control>
[21:39:31.582]    <control if="protType == 2" while="" timeout="0" info="">
[21:39:31.582]      // if-block "protType == 2"
[21:39:31.582]        // =>  TRUE
[21:39:31.582]      <control if="isSWJ" while="" timeout="0" info="">
[21:39:31.582]        // if-block "isSWJ"
[21:39:31.582]          // =>  TRUE
[21:39:31.582]        <control if="hasDormant" while="" timeout="0" info="">
[21:39:31.582]          // if-block "hasDormant"
[21:39:31.582]            // =>  FALSE
[21:39:31.582]          // skip if-block "hasDormant"
[21:39:31.582]        </control>
[21:39:31.582]        <control if="!hasDormant" while="" timeout="0" info="">
[21:39:31.583]          // if-block "!hasDormant"
[21:39:31.583]            // =>  TRUE
[21:39:31.583]          <block atomic="false" info="">
[21:39:31.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:39:31.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:31.583]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:39:31.584]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:39:31.584]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:39:31.584]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:31.584]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:39:31.584]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:39:31.585]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:39:31.585]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:31.585]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:39:31.585]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:39:31.585]          </block>
[21:39:31.585]          // end if-block "!hasDormant"
[21:39:31.585]        </control>
[21:39:31.585]        // end if-block "isSWJ"
[21:39:31.585]      </control>
[21:39:31.585]      <control if="!isSWJ" while="" timeout="0" info="">
[21:39:31.585]        // if-block "!isSWJ"
[21:39:31.587]          // =>  FALSE
[21:39:31.587]        // skip if-block "!isSWJ"
[21:39:31.587]      </control>
[21:39:31.587]      <block atomic="false" info="">
[21:39:31.587]        ReadDP(0x0);
[21:39:31.588]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:39:31.588]      </block>
[21:39:31.588]      // end if-block "protType == 2"
[21:39:31.588]    </control>
[21:39:31.588]  </sequence>
[21:39:31.588]  
[21:39:31.589]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:39:31.589]  
[21:39:31.589]  <debugvars>
[21:39:31.589]    // Pre-defined
[21:39:31.589]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:31.590]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:39:31.590]    __dp=0x00000000
[21:39:31.590]    __ap=0x00000000
[21:39:31.590]    __traceout=0x00000000      (Trace Disabled)
[21:39:31.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:31.590]    __FlashAddr=0x00000000
[21:39:31.590]    __FlashLen=0x00000000
[21:39:31.590]    __FlashArg=0x00000000
[21:39:31.590]    __FlashOp=0x00000000
[21:39:31.590]    __Result=0x00000000
[21:39:31.590]  </debugvars>
[21:39:31.591]  
[21:39:31.591]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:39:31.591]    <block atomic="false" info="">
[21:39:31.591]      __var SW_DP_ABORT       = 0x0;
[21:39:31.591]        // -> [SW_DP_ABORT <= 0x00000000]
[21:39:31.591]      __var DP_CTRL_STAT      = 0x4;
[21:39:31.591]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:39:31.591]      __var DP_SELECT         = 0x8;
[21:39:31.591]        // -> [DP_SELECT <= 0x00000008]
[21:39:31.592]      __var powered_down      = 0;
[21:39:31.592]        // -> [powered_down <= 0x00000000]
[21:39:31.592]      WriteDP(DP_SELECT, 0x00000000);
[21:39:31.592]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:39:31.592]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:39:31.593]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:39:31.593]        // -> [powered_down <= 0x00000001]
[21:39:31.593]    </block>
[21:39:31.593]    <control if="powered_down" while="" timeout="0" info="">
[21:39:31.593]      // if-block "powered_down"
[21:39:31.593]        // =>  TRUE
[21:39:31.593]      <block atomic="false" info="">
[21:39:31.593]        Message(0, "Debug/System power-up request sent");
[21:39:31.595]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:39:31.595]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:39:31.595]      </block>
[21:39:31.595]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:39:31.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:31.597]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:39:31.597]        // while-condition  =>  FALSE
[21:39:31.597]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:39:31.597]      </control>
[21:39:31.597]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:39:31.597]        // if-block "(__protocol & 0xFFFF) == 1"
[21:39:31.597]          // =>  FALSE
[21:39:31.597]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:39:31.597]      </control>
[21:39:31.597]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:39:31.597]        // if-block "(__protocol & 0xFFFF) == 2"
[21:39:31.598]          // =>  TRUE
[21:39:31.598]        <block atomic="false" info="">
[21:39:31.598]          Message(0, "executing SWD power up");
[21:39:31.599]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:39:31.600]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:39:31.600]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:39:31.601]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:39:31.601]        </block>
[21:39:31.601]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:39:31.601]      </control>
[21:39:31.601]      // end if-block "powered_down"
[21:39:31.601]    </control>
[21:39:31.601]    <block atomic="false" info="">
[21:39:31.601]      __var DEBUG_PORT_VAL    = 0;
[21:39:31.601]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:39:31.601]      __var ACCESS_POINT_VAL  = 0;
[21:39:31.601]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:39:31.601]      __ap = 1; 
[21:39:31.601]        // -> [__ap <= 0x00000001]
[21:39:31.602]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:39:31.603]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:39:31.603]      __ap = 4;
[21:39:31.603]        // -> [__ap <= 0x00000004]
[21:39:31.603]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:39:31.604]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:39:31.604]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:39:31.605]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:39:31.606]    </block>
[21:39:31.606]    <block atomic="false" info="">
[21:39:31.606]      __var nReset = 0x80;
[21:39:31.606]        // -> [nReset <= 0x00000080]
[21:39:31.606]      __var canReadPins = 0;
[21:39:31.606]        // -> [canReadPins <= 0x00000000]
[21:39:31.606]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:39:31.608]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:39:31.608]        // -> [canReadPins <= 0x00000001]
[21:39:31.608]    </block>
[21:39:31.608]    <control if="" while="1" timeout="200" info="">
[21:39:31.608]      // while "1"  (timeout="200")
[21:39:31.608]      // while-condition  =>  TRUE
[21:39:31.608]      // while "1"  (timeout="200")
[21:39:31.608]      // while-condition  =>  TRUE
[21:39:31.608]      // while "1"  (timeout="200")
[21:39:31.609]      // while-condition  =>  TRUE
[21:39:31.609]      // while "1"  (timeout="200")
[21:39:31.609]      // while-condition  =>  TRUE
[21:39:31.609]      // while "1"  (timeout="200")
[21:39:31.609]      // while-condition  =>  TRUE
[21:39:31.609]      // while "1"  (timeout="200")
[21:39:31.609]      // while-condition  =>  TRUE
[21:39:31.609]      // while "1"  (timeout="200")
[21:39:31.609]      // while-condition  =>  TRUE
[21:39:31.609]      // while "1"  (timeout="200")
[21:39:31.610]      // while-condition  =>  TRUE
[21:39:31.610]      // while "1"  (timeout="200")
[21:39:31.610]      // while-condition  =>  TRUE
[21:39:31.610]      // while "1"  (timeout="200")
[21:39:31.610]      // while-condition  =>  TRUE
[21:39:31.610]      // while "1"  (timeout="200")
[21:39:31.610]      // while-condition  =>  TRUE
[21:39:31.611]      // while "1"  (timeout="200")
[21:39:31.611]      // while-condition  =>  TRUE
[21:39:31.611]      // while "1"  (timeout="200")
[21:39:31.611]      // while-condition  =>  TRUE
[21:39:31.611]      // while "1"  (timeout="200")
[21:39:31.611]      // while-condition  =>  TRUE
[21:39:31.611]      // while "1"  (timeout="200")
[21:39:31.611]      // while-condition  =>  TRUE
[21:39:31.611]      // while "1"  (timeout="200")
[21:39:31.611]      // while-condition  =>  TRUE
[21:39:31.611]      // while "1"  (timeout="200")
[21:39:31.612]      // while-condition  =>  TRUE
[21:39:31.612]      // while "1"  (timeout="200")
[21:39:31.612]      // while-condition  =>  TRUE
[21:39:31.612]      // while "1"  (timeout="200")
[21:39:31.612]      // while-condition  =>  TRUE
[21:39:31.612]      // while "1"  (timeout="200")
[21:39:31.612]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.613]      // while "1"  (timeout="200")
[21:39:31.613]      // while-condition  =>  TRUE
[21:39:31.614]      // while "1"  (timeout="200")
[21:39:31.614]      // while  =>  TIMEOUT
[21:39:31.614]      // end while "1"
[21:39:31.614]    </control>
[21:39:31.614]    <control if="canReadPins" while="" timeout="0" info="">
[21:39:31.614]      // if-block "canReadPins"
[21:39:31.614]        // =>  TRUE
[21:39:31.614]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:39:31.614]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:39:31.615]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:39:31.615]        // while-condition  =>  FALSE
[21:39:31.615]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:39:31.615]      </control>
[21:39:31.615]      // end if-block "canReadPins"
[21:39:31.615]    </control>
[21:39:31.615]    <control if="!canReadPins" while="" timeout="0" info="">
[21:39:31.615]      // if-block "!canReadPins"
[21:39:31.615]        // =>  FALSE
[21:39:31.617]      // skip if-block "!canReadPins"
[21:39:31.617]    </control>
[21:39:31.617]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:39:31.617]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:39:31.617]        // =>  TRUE
[21:39:31.617]      <block atomic="false" info="">
[21:39:31.617]        WriteAP(0x00, 0x190008);
[21:39:31.618]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:39:31.618]        WriteAP(0xF0, 0x01);
[21:39:31.619]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:39:31.619]      </block>
[21:39:31.619]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:39:31.619]    </control>
[21:39:31.619]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:39:31.621]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:39:31.621]        // =>  FALSE
[21:39:31.621]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:39:31.621]    </control>
[21:39:31.621]    <block atomic="false" info="">
[21:39:31.621]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:39:31.622]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:39:31.622]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:39:31.622]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:39:31.623]      __ap = 0; //lets make sure we reset the access point selection
[21:39:31.624]        // -> [__ap <= 0x00000000]
[21:39:31.624]    </block>
[21:39:31.624]  </sequence>
[21:39:31.624]  
[21:39:31.630]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:39:31.630]  
[21:39:31.630]  <debugvars>
[21:39:31.630]    // Pre-defined
[21:39:31.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:31.631]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:39:31.631]    __dp=0x00000000
[21:39:31.631]    __ap=0x00000000
[21:39:31.631]    __traceout=0x00000000      (Trace Disabled)
[21:39:31.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:31.631]    __FlashAddr=0x00000000
[21:39:31.631]    __FlashLen=0x00000000
[21:39:31.631]    __FlashArg=0x00000000
[21:39:31.631]    __FlashOp=0x00000000
[21:39:31.631]    __Result=0x00000000
[21:39:31.631]  </debugvars>
[21:39:31.632]  
[21:39:31.632]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:39:31.632]    <block atomic="false" info="">
[21:39:31.632]      __var deviceID = 0;
[21:39:31.632]        // -> [deviceID <= 0x00000000]
[21:39:31.632]      __var version = 0;
[21:39:31.632]        // -> [version <= 0x00000000]
[21:39:31.634]      __var partNum = 0;
[21:39:31.634]        // -> [partNum <= 0x00000000]
[21:39:31.634]      __var manuf = 0;
[21:39:31.634]        // -> [manuf <= 0x00000000]
[21:39:31.634]      __var isMSPM0G1X0X_G3X0X = 0;
[21:39:31.634]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:39:31.634]      __var isProduction = 0;
[21:39:31.634]        // -> [isProduction <= 0x00000000]
[21:39:31.634]      __var continueId = 0;
[21:39:31.634]        // -> [continueId <= 0x00000000]
[21:39:31.635]      deviceID =   Read32(0x41C40004);
[21:39:31.636]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:39:31.636]        // -> [deviceID <= 0x2BB8802F]
[21:39:31.636]      version = deviceID >> 28;
[21:39:31.636]        // -> [version <= 0x00000002]
[21:39:31.636]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:39:31.637]        // -> [partNum <= 0x0000BB88]
[21:39:31.637]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:39:31.637]        // -> [manuf <= 0x00000017]
[21:39:31.637]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:39:31.637]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:39:31.637]      isProduction = (version > 0);
[21:39:31.637]        // -> [isProduction <= 0x00000001]
[21:39:31.637]    </block>
[21:39:31.637]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:39:31.637]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:39:31.637]        // =>  FALSE
[21:39:31.638]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:39:31.638]    </control>
[21:39:31.638]    <control if="continueId == 4" while="" timeout="0" info="">
[21:39:31.638]      // if-block "continueId == 4"
[21:39:31.638]        // =>  FALSE
[21:39:31.638]      // skip if-block "continueId == 4"
[21:39:31.638]    </control>
[21:39:31.638]    <control if="!isProduction" while="" timeout="0" info="">
[21:39:31.638]      // if-block "!isProduction"
[21:39:31.638]        // =>  FALSE
[21:39:31.638]      // skip if-block "!isProduction"
[21:39:31.639]    </control>
[21:39:31.639]  </sequence>
[21:39:31.639]  
