/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0008.log
 *  Created     : 03:32:41 (31/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[03:32:41.913]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:32:41.913]  
[03:32:41.914]  <debugvars>
[03:32:41.914]    // Pre-defined
[03:32:41.914]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:41.914]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:32:41.914]    __dp=0x00000000
[03:32:41.914]    __ap=0x00000000
[03:32:41.915]    __traceout=0x00000000      (Trace Disabled)
[03:32:41.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:41.915]    __FlashAddr=0x00000000
[03:32:41.915]    __FlashLen=0x00000000
[03:32:41.915]    __FlashArg=0x00000000
[03:32:41.915]    __FlashOp=0x00000000
[03:32:41.915]    __Result=0x00000000
[03:32:41.915]  </debugvars>
[03:32:41.915]  
[03:32:41.915]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:32:41.915]    <block atomic="false" info="">
[03:32:41.915]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:32:41.915]        // -> [isSWJ <= 0x00000001]
[03:32:41.915]      __var hasDormant = __protocol & 0x00020000;
[03:32:41.915]        // -> [hasDormant <= 0x00000000]
[03:32:41.915]      __var protType   = __protocol & 0x0000FFFF;
[03:32:41.915]        // -> [protType <= 0x00000002]
[03:32:41.915]    </block>
[03:32:41.915]    <control if="protType == 1" while="" timeout="0" info="">
[03:32:41.915]      // if-block "protType == 1"
[03:32:41.915]        // =>  FALSE
[03:32:41.915]      // skip if-block "protType == 1"
[03:32:41.915]    </control>
[03:32:41.915]    <control if="protType == 2" while="" timeout="0" info="">
[03:32:41.917]      // if-block "protType == 2"
[03:32:41.917]        // =>  TRUE
[03:32:41.917]      <control if="isSWJ" while="" timeout="0" info="">
[03:32:41.917]        // if-block "isSWJ"
[03:32:41.917]          // =>  TRUE
[03:32:41.917]        <control if="hasDormant" while="" timeout="0" info="">
[03:32:41.917]          // if-block "hasDormant"
[03:32:41.917]            // =>  FALSE
[03:32:41.917]          // skip if-block "hasDormant"
[03:32:41.917]        </control>
[03:32:41.917]        <control if="!hasDormant" while="" timeout="0" info="">
[03:32:41.917]          // if-block "!hasDormant"
[03:32:41.917]            // =>  TRUE
[03:32:41.917]          <block atomic="false" info="">
[03:32:41.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:32:41.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:32:41.921]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:32:41.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:32:41.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:32:41.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:32:41.926]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:32:41.928]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:32:41.928]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:32:41.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:32:41.928]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:32:41.930]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:32:41.930]          </block>
[03:32:41.931]          // end if-block "!hasDormant"
[03:32:41.931]        </control>
[03:32:41.931]        // end if-block "isSWJ"
[03:32:41.931]      </control>
[03:32:41.931]      <control if="!isSWJ" while="" timeout="0" info="">
[03:32:41.931]        // if-block "!isSWJ"
[03:32:41.931]          // =>  FALSE
[03:32:41.931]        // skip if-block "!isSWJ"
[03:32:41.931]      </control>
[03:32:41.931]      <block atomic="false" info="">
[03:32:41.931]        ReadDP(0x0);
[03:32:41.932]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:32:41.932]      </block>
[03:32:41.932]      // end if-block "protType == 2"
[03:32:41.934]    </control>
[03:32:41.934]  </sequence>
[03:32:41.934]  
[03:32:41.934]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:32:41.934]  
[03:32:41.934]  <debugvars>
[03:32:41.934]    // Pre-defined
[03:32:41.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:41.934]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:32:41.934]    __dp=0x00000000
[03:32:41.938]    __ap=0x00000000
[03:32:41.938]    __traceout=0x00000000      (Trace Disabled)
[03:32:41.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:41.938]    __FlashAddr=0x00000000
[03:32:41.938]    __FlashLen=0x00000000
[03:32:41.938]    __FlashArg=0x00000000
[03:32:41.938]    __FlashOp=0x00000000
[03:32:41.938]    __Result=0x00000000
[03:32:41.938]  </debugvars>
[03:32:41.938]  
[03:32:41.938]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:32:41.938]    <block atomic="false" info="">
[03:32:41.938]      __var SW_DP_ABORT       = 0x0;
[03:32:41.938]        // -> [SW_DP_ABORT <= 0x00000000]
[03:32:41.938]      __var DP_CTRL_STAT      = 0x4;
[03:32:41.938]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:32:41.940]      __var DP_SELECT         = 0x8;
[03:32:41.940]        // -> [DP_SELECT <= 0x00000008]
[03:32:41.940]      __var powered_down      = 0;
[03:32:41.940]        // -> [powered_down <= 0x00000000]
[03:32:41.940]      WriteDP(DP_SELECT, 0x00000000);
[03:32:41.941]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:32:41.941]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:32:41.943]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:32:41.943]        // -> [powered_down <= 0x00000001]
[03:32:41.943]    </block>
[03:32:41.943]    <control if="powered_down" while="" timeout="0" info="">
[03:32:41.943]      // if-block "powered_down"
[03:32:41.943]        // =>  TRUE
[03:32:41.943]      <block atomic="false" info="">
[03:32:41.943]        Message(0, "Debug/System power-up request sent");
[03:32:41.947]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:32:41.951]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:32:41.951]      </block>
[03:32:41.951]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:32:41.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:32:41.955]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:32:41.955]        // while-condition  =>  FALSE
[03:32:41.955]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:32:41.955]      </control>
[03:32:41.955]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:32:41.955]        // if-block "(__protocol & 0xFFFF) == 1"
[03:32:41.955]          // =>  FALSE
[03:32:41.955]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:32:41.955]      </control>
[03:32:41.955]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:32:41.955]        // if-block "(__protocol & 0xFFFF) == 2"
[03:32:41.955]          // =>  TRUE
[03:32:41.955]        <block atomic="false" info="">
[03:32:41.955]          Message(0, "executing SWD power up");
[03:32:41.959]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:32:41.961]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:32:41.961]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:32:41.963]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:32:41.963]        </block>
[03:32:41.963]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:32:41.963]      </control>
[03:32:41.963]      // end if-block "powered_down"
[03:32:41.963]    </control>
[03:32:41.963]    <block atomic="false" info="">
[03:32:41.963]      __var DEBUG_PORT_VAL    = 0;
[03:32:41.963]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:32:41.963]      __var ACCESS_POINT_VAL  = 0;
[03:32:41.963]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:32:41.963]      __ap = 1; 
[03:32:41.963]        // -> [__ap <= 0x00000001]
[03:32:41.963]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:32:41.975]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:32:41.975]      __ap = 4;
[03:32:41.975]        // -> [__ap <= 0x00000004]
[03:32:41.975]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:32:41.983]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:32:41.983]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:32:41.983]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:32:41.984]    </block>
[03:32:41.984]    <block atomic="false" info="">
[03:32:41.984]      __var nReset = 0x80;
[03:32:41.984]        // -> [nReset <= 0x00000080]
[03:32:41.984]      __var canReadPins = 0;
[03:32:41.985]        // -> [canReadPins <= 0x00000000]
[03:32:41.985]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:32:41.987]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:32:41.987]        // -> [canReadPins <= 0x00000001]
[03:32:41.988]    </block>
[03:32:41.988]    <control if="" while="1" timeout="200" info="">
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.988]      // while-condition  =>  TRUE
[03:32:41.988]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.991]      // while-condition  =>  TRUE
[03:32:41.991]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.995]      // while-condition  =>  TRUE
[03:32:41.995]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:41.999]      // while-condition  =>  TRUE
[03:32:41.999]      // while "1"  (timeout="200")
[03:32:42.001]      // while-condition  =>  TRUE
[03:32:42.001]      // while "1"  (timeout="200")
[03:32:42.001]      // while  =>  TIMEOUT
[03:32:42.001]      // end while "1"
[03:32:42.001]    </control>
[03:32:42.001]    <control if="canReadPins" while="" timeout="0" info="">
[03:32:42.001]      // if-block "canReadPins"
[03:32:42.001]        // =>  TRUE
[03:32:42.001]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:32:42.001]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:32:42.010]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:32:42.010]        // while-condition  =>  FALSE
[03:32:42.010]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:32:42.011]      </control>
[03:32:42.011]      // end if-block "canReadPins"
[03:32:42.011]    </control>
[03:32:42.011]    <control if="!canReadPins" while="" timeout="0" info="">
[03:32:42.011]      // if-block "!canReadPins"
[03:32:42.011]        // =>  FALSE
[03:32:42.011]      // skip if-block "!canReadPins"
[03:32:42.012]    </control>
[03:32:42.012]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:32:42.012]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:32:42.012]        // =>  TRUE
[03:32:42.012]      <block atomic="false" info="">
[03:32:42.012]        WriteAP(0x00, 0x190008);
[03:32:42.012]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:32:42.012]        WriteAP(0xF0, 0x01);
[03:32:42.015]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:32:42.015]      </block>
[03:32:42.015]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:32:42.015]    </control>
[03:32:42.015]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:32:42.019]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:32:42.019]        // =>  FALSE
[03:32:42.019]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:32:42.019]    </control>
[03:32:42.019]    <block atomic="false" info="">
[03:32:42.019]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:32:42.023]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:32:42.023]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:32:42.023]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:32:42.025]      __ap = 0; //lets make sure we reset the access point selection
[03:32:42.025]        // -> [__ap <= 0x00000000]
[03:32:42.025]    </block>
[03:32:42.025]  </sequence>
[03:32:42.025]  
[03:32:42.058]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:32:42.058]  
[03:32:42.058]  <debugvars>
[03:32:42.058]    // Pre-defined
[03:32:42.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:42.058]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:32:42.058]    __dp=0x00000000
[03:32:42.058]    __ap=0x00000000
[03:32:42.058]    __traceout=0x00000000      (Trace Disabled)
[03:32:42.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:42.058]    __FlashAddr=0x00000000
[03:32:42.058]    __FlashLen=0x00000000
[03:32:42.058]    __FlashArg=0x00000000
[03:32:42.058]    __FlashOp=0x00000000
[03:32:42.058]    __Result=0x00000000
[03:32:42.058]  </debugvars>
[03:32:42.058]  
[03:32:42.058]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:32:42.061]    <block atomic="false" info="">
[03:32:42.061]      __var deviceID = 0;
[03:32:42.061]        // -> [deviceID <= 0x00000000]
[03:32:42.061]      __var version = 0;
[03:32:42.061]        // -> [version <= 0x00000000]
[03:32:42.061]      __var partNum = 0;
[03:32:42.061]        // -> [partNum <= 0x00000000]
[03:32:42.062]      __var manuf = 0;
[03:32:42.062]        // -> [manuf <= 0x00000000]
[03:32:42.062]      __var isMSPM0G1X0X_G3X0X = 0;
[03:32:42.062]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:32:42.062]      __var isProduction = 0;
[03:32:42.062]        // -> [isProduction <= 0x00000000]
[03:32:42.062]      __var continueId = 0;
[03:32:42.062]        // -> [continueId <= 0x00000000]
[03:32:42.062]      deviceID =   Read32(0x41C40004);
[03:32:42.065]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:32:42.065]        // -> [deviceID <= 0x2BB8802F]
[03:32:42.065]      version = deviceID >> 28;
[03:32:42.065]        // -> [version <= 0x00000002]
[03:32:42.065]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:32:42.065]        // -> [partNum <= 0x0000BB88]
[03:32:42.065]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:32:42.065]        // -> [manuf <= 0x00000017]
[03:32:42.065]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:32:42.065]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:32:42.065]      isProduction = (version > 0);
[03:32:42.069]        // -> [isProduction <= 0x00000001]
[03:32:42.069]    </block>
[03:32:42.069]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:32:42.069]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:32:42.069]        // =>  FALSE
[03:32:42.069]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:32:42.069]    </control>
[03:32:42.069]    <control if="continueId == 4" while="" timeout="0" info="">
[03:32:42.069]      // if-block "continueId == 4"
[03:32:42.069]        // =>  FALSE
[03:32:42.069]      // skip if-block "continueId == 4"
[03:32:42.069]    </control>
[03:32:42.069]    <control if="!isProduction" while="" timeout="0" info="">
[03:32:42.069]      // if-block "!isProduction"
[03:32:42.069]        // =>  FALSE
[03:32:42.069]      // skip if-block "!isProduction"
[03:32:42.069]    </control>
[03:32:42.069]  </sequence>
[03:32:42.069]  
[03:34:13.255]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:34:13.255]  
[03:34:13.264]  <debugvars>
[03:34:13.264]    // Pre-defined
[03:34:13.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:13.264]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:34:13.264]    __dp=0x00000000
[03:34:13.264]    __ap=0x00000000
[03:34:13.264]    __traceout=0x00000000      (Trace Disabled)
[03:34:13.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:13.264]    __FlashAddr=0x00000000
[03:34:13.264]    __FlashLen=0x00000000
[03:34:13.264]    __FlashArg=0x00000000
[03:34:13.264]    __FlashOp=0x00000000
[03:34:13.264]    __Result=0x00000000
[03:34:13.264]  </debugvars>
[03:34:13.264]  
[03:34:13.264]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:34:13.264]    <block atomic="false" info="">
[03:34:13.264]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:34:13.264]        // -> [isSWJ <= 0x00000001]
[03:34:13.264]      __var hasDormant = __protocol & 0x00020000;
[03:34:13.264]        // -> [hasDormant <= 0x00000000]
[03:34:13.267]      __var protType   = __protocol & 0x0000FFFF;
[03:34:13.267]        // -> [protType <= 0x00000002]
[03:34:13.267]    </block>
[03:34:13.267]    <control if="protType == 1" while="" timeout="0" info="">
[03:34:13.267]      // if-block "protType == 1"
[03:34:13.267]        // =>  FALSE
[03:34:13.267]      // skip if-block "protType == 1"
[03:34:13.267]    </control>
[03:34:13.267]    <control if="protType == 2" while="" timeout="0" info="">
[03:34:13.267]      // if-block "protType == 2"
[03:34:13.267]        // =>  TRUE
[03:34:13.267]      <control if="isSWJ" while="" timeout="0" info="">
[03:34:13.267]        // if-block "isSWJ"
[03:34:13.267]          // =>  TRUE
[03:34:13.267]        <control if="hasDormant" while="" timeout="0" info="">
[03:34:13.267]          // if-block "hasDormant"
[03:34:13.267]            // =>  FALSE
[03:34:13.267]          // skip if-block "hasDormant"
[03:34:13.267]        </control>
[03:34:13.267]        <control if="!hasDormant" while="" timeout="0" info="">
[03:34:13.267]          // if-block "!hasDormant"
[03:34:13.267]            // =>  TRUE
[03:34:13.267]          <block atomic="false" info="">
[03:34:13.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:34:13.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:34:13.271]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:34:13.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:34:13.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:34:13.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:34:13.275]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:34:13.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:34:13.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:34:13.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:34:13.279]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:34:13.283]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:34:13.283]          </block>
[03:34:13.283]          // end if-block "!hasDormant"
[03:34:13.283]        </control>
[03:34:13.283]        // end if-block "isSWJ"
[03:34:13.283]      </control>
[03:34:13.283]      <control if="!isSWJ" while="" timeout="0" info="">
[03:34:13.283]        // if-block "!isSWJ"
[03:34:13.283]          // =>  FALSE
[03:34:13.283]        // skip if-block "!isSWJ"
[03:34:13.283]      </control>
[03:34:13.285]      <block atomic="false" info="">
[03:34:13.285]        ReadDP(0x0);
[03:34:13.285]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:34:13.285]      </block>
[03:34:13.285]      // end if-block "protType == 2"
[03:34:13.285]    </control>
[03:34:13.285]  </sequence>
[03:34:13.285]  
[03:34:13.295]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:34:13.295]  
[03:34:13.295]  <debugvars>
[03:34:13.295]    // Pre-defined
[03:34:13.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:13.295]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:34:13.295]    __dp=0x00000000
[03:34:13.295]    __ap=0x00000000
[03:34:13.295]    __traceout=0x00000000      (Trace Disabled)
[03:34:13.295]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:13.295]    __FlashAddr=0x00000000
[03:34:13.295]    __FlashLen=0x00000000
[03:34:13.295]    __FlashArg=0x00000000
[03:34:13.295]    __FlashOp=0x00000000
[03:34:13.295]    __Result=0x00000000
[03:34:13.297]  </debugvars>
[03:34:13.297]  
[03:34:13.297]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:34:13.297]    <block atomic="false" info="">
[03:34:13.297]      __var SW_DP_ABORT       = 0x0;
[03:34:13.297]        // -> [SW_DP_ABORT <= 0x00000000]
[03:34:13.297]      __var DP_CTRL_STAT      = 0x4;
[03:34:13.297]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:34:13.297]      __var DP_SELECT         = 0x8;
[03:34:13.297]        // -> [DP_SELECT <= 0x00000008]
[03:34:13.297]      __var powered_down      = 0;
[03:34:13.297]        // -> [powered_down <= 0x00000000]
[03:34:13.297]      WriteDP(DP_SELECT, 0x00000000);
[03:34:13.300]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:34:13.300]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:34:13.302]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:34:13.302]        // -> [powered_down <= 0x00000001]
[03:34:13.302]    </block>
[03:34:13.302]    <control if="powered_down" while="" timeout="0" info="">
[03:34:13.302]      // if-block "powered_down"
[03:34:13.302]        // =>  TRUE
[03:34:13.302]      <block atomic="false" info="">
[03:34:13.302]        Message(0, "Debug/System power-up request sent");
[03:34:13.304]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:34:13.306]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:34:13.306]      </block>
[03:34:13.306]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:34:13.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:34:13.308]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:34:13.308]        // while-condition  =>  FALSE
[03:34:13.308]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:34:13.308]      </control>
[03:34:13.308]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:34:13.308]        // if-block "(__protocol & 0xFFFF) == 1"
[03:34:13.308]          // =>  FALSE
[03:34:13.308]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:34:13.308]      </control>
[03:34:13.308]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:34:13.308]        // if-block "(__protocol & 0xFFFF) == 2"
[03:34:13.308]          // =>  TRUE
[03:34:13.308]        <block atomic="false" info="">
[03:34:13.308]          Message(0, "executing SWD power up");
[03:34:13.311]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:34:13.315]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:34:13.315]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:34:13.319]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:34:13.321]        </block>
[03:34:13.322]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:34:13.322]      </control>
[03:34:13.322]      // end if-block "powered_down"
[03:34:13.322]    </control>
[03:34:13.322]    <block atomic="false" info="">
[03:34:13.322]      __var DEBUG_PORT_VAL    = 0;
[03:34:13.322]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:34:13.322]      __var ACCESS_POINT_VAL  = 0;
[03:34:13.322]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:34:13.323]      __ap = 1; 
[03:34:13.323]        // -> [__ap <= 0x00000001]
[03:34:13.323]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:34:13.325]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:34:13.325]      __ap = 4;
[03:34:13.325]        // -> [__ap <= 0x00000004]
[03:34:13.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:34:13.333]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:34:13.333]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:34:13.333]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:34:13.335]    </block>
[03:34:13.335]    <block atomic="false" info="">
[03:34:13.335]      __var nReset = 0x80;
[03:34:13.335]        // -> [nReset <= 0x00000080]
[03:34:13.335]      __var canReadPins = 0;
[03:34:13.335]        // -> [canReadPins <= 0x00000000]
[03:34:13.335]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:34:13.350]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:34:13.350]        // -> [canReadPins <= 0x00000001]
[03:34:13.350]    </block>
[03:34:13.350]    <control if="" while="1" timeout="200" info="">
[03:34:13.350]      // while "1"  (timeout="200")
[03:34:13.350]      // while-condition  =>  TRUE
[03:34:13.350]      // while "1"  (timeout="200")
[03:34:13.351]      // while-condition  =>  TRUE
[03:34:13.351]      // while "1"  (timeout="200")
[03:34:13.351]      // while-condition  =>  TRUE
[03:34:13.351]      // while "1"  (timeout="200")
[03:34:13.351]      // while-condition  =>  TRUE
[03:34:13.351]      // while "1"  (timeout="200")
[03:34:13.351]      // while-condition  =>  TRUE
[03:34:13.351]      // while "1"  (timeout="200")
[03:34:13.351]      // while-condition  =>  TRUE
[03:34:13.351]      // while "1"  (timeout="200")
[03:34:13.351]      // while-condition  =>  TRUE
[03:34:13.351]      // while "1"  (timeout="200")
[03:34:13.351]      // while-condition  =>  TRUE
[03:34:13.351]      // while "1"  (timeout="200")
[03:34:13.353]      // while-condition  =>  TRUE
[03:34:13.353]      // while "1"  (timeout="200")
[03:34:13.353]      // while-condition  =>  TRUE
[03:34:13.353]      // while "1"  (timeout="200")
[03:34:13.353]      // while-condition  =>  TRUE
[03:34:13.353]      // while "1"  (timeout="200")
[03:34:13.353]      // while-condition  =>  TRUE
[03:34:13.353]      // while "1"  (timeout="200")
[03:34:13.353]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.354]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.354]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.354]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.354]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.354]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.354]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.354]      // while-condition  =>  TRUE
[03:34:13.354]      // while "1"  (timeout="200")
[03:34:13.356]      // while-condition  =>  TRUE
[03:34:13.356]      // while "1"  (timeout="200")
[03:34:13.356]      // while-condition  =>  TRUE
[03:34:13.356]      // while "1"  (timeout="200")
[03:34:13.356]      // while-condition  =>  TRUE
[03:34:13.356]      // while "1"  (timeout="200")
[03:34:13.356]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.357]      // while "1"  (timeout="200")
[03:34:13.357]      // while-condition  =>  TRUE
[03:34:13.359]      // while "1"  (timeout="200")
[03:34:13.359]      // while-condition  =>  TRUE
[03:34:13.359]      // while "1"  (timeout="200")
[03:34:13.359]      // while-condition  =>  TRUE
[03:34:13.359]      // while "1"  (timeout="200")
[03:34:13.359]      // while-condition  =>  TRUE
[03:34:13.359]      // while "1"  (timeout="200")
[03:34:13.359]      // while-condition  =>  TRUE
[03:34:13.359]      // while "1"  (timeout="200")
[03:34:13.359]      // while-condition  =>  TRUE
[03:34:13.359]      // while "1"  (timeout="200")
[03:34:13.359]      // while-condition  =>  TRUE
[03:34:13.359]      // while "1"  (timeout="200")
[03:34:13.359]      // while-condition  =>  TRUE
[03:34:13.360]      // while "1"  (timeout="200")
[03:34:13.360]      // while-condition  =>  TRUE
[03:34:13.360]      // while "1"  (timeout="200")
[03:34:13.360]      // while-condition  =>  TRUE
[03:34:13.360]      // while "1"  (timeout="200")
[03:34:13.360]      // while-condition  =>  TRUE
[03:34:13.360]      // while "1"  (timeout="200")
[03:34:13.360]      // while-condition  =>  TRUE
[03:34:13.360]      // while "1"  (timeout="200")
[03:34:13.360]      // while-condition  =>  TRUE
[03:34:13.360]      // while "1"  (timeout="200")
[03:34:13.360]      // while-condition  =>  TRUE
[03:34:13.360]      // while "1"  (timeout="200")
[03:34:13.361]      // while-condition  =>  TRUE
[03:34:13.361]      // while "1"  (timeout="200")
[03:34:13.361]      // while  =>  TIMEOUT
[03:34:13.361]      // end while "1"
[03:34:13.361]    </control>
[03:34:13.361]    <control if="canReadPins" while="" timeout="0" info="">
[03:34:13.363]      // if-block "canReadPins"
[03:34:13.363]        // =>  TRUE
[03:34:13.363]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:34:13.363]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:34:13.627]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:34:13.628]        // while-condition  =>  FALSE
[03:34:13.628]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:34:13.628]      </control>
[03:34:13.628]      // end if-block "canReadPins"
[03:34:13.628]    </control>
[03:34:13.628]    <control if="!canReadPins" while="" timeout="0" info="">
[03:34:13.628]      // if-block "!canReadPins"
[03:34:13.628]        // =>  FALSE
[03:34:13.628]      // skip if-block "!canReadPins"
[03:34:13.628]    </control>
[03:34:13.628]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:34:13.628]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:34:13.628]        // =>  TRUE
[03:34:13.628]      <block atomic="false" info="">
[03:34:13.628]        WriteAP(0x00, 0x190008);
[03:34:13.635]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:34:13.635]        WriteAP(0xF0, 0x01);
[03:34:13.639]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:34:13.643]      </block>
[03:34:13.643]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:34:13.643]    </control>
[03:34:13.643]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:34:13.643]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:34:13.643]        // =>  FALSE
[03:34:13.643]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:34:13.643]    </control>
[03:34:13.643]    <block atomic="false" info="">
[03:34:13.643]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:34:13.647]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:34:13.647]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:34:13.647]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:34:13.652]      __ap = 0; //lets make sure we reset the access point selection
[03:34:13.652]        // -> [__ap <= 0x00000000]
[03:34:13.652]    </block>
[03:34:13.652]  </sequence>
[03:34:13.652]  
[03:34:13.729]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:34:13.729]  
[03:34:13.729]  <debugvars>
[03:34:13.729]    // Pre-defined
[03:34:13.729]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:13.729]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:34:13.729]    __dp=0x00000000
[03:34:13.729]    __ap=0x00000000
[03:34:13.732]    __traceout=0x00000000      (Trace Disabled)
[03:34:13.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:13.732]    __FlashAddr=0x00000000
[03:34:13.732]    __FlashLen=0x00000000
[03:34:13.732]    __FlashArg=0x00000000
[03:34:13.732]    __FlashOp=0x00000000
[03:34:13.732]    __Result=0x00000000
[03:34:13.732]  </debugvars>
[03:34:13.732]  
[03:34:13.732]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:34:13.733]    <block atomic="false" info="">
[03:34:13.733]      __var deviceID = 0;
[03:34:13.733]        // -> [deviceID <= 0x00000000]
[03:34:13.733]      __var version = 0;
[03:34:13.733]        // -> [version <= 0x00000000]
[03:34:13.733]      __var partNum = 0;
[03:34:13.733]        // -> [partNum <= 0x00000000]
[03:34:13.733]      __var manuf = 0;
[03:34:13.733]        // -> [manuf <= 0x00000000]
[03:34:13.733]      __var isMSPM0G1X0X_G3X0X = 0;
[03:34:13.733]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:34:13.734]      __var isProduction = 0;
[03:34:13.734]        // -> [isProduction <= 0x00000000]
[03:34:13.734]      __var continueId = 0;
[03:34:13.734]        // -> [continueId <= 0x00000000]
[03:34:13.734]      deviceID =   Read32(0x41C40004);
[03:34:13.743]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:34:13.743]        // -> [deviceID <= 0x2BB8802F]
[03:34:13.743]      version = deviceID >> 28;
[03:34:13.743]        // -> [version <= 0x00000002]
[03:34:13.743]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:34:13.743]        // -> [partNum <= 0x0000BB88]
[03:34:13.743]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:34:13.743]        // -> [manuf <= 0x00000017]
[03:34:13.743]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:34:13.743]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:34:13.743]      isProduction = (version > 0);
[03:34:13.743]        // -> [isProduction <= 0x00000001]
[03:34:13.746]    </block>
[03:34:13.746]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:34:13.746]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:34:13.746]        // =>  FALSE
[03:34:13.746]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:34:13.746]    </control>
[03:34:13.746]    <control if="continueId == 4" while="" timeout="0" info="">
[03:34:13.746]      // if-block "continueId == 4"
[03:34:13.746]        // =>  FALSE
[03:34:13.746]      // skip if-block "continueId == 4"
[03:34:13.746]    </control>
[03:34:13.746]    <control if="!isProduction" while="" timeout="0" info="">
[03:34:13.746]      // if-block "!isProduction"
[03:34:13.746]        // =>  FALSE
[03:34:13.746]      // skip if-block "!isProduction"
[03:34:13.747]    </control>
[03:34:13.747]  </sequence>
[03:34:13.747]  
[03:36:45.603]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:36:45.603]  
[03:36:45.612]  <debugvars>
[03:36:45.612]    // Pre-defined
[03:36:45.612]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:36:45.612]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:36:45.612]    __dp=0x00000000
[03:36:45.612]    __ap=0x00000000
[03:36:45.612]    __traceout=0x00000000      (Trace Disabled)
[03:36:45.612]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:36:45.612]    __FlashAddr=0x00000000
[03:36:45.612]    __FlashLen=0x00000000
[03:36:45.612]    __FlashArg=0x00000000
[03:36:45.613]    __FlashOp=0x00000000
[03:36:45.613]    __Result=0x00000000
[03:36:45.613]  </debugvars>
[03:36:45.613]  
[03:36:45.613]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:36:45.613]    <block atomic="false" info="">
[03:36:45.613]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:36:45.613]        // -> [isSWJ <= 0x00000001]
[03:36:45.613]      __var hasDormant = __protocol & 0x00020000;
[03:36:45.613]        // -> [hasDormant <= 0x00000000]
[03:36:45.613]      __var protType   = __protocol & 0x0000FFFF;
[03:36:45.613]        // -> [protType <= 0x00000002]
[03:36:45.615]    </block>
[03:36:45.615]    <control if="protType == 1" while="" timeout="0" info="">
[03:36:45.615]      // if-block "protType == 1"
[03:36:45.615]        // =>  FALSE
[03:36:45.615]      // skip if-block "protType == 1"
[03:36:45.615]    </control>
[03:36:45.615]    <control if="protType == 2" while="" timeout="0" info="">
[03:36:45.615]      // if-block "protType == 2"
[03:36:45.616]        // =>  TRUE
[03:36:45.616]      <control if="isSWJ" while="" timeout="0" info="">
[03:36:45.616]        // if-block "isSWJ"
[03:36:45.616]          // =>  TRUE
[03:36:45.616]        <control if="hasDormant" while="" timeout="0" info="">
[03:36:45.616]          // if-block "hasDormant"
[03:36:45.616]            // =>  FALSE
[03:36:45.616]          // skip if-block "hasDormant"
[03:36:45.616]        </control>
[03:36:45.616]        <control if="!hasDormant" while="" timeout="0" info="">
[03:36:45.616]          // if-block "!hasDormant"
[03:36:45.616]            // =>  TRUE
[03:36:45.616]          <block atomic="false" info="">
[03:36:45.616]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:36:45.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:36:45.617]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:36:45.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:36:45.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:36:45.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:36:45.623]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:36:45.627]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:36:45.627]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:36:45.631]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:36:45.631]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:36:45.633]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:36:45.633]          </block>
[03:36:45.633]          // end if-block "!hasDormant"
[03:36:45.633]        </control>
[03:36:45.633]        // end if-block "isSWJ"
[03:36:45.633]      </control>
[03:36:45.635]      <control if="!isSWJ" while="" timeout="0" info="">
[03:36:45.635]        // if-block "!isSWJ"
[03:36:45.635]          // =>  FALSE
[03:36:45.635]        // skip if-block "!isSWJ"
[03:36:45.635]      </control>
[03:36:45.635]      <block atomic="false" info="">
[03:36:45.635]        ReadDP(0x0);
[03:36:45.635]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:36:45.639]      </block>
[03:36:45.639]      // end if-block "protType == 2"
[03:36:45.639]    </control>
[03:36:45.639]  </sequence>
[03:36:45.639]  
[03:36:45.643]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:36:45.643]  
[03:36:45.646]  <debugvars>
[03:36:45.646]    // Pre-defined
[03:36:45.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:36:45.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:36:45.646]    __dp=0x00000000
[03:36:45.646]    __ap=0x00000000
[03:36:45.646]    __traceout=0x00000000      (Trace Disabled)
[03:36:45.646]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:36:45.646]    __FlashAddr=0x00000000
[03:36:45.646]    __FlashLen=0x00000000
[03:36:45.646]    __FlashArg=0x00000000
[03:36:45.646]    __FlashOp=0x00000000
[03:36:45.646]    __Result=0x00000000
[03:36:45.646]  </debugvars>
[03:36:45.647]  
[03:36:45.647]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:36:45.647]    <block atomic="false" info="">
[03:36:45.647]      __var SW_DP_ABORT       = 0x0;
[03:36:45.647]        // -> [SW_DP_ABORT <= 0x00000000]
[03:36:45.647]      __var DP_CTRL_STAT      = 0x4;
[03:36:45.647]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:36:45.647]      __var DP_SELECT         = 0x8;
[03:36:45.647]        // -> [DP_SELECT <= 0x00000008]
[03:36:45.647]      __var powered_down      = 0;
[03:36:45.647]        // -> [powered_down <= 0x00000000]
[03:36:45.647]      WriteDP(DP_SELECT, 0x00000000);
[03:36:45.650]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:36:45.650]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:36:45.650]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:36:45.652]        // -> [powered_down <= 0x00000001]
[03:36:45.652]    </block>
[03:36:45.652]    <control if="powered_down" while="" timeout="0" info="">
[03:36:45.652]      // if-block "powered_down"
[03:36:45.652]        // =>  TRUE
[03:36:45.652]      <block atomic="false" info="">
[03:36:45.652]        Message(0, "Debug/System power-up request sent");
[03:36:45.654]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:36:45.656]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:36:45.656]      </block>
[03:36:45.656]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:36:45.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:36:45.656]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:36:45.656]        // while-condition  =>  FALSE
[03:36:45.656]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:36:45.660]      </control>
[03:36:45.660]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:36:45.660]        // if-block "(__protocol & 0xFFFF) == 1"
[03:36:45.660]          // =>  FALSE
[03:36:45.660]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:36:45.660]      </control>
[03:36:45.660]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:36:45.660]        // if-block "(__protocol & 0xFFFF) == 2"
[03:36:45.660]          // =>  TRUE
[03:36:45.660]        <block atomic="false" info="">
[03:36:45.660]          Message(0, "executing SWD power up");
[03:36:45.660]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:36:45.664]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:36:45.664]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:36:45.666]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:36:45.666]        </block>
[03:36:45.666]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:36:45.666]      </control>
[03:36:45.666]      // end if-block "powered_down"
[03:36:45.666]    </control>
[03:36:45.666]    <block atomic="false" info="">
[03:36:45.666]      __var DEBUG_PORT_VAL    = 0;
[03:36:45.667]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:36:45.667]      __var ACCESS_POINT_VAL  = 0;
[03:36:45.667]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:36:45.667]      __ap = 1; 
[03:36:45.667]        // -> [__ap <= 0x00000001]
[03:36:45.667]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:36:45.675]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:36:45.680]      __ap = 4;
[03:36:45.680]        // -> [__ap <= 0x00000004]
[03:36:45.680]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:36:45.688]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:36:45.692]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:36:45.692]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:36:45.692]    </block>
[03:36:45.692]    <block atomic="false" info="">
[03:36:45.692]      __var nReset = 0x80;
[03:36:45.694]        // -> [nReset <= 0x00000080]
[03:36:45.694]      __var canReadPins = 0;
[03:36:45.694]        // -> [canReadPins <= 0x00000000]
[03:36:45.694]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:36:45.696]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:36:45.696]        // -> [canReadPins <= 0x00000001]
[03:36:45.696]    </block>
[03:36:45.696]    <control if="" while="1" timeout="200" info="">
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.696]      // while-condition  =>  TRUE
[03:36:45.696]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.700]      // while "1"  (timeout="200")
[03:36:45.700]      // while-condition  =>  TRUE
[03:36:45.702]      // while "1"  (timeout="200")
[03:36:45.702]      // while-condition  =>  TRUE
[03:36:45.702]      // while "1"  (timeout="200")
[03:36:45.702]      // while-condition  =>  TRUE
[03:36:45.702]      // while "1"  (timeout="200")
[03:36:45.702]      // while-condition  =>  TRUE
[03:36:45.702]      // while "1"  (timeout="200")
[03:36:45.702]      // while-condition  =>  TRUE
[03:36:45.702]      // while "1"  (timeout="200")
[03:36:45.702]      // while-condition  =>  TRUE
[03:36:45.702]      // while "1"  (timeout="200")
[03:36:45.703]      // while-condition  =>  TRUE
[03:36:45.703]      // while "1"  (timeout="200")
[03:36:45.703]      // while-condition  =>  TRUE
[03:36:45.703]      // while "1"  (timeout="200")
[03:36:45.703]      // while-condition  =>  TRUE
[03:36:45.703]      // while "1"  (timeout="200")
[03:36:45.703]      // while-condition  =>  TRUE
[03:36:45.703]      // while "1"  (timeout="200")
[03:36:45.703]      // while-condition  =>  TRUE
[03:36:45.703]      // while "1"  (timeout="200")
[03:36:45.703]      // while-condition  =>  TRUE
[03:36:45.703]      // while "1"  (timeout="200")
[03:36:45.703]      // while-condition  =>  TRUE
[03:36:45.705]      // while "1"  (timeout="200")
[03:36:45.705]      // while  =>  TIMEOUT
[03:36:45.705]      // end while "1"
[03:36:45.705]    </control>
[03:36:45.705]    <control if="canReadPins" while="" timeout="0" info="">
[03:36:45.705]      // if-block "canReadPins"
[03:36:45.705]        // =>  TRUE
[03:36:45.705]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:36:45.705]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:36:45.706]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:36:45.708]        // while-condition  =>  FALSE
[03:36:45.708]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:36:45.708]      </control>
[03:36:45.708]      // end if-block "canReadPins"
[03:36:45.708]    </control>
[03:36:45.708]    <control if="!canReadPins" while="" timeout="0" info="">
[03:36:45.708]      // if-block "!canReadPins"
[03:36:45.708]        // =>  FALSE
[03:36:45.708]      // skip if-block "!canReadPins"
[03:36:45.708]    </control>
[03:36:45.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:36:45.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:36:45.708]        // =>  TRUE
[03:36:45.708]      <block atomic="false" info="">
[03:36:45.708]        WriteAP(0x00, 0x190008);
[03:36:45.712]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:36:45.712]        WriteAP(0xF0, 0x01);
[03:36:45.716]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:36:45.716]      </block>
[03:36:45.716]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:36:45.718]    </control>
[03:36:45.718]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:36:45.718]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:36:45.718]        // =>  FALSE
[03:36:45.718]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:36:45.718]    </control>
[03:36:45.718]    <block atomic="false" info="">
[03:36:45.718]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:36:45.724]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:36:45.724]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:36:45.726]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:36:45.727]      __ap = 0; //lets make sure we reset the access point selection
[03:36:45.727]        // -> [__ap <= 0x00000000]
[03:36:45.727]    </block>
[03:36:45.727]  </sequence>
[03:36:45.727]  
[03:36:45.763]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:36:45.763]  
[03:36:45.763]  <debugvars>
[03:36:45.763]    // Pre-defined
[03:36:45.763]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:36:45.763]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:36:45.767]    __dp=0x00000000
[03:36:45.767]    __ap=0x00000000
[03:36:45.767]    __traceout=0x00000000      (Trace Disabled)
[03:36:45.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:36:45.767]    __FlashAddr=0x00000000
[03:36:45.767]    __FlashLen=0x00000000
[03:36:45.767]    __FlashArg=0x00000000
[03:36:45.767]    __FlashOp=0x00000000
[03:36:45.767]    __Result=0x00000000
[03:36:45.767]  </debugvars>
[03:36:45.767]  
[03:36:45.767]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:36:45.767]    <block atomic="false" info="">
[03:36:45.767]      __var deviceID = 0;
[03:36:45.767]        // -> [deviceID <= 0x00000000]
[03:36:45.767]      __var version = 0;
[03:36:45.767]        // -> [version <= 0x00000000]
[03:36:45.767]      __var partNum = 0;
[03:36:45.767]        // -> [partNum <= 0x00000000]
[03:36:45.767]      __var manuf = 0;
[03:36:45.767]        // -> [manuf <= 0x00000000]
[03:36:45.767]      __var isMSPM0G1X0X_G3X0X = 0;
[03:36:45.767]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:36:45.767]      __var isProduction = 0;
[03:36:45.767]        // -> [isProduction <= 0x00000000]
[03:36:45.767]      __var continueId = 0;
[03:36:45.767]        // -> [continueId <= 0x00000000]
[03:36:45.767]      deviceID =   Read32(0x41C40004);
[03:36:45.775]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:36:45.775]        // -> [deviceID <= 0x2BB8802F]
[03:36:45.775]      version = deviceID >> 28;
[03:36:45.775]        // -> [version <= 0x00000002]
[03:36:45.775]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:36:45.775]        // -> [partNum <= 0x0000BB88]
[03:36:45.775]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:36:45.775]        // -> [manuf <= 0x00000017]
[03:36:45.775]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:36:45.775]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:36:45.775]      isProduction = (version > 0);
[03:36:45.775]        // -> [isProduction <= 0x00000001]
[03:36:45.775]    </block>
[03:36:45.775]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:36:45.775]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:36:45.775]        // =>  FALSE
[03:36:45.775]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:36:45.775]    </control>
[03:36:45.775]    <control if="continueId == 4" while="" timeout="0" info="">
[03:36:45.779]      // if-block "continueId == 4"
[03:36:45.779]        // =>  FALSE
[03:36:45.779]      // skip if-block "continueId == 4"
[03:36:45.779]    </control>
[03:36:45.779]    <control if="!isProduction" while="" timeout="0" info="">
[03:36:45.779]      // if-block "!isProduction"
[03:36:45.779]        // =>  FALSE
[03:36:45.779]      // skip if-block "!isProduction"
[03:36:45.779]    </control>
[03:36:45.779]  </sequence>
[03:36:45.779]  
[03:49:32.841]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:49:32.841]  
[03:49:32.851]  <debugvars>
[03:49:32.851]    // Pre-defined
[03:49:32.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:32.851]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:49:32.851]    __dp=0x00000000
[03:49:32.851]    __ap=0x00000000
[03:49:32.851]    __traceout=0x00000000      (Trace Disabled)
[03:49:32.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:32.851]    __FlashAddr=0x00000000
[03:49:32.851]    __FlashLen=0x00000000
[03:49:32.851]    __FlashArg=0x00000000
[03:49:32.851]    __FlashOp=0x00000000
[03:49:32.851]    __Result=0x00000000
[03:49:32.851]  </debugvars>
[03:49:32.851]  
[03:49:32.853]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:49:32.853]    <block atomic="false" info="">
[03:49:32.853]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:49:32.853]        // -> [isSWJ <= 0x00000001]
[03:49:32.853]      __var hasDormant = __protocol & 0x00020000;
[03:49:32.853]        // -> [hasDormant <= 0x00000000]
[03:49:32.853]      __var protType   = __protocol & 0x0000FFFF;
[03:49:32.853]        // -> [protType <= 0x00000002]
[03:49:32.853]    </block>
[03:49:32.853]    <control if="protType == 1" while="" timeout="0" info="">
[03:49:32.853]      // if-block "protType == 1"
[03:49:32.853]        // =>  FALSE
[03:49:32.853]      // skip if-block "protType == 1"
[03:49:32.853]    </control>
[03:49:32.853]    <control if="protType == 2" while="" timeout="0" info="">
[03:49:32.853]      // if-block "protType == 2"
[03:49:32.855]        // =>  TRUE
[03:49:32.855]      <control if="isSWJ" while="" timeout="0" info="">
[03:49:32.855]        // if-block "isSWJ"
[03:49:32.855]          // =>  TRUE
[03:49:32.855]        <control if="hasDormant" while="" timeout="0" info="">
[03:49:32.855]          // if-block "hasDormant"
[03:49:32.855]            // =>  FALSE
[03:49:32.855]          // skip if-block "hasDormant"
[03:49:32.855]        </control>
[03:49:32.855]        <control if="!hasDormant" while="" timeout="0" info="">
[03:49:32.855]          // if-block "!hasDormant"
[03:49:32.855]            // =>  TRUE
[03:49:32.855]          <block atomic="false" info="">
[03:49:32.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:49:32.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:32.857]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:49:32.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:49:32.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:49:32.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:32.861]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:49:32.862]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:49:32.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:49:32.867]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:32.867]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:49:32.869]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:49:32.869]          </block>
[03:49:32.869]          // end if-block "!hasDormant"
[03:49:32.869]        </control>
[03:49:32.869]        // end if-block "isSWJ"
[03:49:32.869]      </control>
[03:49:32.869]      <control if="!isSWJ" while="" timeout="0" info="">
[03:49:32.870]        // if-block "!isSWJ"
[03:49:32.870]          // =>  FALSE
[03:49:32.870]        // skip if-block "!isSWJ"
[03:49:32.870]      </control>
[03:49:32.871]      <block atomic="false" info="">
[03:49:32.871]        ReadDP(0x0);
[03:49:32.871]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:49:32.871]      </block>
[03:49:32.871]      // end if-block "protType == 2"
[03:49:32.871]    </control>
[03:49:32.874]  </sequence>
[03:49:32.874]  
[03:49:37.938]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:49:37.938]  
[03:49:37.948]  <debugvars>
[03:49:37.948]    // Pre-defined
[03:49:37.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:37.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:49:37.948]    __dp=0x00000000
[03:49:37.948]    __ap=0x00000000
[03:49:37.948]    __traceout=0x00000000      (Trace Disabled)
[03:49:37.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:37.948]    __FlashAddr=0x00000000
[03:49:37.948]    __FlashLen=0x00000000
[03:49:37.948]    __FlashArg=0x00000000
[03:49:37.948]    __FlashOp=0x00000000
[03:49:37.948]    __Result=0x00000000
[03:49:37.948]  </debugvars>
[03:49:37.948]  
[03:49:37.951]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:49:37.951]    <block atomic="false" info="">
[03:49:37.951]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:49:37.951]        // -> [isSWJ <= 0x00000001]
[03:49:37.951]      __var hasDormant = __protocol & 0x00020000;
[03:49:37.951]        // -> [hasDormant <= 0x00000000]
[03:49:37.951]      __var protType   = __protocol & 0x0000FFFF;
[03:49:37.951]        // -> [protType <= 0x00000002]
[03:49:37.951]    </block>
[03:49:37.951]    <control if="protType == 1" while="" timeout="0" info="">
[03:49:37.951]      // if-block "protType == 1"
[03:49:37.951]        // =>  FALSE
[03:49:37.951]      // skip if-block "protType == 1"
[03:49:37.951]    </control>
[03:49:37.951]    <control if="protType == 2" while="" timeout="0" info="">
[03:49:37.951]      // if-block "protType == 2"
[03:49:37.951]        // =>  TRUE
[03:49:37.951]      <control if="isSWJ" while="" timeout="0" info="">
[03:49:37.953]        // if-block "isSWJ"
[03:49:37.953]          // =>  TRUE
[03:49:37.953]        <control if="hasDormant" while="" timeout="0" info="">
[03:49:37.953]          // if-block "hasDormant"
[03:49:37.953]            // =>  FALSE
[03:49:37.953]          // skip if-block "hasDormant"
[03:49:37.953]        </control>
[03:49:37.953]        <control if="!hasDormant" while="" timeout="0" info="">
[03:49:37.953]          // if-block "!hasDormant"
[03:49:37.953]            // =>  TRUE
[03:49:37.953]          <block atomic="false" info="">
[03:49:37.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:49:37.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:37.955]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:49:37.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:49:37.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:49:37.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:37.955]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:49:37.959]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:49:37.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:49:37.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:37.960]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:49:37.963]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:49:37.963]          </block>
[03:49:37.963]          // end if-block "!hasDormant"
[03:49:37.963]        </control>
[03:49:37.963]        // end if-block "isSWJ"
[03:49:37.963]      </control>
[03:49:37.963]      <control if="!isSWJ" while="" timeout="0" info="">
[03:49:37.963]        // if-block "!isSWJ"
[03:49:37.963]          // =>  FALSE
[03:49:37.963]        // skip if-block "!isSWJ"
[03:49:37.963]      </control>
[03:49:37.964]      <block atomic="false" info="">
[03:49:37.964]        ReadDP(0x0);
[03:49:37.973]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:49:37.975]      </block>
[03:49:37.975]      // end if-block "protType == 2"
[03:49:37.975]    </control>
[03:49:37.975]  </sequence>
[03:49:37.975]  
[03:49:37.975]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:49:37.975]  
[03:49:37.975]  <debugvars>
[03:49:37.975]    // Pre-defined
[03:49:37.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:37.975]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:49:37.975]    __dp=0x00000000
[03:49:37.975]    __ap=0x00000000
[03:49:37.975]    __traceout=0x00000000      (Trace Disabled)
[03:49:37.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:37.975]    __FlashAddr=0x00000000
[03:49:37.975]    __FlashLen=0x00000000
[03:49:37.975]    __FlashArg=0x00000000
[03:49:37.975]    __FlashOp=0x00000000
[03:49:37.979]    __Result=0x00000000
[03:49:37.979]  </debugvars>
[03:49:37.979]  
[03:49:37.979]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:49:37.979]    <block atomic="false" info="">
[03:49:37.979]      __var SW_DP_ABORT       = 0x0;
[03:49:37.979]        // -> [SW_DP_ABORT <= 0x00000000]
[03:49:37.979]      __var DP_CTRL_STAT      = 0x4;
[03:49:37.979]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:49:37.979]      __var DP_SELECT         = 0x8;
[03:49:37.979]        // -> [DP_SELECT <= 0x00000008]
[03:49:37.979]      __var powered_down      = 0;
[03:49:37.979]        // -> [powered_down <= 0x00000000]
[03:49:37.979]      WriteDP(DP_SELECT, 0x00000000);
[03:49:37.979]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:49:37.979]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:49:37.983]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:49:37.983]        // -> [powered_down <= 0x00000001]
[03:49:37.983]    </block>
[03:49:37.983]    <control if="powered_down" while="" timeout="0" info="">
[03:49:37.983]      // if-block "powered_down"
[03:49:37.983]        // =>  TRUE
[03:49:37.983]      <block atomic="false" info="">
[03:49:37.983]        Message(0, "Debug/System power-up request sent");
[03:49:37.983]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:49:37.987]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:49:37.987]      </block>
[03:49:37.987]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:49:37.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:49:37.987]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:49:37.987]        // while-condition  =>  FALSE
[03:49:37.987]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:49:37.987]      </control>
[03:49:37.987]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:49:37.987]        // if-block "(__protocol & 0xFFFF) == 1"
[03:49:37.987]          // =>  FALSE
[03:49:37.987]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:49:37.987]      </control>
[03:49:37.987]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:49:37.987]        // if-block "(__protocol & 0xFFFF) == 2"
[03:49:37.987]          // =>  TRUE
[03:49:37.987]        <block atomic="false" info="">
[03:49:37.987]          Message(0, "executing SWD power up");
[03:49:37.991]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:49:37.991]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:49:37.991]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:49:37.995]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:49:37.995]        </block>
[03:49:37.995]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:49:37.995]      </control>
[03:49:37.995]      // end if-block "powered_down"
[03:49:37.995]    </control>
[03:49:37.995]    <block atomic="false" info="">
[03:49:37.995]      __var DEBUG_PORT_VAL    = 0;
[03:49:37.995]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:49:37.995]      __var ACCESS_POINT_VAL  = 0;
[03:49:37.995]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:49:37.995]      __ap = 1; 
[03:49:37.995]        // -> [__ap <= 0x00000001]
[03:49:37.995]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:49:38.000]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:49:38.000]      __ap = 4;
[03:49:38.000]        // -> [__ap <= 0x00000004]
[03:49:38.000]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:49:38.004]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:49:38.004]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:49:38.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:49:38.004]    </block>
[03:49:38.004]    <block atomic="false" info="">
[03:49:38.004]      __var nReset = 0x80;
[03:49:38.004]        // -> [nReset <= 0x00000080]
[03:49:38.004]      __var canReadPins = 0;
[03:49:38.004]        // -> [canReadPins <= 0x00000000]
[03:49:38.004]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:49:38.008]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:49:38.008]        // -> [canReadPins <= 0x00000001]
[03:49:38.008]    </block>
[03:49:38.008]    <control if="" while="1" timeout="200" info="">
[03:49:38.008]      // while "1"  (timeout="200")
[03:49:38.008]      // while-condition  =>  TRUE
[03:49:38.008]      // while "1"  (timeout="200")
[03:49:38.008]      // while-condition  =>  TRUE
[03:49:38.008]      // while "1"  (timeout="200")
[03:49:38.008]      // while-condition  =>  TRUE
[03:49:38.008]      // while "1"  (timeout="200")
[03:49:38.008]      // while-condition  =>  TRUE
[03:49:38.008]      // while "1"  (timeout="200")
[03:49:38.008]      // while-condition  =>  TRUE
[03:49:38.008]      // while "1"  (timeout="200")
[03:49:38.008]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.009]      // while-condition  =>  TRUE
[03:49:38.009]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.012]      // while "1"  (timeout="200")
[03:49:38.012]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.016]      // while-condition  =>  TRUE
[03:49:38.016]      // while "1"  (timeout="200")
[03:49:38.020]      // while-condition  =>  TRUE
[03:49:38.020]      // while "1"  (timeout="200")
[03:49:38.020]      // while  =>  TIMEOUT
[03:49:38.020]      // end while "1"
[03:49:38.021]    </control>
[03:49:38.021]    <control if="canReadPins" while="" timeout="0" info="">
[03:49:38.021]      // if-block "canReadPins"
[03:49:38.021]        // =>  TRUE
[03:49:38.021]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:49:38.021]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:49:38.021]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:49:38.021]        // while-condition  =>  FALSE
[03:49:38.021]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:49:38.021]      </control>
[03:49:38.021]      // end if-block "canReadPins"
[03:49:38.021]    </control>
[03:49:38.021]    <control if="!canReadPins" while="" timeout="0" info="">
[03:49:38.021]      // if-block "!canReadPins"
[03:49:38.021]        // =>  FALSE
[03:49:38.024]      // skip if-block "!canReadPins"
[03:49:38.024]    </control>
[03:49:38.024]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:49:38.024]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:49:38.024]        // =>  TRUE
[03:49:38.024]      <block atomic="false" info="">
[03:49:38.024]        WriteAP(0x00, 0x190008);
[03:49:38.025]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:49:38.025]        WriteAP(0xF0, 0x01);
[03:49:38.029]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:49:38.029]      </block>
[03:49:38.029]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:49:38.029]    </control>
[03:49:38.029]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:49:38.029]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:49:38.029]        // =>  FALSE
[03:49:38.029]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:49:38.029]    </control>
[03:49:38.029]    <block atomic="false" info="">
[03:49:38.029]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:49:38.034]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:49:38.034]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:49:38.034]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:49:38.035]      __ap = 0; //lets make sure we reset the access point selection
[03:49:38.035]        // -> [__ap <= 0x00000000]
[03:49:38.035]    </block>
[03:49:38.035]  </sequence>
[03:49:38.035]  
[03:49:38.061]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:49:38.061]  
[03:49:38.061]  <debugvars>
[03:49:38.061]    // Pre-defined
[03:49:38.061]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:38.061]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:49:38.061]    __dp=0x00000000
[03:49:38.061]    __ap=0x00000000
[03:49:38.061]    __traceout=0x00000000      (Trace Disabled)
[03:49:38.061]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:38.061]    __FlashAddr=0x00000000
[03:49:38.061]    __FlashLen=0x00000000
[03:49:38.061]    __FlashArg=0x00000000
[03:49:38.061]    __FlashOp=0x00000000
[03:49:38.061]    __Result=0x00000000
[03:49:38.063]  </debugvars>
[03:49:38.063]  
[03:49:38.063]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:49:38.063]    <block atomic="false" info="">
[03:49:38.063]      __var deviceID = 0;
[03:49:38.063]        // -> [deviceID <= 0x00000000]
[03:49:38.063]      __var version = 0;
[03:49:38.063]        // -> [version <= 0x00000000]
[03:49:38.063]      __var partNum = 0;
[03:49:38.063]        // -> [partNum <= 0x00000000]
[03:49:38.063]      __var manuf = 0;
[03:49:38.064]        // -> [manuf <= 0x00000000]
[03:49:38.064]      __var isMSPM0G1X0X_G3X0X = 0;
[03:49:38.064]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:49:38.064]      __var isProduction = 0;
[03:49:38.064]        // -> [isProduction <= 0x00000000]
[03:49:38.064]      __var continueId = 0;
[03:49:38.065]        // -> [continueId <= 0x00000000]
[03:49:38.065]      deviceID =   Read32(0x41C40004);
[03:49:38.071]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:49:38.071]        // -> [deviceID <= 0x2BB8802F]
[03:49:38.074]      version = deviceID >> 28;
[03:49:38.074]        // -> [version <= 0x00000002]
[03:49:38.074]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:49:38.074]        // -> [partNum <= 0x0000BB88]
[03:49:38.074]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:49:38.074]        // -> [manuf <= 0x00000017]
[03:49:38.074]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:49:38.074]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:49:38.074]      isProduction = (version > 0);
[03:49:38.074]        // -> [isProduction <= 0x00000001]
[03:49:38.074]    </block>
[03:49:38.074]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:49:38.074]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:49:38.074]        // =>  FALSE
[03:49:38.074]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:49:38.074]    </control>
[03:49:38.074]    <control if="continueId == 4" while="" timeout="0" info="">
[03:49:38.074]      // if-block "continueId == 4"
[03:49:38.074]        // =>  FALSE
[03:49:38.074]      // skip if-block "continueId == 4"
[03:49:38.074]    </control>
[03:49:38.074]    <control if="!isProduction" while="" timeout="0" info="">
[03:49:38.074]      // if-block "!isProduction"
[03:49:38.074]        // =>  FALSE
[03:49:38.074]      // skip if-block "!isProduction"
[03:49:38.074]    </control>
[03:49:38.074]  </sequence>
[03:49:38.074]  
[03:53:39.673]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:53:39.673]  
[03:53:39.683]  <debugvars>
[03:53:39.683]    // Pre-defined
[03:53:39.683]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:39.683]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:39.683]    __dp=0x00000000
[03:53:39.683]    __ap=0x00000000
[03:53:39.683]    __traceout=0x00000000      (Trace Disabled)
[03:53:39.683]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:39.683]    __FlashAddr=0x00000000
[03:53:39.683]    __FlashLen=0x00000000
[03:53:39.683]    __FlashArg=0x00000000
[03:53:39.683]    __FlashOp=0x00000000
[03:53:39.683]    __Result=0x00000000
[03:53:39.683]  </debugvars>
[03:53:39.683]  
[03:53:39.683]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:53:39.683]    <block atomic="false" info="">
[03:53:39.683]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:53:39.683]        // -> [isSWJ <= 0x00000001]
[03:53:39.685]      __var hasDormant = __protocol & 0x00020000;
[03:53:39.685]        // -> [hasDormant <= 0x00000000]
[03:53:39.685]      __var protType   = __protocol & 0x0000FFFF;
[03:53:39.685]        // -> [protType <= 0x00000002]
[03:53:39.685]    </block>
[03:53:39.685]    <control if="protType == 1" while="" timeout="0" info="">
[03:53:39.685]      // if-block "protType == 1"
[03:53:39.685]        // =>  FALSE
[03:53:39.685]      // skip if-block "protType == 1"
[03:53:39.685]    </control>
[03:53:39.685]    <control if="protType == 2" while="" timeout="0" info="">
[03:53:39.685]      // if-block "protType == 2"
[03:53:39.685]        // =>  TRUE
[03:53:39.685]      <control if="isSWJ" while="" timeout="0" info="">
[03:53:39.685]        // if-block "isSWJ"
[03:53:39.685]          // =>  TRUE
[03:53:39.685]        <control if="hasDormant" while="" timeout="0" info="">
[03:53:39.685]          // if-block "hasDormant"
[03:53:39.685]            // =>  FALSE
[03:53:39.685]          // skip if-block "hasDormant"
[03:53:39.685]        </control>
[03:53:39.685]        <control if="!hasDormant" while="" timeout="0" info="">
[03:53:39.685]          // if-block "!hasDormant"
[03:53:39.685]            // =>  TRUE
[03:53:39.685]          <block atomic="false" info="">
[03:53:39.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:53:39.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:39.689]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:53:39.689]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:53:39.689]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:53:39.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:39.689]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:53:39.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:53:39.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:53:39.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:39.693]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:53:39.697]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:53:39.697]          </block>
[03:53:39.697]          // end if-block "!hasDormant"
[03:53:39.697]        </control>
[03:53:39.697]        // end if-block "isSWJ"
[03:53:39.697]      </control>
[03:53:39.697]      <control if="!isSWJ" while="" timeout="0" info="">
[03:53:39.697]        // if-block "!isSWJ"
[03:53:39.697]          // =>  FALSE
[03:53:39.697]        // skip if-block "!isSWJ"
[03:53:39.697]      </control>
[03:53:39.697]      <block atomic="false" info="">
[03:53:39.697]        ReadDP(0x0);
[03:53:39.697]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:53:39.697]      </block>
[03:53:39.697]      // end if-block "protType == 2"
[03:53:39.697]    </control>
[03:53:39.701]  </sequence>
[03:53:39.701]  
[03:53:39.701]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:53:39.701]  
[03:53:39.701]  <debugvars>
[03:53:39.701]    // Pre-defined
[03:53:39.701]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:39.701]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:39.701]    __dp=0x00000000
[03:53:39.701]    __ap=0x00000000
[03:53:39.701]    __traceout=0x00000000      (Trace Disabled)
[03:53:39.701]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:39.701]    __FlashAddr=0x00000000
[03:53:39.701]    __FlashLen=0x00000000
[03:53:39.701]    __FlashArg=0x00000000
[03:53:39.705]    __FlashOp=0x00000000
[03:53:39.705]    __Result=0x00000000
[03:53:39.705]  </debugvars>
[03:53:39.705]  
[03:53:39.705]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:53:39.705]    <block atomic="false" info="">
[03:53:39.705]      __var SW_DP_ABORT       = 0x0;
[03:53:39.705]        // -> [SW_DP_ABORT <= 0x00000000]
[03:53:39.705]      __var DP_CTRL_STAT      = 0x4;
[03:53:39.705]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:53:39.705]      __var DP_SELECT         = 0x8;
[03:53:39.705]        // -> [DP_SELECT <= 0x00000008]
[03:53:39.705]      __var powered_down      = 0;
[03:53:39.705]        // -> [powered_down <= 0x00000000]
[03:53:39.705]      WriteDP(DP_SELECT, 0x00000000);
[03:53:39.705]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:53:39.705]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:53:39.709]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:53:39.709]        // -> [powered_down <= 0x00000001]
[03:53:39.709]    </block>
[03:53:39.709]    <control if="powered_down" while="" timeout="0" info="">
[03:53:39.709]      // if-block "powered_down"
[03:53:39.709]        // =>  TRUE
[03:53:39.709]      <block atomic="false" info="">
[03:53:39.709]        Message(0, "Debug/System power-up request sent");
[03:53:39.709]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:53:39.713]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:53:39.713]      </block>
[03:53:39.713]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:53:39.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:53:39.717]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:53:39.717]        // while-condition  =>  FALSE
[03:53:39.717]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:53:39.717]      </control>
[03:53:39.717]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:53:39.717]        // if-block "(__protocol & 0xFFFF) == 1"
[03:53:39.717]          // =>  FALSE
[03:53:39.717]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:53:39.717]      </control>
[03:53:39.717]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:53:39.717]        // if-block "(__protocol & 0xFFFF) == 2"
[03:53:39.717]          // =>  TRUE
[03:53:39.717]        <block atomic="false" info="">
[03:53:39.717]          Message(0, "executing SWD power up");
[03:53:39.717]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:53:39.721]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:53:39.721]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:53:39.721]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:53:39.721]        </block>
[03:53:39.721]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:53:39.721]      </control>
[03:53:39.721]      // end if-block "powered_down"
[03:53:39.721]    </control>
[03:53:39.725]    <block atomic="false" info="">
[03:53:39.725]      __var DEBUG_PORT_VAL    = 0;
[03:53:39.725]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:53:39.725]      __var ACCESS_POINT_VAL  = 0;
[03:53:39.725]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:53:39.725]      __ap = 1; 
[03:53:39.725]        // -> [__ap <= 0x00000001]
[03:53:39.725]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:53:39.729]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:53:39.729]      __ap = 4;
[03:53:39.729]        // -> [__ap <= 0x00000004]
[03:53:39.729]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:53:39.729]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:53:39.729]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:53:39.729]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:53:39.733]    </block>
[03:53:39.733]    <block atomic="false" info="">
[03:53:39.733]      __var nReset = 0x80;
[03:53:39.733]        // -> [nReset <= 0x00000080]
[03:53:39.733]      __var canReadPins = 0;
[03:53:39.733]        // -> [canReadPins <= 0x00000000]
[03:53:39.733]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:53:39.733]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:53:39.733]        // -> [canReadPins <= 0x00000001]
[03:53:39.733]    </block>
[03:53:39.733]    <control if="" while="1" timeout="200" info="">
[03:53:39.733]      // while "1"  (timeout="200")
[03:53:39.733]      // while-condition  =>  TRUE
[03:53:39.733]      // while "1"  (timeout="200")
[03:53:39.733]      // while-condition  =>  TRUE
[03:53:39.733]      // while "1"  (timeout="200")
[03:53:39.733]      // while-condition  =>  TRUE
[03:53:39.737]      // while "1"  (timeout="200")
[03:53:39.737]      // while  =>  TIMEOUT
[03:53:39.737]      // end while "1"
[03:53:39.737]    </control>
[03:53:39.737]    <control if="canReadPins" while="" timeout="0" info="">
[03:53:39.737]      // if-block "canReadPins"
[03:53:39.737]        // =>  TRUE
[03:53:39.737]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:53:39.737]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:53:39.739]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:53:39.739]        // while-condition  =>  FALSE
[03:53:39.739]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:53:39.739]      </control>
[03:53:39.739]      // end if-block "canReadPins"
[03:53:39.739]    </control>
[03:53:39.739]    <control if="!canReadPins" while="" timeout="0" info="">
[03:53:39.739]      // if-block "!canReadPins"
[03:53:39.739]        // =>  FALSE
[03:53:39.739]      // skip if-block "!canReadPins"
[03:53:39.739]    </control>
[03:53:39.739]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:53:39.739]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:53:39.739]        // =>  TRUE
[03:53:39.739]      <block atomic="false" info="">
[03:53:39.739]        WriteAP(0x00, 0x190008);
[03:53:39.741]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:53:39.741]        WriteAP(0xF0, 0x01);
[03:53:39.745]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:53:39.745]      </block>
[03:53:39.745]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:53:39.745]    </control>
[03:53:39.745]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:53:39.745]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:53:39.745]        // =>  FALSE
[03:53:39.745]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:53:39.745]    </control>
[03:53:39.745]    <block atomic="false" info="">
[03:53:39.745]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:53:39.749]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:53:39.749]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:53:39.753]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:53:39.753]      __ap = 0; //lets make sure we reset the access point selection
[03:53:39.753]        // -> [__ap <= 0x00000000]
[03:53:39.753]    </block>
[03:53:39.753]  </sequence>
[03:53:39.753]  
[03:53:39.776]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:53:39.776]  
[03:53:39.776]  <debugvars>
[03:53:39.776]    // Pre-defined
[03:53:39.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:39.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:39.776]    __dp=0x00000000
[03:53:39.776]    __ap=0x00000000
[03:53:39.776]    __traceout=0x00000000      (Trace Disabled)
[03:53:39.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:39.776]    __FlashAddr=0x00000000
[03:53:39.776]    __FlashLen=0x00000000
[03:53:39.776]    __FlashArg=0x00000000
[03:53:39.778]    __FlashOp=0x00000000
[03:53:39.778]    __Result=0x00000000
[03:53:39.778]  </debugvars>
[03:53:39.778]  
[03:53:39.778]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:53:39.778]    <block atomic="false" info="">
[03:53:39.778]      __var deviceID = 0;
[03:53:39.778]        // -> [deviceID <= 0x00000000]
[03:53:39.778]      __var version = 0;
[03:53:39.778]        // -> [version <= 0x00000000]
[03:53:39.778]      __var partNum = 0;
[03:53:39.778]        // -> [partNum <= 0x00000000]
[03:53:39.778]      __var manuf = 0;
[03:53:39.778]        // -> [manuf <= 0x00000000]
[03:53:39.778]      __var isMSPM0G1X0X_G3X0X = 0;
[03:53:39.778]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:53:39.778]      __var isProduction = 0;
[03:53:39.778]        // -> [isProduction <= 0x00000000]
[03:53:39.778]      __var continueId = 0;
[03:53:39.778]        // -> [continueId <= 0x00000000]
[03:53:39.778]      deviceID =   Read32(0x41C40004);
[03:53:39.782]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:53:39.782]        // -> [deviceID <= 0x2BB8802F]
[03:53:39.782]      version = deviceID >> 28;
[03:53:39.782]        // -> [version <= 0x00000002]
[03:53:39.782]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:53:39.782]        // -> [partNum <= 0x0000BB88]
[03:53:39.782]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:53:39.782]        // -> [manuf <= 0x00000017]
[03:53:39.782]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:53:39.782]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:53:39.782]      isProduction = (version > 0);
[03:53:39.786]        // -> [isProduction <= 0x00000001]
[03:53:39.786]    </block>
[03:53:39.786]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:53:39.786]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:53:39.786]        // =>  FALSE
[03:53:39.786]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:53:39.786]    </control>
[03:53:39.786]    <control if="continueId == 4" while="" timeout="0" info="">
[03:53:39.786]      // if-block "continueId == 4"
[03:53:39.786]        // =>  FALSE
[03:53:39.786]      // skip if-block "continueId == 4"
[03:53:39.786]    </control>
[03:53:39.786]    <control if="!isProduction" while="" timeout="0" info="">
[03:53:39.786]      // if-block "!isProduction"
[03:53:39.786]        // =>  FALSE
[03:53:39.786]      // skip if-block "!isProduction"
[03:53:39.786]    </control>
[03:53:39.786]  </sequence>
[03:53:39.786]  
[03:54:20.930]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:54:20.930]  
[03:54:20.941]  <debugvars>
[03:54:20.941]    // Pre-defined
[03:54:20.941]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:20.941]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:20.941]    __dp=0x00000000
[03:54:20.941]    __ap=0x00000000
[03:54:20.941]    __traceout=0x00000000      (Trace Disabled)
[03:54:20.941]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:20.941]    __FlashAddr=0x00000000
[03:54:20.941]    __FlashLen=0x00000000
[03:54:20.941]    __FlashArg=0x00000000
[03:54:20.941]    __FlashOp=0x00000000
[03:54:20.941]    __Result=0x00000000
[03:54:20.941]  </debugvars>
[03:54:20.941]  
[03:54:20.941]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:54:20.941]    <block atomic="false" info="">
[03:54:20.941]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:54:20.941]        // -> [isSWJ <= 0x00000001]
[03:54:20.941]      __var hasDormant = __protocol & 0x00020000;
[03:54:20.941]        // -> [hasDormant <= 0x00000000]
[03:54:20.941]      __var protType   = __protocol & 0x0000FFFF;
[03:54:20.941]        // -> [protType <= 0x00000002]
[03:54:20.941]    </block>
[03:54:20.941]    <control if="protType == 1" while="" timeout="0" info="">
[03:54:20.941]      // if-block "protType == 1"
[03:54:20.941]        // =>  FALSE
[03:54:20.941]      // skip if-block "protType == 1"
[03:54:20.941]    </control>
[03:54:20.941]    <control if="protType == 2" while="" timeout="0" info="">
[03:54:20.941]      // if-block "protType == 2"
[03:54:20.945]        // =>  TRUE
[03:54:20.945]      <control if="isSWJ" while="" timeout="0" info="">
[03:54:20.945]        // if-block "isSWJ"
[03:54:20.945]          // =>  TRUE
[03:54:20.945]        <control if="hasDormant" while="" timeout="0" info="">
[03:54:20.945]          // if-block "hasDormant"
[03:54:20.945]            // =>  FALSE
[03:54:20.945]          // skip if-block "hasDormant"
[03:54:20.945]        </control>
[03:54:20.945]        <control if="!hasDormant" while="" timeout="0" info="">
[03:54:20.945]          // if-block "!hasDormant"
[03:54:20.945]            // =>  TRUE
[03:54:20.945]          <block atomic="false" info="">
[03:54:20.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:54:20.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:20.945]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:54:20.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:54:20.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:54:20.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:20.949]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:54:20.953]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:54:20.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:54:20.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:20.957]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:54:20.957]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:54:20.957]          </block>
[03:54:20.957]          // end if-block "!hasDormant"
[03:54:20.957]        </control>
[03:54:20.957]        // end if-block "isSWJ"
[03:54:20.957]      </control>
[03:54:20.957]      <control if="!isSWJ" while="" timeout="0" info="">
[03:54:20.957]        // if-block "!isSWJ"
[03:54:20.957]          // =>  FALSE
[03:54:20.957]        // skip if-block "!isSWJ"
[03:54:20.957]      </control>
[03:54:20.957]      <block atomic="false" info="">
[03:54:20.957]        ReadDP(0x0);
[03:54:20.961]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:54:20.961]      </block>
[03:54:20.961]      // end if-block "protType == 2"
[03:54:20.961]    </control>
[03:54:20.961]  </sequence>
[03:54:20.961]  
[03:54:20.965]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:54:20.965]  
[03:54:20.965]  <debugvars>
[03:54:20.965]    // Pre-defined
[03:54:20.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:20.965]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:20.965]    __dp=0x00000000
[03:54:20.965]    __ap=0x00000000
[03:54:20.965]    __traceout=0x00000000      (Trace Disabled)
[03:54:20.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:20.965]    __FlashAddr=0x00000000
[03:54:20.965]    __FlashLen=0x00000000
[03:54:20.965]    __FlashArg=0x00000000
[03:54:20.965]    __FlashOp=0x00000000
[03:54:20.967]    __Result=0x00000000
[03:54:20.967]  </debugvars>
[03:54:20.967]  
[03:54:20.967]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:54:20.967]    <block atomic="false" info="">
[03:54:20.967]      __var SW_DP_ABORT       = 0x0;
[03:54:20.967]        // -> [SW_DP_ABORT <= 0x00000000]
[03:54:20.967]      __var DP_CTRL_STAT      = 0x4;
[03:54:20.967]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:54:20.967]      __var DP_SELECT         = 0x8;
[03:54:20.967]        // -> [DP_SELECT <= 0x00000008]
[03:54:20.967]      __var powered_down      = 0;
[03:54:20.967]        // -> [powered_down <= 0x00000000]
[03:54:20.967]      WriteDP(DP_SELECT, 0x00000000);
[03:54:20.969]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:54:20.969]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:54:20.969]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:54:20.969]        // -> [powered_down <= 0x00000001]
[03:54:20.969]    </block>
[03:54:20.969]    <control if="powered_down" while="" timeout="0" info="">
[03:54:20.969]      // if-block "powered_down"
[03:54:20.969]        // =>  TRUE
[03:54:20.969]      <block atomic="false" info="">
[03:54:20.969]        Message(0, "Debug/System power-up request sent");
[03:54:20.973]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:54:20.973]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:54:20.973]      </block>
[03:54:20.973]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:54:20.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.977]        // while-condition  =>  TRUE
[03:54:20.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.980]        // while-condition  =>  TRUE
[03:54:20.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.982]        // while-condition  =>  TRUE
[03:54:20.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.983]        // while-condition  =>  TRUE
[03:54:20.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.983]        // while-condition  =>  TRUE
[03:54:20.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.991]        // while-condition  =>  TRUE
[03:54:20.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.993]        // while-condition  =>  TRUE
[03:54:20.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.994]        // while-condition  =>  TRUE
[03:54:20.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.994]        // while-condition  =>  TRUE
[03:54:20.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.998]        // while-condition  =>  TRUE
[03:54:20.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:20.998]        // while-condition  =>  TRUE
[03:54:20.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:20.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.002]        // while-condition  =>  TRUE
[03:54:21.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.006]        // while-condition  =>  TRUE
[03:54:21.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.006]        // while-condition  =>  TRUE
[03:54:21.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.010]        // while-condition  =>  TRUE
[03:54:21.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.010]        // while-condition  =>  TRUE
[03:54:21.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.010]        // while-condition  =>  TRUE
[03:54:21.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.014]        // while-condition  =>  TRUE
[03:54:21.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.017]        // while-condition  =>  TRUE
[03:54:21.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.018]        // while-condition  =>  TRUE
[03:54:21.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.018]        // while-condition  =>  TRUE
[03:54:21.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.022]        // while-condition  =>  TRUE
[03:54:21.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.024]        // while-condition  =>  TRUE
[03:54:21.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.024]        // while-condition  =>  TRUE
[03:54:21.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.027]        // while-condition  =>  TRUE
[03:54:21.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.027]        // while-condition  =>  TRUE
[03:54:21.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.031]        // while-condition  =>  TRUE
[03:54:21.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.033]        // while-condition  =>  TRUE
[03:54:21.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.033]        // while-condition  =>  TRUE
[03:54:21.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.035]        // while-condition  =>  TRUE
[03:54:21.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.035]        // while-condition  =>  TRUE
[03:54:21.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.039]        // while-condition  =>  TRUE
[03:54:21.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.039]        // while-condition  =>  TRUE
[03:54:21.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.039]        // while-condition  =>  TRUE
[03:54:21.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.043]        // while-condition  =>  TRUE
[03:54:21.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.043]        // while-condition  =>  TRUE
[03:54:21.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.047]        // while-condition  =>  TRUE
[03:54:21.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.053]        // while-condition  =>  TRUE
[03:54:21.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.055]        // while-condition  =>  TRUE
[03:54:21.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.055]        // while-condition  =>  TRUE
[03:54:21.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.059]        // while-condition  =>  TRUE
[03:54:21.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.059]        // while-condition  =>  TRUE
[03:54:21.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.063]        // while-condition  =>  TRUE
[03:54:21.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.063]        // while-condition  =>  TRUE
[03:54:21.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.067]        // while-condition  =>  TRUE
[03:54:21.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.067]        // while-condition  =>  TRUE
[03:54:21.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.067]        // while-condition  =>  TRUE
[03:54:21.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.071]        // while-condition  =>  TRUE
[03:54:21.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.071]        // while-condition  =>  TRUE
[03:54:21.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.075]        // while-condition  =>  TRUE
[03:54:21.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.075]        // while-condition  =>  TRUE
[03:54:21.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.080]        // while-condition  =>  TRUE
[03:54:21.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.082]        // while-condition  =>  TRUE
[03:54:21.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.084]        // while-condition  =>  TRUE
[03:54:21.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.088]        // while-condition  =>  TRUE
[03:54:21.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.092]        // while-condition  =>  TRUE
[03:54:21.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.095]        // while-condition  =>  TRUE
[03:54:21.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.096]        // while-condition  =>  TRUE
[03:54:21.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.096]        // while-condition  =>  TRUE
[03:54:21.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.102]        // while-condition  =>  TRUE
[03:54:21.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.104]        // while-condition  =>  TRUE
[03:54:21.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.104]        // while-condition  =>  TRUE
[03:54:21.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.108]        // while-condition  =>  TRUE
[03:54:21.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.108]        // while-condition  =>  TRUE
[03:54:21.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.112]        // while-condition  =>  TRUE
[03:54:21.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.114]        // while-condition  =>  TRUE
[03:54:21.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.116]        // while-condition  =>  TRUE
[03:54:21.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.116]        // while-condition  =>  TRUE
[03:54:21.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.116]        // while-condition  =>  TRUE
[03:54:21.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.120]        // while-condition  =>  TRUE
[03:54:21.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.120]        // while-condition  =>  TRUE
[03:54:21.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.124]        // while-condition  =>  TRUE
[03:54:21.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.124]        // while-condition  =>  TRUE
[03:54:21.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.128]        // while-condition  =>  TRUE
[03:54:21.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.128]        // while-condition  =>  TRUE
[03:54:21.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.132]        // while-condition  =>  TRUE
[03:54:21.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.132]        // while-condition  =>  TRUE
[03:54:21.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.136]        // while-condition  =>  TRUE
[03:54:21.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.136]        // while-condition  =>  TRUE
[03:54:21.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.136]        // while-condition  =>  TRUE
[03:54:21.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.140]        // while-condition  =>  TRUE
[03:54:21.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.140]        // while-condition  =>  TRUE
[03:54:21.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.144]        // while-condition  =>  TRUE
[03:54:21.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.144]        // while-condition  =>  TRUE
[03:54:21.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.150]        // while-condition  =>  TRUE
[03:54:21.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.150]        // while-condition  =>  TRUE
[03:54:21.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.153]        // while-condition  =>  TRUE
[03:54:21.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.153]        // while-condition  =>  TRUE
[03:54:21.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.157]        // while-condition  =>  TRUE
[03:54:21.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.161]        // while-condition  =>  TRUE
[03:54:21.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.163]        // while-condition  =>  TRUE
[03:54:21.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.165]        // while-condition  =>  TRUE
[03:54:21.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.165]        // while-condition  =>  TRUE
[03:54:21.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.165]        // while-condition  =>  TRUE
[03:54:21.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.169]        // while-condition  =>  TRUE
[03:54:21.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.169]        // while-condition  =>  TRUE
[03:54:21.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.173]        // while-condition  =>  TRUE
[03:54:21.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.173]        // while-condition  =>  TRUE
[03:54:21.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.177]        // while-condition  =>  TRUE
[03:54:21.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.177]        // while-condition  =>  TRUE
[03:54:21.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.181]        // while-condition  =>  TRUE
[03:54:21.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.181]        // while-condition  =>  TRUE
[03:54:21.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.184]        // while-condition  =>  TRUE
[03:54:21.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.191]        // while-condition  =>  TRUE
[03:54:21.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.191]        // while-condition  =>  TRUE
[03:54:21.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.194]        // while-condition  =>  TRUE
[03:54:21.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.194]        // while-condition  =>  TRUE
[03:54:21.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.198]        // while-condition  =>  TRUE
[03:54:21.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.198]        // while-condition  =>  TRUE
[03:54:21.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.202]        // while-condition  =>  TRUE
[03:54:21.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.202]        // while-condition  =>  TRUE
[03:54:21.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.206]        // while-condition  =>  TRUE
[03:54:21.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.206]        // while-condition  =>  TRUE
[03:54:21.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.210]        // while-condition  =>  TRUE
[03:54:21.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.212]        // while-condition  =>  TRUE
[03:54:21.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.214]        // while-condition  =>  TRUE
[03:54:21.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.214]        // while-condition  =>  TRUE
[03:54:21.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.218]        // while-condition  =>  TRUE
[03:54:21.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.218]        // while-condition  =>  TRUE
[03:54:21.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.222]        // while-condition  =>  TRUE
[03:54:21.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.224]        // while-condition  =>  TRUE
[03:54:21.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.224]        // while-condition  =>  TRUE
[03:54:21.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.227]        // while-condition  =>  TRUE
[03:54:21.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.231]        // while-condition  =>  TRUE
[03:54:21.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.235]        // while-condition  =>  TRUE
[03:54:21.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.235]        // while-condition  =>  TRUE
[03:54:21.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.239]        // while-condition  =>  TRUE
[03:54:21.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.239]        // while-condition  =>  TRUE
[03:54:21.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.243]        // while-condition  =>  TRUE
[03:54:21.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.243]        // while-condition  =>  TRUE
[03:54:21.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.247]        // while-condition  =>  TRUE
[03:54:21.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.247]        // while-condition  =>  TRUE
[03:54:21.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.247]        // while-condition  =>  TRUE
[03:54:21.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.251]        // while-condition  =>  TRUE
[03:54:21.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.251]        // while-condition  =>  TRUE
[03:54:21.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.259]        // while-condition  =>  TRUE
[03:54:21.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.263]        // while-condition  =>  TRUE
[03:54:21.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.263]        // while-condition  =>  TRUE
[03:54:21.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.267]        // while-condition  =>  TRUE
[03:54:21.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.267]        // while-condition  =>  TRUE
[03:54:21.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.271]        // while-condition  =>  TRUE
[03:54:21.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.271]        // while-condition  =>  TRUE
[03:54:21.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.275]        // while-condition  =>  TRUE
[03:54:21.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.275]        // while-condition  =>  TRUE
[03:54:21.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.279]        // while-condition  =>  TRUE
[03:54:21.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.279]        // while-condition  =>  TRUE
[03:54:21.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.283]        // while-condition  =>  TRUE
[03:54:21.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.283]        // while-condition  =>  TRUE
[03:54:21.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.287]        // while-condition  =>  TRUE
[03:54:21.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.295]        // while-condition  =>  TRUE
[03:54:21.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.299]        // while-condition  =>  TRUE
[03:54:21.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.299]        // while-condition  =>  TRUE
[03:54:21.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.303]        // while-condition  =>  TRUE
[03:54:21.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.303]        // while-condition  =>  TRUE
[03:54:21.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.307]        // while-condition  =>  TRUE
[03:54:21.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.307]        // while-condition  =>  TRUE
[03:54:21.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.307]        // while-condition  =>  TRUE
[03:54:21.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.311]        // while-condition  =>  TRUE
[03:54:21.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.311]        // while-condition  =>  TRUE
[03:54:21.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.315]        // while-condition  =>  TRUE
[03:54:21.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.315]        // while-condition  =>  TRUE
[03:54:21.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.319]        // while-condition  =>  TRUE
[03:54:21.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.319]        // while-condition  =>  TRUE
[03:54:21.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.319]        // while-condition  =>  TRUE
[03:54:21.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.323]        // while-condition  =>  TRUE
[03:54:21.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.323]        // while-condition  =>  TRUE
[03:54:21.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.327]        // while-condition  =>  TRUE
[03:54:21.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.327]        // while-condition  =>  TRUE
[03:54:21.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.331]        // while-condition  =>  TRUE
[03:54:21.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.332]        // while-condition  =>  TRUE
[03:54:21.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.332]        // while-condition  =>  TRUE
[03:54:21.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.335]        // while-condition  =>  TRUE
[03:54:21.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.335]        // while-condition  =>  TRUE
[03:54:21.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.339]        // while-condition  =>  TRUE
[03:54:21.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.339]        // while-condition  =>  TRUE
[03:54:21.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.343]        // while-condition  =>  TRUE
[03:54:21.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.343]        // while-condition  =>  TRUE
[03:54:21.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.347]        // while-condition  =>  TRUE
[03:54:21.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.347]        // while-condition  =>  TRUE
[03:54:21.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.347]        // while-condition  =>  TRUE
[03:54:21.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.351]        // while-condition  =>  TRUE
[03:54:21.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.351]        // while-condition  =>  TRUE
[03:54:21.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.355]        // while-condition  =>  TRUE
[03:54:21.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.355]        // while-condition  =>  TRUE
[03:54:21.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.359]        // while-condition  =>  TRUE
[03:54:21.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.359]        // while-condition  =>  TRUE
[03:54:21.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.363]        // while-condition  =>  TRUE
[03:54:21.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.363]        // while-condition  =>  TRUE
[03:54:21.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.363]        // while-condition  =>  TRUE
[03:54:21.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.367]        // while-condition  =>  TRUE
[03:54:21.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.367]        // while-condition  =>  TRUE
[03:54:21.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.371]        // while-condition  =>  TRUE
[03:54:21.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.371]        // while-condition  =>  TRUE
[03:54:21.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.375]        // while-condition  =>  TRUE
[03:54:21.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.375]        // while-condition  =>  TRUE
[03:54:21.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.379]        // while-condition  =>  TRUE
[03:54:21.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.379]        // while-condition  =>  TRUE
[03:54:21.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.379]        // while-condition  =>  TRUE
[03:54:21.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.383]        // while-condition  =>  TRUE
[03:54:21.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.383]        // while-condition  =>  TRUE
[03:54:21.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.387]        // while-condition  =>  TRUE
[03:54:21.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.387]        // while-condition  =>  TRUE
[03:54:21.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.391]        // while-condition  =>  TRUE
[03:54:21.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.392]        // while-condition  =>  TRUE
[03:54:21.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.395]        // while-condition  =>  TRUE
[03:54:21.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.398]        // while-condition  =>  TRUE
[03:54:21.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.404]        // while-condition  =>  TRUE
[03:54:21.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.404]        // while-condition  =>  TRUE
[03:54:21.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.407]        // while-condition  =>  TRUE
[03:54:21.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.407]        // while-condition  =>  TRUE
[03:54:21.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.407]        // while-condition  =>  TRUE
[03:54:21.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.411]        // while-condition  =>  TRUE
[03:54:21.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.411]        // while-condition  =>  TRUE
[03:54:21.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.415]        // while-condition  =>  TRUE
[03:54:21.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.415]        // while-condition  =>  TRUE
[03:54:21.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.415]        // while-condition  =>  TRUE
[03:54:21.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.419]        // while-condition  =>  TRUE
[03:54:21.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.419]        // while-condition  =>  TRUE
[03:54:21.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.423]        // while-condition  =>  TRUE
[03:54:21.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.423]        // while-condition  =>  TRUE
[03:54:21.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.423]        // while-condition  =>  TRUE
[03:54:21.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.427]        // while-condition  =>  TRUE
[03:54:21.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.427]        // while-condition  =>  TRUE
[03:54:21.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.431]        // while-condition  =>  TRUE
[03:54:21.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.431]        // while-condition  =>  TRUE
[03:54:21.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.435]        // while-condition  =>  TRUE
[03:54:21.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.435]        // while-condition  =>  TRUE
[03:54:21.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.439]        // while-condition  =>  TRUE
[03:54:21.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.439]        // while-condition  =>  TRUE
[03:54:21.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.443]        // while-condition  =>  TRUE
[03:54:21.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.443]        // while-condition  =>  TRUE
[03:54:21.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.443]        // while-condition  =>  TRUE
[03:54:21.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.447]        // while-condition  =>  TRUE
[03:54:21.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.447]        // while-condition  =>  TRUE
[03:54:21.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.452]        // while-condition  =>  TRUE
[03:54:21.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.452]        // while-condition  =>  TRUE
[03:54:21.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.455]        // while-condition  =>  TRUE
[03:54:21.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.457]        // while-condition  =>  TRUE
[03:54:21.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.459]        // while-condition  =>  TRUE
[03:54:21.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.460]        // while-condition  =>  TRUE
[03:54:21.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.462]        // while-condition  =>  TRUE
[03:54:21.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.465]        // while-condition  =>  TRUE
[03:54:21.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.468]        // while-condition  =>  TRUE
[03:54:21.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.470]        // while-condition  =>  TRUE
[03:54:21.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.471]        // while-condition  =>  TRUE
[03:54:21.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.474]        // while-condition  =>  TRUE
[03:54:21.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.476]        // while-condition  =>  TRUE
[03:54:21.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.478]        // while-condition  =>  TRUE
[03:54:21.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.480]        // while-condition  =>  TRUE
[03:54:21.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.482]        // while-condition  =>  TRUE
[03:54:21.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.483]        // while-condition  =>  TRUE
[03:54:21.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.485]        // while-condition  =>  TRUE
[03:54:21.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.486]        // while-condition  =>  TRUE
[03:54:21.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.490]        // while-condition  =>  TRUE
[03:54:21.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.494]        // while-condition  =>  TRUE
[03:54:21.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.494]        // while-condition  =>  TRUE
[03:54:21.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.498]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.498]        // while-condition  =>  TRUE
[03:54:21.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.504]        // while-condition  =>  TRUE
[03:54:21.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.504]        // while-condition  =>  TRUE
[03:54:21.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.507]        // while-condition  =>  TRUE
[03:54:21.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.509]        // while-condition  =>  TRUE
[03:54:21.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.510]        // while-condition  =>  TRUE
[03:54:21.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.511]        // while-condition  =>  TRUE
[03:54:21.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.514]        // while-condition  =>  TRUE
[03:54:21.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.514]        // while-condition  =>  TRUE
[03:54:21.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.518]        // while-condition  =>  TRUE
[03:54:21.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.520]        // while-condition  =>  TRUE
[03:54:21.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.522]        // while-condition  =>  TRUE
[03:54:21.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.523]        // while-condition  =>  TRUE
[03:54:21.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.525]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.525]        // while-condition  =>  TRUE
[03:54:21.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.526]        // while-condition  =>  TRUE
[03:54:21.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.528]        // while-condition  =>  TRUE
[03:54:21.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.530]        // while-condition  =>  TRUE
[03:54:21.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.531]        // while-condition  =>  TRUE
[03:54:21.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.533]        // while-condition  =>  TRUE
[03:54:21.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.535]        // while-condition  =>  TRUE
[03:54:21.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.537]        // while-condition  =>  TRUE
[03:54:21.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.539]        // while-condition  =>  TRUE
[03:54:21.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.540]        // while-condition  =>  TRUE
[03:54:21.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.542]        // while-condition  =>  TRUE
[03:54:21.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.544]        // while-condition  =>  TRUE
[03:54:21.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.546]        // while-condition  =>  TRUE
[03:54:21.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.546]        // while-condition  =>  TRUE
[03:54:21.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.549]        // while-condition  =>  TRUE
[03:54:21.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.552]        // while-condition  =>  TRUE
[03:54:21.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.553]        // while-condition  =>  TRUE
[03:54:21.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.555]        // while-condition  =>  TRUE
[03:54:21.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.556]        // while-condition  =>  TRUE
[03:54:21.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.558]        // while-condition  =>  TRUE
[03:54:21.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.560]        // while-condition  =>  TRUE
[03:54:21.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.562]        // while-condition  =>  TRUE
[03:54:21.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.564]        // while-condition  =>  TRUE
[03:54:21.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.565]        // while-condition  =>  TRUE
[03:54:21.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.567]        // while-condition  =>  TRUE
[03:54:21.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.571]        // while-condition  =>  TRUE
[03:54:21.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.573]        // while-condition  =>  TRUE
[03:54:21.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.574]        // while-condition  =>  TRUE
[03:54:21.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.576]        // while-condition  =>  TRUE
[03:54:21.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.578]        // while-condition  =>  TRUE
[03:54:21.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.578]        // while-condition  =>  TRUE
[03:54:21.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.582]        // while-condition  =>  TRUE
[03:54:21.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.583]        // while-condition  =>  TRUE
[03:54:21.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.585]        // while-condition  =>  TRUE
[03:54:21.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.588]        // while-condition  =>  TRUE
[03:54:21.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.589]        // while-condition  =>  TRUE
[03:54:21.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.591]        // while-condition  =>  TRUE
[03:54:21.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.592]        // while-condition  =>  TRUE
[03:54:21.592]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.594]        // while-condition  =>  TRUE
[03:54:21.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.596]        // while-condition  =>  TRUE
[03:54:21.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.597]        // while-condition  =>  TRUE
[03:54:21.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.597]        // while-condition  =>  TRUE
[03:54:21.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.601]        // while-condition  =>  TRUE
[03:54:21.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.605]        // while-condition  =>  TRUE
[03:54:21.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.606]        // while-condition  =>  TRUE
[03:54:21.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.608]        // while-condition  =>  TRUE
[03:54:21.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.612]        // while-condition  =>  TRUE
[03:54:21.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.617]        // while-condition  =>  TRUE
[03:54:21.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.618]        // while-condition  =>  TRUE
[03:54:21.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.620]        // while-condition  =>  TRUE
[03:54:21.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.621]        // while-condition  =>  TRUE
[03:54:21.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.623]        // while-condition  =>  TRUE
[03:54:21.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.625]        // while-condition  =>  TRUE
[03:54:21.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.626]        // while-condition  =>  TRUE
[03:54:21.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.629]        // while-condition  =>  TRUE
[03:54:21.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.633]        // while-condition  =>  TRUE
[03:54:21.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.635]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.635]        // while-condition  =>  TRUE
[03:54:21.635]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.635]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.637]        // while-condition  =>  TRUE
[03:54:21.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.637]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.637]        // while-condition  =>  TRUE
[03:54:21.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.637]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.637]        // while-condition  =>  TRUE
[03:54:21.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.642]        // while-condition  =>  TRUE
[03:54:21.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.644]        // while-condition  =>  TRUE
[03:54:21.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.645]        // while-condition  =>  TRUE
[03:54:21.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.646]        // while-condition  =>  TRUE
[03:54:21.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.649]        // while-condition  =>  TRUE
[03:54:21.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.649]        // while-condition  =>  TRUE
[03:54:21.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.653]        // while-condition  =>  TRUE
[03:54:21.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.653]        // while-condition  =>  TRUE
[03:54:21.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.653]        // while-condition  =>  TRUE
[03:54:21.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.657]        // while-condition  =>  TRUE
[03:54:21.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.657]        // while-condition  =>  TRUE
[03:54:21.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.662]        // while-condition  =>  TRUE
[03:54:21.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.663]        // while-condition  =>  TRUE
[03:54:21.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.665]        // while-condition  =>  TRUE
[03:54:21.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.667]        // while-condition  =>  TRUE
[03:54:21.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.669]        // while-condition  =>  TRUE
[03:54:21.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.671]        // while-condition  =>  TRUE
[03:54:21.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.672]        // while-condition  =>  TRUE
[03:54:21.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.675]        // while-condition  =>  TRUE
[03:54:21.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.676]        // while-condition  =>  TRUE
[03:54:21.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.678]        // while-condition  =>  TRUE
[03:54:21.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.680]        // while-condition  =>  TRUE
[03:54:21.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.683]        // while-condition  =>  TRUE
[03:54:21.683]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.684]        // while-condition  =>  TRUE
[03:54:21.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.686]        // while-condition  =>  TRUE
[03:54:21.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.688]        // while-condition  =>  TRUE
[03:54:21.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.689]        // while-condition  =>  TRUE
[03:54:21.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.692]        // while-condition  =>  TRUE
[03:54:21.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.694]        // while-condition  =>  TRUE
[03:54:21.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.696]        // while-condition  =>  TRUE
[03:54:21.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.696]        // while-condition  =>  TRUE
[03:54:21.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.700]        // while-condition  =>  TRUE
[03:54:21.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.700]        // while-condition  =>  TRUE
[03:54:21.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.704]        // while-condition  =>  TRUE
[03:54:21.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.706]        // while-condition  =>  TRUE
[03:54:21.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.708]        // while-condition  =>  TRUE
[03:54:21.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.709]        // while-condition  =>  TRUE
[03:54:21.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.712]        // while-condition  =>  TRUE
[03:54:21.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.712]        // while-condition  =>  TRUE
[03:54:21.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.712]        // while-condition  =>  TRUE
[03:54:21.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.716]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.716]        // while-condition  =>  TRUE
[03:54:21.716]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.716]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.716]        // while-condition  =>  TRUE
[03:54:21.716]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.720]        // while-condition  =>  TRUE
[03:54:21.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.722]        // while-condition  =>  TRUE
[03:54:21.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.723]        // while-condition  =>  TRUE
[03:54:21.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.725]        // while-condition  =>  TRUE
[03:54:21.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.728]        // while-condition  =>  TRUE
[03:54:21.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.729]        // while-condition  =>  TRUE
[03:54:21.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.731]        // while-condition  =>  TRUE
[03:54:21.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.731]        // while-condition  =>  TRUE
[03:54:21.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.734]        // while-condition  =>  TRUE
[03:54:21.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.734]        // while-condition  =>  TRUE
[03:54:21.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.742]        // while-condition  =>  TRUE
[03:54:21.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.742]        // while-condition  =>  TRUE
[03:54:21.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.742]        // while-condition  =>  TRUE
[03:54:21.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.746]        // while-condition  =>  TRUE
[03:54:21.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.748]        // while-condition  =>  TRUE
[03:54:21.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.750]        // while-condition  =>  TRUE
[03:54:21.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.750]        // while-condition  =>  TRUE
[03:54:21.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.756]        // while-condition  =>  TRUE
[03:54:21.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.759]        // while-condition  =>  TRUE
[03:54:21.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.759]        // while-condition  =>  TRUE
[03:54:21.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.762]        // while-condition  =>  TRUE
[03:54:21.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.762]        // while-condition  =>  TRUE
[03:54:21.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.767]        // while-condition  =>  TRUE
[03:54:21.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.769]        // while-condition  =>  TRUE
[03:54:21.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.770]        // while-condition  =>  TRUE
[03:54:21.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.772]        // while-condition  =>  TRUE
[03:54:21.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.774]        // while-condition  =>  TRUE
[03:54:21.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.776]        // while-condition  =>  TRUE
[03:54:21.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.778]        // while-condition  =>  TRUE
[03:54:21.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.779]        // while-condition  =>  TRUE
[03:54:21.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.782]        // while-condition  =>  TRUE
[03:54:21.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.782]        // while-condition  =>  TRUE
[03:54:21.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.785]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.786]        // while-condition  =>  TRUE
[03:54:21.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.788]        // while-condition  =>  TRUE
[03:54:21.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.789]        // while-condition  =>  TRUE
[03:54:21.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.791]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.791]        // while-condition  =>  TRUE
[03:54:21.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.793]        // while-condition  =>  TRUE
[03:54:21.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.793]        // while-condition  =>  TRUE
[03:54:21.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.796]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.796]        // while-condition  =>  TRUE
[03:54:21.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.798]        // while-condition  =>  TRUE
[03:54:21.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.800]        // while-condition  =>  TRUE
[03:54:21.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.803]        // while-condition  =>  TRUE
[03:54:21.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.804]        // while-condition  =>  TRUE
[03:54:21.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.805]        // while-condition  =>  TRUE
[03:54:21.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.809]        // while-condition  =>  TRUE
[03:54:21.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.811]        // while-condition  =>  TRUE
[03:54:21.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.812]        // while-condition  =>  TRUE
[03:54:21.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.814]        // while-condition  =>  TRUE
[03:54:21.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.816]        // while-condition  =>  TRUE
[03:54:21.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.817]        // while-condition  =>  TRUE
[03:54:21.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.818]        // while-condition  =>  TRUE
[03:54:21.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.820]        // while-condition  =>  TRUE
[03:54:21.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.822]        // while-condition  =>  TRUE
[03:54:21.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.822]        // while-condition  =>  TRUE
[03:54:21.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.822]        // while-condition  =>  TRUE
[03:54:21.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.827]        // while-condition  =>  TRUE
[03:54:21.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.828]        // while-condition  =>  TRUE
[03:54:21.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.830]        // while-condition  =>  TRUE
[03:54:21.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.830]        // while-condition  =>  TRUE
[03:54:21.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.830]        // while-condition  =>  TRUE
[03:54:21.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.835]        // while-condition  =>  TRUE
[03:54:21.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.837]        // while-condition  =>  TRUE
[03:54:21.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.839]        // while-condition  =>  TRUE
[03:54:21.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.841]        // while-condition  =>  TRUE
[03:54:21.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.843]        // while-condition  =>  TRUE
[03:54:21.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.843]        // while-condition  =>  TRUE
[03:54:21.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.846]        // while-condition  =>  TRUE
[03:54:21.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.848]        // while-condition  =>  TRUE
[03:54:21.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.850]        // while-condition  =>  TRUE
[03:54:21.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.856]        // while-condition  =>  TRUE
[03:54:21.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.856]        // while-condition  =>  TRUE
[03:54:21.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.859]        // while-condition  =>  TRUE
[03:54:21.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.859]        // while-condition  =>  TRUE
[03:54:21.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.863]        // while-condition  =>  TRUE
[03:54:21.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.863]        // while-condition  =>  TRUE
[03:54:21.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.867]        // while-condition  =>  TRUE
[03:54:21.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.867]        // while-condition  =>  TRUE
[03:54:21.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.870]        // while-condition  =>  TRUE
[03:54:21.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.871]        // while-condition  =>  TRUE
[03:54:21.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.873]        // while-condition  =>  TRUE
[03:54:21.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.877]        // while-condition  =>  TRUE
[03:54:21.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.878]        // while-condition  =>  TRUE
[03:54:21.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.880]        // while-condition  =>  TRUE
[03:54:21.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.880]        // while-condition  =>  TRUE
[03:54:21.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.884]        // while-condition  =>  TRUE
[03:54:21.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.886]        // while-condition  =>  TRUE
[03:54:21.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.893]        // while-condition  =>  TRUE
[03:54:21.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.893]        // while-condition  =>  TRUE
[03:54:21.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.898]        // while-condition  =>  TRUE
[03:54:21.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.899]        // while-condition  =>  TRUE
[03:54:21.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.901]        // while-condition  =>  TRUE
[03:54:21.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.903]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.903]        // while-condition  =>  TRUE
[03:54:21.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.904]        // while-condition  =>  TRUE
[03:54:21.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.907]        // while-condition  =>  TRUE
[03:54:21.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.908]        // while-condition  =>  TRUE
[03:54:21.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.913]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.913]        // while-condition  =>  TRUE
[03:54:21.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.914]        // while-condition  =>  TRUE
[03:54:21.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.916]        // while-condition  =>  TRUE
[03:54:21.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.916]        // while-condition  =>  TRUE
[03:54:21.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.920]        // while-condition  =>  TRUE
[03:54:21.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.922]        // while-condition  =>  TRUE
[03:54:21.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.924]        // while-condition  =>  TRUE
[03:54:21.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.926]        // while-condition  =>  TRUE
[03:54:21.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.928]        // while-condition  =>  TRUE
[03:54:21.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.929]        // while-condition  =>  TRUE
[03:54:21.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.931]        // while-condition  =>  TRUE
[03:54:21.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.933]        // while-condition  =>  TRUE
[03:54:21.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.934]        // while-condition  =>  TRUE
[03:54:21.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.936]        // while-condition  =>  TRUE
[03:54:21.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.936]        // while-condition  =>  TRUE
[03:54:21.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.940]        // while-condition  =>  TRUE
[03:54:21.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.940]        // while-condition  =>  TRUE
[03:54:21.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.944]        // while-condition  =>  TRUE
[03:54:21.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.944]        // while-condition  =>  TRUE
[03:54:21.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.948]        // while-condition  =>  TRUE
[03:54:21.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.948]        // while-condition  =>  TRUE
[03:54:21.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.948]        // while-condition  =>  TRUE
[03:54:21.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.952]        // while-condition  =>  TRUE
[03:54:21.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.952]        // while-condition  =>  TRUE
[03:54:21.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.956]        // while-condition  =>  TRUE
[03:54:21.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.959]        // while-condition  =>  TRUE
[03:54:21.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.960]        // while-condition  =>  TRUE
[03:54:21.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.960]        // while-condition  =>  TRUE
[03:54:21.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.964]        // while-condition  =>  TRUE
[03:54:21.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.964]        // while-condition  =>  TRUE
[03:54:21.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.968]        // while-condition  =>  TRUE
[03:54:21.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.968]        // while-condition  =>  TRUE
[03:54:21.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:54:21.972]        // while-condition  =>  TRUE
[03:54:21.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:21.972]        // while  =>  TIMEOUT
[03:54:21.972]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:54:21.972]      </control>
[03:54:21.972]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:54:21.972]        // if-block "(__protocol & 0xFFFF) == 1"
[03:54:21.972]          // =>  FALSE
[03:54:21.972]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:54:21.972]      </control>
[03:54:21.972]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:54:21.972]        // if-block "(__protocol & 0xFFFF) == 2"
[03:54:21.972]          // =>  TRUE
[03:54:21.972]        <block atomic="false" info="">
[03:54:21.972]          Message(0, "executing SWD power up");
[03:54:21.972]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:54:21.976]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:54:21.976]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:54:21.976]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:54:21.976]        </block>
[03:54:21.980]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:54:21.980]      </control>
[03:54:21.980]      // end if-block "powered_down"
[03:54:21.980]    </control>
[03:54:21.980]    <block atomic="false" info="">
[03:54:21.980]      __var DEBUG_PORT_VAL    = 0;
[03:54:21.980]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:54:21.980]      __var ACCESS_POINT_VAL  = 0;
[03:54:21.980]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:54:21.980]      __ap = 1; 
[03:54:21.980]        // -> [__ap <= 0x00000001]
[03:54:21.980]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:54:21.992]  
[03:54:21.992]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[03:54:21.992]  
[03:54:21.992]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:54:21.992]    </block>
[03:54:21.992]  </sequence>
[03:54:21.992]  
[03:54:32.695]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:54:32.695]  
[03:54:32.695]  <debugvars>
[03:54:32.695]    // Pre-defined
[03:54:32.695]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:32.695]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:32.695]    __dp=0x00000000
[03:54:32.695]    __ap=0x00000000
[03:54:32.695]    __traceout=0x00000000      (Trace Disabled)
[03:54:32.695]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:32.695]    __FlashAddr=0x00000000
[03:54:32.695]    __FlashLen=0x00000000
[03:54:32.695]    __FlashArg=0x00000000
[03:54:32.695]    __FlashOp=0x00000000
[03:54:32.695]    __Result=0x00000000
[03:54:32.699]  </debugvars>
[03:54:32.699]  
[03:54:32.699]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:54:32.699]    <block atomic="false" info="">
[03:54:32.699]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:54:32.699]        // -> [isSWJ <= 0x00000001]
[03:54:32.699]      __var hasDormant = __protocol & 0x00020000;
[03:54:32.699]        // -> [hasDormant <= 0x00000000]
[03:54:32.699]      __var protType   = __protocol & 0x0000FFFF;
[03:54:32.699]        // -> [protType <= 0x00000002]
[03:54:32.699]    </block>
[03:54:32.699]    <control if="protType == 1" while="" timeout="0" info="">
[03:54:32.699]      // if-block "protType == 1"
[03:54:32.699]        // =>  FALSE
[03:54:32.699]      // skip if-block "protType == 1"
[03:54:32.699]    </control>
[03:54:32.699]    <control if="protType == 2" while="" timeout="0" info="">
[03:54:32.699]      // if-block "protType == 2"
[03:54:32.699]        // =>  TRUE
[03:54:32.699]      <control if="isSWJ" while="" timeout="0" info="">
[03:54:32.699]        // if-block "isSWJ"
[03:54:32.699]          // =>  TRUE
[03:54:32.699]        <control if="hasDormant" while="" timeout="0" info="">
[03:54:32.699]          // if-block "hasDormant"
[03:54:32.699]            // =>  FALSE
[03:54:32.699]          // skip if-block "hasDormant"
[03:54:32.699]        </control>
[03:54:32.699]        <control if="!hasDormant" while="" timeout="0" info="">
[03:54:32.699]          // if-block "!hasDormant"
[03:54:32.699]            // =>  TRUE
[03:54:32.699]          <block atomic="false" info="">
[03:54:32.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:54:32.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:32.703]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:54:32.703]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:54:32.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:54:32.707]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:32.707]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:54:32.707]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:54:32.707]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:54:32.707]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:32.711]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:54:32.711]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:54:32.711]          </block>
[03:54:32.711]          // end if-block "!hasDormant"
[03:54:32.711]        </control>
[03:54:32.711]        // end if-block "isSWJ"
[03:54:32.711]      </control>
[03:54:32.711]      <control if="!isSWJ" while="" timeout="0" info="">
[03:54:32.711]        // if-block "!isSWJ"
[03:54:32.711]          // =>  FALSE
[03:54:32.711]        // skip if-block "!isSWJ"
[03:54:32.711]      </control>
[03:54:32.711]      <block atomic="false" info="">
[03:54:32.711]        ReadDP(0x0);
[03:54:32.715]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:54:32.715]      </block>
[03:54:32.715]      // end if-block "protType == 2"
[03:54:32.715]    </control>
[03:54:32.719]  </sequence>
[03:54:32.719]  
[03:54:32.719]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:54:32.719]  
[03:54:32.719]  <debugvars>
[03:54:32.719]    // Pre-defined
[03:54:32.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:32.719]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:32.719]    __dp=0x00000000
[03:54:32.719]    __ap=0x00000000
[03:54:32.719]    __traceout=0x00000000      (Trace Disabled)
[03:54:32.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:32.719]    __FlashAddr=0x00000000
[03:54:32.719]    __FlashLen=0x00000000
[03:54:32.719]    __FlashArg=0x00000000
[03:54:32.719]    __FlashOp=0x00000000
[03:54:32.719]    __Result=0x00000000
[03:54:32.723]  </debugvars>
[03:54:32.723]  
[03:54:32.723]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:54:32.723]    <block atomic="false" info="">
[03:54:32.723]      __var SW_DP_ABORT       = 0x0;
[03:54:32.723]        // -> [SW_DP_ABORT <= 0x00000000]
[03:54:32.723]      __var DP_CTRL_STAT      = 0x4;
[03:54:32.723]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:54:32.723]      __var DP_SELECT         = 0x8;
[03:54:32.723]        // -> [DP_SELECT <= 0x00000008]
[03:54:32.723]      __var powered_down      = 0;
[03:54:32.723]        // -> [powered_down <= 0x00000000]
[03:54:32.723]      WriteDP(DP_SELECT, 0x00000000);
[03:54:32.723]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:54:32.723]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:54:32.727]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:54:32.728]        // -> [powered_down <= 0x00000001]
[03:54:32.728]    </block>
[03:54:32.728]    <control if="powered_down" while="" timeout="0" info="">
[03:54:32.728]      // if-block "powered_down"
[03:54:32.728]        // =>  TRUE
[03:54:32.728]      <block atomic="false" info="">
[03:54:32.728]        Message(0, "Debug/System power-up request sent");
[03:54:32.728]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:54:32.731]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:54:32.731]      </block>
[03:54:32.731]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:54:32.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:32.731]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:54:32.731]        // while-condition  =>  FALSE
[03:54:32.731]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:54:32.734]      </control>
[03:54:32.734]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:54:32.734]        // if-block "(__protocol & 0xFFFF) == 1"
[03:54:32.734]          // =>  FALSE
[03:54:32.734]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:54:32.734]      </control>
[03:54:32.734]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:54:32.734]        // if-block "(__protocol & 0xFFFF) == 2"
[03:54:32.734]          // =>  TRUE
[03:54:32.734]        <block atomic="false" info="">
[03:54:32.734]          Message(0, "executing SWD power up");
[03:54:32.735]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:54:32.738]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:54:32.738]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:54:32.741]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:54:32.741]        </block>
[03:54:32.741]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:54:32.741]      </control>
[03:54:32.741]      // end if-block "powered_down"
[03:54:32.741]    </control>
[03:54:32.741]    <block atomic="false" info="">
[03:54:32.741]      __var DEBUG_PORT_VAL    = 0;
[03:54:32.741]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:54:32.741]      __var ACCESS_POINT_VAL  = 0;
[03:54:32.741]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:54:32.741]      __ap = 1; 
[03:54:32.741]        // -> [__ap <= 0x00000001]
[03:54:32.744]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:54:32.746]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:54:32.746]      __ap = 4;
[03:54:32.746]        // -> [__ap <= 0x00000004]
[03:54:32.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:54:32.757]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:54:32.757]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:54:32.757]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:54:32.757]    </block>
[03:54:32.757]    <block atomic="false" info="">
[03:54:32.757]      __var nReset = 0x80;
[03:54:32.757]        // -> [nReset <= 0x00000080]
[03:54:32.757]      __var canReadPins = 0;
[03:54:32.757]        // -> [canReadPins <= 0x00000000]
[03:54:32.757]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:54:32.761]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:54:32.762]        // -> [canReadPins <= 0x00000001]
[03:54:32.762]    </block>
[03:54:32.762]    <control if="" while="1" timeout="200" info="">
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.762]      // while "1"  (timeout="200")
[03:54:32.762]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.765]      // while-condition  =>  TRUE
[03:54:32.765]      // while "1"  (timeout="200")
[03:54:32.769]      // while-condition  =>  TRUE
[03:54:32.769]      // while "1"  (timeout="200")
[03:54:32.769]      // while  =>  TIMEOUT
[03:54:32.769]      // end while "1"
[03:54:32.769]    </control>
[03:54:32.769]    <control if="canReadPins" while="" timeout="0" info="">
[03:54:32.769]      // if-block "canReadPins"
[03:54:32.769]        // =>  TRUE
[03:54:32.769]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:54:32.769]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:54:32.769]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:54:32.769]        // while-condition  =>  FALSE
[03:54:32.769]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:54:32.769]      </control>
[03:54:32.769]      // end if-block "canReadPins"
[03:54:32.769]    </control>
[03:54:32.769]    <control if="!canReadPins" while="" timeout="0" info="">
[03:54:32.769]      // if-block "!canReadPins"
[03:54:32.773]        // =>  FALSE
[03:54:32.773]      // skip if-block "!canReadPins"
[03:54:32.773]    </control>
[03:54:32.773]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:54:32.773]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:54:32.773]        // =>  TRUE
[03:54:32.773]      <block atomic="false" info="">
[03:54:32.773]        WriteAP(0x00, 0x190008);
[03:54:32.773]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:54:32.773]        WriteAP(0xF0, 0x01);
[03:54:32.778]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:54:32.778]      </block>
[03:54:32.778]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:54:32.778]    </control>
[03:54:32.778]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:54:32.779]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:54:32.779]        // =>  FALSE
[03:54:32.779]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:54:32.779]    </control>
[03:54:32.779]    <block atomic="false" info="">
[03:54:32.779]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:54:32.783]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:54:32.783]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:54:32.783]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:54:32.784]      __ap = 0; //lets make sure we reset the access point selection
[03:54:32.784]        // -> [__ap <= 0x00000000]
[03:54:32.784]    </block>
[03:54:32.784]  </sequence>
[03:54:32.784]  
[03:54:32.804]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:54:32.804]  
[03:54:32.804]  <debugvars>
[03:54:32.804]    // Pre-defined
[03:54:32.804]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:32.804]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:32.804]    __dp=0x00000000
[03:54:32.804]    __ap=0x00000000
[03:54:32.804]    __traceout=0x00000000      (Trace Disabled)
[03:54:32.804]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:32.804]    __FlashAddr=0x00000000
[03:54:32.804]    __FlashLen=0x00000000
[03:54:32.804]    __FlashArg=0x00000000
[03:54:32.804]    __FlashOp=0x00000000
[03:54:32.804]    __Result=0x00000000
[03:54:32.804]  </debugvars>
[03:54:32.804]  
[03:54:32.804]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:54:32.806]    <block atomic="false" info="">
[03:54:32.806]      __var deviceID = 0;
[03:54:32.806]        // -> [deviceID <= 0x00000000]
[03:54:32.806]      __var version = 0;
[03:54:32.806]        // -> [version <= 0x00000000]
[03:54:32.806]      __var partNum = 0;
[03:54:32.806]        // -> [partNum <= 0x00000000]
[03:54:32.806]      __var manuf = 0;
[03:54:32.806]        // -> [manuf <= 0x00000000]
[03:54:32.806]      __var isMSPM0G1X0X_G3X0X = 0;
[03:54:32.806]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:54:32.806]      __var isProduction = 0;
[03:54:32.806]        // -> [isProduction <= 0x00000000]
[03:54:32.806]      __var continueId = 0;
[03:54:32.806]        // -> [continueId <= 0x00000000]
[03:54:32.806]      deviceID =   Read32(0x41C40004);
[03:54:32.810]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:54:32.810]        // -> [deviceID <= 0x2BB8802F]
[03:54:32.810]      version = deviceID >> 28;
[03:54:32.810]        // -> [version <= 0x00000002]
[03:54:32.810]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:54:32.810]        // -> [partNum <= 0x0000BB88]
[03:54:32.810]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:54:32.810]        // -> [manuf <= 0x00000017]
[03:54:32.810]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:54:32.810]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:54:32.810]      isProduction = (version > 0);
[03:54:32.810]        // -> [isProduction <= 0x00000001]
[03:54:32.810]    </block>
[03:54:32.814]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:54:32.814]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:54:32.814]        // =>  FALSE
[03:54:32.814]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:54:32.814]    </control>
[03:54:32.814]    <control if="continueId == 4" while="" timeout="0" info="">
[03:54:32.814]      // if-block "continueId == 4"
[03:54:32.814]        // =>  FALSE
[03:54:32.815]      // skip if-block "continueId == 4"
[03:54:32.815]    </control>
[03:54:32.815]    <control if="!isProduction" while="" timeout="0" info="">
[03:54:32.815]      // if-block "!isProduction"
[03:54:32.815]        // =>  FALSE
[03:54:32.815]      // skip if-block "!isProduction"
[03:54:32.815]    </control>
[03:54:32.815]  </sequence>
[03:54:32.815]  
[03:55:40.874]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:55:40.874]  
[03:55:40.874]  <debugvars>
[03:55:40.874]    // Pre-defined
[03:55:40.874]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:40.874]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:55:40.874]    __dp=0x00000000
[03:55:40.874]    __ap=0x00000000
[03:55:40.874]    __traceout=0x00000000      (Trace Disabled)
[03:55:40.874]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:40.874]    __FlashAddr=0x00000000
[03:55:40.874]    __FlashLen=0x00000000
[03:55:40.874]    __FlashArg=0x00000000
[03:55:40.878]    __FlashOp=0x00000000
[03:55:40.878]    __Result=0x00000000
[03:55:40.878]  </debugvars>
[03:55:40.878]  
[03:55:40.878]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:55:40.878]    <block atomic="false" info="">
[03:55:40.878]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:55:40.878]        // -> [isSWJ <= 0x00000001]
[03:55:40.878]      __var hasDormant = __protocol & 0x00020000;
[03:55:40.878]        // -> [hasDormant <= 0x00000000]
[03:55:40.878]      __var protType   = __protocol & 0x0000FFFF;
[03:55:40.878]        // -> [protType <= 0x00000002]
[03:55:40.878]    </block>
[03:55:40.878]    <control if="protType == 1" while="" timeout="0" info="">
[03:55:40.878]      // if-block "protType == 1"
[03:55:40.878]        // =>  FALSE
[03:55:40.878]      // skip if-block "protType == 1"
[03:55:40.878]    </control>
[03:55:40.878]    <control if="protType == 2" while="" timeout="0" info="">
[03:55:40.878]      // if-block "protType == 2"
[03:55:40.878]        // =>  TRUE
[03:55:40.878]      <control if="isSWJ" while="" timeout="0" info="">
[03:55:40.878]        // if-block "isSWJ"
[03:55:40.878]          // =>  TRUE
[03:55:40.878]        <control if="hasDormant" while="" timeout="0" info="">
[03:55:40.878]          // if-block "hasDormant"
[03:55:40.878]            // =>  FALSE
[03:55:40.878]          // skip if-block "hasDormant"
[03:55:40.878]        </control>
[03:55:40.878]        <control if="!hasDormant" while="" timeout="0" info="">
[03:55:40.882]          // if-block "!hasDormant"
[03:55:40.882]            // =>  TRUE
[03:55:40.882]          <block atomic="false" info="">
[03:55:40.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:55:40.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:55:40.882]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:55:40.882]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:55:40.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:55:40.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:55:40.886]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:55:40.886]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:55:40.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:55:40.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:55:40.890]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:55:40.890]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:55:40.890]          </block>
[03:55:40.890]          // end if-block "!hasDormant"
[03:55:40.890]        </control>
[03:55:40.890]        // end if-block "isSWJ"
[03:55:40.890]      </control>
[03:55:40.890]      <control if="!isSWJ" while="" timeout="0" info="">
[03:55:40.890]        // if-block "!isSWJ"
[03:55:40.890]          // =>  FALSE
[03:55:40.890]        // skip if-block "!isSWJ"
[03:55:40.890]      </control>
[03:55:40.890]      <block atomic="false" info="">
[03:55:40.890]        ReadDP(0x0);
[03:55:40.890]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:55:40.894]      </block>
[03:55:40.894]      // end if-block "protType == 2"
[03:55:40.894]    </control>
[03:55:40.894]  </sequence>
[03:55:40.894]  
[03:55:40.894]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:55:40.894]  
[03:55:40.894]  <debugvars>
[03:55:40.894]    // Pre-defined
[03:55:40.894]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:40.894]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:55:40.894]    __dp=0x00000000
[03:55:40.894]    __ap=0x00000000
[03:55:40.894]    __traceout=0x00000000      (Trace Disabled)
[03:55:40.894]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:40.894]    __FlashAddr=0x00000000
[03:55:40.898]    __FlashLen=0x00000000
[03:55:40.898]    __FlashArg=0x00000000
[03:55:40.898]    __FlashOp=0x00000000
[03:55:40.898]    __Result=0x00000000
[03:55:40.898]  </debugvars>
[03:55:40.898]  
[03:55:40.898]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:55:40.898]    <block atomic="false" info="">
[03:55:40.898]      __var SW_DP_ABORT       = 0x0;
[03:55:40.898]        // -> [SW_DP_ABORT <= 0x00000000]
[03:55:40.898]      __var DP_CTRL_STAT      = 0x4;
[03:55:40.899]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:55:40.899]      __var DP_SELECT         = 0x8;
[03:55:40.899]        // -> [DP_SELECT <= 0x00000008]
[03:55:40.899]      __var powered_down      = 0;
[03:55:40.899]        // -> [powered_down <= 0x00000000]
[03:55:40.899]      WriteDP(DP_SELECT, 0x00000000);
[03:55:40.899]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:55:40.899]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:55:40.902]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:55:40.902]        // -> [powered_down <= 0x00000001]
[03:55:40.902]    </block>
[03:55:40.902]    <control if="powered_down" while="" timeout="0" info="">
[03:55:40.902]      // if-block "powered_down"
[03:55:40.902]        // =>  TRUE
[03:55:40.902]      <block atomic="false" info="">
[03:55:40.902]        Message(0, "Debug/System power-up request sent");
[03:55:40.902]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:55:40.906]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:55:40.906]      </block>
[03:55:40.906]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:55:40.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:55:40.910]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:55:40.910]        // while-condition  =>  FALSE
[03:55:40.910]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:55:40.911]      </control>
[03:55:40.911]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:55:40.911]        // if-block "(__protocol & 0xFFFF) == 1"
[03:55:40.911]          // =>  FALSE
[03:55:40.911]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:55:40.911]      </control>
[03:55:40.911]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:55:40.911]        // if-block "(__protocol & 0xFFFF) == 2"
[03:55:40.911]          // =>  TRUE
[03:55:40.911]        <block atomic="false" info="">
[03:55:40.911]          Message(0, "executing SWD power up");
[03:55:40.911]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:55:40.914]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:55:40.914]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:55:40.914]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:55:40.919]        </block>
[03:55:40.919]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:55:40.919]      </control>
[03:55:40.919]      // end if-block "powered_down"
[03:55:40.919]    </control>
[03:55:40.919]    <block atomic="false" info="">
[03:55:40.919]      __var DEBUG_PORT_VAL    = 0;
[03:55:40.919]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:55:40.919]      __var ACCESS_POINT_VAL  = 0;
[03:55:40.919]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:55:40.919]      __ap = 1; 
[03:55:40.919]        // -> [__ap <= 0x00000001]
[03:55:40.919]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:55:40.923]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:55:40.923]      __ap = 4;
[03:55:40.923]        // -> [__ap <= 0x00000004]
[03:55:40.923]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:55:40.927]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:55:40.927]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:55:40.927]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:55:40.927]    </block>
[03:55:40.927]    <block atomic="false" info="">
[03:55:40.927]      __var nReset = 0x80;
[03:55:40.927]        // -> [nReset <= 0x00000080]
[03:55:40.927]      __var canReadPins = 0;
[03:55:40.927]        // -> [canReadPins <= 0x00000000]
[03:55:40.927]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:55:40.935]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:55:40.935]        // -> [canReadPins <= 0x00000001]
[03:55:40.935]    </block>
[03:55:40.935]    <control if="" while="1" timeout="200" info="">
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.935]      // while-condition  =>  TRUE
[03:55:40.935]      // while "1"  (timeout="200")
[03:55:40.939]      // while-condition  =>  TRUE
[03:55:40.939]      // while "1"  (timeout="200")
[03:55:40.939]      // while  =>  TIMEOUT
[03:55:40.939]      // end while "1"
[03:55:40.939]    </control>
[03:55:40.939]    <control if="canReadPins" while="" timeout="0" info="">
[03:55:40.939]      // if-block "canReadPins"
[03:55:40.939]        // =>  TRUE
[03:55:40.939]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:55:40.939]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:55:40.939]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:55:40.939]        // while-condition  =>  FALSE
[03:55:40.939]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:55:40.939]      </control>
[03:55:40.939]      // end if-block "canReadPins"
[03:55:40.939]    </control>
[03:55:40.939]    <control if="!canReadPins" while="" timeout="0" info="">
[03:55:40.939]      // if-block "!canReadPins"
[03:55:40.939]        // =>  FALSE
[03:55:40.939]      // skip if-block "!canReadPins"
[03:55:40.943]    </control>
[03:55:40.943]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:55:40.943]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:55:40.943]        // =>  TRUE
[03:55:40.943]      <block atomic="false" info="">
[03:55:40.943]        WriteAP(0x00, 0x190008);
[03:55:40.943]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:55:40.943]        WriteAP(0xF0, 0x01);
[03:55:40.947]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:55:40.947]      </block>
[03:55:40.947]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:55:40.947]    </control>
[03:55:40.947]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:55:40.947]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:55:40.947]        // =>  FALSE
[03:55:40.947]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:55:40.947]    </control>
[03:55:40.947]    <block atomic="false" info="">
[03:55:40.947]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:55:40.955]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:55:40.955]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:55:40.955]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:55:40.955]      __ap = 0; //lets make sure we reset the access point selection
[03:55:40.955]        // -> [__ap <= 0x00000000]
[03:55:40.955]    </block>
[03:55:40.955]  </sequence>
[03:55:40.955]  
[03:55:40.979]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:55:40.979]  
[03:55:40.979]  <debugvars>
[03:55:40.979]    // Pre-defined
[03:55:40.979]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:40.979]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:55:40.979]    __dp=0x00000000
[03:55:40.979]    __ap=0x00000000
[03:55:40.983]    __traceout=0x00000000      (Trace Disabled)
[03:55:40.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:40.983]    __FlashAddr=0x00000000
[03:55:40.983]    __FlashLen=0x00000000
[03:55:40.983]    __FlashArg=0x00000000
[03:55:40.983]    __FlashOp=0x00000000
[03:55:40.983]    __Result=0x00000000
[03:55:40.983]  </debugvars>
[03:55:40.983]  
[03:55:40.983]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:55:40.983]    <block atomic="false" info="">
[03:55:40.983]      __var deviceID = 0;
[03:55:40.983]        // -> [deviceID <= 0x00000000]
[03:55:40.983]      __var version = 0;
[03:55:40.983]        // -> [version <= 0x00000000]
[03:55:40.983]      __var partNum = 0;
[03:55:40.983]        // -> [partNum <= 0x00000000]
[03:55:40.983]      __var manuf = 0;
[03:55:40.983]        // -> [manuf <= 0x00000000]
[03:55:40.983]      __var isMSPM0G1X0X_G3X0X = 0;
[03:55:40.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:55:40.983]      __var isProduction = 0;
[03:55:40.983]        // -> [isProduction <= 0x00000000]
[03:55:40.983]      __var continueId = 0;
[03:55:40.983]        // -> [continueId <= 0x00000000]
[03:55:40.983]      deviceID =   Read32(0x41C40004);
[03:55:40.991]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:55:40.991]        // -> [deviceID <= 0x2BB8802F]
[03:55:40.991]      version = deviceID >> 28;
[03:55:40.991]        // -> [version <= 0x00000002]
[03:55:40.995]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:55:40.995]        // -> [partNum <= 0x0000BB88]
[03:55:40.995]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:55:40.995]        // -> [manuf <= 0x00000017]
[03:55:40.995]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:55:40.995]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:55:40.995]      isProduction = (version > 0);
[03:55:40.995]        // -> [isProduction <= 0x00000001]
[03:55:40.995]    </block>
[03:55:40.995]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:55:40.995]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:55:40.995]        // =>  FALSE
[03:55:40.995]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:55:40.995]    </control>
[03:55:40.995]    <control if="continueId == 4" while="" timeout="0" info="">
[03:55:40.995]      // if-block "continueId == 4"
[03:55:40.995]        // =>  FALSE
[03:55:40.995]      // skip if-block "continueId == 4"
[03:55:40.995]    </control>
[03:55:40.995]    <control if="!isProduction" while="" timeout="0" info="">
[03:55:40.995]      // if-block "!isProduction"
[03:55:40.995]        // =>  FALSE
[03:55:40.995]      // skip if-block "!isProduction"
[03:55:40.995]    </control>
[03:55:40.995]  </sequence>
[03:55:40.995]  
[03:56:48.713]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:56:48.713]  
[03:56:48.723]  <debugvars>
[03:56:48.723]    // Pre-defined
[03:56:48.723]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:48.723]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:56:48.723]    __dp=0x00000000
[03:56:48.723]    __ap=0x00000000
[03:56:48.723]    __traceout=0x00000000      (Trace Disabled)
[03:56:48.723]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:48.723]    __FlashAddr=0x00000000
[03:56:48.723]    __FlashLen=0x00000000
[03:56:48.724]    __FlashArg=0x00000000
[03:56:48.724]    __FlashOp=0x00000000
[03:56:48.724]    __Result=0x00000000
[03:56:48.724]  </debugvars>
[03:56:48.724]  
[03:56:48.724]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:56:48.724]    <block atomic="false" info="">
[03:56:48.724]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:56:48.724]        // -> [isSWJ <= 0x00000001]
[03:56:48.725]      __var hasDormant = __protocol & 0x00020000;
[03:56:48.725]        // -> [hasDormant <= 0x00000000]
[03:56:48.725]      __var protType   = __protocol & 0x0000FFFF;
[03:56:48.725]        // -> [protType <= 0x00000002]
[03:56:48.725]    </block>
[03:56:48.725]    <control if="protType == 1" while="" timeout="0" info="">
[03:56:48.725]      // if-block "protType == 1"
[03:56:48.725]        // =>  FALSE
[03:56:48.725]      // skip if-block "protType == 1"
[03:56:48.725]    </control>
[03:56:48.725]    <control if="protType == 2" while="" timeout="0" info="">
[03:56:48.725]      // if-block "protType == 2"
[03:56:48.725]        // =>  TRUE
[03:56:48.725]      <control if="isSWJ" while="" timeout="0" info="">
[03:56:48.725]        // if-block "isSWJ"
[03:56:48.725]          // =>  TRUE
[03:56:48.725]        <control if="hasDormant" while="" timeout="0" info="">
[03:56:48.725]          // if-block "hasDormant"
[03:56:48.725]            // =>  FALSE
[03:56:48.725]          // skip if-block "hasDormant"
[03:56:48.725]        </control>
[03:56:48.725]        <control if="!hasDormant" while="" timeout="0" info="">
[03:56:48.725]          // if-block "!hasDormant"
[03:56:48.725]            // =>  TRUE
[03:56:48.725]          <block atomic="false" info="">
[03:56:48.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:56:48.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:56:48.728]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:56:48.728]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:56:48.728]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:56:48.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:56:48.732]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:56:48.732]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:56:48.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:56:48.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:56:48.732]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:56:48.736]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:56:48.736]          </block>
[03:56:48.736]          // end if-block "!hasDormant"
[03:56:48.736]        </control>
[03:56:48.736]        // end if-block "isSWJ"
[03:56:48.736]      </control>
[03:56:48.736]      <control if="!isSWJ" while="" timeout="0" info="">
[03:56:48.736]        // if-block "!isSWJ"
[03:56:48.736]          // =>  FALSE
[03:56:48.736]        // skip if-block "!isSWJ"
[03:56:48.736]      </control>
[03:56:48.736]      <block atomic="false" info="">
[03:56:48.736]        ReadDP(0x0);
[03:56:48.736]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:56:48.736]      </block>
[03:56:48.736]      // end if-block "protType == 2"
[03:56:48.736]    </control>
[03:56:48.736]  </sequence>
[03:56:48.740]  
[03:56:48.744]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:56:48.744]  
[03:56:48.744]  <debugvars>
[03:56:48.744]    // Pre-defined
[03:56:48.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:48.744]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:56:48.744]    __dp=0x00000000
[03:56:48.744]    __ap=0x00000000
[03:56:48.744]    __traceout=0x00000000      (Trace Disabled)
[03:56:48.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:48.744]    __FlashAddr=0x00000000
[03:56:48.744]    __FlashLen=0x00000000
[03:56:48.744]    __FlashArg=0x00000000
[03:56:48.744]    __FlashOp=0x00000000
[03:56:48.744]    __Result=0x00000000
[03:56:48.744]  </debugvars>
[03:56:48.744]  
[03:56:48.744]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:56:48.744]    <block atomic="false" info="">
[03:56:48.744]      __var SW_DP_ABORT       = 0x0;
[03:56:48.744]        // -> [SW_DP_ABORT <= 0x00000000]
[03:56:48.744]      __var DP_CTRL_STAT      = 0x4;
[03:56:48.744]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:56:48.744]      __var DP_SELECT         = 0x8;
[03:56:48.744]        // -> [DP_SELECT <= 0x00000008]
[03:56:48.744]      __var powered_down      = 0;
[03:56:48.744]        // -> [powered_down <= 0x00000000]
[03:56:48.744]      WriteDP(DP_SELECT, 0x00000000);
[03:56:48.748]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:56:48.748]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:56:48.748]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:56:48.748]        // -> [powered_down <= 0x00000001]
[03:56:48.748]    </block>
[03:56:48.748]    <control if="powered_down" while="" timeout="0" info="">
[03:56:48.748]      // if-block "powered_down"
[03:56:48.748]        // =>  TRUE
[03:56:48.752]      <block atomic="false" info="">
[03:56:48.752]        Message(0, "Debug/System power-up request sent");
[03:56:48.752]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:56:48.752]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:56:48.756]      </block>
[03:56:48.756]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:56:48.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:56:48.756]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:56:48.756]        // while-condition  =>  FALSE
[03:56:48.756]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:56:48.756]      </control>
[03:56:48.756]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:56:48.756]        // if-block "(__protocol & 0xFFFF) == 1"
[03:56:48.756]          // =>  FALSE
[03:56:48.756]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:56:48.756]      </control>
[03:56:48.756]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:56:48.756]        // if-block "(__protocol & 0xFFFF) == 2"
[03:56:48.756]          // =>  TRUE
[03:56:48.756]        <block atomic="false" info="">
[03:56:48.756]          Message(0, "executing SWD power up");
[03:56:48.762]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:56:48.764]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:56:48.764]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:56:48.764]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:56:48.764]        </block>
[03:56:48.764]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:56:48.764]      </control>
[03:56:48.764]      // end if-block "powered_down"
[03:56:48.764]    </control>
[03:56:48.764]    <block atomic="false" info="">
[03:56:48.764]      __var DEBUG_PORT_VAL    = 0;
[03:56:48.764]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:56:48.764]      __var ACCESS_POINT_VAL  = 0;
[03:56:48.764]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:56:48.764]      __ap = 1; 
[03:56:48.764]        // -> [__ap <= 0x00000001]
[03:56:48.764]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:56:48.768]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:56:48.768]      __ap = 4;
[03:56:48.768]        // -> [__ap <= 0x00000004]
[03:56:48.768]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:56:48.772]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:56:48.772]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:56:48.772]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:56:48.772]    </block>
[03:56:48.772]    <block atomic="false" info="">
[03:56:48.772]      __var nReset = 0x80;
[03:56:48.772]        // -> [nReset <= 0x00000080]
[03:56:48.772]      __var canReadPins = 0;
[03:56:48.772]        // -> [canReadPins <= 0x00000000]
[03:56:48.772]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:56:48.776]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:56:48.776]        // -> [canReadPins <= 0x00000001]
[03:56:48.776]    </block>
[03:56:48.776]    <control if="" while="1" timeout="200" info="">
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.776]      // while-condition  =>  TRUE
[03:56:48.776]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.780]      // while-condition  =>  TRUE
[03:56:48.780]      // while "1"  (timeout="200")
[03:56:48.784]      // while-condition  =>  TRUE
[03:56:48.784]      // while "1"  (timeout="200")
[03:56:48.784]      // while  =>  TIMEOUT
[03:56:48.784]      // end while "1"
[03:56:48.784]    </control>
[03:56:48.784]    <control if="canReadPins" while="" timeout="0" info="">
[03:56:48.784]      // if-block "canReadPins"
[03:56:48.784]        // =>  TRUE
[03:56:48.784]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:56:48.784]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:56:48.786]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:56:48.786]        // while-condition  =>  FALSE
[03:56:48.786]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:56:48.786]      </control>
[03:56:48.786]      // end if-block "canReadPins"
[03:56:48.786]    </control>
[03:56:48.786]    <control if="!canReadPins" while="" timeout="0" info="">
[03:56:48.786]      // if-block "!canReadPins"
[03:56:48.786]        // =>  FALSE
[03:56:48.786]      // skip if-block "!canReadPins"
[03:56:48.786]    </control>
[03:56:48.786]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:56:48.786]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:56:48.786]        // =>  TRUE
[03:56:48.786]      <block atomic="false" info="">
[03:56:48.786]        WriteAP(0x00, 0x190008);
[03:56:48.789]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:56:48.789]        WriteAP(0xF0, 0x01);
[03:56:48.793]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:56:48.793]      </block>
[03:56:48.793]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:56:48.793]    </control>
[03:56:48.793]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:56:48.793]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:56:48.793]        // =>  FALSE
[03:56:48.793]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:56:48.793]    </control>
[03:56:48.793]    <block atomic="false" info="">
[03:56:48.793]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:56:48.797]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:56:48.797]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:56:48.797]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:56:48.797]      __ap = 0; //lets make sure we reset the access point selection
[03:56:48.801]        // -> [__ap <= 0x00000000]
[03:56:48.801]    </block>
[03:56:48.801]  </sequence>
[03:56:48.801]  
[03:56:48.825]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:56:48.825]  
[03:56:48.825]  <debugvars>
[03:56:48.829]    // Pre-defined
[03:56:48.829]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:48.829]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:56:48.829]    __dp=0x00000000
[03:56:48.829]    __ap=0x00000000
[03:56:48.829]    __traceout=0x00000000      (Trace Disabled)
[03:56:48.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:48.829]    __FlashAddr=0x00000000
[03:56:48.829]    __FlashLen=0x00000000
[03:56:48.829]    __FlashArg=0x00000000
[03:56:48.829]    __FlashOp=0x00000000
[03:56:48.829]    __Result=0x00000000
[03:56:48.829]  </debugvars>
[03:56:48.829]  
[03:56:48.829]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:56:48.829]    <block atomic="false" info="">
[03:56:48.829]      __var deviceID = 0;
[03:56:48.829]        // -> [deviceID <= 0x00000000]
[03:56:48.829]      __var version = 0;
[03:56:48.829]        // -> [version <= 0x00000000]
[03:56:48.829]      __var partNum = 0;
[03:56:48.829]        // -> [partNum <= 0x00000000]
[03:56:48.829]      __var manuf = 0;
[03:56:48.829]        // -> [manuf <= 0x00000000]
[03:56:48.829]      __var isMSPM0G1X0X_G3X0X = 0;
[03:56:48.829]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:56:48.829]      __var isProduction = 0;
[03:56:48.829]        // -> [isProduction <= 0x00000000]
[03:56:48.829]      __var continueId = 0;
[03:56:48.829]        // -> [continueId <= 0x00000000]
[03:56:48.829]      deviceID =   Read32(0x41C40004);
[03:56:48.837]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:56:48.837]        // -> [deviceID <= 0x2BB8802F]
[03:56:48.837]      version = deviceID >> 28;
[03:56:48.837]        // -> [version <= 0x00000002]
[03:56:48.837]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:56:48.837]        // -> [partNum <= 0x0000BB88]
[03:56:48.837]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:56:48.837]        // -> [manuf <= 0x00000017]
[03:56:48.837]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:56:48.837]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:56:48.837]      isProduction = (version > 0);
[03:56:48.837]        // -> [isProduction <= 0x00000001]
[03:56:48.837]    </block>
[03:56:48.837]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:56:48.837]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:56:48.837]        // =>  FALSE
[03:56:48.837]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:56:48.837]    </control>
[03:56:48.837]    <control if="continueId == 4" while="" timeout="0" info="">
[03:56:48.837]      // if-block "continueId == 4"
[03:56:48.837]        // =>  FALSE
[03:56:48.837]      // skip if-block "continueId == 4"
[03:56:48.837]    </control>
[03:56:48.837]    <control if="!isProduction" while="" timeout="0" info="">
[03:56:48.837]      // if-block "!isProduction"
[03:56:48.837]        // =>  FALSE
[03:56:48.837]      // skip if-block "!isProduction"
[03:56:48.837]    </control>
[03:56:48.837]  </sequence>
[03:56:48.837]  
[03:57:14.120]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:57:14.120]  
[03:57:14.128]  <debugvars>
[03:57:14.128]    // Pre-defined
[03:57:14.128]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:57:14.128]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:57:14.128]    __dp=0x00000000
[03:57:14.128]    __ap=0x00000000
[03:57:14.128]    __traceout=0x00000000      (Trace Disabled)
[03:57:14.128]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:57:14.128]    __FlashAddr=0x00000000
[03:57:14.128]    __FlashLen=0x00000000
[03:57:14.128]    __FlashArg=0x00000000
[03:57:14.128]    __FlashOp=0x00000000
[03:57:14.128]    __Result=0x00000000
[03:57:14.128]  </debugvars>
[03:57:14.128]  
[03:57:14.128]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:57:14.128]    <block atomic="false" info="">
[03:57:14.128]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:57:14.128]        // -> [isSWJ <= 0x00000001]
[03:57:14.128]      __var hasDormant = __protocol & 0x00020000;
[03:57:14.128]        // -> [hasDormant <= 0x00000000]
[03:57:14.131]      __var protType   = __protocol & 0x0000FFFF;
[03:57:14.131]        // -> [protType <= 0x00000002]
[03:57:14.131]    </block>
[03:57:14.131]    <control if="protType == 1" while="" timeout="0" info="">
[03:57:14.131]      // if-block "protType == 1"
[03:57:14.131]        // =>  FALSE
[03:57:14.131]      // skip if-block "protType == 1"
[03:57:14.131]    </control>
[03:57:14.131]    <control if="protType == 2" while="" timeout="0" info="">
[03:57:14.131]      // if-block "protType == 2"
[03:57:14.131]        // =>  TRUE
[03:57:14.131]      <control if="isSWJ" while="" timeout="0" info="">
[03:57:14.131]        // if-block "isSWJ"
[03:57:14.131]          // =>  TRUE
[03:57:14.131]        <control if="hasDormant" while="" timeout="0" info="">
[03:57:14.131]          // if-block "hasDormant"
[03:57:14.131]            // =>  FALSE
[03:57:14.131]          // skip if-block "hasDormant"
[03:57:14.131]        </control>
[03:57:14.131]        <control if="!hasDormant" while="" timeout="0" info="">
[03:57:14.131]          // if-block "!hasDormant"
[03:57:14.131]            // =>  TRUE
[03:57:14.131]          <block atomic="false" info="">
[03:57:14.131]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:57:14.135]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:57:14.135]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:57:14.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:57:14.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:57:14.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:57:14.141]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:57:14.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:57:14.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:57:14.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:57:14.143]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:57:14.145]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:57:14.145]          </block>
[03:57:14.145]          // end if-block "!hasDormant"
[03:57:14.145]        </control>
[03:57:14.145]        // end if-block "isSWJ"
[03:57:14.145]      </control>
[03:57:14.145]      <control if="!isSWJ" while="" timeout="0" info="">
[03:57:14.145]        // if-block "!isSWJ"
[03:57:14.145]          // =>  FALSE
[03:57:14.145]        // skip if-block "!isSWJ"
[03:57:14.145]      </control>
[03:57:14.145]      <block atomic="false" info="">
[03:57:14.145]        ReadDP(0x0);
[03:57:14.147]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:57:14.147]      </block>
[03:57:14.147]      // end if-block "protType == 2"
[03:57:14.147]    </control>
[03:57:14.147]  </sequence>
[03:57:14.147]  
[03:57:14.153]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:57:14.153]  
[03:57:14.153]  <debugvars>
[03:57:14.153]    // Pre-defined
[03:57:14.153]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:57:14.153]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:57:14.153]    __dp=0x00000000
[03:57:14.153]    __ap=0x00000000
[03:57:14.153]    __traceout=0x00000000      (Trace Disabled)
[03:57:14.153]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:57:14.154]    __FlashAddr=0x00000000
[03:57:14.154]    __FlashLen=0x00000000
[03:57:14.154]    __FlashArg=0x00000000
[03:57:14.154]    __FlashOp=0x00000000
[03:57:14.154]    __Result=0x00000000
[03:57:14.154]  </debugvars>
[03:57:14.154]  
[03:57:14.154]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:57:14.154]    <block atomic="false" info="">
[03:57:14.154]      __var SW_DP_ABORT       = 0x0;
[03:57:14.154]        // -> [SW_DP_ABORT <= 0x00000000]
[03:57:14.154]      __var DP_CTRL_STAT      = 0x4;
[03:57:14.154]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:57:14.154]      __var DP_SELECT         = 0x8;
[03:57:14.155]        // -> [DP_SELECT <= 0x00000008]
[03:57:14.155]      __var powered_down      = 0;
[03:57:14.155]        // -> [powered_down <= 0x00000000]
[03:57:14.155]      WriteDP(DP_SELECT, 0x00000000);
[03:57:14.158]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:57:14.158]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:57:14.159]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:57:14.159]        // -> [powered_down <= 0x00000001]
[03:57:14.159]    </block>
[03:57:14.159]    <control if="powered_down" while="" timeout="0" info="">
[03:57:14.159]      // if-block "powered_down"
[03:57:14.159]        // =>  TRUE
[03:57:14.159]      <block atomic="false" info="">
[03:57:14.159]        Message(0, "Debug/System power-up request sent");
[03:57:14.161]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:57:14.165]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:57:14.165]      </block>
[03:57:14.165]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:57:14.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:57:14.166]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:57:14.166]        // while-condition  =>  FALSE
[03:57:14.166]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:57:14.166]      </control>
[03:57:14.167]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:57:14.168]        // if-block "(__protocol & 0xFFFF) == 1"
[03:57:14.168]          // =>  FALSE
[03:57:14.168]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:57:14.168]      </control>
[03:57:14.168]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:57:14.168]        // if-block "(__protocol & 0xFFFF) == 2"
[03:57:14.168]          // =>  TRUE
[03:57:14.168]        <block atomic="false" info="">
[03:57:14.168]          Message(0, "executing SWD power up");
[03:57:14.169]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:57:14.172]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:57:14.172]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:57:14.172]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:57:14.172]        </block>
[03:57:14.172]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:57:14.172]      </control>
[03:57:14.172]      // end if-block "powered_down"
[03:57:14.172]    </control>
[03:57:14.172]    <block atomic="false" info="">
[03:57:14.172]      __var DEBUG_PORT_VAL    = 0;
[03:57:14.172]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:57:14.172]      __var ACCESS_POINT_VAL  = 0;
[03:57:14.172]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:57:14.172]      __ap = 1; 
[03:57:14.172]        // -> [__ap <= 0x00000001]
[03:57:14.172]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:57:14.177]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:57:14.177]      __ap = 4;
[03:57:14.177]        // -> [__ap <= 0x00000004]
[03:57:14.177]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:57:14.180]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:57:14.180]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:57:14.180]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:57:14.184]    </block>
[03:57:14.184]    <block atomic="false" info="">
[03:57:14.184]      __var nReset = 0x80;
[03:57:14.184]        // -> [nReset <= 0x00000080]
[03:57:14.184]      __var canReadPins = 0;
[03:57:14.184]        // -> [canReadPins <= 0x00000000]
[03:57:14.184]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:57:14.184]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:57:14.184]        // -> [canReadPins <= 0x00000001]
[03:57:14.184]    </block>
[03:57:14.184]    <control if="" while="1" timeout="200" info="">
[03:57:14.184]      // while "1"  (timeout="200")
[03:57:14.184]      // while-condition  =>  TRUE
[03:57:14.184]      // while "1"  (timeout="200")
[03:57:14.184]      // while-condition  =>  TRUE
[03:57:14.184]      // while "1"  (timeout="200")
[03:57:14.184]      // while-condition  =>  TRUE
[03:57:14.188]      // while "1"  (timeout="200")
[03:57:14.188]      // while-condition  =>  TRUE
[03:57:14.188]      // while "1"  (timeout="200")
[03:57:14.188]      // while  =>  TIMEOUT
[03:57:14.188]      // end while "1"
[03:57:14.188]    </control>
[03:57:14.188]    <control if="canReadPins" while="" timeout="0" info="">
[03:57:14.188]      // if-block "canReadPins"
[03:57:14.189]        // =>  TRUE
[03:57:14.189]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:57:14.189]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:57:14.189]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:57:14.189]        // while-condition  =>  FALSE
[03:57:14.189]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:57:14.189]      </control>
[03:57:14.189]      // end if-block "canReadPins"
[03:57:14.189]    </control>
[03:57:14.189]    <control if="!canReadPins" while="" timeout="0" info="">
[03:57:14.189]      // if-block "!canReadPins"
[03:57:14.189]        // =>  FALSE
[03:57:14.189]      // skip if-block "!canReadPins"
[03:57:14.189]    </control>
[03:57:14.192]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:57:14.192]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:57:14.192]        // =>  TRUE
[03:57:14.192]      <block atomic="false" info="">
[03:57:14.192]        WriteAP(0x00, 0x190008);
[03:57:14.196]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:57:14.196]        WriteAP(0xF0, 0x01);
[03:57:14.204]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:57:14.204]      </block>
[03:57:14.204]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:57:14.204]    </control>
[03:57:14.204]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:57:14.204]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:57:14.204]        // =>  FALSE
[03:57:14.204]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:57:14.204]    </control>
[03:57:14.204]    <block atomic="false" info="">
[03:57:14.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:57:14.208]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:57:14.208]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:57:14.208]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:57:14.213]      __ap = 0; //lets make sure we reset the access point selection
[03:57:14.213]        // -> [__ap <= 0x00000000]
[03:57:14.213]    </block>
[03:57:14.213]  </sequence>
[03:57:14.213]  
[03:57:14.233]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:57:14.233]  
[03:57:14.233]  <debugvars>
[03:57:14.233]    // Pre-defined
[03:57:14.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:57:14.233]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:57:14.237]    __dp=0x00000000
[03:57:14.237]    __ap=0x00000000
[03:57:14.237]    __traceout=0x00000000      (Trace Disabled)
[03:57:14.237]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:57:14.237]    __FlashAddr=0x00000000
[03:57:14.237]    __FlashLen=0x00000000
[03:57:14.237]    __FlashArg=0x00000000
[03:57:14.237]    __FlashOp=0x00000000
[03:57:14.237]    __Result=0x00000000
[03:57:14.237]  </debugvars>
[03:57:14.237]  
[03:57:14.237]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:57:14.237]    <block atomic="false" info="">
[03:57:14.237]      __var deviceID = 0;
[03:57:14.237]        // -> [deviceID <= 0x00000000]
[03:57:14.237]      __var version = 0;
[03:57:14.237]        // -> [version <= 0x00000000]
[03:57:14.237]      __var partNum = 0;
[03:57:14.237]        // -> [partNum <= 0x00000000]
[03:57:14.237]      __var manuf = 0;
[03:57:14.237]        // -> [manuf <= 0x00000000]
[03:57:14.237]      __var isMSPM0G1X0X_G3X0X = 0;
[03:57:14.237]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:57:14.237]      __var isProduction = 0;
[03:57:14.237]        // -> [isProduction <= 0x00000000]
[03:57:14.237]      __var continueId = 0;
[03:57:14.237]        // -> [continueId <= 0x00000000]
[03:57:14.237]      deviceID =   Read32(0x41C40004);
[03:57:14.241]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:57:14.241]        // -> [deviceID <= 0x2BB8802F]
[03:57:14.241]      version = deviceID >> 28;
[03:57:14.241]        // -> [version <= 0x00000002]
[03:57:14.245]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:57:14.245]        // -> [partNum <= 0x0000BB88]
[03:57:14.245]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:57:14.245]        // -> [manuf <= 0x00000017]
[03:57:14.245]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:57:14.245]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:57:14.245]      isProduction = (version > 0);
[03:57:14.245]        // -> [isProduction <= 0x00000001]
[03:57:14.245]    </block>
[03:57:14.245]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:57:14.245]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:57:14.245]        // =>  FALSE
[03:57:14.245]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:57:14.245]    </control>
[03:57:14.245]    <control if="continueId == 4" while="" timeout="0" info="">
[03:57:14.245]      // if-block "continueId == 4"
[03:57:14.245]        // =>  FALSE
[03:57:14.245]      // skip if-block "continueId == 4"
[03:57:14.245]    </control>
[03:57:14.245]    <control if="!isProduction" while="" timeout="0" info="">
[03:57:14.245]      // if-block "!isProduction"
[03:57:14.245]        // =>  FALSE
[03:57:14.245]      // skip if-block "!isProduction"
[03:57:14.245]    </control>
[03:57:14.248]  </sequence>
[03:57:14.248]  
[03:57:39.884]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:57:39.884]  
[03:57:39.895]  <debugvars>
[03:57:39.895]    // Pre-defined
[03:57:39.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:57:39.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:57:39.895]    __dp=0x00000000
[03:57:39.895]    __ap=0x00000000
[03:57:39.895]    __traceout=0x00000000      (Trace Disabled)
[03:57:39.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:57:39.895]    __FlashAddr=0x00000000
[03:57:39.896]    __FlashLen=0x00000000
[03:57:39.896]    __FlashArg=0x00000000
[03:57:39.896]    __FlashOp=0x00000000
[03:57:39.896]    __Result=0x00000000
[03:57:39.896]  </debugvars>
[03:57:39.896]  
[03:57:39.896]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:57:39.896]    <block atomic="false" info="">
[03:57:39.896]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:57:39.896]        // -> [isSWJ <= 0x00000001]
[03:57:39.897]      __var hasDormant = __protocol & 0x00020000;
[03:57:39.897]        // -> [hasDormant <= 0x00000000]
[03:57:39.897]      __var protType   = __protocol & 0x0000FFFF;
[03:57:39.897]        // -> [protType <= 0x00000002]
[03:57:39.897]    </block>
[03:57:39.897]    <control if="protType == 1" while="" timeout="0" info="">
[03:57:39.897]      // if-block "protType == 1"
[03:57:39.897]        // =>  FALSE
[03:57:39.897]      // skip if-block "protType == 1"
[03:57:39.898]    </control>
[03:57:39.898]    <control if="protType == 2" while="" timeout="0" info="">
[03:57:39.898]      // if-block "protType == 2"
[03:57:39.898]        // =>  TRUE
[03:57:39.898]      <control if="isSWJ" while="" timeout="0" info="">
[03:57:39.898]        // if-block "isSWJ"
[03:57:39.898]          // =>  TRUE
[03:57:39.898]        <control if="hasDormant" while="" timeout="0" info="">
[03:57:39.898]          // if-block "hasDormant"
[03:57:39.898]            // =>  FALSE
[03:57:39.898]          // skip if-block "hasDormant"
[03:57:39.898]        </control>
[03:57:39.898]        <control if="!hasDormant" while="" timeout="0" info="">
[03:57:39.898]          // if-block "!hasDormant"
[03:57:39.898]            // =>  TRUE
[03:57:39.898]          <block atomic="false" info="">
[03:57:39.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:57:39.900]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:57:39.901]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:57:39.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:57:39.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:57:39.902]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:57:39.902]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:57:39.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:57:39.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:57:39.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:57:39.909]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:57:39.909]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:57:39.909]          </block>
[03:57:39.909]          // end if-block "!hasDormant"
[03:57:39.909]        </control>
[03:57:39.909]        // end if-block "isSWJ"
[03:57:39.909]      </control>
[03:57:39.909]      <control if="!isSWJ" while="" timeout="0" info="">
[03:57:39.909]        // if-block "!isSWJ"
[03:57:39.909]          // =>  FALSE
[03:57:39.909]        // skip if-block "!isSWJ"
[03:57:39.909]      </control>
[03:57:39.909]      <block atomic="false" info="">
[03:57:39.909]        ReadDP(0x0);
[03:57:39.913]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:57:39.913]      </block>
[03:57:39.913]      // end if-block "protType == 2"
[03:57:39.913]    </control>
[03:57:39.913]  </sequence>
[03:57:39.913]  
[03:57:39.913]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:57:39.913]  
[03:57:39.913]  <debugvars>
[03:57:39.913]    // Pre-defined
[03:57:39.913]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:57:39.913]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:57:39.913]    __dp=0x00000000
[03:57:39.917]    __ap=0x00000000
[03:57:39.917]    __traceout=0x00000000      (Trace Disabled)
[03:57:39.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:57:39.917]    __FlashAddr=0x00000000
[03:57:39.917]    __FlashLen=0x00000000
[03:57:39.917]    __FlashArg=0x00000000
[03:57:39.917]    __FlashOp=0x00000000
[03:57:39.917]    __Result=0x00000000
[03:57:39.917]  </debugvars>
[03:57:39.917]  
[03:57:39.917]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:57:39.917]    <block atomic="false" info="">
[03:57:39.917]      __var SW_DP_ABORT       = 0x0;
[03:57:39.917]        // -> [SW_DP_ABORT <= 0x00000000]
[03:57:39.917]      __var DP_CTRL_STAT      = 0x4;
[03:57:39.917]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:57:39.917]      __var DP_SELECT         = 0x8;
[03:57:39.917]        // -> [DP_SELECT <= 0x00000008]
[03:57:39.917]      __var powered_down      = 0;
[03:57:39.917]        // -> [powered_down <= 0x00000000]
[03:57:39.917]      WriteDP(DP_SELECT, 0x00000000);
[03:57:39.921]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:57:39.921]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:57:39.921]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:57:39.921]        // -> [powered_down <= 0x00000001]
[03:57:39.921]    </block>
[03:57:39.921]    <control if="powered_down" while="" timeout="0" info="">
[03:57:39.925]      // if-block "powered_down"
[03:57:39.926]        // =>  TRUE
[03:57:39.926]      <block atomic="false" info="">
[03:57:39.926]        Message(0, "Debug/System power-up request sent");
[03:57:39.926]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:57:39.929]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:57:39.929]      </block>
[03:57:39.929]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:57:39.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:57:39.929]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:57:39.929]        // while-condition  =>  FALSE
[03:57:39.929]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:57:39.929]      </control>
[03:57:39.929]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:57:39.929]        // if-block "(__protocol & 0xFFFF) == 1"
[03:57:39.929]          // =>  FALSE
[03:57:39.929]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:57:39.929]      </control>
[03:57:39.929]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:57:39.929]        // if-block "(__protocol & 0xFFFF) == 2"
[03:57:39.929]          // =>  TRUE
[03:57:39.929]        <block atomic="false" info="">
[03:57:39.929]          Message(0, "executing SWD power up");
[03:57:39.933]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:57:39.933]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:57:39.933]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:57:39.937]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:57:39.937]        </block>
[03:57:39.937]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:57:39.937]      </control>
[03:57:39.937]      // end if-block "powered_down"
[03:57:39.937]    </control>
[03:57:39.937]    <block atomic="false" info="">
[03:57:39.937]      __var DEBUG_PORT_VAL    = 0;
[03:57:39.937]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:57:39.937]      __var ACCESS_POINT_VAL  = 0;
[03:57:39.937]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:57:39.937]      __ap = 1; 
[03:57:39.937]        // -> [__ap <= 0x00000001]
[03:57:39.937]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:57:39.941]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:57:39.941]      __ap = 4;
[03:57:39.941]        // -> [__ap <= 0x00000004]
[03:57:39.941]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:57:39.945]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:57:39.945]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:57:39.945]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:57:39.945]    </block>
[03:57:39.949]    <block atomic="false" info="">
[03:57:39.949]      __var nReset = 0x80;
[03:57:39.949]        // -> [nReset <= 0x00000080]
[03:57:39.949]      __var canReadPins = 0;
[03:57:39.949]        // -> [canReadPins <= 0x00000000]
[03:57:39.949]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:57:39.949]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:57:39.949]        // -> [canReadPins <= 0x00000001]
[03:57:39.949]    </block>
[03:57:39.949]    <control if="" while="1" timeout="200" info="">
[03:57:39.949]      // while "1"  (timeout="200")
[03:57:39.949]      // while-condition  =>  TRUE
[03:57:39.949]      // while "1"  (timeout="200")
[03:57:39.949]      // while-condition  =>  TRUE
[03:57:39.949]      // while "1"  (timeout="200")
[03:57:39.949]      // while-condition  =>  TRUE
[03:57:39.949]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.953]      // while-condition  =>  TRUE
[03:57:39.953]      // while "1"  (timeout="200")
[03:57:39.957]      // while-condition  =>  TRUE
[03:57:39.957]      // while "1"  (timeout="200")
[03:57:39.957]      // while  =>  TIMEOUT
[03:57:39.957]      // end while "1"
[03:57:39.957]    </control>
[03:57:39.957]    <control if="canReadPins" while="" timeout="0" info="">
[03:57:39.957]      // if-block "canReadPins"
[03:57:39.957]        // =>  TRUE
[03:57:39.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:57:39.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:57:39.957]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:57:39.957]        // while-condition  =>  FALSE
[03:57:39.957]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:57:39.957]      </control>
[03:57:39.957]      // end if-block "canReadPins"
[03:57:39.957]    </control>
[03:57:39.957]    <control if="!canReadPins" while="" timeout="0" info="">
[03:57:39.957]      // if-block "!canReadPins"
[03:57:39.961]        // =>  FALSE
[03:57:39.961]      // skip if-block "!canReadPins"
[03:57:39.961]    </control>
[03:57:39.961]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:57:39.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:57:39.961]        // =>  TRUE
[03:57:39.961]      <block atomic="false" info="">
[03:57:39.961]        WriteAP(0x00, 0x190008);
[03:57:39.961]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:57:39.961]        WriteAP(0xF0, 0x01);
[03:57:39.965]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:57:39.965]      </block>
[03:57:39.965]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:57:39.965]    </control>
[03:57:39.965]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:57:39.965]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:57:39.965]        // =>  FALSE
[03:57:39.965]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:57:39.965]    </control>
[03:57:39.965]    <block atomic="false" info="">
[03:57:39.965]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:57:39.973]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:57:39.973]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:57:39.973]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:57:39.977]      __ap = 0; //lets make sure we reset the access point selection
[03:57:39.977]        // -> [__ap <= 0x00000000]
[03:57:39.977]    </block>
[03:57:39.977]  </sequence>
[03:57:39.977]  
[03:57:39.997]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:57:39.997]  
[03:57:39.997]  <debugvars>
[03:57:39.997]    // Pre-defined
[03:57:39.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:57:39.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:57:39.997]    __dp=0x00000000
[03:57:39.997]    __ap=0x00000000
[03:57:39.997]    __traceout=0x00000000      (Trace Disabled)
[03:57:39.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:57:39.997]    __FlashAddr=0x00000000
[03:57:40.001]    __FlashLen=0x00000000
[03:57:40.001]    __FlashArg=0x00000000
[03:57:40.001]    __FlashOp=0x00000000
[03:57:40.001]    __Result=0x00000000
[03:57:40.001]  </debugvars>
[03:57:40.001]  
[03:57:40.001]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:57:40.001]    <block atomic="false" info="">
[03:57:40.001]      __var deviceID = 0;
[03:57:40.001]        // -> [deviceID <= 0x00000000]
[03:57:40.001]      __var version = 0;
[03:57:40.001]        // -> [version <= 0x00000000]
[03:57:40.001]      __var partNum = 0;
[03:57:40.001]        // -> [partNum <= 0x00000000]
[03:57:40.001]      __var manuf = 0;
[03:57:40.001]        // -> [manuf <= 0x00000000]
[03:57:40.001]      __var isMSPM0G1X0X_G3X0X = 0;
[03:57:40.001]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:57:40.001]      __var isProduction = 0;
[03:57:40.001]        // -> [isProduction <= 0x00000000]
[03:57:40.001]      __var continueId = 0;
[03:57:40.001]        // -> [continueId <= 0x00000000]
[03:57:40.001]      deviceID =   Read32(0x41C40004);
[03:57:40.009]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:57:40.009]        // -> [deviceID <= 0x2BB8802F]
[03:57:40.009]      version = deviceID >> 28;
[03:57:40.009]        // -> [version <= 0x00000002]
[03:57:40.009]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:57:40.009]        // -> [partNum <= 0x0000BB88]
[03:57:40.009]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:57:40.009]        // -> [manuf <= 0x00000017]
[03:57:40.009]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:57:40.009]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:57:40.009]      isProduction = (version > 0);
[03:57:40.009]        // -> [isProduction <= 0x00000001]
[03:57:40.009]    </block>
[03:57:40.009]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:57:40.009]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:57:40.009]        // =>  FALSE
[03:57:40.009]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:57:40.009]    </control>
[03:57:40.009]    <control if="continueId == 4" while="" timeout="0" info="">
[03:57:40.009]      // if-block "continueId == 4"
[03:57:40.009]        // =>  FALSE
[03:57:40.009]      // skip if-block "continueId == 4"
[03:57:40.009]    </control>
[03:57:40.009]    <control if="!isProduction" while="" timeout="0" info="">
[03:57:40.009]      // if-block "!isProduction"
[03:57:40.009]        // =>  FALSE
[03:57:40.009]      // skip if-block "!isProduction"
[03:57:40.009]    </control>
[03:57:40.009]  </sequence>
[03:57:40.009]  
[03:58:14.948]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:58:14.948]  
[03:58:14.958]  <debugvars>
[03:58:14.958]    // Pre-defined
[03:58:14.958]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:58:14.958]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:58:14.958]    __dp=0x00000000
[03:58:14.958]    __ap=0x00000000
[03:58:14.958]    __traceout=0x00000000      (Trace Disabled)
[03:58:14.958]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:58:14.958]    __FlashAddr=0x00000000
[03:58:14.958]    __FlashLen=0x00000000
[03:58:14.958]    __FlashArg=0x00000000
[03:58:14.958]    __FlashOp=0x00000000
[03:58:14.958]    __Result=0x00000000
[03:58:14.958]  </debugvars>
[03:58:14.960]  
[03:58:14.960]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:58:14.960]    <block atomic="false" info="">
[03:58:14.960]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:58:14.960]        // -> [isSWJ <= 0x00000001]
[03:58:14.960]      __var hasDormant = __protocol & 0x00020000;
[03:58:14.960]        // -> [hasDormant <= 0x00000000]
[03:58:14.960]      __var protType   = __protocol & 0x0000FFFF;
[03:58:14.960]        // -> [protType <= 0x00000002]
[03:58:14.960]    </block>
[03:58:14.960]    <control if="protType == 1" while="" timeout="0" info="">
[03:58:14.960]      // if-block "protType == 1"
[03:58:14.960]        // =>  FALSE
[03:58:14.960]      // skip if-block "protType == 1"
[03:58:14.960]    </control>
[03:58:14.960]    <control if="protType == 2" while="" timeout="0" info="">
[03:58:14.960]      // if-block "protType == 2"
[03:58:14.960]        // =>  TRUE
[03:58:14.960]      <control if="isSWJ" while="" timeout="0" info="">
[03:58:14.960]        // if-block "isSWJ"
[03:58:14.960]          // =>  TRUE
[03:58:14.960]        <control if="hasDormant" while="" timeout="0" info="">
[03:58:14.960]          // if-block "hasDormant"
[03:58:14.960]            // =>  FALSE
[03:58:14.960]          // skip if-block "hasDormant"
[03:58:14.960]        </control>
[03:58:14.960]        <control if="!hasDormant" while="" timeout="0" info="">
[03:58:14.960]          // if-block "!hasDormant"
[03:58:14.960]            // =>  TRUE
[03:58:14.960]          <block atomic="false" info="">
[03:58:14.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:58:14.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:58:14.964]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:58:14.964]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:58:14.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:58:14.968]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:58:14.968]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:58:14.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:58:14.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:58:14.976]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:58:14.976]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:58:14.978]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:58:14.978]          </block>
[03:58:14.978]          // end if-block "!hasDormant"
[03:58:14.978]        </control>
[03:58:14.978]        // end if-block "isSWJ"
[03:58:14.980]      </control>
[03:58:14.980]      <control if="!isSWJ" while="" timeout="0" info="">
[03:58:14.980]        // if-block "!isSWJ"
[03:58:14.980]          // =>  FALSE
[03:58:14.980]        // skip if-block "!isSWJ"
[03:58:14.980]      </control>
[03:58:14.980]      <block atomic="false" info="">
[03:58:14.980]        ReadDP(0x0);
[03:58:14.980]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:58:14.980]      </block>
[03:58:14.980]      // end if-block "protType == 2"
[03:58:14.980]    </control>
[03:58:14.980]  </sequence>
[03:58:14.980]  
[03:58:14.984]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:58:14.984]  
[03:58:14.984]  <debugvars>
[03:58:14.984]    // Pre-defined
[03:58:14.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:58:14.984]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:58:14.984]    __dp=0x00000000
[03:58:14.984]    __ap=0x00000000
[03:58:14.984]    __traceout=0x00000000      (Trace Disabled)
[03:58:14.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:58:14.984]    __FlashAddr=0x00000000
[03:58:14.984]    __FlashLen=0x00000000
[03:58:14.984]    __FlashArg=0x00000000
[03:58:14.984]    __FlashOp=0x00000000
[03:58:14.984]    __Result=0x00000000
[03:58:14.984]  </debugvars>
[03:58:14.984]  
[03:58:14.984]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:58:14.984]    <block atomic="false" info="">
[03:58:14.984]      __var SW_DP_ABORT       = 0x0;
[03:58:14.984]        // -> [SW_DP_ABORT <= 0x00000000]
[03:58:14.984]      __var DP_CTRL_STAT      = 0x4;
[03:58:14.984]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:58:14.984]      __var DP_SELECT         = 0x8;
[03:58:14.984]        // -> [DP_SELECT <= 0x00000008]
[03:58:14.984]      __var powered_down      = 0;
[03:58:14.984]        // -> [powered_down <= 0x00000000]
[03:58:14.988]      WriteDP(DP_SELECT, 0x00000000);
[03:58:14.989]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:58:14.989]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:58:14.992]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:58:14.992]        // -> [powered_down <= 0x00000001]
[03:58:14.992]    </block>
[03:58:14.992]    <control if="powered_down" while="" timeout="0" info="">
[03:58:14.992]      // if-block "powered_down"
[03:58:14.992]        // =>  TRUE
[03:58:14.992]      <block atomic="false" info="">
[03:58:14.992]        Message(0, "Debug/System power-up request sent");
[03:58:14.992]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:58:14.996]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:58:14.996]      </block>
[03:58:14.996]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:58:14.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:58:14.998]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:58:14.998]        // while-condition  =>  FALSE
[03:58:14.998]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:58:14.998]      </control>
[03:58:14.998]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:58:14.998]        // if-block "(__protocol & 0xFFFF) == 1"
[03:58:14.998]          // =>  FALSE
[03:58:14.998]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:58:14.998]      </control>
[03:58:14.998]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:58:14.998]        // if-block "(__protocol & 0xFFFF) == 2"
[03:58:14.998]          // =>  TRUE
[03:58:14.998]        <block atomic="false" info="">
[03:58:15.000]          Message(0, "executing SWD power up");
[03:58:15.001]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:58:15.001]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:58:15.001]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:58:15.004]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:58:15.004]        </block>
[03:58:15.004]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:58:15.004]      </control>
[03:58:15.004]      // end if-block "powered_down"
[03:58:15.004]    </control>
[03:58:15.004]    <block atomic="false" info="">
[03:58:15.004]      __var DEBUG_PORT_VAL    = 0;
[03:58:15.004]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:58:15.004]      __var ACCESS_POINT_VAL  = 0;
[03:58:15.004]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:58:15.004]      __ap = 1; 
[03:58:15.004]        // -> [__ap <= 0x00000001]
[03:58:15.004]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:58:15.008]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:58:15.008]      __ap = 4;
[03:58:15.008]        // -> [__ap <= 0x00000004]
[03:58:15.008]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:58:15.012]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:58:15.012]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:58:15.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:58:15.012]    </block>
[03:58:15.012]    <block atomic="false" info="">
[03:58:15.012]      __var nReset = 0x80;
[03:58:15.012]        // -> [nReset <= 0x00000080]
[03:58:15.012]      __var canReadPins = 0;
[03:58:15.012]        // -> [canReadPins <= 0x00000000]
[03:58:15.012]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:58:15.016]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:58:15.016]        // -> [canReadPins <= 0x00000001]
[03:58:15.016]    </block>
[03:58:15.016]    <control if="" while="1" timeout="200" info="">
[03:58:15.016]      // while "1"  (timeout="200")
[03:58:15.016]      // while-condition  =>  TRUE
[03:58:15.016]      // while "1"  (timeout="200")
[03:58:15.016]      // while-condition  =>  TRUE
[03:58:15.016]      // while "1"  (timeout="200")
[03:58:15.016]      // while-condition  =>  TRUE
[03:58:15.016]      // while "1"  (timeout="200")
[03:58:15.016]      // while-condition  =>  TRUE
[03:58:15.016]      // while "1"  (timeout="200")
[03:58:15.016]      // while-condition  =>  TRUE
[03:58:15.016]      // while "1"  (timeout="200")
[03:58:15.016]      // while-condition  =>  TRUE
[03:58:15.018]      // while "1"  (timeout="200")
[03:58:15.018]      // while  =>  TIMEOUT
[03:58:15.018]      // end while "1"
[03:58:15.018]    </control>
[03:58:15.018]    <control if="canReadPins" while="" timeout="0" info="">
[03:58:15.018]      // if-block "canReadPins"
[03:58:15.018]        // =>  TRUE
[03:58:15.018]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:58:15.018]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:58:15.020]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:58:15.020]        // while-condition  =>  FALSE
[03:58:15.020]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:58:15.020]      </control>
[03:58:15.020]      // end if-block "canReadPins"
[03:58:15.024]    </control>
[03:58:15.024]    <control if="!canReadPins" while="" timeout="0" info="">
[03:58:15.024]      // if-block "!canReadPins"
[03:58:15.024]        // =>  FALSE
[03:58:15.024]      // skip if-block "!canReadPins"
[03:58:15.024]    </control>
[03:58:15.024]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:58:15.024]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:58:15.024]        // =>  TRUE
[03:58:15.024]      <block atomic="false" info="">
[03:58:15.024]        WriteAP(0x00, 0x190008);
[03:58:15.024]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:58:15.024]        WriteAP(0xF0, 0x01);
[03:58:15.028]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:58:15.028]      </block>
[03:58:15.028]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:58:15.028]    </control>
[03:58:15.028]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:58:15.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:58:15.028]        // =>  FALSE
[03:58:15.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:58:15.028]    </control>
[03:58:15.028]    <block atomic="false" info="">
[03:58:15.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:58:15.036]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:58:15.036]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:58:15.036]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:58:15.036]      __ap = 0; //lets make sure we reset the access point selection
[03:58:15.038]        // -> [__ap <= 0x00000000]
[03:58:15.038]    </block>
[03:58:15.038]  </sequence>
[03:58:15.038]  
[03:58:15.064]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:58:15.064]  
[03:58:15.064]  <debugvars>
[03:58:15.064]    // Pre-defined
[03:58:15.064]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:58:15.064]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:58:15.064]    __dp=0x00000000
[03:58:15.064]    __ap=0x00000000
[03:58:15.064]    __traceout=0x00000000      (Trace Disabled)
[03:58:15.064]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:58:15.064]    __FlashAddr=0x00000000
[03:58:15.064]    __FlashLen=0x00000000
[03:58:15.064]    __FlashArg=0x00000000
[03:58:15.064]    __FlashOp=0x00000000
[03:58:15.064]    __Result=0x00000000
[03:58:15.064]  </debugvars>
[03:58:15.064]  
[03:58:15.064]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:58:15.064]    <block atomic="false" info="">
[03:58:15.064]      __var deviceID = 0;
[03:58:15.064]        // -> [deviceID <= 0x00000000]
[03:58:15.064]      __var version = 0;
[03:58:15.064]        // -> [version <= 0x00000000]
[03:58:15.064]      __var partNum = 0;
[03:58:15.064]        // -> [partNum <= 0x00000000]
[03:58:15.064]      __var manuf = 0;
[03:58:15.064]        // -> [manuf <= 0x00000000]
[03:58:15.064]      __var isMSPM0G1X0X_G3X0X = 0;
[03:58:15.068]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:58:15.068]      __var isProduction = 0;
[03:58:15.068]        // -> [isProduction <= 0x00000000]
[03:58:15.068]      __var continueId = 0;
[03:58:15.068]        // -> [continueId <= 0x00000000]
[03:58:15.068]      deviceID =   Read32(0x41C40004);
[03:58:15.072]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:58:15.072]        // -> [deviceID <= 0x2BB8802F]
[03:58:15.072]      version = deviceID >> 28;
[03:58:15.072]        // -> [version <= 0x00000002]
[03:58:15.076]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:58:15.076]        // -> [partNum <= 0x0000BB88]
[03:58:15.076]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:58:15.076]        // -> [manuf <= 0x00000017]
[03:58:15.076]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:58:15.076]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:58:15.076]      isProduction = (version > 0);
[03:58:15.076]        // -> [isProduction <= 0x00000001]
[03:58:15.076]    </block>
[03:58:15.076]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:58:15.076]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:58:15.076]        // =>  FALSE
[03:58:15.076]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:58:15.076]    </control>
[03:58:15.076]    <control if="continueId == 4" while="" timeout="0" info="">
[03:58:15.076]      // if-block "continueId == 4"
[03:58:15.078]        // =>  FALSE
[03:58:15.078]      // skip if-block "continueId == 4"
[03:58:15.078]    </control>
[03:58:15.078]    <control if="!isProduction" while="" timeout="0" info="">
[03:58:15.078]      // if-block "!isProduction"
[03:58:15.078]        // =>  FALSE
[03:58:15.078]      // skip if-block "!isProduction"
[03:58:15.078]    </control>
[03:58:15.078]  </sequence>
[03:58:15.078]  
[04:01:57.375]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:01:57.375]  
[04:01:57.383]  <debugvars>
[04:01:57.383]    // Pre-defined
[04:01:57.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:01:57.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:01:57.383]    __dp=0x00000000
[04:01:57.383]    __ap=0x00000000
[04:01:57.383]    __traceout=0x00000000      (Trace Disabled)
[04:01:57.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:01:57.383]    __FlashAddr=0x00000000
[04:01:57.383]    __FlashLen=0x00000000
[04:01:57.383]    __FlashArg=0x00000000
[04:01:57.383]    __FlashOp=0x00000000
[04:01:57.383]    __Result=0x00000000
[04:01:57.383]  </debugvars>
[04:01:57.383]  
[04:01:57.383]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:01:57.383]    <block atomic="false" info="">
[04:01:57.383]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:01:57.383]        // -> [isSWJ <= 0x00000001]
[04:01:57.383]      __var hasDormant = __protocol & 0x00020000;
[04:01:57.383]        // -> [hasDormant <= 0x00000000]
[04:01:57.383]      __var protType   = __protocol & 0x0000FFFF;
[04:01:57.383]        // -> [protType <= 0x00000002]
[04:01:57.383]    </block>
[04:01:57.383]    <control if="protType == 1" while="" timeout="0" info="">
[04:01:57.383]      // if-block "protType == 1"
[04:01:57.387]        // =>  FALSE
[04:01:57.387]      // skip if-block "protType == 1"
[04:01:57.387]    </control>
[04:01:57.387]    <control if="protType == 2" while="" timeout="0" info="">
[04:01:57.387]      // if-block "protType == 2"
[04:01:57.387]        // =>  TRUE
[04:01:57.388]      <control if="isSWJ" while="" timeout="0" info="">
[04:01:57.388]        // if-block "isSWJ"
[04:01:57.388]          // =>  TRUE
[04:01:57.388]        <control if="hasDormant" while="" timeout="0" info="">
[04:01:57.388]          // if-block "hasDormant"
[04:01:57.388]            // =>  FALSE
[04:01:57.388]          // skip if-block "hasDormant"
[04:01:57.389]        </control>
[04:01:57.389]        <control if="!hasDormant" while="" timeout="0" info="">
[04:01:57.389]          // if-block "!hasDormant"
[04:01:57.389]            // =>  TRUE
[04:01:57.389]          <block atomic="false" info="">
[04:01:57.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:01:57.390]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:01:57.390]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:01:57.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:01:57.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:01:57.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:01:57.392]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:01:57.396]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:01:57.396]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:01:57.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:01:57.396]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:01:57.400]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:01:57.400]          </block>
[04:01:57.400]          // end if-block "!hasDormant"
[04:01:57.400]        </control>
[04:01:57.401]        // end if-block "isSWJ"
[04:01:57.401]      </control>
[04:01:57.401]      <control if="!isSWJ" while="" timeout="0" info="">
[04:01:57.401]        // if-block "!isSWJ"
[04:01:57.401]          // =>  FALSE
[04:01:57.401]        // skip if-block "!isSWJ"
[04:01:57.401]      </control>
[04:01:57.401]      <block atomic="false" info="">
[04:01:57.401]        ReadDP(0x0);
[04:01:57.404]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:01:57.404]      </block>
[04:01:57.404]      // end if-block "protType == 2"
[04:01:57.404]    </control>
[04:01:57.405]  </sequence>
[04:01:57.405]  
[04:01:57.405]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:01:57.405]  
[04:01:57.405]  <debugvars>
[04:01:57.405]    // Pre-defined
[04:01:57.408]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:01:57.408]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:01:57.408]    __dp=0x00000000
[04:01:57.408]    __ap=0x00000000
[04:01:57.408]    __traceout=0x00000000      (Trace Disabled)
[04:01:57.408]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:01:57.408]    __FlashAddr=0x00000000
[04:01:57.408]    __FlashLen=0x00000000
[04:01:57.408]    __FlashArg=0x00000000
[04:01:57.408]    __FlashOp=0x00000000
[04:01:57.408]    __Result=0x00000000
[04:01:57.408]  </debugvars>
[04:01:57.408]  
[04:01:57.408]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:01:57.408]    <block atomic="false" info="">
[04:01:57.408]      __var SW_DP_ABORT       = 0x0;
[04:01:57.408]        // -> [SW_DP_ABORT <= 0x00000000]
[04:01:57.408]      __var DP_CTRL_STAT      = 0x4;
[04:01:57.408]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:01:57.408]      __var DP_SELECT         = 0x8;
[04:01:57.408]        // -> [DP_SELECT <= 0x00000008]
[04:01:57.410]      __var powered_down      = 0;
[04:01:57.410]        // -> [powered_down <= 0x00000000]
[04:01:57.410]      WriteDP(DP_SELECT, 0x00000000);
[04:01:57.410]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:01:57.412]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:01:57.412]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:01:57.412]        // -> [powered_down <= 0x00000001]
[04:01:57.412]    </block>
[04:01:57.412]    <control if="powered_down" while="" timeout="0" info="">
[04:01:57.412]      // if-block "powered_down"
[04:01:57.412]        // =>  TRUE
[04:01:57.412]      <block atomic="false" info="">
[04:01:57.412]        Message(0, "Debug/System power-up request sent");
[04:01:57.416]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:01:57.418]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:01:57.418]      </block>
[04:01:57.418]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:01:57.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:01:57.418]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:01:57.418]        // while-condition  =>  FALSE
[04:01:57.418]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:01:57.418]      </control>
[04:01:57.418]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:01:57.421]        // if-block "(__protocol & 0xFFFF) == 1"
[04:01:57.421]          // =>  FALSE
[04:01:57.421]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:01:57.421]      </control>
[04:01:57.421]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:01:57.421]        // if-block "(__protocol & 0xFFFF) == 2"
[04:01:57.421]          // =>  TRUE
[04:01:57.421]        <block atomic="false" info="">
[04:01:57.421]          Message(0, "executing SWD power up");
[04:01:57.423]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:01:57.423]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:01:57.423]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:01:57.426]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:01:57.426]        </block>
[04:01:57.426]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:01:57.426]      </control>
[04:01:57.426]      // end if-block "powered_down"
[04:01:57.426]    </control>
[04:01:57.426]    <block atomic="false" info="">
[04:01:57.426]      __var DEBUG_PORT_VAL    = 0;
[04:01:57.426]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:01:57.426]      __var ACCESS_POINT_VAL  = 0;
[04:01:57.426]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:01:57.426]      __ap = 1; 
[04:01:57.426]        // -> [__ap <= 0x00000001]
[04:01:57.426]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:01:57.429]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:01:57.429]      __ap = 4;
[04:01:57.429]        // -> [__ap <= 0x00000004]
[04:01:57.429]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:01:57.433]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:01:57.433]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:01:57.433]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:01:57.436]    </block>
[04:01:57.436]    <block atomic="false" info="">
[04:01:57.436]      __var nReset = 0x80;
[04:01:57.436]        // -> [nReset <= 0x00000080]
[04:01:57.436]      __var canReadPins = 0;
[04:01:57.436]        // -> [canReadPins <= 0x00000000]
[04:01:57.436]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:01:57.439]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:01:57.439]        // -> [canReadPins <= 0x00000001]
[04:01:57.439]    </block>
[04:01:57.439]    <control if="" while="1" timeout="200" info="">
[04:01:57.439]      // while "1"  (timeout="200")
[04:01:57.439]      // while-condition  =>  TRUE
[04:01:57.439]      // while "1"  (timeout="200")
[04:01:57.439]      // while-condition  =>  TRUE
[04:01:57.439]      // while "1"  (timeout="200")
[04:01:57.439]      // while-condition  =>  TRUE
[04:01:57.439]      // while "1"  (timeout="200")
[04:01:57.439]      // while-condition  =>  TRUE
[04:01:57.439]      // while "1"  (timeout="200")
[04:01:57.439]      // while-condition  =>  TRUE
[04:01:57.439]      // while "1"  (timeout="200")
[04:01:57.439]      // while-condition  =>  TRUE
[04:01:57.439]      // while "1"  (timeout="200")
[04:01:57.439]      // while-condition  =>  TRUE
[04:01:57.441]      // while "1"  (timeout="200")
[04:01:57.441]      // while-condition  =>  TRUE
[04:01:57.441]      // while "1"  (timeout="200")
[04:01:57.441]      // while-condition  =>  TRUE
[04:01:57.441]      // while "1"  (timeout="200")
[04:01:57.441]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.442]      // while "1"  (timeout="200")
[04:01:57.442]      // while-condition  =>  TRUE
[04:01:57.446]      // while "1"  (timeout="200")
[04:01:57.446]      // while-condition  =>  TRUE
[04:01:57.446]      // while "1"  (timeout="200")
[04:01:57.446]      // while-condition  =>  TRUE
[04:01:57.446]      // while "1"  (timeout="200")
[04:01:57.446]      // while-condition  =>  TRUE
[04:01:57.446]      // while "1"  (timeout="200")
[04:01:57.446]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.447]      // while-condition  =>  TRUE
[04:01:57.447]      // while "1"  (timeout="200")
[04:01:57.449]      // while-condition  =>  TRUE
[04:01:57.449]      // while "1"  (timeout="200")
[04:01:57.449]      // while-condition  =>  TRUE
[04:01:57.449]      // while "1"  (timeout="200")
[04:01:57.449]      // while-condition  =>  TRUE
[04:01:57.449]      // while "1"  (timeout="200")
[04:01:57.449]      // while-condition  =>  TRUE
[04:01:57.449]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.450]      // while "1"  (timeout="200")
[04:01:57.450]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.453]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.453]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.453]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.453]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.453]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.453]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.453]      // while-condition  =>  TRUE
[04:01:57.453]      // while "1"  (timeout="200")
[04:01:57.454]      // while-condition  =>  TRUE
[04:01:57.454]      // while "1"  (timeout="200")
[04:01:57.454]      // while  =>  TIMEOUT
[04:01:57.454]      // end while "1"
[04:01:57.454]    </control>
[04:01:57.454]    <control if="canReadPins" while="" timeout="0" info="">
[04:01:57.454]      // if-block "canReadPins"
[04:01:57.454]        // =>  TRUE
[04:01:57.454]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:01:57.454]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:01:57.456]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:01:57.456]        // while-condition  =>  FALSE
[04:01:57.456]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:01:57.456]      </control>
[04:01:57.456]      // end if-block "canReadPins"
[04:01:57.456]    </control>
[04:01:57.456]    <control if="!canReadPins" while="" timeout="0" info="">
[04:01:57.456]      // if-block "!canReadPins"
[04:01:57.456]        // =>  FALSE
[04:01:57.456]      // skip if-block "!canReadPins"
[04:01:57.456]    </control>
[04:01:57.458]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:01:57.458]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:01:57.458]        // =>  TRUE
[04:01:57.458]      <block atomic="false" info="">
[04:01:57.458]        WriteAP(0x00, 0x190008);
[04:01:57.459]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:01:57.459]        WriteAP(0xF0, 0x01);
[04:01:57.463]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:01:57.463]      </block>
[04:01:57.463]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:01:57.463]    </control>
[04:01:57.463]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:01:57.463]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:01:57.463]        // =>  FALSE
[04:01:57.463]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:01:57.463]    </control>
[04:01:57.463]    <block atomic="false" info="">
[04:01:57.466]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:01:57.466]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:01:57.466]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:01:57.466]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:01:57.470]      __ap = 0; //lets make sure we reset the access point selection
[04:01:57.470]        // -> [__ap <= 0x00000000]
[04:01:57.470]    </block>
[04:01:57.470]  </sequence>
[04:01:57.470]  
[04:01:57.491]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:01:57.491]  
[04:01:57.491]  <debugvars>
[04:01:57.491]    // Pre-defined
[04:01:57.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:01:57.491]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:01:57.491]    __dp=0x00000000
[04:01:57.491]    __ap=0x00000000
[04:01:57.491]    __traceout=0x00000000      (Trace Disabled)
[04:01:57.491]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:01:57.491]    __FlashAddr=0x00000000
[04:01:57.491]    __FlashLen=0x00000000
[04:01:57.491]    __FlashArg=0x00000000
[04:01:57.491]    __FlashOp=0x00000000
[04:01:57.491]    __Result=0x00000000
[04:01:57.491]  </debugvars>
[04:01:57.491]  
[04:01:57.491]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:01:57.491]    <block atomic="false" info="">
[04:01:57.491]      __var deviceID = 0;
[04:01:57.491]        // -> [deviceID <= 0x00000000]
[04:01:57.491]      __var version = 0;
[04:01:57.491]        // -> [version <= 0x00000000]
[04:01:57.491]      __var partNum = 0;
[04:01:57.491]        // -> [partNum <= 0x00000000]
[04:01:57.491]      __var manuf = 0;
[04:01:57.491]        // -> [manuf <= 0x00000000]
[04:01:57.491]      __var isMSPM0G1X0X_G3X0X = 0;
[04:01:57.491]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:01:57.491]      __var isProduction = 0;
[04:01:57.491]        // -> [isProduction <= 0x00000000]
[04:01:57.491]      __var continueId = 0;
[04:01:57.491]        // -> [continueId <= 0x00000000]
[04:01:57.495]      deviceID =   Read32(0x41C40004);
[04:01:57.499]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:01:57.499]        // -> [deviceID <= 0x2BB8802F]
[04:01:57.499]      version = deviceID >> 28;
[04:01:57.499]        // -> [version <= 0x00000002]
[04:01:57.499]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:01:57.500]        // -> [partNum <= 0x0000BB88]
[04:01:57.500]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:01:57.500]        // -> [manuf <= 0x00000017]
[04:01:57.500]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:01:57.500]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:01:57.500]      isProduction = (version > 0);
[04:01:57.500]        // -> [isProduction <= 0x00000001]
[04:01:57.500]    </block>
[04:01:57.500]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:01:57.500]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:01:57.500]        // =>  FALSE
[04:01:57.500]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:01:57.500]    </control>
[04:01:57.500]    <control if="continueId == 4" while="" timeout="0" info="">
[04:01:57.500]      // if-block "continueId == 4"
[04:01:57.500]        // =>  FALSE
[04:01:57.500]      // skip if-block "continueId == 4"
[04:01:57.500]    </control>
[04:01:57.500]    <control if="!isProduction" while="" timeout="0" info="">
[04:01:57.500]      // if-block "!isProduction"
[04:01:57.500]        // =>  FALSE
[04:01:57.500]      // skip if-block "!isProduction"
[04:01:57.500]    </control>
[04:01:57.500]  </sequence>
[04:01:57.500]  
[04:03:00.705]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:03:00.705]  
[04:03:00.715]  <debugvars>
[04:03:00.715]    // Pre-defined
[04:03:00.715]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:03:00.715]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:03:00.715]    __dp=0x00000000
[04:03:00.715]    __ap=0x00000000
[04:03:00.715]    __traceout=0x00000000      (Trace Disabled)
[04:03:00.715]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:03:00.715]    __FlashAddr=0x00000000
[04:03:00.715]    __FlashLen=0x00000000
[04:03:00.715]    __FlashArg=0x00000000
[04:03:00.715]    __FlashOp=0x00000000
[04:03:00.715]    __Result=0x00000000
[04:03:00.716]  </debugvars>
[04:03:00.716]  
[04:03:00.716]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:03:00.716]    <block atomic="false" info="">
[04:03:00.716]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:03:00.717]        // -> [isSWJ <= 0x00000001]
[04:03:00.717]      __var hasDormant = __protocol & 0x00020000;
[04:03:00.717]        // -> [hasDormant <= 0x00000000]
[04:03:00.717]      __var protType   = __protocol & 0x0000FFFF;
[04:03:00.717]        // -> [protType <= 0x00000002]
[04:03:00.717]    </block>
[04:03:00.717]    <control if="protType == 1" while="" timeout="0" info="">
[04:03:00.717]      // if-block "protType == 1"
[04:03:00.717]        // =>  FALSE
[04:03:00.717]      // skip if-block "protType == 1"
[04:03:00.717]    </control>
[04:03:00.717]    <control if="protType == 2" while="" timeout="0" info="">
[04:03:00.717]      // if-block "protType == 2"
[04:03:00.717]        // =>  TRUE
[04:03:00.717]      <control if="isSWJ" while="" timeout="0" info="">
[04:03:00.717]        // if-block "isSWJ"
[04:03:00.717]          // =>  TRUE
[04:03:00.717]        <control if="hasDormant" while="" timeout="0" info="">
[04:03:00.717]          // if-block "hasDormant"
[04:03:00.717]            // =>  FALSE
[04:03:00.717]          // skip if-block "hasDormant"
[04:03:00.717]        </control>
[04:03:00.717]        <control if="!hasDormant" while="" timeout="0" info="">
[04:03:00.719]          // if-block "!hasDormant"
[04:03:00.719]            // =>  TRUE
[04:03:00.719]          <block atomic="false" info="">
[04:03:00.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:03:00.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:03:00.720]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:03:00.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:03:00.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:03:00.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:03:00.723]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:03:00.723]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:03:00.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:03:00.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:03:00.727]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:03:00.727]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:03:00.727]          </block>
[04:03:00.727]          // end if-block "!hasDormant"
[04:03:00.727]        </control>
[04:03:00.727]        // end if-block "isSWJ"
[04:03:00.727]      </control>
[04:03:00.727]      <control if="!isSWJ" while="" timeout="0" info="">
[04:03:00.727]        // if-block "!isSWJ"
[04:03:00.727]          // =>  FALSE
[04:03:00.731]        // skip if-block "!isSWJ"
[04:03:00.731]      </control>
[04:03:00.731]      <block atomic="false" info="">
[04:03:00.731]        ReadDP(0x0);
[04:03:00.739]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:03:00.741]      </block>
[04:03:00.741]      // end if-block "protType == 2"
[04:03:00.741]    </control>
[04:03:00.741]  </sequence>
[04:03:00.741]  
[04:03:00.743]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:03:00.743]  
[04:03:00.743]  <debugvars>
[04:03:00.744]    // Pre-defined
[04:03:00.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:03:00.744]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:03:00.744]    __dp=0x00000000
[04:03:00.744]    __ap=0x00000000
[04:03:00.744]    __traceout=0x00000000      (Trace Disabled)
[04:03:00.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:03:00.744]    __FlashAddr=0x00000000
[04:03:00.744]    __FlashLen=0x00000000
[04:03:00.744]    __FlashArg=0x00000000
[04:03:00.744]    __FlashOp=0x00000000
[04:03:00.744]    __Result=0x00000000
[04:03:00.744]  </debugvars>
[04:03:00.744]  
[04:03:00.744]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:03:00.744]    <block atomic="false" info="">
[04:03:00.745]      __var SW_DP_ABORT       = 0x0;
[04:03:00.745]        // -> [SW_DP_ABORT <= 0x00000000]
[04:03:00.745]      __var DP_CTRL_STAT      = 0x4;
[04:03:00.745]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:03:00.746]      __var DP_SELECT         = 0x8;
[04:03:00.746]        // -> [DP_SELECT <= 0x00000008]
[04:03:00.746]      __var powered_down      = 0;
[04:03:00.746]        // -> [powered_down <= 0x00000000]
[04:03:00.746]      WriteDP(DP_SELECT, 0x00000000);
[04:03:00.753]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:03:00.753]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:03:00.755]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:03:00.755]        // -> [powered_down <= 0x00000001]
[04:03:00.755]    </block>
[04:03:00.755]    <control if="powered_down" while="" timeout="0" info="">
[04:03:00.755]      // if-block "powered_down"
[04:03:00.755]        // =>  TRUE
[04:03:00.755]      <block atomic="false" info="">
[04:03:00.755]        Message(0, "Debug/System power-up request sent");
[04:03:00.758]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:03:00.759]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:03:00.759]      </block>
[04:03:00.759]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:03:00.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:03:00.760]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:03:00.760]        // while-condition  =>  FALSE
[04:03:00.760]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:03:00.760]      </control>
[04:03:00.760]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:03:00.760]        // if-block "(__protocol & 0xFFFF) == 1"
[04:03:00.760]          // =>  FALSE
[04:03:00.760]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:03:00.760]      </control>
[04:03:00.760]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:03:00.760]        // if-block "(__protocol & 0xFFFF) == 2"
[04:03:00.760]          // =>  TRUE
[04:03:00.760]        <block atomic="false" info="">
[04:03:00.760]          Message(0, "executing SWD power up");
[04:03:00.763]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:03:00.763]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:03:00.763]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:03:00.763]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:03:00.767]        </block>
[04:03:00.767]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:03:00.767]      </control>
[04:03:00.767]      // end if-block "powered_down"
[04:03:00.767]    </control>
[04:03:00.767]    <block atomic="false" info="">
[04:03:00.767]      __var DEBUG_PORT_VAL    = 0;
[04:03:00.767]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:03:00.767]      __var ACCESS_POINT_VAL  = 0;
[04:03:00.767]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:03:00.767]      __ap = 1; 
[04:03:00.767]        // -> [__ap <= 0x00000001]
[04:03:00.767]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:03:00.771]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:03:00.771]      __ap = 4;
[04:03:00.771]        // -> [__ap <= 0x00000004]
[04:03:00.771]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:03:00.776]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:03:00.776]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:03:00.776]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:03:00.776]    </block>
[04:03:00.776]    <block atomic="false" info="">
[04:03:00.776]      __var nReset = 0x80;
[04:03:00.776]        // -> [nReset <= 0x00000080]
[04:03:00.776]      __var canReadPins = 0;
[04:03:00.776]        // -> [canReadPins <= 0x00000000]
[04:03:00.776]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:03:00.781]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:03:00.781]        // -> [canReadPins <= 0x00000001]
[04:03:00.781]    </block>
[04:03:00.781]    <control if="" while="1" timeout="200" info="">
[04:03:00.781]      // while "1"  (timeout="200")
[04:03:00.784]      // while-condition  =>  TRUE
[04:03:00.784]      // while "1"  (timeout="200")
[04:03:00.784]      // while  =>  TIMEOUT
[04:03:00.784]      // end while "1"
[04:03:00.784]    </control>
[04:03:00.784]    <control if="canReadPins" while="" timeout="0" info="">
[04:03:00.784]      // if-block "canReadPins"
[04:03:00.784]        // =>  TRUE
[04:03:00.784]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:03:00.784]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:03:00.784]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:03:00.784]        // while-condition  =>  FALSE
[04:03:00.784]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:03:00.784]      </control>
[04:03:00.784]      // end if-block "canReadPins"
[04:03:00.784]    </control>
[04:03:00.784]    <control if="!canReadPins" while="" timeout="0" info="">
[04:03:00.784]      // if-block "!canReadPins"
[04:03:00.784]        // =>  FALSE
[04:03:00.784]      // skip if-block "!canReadPins"
[04:03:00.784]    </control>
[04:03:00.784]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:03:00.784]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:03:00.784]        // =>  TRUE
[04:03:00.784]      <block atomic="false" info="">
[04:03:00.788]        WriteAP(0x00, 0x190008);
[04:03:00.788]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:03:00.788]        WriteAP(0xF0, 0x01);
[04:03:00.792]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:03:00.792]      </block>
[04:03:00.792]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:03:00.792]    </control>
[04:03:00.794]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:03:00.794]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:03:00.794]        // =>  FALSE
[04:03:00.794]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:03:00.794]    </control>
[04:03:00.794]    <block atomic="false" info="">
[04:03:00.794]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:03:00.797]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:03:00.797]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:03:00.797]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:03:00.797]      __ap = 0; //lets make sure we reset the access point selection
[04:03:00.797]        // -> [__ap <= 0x00000000]
[04:03:00.797]    </block>
[04:03:00.797]  </sequence>
[04:03:00.797]  
[04:03:00.825]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:03:00.825]  
[04:03:00.825]  <debugvars>
[04:03:00.825]    // Pre-defined
[04:03:00.825]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:03:00.825]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:03:00.825]    __dp=0x00000000
[04:03:00.825]    __ap=0x00000000
[04:03:00.825]    __traceout=0x00000000      (Trace Disabled)
[04:03:00.825]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:03:00.825]    __FlashAddr=0x00000000
[04:03:00.825]    __FlashLen=0x00000000
[04:03:00.825]    __FlashArg=0x00000000
[04:03:00.825]    __FlashOp=0x00000000
[04:03:00.825]    __Result=0x00000000
[04:03:00.825]  </debugvars>
[04:03:00.825]  
[04:03:00.825]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:03:00.829]    <block atomic="false" info="">
[04:03:00.829]      __var deviceID = 0;
[04:03:00.829]        // -> [deviceID <= 0x00000000]
[04:03:00.829]      __var version = 0;
[04:03:00.829]        // -> [version <= 0x00000000]
[04:03:00.829]      __var partNum = 0;
[04:03:00.829]        // -> [partNum <= 0x00000000]
[04:03:00.829]      __var manuf = 0;
[04:03:00.829]        // -> [manuf <= 0x00000000]
[04:03:00.829]      __var isMSPM0G1X0X_G3X0X = 0;
[04:03:00.829]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:03:00.829]      __var isProduction = 0;
[04:03:00.829]        // -> [isProduction <= 0x00000000]
[04:03:00.829]      __var continueId = 0;
[04:03:00.829]        // -> [continueId <= 0x00000000]
[04:03:00.829]      deviceID =   Read32(0x41C40004);
[04:03:00.837]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:03:00.837]        // -> [deviceID <= 0x2BB8802F]
[04:03:00.837]      version = deviceID >> 28;
[04:03:00.837]        // -> [version <= 0x00000002]
[04:03:00.837]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:03:00.837]        // -> [partNum <= 0x0000BB88]
[04:03:00.837]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:03:00.837]        // -> [manuf <= 0x00000017]
[04:03:00.837]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:03:00.837]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:03:00.837]      isProduction = (version > 0);
[04:03:00.837]        // -> [isProduction <= 0x00000001]
[04:03:00.837]    </block>
[04:03:00.837]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:03:00.837]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:03:00.837]        // =>  FALSE
[04:03:00.837]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:03:00.837]    </control>
[04:03:00.837]    <control if="continueId == 4" while="" timeout="0" info="">
[04:03:00.837]      // if-block "continueId == 4"
[04:03:00.837]        // =>  FALSE
[04:03:00.837]      // skip if-block "continueId == 4"
[04:03:00.837]    </control>
[04:03:00.837]    <control if="!isProduction" while="" timeout="0" info="">
[04:03:00.837]      // if-block "!isProduction"
[04:03:00.837]        // =>  FALSE
[04:03:00.837]      // skip if-block "!isProduction"
[04:03:00.837]    </control>
[04:03:00.837]  </sequence>
[04:03:00.837]  
[04:03:23.836]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:03:23.836]  
[04:03:23.845]  <debugvars>
[04:03:23.845]    // Pre-defined
[04:03:23.845]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:03:23.845]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:03:23.845]    __dp=0x00000000
[04:03:23.845]    __ap=0x00000000
[04:03:23.846]    __traceout=0x00000000      (Trace Disabled)
[04:03:23.846]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:03:23.846]    __FlashAddr=0x00000000
[04:03:23.846]    __FlashLen=0x00000000
[04:03:23.846]    __FlashArg=0x00000000
[04:03:23.846]    __FlashOp=0x00000000
[04:03:23.846]    __Result=0x00000000
[04:03:23.846]  </debugvars>
[04:03:23.846]  
[04:03:23.846]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:03:23.846]    <block atomic="false" info="">
[04:03:23.846]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:03:23.846]        // -> [isSWJ <= 0x00000001]
[04:03:23.846]      __var hasDormant = __protocol & 0x00020000;
[04:03:23.846]        // -> [hasDormant <= 0x00000000]
[04:03:23.846]      __var protType   = __protocol & 0x0000FFFF;
[04:03:23.846]        // -> [protType <= 0x00000002]
[04:03:23.847]    </block>
[04:03:23.847]    <control if="protType == 1" while="" timeout="0" info="">
[04:03:23.847]      // if-block "protType == 1"
[04:03:23.847]        // =>  FALSE
[04:03:23.847]      // skip if-block "protType == 1"
[04:03:23.847]    </control>
[04:03:23.847]    <control if="protType == 2" while="" timeout="0" info="">
[04:03:23.847]      // if-block "protType == 2"
[04:03:23.847]        // =>  TRUE
[04:03:23.847]      <control if="isSWJ" while="" timeout="0" info="">
[04:03:23.847]        // if-block "isSWJ"
[04:03:23.847]          // =>  TRUE
[04:03:23.847]        <control if="hasDormant" while="" timeout="0" info="">
[04:03:23.847]          // if-block "hasDormant"
[04:03:23.847]            // =>  FALSE
[04:03:23.847]          // skip if-block "hasDormant"
[04:03:23.847]        </control>
[04:03:23.847]        <control if="!hasDormant" while="" timeout="0" info="">
[04:03:23.847]          // if-block "!hasDormant"
[04:03:23.847]            // =>  TRUE
[04:03:23.849]          <block atomic="false" info="">
[04:03:23.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:03:23.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:03:23.851]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:03:23.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:03:23.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:03:23.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:03:23.858]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:03:23.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:03:23.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:03:23.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:03:23.860]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:03:23.864]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:03:23.864]          </block>
[04:03:23.864]          // end if-block "!hasDormant"
[04:03:23.864]        </control>
[04:03:23.864]        // end if-block "isSWJ"
[04:03:23.864]      </control>
[04:03:23.864]      <control if="!isSWJ" while="" timeout="0" info="">
[04:03:23.864]        // if-block "!isSWJ"
[04:03:23.864]          // =>  FALSE
[04:03:23.864]        // skip if-block "!isSWJ"
[04:03:23.864]      </control>
[04:03:23.864]      <block atomic="false" info="">
[04:03:23.864]        ReadDP(0x0);
[04:03:23.866]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:03:23.866]      </block>
[04:03:23.866]      // end if-block "protType == 2"
[04:03:23.866]    </control>
[04:03:23.866]  </sequence>
[04:03:23.866]  
[04:03:23.871]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:03:23.871]  
[04:03:23.871]  <debugvars>
[04:03:23.871]    // Pre-defined
[04:03:23.871]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:03:23.871]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:03:23.871]    __dp=0x00000000
[04:03:23.871]    __ap=0x00000000
[04:03:23.871]    __traceout=0x00000000      (Trace Disabled)
[04:03:23.871]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:03:23.871]    __FlashAddr=0x00000000
[04:03:23.871]    __FlashLen=0x00000000
[04:03:23.871]    __FlashArg=0x00000000
[04:03:23.871]    __FlashOp=0x00000000
[04:03:23.871]    __Result=0x00000000
[04:03:23.871]  </debugvars>
[04:03:23.871]  
[04:03:23.871]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:03:23.871]    <block atomic="false" info="">
[04:03:23.871]      __var SW_DP_ABORT       = 0x0;
[04:03:23.871]        // -> [SW_DP_ABORT <= 0x00000000]
[04:03:23.871]      __var DP_CTRL_STAT      = 0x4;
[04:03:23.871]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:03:23.873]      __var DP_SELECT         = 0x8;
[04:03:23.873]        // -> [DP_SELECT <= 0x00000008]
[04:03:23.873]      __var powered_down      = 0;
[04:03:23.873]        // -> [powered_down <= 0x00000000]
[04:03:23.873]      WriteDP(DP_SELECT, 0x00000000);
[04:03:23.876]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:03:23.878]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:03:23.878]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:03:23.878]        // -> [powered_down <= 0x00000001]
[04:03:23.878]    </block>
[04:03:23.878]    <control if="powered_down" while="" timeout="0" info="">
[04:03:23.878]      // if-block "powered_down"
[04:03:23.878]        // =>  TRUE
[04:03:23.880]      <block atomic="false" info="">
[04:03:23.880]        Message(0, "Debug/System power-up request sent");
[04:03:23.881]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:03:23.881]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:03:23.881]      </block>
[04:03:23.881]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:03:23.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:03:23.885]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:03:23.885]        // while-condition  =>  FALSE
[04:03:23.885]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:03:23.885]      </control>
[04:03:23.885]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:03:23.885]        // if-block "(__protocol & 0xFFFF) == 1"
[04:03:23.885]          // =>  FALSE
[04:03:23.885]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:03:23.885]      </control>
[04:03:23.885]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:03:23.885]        // if-block "(__protocol & 0xFFFF) == 2"
[04:03:23.885]          // =>  TRUE
[04:03:23.886]        <block atomic="false" info="">
[04:03:23.886]          Message(0, "executing SWD power up");
[04:03:23.887]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:03:23.888]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:03:23.889]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:03:23.890]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:03:23.892]        </block>
[04:03:23.892]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:03:23.892]      </control>
[04:03:23.892]      // end if-block "powered_down"
[04:03:23.892]    </control>
[04:03:23.892]    <block atomic="false" info="">
[04:03:23.892]      __var DEBUG_PORT_VAL    = 0;
[04:03:23.892]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:03:23.892]      __var ACCESS_POINT_VAL  = 0;
[04:03:23.892]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:03:23.892]      __ap = 1; 
[04:03:23.892]        // -> [__ap <= 0x00000001]
[04:03:23.892]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:03:23.896]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:03:23.896]      __ap = 4;
[04:03:23.896]        // -> [__ap <= 0x00000004]
[04:03:23.897]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:03:23.901]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:03:23.901]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:03:23.901]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:03:23.902]    </block>
[04:03:23.902]    <block atomic="false" info="">
[04:03:23.902]      __var nReset = 0x80;
[04:03:23.902]        // -> [nReset <= 0x00000080]
[04:03:23.902]      __var canReadPins = 0;
[04:03:23.902]        // -> [canReadPins <= 0x00000000]
[04:03:23.902]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:03:23.904]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:03:23.904]        // -> [canReadPins <= 0x00000001]
[04:03:23.905]    </block>
[04:03:23.905]    <control if="" while="1" timeout="200" info="">
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.905]      // while "1"  (timeout="200")
[04:03:23.905]      // while-condition  =>  TRUE
[04:03:23.907]      // while "1"  (timeout="200")
[04:03:23.907]      // while  =>  TIMEOUT
[04:03:23.907]      // end while "1"
[04:03:23.907]    </control>
[04:03:23.907]    <control if="canReadPins" while="" timeout="0" info="">
[04:03:23.908]      // if-block "canReadPins"
[04:03:23.908]        // =>  TRUE
[04:03:23.908]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:03:23.908]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:03:23.909]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:03:23.909]        // while-condition  =>  FALSE
[04:03:23.909]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:03:23.909]      </control>
[04:03:23.909]      // end if-block "canReadPins"
[04:03:23.910]    </control>
[04:03:23.910]    <control if="!canReadPins" while="" timeout="0" info="">
[04:03:23.910]      // if-block "!canReadPins"
[04:03:23.910]        // =>  FALSE
[04:03:23.910]      // skip if-block "!canReadPins"
[04:03:23.910]    </control>
[04:03:23.910]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:03:23.910]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:03:23.910]        // =>  TRUE
[04:03:23.910]      <block atomic="false" info="">
[04:03:23.910]        WriteAP(0x00, 0x190008);
[04:03:23.913]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:03:23.913]        WriteAP(0xF0, 0x01);
[04:03:23.917]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:03:23.918]      </block>
[04:03:23.918]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:03:23.918]    </control>
[04:03:23.918]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:03:23.918]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:03:23.918]        // =>  FALSE
[04:03:23.918]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:03:23.918]    </control>
[04:03:23.918]    <block atomic="false" info="">
[04:03:23.918]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:03:23.921]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:03:23.921]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:03:23.921]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:03:23.923]      __ap = 0; //lets make sure we reset the access point selection
[04:03:23.923]        // -> [__ap <= 0x00000000]
[04:03:23.923]    </block>
[04:03:23.923]  </sequence>
[04:03:23.923]  
[04:03:23.944]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:03:23.944]  
[04:03:23.944]  <debugvars>
[04:03:23.944]    // Pre-defined
[04:03:23.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:03:23.944]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:03:23.944]    __dp=0x00000000
[04:03:23.944]    __ap=0x00000000
[04:03:23.944]    __traceout=0x00000000      (Trace Disabled)
[04:03:23.944]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:03:23.944]    __FlashAddr=0x00000000
[04:03:23.944]    __FlashLen=0x00000000
[04:03:23.944]    __FlashArg=0x00000000
[04:03:23.945]    __FlashOp=0x00000000
[04:03:23.945]    __Result=0x00000000
[04:03:23.945]  </debugvars>
[04:03:23.945]  
[04:03:23.945]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:03:23.945]    <block atomic="false" info="">
[04:03:23.946]      __var deviceID = 0;
[04:03:23.946]        // -> [deviceID <= 0x00000000]
[04:03:23.946]      __var version = 0;
[04:03:23.946]        // -> [version <= 0x00000000]
[04:03:23.946]      __var partNum = 0;
[04:03:23.946]        // -> [partNum <= 0x00000000]
[04:03:23.946]      __var manuf = 0;
[04:03:23.946]        // -> [manuf <= 0x00000000]
[04:03:23.946]      __var isMSPM0G1X0X_G3X0X = 0;
[04:03:23.946]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:03:23.946]      __var isProduction = 0;
[04:03:23.947]        // -> [isProduction <= 0x00000000]
[04:03:23.947]      __var continueId = 0;
[04:03:23.947]        // -> [continueId <= 0x00000000]
[04:03:23.947]      deviceID =   Read32(0x41C40004);
[04:03:23.957]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:03:23.957]        // -> [deviceID <= 0x2BB8802F]
[04:03:23.957]      version = deviceID >> 28;
[04:03:23.958]        // -> [version <= 0x00000002]
[04:03:23.958]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:03:23.958]        // -> [partNum <= 0x0000BB88]
[04:03:23.958]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:03:23.958]        // -> [manuf <= 0x00000017]
[04:03:23.958]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:03:23.958]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:03:23.958]      isProduction = (version > 0);
[04:03:23.958]        // -> [isProduction <= 0x00000001]
[04:03:23.958]    </block>
[04:03:23.958]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:03:23.958]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:03:23.958]        // =>  FALSE
[04:03:23.958]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:03:23.958]    </control>
[04:03:23.958]    <control if="continueId == 4" while="" timeout="0" info="">
[04:03:23.958]      // if-block "continueId == 4"
[04:03:23.958]        // =>  FALSE
[04:03:23.958]      // skip if-block "continueId == 4"
[04:03:23.959]    </control>
[04:03:23.959]    <control if="!isProduction" while="" timeout="0" info="">
[04:03:23.959]      // if-block "!isProduction"
[04:03:23.959]        // =>  FALSE
[04:03:23.959]      // skip if-block "!isProduction"
[04:03:23.959]    </control>
[04:03:23.960]  </sequence>
[04:03:23.960]  
[04:04:18.840]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:04:18.840]  
[04:04:18.840]  <debugvars>
[04:04:18.840]    // Pre-defined
[04:04:18.840]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:18.840]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:18.840]    __dp=0x00000000
[04:04:18.840]    __ap=0x00000000
[04:04:18.840]    __traceout=0x00000000      (Trace Disabled)
[04:04:18.840]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:18.840]    __FlashAddr=0x00000000
[04:04:18.840]    __FlashLen=0x00000000
[04:04:18.840]    __FlashArg=0x00000000
[04:04:18.840]    __FlashOp=0x00000000
[04:04:18.840]    __Result=0x00000000
[04:04:18.840]  </debugvars>
[04:04:18.840]  
[04:04:18.840]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:04:18.840]    <block atomic="false" info="">
[04:04:18.840]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:04:18.840]        // -> [isSWJ <= 0x00000001]
[04:04:18.840]      __var hasDormant = __protocol & 0x00020000;
[04:04:18.840]        // -> [hasDormant <= 0x00000000]
[04:04:18.840]      __var protType   = __protocol & 0x0000FFFF;
[04:04:18.840]        // -> [protType <= 0x00000002]
[04:04:18.840]    </block>
[04:04:18.840]    <control if="protType == 1" while="" timeout="0" info="">
[04:04:18.840]      // if-block "protType == 1"
[04:04:18.840]        // =>  FALSE
[04:04:18.844]      // skip if-block "protType == 1"
[04:04:18.844]    </control>
[04:04:18.844]    <control if="protType == 2" while="" timeout="0" info="">
[04:04:18.844]      // if-block "protType == 2"
[04:04:18.844]        // =>  TRUE
[04:04:18.844]      <control if="isSWJ" while="" timeout="0" info="">
[04:04:18.844]        // if-block "isSWJ"
[04:04:18.844]          // =>  TRUE
[04:04:18.844]        <control if="hasDormant" while="" timeout="0" info="">
[04:04:18.844]          // if-block "hasDormant"
[04:04:18.844]            // =>  FALSE
[04:04:18.844]          // skip if-block "hasDormant"
[04:04:18.844]        </control>
[04:04:18.844]        <control if="!hasDormant" while="" timeout="0" info="">
[04:04:18.844]          // if-block "!hasDormant"
[04:04:18.844]            // =>  TRUE
[04:04:18.844]          <block atomic="false" info="">
[04:04:18.844]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:04:18.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:18.848]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:04:18.848]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:04:18.848]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:04:18.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:18.852]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:04:18.852]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:04:18.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:04:18.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:18.856]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:04:18.858]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:04:18.858]          </block>
[04:04:18.858]          // end if-block "!hasDormant"
[04:04:18.858]        </control>
[04:04:18.858]        // end if-block "isSWJ"
[04:04:18.858]      </control>
[04:04:18.858]      <control if="!isSWJ" while="" timeout="0" info="">
[04:04:18.858]        // if-block "!isSWJ"
[04:04:18.858]          // =>  FALSE
[04:04:18.858]        // skip if-block "!isSWJ"
[04:04:18.858]      </control>
[04:04:18.858]      <block atomic="false" info="">
[04:04:18.858]        ReadDP(0x0);
[04:04:18.860]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:04:18.860]      </block>
[04:04:18.860]      // end if-block "protType == 2"
[04:04:18.860]    </control>
[04:04:18.860]  </sequence>
[04:04:18.860]  
[04:04:18.864]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:04:18.864]  
[04:04:18.864]  <debugvars>
[04:04:18.864]    // Pre-defined
[04:04:18.864]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:18.864]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:18.864]    __dp=0x00000000
[04:04:18.864]    __ap=0x00000000
[04:04:18.864]    __traceout=0x00000000      (Trace Disabled)
[04:04:18.864]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:18.864]    __FlashAddr=0x00000000
[04:04:18.864]    __FlashLen=0x00000000
[04:04:18.864]    __FlashArg=0x00000000
[04:04:18.864]    __FlashOp=0x00000000
[04:04:18.868]    __Result=0x00000000
[04:04:18.868]  </debugvars>
[04:04:18.868]  
[04:04:18.868]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:04:18.868]    <block atomic="false" info="">
[04:04:18.868]      __var SW_DP_ABORT       = 0x0;
[04:04:18.868]        // -> [SW_DP_ABORT <= 0x00000000]
[04:04:18.868]      __var DP_CTRL_STAT      = 0x4;
[04:04:18.868]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:04:18.868]      __var DP_SELECT         = 0x8;
[04:04:18.868]        // -> [DP_SELECT <= 0x00000008]
[04:04:18.868]      __var powered_down      = 0;
[04:04:18.869]        // -> [powered_down <= 0x00000000]
[04:04:18.869]      WriteDP(DP_SELECT, 0x00000000);
[04:04:18.870]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:04:18.870]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:04:18.872]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:04:18.872]        // -> [powered_down <= 0x00000001]
[04:04:18.872]    </block>
[04:04:18.872]    <control if="powered_down" while="" timeout="0" info="">
[04:04:18.872]      // if-block "powered_down"
[04:04:18.872]        // =>  TRUE
[04:04:18.872]      <block atomic="false" info="">
[04:04:18.872]        Message(0, "Debug/System power-up request sent");
[04:04:18.872]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:04:18.876]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:04:18.876]      </block>
[04:04:18.876]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:04:18.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:04:18.878]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:04:18.878]        // while-condition  =>  FALSE
[04:04:18.878]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:04:18.878]      </control>
[04:04:18.878]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:04:18.878]        // if-block "(__protocol & 0xFFFF) == 1"
[04:04:18.878]          // =>  FALSE
[04:04:18.878]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:04:18.878]      </control>
[04:04:18.878]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:04:18.878]        // if-block "(__protocol & 0xFFFF) == 2"
[04:04:18.878]          // =>  TRUE
[04:04:18.878]        <block atomic="false" info="">
[04:04:18.878]          Message(0, "executing SWD power up");
[04:04:18.880]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:04:18.880]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:04:18.880]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:04:18.884]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:04:18.884]        </block>
[04:04:18.884]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:04:18.884]      </control>
[04:04:18.884]      // end if-block "powered_down"
[04:04:18.884]    </control>
[04:04:18.884]    <block atomic="false" info="">
[04:04:18.884]      __var DEBUG_PORT_VAL    = 0;
[04:04:18.884]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:04:18.888]      __var ACCESS_POINT_VAL  = 0;
[04:04:18.888]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:04:18.888]      __ap = 1; 
[04:04:18.888]        // -> [__ap <= 0x00000001]
[04:04:18.888]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:04:18.892]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:04:18.892]      __ap = 4;
[04:04:18.892]        // -> [__ap <= 0x00000004]
[04:04:18.892]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:04:18.894]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:04:18.894]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:04:18.894]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:04:18.897]    </block>
[04:04:18.897]    <block atomic="false" info="">
[04:04:18.897]      __var nReset = 0x80;
[04:04:18.897]        // -> [nReset <= 0x00000080]
[04:04:18.897]      __var canReadPins = 0;
[04:04:18.897]        // -> [canReadPins <= 0x00000000]
[04:04:18.897]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:04:18.897]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:04:18.897]        // -> [canReadPins <= 0x00000001]
[04:04:18.897]    </block>
[04:04:18.897]    <control if="" while="1" timeout="200" info="">
[04:04:18.897]      // while "1"  (timeout="200")
[04:04:18.897]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.901]      // while-condition  =>  TRUE
[04:04:18.901]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.905]      // while "1"  (timeout="200")
[04:04:18.905]      // while-condition  =>  TRUE
[04:04:18.909]      // while "1"  (timeout="200")
[04:04:18.909]      // while  =>  TIMEOUT
[04:04:18.909]      // end while "1"
[04:04:18.909]    </control>
[04:04:18.909]    <control if="canReadPins" while="" timeout="0" info="">
[04:04:18.909]      // if-block "canReadPins"
[04:04:18.909]        // =>  TRUE
[04:04:18.909]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:04:18.909]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:04:18.909]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:04:18.909]        // while-condition  =>  FALSE
[04:04:18.909]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:04:18.909]      </control>
[04:04:18.909]      // end if-block "canReadPins"
[04:04:18.909]    </control>
[04:04:18.909]    <control if="!canReadPins" while="" timeout="0" info="">
[04:04:18.909]      // if-block "!canReadPins"
[04:04:18.909]        // =>  FALSE
[04:04:18.909]      // skip if-block "!canReadPins"
[04:04:18.909]    </control>
[04:04:18.909]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:04:18.909]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:04:18.909]        // =>  TRUE
[04:04:18.909]      <block atomic="false" info="">
[04:04:18.909]        WriteAP(0x00, 0x190008);
[04:04:18.913]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:04:18.913]        WriteAP(0xF0, 0x01);
[04:04:18.917]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:04:18.917]      </block>
[04:04:18.917]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:04:18.918]    </control>
[04:04:18.918]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:04:18.918]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:04:18.918]        // =>  FALSE
[04:04:18.918]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:04:18.918]    </control>
[04:04:18.918]    <block atomic="false" info="">
[04:04:18.918]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:04:18.921]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:04:18.921]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:04:18.921]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:04:18.921]      __ap = 0; //lets make sure we reset the access point selection
[04:04:18.925]        // -> [__ap <= 0x00000000]
[04:04:18.925]    </block>
[04:04:18.925]  </sequence>
[04:04:18.925]  
[04:04:18.944]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:04:18.944]  
[04:04:18.944]  <debugvars>
[04:04:18.944]    // Pre-defined
[04:04:18.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:18.944]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:18.944]    __dp=0x00000000
[04:04:18.944]    __ap=0x00000000
[04:04:18.944]    __traceout=0x00000000      (Trace Disabled)
[04:04:18.944]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:18.944]    __FlashAddr=0x00000000
[04:04:18.944]    __FlashLen=0x00000000
[04:04:18.944]    __FlashArg=0x00000000
[04:04:18.944]    __FlashOp=0x00000000
[04:04:18.945]    __Result=0x00000000
[04:04:18.945]  </debugvars>
[04:04:18.945]  
[04:04:18.945]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:04:18.945]    <block atomic="false" info="">
[04:04:18.945]      __var deviceID = 0;
[04:04:18.945]        // -> [deviceID <= 0x00000000]
[04:04:18.945]      __var version = 0;
[04:04:18.945]        // -> [version <= 0x00000000]
[04:04:18.945]      __var partNum = 0;
[04:04:18.946]        // -> [partNum <= 0x00000000]
[04:04:18.946]      __var manuf = 0;
[04:04:18.946]        // -> [manuf <= 0x00000000]
[04:04:18.946]      __var isMSPM0G1X0X_G3X0X = 0;
[04:04:18.946]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:04:18.946]      __var isProduction = 0;
[04:04:18.946]        // -> [isProduction <= 0x00000000]
[04:04:18.946]      __var continueId = 0;
[04:04:18.946]        // -> [continueId <= 0x00000000]
[04:04:18.946]      deviceID =   Read32(0x41C40004);
[04:04:18.952]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:04:18.952]        // -> [deviceID <= 0x2BB8802F]
[04:04:18.952]      version = deviceID >> 28;
[04:04:18.952]        // -> [version <= 0x00000002]
[04:04:18.952]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:04:18.952]        // -> [partNum <= 0x0000BB88]
[04:04:18.952]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:04:18.952]        // -> [manuf <= 0x00000017]
[04:04:18.952]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:04:18.952]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:04:18.952]      isProduction = (version > 0);
[04:04:18.952]        // -> [isProduction <= 0x00000001]
[04:04:18.953]    </block>
[04:04:18.953]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:04:18.953]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:04:18.953]        // =>  FALSE
[04:04:18.953]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:04:18.953]    </control>
[04:04:18.953]    <control if="continueId == 4" while="" timeout="0" info="">
[04:04:18.953]      // if-block "continueId == 4"
[04:04:18.954]        // =>  FALSE
[04:04:18.954]      // skip if-block "continueId == 4"
[04:04:18.954]    </control>
[04:04:18.954]    <control if="!isProduction" while="" timeout="0" info="">
[04:04:18.954]      // if-block "!isProduction"
[04:04:18.954]        // =>  FALSE
[04:04:18.954]      // skip if-block "!isProduction"
[04:04:18.954]    </control>
[04:04:18.954]  </sequence>
[04:04:18.954]  
[04:04:41.444]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:04:41.444]  
[04:04:41.451]  <debugvars>
[04:04:41.451]    // Pre-defined
[04:04:41.451]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:41.451]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:41.451]    __dp=0x00000000
[04:04:41.451]    __ap=0x00000000
[04:04:41.451]    __traceout=0x00000000      (Trace Disabled)
[04:04:41.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:41.451]    __FlashAddr=0x00000000
[04:04:41.451]    __FlashLen=0x00000000
[04:04:41.451]    __FlashArg=0x00000000
[04:04:41.451]    __FlashOp=0x00000000
[04:04:41.451]    __Result=0x00000000
[04:04:41.451]  </debugvars>
[04:04:41.451]  
[04:04:41.451]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:04:41.451]    <block atomic="false" info="">
[04:04:41.451]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:04:41.451]        // -> [isSWJ <= 0x00000001]
[04:04:41.451]      __var hasDormant = __protocol & 0x00020000;
[04:04:41.451]        // -> [hasDormant <= 0x00000000]
[04:04:41.454]      __var protType   = __protocol & 0x0000FFFF;
[04:04:41.454]        // -> [protType <= 0x00000002]
[04:04:41.454]    </block>
[04:04:41.454]    <control if="protType == 1" while="" timeout="0" info="">
[04:04:41.454]      // if-block "protType == 1"
[04:04:41.454]        // =>  FALSE
[04:04:41.454]      // skip if-block "protType == 1"
[04:04:41.454]    </control>
[04:04:41.454]    <control if="protType == 2" while="" timeout="0" info="">
[04:04:41.454]      // if-block "protType == 2"
[04:04:41.454]        // =>  TRUE
[04:04:41.454]      <control if="isSWJ" while="" timeout="0" info="">
[04:04:41.454]        // if-block "isSWJ"
[04:04:41.454]          // =>  TRUE
[04:04:41.454]        <control if="hasDormant" while="" timeout="0" info="">
[04:04:41.454]          // if-block "hasDormant"
[04:04:41.454]            // =>  FALSE
[04:04:41.456]          // skip if-block "hasDormant"
[04:04:41.456]        </control>
[04:04:41.456]        <control if="!hasDormant" while="" timeout="0" info="">
[04:04:41.456]          // if-block "!hasDormant"
[04:04:41.456]            // =>  TRUE
[04:04:41.456]          <block atomic="false" info="">
[04:04:41.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:04:41.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:41.456]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:04:41.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:04:41.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:04:41.463]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:41.463]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:04:41.463]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:04:41.463]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:04:41.467]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:41.467]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:04:41.468]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:04:41.468]          </block>
[04:04:41.468]          // end if-block "!hasDormant"
[04:04:41.468]        </control>
[04:04:41.468]        // end if-block "isSWJ"
[04:04:41.468]      </control>
[04:04:41.468]      <control if="!isSWJ" while="" timeout="0" info="">
[04:04:41.468]        // if-block "!isSWJ"
[04:04:41.468]          // =>  FALSE
[04:04:41.468]        // skip if-block "!isSWJ"
[04:04:41.469]      </control>
[04:04:41.469]      <block atomic="false" info="">
[04:04:41.469]        ReadDP(0x0);
[04:04:41.469]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:04:41.469]      </block>
[04:04:41.469]      // end if-block "protType == 2"
[04:04:41.469]    </control>
[04:04:41.469]  </sequence>
[04:04:41.469]  
[04:04:41.472]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:04:41.472]  
[04:04:41.472]  <debugvars>
[04:04:41.472]    // Pre-defined
[04:04:41.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:41.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:41.472]    __dp=0x00000000
[04:04:41.472]    __ap=0x00000000
[04:04:41.472]    __traceout=0x00000000      (Trace Disabled)
[04:04:41.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:41.472]    __FlashAddr=0x00000000
[04:04:41.472]    __FlashLen=0x00000000
[04:04:41.472]    __FlashArg=0x00000000
[04:04:41.472]    __FlashOp=0x00000000
[04:04:41.472]    __Result=0x00000000
[04:04:41.472]  </debugvars>
[04:04:41.472]  
[04:04:41.472]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:04:41.472]    <block atomic="false" info="">
[04:04:41.472]      __var SW_DP_ABORT       = 0x0;
[04:04:41.472]        // -> [SW_DP_ABORT <= 0x00000000]
[04:04:41.476]      __var DP_CTRL_STAT      = 0x4;
[04:04:41.476]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:04:41.476]      __var DP_SELECT         = 0x8;
[04:04:41.476]        // -> [DP_SELECT <= 0x00000008]
[04:04:41.476]      __var powered_down      = 0;
[04:04:41.476]        // -> [powered_down <= 0x00000000]
[04:04:41.476]      WriteDP(DP_SELECT, 0x00000000);
[04:04:41.477]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:04:41.477]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:04:41.479]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:04:41.479]        // -> [powered_down <= 0x00000001]
[04:04:41.479]    </block>
[04:04:41.479]    <control if="powered_down" while="" timeout="0" info="">
[04:04:41.480]      // if-block "powered_down"
[04:04:41.480]        // =>  TRUE
[04:04:41.480]      <block atomic="false" info="">
[04:04:41.480]        Message(0, "Debug/System power-up request sent");
[04:04:41.481]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:04:41.484]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:04:41.484]      </block>
[04:04:41.484]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:04:41.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:04:41.484]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:04:41.484]        // while-condition  =>  FALSE
[04:04:41.484]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:04:41.484]      </control>
[04:04:41.484]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:04:41.484]        // if-block "(__protocol & 0xFFFF) == 1"
[04:04:41.486]          // =>  FALSE
[04:04:41.486]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:04:41.486]      </control>
[04:04:41.486]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:04:41.486]        // if-block "(__protocol & 0xFFFF) == 2"
[04:04:41.486]          // =>  TRUE
[04:04:41.486]        <block atomic="false" info="">
[04:04:41.486]          Message(0, "executing SWD power up");
[04:04:41.489]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:04:41.493]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:04:41.493]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:04:41.498]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:04:41.498]        </block>
[04:04:41.498]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:04:41.498]      </control>
[04:04:41.498]      // end if-block "powered_down"
[04:04:41.498]    </control>
[04:04:41.498]    <block atomic="false" info="">
[04:04:41.498]      __var DEBUG_PORT_VAL    = 0;
[04:04:41.498]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:04:41.498]      __var ACCESS_POINT_VAL  = 0;
[04:04:41.499]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:04:41.499]      __ap = 1; 
[04:04:41.499]        // -> [__ap <= 0x00000001]
[04:04:41.499]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:04:41.502]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:04:41.502]      __ap = 4;
[04:04:41.502]        // -> [__ap <= 0x00000004]
[04:04:41.502]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:04:41.507]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:04:41.507]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:04:41.507]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:04:41.508]    </block>
[04:04:41.508]    <block atomic="false" info="">
[04:04:41.508]      __var nReset = 0x80;
[04:04:41.508]        // -> [nReset <= 0x00000080]
[04:04:41.509]      __var canReadPins = 0;
[04:04:41.509]        // -> [canReadPins <= 0x00000000]
[04:04:41.509]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:04:41.509]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:04:41.509]        // -> [canReadPins <= 0x00000001]
[04:04:41.509]    </block>
[04:04:41.509]    <control if="" while="1" timeout="200" info="">
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.509]      // while "1"  (timeout="200")
[04:04:41.509]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.513]      // while "1"  (timeout="200")
[04:04:41.513]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.514]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.514]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.514]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.514]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.514]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.514]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.514]      // while-condition  =>  TRUE
[04:04:41.514]      // while "1"  (timeout="200")
[04:04:41.516]      // while-condition  =>  TRUE
[04:04:41.516]      // while "1"  (timeout="200")
[04:04:41.516]      // while-condition  =>  TRUE
[04:04:41.516]      // while "1"  (timeout="200")
[04:04:41.516]      // while-condition  =>  TRUE
[04:04:41.516]      // while "1"  (timeout="200")
[04:04:41.516]      // while-condition  =>  TRUE
[04:04:41.516]      // while "1"  (timeout="200")
[04:04:41.516]      // while-condition  =>  TRUE
[04:04:41.516]      // while "1"  (timeout="200")
[04:04:41.516]      // while-condition  =>  TRUE
[04:04:41.517]      // while "1"  (timeout="200")
[04:04:41.517]      // while  =>  TIMEOUT
[04:04:41.517]      // end while "1"
[04:04:41.517]    </control>
[04:04:41.517]    <control if="canReadPins" while="" timeout="0" info="">
[04:04:41.517]      // if-block "canReadPins"
[04:04:41.517]        // =>  TRUE
[04:04:41.517]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:04:41.517]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:04:41.518]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:04:41.519]        // while-condition  =>  FALSE
[04:04:41.519]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:04:41.519]      </control>
[04:04:41.519]      // end if-block "canReadPins"
[04:04:41.519]    </control>
[04:04:41.519]    <control if="!canReadPins" while="" timeout="0" info="">
[04:04:41.519]      // if-block "!canReadPins"
[04:04:41.519]        // =>  FALSE
[04:04:41.519]      // skip if-block "!canReadPins"
[04:04:41.519]    </control>
[04:04:41.521]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:04:41.521]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:04:41.521]        // =>  TRUE
[04:04:41.521]      <block atomic="false" info="">
[04:04:41.521]        WriteAP(0x00, 0x190008);
[04:04:41.522]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:04:41.522]        WriteAP(0xF0, 0x01);
[04:04:41.525]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:04:41.525]      </block>
[04:04:41.525]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:04:41.525]    </control>
[04:04:41.525]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:04:41.525]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:04:41.525]        // =>  FALSE
[04:04:41.525]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:04:41.527]    </control>
[04:04:41.527]    <block atomic="false" info="">
[04:04:41.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:04:41.530]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:04:41.530]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:04:41.530]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:04:41.532]      __ap = 0; //lets make sure we reset the access point selection
[04:04:41.532]        // -> [__ap <= 0x00000000]
[04:04:41.532]    </block>
[04:04:41.532]  </sequence>
[04:04:41.532]  
[04:04:41.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:04:41.552]  
[04:04:41.552]  <debugvars>
[04:04:41.552]    // Pre-defined
[04:04:41.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:41.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:41.554]    __dp=0x00000000
[04:04:41.554]    __ap=0x00000000
[04:04:41.554]    __traceout=0x00000000      (Trace Disabled)
[04:04:41.554]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:41.554]    __FlashAddr=0x00000000
[04:04:41.554]    __FlashLen=0x00000000
[04:04:41.554]    __FlashArg=0x00000000
[04:04:41.554]    __FlashOp=0x00000000
[04:04:41.554]    __Result=0x00000000
[04:04:41.554]  </debugvars>
[04:04:41.554]  
[04:04:41.554]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:04:41.554]    <block atomic="false" info="">
[04:04:41.554]      __var deviceID = 0;
[04:04:41.554]        // -> [deviceID <= 0x00000000]
[04:04:41.554]      __var version = 0;
[04:04:41.554]        // -> [version <= 0x00000000]
[04:04:41.554]      __var partNum = 0;
[04:04:41.554]        // -> [partNum <= 0x00000000]
[04:04:41.556]      __var manuf = 0;
[04:04:41.556]        // -> [manuf <= 0x00000000]
[04:04:41.556]      __var isMSPM0G1X0X_G3X0X = 0;
[04:04:41.556]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:04:41.556]      __var isProduction = 0;
[04:04:41.556]        // -> [isProduction <= 0x00000000]
[04:04:41.556]      __var continueId = 0;
[04:04:41.556]        // -> [continueId <= 0x00000000]
[04:04:41.556]      deviceID =   Read32(0x41C40004);
[04:04:41.563]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:04:41.563]        // -> [deviceID <= 0x2BB8802F]
[04:04:41.563]      version = deviceID >> 28;
[04:04:41.563]        // -> [version <= 0x00000002]
[04:04:41.563]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:04:41.563]        // -> [partNum <= 0x0000BB88]
[04:04:41.563]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:04:41.563]        // -> [manuf <= 0x00000017]
[04:04:41.563]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:04:41.563]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:04:41.563]      isProduction = (version > 0);
[04:04:41.563]        // -> [isProduction <= 0x00000001]
[04:04:41.563]    </block>
[04:04:41.563]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:04:41.563]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:04:41.563]        // =>  FALSE
[04:04:41.563]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:04:41.563]    </control>
[04:04:41.563]    <control if="continueId == 4" while="" timeout="0" info="">
[04:04:41.563]      // if-block "continueId == 4"
[04:04:41.563]        // =>  FALSE
[04:04:41.566]      // skip if-block "continueId == 4"
[04:04:41.566]    </control>
[04:04:41.566]    <control if="!isProduction" while="" timeout="0" info="">
[04:04:41.566]      // if-block "!isProduction"
[04:04:41.566]        // =>  FALSE
[04:04:41.566]      // skip if-block "!isProduction"
[04:04:41.566]    </control>
[04:04:41.567]  </sequence>
[04:04:41.567]  
[04:06:05.038]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:06:05.038]  
[04:06:05.038]  <debugvars>
[04:06:05.038]    // Pre-defined
[04:06:05.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:05.038]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:06:05.038]    __dp=0x00000000
[04:06:05.038]    __ap=0x00000000
[04:06:05.038]    __traceout=0x00000000      (Trace Disabled)
[04:06:05.038]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:05.038]    __FlashAddr=0x00000000
[04:06:05.038]    __FlashLen=0x00000000
[04:06:05.038]    __FlashArg=0x00000000
[04:06:05.038]    __FlashOp=0x00000000
[04:06:05.038]    __Result=0x00000000
[04:06:05.038]  </debugvars>
[04:06:05.038]  
[04:06:05.038]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:06:05.038]    <block atomic="false" info="">
[04:06:05.038]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:06:05.038]        // -> [isSWJ <= 0x00000001]
[04:06:05.038]      __var hasDormant = __protocol & 0x00020000;
[04:06:05.038]        // -> [hasDormant <= 0x00000000]
[04:06:05.038]      __var protType   = __protocol & 0x0000FFFF;
[04:06:05.038]        // -> [protType <= 0x00000002]
[04:06:05.038]    </block>
[04:06:05.038]    <control if="protType == 1" while="" timeout="0" info="">
[04:06:05.038]      // if-block "protType == 1"
[04:06:05.038]        // =>  FALSE
[04:06:05.038]      // skip if-block "protType == 1"
[04:06:05.038]    </control>
[04:06:05.038]    <control if="protType == 2" while="" timeout="0" info="">
[04:06:05.038]      // if-block "protType == 2"
[04:06:05.038]        // =>  TRUE
[04:06:05.042]      <control if="isSWJ" while="" timeout="0" info="">
[04:06:05.042]        // if-block "isSWJ"
[04:06:05.042]          // =>  TRUE
[04:06:05.042]        <control if="hasDormant" while="" timeout="0" info="">
[04:06:05.042]          // if-block "hasDormant"
[04:06:05.042]            // =>  FALSE
[04:06:05.042]          // skip if-block "hasDormant"
[04:06:05.042]        </control>
[04:06:05.042]        <control if="!hasDormant" while="" timeout="0" info="">
[04:06:05.042]          // if-block "!hasDormant"
[04:06:05.042]            // =>  TRUE
[04:06:05.042]          <block atomic="false" info="">
[04:06:05.042]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:06:05.044]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:06:05.044]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:06:05.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:06:05.046]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:06:05.046]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:06:05.046]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:06:05.046]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:06:05.046]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:06:05.050]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:06:05.050]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:06:05.054]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:06:05.054]          </block>
[04:06:05.054]          // end if-block "!hasDormant"
[04:06:05.054]        </control>
[04:06:05.054]        // end if-block "isSWJ"
[04:06:05.054]      </control>
[04:06:05.054]      <control if="!isSWJ" while="" timeout="0" info="">
[04:06:05.054]        // if-block "!isSWJ"
[04:06:05.054]          // =>  FALSE
[04:06:05.054]        // skip if-block "!isSWJ"
[04:06:05.054]      </control>
[04:06:05.054]      <block atomic="false" info="">
[04:06:05.054]        ReadDP(0x0);
[04:06:05.059]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:06:05.059]      </block>
[04:06:05.059]      // end if-block "protType == 2"
[04:06:05.059]    </control>
[04:06:05.059]  </sequence>
[04:06:05.059]  
[04:06:05.059]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:06:05.059]  
[04:06:05.059]  <debugvars>
[04:06:05.063]    // Pre-defined
[04:06:05.063]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:05.063]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:06:05.063]    __dp=0x00000000
[04:06:05.063]    __ap=0x00000000
[04:06:05.063]    __traceout=0x00000000      (Trace Disabled)
[04:06:05.063]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:05.063]    __FlashAddr=0x00000000
[04:06:05.063]    __FlashLen=0x00000000
[04:06:05.063]    __FlashArg=0x00000000
[04:06:05.063]    __FlashOp=0x00000000
[04:06:05.063]    __Result=0x00000000
[04:06:05.063]  </debugvars>
[04:06:05.065]  
[04:06:05.065]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:06:05.065]    <block atomic="false" info="">
[04:06:05.065]      __var SW_DP_ABORT       = 0x0;
[04:06:05.065]        // -> [SW_DP_ABORT <= 0x00000000]
[04:06:05.065]      __var DP_CTRL_STAT      = 0x4;
[04:06:05.065]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:06:05.065]      __var DP_SELECT         = 0x8;
[04:06:05.065]        // -> [DP_SELECT <= 0x00000008]
[04:06:05.065]      __var powered_down      = 0;
[04:06:05.065]        // -> [powered_down <= 0x00000000]
[04:06:05.066]      WriteDP(DP_SELECT, 0x00000000);
[04:06:05.067]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:06:05.067]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:06:05.067]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:06:05.067]        // -> [powered_down <= 0x00000001]
[04:06:05.067]    </block>
[04:06:05.067]    <control if="powered_down" while="" timeout="0" info="">
[04:06:05.067]      // if-block "powered_down"
[04:06:05.067]        // =>  TRUE
[04:06:05.067]      <block atomic="false" info="">
[04:06:05.067]        Message(0, "Debug/System power-up request sent");
[04:06:05.071]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:06:05.071]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:06:05.071]      </block>
[04:06:05.071]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:06:05.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:06:05.075]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:06:05.075]        // while-condition  =>  FALSE
[04:06:05.075]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:06:05.075]      </control>
[04:06:05.075]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:06:05.075]        // if-block "(__protocol & 0xFFFF) == 1"
[04:06:05.075]          // =>  FALSE
[04:06:05.075]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:06:05.075]      </control>
[04:06:05.075]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:06:05.075]        // if-block "(__protocol & 0xFFFF) == 2"
[04:06:05.075]          // =>  TRUE
[04:06:05.075]        <block atomic="false" info="">
[04:06:05.075]          Message(0, "executing SWD power up");
[04:06:05.075]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:06:05.080]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:06:05.080]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:06:05.080]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:06:05.080]        </block>
[04:06:05.080]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:06:05.080]      </control>
[04:06:05.080]      // end if-block "powered_down"
[04:06:05.084]    </control>
[04:06:05.084]    <block atomic="false" info="">
[04:06:05.084]      __var DEBUG_PORT_VAL    = 0;
[04:06:05.084]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:06:05.084]      __var ACCESS_POINT_VAL  = 0;
[04:06:05.084]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:06:05.084]      __ap = 1; 
[04:06:05.084]        // -> [__ap <= 0x00000001]
[04:06:05.085]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:06:05.088]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:06:05.088]      __ap = 4;
[04:06:05.088]        // -> [__ap <= 0x00000004]
[04:06:05.088]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:06:05.088]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:06:05.088]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:06:05.088]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:06:05.092]    </block>
[04:06:05.092]    <block atomic="false" info="">
[04:06:05.092]      __var nReset = 0x80;
[04:06:05.092]        // -> [nReset <= 0x00000080]
[04:06:05.092]      __var canReadPins = 0;
[04:06:05.092]        // -> [canReadPins <= 0x00000000]
[04:06:05.092]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:06:05.096]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:06:05.096]        // -> [canReadPins <= 0x00000001]
[04:06:05.096]    </block>
[04:06:05.096]    <control if="" while="1" timeout="200" info="">
[04:06:05.096]      // while "1"  (timeout="200")
[04:06:05.096]      // while-condition  =>  TRUE
[04:06:05.096]      // while "1"  (timeout="200")
[04:06:05.096]      // while-condition  =>  TRUE
[04:06:05.096]      // while "1"  (timeout="200")
[04:06:05.096]      // while-condition  =>  TRUE
[04:06:05.096]      // while "1"  (timeout="200")
[04:06:05.096]      // while-condition  =>  TRUE
[04:06:05.096]      // while "1"  (timeout="200")
[04:06:05.096]      // while-condition  =>  TRUE
[04:06:05.096]      // while "1"  (timeout="200")
[04:06:05.096]      // while-condition  =>  TRUE
[04:06:05.096]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.098]      // while "1"  (timeout="200")
[04:06:05.098]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.100]      // while-condition  =>  TRUE
[04:06:05.100]      // while "1"  (timeout="200")
[04:06:05.105]      // while-condition  =>  TRUE
[04:06:05.105]      // while "1"  (timeout="200")
[04:06:05.105]      // while-condition  =>  TRUE
[04:06:05.105]      // while "1"  (timeout="200")
[04:06:05.105]      // while-condition  =>  TRUE
[04:06:05.105]      // while "1"  (timeout="200")
[04:06:05.105]      // while-condition  =>  TRUE
[04:06:05.105]      // while "1"  (timeout="200")
[04:06:05.105]      // while-condition  =>  TRUE
[04:06:05.105]      // while "1"  (timeout="200")
[04:06:05.105]      // while-condition  =>  TRUE
[04:06:05.105]      // while "1"  (timeout="200")
[04:06:05.105]      // while-condition  =>  TRUE
[04:06:05.105]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.106]      // while-condition  =>  TRUE
[04:06:05.106]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.109]      // while "1"  (timeout="200")
[04:06:05.109]      // while-condition  =>  TRUE
[04:06:05.113]      // while "1"  (timeout="200")
[04:06:05.113]      // while  =>  TIMEOUT
[04:06:05.113]      // end while "1"
[04:06:05.113]    </control>
[04:06:05.113]    <control if="canReadPins" while="" timeout="0" info="">
[04:06:05.113]      // if-block "canReadPins"
[04:06:05.113]        // =>  TRUE
[04:06:05.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:06:05.113]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:06:05.114]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:06:05.114]        // while-condition  =>  FALSE
[04:06:05.114]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:06:05.114]      </control>
[04:06:05.114]      // end if-block "canReadPins"
[04:06:05.114]    </control>
[04:06:05.114]    <control if="!canReadPins" while="" timeout="0" info="">
[04:06:05.114]      // if-block "!canReadPins"
[04:06:05.114]        // =>  FALSE
[04:06:05.114]      // skip if-block "!canReadPins"
[04:06:05.114]    </control>
[04:06:05.114]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:06:05.114]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:06:05.114]        // =>  TRUE
[04:06:05.114]      <block atomic="false" info="">
[04:06:05.114]        WriteAP(0x00, 0x190008);
[04:06:05.118]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:06:05.118]        WriteAP(0xF0, 0x01);
[04:06:05.121]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:06:05.121]      </block>
[04:06:05.121]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:06:05.121]    </control>
[04:06:05.121]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:06:05.121]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:06:05.121]        // =>  FALSE
[04:06:05.121]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:06:05.123]    </control>
[04:06:05.123]    <block atomic="false" info="">
[04:06:05.123]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:06:05.126]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:06:05.126]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:06:05.126]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:06:05.128]      __ap = 0; //lets make sure we reset the access point selection
[04:06:05.128]        // -> [__ap <= 0x00000000]
[04:06:05.128]    </block>
[04:06:05.128]  </sequence>
[04:06:05.128]  
[04:06:05.146]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:06:05.146]  
[04:06:05.146]  <debugvars>
[04:06:05.146]    // Pre-defined
[04:06:05.146]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:05.146]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:06:05.146]    __dp=0x00000000
[04:06:05.146]    __ap=0x00000000
[04:06:05.146]    __traceout=0x00000000      (Trace Disabled)
[04:06:05.146]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:05.146]    __FlashAddr=0x00000000
[04:06:05.146]    __FlashLen=0x00000000
[04:06:05.146]    __FlashArg=0x00000000
[04:06:05.146]    __FlashOp=0x00000000
[04:06:05.146]    __Result=0x00000000
[04:06:05.146]  </debugvars>
[04:06:05.146]  
[04:06:05.146]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:06:05.146]    <block atomic="false" info="">
[04:06:05.146]      __var deviceID = 0;
[04:06:05.146]        // -> [deviceID <= 0x00000000]
[04:06:05.146]      __var version = 0;
[04:06:05.146]        // -> [version <= 0x00000000]
[04:06:05.146]      __var partNum = 0;
[04:06:05.146]        // -> [partNum <= 0x00000000]
[04:06:05.146]      __var manuf = 0;
[04:06:05.146]        // -> [manuf <= 0x00000000]
[04:06:05.146]      __var isMSPM0G1X0X_G3X0X = 0;
[04:06:05.146]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:06:05.146]      __var isProduction = 0;
[04:06:05.146]        // -> [isProduction <= 0x00000000]
[04:06:05.146]      __var continueId = 0;
[04:06:05.146]        // -> [continueId <= 0x00000000]
[04:06:05.146]      deviceID =   Read32(0x41C40004);
[04:06:05.154]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:06:05.154]        // -> [deviceID <= 0x2BB8802F]
[04:06:05.154]      version = deviceID >> 28;
[04:06:05.154]        // -> [version <= 0x00000002]
[04:06:05.154]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:06:05.154]        // -> [partNum <= 0x0000BB88]
[04:06:05.154]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:06:05.154]        // -> [manuf <= 0x00000017]
[04:06:05.154]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:06:05.154]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:06:05.154]      isProduction = (version > 0);
[04:06:05.154]        // -> [isProduction <= 0x00000001]
[04:06:05.154]    </block>
[04:06:05.154]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:06:05.154]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:06:05.154]        // =>  FALSE
[04:06:05.154]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:06:05.154]    </control>
[04:06:05.154]    <control if="continueId == 4" while="" timeout="0" info="">
[04:06:05.157]      // if-block "continueId == 4"
[04:06:05.157]        // =>  FALSE
[04:06:05.157]      // skip if-block "continueId == 4"
[04:06:05.157]    </control>
[04:06:05.157]    <control if="!isProduction" while="" timeout="0" info="">
[04:06:05.157]      // if-block "!isProduction"
[04:06:05.157]        // =>  FALSE
[04:06:05.157]      // skip if-block "!isProduction"
[04:06:05.157]    </control>
[04:06:05.157]  </sequence>
[04:06:05.157]  
[04:16:07.044]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:16:07.044]  
[04:16:07.052]  <debugvars>
[04:16:07.052]    // Pre-defined
[04:16:07.052]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:07.052]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:07.052]    __dp=0x00000000
[04:16:07.052]    __ap=0x00000000
[04:16:07.052]    __traceout=0x00000000      (Trace Disabled)
[04:16:07.052]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:07.052]    __FlashAddr=0x00000000
[04:16:07.052]    __FlashLen=0x00000000
[04:16:07.052]    __FlashArg=0x00000000
[04:16:07.052]    __FlashOp=0x00000000
[04:16:07.052]    __Result=0x00000000
[04:16:07.052]  </debugvars>
[04:16:07.052]  
[04:16:07.052]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:16:07.052]    <block atomic="false" info="">
[04:16:07.052]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:16:07.052]        // -> [isSWJ <= 0x00000001]
[04:16:07.052]      __var hasDormant = __protocol & 0x00020000;
[04:16:07.052]        // -> [hasDormant <= 0x00000000]
[04:16:07.052]      __var protType   = __protocol & 0x0000FFFF;
[04:16:07.052]        // -> [protType <= 0x00000002]
[04:16:07.055]    </block>
[04:16:07.055]    <control if="protType == 1" while="" timeout="0" info="">
[04:16:07.055]      // if-block "protType == 1"
[04:16:07.055]        // =>  FALSE
[04:16:07.055]      // skip if-block "protType == 1"
[04:16:07.055]    </control>
[04:16:07.055]    <control if="protType == 2" while="" timeout="0" info="">
[04:16:07.055]      // if-block "protType == 2"
[04:16:07.055]        // =>  TRUE
[04:16:07.055]      <control if="isSWJ" while="" timeout="0" info="">
[04:16:07.055]        // if-block "isSWJ"
[04:16:07.055]          // =>  TRUE
[04:16:07.056]        <control if="hasDormant" while="" timeout="0" info="">
[04:16:07.056]          // if-block "hasDormant"
[04:16:07.056]            // =>  FALSE
[04:16:07.056]          // skip if-block "hasDormant"
[04:16:07.056]        </control>
[04:16:07.056]        <control if="!hasDormant" while="" timeout="0" info="">
[04:16:07.056]          // if-block "!hasDormant"
[04:16:07.056]            // =>  TRUE
[04:16:07.056]          <block atomic="false" info="">
[04:16:07.056]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:16:07.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:07.058]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:16:07.059]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:16:07.059]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:16:07.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:07.061]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:16:07.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:16:07.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:16:07.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:07.065]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:16:07.066]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:16:07.066]          </block>
[04:16:07.066]          // end if-block "!hasDormant"
[04:16:07.066]        </control>
[04:16:07.066]        // end if-block "isSWJ"
[04:16:07.066]      </control>
[04:16:07.066]      <control if="!isSWJ" while="" timeout="0" info="">
[04:16:07.066]        // if-block "!isSWJ"
[04:16:07.067]          // =>  FALSE
[04:16:07.067]        // skip if-block "!isSWJ"
[04:16:07.067]      </control>
[04:16:07.067]      <block atomic="false" info="">
[04:16:07.067]        ReadDP(0x0);
[04:16:07.069]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:16:07.069]      </block>
[04:16:07.069]      // end if-block "protType == 2"
[04:16:07.069]    </control>
[04:16:07.069]  </sequence>
[04:16:07.069]  
[04:16:07.071]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:16:07.071]  
[04:16:07.072]  <debugvars>
[04:16:07.072]    // Pre-defined
[04:16:07.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:07.072]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:07.072]    __dp=0x00000000
[04:16:07.072]    __ap=0x00000000
[04:16:07.072]    __traceout=0x00000000      (Trace Disabled)
[04:16:07.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:07.073]    __FlashAddr=0x00000000
[04:16:07.073]    __FlashLen=0x00000000
[04:16:07.073]    __FlashArg=0x00000000
[04:16:07.073]    __FlashOp=0x00000000
[04:16:07.073]    __Result=0x00000000
[04:16:07.073]  </debugvars>
[04:16:07.073]  
[04:16:07.073]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:16:07.073]    <block atomic="false" info="">
[04:16:07.073]      __var SW_DP_ABORT       = 0x0;
[04:16:07.074]        // -> [SW_DP_ABORT <= 0x00000000]
[04:16:07.074]      __var DP_CTRL_STAT      = 0x4;
[04:16:07.074]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:16:07.074]      __var DP_SELECT         = 0x8;
[04:16:07.074]        // -> [DP_SELECT <= 0x00000008]
[04:16:07.074]      __var powered_down      = 0;
[04:16:07.074]        // -> [powered_down <= 0x00000000]
[04:16:07.074]      WriteDP(DP_SELECT, 0x00000000);
[04:16:07.076]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:16:07.077]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:16:07.078]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:16:07.078]        // -> [powered_down <= 0x00000001]
[04:16:07.078]    </block>
[04:16:07.079]    <control if="powered_down" while="" timeout="0" info="">
[04:16:07.079]      // if-block "powered_down"
[04:16:07.079]        // =>  TRUE
[04:16:07.079]      <block atomic="false" info="">
[04:16:07.079]        Message(0, "Debug/System power-up request sent");
[04:16:07.081]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:16:07.082]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:16:07.082]      </block>
[04:16:07.083]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:16:07.083]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:16:07.084]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:16:07.084]        // while-condition  =>  FALSE
[04:16:07.084]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:16:07.084]      </control>
[04:16:07.085]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:16:07.085]        // if-block "(__protocol & 0xFFFF) == 1"
[04:16:07.085]          // =>  FALSE
[04:16:07.085]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:16:07.085]      </control>
[04:16:07.085]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:16:07.086]        // if-block "(__protocol & 0xFFFF) == 2"
[04:16:07.086]          // =>  TRUE
[04:16:07.086]        <block atomic="false" info="">
[04:16:07.086]          Message(0, "executing SWD power up");
[04:16:07.087]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:16:07.092]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:16:07.092]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:16:07.093]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:16:07.093]        </block>
[04:16:07.095]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:16:07.095]      </control>
[04:16:07.095]      // end if-block "powered_down"
[04:16:07.095]    </control>
[04:16:07.095]    <block atomic="false" info="">
[04:16:07.095]      __var DEBUG_PORT_VAL    = 0;
[04:16:07.095]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:16:07.095]      __var ACCESS_POINT_VAL  = 0;
[04:16:07.095]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:16:07.095]      __ap = 1; 
[04:16:07.095]        // -> [__ap <= 0x00000001]
[04:16:07.095]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:16:07.100]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:16:07.100]      __ap = 4;
[04:16:07.100]        // -> [__ap <= 0x00000004]
[04:16:07.100]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:07.102]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.102]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:16:07.102]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:07.102]    </block>
[04:16:07.102]    <block atomic="false" info="">
[04:16:07.102]      __var nReset = 0x80;
[04:16:07.102]        // -> [nReset <= 0x00000080]
[04:16:07.102]      __var canReadPins = 0;
[04:16:07.102]        // -> [canReadPins <= 0x00000000]
[04:16:07.102]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:16:07.106]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:16:07.106]        // -> [canReadPins <= 0x00000001]
[04:16:07.106]    </block>
[04:16:07.106]    <control if="" while="1" timeout="200" info="">
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.106]      // while "1"  (timeout="200")
[04:16:07.106]      // while-condition  =>  TRUE
[04:16:07.110]      // while "1"  (timeout="200")
[04:16:07.110]      // while  =>  TIMEOUT
[04:16:07.110]      // end while "1"
[04:16:07.110]    </control>
[04:16:07.110]    <control if="canReadPins" while="" timeout="0" info="">
[04:16:07.110]      // if-block "canReadPins"
[04:16:07.110]        // =>  TRUE
[04:16:07.110]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:16:07.110]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:16:07.111]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:16:07.111]        // while-condition  =>  FALSE
[04:16:07.111]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:16:07.111]      </control>
[04:16:07.111]      // end if-block "canReadPins"
[04:16:07.111]    </control>
[04:16:07.111]    <control if="!canReadPins" while="" timeout="0" info="">
[04:16:07.111]      // if-block "!canReadPins"
[04:16:07.111]        // =>  FALSE
[04:16:07.111]      // skip if-block "!canReadPins"
[04:16:07.111]    </control>
[04:16:07.111]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:16:07.111]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:07.111]        // =>  TRUE
[04:16:07.114]      <block atomic="false" info="">
[04:16:07.114]        WriteAP(0x00, 0x190008);
[04:16:07.114]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.114]        WriteAP(0xF0, 0x01);
[04:16:07.119]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.119]      </block>
[04:16:07.119]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:07.119]    </control>
[04:16:07.123]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:16:07.123]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:07.123]        // =>  FALSE
[04:16:07.123]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:07.123]    </control>
[04:16:07.123]    <block atomic="false" info="">
[04:16:07.123]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:07.127]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.127]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:16:07.127]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:07.131]      __ap = 0; //lets make sure we reset the access point selection
[04:16:07.131]        // -> [__ap <= 0x00000000]
[04:16:07.131]    </block>
[04:16:07.131]  </sequence>
[04:16:07.131]  
[04:16:07.156]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:16:07.156]  
[04:16:07.160]  <debugvars>
[04:16:07.160]    // Pre-defined
[04:16:07.160]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:07.160]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:07.160]    __dp=0x00000000
[04:16:07.160]    __ap=0x00000000
[04:16:07.160]    __traceout=0x00000000      (Trace Disabled)
[04:16:07.160]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:07.160]    __FlashAddr=0x00000000
[04:16:07.160]    __FlashLen=0x00000000
[04:16:07.160]    __FlashArg=0x00000000
[04:16:07.160]    __FlashOp=0x00000000
[04:16:07.160]    __Result=0x00000000
[04:16:07.160]  </debugvars>
[04:16:07.160]  
[04:16:07.160]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:16:07.160]    <block atomic="false" info="">
[04:16:07.160]      __var deviceID = 0;
[04:16:07.160]        // -> [deviceID <= 0x00000000]
[04:16:07.160]      __var version = 0;
[04:16:07.160]        // -> [version <= 0x00000000]
[04:16:07.160]      __var partNum = 0;
[04:16:07.160]        // -> [partNum <= 0x00000000]
[04:16:07.160]      __var manuf = 0;
[04:16:07.160]        // -> [manuf <= 0x00000000]
[04:16:07.160]      __var isMSPM0G1X0X_G3X0X = 0;
[04:16:07.160]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:16:07.160]      __var isProduction = 0;
[04:16:07.160]        // -> [isProduction <= 0x00000000]
[04:16:07.160]      __var continueId = 0;
[04:16:07.160]        // -> [continueId <= 0x00000000]
[04:16:07.160]      deviceID =   Read32(0x41C40004);
[04:16:07.164]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:16:07.164]        // -> [deviceID <= 0x2BB8802F]
[04:16:07.164]      version = deviceID >> 28;
[04:16:07.164]        // -> [version <= 0x00000002]
[04:16:07.164]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:16:07.164]        // -> [partNum <= 0x0000BB88]
[04:16:07.168]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:16:07.168]        // -> [manuf <= 0x00000017]
[04:16:07.168]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:16:07.168]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:16:07.168]      isProduction = (version > 0);
[04:16:07.168]        // -> [isProduction <= 0x00000001]
[04:16:07.168]    </block>
[04:16:07.168]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:16:07.168]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:16:07.168]        // =>  FALSE
[04:16:07.169]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:16:07.169]    </control>
[04:16:07.169]    <control if="continueId == 4" while="" timeout="0" info="">
[04:16:07.169]      // if-block "continueId == 4"
[04:16:07.169]        // =>  FALSE
[04:16:07.169]      // skip if-block "continueId == 4"
[04:16:07.169]    </control>
[04:16:07.169]    <control if="!isProduction" while="" timeout="0" info="">
[04:16:07.169]      // if-block "!isProduction"
[04:16:07.169]        // =>  FALSE
[04:16:07.169]      // skip if-block "!isProduction"
[04:16:07.169]    </control>
[04:16:07.169]  </sequence>
[04:16:07.169]  
[04:18:21.240]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:18:21.240]  
[04:18:21.240]  <debugvars>
[04:18:21.240]    // Pre-defined
[04:18:21.240]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:18:21.240]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:18:21.240]    __dp=0x00000000
[04:18:21.240]    __ap=0x00000000
[04:18:21.240]    __traceout=0x00000000      (Trace Disabled)
[04:18:21.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:18:21.242]    __FlashAddr=0x00000000
[04:18:21.242]    __FlashLen=0x00000000
[04:18:21.242]    __FlashArg=0x00000000
[04:18:21.242]    __FlashOp=0x00000000
[04:18:21.242]    __Result=0x00000000
[04:18:21.242]  </debugvars>
[04:18:21.242]  
[04:18:21.242]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:18:21.242]    <block atomic="false" info="">
[04:18:21.242]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:18:21.242]        // -> [isSWJ <= 0x00000001]
[04:18:21.242]      __var hasDormant = __protocol & 0x00020000;
[04:18:21.242]        // -> [hasDormant <= 0x00000000]
[04:18:21.243]      __var protType   = __protocol & 0x0000FFFF;
[04:18:21.243]        // -> [protType <= 0x00000002]
[04:18:21.243]    </block>
[04:18:21.243]    <control if="protType == 1" while="" timeout="0" info="">
[04:18:21.243]      // if-block "protType == 1"
[04:18:21.243]        // =>  FALSE
[04:18:21.243]      // skip if-block "protType == 1"
[04:18:21.243]    </control>
[04:18:21.243]    <control if="protType == 2" while="" timeout="0" info="">
[04:18:21.243]      // if-block "protType == 2"
[04:18:21.244]        // =>  TRUE
[04:18:21.244]      <control if="isSWJ" while="" timeout="0" info="">
[04:18:21.244]        // if-block "isSWJ"
[04:18:21.244]          // =>  TRUE
[04:18:21.244]        <control if="hasDormant" while="" timeout="0" info="">
[04:18:21.244]          // if-block "hasDormant"
[04:18:21.244]            // =>  FALSE
[04:18:21.244]          // skip if-block "hasDormant"
[04:18:21.244]        </control>
[04:18:21.244]        <control if="!hasDormant" while="" timeout="0" info="">
[04:18:21.244]          // if-block "!hasDormant"
[04:18:21.244]            // =>  TRUE
[04:18:21.244]          <block atomic="false" info="">
[04:18:21.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:18:21.249]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:18:21.249]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:18:21.249]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:18:21.249]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:18:21.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:18:21.251]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:18:21.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:18:21.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:18:21.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:18:21.256]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:18:21.257]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:18:21.258]          </block>
[04:18:21.258]          // end if-block "!hasDormant"
[04:18:21.258]        </control>
[04:18:21.258]        // end if-block "isSWJ"
[04:18:21.258]      </control>
[04:18:21.258]      <control if="!isSWJ" while="" timeout="0" info="">
[04:18:21.258]        // if-block "!isSWJ"
[04:18:21.258]          // =>  FALSE
[04:18:21.258]        // skip if-block "!isSWJ"
[04:18:21.259]      </control>
[04:18:21.259]      <block atomic="false" info="">
[04:18:21.259]        ReadDP(0x0);
[04:18:21.261]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:18:21.261]      </block>
[04:18:21.261]      // end if-block "protType == 2"
[04:18:21.261]    </control>
[04:18:21.261]  </sequence>
[04:18:21.261]  
[04:18:21.265]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:18:21.265]  
[04:18:21.265]  <debugvars>
[04:18:21.265]    // Pre-defined
[04:18:21.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:18:21.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:18:21.266]    __dp=0x00000000
[04:18:21.266]    __ap=0x00000000
[04:18:21.266]    __traceout=0x00000000      (Trace Disabled)
[04:18:21.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:18:21.266]    __FlashAddr=0x00000000
[04:18:21.266]    __FlashLen=0x00000000
[04:18:21.267]    __FlashArg=0x00000000
[04:18:21.267]    __FlashOp=0x00000000
[04:18:21.267]    __Result=0x00000000
[04:18:21.267]  </debugvars>
[04:18:21.267]  
[04:18:21.267]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:18:21.267]    <block atomic="false" info="">
[04:18:21.267]      __var SW_DP_ABORT       = 0x0;
[04:18:21.267]        // -> [SW_DP_ABORT <= 0x00000000]
[04:18:21.267]      __var DP_CTRL_STAT      = 0x4;
[04:18:21.267]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:18:21.268]      __var DP_SELECT         = 0x8;
[04:18:21.268]        // -> [DP_SELECT <= 0x00000008]
[04:18:21.268]      __var powered_down      = 0;
[04:18:21.268]        // -> [powered_down <= 0x00000000]
[04:18:21.268]      WriteDP(DP_SELECT, 0x00000000);
[04:18:21.270]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:18:21.270]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:18:21.272]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:18:21.272]        // -> [powered_down <= 0x00000001]
[04:18:21.272]    </block>
[04:18:21.272]    <control if="powered_down" while="" timeout="0" info="">
[04:18:21.272]      // if-block "powered_down"
[04:18:21.273]        // =>  TRUE
[04:18:21.273]      <block atomic="false" info="">
[04:18:21.273]        Message(0, "Debug/System power-up request sent");
[04:18:21.274]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:18:21.277]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:18:21.277]      </block>
[04:18:21.277]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:18:21.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:18:21.279]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:18:21.279]        // while-condition  =>  FALSE
[04:18:21.279]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:18:21.279]      </control>
[04:18:21.279]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:18:21.279]        // if-block "(__protocol & 0xFFFF) == 1"
[04:18:21.279]          // =>  FALSE
[04:18:21.279]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:18:21.280]      </control>
[04:18:21.280]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:18:21.280]        // if-block "(__protocol & 0xFFFF) == 2"
[04:18:21.280]          // =>  TRUE
[04:18:21.280]        <block atomic="false" info="">
[04:18:21.281]          Message(0, "executing SWD power up");
[04:18:21.282]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:18:21.284]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:18:21.284]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:18:21.287]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:18:21.287]        </block>
[04:18:21.287]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:18:21.287]      </control>
[04:18:21.287]      // end if-block "powered_down"
[04:18:21.287]    </control>
[04:18:21.287]    <block atomic="false" info="">
[04:18:21.287]      __var DEBUG_PORT_VAL    = 0;
[04:18:21.287]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:18:21.287]      __var ACCESS_POINT_VAL  = 0;
[04:18:21.287]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:18:21.287]      __ap = 1; 
[04:18:21.287]        // -> [__ap <= 0x00000001]
[04:18:21.287]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:18:21.291]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:18:21.291]      __ap = 4;
[04:18:21.291]        // -> [__ap <= 0x00000004]
[04:18:21.291]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:18:21.295]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:18:21.295]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:18:21.295]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:18:21.295]    </block>
[04:18:21.295]    <block atomic="false" info="">
[04:18:21.295]      __var nReset = 0x80;
[04:18:21.295]        // -> [nReset <= 0x00000080]
[04:18:21.295]      __var canReadPins = 0;
[04:18:21.295]        // -> [canReadPins <= 0x00000000]
[04:18:21.295]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:18:21.299]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:18:21.299]        // -> [canReadPins <= 0x00000001]
[04:18:21.299]    </block>
[04:18:21.300]    <control if="" while="1" timeout="200" info="">
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.300]      // while-condition  =>  TRUE
[04:18:21.300]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.303]      // while "1"  (timeout="200")
[04:18:21.303]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.307]      // while-condition  =>  TRUE
[04:18:21.307]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.311]      // while "1"  (timeout="200")
[04:18:21.311]      // while-condition  =>  TRUE
[04:18:21.315]      // while "1"  (timeout="200")
[04:18:21.315]      // while  =>  TIMEOUT
[04:18:21.315]      // end while "1"
[04:18:21.315]    </control>
[04:18:21.315]    <control if="canReadPins" while="" timeout="0" info="">
[04:18:21.315]      // if-block "canReadPins"
[04:18:21.315]        // =>  TRUE
[04:18:21.315]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:18:21.315]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:18:21.315]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:18:21.315]        // while-condition  =>  FALSE
[04:18:21.315]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:18:21.315]      </control>
[04:18:21.315]      // end if-block "canReadPins"
[04:18:21.315]    </control>
[04:18:21.315]    <control if="!canReadPins" while="" timeout="0" info="">
[04:18:21.315]      // if-block "!canReadPins"
[04:18:21.315]        // =>  FALSE
[04:18:21.319]      // skip if-block "!canReadPins"
[04:18:21.319]    </control>
[04:18:21.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:18:21.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:18:21.319]        // =>  TRUE
[04:18:21.320]      <block atomic="false" info="">
[04:18:21.320]        WriteAP(0x00, 0x190008);
[04:18:21.321]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:18:21.322]        WriteAP(0xF0, 0x01);
[04:18:21.325]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:18:21.325]      </block>
[04:18:21.325]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:18:21.325]    </control>
[04:18:21.325]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:18:21.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:18:21.325]        // =>  FALSE
[04:18:21.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:18:21.325]    </control>
[04:18:21.325]    <block atomic="false" info="">
[04:18:21.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:18:21.331]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:18:21.331]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:18:21.331]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:18:21.333]      __ap = 0; //lets make sure we reset the access point selection
[04:18:21.333]        // -> [__ap <= 0x00000000]
[04:18:21.333]    </block>
[04:18:21.333]  </sequence>
[04:18:21.333]  
[04:18:21.364]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:18:21.364]  
[04:18:21.364]  <debugvars>
[04:18:21.364]    // Pre-defined
[04:18:21.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:18:21.364]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:18:21.364]    __dp=0x00000000
[04:18:21.364]    __ap=0x00000000
[04:18:21.364]    __traceout=0x00000000      (Trace Disabled)
[04:18:21.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:18:21.364]    __FlashAddr=0x00000000
[04:18:21.364]    __FlashLen=0x00000000
[04:18:21.364]    __FlashArg=0x00000000
[04:18:21.364]    __FlashOp=0x00000000
[04:18:21.364]    __Result=0x00000000
[04:18:21.364]  </debugvars>
[04:18:21.364]  
[04:18:21.364]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:18:21.364]    <block atomic="false" info="">
[04:18:21.364]      __var deviceID = 0;
[04:18:21.364]        // -> [deviceID <= 0x00000000]
[04:18:21.364]      __var version = 0;
[04:18:21.364]        // -> [version <= 0x00000000]
[04:18:21.364]      __var partNum = 0;
[04:18:21.364]        // -> [partNum <= 0x00000000]
[04:18:21.364]      __var manuf = 0;
[04:18:21.364]        // -> [manuf <= 0x00000000]
[04:18:21.364]      __var isMSPM0G1X0X_G3X0X = 0;
[04:18:21.364]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:18:21.364]      __var isProduction = 0;
[04:18:21.368]        // -> [isProduction <= 0x00000000]
[04:18:21.368]      __var continueId = 0;
[04:18:21.368]        // -> [continueId <= 0x00000000]
[04:18:21.368]      deviceID =   Read32(0x41C40004);
[04:18:21.372]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:18:21.372]        // -> [deviceID <= 0x2BB8802F]
[04:18:21.372]      version = deviceID >> 28;
[04:18:21.372]        // -> [version <= 0x00000002]
[04:18:21.372]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:18:21.372]        // -> [partNum <= 0x0000BB88]
[04:18:21.372]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:18:21.372]        // -> [manuf <= 0x00000017]
[04:18:21.372]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:18:21.372]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:18:21.372]      isProduction = (version > 0);
[04:18:21.372]        // -> [isProduction <= 0x00000001]
[04:18:21.372]    </block>
[04:18:21.372]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:18:21.372]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:18:21.372]        // =>  FALSE
[04:18:21.372]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:18:21.372]    </control>
[04:18:21.372]    <control if="continueId == 4" while="" timeout="0" info="">
[04:18:21.372]      // if-block "continueId == 4"
[04:18:21.372]        // =>  FALSE
[04:18:21.372]      // skip if-block "continueId == 4"
[04:18:21.372]    </control>
[04:18:21.372]    <control if="!isProduction" while="" timeout="0" info="">
[04:18:21.372]      // if-block "!isProduction"
[04:18:21.372]        // =>  FALSE
[04:18:21.372]      // skip if-block "!isProduction"
[04:18:21.372]    </control>
[04:18:21.372]  </sequence>
[04:18:21.372]  
[04:19:48.578]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:19:48.578]  
[04:19:48.586]  <debugvars>
[04:19:48.586]    // Pre-defined
[04:19:48.586]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:19:48.586]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:19:48.586]    __dp=0x00000000
[04:19:48.586]    __ap=0x00000000
[04:19:48.586]    __traceout=0x00000000      (Trace Disabled)
[04:19:48.586]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:19:48.586]    __FlashAddr=0x00000000
[04:19:48.586]    __FlashLen=0x00000000
[04:19:48.586]    __FlashArg=0x00000000
[04:19:48.586]    __FlashOp=0x00000000
[04:19:48.586]    __Result=0x00000000
[04:19:48.586]  </debugvars>
[04:19:48.586]  
[04:19:48.586]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:19:48.586]    <block atomic="false" info="">
[04:19:48.588]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:19:48.588]        // -> [isSWJ <= 0x00000001]
[04:19:48.588]      __var hasDormant = __protocol & 0x00020000;
[04:19:48.588]        // -> [hasDormant <= 0x00000000]
[04:19:48.588]      __var protType   = __protocol & 0x0000FFFF;
[04:19:48.588]        // -> [protType <= 0x00000002]
[04:19:48.588]    </block>
[04:19:48.588]    <control if="protType == 1" while="" timeout="0" info="">
[04:19:48.588]      // if-block "protType == 1"
[04:19:48.588]        // =>  FALSE
[04:19:48.588]      // skip if-block "protType == 1"
[04:19:48.588]    </control>
[04:19:48.588]    <control if="protType == 2" while="" timeout="0" info="">
[04:19:48.590]      // if-block "protType == 2"
[04:19:48.590]        // =>  TRUE
[04:19:48.590]      <control if="isSWJ" while="" timeout="0" info="">
[04:19:48.590]        // if-block "isSWJ"
[04:19:48.590]          // =>  TRUE
[04:19:48.590]        <control if="hasDormant" while="" timeout="0" info="">
[04:19:48.590]          // if-block "hasDormant"
[04:19:48.590]            // =>  FALSE
[04:19:48.590]          // skip if-block "hasDormant"
[04:19:48.590]        </control>
[04:19:48.590]        <control if="!hasDormant" while="" timeout="0" info="">
[04:19:48.591]          // if-block "!hasDormant"
[04:19:48.591]            // =>  TRUE
[04:19:48.591]          <block atomic="false" info="">
[04:19:48.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:19:48.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:19:48.591]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:19:48.594]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:19:48.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:19:48.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:19:48.598]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:19:48.599]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:19:48.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:19:48.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:19:48.601]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:19:48.602]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:19:48.602]          </block>
[04:19:48.602]          // end if-block "!hasDormant"
[04:19:48.602]        </control>
[04:19:48.602]        // end if-block "isSWJ"
[04:19:48.602]      </control>
[04:19:48.603]      <control if="!isSWJ" while="" timeout="0" info="">
[04:19:48.603]        // if-block "!isSWJ"
[04:19:48.603]          // =>  FALSE
[04:19:48.603]        // skip if-block "!isSWJ"
[04:19:48.603]      </control>
[04:19:48.603]      <block atomic="false" info="">
[04:19:48.603]        ReadDP(0x0);
[04:19:48.605]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:19:48.605]      </block>
[04:19:48.605]      // end if-block "protType == 2"
[04:19:48.605]    </control>
[04:19:48.605]  </sequence>
[04:19:48.605]  
[04:19:48.608]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:19:48.608]  
[04:19:48.608]  <debugvars>
[04:19:48.608]    // Pre-defined
[04:19:48.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:19:48.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:19:48.608]    __dp=0x00000000
[04:19:48.608]    __ap=0x00000000
[04:19:48.608]    __traceout=0x00000000      (Trace Disabled)
[04:19:48.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:19:48.608]    __FlashAddr=0x00000000
[04:19:48.608]    __FlashLen=0x00000000
[04:19:48.609]    __FlashArg=0x00000000
[04:19:48.609]    __FlashOp=0x00000000
[04:19:48.609]    __Result=0x00000000
[04:19:48.609]  </debugvars>
[04:19:48.609]  
[04:19:48.609]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:19:48.609]    <block atomic="false" info="">
[04:19:48.609]      __var SW_DP_ABORT       = 0x0;
[04:19:48.609]        // -> [SW_DP_ABORT <= 0x00000000]
[04:19:48.609]      __var DP_CTRL_STAT      = 0x4;
[04:19:48.609]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:19:48.611]      __var DP_SELECT         = 0x8;
[04:19:48.611]        // -> [DP_SELECT <= 0x00000008]
[04:19:48.611]      __var powered_down      = 0;
[04:19:48.611]        // -> [powered_down <= 0x00000000]
[04:19:48.611]      WriteDP(DP_SELECT, 0x00000000);
[04:19:48.611]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:19:48.611]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:19:48.614]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:19:48.615]        // -> [powered_down <= 0x00000001]
[04:19:48.615]    </block>
[04:19:48.615]    <control if="powered_down" while="" timeout="0" info="">
[04:19:48.615]      // if-block "powered_down"
[04:19:48.615]        // =>  TRUE
[04:19:48.615]      <block atomic="false" info="">
[04:19:48.615]        Message(0, "Debug/System power-up request sent");
[04:19:48.617]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:19:48.619]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:19:48.619]      </block>
[04:19:48.619]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:19:48.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:19:48.620]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:19:48.620]        // while-condition  =>  FALSE
[04:19:48.620]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:19:48.620]      </control>
[04:19:48.620]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:19:48.620]        // if-block "(__protocol & 0xFFFF) == 1"
[04:19:48.620]          // =>  FALSE
[04:19:48.620]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:19:48.620]      </control>
[04:19:48.620]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:19:48.620]        // if-block "(__protocol & 0xFFFF) == 2"
[04:19:48.620]          // =>  TRUE
[04:19:48.623]        <block atomic="false" info="">
[04:19:48.623]          Message(0, "executing SWD power up");
[04:19:48.626]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:19:48.627]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:19:48.627]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:19:48.630]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:19:48.630]        </block>
[04:19:48.630]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:19:48.630]      </control>
[04:19:48.630]      // end if-block "powered_down"
[04:19:48.630]    </control>
[04:19:48.630]    <block atomic="false" info="">
[04:19:48.630]      __var DEBUG_PORT_VAL    = 0;
[04:19:48.631]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:19:48.631]      __var ACCESS_POINT_VAL  = 0;
[04:19:48.631]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:19:48.631]      __ap = 1; 
[04:19:48.631]        // -> [__ap <= 0x00000001]
[04:19:48.631]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:19:48.635]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:19:48.635]      __ap = 4;
[04:19:48.635]        // -> [__ap <= 0x00000004]
[04:19:48.635]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:19:48.640]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:19:48.640]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:19:48.640]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:19:48.642]    </block>
[04:19:48.642]    <block atomic="false" info="">
[04:19:48.642]      __var nReset = 0x80;
[04:19:48.642]        // -> [nReset <= 0x00000080]
[04:19:48.642]      __var canReadPins = 0;
[04:19:48.642]        // -> [canReadPins <= 0x00000000]
[04:19:48.642]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:19:48.644]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:19:48.644]        // -> [canReadPins <= 0x00000001]
[04:19:48.644]    </block>
[04:19:48.644]    <control if="" while="1" timeout="200" info="">
[04:19:48.645]      // while "1"  (timeout="200")
[04:19:48.645]      // while-condition  =>  TRUE
[04:19:48.645]      // while "1"  (timeout="200")
[04:19:48.645]      // while-condition  =>  TRUE
[04:19:48.645]      // while "1"  (timeout="200")
[04:19:48.645]      // while-condition  =>  TRUE
[04:19:48.645]      // while "1"  (timeout="200")
[04:19:48.645]      // while-condition  =>  TRUE
[04:19:48.645]      // while "1"  (timeout="200")
[04:19:48.645]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.646]      // while "1"  (timeout="200")
[04:19:48.646]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.648]      // while-condition  =>  TRUE
[04:19:48.648]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.650]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.650]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.650]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.650]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.650]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.650]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.650]      // while "1"  (timeout="200")
[04:19:48.650]      // while-condition  =>  TRUE
[04:19:48.651]      // while "1"  (timeout="200")
[04:19:48.651]      // while-condition  =>  TRUE
[04:19:48.651]      // while "1"  (timeout="200")
[04:19:48.651]      // while-condition  =>  TRUE
[04:19:48.651]      // while "1"  (timeout="200")
[04:19:48.651]      // while-condition  =>  TRUE
[04:19:48.651]      // while "1"  (timeout="200")
[04:19:48.651]      // while-condition  =>  TRUE
[04:19:48.651]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.652]      // while-condition  =>  TRUE
[04:19:48.652]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.656]      // while "1"  (timeout="200")
[04:19:48.656]      // while-condition  =>  TRUE
[04:19:48.660]      // while "1"  (timeout="200")
[04:19:48.660]      // while  =>  TIMEOUT
[04:19:48.660]      // end while "1"
[04:19:48.660]    </control>
[04:19:48.660]    <control if="canReadPins" while="" timeout="0" info="">
[04:19:48.660]      // if-block "canReadPins"
[04:19:48.660]        // =>  TRUE
[04:19:48.660]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:19:48.660]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:19:48.660]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:19:48.660]        // while-condition  =>  FALSE
[04:19:48.660]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:19:48.660]      </control>
[04:19:48.660]      // end if-block "canReadPins"
[04:19:48.660]    </control>
[04:19:48.660]    <control if="!canReadPins" while="" timeout="0" info="">
[04:19:48.660]      // if-block "!canReadPins"
[04:19:48.660]        // =>  FALSE
[04:19:48.660]      // skip if-block "!canReadPins"
[04:19:48.660]    </control>
[04:19:48.660]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:19:48.660]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:19:48.664]        // =>  TRUE
[04:19:48.664]      <block atomic="false" info="">
[04:19:48.664]        WriteAP(0x00, 0x190008);
[04:19:48.664]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:19:48.664]        WriteAP(0xF0, 0x01);
[04:19:48.668]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:19:48.668]      </block>
[04:19:48.668]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:19:48.668]    </control>
[04:19:48.668]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:19:48.668]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:19:48.668]        // =>  FALSE
[04:19:48.668]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:19:48.668]    </control>
[04:19:48.668]    <block atomic="false" info="">
[04:19:48.668]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:19:48.673]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:19:48.673]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:19:48.673]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:19:48.677]      __ap = 0; //lets make sure we reset the access point selection
[04:19:48.677]        // -> [__ap <= 0x00000000]
[04:19:48.677]    </block>
[04:19:48.677]  </sequence>
[04:19:48.677]  
[04:19:48.697]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:19:48.697]  
[04:19:48.697]  <debugvars>
[04:19:48.697]    // Pre-defined
[04:19:48.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:19:48.697]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:19:48.697]    __dp=0x00000000
[04:19:48.697]    __ap=0x00000000
[04:19:48.697]    __traceout=0x00000000      (Trace Disabled)
[04:19:48.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:19:48.697]    __FlashAddr=0x00000000
[04:19:48.697]    __FlashLen=0x00000000
[04:19:48.697]    __FlashArg=0x00000000
[04:19:48.697]    __FlashOp=0x00000000
[04:19:48.697]    __Result=0x00000000
[04:19:48.697]  </debugvars>
[04:19:48.697]  
[04:19:48.697]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:19:48.697]    <block atomic="false" info="">
[04:19:48.697]      __var deviceID = 0;
[04:19:48.697]        // -> [deviceID <= 0x00000000]
[04:19:48.697]      __var version = 0;
[04:19:48.697]        // -> [version <= 0x00000000]
[04:19:48.697]      __var partNum = 0;
[04:19:48.697]        // -> [partNum <= 0x00000000]
[04:19:48.697]      __var manuf = 0;
[04:19:48.701]        // -> [manuf <= 0x00000000]
[04:19:48.701]      __var isMSPM0G1X0X_G3X0X = 0;
[04:19:48.701]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:19:48.701]      __var isProduction = 0;
[04:19:48.701]        // -> [isProduction <= 0x00000000]
[04:19:48.701]      __var continueId = 0;
[04:19:48.701]        // -> [continueId <= 0x00000000]
[04:19:48.701]      deviceID =   Read32(0x41C40004);
[04:19:48.707]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:19:48.707]        // -> [deviceID <= 0x2BB8802F]
[04:19:48.707]      version = deviceID >> 28;
[04:19:48.707]        // -> [version <= 0x00000002]
[04:19:48.707]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:19:48.707]        // -> [partNum <= 0x0000BB88]
[04:19:48.707]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:19:48.707]        // -> [manuf <= 0x00000017]
[04:19:48.707]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:19:48.707]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:19:48.707]      isProduction = (version > 0);
[04:19:48.707]        // -> [isProduction <= 0x00000001]
[04:19:48.707]    </block>
[04:19:48.707]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:19:48.707]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:19:48.707]        // =>  FALSE
[04:19:48.707]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:19:48.707]    </control>
[04:19:48.707]    <control if="continueId == 4" while="" timeout="0" info="">
[04:19:48.709]      // if-block "continueId == 4"
[04:19:48.709]        // =>  FALSE
[04:19:48.709]      // skip if-block "continueId == 4"
[04:19:48.709]    </control>
[04:19:48.709]    <control if="!isProduction" while="" timeout="0" info="">
[04:19:48.709]      // if-block "!isProduction"
[04:19:48.709]        // =>  FALSE
[04:19:48.709]      // skip if-block "!isProduction"
[04:19:48.709]    </control>
[04:19:48.709]  </sequence>
[04:19:48.709]  
[04:20:42.749]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:20:42.749]  
[04:20:42.761]  <debugvars>
[04:20:42.761]    // Pre-defined
[04:20:42.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:42.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:42.761]    __dp=0x00000000
[04:20:42.762]    __ap=0x00000000
[04:20:42.762]    __traceout=0x00000000      (Trace Disabled)
[04:20:42.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:42.762]    __FlashAddr=0x00000000
[04:20:42.762]    __FlashLen=0x00000000
[04:20:42.762]    __FlashArg=0x00000000
[04:20:42.762]    __FlashOp=0x00000000
[04:20:42.762]    __Result=0x00000000
[04:20:42.762]  </debugvars>
[04:20:42.762]  
[04:20:42.762]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:20:42.762]    <block atomic="false" info="">
[04:20:42.762]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:20:42.762]        // -> [isSWJ <= 0x00000001]
[04:20:42.762]      __var hasDormant = __protocol & 0x00020000;
[04:20:42.762]        // -> [hasDormant <= 0x00000000]
[04:20:42.762]      __var protType   = __protocol & 0x0000FFFF;
[04:20:42.762]        // -> [protType <= 0x00000002]
[04:20:42.762]    </block>
[04:20:42.762]    <control if="protType == 1" while="" timeout="0" info="">
[04:20:42.762]      // if-block "protType == 1"
[04:20:42.762]        // =>  FALSE
[04:20:42.762]      // skip if-block "protType == 1"
[04:20:42.762]    </control>
[04:20:42.762]    <control if="protType == 2" while="" timeout="0" info="">
[04:20:42.762]      // if-block "protType == 2"
[04:20:42.762]        // =>  TRUE
[04:20:42.762]      <control if="isSWJ" while="" timeout="0" info="">
[04:20:42.762]        // if-block "isSWJ"
[04:20:42.766]          // =>  TRUE
[04:20:42.766]        <control if="hasDormant" while="" timeout="0" info="">
[04:20:42.766]          // if-block "hasDormant"
[04:20:42.766]            // =>  FALSE
[04:20:42.766]          // skip if-block "hasDormant"
[04:20:42.766]        </control>
[04:20:42.766]        <control if="!hasDormant" while="" timeout="0" info="">
[04:20:42.766]          // if-block "!hasDormant"
[04:20:42.766]            // =>  TRUE
[04:20:42.766]          <block atomic="false" info="">
[04:20:42.766]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:20:42.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:42.770]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:20:42.770]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:20:42.770]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:20:42.770]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:42.770]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:20:42.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:20:42.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:20:42.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:42.775]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:20:42.778]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:20:42.778]          </block>
[04:20:42.778]          // end if-block "!hasDormant"
[04:20:42.778]        </control>
[04:20:42.778]        // end if-block "isSWJ"
[04:20:42.778]      </control>
[04:20:42.778]      <control if="!isSWJ" while="" timeout="0" info="">
[04:20:42.778]        // if-block "!isSWJ"
[04:20:42.778]          // =>  FALSE
[04:20:42.778]        // skip if-block "!isSWJ"
[04:20:42.778]      </control>
[04:20:42.778]      <block atomic="false" info="">
[04:20:42.778]        ReadDP(0x0);
[04:20:42.782]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:20:42.782]      </block>
[04:20:42.782]      // end if-block "protType == 2"
[04:20:42.782]    </control>
[04:20:42.782]  </sequence>
[04:20:42.782]  
[04:20:42.782]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:20:42.782]  
[04:20:42.782]  <debugvars>
[04:20:42.782]    // Pre-defined
[04:20:42.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:42.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:42.786]    __dp=0x00000000
[04:20:42.786]    __ap=0x00000000
[04:20:42.786]    __traceout=0x00000000      (Trace Disabled)
[04:20:42.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:42.786]    __FlashAddr=0x00000000
[04:20:42.786]    __FlashLen=0x00000000
[04:20:42.786]    __FlashArg=0x00000000
[04:20:42.786]    __FlashOp=0x00000000
[04:20:42.786]    __Result=0x00000000
[04:20:42.786]  </debugvars>
[04:20:42.786]  
[04:20:42.786]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:20:42.786]    <block atomic="false" info="">
[04:20:42.786]      __var SW_DP_ABORT       = 0x0;
[04:20:42.786]        // -> [SW_DP_ABORT <= 0x00000000]
[04:20:42.786]      __var DP_CTRL_STAT      = 0x4;
[04:20:42.786]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:20:42.786]      __var DP_SELECT         = 0x8;
[04:20:42.786]        // -> [DP_SELECT <= 0x00000008]
[04:20:42.786]      __var powered_down      = 0;
[04:20:42.786]        // -> [powered_down <= 0x00000000]
[04:20:42.786]      WriteDP(DP_SELECT, 0x00000000);
[04:20:42.790]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:20:42.790]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:20:42.794]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:20:42.794]        // -> [powered_down <= 0x00000001]
[04:20:42.794]    </block>
[04:20:42.794]    <control if="powered_down" while="" timeout="0" info="">
[04:20:42.794]      // if-block "powered_down"
[04:20:42.794]        // =>  TRUE
[04:20:42.794]      <block atomic="false" info="">
[04:20:42.794]        Message(0, "Debug/System power-up request sent");
[04:20:42.798]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:20:42.799]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:20:42.799]      </block>
[04:20:42.799]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:20:42.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:20:42.799]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:20:42.802]        // while-condition  =>  FALSE
[04:20:42.802]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:20:42.802]      </control>
[04:20:42.802]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:20:42.802]        // if-block "(__protocol & 0xFFFF) == 1"
[04:20:42.802]          // =>  FALSE
[04:20:42.802]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:20:42.802]      </control>
[04:20:42.802]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:20:42.802]        // if-block "(__protocol & 0xFFFF) == 2"
[04:20:42.802]          // =>  TRUE
[04:20:42.802]        <block atomic="false" info="">
[04:20:42.802]          Message(0, "executing SWD power up");
[04:20:42.802]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:20:42.806]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:20:42.806]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:20:42.810]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:20:42.810]        </block>
[04:20:42.810]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:20:42.810]      </control>
[04:20:42.810]      // end if-block "powered_down"
[04:20:42.810]    </control>
[04:20:42.810]    <block atomic="false" info="">
[04:20:42.810]      __var DEBUG_PORT_VAL    = 0;
[04:20:42.810]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:20:42.810]      __var ACCESS_POINT_VAL  = 0;
[04:20:42.810]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:20:42.810]      __ap = 1; 
[04:20:42.810]        // -> [__ap <= 0x00000001]
[04:20:42.810]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:20:42.814]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:20:42.814]      __ap = 4;
[04:20:42.814]        // -> [__ap <= 0x00000004]
[04:20:42.814]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:20:42.818]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:20:42.818]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:20:42.818]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:20:42.818]    </block>
[04:20:42.818]    <block atomic="false" info="">
[04:20:42.818]      __var nReset = 0x80;
[04:20:42.818]        // -> [nReset <= 0x00000080]
[04:20:42.818]      __var canReadPins = 0;
[04:20:42.818]        // -> [canReadPins <= 0x00000000]
[04:20:42.818]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:20:42.822]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:20:42.822]        // -> [canReadPins <= 0x00000001]
[04:20:42.822]    </block>
[04:20:42.822]    <control if="" while="1" timeout="200" info="">
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.822]      // while-condition  =>  TRUE
[04:20:42.822]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.826]      // while-condition  =>  TRUE
[04:20:42.826]      // while "1"  (timeout="200")
[04:20:42.830]      // while-condition  =>  TRUE
[04:20:42.830]      // while "1"  (timeout="200")
[04:20:42.830]      // while  =>  TIMEOUT
[04:20:42.830]      // end while "1"
[04:20:42.830]    </control>
[04:20:42.830]    <control if="canReadPins" while="" timeout="0" info="">
[04:20:42.830]      // if-block "canReadPins"
[04:20:42.830]        // =>  TRUE
[04:20:42.830]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:20:42.830]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:20:42.830]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:20:42.830]        // while-condition  =>  FALSE
[04:20:42.830]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:20:42.830]      </control>
[04:20:42.830]      // end if-block "canReadPins"
[04:20:42.830]    </control>
[04:20:42.830]    <control if="!canReadPins" while="" timeout="0" info="">
[04:20:42.830]      // if-block "!canReadPins"
[04:20:42.830]        // =>  FALSE
[04:20:42.830]      // skip if-block "!canReadPins"
[04:20:42.830]    </control>
[04:20:42.830]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:20:42.834]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:20:42.834]        // =>  TRUE
[04:20:42.834]      <block atomic="false" info="">
[04:20:42.834]        WriteAP(0x00, 0x190008);
[04:20:42.834]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:20:42.834]        WriteAP(0xF0, 0x01);
[04:20:42.838]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:20:42.838]      </block>
[04:20:42.838]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:20:42.838]    </control>
[04:20:42.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:20:42.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:20:42.838]        // =>  FALSE
[04:20:42.838]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:20:42.838]    </control>
[04:20:42.838]    <block atomic="false" info="">
[04:20:42.838]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:20:42.842]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:20:42.842]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:20:42.842]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:20:42.842]      __ap = 0; //lets make sure we reset the access point selection
[04:20:42.842]        // -> [__ap <= 0x00000000]
[04:20:42.846]    </block>
[04:20:42.846]  </sequence>
[04:20:42.846]  
[04:20:42.862]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:20:42.862]  
[04:20:42.862]  <debugvars>
[04:20:42.862]    // Pre-defined
[04:20:42.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:42.862]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:42.862]    __dp=0x00000000
[04:20:42.866]    __ap=0x00000000
[04:20:42.866]    __traceout=0x00000000      (Trace Disabled)
[04:20:42.866]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:42.866]    __FlashAddr=0x00000000
[04:20:42.866]    __FlashLen=0x00000000
[04:20:42.866]    __FlashArg=0x00000000
[04:20:42.866]    __FlashOp=0x00000000
[04:20:42.866]    __Result=0x00000000
[04:20:42.866]  </debugvars>
[04:20:42.866]  
[04:20:42.867]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:20:42.867]    <block atomic="false" info="">
[04:20:42.867]      __var deviceID = 0;
[04:20:42.867]        // -> [deviceID <= 0x00000000]
[04:20:42.867]      __var version = 0;
[04:20:42.867]        // -> [version <= 0x00000000]
[04:20:42.867]      __var partNum = 0;
[04:20:42.867]        // -> [partNum <= 0x00000000]
[04:20:42.867]      __var manuf = 0;
[04:20:42.867]        // -> [manuf <= 0x00000000]
[04:20:42.867]      __var isMSPM0G1X0X_G3X0X = 0;
[04:20:42.867]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:20:42.867]      __var isProduction = 0;
[04:20:42.867]        // -> [isProduction <= 0x00000000]
[04:20:42.867]      __var continueId = 0;
[04:20:42.867]        // -> [continueId <= 0x00000000]
[04:20:42.867]      deviceID =   Read32(0x41C40004);
[04:20:42.874]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:20:42.874]        // -> [deviceID <= 0x2BB8802F]
[04:20:42.874]      version = deviceID >> 28;
[04:20:42.874]        // -> [version <= 0x00000002]
[04:20:42.874]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:20:42.874]        // -> [partNum <= 0x0000BB88]
[04:20:42.874]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:20:42.874]        // -> [manuf <= 0x00000017]
[04:20:42.874]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:20:42.874]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:20:42.874]      isProduction = (version > 0);
[04:20:42.874]        // -> [isProduction <= 0x00000001]
[04:20:42.874]    </block>
[04:20:42.874]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:20:42.874]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:20:42.874]        // =>  FALSE
[04:20:42.874]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:20:42.874]    </control>
[04:20:42.874]    <control if="continueId == 4" while="" timeout="0" info="">
[04:20:42.874]      // if-block "continueId == 4"
[04:20:42.874]        // =>  FALSE
[04:20:42.874]      // skip if-block "continueId == 4"
[04:20:42.874]    </control>
[04:20:42.874]    <control if="!isProduction" while="" timeout="0" info="">
[04:20:42.874]      // if-block "!isProduction"
[04:20:42.874]        // =>  FALSE
[04:20:42.874]      // skip if-block "!isProduction"
[04:20:42.874]    </control>
[04:20:42.874]  </sequence>
[04:20:42.874]  
[04:21:15.763]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:21:15.763]  
[04:21:15.763]  <debugvars>
[04:21:15.763]    // Pre-defined
[04:21:15.763]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:15.763]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:15.763]    __dp=0x00000000
[04:21:15.763]    __ap=0x00000000
[04:21:15.763]    __traceout=0x00000000      (Trace Disabled)
[04:21:15.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:15.763]    __FlashAddr=0x00000000
[04:21:15.763]    __FlashLen=0x00000000
[04:21:15.763]    __FlashArg=0x00000000
[04:21:15.767]    __FlashOp=0x00000000
[04:21:15.767]    __Result=0x00000000
[04:21:15.767]  </debugvars>
[04:21:15.767]  
[04:21:15.767]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:21:15.767]    <block atomic="false" info="">
[04:21:15.767]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:21:15.767]        // -> [isSWJ <= 0x00000001]
[04:21:15.767]      __var hasDormant = __protocol & 0x00020000;
[04:21:15.767]        // -> [hasDormant <= 0x00000000]
[04:21:15.767]      __var protType   = __protocol & 0x0000FFFF;
[04:21:15.767]        // -> [protType <= 0x00000002]
[04:21:15.767]    </block>
[04:21:15.767]    <control if="protType == 1" while="" timeout="0" info="">
[04:21:15.767]      // if-block "protType == 1"
[04:21:15.767]        // =>  FALSE
[04:21:15.767]      // skip if-block "protType == 1"
[04:21:15.767]    </control>
[04:21:15.767]    <control if="protType == 2" while="" timeout="0" info="">
[04:21:15.767]      // if-block "protType == 2"
[04:21:15.767]        // =>  TRUE
[04:21:15.767]      <control if="isSWJ" while="" timeout="0" info="">
[04:21:15.767]        // if-block "isSWJ"
[04:21:15.767]          // =>  TRUE
[04:21:15.767]        <control if="hasDormant" while="" timeout="0" info="">
[04:21:15.767]          // if-block "hasDormant"
[04:21:15.767]            // =>  FALSE
[04:21:15.767]          // skip if-block "hasDormant"
[04:21:15.767]        </control>
[04:21:15.767]        <control if="!hasDormant" while="" timeout="0" info="">
[04:21:15.767]          // if-block "!hasDormant"
[04:21:15.767]            // =>  TRUE
[04:21:15.767]          <block atomic="false" info="">
[04:21:15.767]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:21:15.771]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:15.771]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:21:15.771]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:21:15.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:21:15.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:15.775]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:21:15.777]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:21:15.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:21:15.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:15.777]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:21:15.779]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:21:15.779]          </block>
[04:21:15.779]          // end if-block "!hasDormant"
[04:21:15.779]        </control>
[04:21:15.779]        // end if-block "isSWJ"
[04:21:15.779]      </control>
[04:21:15.779]      <control if="!isSWJ" while="" timeout="0" info="">
[04:21:15.779]        // if-block "!isSWJ"
[04:21:15.779]          // =>  FALSE
[04:21:15.779]        // skip if-block "!isSWJ"
[04:21:15.779]      </control>
[04:21:15.779]      <block atomic="false" info="">
[04:21:15.779]        ReadDP(0x0);
[04:21:15.783]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:21:15.783]      </block>
[04:21:15.783]      // end if-block "protType == 2"
[04:21:15.783]    </control>
[04:21:15.783]  </sequence>
[04:21:15.783]  
[04:21:15.783]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:21:15.783]  
[04:21:15.783]  <debugvars>
[04:21:15.787]    // Pre-defined
[04:21:15.787]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:15.787]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:15.787]    __dp=0x00000000
[04:21:15.787]    __ap=0x00000000
[04:21:15.787]    __traceout=0x00000000      (Trace Disabled)
[04:21:15.787]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:15.787]    __FlashAddr=0x00000000
[04:21:15.787]    __FlashLen=0x00000000
[04:21:15.787]    __FlashArg=0x00000000
[04:21:15.787]    __FlashOp=0x00000000
[04:21:15.787]    __Result=0x00000000
[04:21:15.787]  </debugvars>
[04:21:15.787]  
[04:21:15.787]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:21:15.787]    <block atomic="false" info="">
[04:21:15.787]      __var SW_DP_ABORT       = 0x0;
[04:21:15.787]        // -> [SW_DP_ABORT <= 0x00000000]
[04:21:15.787]      __var DP_CTRL_STAT      = 0x4;
[04:21:15.787]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:21:15.787]      __var DP_SELECT         = 0x8;
[04:21:15.787]        // -> [DP_SELECT <= 0x00000008]
[04:21:15.787]      __var powered_down      = 0;
[04:21:15.787]        // -> [powered_down <= 0x00000000]
[04:21:15.787]      WriteDP(DP_SELECT, 0x00000000);
[04:21:15.791]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:21:15.791]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:21:15.791]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:21:15.791]        // -> [powered_down <= 0x00000001]
[04:21:15.791]    </block>
[04:21:15.791]    <control if="powered_down" while="" timeout="0" info="">
[04:21:15.791]      // if-block "powered_down"
[04:21:15.791]        // =>  TRUE
[04:21:15.791]      <block atomic="false" info="">
[04:21:15.791]        Message(0, "Debug/System power-up request sent");
[04:21:15.795]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:21:15.801]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:21:15.801]      </block>
[04:21:15.801]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:21:15.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:21:15.801]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:21:15.801]        // while-condition  =>  FALSE
[04:21:15.804]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:21:15.804]      </control>
[04:21:15.804]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:21:15.804]        // if-block "(__protocol & 0xFFFF) == 1"
[04:21:15.804]          // =>  FALSE
[04:21:15.804]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:21:15.804]      </control>
[04:21:15.804]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:21:15.804]        // if-block "(__protocol & 0xFFFF) == 2"
[04:21:15.804]          // =>  TRUE
[04:21:15.804]        <block atomic="false" info="">
[04:21:15.804]          Message(0, "executing SWD power up");
[04:21:15.804]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:21:15.808]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:21:15.808]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:21:15.808]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:21:15.808]        </block>
[04:21:15.808]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:21:15.808]      </control>
[04:21:15.808]      // end if-block "powered_down"
[04:21:15.808]    </control>
[04:21:15.808]    <block atomic="false" info="">
[04:21:15.808]      __var DEBUG_PORT_VAL    = 0;
[04:21:15.808]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:21:15.808]      __var ACCESS_POINT_VAL  = 0;
[04:21:15.808]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:21:15.808]      __ap = 1; 
[04:21:15.808]        // -> [__ap <= 0x00000001]
[04:21:15.812]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:21:15.812]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:21:15.812]      __ap = 4;
[04:21:15.812]        // -> [__ap <= 0x00000004]
[04:21:15.812]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:15.816]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:21:15.816]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:21:15.816]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:15.820]    </block>
[04:21:15.820]    <block atomic="false" info="">
[04:21:15.820]      __var nReset = 0x80;
[04:21:15.820]        // -> [nReset <= 0x00000080]
[04:21:15.820]      __var canReadPins = 0;
[04:21:15.820]        // -> [canReadPins <= 0x00000000]
[04:21:15.820]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:21:15.824]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:21:15.824]        // -> [canReadPins <= 0x00000001]
[04:21:15.824]    </block>
[04:21:15.824]    <control if="" while="1" timeout="200" info="">
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.824]      // while "1"  (timeout="200")
[04:21:15.824]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.828]      // while-condition  =>  TRUE
[04:21:15.828]      // while "1"  (timeout="200")
[04:21:15.832]      // while-condition  =>  TRUE
[04:21:15.832]      // while "1"  (timeout="200")
[04:21:15.832]      // while  =>  TIMEOUT
[04:21:15.832]      // end while "1"
[04:21:15.832]    </control>
[04:21:15.832]    <control if="canReadPins" while="" timeout="0" info="">
[04:21:15.832]      // if-block "canReadPins"
[04:21:15.832]        // =>  TRUE
[04:21:15.832]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:21:15.832]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:21:15.832]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:21:15.832]        // while-condition  =>  FALSE
[04:21:15.832]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:21:15.832]      </control>
[04:21:15.832]      // end if-block "canReadPins"
[04:21:15.832]    </control>
[04:21:15.832]    <control if="!canReadPins" while="" timeout="0" info="">
[04:21:15.832]      // if-block "!canReadPins"
[04:21:15.832]        // =>  FALSE
[04:21:15.832]      // skip if-block "!canReadPins"
[04:21:15.836]    </control>
[04:21:15.836]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:21:15.836]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:15.836]        // =>  TRUE
[04:21:15.836]      <block atomic="false" info="">
[04:21:15.836]        WriteAP(0x00, 0x190008);
[04:21:15.836]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:15.836]        WriteAP(0xF0, 0x01);
[04:21:15.840]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:15.842]      </block>
[04:21:15.842]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:15.842]    </control>
[04:21:15.842]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:21:15.842]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:15.842]        // =>  FALSE
[04:21:15.842]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:15.843]    </control>
[04:21:15.843]    <block atomic="false" info="">
[04:21:15.843]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:15.849]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:21:15.849]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:21:15.849]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:15.849]      __ap = 0; //lets make sure we reset the access point selection
[04:21:15.851]        // -> [__ap <= 0x00000000]
[04:21:15.851]    </block>
[04:21:15.851]  </sequence>
[04:21:15.851]  
[04:21:15.870]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:21:15.870]  
[04:21:15.870]  <debugvars>
[04:21:15.871]    // Pre-defined
[04:21:15.871]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:15.871]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:15.871]    __dp=0x00000000
[04:21:15.871]    __ap=0x00000000
[04:21:15.871]    __traceout=0x00000000      (Trace Disabled)
[04:21:15.871]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:15.871]    __FlashAddr=0x00000000
[04:21:15.871]    __FlashLen=0x00000000
[04:21:15.871]    __FlashArg=0x00000000
[04:21:15.871]    __FlashOp=0x00000000
[04:21:15.871]    __Result=0x00000000
[04:21:15.871]  </debugvars>
[04:21:15.871]  
[04:21:15.871]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:21:15.871]    <block atomic="false" info="">
[04:21:15.871]      __var deviceID = 0;
[04:21:15.871]        // -> [deviceID <= 0x00000000]
[04:21:15.871]      __var version = 0;
[04:21:15.871]        // -> [version <= 0x00000000]
[04:21:15.871]      __var partNum = 0;
[04:21:15.871]        // -> [partNum <= 0x00000000]
[04:21:15.871]      __var manuf = 0;
[04:21:15.871]        // -> [manuf <= 0x00000000]
[04:21:15.871]      __var isMSPM0G1X0X_G3X0X = 0;
[04:21:15.871]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:21:15.871]      __var isProduction = 0;
[04:21:15.871]        // -> [isProduction <= 0x00000000]
[04:21:15.871]      __var continueId = 0;
[04:21:15.874]        // -> [continueId <= 0x00000000]
[04:21:15.874]      deviceID =   Read32(0x41C40004);
[04:21:15.878]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:21:15.878]        // -> [deviceID <= 0x2BB8802F]
[04:21:15.878]      version = deviceID >> 28;
[04:21:15.878]        // -> [version <= 0x00000002]
[04:21:15.878]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:21:15.878]        // -> [partNum <= 0x0000BB88]
[04:21:15.878]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:21:15.878]        // -> [manuf <= 0x00000017]
[04:21:15.878]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:21:15.878]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:21:15.878]      isProduction = (version > 0);
[04:21:15.878]        // -> [isProduction <= 0x00000001]
[04:21:15.878]    </block>
[04:21:15.878]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:21:15.878]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:21:15.878]        // =>  FALSE
[04:21:15.878]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:21:15.878]    </control>
[04:21:15.878]    <control if="continueId == 4" while="" timeout="0" info="">
[04:21:15.878]      // if-block "continueId == 4"
[04:21:15.882]        // =>  FALSE
[04:21:15.882]      // skip if-block "continueId == 4"
[04:21:15.882]    </control>
[04:21:15.882]    <control if="!isProduction" while="" timeout="0" info="">
[04:21:15.882]      // if-block "!isProduction"
[04:21:15.882]        // =>  FALSE
[04:21:15.882]      // skip if-block "!isProduction"
[04:21:15.882]    </control>
[04:21:15.882]  </sequence>
[04:21:15.882]  
[04:25:00.749]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:25:00.749]  
[04:25:00.759]  <debugvars>
[04:25:00.759]    // Pre-defined
[04:25:00.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:25:00.759]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:25:00.759]    __dp=0x00000000
[04:25:00.759]    __ap=0x00000000
[04:25:00.759]    __traceout=0x00000000      (Trace Disabled)
[04:25:00.759]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:25:00.759]    __FlashAddr=0x00000000
[04:25:00.759]    __FlashLen=0x00000000
[04:25:00.759]    __FlashArg=0x00000000
[04:25:00.759]    __FlashOp=0x00000000
[04:25:00.759]    __Result=0x00000000
[04:25:00.759]  </debugvars>
[04:25:00.759]  
[04:25:00.759]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:25:00.761]    <block atomic="false" info="">
[04:25:00.761]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:25:00.761]        // -> [isSWJ <= 0x00000001]
[04:25:00.761]      __var hasDormant = __protocol & 0x00020000;
[04:25:00.761]        // -> [hasDormant <= 0x00000000]
[04:25:00.761]      __var protType   = __protocol & 0x0000FFFF;
[04:25:00.761]        // -> [protType <= 0x00000002]
[04:25:00.761]    </block>
[04:25:00.761]    <control if="protType == 1" while="" timeout="0" info="">
[04:25:00.761]      // if-block "protType == 1"
[04:25:00.761]        // =>  FALSE
[04:25:00.761]      // skip if-block "protType == 1"
[04:25:00.761]    </control>
[04:25:00.761]    <control if="protType == 2" while="" timeout="0" info="">
[04:25:00.761]      // if-block "protType == 2"
[04:25:00.761]        // =>  TRUE
[04:25:00.761]      <control if="isSWJ" while="" timeout="0" info="">
[04:25:00.761]        // if-block "isSWJ"
[04:25:00.761]          // =>  TRUE
[04:25:00.761]        <control if="hasDormant" while="" timeout="0" info="">
[04:25:00.761]          // if-block "hasDormant"
[04:25:00.761]            // =>  FALSE
[04:25:00.761]          // skip if-block "hasDormant"
[04:25:00.761]        </control>
[04:25:00.761]        <control if="!hasDormant" while="" timeout="0" info="">
[04:25:00.761]          // if-block "!hasDormant"
[04:25:00.761]            // =>  TRUE
[04:25:00.761]          <block atomic="false" info="">
[04:25:00.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:25:00.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:25:00.765]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:25:00.765]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:25:00.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:25:00.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:25:00.769]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:25:00.771]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:25:00.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:25:00.771]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:25:00.771]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:25:00.774]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:25:00.774]          </block>
[04:25:00.774]          // end if-block "!hasDormant"
[04:25:00.774]        </control>
[04:25:00.774]        // end if-block "isSWJ"
[04:25:00.774]      </control>
[04:25:00.774]      <control if="!isSWJ" while="" timeout="0" info="">
[04:25:00.774]        // if-block "!isSWJ"
[04:25:00.774]          // =>  FALSE
[04:25:00.774]        // skip if-block "!isSWJ"
[04:25:00.774]      </control>
[04:25:00.774]      <block atomic="false" info="">
[04:25:00.774]        ReadDP(0x0);
[04:25:00.778]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:25:00.778]      </block>
[04:25:00.778]      // end if-block "protType == 2"
[04:25:00.778]    </control>
[04:25:00.778]  </sequence>
[04:25:00.778]  
[04:25:00.786]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:25:00.786]  
[04:25:00.786]  <debugvars>
[04:25:00.786]    // Pre-defined
[04:25:00.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:25:00.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:25:00.786]    __dp=0x00000000
[04:25:00.786]    __ap=0x00000000
[04:25:00.786]    __traceout=0x00000000      (Trace Disabled)
[04:25:00.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:25:00.786]    __FlashAddr=0x00000000
[04:25:00.786]    __FlashLen=0x00000000
[04:25:00.786]    __FlashArg=0x00000000
[04:25:00.786]    __FlashOp=0x00000000
[04:25:00.786]    __Result=0x00000000
[04:25:00.786]  </debugvars>
[04:25:00.786]  
[04:25:00.786]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:25:00.786]    <block atomic="false" info="">
[04:25:00.786]      __var SW_DP_ABORT       = 0x0;
[04:25:00.786]        // -> [SW_DP_ABORT <= 0x00000000]
[04:25:00.786]      __var DP_CTRL_STAT      = 0x4;
[04:25:00.786]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:25:00.786]      __var DP_SELECT         = 0x8;
[04:25:00.786]        // -> [DP_SELECT <= 0x00000008]
[04:25:00.790]      __var powered_down      = 0;
[04:25:00.790]        // -> [powered_down <= 0x00000000]
[04:25:00.790]      WriteDP(DP_SELECT, 0x00000000);
[04:25:00.790]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:25:00.790]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:25:00.794]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:25:00.794]        // -> [powered_down <= 0x00000001]
[04:25:00.794]    </block>
[04:25:00.794]    <control if="powered_down" while="" timeout="0" info="">
[04:25:00.794]      // if-block "powered_down"
[04:25:00.794]        // =>  TRUE
[04:25:00.794]      <block atomic="false" info="">
[04:25:00.795]        Message(0, "Debug/System power-up request sent");
[04:25:00.795]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:25:00.798]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:25:00.798]      </block>
[04:25:00.798]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:25:00.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:25:00.798]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:25:00.798]        // while-condition  =>  FALSE
[04:25:00.798]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:25:00.801]      </control>
[04:25:00.801]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:25:00.801]        // if-block "(__protocol & 0xFFFF) == 1"
[04:25:00.801]          // =>  FALSE
[04:25:00.801]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:25:00.801]      </control>
[04:25:00.801]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:25:00.801]        // if-block "(__protocol & 0xFFFF) == 2"
[04:25:00.801]          // =>  TRUE
[04:25:00.801]        <block atomic="false" info="">
[04:25:00.801]          Message(0, "executing SWD power up");
[04:25:00.803]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:25:00.806]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:25:00.807]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:25:00.807]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:25:00.807]        </block>
[04:25:00.807]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:25:00.807]      </control>
[04:25:00.807]      // end if-block "powered_down"
[04:25:00.807]    </control>
[04:25:00.807]    <block atomic="false" info="">
[04:25:00.807]      __var DEBUG_PORT_VAL    = 0;
[04:25:00.807]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:25:00.810]      __var ACCESS_POINT_VAL  = 0;
[04:25:00.810]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:25:00.810]      __ap = 1; 
[04:25:00.810]        // -> [__ap <= 0x00000001]
[04:25:00.810]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:25:00.823]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:25:00.823]      __ap = 4;
[04:25:00.823]        // -> [__ap <= 0x00000004]
[04:25:00.823]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:25:00.827]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:25:00.827]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:25:00.827]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:25:00.828]    </block>
[04:25:00.828]    <block atomic="false" info="">
[04:25:00.828]      __var nReset = 0x80;
[04:25:00.828]        // -> [nReset <= 0x00000080]
[04:25:00.828]      __var canReadPins = 0;
[04:25:00.828]        // -> [canReadPins <= 0x00000000]
[04:25:00.828]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:25:00.832]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:25:00.832]        // -> [canReadPins <= 0x00000001]
[04:25:00.832]    </block>
[04:25:00.832]    <control if="" while="1" timeout="200" info="">
[04:25:00.832]      // while "1"  (timeout="200")
[04:25:00.832]      // while-condition  =>  TRUE
[04:25:00.832]      // while "1"  (timeout="200")
[04:25:00.832]      // while-condition  =>  TRUE
[04:25:00.832]      // while "1"  (timeout="200")
[04:25:00.832]      // while-condition  =>  TRUE
[04:25:00.832]      // while "1"  (timeout="200")
[04:25:00.832]      // while-condition  =>  TRUE
[04:25:00.832]      // while "1"  (timeout="200")
[04:25:00.832]      // while-condition  =>  TRUE
[04:25:00.832]      // while "1"  (timeout="200")
[04:25:00.832]      // while-condition  =>  TRUE
[04:25:00.832]      // while "1"  (timeout="200")
[04:25:00.832]      // while-condition  =>  TRUE
[04:25:00.835]      // while "1"  (timeout="200")
[04:25:00.835]      // while-condition  =>  TRUE
[04:25:00.835]      // while "1"  (timeout="200")
[04:25:00.835]      // while-condition  =>  TRUE
[04:25:00.835]      // while "1"  (timeout="200")
[04:25:00.835]      // while-condition  =>  TRUE
[04:25:00.835]      // while "1"  (timeout="200")
[04:25:00.835]      // while-condition  =>  TRUE
[04:25:00.835]      // while "1"  (timeout="200")
[04:25:00.835]      // while-condition  =>  TRUE
[04:25:00.835]      // while "1"  (timeout="200")
[04:25:00.835]      // while-condition  =>  TRUE
[04:25:00.835]      // while "1"  (timeout="200")
[04:25:00.836]      // while-condition  =>  TRUE
[04:25:00.836]      // while "1"  (timeout="200")
[04:25:00.836]      // while-condition  =>  TRUE
[04:25:00.836]      // while "1"  (timeout="200")
[04:25:00.836]      // while-condition  =>  TRUE
[04:25:00.836]      // while "1"  (timeout="200")
[04:25:00.836]      // while-condition  =>  TRUE
[04:25:00.836]      // while "1"  (timeout="200")
[04:25:00.836]      // while-condition  =>  TRUE
[04:25:00.836]      // while "1"  (timeout="200")
[04:25:00.836]      // while-condition  =>  TRUE
[04:25:00.838]      // while "1"  (timeout="200")
[04:25:00.838]      // while-condition  =>  TRUE
[04:25:00.838]      // while "1"  (timeout="200")
[04:25:00.838]      // while-condition  =>  TRUE
[04:25:00.838]      // while "1"  (timeout="200")
[04:25:00.838]      // while-condition  =>  TRUE
[04:25:00.838]      // while "1"  (timeout="200")
[04:25:00.838]      // while-condition  =>  TRUE
[04:25:00.838]      // while "1"  (timeout="200")
[04:25:00.838]      // while-condition  =>  TRUE
[04:25:00.839]      // while "1"  (timeout="200")
[04:25:00.839]      // while-condition  =>  TRUE
[04:25:00.839]      // while "1"  (timeout="200")
[04:25:00.839]      // while-condition  =>  TRUE
[04:25:00.839]      // while "1"  (timeout="200")
[04:25:00.839]      // while-condition  =>  TRUE
[04:25:00.840]      // while "1"  (timeout="200")
[04:25:00.840]      // while-condition  =>  TRUE
[04:25:00.840]      // while "1"  (timeout="200")
[04:25:00.840]      // while-condition  =>  TRUE
[04:25:00.840]      // while "1"  (timeout="200")
[04:25:00.840]      // while-condition  =>  TRUE
[04:25:00.840]      // while "1"  (timeout="200")
[04:25:00.840]      // while-condition  =>  TRUE
[04:25:00.840]      // while "1"  (timeout="200")
[04:25:00.840]      // while-condition  =>  TRUE
[04:25:00.840]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.842]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.842]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.842]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.842]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.842]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.842]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.842]      // while "1"  (timeout="200")
[04:25:00.842]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.843]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.843]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.843]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.843]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.843]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.843]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.843]      // while-condition  =>  TRUE
[04:25:00.843]      // while "1"  (timeout="200")
[04:25:00.845]      // while-condition  =>  TRUE
[04:25:00.845]      // while "1"  (timeout="200")
[04:25:00.845]      // while  =>  TIMEOUT
[04:25:00.845]      // end while "1"
[04:25:00.845]    </control>
[04:25:00.845]    <control if="canReadPins" while="" timeout="0" info="">
[04:25:00.845]      // if-block "canReadPins"
[04:25:00.845]        // =>  TRUE
[04:25:00.845]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:25:00.845]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:25:00.847]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:25:00.847]        // while-condition  =>  FALSE
[04:25:00.847]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:25:00.847]      </control>
[04:25:00.849]      // end if-block "canReadPins"
[04:25:00.849]    </control>
[04:25:00.849]    <control if="!canReadPins" while="" timeout="0" info="">
[04:25:00.849]      // if-block "!canReadPins"
[04:25:00.849]        // =>  FALSE
[04:25:00.849]      // skip if-block "!canReadPins"
[04:25:00.849]    </control>
[04:25:00.849]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:25:00.849]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:25:00.849]        // =>  TRUE
[04:25:00.849]      <block atomic="false" info="">
[04:25:00.849]        WriteAP(0x00, 0x190008);
[04:25:00.852]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:25:00.852]        WriteAP(0xF0, 0x01);
[04:25:00.856]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:25:00.856]      </block>
[04:25:00.856]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:25:00.856]    </control>
[04:25:00.856]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:25:00.856]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:25:00.856]        // =>  FALSE
[04:25:00.856]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:25:00.856]    </control>
[04:25:00.856]    <block atomic="false" info="">
[04:25:00.856]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:25:00.860]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:25:00.860]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:25:00.860]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:25:00.864]      __ap = 0; //lets make sure we reset the access point selection
[04:25:00.864]        // -> [__ap <= 0x00000000]
[04:25:00.864]    </block>
[04:25:00.864]  </sequence>
[04:25:00.864]  
[04:25:00.888]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:25:00.888]  
[04:25:00.888]  <debugvars>
[04:25:00.888]    // Pre-defined
[04:25:00.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:25:00.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:25:00.888]    __dp=0x00000000
[04:25:00.888]    __ap=0x00000000
[04:25:00.888]    __traceout=0x00000000      (Trace Disabled)
[04:25:00.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:25:00.888]    __FlashAddr=0x00000000
[04:25:00.888]    __FlashLen=0x00000000
[04:25:00.888]    __FlashArg=0x00000000
[04:25:00.888]    __FlashOp=0x00000000
[04:25:00.888]    __Result=0x00000000
[04:25:00.888]  </debugvars>
[04:25:00.888]  
[04:25:00.888]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:25:00.888]    <block atomic="false" info="">
[04:25:00.888]      __var deviceID = 0;
[04:25:00.888]        // -> [deviceID <= 0x00000000]
[04:25:00.888]      __var version = 0;
[04:25:00.888]        // -> [version <= 0x00000000]
[04:25:00.892]      __var partNum = 0;
[04:25:00.892]        // -> [partNum <= 0x00000000]
[04:25:00.892]      __var manuf = 0;
[04:25:00.892]        // -> [manuf <= 0x00000000]
[04:25:00.892]      __var isMSPM0G1X0X_G3X0X = 0;
[04:25:00.892]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:25:00.892]      __var isProduction = 0;
[04:25:00.892]        // -> [isProduction <= 0x00000000]
[04:25:00.892]      __var continueId = 0;
[04:25:00.892]        // -> [continueId <= 0x00000000]
[04:25:00.892]      deviceID =   Read32(0x41C40004);
[04:25:00.900]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:25:00.900]        // -> [deviceID <= 0x2BB8802F]
[04:25:00.900]      version = deviceID >> 28;
[04:25:00.900]        // -> [version <= 0x00000002]
[04:25:00.900]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:25:00.900]        // -> [partNum <= 0x0000BB88]
[04:25:00.900]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:25:00.900]        // -> [manuf <= 0x00000017]
[04:25:00.900]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:25:00.900]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:25:00.900]      isProduction = (version > 0);
[04:25:00.900]        // -> [isProduction <= 0x00000001]
[04:25:00.900]    </block>
[04:25:00.900]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:25:00.900]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:25:00.900]        // =>  FALSE
[04:25:00.900]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:25:00.900]    </control>
[04:25:00.900]    <control if="continueId == 4" while="" timeout="0" info="">
[04:25:00.900]      // if-block "continueId == 4"
[04:25:00.904]        // =>  FALSE
[04:25:00.904]      // skip if-block "continueId == 4"
[04:25:00.904]    </control>
[04:25:00.904]    <control if="!isProduction" while="" timeout="0" info="">
[04:25:00.904]      // if-block "!isProduction"
[04:25:00.904]        // =>  FALSE
[04:25:00.904]      // skip if-block "!isProduction"
[04:25:00.904]    </control>
[04:25:00.904]  </sequence>
[04:25:00.904]  
[04:26:10.348]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:26:10.348]  
[04:26:10.359]  <debugvars>
[04:26:10.359]    // Pre-defined
[04:26:10.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:26:10.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:26:10.359]    __dp=0x00000000
[04:26:10.359]    __ap=0x00000000
[04:26:10.359]    __traceout=0x00000000      (Trace Disabled)
[04:26:10.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:26:10.359]    __FlashAddr=0x00000000
[04:26:10.359]    __FlashLen=0x00000000
[04:26:10.359]    __FlashArg=0x00000000
[04:26:10.359]    __FlashOp=0x00000000
[04:26:10.359]    __Result=0x00000000
[04:26:10.359]  </debugvars>
[04:26:10.359]  
[04:26:10.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:26:10.359]    <block atomic="false" info="">
[04:26:10.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:26:10.361]        // -> [isSWJ <= 0x00000001]
[04:26:10.361]      __var hasDormant = __protocol & 0x00020000;
[04:26:10.361]        // -> [hasDormant <= 0x00000000]
[04:26:10.361]      __var protType   = __protocol & 0x0000FFFF;
[04:26:10.361]        // -> [protType <= 0x00000002]
[04:26:10.361]    </block>
[04:26:10.361]    <control if="protType == 1" while="" timeout="0" info="">
[04:26:10.361]      // if-block "protType == 1"
[04:26:10.361]        // =>  FALSE
[04:26:10.361]      // skip if-block "protType == 1"
[04:26:10.361]    </control>
[04:26:10.361]    <control if="protType == 2" while="" timeout="0" info="">
[04:26:10.361]      // if-block "protType == 2"
[04:26:10.361]        // =>  TRUE
[04:26:10.361]      <control if="isSWJ" while="" timeout="0" info="">
[04:26:10.361]        // if-block "isSWJ"
[04:26:10.363]          // =>  TRUE
[04:26:10.363]        <control if="hasDormant" while="" timeout="0" info="">
[04:26:10.363]          // if-block "hasDormant"
[04:26:10.363]            // =>  FALSE
[04:26:10.363]          // skip if-block "hasDormant"
[04:26:10.363]        </control>
[04:26:10.363]        <control if="!hasDormant" while="" timeout="0" info="">
[04:26:10.363]          // if-block "!hasDormant"
[04:26:10.363]            // =>  TRUE
[04:26:10.363]          <block atomic="false" info="">
[04:26:10.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:26:10.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:26:10.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:26:10.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:26:10.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:26:10.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:26:10.365]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:26:10.370]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:26:10.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:26:10.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:26:10.377]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:26:10.377]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:26:10.377]          </block>
[04:26:10.377]          // end if-block "!hasDormant"
[04:26:10.377]        </control>
[04:26:10.377]        // end if-block "isSWJ"
[04:26:10.377]      </control>
[04:26:10.377]      <control if="!isSWJ" while="" timeout="0" info="">
[04:26:10.377]        // if-block "!isSWJ"
[04:26:10.377]          // =>  FALSE
[04:26:10.377]        // skip if-block "!isSWJ"
[04:26:10.377]      </control>
[04:26:10.377]      <block atomic="false" info="">
[04:26:10.377]        ReadDP(0x0);
[04:26:10.381]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:26:10.381]      </block>
[04:26:10.381]      // end if-block "protType == 2"
[04:26:10.381]    </control>
[04:26:10.381]  </sequence>
[04:26:10.381]  
[04:26:10.385]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:26:10.385]  
[04:26:10.385]  <debugvars>
[04:26:10.385]    // Pre-defined
[04:26:10.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:26:10.385]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:26:10.385]    __dp=0x00000000
[04:26:10.385]    __ap=0x00000000
[04:26:10.385]    __traceout=0x00000000      (Trace Disabled)
[04:26:10.385]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:26:10.385]    __FlashAddr=0x00000000
[04:26:10.385]    __FlashLen=0x00000000
[04:26:10.385]    __FlashArg=0x00000000
[04:26:10.385]    __FlashOp=0x00000000
[04:26:10.385]    __Result=0x00000000
[04:26:10.385]  </debugvars>
[04:26:10.385]  
[04:26:10.385]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:26:10.385]    <block atomic="false" info="">
[04:26:10.385]      __var SW_DP_ABORT       = 0x0;
[04:26:10.385]        // -> [SW_DP_ABORT <= 0x00000000]
[04:26:10.385]      __var DP_CTRL_STAT      = 0x4;
[04:26:10.385]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:26:10.385]      __var DP_SELECT         = 0x8;
[04:26:10.385]        // -> [DP_SELECT <= 0x00000008]
[04:26:10.389]      __var powered_down      = 0;
[04:26:10.389]        // -> [powered_down <= 0x00000000]
[04:26:10.389]      WriteDP(DP_SELECT, 0x00000000);
[04:26:10.390]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:26:10.390]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:26:10.390]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:26:10.390]        // -> [powered_down <= 0x00000001]
[04:26:10.390]    </block>
[04:26:10.390]    <control if="powered_down" while="" timeout="0" info="">
[04:26:10.390]      // if-block "powered_down"
[04:26:10.390]        // =>  TRUE
[04:26:10.390]      <block atomic="false" info="">
[04:26:10.390]        Message(0, "Debug/System power-up request sent");
[04:26:10.394]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:26:10.398]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:26:10.398]      </block>
[04:26:10.398]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:26:10.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:26:10.398]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:26:10.398]        // while-condition  =>  FALSE
[04:26:10.398]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:26:10.398]      </control>
[04:26:10.398]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:26:10.398]        // if-block "(__protocol & 0xFFFF) == 1"
[04:26:10.398]          // =>  FALSE
[04:26:10.398]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:26:10.398]      </control>
[04:26:10.398]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:26:10.398]        // if-block "(__protocol & 0xFFFF) == 2"
[04:26:10.398]          // =>  TRUE
[04:26:10.402]        <block atomic="false" info="">
[04:26:10.402]          Message(0, "executing SWD power up");
[04:26:10.402]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:26:10.402]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:26:10.402]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:26:10.406]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:26:10.406]        </block>
[04:26:10.406]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:26:10.406]      </control>
[04:26:10.406]      // end if-block "powered_down"
[04:26:10.406]    </control>
[04:26:10.406]    <block atomic="false" info="">
[04:26:10.406]      __var DEBUG_PORT_VAL    = 0;
[04:26:10.406]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:26:10.406]      __var ACCESS_POINT_VAL  = 0;
[04:26:10.406]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:26:10.406]      __ap = 1; 
[04:26:10.406]        // -> [__ap <= 0x00000001]
[04:26:10.406]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:26:10.410]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:26:10.410]      __ap = 4;
[04:26:10.410]        // -> [__ap <= 0x00000004]
[04:26:10.410]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:26:10.414]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:26:10.414]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:26:10.414]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:26:10.418]    </block>
[04:26:10.418]    <block atomic="false" info="">
[04:26:10.418]      __var nReset = 0x80;
[04:26:10.418]        // -> [nReset <= 0x00000080]
[04:26:10.418]      __var canReadPins = 0;
[04:26:10.418]        // -> [canReadPins <= 0x00000000]
[04:26:10.418]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:26:10.418]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:26:10.418]        // -> [canReadPins <= 0x00000001]
[04:26:10.418]    </block>
[04:26:10.418]    <control if="" while="1" timeout="200" info="">
[04:26:10.418]      // while "1"  (timeout="200")
[04:26:10.418]      // while-condition  =>  TRUE
[04:26:10.418]      // while "1"  (timeout="200")
[04:26:10.418]      // while-condition  =>  TRUE
[04:26:10.418]      // while "1"  (timeout="200")
[04:26:10.422]      // while-condition  =>  TRUE
[04:26:10.422]      // while "1"  (timeout="200")
[04:26:10.422]      // while-condition  =>  TRUE
[04:26:10.422]      // while "1"  (timeout="200")
[04:26:10.422]      // while-condition  =>  TRUE
[04:26:10.422]      // while "1"  (timeout="200")
[04:26:10.422]      // while-condition  =>  TRUE
[04:26:10.423]      // while "1"  (timeout="200")
[04:26:10.423]      // while  =>  TIMEOUT
[04:26:10.423]      // end while "1"
[04:26:10.423]    </control>
[04:26:10.423]    <control if="canReadPins" while="" timeout="0" info="">
[04:26:10.423]      // if-block "canReadPins"
[04:26:10.423]        // =>  TRUE
[04:26:10.423]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:26:10.423]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:26:10.424]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:26:10.424]        // while-condition  =>  FALSE
[04:26:10.424]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:26:10.424]      </control>
[04:26:10.424]      // end if-block "canReadPins"
[04:26:10.424]    </control>
[04:26:10.424]    <control if="!canReadPins" while="" timeout="0" info="">
[04:26:10.424]      // if-block "!canReadPins"
[04:26:10.424]        // =>  FALSE
[04:26:10.426]      // skip if-block "!canReadPins"
[04:26:10.426]    </control>
[04:26:10.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:26:10.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:26:10.426]        // =>  TRUE
[04:26:10.426]      <block atomic="false" info="">
[04:26:10.426]        WriteAP(0x00, 0x190008);
[04:26:10.427]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:26:10.427]        WriteAP(0xF0, 0x01);
[04:26:10.431]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:26:10.431]      </block>
[04:26:10.431]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:26:10.431]    </control>
[04:26:10.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:26:10.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:26:10.431]        // =>  FALSE
[04:26:10.433]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:26:10.433]    </control>
[04:26:10.433]    <block atomic="false" info="">
[04:26:10.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:26:10.434]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:26:10.434]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:26:10.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:26:10.438]      __ap = 0; //lets make sure we reset the access point selection
[04:26:10.438]        // -> [__ap <= 0x00000000]
[04:26:10.438]    </block>
[04:26:10.438]  </sequence>
[04:26:10.438]  
[04:26:10.464]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:26:10.464]  
[04:26:10.464]  <debugvars>
[04:26:10.464]    // Pre-defined
[04:26:10.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:26:10.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:26:10.464]    __dp=0x00000000
[04:26:10.464]    __ap=0x00000000
[04:26:10.464]    __traceout=0x00000000      (Trace Disabled)
[04:26:10.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:26:10.464]    __FlashAddr=0x00000000
[04:26:10.464]    __FlashLen=0x00000000
[04:26:10.464]    __FlashArg=0x00000000
[04:26:10.464]    __FlashOp=0x00000000
[04:26:10.464]    __Result=0x00000000
[04:26:10.464]  </debugvars>
[04:26:10.464]  
[04:26:10.464]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:26:10.464]    <block atomic="false" info="">
[04:26:10.464]      __var deviceID = 0;
[04:26:10.464]        // -> [deviceID <= 0x00000000]
[04:26:10.464]      __var version = 0;
[04:26:10.464]        // -> [version <= 0x00000000]
[04:26:10.464]      __var partNum = 0;
[04:26:10.468]        // -> [partNum <= 0x00000000]
[04:26:10.468]      __var manuf = 0;
[04:26:10.468]        // -> [manuf <= 0x00000000]
[04:26:10.468]      __var isMSPM0G1X0X_G3X0X = 0;
[04:26:10.468]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:26:10.468]      __var isProduction = 0;
[04:26:10.468]        // -> [isProduction <= 0x00000000]
[04:26:10.468]      __var continueId = 0;
[04:26:10.468]        // -> [continueId <= 0x00000000]
[04:26:10.468]      deviceID =   Read32(0x41C40004);
[04:26:10.476]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:26:10.476]        // -> [deviceID <= 0x2BB8802F]
[04:26:10.476]      version = deviceID >> 28;
[04:26:10.476]        // -> [version <= 0x00000002]
[04:26:10.476]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:26:10.476]        // -> [partNum <= 0x0000BB88]
[04:26:10.476]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:26:10.476]        // -> [manuf <= 0x00000017]
[04:26:10.476]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:26:10.476]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:26:10.476]      isProduction = (version > 0);
[04:26:10.476]        // -> [isProduction <= 0x00000001]
[04:26:10.476]    </block>
[04:26:10.476]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:26:10.476]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:26:10.476]        // =>  FALSE
[04:26:10.476]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:26:10.480]    </control>
[04:26:10.480]    <control if="continueId == 4" while="" timeout="0" info="">
[04:26:10.480]      // if-block "continueId == 4"
[04:26:10.480]        // =>  FALSE
[04:26:10.480]      // skip if-block "continueId == 4"
[04:26:10.480]    </control>
[04:26:10.480]    <control if="!isProduction" while="" timeout="0" info="">
[04:26:10.481]      // if-block "!isProduction"
[04:26:10.481]        // =>  FALSE
[04:26:10.481]      // skip if-block "!isProduction"
[04:26:10.481]    </control>
[04:26:10.481]  </sequence>
[04:26:10.481]  
[04:35:53.373]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:35:53.373]  
[04:35:53.384]  <debugvars>
[04:35:53.384]    // Pre-defined
[04:35:53.384]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:35:53.384]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:35:53.384]    __dp=0x00000000
[04:35:53.384]    __ap=0x00000000
[04:35:53.384]    __traceout=0x00000000      (Trace Disabled)
[04:35:53.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:35:53.384]    __FlashAddr=0x00000000
[04:35:53.384]    __FlashLen=0x00000000
[04:35:53.384]    __FlashArg=0x00000000
[04:35:53.384]    __FlashOp=0x00000000
[04:35:53.384]    __Result=0x00000000
[04:35:53.384]  </debugvars>
[04:35:53.384]  
[04:35:53.386]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:35:53.386]    <block atomic="false" info="">
[04:35:53.386]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:35:53.386]        // -> [isSWJ <= 0x00000001]
[04:35:53.386]      __var hasDormant = __protocol & 0x00020000;
[04:35:53.386]        // -> [hasDormant <= 0x00000000]
[04:35:53.386]      __var protType   = __protocol & 0x0000FFFF;
[04:35:53.386]        // -> [protType <= 0x00000002]
[04:35:53.387]    </block>
[04:35:53.387]    <control if="protType == 1" while="" timeout="0" info="">
[04:35:53.387]      // if-block "protType == 1"
[04:35:53.387]        // =>  FALSE
[04:35:53.387]      // skip if-block "protType == 1"
[04:35:53.387]    </control>
[04:35:53.387]    <control if="protType == 2" while="" timeout="0" info="">
[04:35:53.387]      // if-block "protType == 2"
[04:35:53.387]        // =>  TRUE
[04:35:53.387]      <control if="isSWJ" while="" timeout="0" info="">
[04:35:53.387]        // if-block "isSWJ"
[04:35:53.387]          // =>  TRUE
[04:35:53.387]        <control if="hasDormant" while="" timeout="0" info="">
[04:35:53.387]          // if-block "hasDormant"
[04:35:53.387]            // =>  FALSE
[04:35:53.387]          // skip if-block "hasDormant"
[04:35:53.387]        </control>
[04:35:53.387]        <control if="!hasDormant" while="" timeout="0" info="">
[04:35:53.387]          // if-block "!hasDormant"
[04:35:53.387]            // =>  TRUE
[04:35:53.387]          <block atomic="false" info="">
[04:35:53.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:35:53.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:35:53.389]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:35:53.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:35:53.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:35:53.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:35:53.393]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:35:53.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:35:53.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:35:53.397]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:35:53.397]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:35:53.397]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:35:53.397]          </block>
[04:35:53.397]          // end if-block "!hasDormant"
[04:35:53.397]        </control>
[04:35:53.397]        // end if-block "isSWJ"
[04:35:53.397]      </control>
[04:35:53.397]      <control if="!isSWJ" while="" timeout="0" info="">
[04:35:53.397]        // if-block "!isSWJ"
[04:35:53.397]          // =>  FALSE
[04:35:53.397]        // skip if-block "!isSWJ"
[04:35:53.397]      </control>
[04:35:53.397]      <block atomic="false" info="">
[04:35:53.397]        ReadDP(0x0);
[04:35:53.401]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:35:53.401]      </block>
[04:35:53.401]      // end if-block "protType == 2"
[04:35:53.403]    </control>
[04:35:53.403]  </sequence>
[04:35:53.403]  
[04:35:53.403]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:35:53.403]  
[04:35:53.403]  <debugvars>
[04:35:53.403]    // Pre-defined
[04:35:53.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:35:53.406]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:35:53.406]    __dp=0x00000000
[04:35:53.406]    __ap=0x00000000
[04:35:53.406]    __traceout=0x00000000      (Trace Disabled)
[04:35:53.406]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:35:53.406]    __FlashAddr=0x00000000
[04:35:53.406]    __FlashLen=0x00000000
[04:35:53.406]    __FlashArg=0x00000000
[04:35:53.406]    __FlashOp=0x00000000
[04:35:53.406]    __Result=0x00000000
[04:35:53.406]  </debugvars>
[04:35:53.406]  
[04:35:53.406]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:35:53.406]    <block atomic="false" info="">
[04:35:53.406]      __var SW_DP_ABORT       = 0x0;
[04:35:53.406]        // -> [SW_DP_ABORT <= 0x00000000]
[04:35:53.406]      __var DP_CTRL_STAT      = 0x4;
[04:35:53.406]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:35:53.406]      __var DP_SELECT         = 0x8;
[04:35:53.406]        // -> [DP_SELECT <= 0x00000008]
[04:35:53.406]      __var powered_down      = 0;
[04:35:53.406]        // -> [powered_down <= 0x00000000]
[04:35:53.408]      WriteDP(DP_SELECT, 0x00000000);
[04:35:53.409]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:35:53.409]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:35:53.410]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:35:53.410]        // -> [powered_down <= 0x00000001]
[04:35:53.410]    </block>
[04:35:53.410]    <control if="powered_down" while="" timeout="0" info="">
[04:35:53.410]      // if-block "powered_down"
[04:35:53.412]        // =>  TRUE
[04:35:53.412]      <block atomic="false" info="">
[04:35:53.412]        Message(0, "Debug/System power-up request sent");
[04:35:53.412]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:35:53.414]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:35:53.414]      </block>
[04:35:53.414]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:35:53.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:35:53.414]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:35:53.414]        // while-condition  =>  FALSE
[04:35:53.414]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:35:53.419]      </control>
[04:35:53.419]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:35:53.419]        // if-block "(__protocol & 0xFFFF) == 1"
[04:35:53.419]          // =>  FALSE
[04:35:53.419]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:35:53.419]      </control>
[04:35:53.419]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:35:53.419]        // if-block "(__protocol & 0xFFFF) == 2"
[04:35:53.419]          // =>  TRUE
[04:35:53.419]        <block atomic="false" info="">
[04:35:53.419]          Message(0, "executing SWD power up");
[04:35:53.420]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:35:53.423]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:35:53.423]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:35:53.424]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:35:53.424]        </block>
[04:35:53.424]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:35:53.424]      </control>
[04:35:53.424]      // end if-block "powered_down"
[04:35:53.426]    </control>
[04:35:53.426]    <block atomic="false" info="">
[04:35:53.426]      __var DEBUG_PORT_VAL    = 0;
[04:35:53.426]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:35:53.426]      __var ACCESS_POINT_VAL  = 0;
[04:35:53.426]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:35:53.426]      __ap = 1; 
[04:35:53.426]        // -> [__ap <= 0x00000001]
[04:35:53.426]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:35:53.429]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:35:53.429]      __ap = 4;
[04:35:53.430]        // -> [__ap <= 0x00000004]
[04:35:53.430]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:35:53.434]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:35:53.434]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:35:53.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:35:53.434]    </block>
[04:35:53.434]    <block atomic="false" info="">
[04:35:53.434]      __var nReset = 0x80;
[04:35:53.434]        // -> [nReset <= 0x00000080]
[04:35:53.434]      __var canReadPins = 0;
[04:35:53.434]        // -> [canReadPins <= 0x00000000]
[04:35:53.434]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:35:53.438]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:35:53.438]        // -> [canReadPins <= 0x00000001]
[04:35:53.438]    </block>
[04:35:53.438]    <control if="" while="1" timeout="200" info="">
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.438]      // while-condition  =>  TRUE
[04:35:53.438]      // while "1"  (timeout="200")
[04:35:53.442]      // while-condition  =>  TRUE
[04:35:53.442]      // while "1"  (timeout="200")
[04:35:53.442]      // while-condition  =>  TRUE
[04:35:53.442]      // while "1"  (timeout="200")
[04:35:53.442]      // while-condition  =>  TRUE
[04:35:53.442]      // while "1"  (timeout="200")
[04:35:53.442]      // while-condition  =>  TRUE
[04:35:53.444]      // while "1"  (timeout="200")
[04:35:53.444]      // while-condition  =>  TRUE
[04:35:53.444]      // while "1"  (timeout="200")
[04:35:53.444]      // while-condition  =>  TRUE
[04:35:53.444]      // while "1"  (timeout="200")
[04:35:53.444]      // while-condition  =>  TRUE
[04:35:53.444]      // while "1"  (timeout="200")
[04:35:53.444]      // while-condition  =>  TRUE
[04:35:53.444]      // while "1"  (timeout="200")
[04:35:53.444]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.445]      // while "1"  (timeout="200")
[04:35:53.445]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.447]      // while "1"  (timeout="200")
[04:35:53.447]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.449]      // while "1"  (timeout="200")
[04:35:53.449]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.451]      // while "1"  (timeout="200")
[04:35:53.451]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.453]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.453]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.453]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.453]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.453]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.453]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.453]      // while-condition  =>  TRUE
[04:35:53.453]      // while "1"  (timeout="200")
[04:35:53.455]      // while-condition  =>  TRUE
[04:35:53.455]      // while "1"  (timeout="200")
[04:35:53.455]      // while  =>  TIMEOUT
[04:35:53.455]      // end while "1"
[04:35:53.455]    </control>
[04:35:53.455]    <control if="canReadPins" while="" timeout="0" info="">
[04:35:53.455]      // if-block "canReadPins"
[04:35:53.455]        // =>  TRUE
[04:35:53.455]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:35:53.455]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:35:53.455]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:35:53.455]        // while-condition  =>  FALSE
[04:35:53.455]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:35:53.455]      </control>
[04:35:53.455]      // end if-block "canReadPins"
[04:35:53.455]    </control>
[04:35:53.455]    <control if="!canReadPins" while="" timeout="0" info="">
[04:35:53.455]      // if-block "!canReadPins"
[04:35:53.455]        // =>  FALSE
[04:35:53.459]      // skip if-block "!canReadPins"
[04:35:53.459]    </control>
[04:35:53.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:35:53.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:35:53.459]        // =>  TRUE
[04:35:53.459]      <block atomic="false" info="">
[04:35:53.459]        WriteAP(0x00, 0x190008);
[04:35:53.459]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:35:53.459]        WriteAP(0xF0, 0x01);
[04:35:53.463]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:35:53.463]      </block>
[04:35:53.463]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:35:53.463]    </control>
[04:35:53.467]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:35:53.467]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:35:53.467]        // =>  FALSE
[04:35:53.467]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:35:53.467]    </control>
[04:35:53.467]    <block atomic="false" info="">
[04:35:53.467]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:35:53.471]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:35:53.471]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:35:53.471]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:35:53.472]      __ap = 0; //lets make sure we reset the access point selection
[04:35:53.472]        // -> [__ap <= 0x00000000]
[04:35:53.472]    </block>
[04:35:53.472]  </sequence>
[04:35:53.472]  
[04:35:53.498]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:35:53.498]  
[04:35:53.498]  <debugvars>
[04:35:53.498]    // Pre-defined
[04:35:53.498]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:35:53.499]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:35:53.499]    __dp=0x00000000
[04:35:53.499]    __ap=0x00000000
[04:35:53.499]    __traceout=0x00000000      (Trace Disabled)
[04:35:53.499]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:35:53.499]    __FlashAddr=0x00000000
[04:35:53.499]    __FlashLen=0x00000000
[04:35:53.499]    __FlashArg=0x00000000
[04:35:53.499]    __FlashOp=0x00000000
[04:35:53.499]    __Result=0x00000000
[04:35:53.499]  </debugvars>
[04:35:53.499]  
[04:35:53.501]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:35:53.501]    <block atomic="false" info="">
[04:35:53.501]      __var deviceID = 0;
[04:35:53.501]        // -> [deviceID <= 0x00000000]
[04:35:53.501]      __var version = 0;
[04:35:53.501]        // -> [version <= 0x00000000]
[04:35:53.501]      __var partNum = 0;
[04:35:53.501]        // -> [partNum <= 0x00000000]
[04:35:53.501]      __var manuf = 0;
[04:35:53.501]        // -> [manuf <= 0x00000000]
[04:35:53.501]      __var isMSPM0G1X0X_G3X0X = 0;
[04:35:53.501]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:35:53.501]      __var isProduction = 0;
[04:35:53.503]        // -> [isProduction <= 0x00000000]
[04:35:53.503]      __var continueId = 0;
[04:35:53.503]        // -> [continueId <= 0x00000000]
[04:35:53.503]      deviceID =   Read32(0x41C40004);
[04:35:53.507]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:35:53.507]        // -> [deviceID <= 0x2BB8802F]
[04:35:53.507]      version = deviceID >> 28;
[04:35:53.507]        // -> [version <= 0x00000002]
[04:35:53.507]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:35:53.507]        // -> [partNum <= 0x0000BB88]
[04:35:53.507]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:35:53.507]        // -> [manuf <= 0x00000017]
[04:35:53.507]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:35:53.507]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:35:53.507]      isProduction = (version > 0);
[04:35:53.507]        // -> [isProduction <= 0x00000001]
[04:35:53.507]    </block>
[04:35:53.507]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:35:53.507]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:35:53.511]        // =>  FALSE
[04:35:53.511]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:35:53.511]    </control>
[04:35:53.511]    <control if="continueId == 4" while="" timeout="0" info="">
[04:35:53.511]      // if-block "continueId == 4"
[04:35:53.511]        // =>  FALSE
[04:35:53.511]      // skip if-block "continueId == 4"
[04:35:53.511]    </control>
[04:35:53.511]    <control if="!isProduction" while="" timeout="0" info="">
[04:35:53.511]      // if-block "!isProduction"
[04:35:53.511]        // =>  FALSE
[04:35:53.511]      // skip if-block "!isProduction"
[04:35:53.511]    </control>
[04:35:53.511]  </sequence>
[04:35:53.511]  
