/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\CAO\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0022.log
 *  Created     : 19:14:40 (02/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[19:14:40.574]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:14:40.574]  
[19:14:40.574]  <debugvars>
[19:14:40.574]    // Pre-defined
[19:14:40.574]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:40.574]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:14:40.574]    __dp=0x00000000
[19:14:40.574]    __ap=0x00000000
[19:14:40.574]    __traceout=0x00000000      (Trace Disabled)
[19:14:40.574]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:40.574]    __FlashAddr=0x00000000
[19:14:40.574]    __FlashLen=0x00000000
[19:14:40.574]    __FlashArg=0x00000000
[19:14:40.574]    __FlashOp=0x00000000
[19:14:40.574]    __Result=0x00000000
[19:14:40.574]  </debugvars>
[19:14:40.574]  
[19:14:40.574]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:14:40.574]    <block atomic="false" info="">
[19:14:40.578]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:14:40.578]        // -> [isSWJ <= 0x00000001]
[19:14:40.578]      __var hasDormant = __protocol & 0x00020000;
[19:14:40.578]        // -> [hasDormant <= 0x00000000]
[19:14:40.578]      __var protType   = __protocol & 0x0000FFFF;
[19:14:40.578]        // -> [protType <= 0x00000002]
[19:14:40.578]    </block>
[19:14:40.578]    <control if="protType == 1" while="" timeout="0" info="">
[19:14:40.578]      // if-block "protType == 1"
[19:14:40.578]        // =>  FALSE
[19:14:40.578]      // skip if-block "protType == 1"
[19:14:40.578]    </control>
[19:14:40.578]    <control if="protType == 2" while="" timeout="0" info="">
[19:14:40.578]      // if-block "protType == 2"
[19:14:40.578]        // =>  TRUE
[19:14:40.578]      <control if="isSWJ" while="" timeout="0" info="">
[19:14:40.578]        // if-block "isSWJ"
[19:14:40.578]          // =>  TRUE
[19:14:40.578]        <control if="hasDormant" while="" timeout="0" info="">
[19:14:40.578]          // if-block "hasDormant"
[19:14:40.578]            // =>  FALSE
[19:14:40.578]          // skip if-block "hasDormant"
[19:14:40.578]        </control>
[19:14:40.578]        <control if="!hasDormant" while="" timeout="0" info="">
[19:14:40.578]          // if-block "!hasDormant"
[19:14:40.578]            // =>  TRUE
[19:14:40.578]          <block atomic="false" info="">
[19:14:40.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:14:40.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:40.582]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:14:40.588]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:14:40.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:14:40.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:40.588]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:14:40.596]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:14:40.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:14:40.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:40.598]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:14:40.601]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:14:40.601]          </block>
[19:14:40.601]          // end if-block "!hasDormant"
[19:14:40.601]        </control>
[19:14:40.601]        // end if-block "isSWJ"
[19:14:40.601]      </control>
[19:14:40.601]      <control if="!isSWJ" while="" timeout="0" info="">
[19:14:40.601]        // if-block "!isSWJ"
[19:14:40.601]          // =>  FALSE
[19:14:40.601]        // skip if-block "!isSWJ"
[19:14:40.601]      </control>
[19:14:40.601]      <block atomic="false" info="">
[19:14:40.601]        ReadDP(0x0);
[19:14:40.606]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:14:40.606]      </block>
[19:14:40.606]      // end if-block "protType == 2"
[19:14:40.606]    </control>
[19:14:40.606]  </sequence>
[19:14:40.606]  
[19:14:40.608]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:14:40.608]  
[19:14:40.608]  <debugvars>
[19:14:40.608]    // Pre-defined
[19:14:40.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:40.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:14:40.608]    __dp=0x00000000
[19:14:40.608]    __ap=0x00000000
[19:14:40.608]    __traceout=0x00000000      (Trace Disabled)
[19:14:40.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:40.608]    __FlashAddr=0x00000000
[19:14:40.608]    __FlashLen=0x00000000
[19:14:40.608]    __FlashArg=0x00000000
[19:14:40.608]    __FlashOp=0x00000000
[19:14:40.608]    __Result=0x00000000
[19:14:40.608]  </debugvars>
[19:14:40.608]  
[19:14:40.608]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:14:40.608]    <block atomic="false" info="">
[19:14:40.608]      __var SW_DP_ABORT       = 0x0;
[19:14:40.608]        // -> [SW_DP_ABORT <= 0x00000000]
[19:14:40.608]      __var DP_CTRL_STAT      = 0x4;
[19:14:40.608]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:14:40.608]      __var DP_SELECT         = 0x8;
[19:14:40.608]        // -> [DP_SELECT <= 0x00000008]
[19:14:40.608]      __var powered_down      = 0;
[19:14:40.608]        // -> [powered_down <= 0x00000000]
[19:14:40.608]      WriteDP(DP_SELECT, 0x00000000);
[19:14:40.618]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:14:40.620]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:14:40.622]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:14:40.622]        // -> [powered_down <= 0x00000001]
[19:14:40.622]    </block>
[19:14:40.622]    <control if="powered_down" while="" timeout="0" info="">
[19:14:40.622]      // if-block "powered_down"
[19:14:40.622]        // =>  TRUE
[19:14:40.622]      <block atomic="false" info="">
[19:14:40.622]        Message(0, "Debug/System power-up request sent");
[19:14:40.622]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:14:40.630]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:14:40.630]      </block>
[19:14:40.630]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:14:40.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.630]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:14:40.630]        // while-condition  =>  FALSE
[19:14:40.630]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:14:40.630]      </control>
[19:14:40.630]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:14:40.630]        // if-block "(__protocol & 0xFFFF) == 1"
[19:14:40.630]          // =>  FALSE
[19:14:40.630]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:14:40.630]      </control>
[19:14:40.630]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:14:40.630]        // if-block "(__protocol & 0xFFFF) == 2"
[19:14:40.630]          // =>  TRUE
[19:14:40.630]        <block atomic="false" info="">
[19:14:40.630]          Message(0, "executing SWD power up");
[19:14:40.638]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:14:40.640]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:14:40.640]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:14:40.651]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:14:40.651]        </block>
[19:14:40.651]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:14:40.651]      </control>
[19:14:40.651]      // end if-block "powered_down"
[19:14:40.651]    </control>
[19:14:40.651]    <block atomic="false" info="">
[19:14:40.651]      __var DEBUG_PORT_VAL    = 0;
[19:14:40.651]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:14:40.651]      __var ACCESS_POINT_VAL  = 0;
[19:14:40.651]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:14:40.651]      __ap = 1; 
[19:14:40.651]        // -> [__ap <= 0x00000001]
[19:14:40.651]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:14:40.659]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:14:40.659]      __ap = 4;
[19:14:40.659]        // -> [__ap <= 0x00000004]
[19:14:40.659]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:14:40.662]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:14:40.662]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:14:40.662]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:14:40.662]    </block>
[19:14:40.662]    <block atomic="false" info="">
[19:14:40.662]      __var nReset = 0x80;
[19:14:40.662]        // -> [nReset <= 0x00000080]
[19:14:40.662]      __var canReadPins = 0;
[19:14:40.669]        // -> [canReadPins <= 0x00000000]
[19:14:40.669]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:14:40.672]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:14:40.672]        // -> [canReadPins <= 0x00000001]
[19:14:40.672]    </block>
[19:14:40.672]    <control if="" while="1" timeout="200" info="">
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.672]      // while "1"  (timeout="200")
[19:14:40.672]      // while-condition  =>  TRUE
[19:14:40.679]      // while "1"  (timeout="200")
[19:14:40.679]      // while  =>  TIMEOUT
[19:14:40.679]      // end while "1"
[19:14:40.679]    </control>
[19:14:40.679]    <control if="canReadPins" while="" timeout="0" info="">
[19:14:40.679]      // if-block "canReadPins"
[19:14:40.679]        // =>  TRUE
[19:14:40.679]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:14:40.679]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:14:40.684]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:14:40.684]        // while-condition  =>  FALSE
[19:14:40.684]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:14:40.684]      </control>
[19:14:40.684]      // end if-block "canReadPins"
[19:14:40.684]    </control>
[19:14:40.684]    <control if="!canReadPins" while="" timeout="0" info="">
[19:14:40.684]      // if-block "!canReadPins"
[19:14:40.684]        // =>  FALSE
[19:14:40.684]      // skip if-block "!canReadPins"
[19:14:40.684]    </control>
[19:14:40.684]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:14:40.684]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:14:40.684]        // =>  TRUE
[19:14:40.684]      <block atomic="false" info="">
[19:14:40.684]        WriteAP(0x00, 0x190008);
[19:14:40.689]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:14:40.689]        WriteAP(0xF0, 0x01);
[19:14:40.696]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:14:40.696]      </block>
[19:14:40.696]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:14:40.696]    </control>
[19:14:40.696]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:14:40.696]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:14:40.696]        // =>  FALSE
[19:14:40.696]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:14:40.696]    </control>
[19:14:40.696]    <block atomic="false" info="">
[19:14:40.696]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:14:40.703]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:14:40.703]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:14:40.703]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:14:40.705]      __ap = 0; //lets make sure we reset the access point selection
[19:14:40.705]        // -> [__ap <= 0x00000000]
[19:14:40.705]    </block>
[19:14:40.705]  </sequence>
[19:14:40.705]  
[19:14:40.761]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:14:40.761]  
[19:14:40.761]  <debugvars>
[19:14:40.761]    // Pre-defined
[19:14:40.763]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:40.763]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:14:40.763]    __dp=0x00000000
[19:14:40.763]    __ap=0x00000000
[19:14:40.763]    __traceout=0x00000000      (Trace Disabled)
[19:14:40.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:40.763]    __FlashAddr=0x00000000
[19:14:40.763]    __FlashLen=0x00000000
[19:14:40.763]    __FlashArg=0x00000000
[19:14:40.763]    __FlashOp=0x00000000
[19:14:40.763]    __Result=0x00000000
[19:14:40.763]  </debugvars>
[19:14:40.763]  
[19:14:40.763]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:14:40.763]    <block atomic="false" info="">
[19:14:40.763]      __var deviceID = 0;
[19:14:40.765]        // -> [deviceID <= 0x00000000]
[19:14:40.765]      __var version = 0;
[19:14:40.765]        // -> [version <= 0x00000000]
[19:14:40.765]      __var partNum = 0;
[19:14:40.765]        // -> [partNum <= 0x00000000]
[19:14:40.765]      __var manuf = 0;
[19:14:40.765]        // -> [manuf <= 0x00000000]
[19:14:40.766]      __var isMSPM0G1X0X_G3X0X = 0;
[19:14:40.766]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:14:40.766]      __var isProduction = 0;
[19:14:40.766]        // -> [isProduction <= 0x00000000]
[19:14:40.766]      __var continueId = 0;
[19:14:40.766]        // -> [continueId <= 0x00000000]
[19:14:40.766]      deviceID =   Read32(0x41C40004);
[19:14:40.776]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:14:40.776]        // -> [deviceID <= 0x2BB8802F]
[19:14:40.776]      version = deviceID >> 28;
[19:14:40.776]        // -> [version <= 0x00000002]
[19:14:40.776]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:14:40.779]        // -> [partNum <= 0x0000BB88]
[19:14:40.779]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:14:40.779]        // -> [manuf <= 0x00000017]
[19:14:40.779]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:14:40.779]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:14:40.779]      isProduction = (version > 0);
[19:14:40.779]        // -> [isProduction <= 0x00000001]
[19:14:40.779]    </block>
[19:14:40.779]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:14:40.779]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:14:40.779]        // =>  FALSE
[19:14:40.779]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:14:40.780]    </control>
[19:14:40.780]    <control if="continueId == 4" while="" timeout="0" info="">
[19:14:40.780]      // if-block "continueId == 4"
[19:14:40.780]        // =>  FALSE
[19:14:40.780]      // skip if-block "continueId == 4"
[19:14:40.780]    </control>
[19:14:40.780]    <control if="!isProduction" while="" timeout="0" info="">
[19:14:40.780]      // if-block "!isProduction"
[19:14:40.780]        // =>  FALSE
[19:14:40.780]      // skip if-block "!isProduction"
[19:14:40.780]    </control>
[19:14:40.780]  </sequence>
[19:14:40.780]  
[19:20:32.203]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:20:32.203]  
[19:20:32.205]  <debugvars>
[19:20:32.205]    // Pre-defined
[19:20:32.205]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:20:32.205]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:20:32.205]    __dp=0x00000000
[19:20:32.205]    __ap=0x00000000
[19:20:32.205]    __traceout=0x00000000      (Trace Disabled)
[19:20:32.205]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:20:32.205]    __FlashAddr=0x00000000
[19:20:32.205]    __FlashLen=0x00000000
[19:20:32.205]    __FlashArg=0x00000000
[19:20:32.206]    __FlashOp=0x00000000
[19:20:32.206]    __Result=0x00000000
[19:20:32.206]  </debugvars>
[19:20:32.206]  
[19:20:32.206]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:20:32.206]    <block atomic="false" info="">
[19:20:32.206]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:20:32.206]        // -> [isSWJ <= 0x00000001]
[19:20:32.206]      __var hasDormant = __protocol & 0x00020000;
[19:20:32.206]        // -> [hasDormant <= 0x00000000]
[19:20:32.206]      __var protType   = __protocol & 0x0000FFFF;
[19:20:32.206]        // -> [protType <= 0x00000002]
[19:20:32.206]    </block>
[19:20:32.206]    <control if="protType == 1" while="" timeout="0" info="">
[19:20:32.206]      // if-block "protType == 1"
[19:20:32.207]        // =>  FALSE
[19:20:32.207]      // skip if-block "protType == 1"
[19:20:32.207]    </control>
[19:20:32.207]    <control if="protType == 2" while="" timeout="0" info="">
[19:20:32.207]      // if-block "protType == 2"
[19:20:32.207]        // =>  TRUE
[19:20:32.207]      <control if="isSWJ" while="" timeout="0" info="">
[19:20:32.207]        // if-block "isSWJ"
[19:20:32.207]          // =>  TRUE
[19:20:32.207]        <control if="hasDormant" while="" timeout="0" info="">
[19:20:32.208]          // if-block "hasDormant"
[19:20:32.208]            // =>  FALSE
[19:20:32.208]          // skip if-block "hasDormant"
[19:20:32.208]        </control>
[19:20:32.208]        <control if="!hasDormant" while="" timeout="0" info="">
[19:20:32.208]          // if-block "!hasDormant"
[19:20:32.208]            // =>  TRUE
[19:20:32.208]          <block atomic="false" info="">
[19:20:32.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:20:32.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:20:32.212]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:20:32.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:20:32.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:20:32.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:20:32.218]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:20:32.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:20:32.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:20:32.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:20:32.225]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:20:32.230]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:20:32.230]          </block>
[19:20:32.230]          // end if-block "!hasDormant"
[19:20:32.230]        </control>
[19:20:32.230]        // end if-block "isSWJ"
[19:20:32.230]      </control>
[19:20:32.230]      <control if="!isSWJ" while="" timeout="0" info="">
[19:20:32.230]        // if-block "!isSWJ"
[19:20:32.231]          // =>  FALSE
[19:20:32.231]        // skip if-block "!isSWJ"
[19:20:32.231]      </control>
[19:20:32.231]      <block atomic="false" info="">
[19:20:32.231]        ReadDP(0x0);
[19:20:32.242]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:20:32.242]      </block>
[19:20:32.242]      // end if-block "protType == 2"
[19:20:32.242]    </control>
[19:20:32.242]  </sequence>
[19:20:32.243]  
[19:20:32.250]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:20:32.250]  
[19:20:32.251]  <debugvars>
[19:20:32.251]    // Pre-defined
[19:20:32.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:20:32.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:20:32.251]    __dp=0x00000000
[19:20:32.251]    __ap=0x00000000
[19:20:32.251]    __traceout=0x00000000      (Trace Disabled)
[19:20:32.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:20:32.251]    __FlashAddr=0x00000000
[19:20:32.252]    __FlashLen=0x00000000
[19:20:32.252]    __FlashArg=0x00000000
[19:20:32.252]    __FlashOp=0x00000000
[19:20:32.252]    __Result=0x00000000
[19:20:32.252]  </debugvars>
[19:20:32.252]  
[19:20:32.252]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:20:32.252]    <block atomic="false" info="">
[19:20:32.252]      __var SW_DP_ABORT       = 0x0;
[19:20:32.252]        // -> [SW_DP_ABORT <= 0x00000000]
[19:20:32.252]      __var DP_CTRL_STAT      = 0x4;
[19:20:32.253]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:20:32.253]      __var DP_SELECT         = 0x8;
[19:20:32.253]        // -> [DP_SELECT <= 0x00000008]
[19:20:32.253]      __var powered_down      = 0;
[19:20:32.253]        // -> [powered_down <= 0x00000000]
[19:20:32.253]      WriteDP(DP_SELECT, 0x00000000);
[19:20:32.265]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:20:32.265]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:20:32.267]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:20:32.268]        // -> [powered_down <= 0x00000001]
[19:20:32.268]    </block>
[19:20:32.268]    <control if="powered_down" while="" timeout="0" info="">
[19:20:32.268]      // if-block "powered_down"
[19:20:32.268]        // =>  TRUE
[19:20:32.268]      <block atomic="false" info="">
[19:20:32.268]        Message(0, "Debug/System power-up request sent");
[19:20:32.271]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:20:32.276]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:20:32.277]      </block>
[19:20:32.277]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:20:32.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:20:32.281]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:20:32.281]        // while-condition  =>  FALSE
[19:20:32.282]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:20:32.282]      </control>
[19:20:32.282]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:20:32.282]        // if-block "(__protocol & 0xFFFF) == 1"
[19:20:32.282]          // =>  FALSE
[19:20:32.282]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:20:32.282]      </control>
[19:20:32.282]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:20:32.282]        // if-block "(__protocol & 0xFFFF) == 2"
[19:20:32.282]          // =>  TRUE
[19:20:32.282]        <block atomic="false" info="">
[19:20:32.282]          Message(0, "executing SWD power up");
[19:20:32.285]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:20:32.289]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:20:32.289]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:20:32.293]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:20:32.293]        </block>
[19:20:32.293]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:20:32.293]      </control>
[19:20:32.293]      // end if-block "powered_down"
[19:20:32.293]    </control>
[19:20:32.293]    <block atomic="false" info="">
[19:20:32.293]      __var DEBUG_PORT_VAL    = 0;
[19:20:32.293]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:20:32.293]      __var ACCESS_POINT_VAL  = 0;
[19:20:32.293]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:20:32.293]      __ap = 1; 
[19:20:32.293]        // -> [__ap <= 0x00000001]
[19:20:32.294]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:20:32.300]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:20:32.300]      __ap = 4;
[19:20:32.300]        // -> [__ap <= 0x00000004]
[19:20:32.300]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:20:32.307]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:20:32.307]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:20:32.307]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:20:32.310]    </block>
[19:20:32.310]    <block atomic="false" info="">
[19:20:32.310]      __var nReset = 0x80;
[19:20:32.310]        // -> [nReset <= 0x00000080]
[19:20:32.310]      __var canReadPins = 0;
[19:20:32.310]        // -> [canReadPins <= 0x00000000]
[19:20:32.310]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:20:32.313]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:20:32.313]        // -> [canReadPins <= 0x00000001]
[19:20:32.313]    </block>
[19:20:32.313]    <control if="" while="1" timeout="200" info="">
[19:20:32.313]      // while "1"  (timeout="200")
[19:20:32.313]      // while-condition  =>  TRUE
[19:20:32.314]      // while "1"  (timeout="200")
[19:20:32.314]      // while-condition  =>  TRUE
[19:20:32.314]      // while "1"  (timeout="200")
[19:20:32.314]      // while-condition  =>  TRUE
[19:20:32.314]      // while "1"  (timeout="200")
[19:20:32.314]      // while-condition  =>  TRUE
[19:20:32.314]      // while "1"  (timeout="200")
[19:20:32.314]      // while-condition  =>  TRUE
[19:20:32.314]      // while "1"  (timeout="200")
[19:20:32.314]      // while-condition  =>  TRUE
[19:20:32.315]      // while "1"  (timeout="200")
[19:20:32.315]      // while-condition  =>  TRUE
[19:20:32.315]      // while "1"  (timeout="200")
[19:20:32.315]      // while-condition  =>  TRUE
[19:20:32.315]      // while "1"  (timeout="200")
[19:20:32.315]      // while-condition  =>  TRUE
[19:20:32.315]      // while "1"  (timeout="200")
[19:20:32.315]      // while-condition  =>  TRUE
[19:20:32.315]      // while "1"  (timeout="200")
[19:20:32.315]      // while-condition  =>  TRUE
[19:20:32.315]      // while "1"  (timeout="200")
[19:20:32.316]      // while-condition  =>  TRUE
[19:20:32.316]      // while "1"  (timeout="200")
[19:20:32.316]      // while  =>  TIMEOUT
[19:20:32.316]      // end while "1"
[19:20:32.316]    </control>
[19:20:32.316]    <control if="canReadPins" while="" timeout="0" info="">
[19:20:32.317]      // if-block "canReadPins"
[19:20:32.317]        // =>  TRUE
[19:20:32.317]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:20:32.317]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:20:32.319]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:20:32.319]        // while-condition  =>  FALSE
[19:20:32.319]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:20:32.321]      </control>
[19:20:32.321]      // end if-block "canReadPins"
[19:20:32.321]    </control>
[19:20:32.321]    <control if="!canReadPins" while="" timeout="0" info="">
[19:20:32.321]      // if-block "!canReadPins"
[19:20:32.321]        // =>  FALSE
[19:20:32.321]      // skip if-block "!canReadPins"
[19:20:32.321]    </control>
[19:20:32.321]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:20:32.321]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:20:32.321]        // =>  TRUE
[19:20:32.322]      <block atomic="false" info="">
[19:20:32.322]        WriteAP(0x00, 0x190008);
[19:20:32.325]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:20:32.325]        WriteAP(0xF0, 0x01);
[19:20:32.333]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:20:32.333]      </block>
[19:20:32.333]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:20:32.333]    </control>
[19:20:32.333]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:20:32.333]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:20:32.333]        // =>  FALSE
[19:20:32.333]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:20:32.334]    </control>
[19:20:32.334]    <block atomic="false" info="">
[19:20:32.334]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:20:32.341]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:20:32.341]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:20:32.341]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:20:32.343]      __ap = 0; //lets make sure we reset the access point selection
[19:20:32.343]        // -> [__ap <= 0x00000000]
[19:20:32.343]    </block>
[19:20:32.343]  </sequence>
[19:20:32.344]  
[19:20:32.399]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:20:32.399]  
[19:20:32.400]  <debugvars>
[19:20:32.400]    // Pre-defined
[19:20:32.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:20:32.400]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:20:32.400]    __dp=0x00000000
[19:20:32.400]    __ap=0x00000000
[19:20:32.400]    __traceout=0x00000000      (Trace Disabled)
[19:20:32.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:20:32.400]    __FlashAddr=0x00000000
[19:20:32.401]    __FlashLen=0x00000000
[19:20:32.401]    __FlashArg=0x00000000
[19:20:32.401]    __FlashOp=0x00000000
[19:20:32.401]    __Result=0x00000000
[19:20:32.401]  </debugvars>
[19:20:32.401]  
[19:20:32.402]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:20:32.402]    <block atomic="false" info="">
[19:20:32.402]      __var deviceID = 0;
[19:20:32.402]        // -> [deviceID <= 0x00000000]
[19:20:32.402]      __var version = 0;
[19:20:32.402]        // -> [version <= 0x00000000]
[19:20:32.402]      __var partNum = 0;
[19:20:32.402]        // -> [partNum <= 0x00000000]
[19:20:32.403]      __var manuf = 0;
[19:20:32.403]        // -> [manuf <= 0x00000000]
[19:20:32.403]      __var isMSPM0G1X0X_G3X0X = 0;
[19:20:32.403]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:20:32.403]      __var isProduction = 0;
[19:20:32.403]        // -> [isProduction <= 0x00000000]
[19:20:32.403]      __var continueId = 0;
[19:20:32.403]        // -> [continueId <= 0x00000000]
[19:20:32.404]      deviceID =   Read32(0x41C40004);
[19:20:32.419]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:20:32.419]        // -> [deviceID <= 0x2BB8802F]
[19:20:32.420]      version = deviceID >> 28;
[19:20:32.420]        // -> [version <= 0x00000002]
[19:20:32.420]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:20:32.420]        // -> [partNum <= 0x0000BB88]
[19:20:32.420]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:20:32.420]        // -> [manuf <= 0x00000017]
[19:20:32.421]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:20:32.421]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:20:32.421]      isProduction = (version > 0);
[19:20:32.421]        // -> [isProduction <= 0x00000001]
[19:20:32.421]    </block>
[19:20:32.421]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:20:32.421]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:20:32.421]        // =>  FALSE
[19:20:32.421]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:20:32.421]    </control>
[19:20:32.421]    <control if="continueId == 4" while="" timeout="0" info="">
[19:20:32.422]      // if-block "continueId == 4"
[19:20:32.422]        // =>  FALSE
[19:20:32.422]      // skip if-block "continueId == 4"
[19:20:32.422]    </control>
[19:20:32.422]    <control if="!isProduction" while="" timeout="0" info="">
[19:20:32.422]      // if-block "!isProduction"
[19:20:32.422]        // =>  FALSE
[19:20:32.423]      // skip if-block "!isProduction"
[19:20:32.423]    </control>
[19:20:32.423]  </sequence>
[19:20:32.423]  
[19:21:37.357]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:21:37.357]  
[19:21:37.368]  <debugvars>
[19:21:37.368]    // Pre-defined
[19:21:37.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:21:37.368]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:21:37.368]    __dp=0x00000000
[19:21:37.368]    __ap=0x00000000
[19:21:37.368]    __traceout=0x00000000      (Trace Disabled)
[19:21:37.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:21:37.368]    __FlashAddr=0x00000000
[19:21:37.368]    __FlashLen=0x00000000
[19:21:37.368]    __FlashArg=0x00000000
[19:21:37.368]    __FlashOp=0x00000000
[19:21:37.368]    __Result=0x00000000
[19:21:37.368]  </debugvars>
[19:21:37.368]  
[19:21:37.368]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:21:37.368]    <block atomic="false" info="">
[19:21:37.368]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:21:37.368]        // -> [isSWJ <= 0x00000001]
[19:21:37.368]      __var hasDormant = __protocol & 0x00020000;
[19:21:37.368]        // -> [hasDormant <= 0x00000000]
[19:21:37.368]      __var protType   = __protocol & 0x0000FFFF;
[19:21:37.370]        // -> [protType <= 0x00000002]
[19:21:37.370]    </block>
[19:21:37.371]    <control if="protType == 1" while="" timeout="0" info="">
[19:21:37.371]      // if-block "protType == 1"
[19:21:37.371]        // =>  FALSE
[19:21:37.371]      // skip if-block "protType == 1"
[19:21:37.371]    </control>
[19:21:37.371]    <control if="protType == 2" while="" timeout="0" info="">
[19:21:37.372]      // if-block "protType == 2"
[19:21:37.372]        // =>  TRUE
[19:21:37.372]      <control if="isSWJ" while="" timeout="0" info="">
[19:21:37.372]        // if-block "isSWJ"
[19:21:37.372]          // =>  TRUE
[19:21:37.372]        <control if="hasDormant" while="" timeout="0" info="">
[19:21:37.372]          // if-block "hasDormant"
[19:21:37.372]            // =>  FALSE
[19:21:37.372]          // skip if-block "hasDormant"
[19:21:37.372]        </control>
[19:21:37.372]        <control if="!hasDormant" while="" timeout="0" info="">
[19:21:37.372]          // if-block "!hasDormant"
[19:21:37.372]            // =>  TRUE
[19:21:37.372]          <block atomic="false" info="">
[19:21:37.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:21:37.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:21:37.375]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:21:37.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:21:37.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:21:37.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:21:37.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:21:37.397]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:21:37.397]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:21:37.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:21:37.402]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:21:37.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:21:37.402]          </block>
[19:21:37.402]          // end if-block "!hasDormant"
[19:21:37.402]        </control>
[19:21:37.402]        // end if-block "isSWJ"
[19:21:37.402]      </control>
[19:21:37.402]      <control if="!isSWJ" while="" timeout="0" info="">
[19:21:37.402]        // if-block "!isSWJ"
[19:21:37.402]          // =>  FALSE
[19:21:37.402]        // skip if-block "!isSWJ"
[19:21:37.402]      </control>
[19:21:37.409]      <block atomic="false" info="">
[19:21:37.409]        ReadDP(0x0);
[19:21:37.411]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:21:37.411]      </block>
[19:21:37.411]      // end if-block "protType == 2"
[19:21:37.411]    </control>
[19:21:37.411]  </sequence>
[19:21:37.411]  
[19:21:37.425]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:21:37.425]  
[19:21:37.425]  <debugvars>
[19:21:37.425]    // Pre-defined
[19:21:37.425]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:21:37.425]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:21:37.425]    __dp=0x00000000
[19:21:37.425]    __ap=0x00000000
[19:21:37.425]    __traceout=0x00000000      (Trace Disabled)
[19:21:37.425]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:21:37.425]    __FlashAddr=0x00000000
[19:21:37.425]    __FlashLen=0x00000000
[19:21:37.425]    __FlashArg=0x00000000
[19:21:37.425]    __FlashOp=0x00000000
[19:21:37.425]    __Result=0x00000000
[19:21:37.425]  </debugvars>
[19:21:37.425]  
[19:21:37.425]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:21:37.425]    <block atomic="false" info="">
[19:21:37.425]      __var SW_DP_ABORT       = 0x0;
[19:21:37.425]        // -> [SW_DP_ABORT <= 0x00000000]
[19:21:37.425]      __var DP_CTRL_STAT      = 0x4;
[19:21:37.425]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:21:37.425]      __var DP_SELECT         = 0x8;
[19:21:37.425]        // -> [DP_SELECT <= 0x00000008]
[19:21:37.425]      __var powered_down      = 0;
[19:21:37.425]        // -> [powered_down <= 0x00000000]
[19:21:37.425]      WriteDP(DP_SELECT, 0x00000000);
[19:21:37.432]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:21:37.432]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:21:37.432]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:21:37.432]        // -> [powered_down <= 0x00000001]
[19:21:37.432]    </block>
[19:21:37.432]    <control if="powered_down" while="" timeout="0" info="">
[19:21:37.432]      // if-block "powered_down"
[19:21:37.432]        // =>  TRUE
[19:21:37.432]      <block atomic="false" info="">
[19:21:37.432]        Message(0, "Debug/System power-up request sent");
[19:21:37.432]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:21:37.432]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:21:37.442]      </block>
[19:21:37.442]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:21:37.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:21:37.442]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:21:37.442]        // while-condition  =>  FALSE
[19:21:37.442]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:21:37.442]      </control>
[19:21:37.442]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:21:37.442]        // if-block "(__protocol & 0xFFFF) == 1"
[19:21:37.442]          // =>  FALSE
[19:21:37.442]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:21:37.442]      </control>
[19:21:37.442]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:21:37.442]        // if-block "(__protocol & 0xFFFF) == 2"
[19:21:37.442]          // =>  TRUE
[19:21:37.442]        <block atomic="false" info="">
[19:21:37.442]          Message(0, "executing SWD power up");
[19:21:37.447]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:21:37.451]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:21:37.451]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:21:37.458]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:21:37.458]        </block>
[19:21:37.458]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:21:37.458]      </control>
[19:21:37.458]      // end if-block "powered_down"
[19:21:37.458]    </control>
[19:21:37.458]    <block atomic="false" info="">
[19:21:37.458]      __var DEBUG_PORT_VAL    = 0;
[19:21:37.458]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:21:37.458]      __var ACCESS_POINT_VAL  = 0;
[19:21:37.458]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:21:37.458]      __ap = 1; 
[19:21:37.460]        // -> [__ap <= 0x00000001]
[19:21:37.460]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:21:37.462]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:21:37.462]      __ap = 4;
[19:21:37.462]        // -> [__ap <= 0x00000004]
[19:21:37.462]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:21:37.477]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:21:37.480]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:21:37.480]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:21:37.481]    </block>
[19:21:37.481]    <block atomic="false" info="">
[19:21:37.481]      __var nReset = 0x80;
[19:21:37.481]        // -> [nReset <= 0x00000080]
[19:21:37.483]      __var canReadPins = 0;
[19:21:37.483]        // -> [canReadPins <= 0x00000000]
[19:21:37.483]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:21:37.485]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:21:37.485]        // -> [canReadPins <= 0x00000001]
[19:21:37.485]    </block>
[19:21:37.485]    <control if="" while="1" timeout="200" info="">
[19:21:37.485]      // while "1"  (timeout="200")
[19:21:37.485]      // while-condition  =>  TRUE
[19:21:37.485]      // while "1"  (timeout="200")
[19:21:37.485]      // while-condition  =>  TRUE
[19:21:37.485]      // while "1"  (timeout="200")
[19:21:37.485]      // while-condition  =>  TRUE
[19:21:37.485]      // while "1"  (timeout="200")
[19:21:37.485]      // while-condition  =>  TRUE
[19:21:37.485]      // while "1"  (timeout="200")
[19:21:37.489]      // while-condition  =>  TRUE
[19:21:37.489]      // while "1"  (timeout="200")
[19:21:37.489]      // while  =>  TIMEOUT
[19:21:37.489]      // end while "1"
[19:21:37.489]    </control>
[19:21:37.489]    <control if="canReadPins" while="" timeout="0" info="">
[19:21:37.489]      // if-block "canReadPins"
[19:21:37.489]        // =>  TRUE
[19:21:37.489]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:21:37.489]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:21:37.492]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:21:37.492]        // while-condition  =>  FALSE
[19:21:37.492]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:21:37.492]      </control>
[19:21:37.492]      // end if-block "canReadPins"
[19:21:37.492]    </control>
[19:21:37.492]    <control if="!canReadPins" while="" timeout="0" info="">
[19:21:37.492]      // if-block "!canReadPins"
[19:21:37.492]        // =>  FALSE
[19:21:37.492]      // skip if-block "!canReadPins"
[19:21:37.492]    </control>
[19:21:37.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:21:37.500]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:21:37.500]        // =>  TRUE
[19:21:37.500]      <block atomic="false" info="">
[19:21:37.500]        WriteAP(0x00, 0x190008);
[19:21:37.502]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:21:37.502]        WriteAP(0xF0, 0x01);
[19:21:37.511]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:21:37.511]      </block>
[19:21:37.511]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:21:37.511]    </control>
[19:21:37.511]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:21:37.511]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:21:37.511]        // =>  FALSE
[19:21:37.511]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:21:37.511]    </control>
[19:21:37.511]    <block atomic="false" info="">
[19:21:37.511]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:21:37.525]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:21:37.525]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:21:37.525]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:21:37.528]      __ap = 0; //lets make sure we reset the access point selection
[19:21:37.528]        // -> [__ap <= 0x00000000]
[19:21:37.528]    </block>
[19:21:37.528]  </sequence>
[19:21:37.528]  
[19:21:37.572]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:21:37.572]  
[19:21:37.572]  <debugvars>
[19:21:37.572]    // Pre-defined
[19:21:37.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:21:37.572]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:21:37.572]    __dp=0x00000000
[19:21:37.572]    __ap=0x00000000
[19:21:37.572]    __traceout=0x00000000      (Trace Disabled)
[19:21:37.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:21:37.572]    __FlashAddr=0x00000000
[19:21:37.572]    __FlashLen=0x00000000
[19:21:37.572]    __FlashArg=0x00000000
[19:21:37.572]    __FlashOp=0x00000000
[19:21:37.572]    __Result=0x00000000
[19:21:37.572]  </debugvars>
[19:21:37.572]  
[19:21:37.572]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:21:37.572]    <block atomic="false" info="">
[19:21:37.572]      __var deviceID = 0;
[19:21:37.572]        // -> [deviceID <= 0x00000000]
[19:21:37.572]      __var version = 0;
[19:21:37.572]        // -> [version <= 0x00000000]
[19:21:37.572]      __var partNum = 0;
[19:21:37.572]        // -> [partNum <= 0x00000000]
[19:21:37.572]      __var manuf = 0;
[19:21:37.572]        // -> [manuf <= 0x00000000]
[19:21:37.572]      __var isMSPM0G1X0X_G3X0X = 0;
[19:21:37.572]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:21:37.572]      __var isProduction = 0;
[19:21:37.572]        // -> [isProduction <= 0x00000000]
[19:21:37.572]      __var continueId = 0;
[19:21:37.572]        // -> [continueId <= 0x00000000]
[19:21:37.572]      deviceID =   Read32(0x41C40004);
[19:21:37.599]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:21:37.599]        // -> [deviceID <= 0x2BB8802F]
[19:21:37.599]      version = deviceID >> 28;
[19:21:37.599]        // -> [version <= 0x00000002]
[19:21:37.599]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:21:37.601]        // -> [partNum <= 0x0000BB88]
[19:21:37.601]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:21:37.601]        // -> [manuf <= 0x00000017]
[19:21:37.601]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:21:37.601]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:21:37.601]      isProduction = (version > 0);
[19:21:37.602]        // -> [isProduction <= 0x00000001]
[19:21:37.602]    </block>
[19:21:37.602]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:21:37.602]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:21:37.602]        // =>  FALSE
[19:21:37.602]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:21:37.602]    </control>
[19:21:37.602]    <control if="continueId == 4" while="" timeout="0" info="">
[19:21:37.602]      // if-block "continueId == 4"
[19:21:37.602]        // =>  FALSE
[19:21:37.602]      // skip if-block "continueId == 4"
[19:21:37.602]    </control>
[19:21:37.602]    <control if="!isProduction" while="" timeout="0" info="">
[19:21:37.602]      // if-block "!isProduction"
[19:21:37.602]        // =>  FALSE
[19:21:37.602]      // skip if-block "!isProduction"
[19:21:37.602]    </control>
[19:21:37.602]  </sequence>
[19:21:37.602]  
[19:22:50.230]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:22:50.230]  
[19:22:50.242]  <debugvars>
[19:22:50.242]    // Pre-defined
[19:22:50.242]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:22:50.242]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:22:50.242]    __dp=0x00000000
[19:22:50.242]    __ap=0x00000000
[19:22:50.242]    __traceout=0x00000000      (Trace Disabled)
[19:22:50.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:22:50.242]    __FlashAddr=0x00000000
[19:22:50.242]    __FlashLen=0x00000000
[19:22:50.242]    __FlashArg=0x00000000
[19:22:50.242]    __FlashOp=0x00000000
[19:22:50.242]    __Result=0x00000000
[19:22:50.242]  </debugvars>
[19:22:50.242]  
[19:22:50.242]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:22:50.242]    <block atomic="false" info="">
[19:22:50.242]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:22:50.242]        // -> [isSWJ <= 0x00000001]
[19:22:50.242]      __var hasDormant = __protocol & 0x00020000;
[19:22:50.242]        // -> [hasDormant <= 0x00000000]
[19:22:50.242]      __var protType   = __protocol & 0x0000FFFF;
[19:22:50.242]        // -> [protType <= 0x00000002]
[19:22:50.242]    </block>
[19:22:50.242]    <control if="protType == 1" while="" timeout="0" info="">
[19:22:50.242]      // if-block "protType == 1"
[19:22:50.242]        // =>  FALSE
[19:22:50.242]      // skip if-block "protType == 1"
[19:22:50.242]    </control>
[19:22:50.242]    <control if="protType == 2" while="" timeout="0" info="">
[19:22:50.242]      // if-block "protType == 2"
[19:22:50.242]        // =>  TRUE
[19:22:50.242]      <control if="isSWJ" while="" timeout="0" info="">
[19:22:50.242]        // if-block "isSWJ"
[19:22:50.242]          // =>  TRUE
[19:22:50.242]        <control if="hasDormant" while="" timeout="0" info="">
[19:22:50.242]          // if-block "hasDormant"
[19:22:50.242]            // =>  FALSE
[19:22:50.242]          // skip if-block "hasDormant"
[19:22:50.242]        </control>
[19:22:50.242]        <control if="!hasDormant" while="" timeout="0" info="">
[19:22:50.242]          // if-block "!hasDormant"
[19:22:50.242]            // =>  TRUE
[19:22:50.242]          <block atomic="false" info="">
[19:22:50.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:22:50.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:22:50.242]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:22:50.250]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:22:50.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:22:50.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:22:50.260]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:22:50.264]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:22:50.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:22:50.270]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:22:50.270]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:22:50.270]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:22:50.270]          </block>
[19:22:50.270]          // end if-block "!hasDormant"
[19:22:50.270]        </control>
[19:22:50.270]        // end if-block "isSWJ"
[19:22:50.279]      </control>
[19:22:50.279]      <control if="!isSWJ" while="" timeout="0" info="">
[19:22:50.279]        // if-block "!isSWJ"
[19:22:50.279]          // =>  FALSE
[19:22:50.280]        // skip if-block "!isSWJ"
[19:22:50.280]      </control>
[19:22:50.280]      <block atomic="false" info="">
[19:22:50.280]        ReadDP(0x0);
[19:22:50.289]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:22:50.289]      </block>
[19:22:50.289]      // end if-block "protType == 2"
[19:22:50.289]    </control>
[19:22:50.289]  </sequence>
[19:22:50.290]  
[19:22:50.300]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:22:50.300]  
[19:22:50.300]  <debugvars>
[19:22:50.300]    // Pre-defined
[19:22:50.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:22:50.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:22:50.300]    __dp=0x00000000
[19:22:50.300]    __ap=0x00000000
[19:22:50.310]    __traceout=0x00000000      (Trace Disabled)
[19:22:50.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:22:50.310]    __FlashAddr=0x00000000
[19:22:50.310]    __FlashLen=0x00000000
[19:22:50.310]    __FlashArg=0x00000000
[19:22:50.310]    __FlashOp=0x00000000
[19:22:50.310]    __Result=0x00000000
[19:22:50.311]  </debugvars>
[19:22:50.311]  
[19:22:50.311]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:22:50.311]    <block atomic="false" info="">
[19:22:50.311]      __var SW_DP_ABORT       = 0x0;
[19:22:50.311]        // -> [SW_DP_ABORT <= 0x00000000]
[19:22:50.311]      __var DP_CTRL_STAT      = 0x4;
[19:22:50.311]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:22:50.311]      __var DP_SELECT         = 0x8;
[19:22:50.311]        // -> [DP_SELECT <= 0x00000008]
[19:22:50.311]      __var powered_down      = 0;
[19:22:50.311]        // -> [powered_down <= 0x00000000]
[19:22:50.311]      WriteDP(DP_SELECT, 0x00000000);
[19:22:50.316]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:22:50.316]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:22:50.317]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:22:50.317]        // -> [powered_down <= 0x00000001]
[19:22:50.317]    </block>
[19:22:50.317]    <control if="powered_down" while="" timeout="0" info="">
[19:22:50.317]      // if-block "powered_down"
[19:22:50.317]        // =>  TRUE
[19:22:50.320]      <block atomic="false" info="">
[19:22:50.320]        Message(0, "Debug/System power-up request sent");
[19:22:50.320]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:22:50.329]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:22:50.329]      </block>
[19:22:50.329]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:22:50.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:22:50.337]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:22:50.337]        // while-condition  =>  FALSE
[19:22:50.337]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:22:50.337]      </control>
[19:22:50.337]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:22:50.337]        // if-block "(__protocol & 0xFFFF) == 1"
[19:22:50.337]          // =>  FALSE
[19:22:50.337]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:22:50.337]      </control>
[19:22:50.337]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:22:50.337]        // if-block "(__protocol & 0xFFFF) == 2"
[19:22:50.337]          // =>  TRUE
[19:22:50.337]        <block atomic="false" info="">
[19:22:50.337]          Message(0, "executing SWD power up");
[19:22:50.337]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:22:50.341]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:22:50.341]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:22:50.347]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:22:50.347]        </block>
[19:22:50.347]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:22:50.349]      </control>
[19:22:50.349]      // end if-block "powered_down"
[19:22:50.349]    </control>
[19:22:50.349]    <block atomic="false" info="">
[19:22:50.350]      __var DEBUG_PORT_VAL    = 0;
[19:22:50.350]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:22:50.350]      __var ACCESS_POINT_VAL  = 0;
[19:22:50.350]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:22:50.350]      __ap = 1; 
[19:22:50.350]        // -> [__ap <= 0x00000001]
[19:22:50.350]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:22:50.351]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:22:50.351]      __ap = 4;
[19:22:50.351]        // -> [__ap <= 0x00000004]
[19:22:50.351]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:22:50.361]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:22:50.361]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:22:50.361]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:22:50.361]    </block>
[19:22:50.361]    <block atomic="false" info="">
[19:22:50.361]      __var nReset = 0x80;
[19:22:50.361]        // -> [nReset <= 0x00000080]
[19:22:50.361]      __var canReadPins = 0;
[19:22:50.361]        // -> [canReadPins <= 0x00000000]
[19:22:50.361]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:22:50.375]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:22:50.375]        // -> [canReadPins <= 0x00000001]
[19:22:50.375]    </block>
[19:22:50.375]    <control if="" while="1" timeout="200" info="">
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.375]      // while-condition  =>  TRUE
[19:22:50.375]      // while "1"  (timeout="200")
[19:22:50.381]      // while-condition  =>  TRUE
[19:22:50.381]      // while "1"  (timeout="200")
[19:22:50.381]      // while  =>  TIMEOUT
[19:22:50.381]      // end while "1"
[19:22:50.381]    </control>
[19:22:50.381]    <control if="canReadPins" while="" timeout="0" info="">
[19:22:50.381]      // if-block "canReadPins"
[19:22:50.381]        // =>  TRUE
[19:22:50.381]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:22:50.381]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:22:50.381]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:22:50.381]        // while-condition  =>  FALSE
[19:22:50.381]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:22:50.381]      </control>
[19:22:50.381]      // end if-block "canReadPins"
[19:22:50.381]    </control>
[19:22:50.381]    <control if="!canReadPins" while="" timeout="0" info="">
[19:22:50.381]      // if-block "!canReadPins"
[19:22:50.381]        // =>  FALSE
[19:22:50.381]      // skip if-block "!canReadPins"
[19:22:50.387]    </control>
[19:22:50.387]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:22:50.387]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:22:50.387]        // =>  TRUE
[19:22:50.387]      <block atomic="false" info="">
[19:22:50.387]        WriteAP(0x00, 0x190008);
[19:22:50.398]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:22:50.398]        WriteAP(0xF0, 0x01);
[19:22:50.409]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:22:50.409]      </block>
[19:22:50.409]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:22:50.410]    </control>
[19:22:50.410]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:22:50.410]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:22:50.410]        // =>  FALSE
[19:22:50.410]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:22:50.410]    </control>
[19:22:50.410]    <block atomic="false" info="">
[19:22:50.410]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:22:50.416]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:22:50.416]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:22:50.416]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:22:50.416]      __ap = 0; //lets make sure we reset the access point selection
[19:22:50.416]        // -> [__ap <= 0x00000000]
[19:22:50.416]    </block>
[19:22:50.416]  </sequence>
[19:22:50.416]  
[19:22:50.519]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:22:50.519]  
[19:22:50.519]  <debugvars>
[19:22:50.520]    // Pre-defined
[19:22:50.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:22:50.520]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:22:50.520]    __dp=0x00000000
[19:22:50.520]    __ap=0x00000000
[19:22:50.520]    __traceout=0x00000000      (Trace Disabled)
[19:22:50.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:22:50.520]    __FlashAddr=0x00000000
[19:22:50.520]    __FlashLen=0x00000000
[19:22:50.520]    __FlashArg=0x00000000
[19:22:50.520]    __FlashOp=0x00000000
[19:22:50.520]    __Result=0x00000000
[19:22:50.521]  </debugvars>
[19:22:50.521]  
[19:22:50.521]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:22:50.521]    <block atomic="false" info="">
[19:22:50.521]      __var deviceID = 0;
[19:22:50.521]        // -> [deviceID <= 0x00000000]
[19:22:50.521]      __var version = 0;
[19:22:50.521]        // -> [version <= 0x00000000]
[19:22:50.521]      __var partNum = 0;
[19:22:50.521]        // -> [partNum <= 0x00000000]
[19:22:50.522]      __var manuf = 0;
[19:22:50.522]        // -> [manuf <= 0x00000000]
[19:22:50.522]      __var isMSPM0G1X0X_G3X0X = 0;
[19:22:50.522]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:22:50.522]      __var isProduction = 0;
[19:22:50.522]        // -> [isProduction <= 0x00000000]
[19:22:50.522]      __var continueId = 0;
[19:22:50.522]        // -> [continueId <= 0x00000000]
[19:22:50.522]      deviceID =   Read32(0x41C40004);
[19:22:50.546]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:22:50.546]        // -> [deviceID <= 0x2BB8802F]
[19:22:50.547]      version = deviceID >> 28;
[19:22:50.547]        // -> [version <= 0x00000002]
[19:22:50.547]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:22:50.547]        // -> [partNum <= 0x0000BB88]
[19:22:50.547]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:22:50.547]        // -> [manuf <= 0x00000017]
[19:22:50.548]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:22:50.548]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:22:50.548]      isProduction = (version > 0);
[19:22:50.548]        // -> [isProduction <= 0x00000001]
[19:22:50.548]    </block>
[19:22:50.549]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:22:50.549]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:22:50.549]        // =>  FALSE
[19:22:50.549]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:22:50.549]    </control>
[19:22:50.549]    <control if="continueId == 4" while="" timeout="0" info="">
[19:22:50.549]      // if-block "continueId == 4"
[19:22:50.549]        // =>  FALSE
[19:22:50.549]      // skip if-block "continueId == 4"
[19:22:50.549]    </control>
[19:22:50.549]    <control if="!isProduction" while="" timeout="0" info="">
[19:22:50.549]      // if-block "!isProduction"
[19:22:50.549]        // =>  FALSE
[19:22:50.549]      // skip if-block "!isProduction"
[19:22:50.550]    </control>
[19:22:50.550]  </sequence>
[19:22:50.550]  
[19:36:51.086]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:36:51.086]  
[19:36:51.086]  <debugvars>
[19:36:51.086]    // Pre-defined
[19:36:51.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:36:51.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:36:51.086]    __dp=0x00000000
[19:36:51.086]    __ap=0x00000000
[19:36:51.086]    __traceout=0x00000000      (Trace Disabled)
[19:36:51.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:36:51.086]    __FlashAddr=0x00000000
[19:36:51.086]    __FlashLen=0x00000000
[19:36:51.086]    __FlashArg=0x00000000
[19:36:51.086]    __FlashOp=0x00000000
[19:36:51.086]    __Result=0x00000000
[19:36:51.086]  </debugvars>
[19:36:51.086]  
[19:36:51.086]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:36:51.086]    <block atomic="false" info="">
[19:36:51.086]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:36:51.086]        // -> [isSWJ <= 0x00000001]
[19:36:51.086]      __var hasDormant = __protocol & 0x00020000;
[19:36:51.086]        // -> [hasDormant <= 0x00000000]
[19:36:51.086]      __var protType   = __protocol & 0x0000FFFF;
[19:36:51.086]        // -> [protType <= 0x00000002]
[19:36:51.086]    </block>
[19:36:51.086]    <control if="protType == 1" while="" timeout="0" info="">
[19:36:51.086]      // if-block "protType == 1"
[19:36:51.086]        // =>  FALSE
[19:36:51.086]      // skip if-block "protType == 1"
[19:36:51.092]    </control>
[19:36:51.092]    <control if="protType == 2" while="" timeout="0" info="">
[19:36:51.092]      // if-block "protType == 2"
[19:36:51.092]        // =>  TRUE
[19:36:51.092]      <control if="isSWJ" while="" timeout="0" info="">
[19:36:51.092]        // if-block "isSWJ"
[19:36:51.092]          // =>  TRUE
[19:36:51.092]        <control if="hasDormant" while="" timeout="0" info="">
[19:36:51.092]          // if-block "hasDormant"
[19:36:51.092]            // =>  FALSE
[19:36:51.092]          // skip if-block "hasDormant"
[19:36:51.092]        </control>
[19:36:51.092]        <control if="!hasDormant" while="" timeout="0" info="">
[19:36:51.092]          // if-block "!hasDormant"
[19:36:51.092]            // =>  TRUE
[19:36:51.092]          <block atomic="false" info="">
[19:36:51.092]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:36:51.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:36:51.096]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:36:51.102]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:36:51.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:36:51.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:36:51.106]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:36:51.106]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:36:51.106]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:36:51.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:36:51.112]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:36:51.118]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:36:51.118]          </block>
[19:36:51.118]          // end if-block "!hasDormant"
[19:36:51.118]        </control>
[19:36:51.118]        // end if-block "isSWJ"
[19:36:51.118]      </control>
[19:36:51.118]      <control if="!isSWJ" while="" timeout="0" info="">
[19:36:51.118]        // if-block "!isSWJ"
[19:36:51.118]          // =>  FALSE
[19:36:51.118]        // skip if-block "!isSWJ"
[19:36:51.118]      </control>
[19:36:51.118]      <block atomic="false" info="">
[19:36:51.118]        ReadDP(0x0);
[19:36:51.122]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:36:51.122]      </block>
[19:36:51.122]      // end if-block "protType == 2"
[19:36:51.122]    </control>
[19:36:51.122]  </sequence>
[19:36:51.122]  
[19:36:51.137]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:36:51.137]  
[19:36:51.137]  <debugvars>
[19:36:51.137]    // Pre-defined
[19:36:51.137]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:36:51.137]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:36:51.137]    __dp=0x00000000
[19:36:51.137]    __ap=0x00000000
[19:36:51.137]    __traceout=0x00000000      (Trace Disabled)
[19:36:51.137]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:36:51.137]    __FlashAddr=0x00000000
[19:36:51.137]    __FlashLen=0x00000000
[19:36:51.137]    __FlashArg=0x00000000
[19:36:51.137]    __FlashOp=0x00000000
[19:36:51.137]    __Result=0x00000000
[19:36:51.137]  </debugvars>
[19:36:51.137]  
[19:36:51.137]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:36:51.137]    <block atomic="false" info="">
[19:36:51.137]      __var SW_DP_ABORT       = 0x0;
[19:36:51.137]        // -> [SW_DP_ABORT <= 0x00000000]
[19:36:51.137]      __var DP_CTRL_STAT      = 0x4;
[19:36:51.137]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:36:51.137]      __var DP_SELECT         = 0x8;
[19:36:51.137]        // -> [DP_SELECT <= 0x00000008]
[19:36:51.142]      __var powered_down      = 0;
[19:36:51.142]        // -> [powered_down <= 0x00000000]
[19:36:51.142]      WriteDP(DP_SELECT, 0x00000000);
[19:36:51.147]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:36:51.147]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:36:51.148]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:36:51.148]        // -> [powered_down <= 0x00000001]
[19:36:51.148]    </block>
[19:36:51.148]    <control if="powered_down" while="" timeout="0" info="">
[19:36:51.148]      // if-block "powered_down"
[19:36:51.148]        // =>  TRUE
[19:36:51.148]      <block atomic="false" info="">
[19:36:51.148]        Message(0, "Debug/System power-up request sent");
[19:36:51.152]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:36:51.157]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:36:51.157]      </block>
[19:36:51.157]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:36:51.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:36:51.162]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:36:51.162]        // while-condition  =>  FALSE
[19:36:51.162]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:36:51.162]      </control>
[19:36:51.162]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:36:51.162]        // if-block "(__protocol & 0xFFFF) == 1"
[19:36:51.162]          // =>  FALSE
[19:36:51.162]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:36:51.162]      </control>
[19:36:51.162]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:36:51.162]        // if-block "(__protocol & 0xFFFF) == 2"
[19:36:51.162]          // =>  TRUE
[19:36:51.162]        <block atomic="false" info="">
[19:36:51.162]          Message(0, "executing SWD power up");
[19:36:51.162]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:36:51.172]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:36:51.172]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:36:51.173]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:36:51.173]        </block>
[19:36:51.173]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:36:51.173]      </control>
[19:36:51.173]      // end if-block "powered_down"
[19:36:51.173]    </control>
[19:36:51.173]    <block atomic="false" info="">
[19:36:51.173]      __var DEBUG_PORT_VAL    = 0;
[19:36:51.173]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:36:51.177]      __var ACCESS_POINT_VAL  = 0;
[19:36:51.177]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:36:51.177]      __ap = 1; 
[19:36:51.177]        // -> [__ap <= 0x00000001]
[19:36:51.177]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:36:51.187]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:36:51.187]      __ap = 4;
[19:36:51.187]        // -> [__ap <= 0x00000004]
[19:36:51.187]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:36:51.197]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:36:51.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:36:51.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:36:51.197]    </block>
[19:36:51.197]    <block atomic="false" info="">
[19:36:51.197]      __var nReset = 0x80;
[19:36:51.197]        // -> [nReset <= 0x00000080]
[19:36:51.197]      __var canReadPins = 0;
[19:36:51.197]        // -> [canReadPins <= 0x00000000]
[19:36:51.197]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:36:51.202]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:36:51.202]        // -> [canReadPins <= 0x00000001]
[19:36:51.202]    </block>
[19:36:51.202]    <control if="" while="1" timeout="200" info="">
[19:36:51.202]      // while "1"  (timeout="200")
[19:36:51.202]      // while-condition  =>  TRUE
[19:36:51.202]      // while "1"  (timeout="200")
[19:36:51.202]      // while-condition  =>  TRUE
[19:36:51.207]      // while "1"  (timeout="200")
[19:36:51.207]      // while  =>  TIMEOUT
[19:36:51.207]      // end while "1"
[19:36:51.207]    </control>
[19:36:51.207]    <control if="canReadPins" while="" timeout="0" info="">
[19:36:51.207]      // if-block "canReadPins"
[19:36:51.207]        // =>  TRUE
[19:36:51.207]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:36:51.207]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:36:51.207]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:36:51.207]        // while-condition  =>  FALSE
[19:36:51.207]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:36:51.207]      </control>
[19:36:51.207]      // end if-block "canReadPins"
[19:36:51.207]    </control>
[19:36:51.207]    <control if="!canReadPins" while="" timeout="0" info="">
[19:36:51.207]      // if-block "!canReadPins"
[19:36:51.207]        // =>  FALSE
[19:36:51.207]      // skip if-block "!canReadPins"
[19:36:51.207]    </control>
[19:36:51.207]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:36:51.207]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:36:51.207]        // =>  TRUE
[19:36:51.212]      <block atomic="false" info="">
[19:36:51.212]        WriteAP(0x00, 0x190008);
[19:36:51.217]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:36:51.217]        WriteAP(0xF0, 0x01);
[19:36:51.227]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:36:51.227]      </block>
[19:36:51.227]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:36:51.227]    </control>
[19:36:51.227]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:36:51.227]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:36:51.227]        // =>  FALSE
[19:36:51.227]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:36:51.227]    </control>
[19:36:51.227]    <block atomic="false" info="">
[19:36:51.227]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:36:51.239]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:36:51.239]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:36:51.239]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:36:51.243]      __ap = 0; //lets make sure we reset the access point selection
[19:36:51.243]        // -> [__ap <= 0x00000000]
[19:36:51.243]    </block>
[19:36:51.243]  </sequence>
[19:36:51.243]  
[19:36:51.302]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:36:51.302]  
[19:36:51.302]  <debugvars>
[19:36:51.302]    // Pre-defined
[19:36:51.302]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:36:51.302]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:36:51.302]    __dp=0x00000000
[19:36:51.302]    __ap=0x00000000
[19:36:51.302]    __traceout=0x00000000      (Trace Disabled)
[19:36:51.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:36:51.302]    __FlashAddr=0x00000000
[19:36:51.302]    __FlashLen=0x00000000
[19:36:51.302]    __FlashArg=0x00000000
[19:36:51.302]    __FlashOp=0x00000000
[19:36:51.302]    __Result=0x00000000
[19:36:51.302]  </debugvars>
[19:36:51.302]  
[19:36:51.302]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:36:51.302]    <block atomic="false" info="">
[19:36:51.302]      __var deviceID = 0;
[19:36:51.302]        // -> [deviceID <= 0x00000000]
[19:36:51.302]      __var version = 0;
[19:36:51.302]        // -> [version <= 0x00000000]
[19:36:51.302]      __var partNum = 0;
[19:36:51.302]        // -> [partNum <= 0x00000000]
[19:36:51.302]      __var manuf = 0;
[19:36:51.302]        // -> [manuf <= 0x00000000]
[19:36:51.302]      __var isMSPM0G1X0X_G3X0X = 0;
[19:36:51.302]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:36:51.302]      __var isProduction = 0;
[19:36:51.302]        // -> [isProduction <= 0x00000000]
[19:36:51.302]      __var continueId = 0;
[19:36:51.302]        // -> [continueId <= 0x00000000]
[19:36:51.302]      deviceID =   Read32(0x41C40004);
[19:36:51.322]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:36:51.322]        // -> [deviceID <= 0x2BB8802F]
[19:36:51.322]      version = deviceID >> 28;
[19:36:51.322]        // -> [version <= 0x00000002]
[19:36:51.322]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:36:51.322]        // -> [partNum <= 0x0000BB88]
[19:36:51.322]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:36:51.322]        // -> [manuf <= 0x00000017]
[19:36:51.322]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:36:51.322]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:36:51.322]      isProduction = (version > 0);
[19:36:51.322]        // -> [isProduction <= 0x00000001]
[19:36:51.322]    </block>
[19:36:51.322]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:36:51.322]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:36:51.322]        // =>  FALSE
[19:36:51.322]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:36:51.322]    </control>
[19:36:51.322]    <control if="continueId == 4" while="" timeout="0" info="">
[19:36:51.322]      // if-block "continueId == 4"
[19:36:51.322]        // =>  FALSE
[19:36:51.322]      // skip if-block "continueId == 4"
[19:36:51.322]    </control>
[19:36:51.322]    <control if="!isProduction" while="" timeout="0" info="">
[19:36:51.322]      // if-block "!isProduction"
[19:36:51.322]        // =>  FALSE
[19:36:51.322]      // skip if-block "!isProduction"
[19:36:51.322]    </control>
[19:36:51.322]  </sequence>
[19:36:51.322]  
[19:37:57.692]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:37:57.692]  
[19:37:57.707]  <debugvars>
[19:37:57.707]    // Pre-defined
[19:37:57.707]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:57.707]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:57.707]    __dp=0x00000000
[19:37:57.707]    __ap=0x00000000
[19:37:57.707]    __traceout=0x00000000      (Trace Disabled)
[19:37:57.707]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:57.707]    __FlashAddr=0x00000000
[19:37:57.707]    __FlashLen=0x00000000
[19:37:57.707]    __FlashArg=0x00000000
[19:37:57.707]    __FlashOp=0x00000000
[19:37:57.707]    __Result=0x00000000
[19:37:57.707]  </debugvars>
[19:37:57.707]  
[19:37:57.707]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:37:57.707]    <block atomic="false" info="">
[19:37:57.707]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:37:57.707]        // -> [isSWJ <= 0x00000001]
[19:37:57.707]      __var hasDormant = __protocol & 0x00020000;
[19:37:57.707]        // -> [hasDormant <= 0x00000000]
[19:37:57.707]      __var protType   = __protocol & 0x0000FFFF;
[19:37:57.707]        // -> [protType <= 0x00000002]
[19:37:57.707]    </block>
[19:37:57.707]    <control if="protType == 1" while="" timeout="0" info="">
[19:37:57.707]      // if-block "protType == 1"
[19:37:57.707]        // =>  FALSE
[19:37:57.710]      // skip if-block "protType == 1"
[19:37:57.710]    </control>
[19:37:57.710]    <control if="protType == 2" while="" timeout="0" info="">
[19:37:57.710]      // if-block "protType == 2"
[19:37:57.710]        // =>  TRUE
[19:37:57.710]      <control if="isSWJ" while="" timeout="0" info="">
[19:37:57.710]        // if-block "isSWJ"
[19:37:57.710]          // =>  TRUE
[19:37:57.710]        <control if="hasDormant" while="" timeout="0" info="">
[19:37:57.710]          // if-block "hasDormant"
[19:37:57.710]            // =>  FALSE
[19:37:57.710]          // skip if-block "hasDormant"
[19:37:57.710]        </control>
[19:37:57.710]        <control if="!hasDormant" while="" timeout="0" info="">
[19:37:57.710]          // if-block "!hasDormant"
[19:37:57.712]            // =>  TRUE
[19:37:57.712]          <block atomic="false" info="">
[19:37:57.712]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:37:57.713]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:57.713]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:37:57.717]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:37:57.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:37:57.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:57.722]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:37:57.727]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:37:57.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:37:57.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:37:57.732]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:37:57.732]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:37:57.732]          </block>
[19:37:57.732]          // end if-block "!hasDormant"
[19:37:57.732]        </control>
[19:37:57.732]        // end if-block "isSWJ"
[19:37:57.732]      </control>
[19:37:57.732]      <control if="!isSWJ" while="" timeout="0" info="">
[19:37:57.732]        // if-block "!isSWJ"
[19:37:57.732]          // =>  FALSE
[19:37:57.732]        // skip if-block "!isSWJ"
[19:37:57.732]      </control>
[19:37:57.732]      <block atomic="false" info="">
[19:37:57.732]        ReadDP(0x0);
[19:37:57.742]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:37:57.747]      </block>
[19:37:57.747]      // end if-block "protType == 2"
[19:37:57.747]    </control>
[19:37:57.747]  </sequence>
[19:37:57.747]  
[19:37:57.757]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:37:57.757]  
[19:37:57.757]  <debugvars>
[19:37:57.762]    // Pre-defined
[19:37:57.762]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:57.762]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:57.762]    __dp=0x00000000
[19:37:57.762]    __ap=0x00000000
[19:37:57.762]    __traceout=0x00000000      (Trace Disabled)
[19:37:57.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:57.762]    __FlashAddr=0x00000000
[19:37:57.762]    __FlashLen=0x00000000
[19:37:57.762]    __FlashArg=0x00000000
[19:37:57.762]    __FlashOp=0x00000000
[19:37:57.762]    __Result=0x00000000
[19:37:57.762]  </debugvars>
[19:37:57.762]  
[19:37:57.762]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:37:57.762]    <block atomic="false" info="">
[19:37:57.762]      __var SW_DP_ABORT       = 0x0;
[19:37:57.762]        // -> [SW_DP_ABORT <= 0x00000000]
[19:37:57.762]      __var DP_CTRL_STAT      = 0x4;
[19:37:57.762]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:37:57.762]      __var DP_SELECT         = 0x8;
[19:37:57.762]        // -> [DP_SELECT <= 0x00000008]
[19:37:57.762]      __var powered_down      = 0;
[19:37:57.762]        // -> [powered_down <= 0x00000000]
[19:37:57.762]      WriteDP(DP_SELECT, 0x00000000);
[19:37:57.762]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:37:57.762]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:37:57.772]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:37:57.772]        // -> [powered_down <= 0x00000001]
[19:37:57.772]    </block>
[19:37:57.772]    <control if="powered_down" while="" timeout="0" info="">
[19:37:57.772]      // if-block "powered_down"
[19:37:57.772]        // =>  TRUE
[19:37:57.772]      <block atomic="false" info="">
[19:37:57.772]        Message(0, "Debug/System power-up request sent");
[19:37:57.777]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:37:57.782]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:37:57.782]      </block>
[19:37:57.782]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:37:57.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:37:57.786]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:37:57.786]        // while-condition  =>  FALSE
[19:37:57.786]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:37:57.786]      </control>
[19:37:57.786]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:37:57.786]        // if-block "(__protocol & 0xFFFF) == 1"
[19:37:57.786]          // =>  FALSE
[19:37:57.786]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:37:57.786]      </control>
[19:37:57.786]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:37:57.786]        // if-block "(__protocol & 0xFFFF) == 2"
[19:37:57.786]          // =>  TRUE
[19:37:57.786]        <block atomic="false" info="">
[19:37:57.786]          Message(0, "executing SWD power up");
[19:37:57.790]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:37:57.793]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:37:57.793]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:37:57.797]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:37:57.797]        </block>
[19:37:57.797]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:37:57.797]      </control>
[19:37:57.797]      // end if-block "powered_down"
[19:37:57.797]    </control>
[19:37:57.797]    <block atomic="false" info="">
[19:37:57.797]      __var DEBUG_PORT_VAL    = 0;
[19:37:57.797]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:37:57.797]      __var ACCESS_POINT_VAL  = 0;
[19:37:57.797]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:37:57.800]      __ap = 1; 
[19:37:57.800]        // -> [__ap <= 0x00000001]
[19:37:57.800]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:37:57.811]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:37:57.811]      __ap = 4;
[19:37:57.812]        // -> [__ap <= 0x00000004]
[19:37:57.812]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:57.822]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:37:57.823]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:37:57.823]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:57.826]    </block>
[19:37:57.826]    <block atomic="false" info="">
[19:37:57.827]      __var nReset = 0x80;
[19:37:57.827]        // -> [nReset <= 0x00000080]
[19:37:57.827]      __var canReadPins = 0;
[19:37:57.827]        // -> [canReadPins <= 0x00000000]
[19:37:57.827]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:37:57.835]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:37:57.835]        // -> [canReadPins <= 0x00000001]
[19:37:57.836]    </block>
[19:37:57.836]    <control if="" while="1" timeout="200" info="">
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.836]      // while "1"  (timeout="200")
[19:37:57.836]      // while-condition  =>  TRUE
[19:37:57.842]      // while "1"  (timeout="200")
[19:37:57.842]      // while-condition  =>  TRUE
[19:37:57.842]      // while "1"  (timeout="200")
[19:37:57.842]      // while-condition  =>  TRUE
[19:37:57.842]      // while "1"  (timeout="200")
[19:37:57.842]      // while-condition  =>  TRUE
[19:37:57.842]      // while "1"  (timeout="200")
[19:37:57.842]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.843]      // while-condition  =>  TRUE
[19:37:57.843]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.845]      // while-condition  =>  TRUE
[19:37:57.845]      // while "1"  (timeout="200")
[19:37:57.852]      // while-condition  =>  TRUE
[19:37:57.852]      // while "1"  (timeout="200")
[19:37:57.852]      // while  =>  TIMEOUT
[19:37:57.852]      // end while "1"
[19:37:57.852]    </control>
[19:37:57.852]    <control if="canReadPins" while="" timeout="0" info="">
[19:37:57.852]      // if-block "canReadPins"
[19:37:57.852]        // =>  TRUE
[19:37:57.852]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:37:57.852]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:37:57.852]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:37:57.852]        // while-condition  =>  FALSE
[19:37:57.852]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:37:57.852]      </control>
[19:37:57.852]      // end if-block "canReadPins"
[19:37:57.852]    </control>
[19:37:57.852]    <control if="!canReadPins" while="" timeout="0" info="">
[19:37:57.852]      // if-block "!canReadPins"
[19:37:57.852]        // =>  FALSE
[19:37:57.852]      // skip if-block "!canReadPins"
[19:37:57.852]    </control>
[19:37:57.852]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:37:57.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:57.852]        // =>  TRUE
[19:37:57.852]      <block atomic="false" info="">
[19:37:57.852]        WriteAP(0x00, 0x190008);
[19:37:57.862]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:57.862]        WriteAP(0xF0, 0x01);
[19:37:57.872]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:37:57.872]      </block>
[19:37:57.872]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:37:57.872]    </control>
[19:37:57.872]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:37:57.872]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:57.872]        // =>  FALSE
[19:37:57.872]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:37:57.872]    </control>
[19:37:57.872]    <block atomic="false" info="">
[19:37:57.872]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:37:57.872]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:37:57.882]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:37:57.882]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:37:57.884]      __ap = 0; //lets make sure we reset the access point selection
[19:37:57.884]        // -> [__ap <= 0x00000000]
[19:37:57.884]    </block>
[19:37:57.884]  </sequence>
[19:37:57.884]  
[19:37:57.934]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:37:57.934]  
[19:37:57.934]  <debugvars>
[19:37:57.942]    // Pre-defined
[19:37:57.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:37:57.942]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:37:57.942]    __dp=0x00000000
[19:37:57.942]    __ap=0x00000000
[19:37:57.942]    __traceout=0x00000000      (Trace Disabled)
[19:37:57.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:37:57.942]    __FlashAddr=0x00000000
[19:37:57.942]    __FlashLen=0x00000000
[19:37:57.942]    __FlashArg=0x00000000
[19:37:57.942]    __FlashOp=0x00000000
[19:37:57.942]    __Result=0x00000000
[19:37:57.942]  </debugvars>
[19:37:57.942]  
[19:37:57.942]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:37:57.942]    <block atomic="false" info="">
[19:37:57.942]      __var deviceID = 0;
[19:37:57.942]        // -> [deviceID <= 0x00000000]
[19:37:57.942]      __var version = 0;
[19:37:57.942]        // -> [version <= 0x00000000]
[19:37:57.944]      __var partNum = 0;
[19:37:57.944]        // -> [partNum <= 0x00000000]
[19:37:57.944]      __var manuf = 0;
[19:37:57.944]        // -> [manuf <= 0x00000000]
[19:37:57.945]      __var isMSPM0G1X0X_G3X0X = 0;
[19:37:57.945]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:37:57.945]      __var isProduction = 0;
[19:37:57.945]        // -> [isProduction <= 0x00000000]
[19:37:57.945]      __var continueId = 0;
[19:37:57.945]        // -> [continueId <= 0x00000000]
[19:37:57.945]      deviceID =   Read32(0x41C40004);
[19:37:57.953]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:37:57.953]        // -> [deviceID <= 0x2BB8802F]
[19:37:57.953]      version = deviceID >> 28;
[19:37:57.953]        // -> [version <= 0x00000002]
[19:37:57.953]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:37:57.953]        // -> [partNum <= 0x0000BB88]
[19:37:57.953]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:37:57.953]        // -> [manuf <= 0x00000017]
[19:37:57.953]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:37:57.953]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:37:57.953]      isProduction = (version > 0);
[19:37:57.953]        // -> [isProduction <= 0x00000001]
[19:37:57.953]    </block>
[19:37:57.953]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:37:57.953]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:37:57.953]        // =>  FALSE
[19:37:57.953]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:37:57.953]    </control>
[19:37:57.953]    <control if="continueId == 4" while="" timeout="0" info="">
[19:37:57.953]      // if-block "continueId == 4"
[19:37:57.953]        // =>  FALSE
[19:37:57.953]      // skip if-block "continueId == 4"
[19:37:57.953]    </control>
[19:37:57.953]    <control if="!isProduction" while="" timeout="0" info="">
[19:37:57.953]      // if-block "!isProduction"
[19:37:57.953]        // =>  FALSE
[19:37:57.953]      // skip if-block "!isProduction"
[19:37:57.953]    </control>
[19:37:57.953]  </sequence>
[19:37:57.962]  
[19:39:12.063]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:39:12.063]  
[19:39:12.078]  <debugvars>
[19:39:12.078]    // Pre-defined
[19:39:12.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:39:12.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:39:12.078]    __dp=0x00000000
[19:39:12.078]    __ap=0x00000000
[19:39:12.078]    __traceout=0x00000000      (Trace Disabled)
[19:39:12.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:39:12.078]    __FlashAddr=0x00000000
[19:39:12.078]    __FlashLen=0x00000000
[19:39:12.078]    __FlashArg=0x00000000
[19:39:12.078]    __FlashOp=0x00000000
[19:39:12.078]    __Result=0x00000000
[19:39:12.078]  </debugvars>
[19:39:12.078]  
[19:39:12.078]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:39:12.078]    <block atomic="false" info="">
[19:39:12.078]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:39:12.078]        // -> [isSWJ <= 0x00000001]
[19:39:12.078]      __var hasDormant = __protocol & 0x00020000;
[19:39:12.078]        // -> [hasDormant <= 0x00000000]
[19:39:12.078]      __var protType   = __protocol & 0x0000FFFF;
[19:39:12.078]        // -> [protType <= 0x00000002]
[19:39:12.078]    </block>
[19:39:12.078]    <control if="protType == 1" while="" timeout="0" info="">
[19:39:12.078]      // if-block "protType == 1"
[19:39:12.078]        // =>  FALSE
[19:39:12.078]      // skip if-block "protType == 1"
[19:39:12.078]    </control>
[19:39:12.078]    <control if="protType == 2" while="" timeout="0" info="">
[19:39:12.078]      // if-block "protType == 2"
[19:39:12.078]        // =>  TRUE
[19:39:12.078]      <control if="isSWJ" while="" timeout="0" info="">
[19:39:12.078]        // if-block "isSWJ"
[19:39:12.078]          // =>  TRUE
[19:39:12.078]        <control if="hasDormant" while="" timeout="0" info="">
[19:39:12.078]          // if-block "hasDormant"
[19:39:12.078]            // =>  FALSE
[19:39:12.078]          // skip if-block "hasDormant"
[19:39:12.078]        </control>
[19:39:12.078]        <control if="!hasDormant" while="" timeout="0" info="">
[19:39:12.078]          // if-block "!hasDormant"
[19:39:12.078]            // =>  TRUE
[19:39:12.078]          <block atomic="false" info="">
[19:39:12.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:39:12.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:39:12.083]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:39:12.083]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:39:12.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:39:12.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:39:12.093]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:39:12.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:39:12.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:39:12.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:39:12.093]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:39:12.103]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:39:12.103]          </block>
[19:39:12.103]          // end if-block "!hasDormant"
[19:39:12.103]        </control>
[19:39:12.103]        // end if-block "isSWJ"
[19:39:12.103]      </control>
[19:39:12.103]      <control if="!isSWJ" while="" timeout="0" info="">
[19:39:12.103]        // if-block "!isSWJ"
[19:39:12.103]          // =>  FALSE
[19:39:12.103]        // skip if-block "!isSWJ"
[19:39:12.103]      </control>
[19:39:12.103]      <block atomic="false" info="">
[19:39:12.103]        ReadDP(0x0);
[19:39:12.103]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:39:12.103]      </block>
[19:39:12.103]      // end if-block "protType == 2"
[19:39:12.103]    </control>
[19:39:12.103]  </sequence>
[19:39:12.103]  
[19:39:12.114]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:39:12.114]  
[19:39:12.114]  <debugvars>
[19:39:12.114]    // Pre-defined
[19:39:12.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:39:12.114]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:39:12.114]    __dp=0x00000000
[19:39:12.114]    __ap=0x00000000
[19:39:12.114]    __traceout=0x00000000      (Trace Disabled)
[19:39:12.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:39:12.114]    __FlashAddr=0x00000000
[19:39:12.114]    __FlashLen=0x00000000
[19:39:12.114]    __FlashArg=0x00000000
[19:39:12.114]    __FlashOp=0x00000000
[19:39:12.114]    __Result=0x00000000
[19:39:12.114]  </debugvars>
[19:39:12.114]  
[19:39:12.114]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:39:12.114]    <block atomic="false" info="">
[19:39:12.114]      __var SW_DP_ABORT       = 0x0;
[19:39:12.114]        // -> [SW_DP_ABORT <= 0x00000000]
[19:39:12.114]      __var DP_CTRL_STAT      = 0x4;
[19:39:12.114]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:39:12.114]      __var DP_SELECT         = 0x8;
[19:39:12.114]        // -> [DP_SELECT <= 0x00000008]
[19:39:12.114]      __var powered_down      = 0;
[19:39:12.114]        // -> [powered_down <= 0x00000000]
[19:39:12.114]      WriteDP(DP_SELECT, 0x00000000);
[19:39:12.114]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:39:12.114]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:39:12.122]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:39:12.122]        // -> [powered_down <= 0x00000001]
[19:39:12.122]    </block>
[19:39:12.122]    <control if="powered_down" while="" timeout="0" info="">
[19:39:12.122]      // if-block "powered_down"
[19:39:12.122]        // =>  TRUE
[19:39:12.122]      <block atomic="false" info="">
[19:39:12.122]        Message(0, "Debug/System power-up request sent");
[19:39:12.122]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:39:12.122]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:39:12.122]      </block>
[19:39:12.122]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:39:12.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:39:12.133]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:39:12.133]        // while-condition  =>  FALSE
[19:39:12.133]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:39:12.133]      </control>
[19:39:12.133]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:39:12.133]        // if-block "(__protocol & 0xFFFF) == 1"
[19:39:12.133]          // =>  FALSE
[19:39:12.133]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:39:12.133]      </control>
[19:39:12.133]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:39:12.133]        // if-block "(__protocol & 0xFFFF) == 2"
[19:39:12.133]          // =>  TRUE
[19:39:12.133]        <block atomic="false" info="">
[19:39:12.133]          Message(0, "executing SWD power up");
[19:39:12.133]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:39:12.133]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:39:12.133]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:39:12.144]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:39:12.144]        </block>
[19:39:12.144]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:39:12.144]      </control>
[19:39:12.144]      // end if-block "powered_down"
[19:39:12.144]    </control>
[19:39:12.144]    <block atomic="false" info="">
[19:39:12.144]      __var DEBUG_PORT_VAL    = 0;
[19:39:12.144]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:39:12.144]      __var ACCESS_POINT_VAL  = 0;
[19:39:12.144]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:39:12.144]      __ap = 1; 
[19:39:12.144]        // -> [__ap <= 0x00000001]
[19:39:12.144]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:39:12.152]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:39:12.152]      __ap = 4;
[19:39:12.152]        // -> [__ap <= 0x00000004]
[19:39:12.152]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:39:12.163]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:39:12.163]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:39:12.163]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:39:12.163]    </block>
[19:39:12.163]    <block atomic="false" info="">
[19:39:12.163]      __var nReset = 0x80;
[19:39:12.163]        // -> [nReset <= 0x00000080]
[19:39:12.163]      __var canReadPins = 0;
[19:39:12.163]        // -> [canReadPins <= 0x00000000]
[19:39:12.163]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:39:12.168]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:39:12.168]        // -> [canReadPins <= 0x00000001]
[19:39:12.168]    </block>
[19:39:12.168]    <control if="" while="1" timeout="200" info="">
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.168]      // while-condition  =>  TRUE
[19:39:12.168]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.173]      // while "1"  (timeout="200")
[19:39:12.173]      // while-condition  =>  TRUE
[19:39:12.178]      // while "1"  (timeout="200")
[19:39:12.178]      // while  =>  TIMEOUT
[19:39:12.178]      // end while "1"
[19:39:12.178]    </control>
[19:39:12.178]    <control if="canReadPins" while="" timeout="0" info="">
[19:39:12.178]      // if-block "canReadPins"
[19:39:12.178]        // =>  TRUE
[19:39:12.178]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:39:12.178]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:39:12.178]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:39:12.178]        // while-condition  =>  FALSE
[19:39:12.178]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:39:12.178]      </control>
[19:39:12.178]      // end if-block "canReadPins"
[19:39:12.178]    </control>
[19:39:12.178]    <control if="!canReadPins" while="" timeout="0" info="">
[19:39:12.178]      // if-block "!canReadPins"
[19:39:12.183]        // =>  FALSE
[19:39:12.183]      // skip if-block "!canReadPins"
[19:39:12.183]    </control>
[19:39:12.183]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:39:12.183]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:39:12.183]        // =>  TRUE
[19:39:12.183]      <block atomic="false" info="">
[19:39:12.183]        WriteAP(0x00, 0x190008);
[19:39:12.183]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:39:12.183]        WriteAP(0xF0, 0x01);
[19:39:12.193]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:39:12.193]      </block>
[19:39:12.193]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:39:12.193]    </control>
[19:39:12.193]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:39:12.193]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:39:12.193]        // =>  FALSE
[19:39:12.193]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:39:12.193]    </control>
[19:39:12.193]    <block atomic="false" info="">
[19:39:12.193]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:39:12.198]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:39:12.198]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:39:12.198]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:39:12.198]      __ap = 0; //lets make sure we reset the access point selection
[19:39:12.198]        // -> [__ap <= 0x00000000]
[19:39:12.198]    </block>
[19:39:12.198]  </sequence>
[19:39:12.198]  
[19:39:12.244]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:39:12.244]  
[19:39:12.244]  <debugvars>
[19:39:12.244]    // Pre-defined
[19:39:12.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:39:12.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:39:12.244]    __dp=0x00000000
[19:39:12.244]    __ap=0x00000000
[19:39:12.244]    __traceout=0x00000000      (Trace Disabled)
[19:39:12.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:39:12.244]    __FlashAddr=0x00000000
[19:39:12.244]    __FlashLen=0x00000000
[19:39:12.244]    __FlashArg=0x00000000
[19:39:12.244]    __FlashOp=0x00000000
[19:39:12.252]    __Result=0x00000000
[19:39:12.253]  </debugvars>
[19:39:12.253]  
[19:39:12.253]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:39:12.253]    <block atomic="false" info="">
[19:39:12.253]      __var deviceID = 0;
[19:39:12.253]        // -> [deviceID <= 0x00000000]
[19:39:12.253]      __var version = 0;
[19:39:12.253]        // -> [version <= 0x00000000]
[19:39:12.253]      __var partNum = 0;
[19:39:12.253]        // -> [partNum <= 0x00000000]
[19:39:12.253]      __var manuf = 0;
[19:39:12.253]        // -> [manuf <= 0x00000000]
[19:39:12.253]      __var isMSPM0G1X0X_G3X0X = 0;
[19:39:12.253]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:39:12.253]      __var isProduction = 0;
[19:39:12.253]        // -> [isProduction <= 0x00000000]
[19:39:12.253]      __var continueId = 0;
[19:39:12.253]        // -> [continueId <= 0x00000000]
[19:39:12.253]      deviceID =   Read32(0x41C40004);
[19:39:12.268]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:39:12.268]        // -> [deviceID <= 0x2BB8802F]
[19:39:12.268]      version = deviceID >> 28;
[19:39:12.268]        // -> [version <= 0x00000002]
[19:39:12.268]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:39:12.268]        // -> [partNum <= 0x0000BB88]
[19:39:12.268]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:39:12.268]        // -> [manuf <= 0x00000017]
[19:39:12.268]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:39:12.268]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:39:12.268]      isProduction = (version > 0);
[19:39:12.268]        // -> [isProduction <= 0x00000001]
[19:39:12.268]    </block>
[19:39:12.268]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:39:12.268]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:39:12.268]        // =>  FALSE
[19:39:12.268]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:39:12.268]    </control>
[19:39:12.268]    <control if="continueId == 4" while="" timeout="0" info="">
[19:39:12.268]      // if-block "continueId == 4"
[19:39:12.268]        // =>  FALSE
[19:39:12.268]      // skip if-block "continueId == 4"
[19:39:12.268]    </control>
[19:39:12.268]    <control if="!isProduction" while="" timeout="0" info="">
[19:39:12.268]      // if-block "!isProduction"
[19:39:12.268]        // =>  FALSE
[19:39:12.268]      // skip if-block "!isProduction"
[19:39:12.268]    </control>
[19:39:12.268]  </sequence>
[19:39:12.268]  
[19:41:45.571]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:41:45.571]  
[19:41:45.588]  <debugvars>
[19:41:45.588]    // Pre-defined
[19:41:45.588]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:45.588]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:45.588]    __dp=0x00000000
[19:41:45.588]    __ap=0x00000000
[19:41:45.588]    __traceout=0x00000000      (Trace Disabled)
[19:41:45.588]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:45.588]    __FlashAddr=0x00000000
[19:41:45.588]    __FlashLen=0x00000000
[19:41:45.588]    __FlashArg=0x00000000
[19:41:45.588]    __FlashOp=0x00000000
[19:41:45.588]    __Result=0x00000000
[19:41:45.589]  </debugvars>
[19:41:45.589]  
[19:41:45.589]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:41:45.589]    <block atomic="false" info="">
[19:41:45.589]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:41:45.590]        // -> [isSWJ <= 0x00000001]
[19:41:45.590]      __var hasDormant = __protocol & 0x00020000;
[19:41:45.590]        // -> [hasDormant <= 0x00000000]
[19:41:45.590]      __var protType   = __protocol & 0x0000FFFF;
[19:41:45.590]        // -> [protType <= 0x00000002]
[19:41:45.590]    </block>
[19:41:45.590]    <control if="protType == 1" while="" timeout="0" info="">
[19:41:45.590]      // if-block "protType == 1"
[19:41:45.590]        // =>  FALSE
[19:41:45.590]      // skip if-block "protType == 1"
[19:41:45.590]    </control>
[19:41:45.590]    <control if="protType == 2" while="" timeout="0" info="">
[19:41:45.590]      // if-block "protType == 2"
[19:41:45.592]        // =>  TRUE
[19:41:45.592]      <control if="isSWJ" while="" timeout="0" info="">
[19:41:45.592]        // if-block "isSWJ"
[19:41:45.592]          // =>  TRUE
[19:41:45.592]        <control if="hasDormant" while="" timeout="0" info="">
[19:41:45.592]          // if-block "hasDormant"
[19:41:45.592]            // =>  FALSE
[19:41:45.592]          // skip if-block "hasDormant"
[19:41:45.593]        </control>
[19:41:45.593]        <control if="!hasDormant" while="" timeout="0" info="">
[19:41:45.593]          // if-block "!hasDormant"
[19:41:45.593]            // =>  TRUE
[19:41:45.593]          <block atomic="false" info="">
[19:41:45.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:41:45.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:45.596]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:41:45.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:41:45.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:41:45.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:45.605]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:41:45.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:41:45.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:41:45.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:45.623]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:41:45.623]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:41:45.623]          </block>
[19:41:45.623]          // end if-block "!hasDormant"
[19:41:45.623]        </control>
[19:41:45.623]        // end if-block "isSWJ"
[19:41:45.623]      </control>
[19:41:45.623]      <control if="!isSWJ" while="" timeout="0" info="">
[19:41:45.623]        // if-block "!isSWJ"
[19:41:45.623]          // =>  FALSE
[19:41:45.623]        // skip if-block "!isSWJ"
[19:41:45.623]      </control>
[19:41:45.623]      <block atomic="false" info="">
[19:41:45.623]        ReadDP(0x0);
[19:41:45.634]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:41:45.634]      </block>
[19:41:45.634]      // end if-block "protType == 2"
[19:41:45.634]    </control>
[19:41:45.634]  </sequence>
[19:41:45.634]  
[19:41:45.644]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:41:45.644]  
[19:41:45.644]  <debugvars>
[19:41:45.644]    // Pre-defined
[19:41:45.644]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:45.644]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:45.644]    __dp=0x00000000
[19:41:45.644]    __ap=0x00000000
[19:41:45.644]    __traceout=0x00000000      (Trace Disabled)
[19:41:45.644]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:45.644]    __FlashAddr=0x00000000
[19:41:45.644]    __FlashLen=0x00000000
[19:41:45.644]    __FlashArg=0x00000000
[19:41:45.644]    __FlashOp=0x00000000
[19:41:45.644]    __Result=0x00000000
[19:41:45.644]  </debugvars>
[19:41:45.644]  
[19:41:45.644]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:41:45.644]    <block atomic="false" info="">
[19:41:45.644]      __var SW_DP_ABORT       = 0x0;
[19:41:45.644]        // -> [SW_DP_ABORT <= 0x00000000]
[19:41:45.644]      __var DP_CTRL_STAT      = 0x4;
[19:41:45.644]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:41:45.644]      __var DP_SELECT         = 0x8;
[19:41:45.644]        // -> [DP_SELECT <= 0x00000008]
[19:41:45.644]      __var powered_down      = 0;
[19:41:45.644]        // -> [powered_down <= 0x00000000]
[19:41:45.644]      WriteDP(DP_SELECT, 0x00000000);
[19:41:45.650]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:41:45.650]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:41:45.656]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:41:45.656]        // -> [powered_down <= 0x00000001]
[19:41:45.656]    </block>
[19:41:45.656]    <control if="powered_down" while="" timeout="0" info="">
[19:41:45.656]      // if-block "powered_down"
[19:41:45.656]        // =>  TRUE
[19:41:45.656]      <block atomic="false" info="">
[19:41:45.656]        Message(0, "Debug/System power-up request sent");
[19:41:45.660]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:41:45.663]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:41:45.663]      </block>
[19:41:45.663]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:41:45.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:41:45.669]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:41:45.669]        // while-condition  =>  FALSE
[19:41:45.669]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:41:45.669]      </control>
[19:41:45.669]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:41:45.670]        // if-block "(__protocol & 0xFFFF) == 1"
[19:41:45.670]          // =>  FALSE
[19:41:45.670]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:41:45.670]      </control>
[19:41:45.670]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:41:45.670]        // if-block "(__protocol & 0xFFFF) == 2"
[19:41:45.670]          // =>  TRUE
[19:41:45.670]        <block atomic="false" info="">
[19:41:45.670]          Message(0, "executing SWD power up");
[19:41:45.670]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:41:45.679]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:41:45.679]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:41:45.680]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:41:45.680]        </block>
[19:41:45.680]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:41:45.680]      </control>
[19:41:45.680]      // end if-block "powered_down"
[19:41:45.680]    </control>
[19:41:45.683]    <block atomic="false" info="">
[19:41:45.683]      __var DEBUG_PORT_VAL    = 0;
[19:41:45.683]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:41:45.683]      __var ACCESS_POINT_VAL  = 0;
[19:41:45.683]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:41:45.683]      __ap = 1; 
[19:41:45.683]        // -> [__ap <= 0x00000001]
[19:41:45.683]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:41:45.690]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:41:45.690]      __ap = 4;
[19:41:45.690]        // -> [__ap <= 0x00000004]
[19:41:45.690]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:45.690]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:41:45.690]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:41:45.690]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:45.690]    </block>
[19:41:45.690]    <block atomic="false" info="">
[19:41:45.690]      __var nReset = 0x80;
[19:41:45.690]        // -> [nReset <= 0x00000080]
[19:41:45.690]      __var canReadPins = 0;
[19:41:45.700]        // -> [canReadPins <= 0x00000000]
[19:41:45.700]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:41:45.710]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:41:45.710]        // -> [canReadPins <= 0x00000001]
[19:41:45.710]    </block>
[19:41:45.710]    <control if="" while="1" timeout="200" info="">
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.710]      // while "1"  (timeout="200")
[19:41:45.710]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.720]      // while "1"  (timeout="200")
[19:41:45.720]      // while-condition  =>  TRUE
[19:41:45.730]      // while "1"  (timeout="200")
[19:41:45.730]      // while  =>  TIMEOUT
[19:41:45.730]      // end while "1"
[19:41:45.730]    </control>
[19:41:45.730]    <control if="canReadPins" while="" timeout="0" info="">
[19:41:45.730]      // if-block "canReadPins"
[19:41:45.730]        // =>  TRUE
[19:41:45.730]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:41:45.731]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:41:45.738]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:41:45.738]        // while-condition  =>  FALSE
[19:41:45.738]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:41:45.738]      </control>
[19:41:45.738]      // end if-block "canReadPins"
[19:41:45.738]    </control>
[19:41:45.739]    <control if="!canReadPins" while="" timeout="0" info="">
[19:41:45.739]      // if-block "!canReadPins"
[19:41:45.739]        // =>  FALSE
[19:41:45.739]      // skip if-block "!canReadPins"
[19:41:45.739]    </control>
[19:41:45.739]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:41:45.739]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:45.739]        // =>  TRUE
[19:41:45.739]      <block atomic="false" info="">
[19:41:45.739]        WriteAP(0x00, 0x190008);
[19:41:45.742]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:45.742]        WriteAP(0xF0, 0x01);
[19:41:45.750]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:45.750]      </block>
[19:41:45.751]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:45.751]    </control>
[19:41:45.751]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:41:45.751]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:45.751]        // =>  FALSE
[19:41:45.751]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:45.751]    </control>
[19:41:45.751]    <block atomic="false" info="">
[19:41:45.751]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:45.770]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:41:45.770]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:41:45.771]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:45.771]      __ap = 0; //lets make sure we reset the access point selection
[19:41:45.771]        // -> [__ap <= 0x00000000]
[19:41:45.771]    </block>
[19:41:45.771]  </sequence>
[19:41:45.771]  
[19:41:45.830]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:41:45.830]  
[19:41:45.830]  <debugvars>
[19:41:45.830]    // Pre-defined
[19:41:45.830]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:45.830]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:45.830]    __dp=0x00000000
[19:41:45.830]    __ap=0x00000000
[19:41:45.830]    __traceout=0x00000000      (Trace Disabled)
[19:41:45.830]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:45.830]    __FlashAddr=0x00000000
[19:41:45.830]    __FlashLen=0x00000000
[19:41:45.830]    __FlashArg=0x00000000
[19:41:45.830]    __FlashOp=0x00000000
[19:41:45.830]    __Result=0x00000000
[19:41:45.830]  </debugvars>
[19:41:45.830]  
[19:41:45.830]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:41:45.830]    <block atomic="false" info="">
[19:41:45.830]      __var deviceID = 0;
[19:41:45.830]        // -> [deviceID <= 0x00000000]
[19:41:45.830]      __var version = 0;
[19:41:45.830]        // -> [version <= 0x00000000]
[19:41:45.830]      __var partNum = 0;
[19:41:45.830]        // -> [partNum <= 0x00000000]
[19:41:45.830]      __var manuf = 0;
[19:41:45.830]        // -> [manuf <= 0x00000000]
[19:41:45.830]      __var isMSPM0G1X0X_G3X0X = 0;
[19:41:45.830]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:41:45.830]      __var isProduction = 0;
[19:41:45.830]        // -> [isProduction <= 0x00000000]
[19:41:45.830]      __var continueId = 0;
[19:41:45.830]        // -> [continueId <= 0x00000000]
[19:41:45.830]      deviceID =   Read32(0x41C40004);
[19:41:45.847]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:41:45.847]        // -> [deviceID <= 0x2BB8802F]
[19:41:45.847]      version = deviceID >> 28;
[19:41:45.847]        // -> [version <= 0x00000002]
[19:41:45.847]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:41:45.847]        // -> [partNum <= 0x0000BB88]
[19:41:45.847]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:41:45.847]        // -> [manuf <= 0x00000017]
[19:41:45.847]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:41:45.847]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:41:45.847]      isProduction = (version > 0);
[19:41:45.847]        // -> [isProduction <= 0x00000001]
[19:41:45.847]    </block>
[19:41:45.847]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:41:45.847]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:41:45.847]        // =>  FALSE
[19:41:45.847]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:41:45.847]    </control>
[19:41:45.847]    <control if="continueId == 4" while="" timeout="0" info="">
[19:41:45.847]      // if-block "continueId == 4"
[19:41:45.847]        // =>  FALSE
[19:41:45.847]      // skip if-block "continueId == 4"
[19:41:45.847]    </control>
[19:41:45.847]    <control if="!isProduction" while="" timeout="0" info="">
[19:41:45.847]      // if-block "!isProduction"
[19:41:45.847]        // =>  FALSE
[19:41:45.850]      // skip if-block "!isProduction"
[19:41:45.850]    </control>
[19:41:45.850]  </sequence>
[19:41:45.850]  
[19:47:08.041]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:47:08.041]  
[19:47:08.050]  <debugvars>
[19:47:08.050]    // Pre-defined
[19:47:08.050]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:47:08.050]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:47:08.050]    __dp=0x00000000
[19:47:08.050]    __ap=0x00000000
[19:47:08.050]    __traceout=0x00000000      (Trace Disabled)
[19:47:08.050]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:47:08.050]    __FlashAddr=0x00000000
[19:47:08.050]    __FlashLen=0x00000000
[19:47:08.050]    __FlashArg=0x00000000
[19:47:08.050]    __FlashOp=0x00000000
[19:47:08.051]    __Result=0x00000000
[19:47:08.051]  </debugvars>
[19:47:08.051]  
[19:47:08.051]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:47:08.051]    <block atomic="false" info="">
[19:47:08.051]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:47:08.051]        // -> [isSWJ <= 0x00000001]
[19:47:08.051]      __var hasDormant = __protocol & 0x00020000;
[19:47:08.052]        // -> [hasDormant <= 0x00000000]
[19:47:08.052]      __var protType   = __protocol & 0x0000FFFF;
[19:47:08.052]        // -> [protType <= 0x00000002]
[19:47:08.052]    </block>
[19:47:08.052]    <control if="protType == 1" while="" timeout="0" info="">
[19:47:08.052]      // if-block "protType == 1"
[19:47:08.052]        // =>  FALSE
[19:47:08.052]      // skip if-block "protType == 1"
[19:47:08.052]    </control>
[19:47:08.052]    <control if="protType == 2" while="" timeout="0" info="">
[19:47:08.052]      // if-block "protType == 2"
[19:47:08.052]        // =>  TRUE
[19:47:08.052]      <control if="isSWJ" while="" timeout="0" info="">
[19:47:08.052]        // if-block "isSWJ"
[19:47:08.052]          // =>  TRUE
[19:47:08.052]        <control if="hasDormant" while="" timeout="0" info="">
[19:47:08.052]          // if-block "hasDormant"
[19:47:08.052]            // =>  FALSE
[19:47:08.052]          // skip if-block "hasDormant"
[19:47:08.052]        </control>
[19:47:08.052]        <control if="!hasDormant" while="" timeout="0" info="">
[19:47:08.052]          // if-block "!hasDormant"
[19:47:08.052]            // =>  TRUE
[19:47:08.052]          <block atomic="false" info="">
[19:47:08.052]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:47:08.056]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:47:08.056]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:47:08.060]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:47:08.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:47:08.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:47:08.065]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:47:08.068]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:47:08.068]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:47:08.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:47:08.072]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:47:08.072]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:47:08.072]          </block>
[19:47:08.072]          // end if-block "!hasDormant"
[19:47:08.072]        </control>
[19:47:08.072]        // end if-block "isSWJ"
[19:47:08.077]      </control>
[19:47:08.077]      <control if="!isSWJ" while="" timeout="0" info="">
[19:47:08.077]        // if-block "!isSWJ"
[19:47:08.077]          // =>  FALSE
[19:47:08.077]        // skip if-block "!isSWJ"
[19:47:08.077]      </control>
[19:47:08.077]      <block atomic="false" info="">
[19:47:08.077]        ReadDP(0x0);
[19:47:08.081]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:47:08.081]      </block>
[19:47:08.081]      // end if-block "protType == 2"
[19:47:08.082]    </control>
[19:47:08.082]  </sequence>
[19:47:08.082]  
[19:47:08.085]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:47:08.085]  
[19:47:08.085]  <debugvars>
[19:47:08.085]    // Pre-defined
[19:47:08.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:47:08.091]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:47:08.091]    __dp=0x00000000
[19:47:08.091]    __ap=0x00000000
[19:47:08.091]    __traceout=0x00000000      (Trace Disabled)
[19:47:08.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:47:08.091]    __FlashAddr=0x00000000
[19:47:08.091]    __FlashLen=0x00000000
[19:47:08.091]    __FlashArg=0x00000000
[19:47:08.091]    __FlashOp=0x00000000
[19:47:08.091]    __Result=0x00000000
[19:47:08.091]  </debugvars>
[19:47:08.091]  
[19:47:08.091]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:47:08.093]    <block atomic="false" info="">
[19:47:08.093]      __var SW_DP_ABORT       = 0x0;
[19:47:08.093]        // -> [SW_DP_ABORT <= 0x00000000]
[19:47:08.093]      __var DP_CTRL_STAT      = 0x4;
[19:47:08.093]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:47:08.093]      __var DP_SELECT         = 0x8;
[19:47:08.093]        // -> [DP_SELECT <= 0x00000008]
[19:47:08.093]      __var powered_down      = 0;
[19:47:08.093]        // -> [powered_down <= 0x00000000]
[19:47:08.093]      WriteDP(DP_SELECT, 0x00000000);
[19:47:08.095]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:47:08.095]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:47:08.101]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:47:08.101]        // -> [powered_down <= 0x00000001]
[19:47:08.101]    </block>
[19:47:08.101]    <control if="powered_down" while="" timeout="0" info="">
[19:47:08.101]      // if-block "powered_down"
[19:47:08.101]        // =>  TRUE
[19:47:08.101]      <block atomic="false" info="">
[19:47:08.101]        Message(0, "Debug/System power-up request sent");
[19:47:08.104]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:47:08.121]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:47:08.121]      </block>
[19:47:08.121]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:47:08.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:47:08.141]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:47:08.141]        // while-condition  =>  FALSE
[19:47:08.141]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:47:08.141]      </control>
[19:47:08.141]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:47:08.141]        // if-block "(__protocol & 0xFFFF) == 1"
[19:47:08.141]          // =>  FALSE
[19:47:08.141]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:47:08.141]      </control>
[19:47:08.141]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:47:08.145]        // if-block "(__protocol & 0xFFFF) == 2"
[19:47:08.145]          // =>  TRUE
[19:47:08.145]        <block atomic="false" info="">
[19:47:08.145]          Message(0, "executing SWD power up");
[19:47:08.147]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:47:08.152]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:47:08.152]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:47:08.160]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:47:08.161]        </block>
[19:47:08.161]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:47:08.161]      </control>
[19:47:08.161]      // end if-block "powered_down"
[19:47:08.161]    </control>
[19:47:08.161]    <block atomic="false" info="">
[19:47:08.161]      __var DEBUG_PORT_VAL    = 0;
[19:47:08.161]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:47:08.161]      __var ACCESS_POINT_VAL  = 0;
[19:47:08.161]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:47:08.161]      __ap = 1; 
[19:47:08.161]        // -> [__ap <= 0x00000001]
[19:47:08.161]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:47:08.168]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:47:08.168]      __ap = 4;
[19:47:08.168]        // -> [__ap <= 0x00000004]
[19:47:08.170]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:47:08.179]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:47:08.179]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:47:08.179]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:47:08.181]    </block>
[19:47:08.182]    <block atomic="false" info="">
[19:47:08.182]      __var nReset = 0x80;
[19:47:08.182]        // -> [nReset <= 0x00000080]
[19:47:08.182]      __var canReadPins = 0;
[19:47:08.182]        // -> [canReadPins <= 0x00000000]
[19:47:08.182]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:47:08.182]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:47:08.182]        // -> [canReadPins <= 0x00000001]
[19:47:08.182]    </block>
[19:47:08.182]    <control if="" while="1" timeout="200" info="">
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.182]      // while "1"  (timeout="200")
[19:47:08.182]      // while-condition  =>  TRUE
[19:47:08.191]      // while "1"  (timeout="200")
[19:47:08.191]      // while  =>  TIMEOUT
[19:47:08.191]      // end while "1"
[19:47:08.191]    </control>
[19:47:08.191]    <control if="canReadPins" while="" timeout="0" info="">
[19:47:08.191]      // if-block "canReadPins"
[19:47:08.191]        // =>  TRUE
[19:47:08.191]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:47:08.191]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:47:08.191]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:47:08.191]        // while-condition  =>  FALSE
[19:47:08.191]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:47:08.191]      </control>
[19:47:08.191]      // end if-block "canReadPins"
[19:47:08.191]    </control>
[19:47:08.191]    <control if="!canReadPins" while="" timeout="0" info="">
[19:47:08.191]      // if-block "!canReadPins"
[19:47:08.191]        // =>  FALSE
[19:47:08.191]      // skip if-block "!canReadPins"
[19:47:08.191]    </control>
[19:47:08.191]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:47:08.191]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:47:08.191]        // =>  TRUE
[19:47:08.191]      <block atomic="false" info="">
[19:47:08.191]        WriteAP(0x00, 0x190008);
[19:47:08.201]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:47:08.201]        WriteAP(0xF0, 0x01);
[19:47:08.205]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:47:08.205]      </block>
[19:47:08.205]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:47:08.205]    </control>
[19:47:08.205]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:47:08.205]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:47:08.205]        // =>  FALSE
[19:47:08.205]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:47:08.205]    </control>
[19:47:08.205]    <block atomic="false" info="">
[19:47:08.205]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:47:08.214]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:47:08.214]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:47:08.214]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:47:08.214]      __ap = 0; //lets make sure we reset the access point selection
[19:47:08.214]        // -> [__ap <= 0x00000000]
[19:47:08.214]    </block>
[19:47:08.214]  </sequence>
[19:47:08.214]  
[19:47:08.265]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:47:08.265]  
[19:47:08.265]  <debugvars>
[19:47:08.265]    // Pre-defined
[19:47:08.265]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:47:08.265]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:47:08.265]    __dp=0x00000000
[19:47:08.265]    __ap=0x00000000
[19:47:08.265]    __traceout=0x00000000      (Trace Disabled)
[19:47:08.265]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:47:08.265]    __FlashAddr=0x00000000
[19:47:08.265]    __FlashLen=0x00000000
[19:47:08.265]    __FlashArg=0x00000000
[19:47:08.265]    __FlashOp=0x00000000
[19:47:08.265]    __Result=0x00000000
[19:47:08.268]  </debugvars>
[19:47:08.268]  
[19:47:08.268]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:47:08.268]    <block atomic="false" info="">
[19:47:08.268]      __var deviceID = 0;
[19:47:08.268]        // -> [deviceID <= 0x00000000]
[19:47:08.268]      __var version = 0;
[19:47:08.268]        // -> [version <= 0x00000000]
[19:47:08.268]      __var partNum = 0;
[19:47:08.268]        // -> [partNum <= 0x00000000]
[19:47:08.268]      __var manuf = 0;
[19:47:08.268]        // -> [manuf <= 0x00000000]
[19:47:08.269]      __var isMSPM0G1X0X_G3X0X = 0;
[19:47:08.269]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:47:08.269]      __var isProduction = 0;
[19:47:08.269]        // -> [isProduction <= 0x00000000]
[19:47:08.269]      __var continueId = 0;
[19:47:08.269]        // -> [continueId <= 0x00000000]
[19:47:08.269]      deviceID =   Read32(0x41C40004);
[19:47:08.283]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:47:08.283]        // -> [deviceID <= 0x2BB8802F]
[19:47:08.283]      version = deviceID >> 28;
[19:47:08.283]        // -> [version <= 0x00000002]
[19:47:08.283]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:47:08.283]        // -> [partNum <= 0x0000BB88]
[19:47:08.283]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:47:08.283]        // -> [manuf <= 0x00000017]
[19:47:08.283]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:47:08.283]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:47:08.283]      isProduction = (version > 0);
[19:47:08.283]        // -> [isProduction <= 0x00000001]
[19:47:08.283]    </block>
[19:47:08.283]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:47:08.283]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:47:08.283]        // =>  FALSE
[19:47:08.283]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:47:08.283]    </control>
[19:47:08.283]    <control if="continueId == 4" while="" timeout="0" info="">
[19:47:08.283]      // if-block "continueId == 4"
[19:47:08.283]        // =>  FALSE
[19:47:08.283]      // skip if-block "continueId == 4"
[19:47:08.283]    </control>
[19:47:08.283]    <control if="!isProduction" while="" timeout="0" info="">
[19:47:08.285]      // if-block "!isProduction"
[19:47:08.285]        // =>  FALSE
[19:47:08.285]      // skip if-block "!isProduction"
[19:47:08.285]    </control>
[19:47:08.285]  </sequence>
[19:47:08.285]  
[19:48:30.931]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:48:30.931]  
[19:48:30.943]  <debugvars>
[19:48:30.943]    // Pre-defined
[19:48:30.943]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:30.943]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:48:30.943]    __dp=0x00000000
[19:48:30.943]    __ap=0x00000000
[19:48:30.943]    __traceout=0x00000000      (Trace Disabled)
[19:48:30.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:30.943]    __FlashAddr=0x00000000
[19:48:30.943]    __FlashLen=0x00000000
[19:48:30.943]    __FlashArg=0x00000000
[19:48:30.943]    __FlashOp=0x00000000
[19:48:30.943]    __Result=0x00000000
[19:48:30.943]  </debugvars>
[19:48:30.943]  
[19:48:30.943]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:48:30.943]    <block atomic="false" info="">
[19:48:30.943]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:48:30.943]        // -> [isSWJ <= 0x00000001]
[19:48:30.943]      __var hasDormant = __protocol & 0x00020000;
[19:48:30.943]        // -> [hasDormant <= 0x00000000]
[19:48:30.943]      __var protType   = __protocol & 0x0000FFFF;
[19:48:30.943]        // -> [protType <= 0x00000002]
[19:48:30.943]    </block>
[19:48:30.943]    <control if="protType == 1" while="" timeout="0" info="">
[19:48:30.943]      // if-block "protType == 1"
[19:48:30.943]        // =>  FALSE
[19:48:30.943]      // skip if-block "protType == 1"
[19:48:30.943]    </control>
[19:48:30.943]    <control if="protType == 2" while="" timeout="0" info="">
[19:48:30.943]      // if-block "protType == 2"
[19:48:30.943]        // =>  TRUE
[19:48:30.943]      <control if="isSWJ" while="" timeout="0" info="">
[19:48:30.943]        // if-block "isSWJ"
[19:48:30.943]          // =>  TRUE
[19:48:30.943]        <control if="hasDormant" while="" timeout="0" info="">
[19:48:30.943]          // if-block "hasDormant"
[19:48:30.943]            // =>  FALSE
[19:48:30.943]          // skip if-block "hasDormant"
[19:48:30.943]        </control>
[19:48:30.943]        <control if="!hasDormant" while="" timeout="0" info="">
[19:48:30.943]          // if-block "!hasDormant"
[19:48:30.943]            // =>  TRUE
[19:48:30.943]          <block atomic="false" info="">
[19:48:30.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:48:30.948]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:30.948]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:48:30.958]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:48:30.958]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:48:30.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:30.960]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:48:30.964]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:48:30.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:48:30.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:30.969]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:48:30.970]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:48:30.970]          </block>
[19:48:30.970]          // end if-block "!hasDormant"
[19:48:30.970]        </control>
[19:48:30.970]        // end if-block "isSWJ"
[19:48:30.970]      </control>
[19:48:30.970]      <control if="!isSWJ" while="" timeout="0" info="">
[19:48:30.970]        // if-block "!isSWJ"
[19:48:30.970]          // =>  FALSE
[19:48:30.970]        // skip if-block "!isSWJ"
[19:48:30.970]      </control>
[19:48:30.970]      <block atomic="false" info="">
[19:48:30.970]        ReadDP(0x0);
[19:48:30.975]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:48:30.975]      </block>
[19:48:30.975]      // end if-block "protType == 2"
[19:48:30.975]    </control>
[19:48:30.975]  </sequence>
[19:48:30.975]  
[19:48:30.981]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:48:30.981]  
[19:48:30.981]  <debugvars>
[19:48:30.981]    // Pre-defined
[19:48:30.981]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:30.981]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:48:30.983]    __dp=0x00000000
[19:48:30.983]    __ap=0x00000000
[19:48:30.983]    __traceout=0x00000000      (Trace Disabled)
[19:48:30.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:30.983]    __FlashAddr=0x00000000
[19:48:30.983]    __FlashLen=0x00000000
[19:48:30.983]    __FlashArg=0x00000000
[19:48:30.983]    __FlashOp=0x00000000
[19:48:30.983]    __Result=0x00000000
[19:48:30.983]  </debugvars>
[19:48:30.983]  
[19:48:30.984]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:48:30.984]    <block atomic="false" info="">
[19:48:30.984]      __var SW_DP_ABORT       = 0x0;
[19:48:30.984]        // -> [SW_DP_ABORT <= 0x00000000]
[19:48:30.984]      __var DP_CTRL_STAT      = 0x4;
[19:48:30.984]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:48:30.984]      __var DP_SELECT         = 0x8;
[19:48:30.984]        // -> [DP_SELECT <= 0x00000008]
[19:48:30.984]      __var powered_down      = 0;
[19:48:30.984]        // -> [powered_down <= 0x00000000]
[19:48:30.984]      WriteDP(DP_SELECT, 0x00000000);
[19:48:30.987]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:48:30.987]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:48:30.989]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:48:30.989]        // -> [powered_down <= 0x00000001]
[19:48:30.989]    </block>
[19:48:30.989]    <control if="powered_down" while="" timeout="0" info="">
[19:48:30.989]      // if-block "powered_down"
[19:48:30.989]        // =>  TRUE
[19:48:30.989]      <block atomic="false" info="">
[19:48:30.989]        Message(0, "Debug/System power-up request sent");
[19:48:30.989]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:48:30.999]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:48:30.999]      </block>
[19:48:30.999]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:48:30.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:48:31.009]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:48:31.009]        // while-condition  =>  FALSE
[19:48:31.009]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:48:31.009]      </control>
[19:48:31.009]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:48:31.009]        // if-block "(__protocol & 0xFFFF) == 1"
[19:48:31.009]          // =>  FALSE
[19:48:31.009]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:48:31.009]      </control>
[19:48:31.009]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:48:31.009]        // if-block "(__protocol & 0xFFFF) == 2"
[19:48:31.009]          // =>  TRUE
[19:48:31.013]        <block atomic="false" info="">
[19:48:31.013]          Message(0, "executing SWD power up");
[19:48:31.014]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:48:31.016]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:48:31.016]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:48:31.019]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:48:31.019]        </block>
[19:48:31.019]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:48:31.019]      </control>
[19:48:31.019]      // end if-block "powered_down"
[19:48:31.019]    </control>
[19:48:31.019]    <block atomic="false" info="">
[19:48:31.019]      __var DEBUG_PORT_VAL    = 0;
[19:48:31.019]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:48:31.019]      __var ACCESS_POINT_VAL  = 0;
[19:48:31.019]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:48:31.019]      __ap = 1; 
[19:48:31.019]        // -> [__ap <= 0x00000001]
[19:48:31.019]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:48:31.026]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:48:31.026]      __ap = 4;
[19:48:31.026]        // -> [__ap <= 0x00000004]
[19:48:31.026]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:31.032]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.032]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:48:31.032]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:31.032]    </block>
[19:48:31.032]    <block atomic="false" info="">
[19:48:31.040]      __var nReset = 0x80;
[19:48:31.040]        // -> [nReset <= 0x00000080]
[19:48:31.040]      __var canReadPins = 0;
[19:48:31.040]        // -> [canReadPins <= 0x00000000]
[19:48:31.040]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:48:31.042]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:48:31.042]        // -> [canReadPins <= 0x00000001]
[19:48:31.042]    </block>
[19:48:31.042]    <control if="" while="1" timeout="200" info="">
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.042]      // while-condition  =>  TRUE
[19:48:31.042]      // while "1"  (timeout="200")
[19:48:31.050]      // while-condition  =>  TRUE
[19:48:31.050]      // while "1"  (timeout="200")
[19:48:31.050]      // while  =>  TIMEOUT
[19:48:31.050]      // end while "1"
[19:48:31.050]    </control>
[19:48:31.050]    <control if="canReadPins" while="" timeout="0" info="">
[19:48:31.050]      // if-block "canReadPins"
[19:48:31.050]        // =>  TRUE
[19:48:31.050]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:48:31.050]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:48:31.052]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:48:31.052]        // while-condition  =>  FALSE
[19:48:31.052]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:48:31.052]      </control>
[19:48:31.052]      // end if-block "canReadPins"
[19:48:31.052]    </control>
[19:48:31.052]    <control if="!canReadPins" while="" timeout="0" info="">
[19:48:31.052]      // if-block "!canReadPins"
[19:48:31.052]        // =>  FALSE
[19:48:31.052]      // skip if-block "!canReadPins"
[19:48:31.052]    </control>
[19:48:31.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:48:31.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:31.052]        // =>  TRUE
[19:48:31.052]      <block atomic="false" info="">
[19:48:31.052]        WriteAP(0x00, 0x190008);
[19:48:31.059]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.059]        WriteAP(0xF0, 0x01);
[19:48:31.064]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.064]      </block>
[19:48:31.064]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:31.064]    </control>
[19:48:31.064]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:48:31.064]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:31.064]        // =>  FALSE
[19:48:31.064]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:31.067]    </control>
[19:48:31.067]    <block atomic="false" info="">
[19:48:31.067]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:31.073]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.073]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:48:31.073]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:31.073]      __ap = 0; //lets make sure we reset the access point selection
[19:48:31.073]        // -> [__ap <= 0x00000000]
[19:48:31.073]    </block>
[19:48:31.073]  </sequence>
[19:48:31.073]  
[19:48:31.131]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:48:31.131]  
[19:48:31.131]  <debugvars>
[19:48:31.131]    // Pre-defined
[19:48:31.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:31.131]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:48:31.131]    __dp=0x00000000
[19:48:31.131]    __ap=0x00000000
[19:48:31.131]    __traceout=0x00000000      (Trace Disabled)
[19:48:31.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:31.131]    __FlashAddr=0x00000000
[19:48:31.131]    __FlashLen=0x00000000
[19:48:31.131]    __FlashArg=0x00000000
[19:48:31.131]    __FlashOp=0x00000000
[19:48:31.131]    __Result=0x00000000
[19:48:31.133]  </debugvars>
[19:48:31.133]  
[19:48:31.133]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:48:31.133]    <block atomic="false" info="">
[19:48:31.133]      __var deviceID = 0;
[19:48:31.133]        // -> [deviceID <= 0x00000000]
[19:48:31.133]      __var version = 0;
[19:48:31.133]        // -> [version <= 0x00000000]
[19:48:31.133]      __var partNum = 0;
[19:48:31.133]        // -> [partNum <= 0x00000000]
[19:48:31.133]      __var manuf = 0;
[19:48:31.133]        // -> [manuf <= 0x00000000]
[19:48:31.133]      __var isMSPM0G1X0X_G3X0X = 0;
[19:48:31.133]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:48:31.133]      __var isProduction = 0;
[19:48:31.133]        // -> [isProduction <= 0x00000000]
[19:48:31.133]      __var continueId = 0;
[19:48:31.133]        // -> [continueId <= 0x00000000]
[19:48:31.133]      deviceID =   Read32(0x41C40004);
[19:48:31.143]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:48:31.143]        // -> [deviceID <= 0x2BB8802F]
[19:48:31.143]      version = deviceID >> 28;
[19:48:31.143]        // -> [version <= 0x00000002]
[19:48:31.143]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:48:31.143]        // -> [partNum <= 0x0000BB88]
[19:48:31.143]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:48:31.143]        // -> [manuf <= 0x00000017]
[19:48:31.143]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:48:31.143]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:48:31.143]      isProduction = (version > 0);
[19:48:31.143]        // -> [isProduction <= 0x00000001]
[19:48:31.143]    </block>
[19:48:31.143]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:48:31.143]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:48:31.143]        // =>  FALSE
[19:48:31.143]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:48:31.143]    </control>
[19:48:31.143]    <control if="continueId == 4" while="" timeout="0" info="">
[19:48:31.143]      // if-block "continueId == 4"
[19:48:31.143]        // =>  FALSE
[19:48:31.143]      // skip if-block "continueId == 4"
[19:48:31.143]    </control>
[19:48:31.143]    <control if="!isProduction" while="" timeout="0" info="">
[19:48:31.143]      // if-block "!isProduction"
[19:48:31.143]        // =>  FALSE
[19:48:31.143]      // skip if-block "!isProduction"
[19:48:31.143]    </control>
[19:48:31.143]  </sequence>
[19:48:31.143]  
[19:49:38.691]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:38.691]  
[19:49:38.701]  <debugvars>
[19:49:38.701]    // Pre-defined
[19:49:38.701]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:38.701]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:38.701]    __dp=0x00000000
[19:49:38.701]    __ap=0x00000000
[19:49:38.701]    __traceout=0x00000000      (Trace Disabled)
[19:49:38.701]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:38.701]    __FlashAddr=0x00000000
[19:49:38.701]    __FlashLen=0x00000000
[19:49:38.701]    __FlashArg=0x00000000
[19:49:38.701]    __FlashOp=0x00000000
[19:49:38.701]    __Result=0x00000000
[19:49:38.701]  </debugvars>
[19:49:38.701]  
[19:49:38.701]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:38.701]    <block atomic="false" info="">
[19:49:38.701]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:38.701]        // -> [isSWJ <= 0x00000001]
[19:49:38.701]      __var hasDormant = __protocol & 0x00020000;
[19:49:38.701]        // -> [hasDormant <= 0x00000000]
[19:49:38.701]      __var protType   = __protocol & 0x0000FFFF;
[19:49:38.701]        // -> [protType <= 0x00000002]
[19:49:38.701]    </block>
[19:49:38.701]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:38.701]      // if-block "protType == 1"
[19:49:38.701]        // =>  FALSE
[19:49:38.701]      // skip if-block "protType == 1"
[19:49:38.701]    </control>
[19:49:38.701]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:38.701]      // if-block "protType == 2"
[19:49:38.701]        // =>  TRUE
[19:49:38.701]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:38.701]        // if-block "isSWJ"
[19:49:38.701]          // =>  TRUE
[19:49:38.701]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:38.701]          // if-block "hasDormant"
[19:49:38.701]            // =>  FALSE
[19:49:38.701]          // skip if-block "hasDormant"
[19:49:38.701]        </control>
[19:49:38.701]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:38.701]          // if-block "!hasDormant"
[19:49:38.701]            // =>  TRUE
[19:49:38.701]          <block atomic="false" info="">
[19:49:38.701]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:39.705]  
[19:49:39.705]  !!! E320 : DAP access error
[19:49:39.705]  
[19:49:39.705]          </block>
[19:49:39.705]          // end if-block "!hasDormant"
[19:49:39.705]        </control>
[19:49:39.705]        // end if-block "isSWJ"
[19:49:39.705]      </control>
[19:49:39.705]      // end if-block "protType == 2"
[19:49:39.705]    </control>
[19:49:39.705]  </sequence>
[19:49:39.705]  
[19:49:39.956]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:39.956]  
[19:49:39.964]  <debugvars>
[19:49:39.964]    // Pre-defined
[19:49:39.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:39.964]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:39.964]    __dp=0x00000000
[19:49:39.964]    __ap=0x00000000
[19:49:39.964]    __traceout=0x00000000      (Trace Disabled)
[19:49:39.964]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:39.964]    __FlashAddr=0x00000000
[19:49:39.964]    __FlashLen=0x00000000
[19:49:39.964]    __FlashArg=0x00000000
[19:49:39.964]    __FlashOp=0x00000000
[19:49:39.964]    __Result=0x00000000
[19:49:39.964]  </debugvars>
[19:49:39.964]  
[19:49:39.964]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:39.964]    <block atomic="false" info="">
[19:49:39.964]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:39.964]        // -> [isSWJ <= 0x00000001]
[19:49:39.964]      __var hasDormant = __protocol & 0x00020000;
[19:49:39.964]        // -> [hasDormant <= 0x00000000]
[19:49:39.967]      __var protType   = __protocol & 0x0000FFFF;
[19:49:39.967]        // -> [protType <= 0x00000002]
[19:49:39.967]    </block>
[19:49:39.967]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:39.967]      // if-block "protType == 1"
[19:49:39.967]        // =>  FALSE
[19:49:39.967]      // skip if-block "protType == 1"
[19:49:39.967]    </control>
[19:49:39.967]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:39.967]      // if-block "protType == 2"
[19:49:39.967]        // =>  TRUE
[19:49:39.967]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:39.967]        // if-block "isSWJ"
[19:49:39.967]          // =>  TRUE
[19:49:39.967]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:39.967]          // if-block "hasDormant"
[19:49:39.967]            // =>  FALSE
[19:49:39.967]          // skip if-block "hasDormant"
[19:49:39.967]        </control>
[19:49:39.967]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:39.967]          // if-block "!hasDormant"
[19:49:39.967]            // =>  TRUE
[19:49:39.967]          <block atomic="false" info="">
[19:49:39.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:40.967]  
[19:49:40.967]  !!! E320 : DAP access error
[19:49:40.967]  
[19:49:40.969]          </block>
[19:49:40.969]          // end if-block "!hasDormant"
[19:49:40.969]        </control>
[19:49:40.969]        // end if-block "isSWJ"
[19:49:40.969]      </control>
[19:49:40.969]      // end if-block "protType == 2"
[19:49:40.969]    </control>
[19:49:40.969]  </sequence>
[19:49:40.969]  
[19:49:41.219]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:41.219]  
[19:49:41.227]  <debugvars>
[19:49:41.227]    // Pre-defined
[19:49:41.227]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:41.227]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:41.227]    __dp=0x00000000
[19:49:41.227]    __ap=0x00000000
[19:49:41.227]    __traceout=0x00000000      (Trace Disabled)
[19:49:41.227]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:41.227]    __FlashAddr=0x00000000
[19:49:41.227]    __FlashLen=0x00000000
[19:49:41.227]    __FlashArg=0x00000000
[19:49:41.227]    __FlashOp=0x00000000
[19:49:41.227]    __Result=0x00000000
[19:49:41.227]  </debugvars>
[19:49:41.227]  
[19:49:41.227]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:41.227]    <block atomic="false" info="">
[19:49:41.227]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:41.229]        // -> [isSWJ <= 0x00000001]
[19:49:41.229]      __var hasDormant = __protocol & 0x00020000;
[19:49:41.229]        // -> [hasDormant <= 0x00000000]
[19:49:41.229]      __var protType   = __protocol & 0x0000FFFF;
[19:49:41.229]        // -> [protType <= 0x00000002]
[19:49:41.229]    </block>
[19:49:41.229]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:41.229]      // if-block "protType == 1"
[19:49:41.229]        // =>  FALSE
[19:49:41.229]      // skip if-block "protType == 1"
[19:49:41.229]    </control>
[19:49:41.229]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:41.229]      // if-block "protType == 2"
[19:49:41.229]        // =>  TRUE
[19:49:41.229]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:41.229]        // if-block "isSWJ"
[19:49:41.229]          // =>  TRUE
[19:49:41.231]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:41.231]          // if-block "hasDormant"
[19:49:41.231]            // =>  FALSE
[19:49:41.231]          // skip if-block "hasDormant"
[19:49:41.231]        </control>
[19:49:41.231]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:41.231]          // if-block "!hasDormant"
[19:49:41.231]            // =>  TRUE
[19:49:41.231]          <block atomic="false" info="">
[19:49:41.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:42.235]  
[19:49:42.235]  !!! E320 : DAP access error
[19:49:42.235]  
[19:49:42.243]          </block>
[19:49:42.243]          // end if-block "!hasDormant"
[19:49:42.243]        </control>
[19:49:42.243]        // end if-block "isSWJ"
[19:49:42.243]      </control>
[19:49:42.243]      // end if-block "protType == 2"
[19:49:42.243]    </control>
[19:49:42.243]  </sequence>
[19:49:42.243]  
[19:49:42.498]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:42.498]  
[19:49:42.506]  <debugvars>
[19:49:42.506]    // Pre-defined
[19:49:42.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:42.506]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:42.506]    __dp=0x00000000
[19:49:42.506]    __ap=0x00000000
[19:49:42.506]    __traceout=0x00000000      (Trace Disabled)
[19:49:42.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:42.506]    __FlashAddr=0x00000000
[19:49:42.506]    __FlashLen=0x00000000
[19:49:42.506]    __FlashArg=0x00000000
[19:49:42.506]    __FlashOp=0x00000000
[19:49:42.506]    __Result=0x00000000
[19:49:42.506]  </debugvars>
[19:49:42.506]  
[19:49:42.506]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:42.506]    <block atomic="false" info="">
[19:49:42.509]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:42.509]        // -> [isSWJ <= 0x00000001]
[19:49:42.509]      __var hasDormant = __protocol & 0x00020000;
[19:49:42.509]        // -> [hasDormant <= 0x00000000]
[19:49:42.509]      __var protType   = __protocol & 0x0000FFFF;
[19:49:42.509]        // -> [protType <= 0x00000002]
[19:49:42.509]    </block>
[19:49:42.509]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:42.509]      // if-block "protType == 1"
[19:49:42.509]        // =>  FALSE
[19:49:42.509]      // skip if-block "protType == 1"
[19:49:42.509]    </control>
[19:49:42.509]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:42.509]      // if-block "protType == 2"
[19:49:42.509]        // =>  TRUE
[19:49:42.509]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:42.509]        // if-block "isSWJ"
[19:49:42.510]          // =>  TRUE
[19:49:42.510]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:42.510]          // if-block "hasDormant"
[19:49:42.510]            // =>  FALSE
[19:49:42.510]          // skip if-block "hasDormant"
[19:49:42.510]        </control>
[19:49:42.510]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:42.511]          // if-block "!hasDormant"
[19:49:42.511]            // =>  TRUE
[19:49:42.511]          <block atomic="false" info="">
[19:49:42.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:43.521]  
[19:49:43.521]  !!! E320 : DAP access error
[19:49:43.521]  
[19:49:43.529]          </block>
[19:49:43.529]          // end if-block "!hasDormant"
[19:49:43.529]        </control>
[19:49:43.529]        // end if-block "isSWJ"
[19:49:43.529]      </control>
[19:49:43.529]      // end if-block "protType == 2"
[19:49:43.529]    </control>
[19:49:43.529]  </sequence>
[19:49:43.529]  
[19:49:43.786]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:43.786]  
[19:49:43.797]  <debugvars>
[19:49:43.797]    // Pre-defined
[19:49:43.797]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:43.797]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:43.797]    __dp=0x00000000
[19:49:43.797]    __ap=0x00000000
[19:49:43.797]    __traceout=0x00000000      (Trace Disabled)
[19:49:43.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:43.797]    __FlashAddr=0x00000000
[19:49:43.797]    __FlashLen=0x00000000
[19:49:43.797]    __FlashArg=0x00000000
[19:49:43.797]    __FlashOp=0x00000000
[19:49:43.797]    __Result=0x00000000
[19:49:43.797]  </debugvars>
[19:49:43.797]  
[19:49:43.797]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:43.797]    <block atomic="false" info="">
[19:49:43.799]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:43.799]        // -> [isSWJ <= 0x00000001]
[19:49:43.799]      __var hasDormant = __protocol & 0x00020000;
[19:49:43.799]        // -> [hasDormant <= 0x00000000]
[19:49:43.799]      __var protType   = __protocol & 0x0000FFFF;
[19:49:43.799]        // -> [protType <= 0x00000002]
[19:49:43.799]    </block>
[19:49:43.799]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:43.799]      // if-block "protType == 1"
[19:49:43.800]        // =>  FALSE
[19:49:43.800]      // skip if-block "protType == 1"
[19:49:43.800]    </control>
[19:49:43.800]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:43.800]      // if-block "protType == 2"
[19:49:43.800]        // =>  TRUE
[19:49:43.800]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:43.800]        // if-block "isSWJ"
[19:49:43.800]          // =>  TRUE
[19:49:43.800]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:43.800]          // if-block "hasDormant"
[19:49:43.801]            // =>  FALSE
[19:49:43.801]          // skip if-block "hasDormant"
[19:49:43.801]        </control>
[19:49:43.801]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:43.801]          // if-block "!hasDormant"
[19:49:43.801]            // =>  TRUE
[19:49:43.801]          <block atomic="false" info="">
[19:49:43.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:44.119]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.135]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:44.138]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:44.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:44.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.141]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:44.141]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:44.141]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:44.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.149]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:44.151]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:44.151]          </block>
[19:49:44.151]          // end if-block "!hasDormant"
[19:49:44.151]        </control>
[19:49:44.151]        // end if-block "isSWJ"
[19:49:44.151]      </control>
[19:49:44.151]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:44.151]        // if-block "!isSWJ"
[19:49:44.151]          // =>  FALSE
[19:49:44.151]        // skip if-block "!isSWJ"
[19:49:44.151]      </control>
[19:49:44.151]      <block atomic="false" info="">
[19:49:44.151]        ReadDP(0x0);
[19:49:44.155]  
[19:49:44.155]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:44.155]  
[19:49:44.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:44.155]      </block>
[19:49:44.155]      // end if-block "protType == 2"
[19:49:44.155]    </control>
[19:49:44.155]  </sequence>
[19:49:44.155]  
[19:49:44.415]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:44.415]  
[19:49:44.415]  <debugvars>
[19:49:44.415]    // Pre-defined
[19:49:44.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:44.415]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:44.415]    __dp=0x00000000
[19:49:44.415]    __ap=0x00000000
[19:49:44.415]    __traceout=0x00000000      (Trace Disabled)
[19:49:44.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:44.415]    __FlashAddr=0x00000000
[19:49:44.415]    __FlashLen=0x00000000
[19:49:44.415]    __FlashArg=0x00000000
[19:49:44.415]    __FlashOp=0x00000000
[19:49:44.415]    __Result=0x00000000
[19:49:44.415]  </debugvars>
[19:49:44.415]  
[19:49:44.415]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:44.415]    <block atomic="false" info="">
[19:49:44.415]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:44.415]        // -> [isSWJ <= 0x00000001]
[19:49:44.415]      __var hasDormant = __protocol & 0x00020000;
[19:49:44.415]        // -> [hasDormant <= 0x00000000]
[19:49:44.415]      __var protType   = __protocol & 0x0000FFFF;
[19:49:44.415]        // -> [protType <= 0x00000002]
[19:49:44.415]    </block>
[19:49:44.415]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:44.415]      // if-block "protType == 1"
[19:49:44.415]        // =>  FALSE
[19:49:44.415]      // skip if-block "protType == 1"
[19:49:44.415]    </control>
[19:49:44.415]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:44.415]      // if-block "protType == 2"
[19:49:44.415]        // =>  TRUE
[19:49:44.415]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:44.415]        // if-block "isSWJ"
[19:49:44.415]          // =>  TRUE
[19:49:44.415]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:44.415]          // if-block "hasDormant"
[19:49:44.415]            // =>  FALSE
[19:49:44.415]          // skip if-block "hasDormant"
[19:49:44.415]        </control>
[19:49:44.415]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:44.420]          // if-block "!hasDormant"
[19:49:44.420]            // =>  TRUE
[19:49:44.420]          <block atomic="false" info="">
[19:49:44.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:44.424]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.424]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:44.425]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:44.425]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:44.428]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.428]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:44.428]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:44.428]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:44.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.435]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:44.437]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:44.437]          </block>
[19:49:44.437]          // end if-block "!hasDormant"
[19:49:44.437]        </control>
[19:49:44.437]        // end if-block "isSWJ"
[19:49:44.437]      </control>
[19:49:44.437]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:44.437]        // if-block "!isSWJ"
[19:49:44.437]          // =>  FALSE
[19:49:44.437]        // skip if-block "!isSWJ"
[19:49:44.437]      </control>
[19:49:44.437]      <block atomic="false" info="">
[19:49:44.437]        ReadDP(0x0);
[19:49:44.437]  
[19:49:44.437]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:44.437]  
[19:49:44.444]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:44.444]      </block>
[19:49:44.444]      // end if-block "protType == 2"
[19:49:44.444]    </control>
[19:49:44.444]  </sequence>
[19:49:44.444]  
[19:49:44.699]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:44.699]  
[19:49:44.699]  <debugvars>
[19:49:44.699]    // Pre-defined
[19:49:44.699]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:44.699]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:44.699]    __dp=0x00000000
[19:49:44.699]    __ap=0x00000000
[19:49:44.699]    __traceout=0x00000000      (Trace Disabled)
[19:49:44.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:44.699]    __FlashAddr=0x00000000
[19:49:44.699]    __FlashLen=0x00000000
[19:49:44.700]    __FlashArg=0x00000000
[19:49:44.700]    __FlashOp=0x00000000
[19:49:44.700]    __Result=0x00000000
[19:49:44.700]  </debugvars>
[19:49:44.700]  
[19:49:44.701]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:44.701]    <block atomic="false" info="">
[19:49:44.701]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:44.701]        // -> [isSWJ <= 0x00000001]
[19:49:44.701]      __var hasDormant = __protocol & 0x00020000;
[19:49:44.701]        // -> [hasDormant <= 0x00000000]
[19:49:44.701]      __var protType   = __protocol & 0x0000FFFF;
[19:49:44.701]        // -> [protType <= 0x00000002]
[19:49:44.701]    </block>
[19:49:44.701]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:44.701]      // if-block "protType == 1"
[19:49:44.701]        // =>  FALSE
[19:49:44.701]      // skip if-block "protType == 1"
[19:49:44.702]    </control>
[19:49:44.702]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:44.702]      // if-block "protType == 2"
[19:49:44.702]        // =>  TRUE
[19:49:44.702]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:44.702]        // if-block "isSWJ"
[19:49:44.702]          // =>  TRUE
[19:49:44.702]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:44.702]          // if-block "hasDormant"
[19:49:44.702]            // =>  FALSE
[19:49:44.702]          // skip if-block "hasDormant"
[19:49:44.702]        </control>
[19:49:44.702]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:44.702]          // if-block "!hasDormant"
[19:49:44.702]            // =>  TRUE
[19:49:44.702]          <block atomic="false" info="">
[19:49:44.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:44.705]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.705]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:44.711]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:44.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:44.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.711]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:44.719]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:44.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:44.719]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:44.719]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:44.729]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:44.729]          </block>
[19:49:44.729]          // end if-block "!hasDormant"
[19:49:44.729]        </control>
[19:49:44.729]        // end if-block "isSWJ"
[19:49:44.729]      </control>
[19:49:44.729]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:44.729]        // if-block "!isSWJ"
[19:49:44.729]          // =>  FALSE
[19:49:44.729]        // skip if-block "!isSWJ"
[19:49:44.729]      </control>
[19:49:44.729]      <block atomic="false" info="">
[19:49:44.729]        ReadDP(0x0);
[19:49:44.729]  
[19:49:44.729]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:44.729]  
[19:49:44.729]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:44.729]      </block>
[19:49:44.729]      // end if-block "protType == 2"
[19:49:44.729]    </control>
[19:49:44.729]  </sequence>
[19:49:44.729]  
[19:49:44.985]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:44.985]  
[19:49:44.994]  <debugvars>
[19:49:44.994]    // Pre-defined
[19:49:44.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:44.994]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:44.994]    __dp=0x00000000
[19:49:44.994]    __ap=0x00000000
[19:49:44.994]    __traceout=0x00000000      (Trace Disabled)
[19:49:44.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:44.994]    __FlashAddr=0x00000000
[19:49:44.994]    __FlashLen=0x00000000
[19:49:44.994]    __FlashArg=0x00000000
[19:49:44.994]    __FlashOp=0x00000000
[19:49:44.994]    __Result=0x00000000
[19:49:44.994]  </debugvars>
[19:49:44.996]  
[19:49:44.996]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:44.996]    <block atomic="false" info="">
[19:49:44.996]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:44.996]        // -> [isSWJ <= 0x00000001]
[19:49:44.996]      __var hasDormant = __protocol & 0x00020000;
[19:49:44.996]        // -> [hasDormant <= 0x00000000]
[19:49:44.996]      __var protType   = __protocol & 0x0000FFFF;
[19:49:44.996]        // -> [protType <= 0x00000002]
[19:49:44.996]    </block>
[19:49:44.996]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:44.996]      // if-block "protType == 1"
[19:49:44.996]        // =>  FALSE
[19:49:44.996]      // skip if-block "protType == 1"
[19:49:44.996]    </control>
[19:49:44.997]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:44.997]      // if-block "protType == 2"
[19:49:44.997]        // =>  TRUE
[19:49:44.997]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:44.997]        // if-block "isSWJ"
[19:49:44.997]          // =>  TRUE
[19:49:44.997]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:44.997]          // if-block "hasDormant"
[19:49:44.997]            // =>  FALSE
[19:49:44.997]          // skip if-block "hasDormant"
[19:49:44.997]        </control>
[19:49:44.999]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:44.999]          // if-block "!hasDormant"
[19:49:44.999]            // =>  TRUE
[19:49:44.999]          <block atomic="false" info="">
[19:49:44.999]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:45.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.004]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:45.008]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:45.008]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:45.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.020]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:45.020]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:45.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:45.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.028]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:45.028]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:45.028]          </block>
[19:49:45.028]          // end if-block "!hasDormant"
[19:49:45.028]        </control>
[19:49:45.028]        // end if-block "isSWJ"
[19:49:45.028]      </control>
[19:49:45.028]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:45.028]        // if-block "!isSWJ"
[19:49:45.028]          // =>  FALSE
[19:49:45.028]        // skip if-block "!isSWJ"
[19:49:45.028]      </control>
[19:49:45.028]      <block atomic="false" info="">
[19:49:45.028]        ReadDP(0x0);
[19:49:45.036]  
[19:49:45.036]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:45.036]  
[19:49:45.036]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:45.036]      </block>
[19:49:45.036]      // end if-block "protType == 2"
[19:49:45.036]    </control>
[19:49:45.036]  </sequence>
[19:49:45.036]  
[19:49:45.291]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:45.291]  
[19:49:45.301]  <debugvars>
[19:49:45.301]    // Pre-defined
[19:49:45.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:45.301]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:45.301]    __dp=0x00000000
[19:49:45.301]    __ap=0x00000000
[19:49:45.301]    __traceout=0x00000000      (Trace Disabled)
[19:49:45.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:45.302]    __FlashAddr=0x00000000
[19:49:45.302]    __FlashLen=0x00000000
[19:49:45.303]    __FlashArg=0x00000000
[19:49:45.303]    __FlashOp=0x00000000
[19:49:45.303]    __Result=0x00000000
[19:49:45.303]  </debugvars>
[19:49:45.303]  
[19:49:45.303]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:45.303]    <block atomic="false" info="">
[19:49:45.303]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:45.303]        // -> [isSWJ <= 0x00000001]
[19:49:45.303]      __var hasDormant = __protocol & 0x00020000;
[19:49:45.303]        // -> [hasDormant <= 0x00000000]
[19:49:45.303]      __var protType   = __protocol & 0x0000FFFF;
[19:49:45.303]        // -> [protType <= 0x00000002]
[19:49:45.303]    </block>
[19:49:45.303]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:45.303]      // if-block "protType == 1"
[19:49:45.303]        // =>  FALSE
[19:49:45.303]      // skip if-block "protType == 1"
[19:49:45.303]    </control>
[19:49:45.303]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:45.303]      // if-block "protType == 2"
[19:49:45.303]        // =>  TRUE
[19:49:45.303]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:45.303]        // if-block "isSWJ"
[19:49:45.303]          // =>  TRUE
[19:49:45.303]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:45.303]          // if-block "hasDormant"
[19:49:45.303]            // =>  FALSE
[19:49:45.303]          // skip if-block "hasDormant"
[19:49:45.303]        </control>
[19:49:45.303]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:45.303]          // if-block "!hasDormant"
[19:49:45.303]            // =>  TRUE
[19:49:45.303]          <block atomic="false" info="">
[19:49:45.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:45.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.311]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:45.311]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:45.311]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:45.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.311]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:45.321]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:45.321]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:45.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.321]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:45.331]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:45.331]          </block>
[19:49:45.331]          // end if-block "!hasDormant"
[19:49:45.331]        </control>
[19:49:45.331]        // end if-block "isSWJ"
[19:49:45.331]      </control>
[19:49:45.331]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:45.331]        // if-block "!isSWJ"
[19:49:45.331]          // =>  FALSE
[19:49:45.331]        // skip if-block "!isSWJ"
[19:49:45.331]      </control>
[19:49:45.331]      <block atomic="false" info="">
[19:49:45.331]        ReadDP(0x0);
[19:49:45.331]  
[19:49:45.331]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:45.331]  
[19:49:45.331]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:45.331]      </block>
[19:49:45.331]      // end if-block "protType == 2"
[19:49:45.331]    </control>
[19:49:45.331]  </sequence>
[19:49:45.331]  
[19:49:45.585]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:45.585]  
[19:49:45.593]  <debugvars>
[19:49:45.593]    // Pre-defined
[19:49:45.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:45.593]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:45.593]    __dp=0x00000000
[19:49:45.593]    __ap=0x00000000
[19:49:45.593]    __traceout=0x00000000      (Trace Disabled)
[19:49:45.593]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:45.593]    __FlashAddr=0x00000000
[19:49:45.593]    __FlashLen=0x00000000
[19:49:45.593]    __FlashArg=0x00000000
[19:49:45.593]    __FlashOp=0x00000000
[19:49:45.593]    __Result=0x00000000
[19:49:45.593]  </debugvars>
[19:49:45.595]  
[19:49:45.595]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:45.595]    <block atomic="false" info="">
[19:49:45.595]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:45.595]        // -> [isSWJ <= 0x00000001]
[19:49:45.595]      __var hasDormant = __protocol & 0x00020000;
[19:49:45.595]        // -> [hasDormant <= 0x00000000]
[19:49:45.595]      __var protType   = __protocol & 0x0000FFFF;
[19:49:45.595]        // -> [protType <= 0x00000002]
[19:49:45.595]    </block>
[19:49:45.595]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:45.595]      // if-block "protType == 1"
[19:49:45.595]        // =>  FALSE
[19:49:45.595]      // skip if-block "protType == 1"
[19:49:45.595]    </control>
[19:49:45.595]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:45.595]      // if-block "protType == 2"
[19:49:45.595]        // =>  TRUE
[19:49:45.595]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:45.595]        // if-block "isSWJ"
[19:49:45.595]          // =>  TRUE
[19:49:45.595]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:45.595]          // if-block "hasDormant"
[19:49:45.595]            // =>  FALSE
[19:49:45.595]          // skip if-block "hasDormant"
[19:49:45.595]        </control>
[19:49:45.595]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:45.595]          // if-block "!hasDormant"
[19:49:45.595]            // =>  TRUE
[19:49:45.595]          <block atomic="false" info="">
[19:49:45.595]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:45.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.595]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:45.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:45.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:45.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.605]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:45.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:45.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:45.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.625]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:45.625]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:45.625]          </block>
[19:49:45.625]          // end if-block "!hasDormant"
[19:49:45.625]        </control>
[19:49:45.625]        // end if-block "isSWJ"
[19:49:45.625]      </control>
[19:49:45.625]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:45.625]        // if-block "!isSWJ"
[19:49:45.625]          // =>  FALSE
[19:49:45.625]        // skip if-block "!isSWJ"
[19:49:45.625]      </control>
[19:49:45.625]      <block atomic="false" info="">
[19:49:45.625]        ReadDP(0x0);
[19:49:45.637]  
[19:49:45.637]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:45.637]  
[19:49:45.637]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:45.637]      </block>
[19:49:45.637]      // end if-block "protType == 2"
[19:49:45.637]    </control>
[19:49:45.637]  </sequence>
[19:49:45.637]  
[19:49:45.888]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:45.888]  
[19:49:45.896]  <debugvars>
[19:49:45.896]    // Pre-defined
[19:49:45.896]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:45.896]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:45.896]    __dp=0x00000000
[19:49:45.896]    __ap=0x00000000
[19:49:45.896]    __traceout=0x00000000      (Trace Disabled)
[19:49:45.896]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:45.896]    __FlashAddr=0x00000000
[19:49:45.896]    __FlashLen=0x00000000
[19:49:45.896]    __FlashArg=0x00000000
[19:49:45.896]    __FlashOp=0x00000000
[19:49:45.896]    __Result=0x00000000
[19:49:45.896]  </debugvars>
[19:49:45.896]  
[19:49:45.896]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:45.896]    <block atomic="false" info="">
[19:49:45.896]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:45.896]        // -> [isSWJ <= 0x00000001]
[19:49:45.898]      __var hasDormant = __protocol & 0x00020000;
[19:49:45.898]        // -> [hasDormant <= 0x00000000]
[19:49:45.898]      __var protType   = __protocol & 0x0000FFFF;
[19:49:45.898]        // -> [protType <= 0x00000002]
[19:49:45.898]    </block>
[19:49:45.898]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:45.898]      // if-block "protType == 1"
[19:49:45.898]        // =>  FALSE
[19:49:45.899]      // skip if-block "protType == 1"
[19:49:45.899]    </control>
[19:49:45.899]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:45.899]      // if-block "protType == 2"
[19:49:45.899]        // =>  TRUE
[19:49:45.899]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:45.899]        // if-block "isSWJ"
[19:49:45.899]          // =>  TRUE
[19:49:45.899]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:45.899]          // if-block "hasDormant"
[19:49:45.899]            // =>  FALSE
[19:49:45.899]          // skip if-block "hasDormant"
[19:49:45.901]        </control>
[19:49:45.901]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:45.901]          // if-block "!hasDormant"
[19:49:45.901]            // =>  TRUE
[19:49:45.901]          <block atomic="false" info="">
[19:49:45.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:45.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.903]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:45.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:45.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:45.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.910]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:45.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:45.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:45.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:45.922]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:45.926]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:45.926]          </block>
[19:49:45.926]          // end if-block "!hasDormant"
[19:49:45.926]        </control>
[19:49:45.926]        // end if-block "isSWJ"
[19:49:45.926]      </control>
[19:49:45.926]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:45.926]        // if-block "!isSWJ"
[19:49:45.926]          // =>  FALSE
[19:49:45.926]        // skip if-block "!isSWJ"
[19:49:45.926]      </control>
[19:49:45.929]      <block atomic="false" info="">
[19:49:45.929]        ReadDP(0x0);
[19:49:45.932]  
[19:49:45.932]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:45.932]  
[19:49:45.932]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:45.932]      </block>
[19:49:45.932]      // end if-block "protType == 2"
[19:49:45.932]    </control>
[19:49:45.932]  </sequence>
[19:49:45.932]  
[19:49:46.183]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:46.183]  
[19:49:46.192]  <debugvars>
[19:49:46.192]    // Pre-defined
[19:49:46.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:46.192]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:46.192]    __dp=0x00000000
[19:49:46.192]    __ap=0x00000000
[19:49:46.192]    __traceout=0x00000000      (Trace Disabled)
[19:49:46.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:46.192]    __FlashAddr=0x00000000
[19:49:46.193]    __FlashLen=0x00000000
[19:49:46.193]    __FlashArg=0x00000000
[19:49:46.193]    __FlashOp=0x00000000
[19:49:46.193]    __Result=0x00000000
[19:49:46.193]  </debugvars>
[19:49:46.193]  
[19:49:46.193]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:46.193]    <block atomic="false" info="">
[19:49:46.193]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:46.193]        // -> [isSWJ <= 0x00000001]
[19:49:46.193]      __var hasDormant = __protocol & 0x00020000;
[19:49:46.193]        // -> [hasDormant <= 0x00000000]
[19:49:46.193]      __var protType   = __protocol & 0x0000FFFF;
[19:49:46.193]        // -> [protType <= 0x00000002]
[19:49:46.193]    </block>
[19:49:46.193]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:46.193]      // if-block "protType == 1"
[19:49:46.196]        // =>  FALSE
[19:49:46.196]      // skip if-block "protType == 1"
[19:49:46.196]    </control>
[19:49:46.196]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:46.196]      // if-block "protType == 2"
[19:49:46.196]        // =>  TRUE
[19:49:46.196]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:46.196]        // if-block "isSWJ"
[19:49:46.196]          // =>  TRUE
[19:49:46.196]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:46.196]          // if-block "hasDormant"
[19:49:46.196]            // =>  FALSE
[19:49:46.196]          // skip if-block "hasDormant"
[19:49:46.196]        </control>
[19:49:46.196]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:46.196]          // if-block "!hasDormant"
[19:49:46.196]            // =>  TRUE
[19:49:46.196]          <block atomic="false" info="">
[19:49:46.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:46.204]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.204]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:46.208]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:46.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:46.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.210]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:46.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:46.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:46.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.214]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:46.223]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:46.223]          </block>
[19:49:46.223]          // end if-block "!hasDormant"
[19:49:46.223]        </control>
[19:49:46.223]        // end if-block "isSWJ"
[19:49:46.223]      </control>
[19:49:46.223]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:46.223]        // if-block "!isSWJ"
[19:49:46.224]          // =>  FALSE
[19:49:46.224]        // skip if-block "!isSWJ"
[19:49:46.224]      </control>
[19:49:46.224]      <block atomic="false" info="">
[19:49:46.224]        ReadDP(0x0);
[19:49:46.224]  
[19:49:46.224]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:46.224]  
[19:49:46.224]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:46.224]      </block>
[19:49:46.224]      // end if-block "protType == 2"
[19:49:46.224]    </control>
[19:49:46.224]  </sequence>
[19:49:46.224]  
[19:49:46.477]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:46.477]  
[19:49:46.487]  <debugvars>
[19:49:46.487]    // Pre-defined
[19:49:46.487]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:46.487]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:46.487]    __dp=0x00000000
[19:49:46.487]    __ap=0x00000000
[19:49:46.487]    __traceout=0x00000000      (Trace Disabled)
[19:49:46.487]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:46.487]    __FlashAddr=0x00000000
[19:49:46.487]    __FlashLen=0x00000000
[19:49:46.487]    __FlashArg=0x00000000
[19:49:46.487]    __FlashOp=0x00000000
[19:49:46.489]    __Result=0x00000000
[19:49:46.489]  </debugvars>
[19:49:46.489]  
[19:49:46.489]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:46.489]    <block atomic="false" info="">
[19:49:46.489]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:46.489]        // -> [isSWJ <= 0x00000001]
[19:49:46.489]      __var hasDormant = __protocol & 0x00020000;
[19:49:46.489]        // -> [hasDormant <= 0x00000000]
[19:49:46.489]      __var protType   = __protocol & 0x0000FFFF;
[19:49:46.489]        // -> [protType <= 0x00000002]
[19:49:46.489]    </block>
[19:49:46.489]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:46.490]      // if-block "protType == 1"
[19:49:46.490]        // =>  FALSE
[19:49:46.490]      // skip if-block "protType == 1"
[19:49:46.490]    </control>
[19:49:46.490]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:46.490]      // if-block "protType == 2"
[19:49:46.490]        // =>  TRUE
[19:49:46.490]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:46.490]        // if-block "isSWJ"
[19:49:46.490]          // =>  TRUE
[19:49:46.490]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:46.490]          // if-block "hasDormant"
[19:49:46.490]            // =>  FALSE
[19:49:46.490]          // skip if-block "hasDormant"
[19:49:46.490]        </control>
[19:49:46.492]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:46.492]          // if-block "!hasDormant"
[19:49:46.492]            // =>  TRUE
[19:49:46.492]          <block atomic="false" info="">
[19:49:46.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:46.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.495]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:46.498]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:46.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:46.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.507]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:46.510]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:46.510]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:46.512]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.512]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:46.523]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:46.523]          </block>
[19:49:46.523]          // end if-block "!hasDormant"
[19:49:46.523]        </control>
[19:49:46.523]        // end if-block "isSWJ"
[19:49:46.523]      </control>
[19:49:46.523]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:46.523]        // if-block "!isSWJ"
[19:49:46.523]          // =>  FALSE
[19:49:46.523]        // skip if-block "!isSWJ"
[19:49:46.525]      </control>
[19:49:46.525]      <block atomic="false" info="">
[19:49:46.525]        ReadDP(0x0);
[19:49:46.528]  
[19:49:46.528]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:46.528]  
[19:49:46.528]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:46.528]      </block>
[19:49:46.528]      // end if-block "protType == 2"
[19:49:46.528]    </control>
[19:49:46.528]  </sequence>
[19:49:46.528]  
[19:49:46.782]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:46.782]  
[19:49:46.790]  <debugvars>
[19:49:46.790]    // Pre-defined
[19:49:46.790]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:46.790]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:46.790]    __dp=0x00000000
[19:49:46.790]    __ap=0x00000000
[19:49:46.790]    __traceout=0x00000000      (Trace Disabled)
[19:49:46.790]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:46.790]    __FlashAddr=0x00000000
[19:49:46.790]    __FlashLen=0x00000000
[19:49:46.790]    __FlashArg=0x00000000
[19:49:46.790]    __FlashOp=0x00000000
[19:49:46.790]    __Result=0x00000000
[19:49:46.790]  </debugvars>
[19:49:46.790]  
[19:49:46.792]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:46.792]    <block atomic="false" info="">
[19:49:46.792]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:46.792]        // -> [isSWJ <= 0x00000001]
[19:49:46.792]      __var hasDormant = __protocol & 0x00020000;
[19:49:46.792]        // -> [hasDormant <= 0x00000000]
[19:49:46.792]      __var protType   = __protocol & 0x0000FFFF;
[19:49:46.792]        // -> [protType <= 0x00000002]
[19:49:46.792]    </block>
[19:49:46.792]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:46.792]      // if-block "protType == 1"
[19:49:46.792]        // =>  FALSE
[19:49:46.792]      // skip if-block "protType == 1"
[19:49:46.792]    </control>
[19:49:46.792]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:46.792]      // if-block "protType == 2"
[19:49:46.792]        // =>  TRUE
[19:49:46.792]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:46.792]        // if-block "isSWJ"
[19:49:46.792]          // =>  TRUE
[19:49:46.792]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:46.792]          // if-block "hasDormant"
[19:49:46.792]            // =>  FALSE
[19:49:46.792]          // skip if-block "hasDormant"
[19:49:46.792]        </control>
[19:49:46.792]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:46.792]          // if-block "!hasDormant"
[19:49:46.792]            // =>  TRUE
[19:49:46.792]          <block atomic="false" info="">
[19:49:46.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:46.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.792]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:46.803]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:46.803]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:46.803]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.803]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:46.813]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:46.813]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:46.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:46.823]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:46.823]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:46.823]          </block>
[19:49:46.823]          // end if-block "!hasDormant"
[19:49:46.823]        </control>
[19:49:46.823]        // end if-block "isSWJ"
[19:49:46.823]      </control>
[19:49:46.823]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:46.823]        // if-block "!isSWJ"
[19:49:46.823]          // =>  FALSE
[19:49:46.823]        // skip if-block "!isSWJ"
[19:49:46.823]      </control>
[19:49:46.823]      <block atomic="false" info="">
[19:49:46.823]        ReadDP(0x0);
[19:49:46.823]  
[19:49:46.823]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:46.823]  
[19:49:46.823]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:46.823]      </block>
[19:49:46.823]      // end if-block "protType == 2"
[19:49:46.823]    </control>
[19:49:46.823]  </sequence>
[19:49:46.823]  
[19:49:47.073]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:47.073]  
[19:49:47.073]  <debugvars>
[19:49:47.073]    // Pre-defined
[19:49:47.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:47.073]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:47.073]    __dp=0x00000000
[19:49:47.073]    __ap=0x00000000
[19:49:47.073]    __traceout=0x00000000      (Trace Disabled)
[19:49:47.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:47.073]    __FlashAddr=0x00000000
[19:49:47.073]    __FlashLen=0x00000000
[19:49:47.073]    __FlashArg=0x00000000
[19:49:47.073]    __FlashOp=0x00000000
[19:49:47.073]    __Result=0x00000000
[19:49:47.073]  </debugvars>
[19:49:47.073]  
[19:49:47.073]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:47.073]    <block atomic="false" info="">
[19:49:47.073]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:47.073]        // -> [isSWJ <= 0x00000001]
[19:49:47.073]      __var hasDormant = __protocol & 0x00020000;
[19:49:47.073]        // -> [hasDormant <= 0x00000000]
[19:49:47.073]      __var protType   = __protocol & 0x0000FFFF;
[19:49:47.073]        // -> [protType <= 0x00000002]
[19:49:47.073]    </block>
[19:49:47.073]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:47.073]      // if-block "protType == 1"
[19:49:47.073]        // =>  FALSE
[19:49:47.073]      // skip if-block "protType == 1"
[19:49:47.073]    </control>
[19:49:47.073]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:47.073]      // if-block "protType == 2"
[19:49:47.073]        // =>  TRUE
[19:49:47.073]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:47.073]        // if-block "isSWJ"
[19:49:47.073]          // =>  TRUE
[19:49:47.073]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:47.073]          // if-block "hasDormant"
[19:49:47.073]            // =>  FALSE
[19:49:47.073]          // skip if-block "hasDormant"
[19:49:47.073]        </control>
[19:49:47.073]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:47.073]          // if-block "!hasDormant"
[19:49:47.073]            // =>  TRUE
[19:49:47.073]          <block atomic="false" info="">
[19:49:47.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:47.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.083]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:47.083]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:47.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:47.091]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.091]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:47.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:47.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:47.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.093]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:47.093]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:47.093]          </block>
[19:49:47.093]          // end if-block "!hasDormant"
[19:49:47.093]        </control>
[19:49:47.093]        // end if-block "isSWJ"
[19:49:47.093]      </control>
[19:49:47.093]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:47.093]        // if-block "!isSWJ"
[19:49:47.103]          // =>  FALSE
[19:49:47.103]        // skip if-block "!isSWJ"
[19:49:47.103]      </control>
[19:49:47.103]      <block atomic="false" info="">
[19:49:47.103]        ReadDP(0x0);
[19:49:47.105]  
[19:49:47.105]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:47.105]  
[19:49:47.105]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:47.105]      </block>
[19:49:47.105]      // end if-block "protType == 2"
[19:49:47.105]    </control>
[19:49:47.105]  </sequence>
[19:49:47.105]  
[19:49:47.365]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:47.365]  
[19:49:47.366]  <debugvars>
[19:49:47.366]    // Pre-defined
[19:49:47.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:47.367]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:47.367]    __dp=0x00000000
[19:49:47.367]    __ap=0x00000000
[19:49:47.367]    __traceout=0x00000000      (Trace Disabled)
[19:49:47.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:47.367]    __FlashAddr=0x00000000
[19:49:47.367]    __FlashLen=0x00000000
[19:49:47.367]    __FlashArg=0x00000000
[19:49:47.367]    __FlashOp=0x00000000
[19:49:47.367]    __Result=0x00000000
[19:49:47.367]  </debugvars>
[19:49:47.367]  
[19:49:47.367]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:47.367]    <block atomic="false" info="">
[19:49:47.367]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:47.367]        // -> [isSWJ <= 0x00000001]
[19:49:47.367]      __var hasDormant = __protocol & 0x00020000;
[19:49:47.367]        // -> [hasDormant <= 0x00000000]
[19:49:47.367]      __var protType   = __protocol & 0x0000FFFF;
[19:49:47.367]        // -> [protType <= 0x00000002]
[19:49:47.367]    </block>
[19:49:47.367]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:47.367]      // if-block "protType == 1"
[19:49:47.367]        // =>  FALSE
[19:49:47.367]      // skip if-block "protType == 1"
[19:49:47.367]    </control>
[19:49:47.367]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:47.367]      // if-block "protType == 2"
[19:49:47.367]        // =>  TRUE
[19:49:47.367]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:47.367]        // if-block "isSWJ"
[19:49:47.367]          // =>  TRUE
[19:49:47.367]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:47.367]          // if-block "hasDormant"
[19:49:47.367]            // =>  FALSE
[19:49:47.367]          // skip if-block "hasDormant"
[19:49:47.367]        </control>
[19:49:47.367]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:47.367]          // if-block "!hasDormant"
[19:49:47.367]            // =>  TRUE
[19:49:47.367]          <block atomic="false" info="">
[19:49:47.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:47.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.376]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:47.376]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:47.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:47.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.387]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:47.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:47.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:47.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.391]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:47.396]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:47.396]          </block>
[19:49:47.396]          // end if-block "!hasDormant"
[19:49:47.396]        </control>
[19:49:47.396]        // end if-block "isSWJ"
[19:49:47.396]      </control>
[19:49:47.396]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:47.396]        // if-block "!isSWJ"
[19:49:47.396]          // =>  FALSE
[19:49:47.396]        // skip if-block "!isSWJ"
[19:49:47.396]      </control>
[19:49:47.396]      <block atomic="false" info="">
[19:49:47.396]        ReadDP(0x0);
[19:49:47.399]  
[19:49:47.399]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:47.399]  
[19:49:47.399]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:47.399]      </block>
[19:49:47.399]      // end if-block "protType == 2"
[19:49:47.399]    </control>
[19:49:47.399]  </sequence>
[19:49:47.399]  
[19:49:47.657]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:47.657]  
[19:49:47.658]  <debugvars>
[19:49:47.658]    // Pre-defined
[19:49:47.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:47.658]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:47.658]    __dp=0x00000000
[19:49:47.658]    __ap=0x00000000
[19:49:47.658]    __traceout=0x00000000      (Trace Disabled)
[19:49:47.658]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:47.658]    __FlashAddr=0x00000000
[19:49:47.658]    __FlashLen=0x00000000
[19:49:47.658]    __FlashArg=0x00000000
[19:49:47.658]    __FlashOp=0x00000000
[19:49:47.658]    __Result=0x00000000
[19:49:47.658]  </debugvars>
[19:49:47.658]  
[19:49:47.658]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:47.658]    <block atomic="false" info="">
[19:49:47.658]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:47.658]        // -> [isSWJ <= 0x00000001]
[19:49:47.658]      __var hasDormant = __protocol & 0x00020000;
[19:49:47.658]        // -> [hasDormant <= 0x00000000]
[19:49:47.658]      __var protType   = __protocol & 0x0000FFFF;
[19:49:47.658]        // -> [protType <= 0x00000002]
[19:49:47.658]    </block>
[19:49:47.658]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:47.658]      // if-block "protType == 1"
[19:49:47.658]        // =>  FALSE
[19:49:47.658]      // skip if-block "protType == 1"
[19:49:47.658]    </control>
[19:49:47.658]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:47.658]      // if-block "protType == 2"
[19:49:47.658]        // =>  TRUE
[19:49:47.658]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:47.658]        // if-block "isSWJ"
[19:49:47.658]          // =>  TRUE
[19:49:47.658]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:47.658]          // if-block "hasDormant"
[19:49:47.658]            // =>  FALSE
[19:49:47.658]          // skip if-block "hasDormant"
[19:49:47.658]        </control>
[19:49:47.658]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:47.658]          // if-block "!hasDormant"
[19:49:47.658]            // =>  TRUE
[19:49:47.658]          <block atomic="false" info="">
[19:49:47.658]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:47.667]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.667]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:47.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:47.667]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:47.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.677]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:47.679]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:47.679]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:47.679]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.679]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:47.679]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:47.679]          </block>
[19:49:47.679]          // end if-block "!hasDormant"
[19:49:47.679]        </control>
[19:49:47.679]        // end if-block "isSWJ"
[19:49:47.679]      </control>
[19:49:47.679]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:47.679]        // if-block "!isSWJ"
[19:49:47.688]          // =>  FALSE
[19:49:47.688]        // skip if-block "!isSWJ"
[19:49:47.688]      </control>
[19:49:47.688]      <block atomic="false" info="">
[19:49:47.688]        ReadDP(0x0);
[19:49:47.688]  
[19:49:47.688]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:47.688]  
[19:49:47.688]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:47.691]      </block>
[19:49:47.691]      // end if-block "protType == 2"
[19:49:47.691]    </control>
[19:49:47.691]  </sequence>
[19:49:47.691]  
[19:49:47.949]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:47.949]  
[19:49:47.950]  <debugvars>
[19:49:47.950]    // Pre-defined
[19:49:47.950]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:47.950]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:47.950]    __dp=0x00000000
[19:49:47.950]    __ap=0x00000000
[19:49:47.950]    __traceout=0x00000000      (Trace Disabled)
[19:49:47.950]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:47.950]    __FlashAddr=0x00000000
[19:49:47.951]    __FlashLen=0x00000000
[19:49:47.951]    __FlashArg=0x00000000
[19:49:47.951]    __FlashOp=0x00000000
[19:49:47.951]    __Result=0x00000000
[19:49:47.951]  </debugvars>
[19:49:47.951]  
[19:49:47.951]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:47.951]    <block atomic="false" info="">
[19:49:47.951]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:47.951]        // -> [isSWJ <= 0x00000001]
[19:49:47.951]      __var hasDormant = __protocol & 0x00020000;
[19:49:47.951]        // -> [hasDormant <= 0x00000000]
[19:49:47.953]      __var protType   = __protocol & 0x0000FFFF;
[19:49:47.953]        // -> [protType <= 0x00000002]
[19:49:47.953]    </block>
[19:49:47.953]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:47.953]      // if-block "protType == 1"
[19:49:47.953]        // =>  FALSE
[19:49:47.953]      // skip if-block "protType == 1"
[19:49:47.953]    </control>
[19:49:47.953]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:47.953]      // if-block "protType == 2"
[19:49:47.953]        // =>  TRUE
[19:49:47.953]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:47.953]        // if-block "isSWJ"
[19:49:47.953]          // =>  TRUE
[19:49:47.953]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:47.953]          // if-block "hasDormant"
[19:49:47.953]            // =>  FALSE
[19:49:47.953]          // skip if-block "hasDormant"
[19:49:47.953]        </control>
[19:49:47.953]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:47.953]          // if-block "!hasDormant"
[19:49:47.954]            // =>  TRUE
[19:49:47.954]          <block atomic="false" info="">
[19:49:47.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:47.954]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.954]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:47.959]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:47.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:47.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.961]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:47.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:47.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:47.975]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:47.975]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:47.980]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:47.980]          </block>
[19:49:47.980]          // end if-block "!hasDormant"
[19:49:47.980]        </control>
[19:49:47.980]        // end if-block "isSWJ"
[19:49:47.980]      </control>
[19:49:47.980]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:47.980]        // if-block "!isSWJ"
[19:49:47.980]          // =>  FALSE
[19:49:47.980]        // skip if-block "!isSWJ"
[19:49:47.980]      </control>
[19:49:47.980]      <block atomic="false" info="">
[19:49:47.980]        ReadDP(0x0);
[19:49:47.984]  
[19:49:47.984]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:47.984]  
[19:49:47.984]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:47.984]      </block>
[19:49:47.984]      // end if-block "protType == 2"
[19:49:47.984]    </control>
[19:49:47.984]  </sequence>
[19:49:47.984]  
[19:49:48.235]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:48.235]  
[19:49:48.236]  <debugvars>
[19:49:48.236]    // Pre-defined
[19:49:48.236]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:48.236]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:48.236]    __dp=0x00000000
[19:49:48.236]    __ap=0x00000000
[19:49:48.236]    __traceout=0x00000000      (Trace Disabled)
[19:49:48.237]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:48.237]    __FlashAddr=0x00000000
[19:49:48.237]    __FlashLen=0x00000000
[19:49:48.237]    __FlashArg=0x00000000
[19:49:48.237]    __FlashOp=0x00000000
[19:49:48.237]    __Result=0x00000000
[19:49:48.237]  </debugvars>
[19:49:48.237]  
[19:49:48.237]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:48.237]    <block atomic="false" info="">
[19:49:48.237]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:48.237]        // -> [isSWJ <= 0x00000001]
[19:49:48.238]      __var hasDormant = __protocol & 0x00020000;
[19:49:48.238]        // -> [hasDormant <= 0x00000000]
[19:49:48.238]      __var protType   = __protocol & 0x0000FFFF;
[19:49:48.238]        // -> [protType <= 0x00000002]
[19:49:48.238]    </block>
[19:49:48.238]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:48.238]      // if-block "protType == 1"
[19:49:48.238]        // =>  FALSE
[19:49:48.238]      // skip if-block "protType == 1"
[19:49:48.238]    </control>
[19:49:48.238]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:48.238]      // if-block "protType == 2"
[19:49:48.239]        // =>  TRUE
[19:49:48.239]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:48.239]        // if-block "isSWJ"
[19:49:48.239]          // =>  TRUE
[19:49:48.239]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:48.239]          // if-block "hasDormant"
[19:49:48.239]            // =>  FALSE
[19:49:48.239]          // skip if-block "hasDormant"
[19:49:48.239]        </control>
[19:49:48.239]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:48.239]          // if-block "!hasDormant"
[19:49:48.239]            // =>  TRUE
[19:49:48.241]          <block atomic="false" info="">
[19:49:48.241]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:48.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.241]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:48.247]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:48.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:48.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.251]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:48.257]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:48.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:48.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.264]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:48.266]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:48.266]          </block>
[19:49:48.266]          // end if-block "!hasDormant"
[19:49:48.266]        </control>
[19:49:48.266]        // end if-block "isSWJ"
[19:49:48.266]      </control>
[19:49:48.266]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:48.266]        // if-block "!isSWJ"
[19:49:48.266]          // =>  FALSE
[19:49:48.266]        // skip if-block "!isSWJ"
[19:49:48.266]      </control>
[19:49:48.266]      <block atomic="false" info="">
[19:49:48.266]        ReadDP(0x0);
[19:49:48.272]  
[19:49:48.272]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:48.272]  
[19:49:48.272]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:48.272]      </block>
[19:49:48.272]      // end if-block "protType == 2"
[19:49:48.272]    </control>
[19:49:48.272]  </sequence>
[19:49:48.272]  
[19:49:48.531]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:48.531]  
[19:49:48.532]  <debugvars>
[19:49:48.532]    // Pre-defined
[19:49:48.532]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:48.532]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:48.532]    __dp=0x00000000
[19:49:48.532]    __ap=0x00000000
[19:49:48.532]    __traceout=0x00000000      (Trace Disabled)
[19:49:48.532]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:48.532]    __FlashAddr=0x00000000
[19:49:48.532]    __FlashLen=0x00000000
[19:49:48.532]    __FlashArg=0x00000000
[19:49:48.532]    __FlashOp=0x00000000
[19:49:48.532]    __Result=0x00000000
[19:49:48.532]  </debugvars>
[19:49:48.532]  
[19:49:48.532]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:48.532]    <block atomic="false" info="">
[19:49:48.532]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:48.534]        // -> [isSWJ <= 0x00000001]
[19:49:48.534]      __var hasDormant = __protocol & 0x00020000;
[19:49:48.534]        // -> [hasDormant <= 0x00000000]
[19:49:48.534]      __var protType   = __protocol & 0x0000FFFF;
[19:49:48.534]        // -> [protType <= 0x00000002]
[19:49:48.534]    </block>
[19:49:48.534]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:48.534]      // if-block "protType == 1"
[19:49:48.534]        // =>  FALSE
[19:49:48.534]      // skip if-block "protType == 1"
[19:49:48.534]    </control>
[19:49:48.534]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:48.534]      // if-block "protType == 2"
[19:49:48.534]        // =>  TRUE
[19:49:48.534]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:48.534]        // if-block "isSWJ"
[19:49:48.534]          // =>  TRUE
[19:49:48.534]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:48.534]          // if-block "hasDormant"
[19:49:48.534]            // =>  FALSE
[19:49:48.534]          // skip if-block "hasDormant"
[19:49:48.534]        </control>
[19:49:48.534]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:48.534]          // if-block "!hasDormant"
[19:49:48.534]            // =>  TRUE
[19:49:48.534]          <block atomic="false" info="">
[19:49:48.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:48.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:48.541]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:48.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:48.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.543]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:48.549]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:48.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:48.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.559]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:48.563]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:48.563]          </block>
[19:49:48.563]          // end if-block "!hasDormant"
[19:49:48.563]        </control>
[19:49:48.563]        // end if-block "isSWJ"
[19:49:48.563]      </control>
[19:49:48.563]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:48.563]        // if-block "!isSWJ"
[19:49:48.563]          // =>  FALSE
[19:49:48.563]        // skip if-block "!isSWJ"
[19:49:48.563]      </control>
[19:49:48.563]      <block atomic="false" info="">
[19:49:48.564]        ReadDP(0x0);
[19:49:48.564]  
[19:49:48.564]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:48.564]  
[19:49:48.564]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:48.564]      </block>
[19:49:48.564]      // end if-block "protType == 2"
[19:49:48.564]    </control>
[19:49:48.564]  </sequence>
[19:49:48.564]  
[19:49:48.816]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:48.816]  
[19:49:48.820]  <debugvars>
[19:49:48.820]    // Pre-defined
[19:49:48.820]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:48.820]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:48.820]    __dp=0x00000000
[19:49:48.820]    __ap=0x00000000
[19:49:48.820]    __traceout=0x00000000      (Trace Disabled)
[19:49:48.820]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:48.820]    __FlashAddr=0x00000000
[19:49:48.820]    __FlashLen=0x00000000
[19:49:48.820]    __FlashArg=0x00000000
[19:49:48.820]    __FlashOp=0x00000000
[19:49:48.820]    __Result=0x00000000
[19:49:48.820]  </debugvars>
[19:49:48.820]  
[19:49:48.820]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:48.820]    <block atomic="false" info="">
[19:49:48.820]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:48.820]        // -> [isSWJ <= 0x00000001]
[19:49:48.820]      __var hasDormant = __protocol & 0x00020000;
[19:49:48.820]        // -> [hasDormant <= 0x00000000]
[19:49:48.820]      __var protType   = __protocol & 0x0000FFFF;
[19:49:48.820]        // -> [protType <= 0x00000002]
[19:49:48.820]    </block>
[19:49:48.820]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:48.820]      // if-block "protType == 1"
[19:49:48.820]        // =>  FALSE
[19:49:48.820]      // skip if-block "protType == 1"
[19:49:48.820]    </control>
[19:49:48.820]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:48.820]      // if-block "protType == 2"
[19:49:48.820]        // =>  TRUE
[19:49:48.820]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:48.820]        // if-block "isSWJ"
[19:49:48.820]          // =>  TRUE
[19:49:48.820]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:48.820]          // if-block "hasDormant"
[19:49:48.820]            // =>  FALSE
[19:49:48.820]          // skip if-block "hasDormant"
[19:49:48.823]        </control>
[19:49:48.823]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:48.823]          // if-block "!hasDormant"
[19:49:48.823]            // =>  TRUE
[19:49:48.823]          <block atomic="false" info="">
[19:49:48.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:48.827]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.827]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:48.827]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:48.827]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:48.827]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.827]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:48.837]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:48.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:48.837]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:48.837]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:48.837]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:48.837]          </block>
[19:49:48.837]          // end if-block "!hasDormant"
[19:49:48.837]        </control>
[19:49:48.837]        // end if-block "isSWJ"
[19:49:48.837]      </control>
[19:49:48.837]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:48.837]        // if-block "!isSWJ"
[19:49:48.837]          // =>  FALSE
[19:49:48.837]        // skip if-block "!isSWJ"
[19:49:48.837]      </control>
[19:49:48.847]      <block atomic="false" info="">
[19:49:48.847]        ReadDP(0x0);
[19:49:48.847]  
[19:49:48.847]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:48.847]  
[19:49:48.847]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:48.847]      </block>
[19:49:48.847]      // end if-block "protType == 2"
[19:49:48.847]    </control>
[19:49:48.847]  </sequence>
[19:49:48.847]  
[19:49:49.102]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:49.102]  
[19:49:49.104]  <debugvars>
[19:49:49.104]    // Pre-defined
[19:49:49.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:49.104]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:49.104]    __dp=0x00000000
[19:49:49.104]    __ap=0x00000000
[19:49:49.104]    __traceout=0x00000000      (Trace Disabled)
[19:49:49.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:49.104]    __FlashAddr=0x00000000
[19:49:49.104]    __FlashLen=0x00000000
[19:49:49.104]    __FlashArg=0x00000000
[19:49:49.105]    __FlashOp=0x00000000
[19:49:49.105]    __Result=0x00000000
[19:49:49.105]  </debugvars>
[19:49:49.105]  
[19:49:49.105]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:49.105]    <block atomic="false" info="">
[19:49:49.105]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:49.105]        // -> [isSWJ <= 0x00000001]
[19:49:49.105]      __var hasDormant = __protocol & 0x00020000;
[19:49:49.105]        // -> [hasDormant <= 0x00000000]
[19:49:49.105]      __var protType   = __protocol & 0x0000FFFF;
[19:49:49.105]        // -> [protType <= 0x00000002]
[19:49:49.105]    </block>
[19:49:49.105]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:49.105]      // if-block "protType == 1"
[19:49:49.105]        // =>  FALSE
[19:49:49.105]      // skip if-block "protType == 1"
[19:49:49.105]    </control>
[19:49:49.105]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:49.105]      // if-block "protType == 2"
[19:49:49.105]        // =>  TRUE
[19:49:49.105]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:49.105]        // if-block "isSWJ"
[19:49:49.105]          // =>  TRUE
[19:49:49.105]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:49.105]          // if-block "hasDormant"
[19:49:49.105]            // =>  FALSE
[19:49:49.105]          // skip if-block "hasDormant"
[19:49:49.105]        </control>
[19:49:49.105]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:49.105]          // if-block "!hasDormant"
[19:49:49.105]            // =>  TRUE
[19:49:49.105]          <block atomic="false" info="">
[19:49:49.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:49.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.111]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:49.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:49.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:49.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.133]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:49.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:49.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:49.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.142]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:49.142]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:49.142]          </block>
[19:49:49.142]          // end if-block "!hasDormant"
[19:49:49.142]        </control>
[19:49:49.142]        // end if-block "isSWJ"
[19:49:49.142]      </control>
[19:49:49.142]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:49.142]        // if-block "!isSWJ"
[19:49:49.142]          // =>  FALSE
[19:49:49.142]        // skip if-block "!isSWJ"
[19:49:49.142]      </control>
[19:49:49.142]      <block atomic="false" info="">
[19:49:49.142]        ReadDP(0x0);
[19:49:49.152]  
[19:49:49.152]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:49.152]  
[19:49:49.152]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:49.152]      </block>
[19:49:49.152]      // end if-block "protType == 2"
[19:49:49.152]    </control>
[19:49:49.152]  </sequence>
[19:49:49.152]  
[19:49:49.406]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:49.406]  
[19:49:49.407]  <debugvars>
[19:49:49.407]    // Pre-defined
[19:49:49.407]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:49.407]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:49.407]    __dp=0x00000000
[19:49:49.407]    __ap=0x00000000
[19:49:49.407]    __traceout=0x00000000      (Trace Disabled)
[19:49:49.407]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:49.407]    __FlashAddr=0x00000000
[19:49:49.407]    __FlashLen=0x00000000
[19:49:49.407]    __FlashArg=0x00000000
[19:49:49.407]    __FlashOp=0x00000000
[19:49:49.407]    __Result=0x00000000
[19:49:49.407]  </debugvars>
[19:49:49.407]  
[19:49:49.407]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:49.407]    <block atomic="false" info="">
[19:49:49.407]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:49.407]        // -> [isSWJ <= 0x00000001]
[19:49:49.407]      __var hasDormant = __protocol & 0x00020000;
[19:49:49.407]        // -> [hasDormant <= 0x00000000]
[19:49:49.407]      __var protType   = __protocol & 0x0000FFFF;
[19:49:49.407]        // -> [protType <= 0x00000002]
[19:49:49.407]    </block>
[19:49:49.407]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:49.407]      // if-block "protType == 1"
[19:49:49.407]        // =>  FALSE
[19:49:49.407]      // skip if-block "protType == 1"
[19:49:49.407]    </control>
[19:49:49.407]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:49.407]      // if-block "protType == 2"
[19:49:49.407]        // =>  TRUE
[19:49:49.407]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:49.407]        // if-block "isSWJ"
[19:49:49.407]          // =>  TRUE
[19:49:49.407]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:49.407]          // if-block "hasDormant"
[19:49:49.407]            // =>  FALSE
[19:49:49.407]          // skip if-block "hasDormant"
[19:49:49.407]        </control>
[19:49:49.407]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:49.407]          // if-block "!hasDormant"
[19:49:49.407]            // =>  TRUE
[19:49:49.407]          <block atomic="false" info="">
[19:49:49.407]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:49.407]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.407]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:49.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:49.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:49.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.416]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:49.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:49.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:49.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.426]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:49.426]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:49.426]          </block>
[19:49:49.426]          // end if-block "!hasDormant"
[19:49:49.426]        </control>
[19:49:49.426]        // end if-block "isSWJ"
[19:49:49.426]      </control>
[19:49:49.426]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:49.426]        // if-block "!isSWJ"
[19:49:49.426]          // =>  FALSE
[19:49:49.426]        // skip if-block "!isSWJ"
[19:49:49.426]      </control>
[19:49:49.426]      <block atomic="false" info="">
[19:49:49.426]        ReadDP(0x0);
[19:49:49.436]  
[19:49:49.436]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:49.436]  
[19:49:49.436]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:49.436]      </block>
[19:49:49.436]      // end if-block "protType == 2"
[19:49:49.436]    </control>
[19:49:49.436]  </sequence>
[19:49:49.436]  
[19:49:49.689]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:49.689]  
[19:49:49.689]  <debugvars>
[19:49:49.689]    // Pre-defined
[19:49:49.689]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:49.689]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:49.689]    __dp=0x00000000
[19:49:49.689]    __ap=0x00000000
[19:49:49.689]    __traceout=0x00000000      (Trace Disabled)
[19:49:49.689]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:49.690]    __FlashAddr=0x00000000
[19:49:49.690]    __FlashLen=0x00000000
[19:49:49.690]    __FlashArg=0x00000000
[19:49:49.690]    __FlashOp=0x00000000
[19:49:49.690]    __Result=0x00000000
[19:49:49.690]  </debugvars>
[19:49:49.690]  
[19:49:49.690]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:49.690]    <block atomic="false" info="">
[19:49:49.690]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:49.690]        // -> [isSWJ <= 0x00000001]
[19:49:49.690]      __var hasDormant = __protocol & 0x00020000;
[19:49:49.691]        // -> [hasDormant <= 0x00000000]
[19:49:49.691]      __var protType   = __protocol & 0x0000FFFF;
[19:49:49.691]        // -> [protType <= 0x00000002]
[19:49:49.691]    </block>
[19:49:49.691]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:49.691]      // if-block "protType == 1"
[19:49:49.691]        // =>  FALSE
[19:49:49.691]      // skip if-block "protType == 1"
[19:49:49.691]    </control>
[19:49:49.691]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:49.692]      // if-block "protType == 2"
[19:49:49.692]        // =>  TRUE
[19:49:49.692]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:49.692]        // if-block "isSWJ"
[19:49:49.692]          // =>  TRUE
[19:49:49.692]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:49.692]          // if-block "hasDormant"
[19:49:49.692]            // =>  FALSE
[19:49:49.692]          // skip if-block "hasDormant"
[19:49:49.692]        </control>
[19:49:49.692]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:49.692]          // if-block "!hasDormant"
[19:49:49.692]            // =>  TRUE
[19:49:49.692]          <block atomic="false" info="">
[19:49:49.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:49.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.699]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:49.702]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:49.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:49.709]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.709]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:49.711]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:49.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:49.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.711]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:49.720]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:49.720]          </block>
[19:49:49.720]          // end if-block "!hasDormant"
[19:49:49.720]        </control>
[19:49:49.720]        // end if-block "isSWJ"
[19:49:49.720]      </control>
[19:49:49.722]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:49.722]        // if-block "!isSWJ"
[19:49:49.722]          // =>  FALSE
[19:49:49.722]        // skip if-block "!isSWJ"
[19:49:49.722]      </control>
[19:49:49.722]      <block atomic="false" info="">
[19:49:49.722]        ReadDP(0x0);
[19:49:49.723]  
[19:49:49.723]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:49.723]  
[19:49:49.723]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:49.723]      </block>
[19:49:49.723]      // end if-block "protType == 2"
[19:49:49.723]    </control>
[19:49:49.723]  </sequence>
[19:49:49.723]  
[19:49:49.981]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:49.981]  
[19:49:49.984]  <debugvars>
[19:49:49.984]    // Pre-defined
[19:49:49.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:49.984]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:49.984]    __dp=0x00000000
[19:49:49.984]    __ap=0x00000000
[19:49:49.984]    __traceout=0x00000000      (Trace Disabled)
[19:49:49.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:49.984]    __FlashAddr=0x00000000
[19:49:49.984]    __FlashLen=0x00000000
[19:49:49.984]    __FlashArg=0x00000000
[19:49:49.984]    __FlashOp=0x00000000
[19:49:49.984]    __Result=0x00000000
[19:49:49.984]  </debugvars>
[19:49:49.984]  
[19:49:49.984]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:49.984]    <block atomic="false" info="">
[19:49:49.984]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:49.984]        // -> [isSWJ <= 0x00000001]
[19:49:49.984]      __var hasDormant = __protocol & 0x00020000;
[19:49:49.984]        // -> [hasDormant <= 0x00000000]
[19:49:49.984]      __var protType   = __protocol & 0x0000FFFF;
[19:49:49.984]        // -> [protType <= 0x00000002]
[19:49:49.984]    </block>
[19:49:49.984]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:49.984]      // if-block "protType == 1"
[19:49:49.984]        // =>  FALSE
[19:49:49.984]      // skip if-block "protType == 1"
[19:49:49.984]    </control>
[19:49:49.984]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:49.984]      // if-block "protType == 2"
[19:49:49.984]        // =>  TRUE
[19:49:49.984]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:49.984]        // if-block "isSWJ"
[19:49:49.984]          // =>  TRUE
[19:49:49.984]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:49.984]          // if-block "hasDormant"
[19:49:49.984]            // =>  FALSE
[19:49:49.984]          // skip if-block "hasDormant"
[19:49:49.984]        </control>
[19:49:49.984]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:49.984]          // if-block "!hasDormant"
[19:49:49.984]            // =>  TRUE
[19:49:49.984]          <block atomic="false" info="">
[19:49:49.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:49.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.991]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:49.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:49.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:49.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:49.992]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:50.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:50.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:50.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:50.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:50.005]          </block>
[19:49:50.005]          // end if-block "!hasDormant"
[19:49:50.005]        </control>
[19:49:50.005]        // end if-block "isSWJ"
[19:49:50.005]      </control>
[19:49:50.005]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:50.005]        // if-block "!isSWJ"
[19:49:50.005]          // =>  FALSE
[19:49:50.005]        // skip if-block "!isSWJ"
[19:49:50.005]      </control>
[19:49:50.005]      <block atomic="false" info="">
[19:49:50.005]        ReadDP(0x0);
[19:49:50.012]  
[19:49:50.012]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:50.012]  
[19:49:50.012]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:50.012]      </block>
[19:49:50.012]      // end if-block "protType == 2"
[19:49:50.012]    </control>
[19:49:50.012]  </sequence>
[19:49:50.012]  
[19:49:50.263]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:50.263]  
[19:49:50.266]  <debugvars>
[19:49:50.266]    // Pre-defined
[19:49:50.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:50.266]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:50.266]    __dp=0x00000000
[19:49:50.266]    __ap=0x00000000
[19:49:50.266]    __traceout=0x00000000      (Trace Disabled)
[19:49:50.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:50.266]    __FlashAddr=0x00000000
[19:49:50.266]    __FlashLen=0x00000000
[19:49:50.266]    __FlashArg=0x00000000
[19:49:50.266]    __FlashOp=0x00000000
[19:49:50.266]    __Result=0x00000000
[19:49:50.266]  </debugvars>
[19:49:50.266]  
[19:49:50.266]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:50.266]    <block atomic="false" info="">
[19:49:50.266]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:50.266]        // -> [isSWJ <= 0x00000001]
[19:49:50.266]      __var hasDormant = __protocol & 0x00020000;
[19:49:50.266]        // -> [hasDormant <= 0x00000000]
[19:49:50.266]      __var protType   = __protocol & 0x0000FFFF;
[19:49:50.266]        // -> [protType <= 0x00000002]
[19:49:50.266]    </block>
[19:49:50.266]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:50.266]      // if-block "protType == 1"
[19:49:50.266]        // =>  FALSE
[19:49:50.266]      // skip if-block "protType == 1"
[19:49:50.266]    </control>
[19:49:50.266]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:50.266]      // if-block "protType == 2"
[19:49:50.266]        // =>  TRUE
[19:49:50.266]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:50.266]        // if-block "isSWJ"
[19:49:50.266]          // =>  TRUE
[19:49:50.266]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:50.266]          // if-block "hasDormant"
[19:49:50.266]            // =>  FALSE
[19:49:50.266]          // skip if-block "hasDormant"
[19:49:50.266]        </control>
[19:49:50.266]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:50.266]          // if-block "!hasDormant"
[19:49:50.266]            // =>  TRUE
[19:49:50.266]          <block atomic="false" info="">
[19:49:50.266]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:50.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.274]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:50.274]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:50.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:50.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.274]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:50.284]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:50.284]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:50.284]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.284]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:50.284]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:50.284]          </block>
[19:49:50.284]          // end if-block "!hasDormant"
[19:49:50.284]        </control>
[19:49:50.284]        // end if-block "isSWJ"
[19:49:50.284]      </control>
[19:49:50.284]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:50.284]        // if-block "!isSWJ"
[19:49:50.284]          // =>  FALSE
[19:49:50.284]        // skip if-block "!isSWJ"
[19:49:50.284]      </control>
[19:49:50.284]      <block atomic="false" info="">
[19:49:50.284]        ReadDP(0x0);
[19:49:50.296]  
[19:49:50.296]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:50.296]  
[19:49:50.296]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:50.296]      </block>
[19:49:50.296]      // end if-block "protType == 2"
[19:49:50.296]    </control>
[19:49:50.296]  </sequence>
[19:49:50.296]  
[19:49:50.546]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:50.546]  
[19:49:50.547]  <debugvars>
[19:49:50.547]    // Pre-defined
[19:49:50.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:50.547]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:50.547]    __dp=0x00000000
[19:49:50.547]    __ap=0x00000000
[19:49:50.547]    __traceout=0x00000000      (Trace Disabled)
[19:49:50.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:50.547]    __FlashAddr=0x00000000
[19:49:50.547]    __FlashLen=0x00000000
[19:49:50.547]    __FlashArg=0x00000000
[19:49:50.547]    __FlashOp=0x00000000
[19:49:50.547]    __Result=0x00000000
[19:49:50.547]  </debugvars>
[19:49:50.547]  
[19:49:50.547]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:50.547]    <block atomic="false" info="">
[19:49:50.547]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:50.547]        // -> [isSWJ <= 0x00000001]
[19:49:50.547]      __var hasDormant = __protocol & 0x00020000;
[19:49:50.547]        // -> [hasDormant <= 0x00000000]
[19:49:50.547]      __var protType   = __protocol & 0x0000FFFF;
[19:49:50.550]        // -> [protType <= 0x00000002]
[19:49:50.550]    </block>
[19:49:50.550]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:50.550]      // if-block "protType == 1"
[19:49:50.550]        // =>  FALSE
[19:49:50.550]      // skip if-block "protType == 1"
[19:49:50.550]    </control>
[19:49:50.550]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:50.550]      // if-block "protType == 2"
[19:49:50.550]        // =>  TRUE
[19:49:50.550]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:50.550]        // if-block "isSWJ"
[19:49:50.550]          // =>  TRUE
[19:49:50.550]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:50.550]          // if-block "hasDormant"
[19:49:50.550]            // =>  FALSE
[19:49:50.550]          // skip if-block "hasDormant"
[19:49:50.550]        </control>
[19:49:50.550]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:50.550]          // if-block "!hasDormant"
[19:49:50.550]            // =>  TRUE
[19:49:50.550]          <block atomic="false" info="">
[19:49:50.550]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:50.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.556]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:50.559]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:50.559]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:50.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.559]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:50.567]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:50.571]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:50.571]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.571]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:50.578]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:50.578]          </block>
[19:49:50.578]          // end if-block "!hasDormant"
[19:49:50.578]        </control>
[19:49:50.578]        // end if-block "isSWJ"
[19:49:50.578]      </control>
[19:49:50.578]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:50.579]        // if-block "!isSWJ"
[19:49:50.579]          // =>  FALSE
[19:49:50.579]        // skip if-block "!isSWJ"
[19:49:50.579]      </control>
[19:49:50.579]      <block atomic="false" info="">
[19:49:50.579]        ReadDP(0x0);
[19:49:50.588]  
[19:49:50.588]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:50.588]  
[19:49:50.588]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:50.588]      </block>
[19:49:50.588]      // end if-block "protType == 2"
[19:49:50.588]    </control>
[19:49:50.589]  </sequence>
[19:49:50.589]  
[19:49:50.849]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:50.849]  
[19:49:50.849]  <debugvars>
[19:49:50.849]    // Pre-defined
[19:49:50.849]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:50.849]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:50.849]    __dp=0x00000000
[19:49:50.849]    __ap=0x00000000
[19:49:50.849]    __traceout=0x00000000      (Trace Disabled)
[19:49:50.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:50.849]    __FlashAddr=0x00000000
[19:49:50.849]    __FlashLen=0x00000000
[19:49:50.849]    __FlashArg=0x00000000
[19:49:50.849]    __FlashOp=0x00000000
[19:49:50.849]    __Result=0x00000000
[19:49:50.849]  </debugvars>
[19:49:50.849]  
[19:49:50.849]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:50.849]    <block atomic="false" info="">
[19:49:50.849]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:50.849]        // -> [isSWJ <= 0x00000001]
[19:49:50.849]      __var hasDormant = __protocol & 0x00020000;
[19:49:50.849]        // -> [hasDormant <= 0x00000000]
[19:49:50.849]      __var protType   = __protocol & 0x0000FFFF;
[19:49:50.849]        // -> [protType <= 0x00000002]
[19:49:50.849]    </block>
[19:49:50.849]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:50.849]      // if-block "protType == 1"
[19:49:50.849]        // =>  FALSE
[19:49:50.849]      // skip if-block "protType == 1"
[19:49:50.849]    </control>
[19:49:50.849]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:50.849]      // if-block "protType == 2"
[19:49:50.849]        // =>  TRUE
[19:49:50.849]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:50.849]        // if-block "isSWJ"
[19:49:50.849]          // =>  TRUE
[19:49:50.849]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:50.849]          // if-block "hasDormant"
[19:49:50.849]            // =>  FALSE
[19:49:50.849]          // skip if-block "hasDormant"
[19:49:50.849]        </control>
[19:49:50.849]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:50.849]          // if-block "!hasDormant"
[19:49:50.849]            // =>  TRUE
[19:49:50.849]          <block atomic="false" info="">
[19:49:50.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:50.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.859]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:50.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:50.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:50.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.859]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:50.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:50.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:50.869]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.869]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:50.869]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:50.869]          </block>
[19:49:50.869]          // end if-block "!hasDormant"
[19:49:50.869]        </control>
[19:49:50.869]        // end if-block "isSWJ"
[19:49:50.869]      </control>
[19:49:50.869]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:50.869]        // if-block "!isSWJ"
[19:49:50.869]          // =>  FALSE
[19:49:50.869]        // skip if-block "!isSWJ"
[19:49:50.869]      </control>
[19:49:50.869]      <block atomic="false" info="">
[19:49:50.869]        ReadDP(0x0);
[19:49:50.879]  
[19:49:50.879]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:50.879]  
[19:49:50.879]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:50.879]      </block>
[19:49:50.879]      // end if-block "protType == 2"
[19:49:50.879]    </control>
[19:49:50.879]  </sequence>
[19:49:50.879]  
[19:49:51.133]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:51.133]  
[19:49:51.133]  <debugvars>
[19:49:51.133]    // Pre-defined
[19:49:51.133]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:51.133]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:51.133]    __dp=0x00000000
[19:49:51.133]    __ap=0x00000000
[19:49:51.133]    __traceout=0x00000000      (Trace Disabled)
[19:49:51.133]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:51.133]    __FlashAddr=0x00000000
[19:49:51.133]    __FlashLen=0x00000000
[19:49:51.133]    __FlashArg=0x00000000
[19:49:51.133]    __FlashOp=0x00000000
[19:49:51.133]    __Result=0x00000000
[19:49:51.133]  </debugvars>
[19:49:51.133]  
[19:49:51.133]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:51.133]    <block atomic="false" info="">
[19:49:51.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:51.133]        // -> [isSWJ <= 0x00000001]
[19:49:51.133]      __var hasDormant = __protocol & 0x00020000;
[19:49:51.133]        // -> [hasDormant <= 0x00000000]
[19:49:51.133]      __var protType   = __protocol & 0x0000FFFF;
[19:49:51.133]        // -> [protType <= 0x00000002]
[19:49:51.133]    </block>
[19:49:51.133]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:51.133]      // if-block "protType == 1"
[19:49:51.133]        // =>  FALSE
[19:49:51.137]      // skip if-block "protType == 1"
[19:49:51.137]    </control>
[19:49:51.137]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:51.137]      // if-block "protType == 2"
[19:49:51.137]        // =>  TRUE
[19:49:51.137]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:51.137]        // if-block "isSWJ"
[19:49:51.137]          // =>  TRUE
[19:49:51.137]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:51.137]          // if-block "hasDormant"
[19:49:51.137]            // =>  FALSE
[19:49:51.137]          // skip if-block "hasDormant"
[19:49:51.137]        </control>
[19:49:51.137]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:51.137]          // if-block "!hasDormant"
[19:49:51.137]            // =>  TRUE
[19:49:51.138]          <block atomic="false" info="">
[19:49:51.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:51.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.143]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:51.144]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:51.144]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:51.154]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.154]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:51.161]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:51.161]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:51.164]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.164]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:51.167]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:51.167]          </block>
[19:49:51.167]          // end if-block "!hasDormant"
[19:49:51.167]        </control>
[19:49:51.167]        // end if-block "isSWJ"
[19:49:51.167]      </control>
[19:49:51.167]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:51.167]        // if-block "!isSWJ"
[19:49:51.167]          // =>  FALSE
[19:49:51.167]        // skip if-block "!isSWJ"
[19:49:51.167]      </control>
[19:49:51.167]      <block atomic="false" info="">
[19:49:51.167]        ReadDP(0x0);
[19:49:51.173]  
[19:49:51.173]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:51.173]  
[19:49:51.174]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:51.174]      </block>
[19:49:51.174]      // end if-block "protType == 2"
[19:49:51.174]    </control>
[19:49:51.174]  </sequence>
[19:49:51.174]  
[19:49:51.428]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:51.428]  
[19:49:51.429]  <debugvars>
[19:49:51.429]    // Pre-defined
[19:49:51.429]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:51.429]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:51.429]    __dp=0x00000000
[19:49:51.429]    __ap=0x00000000
[19:49:51.429]    __traceout=0x00000000      (Trace Disabled)
[19:49:51.429]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:51.429]    __FlashAddr=0x00000000
[19:49:51.430]    __FlashLen=0x00000000
[19:49:51.430]    __FlashArg=0x00000000
[19:49:51.430]    __FlashOp=0x00000000
[19:49:51.430]    __Result=0x00000000
[19:49:51.430]  </debugvars>
[19:49:51.430]  
[19:49:51.430]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:51.430]    <block atomic="false" info="">
[19:49:51.430]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:51.430]        // -> [isSWJ <= 0x00000001]
[19:49:51.430]      __var hasDormant = __protocol & 0x00020000;
[19:49:51.431]        // -> [hasDormant <= 0x00000000]
[19:49:51.431]      __var protType   = __protocol & 0x0000FFFF;
[19:49:51.431]        // -> [protType <= 0x00000002]
[19:49:51.431]    </block>
[19:49:51.431]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:51.431]      // if-block "protType == 1"
[19:49:51.431]        // =>  FALSE
[19:49:51.431]      // skip if-block "protType == 1"
[19:49:51.431]    </control>
[19:49:51.431]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:51.431]      // if-block "protType == 2"
[19:49:51.431]        // =>  TRUE
[19:49:51.433]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:51.433]        // if-block "isSWJ"
[19:49:51.433]          // =>  TRUE
[19:49:51.433]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:51.433]          // if-block "hasDormant"
[19:49:51.433]            // =>  FALSE
[19:49:51.433]          // skip if-block "hasDormant"
[19:49:51.433]        </control>
[19:49:51.433]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:51.433]          // if-block "!hasDormant"
[19:49:51.433]            // =>  TRUE
[19:49:51.433]          <block atomic="false" info="">
[19:49:51.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:51.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.435]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:51.439]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:51.439]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:51.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.441]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:51.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:51.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:51.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.451]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:51.459]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:51.459]          </block>
[19:49:51.459]          // end if-block "!hasDormant"
[19:49:51.459]        </control>
[19:49:51.460]        // end if-block "isSWJ"
[19:49:51.460]      </control>
[19:49:51.460]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:51.460]        // if-block "!isSWJ"
[19:49:51.460]          // =>  FALSE
[19:49:51.460]        // skip if-block "!isSWJ"
[19:49:51.460]      </control>
[19:49:51.460]      <block atomic="false" info="">
[19:49:51.460]        ReadDP(0x0);
[19:49:51.462]  
[19:49:51.462]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:51.462]  
[19:49:51.462]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:51.462]      </block>
[19:49:51.462]      // end if-block "protType == 2"
[19:49:51.462]    </control>
[19:49:51.462]  </sequence>
[19:49:51.462]  
[19:49:51.721]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:51.721]  
[19:49:51.723]  <debugvars>
[19:49:51.723]    // Pre-defined
[19:49:51.723]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:51.723]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:51.723]    __dp=0x00000000
[19:49:51.723]    __ap=0x00000000
[19:49:51.723]    __traceout=0x00000000      (Trace Disabled)
[19:49:51.723]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:51.723]    __FlashAddr=0x00000000
[19:49:51.723]    __FlashLen=0x00000000
[19:49:51.723]    __FlashArg=0x00000000
[19:49:51.723]    __FlashOp=0x00000000
[19:49:51.723]    __Result=0x00000000
[19:49:51.723]  </debugvars>
[19:49:51.723]  
[19:49:51.723]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:51.723]    <block atomic="false" info="">
[19:49:51.723]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:51.723]        // -> [isSWJ <= 0x00000001]
[19:49:51.723]      __var hasDormant = __protocol & 0x00020000;
[19:49:51.723]        // -> [hasDormant <= 0x00000000]
[19:49:51.723]      __var protType   = __protocol & 0x0000FFFF;
[19:49:51.723]        // -> [protType <= 0x00000002]
[19:49:51.723]    </block>
[19:49:51.723]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:51.723]      // if-block "protType == 1"
[19:49:51.723]        // =>  FALSE
[19:49:51.723]      // skip if-block "protType == 1"
[19:49:51.723]    </control>
[19:49:51.723]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:51.723]      // if-block "protType == 2"
[19:49:51.723]        // =>  TRUE
[19:49:51.723]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:51.723]        // if-block "isSWJ"
[19:49:51.723]          // =>  TRUE
[19:49:51.723]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:51.723]          // if-block "hasDormant"
[19:49:51.723]            // =>  FALSE
[19:49:51.723]          // skip if-block "hasDormant"
[19:49:51.723]        </control>
[19:49:51.723]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:51.723]          // if-block "!hasDormant"
[19:49:51.723]            // =>  TRUE
[19:49:51.723]          <block atomic="false" info="">
[19:49:51.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:51.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.723]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:51.732]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:51.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:51.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.732]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:51.732]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:51.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:51.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:51.752]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:51.752]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:51.752]          </block>
[19:49:51.752]          // end if-block "!hasDormant"
[19:49:51.752]        </control>
[19:49:51.752]        // end if-block "isSWJ"
[19:49:51.752]      </control>
[19:49:51.752]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:51.752]        // if-block "!isSWJ"
[19:49:51.752]          // =>  FALSE
[19:49:51.752]        // skip if-block "!isSWJ"
[19:49:51.752]      </control>
[19:49:51.752]      <block atomic="false" info="">
[19:49:51.752]        ReadDP(0x0);
[19:49:51.762]  
[19:49:51.762]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:51.762]  
[19:49:51.762]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:51.762]      </block>
[19:49:51.762]      // end if-block "protType == 2"
[19:49:51.762]    </control>
[19:49:51.762]  </sequence>
[19:49:51.762]  
[19:49:52.013]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:52.013]  
[19:49:52.013]  <debugvars>
[19:49:52.013]    // Pre-defined
[19:49:52.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:52.015]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:52.015]    __dp=0x00000000
[19:49:52.015]    __ap=0x00000000
[19:49:52.015]    __traceout=0x00000000      (Trace Disabled)
[19:49:52.015]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:52.016]    __FlashAddr=0x00000000
[19:49:52.016]    __FlashLen=0x00000000
[19:49:52.016]    __FlashArg=0x00000000
[19:49:52.016]    __FlashOp=0x00000000
[19:49:52.016]    __Result=0x00000000
[19:49:52.016]  </debugvars>
[19:49:52.016]  
[19:49:52.016]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:52.016]    <block atomic="false" info="">
[19:49:52.016]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:52.016]        // -> [isSWJ <= 0x00000001]
[19:49:52.016]      __var hasDormant = __protocol & 0x00020000;
[19:49:52.016]        // -> [hasDormant <= 0x00000000]
[19:49:52.016]      __var protType   = __protocol & 0x0000FFFF;
[19:49:52.016]        // -> [protType <= 0x00000002]
[19:49:52.016]    </block>
[19:49:52.016]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:52.016]      // if-block "protType == 1"
[19:49:52.016]        // =>  FALSE
[19:49:52.016]      // skip if-block "protType == 1"
[19:49:52.016]    </control>
[19:49:52.016]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:52.016]      // if-block "protType == 2"
[19:49:52.016]        // =>  TRUE
[19:49:52.016]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:52.016]        // if-block "isSWJ"
[19:49:52.016]          // =>  TRUE
[19:49:52.016]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:52.016]          // if-block "hasDormant"
[19:49:52.016]            // =>  FALSE
[19:49:52.016]          // skip if-block "hasDormant"
[19:49:52.016]        </control>
[19:49:52.016]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:52.016]          // if-block "!hasDormant"
[19:49:52.016]            // =>  TRUE
[19:49:52.016]          <block atomic="false" info="">
[19:49:52.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:52.025]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.025]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:52.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:52.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:52.034]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.034]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:52.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:52.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:52.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.045]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:52.045]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:52.045]          </block>
[19:49:52.045]          // end if-block "!hasDormant"
[19:49:52.045]        </control>
[19:49:52.045]        // end if-block "isSWJ"
[19:49:52.045]      </control>
[19:49:52.045]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:52.045]        // if-block "!isSWJ"
[19:49:52.045]          // =>  FALSE
[19:49:52.045]        // skip if-block "!isSWJ"
[19:49:52.045]      </control>
[19:49:52.045]      <block atomic="false" info="">
[19:49:52.045]        ReadDP(0x0);
[19:49:52.054]  
[19:49:52.054]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:52.054]  
[19:49:52.054]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:52.054]      </block>
[19:49:52.054]      // end if-block "protType == 2"
[19:49:52.054]    </control>
[19:49:52.054]  </sequence>
[19:49:52.054]  
[19:49:52.306]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:52.306]  
[19:49:52.309]  <debugvars>
[19:49:52.309]    // Pre-defined
[19:49:52.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:52.309]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:52.309]    __dp=0x00000000
[19:49:52.309]    __ap=0x00000000
[19:49:52.309]    __traceout=0x00000000      (Trace Disabled)
[19:49:52.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:52.309]    __FlashAddr=0x00000000
[19:49:52.309]    __FlashLen=0x00000000
[19:49:52.309]    __FlashArg=0x00000000
[19:49:52.309]    __FlashOp=0x00000000
[19:49:52.309]    __Result=0x00000000
[19:49:52.309]  </debugvars>
[19:49:52.309]  
[19:49:52.309]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:52.309]    <block atomic="false" info="">
[19:49:52.309]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:52.309]        // -> [isSWJ <= 0x00000001]
[19:49:52.309]      __var hasDormant = __protocol & 0x00020000;
[19:49:52.309]        // -> [hasDormant <= 0x00000000]
[19:49:52.309]      __var protType   = __protocol & 0x0000FFFF;
[19:49:52.309]        // -> [protType <= 0x00000002]
[19:49:52.309]    </block>
[19:49:52.309]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:52.309]      // if-block "protType == 1"
[19:49:52.309]        // =>  FALSE
[19:49:52.309]      // skip if-block "protType == 1"
[19:49:52.309]    </control>
[19:49:52.309]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:52.309]      // if-block "protType == 2"
[19:49:52.309]        // =>  TRUE
[19:49:52.309]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:52.309]        // if-block "isSWJ"
[19:49:52.309]          // =>  TRUE
[19:49:52.309]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:52.309]          // if-block "hasDormant"
[19:49:52.309]            // =>  FALSE
[19:49:52.309]          // skip if-block "hasDormant"
[19:49:52.309]        </control>
[19:49:52.309]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:52.309]          // if-block "!hasDormant"
[19:49:52.309]            // =>  TRUE
[19:49:52.309]          <block atomic="false" info="">
[19:49:52.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:52.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.318]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:52.318]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:52.318]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:52.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.318]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:52.327]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:52.327]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:52.327]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.327]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:52.327]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:52.327]          </block>
[19:49:52.327]          // end if-block "!hasDormant"
[19:49:52.327]        </control>
[19:49:52.327]        // end if-block "isSWJ"
[19:49:52.327]      </control>
[19:49:52.327]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:52.327]        // if-block "!isSWJ"
[19:49:52.327]          // =>  FALSE
[19:49:52.327]        // skip if-block "!isSWJ"
[19:49:52.327]      </control>
[19:49:52.327]      <block atomic="false" info="">
[19:49:52.327]        ReadDP(0x0);
[19:49:52.338]  
[19:49:52.338]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:52.338]  
[19:49:52.338]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:52.338]      </block>
[19:49:52.338]      // end if-block "protType == 2"
[19:49:52.338]    </control>
[19:49:52.338]  </sequence>
[19:49:52.338]  
[19:49:52.589]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:52.589]  
[19:49:52.590]  <debugvars>
[19:49:52.590]    // Pre-defined
[19:49:52.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:52.590]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:52.590]    __dp=0x00000000
[19:49:52.590]    __ap=0x00000000
[19:49:52.590]    __traceout=0x00000000      (Trace Disabled)
[19:49:52.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:52.590]    __FlashAddr=0x00000000
[19:49:52.591]    __FlashLen=0x00000000
[19:49:52.591]    __FlashArg=0x00000000
[19:49:52.591]    __FlashOp=0x00000000
[19:49:52.591]    __Result=0x00000000
[19:49:52.591]  </debugvars>
[19:49:52.591]  
[19:49:52.591]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:52.591]    <block atomic="false" info="">
[19:49:52.591]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:52.591]        // -> [isSWJ <= 0x00000001]
[19:49:52.592]      __var hasDormant = __protocol & 0x00020000;
[19:49:52.592]        // -> [hasDormant <= 0x00000000]
[19:49:52.592]      __var protType   = __protocol & 0x0000FFFF;
[19:49:52.592]        // -> [protType <= 0x00000002]
[19:49:52.592]    </block>
[19:49:52.592]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:52.592]      // if-block "protType == 1"
[19:49:52.592]        // =>  FALSE
[19:49:52.592]      // skip if-block "protType == 1"
[19:49:52.592]    </control>
[19:49:52.592]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:52.593]      // if-block "protType == 2"
[19:49:52.593]        // =>  TRUE
[19:49:52.593]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:52.593]        // if-block "isSWJ"
[19:49:52.593]          // =>  TRUE
[19:49:52.593]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:52.593]          // if-block "hasDormant"
[19:49:52.593]            // =>  FALSE
[19:49:52.593]          // skip if-block "hasDormant"
[19:49:52.593]        </control>
[19:49:52.594]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:52.594]          // if-block "!hasDormant"
[19:49:52.594]            // =>  TRUE
[19:49:52.594]          <block atomic="false" info="">
[19:49:52.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:52.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.597]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:52.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:52.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:52.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.607]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:52.610]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:52.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:52.632]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.632]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:52.670]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:52.670]          </block>
[19:49:52.670]          // end if-block "!hasDormant"
[19:49:52.670]        </control>
[19:49:52.670]        // end if-block "isSWJ"
[19:49:52.670]      </control>
[19:49:52.670]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:52.670]        // if-block "!isSWJ"
[19:49:52.670]          // =>  FALSE
[19:49:52.670]        // skip if-block "!isSWJ"
[19:49:52.670]      </control>
[19:49:52.670]      <block atomic="false" info="">
[19:49:52.670]        ReadDP(0x0);
[19:49:52.694]  
[19:49:52.694]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:52.694]  
[19:49:52.694]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:52.695]      </block>
[19:49:52.695]      // end if-block "protType == 2"
[19:49:52.695]    </control>
[19:49:52.695]  </sequence>
[19:49:52.695]  
[19:49:52.954]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:52.954]  
[19:49:52.955]  <debugvars>
[19:49:52.955]    // Pre-defined
[19:49:52.955]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:52.955]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:52.955]    __dp=0x00000000
[19:49:52.955]    __ap=0x00000000
[19:49:52.955]    __traceout=0x00000000      (Trace Disabled)
[19:49:52.955]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:52.955]    __FlashAddr=0x00000000
[19:49:52.955]    __FlashLen=0x00000000
[19:49:52.955]    __FlashArg=0x00000000
[19:49:52.955]    __FlashOp=0x00000000
[19:49:52.955]    __Result=0x00000000
[19:49:52.955]  </debugvars>
[19:49:52.958]  
[19:49:52.958]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:52.958]    <block atomic="false" info="">
[19:49:52.958]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:52.958]        // -> [isSWJ <= 0x00000001]
[19:49:52.958]      __var hasDormant = __protocol & 0x00020000;
[19:49:52.958]        // -> [hasDormant <= 0x00000000]
[19:49:52.958]      __var protType   = __protocol & 0x0000FFFF;
[19:49:52.958]        // -> [protType <= 0x00000002]
[19:49:52.958]    </block>
[19:49:52.958]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:52.959]      // if-block "protType == 1"
[19:49:52.959]        // =>  FALSE
[19:49:52.959]      // skip if-block "protType == 1"
[19:49:52.959]    </control>
[19:49:52.959]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:52.959]      // if-block "protType == 2"
[19:49:52.959]        // =>  TRUE
[19:49:52.959]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:52.959]        // if-block "isSWJ"
[19:49:52.959]          // =>  TRUE
[19:49:52.959]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:52.959]          // if-block "hasDormant"
[19:49:52.959]            // =>  FALSE
[19:49:52.959]          // skip if-block "hasDormant"
[19:49:52.959]        </control>
[19:49:52.959]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:52.959]          // if-block "!hasDormant"
[19:49:52.959]            // =>  TRUE
[19:49:52.959]          <block atomic="false" info="">
[19:49:52.959]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:52.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.965]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:52.965]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:52.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:52.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.974]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:52.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:52.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:52.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:52.984]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:52.987]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:52.987]          </block>
[19:49:52.987]          // end if-block "!hasDormant"
[19:49:52.987]        </control>
[19:49:52.987]        // end if-block "isSWJ"
[19:49:52.987]      </control>
[19:49:52.987]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:52.987]        // if-block "!isSWJ"
[19:49:52.987]          // =>  FALSE
[19:49:52.989]        // skip if-block "!isSWJ"
[19:49:52.989]      </control>
[19:49:52.989]      <block atomic="false" info="">
[19:49:52.989]        ReadDP(0x0);
[19:49:52.994]  
[19:49:52.994]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:52.994]  
[19:49:52.994]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:52.994]      </block>
[19:49:52.994]      // end if-block "protType == 2"
[19:49:52.994]    </control>
[19:49:52.994]  </sequence>
[19:49:52.994]  
[19:49:53.248]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:53.248]  
[19:49:53.249]  <debugvars>
[19:49:53.249]    // Pre-defined
[19:49:53.249]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:53.249]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:53.249]    __dp=0x00000000
[19:49:53.249]    __ap=0x00000000
[19:49:53.249]    __traceout=0x00000000      (Trace Disabled)
[19:49:53.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:53.249]    __FlashAddr=0x00000000
[19:49:53.249]    __FlashLen=0x00000000
[19:49:53.250]    __FlashArg=0x00000000
[19:49:53.250]    __FlashOp=0x00000000
[19:49:53.250]    __Result=0x00000000
[19:49:53.250]  </debugvars>
[19:49:53.250]  
[19:49:53.250]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:53.250]    <block atomic="false" info="">
[19:49:53.250]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:53.250]        // -> [isSWJ <= 0x00000001]
[19:49:53.250]      __var hasDormant = __protocol & 0x00020000;
[19:49:53.250]        // -> [hasDormant <= 0x00000000]
[19:49:53.250]      __var protType   = __protocol & 0x0000FFFF;
[19:49:53.251]        // -> [protType <= 0x00000002]
[19:49:53.251]    </block>
[19:49:53.251]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:53.251]      // if-block "protType == 1"
[19:49:53.251]        // =>  FALSE
[19:49:53.251]      // skip if-block "protType == 1"
[19:49:53.251]    </control>
[19:49:53.251]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:53.251]      // if-block "protType == 2"
[19:49:53.251]        // =>  TRUE
[19:49:53.252]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:53.252]        // if-block "isSWJ"
[19:49:53.252]          // =>  TRUE
[19:49:53.252]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:53.252]          // if-block "hasDormant"
[19:49:53.252]            // =>  FALSE
[19:49:53.252]          // skip if-block "hasDormant"
[19:49:53.254]        </control>
[19:49:53.254]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:53.254]          // if-block "!hasDormant"
[19:49:53.254]            // =>  TRUE
[19:49:53.254]          <block atomic="false" info="">
[19:49:53.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:53.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.256]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:53.264]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:53.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:53.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.268]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:53.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:53.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:53.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.275]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:53.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:53.279]          </block>
[19:49:53.279]          // end if-block "!hasDormant"
[19:49:53.279]        </control>
[19:49:53.279]        // end if-block "isSWJ"
[19:49:53.279]      </control>
[19:49:53.279]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:53.279]        // if-block "!isSWJ"
[19:49:53.279]          // =>  FALSE
[19:49:53.279]        // skip if-block "!isSWJ"
[19:49:53.279]      </control>
[19:49:53.279]      <block atomic="false" info="">
[19:49:53.279]        ReadDP(0x0);
[19:49:53.279]  
[19:49:53.279]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:53.279]  
[19:49:53.279]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:53.279]      </block>
[19:49:53.279]      // end if-block "protType == 2"
[19:49:53.279]    </control>
[19:49:53.279]  </sequence>
[19:49:53.279]  
[19:49:53.532]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:53.532]  
[19:49:53.534]  <debugvars>
[19:49:53.534]    // Pre-defined
[19:49:53.534]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:53.534]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:53.534]    __dp=0x00000000
[19:49:53.534]    __ap=0x00000000
[19:49:53.534]    __traceout=0x00000000      (Trace Disabled)
[19:49:53.534]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:53.534]    __FlashAddr=0x00000000
[19:49:53.534]    __FlashLen=0x00000000
[19:49:53.534]    __FlashArg=0x00000000
[19:49:53.534]    __FlashOp=0x00000000
[19:49:53.534]    __Result=0x00000000
[19:49:53.534]  </debugvars>
[19:49:53.534]  
[19:49:53.534]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:53.534]    <block atomic="false" info="">
[19:49:53.534]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:53.534]        // -> [isSWJ <= 0x00000001]
[19:49:53.534]      __var hasDormant = __protocol & 0x00020000;
[19:49:53.534]        // -> [hasDormant <= 0x00000000]
[19:49:53.534]      __var protType   = __protocol & 0x0000FFFF;
[19:49:53.534]        // -> [protType <= 0x00000002]
[19:49:53.534]    </block>
[19:49:53.534]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:53.534]      // if-block "protType == 1"
[19:49:53.534]        // =>  FALSE
[19:49:53.534]      // skip if-block "protType == 1"
[19:49:53.534]    </control>
[19:49:53.534]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:53.534]      // if-block "protType == 2"
[19:49:53.537]        // =>  TRUE
[19:49:53.537]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:53.537]        // if-block "isSWJ"
[19:49:53.537]          // =>  TRUE
[19:49:53.537]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:53.537]          // if-block "hasDormant"
[19:49:53.537]            // =>  FALSE
[19:49:53.537]          // skip if-block "hasDormant"
[19:49:53.537]        </control>
[19:49:53.537]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:53.537]          // if-block "!hasDormant"
[19:49:53.538]            // =>  TRUE
[19:49:53.538]          <block atomic="false" info="">
[19:49:53.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:53.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.541]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:53.542]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:53.542]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:53.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.545]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:53.549]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:53.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:53.552]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.552]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:53.562]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:53.562]          </block>
[19:49:53.562]          // end if-block "!hasDormant"
[19:49:53.562]        </control>
[19:49:53.562]        // end if-block "isSWJ"
[19:49:53.562]      </control>
[19:49:53.562]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:53.562]        // if-block "!isSWJ"
[19:49:53.562]          // =>  FALSE
[19:49:53.562]        // skip if-block "!isSWJ"
[19:49:53.562]      </control>
[19:49:53.562]      <block atomic="false" info="">
[19:49:53.564]        ReadDP(0x0);
[19:49:53.564]  
[19:49:53.564]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:53.564]  
[19:49:53.564]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:53.564]      </block>
[19:49:53.564]      // end if-block "protType == 2"
[19:49:53.564]    </control>
[19:49:53.564]  </sequence>
[19:49:53.564]  
[19:49:53.817]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:53.817]  
[19:49:53.818]  <debugvars>
[19:49:53.818]    // Pre-defined
[19:49:53.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:53.818]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:53.818]    __dp=0x00000000
[19:49:53.818]    __ap=0x00000000
[19:49:53.818]    __traceout=0x00000000      (Trace Disabled)
[19:49:53.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:53.818]    __FlashAddr=0x00000000
[19:49:53.818]    __FlashLen=0x00000000
[19:49:53.818]    __FlashArg=0x00000000
[19:49:53.818]    __FlashOp=0x00000000
[19:49:53.818]    __Result=0x00000000
[19:49:53.818]  </debugvars>
[19:49:53.818]  
[19:49:53.818]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:53.818]    <block atomic="false" info="">
[19:49:53.818]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:53.818]        // -> [isSWJ <= 0x00000001]
[19:49:53.818]      __var hasDormant = __protocol & 0x00020000;
[19:49:53.818]        // -> [hasDormant <= 0x00000000]
[19:49:53.818]      __var protType   = __protocol & 0x0000FFFF;
[19:49:53.820]        // -> [protType <= 0x00000002]
[19:49:53.820]    </block>
[19:49:53.820]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:53.820]      // if-block "protType == 1"
[19:49:53.820]        // =>  FALSE
[19:49:53.820]      // skip if-block "protType == 1"
[19:49:53.820]    </control>
[19:49:53.820]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:53.820]      // if-block "protType == 2"
[19:49:53.821]        // =>  TRUE
[19:49:53.821]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:53.821]        // if-block "isSWJ"
[19:49:53.821]          // =>  TRUE
[19:49:53.821]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:53.821]          // if-block "hasDormant"
[19:49:53.821]            // =>  FALSE
[19:49:53.821]          // skip if-block "hasDormant"
[19:49:53.821]        </control>
[19:49:53.821]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:53.821]          // if-block "!hasDormant"
[19:49:53.821]            // =>  TRUE
[19:49:53.821]          <block atomic="false" info="">
[19:49:53.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:53.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.825]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:53.829]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:53.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:53.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.834]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:53.837]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:53.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:53.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:53.840]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:53.847]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:53.847]          </block>
[19:49:53.847]          // end if-block "!hasDormant"
[19:49:53.847]        </control>
[19:49:53.847]        // end if-block "isSWJ"
[19:49:53.847]      </control>
[19:49:53.847]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:53.847]        // if-block "!isSWJ"
[19:49:53.847]          // =>  FALSE
[19:49:53.847]        // skip if-block "!isSWJ"
[19:49:53.847]      </control>
[19:49:53.847]      <block atomic="false" info="">
[19:49:53.847]        ReadDP(0x0);
[19:49:53.853]  
[19:49:53.853]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:53.853]  
[19:49:53.853]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:53.853]      </block>
[19:49:53.853]      // end if-block "protType == 2"
[19:49:53.853]    </control>
[19:49:53.853]  </sequence>
[19:49:53.853]  
[19:49:54.111]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:54.111]  
[19:49:54.112]  <debugvars>
[19:49:54.112]    // Pre-defined
[19:49:54.112]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:54.112]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:54.112]    __dp=0x00000000
[19:49:54.112]    __ap=0x00000000
[19:49:54.112]    __traceout=0x00000000      (Trace Disabled)
[19:49:54.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:54.112]    __FlashAddr=0x00000000
[19:49:54.112]    __FlashLen=0x00000000
[19:49:54.112]    __FlashArg=0x00000000
[19:49:54.112]    __FlashOp=0x00000000
[19:49:54.112]    __Result=0x00000000
[19:49:54.112]  </debugvars>
[19:49:54.112]  
[19:49:54.112]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:54.112]    <block atomic="false" info="">
[19:49:54.112]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:54.112]        // -> [isSWJ <= 0x00000001]
[19:49:54.112]      __var hasDormant = __protocol & 0x00020000;
[19:49:54.112]        // -> [hasDormant <= 0x00000000]
[19:49:54.112]      __var protType   = __protocol & 0x0000FFFF;
[19:49:54.112]        // -> [protType <= 0x00000002]
[19:49:54.112]    </block>
[19:49:54.112]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:54.112]      // if-block "protType == 1"
[19:49:54.112]        // =>  FALSE
[19:49:54.112]      // skip if-block "protType == 1"
[19:49:54.112]    </control>
[19:49:54.112]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:54.112]      // if-block "protType == 2"
[19:49:54.112]        // =>  TRUE
[19:49:54.112]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:54.112]        // if-block "isSWJ"
[19:49:54.112]          // =>  TRUE
[19:49:54.112]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:54.112]          // if-block "hasDormant"
[19:49:54.112]            // =>  FALSE
[19:49:54.112]          // skip if-block "hasDormant"
[19:49:54.112]        </control>
[19:49:54.112]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:54.112]          // if-block "!hasDormant"
[19:49:54.112]            // =>  TRUE
[19:49:54.112]          <block atomic="false" info="">
[19:49:54.112]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:54.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.121]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:54.121]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:54.121]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:54.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.133]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:54.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:54.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:54.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.133]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:54.143]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:54.143]          </block>
[19:49:54.143]          // end if-block "!hasDormant"
[19:49:54.143]        </control>
[19:49:54.143]        // end if-block "isSWJ"
[19:49:54.143]      </control>
[19:49:54.143]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:54.143]        // if-block "!isSWJ"
[19:49:54.143]          // =>  FALSE
[19:49:54.143]        // skip if-block "!isSWJ"
[19:49:54.143]      </control>
[19:49:54.143]      <block atomic="false" info="">
[19:49:54.143]        ReadDP(0x0);
[19:49:54.153]  
[19:49:54.153]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:54.153]  
[19:49:54.153]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:54.153]      </block>
[19:49:54.153]      // end if-block "protType == 2"
[19:49:54.153]    </control>
[19:49:54.153]  </sequence>
[19:49:54.153]  
[19:49:54.405]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:54.405]  
[19:49:54.407]  <debugvars>
[19:49:54.407]    // Pre-defined
[19:49:54.407]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:54.407]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:54.407]    __dp=0x00000000
[19:49:54.407]    __ap=0x00000000
[19:49:54.407]    __traceout=0x00000000      (Trace Disabled)
[19:49:54.407]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:54.407]    __FlashAddr=0x00000000
[19:49:54.407]    __FlashLen=0x00000000
[19:49:54.407]    __FlashArg=0x00000000
[19:49:54.407]    __FlashOp=0x00000000
[19:49:54.407]    __Result=0x00000000
[19:49:54.407]  </debugvars>
[19:49:54.407]  
[19:49:54.407]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:54.407]    <block atomic="false" info="">
[19:49:54.407]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:54.407]        // -> [isSWJ <= 0x00000001]
[19:49:54.407]      __var hasDormant = __protocol & 0x00020000;
[19:49:54.407]        // -> [hasDormant <= 0x00000000]
[19:49:54.407]      __var protType   = __protocol & 0x0000FFFF;
[19:49:54.407]        // -> [protType <= 0x00000002]
[19:49:54.407]    </block>
[19:49:54.407]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:54.407]      // if-block "protType == 1"
[19:49:54.407]        // =>  FALSE
[19:49:54.407]      // skip if-block "protType == 1"
[19:49:54.407]    </control>
[19:49:54.407]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:54.407]      // if-block "protType == 2"
[19:49:54.407]        // =>  TRUE
[19:49:54.407]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:54.407]        // if-block "isSWJ"
[19:49:54.407]          // =>  TRUE
[19:49:54.407]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:54.407]          // if-block "hasDormant"
[19:49:54.407]            // =>  FALSE
[19:49:54.407]          // skip if-block "hasDormant"
[19:49:54.407]        </control>
[19:49:54.407]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:54.407]          // if-block "!hasDormant"
[19:49:54.407]            // =>  TRUE
[19:49:54.407]          <block atomic="false" info="">
[19:49:54.407]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:54.407]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.407]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:54.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:54.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:54.418]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.418]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:54.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:54.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:54.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.427]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:54.436]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:54.436]          </block>
[19:49:54.436]          // end if-block "!hasDormant"
[19:49:54.436]        </control>
[19:49:54.436]        // end if-block "isSWJ"
[19:49:54.436]      </control>
[19:49:54.436]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:54.436]        // if-block "!isSWJ"
[19:49:54.436]          // =>  FALSE
[19:49:54.436]        // skip if-block "!isSWJ"
[19:49:54.436]      </control>
[19:49:54.436]      <block atomic="false" info="">
[19:49:54.436]        ReadDP(0x0);
[19:49:54.436]  
[19:49:54.436]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:54.436]  
[19:49:54.436]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:54.436]      </block>
[19:49:54.436]      // end if-block "protType == 2"
[19:49:54.436]    </control>
[19:49:54.436]  </sequence>
[19:49:54.436]  
[19:49:54.688]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:54.688]  
[19:49:54.688]  <debugvars>
[19:49:54.688]    // Pre-defined
[19:49:54.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:54.688]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:54.688]    __dp=0x00000000
[19:49:54.688]    __ap=0x00000000
[19:49:54.688]    __traceout=0x00000000      (Trace Disabled)
[19:49:54.688]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:54.688]    __FlashAddr=0x00000000
[19:49:54.688]    __FlashLen=0x00000000
[19:49:54.688]    __FlashArg=0x00000000
[19:49:54.688]    __FlashOp=0x00000000
[19:49:54.688]    __Result=0x00000000
[19:49:54.688]  </debugvars>
[19:49:54.688]  
[19:49:54.688]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:54.688]    <block atomic="false" info="">
[19:49:54.688]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:54.688]        // -> [isSWJ <= 0x00000001]
[19:49:54.688]      __var hasDormant = __protocol & 0x00020000;
[19:49:54.688]        // -> [hasDormant <= 0x00000000]
[19:49:54.688]      __var protType   = __protocol & 0x0000FFFF;
[19:49:54.688]        // -> [protType <= 0x00000002]
[19:49:54.688]    </block>
[19:49:54.688]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:54.688]      // if-block "protType == 1"
[19:49:54.688]        // =>  FALSE
[19:49:54.688]      // skip if-block "protType == 1"
[19:49:54.688]    </control>
[19:49:54.688]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:54.688]      // if-block "protType == 2"
[19:49:54.688]        // =>  TRUE
[19:49:54.688]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:54.688]        // if-block "isSWJ"
[19:49:54.688]          // =>  TRUE
[19:49:54.688]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:54.688]          // if-block "hasDormant"
[19:49:54.688]            // =>  FALSE
[19:49:54.688]          // skip if-block "hasDormant"
[19:49:54.688]        </control>
[19:49:54.688]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:54.688]          // if-block "!hasDormant"
[19:49:54.688]            // =>  TRUE
[19:49:54.688]          <block atomic="false" info="">
[19:49:54.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:54.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.695]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:54.698]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:54.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:54.708]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.708]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:54.708]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:54.708]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:54.708]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.708]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:54.718]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:54.718]          </block>
[19:49:54.718]          // end if-block "!hasDormant"
[19:49:54.718]        </control>
[19:49:54.718]        // end if-block "isSWJ"
[19:49:54.718]      </control>
[19:49:54.718]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:54.718]        // if-block "!isSWJ"
[19:49:54.718]          // =>  FALSE
[19:49:54.718]        // skip if-block "!isSWJ"
[19:49:54.718]      </control>
[19:49:54.718]      <block atomic="false" info="">
[19:49:54.718]        ReadDP(0x0);
[19:49:54.729]  
[19:49:54.729]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:54.729]  
[19:49:54.731]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:54.731]      </block>
[19:49:54.731]      // end if-block "protType == 2"
[19:49:54.731]    </control>
[19:49:54.731]  </sequence>
[19:49:54.731]  
[19:49:54.982]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:54.982]  
[19:49:54.983]  <debugvars>
[19:49:54.983]    // Pre-defined
[19:49:54.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:54.983]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:54.983]    __dp=0x00000000
[19:49:54.983]    __ap=0x00000000
[19:49:54.983]    __traceout=0x00000000      (Trace Disabled)
[19:49:54.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:54.983]    __FlashAddr=0x00000000
[19:49:54.983]    __FlashLen=0x00000000
[19:49:54.983]    __FlashArg=0x00000000
[19:49:54.983]    __FlashOp=0x00000000
[19:49:54.983]    __Result=0x00000000
[19:49:54.983]  </debugvars>
[19:49:54.983]  
[19:49:54.983]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:54.983]    <block atomic="false" info="">
[19:49:54.983]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:54.983]        // -> [isSWJ <= 0x00000001]
[19:49:54.983]      __var hasDormant = __protocol & 0x00020000;
[19:49:54.983]        // -> [hasDormant <= 0x00000000]
[19:49:54.986]      __var protType   = __protocol & 0x0000FFFF;
[19:49:54.986]        // -> [protType <= 0x00000002]
[19:49:54.986]    </block>
[19:49:54.986]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:54.986]      // if-block "protType == 1"
[19:49:54.986]        // =>  FALSE
[19:49:54.986]      // skip if-block "protType == 1"
[19:49:54.986]    </control>
[19:49:54.986]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:54.986]      // if-block "protType == 2"
[19:49:54.986]        // =>  TRUE
[19:49:54.986]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:54.987]        // if-block "isSWJ"
[19:49:54.987]          // =>  TRUE
[19:49:54.987]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:54.987]          // if-block "hasDormant"
[19:49:54.987]            // =>  FALSE
[19:49:54.987]          // skip if-block "hasDormant"
[19:49:54.987]        </control>
[19:49:54.987]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:54.987]          // if-block "!hasDormant"
[19:49:54.987]            // =>  TRUE
[19:49:54.987]          <block atomic="false" info="">
[19:49:54.987]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:54.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.992]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:54.995]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:54.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:54.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:54.996]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:55.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:55.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:55.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.006]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:55.008]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:55.012]          </block>
[19:49:55.012]          // end if-block "!hasDormant"
[19:49:55.012]        </control>
[19:49:55.012]        // end if-block "isSWJ"
[19:49:55.012]      </control>
[19:49:55.012]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:55.012]        // if-block "!isSWJ"
[19:49:55.012]          // =>  FALSE
[19:49:55.012]        // skip if-block "!isSWJ"
[19:49:55.012]      </control>
[19:49:55.012]      <block atomic="false" info="">
[19:49:55.012]        ReadDP(0x0);
[19:49:55.012]  
[19:49:55.012]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:55.012]  
[19:49:55.012]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:55.012]      </block>
[19:49:55.012]      // end if-block "protType == 2"
[19:49:55.012]    </control>
[19:49:55.012]  </sequence>
[19:49:55.012]  
[19:49:55.264]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:55.264]  
[19:49:55.264]  <debugvars>
[19:49:55.264]    // Pre-defined
[19:49:55.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:55.264]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:55.264]    __dp=0x00000000
[19:49:55.264]    __ap=0x00000000
[19:49:55.264]    __traceout=0x00000000      (Trace Disabled)
[19:49:55.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:55.264]    __FlashAddr=0x00000000
[19:49:55.264]    __FlashLen=0x00000000
[19:49:55.264]    __FlashArg=0x00000000
[19:49:55.264]    __FlashOp=0x00000000
[19:49:55.264]    __Result=0x00000000
[19:49:55.264]  </debugvars>
[19:49:55.264]  
[19:49:55.264]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:55.264]    <block atomic="false" info="">
[19:49:55.264]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:55.264]        // -> [isSWJ <= 0x00000001]
[19:49:55.264]      __var hasDormant = __protocol & 0x00020000;
[19:49:55.264]        // -> [hasDormant <= 0x00000000]
[19:49:55.264]      __var protType   = __protocol & 0x0000FFFF;
[19:49:55.264]        // -> [protType <= 0x00000002]
[19:49:55.264]    </block>
[19:49:55.264]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:55.264]      // if-block "protType == 1"
[19:49:55.264]        // =>  FALSE
[19:49:55.264]      // skip if-block "protType == 1"
[19:49:55.264]    </control>
[19:49:55.264]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:55.264]      // if-block "protType == 2"
[19:49:55.264]        // =>  TRUE
[19:49:55.264]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:55.264]        // if-block "isSWJ"
[19:49:55.264]          // =>  TRUE
[19:49:55.264]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:55.264]          // if-block "hasDormant"
[19:49:55.264]            // =>  FALSE
[19:49:55.264]          // skip if-block "hasDormant"
[19:49:55.264]        </control>
[19:49:55.264]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:55.264]          // if-block "!hasDormant"
[19:49:55.264]            // =>  TRUE
[19:49:55.264]          <block atomic="false" info="">
[19:49:55.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:55.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.264]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:55.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:55.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:55.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.276]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:55.284]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:55.284]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:55.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.286]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:55.286]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:55.286]          </block>
[19:49:55.286]          // end if-block "!hasDormant"
[19:49:55.286]        </control>
[19:49:55.286]        // end if-block "isSWJ"
[19:49:55.286]      </control>
[19:49:55.286]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:55.286]        // if-block "!isSWJ"
[19:49:55.286]          // =>  FALSE
[19:49:55.286]        // skip if-block "!isSWJ"
[19:49:55.286]      </control>
[19:49:55.286]      <block atomic="false" info="">
[19:49:55.286]        ReadDP(0x0);
[19:49:55.296]  
[19:49:55.296]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:55.296]  
[19:49:55.296]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:55.296]      </block>
[19:49:55.296]      // end if-block "protType == 2"
[19:49:55.296]    </control>
[19:49:55.296]  </sequence>
[19:49:55.296]  
[19:49:55.546]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:55.546]  
[19:49:55.548]  <debugvars>
[19:49:55.548]    // Pre-defined
[19:49:55.548]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:55.548]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:55.548]    __dp=0x00000000
[19:49:55.548]    __ap=0x00000000
[19:49:55.548]    __traceout=0x00000000      (Trace Disabled)
[19:49:55.548]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:55.548]    __FlashAddr=0x00000000
[19:49:55.548]    __FlashLen=0x00000000
[19:49:55.548]    __FlashArg=0x00000000
[19:49:55.548]    __FlashOp=0x00000000
[19:49:55.548]    __Result=0x00000000
[19:49:55.548]  </debugvars>
[19:49:55.548]  
[19:49:55.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:55.548]    <block atomic="false" info="">
[19:49:55.548]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:55.548]        // -> [isSWJ <= 0x00000001]
[19:49:55.548]      __var hasDormant = __protocol & 0x00020000;
[19:49:55.548]        // -> [hasDormant <= 0x00000000]
[19:49:55.548]      __var protType   = __protocol & 0x0000FFFF;
[19:49:55.548]        // -> [protType <= 0x00000002]
[19:49:55.548]    </block>
[19:49:55.548]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:55.548]      // if-block "protType == 1"
[19:49:55.548]        // =>  FALSE
[19:49:55.548]      // skip if-block "protType == 1"
[19:49:55.548]    </control>
[19:49:55.548]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:55.548]      // if-block "protType == 2"
[19:49:55.548]        // =>  TRUE
[19:49:55.548]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:55.548]        // if-block "isSWJ"
[19:49:55.548]          // =>  TRUE
[19:49:55.548]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:55.548]          // if-block "hasDormant"
[19:49:55.548]            // =>  FALSE
[19:49:55.548]          // skip if-block "hasDormant"
[19:49:55.548]        </control>
[19:49:55.548]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:55.548]          // if-block "!hasDormant"
[19:49:55.548]            // =>  TRUE
[19:49:55.548]          <block atomic="false" info="">
[19:49:55.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:55.548]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.548]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:55.557]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:55.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:55.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.557]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:55.567]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:55.567]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:55.569]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.569]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:55.569]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:55.569]          </block>
[19:49:55.569]          // end if-block "!hasDormant"
[19:49:55.569]        </control>
[19:49:55.569]        // end if-block "isSWJ"
[19:49:55.569]      </control>
[19:49:55.569]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:55.569]        // if-block "!isSWJ"
[19:49:55.569]          // =>  FALSE
[19:49:55.569]        // skip if-block "!isSWJ"
[19:49:55.569]      </control>
[19:49:55.569]      <block atomic="false" info="">
[19:49:55.569]        ReadDP(0x0);
[19:49:55.577]  
[19:49:55.577]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:55.577]  
[19:49:55.577]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:55.577]      </block>
[19:49:55.577]      // end if-block "protType == 2"
[19:49:55.577]    </control>
[19:49:55.577]  </sequence>
[19:49:55.577]  
[19:49:55.828]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:55.828]  
[19:49:55.829]  <debugvars>
[19:49:55.829]    // Pre-defined
[19:49:55.829]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:55.829]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:55.829]    __dp=0x00000000
[19:49:55.829]    __ap=0x00000000
[19:49:55.829]    __traceout=0x00000000      (Trace Disabled)
[19:49:55.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:55.829]    __FlashAddr=0x00000000
[19:49:55.829]    __FlashLen=0x00000000
[19:49:55.829]    __FlashArg=0x00000000
[19:49:55.829]    __FlashOp=0x00000000
[19:49:55.829]    __Result=0x00000000
[19:49:55.829]  </debugvars>
[19:49:55.829]  
[19:49:55.829]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:55.829]    <block atomic="false" info="">
[19:49:55.829]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:55.829]        // -> [isSWJ <= 0x00000001]
[19:49:55.829]      __var hasDormant = __protocol & 0x00020000;
[19:49:55.829]        // -> [hasDormant <= 0x00000000]
[19:49:55.829]      __var protType   = __protocol & 0x0000FFFF;
[19:49:55.829]        // -> [protType <= 0x00000002]
[19:49:55.829]    </block>
[19:49:55.829]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:55.829]      // if-block "protType == 1"
[19:49:55.829]        // =>  FALSE
[19:49:55.829]      // skip if-block "protType == 1"
[19:49:55.829]    </control>
[19:49:55.829]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:55.829]      // if-block "protType == 2"
[19:49:55.829]        // =>  TRUE
[19:49:55.829]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:55.829]        // if-block "isSWJ"
[19:49:55.829]          // =>  TRUE
[19:49:55.829]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:55.829]          // if-block "hasDormant"
[19:49:55.829]            // =>  FALSE
[19:49:55.829]          // skip if-block "hasDormant"
[19:49:55.829]        </control>
[19:49:55.829]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:55.829]          // if-block "!hasDormant"
[19:49:55.829]            // =>  TRUE
[19:49:55.829]          <block atomic="false" info="">
[19:49:55.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:55.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.839]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:55.839]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:55.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:55.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.859]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:55.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:55.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:55.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:55.859]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:55.869]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:55.869]          </block>
[19:49:55.869]          // end if-block "!hasDormant"
[19:49:55.869]        </control>
[19:49:55.869]        // end if-block "isSWJ"
[19:49:55.869]      </control>
[19:49:55.872]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:55.872]        // if-block "!isSWJ"
[19:49:55.872]          // =>  FALSE
[19:49:55.872]        // skip if-block "!isSWJ"
[19:49:55.872]      </control>
[19:49:55.872]      <block atomic="false" info="">
[19:49:55.872]        ReadDP(0x0);
[19:49:55.879]  
[19:49:55.879]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:55.879]  
[19:49:55.879]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:55.879]      </block>
[19:49:55.879]      // end if-block "protType == 2"
[19:49:55.879]    </control>
[19:49:55.879]  </sequence>
[19:49:55.879]  
[19:49:56.132]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:56.132]  
[19:49:56.132]  <debugvars>
[19:49:56.132]    // Pre-defined
[19:49:56.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:56.132]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:56.132]    __dp=0x00000000
[19:49:56.132]    __ap=0x00000000
[19:49:56.132]    __traceout=0x00000000      (Trace Disabled)
[19:49:56.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:56.132]    __FlashAddr=0x00000000
[19:49:56.132]    __FlashLen=0x00000000
[19:49:56.132]    __FlashArg=0x00000000
[19:49:56.132]    __FlashOp=0x00000000
[19:49:56.132]    __Result=0x00000000
[19:49:56.132]  </debugvars>
[19:49:56.132]  
[19:49:56.132]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:56.132]    <block atomic="false" info="">
[19:49:56.132]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:56.132]        // -> [isSWJ <= 0x00000001]
[19:49:56.132]      __var hasDormant = __protocol & 0x00020000;
[19:49:56.132]        // -> [hasDormant <= 0x00000000]
[19:49:56.132]      __var protType   = __protocol & 0x0000FFFF;
[19:49:56.132]        // -> [protType <= 0x00000002]
[19:49:56.132]    </block>
[19:49:56.132]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:56.132]      // if-block "protType == 1"
[19:49:56.132]        // =>  FALSE
[19:49:56.132]      // skip if-block "protType == 1"
[19:49:56.132]    </control>
[19:49:56.132]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:56.132]      // if-block "protType == 2"
[19:49:56.132]        // =>  TRUE
[19:49:56.132]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:56.132]        // if-block "isSWJ"
[19:49:56.132]          // =>  TRUE
[19:49:56.132]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:56.132]          // if-block "hasDormant"
[19:49:56.132]            // =>  FALSE
[19:49:56.132]          // skip if-block "hasDormant"
[19:49:56.132]        </control>
[19:49:56.132]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:56.132]          // if-block "!hasDormant"
[19:49:56.132]            // =>  TRUE
[19:49:56.132]          <block atomic="false" info="">
[19:49:56.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:56.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.162]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:56.172]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:56.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:56.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.172]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:56.182]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:56.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:56.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.182]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:56.192]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:56.192]          </block>
[19:49:56.192]          // end if-block "!hasDormant"
[19:49:56.192]        </control>
[19:49:56.192]        // end if-block "isSWJ"
[19:49:56.192]      </control>
[19:49:56.192]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:56.192]        // if-block "!isSWJ"
[19:49:56.192]          // =>  FALSE
[19:49:56.192]        // skip if-block "!isSWJ"
[19:49:56.192]      </control>
[19:49:56.192]      <block atomic="false" info="">
[19:49:56.192]        ReadDP(0x0);
[19:49:56.197]  
[19:49:56.197]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:56.197]  
[19:49:56.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:56.202]      </block>
[19:49:56.202]      // end if-block "protType == 2"
[19:49:56.202]    </control>
[19:49:56.202]  </sequence>
[19:49:56.202]  
[19:49:56.453]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:56.453]  
[19:49:56.455]  <debugvars>
[19:49:56.455]    // Pre-defined
[19:49:56.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:56.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:56.455]    __dp=0x00000000
[19:49:56.455]    __ap=0x00000000
[19:49:56.455]    __traceout=0x00000000      (Trace Disabled)
[19:49:56.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:56.455]    __FlashAddr=0x00000000
[19:49:56.455]    __FlashLen=0x00000000
[19:49:56.455]    __FlashArg=0x00000000
[19:49:56.455]    __FlashOp=0x00000000
[19:49:56.455]    __Result=0x00000000
[19:49:56.455]  </debugvars>
[19:49:56.455]  
[19:49:56.455]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:56.455]    <block atomic="false" info="">
[19:49:56.455]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:56.455]        // -> [isSWJ <= 0x00000001]
[19:49:56.455]      __var hasDormant = __protocol & 0x00020000;
[19:49:56.455]        // -> [hasDormant <= 0x00000000]
[19:49:56.455]      __var protType   = __protocol & 0x0000FFFF;
[19:49:56.455]        // -> [protType <= 0x00000002]
[19:49:56.455]    </block>
[19:49:56.455]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:56.455]      // if-block "protType == 1"
[19:49:56.455]        // =>  FALSE
[19:49:56.455]      // skip if-block "protType == 1"
[19:49:56.455]    </control>
[19:49:56.455]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:56.455]      // if-block "protType == 2"
[19:49:56.455]        // =>  TRUE
[19:49:56.455]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:56.455]        // if-block "isSWJ"
[19:49:56.455]          // =>  TRUE
[19:49:56.455]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:56.455]          // if-block "hasDormant"
[19:49:56.455]            // =>  FALSE
[19:49:56.455]          // skip if-block "hasDormant"
[19:49:56.455]        </control>
[19:49:56.455]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:56.455]          // if-block "!hasDormant"
[19:49:56.455]            // =>  TRUE
[19:49:56.455]          <block atomic="false" info="">
[19:49:56.455]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:56.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.455]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:56.474]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:56.474]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:56.474]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.474]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:56.474]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:56.474]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:56.484]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.484]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:56.484]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:56.484]          </block>
[19:49:56.484]          // end if-block "!hasDormant"
[19:49:56.484]        </control>
[19:49:56.484]        // end if-block "isSWJ"
[19:49:56.484]      </control>
[19:49:56.484]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:56.484]        // if-block "!isSWJ"
[19:49:56.484]          // =>  FALSE
[19:49:56.484]        // skip if-block "!isSWJ"
[19:49:56.484]      </control>
[19:49:56.484]      <block atomic="false" info="">
[19:49:56.484]        ReadDP(0x0);
[19:49:56.484]  
[19:49:56.484]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:56.484]  
[19:49:56.484]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:56.484]      </block>
[19:49:56.484]      // end if-block "protType == 2"
[19:49:56.484]    </control>
[19:49:56.484]  </sequence>
[19:49:56.484]  
[19:49:56.734]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:56.734]  
[19:49:56.734]  <debugvars>
[19:49:56.734]    // Pre-defined
[19:49:56.734]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:56.734]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:56.734]    __dp=0x00000000
[19:49:56.734]    __ap=0x00000000
[19:49:56.734]    __traceout=0x00000000      (Trace Disabled)
[19:49:56.734]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:56.734]    __FlashAddr=0x00000000
[19:49:56.734]    __FlashLen=0x00000000
[19:49:56.734]    __FlashArg=0x00000000
[19:49:56.734]    __FlashOp=0x00000000
[19:49:56.734]    __Result=0x00000000
[19:49:56.734]  </debugvars>
[19:49:56.734]  
[19:49:56.734]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:56.734]    <block atomic="false" info="">
[19:49:56.734]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:56.734]        // -> [isSWJ <= 0x00000001]
[19:49:56.734]      __var hasDormant = __protocol & 0x00020000;
[19:49:56.734]        // -> [hasDormant <= 0x00000000]
[19:49:56.734]      __var protType   = __protocol & 0x0000FFFF;
[19:49:56.734]        // -> [protType <= 0x00000002]
[19:49:56.734]    </block>
[19:49:56.734]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:56.734]      // if-block "protType == 1"
[19:49:56.734]        // =>  FALSE
[19:49:56.734]      // skip if-block "protType == 1"
[19:49:56.734]    </control>
[19:49:56.734]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:56.734]      // if-block "protType == 2"
[19:49:56.734]        // =>  TRUE
[19:49:56.734]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:56.734]        // if-block "isSWJ"
[19:49:56.734]          // =>  TRUE
[19:49:56.734]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:56.734]          // if-block "hasDormant"
[19:49:56.734]            // =>  FALSE
[19:49:56.734]          // skip if-block "hasDormant"
[19:49:56.734]        </control>
[19:49:56.734]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:56.734]          // if-block "!hasDormant"
[19:49:56.734]            // =>  TRUE
[19:49:56.734]          <block atomic="false" info="">
[19:49:56.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:56.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.744]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:56.744]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:56.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:56.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.744]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:56.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:56.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:56.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:56.764]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:56.764]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:56.764]          </block>
[19:49:56.764]          // end if-block "!hasDormant"
[19:49:56.764]        </control>
[19:49:56.764]        // end if-block "isSWJ"
[19:49:56.764]      </control>
[19:49:56.764]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:56.764]        // if-block "!isSWJ"
[19:49:56.764]          // =>  FALSE
[19:49:56.764]        // skip if-block "!isSWJ"
[19:49:56.764]      </control>
[19:49:56.764]      <block atomic="false" info="">
[19:49:56.764]        ReadDP(0x0);
[19:49:56.774]  
[19:49:56.774]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:56.774]  
[19:49:56.774]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:56.774]      </block>
[19:49:56.774]      // end if-block "protType == 2"
[19:49:56.774]    </control>
[19:49:56.774]  </sequence>
[19:49:56.774]  
[19:49:57.025]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:57.025]  
[19:49:57.025]  <debugvars>
[19:49:57.025]    // Pre-defined
[19:49:57.025]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:57.025]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:57.025]    __dp=0x00000000
[19:49:57.025]    __ap=0x00000000
[19:49:57.025]    __traceout=0x00000000      (Trace Disabled)
[19:49:57.025]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:57.025]    __FlashAddr=0x00000000
[19:49:57.025]    __FlashLen=0x00000000
[19:49:57.025]    __FlashArg=0x00000000
[19:49:57.025]    __FlashOp=0x00000000
[19:49:57.025]    __Result=0x00000000
[19:49:57.025]  </debugvars>
[19:49:57.025]  
[19:49:57.025]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:57.025]    <block atomic="false" info="">
[19:49:57.025]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:57.025]        // -> [isSWJ <= 0x00000001]
[19:49:57.025]      __var hasDormant = __protocol & 0x00020000;
[19:49:57.025]        // -> [hasDormant <= 0x00000000]
[19:49:57.025]      __var protType   = __protocol & 0x0000FFFF;
[19:49:57.025]        // -> [protType <= 0x00000002]
[19:49:57.025]    </block>
[19:49:57.025]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:57.025]      // if-block "protType == 1"
[19:49:57.025]        // =>  FALSE
[19:49:57.025]      // skip if-block "protType == 1"
[19:49:57.025]    </control>
[19:49:57.025]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:57.025]      // if-block "protType == 2"
[19:49:57.025]        // =>  TRUE
[19:49:57.025]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:57.025]        // if-block "isSWJ"
[19:49:57.025]          // =>  TRUE
[19:49:57.025]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:57.025]          // if-block "hasDormant"
[19:49:57.025]            // =>  FALSE
[19:49:57.025]          // skip if-block "hasDormant"
[19:49:57.025]        </control>
[19:49:57.025]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:57.025]          // if-block "!hasDormant"
[19:49:57.025]            // =>  TRUE
[19:49:57.025]          <block atomic="false" info="">
[19:49:57.025]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:57.025]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.035]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:57.038]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:57.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:57.038]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.038]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:57.046]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:57.046]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:57.046]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.046]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:57.046]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:57.046]          </block>
[19:49:57.046]          // end if-block "!hasDormant"
[19:49:57.046]        </control>
[19:49:57.046]        // end if-block "isSWJ"
[19:49:57.046]      </control>
[19:49:57.046]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:57.046]        // if-block "!isSWJ"
[19:49:57.046]          // =>  FALSE
[19:49:57.046]        // skip if-block "!isSWJ"
[19:49:57.046]      </control>
[19:49:57.046]      <block atomic="false" info="">
[19:49:57.046]        ReadDP(0x0);
[19:49:57.056]  
[19:49:57.056]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:57.056]  
[19:49:57.056]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:57.056]      </block>
[19:49:57.056]      // end if-block "protType == 2"
[19:49:57.056]    </control>
[19:49:57.056]  </sequence>
[19:49:57.056]  
[19:49:57.315]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:57.315]  
[19:49:57.317]  <debugvars>
[19:49:57.317]    // Pre-defined
[19:49:57.317]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:57.317]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:57.317]    __dp=0x00000000
[19:49:57.317]    __ap=0x00000000
[19:49:57.317]    __traceout=0x00000000      (Trace Disabled)
[19:49:57.317]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:57.317]    __FlashAddr=0x00000000
[19:49:57.318]    __FlashLen=0x00000000
[19:49:57.318]    __FlashArg=0x00000000
[19:49:57.318]    __FlashOp=0x00000000
[19:49:57.318]    __Result=0x00000000
[19:49:57.318]  </debugvars>
[19:49:57.318]  
[19:49:57.318]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:57.318]    <block atomic="false" info="">
[19:49:57.319]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:57.319]        // -> [isSWJ <= 0x00000001]
[19:49:57.319]      __var hasDormant = __protocol & 0x00020000;
[19:49:57.319]        // -> [hasDormant <= 0x00000000]
[19:49:57.319]      __var protType   = __protocol & 0x0000FFFF;
[19:49:57.319]        // -> [protType <= 0x00000002]
[19:49:57.319]    </block>
[19:49:57.319]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:57.319]      // if-block "protType == 1"
[19:49:57.320]        // =>  FALSE
[19:49:57.320]      // skip if-block "protType == 1"
[19:49:57.320]    </control>
[19:49:57.320]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:57.320]      // if-block "protType == 2"
[19:49:57.320]        // =>  TRUE
[19:49:57.320]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:57.320]        // if-block "isSWJ"
[19:49:57.320]          // =>  TRUE
[19:49:57.321]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:57.321]          // if-block "hasDormant"
[19:49:57.321]            // =>  FALSE
[19:49:57.321]          // skip if-block "hasDormant"
[19:49:57.321]        </control>
[19:49:57.322]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:57.322]          // if-block "!hasDormant"
[19:49:57.322]            // =>  TRUE
[19:49:57.322]          <block atomic="false" info="">
[19:49:57.322]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:57.331]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.331]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:57.334]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:57.334]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:57.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.336]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:57.336]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:57.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:57.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.345]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:57.345]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:57.345]          </block>
[19:49:57.345]          // end if-block "!hasDormant"
[19:49:57.345]        </control>
[19:49:57.345]        // end if-block "isSWJ"
[19:49:57.345]      </control>
[19:49:57.345]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:57.345]        // if-block "!isSWJ"
[19:49:57.345]          // =>  FALSE
[19:49:57.345]        // skip if-block "!isSWJ"
[19:49:57.345]      </control>
[19:49:57.345]      <block atomic="false" info="">
[19:49:57.345]        ReadDP(0x0);
[19:49:57.355]  
[19:49:57.355]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:57.355]  
[19:49:57.355]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:57.355]      </block>
[19:49:57.355]      // end if-block "protType == 2"
[19:49:57.355]    </control>
[19:49:57.355]  </sequence>
[19:49:57.355]  
[19:49:57.607]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:57.607]  
[19:49:57.607]  <debugvars>
[19:49:57.607]    // Pre-defined
[19:49:57.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:57.607]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:57.607]    __dp=0x00000000
[19:49:57.607]    __ap=0x00000000
[19:49:57.607]    __traceout=0x00000000      (Trace Disabled)
[19:49:57.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:57.607]    __FlashAddr=0x00000000
[19:49:57.607]    __FlashLen=0x00000000
[19:49:57.607]    __FlashArg=0x00000000
[19:49:57.607]    __FlashOp=0x00000000
[19:49:57.607]    __Result=0x00000000
[19:49:57.607]  </debugvars>
[19:49:57.607]  
[19:49:57.607]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:57.607]    <block atomic="false" info="">
[19:49:57.607]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:57.607]        // -> [isSWJ <= 0x00000001]
[19:49:57.607]      __var hasDormant = __protocol & 0x00020000;
[19:49:57.607]        // -> [hasDormant <= 0x00000000]
[19:49:57.607]      __var protType   = __protocol & 0x0000FFFF;
[19:49:57.607]        // -> [protType <= 0x00000002]
[19:49:57.607]    </block>
[19:49:57.607]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:57.607]      // if-block "protType == 1"
[19:49:57.607]        // =>  FALSE
[19:49:57.607]      // skip if-block "protType == 1"
[19:49:57.607]    </control>
[19:49:57.607]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:57.607]      // if-block "protType == 2"
[19:49:57.607]        // =>  TRUE
[19:49:57.607]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:57.607]        // if-block "isSWJ"
[19:49:57.607]          // =>  TRUE
[19:49:57.607]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:57.607]          // if-block "hasDormant"
[19:49:57.607]            // =>  FALSE
[19:49:57.607]          // skip if-block "hasDormant"
[19:49:57.607]        </control>
[19:49:57.607]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:57.607]          // if-block "!hasDormant"
[19:49:57.607]            // =>  TRUE
[19:49:57.607]          <block atomic="false" info="">
[19:49:57.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:57.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.607]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:57.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:57.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:57.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.622]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:57.625]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:57.625]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:57.627]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.627]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:57.633]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:57.633]          </block>
[19:49:57.633]          // end if-block "!hasDormant"
[19:49:57.633]        </control>
[19:49:57.633]        // end if-block "isSWJ"
[19:49:57.633]      </control>
[19:49:57.633]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:57.633]        // if-block "!isSWJ"
[19:49:57.633]          // =>  FALSE
[19:49:57.633]        // skip if-block "!isSWJ"
[19:49:57.633]      </control>
[19:49:57.633]      <block atomic="false" info="">
[19:49:57.633]        ReadDP(0x0);
[19:49:57.637]  
[19:49:57.637]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:57.637]  
[19:49:57.637]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:57.637]      </block>
[19:49:57.637]      // end if-block "protType == 2"
[19:49:57.637]    </control>
[19:49:57.637]  </sequence>
[19:49:57.637]  
[19:49:57.889]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:57.889]  
[19:49:57.889]  <debugvars>
[19:49:57.889]    // Pre-defined
[19:49:57.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:57.889]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:57.889]    __dp=0x00000000
[19:49:57.889]    __ap=0x00000000
[19:49:57.889]    __traceout=0x00000000      (Trace Disabled)
[19:49:57.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:57.889]    __FlashAddr=0x00000000
[19:49:57.889]    __FlashLen=0x00000000
[19:49:57.889]    __FlashArg=0x00000000
[19:49:57.889]    __FlashOp=0x00000000
[19:49:57.889]    __Result=0x00000000
[19:49:57.889]  </debugvars>
[19:49:57.889]  
[19:49:57.889]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:57.889]    <block atomic="false" info="">
[19:49:57.889]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:57.889]        // -> [isSWJ <= 0x00000001]
[19:49:57.889]      __var hasDormant = __protocol & 0x00020000;
[19:49:57.889]        // -> [hasDormant <= 0x00000000]
[19:49:57.889]      __var protType   = __protocol & 0x0000FFFF;
[19:49:57.889]        // -> [protType <= 0x00000002]
[19:49:57.889]    </block>
[19:49:57.889]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:57.889]      // if-block "protType == 1"
[19:49:57.889]        // =>  FALSE
[19:49:57.889]      // skip if-block "protType == 1"
[19:49:57.889]    </control>
[19:49:57.889]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:57.889]      // if-block "protType == 2"
[19:49:57.889]        // =>  TRUE
[19:49:57.889]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:57.889]        // if-block "isSWJ"
[19:49:57.889]          // =>  TRUE
[19:49:57.889]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:57.889]          // if-block "hasDormant"
[19:49:57.889]            // =>  FALSE
[19:49:57.889]          // skip if-block "hasDormant"
[19:49:57.889]        </control>
[19:49:57.889]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:57.889]          // if-block "!hasDormant"
[19:49:57.889]            // =>  TRUE
[19:49:57.889]          <block atomic="false" info="">
[19:49:57.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:57.899]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.899]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:57.899]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:57.899]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:57.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.909]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:57.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:57.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:57.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:57.919]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:57.929]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:57.929]          </block>
[19:49:57.929]          // end if-block "!hasDormant"
[19:49:57.929]        </control>
[19:49:57.929]        // end if-block "isSWJ"
[19:49:57.929]      </control>
[19:49:57.929]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:57.929]        // if-block "!isSWJ"
[19:49:57.929]          // =>  FALSE
[19:49:57.929]        // skip if-block "!isSWJ"
[19:49:57.929]      </control>
[19:49:57.929]      <block atomic="false" info="">
[19:49:57.929]        ReadDP(0x0);
[19:49:57.939]  
[19:49:57.939]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:57.939]  
[19:49:57.939]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:57.939]      </block>
[19:49:57.939]      // end if-block "protType == 2"
[19:49:57.939]    </control>
[19:49:57.939]  </sequence>
[19:49:57.939]  
[19:49:58.191]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:58.191]  
[19:49:58.191]  <debugvars>
[19:49:58.191]    // Pre-defined
[19:49:58.191]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:58.191]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:58.191]    __dp=0x00000000
[19:49:58.191]    __ap=0x00000000
[19:49:58.191]    __traceout=0x00000000      (Trace Disabled)
[19:49:58.191]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:58.191]    __FlashAddr=0x00000000
[19:49:58.191]    __FlashLen=0x00000000
[19:49:58.191]    __FlashArg=0x00000000
[19:49:58.191]    __FlashOp=0x00000000
[19:49:58.191]    __Result=0x00000000
[19:49:58.191]  </debugvars>
[19:49:58.191]  
[19:49:58.191]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:58.191]    <block atomic="false" info="">
[19:49:58.191]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:58.191]        // -> [isSWJ <= 0x00000001]
[19:49:58.191]      __var hasDormant = __protocol & 0x00020000;
[19:49:58.191]        // -> [hasDormant <= 0x00000000]
[19:49:58.191]      __var protType   = __protocol & 0x0000FFFF;
[19:49:58.191]        // -> [protType <= 0x00000002]
[19:49:58.191]    </block>
[19:49:58.191]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:58.191]      // if-block "protType == 1"
[19:49:58.191]        // =>  FALSE
[19:49:58.191]      // skip if-block "protType == 1"
[19:49:58.191]    </control>
[19:49:58.191]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:58.191]      // if-block "protType == 2"
[19:49:58.191]        // =>  TRUE
[19:49:58.191]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:58.191]        // if-block "isSWJ"
[19:49:58.191]          // =>  TRUE
[19:49:58.191]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:58.191]          // if-block "hasDormant"
[19:49:58.196]            // =>  FALSE
[19:49:58.196]          // skip if-block "hasDormant"
[19:49:58.196]        </control>
[19:49:58.196]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:58.196]          // if-block "!hasDormant"
[19:49:58.196]            // =>  TRUE
[19:49:58.196]          <block atomic="false" info="">
[19:49:58.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:58.199]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.199]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:58.213]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:58.213]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:58.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.213]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:58.223]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:58.223]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:58.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.223]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:58.233]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:58.233]          </block>
[19:49:58.233]          // end if-block "!hasDormant"
[19:49:58.233]        </control>
[19:49:58.233]        // end if-block "isSWJ"
[19:49:58.233]      </control>
[19:49:58.233]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:58.233]        // if-block "!isSWJ"
[19:49:58.233]          // =>  FALSE
[19:49:58.233]        // skip if-block "!isSWJ"
[19:49:58.233]      </control>
[19:49:58.233]      <block atomic="false" info="">
[19:49:58.233]        ReadDP(0x0);
[19:49:58.236]  
[19:49:58.236]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:58.236]  
[19:49:58.236]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:58.236]      </block>
[19:49:58.236]      // end if-block "protType == 2"
[19:49:58.236]    </control>
[19:49:58.236]  </sequence>
[19:49:58.236]  
[19:49:58.499]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:58.499]  
[19:49:58.500]  <debugvars>
[19:49:58.500]    // Pre-defined
[19:49:58.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:58.500]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:58.500]    __dp=0x00000000
[19:49:58.500]    __ap=0x00000000
[19:49:58.500]    __traceout=0x00000000      (Trace Disabled)
[19:49:58.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:58.500]    __FlashAddr=0x00000000
[19:49:58.500]    __FlashLen=0x00000000
[19:49:58.500]    __FlashArg=0x00000000
[19:49:58.500]    __FlashOp=0x00000000
[19:49:58.501]    __Result=0x00000000
[19:49:58.501]  </debugvars>
[19:49:58.501]  
[19:49:58.501]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:58.501]    <block atomic="false" info="">
[19:49:58.501]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:58.501]        // -> [isSWJ <= 0x00000001]
[19:49:58.501]      __var hasDormant = __protocol & 0x00020000;
[19:49:58.501]        // -> [hasDormant <= 0x00000000]
[19:49:58.501]      __var protType   = __protocol & 0x0000FFFF;
[19:49:58.501]        // -> [protType <= 0x00000002]
[19:49:58.501]    </block>
[19:49:58.501]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:58.501]      // if-block "protType == 1"
[19:49:58.501]        // =>  FALSE
[19:49:58.501]      // skip if-block "protType == 1"
[19:49:58.501]    </control>
[19:49:58.501]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:58.503]      // if-block "protType == 2"
[19:49:58.503]        // =>  TRUE
[19:49:58.503]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:58.503]        // if-block "isSWJ"
[19:49:58.503]          // =>  TRUE
[19:49:58.503]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:58.503]          // if-block "hasDormant"
[19:49:58.503]            // =>  FALSE
[19:49:58.503]          // skip if-block "hasDormant"
[19:49:58.503]        </control>
[19:49:58.503]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:58.503]          // if-block "!hasDormant"
[19:49:58.503]            // =>  TRUE
[19:49:58.503]          <block atomic="false" info="">
[19:49:58.504]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:58.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.507]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:58.512]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:58.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:58.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.514]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:58.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:58.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:58.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.531]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:58.533]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:58.533]          </block>
[19:49:58.533]          // end if-block "!hasDormant"
[19:49:58.533]        </control>
[19:49:58.536]        // end if-block "isSWJ"
[19:49:58.536]      </control>
[19:49:58.536]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:58.536]        // if-block "!isSWJ"
[19:49:58.536]          // =>  FALSE
[19:49:58.536]        // skip if-block "!isSWJ"
[19:49:58.536]      </control>
[19:49:58.536]      <block atomic="false" info="">
[19:49:58.536]        ReadDP(0x0);
[19:49:58.541]  
[19:49:58.541]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:58.541]  
[19:49:58.541]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:58.541]      </block>
[19:49:58.541]      // end if-block "protType == 2"
[19:49:58.541]    </control>
[19:49:58.541]  </sequence>
[19:49:58.541]  
[19:49:58.793]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:58.793]  
[19:49:58.794]  <debugvars>
[19:49:58.794]    // Pre-defined
[19:49:58.794]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:58.794]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:58.794]    __dp=0x00000000
[19:49:58.794]    __ap=0x00000000
[19:49:58.794]    __traceout=0x00000000      (Trace Disabled)
[19:49:58.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:58.794]    __FlashAddr=0x00000000
[19:49:58.794]    __FlashLen=0x00000000
[19:49:58.795]    __FlashArg=0x00000000
[19:49:58.795]    __FlashOp=0x00000000
[19:49:58.795]    __Result=0x00000000
[19:49:58.795]  </debugvars>
[19:49:58.795]  
[19:49:58.795]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:58.795]    <block atomic="false" info="">
[19:49:58.795]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:58.795]        // -> [isSWJ <= 0x00000001]
[19:49:58.795]      __var hasDormant = __protocol & 0x00020000;
[19:49:58.795]        // -> [hasDormant <= 0x00000000]
[19:49:58.795]      __var protType   = __protocol & 0x0000FFFF;
[19:49:58.795]        // -> [protType <= 0x00000002]
[19:49:58.796]    </block>
[19:49:58.796]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:58.796]      // if-block "protType == 1"
[19:49:58.796]        // =>  FALSE
[19:49:58.796]      // skip if-block "protType == 1"
[19:49:58.796]    </control>
[19:49:58.796]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:58.796]      // if-block "protType == 2"
[19:49:58.796]        // =>  TRUE
[19:49:58.796]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:58.798]        // if-block "isSWJ"
[19:49:58.798]          // =>  TRUE
[19:49:58.798]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:58.798]          // if-block "hasDormant"
[19:49:58.798]            // =>  FALSE
[19:49:58.798]          // skip if-block "hasDormant"
[19:49:58.798]        </control>
[19:49:58.798]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:58.798]          // if-block "!hasDormant"
[19:49:58.798]            // =>  TRUE
[19:49:58.798]          <block atomic="false" info="">
[19:49:58.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:58.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.810]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:58.813]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:58.813]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:58.833]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.833]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:58.837]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:58.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:58.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:58.840]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:58.844]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:58.844]          </block>
[19:49:58.844]          // end if-block "!hasDormant"
[19:49:58.844]        </control>
[19:49:58.844]        // end if-block "isSWJ"
[19:49:58.844]      </control>
[19:49:58.844]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:58.844]        // if-block "!isSWJ"
[19:49:58.844]          // =>  FALSE
[19:49:58.844]        // skip if-block "!isSWJ"
[19:49:58.844]      </control>
[19:49:58.844]      <block atomic="false" info="">
[19:49:58.844]        ReadDP(0x0);
[19:49:58.847]  
[19:49:58.847]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:58.847]  
[19:49:58.847]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:58.847]      </block>
[19:49:58.847]      // end if-block "protType == 2"
[19:49:58.847]    </control>
[19:49:58.847]  </sequence>
[19:49:58.847]  
[19:49:59.107]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:59.107]  
[19:49:59.108]  <debugvars>
[19:49:59.108]    // Pre-defined
[19:49:59.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:59.108]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:59.108]    __dp=0x00000000
[19:49:59.108]    __ap=0x00000000
[19:49:59.108]    __traceout=0x00000000      (Trace Disabled)
[19:49:59.108]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:59.108]    __FlashAddr=0x00000000
[19:49:59.108]    __FlashLen=0x00000000
[19:49:59.108]    __FlashArg=0x00000000
[19:49:59.108]    __FlashOp=0x00000000
[19:49:59.108]    __Result=0x00000000
[19:49:59.108]  </debugvars>
[19:49:59.108]  
[19:49:59.108]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:59.108]    <block atomic="false" info="">
[19:49:59.108]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:59.108]        // -> [isSWJ <= 0x00000001]
[19:49:59.108]      __var hasDormant = __protocol & 0x00020000;
[19:49:59.108]        // -> [hasDormant <= 0x00000000]
[19:49:59.108]      __var protType   = __protocol & 0x0000FFFF;
[19:49:59.108]        // -> [protType <= 0x00000002]
[19:49:59.108]    </block>
[19:49:59.108]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:59.108]      // if-block "protType == 1"
[19:49:59.108]        // =>  FALSE
[19:49:59.108]      // skip if-block "protType == 1"
[19:49:59.108]    </control>
[19:49:59.108]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:59.108]      // if-block "protType == 2"
[19:49:59.108]        // =>  TRUE
[19:49:59.108]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:59.108]        // if-block "isSWJ"
[19:49:59.108]          // =>  TRUE
[19:49:59.108]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:59.108]          // if-block "hasDormant"
[19:49:59.108]            // =>  FALSE
[19:49:59.108]          // skip if-block "hasDormant"
[19:49:59.108]        </control>
[19:49:59.108]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:59.108]          // if-block "!hasDormant"
[19:49:59.108]            // =>  TRUE
[19:49:59.108]          <block atomic="false" info="">
[19:49:59.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:59.119]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.119]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:59.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:59.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:59.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:59.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:59.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:59.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.147]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:59.147]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:59.147]          </block>
[19:49:59.147]          // end if-block "!hasDormant"
[19:49:59.147]        </control>
[19:49:59.147]        // end if-block "isSWJ"
[19:49:59.147]      </control>
[19:49:59.147]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:59.147]        // if-block "!isSWJ"
[19:49:59.147]          // =>  FALSE
[19:49:59.147]        // skip if-block "!isSWJ"
[19:49:59.147]      </control>
[19:49:59.147]      <block atomic="false" info="">
[19:49:59.147]        ReadDP(0x0);
[19:49:59.147]  
[19:49:59.147]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:59.147]  
[19:49:59.157]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:59.157]      </block>
[19:49:59.157]      // end if-block "protType == 2"
[19:49:59.157]    </control>
[19:49:59.157]  </sequence>
[19:49:59.157]  
[19:49:59.410]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:59.410]  
[19:49:59.410]  <debugvars>
[19:49:59.410]    // Pre-defined
[19:49:59.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:59.410]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:59.410]    __dp=0x00000000
[19:49:59.412]    __ap=0x00000000
[19:49:59.412]    __traceout=0x00000000      (Trace Disabled)
[19:49:59.412]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:59.412]    __FlashAddr=0x00000000
[19:49:59.412]    __FlashLen=0x00000000
[19:49:59.412]    __FlashArg=0x00000000
[19:49:59.412]    __FlashOp=0x00000000
[19:49:59.412]    __Result=0x00000000
[19:49:59.412]  </debugvars>
[19:49:59.412]  
[19:49:59.412]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:59.412]    <block atomic="false" info="">
[19:49:59.412]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:59.412]        // -> [isSWJ <= 0x00000001]
[19:49:59.412]      __var hasDormant = __protocol & 0x00020000;
[19:49:59.412]        // -> [hasDormant <= 0x00000000]
[19:49:59.412]      __var protType   = __protocol & 0x0000FFFF;
[19:49:59.412]        // -> [protType <= 0x00000002]
[19:49:59.412]    </block>
[19:49:59.412]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:59.412]      // if-block "protType == 1"
[19:49:59.412]        // =>  FALSE
[19:49:59.412]      // skip if-block "protType == 1"
[19:49:59.415]    </control>
[19:49:59.415]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:59.415]      // if-block "protType == 2"
[19:49:59.415]        // =>  TRUE
[19:49:59.415]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:59.415]        // if-block "isSWJ"
[19:49:59.415]          // =>  TRUE
[19:49:59.415]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:59.415]          // if-block "hasDormant"
[19:49:59.415]            // =>  FALSE
[19:49:59.415]          // skip if-block "hasDormant"
[19:49:59.415]        </control>
[19:49:59.415]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:59.415]          // if-block "!hasDormant"
[19:49:59.415]            // =>  TRUE
[19:49:59.415]          <block atomic="false" info="">
[19:49:59.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:59.417]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.417]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:59.421]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:59.421]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:59.421]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.421]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:59.421]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:59.421]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:59.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.430]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:59.430]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:59.430]          </block>
[19:49:59.430]          // end if-block "!hasDormant"
[19:49:59.430]        </control>
[19:49:59.430]        // end if-block "isSWJ"
[19:49:59.430]      </control>
[19:49:59.430]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:59.430]        // if-block "!isSWJ"
[19:49:59.430]          // =>  FALSE
[19:49:59.430]        // skip if-block "!isSWJ"
[19:49:59.430]      </control>
[19:49:59.430]      <block atomic="false" info="">
[19:49:59.430]        ReadDP(0x0);
[19:49:59.440]  
[19:49:59.440]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:59.440]  
[19:49:59.440]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:59.440]      </block>
[19:49:59.440]      // end if-block "protType == 2"
[19:49:59.440]    </control>
[19:49:59.440]  </sequence>
[19:49:59.440]  
[19:49:59.692]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:59.692]  
[19:49:59.692]  <debugvars>
[19:49:59.692]    // Pre-defined
[19:49:59.692]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:59.692]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:59.692]    __dp=0x00000000
[19:49:59.692]    __ap=0x00000000
[19:49:59.692]    __traceout=0x00000000      (Trace Disabled)
[19:49:59.694]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:59.694]    __FlashAddr=0x00000000
[19:49:59.694]    __FlashLen=0x00000000
[19:49:59.694]    __FlashArg=0x00000000
[19:49:59.694]    __FlashOp=0x00000000
[19:49:59.694]    __Result=0x00000000
[19:49:59.694]  </debugvars>
[19:49:59.694]  
[19:49:59.694]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:59.694]    <block atomic="false" info="">
[19:49:59.694]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:59.694]        // -> [isSWJ <= 0x00000001]
[19:49:59.694]      __var hasDormant = __protocol & 0x00020000;
[19:49:59.694]        // -> [hasDormant <= 0x00000000]
[19:49:59.694]      __var protType   = __protocol & 0x0000FFFF;
[19:49:59.694]        // -> [protType <= 0x00000002]
[19:49:59.694]    </block>
[19:49:59.694]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:59.694]      // if-block "protType == 1"
[19:49:59.694]        // =>  FALSE
[19:49:59.694]      // skip if-block "protType == 1"
[19:49:59.694]    </control>
[19:49:59.694]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:59.694]      // if-block "protType == 2"
[19:49:59.694]        // =>  TRUE
[19:49:59.694]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:59.694]        // if-block "isSWJ"
[19:49:59.694]          // =>  TRUE
[19:49:59.694]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:59.694]          // if-block "hasDormant"
[19:49:59.694]            // =>  FALSE
[19:49:59.694]          // skip if-block "hasDormant"
[19:49:59.694]        </control>
[19:49:59.694]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:59.694]          // if-block "!hasDormant"
[19:49:59.694]            // =>  TRUE
[19:49:59.694]          <block atomic="false" info="">
[19:49:59.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:59.702]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.702]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:59.702]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:59.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:59.702]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.702]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:59.714]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:59.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:59.714]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:59.714]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:59.722]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:59.722]          </block>
[19:49:59.722]          // end if-block "!hasDormant"
[19:49:59.722]        </control>
[19:49:59.722]        // end if-block "isSWJ"
[19:49:59.722]      </control>
[19:49:59.722]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:59.722]        // if-block "!isSWJ"
[19:49:59.722]          // =>  FALSE
[19:49:59.722]        // skip if-block "!isSWJ"
[19:49:59.722]      </control>
[19:49:59.722]      <block atomic="false" info="">
[19:49:59.722]        ReadDP(0x0);
[19:49:59.732]  
[19:49:59.732]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:49:59.732]  
[19:49:59.732]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:59.732]      </block>
[19:49:59.732]      // end if-block "protType == 2"
[19:49:59.732]    </control>
[19:49:59.732]  </sequence>
[19:49:59.732]  
[19:49:59.987]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:49:59.987]  
[19:49:59.989]  <debugvars>
[19:49:59.989]    // Pre-defined
[19:49:59.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:59.989]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:59.989]    __dp=0x00000000
[19:49:59.989]    __ap=0x00000000
[19:49:59.989]    __traceout=0x00000000      (Trace Disabled)
[19:49:59.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:59.989]    __FlashAddr=0x00000000
[19:49:59.989]    __FlashLen=0x00000000
[19:49:59.989]    __FlashArg=0x00000000
[19:49:59.989]    __FlashOp=0x00000000
[19:49:59.989]    __Result=0x00000000
[19:49:59.989]  </debugvars>
[19:49:59.989]  
[19:49:59.989]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:59.989]    <block atomic="false" info="">
[19:49:59.989]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:59.989]        // -> [isSWJ <= 0x00000001]
[19:49:59.989]      __var hasDormant = __protocol & 0x00020000;
[19:49:59.989]        // -> [hasDormant <= 0x00000000]
[19:49:59.989]      __var protType   = __protocol & 0x0000FFFF;
[19:49:59.989]        // -> [protType <= 0x00000002]
[19:49:59.989]    </block>
[19:49:59.989]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:59.989]      // if-block "protType == 1"
[19:49:59.989]        // =>  FALSE
[19:49:59.989]      // skip if-block "protType == 1"
[19:49:59.989]    </control>
[19:49:59.989]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:59.989]      // if-block "protType == 2"
[19:49:59.989]        // =>  TRUE
[19:49:59.989]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:59.989]        // if-block "isSWJ"
[19:49:59.989]          // =>  TRUE
[19:49:59.989]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:59.989]          // if-block "hasDormant"
[19:49:59.989]            // =>  FALSE
[19:49:59.989]          // skip if-block "hasDormant"
[19:49:59.989]        </control>
[19:49:59.989]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:59.989]          // if-block "!hasDormant"
[19:49:59.994]            // =>  TRUE
[19:49:59.994]          <block atomic="false" info="">
[19:49:59.994]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:00.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.001]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:00.009]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:00.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:00.009]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.009]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:00.018]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:00.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:00.030]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.030]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:00.030]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:00.030]          </block>
[19:50:00.030]          // end if-block "!hasDormant"
[19:50:00.030]        </control>
[19:50:00.030]        // end if-block "isSWJ"
[19:50:00.030]      </control>
[19:50:00.030]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:00.030]        // if-block "!isSWJ"
[19:50:00.030]          // =>  FALSE
[19:50:00.030]        // skip if-block "!isSWJ"
[19:50:00.030]      </control>
[19:50:00.030]      <block atomic="false" info="">
[19:50:00.030]        ReadDP(0x0);
[19:50:00.038]  
[19:50:00.038]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:00.038]  
[19:50:00.038]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:00.038]      </block>
[19:50:00.038]      // end if-block "protType == 2"
[19:50:00.038]    </control>
[19:50:00.038]  </sequence>
[19:50:00.038]  
[19:50:00.293]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:00.293]  
[19:50:00.296]  <debugvars>
[19:50:00.296]    // Pre-defined
[19:50:00.296]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:00.296]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:00.296]    __dp=0x00000000
[19:50:00.296]    __ap=0x00000000
[19:50:00.296]    __traceout=0x00000000      (Trace Disabled)
[19:50:00.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:00.296]    __FlashAddr=0x00000000
[19:50:00.296]    __FlashLen=0x00000000
[19:50:00.296]    __FlashArg=0x00000000
[19:50:00.296]    __FlashOp=0x00000000
[19:50:00.296]    __Result=0x00000000
[19:50:00.296]  </debugvars>
[19:50:00.296]  
[19:50:00.296]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:00.296]    <block atomic="false" info="">
[19:50:00.296]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:00.296]        // -> [isSWJ <= 0x00000001]
[19:50:00.296]      __var hasDormant = __protocol & 0x00020000;
[19:50:00.296]        // -> [hasDormant <= 0x00000000]
[19:50:00.296]      __var protType   = __protocol & 0x0000FFFF;
[19:50:00.296]        // -> [protType <= 0x00000002]
[19:50:00.296]    </block>
[19:50:00.296]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:00.296]      // if-block "protType == 1"
[19:50:00.296]        // =>  FALSE
[19:50:00.296]      // skip if-block "protType == 1"
[19:50:00.296]    </control>
[19:50:00.296]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:00.296]      // if-block "protType == 2"
[19:50:00.296]        // =>  TRUE
[19:50:00.296]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:00.296]        // if-block "isSWJ"
[19:50:00.296]          // =>  TRUE
[19:50:00.296]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:00.296]          // if-block "hasDormant"
[19:50:00.296]            // =>  FALSE
[19:50:00.296]          // skip if-block "hasDormant"
[19:50:00.296]        </control>
[19:50:00.296]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:00.296]          // if-block "!hasDormant"
[19:50:00.296]            // =>  TRUE
[19:50:00.301]          <block atomic="false" info="">
[19:50:00.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:00.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.304]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:00.304]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:00.304]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:00.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.304]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:00.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:00.314]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:00.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.314]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:00.314]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:00.314]          </block>
[19:50:00.314]          // end if-block "!hasDormant"
[19:50:00.314]        </control>
[19:50:00.314]        // end if-block "isSWJ"
[19:50:00.314]      </control>
[19:50:00.314]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:00.324]        // if-block "!isSWJ"
[19:50:00.324]          // =>  FALSE
[19:50:00.324]        // skip if-block "!isSWJ"
[19:50:00.324]      </control>
[19:50:00.324]      <block atomic="false" info="">
[19:50:00.324]        ReadDP(0x0);
[19:50:00.325]  
[19:50:00.325]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:00.325]  
[19:50:00.325]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:00.325]      </block>
[19:50:00.325]      // end if-block "protType == 2"
[19:50:00.325]    </control>
[19:50:00.325]  </sequence>
[19:50:00.325]  
[19:50:00.578]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:00.578]  
[19:50:00.580]  <debugvars>
[19:50:00.580]    // Pre-defined
[19:50:00.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:00.580]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:00.580]    __dp=0x00000000
[19:50:00.580]    __ap=0x00000000
[19:50:00.580]    __traceout=0x00000000      (Trace Disabled)
[19:50:00.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:00.580]    __FlashAddr=0x00000000
[19:50:00.580]    __FlashLen=0x00000000
[19:50:00.580]    __FlashArg=0x00000000
[19:50:00.580]    __FlashOp=0x00000000
[19:50:00.580]    __Result=0x00000000
[19:50:00.580]  </debugvars>
[19:50:00.580]  
[19:50:00.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:00.580]    <block atomic="false" info="">
[19:50:00.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:00.580]        // -> [isSWJ <= 0x00000001]
[19:50:00.580]      __var hasDormant = __protocol & 0x00020000;
[19:50:00.580]        // -> [hasDormant <= 0x00000000]
[19:50:00.580]      __var protType   = __protocol & 0x0000FFFF;
[19:50:00.580]        // -> [protType <= 0x00000002]
[19:50:00.580]    </block>
[19:50:00.580]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:00.580]      // if-block "protType == 1"
[19:50:00.580]        // =>  FALSE
[19:50:00.580]      // skip if-block "protType == 1"
[19:50:00.580]    </control>
[19:50:00.580]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:00.580]      // if-block "protType == 2"
[19:50:00.580]        // =>  TRUE
[19:50:00.580]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:00.580]        // if-block "isSWJ"
[19:50:00.580]          // =>  TRUE
[19:50:00.580]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:00.580]          // if-block "hasDormant"
[19:50:00.580]            // =>  FALSE
[19:50:00.580]          // skip if-block "hasDormant"
[19:50:00.580]        </control>
[19:50:00.580]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:00.580]          // if-block "!hasDormant"
[19:50:00.580]            // =>  TRUE
[19:50:00.580]          <block atomic="false" info="">
[19:50:00.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:00.580]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.588]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:00.588]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:00.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:00.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.588]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:00.588]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:00.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:00.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.601]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:00.601]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:00.601]          </block>
[19:50:00.601]          // end if-block "!hasDormant"
[19:50:00.601]        </control>
[19:50:00.601]        // end if-block "isSWJ"
[19:50:00.601]      </control>
[19:50:00.601]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:00.601]        // if-block "!isSWJ"
[19:50:00.601]          // =>  FALSE
[19:50:00.601]        // skip if-block "!isSWJ"
[19:50:00.601]      </control>
[19:50:00.601]      <block atomic="false" info="">
[19:50:00.601]        ReadDP(0x0);
[19:50:00.608]  
[19:50:00.608]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:00.608]  
[19:50:00.608]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:00.608]      </block>
[19:50:00.608]      // end if-block "protType == 2"
[19:50:00.608]    </control>
[19:50:00.608]  </sequence>
[19:50:00.608]  
[19:50:00.861]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:00.861]  
[19:50:00.861]  <debugvars>
[19:50:00.861]    // Pre-defined
[19:50:00.861]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:00.861]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:00.861]    __dp=0x00000000
[19:50:00.861]    __ap=0x00000000
[19:50:00.861]    __traceout=0x00000000      (Trace Disabled)
[19:50:00.861]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:00.861]    __FlashAddr=0x00000000
[19:50:00.861]    __FlashLen=0x00000000
[19:50:00.861]    __FlashArg=0x00000000
[19:50:00.861]    __FlashOp=0x00000000
[19:50:00.861]    __Result=0x00000000
[19:50:00.861]  </debugvars>
[19:50:00.861]  
[19:50:00.861]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:00.861]    <block atomic="false" info="">
[19:50:00.861]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:00.861]        // -> [isSWJ <= 0x00000001]
[19:50:00.861]      __var hasDormant = __protocol & 0x00020000;
[19:50:00.861]        // -> [hasDormant <= 0x00000000]
[19:50:00.861]      __var protType   = __protocol & 0x0000FFFF;
[19:50:00.861]        // -> [protType <= 0x00000002]
[19:50:00.861]    </block>
[19:50:00.861]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:00.861]      // if-block "protType == 1"
[19:50:00.861]        // =>  FALSE
[19:50:00.861]      // skip if-block "protType == 1"
[19:50:00.861]    </control>
[19:50:00.861]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:00.861]      // if-block "protType == 2"
[19:50:00.861]        // =>  TRUE
[19:50:00.861]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:00.861]        // if-block "isSWJ"
[19:50:00.861]          // =>  TRUE
[19:50:00.861]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:00.861]          // if-block "hasDormant"
[19:50:00.861]            // =>  FALSE
[19:50:00.861]          // skip if-block "hasDormant"
[19:50:00.861]        </control>
[19:50:00.861]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:00.861]          // if-block "!hasDormant"
[19:50:00.861]            // =>  TRUE
[19:50:00.861]          <block atomic="false" info="">
[19:50:00.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:00.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:00.873]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:00.873]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:00.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.873]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:00.881]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:00.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:00.881]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:00.881]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:00.891]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:00.891]          </block>
[19:50:00.891]          // end if-block "!hasDormant"
[19:50:00.891]        </control>
[19:50:00.891]        // end if-block "isSWJ"
[19:50:00.891]      </control>
[19:50:00.891]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:00.891]        // if-block "!isSWJ"
[19:50:00.891]          // =>  FALSE
[19:50:00.891]        // skip if-block "!isSWJ"
[19:50:00.891]      </control>
[19:50:00.891]      <block atomic="false" info="">
[19:50:00.891]        ReadDP(0x0);
[19:50:00.911]  
[19:50:00.911]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:00.911]  
[19:50:00.911]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:00.911]      </block>
[19:50:00.911]      // end if-block "protType == 2"
[19:50:00.911]    </control>
[19:50:00.911]  </sequence>
[19:50:00.911]  
[19:50:01.163]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:01.163]  
[19:50:01.166]  <debugvars>
[19:50:01.166]    // Pre-defined
[19:50:01.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:01.166]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:01.166]    __dp=0x00000000
[19:50:01.166]    __ap=0x00000000
[19:50:01.166]    __traceout=0x00000000      (Trace Disabled)
[19:50:01.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:01.166]    __FlashAddr=0x00000000
[19:50:01.166]    __FlashLen=0x00000000
[19:50:01.166]    __FlashArg=0x00000000
[19:50:01.166]    __FlashOp=0x00000000
[19:50:01.166]    __Result=0x00000000
[19:50:01.166]  </debugvars>
[19:50:01.166]  
[19:50:01.166]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:01.166]    <block atomic="false" info="">
[19:50:01.166]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:01.166]        // -> [isSWJ <= 0x00000001]
[19:50:01.166]      __var hasDormant = __protocol & 0x00020000;
[19:50:01.166]        // -> [hasDormant <= 0x00000000]
[19:50:01.166]      __var protType   = __protocol & 0x0000FFFF;
[19:50:01.166]        // -> [protType <= 0x00000002]
[19:50:01.166]    </block>
[19:50:01.166]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:01.166]      // if-block "protType == 1"
[19:50:01.166]        // =>  FALSE
[19:50:01.166]      // skip if-block "protType == 1"
[19:50:01.166]    </control>
[19:50:01.166]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:01.166]      // if-block "protType == 2"
[19:50:01.166]        // =>  TRUE
[19:50:01.166]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:01.166]        // if-block "isSWJ"
[19:50:01.166]          // =>  TRUE
[19:50:01.166]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:01.166]          // if-block "hasDormant"
[19:50:01.166]            // =>  FALSE
[19:50:01.166]          // skip if-block "hasDormant"
[19:50:01.166]        </control>
[19:50:01.166]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:01.166]          // if-block "!hasDormant"
[19:50:01.166]            // =>  TRUE
[19:50:01.166]          <block atomic="false" info="">
[19:50:01.166]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:01.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.174]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:01.184]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:01.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:01.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.185]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:01.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:01.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:01.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.194]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:01.201]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:01.201]          </block>
[19:50:01.201]          // end if-block "!hasDormant"
[19:50:01.201]        </control>
[19:50:01.201]        // end if-block "isSWJ"
[19:50:01.201]      </control>
[19:50:01.204]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:01.204]        // if-block "!isSWJ"
[19:50:01.204]          // =>  FALSE
[19:50:01.204]        // skip if-block "!isSWJ"
[19:50:01.204]      </control>
[19:50:01.204]      <block atomic="false" info="">
[19:50:01.204]        ReadDP(0x0);
[19:50:01.204]  
[19:50:01.204]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:01.204]  
[19:50:01.204]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:01.204]      </block>
[19:50:01.204]      // end if-block "protType == 2"
[19:50:01.204]    </control>
[19:50:01.204]  </sequence>
[19:50:01.204]  
[19:50:01.456]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:01.456]  
[19:50:01.457]  <debugvars>
[19:50:01.457]    // Pre-defined
[19:50:01.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:01.457]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:01.457]    __dp=0x00000000
[19:50:01.457]    __ap=0x00000000
[19:50:01.457]    __traceout=0x00000000      (Trace Disabled)
[19:50:01.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:01.457]    __FlashAddr=0x00000000
[19:50:01.457]    __FlashLen=0x00000000
[19:50:01.457]    __FlashArg=0x00000000
[19:50:01.457]    __FlashOp=0x00000000
[19:50:01.457]    __Result=0x00000000
[19:50:01.457]  </debugvars>
[19:50:01.457]  
[19:50:01.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:01.457]    <block atomic="false" info="">
[19:50:01.457]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:01.457]        // -> [isSWJ <= 0x00000001]
[19:50:01.457]      __var hasDormant = __protocol & 0x00020000;
[19:50:01.457]        // -> [hasDormant <= 0x00000000]
[19:50:01.457]      __var protType   = __protocol & 0x0000FFFF;
[19:50:01.457]        // -> [protType <= 0x00000002]
[19:50:01.457]    </block>
[19:50:01.457]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:01.457]      // if-block "protType == 1"
[19:50:01.457]        // =>  FALSE
[19:50:01.457]      // skip if-block "protType == 1"
[19:50:01.457]    </control>
[19:50:01.457]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:01.457]      // if-block "protType == 2"
[19:50:01.457]        // =>  TRUE
[19:50:01.457]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:01.457]        // if-block "isSWJ"
[19:50:01.457]          // =>  TRUE
[19:50:01.457]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:01.457]          // if-block "hasDormant"
[19:50:01.457]            // =>  FALSE
[19:50:01.457]          // skip if-block "hasDormant"
[19:50:01.457]        </control>
[19:50:01.457]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:01.457]          // if-block "!hasDormant"
[19:50:01.457]            // =>  TRUE
[19:50:01.457]          <block atomic="false" info="">
[19:50:01.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:01.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.466]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:01.466]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:01.466]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:01.476]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.476]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:01.476]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:01.476]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:01.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.486]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:01.486]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:01.486]          </block>
[19:50:01.496]          // end if-block "!hasDormant"
[19:50:01.496]        </control>
[19:50:01.496]        // end if-block "isSWJ"
[19:50:01.496]      </control>
[19:50:01.496]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:01.496]        // if-block "!isSWJ"
[19:50:01.496]          // =>  FALSE
[19:50:01.496]        // skip if-block "!isSWJ"
[19:50:01.496]      </control>
[19:50:01.496]      <block atomic="false" info="">
[19:50:01.496]        ReadDP(0x0);
[19:50:01.496]  
[19:50:01.496]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:01.496]  
[19:50:01.496]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:01.496]      </block>
[19:50:01.496]      // end if-block "protType == 2"
[19:50:01.496]    </control>
[19:50:01.496]  </sequence>
[19:50:01.496]  
[19:50:01.758]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:01.758]  
[19:50:01.760]  <debugvars>
[19:50:01.760]    // Pre-defined
[19:50:01.760]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:01.760]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:01.760]    __dp=0x00000000
[19:50:01.760]    __ap=0x00000000
[19:50:01.760]    __traceout=0x00000000      (Trace Disabled)
[19:50:01.760]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:01.761]    __FlashAddr=0x00000000
[19:50:01.761]    __FlashLen=0x00000000
[19:50:01.761]    __FlashArg=0x00000000
[19:50:01.761]    __FlashOp=0x00000000
[19:50:01.761]    __Result=0x00000000
[19:50:01.761]  </debugvars>
[19:50:01.761]  
[19:50:01.761]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:01.761]    <block atomic="false" info="">
[19:50:01.761]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:01.762]        // -> [isSWJ <= 0x00000001]
[19:50:01.762]      __var hasDormant = __protocol & 0x00020000;
[19:50:01.762]        // -> [hasDormant <= 0x00000000]
[19:50:01.762]      __var protType   = __protocol & 0x0000FFFF;
[19:50:01.762]        // -> [protType <= 0x00000002]
[19:50:01.762]    </block>
[19:50:01.762]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:01.762]      // if-block "protType == 1"
[19:50:01.762]        // =>  FALSE
[19:50:01.762]      // skip if-block "protType == 1"
[19:50:01.762]    </control>
[19:50:01.763]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:01.763]      // if-block "protType == 2"
[19:50:01.763]        // =>  TRUE
[19:50:01.763]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:01.763]        // if-block "isSWJ"
[19:50:01.763]          // =>  TRUE
[19:50:01.763]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:01.763]          // if-block "hasDormant"
[19:50:01.763]            // =>  FALSE
[19:50:01.764]          // skip if-block "hasDormant"
[19:50:01.764]        </control>
[19:50:01.764]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:01.764]          // if-block "!hasDormant"
[19:50:01.764]            // =>  TRUE
[19:50:01.764]          <block atomic="false" info="">
[19:50:01.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:01.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.769]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:01.773]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:01.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:01.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.777]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:01.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:01.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:01.786]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.786]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:01.789]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:01.789]          </block>
[19:50:01.789]          // end if-block "!hasDormant"
[19:50:01.789]        </control>
[19:50:01.789]        // end if-block "isSWJ"
[19:50:01.790]      </control>
[19:50:01.790]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:01.790]        // if-block "!isSWJ"
[19:50:01.790]          // =>  FALSE
[19:50:01.790]        // skip if-block "!isSWJ"
[19:50:01.790]      </control>
[19:50:01.790]      <block atomic="false" info="">
[19:50:01.791]        ReadDP(0x0);
[19:50:01.800]  
[19:50:01.800]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:01.800]  
[19:50:01.800]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:01.800]      </block>
[19:50:01.801]      // end if-block "protType == 2"
[19:50:01.801]    </control>
[19:50:01.801]  </sequence>
[19:50:01.801]  
[19:50:02.060]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:02.060]  
[19:50:02.060]  <debugvars>
[19:50:02.060]    // Pre-defined
[19:50:02.060]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:02.060]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:02.060]    __dp=0x00000000
[19:50:02.060]    __ap=0x00000000
[19:50:02.060]    __traceout=0x00000000      (Trace Disabled)
[19:50:02.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:02.062]    __FlashAddr=0x00000000
[19:50:02.062]    __FlashLen=0x00000000
[19:50:02.062]    __FlashArg=0x00000000
[19:50:02.062]    __FlashOp=0x00000000
[19:50:02.062]    __Result=0x00000000
[19:50:02.062]  </debugvars>
[19:50:02.062]  
[19:50:02.062]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:02.062]    <block atomic="false" info="">
[19:50:02.062]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:02.062]        // -> [isSWJ <= 0x00000001]
[19:50:02.062]      __var hasDormant = __protocol & 0x00020000;
[19:50:02.062]        // -> [hasDormant <= 0x00000000]
[19:50:02.062]      __var protType   = __protocol & 0x0000FFFF;
[19:50:02.064]        // -> [protType <= 0x00000002]
[19:50:02.064]    </block>
[19:50:02.064]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:02.064]      // if-block "protType == 1"
[19:50:02.064]        // =>  FALSE
[19:50:02.064]      // skip if-block "protType == 1"
[19:50:02.064]    </control>
[19:50:02.064]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:02.064]      // if-block "protType == 2"
[19:50:02.064]        // =>  TRUE
[19:50:02.064]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:02.065]        // if-block "isSWJ"
[19:50:02.065]          // =>  TRUE
[19:50:02.065]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:02.065]          // if-block "hasDormant"
[19:50:02.065]            // =>  FALSE
[19:50:02.065]          // skip if-block "hasDormant"
[19:50:02.065]        </control>
[19:50:02.065]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:02.065]          // if-block "!hasDormant"
[19:50:02.065]            // =>  TRUE
[19:50:02.065]          <block atomic="false" info="">
[19:50:02.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:02.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.069]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:02.076]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:02.076]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:02.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.081]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:02.084]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:02.084]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:02.087]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.087]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:02.091]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:02.091]          </block>
[19:50:02.091]          // end if-block "!hasDormant"
[19:50:02.091]        </control>
[19:50:02.092]        // end if-block "isSWJ"
[19:50:02.092]      </control>
[19:50:02.092]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:02.092]        // if-block "!isSWJ"
[19:50:02.092]          // =>  FALSE
[19:50:02.092]        // skip if-block "!isSWJ"
[19:50:02.092]      </control>
[19:50:02.092]      <block atomic="false" info="">
[19:50:02.092]        ReadDP(0x0);
[19:50:02.095]  
[19:50:02.095]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:02.095]  
[19:50:02.095]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:02.095]      </block>
[19:50:02.095]      // end if-block "protType == 2"
[19:50:02.095]    </control>
[19:50:02.095]  </sequence>
[19:50:02.095]  
[19:50:02.355]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:02.355]  
[19:50:02.356]  <debugvars>
[19:50:02.356]    // Pre-defined
[19:50:02.356]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:02.356]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:02.356]    __dp=0x00000000
[19:50:02.356]    __ap=0x00000000
[19:50:02.356]    __traceout=0x00000000      (Trace Disabled)
[19:50:02.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:02.356]    __FlashAddr=0x00000000
[19:50:02.356]    __FlashLen=0x00000000
[19:50:02.356]    __FlashArg=0x00000000
[19:50:02.356]    __FlashOp=0x00000000
[19:50:02.356]    __Result=0x00000000
[19:50:02.356]  </debugvars>
[19:50:02.356]  
[19:50:02.356]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:02.356]    <block atomic="false" info="">
[19:50:02.358]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:02.358]        // -> [isSWJ <= 0x00000001]
[19:50:02.358]      __var hasDormant = __protocol & 0x00020000;
[19:50:02.358]        // -> [hasDormant <= 0x00000000]
[19:50:02.358]      __var protType   = __protocol & 0x0000FFFF;
[19:50:02.358]        // -> [protType <= 0x00000002]
[19:50:02.358]    </block>
[19:50:02.358]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:02.358]      // if-block "protType == 1"
[19:50:02.358]        // =>  FALSE
[19:50:02.358]      // skip if-block "protType == 1"
[19:50:02.358]    </control>
[19:50:02.358]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:02.358]      // if-block "protType == 2"
[19:50:02.358]        // =>  TRUE
[19:50:02.358]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:02.358]        // if-block "isSWJ"
[19:50:02.358]          // =>  TRUE
[19:50:02.358]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:02.358]          // if-block "hasDormant"
[19:50:02.358]            // =>  FALSE
[19:50:02.358]          // skip if-block "hasDormant"
[19:50:02.358]        </control>
[19:50:02.358]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:02.358]          // if-block "!hasDormant"
[19:50:02.358]            // =>  TRUE
[19:50:02.358]          <block atomic="false" info="">
[19:50:02.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:02.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.358]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:02.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:02.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:02.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.369]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:02.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:02.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:02.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.376]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:02.376]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:02.376]          </block>
[19:50:02.376]          // end if-block "!hasDormant"
[19:50:02.376]        </control>
[19:50:02.376]        // end if-block "isSWJ"
[19:50:02.376]      </control>
[19:50:02.376]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:02.376]        // if-block "!isSWJ"
[19:50:02.376]          // =>  FALSE
[19:50:02.376]        // skip if-block "!isSWJ"
[19:50:02.376]      </control>
[19:50:02.376]      <block atomic="false" info="">
[19:50:02.376]        ReadDP(0x0);
[19:50:02.385]  
[19:50:02.385]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:02.385]  
[19:50:02.385]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:02.385]      </block>
[19:50:02.387]      // end if-block "protType == 2"
[19:50:02.387]    </control>
[19:50:02.387]  </sequence>
[19:50:02.387]  
[19:50:02.639]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:02.639]  
[19:50:02.641]  <debugvars>
[19:50:02.641]    // Pre-defined
[19:50:02.641]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:02.641]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:02.641]    __dp=0x00000000
[19:50:02.641]    __ap=0x00000000
[19:50:02.641]    __traceout=0x00000000      (Trace Disabled)
[19:50:02.641]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:02.641]    __FlashAddr=0x00000000
[19:50:02.641]    __FlashLen=0x00000000
[19:50:02.641]    __FlashArg=0x00000000
[19:50:02.641]    __FlashOp=0x00000000
[19:50:02.641]    __Result=0x00000000
[19:50:02.641]  </debugvars>
[19:50:02.641]  
[19:50:02.641]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:02.641]    <block atomic="false" info="">
[19:50:02.641]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:02.641]        // -> [isSWJ <= 0x00000001]
[19:50:02.641]      __var hasDormant = __protocol & 0x00020000;
[19:50:02.641]        // -> [hasDormant <= 0x00000000]
[19:50:02.641]      __var protType   = __protocol & 0x0000FFFF;
[19:50:02.641]        // -> [protType <= 0x00000002]
[19:50:02.641]    </block>
[19:50:02.641]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:02.641]      // if-block "protType == 1"
[19:50:02.641]        // =>  FALSE
[19:50:02.641]      // skip if-block "protType == 1"
[19:50:02.641]    </control>
[19:50:02.641]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:02.641]      // if-block "protType == 2"
[19:50:02.641]        // =>  TRUE
[19:50:02.641]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:02.641]        // if-block "isSWJ"
[19:50:02.641]          // =>  TRUE
[19:50:02.641]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:02.641]          // if-block "hasDormant"
[19:50:02.641]            // =>  FALSE
[19:50:02.641]          // skip if-block "hasDormant"
[19:50:02.641]        </control>
[19:50:02.641]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:02.641]          // if-block "!hasDormant"
[19:50:02.641]            // =>  TRUE
[19:50:02.641]          <block atomic="false" info="">
[19:50:02.641]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:02.650]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.650]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:02.652]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:02.652]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:02.652]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.652]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:02.660]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:02.660]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:02.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.662]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:02.671]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:02.671]          </block>
[19:50:02.671]          // end if-block "!hasDormant"
[19:50:02.671]        </control>
[19:50:02.671]        // end if-block "isSWJ"
[19:50:02.671]      </control>
[19:50:02.671]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:02.671]        // if-block "!isSWJ"
[19:50:02.671]          // =>  FALSE
[19:50:02.671]        // skip if-block "!isSWJ"
[19:50:02.671]      </control>
[19:50:02.671]      <block atomic="false" info="">
[19:50:02.671]        ReadDP(0x0);
[19:50:02.671]  
[19:50:02.671]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:02.671]  
[19:50:02.671]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:02.671]      </block>
[19:50:02.671]      // end if-block "protType == 2"
[19:50:02.671]    </control>
[19:50:02.671]  </sequence>
[19:50:02.671]  
[19:50:02.924]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:02.924]  
[19:50:02.925]  <debugvars>
[19:50:02.925]    // Pre-defined
[19:50:02.925]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:02.925]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:02.925]    __dp=0x00000000
[19:50:02.925]    __ap=0x00000000
[19:50:02.925]    __traceout=0x00000000      (Trace Disabled)
[19:50:02.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:02.925]    __FlashAddr=0x00000000
[19:50:02.925]    __FlashLen=0x00000000
[19:50:02.925]    __FlashArg=0x00000000
[19:50:02.925]    __FlashOp=0x00000000
[19:50:02.925]    __Result=0x00000000
[19:50:02.925]  </debugvars>
[19:50:02.925]  
[19:50:02.925]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:02.925]    <block atomic="false" info="">
[19:50:02.925]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:02.925]        // -> [isSWJ <= 0x00000001]
[19:50:02.925]      __var hasDormant = __protocol & 0x00020000;
[19:50:02.925]        // -> [hasDormant <= 0x00000000]
[19:50:02.925]      __var protType   = __protocol & 0x0000FFFF;
[19:50:02.925]        // -> [protType <= 0x00000002]
[19:50:02.925]    </block>
[19:50:02.925]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:02.925]      // if-block "protType == 1"
[19:50:02.925]        // =>  FALSE
[19:50:02.925]      // skip if-block "protType == 1"
[19:50:02.925]    </control>
[19:50:02.925]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:02.925]      // if-block "protType == 2"
[19:50:02.925]        // =>  TRUE
[19:50:02.925]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:02.925]        // if-block "isSWJ"
[19:50:02.925]          // =>  TRUE
[19:50:02.925]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:02.925]          // if-block "hasDormant"
[19:50:02.925]            // =>  FALSE
[19:50:02.925]          // skip if-block "hasDormant"
[19:50:02.925]        </control>
[19:50:02.925]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:02.925]          // if-block "!hasDormant"
[19:50:02.925]            // =>  TRUE
[19:50:02.925]          <block atomic="false" info="">
[19:50:02.925]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:02.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.925]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:02.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:02.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:02.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.934]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:02.944]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:02.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:02.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:02.944]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:02.944]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:02.944]          </block>
[19:50:02.944]          // end if-block "!hasDormant"
[19:50:02.944]        </control>
[19:50:02.944]        // end if-block "isSWJ"
[19:50:02.944]      </control>
[19:50:02.944]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:02.944]        // if-block "!isSWJ"
[19:50:02.944]          // =>  FALSE
[19:50:02.944]        // skip if-block "!isSWJ"
[19:50:02.944]      </control>
[19:50:02.944]      <block atomic="false" info="">
[19:50:02.944]        ReadDP(0x0);
[19:50:02.954]  
[19:50:02.954]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:02.954]  
[19:50:02.954]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:02.954]      </block>
[19:50:02.954]      // end if-block "protType == 2"
[19:50:02.954]    </control>
[19:50:02.954]  </sequence>
[19:50:02.954]  
[19:50:03.206]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:03.206]  
[19:50:03.208]  <debugvars>
[19:50:03.208]    // Pre-defined
[19:50:03.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:03.208]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:03.208]    __dp=0x00000000
[19:50:03.208]    __ap=0x00000000
[19:50:03.208]    __traceout=0x00000000      (Trace Disabled)
[19:50:03.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:03.208]    __FlashAddr=0x00000000
[19:50:03.208]    __FlashLen=0x00000000
[19:50:03.208]    __FlashArg=0x00000000
[19:50:03.208]    __FlashOp=0x00000000
[19:50:03.208]    __Result=0x00000000
[19:50:03.208]  </debugvars>
[19:50:03.208]  
[19:50:03.208]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:03.208]    <block atomic="false" info="">
[19:50:03.208]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:03.208]        // -> [isSWJ <= 0x00000001]
[19:50:03.208]      __var hasDormant = __protocol & 0x00020000;
[19:50:03.208]        // -> [hasDormant <= 0x00000000]
[19:50:03.208]      __var protType   = __protocol & 0x0000FFFF;
[19:50:03.208]        // -> [protType <= 0x00000002]
[19:50:03.208]    </block>
[19:50:03.208]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:03.208]      // if-block "protType == 1"
[19:50:03.208]        // =>  FALSE
[19:50:03.208]      // skip if-block "protType == 1"
[19:50:03.208]    </control>
[19:50:03.208]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:03.208]      // if-block "protType == 2"
[19:50:03.208]        // =>  TRUE
[19:50:03.208]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:03.208]        // if-block "isSWJ"
[19:50:03.208]          // =>  TRUE
[19:50:03.208]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:03.208]          // if-block "hasDormant"
[19:50:03.208]            // =>  FALSE
[19:50:03.208]          // skip if-block "hasDormant"
[19:50:03.208]        </control>
[19:50:03.208]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:03.208]          // if-block "!hasDormant"
[19:50:03.208]            // =>  TRUE
[19:50:03.208]          <block atomic="false" info="">
[19:50:03.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:03.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.216]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:03.226]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:03.226]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:03.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.236]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:03.236]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:03.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:03.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.248]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:03.248]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:03.248]          </block>
[19:50:03.248]          // end if-block "!hasDormant"
[19:50:03.248]        </control>
[19:50:03.248]        // end if-block "isSWJ"
[19:50:03.248]      </control>
[19:50:03.248]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:03.248]        // if-block "!isSWJ"
[19:50:03.248]          // =>  FALSE
[19:50:03.248]        // skip if-block "!isSWJ"
[19:50:03.248]      </control>
[19:50:03.248]      <block atomic="false" info="">
[19:50:03.248]        ReadDP(0x0);
[19:50:03.256]  
[19:50:03.256]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:03.256]  
[19:50:03.256]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:03.256]      </block>
[19:50:03.256]      // end if-block "protType == 2"
[19:50:03.256]    </control>
[19:50:03.256]  </sequence>
[19:50:03.256]  
[19:50:03.508]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:03.508]  
[19:50:03.508]  <debugvars>
[19:50:03.508]    // Pre-defined
[19:50:03.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:03.508]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:03.508]    __dp=0x00000000
[19:50:03.508]    __ap=0x00000000
[19:50:03.508]    __traceout=0x00000000      (Trace Disabled)
[19:50:03.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:03.508]    __FlashAddr=0x00000000
[19:50:03.508]    __FlashLen=0x00000000
[19:50:03.508]    __FlashArg=0x00000000
[19:50:03.508]    __FlashOp=0x00000000
[19:50:03.508]    __Result=0x00000000
[19:50:03.508]  </debugvars>
[19:50:03.510]  
[19:50:03.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:03.510]    <block atomic="false" info="">
[19:50:03.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:03.510]        // -> [isSWJ <= 0x00000001]
[19:50:03.510]      __var hasDormant = __protocol & 0x00020000;
[19:50:03.510]        // -> [hasDormant <= 0x00000000]
[19:50:03.510]      __var protType   = __protocol & 0x0000FFFF;
[19:50:03.510]        // -> [protType <= 0x00000002]
[19:50:03.510]    </block>
[19:50:03.510]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:03.510]      // if-block "protType == 1"
[19:50:03.510]        // =>  FALSE
[19:50:03.510]      // skip if-block "protType == 1"
[19:50:03.511]    </control>
[19:50:03.511]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:03.511]      // if-block "protType == 2"
[19:50:03.511]        // =>  TRUE
[19:50:03.511]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:03.511]        // if-block "isSWJ"
[19:50:03.511]          // =>  TRUE
[19:50:03.511]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:03.511]          // if-block "hasDormant"
[19:50:03.511]            // =>  FALSE
[19:50:03.511]          // skip if-block "hasDormant"
[19:50:03.511]        </control>
[19:50:03.511]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:03.511]          // if-block "!hasDormant"
[19:50:03.511]            // =>  TRUE
[19:50:03.511]          <block atomic="false" info="">
[19:50:03.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:03.513]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.513]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:03.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:03.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:03.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.518]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:03.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:03.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:03.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.534]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:03.538]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:03.538]          </block>
[19:50:03.538]          // end if-block "!hasDormant"
[19:50:03.541]        </control>
[19:50:03.541]        // end if-block "isSWJ"
[19:50:03.541]      </control>
[19:50:03.541]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:03.541]        // if-block "!isSWJ"
[19:50:03.541]          // =>  FALSE
[19:50:03.541]        // skip if-block "!isSWJ"
[19:50:03.541]      </control>
[19:50:03.541]      <block atomic="false" info="">
[19:50:03.541]        ReadDP(0x0);
[19:50:03.542]  
[19:50:03.542]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:03.542]  
[19:50:03.542]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:03.542]      </block>
[19:50:03.542]      // end if-block "protType == 2"
[19:50:03.542]    </control>
[19:50:03.542]  </sequence>
[19:50:03.542]  
[19:50:03.801]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:03.801]  
[19:50:03.803]  <debugvars>
[19:50:03.803]    // Pre-defined
[19:50:03.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:03.803]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:03.803]    __dp=0x00000000
[19:50:03.803]    __ap=0x00000000
[19:50:03.803]    __traceout=0x00000000      (Trace Disabled)
[19:50:03.803]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:03.803]    __FlashAddr=0x00000000
[19:50:03.803]    __FlashLen=0x00000000
[19:50:03.803]    __FlashArg=0x00000000
[19:50:03.803]    __FlashOp=0x00000000
[19:50:03.803]    __Result=0x00000000
[19:50:03.803]  </debugvars>
[19:50:03.803]  
[19:50:03.803]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:03.803]    <block atomic="false" info="">
[19:50:03.803]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:03.803]        // -> [isSWJ <= 0x00000001]
[19:50:03.803]      __var hasDormant = __protocol & 0x00020000;
[19:50:03.803]        // -> [hasDormant <= 0x00000000]
[19:50:03.803]      __var protType   = __protocol & 0x0000FFFF;
[19:50:03.803]        // -> [protType <= 0x00000002]
[19:50:03.803]    </block>
[19:50:03.803]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:03.803]      // if-block "protType == 1"
[19:50:03.803]        // =>  FALSE
[19:50:03.803]      // skip if-block "protType == 1"
[19:50:03.803]    </control>
[19:50:03.803]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:03.803]      // if-block "protType == 2"
[19:50:03.803]        // =>  TRUE
[19:50:03.803]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:03.803]        // if-block "isSWJ"
[19:50:03.803]          // =>  TRUE
[19:50:03.803]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:03.803]          // if-block "hasDormant"
[19:50:03.803]            // =>  FALSE
[19:50:03.803]          // skip if-block "hasDormant"
[19:50:03.803]        </control>
[19:50:03.803]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:03.803]          // if-block "!hasDormant"
[19:50:03.803]            // =>  TRUE
[19:50:03.803]          <block atomic="false" info="">
[19:50:03.803]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:03.803]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.803]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:03.811]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:03.811]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:03.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.821]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:03.821]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:03.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:03.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:03.831]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:03.831]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:03.831]          </block>
[19:50:03.831]          // end if-block "!hasDormant"
[19:50:03.831]        </control>
[19:50:03.831]        // end if-block "isSWJ"
[19:50:03.831]      </control>
[19:50:03.831]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:03.831]        // if-block "!isSWJ"
[19:50:03.831]          // =>  FALSE
[19:50:03.831]        // skip if-block "!isSWJ"
[19:50:03.831]      </control>
[19:50:03.831]      <block atomic="false" info="">
[19:50:03.831]        ReadDP(0x0);
[19:50:03.844]  
[19:50:03.844]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:03.844]  
[19:50:03.844]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:03.844]      </block>
[19:50:03.844]      // end if-block "protType == 2"
[19:50:03.844]    </control>
[19:50:03.844]  </sequence>
[19:50:03.844]  
[19:50:04.103]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:04.103]  
[19:50:04.104]  <debugvars>
[19:50:04.104]    // Pre-defined
[19:50:04.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:04.104]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:04.104]    __dp=0x00000000
[19:50:04.104]    __ap=0x00000000
[19:50:04.104]    __traceout=0x00000000      (Trace Disabled)
[19:50:04.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:04.104]    __FlashAddr=0x00000000
[19:50:04.104]    __FlashLen=0x00000000
[19:50:04.104]    __FlashArg=0x00000000
[19:50:04.104]    __FlashOp=0x00000000
[19:50:04.104]    __Result=0x00000000
[19:50:04.104]  </debugvars>
[19:50:04.104]  
[19:50:04.104]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:04.104]    <block atomic="false" info="">
[19:50:04.104]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:04.104]        // -> [isSWJ <= 0x00000001]
[19:50:04.104]      __var hasDormant = __protocol & 0x00020000;
[19:50:04.104]        // -> [hasDormant <= 0x00000000]
[19:50:04.104]      __var protType   = __protocol & 0x0000FFFF;
[19:50:04.104]        // -> [protType <= 0x00000002]
[19:50:04.104]    </block>
[19:50:04.104]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:04.104]      // if-block "protType == 1"
[19:50:04.104]        // =>  FALSE
[19:50:04.104]      // skip if-block "protType == 1"
[19:50:04.104]    </control>
[19:50:04.104]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:04.104]      // if-block "protType == 2"
[19:50:04.104]        // =>  TRUE
[19:50:04.104]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:04.104]        // if-block "isSWJ"
[19:50:04.104]          // =>  TRUE
[19:50:04.104]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:04.104]          // if-block "hasDormant"
[19:50:04.104]            // =>  FALSE
[19:50:04.104]          // skip if-block "hasDormant"
[19:50:04.104]        </control>
[19:50:04.104]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:04.104]          // if-block "!hasDormant"
[19:50:04.104]            // =>  TRUE
[19:50:04.104]          <block atomic="false" info="">
[19:50:04.104]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:04.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.104]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:04.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:04.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:04.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.116]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:04.123]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:04.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:04.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.123]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:04.133]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:04.133]          </block>
[19:50:04.133]          // end if-block "!hasDormant"
[19:50:04.133]        </control>
[19:50:04.133]        // end if-block "isSWJ"
[19:50:04.133]      </control>
[19:50:04.133]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:04.133]        // if-block "!isSWJ"
[19:50:04.133]          // =>  FALSE
[19:50:04.133]        // skip if-block "!isSWJ"
[19:50:04.133]      </control>
[19:50:04.133]      <block atomic="false" info="">
[19:50:04.133]        ReadDP(0x0);
[19:50:04.135]  
[19:50:04.135]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:04.135]  
[19:50:04.135]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:04.135]      </block>
[19:50:04.135]      // end if-block "protType == 2"
[19:50:04.135]    </control>
[19:50:04.135]  </sequence>
[19:50:04.135]  
[19:50:04.388]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:04.388]  
[19:50:04.389]  <debugvars>
[19:50:04.389]    // Pre-defined
[19:50:04.389]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:04.389]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:04.389]    __dp=0x00000000
[19:50:04.389]    __ap=0x00000000
[19:50:04.389]    __traceout=0x00000000      (Trace Disabled)
[19:50:04.389]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:04.389]    __FlashAddr=0x00000000
[19:50:04.389]    __FlashLen=0x00000000
[19:50:04.389]    __FlashArg=0x00000000
[19:50:04.389]    __FlashOp=0x00000000
[19:50:04.389]    __Result=0x00000000
[19:50:04.389]  </debugvars>
[19:50:04.389]  
[19:50:04.389]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:04.389]    <block atomic="false" info="">
[19:50:04.389]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:04.389]        // -> [isSWJ <= 0x00000001]
[19:50:04.389]      __var hasDormant = __protocol & 0x00020000;
[19:50:04.389]        // -> [hasDormant <= 0x00000000]
[19:50:04.389]      __var protType   = __protocol & 0x0000FFFF;
[19:50:04.389]        // -> [protType <= 0x00000002]
[19:50:04.389]    </block>
[19:50:04.389]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:04.389]      // if-block "protType == 1"
[19:50:04.389]        // =>  FALSE
[19:50:04.389]      // skip if-block "protType == 1"
[19:50:04.389]    </control>
[19:50:04.389]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:04.389]      // if-block "protType == 2"
[19:50:04.389]        // =>  TRUE
[19:50:04.389]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:04.389]        // if-block "isSWJ"
[19:50:04.389]          // =>  TRUE
[19:50:04.389]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:04.389]          // if-block "hasDormant"
[19:50:04.389]            // =>  FALSE
[19:50:04.389]          // skip if-block "hasDormant"
[19:50:04.389]        </control>
[19:50:04.389]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:04.389]          // if-block "!hasDormant"
[19:50:04.389]            // =>  TRUE
[19:50:04.389]          <block atomic="false" info="">
[19:50:04.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:04.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.396]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:04.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:04.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:04.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.403]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:04.406]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:04.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:04.406]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.406]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:04.406]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:04.406]          </block>
[19:50:04.406]          // end if-block "!hasDormant"
[19:50:04.406]        </control>
[19:50:04.406]        // end if-block "isSWJ"
[19:50:04.406]      </control>
[19:50:04.406]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:04.406]        // if-block "!isSWJ"
[19:50:04.406]          // =>  FALSE
[19:50:04.406]        // skip if-block "!isSWJ"
[19:50:04.406]      </control>
[19:50:04.406]      <block atomic="false" info="">
[19:50:04.406]        ReadDP(0x0);
[19:50:04.419]  
[19:50:04.419]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:04.419]  
[19:50:04.419]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:04.419]      </block>
[19:50:04.419]      // end if-block "protType == 2"
[19:50:04.419]    </control>
[19:50:04.419]  </sequence>
[19:50:04.419]  
[19:50:04.679]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:04.679]  
[19:50:04.681]  <debugvars>
[19:50:04.681]    // Pre-defined
[19:50:04.681]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:04.681]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:04.681]    __dp=0x00000000
[19:50:04.681]    __ap=0x00000000
[19:50:04.681]    __traceout=0x00000000      (Trace Disabled)
[19:50:04.681]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:04.681]    __FlashAddr=0x00000000
[19:50:04.681]    __FlashLen=0x00000000
[19:50:04.681]    __FlashArg=0x00000000
[19:50:04.681]    __FlashOp=0x00000000
[19:50:04.681]    __Result=0x00000000
[19:50:04.681]  </debugvars>
[19:50:04.681]  
[19:50:04.681]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:04.681]    <block atomic="false" info="">
[19:50:04.681]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:04.681]        // -> [isSWJ <= 0x00000001]
[19:50:04.681]      __var hasDormant = __protocol & 0x00020000;
[19:50:04.681]        // -> [hasDormant <= 0x00000000]
[19:50:04.681]      __var protType   = __protocol & 0x0000FFFF;
[19:50:04.681]        // -> [protType <= 0x00000002]
[19:50:04.681]    </block>
[19:50:04.684]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:04.684]      // if-block "protType == 1"
[19:50:04.684]        // =>  FALSE
[19:50:04.684]      // skip if-block "protType == 1"
[19:50:04.684]    </control>
[19:50:04.684]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:04.684]      // if-block "protType == 2"
[19:50:04.684]        // =>  TRUE
[19:50:04.684]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:04.685]        // if-block "isSWJ"
[19:50:04.685]          // =>  TRUE
[19:50:04.685]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:04.685]          // if-block "hasDormant"
[19:50:04.685]            // =>  FALSE
[19:50:04.685]          // skip if-block "hasDormant"
[19:50:04.685]        </control>
[19:50:04.685]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:04.685]          // if-block "!hasDormant"
[19:50:04.685]            // =>  TRUE
[19:50:04.685]          <block atomic="false" info="">
[19:50:04.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:04.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.689]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:04.689]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:04.689]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:04.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.699]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:04.702]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:04.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:04.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.703]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:04.703]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:04.703]          </block>
[19:50:04.703]          // end if-block "!hasDormant"
[19:50:04.710]        </control>
[19:50:04.710]        // end if-block "isSWJ"
[19:50:04.710]      </control>
[19:50:04.710]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:04.710]        // if-block "!isSWJ"
[19:50:04.710]          // =>  FALSE
[19:50:04.710]        // skip if-block "!isSWJ"
[19:50:04.710]      </control>
[19:50:04.710]      <block atomic="false" info="">
[19:50:04.710]        ReadDP(0x0);
[19:50:04.710]  
[19:50:04.710]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:04.710]  
[19:50:04.710]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:04.710]      </block>
[19:50:04.715]      // end if-block "protType == 2"
[19:50:04.715]    </control>
[19:50:04.715]  </sequence>
[19:50:04.715]  
[19:50:04.973]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:04.973]  
[19:50:04.974]  <debugvars>
[19:50:04.974]    // Pre-defined
[19:50:04.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:04.974]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:04.974]    __dp=0x00000000
[19:50:04.974]    __ap=0x00000000
[19:50:04.974]    __traceout=0x00000000      (Trace Disabled)
[19:50:04.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:04.974]    __FlashAddr=0x00000000
[19:50:04.974]    __FlashLen=0x00000000
[19:50:04.974]    __FlashArg=0x00000000
[19:50:04.974]    __FlashOp=0x00000000
[19:50:04.974]    __Result=0x00000000
[19:50:04.974]  </debugvars>
[19:50:04.974]  
[19:50:04.974]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:04.974]    <block atomic="false" info="">
[19:50:04.974]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:04.974]        // -> [isSWJ <= 0x00000001]
[19:50:04.974]      __var hasDormant = __protocol & 0x00020000;
[19:50:04.974]        // -> [hasDormant <= 0x00000000]
[19:50:04.974]      __var protType   = __protocol & 0x0000FFFF;
[19:50:04.974]        // -> [protType <= 0x00000002]
[19:50:04.974]    </block>
[19:50:04.974]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:04.974]      // if-block "protType == 1"
[19:50:04.974]        // =>  FALSE
[19:50:04.977]      // skip if-block "protType == 1"
[19:50:04.977]    </control>
[19:50:04.977]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:04.977]      // if-block "protType == 2"
[19:50:04.977]        // =>  TRUE
[19:50:04.977]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:04.977]        // if-block "isSWJ"
[19:50:04.977]          // =>  TRUE
[19:50:04.977]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:04.977]          // if-block "hasDormant"
[19:50:04.978]            // =>  FALSE
[19:50:04.978]          // skip if-block "hasDormant"
[19:50:04.978]        </control>
[19:50:04.978]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:04.978]          // if-block "!hasDormant"
[19:50:04.978]            // =>  TRUE
[19:50:04.978]          <block atomic="false" info="">
[19:50:04.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:04.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.980]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:04.983]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:04.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:04.993]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.993]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:04.994]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:04.994]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:04.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:04.994]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:04.994]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:04.994]          </block>
[19:50:04.994]          // end if-block "!hasDormant"
[19:50:04.994]        </control>
[19:50:04.994]        // end if-block "isSWJ"
[19:50:04.994]      </control>
[19:50:05.004]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:05.004]        // if-block "!isSWJ"
[19:50:05.004]          // =>  FALSE
[19:50:05.004]        // skip if-block "!isSWJ"
[19:50:05.004]      </control>
[19:50:05.004]      <block atomic="false" info="">
[19:50:05.004]        ReadDP(0x0);
[19:50:05.007]  
[19:50:05.007]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:05.007]  
[19:50:05.007]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:05.007]      </block>
[19:50:05.007]      // end if-block "protType == 2"
[19:50:05.007]    </control>
[19:50:05.007]  </sequence>
[19:50:05.007]  
[19:50:05.266]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:05.266]  
[19:50:05.267]  <debugvars>
[19:50:05.267]    // Pre-defined
[19:50:05.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:05.267]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:05.267]    __dp=0x00000000
[19:50:05.267]    __ap=0x00000000
[19:50:05.267]    __traceout=0x00000000      (Trace Disabled)
[19:50:05.267]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:05.267]    __FlashAddr=0x00000000
[19:50:05.267]    __FlashLen=0x00000000
[19:50:05.267]    __FlashArg=0x00000000
[19:50:05.267]    __FlashOp=0x00000000
[19:50:05.267]    __Result=0x00000000
[19:50:05.267]  </debugvars>
[19:50:05.267]  
[19:50:05.267]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:05.267]    <block atomic="false" info="">
[19:50:05.267]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:05.267]        // -> [isSWJ <= 0x00000001]
[19:50:05.267]      __var hasDormant = __protocol & 0x00020000;
[19:50:05.267]        // -> [hasDormant <= 0x00000000]
[19:50:05.267]      __var protType   = __protocol & 0x0000FFFF;
[19:50:05.267]        // -> [protType <= 0x00000002]
[19:50:05.267]    </block>
[19:50:05.267]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:05.267]      // if-block "protType == 1"
[19:50:05.267]        // =>  FALSE
[19:50:05.267]      // skip if-block "protType == 1"
[19:50:05.267]    </control>
[19:50:05.267]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:05.267]      // if-block "protType == 2"
[19:50:05.267]        // =>  TRUE
[19:50:05.267]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:05.267]        // if-block "isSWJ"
[19:50:05.267]          // =>  TRUE
[19:50:05.267]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:05.267]          // if-block "hasDormant"
[19:50:05.267]            // =>  FALSE
[19:50:05.267]          // skip if-block "hasDormant"
[19:50:05.267]        </control>
[19:50:05.267]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:05.267]          // if-block "!hasDormant"
[19:50:05.267]            // =>  TRUE
[19:50:05.267]          <block atomic="false" info="">
[19:50:05.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:05.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.276]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:05.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:05.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:05.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.286]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:05.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:05.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:05.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.296]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:05.296]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:05.296]          </block>
[19:50:05.296]          // end if-block "!hasDormant"
[19:50:05.296]        </control>
[19:50:05.296]        // end if-block "isSWJ"
[19:50:05.296]      </control>
[19:50:05.296]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:05.296]        // if-block "!isSWJ"
[19:50:05.296]          // =>  FALSE
[19:50:05.296]        // skip if-block "!isSWJ"
[19:50:05.296]      </control>
[19:50:05.296]      <block atomic="false" info="">
[19:50:05.296]        ReadDP(0x0);
[19:50:05.304]  
[19:50:05.304]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:05.304]  
[19:50:05.304]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:05.304]      </block>
[19:50:05.304]      // end if-block "protType == 2"
[19:50:05.304]    </control>
[19:50:05.304]  </sequence>
[19:50:05.304]  
[19:50:05.557]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:05.557]  
[19:50:05.560]  <debugvars>
[19:50:05.560]    // Pre-defined
[19:50:05.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:05.560]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:05.560]    __dp=0x00000000
[19:50:05.560]    __ap=0x00000000
[19:50:05.560]    __traceout=0x00000000      (Trace Disabled)
[19:50:05.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:05.560]    __FlashAddr=0x00000000
[19:50:05.560]    __FlashLen=0x00000000
[19:50:05.560]    __FlashArg=0x00000000
[19:50:05.560]    __FlashOp=0x00000000
[19:50:05.560]    __Result=0x00000000
[19:50:05.560]  </debugvars>
[19:50:05.560]  
[19:50:05.560]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:05.560]    <block atomic="false" info="">
[19:50:05.560]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:05.560]        // -> [isSWJ <= 0x00000001]
[19:50:05.560]      __var hasDormant = __protocol & 0x00020000;
[19:50:05.560]        // -> [hasDormant <= 0x00000000]
[19:50:05.560]      __var protType   = __protocol & 0x0000FFFF;
[19:50:05.560]        // -> [protType <= 0x00000002]
[19:50:05.560]    </block>
[19:50:05.560]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:05.560]      // if-block "protType == 1"
[19:50:05.560]        // =>  FALSE
[19:50:05.560]      // skip if-block "protType == 1"
[19:50:05.560]    </control>
[19:50:05.560]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:05.560]      // if-block "protType == 2"
[19:50:05.560]        // =>  TRUE
[19:50:05.560]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:05.560]        // if-block "isSWJ"
[19:50:05.560]          // =>  TRUE
[19:50:05.560]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:05.560]          // if-block "hasDormant"
[19:50:05.560]            // =>  FALSE
[19:50:05.560]          // skip if-block "hasDormant"
[19:50:05.560]        </control>
[19:50:05.560]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:05.560]          // if-block "!hasDormant"
[19:50:05.560]            // =>  TRUE
[19:50:05.560]          <block atomic="false" info="">
[19:50:05.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:05.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.567]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:05.567]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:05.567]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:05.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.567]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:05.577]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:05.577]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:05.587]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.587]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:05.587]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:05.587]          </block>
[19:50:05.587]          // end if-block "!hasDormant"
[19:50:05.587]        </control>
[19:50:05.587]        // end if-block "isSWJ"
[19:50:05.587]      </control>
[19:50:05.587]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:05.587]        // if-block "!isSWJ"
[19:50:05.587]          // =>  FALSE
[19:50:05.587]        // skip if-block "!isSWJ"
[19:50:05.587]      </control>
[19:50:05.587]      <block atomic="false" info="">
[19:50:05.587]        ReadDP(0x0);
[19:50:05.597]  
[19:50:05.597]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:05.597]  
[19:50:05.597]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:05.597]      </block>
[19:50:05.597]      // end if-block "protType == 2"
[19:50:05.597]    </control>
[19:50:05.597]  </sequence>
[19:50:05.597]  
[19:50:05.848]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:05.848]  
[19:50:05.849]  <debugvars>
[19:50:05.849]    // Pre-defined
[19:50:05.849]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:05.849]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:05.849]    __dp=0x00000000
[19:50:05.849]    __ap=0x00000000
[19:50:05.849]    __traceout=0x00000000      (Trace Disabled)
[19:50:05.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:05.849]    __FlashAddr=0x00000000
[19:50:05.849]    __FlashLen=0x00000000
[19:50:05.849]    __FlashArg=0x00000000
[19:50:05.849]    __FlashOp=0x00000000
[19:50:05.849]    __Result=0x00000000
[19:50:05.849]  </debugvars>
[19:50:05.849]  
[19:50:05.849]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:05.849]    <block atomic="false" info="">
[19:50:05.849]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:05.849]        // -> [isSWJ <= 0x00000001]
[19:50:05.849]      __var hasDormant = __protocol & 0x00020000;
[19:50:05.849]        // -> [hasDormant <= 0x00000000]
[19:50:05.849]      __var protType   = __protocol & 0x0000FFFF;
[19:50:05.849]        // -> [protType <= 0x00000002]
[19:50:05.849]    </block>
[19:50:05.849]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:05.849]      // if-block "protType == 1"
[19:50:05.849]        // =>  FALSE
[19:50:05.849]      // skip if-block "protType == 1"
[19:50:05.849]    </control>
[19:50:05.849]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:05.849]      // if-block "protType == 2"
[19:50:05.849]        // =>  TRUE
[19:50:05.849]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:05.849]        // if-block "isSWJ"
[19:50:05.849]          // =>  TRUE
[19:50:05.849]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:05.849]          // if-block "hasDormant"
[19:50:05.849]            // =>  FALSE
[19:50:05.849]          // skip if-block "hasDormant"
[19:50:05.849]        </control>
[19:50:05.849]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:05.849]          // if-block "!hasDormant"
[19:50:05.849]            // =>  TRUE
[19:50:05.849]          <block atomic="false" info="">
[19:50:05.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:05.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.858]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:05.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:05.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:05.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.868]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:05.868]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:05.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:05.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:05.868]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:05.879]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:05.879]          </block>
[19:50:05.879]          // end if-block "!hasDormant"
[19:50:05.879]        </control>
[19:50:05.879]        // end if-block "isSWJ"
[19:50:05.879]      </control>
[19:50:05.879]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:05.879]        // if-block "!isSWJ"
[19:50:05.879]          // =>  FALSE
[19:50:05.879]        // skip if-block "!isSWJ"
[19:50:05.879]      </control>
[19:50:05.879]      <block atomic="false" info="">
[19:50:05.879]        ReadDP(0x0);
[19:50:05.879]  
[19:50:05.879]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:05.879]  
[19:50:05.879]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:05.879]      </block>
[19:50:05.879]      // end if-block "protType == 2"
[19:50:05.879]    </control>
[19:50:05.879]  </sequence>
[19:50:05.879]  
[19:50:06.133]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:06.133]  
[19:50:06.133]  <debugvars>
[19:50:06.133]    // Pre-defined
[19:50:06.133]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:06.133]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:06.133]    __dp=0x00000000
[19:50:06.133]    __ap=0x00000000
[19:50:06.133]    __traceout=0x00000000      (Trace Disabled)
[19:50:06.133]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:06.133]    __FlashAddr=0x00000000
[19:50:06.133]    __FlashLen=0x00000000
[19:50:06.133]    __FlashArg=0x00000000
[19:50:06.133]    __FlashOp=0x00000000
[19:50:06.133]    __Result=0x00000000
[19:50:06.133]  </debugvars>
[19:50:06.133]  
[19:50:06.133]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:06.133]    <block atomic="false" info="">
[19:50:06.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:06.133]        // -> [isSWJ <= 0x00000001]
[19:50:06.133]      __var hasDormant = __protocol & 0x00020000;
[19:50:06.133]        // -> [hasDormant <= 0x00000000]
[19:50:06.133]      __var protType   = __protocol & 0x0000FFFF;
[19:50:06.133]        // -> [protType <= 0x00000002]
[19:50:06.133]    </block>
[19:50:06.133]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:06.135]      // if-block "protType == 1"
[19:50:06.135]        // =>  FALSE
[19:50:06.135]      // skip if-block "protType == 1"
[19:50:06.135]    </control>
[19:50:06.135]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:06.135]      // if-block "protType == 2"
[19:50:06.135]        // =>  TRUE
[19:50:06.135]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:06.135]        // if-block "isSWJ"
[19:50:06.135]          // =>  TRUE
[19:50:06.135]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:06.135]          // if-block "hasDormant"
[19:50:06.135]            // =>  FALSE
[19:50:06.135]          // skip if-block "hasDormant"
[19:50:06.135]        </control>
[19:50:06.135]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:06.135]          // if-block "!hasDormant"
[19:50:06.135]            // =>  TRUE
[19:50:06.135]          <block atomic="false" info="">
[19:50:06.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:06.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.142]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:06.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:06.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:06.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.142]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:06.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:06.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:06.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.155]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:06.160]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:06.161]          </block>
[19:50:06.161]          // end if-block "!hasDormant"
[19:50:06.161]        </control>
[19:50:06.161]        // end if-block "isSWJ"
[19:50:06.161]      </control>
[19:50:06.161]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:06.161]        // if-block "!isSWJ"
[19:50:06.161]          // =>  FALSE
[19:50:06.162]        // skip if-block "!isSWJ"
[19:50:06.162]      </control>
[19:50:06.162]      <block atomic="false" info="">
[19:50:06.162]        ReadDP(0x0);
[19:50:06.162]  
[19:50:06.162]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:06.162]  
[19:50:06.162]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:06.162]      </block>
[19:50:06.162]      // end if-block "protType == 2"
[19:50:06.162]    </control>
[19:50:06.162]  </sequence>
[19:50:06.162]  
[19:50:06.415]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:06.415]  
[19:50:06.415]  <debugvars>
[19:50:06.415]    // Pre-defined
[19:50:06.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:06.415]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:06.415]    __dp=0x00000000
[19:50:06.415]    __ap=0x00000000
[19:50:06.415]    __traceout=0x00000000      (Trace Disabled)
[19:50:06.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:06.415]    __FlashAddr=0x00000000
[19:50:06.415]    __FlashLen=0x00000000
[19:50:06.415]    __FlashArg=0x00000000
[19:50:06.415]    __FlashOp=0x00000000
[19:50:06.415]    __Result=0x00000000
[19:50:06.415]  </debugvars>
[19:50:06.415]  
[19:50:06.415]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:06.415]    <block atomic="false" info="">
[19:50:06.415]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:06.415]        // -> [isSWJ <= 0x00000001]
[19:50:06.415]      __var hasDormant = __protocol & 0x00020000;
[19:50:06.415]        // -> [hasDormant <= 0x00000000]
[19:50:06.415]      __var protType   = __protocol & 0x0000FFFF;
[19:50:06.415]        // -> [protType <= 0x00000002]
[19:50:06.415]    </block>
[19:50:06.415]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:06.415]      // if-block "protType == 1"
[19:50:06.415]        // =>  FALSE
[19:50:06.415]      // skip if-block "protType == 1"
[19:50:06.415]    </control>
[19:50:06.415]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:06.415]      // if-block "protType == 2"
[19:50:06.415]        // =>  TRUE
[19:50:06.415]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:06.415]        // if-block "isSWJ"
[19:50:06.415]          // =>  TRUE
[19:50:06.415]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:06.415]          // if-block "hasDormant"
[19:50:06.415]            // =>  FALSE
[19:50:06.415]          // skip if-block "hasDormant"
[19:50:06.415]        </control>
[19:50:06.415]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:06.415]          // if-block "!hasDormant"
[19:50:06.415]            // =>  TRUE
[19:50:06.415]          <block atomic="false" info="">
[19:50:06.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:06.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.425]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:06.425]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:06.425]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:06.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.433]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:06.435]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:06.435]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:06.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.437]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:06.437]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:06.437]          </block>
[19:50:06.437]          // end if-block "!hasDormant"
[19:50:06.437]        </control>
[19:50:06.437]        // end if-block "isSWJ"
[19:50:06.437]      </control>
[19:50:06.437]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:06.437]        // if-block "!isSWJ"
[19:50:06.437]          // =>  FALSE
[19:50:06.437]        // skip if-block "!isSWJ"
[19:50:06.437]      </control>
[19:50:06.437]      <block atomic="false" info="">
[19:50:06.437]        ReadDP(0x0);
[19:50:06.449]  
[19:50:06.449]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:06.449]  
[19:50:06.449]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:06.449]      </block>
[19:50:06.449]      // end if-block "protType == 2"
[19:50:06.449]    </control>
[19:50:06.449]  </sequence>
[19:50:06.449]  
[19:50:06.709]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:06.709]  
[19:50:06.711]  <debugvars>
[19:50:06.711]    // Pre-defined
[19:50:06.711]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:06.711]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:06.711]    __dp=0x00000000
[19:50:06.711]    __ap=0x00000000
[19:50:06.711]    __traceout=0x00000000      (Trace Disabled)
[19:50:06.711]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:06.711]    __FlashAddr=0x00000000
[19:50:06.711]    __FlashLen=0x00000000
[19:50:06.711]    __FlashArg=0x00000000
[19:50:06.711]    __FlashOp=0x00000000
[19:50:06.711]    __Result=0x00000000
[19:50:06.711]  </debugvars>
[19:50:06.711]  
[19:50:06.711]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:06.711]    <block atomic="false" info="">
[19:50:06.711]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:06.711]        // -> [isSWJ <= 0x00000001]
[19:50:06.711]      __var hasDormant = __protocol & 0x00020000;
[19:50:06.711]        // -> [hasDormant <= 0x00000000]
[19:50:06.711]      __var protType   = __protocol & 0x0000FFFF;
[19:50:06.711]        // -> [protType <= 0x00000002]
[19:50:06.711]    </block>
[19:50:06.711]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:06.711]      // if-block "protType == 1"
[19:50:06.711]        // =>  FALSE
[19:50:06.711]      // skip if-block "protType == 1"
[19:50:06.711]    </control>
[19:50:06.711]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:06.711]      // if-block "protType == 2"
[19:50:06.711]        // =>  TRUE
[19:50:06.711]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:06.711]        // if-block "isSWJ"
[19:50:06.711]          // =>  TRUE
[19:50:06.711]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:06.711]          // if-block "hasDormant"
[19:50:06.711]            // =>  FALSE
[19:50:06.711]          // skip if-block "hasDormant"
[19:50:06.711]        </control>
[19:50:06.711]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:06.711]          // if-block "!hasDormant"
[19:50:06.711]            // =>  TRUE
[19:50:06.711]          <block atomic="false" info="">
[19:50:06.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:06.721]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.721]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:06.721]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:06.721]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:06.721]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.721]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:06.730]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:06.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:06.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:06.733]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:06.739]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:06.740]          </block>
[19:50:06.740]          // end if-block "!hasDormant"
[19:50:06.740]        </control>
[19:50:06.740]        // end if-block "isSWJ"
[19:50:06.740]      </control>
[19:50:06.740]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:06.740]        // if-block "!isSWJ"
[19:50:06.740]          // =>  FALSE
[19:50:06.740]        // skip if-block "!isSWJ"
[19:50:06.740]      </control>
[19:50:06.740]      <block atomic="false" info="">
[19:50:06.740]        ReadDP(0x0);
[19:50:06.744]  
[19:50:06.744]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:06.744]  
[19:50:06.744]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:06.744]      </block>
[19:50:06.744]      // end if-block "protType == 2"
[19:50:06.744]    </control>
[19:50:06.744]  </sequence>
[19:50:06.744]  
[19:50:07.000]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:07.000]  
[19:50:07.002]  <debugvars>
[19:50:07.002]    // Pre-defined
[19:50:07.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:07.003]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:07.003]    __dp=0x00000000
[19:50:07.003]    __ap=0x00000000
[19:50:07.003]    __traceout=0x00000000      (Trace Disabled)
[19:50:07.003]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:07.003]    __FlashAddr=0x00000000
[19:50:07.003]    __FlashLen=0x00000000
[19:50:07.003]    __FlashArg=0x00000000
[19:50:07.003]    __FlashOp=0x00000000
[19:50:07.003]    __Result=0x00000000
[19:50:07.003]  </debugvars>
[19:50:07.003]  
[19:50:07.003]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:07.003]    <block atomic="false" info="">
[19:50:07.003]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:07.003]        // -> [isSWJ <= 0x00000001]
[19:50:07.003]      __var hasDormant = __protocol & 0x00020000;
[19:50:07.003]        // -> [hasDormant <= 0x00000000]
[19:50:07.003]      __var protType   = __protocol & 0x0000FFFF;
[19:50:07.003]        // -> [protType <= 0x00000002]
[19:50:07.003]    </block>
[19:50:07.003]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:07.003]      // if-block "protType == 1"
[19:50:07.003]        // =>  FALSE
[19:50:07.003]      // skip if-block "protType == 1"
[19:50:07.003]    </control>
[19:50:07.003]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:07.003]      // if-block "protType == 2"
[19:50:07.003]        // =>  TRUE
[19:50:07.003]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:07.003]        // if-block "isSWJ"
[19:50:07.003]          // =>  TRUE
[19:50:07.003]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:07.003]          // if-block "hasDormant"
[19:50:07.003]            // =>  FALSE
[19:50:07.003]          // skip if-block "hasDormant"
[19:50:07.003]        </control>
[19:50:07.003]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:07.003]          // if-block "!hasDormant"
[19:50:07.003]            // =>  TRUE
[19:50:07.003]          <block atomic="false" info="">
[19:50:07.003]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:07.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.011]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:07.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:07.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:07.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.020]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:07.020]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:07.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:07.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.027]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:07.028]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:07.028]          </block>
[19:50:07.028]          // end if-block "!hasDormant"
[19:50:07.028]        </control>
[19:50:07.031]        // end if-block "isSWJ"
[19:50:07.031]      </control>
[19:50:07.031]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:07.031]        // if-block "!isSWJ"
[19:50:07.031]          // =>  FALSE
[19:50:07.031]        // skip if-block "!isSWJ"
[19:50:07.031]      </control>
[19:50:07.031]      <block atomic="false" info="">
[19:50:07.031]        ReadDP(0x0);
[19:50:07.031]  
[19:50:07.031]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:07.031]  
[19:50:07.031]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:07.031]      </block>
[19:50:07.031]      // end if-block "protType == 2"
[19:50:07.031]    </control>
[19:50:07.031]  </sequence>
[19:50:07.031]  
[19:50:07.291]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:07.291]  
[19:50:07.292]  <debugvars>
[19:50:07.292]    // Pre-defined
[19:50:07.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:07.292]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:07.292]    __dp=0x00000000
[19:50:07.292]    __ap=0x00000000
[19:50:07.292]    __traceout=0x00000000      (Trace Disabled)
[19:50:07.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:07.292]    __FlashAddr=0x00000000
[19:50:07.292]    __FlashLen=0x00000000
[19:50:07.292]    __FlashArg=0x00000000
[19:50:07.292]    __FlashOp=0x00000000
[19:50:07.292]    __Result=0x00000000
[19:50:07.292]  </debugvars>
[19:50:07.292]  
[19:50:07.292]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:07.292]    <block atomic="false" info="">
[19:50:07.292]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:07.292]        // -> [isSWJ <= 0x00000001]
[19:50:07.292]      __var hasDormant = __protocol & 0x00020000;
[19:50:07.292]        // -> [hasDormant <= 0x00000000]
[19:50:07.292]      __var protType   = __protocol & 0x0000FFFF;
[19:50:07.292]        // -> [protType <= 0x00000002]
[19:50:07.292]    </block>
[19:50:07.292]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:07.292]      // if-block "protType == 1"
[19:50:07.292]        // =>  FALSE
[19:50:07.292]      // skip if-block "protType == 1"
[19:50:07.292]    </control>
[19:50:07.292]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:07.292]      // if-block "protType == 2"
[19:50:07.292]        // =>  TRUE
[19:50:07.292]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:07.292]        // if-block "isSWJ"
[19:50:07.292]          // =>  TRUE
[19:50:07.292]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:07.292]          // if-block "hasDormant"
[19:50:07.296]            // =>  FALSE
[19:50:07.296]          // skip if-block "hasDormant"
[19:50:07.296]        </control>
[19:50:07.296]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:07.296]          // if-block "!hasDormant"
[19:50:07.296]            // =>  TRUE
[19:50:07.296]          <block atomic="false" info="">
[19:50:07.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:07.303]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.303]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:07.305]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:07.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:07.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.311]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:07.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:07.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:07.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.313]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:07.322]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:07.322]          </block>
[19:50:07.322]          // end if-block "!hasDormant"
[19:50:07.322]        </control>
[19:50:07.322]        // end if-block "isSWJ"
[19:50:07.322]      </control>
[19:50:07.322]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:07.323]        // if-block "!isSWJ"
[19:50:07.323]          // =>  FALSE
[19:50:07.323]        // skip if-block "!isSWJ"
[19:50:07.323]      </control>
[19:50:07.323]      <block atomic="false" info="">
[19:50:07.323]        ReadDP(0x0);
[19:50:07.325]  
[19:50:07.325]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:07.325]  
[19:50:07.325]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:07.325]      </block>
[19:50:07.325]      // end if-block "protType == 2"
[19:50:07.325]    </control>
[19:50:07.325]  </sequence>
[19:50:07.325]  
[19:50:07.581]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:07.581]  
[19:50:07.581]  <debugvars>
[19:50:07.581]    // Pre-defined
[19:50:07.581]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:07.581]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:07.581]    __dp=0x00000000
[19:50:07.581]    __ap=0x00000000
[19:50:07.581]    __traceout=0x00000000      (Trace Disabled)
[19:50:07.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:07.581]    __FlashAddr=0x00000000
[19:50:07.581]    __FlashLen=0x00000000
[19:50:07.583]    __FlashArg=0x00000000
[19:50:07.583]    __FlashOp=0x00000000
[19:50:07.583]    __Result=0x00000000
[19:50:07.583]  </debugvars>
[19:50:07.583]  
[19:50:07.583]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:07.583]    <block atomic="false" info="">
[19:50:07.583]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:07.583]        // -> [isSWJ <= 0x00000001]
[19:50:07.583]      __var hasDormant = __protocol & 0x00020000;
[19:50:07.583]        // -> [hasDormant <= 0x00000000]
[19:50:07.583]      __var protType   = __protocol & 0x0000FFFF;
[19:50:07.583]        // -> [protType <= 0x00000002]
[19:50:07.583]    </block>
[19:50:07.583]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:07.583]      // if-block "protType == 1"
[19:50:07.583]        // =>  FALSE
[19:50:07.583]      // skip if-block "protType == 1"
[19:50:07.583]    </control>
[19:50:07.583]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:07.583]      // if-block "protType == 2"
[19:50:07.583]        // =>  TRUE
[19:50:07.583]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:07.583]        // if-block "isSWJ"
[19:50:07.583]          // =>  TRUE
[19:50:07.583]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:07.583]          // if-block "hasDormant"
[19:50:07.583]            // =>  FALSE
[19:50:07.583]          // skip if-block "hasDormant"
[19:50:07.583]        </control>
[19:50:07.583]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:07.583]          // if-block "!hasDormant"
[19:50:07.583]            // =>  TRUE
[19:50:07.583]          <block atomic="false" info="">
[19:50:07.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:07.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.591]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:07.591]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:07.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:07.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.601]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:07.604]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:07.604]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:07.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.604]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:07.611]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:07.611]          </block>
[19:50:07.611]          // end if-block "!hasDormant"
[19:50:07.611]        </control>
[19:50:07.611]        // end if-block "isSWJ"
[19:50:07.611]      </control>
[19:50:07.611]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:07.611]        // if-block "!isSWJ"
[19:50:07.611]          // =>  FALSE
[19:50:07.611]        // skip if-block "!isSWJ"
[19:50:07.611]      </control>
[19:50:07.611]      <block atomic="false" info="">
[19:50:07.611]        ReadDP(0x0);
[19:50:07.611]  
[19:50:07.611]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:07.611]  
[19:50:07.611]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:07.611]      </block>
[19:50:07.611]      // end if-block "protType == 2"
[19:50:07.611]    </control>
[19:50:07.611]  </sequence>
[19:50:07.611]  
[19:50:07.871]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:07.871]  
[19:50:07.872]  <debugvars>
[19:50:07.872]    // Pre-defined
[19:50:07.872]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:07.872]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:07.872]    __dp=0x00000000
[19:50:07.872]    __ap=0x00000000
[19:50:07.872]    __traceout=0x00000000      (Trace Disabled)
[19:50:07.872]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:07.872]    __FlashAddr=0x00000000
[19:50:07.872]    __FlashLen=0x00000000
[19:50:07.872]    __FlashArg=0x00000000
[19:50:07.872]    __FlashOp=0x00000000
[19:50:07.872]    __Result=0x00000000
[19:50:07.872]  </debugvars>
[19:50:07.872]  
[19:50:07.872]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:07.872]    <block atomic="false" info="">
[19:50:07.872]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:07.872]        // -> [isSWJ <= 0x00000001]
[19:50:07.872]      __var hasDormant = __protocol & 0x00020000;
[19:50:07.872]        // -> [hasDormant <= 0x00000000]
[19:50:07.872]      __var protType   = __protocol & 0x0000FFFF;
[19:50:07.872]        // -> [protType <= 0x00000002]
[19:50:07.872]    </block>
[19:50:07.872]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:07.872]      // if-block "protType == 1"
[19:50:07.872]        // =>  FALSE
[19:50:07.875]      // skip if-block "protType == 1"
[19:50:07.875]    </control>
[19:50:07.875]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:07.875]      // if-block "protType == 2"
[19:50:07.875]        // =>  TRUE
[19:50:07.875]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:07.875]        // if-block "isSWJ"
[19:50:07.875]          // =>  TRUE
[19:50:07.875]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:07.875]          // if-block "hasDormant"
[19:50:07.875]            // =>  FALSE
[19:50:07.875]          // skip if-block "hasDormant"
[19:50:07.875]        </control>
[19:50:07.875]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:07.875]          // if-block "!hasDormant"
[19:50:07.875]            // =>  TRUE
[19:50:07.875]          <block atomic="false" info="">
[19:50:07.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:07.881]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.881]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:07.886]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:07.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:07.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.888]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:07.894]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:07.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:07.899]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:07.899]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:07.901]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:07.902]          </block>
[19:50:07.902]          // end if-block "!hasDormant"
[19:50:07.902]        </control>
[19:50:07.902]        // end if-block "isSWJ"
[19:50:07.902]      </control>
[19:50:07.902]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:07.902]        // if-block "!isSWJ"
[19:50:07.902]          // =>  FALSE
[19:50:07.902]        // skip if-block "!isSWJ"
[19:50:07.902]      </control>
[19:50:07.902]      <block atomic="false" info="">
[19:50:07.902]        ReadDP(0x0);
[19:50:07.911]  
[19:50:07.911]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:07.911]  
[19:50:07.911]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:07.911]      </block>
[19:50:07.911]      // end if-block "protType == 2"
[19:50:07.911]    </control>
[19:50:07.911]  </sequence>
[19:50:07.911]  
[19:50:08.161]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:08.161]  
[19:50:08.161]  <debugvars>
[19:50:08.161]    // Pre-defined
[19:50:08.161]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:08.161]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:08.161]    __dp=0x00000000
[19:50:08.161]    __ap=0x00000000
[19:50:08.161]    __traceout=0x00000000      (Trace Disabled)
[19:50:08.161]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:08.161]    __FlashAddr=0x00000000
[19:50:08.161]    __FlashLen=0x00000000
[19:50:08.161]    __FlashArg=0x00000000
[19:50:08.161]    __FlashOp=0x00000000
[19:50:08.161]    __Result=0x00000000
[19:50:08.161]  </debugvars>
[19:50:08.161]  
[19:50:08.161]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:08.161]    <block atomic="false" info="">
[19:50:08.161]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:08.161]        // -> [isSWJ <= 0x00000001]
[19:50:08.161]      __var hasDormant = __protocol & 0x00020000;
[19:50:08.161]        // -> [hasDormant <= 0x00000000]
[19:50:08.161]      __var protType   = __protocol & 0x0000FFFF;
[19:50:08.161]        // -> [protType <= 0x00000002]
[19:50:08.161]    </block>
[19:50:08.161]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:08.161]      // if-block "protType == 1"
[19:50:08.161]        // =>  FALSE
[19:50:08.161]      // skip if-block "protType == 1"
[19:50:08.161]    </control>
[19:50:08.161]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:08.161]      // if-block "protType == 2"
[19:50:08.161]        // =>  TRUE
[19:50:08.161]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:08.161]        // if-block "isSWJ"
[19:50:08.161]          // =>  TRUE
[19:50:08.161]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:08.161]          // if-block "hasDormant"
[19:50:08.161]            // =>  FALSE
[19:50:08.161]          // skip if-block "hasDormant"
[19:50:08.161]        </control>
[19:50:08.161]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:08.161]          // if-block "!hasDormant"
[19:50:08.161]            // =>  TRUE
[19:50:08.161]          <block atomic="false" info="">
[19:50:08.161]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:08.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:08.171]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:08.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:08.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:08.181]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:08.181]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:08.181]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:08.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:08.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:08.191]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:08.191]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:08.191]          </block>
[19:50:08.191]          // end if-block "!hasDormant"
[19:50:08.191]        </control>
[19:50:08.191]        // end if-block "isSWJ"
[19:50:08.191]      </control>
[19:50:08.191]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:08.191]        // if-block "!isSWJ"
[19:50:08.191]          // =>  FALSE
[19:50:08.191]        // skip if-block "!isSWJ"
[19:50:08.191]      </control>
[19:50:08.191]      <block atomic="false" info="">
[19:50:08.191]        ReadDP(0x0);
[19:50:08.191]  
[19:50:08.191]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:08.191]  
[19:50:08.191]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:08.191]      </block>
[19:50:08.191]      // end if-block "protType == 2"
[19:50:08.191]    </control>
[19:50:08.191]  </sequence>
[19:50:08.191]  
[19:50:08.443]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:50:08.443]  
[19:50:08.444]  <debugvars>
[19:50:08.444]    // Pre-defined
[19:50:08.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:08.444]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:08.444]    __dp=0x00000000
[19:50:08.444]    __ap=0x00000000
[19:50:08.444]    __traceout=0x00000000      (Trace Disabled)
[19:50:08.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:08.445]    __FlashAddr=0x00000000
[19:50:08.445]    __FlashLen=0x00000000
[19:50:08.445]    __FlashArg=0x00000000
[19:50:08.445]    __FlashOp=0x00000000
[19:50:08.445]    __Result=0x00000000
[19:50:08.445]  </debugvars>
[19:50:08.445]  
[19:50:08.445]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:08.445]    <block atomic="false" info="">
[19:50:08.445]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:08.445]        // -> [isSWJ <= 0x00000001]
[19:50:08.445]      __var hasDormant = __protocol & 0x00020000;
[19:50:08.445]        // -> [hasDormant <= 0x00000000]
[19:50:08.445]      __var protType   = __protocol & 0x0000FFFF;
[19:50:08.445]        // -> [protType <= 0x00000002]
[19:50:08.445]    </block>
[19:50:08.445]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:08.445]      // if-block "protType == 1"
[19:50:08.445]        // =>  FALSE
[19:50:08.445]      // skip if-block "protType == 1"
[19:50:08.445]    </control>
[19:50:08.445]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:08.445]      // if-block "protType == 2"
[19:50:08.445]        // =>  TRUE
[19:50:08.445]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:08.445]        // if-block "isSWJ"
[19:50:08.445]          // =>  TRUE
[19:50:08.445]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:08.445]          // if-block "hasDormant"
[19:50:08.445]            // =>  FALSE
[19:50:08.445]          // skip if-block "hasDormant"
[19:50:08.445]        </control>
[19:50:08.445]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:08.445]          // if-block "!hasDormant"
[19:50:08.445]            // =>  TRUE
[19:50:08.445]          <block atomic="false" info="">
[19:50:08.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:08.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:08.455]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:08.458]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:08.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:08.460]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:08.460]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:08.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:08.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:08.468]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:08.468]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:08.470]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:08.470]          </block>
[19:50:08.470]          // end if-block "!hasDormant"
[19:50:08.472]        </control>
[19:50:08.472]        // end if-block "isSWJ"
[19:50:08.472]      </control>
[19:50:08.472]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:08.472]        // if-block "!isSWJ"
[19:50:08.472]          // =>  FALSE
[19:50:08.472]        // skip if-block "!isSWJ"
[19:50:08.472]      </control>
[19:50:08.472]      <block atomic="false" info="">
[19:50:08.473]        ReadDP(0x0);
[19:50:08.476]  
[19:50:08.476]  !!! E310 : Debug access failed - cannot read DP register 0x00
[19:50:08.476]  
[19:50:08.476]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:08.476]      </block>
[19:50:08.476]      // end if-block "protType == 2"
[19:50:08.476]    </control>
[19:50:08.477]  </sequence>
[19:50:08.477]  
[19:50:49.713]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:50:49.713]  
[19:50:49.718]  <debugvars>
[19:50:49.718]    // Pre-defined
[19:50:49.718]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:49.718]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:49.718]    __dp=0x00000000
[19:50:49.718]    __ap=0x00000000
[19:50:49.718]    __traceout=0x00000000      (Trace Disabled)
[19:50:49.718]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:49.718]    __FlashAddr=0x00000000
[19:50:49.718]    __FlashLen=0x00000000
[19:50:49.718]    __FlashArg=0x00000000
[19:50:49.718]    __FlashOp=0x00000000
[19:50:49.718]    __Result=0x00000000
[19:50:49.718]  </debugvars>
[19:50:49.718]  
[19:50:49.718]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:49.718]    <block atomic="false" info="">
[19:50:49.720]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:49.720]        // -> [isSWJ <= 0x00000001]
[19:50:49.720]      __var hasDormant = __protocol & 0x00020000;
[19:50:49.720]        // -> [hasDormant <= 0x00000000]
[19:50:49.720]      __var protType   = __protocol & 0x0000FFFF;
[19:50:49.720]        // -> [protType <= 0x00000002]
[19:50:49.720]    </block>
[19:50:49.720]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:49.720]      // if-block "protType == 1"
[19:50:49.720]        // =>  FALSE
[19:50:49.720]      // skip if-block "protType == 1"
[19:50:49.720]    </control>
[19:50:49.720]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:49.720]      // if-block "protType == 2"
[19:50:49.720]        // =>  TRUE
[19:50:49.720]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:49.720]        // if-block "isSWJ"
[19:50:49.722]          // =>  TRUE
[19:50:49.722]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:49.722]          // if-block "hasDormant"
[19:50:49.722]            // =>  FALSE
[19:50:49.722]          // skip if-block "hasDormant"
[19:50:49.722]        </control>
[19:50:49.722]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:49.722]          // if-block "!hasDormant"
[19:50:49.722]            // =>  TRUE
[19:50:49.722]          <block atomic="false" info="">
[19:50:49.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:49.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:49.728]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:49.728]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:49.728]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:49.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:49.740]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:49.743]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:49.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:49.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:49.747]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:49.747]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:49.747]          </block>
[19:50:49.747]          // end if-block "!hasDormant"
[19:50:49.747]        </control>
[19:50:49.747]        // end if-block "isSWJ"
[19:50:49.747]      </control>
[19:50:49.747]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:49.747]        // if-block "!isSWJ"
[19:50:49.747]          // =>  FALSE
[19:50:49.747]        // skip if-block "!isSWJ"
[19:50:49.747]      </control>
[19:50:49.747]      <block atomic="false" info="">
[19:50:49.747]        ReadDP(0x0);
[19:50:49.755]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:49.755]      </block>
[19:50:49.755]      // end if-block "protType == 2"
[19:50:49.755]    </control>
[19:50:49.755]  </sequence>
[19:50:49.755]  
[19:50:49.769]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:50:49.769]  
[19:50:49.769]  <debugvars>
[19:50:49.769]    // Pre-defined
[19:50:49.769]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:49.769]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:49.769]    __dp=0x00000000
[19:50:49.769]    __ap=0x00000000
[19:50:49.769]    __traceout=0x00000000      (Trace Disabled)
[19:50:49.769]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:49.769]    __FlashAddr=0x00000000
[19:50:49.769]    __FlashLen=0x00000000
[19:50:49.769]    __FlashArg=0x00000000
[19:50:49.769]    __FlashOp=0x00000000
[19:50:49.771]    __Result=0x00000000
[19:50:49.771]  </debugvars>
[19:50:49.771]  
[19:50:49.771]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:50:49.771]    <block atomic="false" info="">
[19:50:49.771]      __var SW_DP_ABORT       = 0x0;
[19:50:49.771]        // -> [SW_DP_ABORT <= 0x00000000]
[19:50:49.771]      __var DP_CTRL_STAT      = 0x4;
[19:50:49.771]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:50:49.771]      __var DP_SELECT         = 0x8;
[19:50:49.771]        // -> [DP_SELECT <= 0x00000008]
[19:50:49.771]      __var powered_down      = 0;
[19:50:49.771]        // -> [powered_down <= 0x00000000]
[19:50:49.771]      WriteDP(DP_SELECT, 0x00000000);
[19:50:49.773]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:50:49.773]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:50:49.778]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:50:49.778]        // -> [powered_down <= 0x00000001]
[19:50:49.778]    </block>
[19:50:49.778]    <control if="powered_down" while="" timeout="0" info="">
[19:50:49.778]      // if-block "powered_down"
[19:50:49.778]        // =>  TRUE
[19:50:49.780]      <block atomic="false" info="">
[19:50:49.780]        Message(0, "Debug/System power-up request sent");
[19:50:49.780]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:50:49.784]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:50:49.784]      </block>
[19:50:49.784]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:50:49.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:50:49.792]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:50:49.792]        // while-condition  =>  FALSE
[19:50:49.792]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:50:49.792]      </control>
[19:50:49.792]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:50:49.792]        // if-block "(__protocol & 0xFFFF) == 1"
[19:50:49.792]          // =>  FALSE
[19:50:49.792]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:50:49.792]      </control>
[19:50:49.793]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:50:49.793]        // if-block "(__protocol & 0xFFFF) == 2"
[19:50:49.793]          // =>  TRUE
[19:50:49.793]        <block atomic="false" info="">
[19:50:49.793]          Message(0, "executing SWD power up");
[19:50:49.794]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:50:49.800]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:50:49.800]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:50:49.803]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:50:49.803]        </block>
[19:50:49.803]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:50:49.803]      </control>
[19:50:49.803]      // end if-block "powered_down"
[19:50:49.803]    </control>
[19:50:49.803]    <block atomic="false" info="">
[19:50:49.804]      __var DEBUG_PORT_VAL    = 0;
[19:50:49.804]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:50:49.804]      __var ACCESS_POINT_VAL  = 0;
[19:50:49.805]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:50:49.805]      __ap = 1; 
[19:50:49.805]        // -> [__ap <= 0x00000001]
[19:50:49.805]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:50:49.808]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:50:49.808]      __ap = 4;
[19:50:49.808]        // -> [__ap <= 0x00000004]
[19:50:49.808]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:50:49.825]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:50:49.825]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:50:49.825]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:50:49.825]    </block>
[19:50:49.825]    <block atomic="false" info="">
[19:50:49.825]      __var nReset = 0x80;
[19:50:49.825]        // -> [nReset <= 0x00000080]
[19:50:49.825]      __var canReadPins = 0;
[19:50:49.825]        // -> [canReadPins <= 0x00000000]
[19:50:49.825]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:50:49.829]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:50:49.829]        // -> [canReadPins <= 0x00000001]
[19:50:49.829]    </block>
[19:50:49.829]    <control if="" while="1" timeout="200" info="">
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.829]      // while "1"  (timeout="200")
[19:50:49.829]      // while-condition  =>  TRUE
[19:50:49.835]      // while "1"  (timeout="200")
[19:50:49.835]      // while  =>  TIMEOUT
[19:50:49.835]      // end while "1"
[19:50:49.835]    </control>
[19:50:49.835]    <control if="canReadPins" while="" timeout="0" info="">
[19:50:49.835]      // if-block "canReadPins"
[19:50:49.835]        // =>  TRUE
[19:50:49.835]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:50:49.835]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:50:49.835]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:50:49.835]        // while-condition  =>  FALSE
[19:50:49.835]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:50:49.835]      </control>
[19:50:49.835]      // end if-block "canReadPins"
[19:50:49.835]    </control>
[19:50:49.835]    <control if="!canReadPins" while="" timeout="0" info="">
[19:50:49.835]      // if-block "!canReadPins"
[19:50:49.835]        // =>  FALSE
[19:50:49.835]      // skip if-block "!canReadPins"
[19:50:49.835]    </control>
[19:50:49.835]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:50:49.835]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:50:49.835]        // =>  TRUE
[19:50:49.835]      <block atomic="false" info="">
[19:50:49.835]        WriteAP(0x00, 0x190008);
[19:50:49.843]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:50:49.845]        WriteAP(0xF0, 0x01);
[19:50:49.845]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:50:49.845]      </block>
[19:50:49.845]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:50:49.845]    </control>
[19:50:49.845]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:50:49.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:50:49.852]        // =>  FALSE
[19:50:49.852]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:50:49.852]    </control>
[19:50:49.852]    <block atomic="false" info="">
[19:50:49.852]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:50:49.865]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:50:49.865]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:50:49.865]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:50:49.867]      __ap = 0; //lets make sure we reset the access point selection
[19:50:49.868]        // -> [__ap <= 0x00000000]
[19:50:49.868]    </block>
[19:50:49.868]  </sequence>
[19:50:49.868]  
[19:50:49.907]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:50:49.907]  
[19:50:49.907]  <debugvars>
[19:50:49.907]    // Pre-defined
[19:50:49.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:49.907]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:50:49.907]    __dp=0x00000000
[19:50:49.907]    __ap=0x00000000
[19:50:49.907]    __traceout=0x00000000      (Trace Disabled)
[19:50:49.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:49.907]    __FlashAddr=0x00000000
[19:50:49.907]    __FlashLen=0x00000000
[19:50:49.907]    __FlashArg=0x00000000
[19:50:49.907]    __FlashOp=0x00000000
[19:50:49.907]    __Result=0x00000000
[19:50:49.907]  </debugvars>
[19:50:49.907]  
[19:50:49.907]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:50:49.907]    <block atomic="false" info="">
[19:50:49.907]      __var deviceID = 0;
[19:50:49.907]        // -> [deviceID <= 0x00000000]
[19:50:49.907]      __var version = 0;
[19:50:49.907]        // -> [version <= 0x00000000]
[19:50:49.907]      __var partNum = 0;
[19:50:49.907]        // -> [partNum <= 0x00000000]
[19:50:49.907]      __var manuf = 0;
[19:50:49.907]        // -> [manuf <= 0x00000000]
[19:50:49.907]      __var isMSPM0G1X0X_G3X0X = 0;
[19:50:49.907]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:50:49.907]      __var isProduction = 0;
[19:50:49.907]        // -> [isProduction <= 0x00000000]
[19:50:49.907]      __var continueId = 0;
[19:50:49.907]        // -> [continueId <= 0x00000000]
[19:50:49.907]      deviceID =   Read32(0x41C40004);
[19:50:49.926]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:50:49.926]        // -> [deviceID <= 0x2BB8802F]
[19:50:49.926]      version = deviceID >> 28;
[19:50:49.926]        // -> [version <= 0x00000002]
[19:50:49.926]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:50:49.926]        // -> [partNum <= 0x0000BB88]
[19:50:49.926]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:50:49.926]        // -> [manuf <= 0x00000017]
[19:50:49.926]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:50:49.926]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:50:49.926]      isProduction = (version > 0);
[19:50:49.926]        // -> [isProduction <= 0x00000001]
[19:50:49.926]    </block>
[19:50:49.926]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:50:49.926]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:50:49.926]        // =>  FALSE
[19:50:49.926]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:50:49.926]    </control>
[19:50:49.926]    <control if="continueId == 4" while="" timeout="0" info="">
[19:50:49.926]      // if-block "continueId == 4"
[19:50:49.926]        // =>  FALSE
[19:50:49.926]      // skip if-block "continueId == 4"
[19:50:49.926]    </control>
[19:50:49.926]    <control if="!isProduction" while="" timeout="0" info="">
[19:50:49.926]      // if-block "!isProduction"
[19:50:49.926]        // =>  FALSE
[19:50:49.926]      // skip if-block "!isProduction"
[19:50:49.926]    </control>
[19:50:49.926]  </sequence>
[19:50:49.926]  
[19:53:36.822]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:53:36.822]  
[19:53:36.832]  <debugvars>
[19:53:36.832]    // Pre-defined
[19:53:36.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:36.832]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:36.832]    __dp=0x00000000
[19:53:36.832]    __ap=0x00000000
[19:53:36.832]    __traceout=0x00000000      (Trace Disabled)
[19:53:36.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:36.832]    __FlashAddr=0x00000000
[19:53:36.832]    __FlashLen=0x00000000
[19:53:36.832]    __FlashArg=0x00000000
[19:53:36.832]    __FlashOp=0x00000000
[19:53:36.832]    __Result=0x00000000
[19:53:36.832]  </debugvars>
[19:53:36.832]  
[19:53:36.832]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:53:36.832]    <block atomic="false" info="">
[19:53:36.834]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:53:36.834]        // -> [isSWJ <= 0x00000001]
[19:53:36.834]      __var hasDormant = __protocol & 0x00020000;
[19:53:36.834]        // -> [hasDormant <= 0x00000000]
[19:53:36.834]      __var protType   = __protocol & 0x0000FFFF;
[19:53:36.834]        // -> [protType <= 0x00000002]
[19:53:36.834]    </block>
[19:53:36.834]    <control if="protType == 1" while="" timeout="0" info="">
[19:53:36.834]      // if-block "protType == 1"
[19:53:36.834]        // =>  FALSE
[19:53:36.835]      // skip if-block "protType == 1"
[19:53:36.835]    </control>
[19:53:36.835]    <control if="protType == 2" while="" timeout="0" info="">
[19:53:36.835]      // if-block "protType == 2"
[19:53:36.835]        // =>  TRUE
[19:53:36.835]      <control if="isSWJ" while="" timeout="0" info="">
[19:53:36.835]        // if-block "isSWJ"
[19:53:36.835]          // =>  TRUE
[19:53:36.835]        <control if="hasDormant" while="" timeout="0" info="">
[19:53:36.835]          // if-block "hasDormant"
[19:53:36.835]            // =>  FALSE
[19:53:36.835]          // skip if-block "hasDormant"
[19:53:36.835]        </control>
[19:53:36.835]        <control if="!hasDormant" while="" timeout="0" info="">
[19:53:36.835]          // if-block "!hasDormant"
[19:53:36.836]            // =>  TRUE
[19:53:36.836]          <block atomic="false" info="">
[19:53:36.836]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:53:36.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:36.841]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:53:36.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:53:36.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:53:36.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:36.845]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:53:36.851]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:53:36.851]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:53:36.854]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:36.854]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:53:36.861]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:53:36.861]          </block>
[19:53:36.861]          // end if-block "!hasDormant"
[19:53:36.861]        </control>
[19:53:36.861]        // end if-block "isSWJ"
[19:53:36.861]      </control>
[19:53:36.861]      <control if="!isSWJ" while="" timeout="0" info="">
[19:53:36.861]        // if-block "!isSWJ"
[19:53:36.862]          // =>  FALSE
[19:53:36.862]        // skip if-block "!isSWJ"
[19:53:36.862]      </control>
[19:53:36.862]      <block atomic="false" info="">
[19:53:36.862]        ReadDP(0x0);
[19:53:36.862]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:53:36.862]      </block>
[19:53:36.862]      // end if-block "protType == 2"
[19:53:36.862]    </control>
[19:53:36.862]  </sequence>
[19:53:36.862]  
[19:53:36.874]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:53:36.874]  
[19:53:36.876]  <debugvars>
[19:53:36.876]    // Pre-defined
[19:53:36.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:36.876]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:36.876]    __dp=0x00000000
[19:53:36.876]    __ap=0x00000000
[19:53:36.876]    __traceout=0x00000000      (Trace Disabled)
[19:53:36.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:36.876]    __FlashAddr=0x00000000
[19:53:36.876]    __FlashLen=0x00000000
[19:53:36.877]    __FlashArg=0x00000000
[19:53:36.877]    __FlashOp=0x00000000
[19:53:36.877]    __Result=0x00000000
[19:53:36.877]  </debugvars>
[19:53:36.877]  
[19:53:36.877]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:53:36.877]    <block atomic="false" info="">
[19:53:36.877]      __var SW_DP_ABORT       = 0x0;
[19:53:36.877]        // -> [SW_DP_ABORT <= 0x00000000]
[19:53:36.877]      __var DP_CTRL_STAT      = 0x4;
[19:53:36.877]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:53:36.877]      __var DP_SELECT         = 0x8;
[19:53:36.877]        // -> [DP_SELECT <= 0x00000008]
[19:53:36.877]      __var powered_down      = 0;
[19:53:36.877]        // -> [powered_down <= 0x00000000]
[19:53:36.877]      WriteDP(DP_SELECT, 0x00000000);
[19:53:36.881]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:53:36.881]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:53:36.888]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:53:36.888]        // -> [powered_down <= 0x00000001]
[19:53:36.888]    </block>
[19:53:36.888]    <control if="powered_down" while="" timeout="0" info="">
[19:53:36.888]      // if-block "powered_down"
[19:53:36.888]        // =>  TRUE
[19:53:36.888]      <block atomic="false" info="">
[19:53:36.888]        Message(0, "Debug/System power-up request sent");
[19:53:36.889]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:53:36.896]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:53:36.896]      </block>
[19:53:36.896]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:53:36.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:53:36.899]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:53:36.899]        // while-condition  =>  FALSE
[19:53:36.899]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:53:36.899]      </control>
[19:53:36.901]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:53:36.901]        // if-block "(__protocol & 0xFFFF) == 1"
[19:53:36.901]          // =>  FALSE
[19:53:36.901]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:53:36.901]      </control>
[19:53:36.901]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:53:36.901]        // if-block "(__protocol & 0xFFFF) == 2"
[19:53:36.901]          // =>  TRUE
[19:53:36.901]        <block atomic="false" info="">
[19:53:36.901]          Message(0, "executing SWD power up");
[19:53:36.902]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:53:36.905]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:53:36.905]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:53:36.909]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:53:36.909]        </block>
[19:53:36.909]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:53:36.909]      </control>
[19:53:36.909]      // end if-block "powered_down"
[19:53:36.909]    </control>
[19:53:36.909]    <block atomic="false" info="">
[19:53:36.909]      __var DEBUG_PORT_VAL    = 0;
[19:53:36.909]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:53:36.909]      __var ACCESS_POINT_VAL  = 0;
[19:53:36.913]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:53:36.913]      __ap = 1; 
[19:53:36.913]        // -> [__ap <= 0x00000001]
[19:53:36.913]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:53:36.919]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:53:36.919]      __ap = 4;
[19:53:36.919]        // -> [__ap <= 0x00000004]
[19:53:36.919]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:53:36.925]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:53:36.925]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:53:36.925]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:53:36.928]    </block>
[19:53:36.928]    <block atomic="false" info="">
[19:53:36.928]      __var nReset = 0x80;
[19:53:36.928]        // -> [nReset <= 0x00000080]
[19:53:36.928]      __var canReadPins = 0;
[19:53:36.928]        // -> [canReadPins <= 0x00000000]
[19:53:36.928]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:53:36.928]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:53:36.928]        // -> [canReadPins <= 0x00000001]
[19:53:36.928]    </block>
[19:53:36.928]    <control if="" while="1" timeout="200" info="">
[19:53:36.928]      // while "1"  (timeout="200")
[19:53:36.928]      // while-condition  =>  TRUE
[19:53:36.928]      // while "1"  (timeout="200")
[19:53:36.928]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.933]      // while "1"  (timeout="200")
[19:53:36.933]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.936]      // while "1"  (timeout="200")
[19:53:36.936]      // while-condition  =>  TRUE
[19:53:36.939]      // while "1"  (timeout="200")
[19:53:36.939]      // while-condition  =>  TRUE
[19:53:36.939]      // while "1"  (timeout="200")
[19:53:36.939]      // while-condition  =>  TRUE
[19:53:36.939]      // while "1"  (timeout="200")
[19:53:36.939]      // while-condition  =>  TRUE
[19:53:36.939]      // while "1"  (timeout="200")
[19:53:36.939]      // while-condition  =>  TRUE
[19:53:36.939]      // while "1"  (timeout="200")
[19:53:36.939]      // while-condition  =>  TRUE
[19:53:36.939]      // while "1"  (timeout="200")
[19:53:36.939]      // while-condition  =>  TRUE
[19:53:36.939]      // while "1"  (timeout="200")
[19:53:36.939]      // while-condition  =>  TRUE
[19:53:36.940]      // while "1"  (timeout="200")
[19:53:36.940]      // while-condition  =>  TRUE
[19:53:36.940]      // while "1"  (timeout="200")
[19:53:36.940]      // while-condition  =>  TRUE
[19:53:36.940]      // while "1"  (timeout="200")
[19:53:36.940]      // while-condition  =>  TRUE
[19:53:36.940]      // while "1"  (timeout="200")
[19:53:36.940]      // while-condition  =>  TRUE
[19:53:36.940]      // while "1"  (timeout="200")
[19:53:36.941]      // while-condition  =>  TRUE
[19:53:36.941]      // while "1"  (timeout="200")
[19:53:36.941]      // while  =>  TIMEOUT
[19:53:36.941]      // end while "1"
[19:53:36.941]    </control>
[19:53:36.941]    <control if="canReadPins" while="" timeout="0" info="">
[19:53:36.941]      // if-block "canReadPins"
[19:53:36.941]        // =>  TRUE
[19:53:36.941]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:53:36.941]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:53:36.946]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:53:36.946]        // while-condition  =>  FALSE
[19:53:36.946]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:53:36.946]      </control>
[19:53:36.946]      // end if-block "canReadPins"
[19:53:36.946]    </control>
[19:53:36.946]    <control if="!canReadPins" while="" timeout="0" info="">
[19:53:36.946]      // if-block "!canReadPins"
[19:53:36.946]        // =>  FALSE
[19:53:36.946]      // skip if-block "!canReadPins"
[19:53:36.946]    </control>
[19:53:36.946]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:53:36.946]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:53:36.946]        // =>  TRUE
[19:53:36.946]      <block atomic="false" info="">
[19:53:36.946]        WriteAP(0x00, 0x190008);
[19:53:36.946]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:53:36.946]        WriteAP(0xF0, 0x01);
[19:53:36.958]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:53:36.958]      </block>
[19:53:36.958]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:53:36.958]    </control>
[19:53:36.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:53:36.964]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:53:36.964]        // =>  FALSE
[19:53:36.964]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:53:36.964]    </control>
[19:53:36.964]    <block atomic="false" info="">
[19:53:36.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:53:36.965]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:53:36.965]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:53:36.965]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:53:36.972]      __ap = 0; //lets make sure we reset the access point selection
[19:53:36.972]        // -> [__ap <= 0x00000000]
[19:53:36.972]    </block>
[19:53:36.972]  </sequence>
[19:53:36.972]  
[19:53:37.015]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:53:37.015]  
[19:53:37.015]  <debugvars>
[19:53:37.015]    // Pre-defined
[19:53:37.015]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:37.015]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:37.015]    __dp=0x00000000
[19:53:37.015]    __ap=0x00000000
[19:53:37.015]    __traceout=0x00000000      (Trace Disabled)
[19:53:37.015]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:37.015]    __FlashAddr=0x00000000
[19:53:37.015]    __FlashLen=0x00000000
[19:53:37.015]    __FlashArg=0x00000000
[19:53:37.015]    __FlashOp=0x00000000
[19:53:37.015]    __Result=0x00000000
[19:53:37.015]  </debugvars>
[19:53:37.015]  
[19:53:37.015]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:53:37.015]    <block atomic="false" info="">
[19:53:37.015]      __var deviceID = 0;
[19:53:37.020]        // -> [deviceID <= 0x00000000]
[19:53:37.020]      __var version = 0;
[19:53:37.020]        // -> [version <= 0x00000000]
[19:53:37.020]      __var partNum = 0;
[19:53:37.020]        // -> [partNum <= 0x00000000]
[19:53:37.020]      __var manuf = 0;
[19:53:37.020]        // -> [manuf <= 0x00000000]
[19:53:37.020]      __var isMSPM0G1X0X_G3X0X = 0;
[19:53:37.020]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:53:37.020]      __var isProduction = 0;
[19:53:37.021]        // -> [isProduction <= 0x00000000]
[19:53:37.021]      __var continueId = 0;
[19:53:37.021]        // -> [continueId <= 0x00000000]
[19:53:37.021]      deviceID =   Read32(0x41C40004);
[19:53:37.036]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:53:37.036]        // -> [deviceID <= 0x2BB8802F]
[19:53:37.036]      version = deviceID >> 28;
[19:53:37.036]        // -> [version <= 0x00000002]
[19:53:37.036]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:53:37.036]        // -> [partNum <= 0x0000BB88]
[19:53:37.036]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:53:37.036]        // -> [manuf <= 0x00000017]
[19:53:37.036]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:53:37.036]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:53:37.036]      isProduction = (version > 0);
[19:53:37.036]        // -> [isProduction <= 0x00000001]
[19:53:37.036]    </block>
[19:53:37.036]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:53:37.036]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:53:37.036]        // =>  FALSE
[19:53:37.036]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:53:37.036]    </control>
[19:53:37.036]    <control if="continueId == 4" while="" timeout="0" info="">
[19:53:37.036]      // if-block "continueId == 4"
[19:53:37.040]        // =>  FALSE
[19:53:37.040]      // skip if-block "continueId == 4"
[19:53:37.040]    </control>
[19:53:37.040]    <control if="!isProduction" while="" timeout="0" info="">
[19:53:37.040]      // if-block "!isProduction"
[19:53:37.040]        // =>  FALSE
[19:53:37.040]      // skip if-block "!isProduction"
[19:53:37.041]    </control>
[19:53:37.041]  </sequence>
[19:53:37.041]  
[19:54:14.123]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:54:14.123]  
[19:54:14.133]  <debugvars>
[19:54:14.133]    // Pre-defined
[19:54:14.133]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:14.133]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:54:14.133]    __dp=0x00000000
[19:54:14.133]    __ap=0x00000000
[19:54:14.133]    __traceout=0x00000000      (Trace Disabled)
[19:54:14.133]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:14.133]    __FlashAddr=0x00000000
[19:54:14.133]    __FlashLen=0x00000000
[19:54:14.133]    __FlashArg=0x00000000
[19:54:14.133]    __FlashOp=0x00000000
[19:54:14.135]    __Result=0x00000000
[19:54:14.135]  </debugvars>
[19:54:14.135]  
[19:54:14.135]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:54:14.135]    <block atomic="false" info="">
[19:54:14.135]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:54:14.135]        // -> [isSWJ <= 0x00000001]
[19:54:14.135]      __var hasDormant = __protocol & 0x00020000;
[19:54:14.135]        // -> [hasDormant <= 0x00000000]
[19:54:14.135]      __var protType   = __protocol & 0x0000FFFF;
[19:54:14.135]        // -> [protType <= 0x00000002]
[19:54:14.135]    </block>
[19:54:14.135]    <control if="protType == 1" while="" timeout="0" info="">
[19:54:14.135]      // if-block "protType == 1"
[19:54:14.135]        // =>  FALSE
[19:54:14.135]      // skip if-block "protType == 1"
[19:54:14.135]    </control>
[19:54:14.135]    <control if="protType == 2" while="" timeout="0" info="">
[19:54:14.135]      // if-block "protType == 2"
[19:54:14.135]        // =>  TRUE
[19:54:14.135]      <control if="isSWJ" while="" timeout="0" info="">
[19:54:14.135]        // if-block "isSWJ"
[19:54:14.135]          // =>  TRUE
[19:54:14.135]        <control if="hasDormant" while="" timeout="0" info="">
[19:54:14.135]          // if-block "hasDormant"
[19:54:14.135]            // =>  FALSE
[19:54:14.135]          // skip if-block "hasDormant"
[19:54:14.135]        </control>
[19:54:14.135]        <control if="!hasDormant" while="" timeout="0" info="">
[19:54:14.135]          // if-block "!hasDormant"
[19:54:14.135]            // =>  TRUE
[19:54:14.135]          <block atomic="false" info="">
[19:54:14.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:54:14.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:14.143]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:54:14.149]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:54:14.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:54:14.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:14.149]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:54:14.154]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:54:14.154]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:54:14.160]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:14.160]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:54:14.168]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:54:14.168]          </block>
[19:54:14.168]          // end if-block "!hasDormant"
[19:54:14.168]        </control>
[19:54:14.168]        // end if-block "isSWJ"
[19:54:14.168]      </control>
[19:54:14.168]      <control if="!isSWJ" while="" timeout="0" info="">
[19:54:14.168]        // if-block "!isSWJ"
[19:54:14.168]          // =>  FALSE
[19:54:14.170]        // skip if-block "!isSWJ"
[19:54:14.170]      </control>
[19:54:14.170]      <block atomic="false" info="">
[19:54:14.170]        ReadDP(0x0);
[19:54:14.170]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:54:14.170]      </block>
[19:54:14.170]      // end if-block "protType == 2"
[19:54:14.170]    </control>
[19:54:14.170]  </sequence>
[19:54:14.174]  
[19:54:14.184]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:54:14.184]  
[19:54:14.184]  <debugvars>
[19:54:14.184]    // Pre-defined
[19:54:14.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:14.184]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:54:14.184]    __dp=0x00000000
[19:54:14.184]    __ap=0x00000000
[19:54:14.184]    __traceout=0x00000000      (Trace Disabled)
[19:54:14.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:14.184]    __FlashAddr=0x00000000
[19:54:14.184]    __FlashLen=0x00000000
[19:54:14.184]    __FlashArg=0x00000000
[19:54:14.184]    __FlashOp=0x00000000
[19:54:14.184]    __Result=0x00000000
[19:54:14.184]  </debugvars>
[19:54:14.184]  
[19:54:14.184]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:54:14.184]    <block atomic="false" info="">
[19:54:14.184]      __var SW_DP_ABORT       = 0x0;
[19:54:14.184]        // -> [SW_DP_ABORT <= 0x00000000]
[19:54:14.184]      __var DP_CTRL_STAT      = 0x4;
[19:54:14.184]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:54:14.184]      __var DP_SELECT         = 0x8;
[19:54:14.184]        // -> [DP_SELECT <= 0x00000008]
[19:54:14.184]      __var powered_down      = 0;
[19:54:14.184]        // -> [powered_down <= 0x00000000]
[19:54:14.184]      WriteDP(DP_SELECT, 0x00000000);
[19:54:14.196]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:54:14.196]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:54:14.196]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:54:14.196]        // -> [powered_down <= 0x00000001]
[19:54:14.196]    </block>
[19:54:14.196]    <control if="powered_down" while="" timeout="0" info="">
[19:54:14.196]      // if-block "powered_down"
[19:54:14.196]        // =>  TRUE
[19:54:14.196]      <block atomic="false" info="">
[19:54:14.196]        Message(0, "Debug/System power-up request sent");
[19:54:14.196]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:54:14.204]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:54:14.204]      </block>
[19:54:14.204]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:54:14.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:54:14.204]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:54:14.204]        // while-condition  =>  FALSE
[19:54:14.204]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:54:14.204]      </control>
[19:54:14.204]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:54:14.204]        // if-block "(__protocol & 0xFFFF) == 1"
[19:54:14.204]          // =>  FALSE
[19:54:14.204]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:54:14.204]      </control>
[19:54:14.214]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:54:14.214]        // if-block "(__protocol & 0xFFFF) == 2"
[19:54:14.214]          // =>  TRUE
[19:54:14.214]        <block atomic="false" info="">
[19:54:14.214]          Message(0, "executing SWD power up");
[19:54:14.215]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:54:14.215]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:54:14.215]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:54:14.227]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:54:14.227]        </block>
[19:54:14.227]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:54:14.227]      </control>
[19:54:14.227]      // end if-block "powered_down"
[19:54:14.227]    </control>
[19:54:14.227]    <block atomic="false" info="">
[19:54:14.227]      __var DEBUG_PORT_VAL    = 0;
[19:54:14.227]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:54:14.227]      __var ACCESS_POINT_VAL  = 0;
[19:54:14.233]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:54:14.233]      __ap = 1; 
[19:54:14.233]        // -> [__ap <= 0x00000001]
[19:54:14.233]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:54:14.236]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:54:14.236]      __ap = 4;
[19:54:14.236]        // -> [__ap <= 0x00000004]
[19:54:14.236]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:54:14.247]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:54:14.247]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:54:14.247]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:54:14.247]    </block>
[19:54:14.247]    <block atomic="false" info="">
[19:54:14.247]      __var nReset = 0x80;
[19:54:14.247]        // -> [nReset <= 0x00000080]
[19:54:14.247]      __var canReadPins = 0;
[19:54:14.247]        // -> [canReadPins <= 0x00000000]
[19:54:14.247]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:54:14.247]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:54:14.247]        // -> [canReadPins <= 0x00000001]
[19:54:14.256]    </block>
[19:54:14.256]    <control if="" while="1" timeout="200" info="">
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.256]      // while-condition  =>  TRUE
[19:54:14.256]      // while "1"  (timeout="200")
[19:54:14.260]      // while-condition  =>  TRUE
[19:54:14.260]      // while "1"  (timeout="200")
[19:54:14.260]      // while-condition  =>  TRUE
[19:54:14.260]      // while "1"  (timeout="200")
[19:54:14.260]      // while-condition  =>  TRUE
[19:54:14.260]      // while "1"  (timeout="200")
[19:54:14.260]      // while-condition  =>  TRUE
[19:54:14.260]      // while "1"  (timeout="200")
[19:54:14.260]      // while-condition  =>  TRUE
[19:54:14.260]      // while "1"  (timeout="200")
[19:54:14.260]      // while-condition  =>  TRUE
[19:54:14.260]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.262]      // while "1"  (timeout="200")
[19:54:14.262]      // while-condition  =>  TRUE
[19:54:14.266]      // while "1"  (timeout="200")
[19:54:14.266]      // while-condition  =>  TRUE
[19:54:14.266]      // while "1"  (timeout="200")
[19:54:14.266]      // while-condition  =>  TRUE
[19:54:14.266]      // while "1"  (timeout="200")
[19:54:14.266]      // while-condition  =>  TRUE
[19:54:14.266]      // while "1"  (timeout="200")
[19:54:14.266]      // while-condition  =>  TRUE
[19:54:14.266]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.267]      // while-condition  =>  TRUE
[19:54:14.267]      // while "1"  (timeout="200")
[19:54:14.276]      // while-condition  =>  TRUE
[19:54:14.276]      // while "1"  (timeout="200")
[19:54:14.276]      // while  =>  TIMEOUT
[19:54:14.276]      // end while "1"
[19:54:14.276]    </control>
[19:54:14.276]    <control if="canReadPins" while="" timeout="0" info="">
[19:54:14.276]      // if-block "canReadPins"
[19:54:14.276]        // =>  TRUE
[19:54:14.276]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:54:14.276]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:54:14.278]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:54:14.278]        // while-condition  =>  FALSE
[19:54:14.278]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:54:14.278]      </control>
[19:54:14.278]      // end if-block "canReadPins"
[19:54:14.278]    </control>
[19:54:14.278]    <control if="!canReadPins" while="" timeout="0" info="">
[19:54:14.278]      // if-block "!canReadPins"
[19:54:14.278]        // =>  FALSE
[19:54:14.286]      // skip if-block "!canReadPins"
[19:54:14.286]    </control>
[19:54:14.286]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:54:14.286]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:54:14.286]        // =>  TRUE
[19:54:14.286]      <block atomic="false" info="">
[19:54:14.286]        WriteAP(0x00, 0x190008);
[19:54:14.286]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:54:14.286]        WriteAP(0xF0, 0x01);
[19:54:14.306]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:54:14.306]      </block>
[19:54:14.306]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:54:14.306]    </control>
[19:54:14.306]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:54:14.306]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:54:14.306]        // =>  FALSE
[19:54:14.306]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:54:14.306]    </control>
[19:54:14.306]    <block atomic="false" info="">
[19:54:14.306]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:54:14.316]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:54:14.316]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:54:14.316]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:54:14.318]      __ap = 0; //lets make sure we reset the access point selection
[19:54:14.318]        // -> [__ap <= 0x00000000]
[19:54:14.318]    </block>
[19:54:14.318]  </sequence>
[19:54:14.318]  
[19:54:14.367]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:54:14.367]  
[19:54:14.367]  <debugvars>
[19:54:14.367]    // Pre-defined
[19:54:14.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:14.367]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:54:14.367]    __dp=0x00000000
[19:54:14.367]    __ap=0x00000000
[19:54:14.367]    __traceout=0x00000000      (Trace Disabled)
[19:54:14.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:14.367]    __FlashAddr=0x00000000
[19:54:14.367]    __FlashLen=0x00000000
[19:54:14.367]    __FlashArg=0x00000000
[19:54:14.367]    __FlashOp=0x00000000
[19:54:14.367]    __Result=0x00000000
[19:54:14.367]  </debugvars>
[19:54:14.367]  
[19:54:14.367]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:54:14.367]    <block atomic="false" info="">
[19:54:14.367]      __var deviceID = 0;
[19:54:14.367]        // -> [deviceID <= 0x00000000]
[19:54:14.367]      __var version = 0;
[19:54:14.367]        // -> [version <= 0x00000000]
[19:54:14.367]      __var partNum = 0;
[19:54:14.376]        // -> [partNum <= 0x00000000]
[19:54:14.376]      __var manuf = 0;
[19:54:14.376]        // -> [manuf <= 0x00000000]
[19:54:14.376]      __var isMSPM0G1X0X_G3X0X = 0;
[19:54:14.376]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:54:14.376]      __var isProduction = 0;
[19:54:14.376]        // -> [isProduction <= 0x00000000]
[19:54:14.376]      __var continueId = 0;
[19:54:14.377]        // -> [continueId <= 0x00000000]
[19:54:14.377]      deviceID =   Read32(0x41C40004);
[19:54:14.387]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:54:14.387]        // -> [deviceID <= 0x2BB8802F]
[19:54:14.387]      version = deviceID >> 28;
[19:54:14.387]        // -> [version <= 0x00000002]
[19:54:14.387]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:54:14.387]        // -> [partNum <= 0x0000BB88]
[19:54:14.387]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:54:14.387]        // -> [manuf <= 0x00000017]
[19:54:14.387]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:54:14.387]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:54:14.387]      isProduction = (version > 0);
[19:54:14.387]        // -> [isProduction <= 0x00000001]
[19:54:14.387]    </block>
[19:54:14.387]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:54:14.387]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:54:14.387]        // =>  FALSE
[19:54:14.387]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:54:14.387]    </control>
[19:54:14.391]    <control if="continueId == 4" while="" timeout="0" info="">
[19:54:14.391]      // if-block "continueId == 4"
[19:54:14.391]        // =>  FALSE
[19:54:14.391]      // skip if-block "continueId == 4"
[19:54:14.391]    </control>
[19:54:14.391]    <control if="!isProduction" while="" timeout="0" info="">
[19:54:14.391]      // if-block "!isProduction"
[19:54:14.391]        // =>  FALSE
[19:54:14.391]      // skip if-block "!isProduction"
[19:54:14.391]    </control>
[19:54:14.391]  </sequence>
[19:54:14.391]  
[19:58:32.615]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:58:32.615]  
[19:58:32.623]  <debugvars>
[19:58:32.623]    // Pre-defined
[19:58:32.623]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:32.623]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:58:32.623]    __dp=0x00000000
[19:58:32.623]    __ap=0x00000000
[19:58:32.623]    __traceout=0x00000000      (Trace Disabled)
[19:58:32.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:32.623]    __FlashAddr=0x00000000
[19:58:32.623]    __FlashLen=0x00000000
[19:58:32.623]    __FlashArg=0x00000000
[19:58:32.623]    __FlashOp=0x00000000
[19:58:32.623]    __Result=0x00000000
[19:58:32.623]  </debugvars>
[19:58:32.623]  
[19:58:32.623]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:58:32.623]    <block atomic="false" info="">
[19:58:32.623]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:58:32.623]        // -> [isSWJ <= 0x00000001]
[19:58:32.623]      __var hasDormant = __protocol & 0x00020000;
[19:58:32.623]        // -> [hasDormant <= 0x00000000]
[19:58:32.623]      __var protType   = __protocol & 0x0000FFFF;
[19:58:32.623]        // -> [protType <= 0x00000002]
[19:58:32.623]    </block>
[19:58:32.623]    <control if="protType == 1" while="" timeout="0" info="">
[19:58:32.623]      // if-block "protType == 1"
[19:58:32.623]        // =>  FALSE
[19:58:32.623]      // skip if-block "protType == 1"
[19:58:32.623]    </control>
[19:58:32.623]    <control if="protType == 2" while="" timeout="0" info="">
[19:58:32.623]      // if-block "protType == 2"
[19:58:32.627]        // =>  TRUE
[19:58:32.627]      <control if="isSWJ" while="" timeout="0" info="">
[19:58:32.627]        // if-block "isSWJ"
[19:58:32.627]          // =>  TRUE
[19:58:32.627]        <control if="hasDormant" while="" timeout="0" info="">
[19:58:32.627]          // if-block "hasDormant"
[19:58:32.627]            // =>  FALSE
[19:58:32.627]          // skip if-block "hasDormant"
[19:58:32.627]        </control>
[19:58:32.627]        <control if="!hasDormant" while="" timeout="0" info="">
[19:58:32.627]          // if-block "!hasDormant"
[19:58:32.627]            // =>  TRUE
[19:58:32.627]          <block atomic="false" info="">
[19:58:32.627]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:58:32.631]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:32.631]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:58:32.631]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:58:32.631]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:58:32.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:32.638]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:58:32.643]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:58:32.643]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:58:32.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:32.643]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:58:32.650]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:58:32.650]          </block>
[19:58:32.650]          // end if-block "!hasDormant"
[19:58:32.650]        </control>
[19:58:32.650]        // end if-block "isSWJ"
[19:58:32.650]      </control>
[19:58:32.650]      <control if="!isSWJ" while="" timeout="0" info="">
[19:58:32.650]        // if-block "!isSWJ"
[19:58:32.650]          // =>  FALSE
[19:58:32.650]        // skip if-block "!isSWJ"
[19:58:32.650]      </control>
[19:58:32.650]      <block atomic="false" info="">
[19:58:32.650]        ReadDP(0x0);
[19:58:32.650]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:58:32.650]      </block>
[19:58:32.650]      // end if-block "protType == 2"
[19:58:32.650]    </control>
[19:58:32.650]  </sequence>
[19:58:32.650]  
[19:58:32.668]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:58:32.668]  
[19:58:32.668]  <debugvars>
[19:58:32.668]    // Pre-defined
[19:58:32.668]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:32.668]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:58:32.668]    __dp=0x00000000
[19:58:32.668]    __ap=0x00000000
[19:58:32.668]    __traceout=0x00000000      (Trace Disabled)
[19:58:32.668]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:32.668]    __FlashAddr=0x00000000
[19:58:32.668]    __FlashLen=0x00000000
[19:58:32.668]    __FlashArg=0x00000000
[19:58:32.668]    __FlashOp=0x00000000
[19:58:32.668]    __Result=0x00000000
[19:58:32.668]  </debugvars>
[19:58:32.668]  
[19:58:32.670]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:58:32.670]    <block atomic="false" info="">
[19:58:32.670]      __var SW_DP_ABORT       = 0x0;
[19:58:32.670]        // -> [SW_DP_ABORT <= 0x00000000]
[19:58:32.670]      __var DP_CTRL_STAT      = 0x4;
[19:58:32.670]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:58:32.671]      __var DP_SELECT         = 0x8;
[19:58:32.671]        // -> [DP_SELECT <= 0x00000008]
[19:58:32.671]      __var powered_down      = 0;
[19:58:32.671]        // -> [powered_down <= 0x00000000]
[19:58:32.671]      WriteDP(DP_SELECT, 0x00000000);
[19:58:32.671]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:58:32.671]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:58:32.680]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:58:32.680]        // -> [powered_down <= 0x00000001]
[19:58:32.680]    </block>
[19:58:32.680]    <control if="powered_down" while="" timeout="0" info="">
[19:58:32.680]      // if-block "powered_down"
[19:58:32.680]        // =>  TRUE
[19:58:32.680]      <block atomic="false" info="">
[19:58:32.680]        Message(0, "Debug/System power-up request sent");
[19:58:32.686]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:58:32.690]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:58:32.690]      </block>
[19:58:32.690]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:58:32.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:32.701]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:58:32.701]        // while-condition  =>  FALSE
[19:58:32.701]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:58:32.701]      </control>
[19:58:32.701]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:58:32.701]        // if-block "(__protocol & 0xFFFF) == 1"
[19:58:32.701]          // =>  FALSE
[19:58:32.701]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:58:32.701]      </control>
[19:58:32.701]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:58:32.701]        // if-block "(__protocol & 0xFFFF) == 2"
[19:58:32.701]          // =>  TRUE
[19:58:32.701]        <block atomic="false" info="">
[19:58:32.701]          Message(0, "executing SWD power up");
[19:58:32.708]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:58:32.708]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:58:32.708]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:58:32.718]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:58:32.718]        </block>
[19:58:32.718]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:58:32.718]      </control>
[19:58:32.718]      // end if-block "powered_down"
[19:58:32.718]    </control>
[19:58:32.718]    <block atomic="false" info="">
[19:58:32.718]      __var DEBUG_PORT_VAL    = 0;
[19:58:32.720]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:58:32.720]      __var ACCESS_POINT_VAL  = 0;
[19:58:32.720]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:58:32.720]      __ap = 1; 
[19:58:32.720]        // -> [__ap <= 0x00000001]
[19:58:32.720]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:58:32.728]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:58:32.728]      __ap = 4;
[19:58:32.728]        // -> [__ap <= 0x00000004]
[19:58:32.728]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:58:32.743]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:58:32.743]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:58:32.743]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:58:32.743]    </block>
[19:58:32.743]    <block atomic="false" info="">
[19:58:32.743]      __var nReset = 0x80;
[19:58:32.743]        // -> [nReset <= 0x00000080]
[19:58:32.748]      __var canReadPins = 0;
[19:58:32.748]        // -> [canReadPins <= 0x00000000]
[19:58:32.748]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:58:32.750]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:58:32.750]        // -> [canReadPins <= 0x00000001]
[19:58:32.750]    </block>
[19:58:32.750]    <control if="" while="1" timeout="200" info="">
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.750]      // while "1"  (timeout="200")
[19:58:32.750]      // while-condition  =>  TRUE
[19:58:32.755]      // while "1"  (timeout="200")
[19:58:32.755]      // while  =>  TIMEOUT
[19:58:32.755]      // end while "1"
[19:58:32.755]    </control>
[19:58:32.755]    <control if="canReadPins" while="" timeout="0" info="">
[19:58:32.755]      // if-block "canReadPins"
[19:58:32.755]        // =>  TRUE
[19:58:32.755]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:58:32.755]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:58:32.765]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:58:32.765]        // while-condition  =>  FALSE
[19:58:32.765]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:58:32.765]      </control>
[19:58:32.765]      // end if-block "canReadPins"
[19:58:32.765]    </control>
[19:58:32.765]    <control if="!canReadPins" while="" timeout="0" info="">
[19:58:32.765]      // if-block "!canReadPins"
[19:58:32.765]        // =>  FALSE
[19:58:32.765]      // skip if-block "!canReadPins"
[19:58:32.765]    </control>
[19:58:32.765]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:58:32.765]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:58:32.765]        // =>  TRUE
[19:58:32.765]      <block atomic="false" info="">
[19:58:32.765]        WriteAP(0x00, 0x190008);
[19:58:32.775]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:58:32.778]        WriteAP(0xF0, 0x01);
[19:58:32.781]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:58:32.781]      </block>
[19:58:32.781]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:58:32.781]    </control>
[19:58:32.781]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:58:32.781]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:58:32.781]        // =>  FALSE
[19:58:32.781]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:58:32.781]    </control>
[19:58:32.788]    <block atomic="false" info="">
[19:58:32.788]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:58:32.790]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:58:32.790]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:58:32.790]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:58:32.790]      __ap = 0; //lets make sure we reset the access point selection
[19:58:32.790]        // -> [__ap <= 0x00000000]
[19:58:32.790]    </block>
[19:58:32.790]  </sequence>
[19:58:32.790]  
[19:58:32.852]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:58:32.852]  
[19:58:32.852]  <debugvars>
[19:58:32.852]    // Pre-defined
[19:58:32.852]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:32.852]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:58:32.852]    __dp=0x00000000
[19:58:32.852]    __ap=0x00000000
[19:58:32.852]    __traceout=0x00000000      (Trace Disabled)
[19:58:32.852]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:32.852]    __FlashAddr=0x00000000
[19:58:32.852]    __FlashLen=0x00000000
[19:58:32.852]    __FlashArg=0x00000000
[19:58:32.852]    __FlashOp=0x00000000
[19:58:32.852]    __Result=0x00000000
[19:58:32.852]  </debugvars>
[19:58:32.852]  
[19:58:32.852]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:58:32.852]    <block atomic="false" info="">
[19:58:32.852]      __var deviceID = 0;
[19:58:32.852]        // -> [deviceID <= 0x00000000]
[19:58:32.852]      __var version = 0;
[19:58:32.852]        // -> [version <= 0x00000000]
[19:58:32.852]      __var partNum = 0;
[19:58:32.852]        // -> [partNum <= 0x00000000]
[19:58:32.852]      __var manuf = 0;
[19:58:32.852]        // -> [manuf <= 0x00000000]
[19:58:32.852]      __var isMSPM0G1X0X_G3X0X = 0;
[19:58:32.852]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:58:32.852]      __var isProduction = 0;
[19:58:32.852]        // -> [isProduction <= 0x00000000]
[19:58:32.852]      __var continueId = 0;
[19:58:32.852]        // -> [continueId <= 0x00000000]
[19:58:32.852]      deviceID =   Read32(0x41C40004);
[19:58:32.871]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:58:32.871]        // -> [deviceID <= 0x2BB8802F]
[19:58:32.872]      version = deviceID >> 28;
[19:58:32.872]        // -> [version <= 0x00000002]
[19:58:32.872]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:58:32.872]        // -> [partNum <= 0x0000BB88]
[19:58:32.872]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:58:32.872]        // -> [manuf <= 0x00000017]
[19:58:32.872]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:58:32.872]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:58:32.872]      isProduction = (version > 0);
[19:58:32.872]        // -> [isProduction <= 0x00000001]
[19:58:32.872]    </block>
[19:58:32.872]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:58:32.872]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:58:32.872]        // =>  FALSE
[19:58:32.872]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:58:32.872]    </control>
[19:58:32.872]    <control if="continueId == 4" while="" timeout="0" info="">
[19:58:32.872]      // if-block "continueId == 4"
[19:58:32.872]        // =>  FALSE
[19:58:32.872]      // skip if-block "continueId == 4"
[19:58:32.872]    </control>
[19:58:32.872]    <control if="!isProduction" while="" timeout="0" info="">
[19:58:32.872]      // if-block "!isProduction"
[19:58:32.872]        // =>  FALSE
[19:58:32.872]      // skip if-block "!isProduction"
[19:58:32.872]    </control>
[19:58:32.872]  </sequence>
[19:58:32.872]  
[19:59:45.197]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:45.197]  
[19:59:45.205]  <debugvars>
[19:59:45.205]    // Pre-defined
[19:59:45.205]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:45.205]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:45.205]    __dp=0x00000000
[19:59:45.205]    __ap=0x00000000
[19:59:45.205]    __traceout=0x00000000      (Trace Disabled)
[19:59:45.205]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:45.205]    __FlashAddr=0x00000000
[19:59:45.205]    __FlashLen=0x00000000
[19:59:45.206]    __FlashArg=0x00000000
[19:59:45.206]    __FlashOp=0x00000000
[19:59:45.206]    __Result=0x00000000
[19:59:45.206]  </debugvars>
[19:59:45.206]  
[19:59:45.206]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:45.206]    <block atomic="false" info="">
[19:59:45.206]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:45.206]        // -> [isSWJ <= 0x00000001]
[19:59:45.206]      __var hasDormant = __protocol & 0x00020000;
[19:59:45.206]        // -> [hasDormant <= 0x00000000]
[19:59:45.207]      __var protType   = __protocol & 0x0000FFFF;
[19:59:45.207]        // -> [protType <= 0x00000002]
[19:59:45.207]    </block>
[19:59:45.207]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:45.207]      // if-block "protType == 1"
[19:59:45.207]        // =>  FALSE
[19:59:45.207]      // skip if-block "protType == 1"
[19:59:45.207]    </control>
[19:59:45.207]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:45.207]      // if-block "protType == 2"
[19:59:45.207]        // =>  TRUE
[19:59:45.207]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:45.208]        // if-block "isSWJ"
[19:59:45.208]          // =>  TRUE
[19:59:45.208]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:45.208]          // if-block "hasDormant"
[19:59:45.208]            // =>  FALSE
[19:59:45.208]          // skip if-block "hasDormant"
[19:59:45.208]        </control>
[19:59:45.208]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:45.208]          // if-block "!hasDormant"
[19:59:45.208]            // =>  TRUE
[19:59:45.208]          <block atomic="false" info="">
[19:59:45.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:46.215]  
[19:59:46.215]  !!! E320 : DAP access error
[19:59:46.215]  
[19:59:46.215]          </block>
[19:59:46.215]          // end if-block "!hasDormant"
[19:59:46.215]        </control>
[19:59:46.216]        // end if-block "isSWJ"
[19:59:46.216]      </control>
[19:59:46.216]      // end if-block "protType == 2"
[19:59:46.216]    </control>
[19:59:46.216]  </sequence>
[19:59:46.216]  
[19:59:46.299]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:46.299]  
[19:59:46.300]  <debugvars>
[19:59:46.300]    // Pre-defined
[19:59:46.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:46.300]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:46.300]    __dp=0x00000000
[19:59:46.300]    __ap=0x00000000
[19:59:46.300]    __traceout=0x00000000      (Trace Disabled)
[19:59:46.300]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:46.300]    __FlashAddr=0x00000000
[19:59:46.300]    __FlashLen=0x00000000
[19:59:46.300]    __FlashArg=0x00000000
[19:59:46.301]    __FlashOp=0x00000000
[19:59:46.301]    __Result=0x00000000
[19:59:46.301]  </debugvars>
[19:59:46.301]  
[19:59:46.301]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:46.301]    <block atomic="false" info="">
[19:59:46.301]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:46.301]        // -> [isSWJ <= 0x00000001]
[19:59:46.301]      __var hasDormant = __protocol & 0x00020000;
[19:59:46.301]        // -> [hasDormant <= 0x00000000]
[19:59:46.301]      __var protType   = __protocol & 0x0000FFFF;
[19:59:46.302]        // -> [protType <= 0x00000002]
[19:59:46.302]    </block>
[19:59:46.302]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:46.302]      // if-block "protType == 1"
[19:59:46.302]        // =>  FALSE
[19:59:46.302]      // skip if-block "protType == 1"
[19:59:46.302]    </control>
[19:59:46.302]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:46.302]      // if-block "protType == 2"
[19:59:46.302]        // =>  TRUE
[19:59:46.302]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:46.302]        // if-block "isSWJ"
[19:59:46.303]          // =>  TRUE
[19:59:46.303]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:46.303]          // if-block "hasDormant"
[19:59:46.303]            // =>  FALSE
[19:59:46.303]          // skip if-block "hasDormant"
[19:59:46.303]        </control>
[19:59:46.304]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:46.304]          // if-block "!hasDormant"
[19:59:46.304]            // =>  TRUE
[19:59:46.304]          <block atomic="false" info="">
[19:59:46.304]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:47.309]  
[19:59:47.309]  !!! E320 : DAP access error
[19:59:47.309]  
[19:59:47.309]          </block>
[19:59:47.309]          // end if-block "!hasDormant"
[19:59:47.309]        </control>
[19:59:47.309]        // end if-block "isSWJ"
[19:59:47.309]      </control>
[19:59:47.309]      // end if-block "protType == 2"
[19:59:47.309]    </control>
[19:59:47.309]  </sequence>
[19:59:47.309]  
[19:59:47.370]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:47.370]  
[19:59:47.370]  <debugvars>
[19:59:47.371]    // Pre-defined
[19:59:47.371]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:47.371]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:47.371]    __dp=0x00000000
[19:59:47.371]    __ap=0x00000000
[19:59:47.371]    __traceout=0x00000000      (Trace Disabled)
[19:59:47.372]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:47.372]    __FlashAddr=0x00000000
[19:59:47.372]    __FlashLen=0x00000000
[19:59:47.372]    __FlashArg=0x00000000
[19:59:47.372]    __FlashOp=0x00000000
[19:59:47.372]    __Result=0x00000000
[19:59:47.372]  </debugvars>
[19:59:47.372]  
[19:59:47.372]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:47.372]    <block atomic="false" info="">
[19:59:47.372]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:47.372]        // -> [isSWJ <= 0x00000001]
[19:59:47.372]      __var hasDormant = __protocol & 0x00020000;
[19:59:47.372]        // -> [hasDormant <= 0x00000000]
[19:59:47.372]      __var protType   = __protocol & 0x0000FFFF;
[19:59:47.372]        // -> [protType <= 0x00000002]
[19:59:47.372]    </block>
[19:59:47.372]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:47.372]      // if-block "protType == 1"
[19:59:47.372]        // =>  FALSE
[19:59:47.372]      // skip if-block "protType == 1"
[19:59:47.372]    </control>
[19:59:47.374]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:47.374]      // if-block "protType == 2"
[19:59:47.374]        // =>  TRUE
[19:59:47.374]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:47.374]        // if-block "isSWJ"
[19:59:47.374]          // =>  TRUE
[19:59:47.374]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:47.374]          // if-block "hasDormant"
[19:59:47.374]            // =>  FALSE
[19:59:47.374]          // skip if-block "hasDormant"
[19:59:47.374]        </control>
[19:59:47.374]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:47.374]          // if-block "!hasDormant"
[19:59:47.374]            // =>  TRUE
[19:59:47.374]          <block atomic="false" info="">
[19:59:47.374]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:48.384]  
[19:59:48.384]  !!! E320 : DAP access error
[19:59:48.384]  
[19:59:48.392]          </block>
[19:59:48.392]          // end if-block "!hasDormant"
[19:59:48.392]        </control>
[19:59:48.392]        // end if-block "isSWJ"
[19:59:48.392]      </control>
[19:59:48.392]      // end if-block "protType == 2"
[19:59:48.392]    </control>
[19:59:48.392]  </sequence>
[19:59:48.392]  
[19:59:48.452]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:48.452]  
[19:59:48.452]  <debugvars>
[19:59:48.452]    // Pre-defined
[19:59:48.452]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:48.452]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:48.452]    __dp=0x00000000
[19:59:48.452]    __ap=0x00000000
[19:59:48.452]    __traceout=0x00000000      (Trace Disabled)
[19:59:48.452]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:48.452]    __FlashAddr=0x00000000
[19:59:48.452]    __FlashLen=0x00000000
[19:59:48.452]    __FlashArg=0x00000000
[19:59:48.452]    __FlashOp=0x00000000
[19:59:48.452]    __Result=0x00000000
[19:59:48.452]  </debugvars>
[19:59:48.452]  
[19:59:48.452]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:48.452]    <block atomic="false" info="">
[19:59:48.452]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:48.452]        // -> [isSWJ <= 0x00000001]
[19:59:48.455]      __var hasDormant = __protocol & 0x00020000;
[19:59:48.455]        // -> [hasDormant <= 0x00000000]
[19:59:48.455]      __var protType   = __protocol & 0x0000FFFF;
[19:59:48.455]        // -> [protType <= 0x00000002]
[19:59:48.455]    </block>
[19:59:48.455]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:48.455]      // if-block "protType == 1"
[19:59:48.455]        // =>  FALSE
[19:59:48.455]      // skip if-block "protType == 1"
[19:59:48.455]    </control>
[19:59:48.455]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:48.455]      // if-block "protType == 2"
[19:59:48.455]        // =>  TRUE
[19:59:48.455]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:48.455]        // if-block "isSWJ"
[19:59:48.455]          // =>  TRUE
[19:59:48.455]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:48.455]          // if-block "hasDormant"
[19:59:48.455]            // =>  FALSE
[19:59:48.455]          // skip if-block "hasDormant"
[19:59:48.455]        </control>
[19:59:48.455]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:48.455]          // if-block "!hasDormant"
[19:59:48.455]            // =>  TRUE
[19:59:48.455]          <block atomic="false" info="">
[19:59:48.455]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:50.422]  
[19:59:50.422]  !!! E320 : DAP access error
[19:59:50.422]  
[19:59:50.430]          </block>
[19:59:50.430]          // end if-block "!hasDormant"
[19:59:50.430]        </control>
[19:59:50.430]        // end if-block "isSWJ"
[19:59:50.430]      </control>
[19:59:50.430]      // end if-block "protType == 2"
[19:59:50.430]    </control>
[19:59:50.430]  </sequence>
[19:59:50.430]  
[19:59:50.683]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:50.683]  
[19:59:50.692]  <debugvars>
[19:59:50.692]    // Pre-defined
[19:59:50.692]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:50.692]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:50.692]    __dp=0x00000000
[19:59:50.692]    __ap=0x00000000
[19:59:50.692]    __traceout=0x00000000      (Trace Disabled)
[19:59:50.692]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:50.692]    __FlashAddr=0x00000000
[19:59:50.692]    __FlashLen=0x00000000
[19:59:50.692]    __FlashArg=0x00000000
[19:59:50.692]    __FlashOp=0x00000000
[19:59:50.692]    __Result=0x00000000
[19:59:50.692]  </debugvars>
[19:59:50.692]  
[19:59:50.693]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:50.693]    <block atomic="false" info="">
[19:59:50.693]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:50.693]        // -> [isSWJ <= 0x00000001]
[19:59:50.693]      __var hasDormant = __protocol & 0x00020000;
[19:59:50.693]        // -> [hasDormant <= 0x00000000]
[19:59:50.693]      __var protType   = __protocol & 0x0000FFFF;
[19:59:50.693]        // -> [protType <= 0x00000002]
[19:59:50.693]    </block>
[19:59:50.693]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:50.693]      // if-block "protType == 1"
[19:59:50.693]        // =>  FALSE
[19:59:50.693]      // skip if-block "protType == 1"
[19:59:50.693]    </control>
[19:59:50.693]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:50.693]      // if-block "protType == 2"
[19:59:50.693]        // =>  TRUE
[19:59:50.693]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:50.693]        // if-block "isSWJ"
[19:59:50.693]          // =>  TRUE
[19:59:50.693]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:50.693]          // if-block "hasDormant"
[19:59:50.693]            // =>  FALSE
[19:59:50.693]          // skip if-block "hasDormant"
[19:59:50.693]        </control>
[19:59:50.693]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:50.693]          // if-block "!hasDormant"
[19:59:50.693]            // =>  TRUE
[19:59:50.693]          <block atomic="false" info="">
[19:59:50.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
