/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0022.log
 *  Created     : 02:34:48 (27/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[02:34:48.134]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:34:48.134]  
[02:34:48.135]  <debugvars>
[02:34:48.135]    // Pre-defined
[02:34:48.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:48.135]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:34:48.135]    __dp=0x00000000
[02:34:48.135]    __ap=0x00000000
[02:34:48.135]    __traceout=0x00000000      (Trace Disabled)
[02:34:48.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:48.135]    __FlashAddr=0x00000000
[02:34:48.135]    __FlashLen=0x00000000
[02:34:48.136]    __FlashArg=0x00000000
[02:34:48.136]    __FlashOp=0x00000000
[02:34:48.136]    __Result=0x00000000
[02:34:48.136]  </debugvars>
[02:34:48.136]  
[02:34:48.136]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:34:48.136]    <block atomic="false" info="">
[02:34:48.136]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:34:48.136]        // -> [isSWJ <= 0x00000001]
[02:34:48.136]      __var hasDormant = __protocol & 0x00020000;
[02:34:48.136]        // -> [hasDormant <= 0x00000000]
[02:34:48.136]      __var protType   = __protocol & 0x0000FFFF;
[02:34:48.137]        // -> [protType <= 0x00000002]
[02:34:48.137]    </block>
[02:34:48.137]    <control if="protType == 1" while="" timeout="0" info="">
[02:34:48.137]      // if-block "protType == 1"
[02:34:48.137]        // =>  FALSE
[02:34:48.137]      // skip if-block "protType == 1"
[02:34:48.137]    </control>
[02:34:48.137]    <control if="protType == 2" while="" timeout="0" info="">
[02:34:48.137]      // if-block "protType == 2"
[02:34:48.137]        // =>  TRUE
[02:34:48.137]      <control if="isSWJ" while="" timeout="0" info="">
[02:34:48.138]        // if-block "isSWJ"
[02:34:48.138]          // =>  TRUE
[02:34:48.138]        <control if="hasDormant" while="" timeout="0" info="">
[02:34:48.138]          // if-block "hasDormant"
[02:34:48.138]            // =>  FALSE
[02:34:48.138]          // skip if-block "hasDormant"
[02:34:48.138]        </control>
[02:34:48.138]        <control if="!hasDormant" while="" timeout="0" info="">
[02:34:48.138]          // if-block "!hasDormant"
[02:34:48.138]            // =>  TRUE
[02:34:48.138]          <block atomic="false" info="">
[02:34:48.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:34:48.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:48.141]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:34:48.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:34:48.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:34:48.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:48.144]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:34:48.146]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:34:48.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:34:48.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:48.148]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:34:48.149]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:34:48.149]          </block>
[02:34:48.149]          // end if-block "!hasDormant"
[02:34:48.149]        </control>
[02:34:48.149]        // end if-block "isSWJ"
[02:34:48.149]      </control>
[02:34:48.150]      <control if="!isSWJ" while="" timeout="0" info="">
[02:34:48.150]        // if-block "!isSWJ"
[02:34:48.150]          // =>  FALSE
[02:34:48.150]        // skip if-block "!isSWJ"
[02:34:48.150]      </control>
[02:34:48.150]      <block atomic="false" info="">
[02:34:48.150]        ReadDP(0x0);
[02:34:48.152]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:34:48.152]      </block>
[02:34:48.152]      // end if-block "protType == 2"
[02:34:48.152]    </control>
[02:34:48.152]  </sequence>
[02:34:48.152]  
[02:34:50.907]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:34:50.907]  
[02:34:50.908]  <debugvars>
[02:34:50.908]    // Pre-defined
[02:34:50.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:50.908]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:34:50.908]    __dp=0x00000000
[02:34:50.908]    __ap=0x00000000
[02:34:50.908]    __traceout=0x00000000      (Trace Disabled)
[02:34:50.908]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:50.908]    __FlashAddr=0x00000000
[02:34:50.908]    __FlashLen=0x00000000
[02:34:50.908]    __FlashArg=0x00000000
[02:34:50.908]    __FlashOp=0x00000000
[02:34:50.908]    __Result=0x00000000
[02:34:50.908]  </debugvars>
[02:34:50.910]  
[02:34:50.910]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:34:50.910]    <block atomic="false" info="">
[02:34:50.910]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:34:50.910]        // -> [isSWJ <= 0x00000001]
[02:34:50.910]      __var hasDormant = __protocol & 0x00020000;
[02:34:50.910]        // -> [hasDormant <= 0x00000000]
[02:34:50.910]      __var protType   = __protocol & 0x0000FFFF;
[02:34:50.911]        // -> [protType <= 0x00000002]
[02:34:50.911]    </block>
[02:34:50.911]    <control if="protType == 1" while="" timeout="0" info="">
[02:34:50.911]      // if-block "protType == 1"
[02:34:50.911]        // =>  FALSE
[02:34:50.911]      // skip if-block "protType == 1"
[02:34:50.912]    </control>
[02:34:50.912]    <control if="protType == 2" while="" timeout="0" info="">
[02:34:50.912]      // if-block "protType == 2"
[02:34:50.912]        // =>  TRUE
[02:34:50.912]      <control if="isSWJ" while="" timeout="0" info="">
[02:34:50.912]        // if-block "isSWJ"
[02:34:50.912]          // =>  TRUE
[02:34:50.912]        <control if="hasDormant" while="" timeout="0" info="">
[02:34:50.912]          // if-block "hasDormant"
[02:34:50.913]            // =>  FALSE
[02:34:50.913]          // skip if-block "hasDormant"
[02:34:50.913]        </control>
[02:34:50.913]        <control if="!hasDormant" while="" timeout="0" info="">
[02:34:50.913]          // if-block "!hasDormant"
[02:34:50.913]            // =>  TRUE
[02:34:50.913]          <block atomic="false" info="">
[02:34:50.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:34:50.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:50.915]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:34:50.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:34:50.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:34:50.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:50.918]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:34:50.919]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:34:50.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:34:50.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:50.920]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:34:50.921]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:34:50.921]          </block>
[02:34:50.921]          // end if-block "!hasDormant"
[02:34:50.922]        </control>
[02:34:50.922]        // end if-block "isSWJ"
[02:34:50.922]      </control>
[02:34:50.922]      <control if="!isSWJ" while="" timeout="0" info="">
[02:34:50.922]        // if-block "!isSWJ"
[02:34:50.922]          // =>  FALSE
[02:34:50.922]        // skip if-block "!isSWJ"
[02:34:50.922]      </control>
[02:34:50.922]      <block atomic="false" info="">
[02:34:50.922]        ReadDP(0x0);
[02:34:50.924]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:34:50.924]      </block>
[02:34:50.924]      // end if-block "protType == 2"
[02:34:50.924]    </control>
[02:34:50.925]  </sequence>
[02:34:50.925]  
[02:34:50.930]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:34:50.930]  
[02:34:50.930]  <debugvars>
[02:34:50.930]    // Pre-defined
[02:34:50.930]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:50.930]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:34:50.930]    __dp=0x00000000
[02:34:50.931]    __ap=0x00000000
[02:34:50.931]    __traceout=0x00000000      (Trace Disabled)
[02:34:50.931]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:50.931]    __FlashAddr=0x00000000
[02:34:50.931]    __FlashLen=0x00000000
[02:34:50.931]    __FlashArg=0x00000000
[02:34:50.931]    __FlashOp=0x00000000
[02:34:50.931]    __Result=0x00000000
[02:34:50.931]  </debugvars>
[02:34:50.931]  
[02:34:50.931]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:34:50.932]    <block atomic="false" info="">
[02:34:50.932]      __var SW_DP_ABORT       = 0x0;
[02:34:50.932]        // -> [SW_DP_ABORT <= 0x00000000]
[02:34:50.932]      __var DP_CTRL_STAT      = 0x4;
[02:34:50.933]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:34:50.933]      __var DP_SELECT         = 0x8;
[02:34:50.933]        // -> [DP_SELECT <= 0x00000008]
[02:34:50.933]      __var powered_down      = 0;
[02:34:50.933]        // -> [powered_down <= 0x00000000]
[02:34:50.933]      WriteDP(DP_SELECT, 0x00000000);
[02:34:50.935]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:34:50.935]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:34:50.936]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:34:50.937]        // -> [powered_down <= 0x00000001]
[02:34:50.937]    </block>
[02:34:50.937]    <control if="powered_down" while="" timeout="0" info="">
[02:34:50.937]      // if-block "powered_down"
[02:34:50.937]        // =>  TRUE
[02:34:50.937]      <block atomic="false" info="">
[02:34:50.937]        Message(0, "Debug/System power-up request sent");
[02:34:50.940]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:34:50.942]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:34:50.942]      </block>
[02:34:50.942]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:34:50.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:34:50.943]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:34:50.943]        // while-condition  =>  FALSE
[02:34:50.943]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:34:50.944]      </control>
[02:34:50.944]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:34:50.944]        // if-block "(__protocol & 0xFFFF) == 1"
[02:34:50.944]          // =>  FALSE
[02:34:50.944]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:34:50.944]      </control>
[02:34:50.944]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:34:50.944]        // if-block "(__protocol & 0xFFFF) == 2"
[02:34:50.944]          // =>  TRUE
[02:34:50.944]        <block atomic="false" info="">
[02:34:50.944]          Message(0, "executing SWD power up");
[02:34:50.947]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:34:50.950]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:34:50.950]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:34:50.952]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:34:50.952]        </block>
[02:34:50.952]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:34:50.952]      </control>
[02:34:50.952]      // end if-block "powered_down"
[02:34:50.953]    </control>
[02:34:50.953]    <block atomic="false" info="">
[02:34:50.953]      __var DEBUG_PORT_VAL    = 0;
[02:34:50.953]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:34:50.953]      __var ACCESS_POINT_VAL  = 0;
[02:34:50.953]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:34:50.953]      __ap = 1; 
[02:34:50.953]        // -> [__ap <= 0x00000001]
[02:34:50.953]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:34:50.961]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:34:50.961]      __ap = 4;
[02:34:50.961]        // -> [__ap <= 0x00000004]
[02:34:50.961]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:34:50.964]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:34:50.964]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:34:50.964]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:34:50.966]    </block>
[02:34:50.966]    <block atomic="false" info="">
[02:34:50.967]      __var nReset = 0x80;
[02:34:50.967]        // -> [nReset <= 0x00000080]
[02:34:50.967]      __var canReadPins = 0;
[02:34:50.967]        // -> [canReadPins <= 0x00000000]
[02:34:50.967]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:34:50.969]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:34:50.970]        // -> [canReadPins <= 0x00000001]
[02:34:50.970]    </block>
[02:34:50.970]    <control if="" while="1" timeout="200" info="">
[02:34:50.970]      // while "1"  (timeout="200")
[02:34:50.970]      // while-condition  =>  TRUE
[02:34:50.970]      // while "1"  (timeout="200")
[02:34:50.970]      // while-condition  =>  TRUE
[02:34:50.970]      // while "1"  (timeout="200")
[02:34:50.970]      // while-condition  =>  TRUE
[02:34:50.970]      // while "1"  (timeout="200")
[02:34:50.970]      // while-condition  =>  TRUE
[02:34:50.970]      // while "1"  (timeout="200")
[02:34:50.971]      // while-condition  =>  TRUE
[02:34:50.971]      // while "1"  (timeout="200")
[02:34:50.971]      // while  =>  TIMEOUT
[02:34:50.971]      // end while "1"
[02:34:50.971]    </control>
[02:34:50.971]    <control if="canReadPins" while="" timeout="0" info="">
[02:34:50.971]      // if-block "canReadPins"
[02:34:50.971]        // =>  TRUE
[02:34:50.971]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:34:50.971]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:34:50.973]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:34:50.973]        // while-condition  =>  FALSE
[02:34:50.973]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:34:50.973]      </control>
[02:34:50.974]      // end if-block "canReadPins"
[02:34:50.974]    </control>
[02:34:50.974]    <control if="!canReadPins" while="" timeout="0" info="">
[02:34:50.974]      // if-block "!canReadPins"
[02:34:50.974]        // =>  FALSE
[02:34:50.974]      // skip if-block "!canReadPins"
[02:34:50.975]    </control>
[02:34:50.975]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:34:50.975]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:34:50.975]        // =>  TRUE
[02:34:50.975]      <block atomic="false" info="">
[02:34:50.975]        WriteAP(0x00, 0x190008);
[02:34:50.977]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:34:50.977]        WriteAP(0xF0, 0x01);
[02:34:50.980]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:34:50.980]      </block>
[02:34:50.980]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:34:50.981]    </control>
[02:34:50.981]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:34:50.981]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:34:50.981]        // =>  FALSE
[02:34:50.981]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:34:50.981]    </control>
[02:34:50.982]    <block atomic="false" info="">
[02:34:50.982]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:34:50.985]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:34:50.985]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:34:50.985]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:34:50.987]      __ap = 0; //lets make sure we reset the access point selection
[02:34:50.987]        // -> [__ap <= 0x00000000]
[02:34:50.987]    </block>
[02:34:50.987]  </sequence>
[02:34:50.987]  
[02:34:51.007]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:34:51.007]  
[02:34:51.007]  <debugvars>
[02:34:51.007]    // Pre-defined
[02:34:51.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:51.008]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:34:51.008]    __dp=0x00000000
[02:34:51.008]    __ap=0x00000000
[02:34:51.008]    __traceout=0x00000000      (Trace Disabled)
[02:34:51.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:51.008]    __FlashAddr=0x00000000
[02:34:51.008]    __FlashLen=0x00000000
[02:34:51.008]    __FlashArg=0x00000000
[02:34:51.008]    __FlashOp=0x00000000
[02:34:51.008]    __Result=0x00000000
[02:34:51.008]  </debugvars>
[02:34:51.009]  
[02:34:51.009]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:34:51.009]    <block atomic="false" info="">
[02:34:51.009]      __var deviceID = 0;
[02:34:51.009]        // -> [deviceID <= 0x00000000]
[02:34:51.009]      __var version = 0;
[02:34:51.009]        // -> [version <= 0x00000000]
[02:34:51.009]      __var partNum = 0;
[02:34:51.009]        // -> [partNum <= 0x00000000]
[02:34:51.009]      __var manuf = 0;
[02:34:51.009]        // -> [manuf <= 0x00000000]
[02:34:51.009]      __var isMSPM0G1X0X_G3X0X = 0;
[02:34:51.009]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:34:51.010]      __var isProduction = 0;
[02:34:51.010]        // -> [isProduction <= 0x00000000]
[02:34:51.010]      __var continueId = 0;
[02:34:51.010]        // -> [continueId <= 0x00000000]
[02:34:51.010]      deviceID =   Read32(0x41C40004);
[02:34:51.015]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:34:51.015]        // -> [deviceID <= 0x2BB8802F]
[02:34:51.015]      version = deviceID >> 28;
[02:34:51.015]        // -> [version <= 0x00000002]
[02:34:51.015]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:34:51.015]        // -> [partNum <= 0x0000BB88]
[02:34:51.015]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:34:51.015]        // -> [manuf <= 0x00000017]
[02:34:51.016]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:34:51.016]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:34:51.016]      isProduction = (version > 0);
[02:34:51.016]        // -> [isProduction <= 0x00000001]
[02:34:51.016]    </block>
[02:34:51.016]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:34:51.016]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:34:51.016]        // =>  FALSE
[02:34:51.017]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:34:51.017]    </control>
[02:34:51.017]    <control if="continueId == 4" while="" timeout="0" info="">
[02:34:51.017]      // if-block "continueId == 4"
[02:34:51.017]        // =>  FALSE
[02:34:51.017]      // skip if-block "continueId == 4"
[02:34:51.017]    </control>
[02:34:51.017]    <control if="!isProduction" while="" timeout="0" info="">
[02:34:51.017]      // if-block "!isProduction"
[02:34:51.017]        // =>  FALSE
[02:34:51.017]      // skip if-block "!isProduction"
[02:34:51.017]    </control>
[02:34:51.017]  </sequence>
[02:34:51.018]  
[02:36:27.245]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:36:27.245]  
[02:36:27.245]  <debugvars>
[02:36:27.245]    // Pre-defined
[02:36:27.246]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:27.246]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:27.246]    __dp=0x00000000
[02:36:27.246]    __ap=0x00000000
[02:36:27.246]    __traceout=0x00000000      (Trace Disabled)
[02:36:27.246]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:27.246]    __FlashAddr=0x00000000
[02:36:27.246]    __FlashLen=0x00000000
[02:36:27.246]    __FlashArg=0x00000000
[02:36:27.246]    __FlashOp=0x00000000
[02:36:27.246]    __Result=0x00000000
[02:36:27.246]  </debugvars>
[02:36:27.246]  
[02:36:27.246]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:36:27.246]    <block atomic="false" info="">
[02:36:27.246]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:36:27.246]        // -> [isSWJ <= 0x00000001]
[02:36:27.246]      __var hasDormant = __protocol & 0x00020000;
[02:36:27.246]        // -> [hasDormant <= 0x00000000]
[02:36:27.248]      __var protType   = __protocol & 0x0000FFFF;
[02:36:27.248]        // -> [protType <= 0x00000002]
[02:36:27.248]    </block>
[02:36:27.248]    <control if="protType == 1" while="" timeout="0" info="">
[02:36:27.248]      // if-block "protType == 1"
[02:36:27.248]        // =>  FALSE
[02:36:27.248]      // skip if-block "protType == 1"
[02:36:27.249]    </control>
[02:36:27.249]    <control if="protType == 2" while="" timeout="0" info="">
[02:36:27.249]      // if-block "protType == 2"
[02:36:27.249]        // =>  TRUE
[02:36:27.249]      <control if="isSWJ" while="" timeout="0" info="">
[02:36:27.249]        // if-block "isSWJ"
[02:36:27.249]          // =>  TRUE
[02:36:27.249]        <control if="hasDormant" while="" timeout="0" info="">
[02:36:27.249]          // if-block "hasDormant"
[02:36:27.249]            // =>  FALSE
[02:36:27.249]          // skip if-block "hasDormant"
[02:36:27.249]        </control>
[02:36:27.249]        <control if="!hasDormant" while="" timeout="0" info="">
[02:36:27.250]          // if-block "!hasDormant"
[02:36:27.250]            // =>  TRUE
[02:36:27.250]          <block atomic="false" info="">
[02:36:27.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:36:27.252]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:27.252]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:36:27.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:36:27.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:36:27.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:27.255]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:36:27.256]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:36:27.256]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:36:27.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:27.258]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:36:27.259]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:36:27.260]          </block>
[02:36:27.260]          // end if-block "!hasDormant"
[02:36:27.260]        </control>
[02:36:27.260]        // end if-block "isSWJ"
[02:36:27.260]      </control>
[02:36:27.260]      <control if="!isSWJ" while="" timeout="0" info="">
[02:36:27.260]        // if-block "!isSWJ"
[02:36:27.261]          // =>  FALSE
[02:36:27.261]        // skip if-block "!isSWJ"
[02:36:27.261]      </control>
[02:36:27.261]      <block atomic="false" info="">
[02:36:27.261]        ReadDP(0x0);
[02:36:27.263]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:36:27.263]      </block>
[02:36:27.263]      // end if-block "protType == 2"
[02:36:27.263]    </control>
[02:36:27.263]  </sequence>
[02:36:27.264]  
[02:36:27.265]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:36:27.265]  
[02:36:27.266]  <debugvars>
[02:36:27.266]    // Pre-defined
[02:36:27.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:27.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:27.266]    __dp=0x00000000
[02:36:27.266]    __ap=0x00000000
[02:36:27.266]    __traceout=0x00000000      (Trace Disabled)
[02:36:27.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:27.266]    __FlashAddr=0x00000000
[02:36:27.266]    __FlashLen=0x00000000
[02:36:27.267]    __FlashArg=0x00000000
[02:36:27.267]    __FlashOp=0x00000000
[02:36:27.267]    __Result=0x00000000
[02:36:27.267]  </debugvars>
[02:36:27.267]  
[02:36:27.267]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:36:27.267]    <block atomic="false" info="">
[02:36:27.267]      __var SW_DP_ABORT       = 0x0;
[02:36:27.267]        // -> [SW_DP_ABORT <= 0x00000000]
[02:36:27.267]      __var DP_CTRL_STAT      = 0x4;
[02:36:27.268]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:36:27.268]      __var DP_SELECT         = 0x8;
[02:36:27.268]        // -> [DP_SELECT <= 0x00000008]
[02:36:27.268]      __var powered_down      = 0;
[02:36:27.268]        // -> [powered_down <= 0x00000000]
[02:36:27.268]      WriteDP(DP_SELECT, 0x00000000);
[02:36:27.270]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:36:27.270]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:36:27.272]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:36:27.272]        // -> [powered_down <= 0x00000001]
[02:36:27.272]    </block>
[02:36:27.273]    <control if="powered_down" while="" timeout="0" info="">
[02:36:27.273]      // if-block "powered_down"
[02:36:27.273]        // =>  TRUE
[02:36:27.273]      <block atomic="false" info="">
[02:36:27.273]        Message(0, "Debug/System power-up request sent");
[02:36:27.274]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:36:27.276]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:36:27.276]      </block>
[02:36:27.276]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:36:27.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:27.278]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:36:27.278]        // while-condition  =>  FALSE
[02:36:27.278]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:36:27.278]      </control>
[02:36:27.278]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:36:27.278]        // if-block "(__protocol & 0xFFFF) == 1"
[02:36:27.278]          // =>  FALSE
[02:36:27.279]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:36:27.279]      </control>
[02:36:27.279]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:36:27.279]        // if-block "(__protocol & 0xFFFF) == 2"
[02:36:27.279]          // =>  TRUE
[02:36:27.279]        <block atomic="false" info="">
[02:36:27.279]          Message(0, "executing SWD power up");
[02:36:27.281]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:36:27.282]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:36:27.282]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:36:27.284]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:36:27.284]        </block>
[02:36:27.284]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:36:27.285]      </control>
[02:36:27.285]      // end if-block "powered_down"
[02:36:27.285]    </control>
[02:36:27.285]    <block atomic="false" info="">
[02:36:27.285]      __var DEBUG_PORT_VAL    = 0;
[02:36:27.285]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:36:27.285]      __var ACCESS_POINT_VAL  = 0;
[02:36:27.285]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:36:27.285]      __ap = 1; 
[02:36:27.285]        // -> [__ap <= 0x00000001]
[02:36:27.285]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:36:27.292]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:36:27.292]      __ap = 4;
[02:36:27.292]        // -> [__ap <= 0x00000004]
[02:36:27.292]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:36:27.295]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:36:27.295]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:36:27.295]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:36:27.297]    </block>
[02:36:27.297]    <block atomic="false" info="">
[02:36:27.297]      __var nReset = 0x80;
[02:36:27.298]        // -> [nReset <= 0x00000080]
[02:36:27.298]      __var canReadPins = 0;
[02:36:27.298]        // -> [canReadPins <= 0x00000000]
[02:36:27.298]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:36:27.300]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:36:27.300]        // -> [canReadPins <= 0x00000001]
[02:36:27.300]    </block>
[02:36:27.300]    <control if="" while="1" timeout="200" info="">
[02:36:27.301]      // while "1"  (timeout="200")
[02:36:27.301]      // while-condition  =>  TRUE
[02:36:27.301]      // while "1"  (timeout="200")
[02:36:27.301]      // while-condition  =>  TRUE
[02:36:27.302]      // while "1"  (timeout="200")
[02:36:27.302]      // while-condition  =>  TRUE
[02:36:27.302]      // while "1"  (timeout="200")
[02:36:27.302]      // while-condition  =>  TRUE
[02:36:27.302]      // while "1"  (timeout="200")
[02:36:27.302]      // while-condition  =>  TRUE
[02:36:27.302]      // while "1"  (timeout="200")
[02:36:27.302]      // while-condition  =>  TRUE
[02:36:27.303]      // while "1"  (timeout="200")
[02:36:27.303]      // while-condition  =>  TRUE
[02:36:27.303]      // while "1"  (timeout="200")
[02:36:27.303]      // while-condition  =>  TRUE
[02:36:27.303]      // while "1"  (timeout="200")
[02:36:27.303]      // while-condition  =>  TRUE
[02:36:27.303]      // while "1"  (timeout="200")
[02:36:27.303]      // while-condition  =>  TRUE
[02:36:27.303]      // while "1"  (timeout="200")
[02:36:27.303]      // while-condition  =>  TRUE
[02:36:27.303]      // while "1"  (timeout="200")
[02:36:27.304]      // while-condition  =>  TRUE
[02:36:27.304]      // while "1"  (timeout="200")
[02:36:27.304]      // while-condition  =>  TRUE
[02:36:27.304]      // while "1"  (timeout="200")
[02:36:27.304]      // while-condition  =>  TRUE
[02:36:27.305]      // while "1"  (timeout="200")
[02:36:27.305]      // while-condition  =>  TRUE
[02:36:27.305]      // while "1"  (timeout="200")
[02:36:27.305]      // while-condition  =>  TRUE
[02:36:27.305]      // while "1"  (timeout="200")
[02:36:27.305]      // while-condition  =>  TRUE
[02:36:27.305]      // while "1"  (timeout="200")
[02:36:27.305]      // while-condition  =>  TRUE
[02:36:27.306]      // while "1"  (timeout="200")
[02:36:27.306]      // while-condition  =>  TRUE
[02:36:27.306]      // while "1"  (timeout="200")
[02:36:27.306]      // while-condition  =>  TRUE
[02:36:27.306]      // while "1"  (timeout="200")
[02:36:27.306]      // while-condition  =>  TRUE
[02:36:27.306]      // while "1"  (timeout="200")
[02:36:27.306]      // while-condition  =>  TRUE
[02:36:27.306]      // while "1"  (timeout="200")
[02:36:27.306]      // while-condition  =>  TRUE
[02:36:27.306]      // while "1"  (timeout="200")
[02:36:27.307]      // while-condition  =>  TRUE
[02:36:27.307]      // while "1"  (timeout="200")
[02:36:27.307]      // while-condition  =>  TRUE
[02:36:27.307]      // while "1"  (timeout="200")
[02:36:27.307]      // while-condition  =>  TRUE
[02:36:27.307]      // while "1"  (timeout="200")
[02:36:27.307]      // while-condition  =>  TRUE
[02:36:27.307]      // while "1"  (timeout="200")
[02:36:27.307]      // while-condition  =>  TRUE
[02:36:27.308]      // while "1"  (timeout="200")
[02:36:27.308]      // while-condition  =>  TRUE
[02:36:27.308]      // while "1"  (timeout="200")
[02:36:27.308]      // while-condition  =>  TRUE
[02:36:27.309]      // while "1"  (timeout="200")
[02:36:27.309]      // while-condition  =>  TRUE
[02:36:27.309]      // while "1"  (timeout="200")
[02:36:27.309]      // while-condition  =>  TRUE
[02:36:27.309]      // while "1"  (timeout="200")
[02:36:27.309]      // while-condition  =>  TRUE
[02:36:27.310]      // while "1"  (timeout="200")
[02:36:27.310]      // while-condition  =>  TRUE
[02:36:27.310]      // while "1"  (timeout="200")
[02:36:27.310]      // while-condition  =>  TRUE
[02:36:27.310]      // while "1"  (timeout="200")
[02:36:27.310]      // while-condition  =>  TRUE
[02:36:27.310]      // while "1"  (timeout="200")
[02:36:27.310]      // while-condition  =>  TRUE
[02:36:27.310]      // while "1"  (timeout="200")
[02:36:27.310]      // while-condition  =>  TRUE
[02:36:27.310]      // while "1"  (timeout="200")
[02:36:27.310]      // while-condition  =>  TRUE
[02:36:27.311]      // while "1"  (timeout="200")
[02:36:27.311]      // while-condition  =>  TRUE
[02:36:27.311]      // while "1"  (timeout="200")
[02:36:27.311]      // while-condition  =>  TRUE
[02:36:27.311]      // while "1"  (timeout="200")
[02:36:27.311]      // while-condition  =>  TRUE
[02:36:27.311]      // while "1"  (timeout="200")
[02:36:27.311]      // while-condition  =>  TRUE
[02:36:27.311]      // while "1"  (timeout="200")
[02:36:27.311]      // while-condition  =>  TRUE
[02:36:27.312]      // while "1"  (timeout="200")
[02:36:27.312]      // while-condition  =>  TRUE
[02:36:27.312]      // while "1"  (timeout="200")
[02:36:27.312]      // while-condition  =>  TRUE
[02:36:27.312]      // while "1"  (timeout="200")
[02:36:27.312]      // while-condition  =>  TRUE
[02:36:27.312]      // while "1"  (timeout="200")
[02:36:27.312]      // while-condition  =>  TRUE
[02:36:27.312]      // while "1"  (timeout="200")
[02:36:27.312]      // while-condition  =>  TRUE
[02:36:27.312]      // while "1"  (timeout="200")
[02:36:27.312]      // while-condition  =>  TRUE
[02:36:27.312]      // while "1"  (timeout="200")
[02:36:27.312]      // while-condition  =>  TRUE
[02:36:27.313]      // while "1"  (timeout="200")
[02:36:27.313]      // while-condition  =>  TRUE
[02:36:27.313]      // while "1"  (timeout="200")
[02:36:27.313]      // while-condition  =>  TRUE
[02:36:27.313]      // while "1"  (timeout="200")
[02:36:27.313]      // while-condition  =>  TRUE
[02:36:27.314]      // while "1"  (timeout="200")
[02:36:27.314]      // while-condition  =>  TRUE
[02:36:27.314]      // while "1"  (timeout="200")
[02:36:27.314]      // while-condition  =>  TRUE
[02:36:27.314]      // while "1"  (timeout="200")
[02:36:27.314]      // while-condition  =>  TRUE
[02:36:27.314]      // while "1"  (timeout="200")
[02:36:27.315]      // while-condition  =>  TRUE
[02:36:27.315]      // while "1"  (timeout="200")
[02:36:27.315]      // while-condition  =>  TRUE
[02:36:27.315]      // while "1"  (timeout="200")
[02:36:27.315]      // while  =>  TIMEOUT
[02:36:27.316]      // end while "1"
[02:36:27.316]    </control>
[02:36:27.316]    <control if="canReadPins" while="" timeout="0" info="">
[02:36:27.316]      // if-block "canReadPins"
[02:36:27.316]        // =>  TRUE
[02:36:27.316]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:36:27.316]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:36:27.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:36:27.318]        // while-condition  =>  FALSE
[02:36:27.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:36:27.318]      </control>
[02:36:27.318]      // end if-block "canReadPins"
[02:36:27.318]    </control>
[02:36:27.318]    <control if="!canReadPins" while="" timeout="0" info="">
[02:36:27.318]      // if-block "!canReadPins"
[02:36:27.318]        // =>  FALSE
[02:36:27.318]      // skip if-block "!canReadPins"
[02:36:27.318]    </control>
[02:36:27.318]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:36:27.318]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:36:27.318]        // =>  TRUE
[02:36:27.320]      <block atomic="false" info="">
[02:36:27.320]        WriteAP(0x00, 0x190008);
[02:36:27.321]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:36:27.321]        WriteAP(0xF0, 0x01);
[02:36:27.325]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:36:27.325]      </block>
[02:36:27.325]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:36:27.325]    </control>
[02:36:27.325]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:36:27.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:36:27.325]        // =>  FALSE
[02:36:27.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:36:27.325]    </control>
[02:36:27.325]    <block atomic="false" info="">
[02:36:27.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:36:27.329]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:36:27.330]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:36:27.330]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:36:27.331]      __ap = 0; //lets make sure we reset the access point selection
[02:36:27.331]        // -> [__ap <= 0x00000000]
[02:36:27.331]    </block>
[02:36:27.332]  </sequence>
[02:36:27.332]  
[02:36:27.354]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:36:27.354]  
[02:36:27.354]  <debugvars>
[02:36:27.354]    // Pre-defined
[02:36:27.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:27.356]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:27.356]    __dp=0x00000000
[02:36:27.356]    __ap=0x00000000
[02:36:27.356]    __traceout=0x00000000      (Trace Disabled)
[02:36:27.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:27.356]    __FlashAddr=0x00000000
[02:36:27.356]    __FlashLen=0x00000000
[02:36:27.356]    __FlashArg=0x00000000
[02:36:27.356]    __FlashOp=0x00000000
[02:36:27.356]    __Result=0x00000000
[02:36:27.356]  </debugvars>
[02:36:27.356]  
[02:36:27.356]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:36:27.357]    <block atomic="false" info="">
[02:36:27.357]      __var deviceID = 0;
[02:36:27.357]        // -> [deviceID <= 0x00000000]
[02:36:27.357]      __var version = 0;
[02:36:27.357]        // -> [version <= 0x00000000]
[02:36:27.357]      __var partNum = 0;
[02:36:27.357]        // -> [partNum <= 0x00000000]
[02:36:27.357]      __var manuf = 0;
[02:36:27.357]        // -> [manuf <= 0x00000000]
[02:36:27.357]      __var isMSPM0G1X0X_G3X0X = 0;
[02:36:27.358]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:36:27.358]      __var isProduction = 0;
[02:36:27.358]        // -> [isProduction <= 0x00000000]
[02:36:27.358]      __var continueId = 0;
[02:36:27.358]        // -> [continueId <= 0x00000000]
[02:36:27.358]      deviceID =   Read32(0x41C40004);
[02:36:27.364]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:36:27.364]        // -> [deviceID <= 0x2BB8802F]
[02:36:27.364]      version = deviceID >> 28;
[02:36:27.364]        // -> [version <= 0x00000002]
[02:36:27.364]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:36:27.364]        // -> [partNum <= 0x0000BB88]
[02:36:27.364]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:36:27.365]        // -> [manuf <= 0x00000017]
[02:36:27.365]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:36:27.365]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:36:27.365]      isProduction = (version > 0);
[02:36:27.365]        // -> [isProduction <= 0x00000001]
[02:36:27.365]    </block>
[02:36:27.365]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:36:27.365]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:36:27.365]        // =>  FALSE
[02:36:27.365]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:36:27.365]    </control>
[02:36:27.366]    <control if="continueId == 4" while="" timeout="0" info="">
[02:36:27.366]      // if-block "continueId == 4"
[02:36:27.366]        // =>  FALSE
[02:36:27.366]      // skip if-block "continueId == 4"
[02:36:27.366]    </control>
[02:36:27.366]    <control if="!isProduction" while="" timeout="0" info="">
[02:36:27.366]      // if-block "!isProduction"
[02:36:27.366]        // =>  FALSE
[02:36:27.367]      // skip if-block "!isProduction"
[02:36:27.367]    </control>
[02:36:27.367]  </sequence>
[02:36:27.368]  
[02:37:41.216]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:37:41.216]  
[02:37:41.216]  <debugvars>
[02:37:41.216]    // Pre-defined
[02:37:41.216]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:41.216]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:37:41.216]    __dp=0x00000000
[02:37:41.216]    __ap=0x00000000
[02:37:41.216]    __traceout=0x00000000      (Trace Disabled)
[02:37:41.217]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:41.217]    __FlashAddr=0x00000000
[02:37:41.217]    __FlashLen=0x00000000
[02:37:41.217]    __FlashArg=0x00000000
[02:37:41.217]    __FlashOp=0x00000000
[02:37:41.217]    __Result=0x00000000
[02:37:41.217]  </debugvars>
[02:37:41.217]  
[02:37:41.217]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:37:41.217]    <block atomic="false" info="">
[02:37:41.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:37:41.218]        // -> [isSWJ <= 0x00000001]
[02:37:41.218]      __var hasDormant = __protocol & 0x00020000;
[02:37:41.218]        // -> [hasDormant <= 0x00000000]
[02:37:41.218]      __var protType   = __protocol & 0x0000FFFF;
[02:37:41.218]        // -> [protType <= 0x00000002]
[02:37:41.218]    </block>
[02:37:41.218]    <control if="protType == 1" while="" timeout="0" info="">
[02:37:41.218]      // if-block "protType == 1"
[02:37:41.218]        // =>  FALSE
[02:37:41.218]      // skip if-block "protType == 1"
[02:37:41.218]    </control>
[02:37:41.219]    <control if="protType == 2" while="" timeout="0" info="">
[02:37:41.219]      // if-block "protType == 2"
[02:37:41.219]        // =>  TRUE
[02:37:41.219]      <control if="isSWJ" while="" timeout="0" info="">
[02:37:41.219]        // if-block "isSWJ"
[02:37:41.219]          // =>  TRUE
[02:37:41.219]        <control if="hasDormant" while="" timeout="0" info="">
[02:37:41.219]          // if-block "hasDormant"
[02:37:41.219]            // =>  FALSE
[02:37:41.219]          // skip if-block "hasDormant"
[02:37:41.219]        </control>
[02:37:41.219]        <control if="!hasDormant" while="" timeout="0" info="">
[02:37:41.219]          // if-block "!hasDormant"
[02:37:41.219]            // =>  TRUE
[02:37:41.219]          <block atomic="false" info="">
[02:37:41.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:37:41.222]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:37:41.222]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:37:41.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:37:41.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:37:41.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:37:41.228]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:37:41.230]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:37:41.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:37:41.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:37:41.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:37:41.233]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:37:41.233]          </block>
[02:37:41.233]          // end if-block "!hasDormant"
[02:37:41.233]        </control>
[02:37:41.233]        // end if-block "isSWJ"
[02:37:41.233]      </control>
[02:37:41.233]      <control if="!isSWJ" while="" timeout="0" info="">
[02:37:41.233]        // if-block "!isSWJ"
[02:37:41.233]          // =>  FALSE
[02:37:41.234]        // skip if-block "!isSWJ"
[02:37:41.234]      </control>
[02:37:41.234]      <block atomic="false" info="">
[02:37:41.234]        ReadDP(0x0);
[02:37:41.236]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:37:41.236]      </block>
[02:37:41.236]      // end if-block "protType == 2"
[02:37:41.236]    </control>
[02:37:41.236]  </sequence>
[02:37:41.236]  
[02:37:41.239]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:37:41.239]  
[02:37:41.239]  <debugvars>
[02:37:41.239]    // Pre-defined
[02:37:41.239]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:41.239]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:37:41.239]    __dp=0x00000000
[02:37:41.239]    __ap=0x00000000
[02:37:41.239]    __traceout=0x00000000      (Trace Disabled)
[02:37:41.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:41.240]    __FlashAddr=0x00000000
[02:37:41.240]    __FlashLen=0x00000000
[02:37:41.240]    __FlashArg=0x00000000
[02:37:41.240]    __FlashOp=0x00000000
[02:37:41.240]    __Result=0x00000000
[02:37:41.240]  </debugvars>
[02:37:41.240]  
[02:37:41.240]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:37:41.240]    <block atomic="false" info="">
[02:37:41.240]      __var SW_DP_ABORT       = 0x0;
[02:37:41.240]        // -> [SW_DP_ABORT <= 0x00000000]
[02:37:41.240]      __var DP_CTRL_STAT      = 0x4;
[02:37:41.241]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:37:41.241]      __var DP_SELECT         = 0x8;
[02:37:41.241]        // -> [DP_SELECT <= 0x00000008]
[02:37:41.241]      __var powered_down      = 0;
[02:37:41.241]        // -> [powered_down <= 0x00000000]
[02:37:41.241]      WriteDP(DP_SELECT, 0x00000000);
[02:37:41.243]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:37:41.243]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:37:41.244]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:37:41.244]        // -> [powered_down <= 0x00000001]
[02:37:41.245]    </block>
[02:37:41.245]    <control if="powered_down" while="" timeout="0" info="">
[02:37:41.245]      // if-block "powered_down"
[02:37:41.245]        // =>  TRUE
[02:37:41.245]      <block atomic="false" info="">
[02:37:41.245]        Message(0, "Debug/System power-up request sent");
[02:37:41.248]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:37:41.250]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:37:41.251]      </block>
[02:37:41.251]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:37:41.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:37:41.253]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:37:41.253]        // while-condition  =>  FALSE
[02:37:41.253]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:37:41.253]      </control>
[02:37:41.253]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:37:41.253]        // if-block "(__protocol & 0xFFFF) == 1"
[02:37:41.254]          // =>  FALSE
[02:37:41.254]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:37:41.254]      </control>
[02:37:41.254]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:37:41.254]        // if-block "(__protocol & 0xFFFF) == 2"
[02:37:41.254]          // =>  TRUE
[02:37:41.254]        <block atomic="false" info="">
[02:37:41.254]          Message(0, "executing SWD power up");
[02:37:41.255]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:37:41.257]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:37:41.257]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:37:41.259]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:37:41.259]        </block>
[02:37:41.259]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:37:41.259]      </control>
[02:37:41.259]      // end if-block "powered_down"
[02:37:41.259]    </control>
[02:37:41.259]    <block atomic="false" info="">
[02:37:41.260]      __var DEBUG_PORT_VAL    = 0;
[02:37:41.260]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:37:41.260]      __var ACCESS_POINT_VAL  = 0;
[02:37:41.260]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:37:41.260]      __ap = 1; 
[02:37:41.260]        // -> [__ap <= 0x00000001]
[02:37:41.260]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:37:41.264]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:37:41.264]      __ap = 4;
[02:37:41.264]        // -> [__ap <= 0x00000004]
[02:37:41.264]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:37:41.267]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:37:41.267]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:37:41.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:37:41.269]    </block>
[02:37:41.269]    <block atomic="false" info="">
[02:37:41.270]      __var nReset = 0x80;
[02:37:41.270]        // -> [nReset <= 0x00000080]
[02:37:41.270]      __var canReadPins = 0;
[02:37:41.270]        // -> [canReadPins <= 0x00000000]
[02:37:41.270]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:37:41.272]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:37:41.272]        // -> [canReadPins <= 0x00000001]
[02:37:41.272]    </block>
[02:37:41.272]    <control if="" while="1" timeout="200" info="">
[02:37:41.272]      // while "1"  (timeout="200")
[02:37:41.273]      // while-condition  =>  TRUE
[02:37:41.273]      // while "1"  (timeout="200")
[02:37:41.273]      // while-condition  =>  TRUE
[02:37:41.273]      // while "1"  (timeout="200")
[02:37:41.273]      // while-condition  =>  TRUE
[02:37:41.273]      // while "1"  (timeout="200")
[02:37:41.273]      // while-condition  =>  TRUE
[02:37:41.273]      // while "1"  (timeout="200")
[02:37:41.273]      // while-condition  =>  TRUE
[02:37:41.273]      // while "1"  (timeout="200")
[02:37:41.273]      // while-condition  =>  TRUE
[02:37:41.273]      // while "1"  (timeout="200")
[02:37:41.273]      // while-condition  =>  TRUE
[02:37:41.274]      // while "1"  (timeout="200")
[02:37:41.274]      // while-condition  =>  TRUE
[02:37:41.274]      // while "1"  (timeout="200")
[02:37:41.274]      // while-condition  =>  TRUE
[02:37:41.274]      // while "1"  (timeout="200")
[02:37:41.274]      // while-condition  =>  TRUE
[02:37:41.274]      // while "1"  (timeout="200")
[02:37:41.274]      // while-condition  =>  TRUE
[02:37:41.274]      // while "1"  (timeout="200")
[02:37:41.274]      // while-condition  =>  TRUE
[02:37:41.275]      // while "1"  (timeout="200")
[02:37:41.275]      // while-condition  =>  TRUE
[02:37:41.275]      // while "1"  (timeout="200")
[02:37:41.275]      // while-condition  =>  TRUE
[02:37:41.275]      // while "1"  (timeout="200")
[02:37:41.275]      // while-condition  =>  TRUE
[02:37:41.275]      // while "1"  (timeout="200")
[02:37:41.275]      // while-condition  =>  TRUE
[02:37:41.275]      // while "1"  (timeout="200")
[02:37:41.276]      // while-condition  =>  TRUE
[02:37:41.276]      // while "1"  (timeout="200")
[02:37:41.276]      // while-condition  =>  TRUE
[02:37:41.276]      // while "1"  (timeout="200")
[02:37:41.276]      // while-condition  =>  TRUE
[02:37:41.276]      // while "1"  (timeout="200")
[02:37:41.276]      // while-condition  =>  TRUE
[02:37:41.276]      // while "1"  (timeout="200")
[02:37:41.276]      // while-condition  =>  TRUE
[02:37:41.276]      // while "1"  (timeout="200")
[02:37:41.276]      // while-condition  =>  TRUE
[02:37:41.276]      // while "1"  (timeout="200")
[02:37:41.277]      // while-condition  =>  TRUE
[02:37:41.277]      // while "1"  (timeout="200")
[02:37:41.277]      // while-condition  =>  TRUE
[02:37:41.277]      // while "1"  (timeout="200")
[02:37:41.277]      // while-condition  =>  TRUE
[02:37:41.277]      // while "1"  (timeout="200")
[02:37:41.277]      // while-condition  =>  TRUE
[02:37:41.277]      // while "1"  (timeout="200")
[02:37:41.277]      // while-condition  =>  TRUE
[02:37:41.278]      // while "1"  (timeout="200")
[02:37:41.278]      // while-condition  =>  TRUE
[02:37:41.278]      // while "1"  (timeout="200")
[02:37:41.278]      // while-condition  =>  TRUE
[02:37:41.278]      // while "1"  (timeout="200")
[02:37:41.278]      // while-condition  =>  TRUE
[02:37:41.278]      // while "1"  (timeout="200")
[02:37:41.278]      // while-condition  =>  TRUE
[02:37:41.278]      // while "1"  (timeout="200")
[02:37:41.278]      // while-condition  =>  TRUE
[02:37:41.278]      // while "1"  (timeout="200")
[02:37:41.278]      // while-condition  =>  TRUE
[02:37:41.278]      // while "1"  (timeout="200")
[02:37:41.278]      // while-condition  =>  TRUE
[02:37:41.279]      // while "1"  (timeout="200")
[02:37:41.279]      // while-condition  =>  TRUE
[02:37:41.279]      // while "1"  (timeout="200")
[02:37:41.279]      // while-condition  =>  TRUE
[02:37:41.279]      // while "1"  (timeout="200")
[02:37:41.280]      // while-condition  =>  TRUE
[02:37:41.280]      // while "1"  (timeout="200")
[02:37:41.280]      // while-condition  =>  TRUE
[02:37:41.280]      // while "1"  (timeout="200")
[02:37:41.280]      // while-condition  =>  TRUE
[02:37:41.280]      // while "1"  (timeout="200")
[02:37:41.280]      // while-condition  =>  TRUE
[02:37:41.280]      // while "1"  (timeout="200")
[02:37:41.280]      // while-condition  =>  TRUE
[02:37:41.280]      // while "1"  (timeout="200")
[02:37:41.280]      // while-condition  =>  TRUE
[02:37:41.280]      // while "1"  (timeout="200")
[02:37:41.281]      // while-condition  =>  TRUE
[02:37:41.281]      // while "1"  (timeout="200")
[02:37:41.281]      // while-condition  =>  TRUE
[02:37:41.281]      // while "1"  (timeout="200")
[02:37:41.281]      // while-condition  =>  TRUE
[02:37:41.281]      // while "1"  (timeout="200")
[02:37:41.281]      // while-condition  =>  TRUE
[02:37:41.281]      // while "1"  (timeout="200")
[02:37:41.281]      // while-condition  =>  TRUE
[02:37:41.282]      // while "1"  (timeout="200")
[02:37:41.282]      // while-condition  =>  TRUE
[02:37:41.282]      // while "1"  (timeout="200")
[02:37:41.282]      // while-condition  =>  TRUE
[02:37:41.282]      // while "1"  (timeout="200")
[02:37:41.282]      // while-condition  =>  TRUE
[02:37:41.282]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.283]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.283]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.283]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.283]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.283]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.283]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.283]      // while "1"  (timeout="200")
[02:37:41.283]      // while-condition  =>  TRUE
[02:37:41.284]      // while "1"  (timeout="200")
[02:37:41.284]      // while  =>  TIMEOUT
[02:37:41.284]      // end while "1"
[02:37:41.284]    </control>
[02:37:41.284]    <control if="canReadPins" while="" timeout="0" info="">
[02:37:41.284]      // if-block "canReadPins"
[02:37:41.284]        // =>  TRUE
[02:37:41.284]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:37:41.284]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:37:41.286]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:37:41.286]        // while-condition  =>  FALSE
[02:37:41.286]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:37:41.286]      </control>
[02:37:41.286]      // end if-block "canReadPins"
[02:37:41.287]    </control>
[02:37:41.287]    <control if="!canReadPins" while="" timeout="0" info="">
[02:37:41.287]      // if-block "!canReadPins"
[02:37:41.287]        // =>  FALSE
[02:37:41.287]      // skip if-block "!canReadPins"
[02:37:41.287]    </control>
[02:37:41.287]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:37:41.287]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:37:41.287]        // =>  TRUE
[02:37:41.287]      <block atomic="false" info="">
[02:37:41.288]        WriteAP(0x00, 0x190008);
[02:37:41.290]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:37:41.290]        WriteAP(0xF0, 0x01);
[02:37:41.293]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:37:41.294]      </block>
[02:37:41.294]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:37:41.294]    </control>
[02:37:41.294]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:37:41.294]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:37:41.294]        // =>  FALSE
[02:37:41.295]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:37:41.295]    </control>
[02:37:41.295]    <block atomic="false" info="">
[02:37:41.295]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:37:41.301]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:37:41.301]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:37:41.301]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:37:41.304]      __ap = 0; //lets make sure we reset the access point selection
[02:37:41.304]        // -> [__ap <= 0x00000000]
[02:37:41.305]    </block>
[02:37:41.305]  </sequence>
[02:37:41.305]  
[02:37:41.328]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:37:41.328]  
[02:37:41.329]  <debugvars>
[02:37:41.329]    // Pre-defined
[02:37:41.329]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:41.329]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:37:41.329]    __dp=0x00000000
[02:37:41.329]    __ap=0x00000000
[02:37:41.330]    __traceout=0x00000000      (Trace Disabled)
[02:37:41.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:41.330]    __FlashAddr=0x00000000
[02:37:41.330]    __FlashLen=0x00000000
[02:37:41.330]    __FlashArg=0x00000000
[02:37:41.330]    __FlashOp=0x00000000
[02:37:41.330]    __Result=0x00000000
[02:37:41.330]  </debugvars>
[02:37:41.330]  
[02:37:41.330]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:37:41.330]    <block atomic="false" info="">
[02:37:41.331]      __var deviceID = 0;
[02:37:41.331]        // -> [deviceID <= 0x00000000]
[02:37:41.331]      __var version = 0;
[02:37:41.331]        // -> [version <= 0x00000000]
[02:37:41.331]      __var partNum = 0;
[02:37:41.331]        // -> [partNum <= 0x00000000]
[02:37:41.331]      __var manuf = 0;
[02:37:41.331]        // -> [manuf <= 0x00000000]
[02:37:41.331]      __var isMSPM0G1X0X_G3X0X = 0;
[02:37:41.331]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:37:41.331]      __var isProduction = 0;
[02:37:41.332]        // -> [isProduction <= 0x00000000]
[02:37:41.332]      __var continueId = 0;
[02:37:41.332]        // -> [continueId <= 0x00000000]
[02:37:41.332]      deviceID =   Read32(0x41C40004);
[02:37:41.338]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:37:41.338]        // -> [deviceID <= 0x2BB8802F]
[02:37:41.338]      version = deviceID >> 28;
[02:37:41.338]        // -> [version <= 0x00000002]
[02:37:41.338]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:37:41.338]        // -> [partNum <= 0x0000BB88]
[02:37:41.338]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:37:41.339]        // -> [manuf <= 0x00000017]
[02:37:41.339]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:37:41.339]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:37:41.339]      isProduction = (version > 0);
[02:37:41.339]        // -> [isProduction <= 0x00000001]
[02:37:41.339]    </block>
[02:37:41.339]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:37:41.339]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:37:41.339]        // =>  FALSE
[02:37:41.339]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:37:41.339]    </control>
[02:37:41.339]    <control if="continueId == 4" while="" timeout="0" info="">
[02:37:41.339]      // if-block "continueId == 4"
[02:37:41.339]        // =>  FALSE
[02:37:41.339]      // skip if-block "continueId == 4"
[02:37:41.340]    </control>
[02:37:41.340]    <control if="!isProduction" while="" timeout="0" info="">
[02:37:41.340]      // if-block "!isProduction"
[02:37:41.340]        // =>  FALSE
[02:37:41.340]      // skip if-block "!isProduction"
[02:37:41.340]    </control>
[02:37:41.340]  </sequence>
[02:37:41.340]  
[02:38:06.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:38:06.455]  
[02:38:06.463]  <debugvars>
[02:38:06.463]    // Pre-defined
[02:38:06.463]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:06.463]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:06.463]    __dp=0x00000000
[02:38:06.463]    __ap=0x00000000
[02:38:06.464]    __traceout=0x00000000      (Trace Disabled)
[02:38:06.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:06.464]    __FlashAddr=0x00000000
[02:38:06.464]    __FlashLen=0x00000000
[02:38:06.464]    __FlashArg=0x00000000
[02:38:06.464]    __FlashOp=0x00000000
[02:38:06.464]    __Result=0x00000000
[02:38:06.464]  </debugvars>
[02:38:06.464]  
[02:38:06.464]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:38:06.465]    <block atomic="false" info="">
[02:38:06.465]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:38:06.465]        // -> [isSWJ <= 0x00000001]
[02:38:06.465]      __var hasDormant = __protocol & 0x00020000;
[02:38:06.465]        // -> [hasDormant <= 0x00000000]
[02:38:06.465]      __var protType   = __protocol & 0x0000FFFF;
[02:38:06.465]        // -> [protType <= 0x00000002]
[02:38:06.465]    </block>
[02:38:06.465]    <control if="protType == 1" while="" timeout="0" info="">
[02:38:06.465]      // if-block "protType == 1"
[02:38:06.465]        // =>  FALSE
[02:38:06.465]      // skip if-block "protType == 1"
[02:38:06.465]    </control>
[02:38:06.466]    <control if="protType == 2" while="" timeout="0" info="">
[02:38:06.466]      // if-block "protType == 2"
[02:38:06.466]        // =>  TRUE
[02:38:06.466]      <control if="isSWJ" while="" timeout="0" info="">
[02:38:06.466]        // if-block "isSWJ"
[02:38:06.466]          // =>  TRUE
[02:38:06.467]        <control if="hasDormant" while="" timeout="0" info="">
[02:38:06.467]          // if-block "hasDormant"
[02:38:06.467]            // =>  FALSE
[02:38:06.467]          // skip if-block "hasDormant"
[02:38:06.467]        </control>
[02:38:06.467]        <control if="!hasDormant" while="" timeout="0" info="">
[02:38:06.467]          // if-block "!hasDormant"
[02:38:06.467]            // =>  TRUE
[02:38:06.467]          <block atomic="false" info="">
[02:38:06.467]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:38:06.468]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:06.469]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:38:06.470]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:38:06.470]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:38:06.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:06.472]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:38:06.473]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:38:06.473]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:38:06.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:06.475]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:38:06.475]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:38:06.476]          </block>
[02:38:06.477]          // end if-block "!hasDormant"
[02:38:06.477]        </control>
[02:38:06.477]        // end if-block "isSWJ"
[02:38:06.477]      </control>
[02:38:06.477]      <control if="!isSWJ" while="" timeout="0" info="">
[02:38:06.477]        // if-block "!isSWJ"
[02:38:06.477]          // =>  FALSE
[02:38:06.478]        // skip if-block "!isSWJ"
[02:38:06.478]      </control>
[02:38:06.478]      <block atomic="false" info="">
[02:38:06.478]        ReadDP(0x0);
[02:38:06.479]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:38:06.479]      </block>
[02:38:06.479]      // end if-block "protType == 2"
[02:38:06.479]    </control>
[02:38:06.480]  </sequence>
[02:38:06.480]  
[02:38:06.482]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:38:06.482]  
[02:38:06.482]  <debugvars>
[02:38:06.482]    // Pre-defined
[02:38:06.482]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:06.482]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:06.483]    __dp=0x00000000
[02:38:06.483]    __ap=0x00000000
[02:38:06.483]    __traceout=0x00000000      (Trace Disabled)
[02:38:06.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:06.483]    __FlashAddr=0x00000000
[02:38:06.483]    __FlashLen=0x00000000
[02:38:06.483]    __FlashArg=0x00000000
[02:38:06.484]    __FlashOp=0x00000000
[02:38:06.484]    __Result=0x00000000
[02:38:06.484]  </debugvars>
[02:38:06.484]  
[02:38:06.484]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:38:06.484]    <block atomic="false" info="">
[02:38:06.484]      __var SW_DP_ABORT       = 0x0;
[02:38:06.484]        // -> [SW_DP_ABORT <= 0x00000000]
[02:38:06.484]      __var DP_CTRL_STAT      = 0x4;
[02:38:06.484]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:38:06.484]      __var DP_SELECT         = 0x8;
[02:38:06.485]        // -> [DP_SELECT <= 0x00000008]
[02:38:06.485]      __var powered_down      = 0;
[02:38:06.485]        // -> [powered_down <= 0x00000000]
[02:38:06.485]      WriteDP(DP_SELECT, 0x00000000);
[02:38:06.486]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:38:06.486]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:38:06.489]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:38:06.489]        // -> [powered_down <= 0x00000001]
[02:38:06.490]    </block>
[02:38:06.490]    <control if="powered_down" while="" timeout="0" info="">
[02:38:06.490]      // if-block "powered_down"
[02:38:06.490]        // =>  TRUE
[02:38:06.490]      <block atomic="false" info="">
[02:38:06.490]        Message(0, "Debug/System power-up request sent");
[02:38:06.493]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:38:06.494]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:38:06.495]      </block>
[02:38:06.495]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:38:06.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:38:06.498]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:38:06.498]        // while-condition  =>  FALSE
[02:38:06.498]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:38:06.498]      </control>
[02:38:06.498]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:38:06.498]        // if-block "(__protocol & 0xFFFF) == 1"
[02:38:06.498]          // =>  FALSE
[02:38:06.499]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:38:06.499]      </control>
[02:38:06.499]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:38:06.499]        // if-block "(__protocol & 0xFFFF) == 2"
[02:38:06.499]          // =>  TRUE
[02:38:06.499]        <block atomic="false" info="">
[02:38:06.499]          Message(0, "executing SWD power up");
[02:38:06.500]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:38:06.502]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:38:06.502]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:38:06.503]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:38:06.505]        </block>
[02:38:06.505]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:38:06.505]      </control>
[02:38:06.505]      // end if-block "powered_down"
[02:38:06.505]    </control>
[02:38:06.506]    <block atomic="false" info="">
[02:38:06.506]      __var DEBUG_PORT_VAL    = 0;
[02:38:06.506]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:38:06.506]      __var ACCESS_POINT_VAL  = 0;
[02:38:06.506]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:38:06.506]      __ap = 1; 
[02:38:06.506]        // -> [__ap <= 0x00000001]
[02:38:06.506]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:38:06.508]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:38:06.509]      __ap = 4;
[02:38:06.509]        // -> [__ap <= 0x00000004]
[02:38:06.509]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:38:06.514]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:38:06.514]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:38:06.514]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:38:06.515]    </block>
[02:38:06.515]    <block atomic="false" info="">
[02:38:06.515]      __var nReset = 0x80;
[02:38:06.515]        // -> [nReset <= 0x00000080]
[02:38:06.515]      __var canReadPins = 0;
[02:38:06.516]        // -> [canReadPins <= 0x00000000]
[02:38:06.516]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:38:06.517]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:38:06.518]        // -> [canReadPins <= 0x00000001]
[02:38:06.518]    </block>
[02:38:06.518]    <control if="" while="1" timeout="200" info="">
[02:38:06.518]      // while "1"  (timeout="200")
[02:38:06.518]      // while-condition  =>  TRUE
[02:38:06.518]      // while "1"  (timeout="200")
[02:38:06.518]      // while  =>  TIMEOUT
[02:38:06.518]      // end while "1"
[02:38:06.518]    </control>
[02:38:06.518]    <control if="canReadPins" while="" timeout="0" info="">
[02:38:06.518]      // if-block "canReadPins"
[02:38:06.519]        // =>  TRUE
[02:38:06.519]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:38:06.519]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:38:06.520]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:38:06.520]        // while-condition  =>  FALSE
[02:38:06.520]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:38:06.521]      </control>
[02:38:06.521]      // end if-block "canReadPins"
[02:38:06.521]    </control>
[02:38:06.521]    <control if="!canReadPins" while="" timeout="0" info="">
[02:38:06.521]      // if-block "!canReadPins"
[02:38:06.521]        // =>  FALSE
[02:38:06.521]      // skip if-block "!canReadPins"
[02:38:06.521]    </control>
[02:38:06.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:38:06.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:38:06.522]        // =>  TRUE
[02:38:06.522]      <block atomic="false" info="">
[02:38:06.522]        WriteAP(0x00, 0x190008);
[02:38:06.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:38:06.523]        WriteAP(0xF0, 0x01);
[02:38:06.530]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:38:06.530]      </block>
[02:38:06.530]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:38:06.530]    </control>
[02:38:06.530]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:38:06.531]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:38:06.531]        // =>  FALSE
[02:38:06.531]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:38:06.531]    </control>
[02:38:06.531]    <block atomic="false" info="">
[02:38:06.531]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:38:06.535]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:38:06.536]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:38:06.536]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:38:06.538]      __ap = 0; //lets make sure we reset the access point selection
[02:38:06.538]        // -> [__ap <= 0x00000000]
[02:38:06.538]    </block>
[02:38:06.538]  </sequence>
[02:38:06.538]  
[02:38:06.559]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:38:06.559]  
[02:38:06.559]  <debugvars>
[02:38:06.559]    // Pre-defined
[02:38:06.559]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:06.559]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:06.560]    __dp=0x00000000
[02:38:06.560]    __ap=0x00000000
[02:38:06.560]    __traceout=0x00000000      (Trace Disabled)
[02:38:06.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:06.560]    __FlashAddr=0x00000000
[02:38:06.560]    __FlashLen=0x00000000
[02:38:06.560]    __FlashArg=0x00000000
[02:38:06.560]    __FlashOp=0x00000000
[02:38:06.560]    __Result=0x00000000
[02:38:06.561]  </debugvars>
[02:38:06.561]  
[02:38:06.561]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:38:06.561]    <block atomic="false" info="">
[02:38:06.561]      __var deviceID = 0;
[02:38:06.561]        // -> [deviceID <= 0x00000000]
[02:38:06.561]      __var version = 0;
[02:38:06.561]        // -> [version <= 0x00000000]
[02:38:06.561]      __var partNum = 0;
[02:38:06.561]        // -> [partNum <= 0x00000000]
[02:38:06.562]      __var manuf = 0;
[02:38:06.562]        // -> [manuf <= 0x00000000]
[02:38:06.562]      __var isMSPM0G1X0X_G3X0X = 0;
[02:38:06.562]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:38:06.562]      __var isProduction = 0;
[02:38:06.562]        // -> [isProduction <= 0x00000000]
[02:38:06.562]      __var continueId = 0;
[02:38:06.562]        // -> [continueId <= 0x00000000]
[02:38:06.563]      deviceID =   Read32(0x41C40004);
[02:38:06.569]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:38:06.569]        // -> [deviceID <= 0x2BB8802F]
[02:38:06.569]      version = deviceID >> 28;
[02:38:06.569]        // -> [version <= 0x00000002]
[02:38:06.569]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:38:06.569]        // -> [partNum <= 0x0000BB88]
[02:38:06.569]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:38:06.570]        // -> [manuf <= 0x00000017]
[02:38:06.570]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:38:06.570]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:38:06.570]      isProduction = (version > 0);
[02:38:06.570]        // -> [isProduction <= 0x00000001]
[02:38:06.570]    </block>
[02:38:06.570]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:38:06.570]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:38:06.570]        // =>  FALSE
[02:38:06.570]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:38:06.571]    </control>
[02:38:06.571]    <control if="continueId == 4" while="" timeout="0" info="">
[02:38:06.571]      // if-block "continueId == 4"
[02:38:06.571]        // =>  FALSE
[02:38:06.571]      // skip if-block "continueId == 4"
[02:38:06.572]    </control>
[02:38:06.572]    <control if="!isProduction" while="" timeout="0" info="">
[02:38:06.572]      // if-block "!isProduction"
[02:38:06.572]        // =>  FALSE
[02:38:06.572]      // skip if-block "!isProduction"
[02:38:06.572]    </control>
[02:38:06.572]  </sequence>
[02:38:06.572]  
[02:38:42.436]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:38:42.436]  
[02:38:42.444]  <debugvars>
[02:38:42.444]    // Pre-defined
[02:38:42.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:42.444]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:42.444]    __dp=0x00000000
[02:38:42.444]    __ap=0x00000000
[02:38:42.444]    __traceout=0x00000000      (Trace Disabled)
[02:38:42.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:42.444]    __FlashAddr=0x00000000
[02:38:42.444]    __FlashLen=0x00000000
[02:38:42.445]    __FlashArg=0x00000000
[02:38:42.445]    __FlashOp=0x00000000
[02:38:42.445]    __Result=0x00000000
[02:38:42.445]  </debugvars>
[02:38:42.445]  
[02:38:42.445]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:38:42.446]    <block atomic="false" info="">
[02:38:42.446]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:38:42.446]        // -> [isSWJ <= 0x00000001]
[02:38:42.446]      __var hasDormant = __protocol & 0x00020000;
[02:38:42.446]        // -> [hasDormant <= 0x00000000]
[02:38:42.446]      __var protType   = __protocol & 0x0000FFFF;
[02:38:42.446]        // -> [protType <= 0x00000002]
[02:38:42.446]    </block>
[02:38:42.446]    <control if="protType == 1" while="" timeout="0" info="">
[02:38:42.446]      // if-block "protType == 1"
[02:38:42.446]        // =>  FALSE
[02:38:42.447]      // skip if-block "protType == 1"
[02:38:42.447]    </control>
[02:38:42.447]    <control if="protType == 2" while="" timeout="0" info="">
[02:38:42.447]      // if-block "protType == 2"
[02:38:42.447]        // =>  TRUE
[02:38:42.447]      <control if="isSWJ" while="" timeout="0" info="">
[02:38:42.447]        // if-block "isSWJ"
[02:38:42.447]          // =>  TRUE
[02:38:42.447]        <control if="hasDormant" while="" timeout="0" info="">
[02:38:42.447]          // if-block "hasDormant"
[02:38:42.448]            // =>  FALSE
[02:38:42.448]          // skip if-block "hasDormant"
[02:38:42.448]        </control>
[02:38:42.448]        <control if="!hasDormant" while="" timeout="0" info="">
[02:38:42.448]          // if-block "!hasDormant"
[02:38:42.448]            // =>  TRUE
[02:38:42.448]          <block atomic="false" info="">
[02:38:42.448]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:38:42.450]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:42.450]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:38:42.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:38:42.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:38:42.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:42.453]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:38:42.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:38:42.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:38:42.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:42.456]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:38:42.459]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:38:42.459]          </block>
[02:38:42.459]          // end if-block "!hasDormant"
[02:38:42.459]        </control>
[02:38:42.459]        // end if-block "isSWJ"
[02:38:42.459]      </control>
[02:38:42.459]      <control if="!isSWJ" while="" timeout="0" info="">
[02:38:42.459]        // if-block "!isSWJ"
[02:38:42.460]          // =>  FALSE
[02:38:42.460]        // skip if-block "!isSWJ"
[02:38:42.460]      </control>
[02:38:42.460]      <block atomic="false" info="">
[02:38:42.460]        ReadDP(0x0);
[02:38:42.461]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:38:42.461]      </block>
[02:38:42.462]      // end if-block "protType == 2"
[02:38:42.462]    </control>
[02:38:42.462]  </sequence>
[02:38:42.462]  
[02:38:42.465]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:38:42.465]  
[02:38:42.465]  <debugvars>
[02:38:42.465]    // Pre-defined
[02:38:42.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:42.465]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:42.465]    __dp=0x00000000
[02:38:42.466]    __ap=0x00000000
[02:38:42.466]    __traceout=0x00000000      (Trace Disabled)
[02:38:42.466]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:42.466]    __FlashAddr=0x00000000
[02:38:42.466]    __FlashLen=0x00000000
[02:38:42.466]    __FlashArg=0x00000000
[02:38:42.466]    __FlashOp=0x00000000
[02:38:42.466]    __Result=0x00000000
[02:38:42.466]  </debugvars>
[02:38:42.466]  
[02:38:42.466]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:38:42.466]    <block atomic="false" info="">
[02:38:42.466]      __var SW_DP_ABORT       = 0x0;
[02:38:42.467]        // -> [SW_DP_ABORT <= 0x00000000]
[02:38:42.467]      __var DP_CTRL_STAT      = 0x4;
[02:38:42.467]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:38:42.467]      __var DP_SELECT         = 0x8;
[02:38:42.467]        // -> [DP_SELECT <= 0x00000008]
[02:38:42.467]      __var powered_down      = 0;
[02:38:42.467]        // -> [powered_down <= 0x00000000]
[02:38:42.467]      WriteDP(DP_SELECT, 0x00000000);
[02:38:42.469]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:38:42.469]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:38:42.472]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:38:42.472]        // -> [powered_down <= 0x00000001]
[02:38:42.472]    </block>
[02:38:42.472]    <control if="powered_down" while="" timeout="0" info="">
[02:38:42.472]      // if-block "powered_down"
[02:38:42.473]        // =>  TRUE
[02:38:42.473]      <block atomic="false" info="">
[02:38:42.473]        Message(0, "Debug/System power-up request sent");
[02:38:42.476]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:38:42.477]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:38:42.477]      </block>
[02:38:42.478]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:38:42.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:38:42.479]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:38:42.479]        // while-condition  =>  FALSE
[02:38:42.479]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:38:42.479]      </control>
[02:38:42.479]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:38:42.479]        // if-block "(__protocol & 0xFFFF) == 1"
[02:38:42.480]          // =>  FALSE
[02:38:42.480]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:38:42.480]      </control>
[02:38:42.480]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:38:42.480]        // if-block "(__protocol & 0xFFFF) == 2"
[02:38:42.480]          // =>  TRUE
[02:38:42.480]        <block atomic="false" info="">
[02:38:42.480]          Message(0, "executing SWD power up");
[02:38:42.482]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:38:42.483]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:38:42.484]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:38:42.485]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:38:42.485]        </block>
[02:38:42.486]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:38:42.486]      </control>
[02:38:42.486]      // end if-block "powered_down"
[02:38:42.486]    </control>
[02:38:42.486]    <block atomic="false" info="">
[02:38:42.486]      __var DEBUG_PORT_VAL    = 0;
[02:38:42.486]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:38:42.486]      __var ACCESS_POINT_VAL  = 0;
[02:38:42.486]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:38:42.487]      __ap = 1; 
[02:38:42.487]        // -> [__ap <= 0x00000001]
[02:38:42.487]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:38:42.490]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:38:42.490]      __ap = 4;
[02:38:42.490]        // -> [__ap <= 0x00000004]
[02:38:42.491]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:38:42.494]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:38:42.494]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:38:42.494]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:38:42.496]    </block>
[02:38:42.496]    <block atomic="false" info="">
[02:38:42.497]      __var nReset = 0x80;
[02:38:42.497]        // -> [nReset <= 0x00000080]
[02:38:42.497]      __var canReadPins = 0;
[02:38:42.497]        // -> [canReadPins <= 0x00000000]
[02:38:42.497]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:38:42.498]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:38:42.498]        // -> [canReadPins <= 0x00000001]
[02:38:42.498]    </block>
[02:38:42.498]    <control if="" while="1" timeout="200" info="">
[02:38:42.499]      // while "1"  (timeout="200")
[02:38:42.499]      // while-condition  =>  TRUE
[02:38:42.499]      // while "1"  (timeout="200")
[02:38:42.499]      // while-condition  =>  TRUE
[02:38:42.499]      // while "1"  (timeout="200")
[02:38:42.499]      // while-condition  =>  TRUE
[02:38:42.499]      // while "1"  (timeout="200")
[02:38:42.499]      // while-condition  =>  TRUE
[02:38:42.499]      // while "1"  (timeout="200")
[02:38:42.499]      // while-condition  =>  TRUE
[02:38:42.499]      // while "1"  (timeout="200")
[02:38:42.500]      // while-condition  =>  TRUE
[02:38:42.500]      // while "1"  (timeout="200")
[02:38:42.500]      // while-condition  =>  TRUE
[02:38:42.500]      // while "1"  (timeout="200")
[02:38:42.500]      // while-condition  =>  TRUE
[02:38:42.500]      // while "1"  (timeout="200")
[02:38:42.500]      // while-condition  =>  TRUE
[02:38:42.500]      // while "1"  (timeout="200")
[02:38:42.500]      // while-condition  =>  TRUE
[02:38:42.500]      // while "1"  (timeout="200")
[02:38:42.500]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.501]      // while "1"  (timeout="200")
[02:38:42.501]      // while-condition  =>  TRUE
[02:38:42.503]      // while "1"  (timeout="200")
[02:38:42.503]      // while  =>  TIMEOUT
[02:38:42.503]      // end while "1"
[02:38:42.503]    </control>
[02:38:42.503]    <control if="canReadPins" while="" timeout="0" info="">
[02:38:42.503]      // if-block "canReadPins"
[02:38:42.503]        // =>  TRUE
[02:38:42.503]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:38:42.503]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:38:42.505]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:38:42.505]        // while-condition  =>  FALSE
[02:38:42.505]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:38:42.505]      </control>
[02:38:42.505]      // end if-block "canReadPins"
[02:38:42.505]    </control>
[02:38:42.505]    <control if="!canReadPins" while="" timeout="0" info="">
[02:38:42.506]      // if-block "!canReadPins"
[02:38:42.506]        // =>  FALSE
[02:38:42.506]      // skip if-block "!canReadPins"
[02:38:42.506]    </control>
[02:38:42.506]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:38:42.506]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:38:42.506]        // =>  TRUE
[02:38:42.506]      <block atomic="false" info="">
[02:38:42.506]        WriteAP(0x00, 0x190008);
[02:38:42.508]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:38:42.508]        WriteAP(0xF0, 0x01);
[02:38:42.512]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:38:42.512]      </block>
[02:38:42.512]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:38:42.512]    </control>
[02:38:42.512]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:38:42.512]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:38:42.512]        // =>  FALSE
[02:38:42.512]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:38:42.512]    </control>
[02:38:42.512]    <block atomic="false" info="">
[02:38:42.512]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:38:42.516]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:38:42.516]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:38:42.516]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:38:42.519]      __ap = 0; //lets make sure we reset the access point selection
[02:38:42.519]        // -> [__ap <= 0x00000000]
[02:38:42.519]    </block>
[02:38:42.519]  </sequence>
[02:38:42.519]  
[02:38:42.542]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:38:42.542]  
[02:38:42.542]  <debugvars>
[02:38:42.542]    // Pre-defined
[02:38:42.543]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:42.543]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:42.543]    __dp=0x00000000
[02:38:42.543]    __ap=0x00000000
[02:38:42.543]    __traceout=0x00000000      (Trace Disabled)
[02:38:42.543]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:42.543]    __FlashAddr=0x00000000
[02:38:42.543]    __FlashLen=0x00000000
[02:38:42.543]    __FlashArg=0x00000000
[02:38:42.543]    __FlashOp=0x00000000
[02:38:42.543]    __Result=0x00000000
[02:38:42.543]  </debugvars>
[02:38:42.544]  
[02:38:42.544]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:38:42.544]    <block atomic="false" info="">
[02:38:42.544]      __var deviceID = 0;
[02:38:42.544]        // -> [deviceID <= 0x00000000]
[02:38:42.544]      __var version = 0;
[02:38:42.544]        // -> [version <= 0x00000000]
[02:38:42.544]      __var partNum = 0;
[02:38:42.544]        // -> [partNum <= 0x00000000]
[02:38:42.544]      __var manuf = 0;
[02:38:42.544]        // -> [manuf <= 0x00000000]
[02:38:42.545]      __var isMSPM0G1X0X_G3X0X = 0;
[02:38:42.545]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:38:42.545]      __var isProduction = 0;
[02:38:42.545]        // -> [isProduction <= 0x00000000]
[02:38:42.545]      __var continueId = 0;
[02:38:42.545]        // -> [continueId <= 0x00000000]
[02:38:42.545]      deviceID =   Read32(0x41C40004);
[02:38:42.550]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:38:42.551]        // -> [deviceID <= 0x2BB8802F]
[02:38:42.551]      version = deviceID >> 28;
[02:38:42.551]        // -> [version <= 0x00000002]
[02:38:42.551]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:38:42.551]        // -> [partNum <= 0x0000BB88]
[02:38:42.551]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:38:42.551]        // -> [manuf <= 0x00000017]
[02:38:42.551]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:38:42.551]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:38:42.551]      isProduction = (version > 0);
[02:38:42.551]        // -> [isProduction <= 0x00000001]
[02:38:42.551]    </block>
[02:38:42.552]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:38:42.552]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:38:42.552]        // =>  FALSE
[02:38:42.552]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:38:42.552]    </control>
[02:38:42.552]    <control if="continueId == 4" while="" timeout="0" info="">
[02:38:42.552]      // if-block "continueId == 4"
[02:38:42.552]        // =>  FALSE
[02:38:42.552]      // skip if-block "continueId == 4"
[02:38:42.552]    </control>
[02:38:42.553]    <control if="!isProduction" while="" timeout="0" info="">
[02:38:42.553]      // if-block "!isProduction"
[02:38:42.553]        // =>  FALSE
[02:38:42.553]      // skip if-block "!isProduction"
[02:38:42.553]    </control>
[02:38:42.553]  </sequence>
[02:38:42.554]  
[02:39:34.003]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:39:34.003]  
[02:39:34.011]  <debugvars>
[02:39:34.011]    // Pre-defined
[02:39:34.011]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:34.011]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:39:34.011]    __dp=0x00000000
[02:39:34.012]    __ap=0x00000000
[02:39:34.013]    __traceout=0x00000000      (Trace Disabled)
[02:39:34.013]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:34.013]    __FlashAddr=0x00000000
[02:39:34.013]    __FlashLen=0x00000000
[02:39:34.013]    __FlashArg=0x00000000
[02:39:34.013]    __FlashOp=0x00000000
[02:39:34.013]    __Result=0x00000000
[02:39:34.013]  </debugvars>
[02:39:34.013]  
[02:39:34.013]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:39:34.013]    <block atomic="false" info="">
[02:39:34.013]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:39:34.014]        // -> [isSWJ <= 0x00000001]
[02:39:34.014]      __var hasDormant = __protocol & 0x00020000;
[02:39:34.014]        // -> [hasDormant <= 0x00000000]
[02:39:34.014]      __var protType   = __protocol & 0x0000FFFF;
[02:39:34.014]        // -> [protType <= 0x00000002]
[02:39:34.014]    </block>
[02:39:34.014]    <control if="protType == 1" while="" timeout="0" info="">
[02:39:34.014]      // if-block "protType == 1"
[02:39:34.014]        // =>  FALSE
[02:39:34.014]      // skip if-block "protType == 1"
[02:39:34.014]    </control>
[02:39:34.014]    <control if="protType == 2" while="" timeout="0" info="">
[02:39:34.014]      // if-block "protType == 2"
[02:39:34.014]        // =>  TRUE
[02:39:34.015]      <control if="isSWJ" while="" timeout="0" info="">
[02:39:34.015]        // if-block "isSWJ"
[02:39:34.015]          // =>  TRUE
[02:39:34.015]        <control if="hasDormant" while="" timeout="0" info="">
[02:39:34.015]          // if-block "hasDormant"
[02:39:34.016]            // =>  FALSE
[02:39:34.016]          // skip if-block "hasDormant"
[02:39:34.016]        </control>
[02:39:34.016]        <control if="!hasDormant" while="" timeout="0" info="">
[02:39:34.016]          // if-block "!hasDormant"
[02:39:34.016]            // =>  TRUE
[02:39:34.017]          <block atomic="false" info="">
[02:39:34.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:39:34.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:34.018]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:39:34.020]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:39:34.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:39:34.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:34.022]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:39:34.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:39:34.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:39:34.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:34.024]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:39:34.025]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:39:34.025]          </block>
[02:39:34.025]          // end if-block "!hasDormant"
[02:39:34.026]        </control>
[02:39:34.026]        // end if-block "isSWJ"
[02:39:34.026]      </control>
[02:39:34.026]      <control if="!isSWJ" while="" timeout="0" info="">
[02:39:34.026]        // if-block "!isSWJ"
[02:39:34.026]          // =>  FALSE
[02:39:34.026]        // skip if-block "!isSWJ"
[02:39:34.026]      </control>
[02:39:34.027]      <block atomic="false" info="">
[02:39:34.027]        ReadDP(0x0);
[02:39:34.029]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:39:34.029]      </block>
[02:39:34.029]      // end if-block "protType == 2"
[02:39:34.029]    </control>
[02:39:34.029]  </sequence>
[02:39:34.029]  
[02:39:36.690]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:39:36.690]  
[02:39:36.698]  <debugvars>
[02:39:36.698]    // Pre-defined
[02:39:36.698]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:36.698]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:36.698]    __dp=0x00000000
[02:39:36.698]    __ap=0x00000000
[02:39:36.698]    __traceout=0x00000000      (Trace Disabled)
[02:39:36.698]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:36.698]    __FlashAddr=0x00000000
[02:39:36.698]    __FlashLen=0x00000000
[02:39:36.699]    __FlashArg=0x00000000
[02:39:36.699]    __FlashOp=0x00000000
[02:39:36.699]    __Result=0x00000000
[02:39:36.699]  </debugvars>
[02:39:36.699]  
[02:39:36.699]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:39:36.699]    <block atomic="false" info="">
[02:39:36.699]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:39:36.699]        // -> [isSWJ <= 0x00000001]
[02:39:36.699]      __var hasDormant = __protocol & 0x00020000;
[02:39:36.699]        // -> [hasDormant <= 0x00000000]
[02:39:36.699]      __var protType   = __protocol & 0x0000FFFF;
[02:39:36.700]        // -> [protType <= 0x00000002]
[02:39:36.700]    </block>
[02:39:36.700]    <control if="protType == 1" while="" timeout="0" info="">
[02:39:36.700]      // if-block "protType == 1"
[02:39:36.700]        // =>  FALSE
[02:39:36.700]      // skip if-block "protType == 1"
[02:39:36.700]    </control>
[02:39:36.701]    <control if="protType == 2" while="" timeout="0" info="">
[02:39:36.701]      // if-block "protType == 2"
[02:39:36.701]        // =>  TRUE
[02:39:36.701]      <control if="isSWJ" while="" timeout="0" info="">
[02:39:36.701]        // if-block "isSWJ"
[02:39:36.701]          // =>  TRUE
[02:39:36.701]        <control if="hasDormant" while="" timeout="0" info="">
[02:39:36.701]          // if-block "hasDormant"
[02:39:36.701]            // =>  FALSE
[02:39:36.701]          // skip if-block "hasDormant"
[02:39:36.701]        </control>
[02:39:36.702]        <control if="!hasDormant" while="" timeout="0" info="">
[02:39:36.702]          // if-block "!hasDormant"
[02:39:36.702]            // =>  TRUE
[02:39:36.702]          <block atomic="false" info="">
[02:39:36.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:39:36.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:36.706]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:39:36.707]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:39:36.707]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:39:36.709]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:36.709]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:39:36.711]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:39:36.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:39:36.712]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:36.713]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:39:36.714]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:39:36.714]          </block>
[02:39:36.714]          // end if-block "!hasDormant"
[02:39:36.714]        </control>
[02:39:36.714]        // end if-block "isSWJ"
[02:39:36.714]      </control>
[02:39:36.714]      <control if="!isSWJ" while="" timeout="0" info="">
[02:39:36.715]        // if-block "!isSWJ"
[02:39:36.715]          // =>  FALSE
[02:39:36.715]        // skip if-block "!isSWJ"
[02:39:36.715]      </control>
[02:39:36.715]      <block atomic="false" info="">
[02:39:36.715]        ReadDP(0x0);
[02:39:36.716]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:39:36.717]      </block>
[02:39:36.717]      // end if-block "protType == 2"
[02:39:36.717]    </control>
[02:39:36.717]  </sequence>
[02:39:36.717]  
[02:39:36.719]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:39:36.719]  
[02:39:36.719]  <debugvars>
[02:39:36.719]    // Pre-defined
[02:39:36.720]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:36.720]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:36.720]    __dp=0x00000000
[02:39:36.720]    __ap=0x00000000
[02:39:36.720]    __traceout=0x00000000      (Trace Disabled)
[02:39:36.720]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:36.720]    __FlashAddr=0x00000000
[02:39:36.720]    __FlashLen=0x00000000
[02:39:36.721]    __FlashArg=0x00000000
[02:39:36.721]    __FlashOp=0x00000000
[02:39:36.721]    __Result=0x00000000
[02:39:36.721]  </debugvars>
[02:39:36.721]  
[02:39:36.721]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:39:36.721]    <block atomic="false" info="">
[02:39:36.721]      __var SW_DP_ABORT       = 0x0;
[02:39:36.721]        // -> [SW_DP_ABORT <= 0x00000000]
[02:39:36.721]      __var DP_CTRL_STAT      = 0x4;
[02:39:36.721]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:39:36.722]      __var DP_SELECT         = 0x8;
[02:39:36.722]        // -> [DP_SELECT <= 0x00000008]
[02:39:36.722]      __var powered_down      = 0;
[02:39:36.722]        // -> [powered_down <= 0x00000000]
[02:39:36.722]      WriteDP(DP_SELECT, 0x00000000);
[02:39:36.723]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:39:36.724]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:39:36.725]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:39:36.725]        // -> [powered_down <= 0x00000001]
[02:39:36.725]    </block>
[02:39:36.725]    <control if="powered_down" while="" timeout="0" info="">
[02:39:36.725]      // if-block "powered_down"
[02:39:36.725]        // =>  TRUE
[02:39:36.725]      <block atomic="false" info="">
[02:39:36.726]        Message(0, "Debug/System power-up request sent");
[02:39:36.728]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:39:36.729]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:39:36.729]      </block>
[02:39:36.729]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:39:36.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:39:36.732]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:39:36.732]        // while-condition  =>  FALSE
[02:39:36.732]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:39:36.733]      </control>
[02:39:36.733]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:39:36.733]        // if-block "(__protocol & 0xFFFF) == 1"
[02:39:36.733]          // =>  FALSE
[02:39:36.733]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:39:36.733]      </control>
[02:39:36.733]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:39:36.733]        // if-block "(__protocol & 0xFFFF) == 2"
[02:39:36.733]          // =>  TRUE
[02:39:36.733]        <block atomic="false" info="">
[02:39:36.733]          Message(0, "executing SWD power up");
[02:39:36.736]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:39:36.738]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:39:36.738]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:39:36.739]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:39:36.739]        </block>
[02:39:36.740]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:39:36.740]      </control>
[02:39:36.740]      // end if-block "powered_down"
[02:39:36.741]    </control>
[02:39:36.741]    <block atomic="false" info="">
[02:39:36.741]      __var DEBUG_PORT_VAL    = 0;
[02:39:36.741]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:39:36.741]      __var ACCESS_POINT_VAL  = 0;
[02:39:36.741]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:39:36.741]      __ap = 1; 
[02:39:36.741]        // -> [__ap <= 0x00000001]
[02:39:36.742]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:39:36.746]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:39:36.746]      __ap = 4;
[02:39:36.746]        // -> [__ap <= 0x00000004]
[02:39:36.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:39:36.749]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:39:36.749]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:39:36.750]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:39:36.752]    </block>
[02:39:36.752]    <block atomic="false" info="">
[02:39:36.752]      __var nReset = 0x80;
[02:39:36.752]        // -> [nReset <= 0x00000080]
[02:39:36.752]      __var canReadPins = 0;
[02:39:36.752]        // -> [canReadPins <= 0x00000000]
[02:39:36.753]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:39:36.754]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:39:36.754]        // -> [canReadPins <= 0x00000001]
[02:39:36.754]    </block>
[02:39:36.754]    <control if="" while="1" timeout="200" info="">
[02:39:36.754]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.755]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.755]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.755]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.755]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.755]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.755]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.755]      // while "1"  (timeout="200")
[02:39:36.755]      // while-condition  =>  TRUE
[02:39:36.756]      // while "1"  (timeout="200")
[02:39:36.756]      // while-condition  =>  TRUE
[02:39:36.756]      // while "1"  (timeout="200")
[02:39:36.756]      // while-condition  =>  TRUE
[02:39:36.756]      // while "1"  (timeout="200")
[02:39:36.756]      // while-condition  =>  TRUE
[02:39:36.757]      // while "1"  (timeout="200")
[02:39:36.757]      // while-condition  =>  TRUE
[02:39:36.757]      // while "1"  (timeout="200")
[02:39:36.757]      // while-condition  =>  TRUE
[02:39:36.757]      // while "1"  (timeout="200")
[02:39:36.757]      // while-condition  =>  TRUE
[02:39:36.757]      // while "1"  (timeout="200")
[02:39:36.757]      // while-condition  =>  TRUE
[02:39:36.757]      // while "1"  (timeout="200")
[02:39:36.757]      // while-condition  =>  TRUE
[02:39:36.758]      // while "1"  (timeout="200")
[02:39:36.758]      // while-condition  =>  TRUE
[02:39:36.758]      // while "1"  (timeout="200")
[02:39:36.758]      // while-condition  =>  TRUE
[02:39:36.758]      // while "1"  (timeout="200")
[02:39:36.758]      // while-condition  =>  TRUE
[02:39:36.758]      // while "1"  (timeout="200")
[02:39:36.759]      // while-condition  =>  TRUE
[02:39:36.759]      // while "1"  (timeout="200")
[02:39:36.759]      // while-condition  =>  TRUE
[02:39:36.759]      // while "1"  (timeout="200")
[02:39:36.759]      // while-condition  =>  TRUE
[02:39:36.759]      // while "1"  (timeout="200")
[02:39:36.759]      // while-condition  =>  TRUE
[02:39:36.759]      // while "1"  (timeout="200")
[02:39:36.759]      // while-condition  =>  TRUE
[02:39:36.759]      // while "1"  (timeout="200")
[02:39:36.760]      // while-condition  =>  TRUE
[02:39:36.760]      // while "1"  (timeout="200")
[02:39:36.760]      // while-condition  =>  TRUE
[02:39:36.760]      // while "1"  (timeout="200")
[02:39:36.760]      // while-condition  =>  TRUE
[02:39:36.760]      // while "1"  (timeout="200")
[02:39:36.760]      // while-condition  =>  TRUE
[02:39:36.760]      // while "1"  (timeout="200")
[02:39:36.760]      // while-condition  =>  TRUE
[02:39:36.760]      // while "1"  (timeout="200")
[02:39:36.760]      // while-condition  =>  TRUE
[02:39:36.760]      // while "1"  (timeout="200")
[02:39:36.761]      // while-condition  =>  TRUE
[02:39:36.761]      // while "1"  (timeout="200")
[02:39:36.761]      // while-condition  =>  TRUE
[02:39:36.761]      // while "1"  (timeout="200")
[02:39:36.761]      // while-condition  =>  TRUE
[02:39:36.761]      // while "1"  (timeout="200")
[02:39:36.761]      // while-condition  =>  TRUE
[02:39:36.761]      // while "1"  (timeout="200")
[02:39:36.761]      // while-condition  =>  TRUE
[02:39:36.761]      // while "1"  (timeout="200")
[02:39:36.761]      // while-condition  =>  TRUE
[02:39:36.762]      // while "1"  (timeout="200")
[02:39:36.762]      // while-condition  =>  TRUE
[02:39:36.762]      // while "1"  (timeout="200")
[02:39:36.762]      // while-condition  =>  TRUE
[02:39:36.762]      // while "1"  (timeout="200")
[02:39:36.762]      // while-condition  =>  TRUE
[02:39:36.762]      // while "1"  (timeout="200")
[02:39:36.762]      // while-condition  =>  TRUE
[02:39:36.762]      // while "1"  (timeout="200")
[02:39:36.762]      // while-condition  =>  TRUE
[02:39:36.762]      // while "1"  (timeout="200")
[02:39:36.762]      // while-condition  =>  TRUE
[02:39:36.762]      // while "1"  (timeout="200")
[02:39:36.762]      // while-condition  =>  TRUE
[02:39:36.763]      // while "1"  (timeout="200")
[02:39:36.763]      // while-condition  =>  TRUE
[02:39:36.763]      // while "1"  (timeout="200")
[02:39:36.763]      // while-condition  =>  TRUE
[02:39:36.763]      // while "1"  (timeout="200")
[02:39:36.763]      // while-condition  =>  TRUE
[02:39:36.763]      // while "1"  (timeout="200")
[02:39:36.764]      // while-condition  =>  TRUE
[02:39:36.764]      // while "1"  (timeout="200")
[02:39:36.764]      // while-condition  =>  TRUE
[02:39:36.764]      // while "1"  (timeout="200")
[02:39:36.764]      // while-condition  =>  TRUE
[02:39:36.764]      // while "1"  (timeout="200")
[02:39:36.764]      // while-condition  =>  TRUE
[02:39:36.764]      // while "1"  (timeout="200")
[02:39:36.764]      // while-condition  =>  TRUE
[02:39:36.764]      // while "1"  (timeout="200")
[02:39:36.764]      // while-condition  =>  TRUE
[02:39:36.764]      // while "1"  (timeout="200")
[02:39:36.764]      // while-condition  =>  TRUE
[02:39:36.765]      // while "1"  (timeout="200")
[02:39:36.765]      // while-condition  =>  TRUE
[02:39:36.765]      // while "1"  (timeout="200")
[02:39:36.765]      // while-condition  =>  TRUE
[02:39:36.765]      // while "1"  (timeout="200")
[02:39:36.765]      // while-condition  =>  TRUE
[02:39:36.765]      // while "1"  (timeout="200")
[02:39:36.766]      // while-condition  =>  TRUE
[02:39:36.766]      // while "1"  (timeout="200")
[02:39:36.766]      // while-condition  =>  TRUE
[02:39:36.766]      // while "1"  (timeout="200")
[02:39:36.766]      // while-condition  =>  TRUE
[02:39:36.766]      // while "1"  (timeout="200")
[02:39:36.766]      // while-condition  =>  TRUE
[02:39:36.766]      // while "1"  (timeout="200")
[02:39:36.767]      // while-condition  =>  TRUE
[02:39:36.767]      // while "1"  (timeout="200")
[02:39:36.767]      // while-condition  =>  TRUE
[02:39:36.767]      // while "1"  (timeout="200")
[02:39:36.767]      // while-condition  =>  TRUE
[02:39:36.767]      // while "1"  (timeout="200")
[02:39:36.767]      // while-condition  =>  TRUE
[02:39:36.767]      // while "1"  (timeout="200")
[02:39:36.767]      // while-condition  =>  TRUE
[02:39:36.768]      // while "1"  (timeout="200")
[02:39:36.768]      // while-condition  =>  TRUE
[02:39:36.768]      // while "1"  (timeout="200")
[02:39:36.768]      // while-condition  =>  TRUE
[02:39:36.768]      // while "1"  (timeout="200")
[02:39:36.769]      // while-condition  =>  TRUE
[02:39:36.769]      // while "1"  (timeout="200")
[02:39:36.769]      // while  =>  TIMEOUT
[02:39:36.769]      // end while "1"
[02:39:36.769]    </control>
[02:39:36.769]    <control if="canReadPins" while="" timeout="0" info="">
[02:39:36.769]      // if-block "canReadPins"
[02:39:36.769]        // =>  TRUE
[02:39:36.769]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:39:36.769]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:39:36.771]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:39:36.771]        // while-condition  =>  FALSE
[02:39:36.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:39:36.771]      </control>
[02:39:36.771]      // end if-block "canReadPins"
[02:39:36.771]    </control>
[02:39:36.771]    <control if="!canReadPins" while="" timeout="0" info="">
[02:39:36.772]      // if-block "!canReadPins"
[02:39:36.772]        // =>  FALSE
[02:39:36.772]      // skip if-block "!canReadPins"
[02:39:36.772]    </control>
[02:39:36.772]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:39:36.772]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:39:36.772]        // =>  TRUE
[02:39:36.772]      <block atomic="false" info="">
[02:39:36.772]        WriteAP(0x00, 0x190008);
[02:39:36.773]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:39:36.774]        WriteAP(0xF0, 0x01);
[02:39:36.777]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:39:36.777]      </block>
[02:39:36.777]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:39:36.777]    </control>
[02:39:36.777]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:39:36.777]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:39:36.777]        // =>  FALSE
[02:39:36.777]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:39:36.778]    </control>
[02:39:36.778]    <block atomic="false" info="">
[02:39:36.778]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:39:36.782]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:39:36.782]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:39:36.782]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:39:36.785]      __ap = 0; //lets make sure we reset the access point selection
[02:39:36.785]        // -> [__ap <= 0x00000000]
[02:39:36.785]    </block>
[02:39:36.785]  </sequence>
[02:39:36.785]  
[02:39:36.809]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:39:36.809]  
[02:39:36.809]  <debugvars>
[02:39:36.809]    // Pre-defined
[02:39:36.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:36.810]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:36.810]    __dp=0x00000000
[02:39:36.810]    __ap=0x00000000
[02:39:36.810]    __traceout=0x00000000      (Trace Disabled)
[02:39:36.811]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:36.811]    __FlashAddr=0x00000000
[02:39:36.811]    __FlashLen=0x00000000
[02:39:36.811]    __FlashArg=0x00000000
[02:39:36.811]    __FlashOp=0x00000000
[02:39:36.811]    __Result=0x00000000
[02:39:36.811]  </debugvars>
[02:39:36.811]  
[02:39:36.811]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:39:36.811]    <block atomic="false" info="">
[02:39:36.811]      __var deviceID = 0;
[02:39:36.811]        // -> [deviceID <= 0x00000000]
[02:39:36.811]      __var version = 0;
[02:39:36.811]        // -> [version <= 0x00000000]
[02:39:36.812]      __var partNum = 0;
[02:39:36.812]        // -> [partNum <= 0x00000000]
[02:39:36.812]      __var manuf = 0;
[02:39:36.812]        // -> [manuf <= 0x00000000]
[02:39:36.812]      __var isMSPM0G1X0X_G3X0X = 0;
[02:39:36.812]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:39:36.812]      __var isProduction = 0;
[02:39:36.812]        // -> [isProduction <= 0x00000000]
[02:39:36.812]      __var continueId = 0;
[02:39:36.812]        // -> [continueId <= 0x00000000]
[02:39:36.812]      deviceID =   Read32(0x41C40004);
[02:39:36.817]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:39:36.817]        // -> [deviceID <= 0x2BB8802F]
[02:39:36.817]      version = deviceID >> 28;
[02:39:36.817]        // -> [version <= 0x00000002]
[02:39:36.817]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:39:36.817]        // -> [partNum <= 0x0000BB88]
[02:39:36.818]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:39:36.818]        // -> [manuf <= 0x00000017]
[02:39:36.818]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:39:36.818]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:39:36.818]      isProduction = (version > 0);
[02:39:36.818]        // -> [isProduction <= 0x00000001]
[02:39:36.818]    </block>
[02:39:36.818]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:39:36.819]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:39:36.819]        // =>  FALSE
[02:39:36.819]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:39:36.819]    </control>
[02:39:36.819]    <control if="continueId == 4" while="" timeout="0" info="">
[02:39:36.819]      // if-block "continueId == 4"
[02:39:36.819]        // =>  FALSE
[02:39:36.819]      // skip if-block "continueId == 4"
[02:39:36.819]    </control>
[02:39:36.819]    <control if="!isProduction" while="" timeout="0" info="">
[02:39:36.819]      // if-block "!isProduction"
[02:39:36.820]        // =>  FALSE
[02:39:36.820]      // skip if-block "!isProduction"
[02:39:36.820]    </control>
[02:39:36.820]  </sequence>
[02:39:36.820]  
[02:41:17.410]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:41:17.410]  
[02:41:17.410]  <debugvars>
[02:41:17.411]    // Pre-defined
[02:41:17.411]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:17.411]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:17.411]    __dp=0x00000000
[02:41:17.411]    __ap=0x00000000
[02:41:17.411]    __traceout=0x00000000      (Trace Disabled)
[02:41:17.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:17.411]    __FlashAddr=0x00000000
[02:41:17.411]    __FlashLen=0x00000000
[02:41:17.411]    __FlashArg=0x00000000
[02:41:17.411]    __FlashOp=0x00000000
[02:41:17.411]    __Result=0x00000000
[02:41:17.411]  </debugvars>
[02:41:17.412]  
[02:41:17.412]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:41:17.412]    <block atomic="false" info="">
[02:41:17.412]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:41:17.412]        // -> [isSWJ <= 0x00000001]
[02:41:17.412]      __var hasDormant = __protocol & 0x00020000;
[02:41:17.412]        // -> [hasDormant <= 0x00000000]
[02:41:17.412]      __var protType   = __protocol & 0x0000FFFF;
[02:41:17.412]        // -> [protType <= 0x00000002]
[02:41:17.412]    </block>
[02:41:17.412]    <control if="protType == 1" while="" timeout="0" info="">
[02:41:17.412]      // if-block "protType == 1"
[02:41:17.412]        // =>  FALSE
[02:41:17.412]      // skip if-block "protType == 1"
[02:41:17.414]    </control>
[02:41:17.414]    <control if="protType == 2" while="" timeout="0" info="">
[02:41:17.414]      // if-block "protType == 2"
[02:41:17.414]        // =>  TRUE
[02:41:17.414]      <control if="isSWJ" while="" timeout="0" info="">
[02:41:17.414]        // if-block "isSWJ"
[02:41:17.414]          // =>  TRUE
[02:41:17.414]        <control if="hasDormant" while="" timeout="0" info="">
[02:41:17.414]          // if-block "hasDormant"
[02:41:17.414]            // =>  FALSE
[02:41:17.414]          // skip if-block "hasDormant"
[02:41:17.414]        </control>
[02:41:17.415]        <control if="!hasDormant" while="" timeout="0" info="">
[02:41:17.415]          // if-block "!hasDormant"
[02:41:17.415]            // =>  TRUE
[02:41:17.415]          <block atomic="false" info="">
[02:41:17.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:41:17.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:17.416]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:41:17.418]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:41:17.418]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:41:17.418]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:17.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:41:17.421]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:41:17.421]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:41:17.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:17.422]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:41:17.423]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:41:17.423]          </block>
[02:41:17.423]          // end if-block "!hasDormant"
[02:41:17.424]        </control>
[02:41:17.424]        // end if-block "isSWJ"
[02:41:17.424]      </control>
[02:41:17.424]      <control if="!isSWJ" while="" timeout="0" info="">
[02:41:17.424]        // if-block "!isSWJ"
[02:41:17.424]          // =>  FALSE
[02:41:17.424]        // skip if-block "!isSWJ"
[02:41:17.424]      </control>
[02:41:17.424]      <block atomic="false" info="">
[02:41:17.424]        ReadDP(0x0);
[02:41:17.426]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:41:17.426]      </block>
[02:41:17.426]      // end if-block "protType == 2"
[02:41:17.426]    </control>
[02:41:17.426]  </sequence>
[02:41:17.426]  
[02:41:17.430]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:41:17.430]  
[02:41:17.430]  <debugvars>
[02:41:17.430]    // Pre-defined
[02:41:17.430]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:17.430]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:17.430]    __dp=0x00000000
[02:41:17.430]    __ap=0x00000000
[02:41:17.431]    __traceout=0x00000000      (Trace Disabled)
[02:41:17.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:17.431]    __FlashAddr=0x00000000
[02:41:17.431]    __FlashLen=0x00000000
[02:41:17.431]    __FlashArg=0x00000000
[02:41:17.431]    __FlashOp=0x00000000
[02:41:17.431]    __Result=0x00000000
[02:41:17.431]  </debugvars>
[02:41:17.431]  
[02:41:17.431]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:41:17.431]    <block atomic="false" info="">
[02:41:17.431]      __var SW_DP_ABORT       = 0x0;
[02:41:17.431]        // -> [SW_DP_ABORT <= 0x00000000]
[02:41:17.431]      __var DP_CTRL_STAT      = 0x4;
[02:41:17.433]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:41:17.433]      __var DP_SELECT         = 0x8;
[02:41:17.433]        // -> [DP_SELECT <= 0x00000008]
[02:41:17.433]      __var powered_down      = 0;
[02:41:17.433]        // -> [powered_down <= 0x00000000]
[02:41:17.433]      WriteDP(DP_SELECT, 0x00000000);
[02:41:17.434]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:41:17.434]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:41:17.436]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:41:17.436]        // -> [powered_down <= 0x00000001]
[02:41:17.436]    </block>
[02:41:17.436]    <control if="powered_down" while="" timeout="0" info="">
[02:41:17.436]      // if-block "powered_down"
[02:41:17.436]        // =>  TRUE
[02:41:17.436]      <block atomic="false" info="">
[02:41:17.436]        Message(0, "Debug/System power-up request sent");
[02:41:17.440]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:41:17.441]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:41:17.442]      </block>
[02:41:17.442]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:41:17.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:17.447]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:41:17.448]        // while-condition  =>  FALSE
[02:41:17.448]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:41:17.448]      </control>
[02:41:17.448]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:41:17.448]        // if-block "(__protocol & 0xFFFF) == 1"
[02:41:17.448]          // =>  FALSE
[02:41:17.449]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:41:17.449]      </control>
[02:41:17.449]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:41:17.449]        // if-block "(__protocol & 0xFFFF) == 2"
[02:41:17.449]          // =>  TRUE
[02:41:17.449]        <block atomic="false" info="">
[02:41:17.449]          Message(0, "executing SWD power up");
[02:41:17.450]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:41:17.452]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:41:17.452]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:41:17.454]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:41:17.454]        </block>
[02:41:17.454]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:41:17.454]      </control>
[02:41:17.454]      // end if-block "powered_down"
[02:41:17.454]    </control>
[02:41:17.454]    <block atomic="false" info="">
[02:41:17.454]      __var DEBUG_PORT_VAL    = 0;
[02:41:17.455]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:41:17.455]      __var ACCESS_POINT_VAL  = 0;
[02:41:17.455]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:41:17.455]      __ap = 1; 
[02:41:17.455]        // -> [__ap <= 0x00000001]
[02:41:17.455]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:41:17.458]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:41:17.458]      __ap = 4;
[02:41:17.458]        // -> [__ap <= 0x00000004]
[02:41:17.458]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:41:17.461]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:41:17.461]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:41:17.461]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:41:17.463]    </block>
[02:41:17.463]    <block atomic="false" info="">
[02:41:17.464]      __var nReset = 0x80;
[02:41:17.464]        // -> [nReset <= 0x00000080]
[02:41:17.464]      __var canReadPins = 0;
[02:41:17.464]        // -> [canReadPins <= 0x00000000]
[02:41:17.464]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:41:17.465]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:41:17.465]        // -> [canReadPins <= 0x00000001]
[02:41:17.465]    </block>
[02:41:17.465]    <control if="" while="1" timeout="200" info="">
[02:41:17.465]      // while "1"  (timeout="200")
[02:41:17.465]      // while-condition  =>  TRUE
[02:41:17.465]      // while "1"  (timeout="200")
[02:41:17.465]      // while-condition  =>  TRUE
[02:41:17.465]      // while "1"  (timeout="200")
[02:41:17.465]      // while-condition  =>  TRUE
[02:41:17.466]      // while "1"  (timeout="200")
[02:41:17.466]      // while-condition  =>  TRUE
[02:41:17.466]      // while "1"  (timeout="200")
[02:41:17.466]      // while-condition  =>  TRUE
[02:41:17.466]      // while "1"  (timeout="200")
[02:41:17.466]      // while-condition  =>  TRUE
[02:41:17.466]      // while "1"  (timeout="200")
[02:41:17.466]      // while-condition  =>  TRUE
[02:41:17.466]      // while "1"  (timeout="200")
[02:41:17.466]      // while-condition  =>  TRUE
[02:41:17.466]      // while "1"  (timeout="200")
[02:41:17.467]      // while-condition  =>  TRUE
[02:41:17.467]      // while "1"  (timeout="200")
[02:41:17.467]      // while-condition  =>  TRUE
[02:41:17.467]      // while "1"  (timeout="200")
[02:41:17.467]      // while-condition  =>  TRUE
[02:41:17.467]      // while "1"  (timeout="200")
[02:41:17.467]      // while-condition  =>  TRUE
[02:41:17.467]      // while "1"  (timeout="200")
[02:41:17.467]      // while-condition  =>  TRUE
[02:41:17.467]      // while "1"  (timeout="200")
[02:41:17.467]      // while-condition  =>  TRUE
[02:41:17.467]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.468]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.468]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.468]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.468]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.468]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.468]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.468]      // while "1"  (timeout="200")
[02:41:17.468]      // while-condition  =>  TRUE
[02:41:17.470]      // while "1"  (timeout="200")
[02:41:17.470]      // while-condition  =>  TRUE
[02:41:17.470]      // while "1"  (timeout="200")
[02:41:17.470]      // while-condition  =>  TRUE
[02:41:17.470]      // while "1"  (timeout="200")
[02:41:17.470]      // while-condition  =>  TRUE
[02:41:17.470]      // while "1"  (timeout="200")
[02:41:17.470]      // while-condition  =>  TRUE
[02:41:17.470]      // while "1"  (timeout="200")
[02:41:17.470]      // while-condition  =>  TRUE
[02:41:17.470]      // while "1"  (timeout="200")
[02:41:17.470]      // while-condition  =>  TRUE
[02:41:17.470]      // while "1"  (timeout="200")
[02:41:17.471]      // while-condition  =>  TRUE
[02:41:17.471]      // while "1"  (timeout="200")
[02:41:17.471]      // while-condition  =>  TRUE
[02:41:17.471]      // while "1"  (timeout="200")
[02:41:17.471]      // while-condition  =>  TRUE
[02:41:17.471]      // while "1"  (timeout="200")
[02:41:17.471]      // while-condition  =>  TRUE
[02:41:17.471]      // while "1"  (timeout="200")
[02:41:17.471]      // while-condition  =>  TRUE
[02:41:17.471]      // while "1"  (timeout="200")
[02:41:17.471]      // while-condition  =>  TRUE
[02:41:17.472]      // while "1"  (timeout="200")
[02:41:17.472]      // while  =>  TIMEOUT
[02:41:17.472]      // end while "1"
[02:41:17.472]    </control>
[02:41:17.472]    <control if="canReadPins" while="" timeout="0" info="">
[02:41:17.472]      // if-block "canReadPins"
[02:41:17.472]        // =>  TRUE
[02:41:17.472]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:41:17.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:41:17.475]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:41:17.475]        // while-condition  =>  FALSE
[02:41:17.475]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:41:17.475]      </control>
[02:41:17.475]      // end if-block "canReadPins"
[02:41:17.475]    </control>
[02:41:17.475]    <control if="!canReadPins" while="" timeout="0" info="">
[02:41:17.475]      // if-block "!canReadPins"
[02:41:17.475]        // =>  FALSE
[02:41:17.475]      // skip if-block "!canReadPins"
[02:41:17.476]    </control>
[02:41:17.476]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:41:17.476]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:41:17.476]        // =>  TRUE
[02:41:17.476]      <block atomic="false" info="">
[02:41:17.476]        WriteAP(0x00, 0x190008);
[02:41:17.477]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:41:17.478]        WriteAP(0xF0, 0x01);
[02:41:17.481]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:41:17.481]      </block>
[02:41:17.481]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:41:17.481]    </control>
[02:41:17.481]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:41:17.481]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:41:17.481]        // =>  FALSE
[02:41:17.481]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:41:17.482]    </control>
[02:41:17.482]    <block atomic="false" info="">
[02:41:17.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:41:17.485]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:41:17.485]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:41:17.485]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:41:17.487]      __ap = 0; //lets make sure we reset the access point selection
[02:41:17.487]        // -> [__ap <= 0x00000000]
[02:41:17.487]    </block>
[02:41:17.487]  </sequence>
[02:41:17.487]  
[02:41:17.508]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:41:17.508]  
[02:41:17.508]  <debugvars>
[02:41:17.508]    // Pre-defined
[02:41:17.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:17.509]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:17.509]    __dp=0x00000000
[02:41:17.509]    __ap=0x00000000
[02:41:17.509]    __traceout=0x00000000      (Trace Disabled)
[02:41:17.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:17.509]    __FlashAddr=0x00000000
[02:41:17.509]    __FlashLen=0x00000000
[02:41:17.509]    __FlashArg=0x00000000
[02:41:17.510]    __FlashOp=0x00000000
[02:41:17.510]    __Result=0x00000000
[02:41:17.510]  </debugvars>
[02:41:17.510]  
[02:41:17.510]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:41:17.510]    <block atomic="false" info="">
[02:41:17.510]      __var deviceID = 0;
[02:41:17.510]        // -> [deviceID <= 0x00000000]
[02:41:17.510]      __var version = 0;
[02:41:17.510]        // -> [version <= 0x00000000]
[02:41:17.510]      __var partNum = 0;
[02:41:17.511]        // -> [partNum <= 0x00000000]
[02:41:17.511]      __var manuf = 0;
[02:41:17.511]        // -> [manuf <= 0x00000000]
[02:41:17.511]      __var isMSPM0G1X0X_G3X0X = 0;
[02:41:17.511]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:41:17.511]      __var isProduction = 0;
[02:41:17.511]        // -> [isProduction <= 0x00000000]
[02:41:17.511]      __var continueId = 0;
[02:41:17.511]        // -> [continueId <= 0x00000000]
[02:41:17.511]      deviceID =   Read32(0x41C40004);
[02:41:17.516]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:41:17.516]        // -> [deviceID <= 0x2BB8802F]
[02:41:17.516]      version = deviceID >> 28;
[02:41:17.517]        // -> [version <= 0x00000002]
[02:41:17.517]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:41:17.517]        // -> [partNum <= 0x0000BB88]
[02:41:17.517]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:41:17.517]        // -> [manuf <= 0x00000017]
[02:41:17.517]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:41:17.517]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:41:17.517]      isProduction = (version > 0);
[02:41:17.517]        // -> [isProduction <= 0x00000001]
[02:41:17.517]    </block>
[02:41:17.517]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:41:17.517]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:41:17.518]        // =>  FALSE
[02:41:17.518]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:41:17.518]    </control>
[02:41:17.518]    <control if="continueId == 4" while="" timeout="0" info="">
[02:41:17.518]      // if-block "continueId == 4"
[02:41:17.518]        // =>  FALSE
[02:41:17.518]      // skip if-block "continueId == 4"
[02:41:17.518]    </control>
[02:41:17.518]    <control if="!isProduction" while="" timeout="0" info="">
[02:41:17.518]      // if-block "!isProduction"
[02:41:17.518]        // =>  FALSE
[02:41:17.518]      // skip if-block "!isProduction"
[02:41:17.519]    </control>
[02:41:17.519]  </sequence>
[02:41:17.519]  
[02:42:54.349]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:42:54.349]  
[02:42:54.359]  <debugvars>
[02:42:54.359]    // Pre-defined
[02:42:54.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:42:54.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:42:54.359]    __dp=0x00000000
[02:42:54.359]    __ap=0x00000000
[02:42:54.360]    __traceout=0x00000000      (Trace Disabled)
[02:42:54.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:42:54.360]    __FlashAddr=0x00000000
[02:42:54.360]    __FlashLen=0x00000000
[02:42:54.360]    __FlashArg=0x00000000
[02:42:54.360]    __FlashOp=0x00000000
[02:42:54.360]    __Result=0x00000000
[02:42:54.361]  </debugvars>
[02:42:54.361]  
[02:42:54.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:42:54.361]    <block atomic="false" info="">
[02:42:54.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:42:54.361]        // -> [isSWJ <= 0x00000001]
[02:42:54.361]      __var hasDormant = __protocol & 0x00020000;
[02:42:54.362]        // -> [hasDormant <= 0x00000000]
[02:42:54.362]      __var protType   = __protocol & 0x0000FFFF;
[02:42:54.362]        // -> [protType <= 0x00000002]
[02:42:54.362]    </block>
[02:42:54.362]    <control if="protType == 1" while="" timeout="0" info="">
[02:42:54.362]      // if-block "protType == 1"
[02:42:54.362]        // =>  FALSE
[02:42:54.362]      // skip if-block "protType == 1"
[02:42:54.363]    </control>
[02:42:54.363]    <control if="protType == 2" while="" timeout="0" info="">
[02:42:54.363]      // if-block "protType == 2"
[02:42:54.363]        // =>  TRUE
[02:42:54.363]      <control if="isSWJ" while="" timeout="0" info="">
[02:42:54.363]        // if-block "isSWJ"
[02:42:54.363]          // =>  TRUE
[02:42:54.363]        <control if="hasDormant" while="" timeout="0" info="">
[02:42:54.363]          // if-block "hasDormant"
[02:42:54.363]            // =>  FALSE
[02:42:54.363]          // skip if-block "hasDormant"
[02:42:54.363]        </control>
[02:42:54.363]        <control if="!hasDormant" while="" timeout="0" info="">
[02:42:54.363]          // if-block "!hasDormant"
[02:42:54.363]            // =>  TRUE
[02:42:54.363]          <block atomic="false" info="">
[02:42:54.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:42:54.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:42:54.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:42:54.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:42:54.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:42:54.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:42:54.370]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:42:54.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:42:54.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:42:54.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:42:54.373]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:42:54.374]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:42:54.374]          </block>
[02:42:54.374]          // end if-block "!hasDormant"
[02:42:54.374]        </control>
[02:42:54.374]        // end if-block "isSWJ"
[02:42:54.374]      </control>
[02:42:54.374]      <control if="!isSWJ" while="" timeout="0" info="">
[02:42:54.375]        // if-block "!isSWJ"
[02:42:54.375]          // =>  FALSE
[02:42:54.375]        // skip if-block "!isSWJ"
[02:42:54.375]      </control>
[02:42:54.376]      <block atomic="false" info="">
[02:42:54.376]        ReadDP(0x0);
[02:42:54.378]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:42:54.379]      </block>
[02:42:54.379]      // end if-block "protType == 2"
[02:42:54.379]    </control>
[02:42:54.379]  </sequence>
[02:42:54.379]  
[02:42:54.383]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:42:54.383]  
[02:42:54.383]  <debugvars>
[02:42:54.383]    // Pre-defined
[02:42:54.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:42:54.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:42:54.383]    __dp=0x00000000
[02:42:54.384]    __ap=0x00000000
[02:42:54.384]    __traceout=0x00000000      (Trace Disabled)
[02:42:54.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:42:54.384]    __FlashAddr=0x00000000
[02:42:54.384]    __FlashLen=0x00000000
[02:42:54.384]    __FlashArg=0x00000000
[02:42:54.384]    __FlashOp=0x00000000
[02:42:54.384]    __Result=0x00000000
[02:42:54.384]  </debugvars>
[02:42:54.384]  
[02:42:54.384]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:42:54.384]    <block atomic="false" info="">
[02:42:54.384]      __var SW_DP_ABORT       = 0x0;
[02:42:54.384]        // -> [SW_DP_ABORT <= 0x00000000]
[02:42:54.384]      __var DP_CTRL_STAT      = 0x4;
[02:42:54.386]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:42:54.386]      __var DP_SELECT         = 0x8;
[02:42:54.386]        // -> [DP_SELECT <= 0x00000008]
[02:42:54.386]      __var powered_down      = 0;
[02:42:54.386]        // -> [powered_down <= 0x00000000]
[02:42:54.386]      WriteDP(DP_SELECT, 0x00000000);
[02:42:54.388]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:42:54.388]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:42:54.389]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:42:54.390]        // -> [powered_down <= 0x00000001]
[02:42:54.390]    </block>
[02:42:54.390]    <control if="powered_down" while="" timeout="0" info="">
[02:42:54.390]      // if-block "powered_down"
[02:42:54.390]        // =>  TRUE
[02:42:54.390]      <block atomic="false" info="">
[02:42:54.390]        Message(0, "Debug/System power-up request sent");
[02:42:54.393]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:42:54.394]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:42:54.394]      </block>
[02:42:54.394]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:42:54.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:42:54.396]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:42:54.397]        // while-condition  =>  FALSE
[02:42:54.397]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:42:54.397]      </control>
[02:42:54.397]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:42:54.397]        // if-block "(__protocol & 0xFFFF) == 1"
[02:42:54.397]          // =>  FALSE
[02:42:54.397]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:42:54.398]      </control>
[02:42:54.398]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:42:54.398]        // if-block "(__protocol & 0xFFFF) == 2"
[02:42:54.398]          // =>  TRUE
[02:42:54.398]        <block atomic="false" info="">
[02:42:54.398]          Message(0, "executing SWD power up");
[02:42:54.399]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:42:54.400]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:42:54.401]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:42:54.402]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:42:54.403]        </block>
[02:42:54.404]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:42:54.404]      </control>
[02:42:54.404]      // end if-block "powered_down"
[02:42:54.404]    </control>
[02:42:54.404]    <block atomic="false" info="">
[02:42:54.404]      __var DEBUG_PORT_VAL    = 0;
[02:42:54.404]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:42:54.404]      __var ACCESS_POINT_VAL  = 0;
[02:42:54.404]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:42:54.405]      __ap = 1; 
[02:42:54.405]        // -> [__ap <= 0x00000001]
[02:42:54.405]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:42:54.408]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:42:54.408]      __ap = 4;
[02:42:54.408]        // -> [__ap <= 0x00000004]
[02:42:54.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:42:54.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:42:54.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:42:54.412]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:42:54.413]    </block>
[02:42:54.414]    <block atomic="false" info="">
[02:42:54.414]      __var nReset = 0x80;
[02:42:54.414]        // -> [nReset <= 0x00000080]
[02:42:54.414]      __var canReadPins = 0;
[02:42:54.414]        // -> [canReadPins <= 0x00000000]
[02:42:54.414]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:42:54.416]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:42:54.416]        // -> [canReadPins <= 0x00000001]
[02:42:54.416]    </block>
[02:42:54.416]    <control if="" while="1" timeout="200" info="">
[02:42:54.416]      // while "1"  (timeout="200")
[02:42:54.416]      // while-condition  =>  TRUE
[02:42:54.416]      // while "1"  (timeout="200")
[02:42:54.416]      // while-condition  =>  TRUE
[02:42:54.417]      // while "1"  (timeout="200")
[02:42:54.417]      // while-condition  =>  TRUE
[02:42:54.417]      // while "1"  (timeout="200")
[02:42:54.417]      // while-condition  =>  TRUE
[02:42:54.417]      // while "1"  (timeout="200")
[02:42:54.417]      // while-condition  =>  TRUE
[02:42:54.417]      // while "1"  (timeout="200")
[02:42:54.417]      // while-condition  =>  TRUE
[02:42:54.417]      // while "1"  (timeout="200")
[02:42:54.417]      // while-condition  =>  TRUE
[02:42:54.418]      // while "1"  (timeout="200")
[02:42:54.418]      // while-condition  =>  TRUE
[02:42:54.418]      // while "1"  (timeout="200")
[02:42:54.418]      // while-condition  =>  TRUE
[02:42:54.418]      // while "1"  (timeout="200")
[02:42:54.418]      // while-condition  =>  TRUE
[02:42:54.418]      // while "1"  (timeout="200")
[02:42:54.418]      // while-condition  =>  TRUE
[02:42:54.418]      // while "1"  (timeout="200")
[02:42:54.418]      // while-condition  =>  TRUE
[02:42:54.418]      // while "1"  (timeout="200")
[02:42:54.418]      // while-condition  =>  TRUE
[02:42:54.419]      // while "1"  (timeout="200")
[02:42:54.419]      // while-condition  =>  TRUE
[02:42:54.419]      // while "1"  (timeout="200")
[02:42:54.419]      // while-condition  =>  TRUE
[02:42:54.419]      // while "1"  (timeout="200")
[02:42:54.419]      // while-condition  =>  TRUE
[02:42:54.419]      // while "1"  (timeout="200")
[02:42:54.419]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.420]      // while "1"  (timeout="200")
[02:42:54.420]      // while-condition  =>  TRUE
[02:42:54.421]      // while "1"  (timeout="200")
[02:42:54.421]      // while-condition  =>  TRUE
[02:42:54.421]      // while "1"  (timeout="200")
[02:42:54.421]      // while-condition  =>  TRUE
[02:42:54.421]      // while "1"  (timeout="200")
[02:42:54.422]      // while-condition  =>  TRUE
[02:42:54.422]      // while "1"  (timeout="200")
[02:42:54.422]      // while-condition  =>  TRUE
[02:42:54.422]      // while "1"  (timeout="200")
[02:42:54.422]      // while-condition  =>  TRUE
[02:42:54.422]      // while "1"  (timeout="200")
[02:42:54.422]      // while-condition  =>  TRUE
[02:42:54.422]      // while "1"  (timeout="200")
[02:42:54.422]      // while-condition  =>  TRUE
[02:42:54.423]      // while "1"  (timeout="200")
[02:42:54.423]      // while-condition  =>  TRUE
[02:42:54.423]      // while "1"  (timeout="200")
[02:42:54.423]      // while-condition  =>  TRUE
[02:42:54.423]      // while "1"  (timeout="200")
[02:42:54.423]      // while-condition  =>  TRUE
[02:42:54.423]      // while "1"  (timeout="200")
[02:42:54.423]      // while-condition  =>  TRUE
[02:42:54.423]      // while "1"  (timeout="200")
[02:42:54.423]      // while-condition  =>  TRUE
[02:42:54.423]      // while "1"  (timeout="200")
[02:42:54.423]      // while-condition  =>  TRUE
[02:42:54.423]      // while "1"  (timeout="200")
[02:42:54.424]      // while-condition  =>  TRUE
[02:42:54.425]      // while "1"  (timeout="200")
[02:42:54.425]      // while  =>  TIMEOUT
[02:42:54.425]      // end while "1"
[02:42:54.425]    </control>
[02:42:54.425]    <control if="canReadPins" while="" timeout="0" info="">
[02:42:54.425]      // if-block "canReadPins"
[02:42:54.425]        // =>  TRUE
[02:42:54.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:42:54.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:42:54.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:42:54.427]        // while-condition  =>  FALSE
[02:42:54.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:42:54.427]      </control>
[02:42:54.427]      // end if-block "canReadPins"
[02:42:54.427]    </control>
[02:42:54.427]    <control if="!canReadPins" while="" timeout="0" info="">
[02:42:54.427]      // if-block "!canReadPins"
[02:42:54.427]        // =>  FALSE
[02:42:54.427]      // skip if-block "!canReadPins"
[02:42:54.427]    </control>
[02:42:54.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:42:54.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:42:54.428]        // =>  TRUE
[02:42:54.429]      <block atomic="false" info="">
[02:42:54.429]        WriteAP(0x00, 0x190008);
[02:42:54.431]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:42:54.431]        WriteAP(0xF0, 0x01);
[02:42:54.434]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:42:54.434]      </block>
[02:42:54.434]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:42:54.434]    </control>
[02:42:54.434]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:42:54.434]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:42:54.434]        // =>  FALSE
[02:42:54.434]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:42:54.434]    </control>
[02:42:54.434]    <block atomic="false" info="">
[02:42:54.434]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:42:54.438]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:42:54.438]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:42:54.438]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:42:54.440]      __ap = 0; //lets make sure we reset the access point selection
[02:42:54.440]        // -> [__ap <= 0x00000000]
[02:42:54.440]    </block>
[02:42:54.440]  </sequence>
[02:42:54.440]  
[02:42:54.460]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:42:54.460]  
[02:42:54.461]  <debugvars>
[02:42:54.461]    // Pre-defined
[02:42:54.461]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:42:54.461]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:42:54.461]    __dp=0x00000000
[02:42:54.461]    __ap=0x00000000
[02:42:54.461]    __traceout=0x00000000      (Trace Disabled)
[02:42:54.461]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:42:54.461]    __FlashAddr=0x00000000
[02:42:54.461]    __FlashLen=0x00000000
[02:42:54.461]    __FlashArg=0x00000000
[02:42:54.461]    __FlashOp=0x00000000
[02:42:54.461]    __Result=0x00000000
[02:42:54.461]  </debugvars>
[02:42:54.461]  
[02:42:54.462]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:42:54.462]    <block atomic="false" info="">
[02:42:54.462]      __var deviceID = 0;
[02:42:54.462]        // -> [deviceID <= 0x00000000]
[02:42:54.462]      __var version = 0;
[02:42:54.462]        // -> [version <= 0x00000000]
[02:42:54.463]      __var partNum = 0;
[02:42:54.463]        // -> [partNum <= 0x00000000]
[02:42:54.463]      __var manuf = 0;
[02:42:54.463]        // -> [manuf <= 0x00000000]
[02:42:54.463]      __var isMSPM0G1X0X_G3X0X = 0;
[02:42:54.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:42:54.463]      __var isProduction = 0;
[02:42:54.463]        // -> [isProduction <= 0x00000000]
[02:42:54.463]      __var continueId = 0;
[02:42:54.463]        // -> [continueId <= 0x00000000]
[02:42:54.463]      deviceID =   Read32(0x41C40004);
[02:42:54.468]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:42:54.468]        // -> [deviceID <= 0x2BB8802F]
[02:42:54.468]      version = deviceID >> 28;
[02:42:54.468]        // -> [version <= 0x00000002]
[02:42:54.468]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:42:54.468]        // -> [partNum <= 0x0000BB88]
[02:42:54.470]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:42:54.470]        // -> [manuf <= 0x00000017]
[02:42:54.470]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:42:54.470]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:42:54.470]      isProduction = (version > 0);
[02:42:54.470]        // -> [isProduction <= 0x00000001]
[02:42:54.470]    </block>
[02:42:54.470]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:42:54.470]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:42:54.470]        // =>  FALSE
[02:42:54.470]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:42:54.471]    </control>
[02:42:54.471]    <control if="continueId == 4" while="" timeout="0" info="">
[02:42:54.471]      // if-block "continueId == 4"
[02:42:54.471]        // =>  FALSE
[02:42:54.471]      // skip if-block "continueId == 4"
[02:42:54.471]    </control>
[02:42:54.471]    <control if="!isProduction" while="" timeout="0" info="">
[02:42:54.471]      // if-block "!isProduction"
[02:42:54.471]        // =>  FALSE
[02:42:54.471]      // skip if-block "!isProduction"
[02:42:54.471]    </control>
[02:42:54.471]  </sequence>
[02:42:54.472]  
[02:43:23.964]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:43:23.964]  
[02:43:23.973]  <debugvars>
[02:43:23.973]    // Pre-defined
[02:43:23.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:43:23.973]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:43:23.973]    __dp=0x00000000
[02:43:23.973]    __ap=0x00000000
[02:43:23.973]    __traceout=0x00000000      (Trace Disabled)
[02:43:23.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:43:23.973]    __FlashAddr=0x00000000
[02:43:23.974]    __FlashLen=0x00000000
[02:43:23.974]    __FlashArg=0x00000000
[02:43:23.974]    __FlashOp=0x00000000
[02:43:23.974]    __Result=0x00000000
[02:43:23.974]  </debugvars>
[02:43:23.974]  
[02:43:23.974]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:43:23.974]    <block atomic="false" info="">
[02:43:23.974]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:43:23.974]        // -> [isSWJ <= 0x00000001]
[02:43:23.974]      __var hasDormant = __protocol & 0x00020000;
[02:43:23.974]        // -> [hasDormant <= 0x00000000]
[02:43:23.974]      __var protType   = __protocol & 0x0000FFFF;
[02:43:23.974]        // -> [protType <= 0x00000002]
[02:43:23.974]    </block>
[02:43:23.974]    <control if="protType == 1" while="" timeout="0" info="">
[02:43:23.974]      // if-block "protType == 1"
[02:43:23.974]        // =>  FALSE
[02:43:23.974]      // skip if-block "protType == 1"
[02:43:23.974]    </control>
[02:43:23.976]    <control if="protType == 2" while="" timeout="0" info="">
[02:43:23.976]      // if-block "protType == 2"
[02:43:23.976]        // =>  TRUE
[02:43:23.976]      <control if="isSWJ" while="" timeout="0" info="">
[02:43:23.976]        // if-block "isSWJ"
[02:43:23.976]          // =>  TRUE
[02:43:23.976]        <control if="hasDormant" while="" timeout="0" info="">
[02:43:23.976]          // if-block "hasDormant"
[02:43:23.976]            // =>  FALSE
[02:43:23.976]          // skip if-block "hasDormant"
[02:43:23.976]        </control>
[02:43:23.977]        <control if="!hasDormant" while="" timeout="0" info="">
[02:43:23.977]          // if-block "!hasDormant"
[02:43:23.977]            // =>  TRUE
[02:43:23.977]          <block atomic="false" info="">
[02:43:23.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:43:23.979]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:43:23.979]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:43:23.981]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:43:23.981]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:43:23.983]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:43:23.984]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:43:23.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:43:23.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:43:23.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:43:23.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:43:23.991]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:43:23.992]          </block>
[02:43:23.992]          // end if-block "!hasDormant"
[02:43:23.992]        </control>
[02:43:23.992]        // end if-block "isSWJ"
[02:43:23.992]      </control>
[02:43:23.992]      <control if="!isSWJ" while="" timeout="0" info="">
[02:43:23.993]        // if-block "!isSWJ"
[02:43:23.993]          // =>  FALSE
[02:43:23.993]        // skip if-block "!isSWJ"
[02:43:23.993]      </control>
[02:43:23.993]      <block atomic="false" info="">
[02:43:23.993]        ReadDP(0x0);
[02:43:23.995]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:43:23.995]      </block>
[02:43:23.995]      // end if-block "protType == 2"
[02:43:23.995]    </control>
[02:43:23.995]  </sequence>
[02:43:23.995]  
[02:43:23.999]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:43:23.999]  
[02:43:24.000]  <debugvars>
[02:43:24.000]    // Pre-defined
[02:43:24.000]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:43:24.000]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:43:24.000]    __dp=0x00000000
[02:43:24.000]    __ap=0x00000000
[02:43:24.001]    __traceout=0x00000000      (Trace Disabled)
[02:43:24.001]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:43:24.001]    __FlashAddr=0x00000000
[02:43:24.001]    __FlashLen=0x00000000
[02:43:24.001]    __FlashArg=0x00000000
[02:43:24.002]    __FlashOp=0x00000000
[02:43:24.002]    __Result=0x00000000
[02:43:24.002]  </debugvars>
[02:43:24.002]  
[02:43:24.002]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:43:24.002]    <block atomic="false" info="">
[02:43:24.002]      __var SW_DP_ABORT       = 0x0;
[02:43:24.002]        // -> [SW_DP_ABORT <= 0x00000000]
[02:43:24.002]      __var DP_CTRL_STAT      = 0x4;
[02:43:24.002]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:43:24.002]      __var DP_SELECT         = 0x8;
[02:43:24.002]        // -> [DP_SELECT <= 0x00000008]
[02:43:24.002]      __var powered_down      = 0;
[02:43:24.002]        // -> [powered_down <= 0x00000000]
[02:43:24.002]      WriteDP(DP_SELECT, 0x00000000);
[02:43:24.004]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:43:24.004]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:43:24.005]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:43:24.005]        // -> [powered_down <= 0x00000001]
[02:43:24.005]    </block>
[02:43:24.005]    <control if="powered_down" while="" timeout="0" info="">
[02:43:24.006]      // if-block "powered_down"
[02:43:24.006]        // =>  TRUE
[02:43:24.006]      <block atomic="false" info="">
[02:43:24.006]        Message(0, "Debug/System power-up request sent");
[02:43:24.009]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:43:24.012]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:43:24.012]      </block>
[02:43:24.012]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:43:24.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:43:24.013]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:43:24.014]        // while-condition  =>  FALSE
[02:43:24.014]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:43:24.014]      </control>
[02:43:24.014]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:43:24.014]        // if-block "(__protocol & 0xFFFF) == 1"
[02:43:24.014]          // =>  FALSE
[02:43:24.014]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:43:24.014]      </control>
[02:43:24.014]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:43:24.014]        // if-block "(__protocol & 0xFFFF) == 2"
[02:43:24.014]          // =>  TRUE
[02:43:24.015]        <block atomic="false" info="">
[02:43:24.015]          Message(0, "executing SWD power up");
[02:43:24.016]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:43:24.017]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:43:24.017]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:43:24.019]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:43:24.019]        </block>
[02:43:24.019]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:43:24.020]      </control>
[02:43:24.020]      // end if-block "powered_down"
[02:43:24.020]    </control>
[02:43:24.020]    <block atomic="false" info="">
[02:43:24.020]      __var DEBUG_PORT_VAL    = 0;
[02:43:24.020]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:43:24.020]      __var ACCESS_POINT_VAL  = 0;
[02:43:24.020]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:43:24.020]      __ap = 1; 
[02:43:24.020]        // -> [__ap <= 0x00000001]
[02:43:24.020]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:43:24.024]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:43:24.024]      __ap = 4;
[02:43:24.025]        // -> [__ap <= 0x00000004]
[02:43:24.025]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:43:24.029]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:43:24.029]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:43:24.029]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:43:24.031]    </block>
[02:43:24.031]    <block atomic="false" info="">
[02:43:24.031]      __var nReset = 0x80;
[02:43:24.031]        // -> [nReset <= 0x00000080]
[02:43:24.031]      __var canReadPins = 0;
[02:43:24.031]        // -> [canReadPins <= 0x00000000]
[02:43:24.031]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:43:24.033]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:43:24.033]        // -> [canReadPins <= 0x00000001]
[02:43:24.033]    </block>
[02:43:24.034]    <control if="" while="1" timeout="200" info="">
[02:43:24.034]      // while "1"  (timeout="200")
[02:43:24.034]      // while-condition  =>  TRUE
[02:43:24.034]      // while "1"  (timeout="200")
[02:43:24.034]      // while-condition  =>  TRUE
[02:43:24.034]      // while "1"  (timeout="200")
[02:43:24.035]      // while-condition  =>  TRUE
[02:43:24.035]      // while "1"  (timeout="200")
[02:43:24.035]      // while-condition  =>  TRUE
[02:43:24.035]      // while "1"  (timeout="200")
[02:43:24.035]      // while-condition  =>  TRUE
[02:43:24.035]      // while "1"  (timeout="200")
[02:43:24.036]      // while-condition  =>  TRUE
[02:43:24.036]      // while "1"  (timeout="200")
[02:43:24.036]      // while-condition  =>  TRUE
[02:43:24.036]      // while "1"  (timeout="200")
[02:43:24.036]      // while-condition  =>  TRUE
[02:43:24.036]      // while "1"  (timeout="200")
[02:43:24.036]      // while-condition  =>  TRUE
[02:43:24.036]      // while "1"  (timeout="200")
[02:43:24.036]      // while-condition  =>  TRUE
[02:43:24.036]      // while "1"  (timeout="200")
[02:43:24.036]      // while-condition  =>  TRUE
[02:43:24.037]      // while "1"  (timeout="200")
[02:43:24.037]      // while-condition  =>  TRUE
[02:43:24.037]      // while "1"  (timeout="200")
[02:43:24.037]      // while-condition  =>  TRUE
[02:43:24.037]      // while "1"  (timeout="200")
[02:43:24.037]      // while-condition  =>  TRUE
[02:43:24.037]      // while "1"  (timeout="200")
[02:43:24.037]      // while-condition  =>  TRUE
[02:43:24.037]      // while "1"  (timeout="200")
[02:43:24.037]      // while-condition  =>  TRUE
[02:43:24.037]      // while "1"  (timeout="200")
[02:43:24.037]      // while-condition  =>  TRUE
[02:43:24.037]      // while "1"  (timeout="200")
[02:43:24.038]      // while-condition  =>  TRUE
[02:43:24.038]      // while "1"  (timeout="200")
[02:43:24.038]      // while-condition  =>  TRUE
[02:43:24.038]      // while "1"  (timeout="200")
[02:43:24.038]      // while-condition  =>  TRUE
[02:43:24.038]      // while "1"  (timeout="200")
[02:43:24.038]      // while-condition  =>  TRUE
[02:43:24.038]      // while "1"  (timeout="200")
[02:43:24.038]      // while-condition  =>  TRUE
[02:43:24.039]      // while "1"  (timeout="200")
[02:43:24.039]      // while-condition  =>  TRUE
[02:43:24.039]      // while "1"  (timeout="200")
[02:43:24.039]      // while-condition  =>  TRUE
[02:43:24.039]      // while "1"  (timeout="200")
[02:43:24.039]      // while-condition  =>  TRUE
[02:43:24.039]      // while "1"  (timeout="200")
[02:43:24.039]      // while-condition  =>  TRUE
[02:43:24.039]      // while "1"  (timeout="200")
[02:43:24.039]      // while-condition  =>  TRUE
[02:43:24.039]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.040]      // while-condition  =>  TRUE
[02:43:24.040]      // while "1"  (timeout="200")
[02:43:24.042]      // while-condition  =>  TRUE
[02:43:24.042]      // while "1"  (timeout="200")
[02:43:24.042]      // while-condition  =>  TRUE
[02:43:24.042]      // while "1"  (timeout="200")
[02:43:24.042]      // while-condition  =>  TRUE
[02:43:24.042]      // while "1"  (timeout="200")
[02:43:24.042]      // while-condition  =>  TRUE
[02:43:24.043]      // while "1"  (timeout="200")
[02:43:24.043]      // while-condition  =>  TRUE
[02:43:24.043]      // while "1"  (timeout="200")
[02:43:24.043]      // while-condition  =>  TRUE
[02:43:24.043]      // while "1"  (timeout="200")
[02:43:24.043]      // while-condition  =>  TRUE
[02:43:24.043]      // while "1"  (timeout="200")
[02:43:24.043]      // while-condition  =>  TRUE
[02:43:24.043]      // while "1"  (timeout="200")
[02:43:24.043]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.044]      // while "1"  (timeout="200")
[02:43:24.044]      // while-condition  =>  TRUE
[02:43:24.046]      // while "1"  (timeout="200")
[02:43:24.046]      // while-condition  =>  TRUE
[02:43:24.046]      // while "1"  (timeout="200")
[02:43:24.046]      // while-condition  =>  TRUE
[02:43:24.046]      // while "1"  (timeout="200")
[02:43:24.046]      // while-condition  =>  TRUE
[02:43:24.046]      // while "1"  (timeout="200")
[02:43:24.046]      // while-condition  =>  TRUE
[02:43:24.046]      // while "1"  (timeout="200")
[02:43:24.046]      // while-condition  =>  TRUE
[02:43:24.046]      // while "1"  (timeout="200")
[02:43:24.047]      // while-condition  =>  TRUE
[02:43:24.047]      // while "1"  (timeout="200")
[02:43:24.047]      // while-condition  =>  TRUE
[02:43:24.047]      // while "1"  (timeout="200")
[02:43:24.047]      // while-condition  =>  TRUE
[02:43:24.047]      // while "1"  (timeout="200")
[02:43:24.047]      // while-condition  =>  TRUE
[02:43:24.048]      // while "1"  (timeout="200")
[02:43:24.048]      // while-condition  =>  TRUE
[02:43:24.048]      // while "1"  (timeout="200")
[02:43:24.048]      // while-condition  =>  TRUE
[02:43:24.048]      // while "1"  (timeout="200")
[02:43:24.048]      // while-condition  =>  TRUE
[02:43:24.048]      // while "1"  (timeout="200")
[02:43:24.048]      // while-condition  =>  TRUE
[02:43:24.048]      // while "1"  (timeout="200")
[02:43:24.048]      // while-condition  =>  TRUE
[02:43:24.048]      // while "1"  (timeout="200")
[02:43:24.049]      // while-condition  =>  TRUE
[02:43:24.049]      // while "1"  (timeout="200")
[02:43:24.049]      // while-condition  =>  TRUE
[02:43:24.049]      // while "1"  (timeout="200")
[02:43:24.049]      // while-condition  =>  TRUE
[02:43:24.049]      // while "1"  (timeout="200")
[02:43:24.050]      // while-condition  =>  TRUE
[02:43:24.050]      // while "1"  (timeout="200")
[02:43:24.050]      // while  =>  TIMEOUT
[02:43:24.050]      // end while "1"
[02:43:24.050]    </control>
[02:43:24.050]    <control if="canReadPins" while="" timeout="0" info="">
[02:43:24.050]      // if-block "canReadPins"
[02:43:24.050]        // =>  TRUE
[02:43:24.050]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:43:24.050]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:43:24.051]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:43:24.051]        // while-condition  =>  FALSE
[02:43:24.051]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:43:24.052]      </control>
[02:43:24.052]      // end if-block "canReadPins"
[02:43:24.052]    </control>
[02:43:24.053]    <control if="!canReadPins" while="" timeout="0" info="">
[02:43:24.053]      // if-block "!canReadPins"
[02:43:24.053]        // =>  FALSE
[02:43:24.053]      // skip if-block "!canReadPins"
[02:43:24.053]    </control>
[02:43:24.053]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:43:24.053]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:43:24.053]        // =>  TRUE
[02:43:24.053]      <block atomic="false" info="">
[02:43:24.053]        WriteAP(0x00, 0x190008);
[02:43:24.055]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:43:24.055]        WriteAP(0xF0, 0x01);
[02:43:24.058]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:43:24.058]      </block>
[02:43:24.058]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:43:24.059]    </control>
[02:43:24.059]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:43:24.059]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:43:24.059]        // =>  FALSE
[02:43:24.059]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:43:24.059]    </control>
[02:43:24.059]    <block atomic="false" info="">
[02:43:24.059]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:43:24.065]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:43:24.067]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:43:24.067]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:43:24.068]      __ap = 0; //lets make sure we reset the access point selection
[02:43:24.068]        // -> [__ap <= 0x00000000]
[02:43:24.068]    </block>
[02:43:24.068]  </sequence>
[02:43:24.068]  
[02:43:24.087]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:43:24.087]  
[02:43:24.088]  <debugvars>
[02:43:24.088]    // Pre-defined
[02:43:24.088]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:43:24.088]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:43:24.088]    __dp=0x00000000
[02:43:24.088]    __ap=0x00000000
[02:43:24.089]    __traceout=0x00000000      (Trace Disabled)
[02:43:24.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:43:24.089]    __FlashAddr=0x00000000
[02:43:24.089]    __FlashLen=0x00000000
[02:43:24.089]    __FlashArg=0x00000000
[02:43:24.089]    __FlashOp=0x00000000
[02:43:24.089]    __Result=0x00000000
[02:43:24.089]  </debugvars>
[02:43:24.090]  
[02:43:24.090]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:43:24.090]    <block atomic="false" info="">
[02:43:24.090]      __var deviceID = 0;
[02:43:24.090]        // -> [deviceID <= 0x00000000]
[02:43:24.090]      __var version = 0;
[02:43:24.090]        // -> [version <= 0x00000000]
[02:43:24.090]      __var partNum = 0;
[02:43:24.090]        // -> [partNum <= 0x00000000]
[02:43:24.090]      __var manuf = 0;
[02:43:24.090]        // -> [manuf <= 0x00000000]
[02:43:24.090]      __var isMSPM0G1X0X_G3X0X = 0;
[02:43:24.090]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:43:24.091]      __var isProduction = 0;
[02:43:24.091]        // -> [isProduction <= 0x00000000]
[02:43:24.092]      __var continueId = 0;
[02:43:24.092]        // -> [continueId <= 0x00000000]
[02:43:24.092]      deviceID =   Read32(0x41C40004);
[02:43:24.095]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:43:24.095]        // -> [deviceID <= 0x2BB8802F]
[02:43:24.095]      version = deviceID >> 28;
[02:43:24.096]        // -> [version <= 0x00000002]
[02:43:24.096]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:43:24.096]        // -> [partNum <= 0x0000BB88]
[02:43:24.096]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:43:24.096]        // -> [manuf <= 0x00000017]
[02:43:24.096]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:43:24.096]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:43:24.096]      isProduction = (version > 0);
[02:43:24.096]        // -> [isProduction <= 0x00000001]
[02:43:24.096]    </block>
[02:43:24.096]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:43:24.097]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:43:24.097]        // =>  FALSE
[02:43:24.097]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:43:24.097]    </control>
[02:43:24.097]    <control if="continueId == 4" while="" timeout="0" info="">
[02:43:24.097]      // if-block "continueId == 4"
[02:43:24.097]        // =>  FALSE
[02:43:24.097]      // skip if-block "continueId == 4"
[02:43:24.097]    </control>
[02:43:24.097]    <control if="!isProduction" while="" timeout="0" info="">
[02:43:24.099]      // if-block "!isProduction"
[02:43:24.099]        // =>  FALSE
[02:43:24.099]      // skip if-block "!isProduction"
[02:43:24.099]    </control>
[02:43:24.099]  </sequence>
[02:43:24.099]  
[02:44:01.714]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:44:01.714]  
[02:44:01.715]  <debugvars>
[02:44:01.715]    // Pre-defined
[02:44:01.715]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:44:01.715]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:44:01.715]    __dp=0x00000000
[02:44:01.715]    __ap=0x00000000
[02:44:01.715]    __traceout=0x00000000      (Trace Disabled)
[02:44:01.715]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:44:01.716]    __FlashAddr=0x00000000
[02:44:01.716]    __FlashLen=0x00000000
[02:44:01.716]    __FlashArg=0x00000000
[02:44:01.716]    __FlashOp=0x00000000
[02:44:01.717]    __Result=0x00000000
[02:44:01.717]  </debugvars>
[02:44:01.717]  
[02:44:01.717]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:44:01.717]    <block atomic="false" info="">
[02:44:01.717]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:44:01.717]        // -> [isSWJ <= 0x00000001]
[02:44:01.717]      __var hasDormant = __protocol & 0x00020000;
[02:44:01.717]        // -> [hasDormant <= 0x00000000]
[02:44:01.717]      __var protType   = __protocol & 0x0000FFFF;
[02:44:01.717]        // -> [protType <= 0x00000002]
[02:44:01.717]    </block>
[02:44:01.717]    <control if="protType == 1" while="" timeout="0" info="">
[02:44:01.719]      // if-block "protType == 1"
[02:44:01.719]        // =>  FALSE
[02:44:01.719]      // skip if-block "protType == 1"
[02:44:01.719]    </control>
[02:44:01.719]    <control if="protType == 2" while="" timeout="0" info="">
[02:44:01.719]      // if-block "protType == 2"
[02:44:01.719]        // =>  TRUE
[02:44:01.719]      <control if="isSWJ" while="" timeout="0" info="">
[02:44:01.719]        // if-block "isSWJ"
[02:44:01.719]          // =>  TRUE
[02:44:01.719]        <control if="hasDormant" while="" timeout="0" info="">
[02:44:01.719]          // if-block "hasDormant"
[02:44:01.719]            // =>  FALSE
[02:44:01.719]          // skip if-block "hasDormant"
[02:44:01.719]        </control>
[02:44:01.719]        <control if="!hasDormant" while="" timeout="0" info="">
[02:44:01.720]          // if-block "!hasDormant"
[02:44:01.720]            // =>  TRUE
[02:44:01.720]          <block atomic="false" info="">
[02:44:01.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:44:01.721]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:44:01.722]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:44:01.723]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:44:01.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:44:01.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:44:01.726]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:44:01.727]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:44:01.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:44:01.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:44:01.729]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:44:01.730]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:44:01.730]          </block>
[02:44:01.730]          // end if-block "!hasDormant"
[02:44:01.730]        </control>
[02:44:01.730]        // end if-block "isSWJ"
[02:44:01.731]      </control>
[02:44:01.731]      <control if="!isSWJ" while="" timeout="0" info="">
[02:44:01.731]        // if-block "!isSWJ"
[02:44:01.731]          // =>  FALSE
[02:44:01.731]        // skip if-block "!isSWJ"
[02:44:01.731]      </control>
[02:44:01.731]      <block atomic="false" info="">
[02:44:01.731]        ReadDP(0x0);
[02:44:01.733]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:44:01.733]      </block>
[02:44:01.733]      // end if-block "protType == 2"
[02:44:01.733]    </control>
[02:44:01.733]  </sequence>
[02:44:01.733]  
[02:44:01.736]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:44:01.736]  
[02:44:01.736]  <debugvars>
[02:44:01.736]    // Pre-defined
[02:44:01.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:44:01.736]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:44:01.736]    __dp=0x00000000
[02:44:01.736]    __ap=0x00000000
[02:44:01.736]    __traceout=0x00000000      (Trace Disabled)
[02:44:01.736]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:44:01.736]    __FlashAddr=0x00000000
[02:44:01.737]    __FlashLen=0x00000000
[02:44:01.737]    __FlashArg=0x00000000
[02:44:01.737]    __FlashOp=0x00000000
[02:44:01.737]    __Result=0x00000000
[02:44:01.737]  </debugvars>
[02:44:01.737]  
[02:44:01.737]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:44:01.737]    <block atomic="false" info="">
[02:44:01.737]      __var SW_DP_ABORT       = 0x0;
[02:44:01.737]        // -> [SW_DP_ABORT <= 0x00000000]
[02:44:01.737]      __var DP_CTRL_STAT      = 0x4;
[02:44:01.737]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:44:01.738]      __var DP_SELECT         = 0x8;
[02:44:01.738]        // -> [DP_SELECT <= 0x00000008]
[02:44:01.738]      __var powered_down      = 0;
[02:44:01.738]        // -> [powered_down <= 0x00000000]
[02:44:01.738]      WriteDP(DP_SELECT, 0x00000000);
[02:44:01.740]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:44:01.740]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:44:01.742]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:44:01.742]        // -> [powered_down <= 0x00000001]
[02:44:01.742]    </block>
[02:44:01.742]    <control if="powered_down" while="" timeout="0" info="">
[02:44:01.743]      // if-block "powered_down"
[02:44:01.743]        // =>  TRUE
[02:44:01.743]      <block atomic="false" info="">
[02:44:01.743]        Message(0, "Debug/System power-up request sent");
[02:44:01.747]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:44:01.749]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:44:01.749]      </block>
[02:44:01.749]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:44:01.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:44:01.751]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:44:01.752]        // while-condition  =>  FALSE
[02:44:01.752]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:44:01.752]      </control>
[02:44:01.752]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:44:01.752]        // if-block "(__protocol & 0xFFFF) == 1"
[02:44:01.752]          // =>  FALSE
[02:44:01.752]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:44:01.752]      </control>
[02:44:01.752]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:44:01.752]        // if-block "(__protocol & 0xFFFF) == 2"
[02:44:01.752]          // =>  TRUE
[02:44:01.752]        <block atomic="false" info="">
[02:44:01.753]          Message(0, "executing SWD power up");
[02:44:01.754]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:44:01.756]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:44:01.756]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:44:01.758]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:44:01.758]        </block>
[02:44:01.758]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:44:01.758]      </control>
[02:44:01.758]      // end if-block "powered_down"
[02:44:01.758]    </control>
[02:44:01.758]    <block atomic="false" info="">
[02:44:01.758]      __var DEBUG_PORT_VAL    = 0;
[02:44:01.759]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:44:01.759]      __var ACCESS_POINT_VAL  = 0;
[02:44:01.759]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:44:01.759]      __ap = 1; 
[02:44:01.759]        // -> [__ap <= 0x00000001]
[02:44:01.759]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:44:01.763]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:44:01.763]      __ap = 4;
[02:44:01.763]        // -> [__ap <= 0x00000004]
[02:44:01.763]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:44:01.766]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:44:01.766]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:44:01.767]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:44:01.769]    </block>
[02:44:01.769]    <block atomic="false" info="">
[02:44:01.769]      __var nReset = 0x80;
[02:44:01.769]        // -> [nReset <= 0x00000080]
[02:44:01.769]      __var canReadPins = 0;
[02:44:01.769]        // -> [canReadPins <= 0x00000000]
[02:44:01.769]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:44:01.771]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:44:01.771]        // -> [canReadPins <= 0x00000001]
[02:44:01.771]    </block>
[02:44:01.771]    <control if="" while="1" timeout="200" info="">
[02:44:01.771]      // while "1"  (timeout="200")
[02:44:01.771]      // while-condition  =>  TRUE
[02:44:01.771]      // while "1"  (timeout="200")
[02:44:01.771]      // while-condition  =>  TRUE
[02:44:01.771]      // while "1"  (timeout="200")
[02:44:01.771]      // while-condition  =>  TRUE
[02:44:01.771]      // while "1"  (timeout="200")
[02:44:01.771]      // while-condition  =>  TRUE
[02:44:01.771]      // while "1"  (timeout="200")
[02:44:01.771]      // while-condition  =>  TRUE
[02:44:01.771]      // while "1"  (timeout="200")
[02:44:01.772]      // while-condition  =>  TRUE
[02:44:01.772]      // while "1"  (timeout="200")
[02:44:01.773]      // while-condition  =>  TRUE
[02:44:01.773]      // while "1"  (timeout="200")
[02:44:01.773]      // while-condition  =>  TRUE
[02:44:01.773]      // while "1"  (timeout="200")
[02:44:01.773]      // while-condition  =>  TRUE
[02:44:01.773]      // while "1"  (timeout="200")
[02:44:01.773]      // while-condition  =>  TRUE
[02:44:01.773]      // while "1"  (timeout="200")
[02:44:01.773]      // while-condition  =>  TRUE
[02:44:01.774]      // while "1"  (timeout="200")
[02:44:01.774]      // while-condition  =>  TRUE
[02:44:01.774]      // while "1"  (timeout="200")
[02:44:01.774]      // while-condition  =>  TRUE
[02:44:01.774]      // while "1"  (timeout="200")
[02:44:01.774]      // while-condition  =>  TRUE
[02:44:01.774]      // while "1"  (timeout="200")
[02:44:01.774]      // while-condition  =>  TRUE
[02:44:01.774]      // while "1"  (timeout="200")
[02:44:01.774]      // while-condition  =>  TRUE
[02:44:01.775]      // while "1"  (timeout="200")
[02:44:01.775]      // while-condition  =>  TRUE
[02:44:01.775]      // while "1"  (timeout="200")
[02:44:01.775]      // while-condition  =>  TRUE
[02:44:01.775]      // while "1"  (timeout="200")
[02:44:01.775]      // while-condition  =>  TRUE
[02:44:01.775]      // while "1"  (timeout="200")
[02:44:01.775]      // while-condition  =>  TRUE
[02:44:01.775]      // while "1"  (timeout="200")
[02:44:01.775]      // while-condition  =>  TRUE
[02:44:01.775]      // while "1"  (timeout="200")
[02:44:01.775]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.776]      // while "1"  (timeout="200")
[02:44:01.776]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.778]      // while "1"  (timeout="200")
[02:44:01.778]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.780]      // while "1"  (timeout="200")
[02:44:01.780]      // while-condition  =>  TRUE
[02:44:01.781]      // while "1"  (timeout="200")
[02:44:01.781]      // while-condition  =>  TRUE
[02:44:01.781]      // while "1"  (timeout="200")
[02:44:01.781]      // while-condition  =>  TRUE
[02:44:01.781]      // while "1"  (timeout="200")
[02:44:01.781]      // while-condition  =>  TRUE
[02:44:01.781]      // while "1"  (timeout="200")
[02:44:01.781]      // while-condition  =>  TRUE
[02:44:01.781]      // while "1"  (timeout="200")
[02:44:01.781]      // while-condition  =>  TRUE
[02:44:01.781]      // while "1"  (timeout="200")
[02:44:01.782]      // while-condition  =>  TRUE
[02:44:01.782]      // while "1"  (timeout="200")
[02:44:01.782]      // while-condition  =>  TRUE
[02:44:01.782]      // while "1"  (timeout="200")
[02:44:01.782]      // while-condition  =>  TRUE
[02:44:01.782]      // while "1"  (timeout="200")
[02:44:01.782]      // while-condition  =>  TRUE
[02:44:01.782]      // while "1"  (timeout="200")
[02:44:01.782]      // while-condition  =>  TRUE
[02:44:01.782]      // while "1"  (timeout="200")
[02:44:01.782]      // while-condition  =>  TRUE
[02:44:01.783]      // while "1"  (timeout="200")
[02:44:01.783]      // while-condition  =>  TRUE
[02:44:01.783]      // while "1"  (timeout="200")
[02:44:01.783]      // while-condition  =>  TRUE
[02:44:01.783]      // while "1"  (timeout="200")
[02:44:01.783]      // while-condition  =>  TRUE
[02:44:01.783]      // while "1"  (timeout="200")
[02:44:01.783]      // while-condition  =>  TRUE
[02:44:01.783]      // while "1"  (timeout="200")
[02:44:01.783]      // while-condition  =>  TRUE
[02:44:01.783]      // while "1"  (timeout="200")
[02:44:01.783]      // while-condition  =>  TRUE
[02:44:01.784]      // while "1"  (timeout="200")
[02:44:01.784]      // while  =>  TIMEOUT
[02:44:01.784]      // end while "1"
[02:44:01.784]    </control>
[02:44:01.784]    <control if="canReadPins" while="" timeout="0" info="">
[02:44:01.784]      // if-block "canReadPins"
[02:44:01.784]        // =>  TRUE
[02:44:01.784]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:44:01.786]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:44:01.787]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:44:01.787]        // while-condition  =>  FALSE
[02:44:01.787]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:44:01.787]      </control>
[02:44:01.788]      // end if-block "canReadPins"
[02:44:01.788]    </control>
[02:44:01.788]    <control if="!canReadPins" while="" timeout="0" info="">
[02:44:01.788]      // if-block "!canReadPins"
[02:44:01.788]        // =>  FALSE
[02:44:01.789]      // skip if-block "!canReadPins"
[02:44:01.789]    </control>
[02:44:01.789]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:44:01.789]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:44:01.789]        // =>  TRUE
[02:44:01.789]      <block atomic="false" info="">
[02:44:01.789]        WriteAP(0x00, 0x190008);
[02:44:01.790]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:44:01.790]        WriteAP(0xF0, 0x01);
[02:44:01.794]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:44:01.794]      </block>
[02:44:01.794]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:44:01.794]    </control>
[02:44:01.794]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:44:01.794]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:44:01.794]        // =>  FALSE
[02:44:01.794]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:44:01.794]    </control>
[02:44:01.794]    <block atomic="false" info="">
[02:44:01.794]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:44:01.797]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:44:01.797]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:44:01.797]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:44:01.798]      __ap = 0; //lets make sure we reset the access point selection
[02:44:01.800]        // -> [__ap <= 0x00000000]
[02:44:01.800]    </block>
[02:44:01.800]  </sequence>
[02:44:01.800]  
[02:44:01.818]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:44:01.818]  
[02:44:01.818]  <debugvars>
[02:44:01.818]    // Pre-defined
[02:44:01.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:44:01.818]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:44:01.818]    __dp=0x00000000
[02:44:01.818]    __ap=0x00000000
[02:44:01.818]    __traceout=0x00000000      (Trace Disabled)
[02:44:01.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:44:01.818]    __FlashAddr=0x00000000
[02:44:01.818]    __FlashLen=0x00000000
[02:44:01.818]    __FlashArg=0x00000000
[02:44:01.818]    __FlashOp=0x00000000
[02:44:01.818]    __Result=0x00000000
[02:44:01.818]  </debugvars>
[02:44:01.818]  
[02:44:01.818]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:44:01.820]    <block atomic="false" info="">
[02:44:01.820]      __var deviceID = 0;
[02:44:01.820]        // -> [deviceID <= 0x00000000]
[02:44:01.820]      __var version = 0;
[02:44:01.820]        // -> [version <= 0x00000000]
[02:44:01.820]      __var partNum = 0;
[02:44:01.820]        // -> [partNum <= 0x00000000]
[02:44:01.820]      __var manuf = 0;
[02:44:01.820]        // -> [manuf <= 0x00000000]
[02:44:01.820]      __var isMSPM0G1X0X_G3X0X = 0;
[02:44:01.821]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:44:01.821]      __var isProduction = 0;
[02:44:01.821]        // -> [isProduction <= 0x00000000]
[02:44:01.821]      __var continueId = 0;
[02:44:01.822]        // -> [continueId <= 0x00000000]
[02:44:01.822]      deviceID =   Read32(0x41C40004);
[02:44:01.826]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:44:01.826]        // -> [deviceID <= 0x2BB8802F]
[02:44:01.826]      version = deviceID >> 28;
[02:44:01.826]        // -> [version <= 0x00000002]
[02:44:01.828]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:44:01.828]        // -> [partNum <= 0x0000BB88]
[02:44:01.828]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:44:01.828]        // -> [manuf <= 0x00000017]
[02:44:01.828]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:44:01.828]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:44:01.828]      isProduction = (version > 0);
[02:44:01.828]        // -> [isProduction <= 0x00000001]
[02:44:01.828]    </block>
[02:44:01.828]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:44:01.828]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:44:01.828]        // =>  FALSE
[02:44:01.829]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:44:01.829]    </control>
[02:44:01.829]    <control if="continueId == 4" while="" timeout="0" info="">
[02:44:01.829]      // if-block "continueId == 4"
[02:44:01.829]        // =>  FALSE
[02:44:01.829]      // skip if-block "continueId == 4"
[02:44:01.829]    </control>
[02:44:01.829]    <control if="!isProduction" while="" timeout="0" info="">
[02:44:01.829]      // if-block "!isProduction"
[02:44:01.829]        // =>  FALSE
[02:44:01.829]      // skip if-block "!isProduction"
[02:44:01.829]    </control>
[02:44:01.830]  </sequence>
[02:44:01.830]  
[02:44:41.827]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:44:41.827]  
[02:44:41.835]  <debugvars>
[02:44:41.835]    // Pre-defined
[02:44:41.835]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:44:41.836]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:44:41.836]    __dp=0x00000000
[02:44:41.836]    __ap=0x00000000
[02:44:41.836]    __traceout=0x00000000      (Trace Disabled)
[02:44:41.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:44:41.836]    __FlashAddr=0x00000000
[02:44:41.836]    __FlashLen=0x00000000
[02:44:41.836]    __FlashArg=0x00000000
[02:44:41.836]    __FlashOp=0x00000000
[02:44:41.836]    __Result=0x00000000
[02:44:41.836]  </debugvars>
[02:44:41.836]  
[02:44:41.836]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:44:41.836]    <block atomic="false" info="">
[02:44:41.836]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:44:41.836]        // -> [isSWJ <= 0x00000001]
[02:44:41.836]      __var hasDormant = __protocol & 0x00020000;
[02:44:41.836]        // -> [hasDormant <= 0x00000000]
[02:44:41.838]      __var protType   = __protocol & 0x0000FFFF;
[02:44:41.838]        // -> [protType <= 0x00000002]
[02:44:41.838]    </block>
[02:44:41.838]    <control if="protType == 1" while="" timeout="0" info="">
[02:44:41.838]      // if-block "protType == 1"
[02:44:41.838]        // =>  FALSE
[02:44:41.838]      // skip if-block "protType == 1"
[02:44:41.838]    </control>
[02:44:41.838]    <control if="protType == 2" while="" timeout="0" info="">
[02:44:41.838]      // if-block "protType == 2"
[02:44:41.838]        // =>  TRUE
[02:44:41.838]      <control if="isSWJ" while="" timeout="0" info="">
[02:44:41.838]        // if-block "isSWJ"
[02:44:41.839]          // =>  TRUE
[02:44:41.839]        <control if="hasDormant" while="" timeout="0" info="">
[02:44:41.839]          // if-block "hasDormant"
[02:44:41.839]            // =>  FALSE
[02:44:41.839]          // skip if-block "hasDormant"
[02:44:41.839]        </control>
[02:44:41.839]        <control if="!hasDormant" while="" timeout="0" info="">
[02:44:41.839]          // if-block "!hasDormant"
[02:44:41.839]            // =>  TRUE
[02:44:41.839]          <block atomic="false" info="">
[02:44:41.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:44:41.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:44:41.841]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:44:41.844]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:44:41.844]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:44:41.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:44:41.845]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:44:41.847]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:44:41.847]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:44:41.849]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:44:41.849]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:44:41.850]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:44:41.850]          </block>
[02:44:41.850]          // end if-block "!hasDormant"
[02:44:41.850]        </control>
[02:44:41.850]        // end if-block "isSWJ"
[02:44:41.850]      </control>
[02:44:41.850]      <control if="!isSWJ" while="" timeout="0" info="">
[02:44:41.850]        // if-block "!isSWJ"
[02:44:41.850]          // =>  FALSE
[02:44:41.851]        // skip if-block "!isSWJ"
[02:44:41.851]      </control>
[02:44:41.851]      <block atomic="false" info="">
[02:44:41.851]        ReadDP(0x0);
[02:44:41.852]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:44:41.852]      </block>
[02:44:41.852]      // end if-block "protType == 2"
[02:44:41.853]    </control>
[02:44:41.853]  </sequence>
[02:44:41.853]  
[02:44:41.856]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:44:41.856]  
[02:44:41.856]  <debugvars>
[02:44:41.856]    // Pre-defined
[02:44:41.857]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:44:41.857]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:44:41.857]    __dp=0x00000000
[02:44:41.857]    __ap=0x00000000
[02:44:41.857]    __traceout=0x00000000      (Trace Disabled)
[02:44:41.857]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:44:41.857]    __FlashAddr=0x00000000
[02:44:41.857]    __FlashLen=0x00000000
[02:44:41.858]    __FlashArg=0x00000000
[02:44:41.858]    __FlashOp=0x00000000
[02:44:41.858]    __Result=0x00000000
[02:44:41.858]  </debugvars>
[02:44:41.858]  
[02:44:41.858]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:44:41.858]    <block atomic="false" info="">
[02:44:41.858]      __var SW_DP_ABORT       = 0x0;
[02:44:41.858]        // -> [SW_DP_ABORT <= 0x00000000]
[02:44:41.858]      __var DP_CTRL_STAT      = 0x4;
[02:44:41.858]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:44:41.858]      __var DP_SELECT         = 0x8;
[02:44:41.859]        // -> [DP_SELECT <= 0x00000008]
[02:44:41.859]      __var powered_down      = 0;
[02:44:41.859]        // -> [powered_down <= 0x00000000]
[02:44:41.859]      WriteDP(DP_SELECT, 0x00000000);
[02:44:41.860]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:44:41.861]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:44:41.863]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:44:41.863]        // -> [powered_down <= 0x00000001]
[02:44:41.864]    </block>
[02:44:41.864]    <control if="powered_down" while="" timeout="0" info="">
[02:44:41.864]      // if-block "powered_down"
[02:44:41.864]        // =>  TRUE
[02:44:41.864]      <block atomic="false" info="">
[02:44:41.864]        Message(0, "Debug/System power-up request sent");
[02:44:41.866]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:44:41.868]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:44:41.868]      </block>
[02:44:41.868]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:44:41.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:44:41.870]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:44:41.870]        // while-condition  =>  FALSE
[02:44:41.870]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:44:41.870]      </control>
[02:44:41.871]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:44:41.871]        // if-block "(__protocol & 0xFFFF) == 1"
[02:44:41.871]          // =>  FALSE
[02:44:41.871]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:44:41.871]      </control>
[02:44:41.871]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:44:41.871]        // if-block "(__protocol & 0xFFFF) == 2"
[02:44:41.871]          // =>  TRUE
[02:44:41.872]        <block atomic="false" info="">
[02:44:41.872]          Message(0, "executing SWD power up");
[02:44:41.873]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:44:41.877]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:44:41.878]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:44:41.879]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:44:41.879]        </block>
[02:44:41.880]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:44:41.880]      </control>
[02:44:41.880]      // end if-block "powered_down"
[02:44:41.880]    </control>
[02:44:41.880]    <block atomic="false" info="">
[02:44:41.880]      __var DEBUG_PORT_VAL    = 0;
[02:44:41.880]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:44:41.880]      __var ACCESS_POINT_VAL  = 0;
[02:44:41.880]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:44:41.880]      __ap = 1; 
[02:44:41.880]        // -> [__ap <= 0x00000001]
[02:44:41.881]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:44:41.883]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:44:41.884]      __ap = 4;
[02:44:41.884]        // -> [__ap <= 0x00000004]
[02:44:41.885]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:44:41.887]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:44:41.888]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:44:41.888]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:44:41.890]    </block>
[02:44:41.890]    <block atomic="false" info="">
[02:44:41.890]      __var nReset = 0x80;
[02:44:41.891]        // -> [nReset <= 0x00000080]
[02:44:41.891]      __var canReadPins = 0;
[02:44:41.891]        // -> [canReadPins <= 0x00000000]
[02:44:41.891]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:44:41.892]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:44:41.892]        // -> [canReadPins <= 0x00000001]
[02:44:41.892]    </block>
[02:44:41.892]    <control if="" while="1" timeout="200" info="">
[02:44:41.892]      // while "1"  (timeout="200")
[02:44:41.892]      // while-condition  =>  TRUE
[02:44:41.892]      // while "1"  (timeout="200")
[02:44:41.892]      // while-condition  =>  TRUE
[02:44:41.892]      // while "1"  (timeout="200")
[02:44:41.893]      // while-condition  =>  TRUE
[02:44:41.893]      // while "1"  (timeout="200")
[02:44:41.893]      // while  =>  TIMEOUT
[02:44:41.893]      // end while "1"
[02:44:41.893]    </control>
[02:44:41.893]    <control if="canReadPins" while="" timeout="0" info="">
[02:44:41.893]      // if-block "canReadPins"
[02:44:41.893]        // =>  TRUE
[02:44:41.893]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:44:41.893]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:44:41.895]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:44:41.895]        // while-condition  =>  FALSE
[02:44:41.895]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:44:41.895]      </control>
[02:44:41.895]      // end if-block "canReadPins"
[02:44:41.896]    </control>
[02:44:41.896]    <control if="!canReadPins" while="" timeout="0" info="">
[02:44:41.896]      // if-block "!canReadPins"
[02:44:41.896]        // =>  FALSE
[02:44:41.896]      // skip if-block "!canReadPins"
[02:44:41.896]    </control>
[02:44:41.896]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:44:41.896]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:44:41.896]        // =>  TRUE
[02:44:41.896]      <block atomic="false" info="">
[02:44:41.896]        WriteAP(0x00, 0x190008);
[02:44:41.899]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:44:41.899]        WriteAP(0xF0, 0x01);
[02:44:41.903]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:44:41.904]      </block>
[02:44:41.904]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:44:41.904]    </control>
[02:44:41.904]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:44:41.904]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:44:41.904]        // =>  FALSE
[02:44:41.904]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:44:41.904]    </control>
[02:44:41.904]    <block atomic="false" info="">
[02:44:41.904]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:44:41.908]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:44:41.908]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:44:41.908]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:44:41.910]      __ap = 0; //lets make sure we reset the access point selection
[02:44:41.910]        // -> [__ap <= 0x00000000]
[02:44:41.910]    </block>
[02:44:41.910]  </sequence>
[02:44:41.910]  
[02:44:41.930]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:44:41.930]  
[02:44:41.930]  <debugvars>
[02:44:41.930]    // Pre-defined
[02:44:41.930]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:44:41.930]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:44:41.930]    __dp=0x00000000
[02:44:41.930]    __ap=0x00000000
[02:44:41.930]    __traceout=0x00000000      (Trace Disabled)
[02:44:41.931]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:44:41.931]    __FlashAddr=0x00000000
[02:44:41.931]    __FlashLen=0x00000000
[02:44:41.931]    __FlashArg=0x00000000
[02:44:41.931]    __FlashOp=0x00000000
[02:44:41.931]    __Result=0x00000000
[02:44:41.931]  </debugvars>
[02:44:41.931]  
[02:44:41.931]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:44:41.931]    <block atomic="false" info="">
[02:44:41.932]      __var deviceID = 0;
[02:44:41.932]        // -> [deviceID <= 0x00000000]
[02:44:41.932]      __var version = 0;
[02:44:41.932]        // -> [version <= 0x00000000]
[02:44:41.933]      __var partNum = 0;
[02:44:41.933]        // -> [partNum <= 0x00000000]
[02:44:41.933]      __var manuf = 0;
[02:44:41.933]        // -> [manuf <= 0x00000000]
[02:44:41.933]      __var isMSPM0G1X0X_G3X0X = 0;
[02:44:41.933]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:44:41.933]      __var isProduction = 0;
[02:44:41.933]        // -> [isProduction <= 0x00000000]
[02:44:41.933]      __var continueId = 0;
[02:44:41.934]        // -> [continueId <= 0x00000000]
[02:44:41.934]      deviceID =   Read32(0x41C40004);
[02:44:41.938]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:44:41.938]        // -> [deviceID <= 0x2BB8802F]
[02:44:41.938]      version = deviceID >> 28;
[02:44:41.939]        // -> [version <= 0x00000002]
[02:44:41.939]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:44:41.939]        // -> [partNum <= 0x0000BB88]
[02:44:41.939]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:44:41.939]        // -> [manuf <= 0x00000017]
[02:44:41.939]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:44:41.939]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:44:41.939]      isProduction = (version > 0);
[02:44:41.940]        // -> [isProduction <= 0x00000001]
[02:44:41.940]    </block>
[02:44:41.940]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:44:41.940]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:44:41.940]        // =>  FALSE
[02:44:41.940]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:44:41.940]    </control>
[02:44:41.940]    <control if="continueId == 4" while="" timeout="0" info="">
[02:44:41.940]      // if-block "continueId == 4"
[02:44:41.940]        // =>  FALSE
[02:44:41.940]      // skip if-block "continueId == 4"
[02:44:41.941]    </control>
[02:44:41.941]    <control if="!isProduction" while="" timeout="0" info="">
[02:44:41.941]      // if-block "!isProduction"
[02:44:41.941]        // =>  FALSE
[02:44:41.941]      // skip if-block "!isProduction"
[02:44:41.941]    </control>
[02:44:41.941]  </sequence>
[02:44:41.941]  
[02:45:09.005]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:45:09.005]  
[02:45:09.013]  <debugvars>
[02:45:09.013]    // Pre-defined
[02:45:09.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:09.013]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:09.013]    __dp=0x00000000
[02:45:09.013]    __ap=0x00000000
[02:45:09.014]    __traceout=0x00000000      (Trace Disabled)
[02:45:09.014]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:09.014]    __FlashAddr=0x00000000
[02:45:09.014]    __FlashLen=0x00000000
[02:45:09.015]    __FlashArg=0x00000000
[02:45:09.015]    __FlashOp=0x00000000
[02:45:09.015]    __Result=0x00000000
[02:45:09.015]  </debugvars>
[02:45:09.015]  
[02:45:09.015]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:45:09.015]    <block atomic="false" info="">
[02:45:09.015]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:45:09.015]        // -> [isSWJ <= 0x00000001]
[02:45:09.015]      __var hasDormant = __protocol & 0x00020000;
[02:45:09.016]        // -> [hasDormant <= 0x00000000]
[02:45:09.016]      __var protType   = __protocol & 0x0000FFFF;
[02:45:09.016]        // -> [protType <= 0x00000002]
[02:45:09.016]    </block>
[02:45:09.016]    <control if="protType == 1" while="" timeout="0" info="">
[02:45:09.016]      // if-block "protType == 1"
[02:45:09.016]        // =>  FALSE
[02:45:09.016]      // skip if-block "protType == 1"
[02:45:09.016]    </control>
[02:45:09.016]    <control if="protType == 2" while="" timeout="0" info="">
[02:45:09.016]      // if-block "protType == 2"
[02:45:09.016]        // =>  TRUE
[02:45:09.016]      <control if="isSWJ" while="" timeout="0" info="">
[02:45:09.016]        // if-block "isSWJ"
[02:45:09.018]          // =>  TRUE
[02:45:09.018]        <control if="hasDormant" while="" timeout="0" info="">
[02:45:09.018]          // if-block "hasDormant"
[02:45:09.018]            // =>  FALSE
[02:45:09.018]          // skip if-block "hasDormant"
[02:45:09.018]        </control>
[02:45:09.018]        <control if="!hasDormant" while="" timeout="0" info="">
[02:45:09.018]          // if-block "!hasDormant"
[02:45:09.018]            // =>  TRUE
[02:45:09.018]          <block atomic="false" info="">
[02:45:09.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:45:09.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:09.020]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:45:09.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:45:09.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:45:09.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:09.023]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:45:09.025]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:45:09.025]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:45:09.026]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:09.026]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:45:09.029]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:45:09.029]          </block>
[02:45:09.029]          // end if-block "!hasDormant"
[02:45:09.029]        </control>
[02:45:09.029]        // end if-block "isSWJ"
[02:45:09.029]      </control>
[02:45:09.029]      <control if="!isSWJ" while="" timeout="0" info="">
[02:45:09.029]        // if-block "!isSWJ"
[02:45:09.030]          // =>  FALSE
[02:45:09.030]        // skip if-block "!isSWJ"
[02:45:09.030]      </control>
[02:45:09.030]      <block atomic="false" info="">
[02:45:09.030]        ReadDP(0x0);
[02:45:09.031]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:45:09.031]      </block>
[02:45:09.031]      // end if-block "protType == 2"
[02:45:09.031]    </control>
[02:45:09.031]  </sequence>
[02:45:09.032]  
[02:45:09.034]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:45:09.034]  
[02:45:09.035]  <debugvars>
[02:45:09.035]    // Pre-defined
[02:45:09.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:09.035]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:09.035]    __dp=0x00000000
[02:45:09.035]    __ap=0x00000000
[02:45:09.035]    __traceout=0x00000000      (Trace Disabled)
[02:45:09.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:09.035]    __FlashAddr=0x00000000
[02:45:09.035]    __FlashLen=0x00000000
[02:45:09.035]    __FlashArg=0x00000000
[02:45:09.035]    __FlashOp=0x00000000
[02:45:09.036]    __Result=0x00000000
[02:45:09.036]  </debugvars>
[02:45:09.036]  
[02:45:09.036]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:45:09.036]    <block atomic="false" info="">
[02:45:09.036]      __var SW_DP_ABORT       = 0x0;
[02:45:09.036]        // -> [SW_DP_ABORT <= 0x00000000]
[02:45:09.037]      __var DP_CTRL_STAT      = 0x4;
[02:45:09.037]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:45:09.037]      __var DP_SELECT         = 0x8;
[02:45:09.037]        // -> [DP_SELECT <= 0x00000008]
[02:45:09.037]      __var powered_down      = 0;
[02:45:09.037]        // -> [powered_down <= 0x00000000]
[02:45:09.037]      WriteDP(DP_SELECT, 0x00000000);
[02:45:09.039]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:45:09.039]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:45:09.040]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:45:09.041]        // -> [powered_down <= 0x00000001]
[02:45:09.041]    </block>
[02:45:09.041]    <control if="powered_down" while="" timeout="0" info="">
[02:45:09.041]      // if-block "powered_down"
[02:45:09.041]        // =>  TRUE
[02:45:09.041]      <block atomic="false" info="">
[02:45:09.041]        Message(0, "Debug/System power-up request sent");
[02:45:09.044]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:45:09.045]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:45:09.045]      </block>
[02:45:09.045]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:45:09.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:45:09.047]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:45:09.048]        // while-condition  =>  FALSE
[02:45:09.048]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:45:09.048]      </control>
[02:45:09.048]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:45:09.048]        // if-block "(__protocol & 0xFFFF) == 1"
[02:45:09.049]          // =>  FALSE
[02:45:09.049]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:45:09.049]      </control>
[02:45:09.049]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:45:09.049]        // if-block "(__protocol & 0xFFFF) == 2"
[02:45:09.049]          // =>  TRUE
[02:45:09.049]        <block atomic="false" info="">
[02:45:09.050]          Message(0, "executing SWD power up");
[02:45:09.051]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:45:09.053]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:45:09.053]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:45:09.055]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:45:09.055]        </block>
[02:45:09.055]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:45:09.055]      </control>
[02:45:09.055]      // end if-block "powered_down"
[02:45:09.055]    </control>
[02:45:09.055]    <block atomic="false" info="">
[02:45:09.055]      __var DEBUG_PORT_VAL    = 0;
[02:45:09.055]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:45:09.056]      __var ACCESS_POINT_VAL  = 0;
[02:45:09.056]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:45:09.056]      __ap = 1; 
[02:45:09.056]        // -> [__ap <= 0x00000001]
[02:45:09.056]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:45:09.059]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:45:09.059]      __ap = 4;
[02:45:09.060]        // -> [__ap <= 0x00000004]
[02:45:09.060]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:09.064]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:45:09.064]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:45:09.065]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:09.066]    </block>
[02:45:09.067]    <block atomic="false" info="">
[02:45:09.067]      __var nReset = 0x80;
[02:45:09.067]        // -> [nReset <= 0x00000080]
[02:45:09.067]      __var canReadPins = 0;
[02:45:09.067]        // -> [canReadPins <= 0x00000000]
[02:45:09.067]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:45:09.069]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:45:09.069]        // -> [canReadPins <= 0x00000001]
[02:45:09.069]    </block>
[02:45:09.069]    <control if="" while="1" timeout="200" info="">
[02:45:09.069]      // while "1"  (timeout="200")
[02:45:09.069]      // while-condition  =>  TRUE
[02:45:09.069]      // while "1"  (timeout="200")
[02:45:09.069]      // while-condition  =>  TRUE
[02:45:09.069]      // while "1"  (timeout="200")
[02:45:09.069]      // while-condition  =>  TRUE
[02:45:09.069]      // while "1"  (timeout="200")
[02:45:09.069]      // while-condition  =>  TRUE
[02:45:09.069]      // while "1"  (timeout="200")
[02:45:09.070]      // while-condition  =>  TRUE
[02:45:09.070]      // while "1"  (timeout="200")
[02:45:09.070]      // while-condition  =>  TRUE
[02:45:09.070]      // while "1"  (timeout="200")
[02:45:09.070]      // while-condition  =>  TRUE
[02:45:09.070]      // while "1"  (timeout="200")
[02:45:09.070]      // while-condition  =>  TRUE
[02:45:09.070]      // while "1"  (timeout="200")
[02:45:09.070]      // while-condition  =>  TRUE
[02:45:09.070]      // while "1"  (timeout="200")
[02:45:09.070]      // while-condition  =>  TRUE
[02:45:09.070]      // while "1"  (timeout="200")
[02:45:09.072]      // while-condition  =>  TRUE
[02:45:09.072]      // while "1"  (timeout="200")
[02:45:09.072]      // while-condition  =>  TRUE
[02:45:09.072]      // while "1"  (timeout="200")
[02:45:09.072]      // while-condition  =>  TRUE
[02:45:09.072]      // while "1"  (timeout="200")
[02:45:09.072]      // while-condition  =>  TRUE
[02:45:09.072]      // while "1"  (timeout="200")
[02:45:09.072]      // while-condition  =>  TRUE
[02:45:09.073]      // while "1"  (timeout="200")
[02:45:09.073]      // while-condition  =>  TRUE
[02:45:09.073]      // while "1"  (timeout="200")
[02:45:09.073]      // while-condition  =>  TRUE
[02:45:09.073]      // while "1"  (timeout="200")
[02:45:09.073]      // while-condition  =>  TRUE
[02:45:09.073]      // while "1"  (timeout="200")
[02:45:09.073]      // while-condition  =>  TRUE
[02:45:09.073]      // while "1"  (timeout="200")
[02:45:09.073]      // while-condition  =>  TRUE
[02:45:09.073]      // while "1"  (timeout="200")
[02:45:09.074]      // while-condition  =>  TRUE
[02:45:09.074]      // while "1"  (timeout="200")
[02:45:09.074]      // while-condition  =>  TRUE
[02:45:09.074]      // while "1"  (timeout="200")
[02:45:09.074]      // while-condition  =>  TRUE
[02:45:09.074]      // while "1"  (timeout="200")
[02:45:09.074]      // while-condition  =>  TRUE
[02:45:09.074]      // while "1"  (timeout="200")
[02:45:09.074]      // while-condition  =>  TRUE
[02:45:09.075]      // while "1"  (timeout="200")
[02:45:09.075]      // while-condition  =>  TRUE
[02:45:09.075]      // while "1"  (timeout="200")
[02:45:09.075]      // while-condition  =>  TRUE
[02:45:09.075]      // while "1"  (timeout="200")
[02:45:09.075]      // while-condition  =>  TRUE
[02:45:09.075]      // while "1"  (timeout="200")
[02:45:09.075]      // while-condition  =>  TRUE
[02:45:09.075]      // while "1"  (timeout="200")
[02:45:09.075]      // while-condition  =>  TRUE
[02:45:09.075]      // while "1"  (timeout="200")
[02:45:09.075]      // while-condition  =>  TRUE
[02:45:09.075]      // while "1"  (timeout="200")
[02:45:09.076]      // while-condition  =>  TRUE
[02:45:09.076]      // while "1"  (timeout="200")
[02:45:09.076]      // while-condition  =>  TRUE
[02:45:09.076]      // while "1"  (timeout="200")
[02:45:09.076]      // while-condition  =>  TRUE
[02:45:09.076]      // while "1"  (timeout="200")
[02:45:09.076]      // while-condition  =>  TRUE
[02:45:09.076]      // while "1"  (timeout="200")
[02:45:09.076]      // while-condition  =>  TRUE
[02:45:09.076]      // while "1"  (timeout="200")
[02:45:09.076]      // while-condition  =>  TRUE
[02:45:09.076]      // while "1"  (timeout="200")
[02:45:09.076]      // while-condition  =>  TRUE
[02:45:09.077]      // while "1"  (timeout="200")
[02:45:09.077]      // while-condition  =>  TRUE
[02:45:09.077]      // while "1"  (timeout="200")
[02:45:09.078]      // while-condition  =>  TRUE
[02:45:09.078]      // while "1"  (timeout="200")
[02:45:09.078]      // while-condition  =>  TRUE
[02:45:09.078]      // while "1"  (timeout="200")
[02:45:09.078]      // while-condition  =>  TRUE
[02:45:09.078]      // while "1"  (timeout="200")
[02:45:09.078]      // while-condition  =>  TRUE
[02:45:09.078]      // while "1"  (timeout="200")
[02:45:09.078]      // while-condition  =>  TRUE
[02:45:09.078]      // while "1"  (timeout="200")
[02:45:09.078]      // while-condition  =>  TRUE
[02:45:09.079]      // while "1"  (timeout="200")
[02:45:09.079]      // while-condition  =>  TRUE
[02:45:09.079]      // while "1"  (timeout="200")
[02:45:09.079]      // while-condition  =>  TRUE
[02:45:09.079]      // while "1"  (timeout="200")
[02:45:09.079]      // while-condition  =>  TRUE
[02:45:09.079]      // while "1"  (timeout="200")
[02:45:09.079]      // while-condition  =>  TRUE
[02:45:09.079]      // while "1"  (timeout="200")
[02:45:09.079]      // while-condition  =>  TRUE
[02:45:09.080]      // while "1"  (timeout="200")
[02:45:09.080]      // while-condition  =>  TRUE
[02:45:09.080]      // while "1"  (timeout="200")
[02:45:09.080]      // while-condition  =>  TRUE
[02:45:09.080]      // while "1"  (timeout="200")
[02:45:09.080]      // while-condition  =>  TRUE
[02:45:09.080]      // while "1"  (timeout="200")
[02:45:09.080]      // while-condition  =>  TRUE
[02:45:09.080]      // while "1"  (timeout="200")
[02:45:09.080]      // while-condition  =>  TRUE
[02:45:09.080]      // while "1"  (timeout="200")
[02:45:09.081]      // while-condition  =>  TRUE
[02:45:09.081]      // while "1"  (timeout="200")
[02:45:09.081]      // while  =>  TIMEOUT
[02:45:09.081]      // end while "1"
[02:45:09.081]    </control>
[02:45:09.081]    <control if="canReadPins" while="" timeout="0" info="">
[02:45:09.081]      // if-block "canReadPins"
[02:45:09.081]        // =>  TRUE
[02:45:09.081]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:45:09.081]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:45:09.083]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:45:09.083]        // while-condition  =>  FALSE
[02:45:09.083]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:45:09.083]      </control>
[02:45:09.083]      // end if-block "canReadPins"
[02:45:09.083]    </control>
[02:45:09.083]    <control if="!canReadPins" while="" timeout="0" info="">
[02:45:09.083]      // if-block "!canReadPins"
[02:45:09.084]        // =>  FALSE
[02:45:09.084]      // skip if-block "!canReadPins"
[02:45:09.084]    </control>
[02:45:09.084]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:45:09.084]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:09.084]        // =>  TRUE
[02:45:09.084]      <block atomic="false" info="">
[02:45:09.084]        WriteAP(0x00, 0x190008);
[02:45:09.086]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:09.086]        WriteAP(0xF0, 0x01);
[02:45:09.089]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:09.089]      </block>
[02:45:09.089]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:09.090]    </control>
[02:45:09.090]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:45:09.090]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:09.090]        // =>  FALSE
[02:45:09.090]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:09.090]    </control>
[02:45:09.090]    <block atomic="false" info="">
[02:45:09.090]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:09.093]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:45:09.094]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:45:09.094]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:09.095]      __ap = 0; //lets make sure we reset the access point selection
[02:45:09.095]        // -> [__ap <= 0x00000000]
[02:45:09.095]    </block>
[02:45:09.095]  </sequence>
[02:45:09.096]  
[02:45:09.115]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:45:09.115]  
[02:45:09.115]  <debugvars>
[02:45:09.115]    // Pre-defined
[02:45:09.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:09.115]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:09.115]    __dp=0x00000000
[02:45:09.115]    __ap=0x00000000
[02:45:09.115]    __traceout=0x00000000      (Trace Disabled)
[02:45:09.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:09.116]    __FlashAddr=0x00000000
[02:45:09.116]    __FlashLen=0x00000000
[02:45:09.116]    __FlashArg=0x00000000
[02:45:09.116]    __FlashOp=0x00000000
[02:45:09.116]    __Result=0x00000000
[02:45:09.116]  </debugvars>
[02:45:09.116]  
[02:45:09.116]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:45:09.116]    <block atomic="false" info="">
[02:45:09.116]      __var deviceID = 0;
[02:45:09.116]        // -> [deviceID <= 0x00000000]
[02:45:09.117]      __var version = 0;
[02:45:09.117]        // -> [version <= 0x00000000]
[02:45:09.117]      __var partNum = 0;
[02:45:09.117]        // -> [partNum <= 0x00000000]
[02:45:09.117]      __var manuf = 0;
[02:45:09.117]        // -> [manuf <= 0x00000000]
[02:45:09.117]      __var isMSPM0G1X0X_G3X0X = 0;
[02:45:09.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:45:09.118]      __var isProduction = 0;
[02:45:09.118]        // -> [isProduction <= 0x00000000]
[02:45:09.118]      __var continueId = 0;
[02:45:09.118]        // -> [continueId <= 0x00000000]
[02:45:09.118]      deviceID =   Read32(0x41C40004);
[02:45:09.122]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:45:09.123]        // -> [deviceID <= 0x2BB8802F]
[02:45:09.123]      version = deviceID >> 28;
[02:45:09.123]        // -> [version <= 0x00000002]
[02:45:09.123]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:45:09.123]        // -> [partNum <= 0x0000BB88]
[02:45:09.123]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:45:09.123]        // -> [manuf <= 0x00000017]
[02:45:09.123]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:45:09.123]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:45:09.123]      isProduction = (version > 0);
[02:45:09.123]        // -> [isProduction <= 0x00000001]
[02:45:09.123]    </block>
[02:45:09.124]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:45:09.124]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:45:09.124]        // =>  FALSE
[02:45:09.124]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:45:09.124]    </control>
[02:45:09.124]    <control if="continueId == 4" while="" timeout="0" info="">
[02:45:09.124]      // if-block "continueId == 4"
[02:45:09.124]        // =>  FALSE
[02:45:09.124]      // skip if-block "continueId == 4"
[02:45:09.124]    </control>
[02:45:09.124]    <control if="!isProduction" while="" timeout="0" info="">
[02:45:09.125]      // if-block "!isProduction"
[02:45:09.125]        // =>  FALSE
[02:45:09.125]      // skip if-block "!isProduction"
[02:45:09.125]    </control>
[02:45:09.125]  </sequence>
[02:45:09.125]  
[02:45:31.000]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:45:31.000]  
[02:45:31.000]  <debugvars>
[02:45:31.001]    // Pre-defined
[02:45:31.001]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:31.001]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:31.001]    __dp=0x00000000
[02:45:31.001]    __ap=0x00000000
[02:45:31.001]    __traceout=0x00000000      (Trace Disabled)
[02:45:31.001]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:31.001]    __FlashAddr=0x00000000
[02:45:31.002]    __FlashLen=0x00000000
[02:45:31.002]    __FlashArg=0x00000000
[02:45:31.002]    __FlashOp=0x00000000
[02:45:31.003]    __Result=0x00000000
[02:45:31.003]  </debugvars>
[02:45:31.003]  
[02:45:31.003]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:45:31.003]    <block atomic="false" info="">
[02:45:31.004]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:45:31.004]        // -> [isSWJ <= 0x00000001]
[02:45:31.004]      __var hasDormant = __protocol & 0x00020000;
[02:45:31.004]        // -> [hasDormant <= 0x00000000]
[02:45:31.004]      __var protType   = __protocol & 0x0000FFFF;
[02:45:31.004]        // -> [protType <= 0x00000002]
[02:45:31.004]    </block>
[02:45:31.004]    <control if="protType == 1" while="" timeout="0" info="">
[02:45:31.004]      // if-block "protType == 1"
[02:45:31.004]        // =>  FALSE
[02:45:31.005]      // skip if-block "protType == 1"
[02:45:31.005]    </control>
[02:45:31.005]    <control if="protType == 2" while="" timeout="0" info="">
[02:45:31.005]      // if-block "protType == 2"
[02:45:31.005]        // =>  TRUE
[02:45:31.005]      <control if="isSWJ" while="" timeout="0" info="">
[02:45:31.005]        // if-block "isSWJ"
[02:45:31.005]          // =>  TRUE
[02:45:31.005]        <control if="hasDormant" while="" timeout="0" info="">
[02:45:31.005]          // if-block "hasDormant"
[02:45:31.005]            // =>  FALSE
[02:45:31.005]          // skip if-block "hasDormant"
[02:45:31.006]        </control>
[02:45:31.006]        <control if="!hasDormant" while="" timeout="0" info="">
[02:45:31.006]          // if-block "!hasDormant"
[02:45:31.006]            // =>  TRUE
[02:45:31.006]          <block atomic="false" info="">
[02:45:31.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:45:31.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:31.007]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:45:31.008]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:45:31.008]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:45:31.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:31.010]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:45:31.012]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:45:31.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:45:31.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:31.014]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:45:31.016]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:45:31.017]          </block>
[02:45:31.017]          // end if-block "!hasDormant"
[02:45:31.017]        </control>
[02:45:31.017]        // end if-block "isSWJ"
[02:45:31.017]      </control>
[02:45:31.017]      <control if="!isSWJ" while="" timeout="0" info="">
[02:45:31.017]        // if-block "!isSWJ"
[02:45:31.017]          // =>  FALSE
[02:45:31.018]        // skip if-block "!isSWJ"
[02:45:31.018]      </control>
[02:45:31.018]      <block atomic="false" info="">
[02:45:31.018]        ReadDP(0x0);
[02:45:31.019]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:45:31.019]      </block>
[02:45:31.019]      // end if-block "protType == 2"
[02:45:31.019]    </control>
[02:45:31.019]  </sequence>
[02:45:31.019]  
[02:45:31.022]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:45:31.022]  
[02:45:31.022]  <debugvars>
[02:45:31.022]    // Pre-defined
[02:45:31.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:31.022]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:31.022]    __dp=0x00000000
[02:45:31.022]    __ap=0x00000000
[02:45:31.022]    __traceout=0x00000000      (Trace Disabled)
[02:45:31.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:31.022]    __FlashAddr=0x00000000
[02:45:31.022]    __FlashLen=0x00000000
[02:45:31.022]    __FlashArg=0x00000000
[02:45:31.023]    __FlashOp=0x00000000
[02:45:31.024]    __Result=0x00000000
[02:45:31.024]  </debugvars>
[02:45:31.024]  
[02:45:31.024]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:45:31.024]    <block atomic="false" info="">
[02:45:31.024]      __var SW_DP_ABORT       = 0x0;
[02:45:31.024]        // -> [SW_DP_ABORT <= 0x00000000]
[02:45:31.024]      __var DP_CTRL_STAT      = 0x4;
[02:45:31.024]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:45:31.024]      __var DP_SELECT         = 0x8;
[02:45:31.024]        // -> [DP_SELECT <= 0x00000008]
[02:45:31.024]      __var powered_down      = 0;
[02:45:31.024]        // -> [powered_down <= 0x00000000]
[02:45:31.024]      WriteDP(DP_SELECT, 0x00000000);
[02:45:31.026]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:45:31.026]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:45:31.027]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:45:31.028]        // -> [powered_down <= 0x00000001]
[02:45:31.028]    </block>
[02:45:31.028]    <control if="powered_down" while="" timeout="0" info="">
[02:45:31.028]      // if-block "powered_down"
[02:45:31.028]        // =>  TRUE
[02:45:31.028]      <block atomic="false" info="">
[02:45:31.028]        Message(0, "Debug/System power-up request sent");
[02:45:31.032]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:45:31.033]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:45:31.034]      </block>
[02:45:31.034]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:45:31.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:45:31.039]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:45:31.039]        // while-condition  =>  FALSE
[02:45:31.039]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:45:31.039]      </control>
[02:45:31.039]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:45:31.039]        // if-block "(__protocol & 0xFFFF) == 1"
[02:45:31.039]          // =>  FALSE
[02:45:31.039]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:45:31.039]      </control>
[02:45:31.039]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:45:31.040]        // if-block "(__protocol & 0xFFFF) == 2"
[02:45:31.040]          // =>  TRUE
[02:45:31.040]        <block atomic="false" info="">
[02:45:31.040]          Message(0, "executing SWD power up");
[02:45:31.041]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:45:31.044]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:45:31.045]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:45:31.046]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:45:31.046]        </block>
[02:45:31.046]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:45:31.046]      </control>
[02:45:31.046]      // end if-block "powered_down"
[02:45:31.046]    </control>
[02:45:31.047]    <block atomic="false" info="">
[02:45:31.047]      __var DEBUG_PORT_VAL    = 0;
[02:45:31.047]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:45:31.047]      __var ACCESS_POINT_VAL  = 0;
[02:45:31.047]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:45:31.047]      __ap = 1; 
[02:45:31.047]        // -> [__ap <= 0x00000001]
[02:45:31.047]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:45:31.050]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:45:31.050]      __ap = 4;
[02:45:31.051]        // -> [__ap <= 0x00000004]
[02:45:31.051]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:31.054]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:45:31.054]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:45:31.054]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:31.055]    </block>
[02:45:31.055]    <block atomic="false" info="">
[02:45:31.056]      __var nReset = 0x80;
[02:45:31.056]        // -> [nReset <= 0x00000080]
[02:45:31.056]      __var canReadPins = 0;
[02:45:31.056]        // -> [canReadPins <= 0x00000000]
[02:45:31.056]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:45:31.057]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:45:31.057]        // -> [canReadPins <= 0x00000001]
[02:45:31.058]    </block>
[02:45:31.058]    <control if="" while="1" timeout="200" info="">
[02:45:31.058]      // while "1"  (timeout="200")
[02:45:31.058]      // while-condition  =>  TRUE
[02:45:31.058]      // while "1"  (timeout="200")
[02:45:31.058]      // while-condition  =>  TRUE
[02:45:31.058]      // while "1"  (timeout="200")
[02:45:31.058]      // while-condition  =>  TRUE
[02:45:31.058]      // while "1"  (timeout="200")
[02:45:31.058]      // while-condition  =>  TRUE
[02:45:31.058]      // while "1"  (timeout="200")
[02:45:31.058]      // while-condition  =>  TRUE
[02:45:31.058]      // while "1"  (timeout="200")
[02:45:31.059]      // while-condition  =>  TRUE
[02:45:31.059]      // while "1"  (timeout="200")
[02:45:31.059]      // while-condition  =>  TRUE
[02:45:31.059]      // while "1"  (timeout="200")
[02:45:31.059]      // while-condition  =>  TRUE
[02:45:31.059]      // while "1"  (timeout="200")
[02:45:31.059]      // while-condition  =>  TRUE
[02:45:31.059]      // while "1"  (timeout="200")
[02:45:31.059]      // while-condition  =>  TRUE
[02:45:31.061]      // while "1"  (timeout="200")
[02:45:31.061]      // while-condition  =>  TRUE
[02:45:31.061]      // while "1"  (timeout="200")
[02:45:31.061]      // while-condition  =>  TRUE
[02:45:31.061]      // while "1"  (timeout="200")
[02:45:31.061]      // while-condition  =>  TRUE
[02:45:31.061]      // while "1"  (timeout="200")
[02:45:31.061]      // while-condition  =>  TRUE
[02:45:31.061]      // while "1"  (timeout="200")
[02:45:31.061]      // while-condition  =>  TRUE
[02:45:31.061]      // while "1"  (timeout="200")
[02:45:31.062]      // while-condition  =>  TRUE
[02:45:31.062]      // while "1"  (timeout="200")
[02:45:31.062]      // while-condition  =>  TRUE
[02:45:31.062]      // while "1"  (timeout="200")
[02:45:31.062]      // while-condition  =>  TRUE
[02:45:31.062]      // while "1"  (timeout="200")
[02:45:31.062]      // while-condition  =>  TRUE
[02:45:31.063]      // while "1"  (timeout="200")
[02:45:31.063]      // while-condition  =>  TRUE
[02:45:31.063]      // while "1"  (timeout="200")
[02:45:31.063]      // while-condition  =>  TRUE
[02:45:31.063]      // while "1"  (timeout="200")
[02:45:31.063]      // while-condition  =>  TRUE
[02:45:31.063]      // while "1"  (timeout="200")
[02:45:31.064]      // while-condition  =>  TRUE
[02:45:31.064]      // while "1"  (timeout="200")
[02:45:31.064]      // while-condition  =>  TRUE
[02:45:31.064]      // while "1"  (timeout="200")
[02:45:31.064]      // while-condition  =>  TRUE
[02:45:31.064]      // while "1"  (timeout="200")
[02:45:31.064]      // while-condition  =>  TRUE
[02:45:31.064]      // while "1"  (timeout="200")
[02:45:31.064]      // while-condition  =>  TRUE
[02:45:31.065]      // while "1"  (timeout="200")
[02:45:31.065]      // while-condition  =>  TRUE
[02:45:31.065]      // while "1"  (timeout="200")
[02:45:31.065]      // while-condition  =>  TRUE
[02:45:31.065]      // while "1"  (timeout="200")
[02:45:31.065]      // while-condition  =>  TRUE
[02:45:31.065]      // while "1"  (timeout="200")
[02:45:31.065]      // while  =>  TIMEOUT
[02:45:31.065]      // end while "1"
[02:45:31.065]    </control>
[02:45:31.066]    <control if="canReadPins" while="" timeout="0" info="">
[02:45:31.066]      // if-block "canReadPins"
[02:45:31.066]        // =>  TRUE
[02:45:31.066]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:45:31.066]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:45:31.068]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:45:31.068]        // while-condition  =>  FALSE
[02:45:31.068]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:45:31.068]      </control>
[02:45:31.068]      // end if-block "canReadPins"
[02:45:31.068]    </control>
[02:45:31.068]    <control if="!canReadPins" while="" timeout="0" info="">
[02:45:31.068]      // if-block "!canReadPins"
[02:45:31.068]        // =>  FALSE
[02:45:31.068]      // skip if-block "!canReadPins"
[02:45:31.069]    </control>
[02:45:31.069]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:45:31.069]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:31.069]        // =>  TRUE
[02:45:31.069]      <block atomic="false" info="">
[02:45:31.069]        WriteAP(0x00, 0x190008);
[02:45:31.070]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:31.070]        WriteAP(0xF0, 0x01);
[02:45:31.073]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:31.073]      </block>
[02:45:31.073]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:31.074]    </control>
[02:45:31.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:45:31.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:31.074]        // =>  FALSE
[02:45:31.074]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:31.074]    </control>
[02:45:31.074]    <block atomic="false" info="">
[02:45:31.074]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:31.077]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:45:31.078]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:45:31.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:31.079]      __ap = 0; //lets make sure we reset the access point selection
[02:45:31.079]        // -> [__ap <= 0x00000000]
[02:45:31.079]    </block>
[02:45:31.079]  </sequence>
[02:45:31.079]  
[02:45:31.098]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:45:31.098]  
[02:45:31.098]  <debugvars>
[02:45:31.098]    // Pre-defined
[02:45:31.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:31.099]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:31.099]    __dp=0x00000000
[02:45:31.099]    __ap=0x00000000
[02:45:31.099]    __traceout=0x00000000      (Trace Disabled)
[02:45:31.099]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:31.100]    __FlashAddr=0x00000000
[02:45:31.100]    __FlashLen=0x00000000
[02:45:31.100]    __FlashArg=0x00000000
[02:45:31.100]    __FlashOp=0x00000000
[02:45:31.100]    __Result=0x00000000
[02:45:31.100]  </debugvars>
[02:45:31.100]  
[02:45:31.101]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:45:31.101]    <block atomic="false" info="">
[02:45:31.101]      __var deviceID = 0;
[02:45:31.101]        // -> [deviceID <= 0x00000000]
[02:45:31.101]      __var version = 0;
[02:45:31.101]        // -> [version <= 0x00000000]
[02:45:31.101]      __var partNum = 0;
[02:45:31.101]        // -> [partNum <= 0x00000000]
[02:45:31.101]      __var manuf = 0;
[02:45:31.101]        // -> [manuf <= 0x00000000]
[02:45:31.101]      __var isMSPM0G1X0X_G3X0X = 0;
[02:45:31.101]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:45:31.101]      __var isProduction = 0;
[02:45:31.101]        // -> [isProduction <= 0x00000000]
[02:45:31.102]      __var continueId = 0;
[02:45:31.102]        // -> [continueId <= 0x00000000]
[02:45:31.102]      deviceID =   Read32(0x41C40004);
[02:45:31.106]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:45:31.106]        // -> [deviceID <= 0x2BB8802F]
[02:45:31.107]      version = deviceID >> 28;
[02:45:31.107]        // -> [version <= 0x00000002]
[02:45:31.107]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:45:31.107]        // -> [partNum <= 0x0000BB88]
[02:45:31.107]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:45:31.107]        // -> [manuf <= 0x00000017]
[02:45:31.107]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:45:31.107]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:45:31.107]      isProduction = (version > 0);
[02:45:31.107]        // -> [isProduction <= 0x00000001]
[02:45:31.108]    </block>
[02:45:31.108]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:45:31.108]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:45:31.108]        // =>  FALSE
[02:45:31.108]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:45:31.108]    </control>
[02:45:31.108]    <control if="continueId == 4" while="" timeout="0" info="">
[02:45:31.108]      // if-block "continueId == 4"
[02:45:31.108]        // =>  FALSE
[02:45:31.108]      // skip if-block "continueId == 4"
[02:45:31.108]    </control>
[02:45:31.109]    <control if="!isProduction" while="" timeout="0" info="">
[02:45:31.109]      // if-block "!isProduction"
[02:45:31.109]        // =>  FALSE
[02:45:31.109]      // skip if-block "!isProduction"
[02:45:31.109]    </control>
[02:45:31.109]  </sequence>
[02:45:31.109]  
[02:45:58.761]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:45:58.761]  
[02:45:58.761]  <debugvars>
[02:45:58.761]    // Pre-defined
[02:45:58.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:58.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:58.761]    __dp=0x00000000
[02:45:58.761]    __ap=0x00000000
[02:45:58.761]    __traceout=0x00000000      (Trace Disabled)
[02:45:58.761]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:58.762]    __FlashAddr=0x00000000
[02:45:58.762]    __FlashLen=0x00000000
[02:45:58.762]    __FlashArg=0x00000000
[02:45:58.762]    __FlashOp=0x00000000
[02:45:58.762]    __Result=0x00000000
[02:45:58.762]  </debugvars>
[02:45:58.762]  
[02:45:58.762]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:45:58.762]    <block atomic="false" info="">
[02:45:58.762]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:45:58.763]        // -> [isSWJ <= 0x00000001]
[02:45:58.763]      __var hasDormant = __protocol & 0x00020000;
[02:45:58.763]        // -> [hasDormant <= 0x00000000]
[02:45:58.763]      __var protType   = __protocol & 0x0000FFFF;
[02:45:58.763]        // -> [protType <= 0x00000002]
[02:45:58.763]    </block>
[02:45:58.763]    <control if="protType == 1" while="" timeout="0" info="">
[02:45:58.763]      // if-block "protType == 1"
[02:45:58.763]        // =>  FALSE
[02:45:58.764]      // skip if-block "protType == 1"
[02:45:58.764]    </control>
[02:45:58.764]    <control if="protType == 2" while="" timeout="0" info="">
[02:45:58.764]      // if-block "protType == 2"
[02:45:58.765]        // =>  TRUE
[02:45:58.765]      <control if="isSWJ" while="" timeout="0" info="">
[02:45:58.765]        // if-block "isSWJ"
[02:45:58.765]          // =>  TRUE
[02:45:58.765]        <control if="hasDormant" while="" timeout="0" info="">
[02:45:58.765]          // if-block "hasDormant"
[02:45:58.765]            // =>  FALSE
[02:45:58.765]          // skip if-block "hasDormant"
[02:45:58.765]        </control>
[02:45:58.765]        <control if="!hasDormant" while="" timeout="0" info="">
[02:45:58.765]          // if-block "!hasDormant"
[02:45:58.765]            // =>  TRUE
[02:45:58.765]          <block atomic="false" info="">
[02:45:58.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:45:58.767]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:58.767]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:45:58.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:45:58.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:45:58.770]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:58.771]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:45:58.772]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:45:58.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:45:58.774]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:58.774]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:45:58.775]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:45:58.775]          </block>
[02:45:58.775]          // end if-block "!hasDormant"
[02:45:58.776]        </control>
[02:45:58.776]        // end if-block "isSWJ"
[02:45:58.776]      </control>
[02:45:58.776]      <control if="!isSWJ" while="" timeout="0" info="">
[02:45:58.776]        // if-block "!isSWJ"
[02:45:58.776]          // =>  FALSE
[02:45:58.776]        // skip if-block "!isSWJ"
[02:45:58.776]      </control>
[02:45:58.777]      <block atomic="false" info="">
[02:45:58.777]        ReadDP(0x0);
[02:45:58.777]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:45:58.778]      </block>
[02:45:58.778]      // end if-block "protType == 2"
[02:45:58.778]    </control>
[02:45:58.778]  </sequence>
[02:45:58.778]  
[02:45:58.782]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:45:58.782]  
[02:45:58.782]  <debugvars>
[02:45:58.783]    // Pre-defined
[02:45:58.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:58.783]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:58.783]    __dp=0x00000000
[02:45:58.783]    __ap=0x00000000
[02:45:58.783]    __traceout=0x00000000      (Trace Disabled)
[02:45:58.783]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:58.783]    __FlashAddr=0x00000000
[02:45:58.783]    __FlashLen=0x00000000
[02:45:58.784]    __FlashArg=0x00000000
[02:45:58.784]    __FlashOp=0x00000000
[02:45:58.784]    __Result=0x00000000
[02:45:58.784]  </debugvars>
[02:45:58.784]  
[02:45:58.784]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:45:58.784]    <block atomic="false" info="">
[02:45:58.784]      __var SW_DP_ABORT       = 0x0;
[02:45:58.784]        // -> [SW_DP_ABORT <= 0x00000000]
[02:45:58.784]      __var DP_CTRL_STAT      = 0x4;
[02:45:58.784]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:45:58.785]      __var DP_SELECT         = 0x8;
[02:45:58.785]        // -> [DP_SELECT <= 0x00000008]
[02:45:58.785]      __var powered_down      = 0;
[02:45:58.785]        // -> [powered_down <= 0x00000000]
[02:45:58.785]      WriteDP(DP_SELECT, 0x00000000);
[02:45:58.786]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:45:58.786]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:45:58.788]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:45:58.788]        // -> [powered_down <= 0x00000001]
[02:45:58.788]    </block>
[02:45:58.788]    <control if="powered_down" while="" timeout="0" info="">
[02:45:58.789]      // if-block "powered_down"
[02:45:58.789]        // =>  TRUE
[02:45:58.789]      <block atomic="false" info="">
[02:45:58.789]        Message(0, "Debug/System power-up request sent");
[02:45:58.792]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:45:58.796]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:45:58.796]      </block>
[02:45:58.796]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:45:58.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:45:58.798]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:45:58.798]        // while-condition  =>  FALSE
[02:45:58.798]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:45:58.798]      </control>
[02:45:58.798]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:45:58.798]        // if-block "(__protocol & 0xFFFF) == 1"
[02:45:58.798]          // =>  FALSE
[02:45:58.798]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:45:58.798]      </control>
[02:45:58.798]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:45:58.798]        // if-block "(__protocol & 0xFFFF) == 2"
[02:45:58.798]          // =>  TRUE
[02:45:58.798]        <block atomic="false" info="">
[02:45:58.799]          Message(0, "executing SWD power up");
[02:45:58.801]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:45:58.802]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:45:58.802]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:45:58.804]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:45:58.804]        </block>
[02:45:58.804]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:45:58.804]      </control>
[02:45:58.804]      // end if-block "powered_down"
[02:45:58.804]    </control>
[02:45:58.804]    <block atomic="false" info="">
[02:45:58.804]      __var DEBUG_PORT_VAL    = 0;
[02:45:58.805]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:45:58.805]      __var ACCESS_POINT_VAL  = 0;
[02:45:58.805]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:45:58.805]      __ap = 1; 
[02:45:58.805]        // -> [__ap <= 0x00000001]
[02:45:58.805]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:45:58.811]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:45:58.811]      __ap = 4;
[02:45:58.812]        // -> [__ap <= 0x00000004]
[02:45:58.812]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:58.815]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:45:58.815]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:45:58.815]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:58.818]    </block>
[02:45:58.818]    <block atomic="false" info="">
[02:45:58.818]      __var nReset = 0x80;
[02:45:58.818]        // -> [nReset <= 0x00000080]
[02:45:58.818]      __var canReadPins = 0;
[02:45:58.818]        // -> [canReadPins <= 0x00000000]
[02:45:58.818]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:45:58.819]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:45:58.819]        // -> [canReadPins <= 0x00000001]
[02:45:58.819]    </block>
[02:45:58.819]    <control if="" while="1" timeout="200" info="">
[02:45:58.819]      // while "1"  (timeout="200")
[02:45:58.819]      // while-condition  =>  TRUE
[02:45:58.819]      // while "1"  (timeout="200")
[02:45:58.819]      // while-condition  =>  TRUE
[02:45:58.819]      // while "1"  (timeout="200")
[02:45:58.820]      // while-condition  =>  TRUE
[02:45:58.820]      // while "1"  (timeout="200")
[02:45:58.820]      // while-condition  =>  TRUE
[02:45:58.820]      // while "1"  (timeout="200")
[02:45:58.820]      // while-condition  =>  TRUE
[02:45:58.820]      // while "1"  (timeout="200")
[02:45:58.820]      // while-condition  =>  TRUE
[02:45:58.820]      // while "1"  (timeout="200")
[02:45:58.820]      // while-condition  =>  TRUE
[02:45:58.821]      // while "1"  (timeout="200")
[02:45:58.821]      // while-condition  =>  TRUE
[02:45:58.821]      // while "1"  (timeout="200")
[02:45:58.821]      // while-condition  =>  TRUE
[02:45:58.821]      // while "1"  (timeout="200")
[02:45:58.821]      // while-condition  =>  TRUE
[02:45:58.821]      // while "1"  (timeout="200")
[02:45:58.821]      // while-condition  =>  TRUE
[02:45:58.821]      // while "1"  (timeout="200")
[02:45:58.823]      // while-condition  =>  TRUE
[02:45:58.823]      // while "1"  (timeout="200")
[02:45:58.823]      // while-condition  =>  TRUE
[02:45:58.823]      // while "1"  (timeout="200")
[02:45:58.823]      // while-condition  =>  TRUE
[02:45:58.823]      // while "1"  (timeout="200")
[02:45:58.823]      // while-condition  =>  TRUE
[02:45:58.823]      // while "1"  (timeout="200")
[02:45:58.823]      // while-condition  =>  TRUE
[02:45:58.823]      // while "1"  (timeout="200")
[02:45:58.823]      // while-condition  =>  TRUE
[02:45:58.823]      // while "1"  (timeout="200")
[02:45:58.824]      // while-condition  =>  TRUE
[02:45:58.824]      // while "1"  (timeout="200")
[02:45:58.824]      // while-condition  =>  TRUE
[02:45:58.824]      // while "1"  (timeout="200")
[02:45:58.824]      // while-condition  =>  TRUE
[02:45:58.824]      // while "1"  (timeout="200")
[02:45:58.824]      // while-condition  =>  TRUE
[02:45:58.824]      // while "1"  (timeout="200")
[02:45:58.824]      // while-condition  =>  TRUE
[02:45:58.824]      // while "1"  (timeout="200")
[02:45:58.824]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.825]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.825]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.825]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.825]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.825]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.825]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.825]      // while-condition  =>  TRUE
[02:45:58.825]      // while "1"  (timeout="200")
[02:45:58.826]      // while-condition  =>  TRUE
[02:45:58.826]      // while "1"  (timeout="200")
[02:45:58.826]      // while-condition  =>  TRUE
[02:45:58.826]      // while "1"  (timeout="200")
[02:45:58.826]      // while-condition  =>  TRUE
[02:45:58.826]      // while "1"  (timeout="200")
[02:45:58.826]      // while-condition  =>  TRUE
[02:45:58.826]      // while "1"  (timeout="200")
[02:45:58.826]      // while-condition  =>  TRUE
[02:45:58.826]      // while "1"  (timeout="200")
[02:45:58.826]      // while-condition  =>  TRUE
[02:45:58.828]      // while "1"  (timeout="200")
[02:45:58.828]      // while-condition  =>  TRUE
[02:45:58.828]      // while "1"  (timeout="200")
[02:45:58.828]      // while-condition  =>  TRUE
[02:45:58.828]      // while "1"  (timeout="200")
[02:45:58.828]      // while-condition  =>  TRUE
[02:45:58.828]      // while "1"  (timeout="200")
[02:45:58.828]      // while-condition  =>  TRUE
[02:45:58.828]      // while "1"  (timeout="200")
[02:45:58.828]      // while-condition  =>  TRUE
[02:45:58.828]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.830]      // while-condition  =>  TRUE
[02:45:58.830]      // while "1"  (timeout="200")
[02:45:58.831]      // while-condition  =>  TRUE
[02:45:58.831]      // while "1"  (timeout="200")
[02:45:58.831]      // while  =>  TIMEOUT
[02:45:58.831]      // end while "1"
[02:45:58.831]    </control>
[02:45:58.831]    <control if="canReadPins" while="" timeout="0" info="">
[02:45:58.831]      // if-block "canReadPins"
[02:45:58.831]        // =>  TRUE
[02:45:58.831]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:45:58.831]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:45:58.833]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:45:58.834]        // while-condition  =>  FALSE
[02:45:58.834]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:45:58.834]      </control>
[02:45:58.834]      // end if-block "canReadPins"
[02:45:58.834]    </control>
[02:45:58.834]    <control if="!canReadPins" while="" timeout="0" info="">
[02:45:58.834]      // if-block "!canReadPins"
[02:45:58.835]        // =>  FALSE
[02:45:58.835]      // skip if-block "!canReadPins"
[02:45:58.835]    </control>
[02:45:58.835]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:45:58.835]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:58.835]        // =>  TRUE
[02:45:58.835]      <block atomic="false" info="">
[02:45:58.835]        WriteAP(0x00, 0x190008);
[02:45:58.837]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:58.837]        WriteAP(0xF0, 0x01);
[02:45:58.840]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:58.840]      </block>
[02:45:58.841]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:58.841]    </control>
[02:45:58.841]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:45:58.841]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:58.841]        // =>  FALSE
[02:45:58.841]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:58.841]    </control>
[02:45:58.841]    <block atomic="false" info="">
[02:45:58.841]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:58.844]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:45:58.844]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:45:58.845]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:58.846]      __ap = 0; //lets make sure we reset the access point selection
[02:45:58.846]        // -> [__ap <= 0x00000000]
[02:45:58.846]    </block>
[02:45:58.846]  </sequence>
[02:45:58.846]  
[02:45:58.864]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:45:58.864]  
[02:45:58.864]  <debugvars>
[02:45:58.865]    // Pre-defined
[02:45:58.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:58.865]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:58.865]    __dp=0x00000000
[02:45:58.865]    __ap=0x00000000
[02:45:58.865]    __traceout=0x00000000      (Trace Disabled)
[02:45:58.865]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:58.865]    __FlashAddr=0x00000000
[02:45:58.865]    __FlashLen=0x00000000
[02:45:58.865]    __FlashArg=0x00000000
[02:45:58.867]    __FlashOp=0x00000000
[02:45:58.867]    __Result=0x00000000
[02:45:58.867]  </debugvars>
[02:45:58.867]  
[02:45:58.867]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:45:58.867]    <block atomic="false" info="">
[02:45:58.867]      __var deviceID = 0;
[02:45:58.867]        // -> [deviceID <= 0x00000000]
[02:45:58.867]      __var version = 0;
[02:45:58.867]        // -> [version <= 0x00000000]
[02:45:58.868]      __var partNum = 0;
[02:45:58.868]        // -> [partNum <= 0x00000000]
[02:45:58.868]      __var manuf = 0;
[02:45:58.868]        // -> [manuf <= 0x00000000]
[02:45:58.868]      __var isMSPM0G1X0X_G3X0X = 0;
[02:45:58.868]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:45:58.868]      __var isProduction = 0;
[02:45:58.869]        // -> [isProduction <= 0x00000000]
[02:45:58.869]      __var continueId = 0;
[02:45:58.869]        // -> [continueId <= 0x00000000]
[02:45:58.869]      deviceID =   Read32(0x41C40004);
[02:45:58.873]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:45:58.874]        // -> [deviceID <= 0x2BB8802F]
[02:45:58.874]      version = deviceID >> 28;
[02:45:58.874]        // -> [version <= 0x00000002]
[02:45:58.874]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:45:58.874]        // -> [partNum <= 0x0000BB88]
[02:45:58.874]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:45:58.874]        // -> [manuf <= 0x00000017]
[02:45:58.874]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:45:58.874]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:45:58.875]      isProduction = (version > 0);
[02:45:58.875]        // -> [isProduction <= 0x00000001]
[02:45:58.875]    </block>
[02:45:58.875]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:45:58.875]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:45:58.875]        // =>  FALSE
[02:45:58.875]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:45:58.875]    </control>
[02:45:58.875]    <control if="continueId == 4" while="" timeout="0" info="">
[02:45:58.875]      // if-block "continueId == 4"
[02:45:58.875]        // =>  FALSE
[02:45:58.876]      // skip if-block "continueId == 4"
[02:45:58.876]    </control>
[02:45:58.876]    <control if="!isProduction" while="" timeout="0" info="">
[02:45:58.876]      // if-block "!isProduction"
[02:45:58.876]        // =>  FALSE
[02:45:58.876]      // skip if-block "!isProduction"
[02:45:58.876]    </control>
[02:45:58.876]  </sequence>
[02:45:58.876]  
[02:46:34.323]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:46:34.323]  
[02:46:34.324]  <debugvars>
[02:46:34.324]    // Pre-defined
[02:46:34.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:46:34.325]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:46:34.325]    __dp=0x00000000
[02:46:34.325]    __ap=0x00000000
[02:46:34.325]    __traceout=0x00000000      (Trace Disabled)
[02:46:34.325]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:46:34.325]    __FlashAddr=0x00000000
[02:46:34.325]    __FlashLen=0x00000000
[02:46:34.325]    __FlashArg=0x00000000
[02:46:34.325]    __FlashOp=0x00000000
[02:46:34.325]    __Result=0x00000000
[02:46:34.326]  </debugvars>
[02:46:34.326]  
[02:46:34.326]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:46:34.326]    <block atomic="false" info="">
[02:46:34.326]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:46:34.326]        // -> [isSWJ <= 0x00000001]
[02:46:34.326]      __var hasDormant = __protocol & 0x00020000;
[02:46:34.326]        // -> [hasDormant <= 0x00000000]
[02:46:34.326]      __var protType   = __protocol & 0x0000FFFF;
[02:46:34.326]        // -> [protType <= 0x00000002]
[02:46:34.327]    </block>
[02:46:34.327]    <control if="protType == 1" while="" timeout="0" info="">
[02:46:34.327]      // if-block "protType == 1"
[02:46:34.327]        // =>  FALSE
[02:46:34.327]      // skip if-block "protType == 1"
[02:46:34.327]    </control>
[02:46:34.327]    <control if="protType == 2" while="" timeout="0" info="">
[02:46:34.327]      // if-block "protType == 2"
[02:46:34.327]        // =>  TRUE
[02:46:34.328]      <control if="isSWJ" while="" timeout="0" info="">
[02:46:34.328]        // if-block "isSWJ"
[02:46:34.328]          // =>  TRUE
[02:46:34.328]        <control if="hasDormant" while="" timeout="0" info="">
[02:46:34.328]          // if-block "hasDormant"
[02:46:34.328]            // =>  FALSE
[02:46:34.328]          // skip if-block "hasDormant"
[02:46:34.328]        </control>
[02:46:34.328]        <control if="!hasDormant" while="" timeout="0" info="">
[02:46:34.328]          // if-block "!hasDormant"
[02:46:34.328]            // =>  TRUE
[02:46:34.328]          <block atomic="false" info="">
[02:46:34.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:46:34.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:46:34.330]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:46:34.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:46:34.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:46:34.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:46:34.332]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:46:34.334]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:46:34.334]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:46:34.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:46:34.336]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:46:34.337]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:46:34.337]          </block>
[02:46:34.337]          // end if-block "!hasDormant"
[02:46:34.337]        </control>
[02:46:34.338]        // end if-block "isSWJ"
[02:46:34.338]      </control>
[02:46:34.338]      <control if="!isSWJ" while="" timeout="0" info="">
[02:46:34.338]        // if-block "!isSWJ"
[02:46:34.338]          // =>  FALSE
[02:46:34.338]        // skip if-block "!isSWJ"
[02:46:34.338]      </control>
[02:46:34.338]      <block atomic="false" info="">
[02:46:34.338]        ReadDP(0x0);
[02:46:34.340]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:46:34.340]      </block>
[02:46:34.342]      // end if-block "protType == 2"
[02:46:34.342]    </control>
[02:46:34.342]  </sequence>
[02:46:34.342]  
[02:46:34.345]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:46:34.345]  
[02:46:34.345]  <debugvars>
[02:46:34.345]    // Pre-defined
[02:46:34.345]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:46:34.345]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:46:34.345]    __dp=0x00000000
[02:46:34.345]    __ap=0x00000000
[02:46:34.345]    __traceout=0x00000000      (Trace Disabled)
[02:46:34.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:46:34.346]    __FlashAddr=0x00000000
[02:46:34.346]    __FlashLen=0x00000000
[02:46:34.346]    __FlashArg=0x00000000
[02:46:34.346]    __FlashOp=0x00000000
[02:46:34.346]    __Result=0x00000000
[02:46:34.346]  </debugvars>
[02:46:34.346]  
[02:46:34.346]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:46:34.346]    <block atomic="false" info="">
[02:46:34.346]      __var SW_DP_ABORT       = 0x0;
[02:46:34.346]        // -> [SW_DP_ABORT <= 0x00000000]
[02:46:34.346]      __var DP_CTRL_STAT      = 0x4;
[02:46:34.347]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:46:34.347]      __var DP_SELECT         = 0x8;
[02:46:34.347]        // -> [DP_SELECT <= 0x00000008]
[02:46:34.347]      __var powered_down      = 0;
[02:46:34.347]        // -> [powered_down <= 0x00000000]
[02:46:34.347]      WriteDP(DP_SELECT, 0x00000000);
[02:46:34.349]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:46:34.349]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:46:34.350]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:46:34.351]        // -> [powered_down <= 0x00000001]
[02:46:34.351]    </block>
[02:46:34.351]    <control if="powered_down" while="" timeout="0" info="">
[02:46:34.351]      // if-block "powered_down"
[02:46:34.351]        // =>  TRUE
[02:46:34.351]      <block atomic="false" info="">
[02:46:34.351]        Message(0, "Debug/System power-up request sent");
[02:46:34.354]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:46:34.355]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:46:34.355]      </block>
[02:46:34.355]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:46:34.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:46:34.357]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:46:34.357]        // while-condition  =>  FALSE
[02:46:34.358]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:46:34.358]      </control>
[02:46:34.358]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:46:34.358]        // if-block "(__protocol & 0xFFFF) == 1"
[02:46:34.358]          // =>  FALSE
[02:46:34.358]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:46:34.359]      </control>
[02:46:34.359]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:46:34.359]        // if-block "(__protocol & 0xFFFF) == 2"
[02:46:34.359]          // =>  TRUE
[02:46:34.359]        <block atomic="false" info="">
[02:46:34.359]          Message(0, "executing SWD power up");
[02:46:34.361]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:46:34.363]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:46:34.363]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:46:34.364]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:46:34.364]        </block>
[02:46:34.364]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:46:34.365]      </control>
[02:46:34.365]      // end if-block "powered_down"
[02:46:34.365]    </control>
[02:46:34.365]    <block atomic="false" info="">
[02:46:34.365]      __var DEBUG_PORT_VAL    = 0;
[02:46:34.366]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:46:34.366]      __var ACCESS_POINT_VAL  = 0;
[02:46:34.366]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:46:34.366]      __ap = 1; 
[02:46:34.366]        // -> [__ap <= 0x00000001]
[02:46:34.366]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:46:34.369]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:46:34.370]      __ap = 4;
[02:46:34.370]        // -> [__ap <= 0x00000004]
[02:46:34.370]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:46:34.373]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:46:34.373]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:46:34.373]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:46:34.375]    </block>
[02:46:34.375]    <block atomic="false" info="">
[02:46:34.375]      __var nReset = 0x80;
[02:46:34.375]        // -> [nReset <= 0x00000080]
[02:46:34.375]      __var canReadPins = 0;
[02:46:34.375]        // -> [canReadPins <= 0x00000000]
[02:46:34.375]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:46:34.377]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:46:34.377]        // -> [canReadPins <= 0x00000001]
[02:46:34.377]    </block>
[02:46:34.377]    <control if="" while="1" timeout="200" info="">
[02:46:34.377]      // while "1"  (timeout="200")
[02:46:34.377]      // while-condition  =>  TRUE
[02:46:34.377]      // while "1"  (timeout="200")
[02:46:34.378]      // while-condition  =>  TRUE
[02:46:34.378]      // while "1"  (timeout="200")
[02:46:34.378]      // while  =>  TIMEOUT
[02:46:34.378]      // end while "1"
[02:46:34.378]    </control>
[02:46:34.378]    <control if="canReadPins" while="" timeout="0" info="">
[02:46:34.379]      // if-block "canReadPins"
[02:46:34.379]        // =>  TRUE
[02:46:34.379]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:46:34.379]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:46:34.380]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:46:34.380]        // while-condition  =>  FALSE
[02:46:34.381]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:46:34.381]      </control>
[02:46:34.381]      // end if-block "canReadPins"
[02:46:34.381]    </control>
[02:46:34.381]    <control if="!canReadPins" while="" timeout="0" info="">
[02:46:34.381]      // if-block "!canReadPins"
[02:46:34.381]        // =>  FALSE
[02:46:34.381]      // skip if-block "!canReadPins"
[02:46:34.381]    </control>
[02:46:34.381]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:46:34.381]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:46:34.382]        // =>  TRUE
[02:46:34.382]      <block atomic="false" info="">
[02:46:34.382]        WriteAP(0x00, 0x190008);
[02:46:34.383]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:46:34.383]        WriteAP(0xF0, 0x01);
[02:46:34.387]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:46:34.387]      </block>
[02:46:34.387]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:46:34.387]    </control>
[02:46:34.387]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:46:34.387]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:46:34.387]        // =>  FALSE
[02:46:34.387]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:46:34.388]    </control>
[02:46:34.388]    <block atomic="false" info="">
[02:46:34.388]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:46:34.391]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:46:34.391]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:46:34.391]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:46:34.393]      __ap = 0; //lets make sure we reset the access point selection
[02:46:34.393]        // -> [__ap <= 0x00000000]
[02:46:34.393]    </block>
[02:46:34.393]  </sequence>
[02:46:34.393]  
[02:46:34.412]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:46:34.412]  
[02:46:34.412]  <debugvars>
[02:46:34.412]    // Pre-defined
[02:46:34.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:46:34.412]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:46:34.412]    __dp=0x00000000
[02:46:34.412]    __ap=0x00000000
[02:46:34.412]    __traceout=0x00000000      (Trace Disabled)
[02:46:34.412]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:46:34.413]    __FlashAddr=0x00000000
[02:46:34.413]    __FlashLen=0x00000000
[02:46:34.413]    __FlashArg=0x00000000
[02:46:34.413]    __FlashOp=0x00000000
[02:46:34.413]    __Result=0x00000000
[02:46:34.413]  </debugvars>
[02:46:34.413]  
[02:46:34.413]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:46:34.413]    <block atomic="false" info="">
[02:46:34.413]      __var deviceID = 0;
[02:46:34.413]        // -> [deviceID <= 0x00000000]
[02:46:34.413]      __var version = 0;
[02:46:34.414]        // -> [version <= 0x00000000]
[02:46:34.414]      __var partNum = 0;
[02:46:34.414]        // -> [partNum <= 0x00000000]
[02:46:34.414]      __var manuf = 0;
[02:46:34.414]        // -> [manuf <= 0x00000000]
[02:46:34.414]      __var isMSPM0G1X0X_G3X0X = 0;
[02:46:34.414]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:46:34.414]      __var isProduction = 0;
[02:46:34.414]        // -> [isProduction <= 0x00000000]
[02:46:34.415]      __var continueId = 0;
[02:46:34.415]        // -> [continueId <= 0x00000000]
[02:46:34.415]      deviceID =   Read32(0x41C40004);
[02:46:34.420]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:46:34.420]        // -> [deviceID <= 0x2BB8802F]
[02:46:34.420]      version = deviceID >> 28;
[02:46:34.420]        // -> [version <= 0x00000002]
[02:46:34.420]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:46:34.420]        // -> [partNum <= 0x0000BB88]
[02:46:34.420]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:46:34.421]        // -> [manuf <= 0x00000017]
[02:46:34.421]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:46:34.421]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:46:34.421]      isProduction = (version > 0);
[02:46:34.421]        // -> [isProduction <= 0x00000001]
[02:46:34.421]    </block>
[02:46:34.421]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:46:34.421]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:46:34.421]        // =>  FALSE
[02:46:34.421]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:46:34.421]    </control>
[02:46:34.421]    <control if="continueId == 4" while="" timeout="0" info="">
[02:46:34.422]      // if-block "continueId == 4"
[02:46:34.422]        // =>  FALSE
[02:46:34.422]      // skip if-block "continueId == 4"
[02:46:34.422]    </control>
[02:46:34.422]    <control if="!isProduction" while="" timeout="0" info="">
[02:46:34.422]      // if-block "!isProduction"
[02:46:34.422]        // =>  FALSE
[02:46:34.422]      // skip if-block "!isProduction"
[02:46:34.422]    </control>
[02:46:34.422]  </sequence>
[02:46:34.422]  
[02:47:14.405]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:47:14.405]  
[02:47:14.413]  <debugvars>
[02:47:14.413]    // Pre-defined
[02:47:14.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:47:14.414]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:47:14.414]    __dp=0x00000000
[02:47:14.414]    __ap=0x00000000
[02:47:14.414]    __traceout=0x00000000      (Trace Disabled)
[02:47:14.414]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:47:14.415]    __FlashAddr=0x00000000
[02:47:14.415]    __FlashLen=0x00000000
[02:47:14.415]    __FlashArg=0x00000000
[02:47:14.415]    __FlashOp=0x00000000
[02:47:14.415]    __Result=0x00000000
[02:47:14.415]  </debugvars>
[02:47:14.415]  
[02:47:14.415]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:47:14.415]    <block atomic="false" info="">
[02:47:14.415]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:47:14.415]        // -> [isSWJ <= 0x00000001]
[02:47:14.415]      __var hasDormant = __protocol & 0x00020000;
[02:47:14.415]        // -> [hasDormant <= 0x00000000]
[02:47:14.416]      __var protType   = __protocol & 0x0000FFFF;
[02:47:14.416]        // -> [protType <= 0x00000002]
[02:47:14.416]    </block>
[02:47:14.416]    <control if="protType == 1" while="" timeout="0" info="">
[02:47:14.416]      // if-block "protType == 1"
[02:47:14.416]        // =>  FALSE
[02:47:14.416]      // skip if-block "protType == 1"
[02:47:14.417]    </control>
[02:47:14.417]    <control if="protType == 2" while="" timeout="0" info="">
[02:47:14.417]      // if-block "protType == 2"
[02:47:14.418]        // =>  TRUE
[02:47:14.418]      <control if="isSWJ" while="" timeout="0" info="">
[02:47:14.418]        // if-block "isSWJ"
[02:47:14.418]          // =>  TRUE
[02:47:14.418]        <control if="hasDormant" while="" timeout="0" info="">
[02:47:14.418]          // if-block "hasDormant"
[02:47:14.418]            // =>  FALSE
[02:47:14.418]          // skip if-block "hasDormant"
[02:47:14.419]        </control>
[02:47:14.419]        <control if="!hasDormant" while="" timeout="0" info="">
[02:47:14.419]          // if-block "!hasDormant"
[02:47:14.419]            // =>  TRUE
[02:47:14.419]          <block atomic="false" info="">
[02:47:14.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:47:14.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:47:14.420]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:47:14.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:47:14.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:47:14.423]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:47:14.423]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:47:14.424]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:47:14.424]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:47:14.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:47:14.426]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:47:14.428]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:47:14.428]          </block>
[02:47:14.428]          // end if-block "!hasDormant"
[02:47:14.428]        </control>
[02:47:14.428]        // end if-block "isSWJ"
[02:47:14.428]      </control>
[02:47:14.428]      <control if="!isSWJ" while="" timeout="0" info="">
[02:47:14.428]        // if-block "!isSWJ"
[02:47:14.428]          // =>  FALSE
[02:47:14.428]        // skip if-block "!isSWJ"
[02:47:14.429]      </control>
[02:47:14.429]      <block atomic="false" info="">
[02:47:14.429]        ReadDP(0x0);
[02:47:14.430]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:47:14.430]      </block>
[02:47:14.431]      // end if-block "protType == 2"
[02:47:14.431]    </control>
[02:47:14.431]  </sequence>
[02:47:14.431]  
[02:47:14.433]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:47:14.433]  
[02:47:14.433]  <debugvars>
[02:47:14.433]    // Pre-defined
[02:47:14.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:47:14.433]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:47:14.433]    __dp=0x00000000
[02:47:14.433]    __ap=0x00000000
[02:47:14.433]    __traceout=0x00000000      (Trace Disabled)
[02:47:14.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:47:14.434]    __FlashAddr=0x00000000
[02:47:14.434]    __FlashLen=0x00000000
[02:47:14.434]    __FlashArg=0x00000000
[02:47:14.434]    __FlashOp=0x00000000
[02:47:14.435]    __Result=0x00000000
[02:47:14.435]  </debugvars>
[02:47:14.435]  
[02:47:14.435]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:47:14.435]    <block atomic="false" info="">
[02:47:14.435]      __var SW_DP_ABORT       = 0x0;
[02:47:14.435]        // -> [SW_DP_ABORT <= 0x00000000]
[02:47:14.435]      __var DP_CTRL_STAT      = 0x4;
[02:47:14.435]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:47:14.435]      __var DP_SELECT         = 0x8;
[02:47:14.436]        // -> [DP_SELECT <= 0x00000008]
[02:47:14.436]      __var powered_down      = 0;
[02:47:14.436]        // -> [powered_down <= 0x00000000]
[02:47:14.436]      WriteDP(DP_SELECT, 0x00000000);
[02:47:14.437]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:47:14.438]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:47:14.439]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:47:14.439]        // -> [powered_down <= 0x00000001]
[02:47:14.439]    </block>
[02:47:14.440]    <control if="powered_down" while="" timeout="0" info="">
[02:47:14.440]      // if-block "powered_down"
[02:47:14.440]        // =>  TRUE
[02:47:14.440]      <block atomic="false" info="">
[02:47:14.440]        Message(0, "Debug/System power-up request sent");
[02:47:14.442]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:47:14.442]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:47:14.443]      </block>
[02:47:14.443]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:47:14.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:47:14.444]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:47:14.445]        // while-condition  =>  FALSE
[02:47:14.445]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:47:14.445]      </control>
[02:47:14.445]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:47:14.445]        // if-block "(__protocol & 0xFFFF) == 1"
[02:47:14.446]          // =>  FALSE
[02:47:14.446]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:47:14.446]      </control>
[02:47:14.446]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:47:14.446]        // if-block "(__protocol & 0xFFFF) == 2"
[02:47:14.446]          // =>  TRUE
[02:47:14.446]        <block atomic="false" info="">
[02:47:14.447]          Message(0, "executing SWD power up");
[02:47:14.449]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:47:14.450]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:47:14.450]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:47:14.452]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:47:14.452]        </block>
[02:47:14.452]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:47:14.452]      </control>
[02:47:14.452]      // end if-block "powered_down"
[02:47:14.452]    </control>
[02:47:14.452]    <block atomic="false" info="">
[02:47:14.453]      __var DEBUG_PORT_VAL    = 0;
[02:47:14.453]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:47:14.453]      __var ACCESS_POINT_VAL  = 0;
[02:47:14.453]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:47:14.453]      __ap = 1; 
[02:47:14.453]        // -> [__ap <= 0x00000001]
[02:47:14.453]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:47:14.457]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:47:14.457]      __ap = 4;
[02:47:14.457]        // -> [__ap <= 0x00000004]
[02:47:14.457]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:47:14.460]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:47:14.460]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:47:14.460]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:47:14.462]    </block>
[02:47:14.462]    <block atomic="false" info="">
[02:47:14.462]      __var nReset = 0x80;
[02:47:14.462]        // -> [nReset <= 0x00000080]
[02:47:14.462]      __var canReadPins = 0;
[02:47:14.463]        // -> [canReadPins <= 0x00000000]
[02:47:14.463]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:47:14.464]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:47:14.464]        // -> [canReadPins <= 0x00000001]
[02:47:14.464]    </block>
[02:47:14.464]    <control if="" while="1" timeout="200" info="">
[02:47:14.464]      // while "1"  (timeout="200")
[02:47:14.465]      // while-condition  =>  TRUE
[02:47:14.465]      // while "1"  (timeout="200")
[02:47:14.465]      // while-condition  =>  TRUE
[02:47:14.465]      // while "1"  (timeout="200")
[02:47:14.465]      // while-condition  =>  TRUE
[02:47:14.465]      // while "1"  (timeout="200")
[02:47:14.465]      // while-condition  =>  TRUE
[02:47:14.466]      // while "1"  (timeout="200")
[02:47:14.466]      // while-condition  =>  TRUE
[02:47:14.466]      // while "1"  (timeout="200")
[02:47:14.466]      // while-condition  =>  TRUE
[02:47:14.466]      // while "1"  (timeout="200")
[02:47:14.466]      // while-condition  =>  TRUE
[02:47:14.466]      // while "1"  (timeout="200")
[02:47:14.467]      // while-condition  =>  TRUE
[02:47:14.467]      // while "1"  (timeout="200")
[02:47:14.467]      // while-condition  =>  TRUE
[02:47:14.467]      // while "1"  (timeout="200")
[02:47:14.467]      // while-condition  =>  TRUE
[02:47:14.467]      // while "1"  (timeout="200")
[02:47:14.467]      // while-condition  =>  TRUE
[02:47:14.467]      // while "1"  (timeout="200")
[02:47:14.467]      // while-condition  =>  TRUE
[02:47:14.467]      // while "1"  (timeout="200")
[02:47:14.467]      // while-condition  =>  TRUE
[02:47:14.467]      // while "1"  (timeout="200")
[02:47:14.468]      // while-condition  =>  TRUE
[02:47:14.468]      // while "1"  (timeout="200")
[02:47:14.468]      // while-condition  =>  TRUE
[02:47:14.468]      // while "1"  (timeout="200")
[02:47:14.468]      // while-condition  =>  TRUE
[02:47:14.468]      // while "1"  (timeout="200")
[02:47:14.468]      // while-condition  =>  TRUE
[02:47:14.468]      // while "1"  (timeout="200")
[02:47:14.468]      // while-condition  =>  TRUE
[02:47:14.468]      // while "1"  (timeout="200")
[02:47:14.469]      // while-condition  =>  TRUE
[02:47:14.469]      // while "1"  (timeout="200")
[02:47:14.469]      // while-condition  =>  TRUE
[02:47:14.469]      // while "1"  (timeout="200")
[02:47:14.469]      // while-condition  =>  TRUE
[02:47:14.469]      // while "1"  (timeout="200")
[02:47:14.469]      // while-condition  =>  TRUE
[02:47:14.469]      // while "1"  (timeout="200")
[02:47:14.469]      // while-condition  =>  TRUE
[02:47:14.469]      // while "1"  (timeout="200")
[02:47:14.470]      // while-condition  =>  TRUE
[02:47:14.470]      // while "1"  (timeout="200")
[02:47:14.470]      // while-condition  =>  TRUE
[02:47:14.470]      // while "1"  (timeout="200")
[02:47:14.470]      // while-condition  =>  TRUE
[02:47:14.470]      // while "1"  (timeout="200")
[02:47:14.470]      // while-condition  =>  TRUE
[02:47:14.470]      // while "1"  (timeout="200")
[02:47:14.470]      // while-condition  =>  TRUE
[02:47:14.471]      // while "1"  (timeout="200")
[02:47:14.471]      // while  =>  TIMEOUT
[02:47:14.471]      // end while "1"
[02:47:14.471]    </control>
[02:47:14.471]    <control if="canReadPins" while="" timeout="0" info="">
[02:47:14.471]      // if-block "canReadPins"
[02:47:14.471]        // =>  TRUE
[02:47:14.472]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:47:14.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:47:14.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:47:14.474]        // while-condition  =>  FALSE
[02:47:14.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:47:14.474]      </control>
[02:47:14.474]      // end if-block "canReadPins"
[02:47:14.474]    </control>
[02:47:14.474]    <control if="!canReadPins" while="" timeout="0" info="">
[02:47:14.474]      // if-block "!canReadPins"
[02:47:14.474]        // =>  FALSE
[02:47:14.474]      // skip if-block "!canReadPins"
[02:47:14.475]    </control>
[02:47:14.475]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:47:14.475]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:47:14.475]        // =>  TRUE
[02:47:14.475]      <block atomic="false" info="">
[02:47:14.475]        WriteAP(0x00, 0x190008);
[02:47:14.477]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:47:14.477]        WriteAP(0xF0, 0x01);
[02:47:14.481]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:47:14.481]      </block>
[02:47:14.482]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:47:14.482]    </control>
[02:47:14.482]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:47:14.482]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:47:14.482]        // =>  FALSE
[02:47:14.482]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:47:14.482]    </control>
[02:47:14.482]    <block atomic="false" info="">
[02:47:14.483]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:47:14.485]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:47:14.485]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:47:14.485]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:47:14.487]      __ap = 0; //lets make sure we reset the access point selection
[02:47:14.487]        // -> [__ap <= 0x00000000]
[02:47:14.487]    </block>
[02:47:14.487]  </sequence>
[02:47:14.487]  
[02:47:14.506]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:47:14.506]  
[02:47:14.506]  <debugvars>
[02:47:14.506]    // Pre-defined
[02:47:14.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:47:14.506]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:47:14.507]    __dp=0x00000000
[02:47:14.507]    __ap=0x00000000
[02:47:14.507]    __traceout=0x00000000      (Trace Disabled)
[02:47:14.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:47:14.507]    __FlashAddr=0x00000000
[02:47:14.507]    __FlashLen=0x00000000
[02:47:14.507]    __FlashArg=0x00000000
[02:47:14.507]    __FlashOp=0x00000000
[02:47:14.508]    __Result=0x00000000
[02:47:14.508]  </debugvars>
[02:47:14.508]  
[02:47:14.508]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:47:14.508]    <block atomic="false" info="">
[02:47:14.508]      __var deviceID = 0;
[02:47:14.508]        // -> [deviceID <= 0x00000000]
[02:47:14.508]      __var version = 0;
[02:47:14.509]        // -> [version <= 0x00000000]
[02:47:14.509]      __var partNum = 0;
[02:47:14.509]        // -> [partNum <= 0x00000000]
[02:47:14.509]      __var manuf = 0;
[02:47:14.509]        // -> [manuf <= 0x00000000]
[02:47:14.509]      __var isMSPM0G1X0X_G3X0X = 0;
[02:47:14.509]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:47:14.510]      __var isProduction = 0;
[02:47:14.510]        // -> [isProduction <= 0x00000000]
[02:47:14.510]      __var continueId = 0;
[02:47:14.510]        // -> [continueId <= 0x00000000]
[02:47:14.510]      deviceID =   Read32(0x41C40004);
[02:47:14.514]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:47:14.514]        // -> [deviceID <= 0x2BB8802F]
[02:47:14.514]      version = deviceID >> 28;
[02:47:14.514]        // -> [version <= 0x00000002]
[02:47:14.514]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:47:14.514]        // -> [partNum <= 0x0000BB88]
[02:47:14.515]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:47:14.515]        // -> [manuf <= 0x00000017]
[02:47:14.515]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:47:14.515]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:47:14.515]      isProduction = (version > 0);
[02:47:14.515]        // -> [isProduction <= 0x00000001]
[02:47:14.515]    </block>
[02:47:14.516]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:47:14.516]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:47:14.516]        // =>  FALSE
[02:47:14.516]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:47:14.516]    </control>
[02:47:14.516]    <control if="continueId == 4" while="" timeout="0" info="">
[02:47:14.516]      // if-block "continueId == 4"
[02:47:14.516]        // =>  FALSE
[02:47:14.516]      // skip if-block "continueId == 4"
[02:47:14.516]    </control>
[02:47:14.516]    <control if="!isProduction" while="" timeout="0" info="">
[02:47:14.518]      // if-block "!isProduction"
[02:47:14.518]        // =>  FALSE
[02:47:14.518]      // skip if-block "!isProduction"
[02:47:14.518]    </control>
[02:47:14.518]  </sequence>
[02:47:14.518]  
[02:47:41.096]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:47:41.096]  
[02:47:41.096]  <debugvars>
[02:47:41.096]    // Pre-defined
[02:47:41.096]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:47:41.097]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:47:41.097]    __dp=0x00000000
[02:47:41.097]    __ap=0x00000000
[02:47:41.097]    __traceout=0x00000000      (Trace Disabled)
[02:47:41.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:47:41.097]    __FlashAddr=0x00000000
[02:47:41.097]    __FlashLen=0x00000000
[02:47:41.097]    __FlashArg=0x00000000
[02:47:41.097]    __FlashOp=0x00000000
[02:47:41.098]    __Result=0x00000000
[02:47:41.098]  </debugvars>
[02:47:41.098]  
[02:47:41.098]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:47:41.098]    <block atomic="false" info="">
[02:47:41.098]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:47:41.098]        // -> [isSWJ <= 0x00000001]
[02:47:41.098]      __var hasDormant = __protocol & 0x00020000;
[02:47:41.098]        // -> [hasDormant <= 0x00000000]
[02:47:41.098]      __var protType   = __protocol & 0x0000FFFF;
[02:47:41.098]        // -> [protType <= 0x00000002]
[02:47:41.098]    </block>
[02:47:41.099]    <control if="protType == 1" while="" timeout="0" info="">
[02:47:41.099]      // if-block "protType == 1"
[02:47:41.099]        // =>  FALSE
[02:47:41.099]      // skip if-block "protType == 1"
[02:47:41.099]    </control>
[02:47:41.099]    <control if="protType == 2" while="" timeout="0" info="">
[02:47:41.099]      // if-block "protType == 2"
[02:47:41.099]        // =>  TRUE
[02:47:41.099]      <control if="isSWJ" while="" timeout="0" info="">
[02:47:41.099]        // if-block "isSWJ"
[02:47:41.099]          // =>  TRUE
[02:47:41.100]        <control if="hasDormant" while="" timeout="0" info="">
[02:47:41.100]          // if-block "hasDormant"
[02:47:41.100]            // =>  FALSE
[02:47:41.100]          // skip if-block "hasDormant"
[02:47:41.100]        </control>
[02:47:41.100]        <control if="!hasDormant" while="" timeout="0" info="">
[02:47:41.100]          // if-block "!hasDormant"
[02:47:41.100]            // =>  TRUE
[02:47:41.100]          <block atomic="false" info="">
[02:47:41.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:47:41.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:47:41.102]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:47:41.103]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:47:41.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:47:41.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:47:41.105]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:47:41.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:47:41.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:47:41.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:47:41.109]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:47:41.111]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:47:41.111]          </block>
[02:47:41.111]          // end if-block "!hasDormant"
[02:47:41.111]        </control>
[02:47:41.112]        // end if-block "isSWJ"
[02:47:41.112]      </control>
[02:47:41.112]      <control if="!isSWJ" while="" timeout="0" info="">
[02:47:41.112]        // if-block "!isSWJ"
[02:47:41.112]          // =>  FALSE
[02:47:41.112]        // skip if-block "!isSWJ"
[02:47:41.112]      </control>
[02:47:41.113]      <block atomic="false" info="">
[02:47:41.113]        ReadDP(0x0);
[02:47:41.114]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:47:41.114]      </block>
[02:47:41.114]      // end if-block "protType == 2"
[02:47:41.114]    </control>
[02:47:41.114]  </sequence>
[02:47:41.114]  
[02:47:41.116]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:47:41.116]  
[02:47:41.116]  <debugvars>
[02:47:41.116]    // Pre-defined
[02:47:41.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:47:41.116]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:47:41.116]    __dp=0x00000000
[02:47:41.116]    __ap=0x00000000
[02:47:41.116]    __traceout=0x00000000      (Trace Disabled)
[02:47:41.117]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:47:41.117]    __FlashAddr=0x00000000
[02:47:41.117]    __FlashLen=0x00000000
[02:47:41.117]    __FlashArg=0x00000000
[02:47:41.117]    __FlashOp=0x00000000
[02:47:41.117]    __Result=0x00000000
[02:47:41.117]  </debugvars>
[02:47:41.117]  
[02:47:41.117]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:47:41.117]    <block atomic="false" info="">
[02:47:41.117]      __var SW_DP_ABORT       = 0x0;
[02:47:41.117]        // -> [SW_DP_ABORT <= 0x00000000]
[02:47:41.119]      __var DP_CTRL_STAT      = 0x4;
[02:47:41.119]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:47:41.119]      __var DP_SELECT         = 0x8;
[02:47:41.119]        // -> [DP_SELECT <= 0x00000008]
[02:47:41.119]      __var powered_down      = 0;
[02:47:41.119]        // -> [powered_down <= 0x00000000]
[02:47:41.119]      WriteDP(DP_SELECT, 0x00000000);
[02:47:41.121]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:47:41.121]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:47:41.123]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:47:41.123]        // -> [powered_down <= 0x00000001]
[02:47:41.123]    </block>
[02:47:41.123]    <control if="powered_down" while="" timeout="0" info="">
[02:47:41.123]      // if-block "powered_down"
[02:47:41.123]        // =>  TRUE
[02:47:41.123]      <block atomic="false" info="">
[02:47:41.124]        Message(0, "Debug/System power-up request sent");
[02:47:41.125]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:47:41.127]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:47:41.127]      </block>
[02:47:41.127]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:47:41.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:47:41.128]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:47:41.129]        // while-condition  =>  FALSE
[02:47:41.129]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:47:41.129]      </control>
[02:47:41.129]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:47:41.130]        // if-block "(__protocol & 0xFFFF) == 1"
[02:47:41.130]          // =>  FALSE
[02:47:41.130]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:47:41.130]      </control>
[02:47:41.130]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:47:41.130]        // if-block "(__protocol & 0xFFFF) == 2"
[02:47:41.130]          // =>  TRUE
[02:47:41.130]        <block atomic="false" info="">
[02:47:41.130]          Message(0, "executing SWD power up");
[02:47:41.132]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:47:41.134]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:47:41.134]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:47:41.135]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:47:41.136]        </block>
[02:47:41.136]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:47:41.136]      </control>
[02:47:41.136]      // end if-block "powered_down"
[02:47:41.136]    </control>
[02:47:41.136]    <block atomic="false" info="">
[02:47:41.136]      __var DEBUG_PORT_VAL    = 0;
[02:47:41.137]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:47:41.137]      __var ACCESS_POINT_VAL  = 0;
[02:47:41.137]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:47:41.137]      __ap = 1; 
[02:47:41.137]        // -> [__ap <= 0x00000001]
[02:47:41.137]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:47:41.140]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:47:41.140]      __ap = 4;
[02:47:41.141]        // -> [__ap <= 0x00000004]
[02:47:41.141]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:47:41.144]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:47:41.145]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:47:41.145]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:47:41.146]    </block>
[02:47:41.146]    <block atomic="false" info="">
[02:47:41.146]      __var nReset = 0x80;
[02:47:41.147]        // -> [nReset <= 0x00000080]
[02:47:41.147]      __var canReadPins = 0;
[02:47:41.147]        // -> [canReadPins <= 0x00000000]
[02:47:41.147]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:47:41.148]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:47:41.149]        // -> [canReadPins <= 0x00000001]
[02:47:41.149]    </block>
[02:47:41.149]    <control if="" while="1" timeout="200" info="">
[02:47:41.149]      // while "1"  (timeout="200")
[02:47:41.149]      // while-condition  =>  TRUE
[02:47:41.149]      // while "1"  (timeout="200")
[02:47:41.149]      // while-condition  =>  TRUE
[02:47:41.149]      // while "1"  (timeout="200")
[02:47:41.149]      // while-condition  =>  TRUE
[02:47:41.149]      // while "1"  (timeout="200")
[02:47:41.149]      // while-condition  =>  TRUE
[02:47:41.150]      // while "1"  (timeout="200")
[02:47:41.150]      // while-condition  =>  TRUE
[02:47:41.150]      // while "1"  (timeout="200")
[02:47:41.150]      // while-condition  =>  TRUE
[02:47:41.150]      // while "1"  (timeout="200")
[02:47:41.150]      // while-condition  =>  TRUE
[02:47:41.150]      // while "1"  (timeout="200")
[02:47:41.150]      // while-condition  =>  TRUE
[02:47:41.150]      // while "1"  (timeout="200")
[02:47:41.150]      // while-condition  =>  TRUE
[02:47:41.151]      // while "1"  (timeout="200")
[02:47:41.151]      // while-condition  =>  TRUE
[02:47:41.151]      // while "1"  (timeout="200")
[02:47:41.151]      // while-condition  =>  TRUE
[02:47:41.151]      // while "1"  (timeout="200")
[02:47:41.151]      // while-condition  =>  TRUE
[02:47:41.151]      // while "1"  (timeout="200")
[02:47:41.151]      // while-condition  =>  TRUE
[02:47:41.151]      // while "1"  (timeout="200")
[02:47:41.151]      // while-condition  =>  TRUE
[02:47:41.151]      // while "1"  (timeout="200")
[02:47:41.152]      // while-condition  =>  TRUE
[02:47:41.152]      // while "1"  (timeout="200")
[02:47:41.152]      // while-condition  =>  TRUE
[02:47:41.152]      // while "1"  (timeout="200")
[02:47:41.152]      // while-condition  =>  TRUE
[02:47:41.152]      // while "1"  (timeout="200")
[02:47:41.152]      // while-condition  =>  TRUE
[02:47:41.152]      // while "1"  (timeout="200")
[02:47:41.152]      // while-condition  =>  TRUE
[02:47:41.152]      // while "1"  (timeout="200")
[02:47:41.152]      // while-condition  =>  TRUE
[02:47:41.153]      // while "1"  (timeout="200")
[02:47:41.153]      // while-condition  =>  TRUE
[02:47:41.153]      // while "1"  (timeout="200")
[02:47:41.153]      // while-condition  =>  TRUE
[02:47:41.153]      // while "1"  (timeout="200")
[02:47:41.153]      // while-condition  =>  TRUE
[02:47:41.153]      // while "1"  (timeout="200")
[02:47:41.153]      // while-condition  =>  TRUE
[02:47:41.153]      // while "1"  (timeout="200")
[02:47:41.153]      // while-condition  =>  TRUE
[02:47:41.153]      // while "1"  (timeout="200")
[02:47:41.153]      // while-condition  =>  TRUE
[02:47:41.154]      // while "1"  (timeout="200")
[02:47:41.154]      // while-condition  =>  TRUE
[02:47:41.154]      // while "1"  (timeout="200")
[02:47:41.154]      // while-condition  =>  TRUE
[02:47:41.154]      // while "1"  (timeout="200")
[02:47:41.154]      // while-condition  =>  TRUE
[02:47:41.154]      // while "1"  (timeout="200")
[02:47:41.154]      // while-condition  =>  TRUE
[02:47:41.154]      // while "1"  (timeout="200")
[02:47:41.154]      // while-condition  =>  TRUE
[02:47:41.154]      // while "1"  (timeout="200")
[02:47:41.154]      // while-condition  =>  TRUE
[02:47:41.155]      // while "1"  (timeout="200")
[02:47:41.155]      // while-condition  =>  TRUE
[02:47:41.155]      // while "1"  (timeout="200")
[02:47:41.155]      // while-condition  =>  TRUE
[02:47:41.155]      // while "1"  (timeout="200")
[02:47:41.156]      // while-condition  =>  TRUE
[02:47:41.156]      // while "1"  (timeout="200")
[02:47:41.156]      // while-condition  =>  TRUE
[02:47:41.156]      // while "1"  (timeout="200")
[02:47:41.156]      // while-condition  =>  TRUE
[02:47:41.156]      // while "1"  (timeout="200")
[02:47:41.156]      // while-condition  =>  TRUE
[02:47:41.156]      // while "1"  (timeout="200")
[02:47:41.157]      // while-condition  =>  TRUE
[02:47:41.157]      // while "1"  (timeout="200")
[02:47:41.157]      // while-condition  =>  TRUE
[02:47:41.157]      // while "1"  (timeout="200")
[02:47:41.157]      // while-condition  =>  TRUE
[02:47:41.157]      // while "1"  (timeout="200")
[02:47:41.157]      // while-condition  =>  TRUE
[02:47:41.157]      // while "1"  (timeout="200")
[02:47:41.157]      // while-condition  =>  TRUE
[02:47:41.157]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.158]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.158]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.158]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.158]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.158]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.158]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.158]      // while "1"  (timeout="200")
[02:47:41.158]      // while-condition  =>  TRUE
[02:47:41.159]      // while "1"  (timeout="200")
[02:47:41.159]      // while  =>  TIMEOUT
[02:47:41.159]      // end while "1"
[02:47:41.159]    </control>
[02:47:41.159]    <control if="canReadPins" while="" timeout="0" info="">
[02:47:41.159]      // if-block "canReadPins"
[02:47:41.159]        // =>  TRUE
[02:47:41.159]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:47:41.159]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:47:41.162]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:47:41.162]        // while-condition  =>  FALSE
[02:47:41.162]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:47:41.162]      </control>
[02:47:41.162]      // end if-block "canReadPins"
[02:47:41.162]    </control>
[02:47:41.162]    <control if="!canReadPins" while="" timeout="0" info="">
[02:47:41.162]      // if-block "!canReadPins"
[02:47:41.162]        // =>  FALSE
[02:47:41.162]      // skip if-block "!canReadPins"
[02:47:41.162]    </control>
[02:47:41.163]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:47:41.163]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:47:41.163]        // =>  TRUE
[02:47:41.163]      <block atomic="false" info="">
[02:47:41.163]        WriteAP(0x00, 0x190008);
[02:47:41.165]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:47:41.165]        WriteAP(0xF0, 0x01);
[02:47:41.170]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:47:41.171]      </block>
[02:47:41.171]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:47:41.171]    </control>
[02:47:41.171]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:47:41.171]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:47:41.171]        // =>  FALSE
[02:47:41.171]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:47:41.171]    </control>
[02:47:41.172]    <block atomic="false" info="">
[02:47:41.172]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:47:41.174]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:47:41.175]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:47:41.175]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:47:41.176]      __ap = 0; //lets make sure we reset the access point selection
[02:47:41.178]        // -> [__ap <= 0x00000000]
[02:47:41.178]    </block>
[02:47:41.178]  </sequence>
[02:47:41.178]  
[02:47:41.197]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:47:41.197]  
[02:47:41.197]  <debugvars>
[02:47:41.198]    // Pre-defined
[02:47:41.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:47:41.198]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:47:41.198]    __dp=0x00000000
[02:47:41.198]    __ap=0x00000000
[02:47:41.198]    __traceout=0x00000000      (Trace Disabled)
[02:47:41.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:47:41.198]    __FlashAddr=0x00000000
[02:47:41.198]    __FlashLen=0x00000000
[02:47:41.198]    __FlashArg=0x00000000
[02:47:41.199]    __FlashOp=0x00000000
[02:47:41.199]    __Result=0x00000000
[02:47:41.199]  </debugvars>
[02:47:41.199]  
[02:47:41.199]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:47:41.199]    <block atomic="false" info="">
[02:47:41.200]      __var deviceID = 0;
[02:47:41.200]        // -> [deviceID <= 0x00000000]
[02:47:41.200]      __var version = 0;
[02:47:41.200]        // -> [version <= 0x00000000]
[02:47:41.200]      __var partNum = 0;
[02:47:41.200]        // -> [partNum <= 0x00000000]
[02:47:41.200]      __var manuf = 0;
[02:47:41.200]        // -> [manuf <= 0x00000000]
[02:47:41.200]      __var isMSPM0G1X0X_G3X0X = 0;
[02:47:41.200]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:47:41.200]      __var isProduction = 0;
[02:47:41.201]        // -> [isProduction <= 0x00000000]
[02:47:41.201]      __var continueId = 0;
[02:47:41.201]        // -> [continueId <= 0x00000000]
[02:47:41.201]      deviceID =   Read32(0x41C40004);
[02:47:41.205]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:47:41.205]        // -> [deviceID <= 0x2BB8802F]
[02:47:41.206]      version = deviceID >> 28;
[02:47:41.206]        // -> [version <= 0x00000002]
[02:47:41.206]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:47:41.206]        // -> [partNum <= 0x0000BB88]
[02:47:41.206]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:47:41.206]        // -> [manuf <= 0x00000017]
[02:47:41.206]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:47:41.206]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:47:41.207]      isProduction = (version > 0);
[02:47:41.207]        // -> [isProduction <= 0x00000001]
[02:47:41.207]    </block>
[02:47:41.207]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:47:41.207]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:47:41.207]        // =>  FALSE
[02:47:41.207]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:47:41.207]    </control>
[02:47:41.207]    <control if="continueId == 4" while="" timeout="0" info="">
[02:47:41.207]      // if-block "continueId == 4"
[02:47:41.208]        // =>  FALSE
[02:47:41.208]      // skip if-block "continueId == 4"
[02:47:41.208]    </control>
[02:47:41.208]    <control if="!isProduction" while="" timeout="0" info="">
[02:47:41.208]      // if-block "!isProduction"
[02:47:41.208]        // =>  FALSE
[02:47:41.208]      // skip if-block "!isProduction"
[02:47:41.208]    </control>
[02:47:41.208]  </sequence>
[02:47:41.208]  
[02:48:04.749]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:48:04.749]  
[02:48:04.757]  <debugvars>
[02:48:04.757]    // Pre-defined
[02:48:04.757]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:04.757]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:48:04.757]    __dp=0x00000000
[02:48:04.758]    __ap=0x00000000
[02:48:04.758]    __traceout=0x00000000      (Trace Disabled)
[02:48:04.758]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:04.758]    __FlashAddr=0x00000000
[02:48:04.758]    __FlashLen=0x00000000
[02:48:04.758]    __FlashArg=0x00000000
[02:48:04.758]    __FlashOp=0x00000000
[02:48:04.758]    __Result=0x00000000
[02:48:04.758]  </debugvars>
[02:48:04.759]  
[02:48:04.759]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:48:04.759]    <block atomic="false" info="">
[02:48:04.760]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:48:04.760]        // -> [isSWJ <= 0x00000001]
[02:48:04.760]      __var hasDormant = __protocol & 0x00020000;
[02:48:04.760]        // -> [hasDormant <= 0x00000000]
[02:48:04.760]      __var protType   = __protocol & 0x0000FFFF;
[02:48:04.760]        // -> [protType <= 0x00000002]
[02:48:04.760]    </block>
[02:48:04.760]    <control if="protType == 1" while="" timeout="0" info="">
[02:48:04.760]      // if-block "protType == 1"
[02:48:04.760]        // =>  FALSE
[02:48:04.760]      // skip if-block "protType == 1"
[02:48:04.760]    </control>
[02:48:04.760]    <control if="protType == 2" while="" timeout="0" info="">
[02:48:04.760]      // if-block "protType == 2"
[02:48:04.760]        // =>  TRUE
[02:48:04.761]      <control if="isSWJ" while="" timeout="0" info="">
[02:48:04.761]        // if-block "isSWJ"
[02:48:04.762]          // =>  TRUE
[02:48:04.762]        <control if="hasDormant" while="" timeout="0" info="">
[02:48:04.762]          // if-block "hasDormant"
[02:48:04.762]            // =>  FALSE
[02:48:04.762]          // skip if-block "hasDormant"
[02:48:04.762]        </control>
[02:48:04.762]        <control if="!hasDormant" while="" timeout="0" info="">
[02:48:04.762]          // if-block "!hasDormant"
[02:48:04.762]            // =>  TRUE
[02:48:04.762]          <block atomic="false" info="">
[02:48:04.762]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:48:04.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:48:04.764]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:48:04.765]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:48:04.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:48:04.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:48:04.767]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:48:04.769]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:48:04.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:48:04.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:48:04.769]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:48:04.771]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:48:04.771]          </block>
[02:48:04.771]          // end if-block "!hasDormant"
[02:48:04.771]        </control>
[02:48:04.771]        // end if-block "isSWJ"
[02:48:04.771]      </control>
[02:48:04.771]      <control if="!isSWJ" while="" timeout="0" info="">
[02:48:04.771]        // if-block "!isSWJ"
[02:48:04.772]          // =>  FALSE
[02:48:04.772]        // skip if-block "!isSWJ"
[02:48:04.772]      </control>
[02:48:04.772]      <block atomic="false" info="">
[02:48:04.772]        ReadDP(0x0);
[02:48:04.773]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:48:04.774]      </block>
[02:48:04.774]      // end if-block "protType == 2"
[02:48:04.775]    </control>
[02:48:04.775]  </sequence>
[02:48:04.775]  
[02:48:04.776]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:48:04.776]  
[02:48:04.776]  <debugvars>
[02:48:04.778]    // Pre-defined
[02:48:04.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:04.778]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:48:04.778]    __dp=0x00000000
[02:48:04.778]    __ap=0x00000000
[02:48:04.778]    __traceout=0x00000000      (Trace Disabled)
[02:48:04.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:04.779]    __FlashAddr=0x00000000
[02:48:04.779]    __FlashLen=0x00000000
[02:48:04.779]    __FlashArg=0x00000000
[02:48:04.779]    __FlashOp=0x00000000
[02:48:04.779]    __Result=0x00000000
[02:48:04.779]  </debugvars>
[02:48:04.779]  
[02:48:04.780]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:48:04.780]    <block atomic="false" info="">
[02:48:04.780]      __var SW_DP_ABORT       = 0x0;
[02:48:04.780]        // -> [SW_DP_ABORT <= 0x00000000]
[02:48:04.780]      __var DP_CTRL_STAT      = 0x4;
[02:48:04.780]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:48:04.780]      __var DP_SELECT         = 0x8;
[02:48:04.780]        // -> [DP_SELECT <= 0x00000008]
[02:48:04.780]      __var powered_down      = 0;
[02:48:04.780]        // -> [powered_down <= 0x00000000]
[02:48:04.780]      WriteDP(DP_SELECT, 0x00000000);
[02:48:04.782]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:48:04.784]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:48:04.785]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:48:04.785]        // -> [powered_down <= 0x00000001]
[02:48:04.785]    </block>
[02:48:04.785]    <control if="powered_down" while="" timeout="0" info="">
[02:48:04.785]      // if-block "powered_down"
[02:48:04.785]        // =>  TRUE
[02:48:04.786]      <block atomic="false" info="">
[02:48:04.786]        Message(0, "Debug/System power-up request sent");
[02:48:04.788]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:48:04.789]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:48:04.789]      </block>
[02:48:04.790]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:48:04.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:48:04.791]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:48:04.791]        // while-condition  =>  FALSE
[02:48:04.791]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:48:04.792]      </control>
[02:48:04.792]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:48:04.792]        // if-block "(__protocol & 0xFFFF) == 1"
[02:48:04.792]          // =>  FALSE
[02:48:04.792]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:48:04.792]      </control>
[02:48:04.792]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:48:04.792]        // if-block "(__protocol & 0xFFFF) == 2"
[02:48:04.793]          // =>  TRUE
[02:48:04.793]        <block atomic="false" info="">
[02:48:04.793]          Message(0, "executing SWD power up");
[02:48:04.794]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:48:04.796]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:48:04.796]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:48:04.798]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:48:04.798]        </block>
[02:48:04.798]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:48:04.798]      </control>
[02:48:04.798]      // end if-block "powered_down"
[02:48:04.799]    </control>
[02:48:04.799]    <block atomic="false" info="">
[02:48:04.799]      __var DEBUG_PORT_VAL    = 0;
[02:48:04.799]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:48:04.799]      __var ACCESS_POINT_VAL  = 0;
[02:48:04.799]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:48:04.799]      __ap = 1; 
[02:48:04.799]        // -> [__ap <= 0x00000001]
[02:48:04.799]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:48:04.802]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:48:04.803]      __ap = 4;
[02:48:04.803]        // -> [__ap <= 0x00000004]
[02:48:04.803]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:48:04.806]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:48:04.806]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:48:04.806]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:48:04.808]    </block>
[02:48:04.809]    <block atomic="false" info="">
[02:48:04.809]      __var nReset = 0x80;
[02:48:04.809]        // -> [nReset <= 0x00000080]
[02:48:04.809]      __var canReadPins = 0;
[02:48:04.809]        // -> [canReadPins <= 0x00000000]
[02:48:04.809]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:48:04.810]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:48:04.810]        // -> [canReadPins <= 0x00000001]
[02:48:04.810]    </block>
[02:48:04.810]    <control if="" while="1" timeout="200" info="">
[02:48:04.810]      // while "1"  (timeout="200")
[02:48:04.810]      // while-condition  =>  TRUE
[02:48:04.811]      // while "1"  (timeout="200")
[02:48:04.811]      // while-condition  =>  TRUE
[02:48:04.811]      // while "1"  (timeout="200")
[02:48:04.812]      // while-condition  =>  TRUE
[02:48:04.812]      // while "1"  (timeout="200")
[02:48:04.812]      // while-condition  =>  TRUE
[02:48:04.812]      // while "1"  (timeout="200")
[02:48:04.812]      // while-condition  =>  TRUE
[02:48:04.812]      // while "1"  (timeout="200")
[02:48:04.812]      // while-condition  =>  TRUE
[02:48:04.812]      // while "1"  (timeout="200")
[02:48:04.812]      // while-condition  =>  TRUE
[02:48:04.812]      // while "1"  (timeout="200")
[02:48:04.813]      // while-condition  =>  TRUE
[02:48:04.813]      // while "1"  (timeout="200")
[02:48:04.813]      // while-condition  =>  TRUE
[02:48:04.813]      // while "1"  (timeout="200")
[02:48:04.813]      // while-condition  =>  TRUE
[02:48:04.813]      // while "1"  (timeout="200")
[02:48:04.813]      // while-condition  =>  TRUE
[02:48:04.813]      // while "1"  (timeout="200")
[02:48:04.813]      // while-condition  =>  TRUE
[02:48:04.813]      // while "1"  (timeout="200")
[02:48:04.813]      // while-condition  =>  TRUE
[02:48:04.814]      // while "1"  (timeout="200")
[02:48:04.814]      // while-condition  =>  TRUE
[02:48:04.814]      // while "1"  (timeout="200")
[02:48:04.814]      // while-condition  =>  TRUE
[02:48:04.814]      // while "1"  (timeout="200")
[02:48:04.814]      // while-condition  =>  TRUE
[02:48:04.814]      // while "1"  (timeout="200")
[02:48:04.815]      // while-condition  =>  TRUE
[02:48:04.815]      // while "1"  (timeout="200")
[02:48:04.815]      // while-condition  =>  TRUE
[02:48:04.815]      // while "1"  (timeout="200")
[02:48:04.815]      // while  =>  TIMEOUT
[02:48:04.815]      // end while "1"
[02:48:04.815]    </control>
[02:48:04.815]    <control if="canReadPins" while="" timeout="0" info="">
[02:48:04.815]      // if-block "canReadPins"
[02:48:04.815]        // =>  TRUE
[02:48:04.815]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:48:04.815]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:48:04.817]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:48:04.817]        // while-condition  =>  FALSE
[02:48:04.817]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:48:04.817]      </control>
[02:48:04.817]      // end if-block "canReadPins"
[02:48:04.817]    </control>
[02:48:04.817]    <control if="!canReadPins" while="" timeout="0" info="">
[02:48:04.818]      // if-block "!canReadPins"
[02:48:04.818]        // =>  FALSE
[02:48:04.818]      // skip if-block "!canReadPins"
[02:48:04.818]    </control>
[02:48:04.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:48:04.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:48:04.818]        // =>  TRUE
[02:48:04.818]      <block atomic="false" info="">
[02:48:04.818]        WriteAP(0x00, 0x190008);
[02:48:04.820]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:48:04.820]        WriteAP(0xF0, 0x01);
[02:48:04.824]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:48:04.824]      </block>
[02:48:04.824]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:48:04.825]    </control>
[02:48:04.825]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:48:04.825]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:48:04.825]        // =>  FALSE
[02:48:04.825]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:48:04.825]    </control>
[02:48:04.825]    <block atomic="false" info="">
[02:48:04.825]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:48:04.828]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:48:04.829]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:48:04.829]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:48:04.831]      __ap = 0; //lets make sure we reset the access point selection
[02:48:04.831]        // -> [__ap <= 0x00000000]
[02:48:04.831]    </block>
[02:48:04.831]  </sequence>
[02:48:04.831]  
[02:48:04.851]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:48:04.851]  
[02:48:04.851]  <debugvars>
[02:48:04.852]    // Pre-defined
[02:48:04.852]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:04.852]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:48:04.852]    __dp=0x00000000
[02:48:04.852]    __ap=0x00000000
[02:48:04.852]    __traceout=0x00000000      (Trace Disabled)
[02:48:04.852]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:04.852]    __FlashAddr=0x00000000
[02:48:04.852]    __FlashLen=0x00000000
[02:48:04.853]    __FlashArg=0x00000000
[02:48:04.853]    __FlashOp=0x00000000
[02:48:04.853]    __Result=0x00000000
[02:48:04.853]  </debugvars>
[02:48:04.853]  
[02:48:04.853]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:48:04.853]    <block atomic="false" info="">
[02:48:04.853]      __var deviceID = 0;
[02:48:04.853]        // -> [deviceID <= 0x00000000]
[02:48:04.853]      __var version = 0;
[02:48:04.853]        // -> [version <= 0x00000000]
[02:48:04.853]      __var partNum = 0;
[02:48:04.853]        // -> [partNum <= 0x00000000]
[02:48:04.853]      __var manuf = 0;
[02:48:04.854]        // -> [manuf <= 0x00000000]
[02:48:04.854]      __var isMSPM0G1X0X_G3X0X = 0;
[02:48:04.854]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:48:04.854]      __var isProduction = 0;
[02:48:04.854]        // -> [isProduction <= 0x00000000]
[02:48:04.854]      __var continueId = 0;
[02:48:04.854]        // -> [continueId <= 0x00000000]
[02:48:04.854]      deviceID =   Read32(0x41C40004);
[02:48:04.860]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:48:04.860]        // -> [deviceID <= 0x2BB8802F]
[02:48:04.861]      version = deviceID >> 28;
[02:48:04.861]        // -> [version <= 0x00000002]
[02:48:04.861]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:48:04.861]        // -> [partNum <= 0x0000BB88]
[02:48:04.861]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:48:04.861]        // -> [manuf <= 0x00000017]
[02:48:04.861]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:48:04.861]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:48:04.861]      isProduction = (version > 0);
[02:48:04.861]        // -> [isProduction <= 0x00000001]
[02:48:04.861]    </block>
[02:48:04.861]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:48:04.861]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:48:04.861]        // =>  FALSE
[02:48:04.862]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:48:04.862]    </control>
[02:48:04.862]    <control if="continueId == 4" while="" timeout="0" info="">
[02:48:04.862]      // if-block "continueId == 4"
[02:48:04.862]        // =>  FALSE
[02:48:04.862]      // skip if-block "continueId == 4"
[02:48:04.862]    </control>
[02:48:04.862]    <control if="!isProduction" while="" timeout="0" info="">
[02:48:04.862]      // if-block "!isProduction"
[02:48:04.863]        // =>  FALSE
[02:48:04.863]      // skip if-block "!isProduction"
[02:48:04.863]    </control>
[02:48:04.863]  </sequence>
[02:48:04.863]  
[02:48:32.210]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:48:32.210]  
[02:48:32.218]  <debugvars>
[02:48:32.218]    // Pre-defined
[02:48:32.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:32.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:48:32.218]    __dp=0x00000000
[02:48:32.218]    __ap=0x00000000
[02:48:32.218]    __traceout=0x00000000      (Trace Disabled)
[02:48:32.218]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:32.218]    __FlashAddr=0x00000000
[02:48:32.219]    __FlashLen=0x00000000
[02:48:32.219]    __FlashArg=0x00000000
[02:48:32.219]    __FlashOp=0x00000000
[02:48:32.219]    __Result=0x00000000
[02:48:32.219]  </debugvars>
[02:48:32.219]  
[02:48:32.219]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:48:32.220]    <block atomic="false" info="">
[02:48:32.220]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:48:32.220]        // -> [isSWJ <= 0x00000001]
[02:48:32.220]      __var hasDormant = __protocol & 0x00020000;
[02:48:32.220]        // -> [hasDormant <= 0x00000000]
[02:48:32.220]      __var protType   = __protocol & 0x0000FFFF;
[02:48:32.220]        // -> [protType <= 0x00000002]
[02:48:32.220]    </block>
[02:48:32.220]    <control if="protType == 1" while="" timeout="0" info="">
[02:48:32.220]      // if-block "protType == 1"
[02:48:32.221]        // =>  FALSE
[02:48:32.221]      // skip if-block "protType == 1"
[02:48:32.221]    </control>
[02:48:32.221]    <control if="protType == 2" while="" timeout="0" info="">
[02:48:32.221]      // if-block "protType == 2"
[02:48:32.221]        // =>  TRUE
[02:48:32.221]      <control if="isSWJ" while="" timeout="0" info="">
[02:48:32.221]        // if-block "isSWJ"
[02:48:32.221]          // =>  TRUE
[02:48:32.221]        <control if="hasDormant" while="" timeout="0" info="">
[02:48:32.222]          // if-block "hasDormant"
[02:48:32.222]            // =>  FALSE
[02:48:32.222]          // skip if-block "hasDormant"
[02:48:32.222]        </control>
[02:48:32.222]        <control if="!hasDormant" while="" timeout="0" info="">
[02:48:32.222]          // if-block "!hasDormant"
[02:48:32.222]            // =>  TRUE
[02:48:32.222]          <block atomic="false" info="">
[02:48:32.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:48:32.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:48:32.225]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:48:32.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:48:32.226]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:48:32.227]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:48:32.228]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:48:32.229]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:48:32.229]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:48:32.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:48:32.230]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:48:32.232]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:48:32.232]          </block>
[02:48:32.232]          // end if-block "!hasDormant"
[02:48:32.232]        </control>
[02:48:32.232]        // end if-block "isSWJ"
[02:48:32.233]      </control>
[02:48:32.233]      <control if="!isSWJ" while="" timeout="0" info="">
[02:48:32.233]        // if-block "!isSWJ"
[02:48:32.233]          // =>  FALSE
[02:48:32.233]        // skip if-block "!isSWJ"
[02:48:32.233]      </control>
[02:48:32.233]      <block atomic="false" info="">
[02:48:32.233]        ReadDP(0x0);
[02:48:32.234]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:48:32.234]      </block>
[02:48:32.234]      // end if-block "protType == 2"
[02:48:32.234]    </control>
[02:48:32.234]  </sequence>
[02:48:32.234]  
[02:48:32.237]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:48:32.237]  
[02:48:32.237]  <debugvars>
[02:48:32.237]    // Pre-defined
[02:48:32.237]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:32.237]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:48:32.238]    __dp=0x00000000
[02:48:32.238]    __ap=0x00000000
[02:48:32.238]    __traceout=0x00000000      (Trace Disabled)
[02:48:32.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:32.238]    __FlashAddr=0x00000000
[02:48:32.238]    __FlashLen=0x00000000
[02:48:32.238]    __FlashArg=0x00000000
[02:48:32.238]    __FlashOp=0x00000000
[02:48:32.238]    __Result=0x00000000
[02:48:32.238]  </debugvars>
[02:48:32.238]  
[02:48:32.238]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:48:32.239]    <block atomic="false" info="">
[02:48:32.239]      __var SW_DP_ABORT       = 0x0;
[02:48:32.239]        // -> [SW_DP_ABORT <= 0x00000000]
[02:48:32.239]      __var DP_CTRL_STAT      = 0x4;
[02:48:32.239]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:48:32.239]      __var DP_SELECT         = 0x8;
[02:48:32.239]        // -> [DP_SELECT <= 0x00000008]
[02:48:32.239]      __var powered_down      = 0;
[02:48:32.239]        // -> [powered_down <= 0x00000000]
[02:48:32.239]      WriteDP(DP_SELECT, 0x00000000);
[02:48:32.241]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:48:32.241]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:48:32.242]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:48:32.242]        // -> [powered_down <= 0x00000001]
[02:48:32.242]    </block>
[02:48:32.242]    <control if="powered_down" while="" timeout="0" info="">
[02:48:32.242]      // if-block "powered_down"
[02:48:32.244]        // =>  TRUE
[02:48:32.244]      <block atomic="false" info="">
[02:48:32.244]        Message(0, "Debug/System power-up request sent");
[02:48:32.246]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:48:32.248]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:48:32.249]      </block>
[02:48:32.249]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:48:32.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:48:32.250]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:48:32.251]        // while-condition  =>  FALSE
[02:48:32.251]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:48:32.251]      </control>
[02:48:32.251]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:48:32.251]        // if-block "(__protocol & 0xFFFF) == 1"
[02:48:32.251]          // =>  FALSE
[02:48:32.251]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:48:32.251]      </control>
[02:48:32.251]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:48:32.251]        // if-block "(__protocol & 0xFFFF) == 2"
[02:48:32.251]          // =>  TRUE
[02:48:32.251]        <block atomic="false" info="">
[02:48:32.251]          Message(0, "executing SWD power up");
[02:48:32.253]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:48:32.255]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:48:32.255]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:48:32.258]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:48:32.258]        </block>
[02:48:32.258]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:48:32.258]      </control>
[02:48:32.258]      // end if-block "powered_down"
[02:48:32.258]    </control>
[02:48:32.258]    <block atomic="false" info="">
[02:48:32.258]      __var DEBUG_PORT_VAL    = 0;
[02:48:32.258]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:48:32.259]      __var ACCESS_POINT_VAL  = 0;
[02:48:32.259]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:48:32.259]      __ap = 1; 
[02:48:32.259]        // -> [__ap <= 0x00000001]
[02:48:32.259]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:48:32.262]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:48:32.262]      __ap = 4;
[02:48:32.262]        // -> [__ap <= 0x00000004]
[02:48:32.262]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:48:32.267]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:48:32.267]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:48:32.267]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:48:32.269]    </block>
[02:48:32.269]    <block atomic="false" info="">
[02:48:32.269]      __var nReset = 0x80;
[02:48:32.269]        // -> [nReset <= 0x00000080]
[02:48:32.269]      __var canReadPins = 0;
[02:48:32.269]        // -> [canReadPins <= 0x00000000]
[02:48:32.270]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:48:32.270]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:48:32.271]        // -> [canReadPins <= 0x00000001]
[02:48:32.271]    </block>
[02:48:32.271]    <control if="" while="1" timeout="200" info="">
[02:48:32.271]      // while "1"  (timeout="200")
[02:48:32.271]      // while-condition  =>  TRUE
[02:48:32.271]      // while "1"  (timeout="200")
[02:48:32.271]      // while-condition  =>  TRUE
[02:48:32.271]      // while "1"  (timeout="200")
[02:48:32.272]      // while-condition  =>  TRUE
[02:48:32.272]      // while "1"  (timeout="200")
[02:48:32.272]      // while-condition  =>  TRUE
[02:48:32.272]      // while "1"  (timeout="200")
[02:48:32.272]      // while-condition  =>  TRUE
[02:48:32.272]      // while "1"  (timeout="200")
[02:48:32.272]      // while-condition  =>  TRUE
[02:48:32.272]      // while "1"  (timeout="200")
[02:48:32.272]      // while-condition  =>  TRUE
[02:48:32.272]      // while "1"  (timeout="200")
[02:48:32.272]      // while-condition  =>  TRUE
[02:48:32.272]      // while "1"  (timeout="200")
[02:48:32.273]      // while-condition  =>  TRUE
[02:48:32.273]      // while "1"  (timeout="200")
[02:48:32.273]      // while-condition  =>  TRUE
[02:48:32.273]      // while "1"  (timeout="200")
[02:48:32.273]      // while-condition  =>  TRUE
[02:48:32.273]      // while "1"  (timeout="200")
[02:48:32.273]      // while-condition  =>  TRUE
[02:48:32.273]      // while "1"  (timeout="200")
[02:48:32.273]      // while-condition  =>  TRUE
[02:48:32.273]      // while "1"  (timeout="200")
[02:48:32.274]      // while-condition  =>  TRUE
[02:48:32.274]      // while "1"  (timeout="200")
[02:48:32.274]      // while-condition  =>  TRUE
[02:48:32.274]      // while "1"  (timeout="200")
[02:48:32.274]      // while-condition  =>  TRUE
[02:48:32.274]      // while "1"  (timeout="200")
[02:48:32.274]      // while-condition  =>  TRUE
[02:48:32.274]      // while "1"  (timeout="200")
[02:48:32.275]      // while-condition  =>  TRUE
[02:48:32.275]      // while "1"  (timeout="200")
[02:48:32.275]      // while-condition  =>  TRUE
[02:48:32.275]      // while "1"  (timeout="200")
[02:48:32.276]      // while-condition  =>  TRUE
[02:48:32.276]      // while "1"  (timeout="200")
[02:48:32.276]      // while-condition  =>  TRUE
[02:48:32.276]      // while "1"  (timeout="200")
[02:48:32.276]      // while-condition  =>  TRUE
[02:48:32.276]      // while "1"  (timeout="200")
[02:48:32.276]      // while-condition  =>  TRUE
[02:48:32.276]      // while "1"  (timeout="200")
[02:48:32.276]      // while-condition  =>  TRUE
[02:48:32.276]      // while "1"  (timeout="200")
[02:48:32.277]      // while-condition  =>  TRUE
[02:48:32.277]      // while "1"  (timeout="200")
[02:48:32.277]      // while-condition  =>  TRUE
[02:48:32.277]      // while "1"  (timeout="200")
[02:48:32.277]      // while-condition  =>  TRUE
[02:48:32.277]      // while "1"  (timeout="200")
[02:48:32.277]      // while-condition  =>  TRUE
[02:48:32.277]      // while "1"  (timeout="200")
[02:48:32.277]      // while-condition  =>  TRUE
[02:48:32.277]      // while "1"  (timeout="200")
[02:48:32.277]      // while-condition  =>  TRUE
[02:48:32.277]      // while "1"  (timeout="200")
[02:48:32.278]      // while-condition  =>  TRUE
[02:48:32.278]      // while "1"  (timeout="200")
[02:48:32.278]      // while-condition  =>  TRUE
[02:48:32.278]      // while "1"  (timeout="200")
[02:48:32.278]      // while-condition  =>  TRUE
[02:48:32.278]      // while "1"  (timeout="200")
[02:48:32.278]      // while-condition  =>  TRUE
[02:48:32.278]      // while "1"  (timeout="200")
[02:48:32.278]      // while-condition  =>  TRUE
[02:48:32.278]      // while "1"  (timeout="200")
[02:48:32.279]      // while-condition  =>  TRUE
[02:48:32.279]      // while "1"  (timeout="200")
[02:48:32.279]      // while-condition  =>  TRUE
[02:48:32.279]      // while "1"  (timeout="200")
[02:48:32.279]      // while-condition  =>  TRUE
[02:48:32.279]      // while "1"  (timeout="200")
[02:48:32.279]      // while-condition  =>  TRUE
[02:48:32.279]      // while "1"  (timeout="200")
[02:48:32.279]      // while-condition  =>  TRUE
[02:48:32.280]      // while "1"  (timeout="200")
[02:48:32.280]      // while-condition  =>  TRUE
[02:48:32.280]      // while "1"  (timeout="200")
[02:48:32.280]      // while-condition  =>  TRUE
[02:48:32.280]      // while "1"  (timeout="200")
[02:48:32.280]      // while-condition  =>  TRUE
[02:48:32.280]      // while "1"  (timeout="200")
[02:48:32.280]      // while-condition  =>  TRUE
[02:48:32.280]      // while "1"  (timeout="200")
[02:48:32.280]      // while-condition  =>  TRUE
[02:48:32.281]      // while "1"  (timeout="200")
[02:48:32.281]      // while-condition  =>  TRUE
[02:48:32.281]      // while "1"  (timeout="200")
[02:48:32.281]      // while-condition  =>  TRUE
[02:48:32.281]      // while "1"  (timeout="200")
[02:48:32.281]      // while-condition  =>  TRUE
[02:48:32.282]      // while "1"  (timeout="200")
[02:48:32.282]      // while-condition  =>  TRUE
[02:48:32.282]      // while "1"  (timeout="200")
[02:48:32.282]      // while-condition  =>  TRUE
[02:48:32.282]      // while "1"  (timeout="200")
[02:48:32.282]      // while-condition  =>  TRUE
[02:48:32.282]      // while "1"  (timeout="200")
[02:48:32.282]      // while-condition  =>  TRUE
[02:48:32.282]      // while "1"  (timeout="200")
[02:48:32.282]      // while-condition  =>  TRUE
[02:48:32.283]      // while "1"  (timeout="200")
[02:48:32.283]      // while-condition  =>  TRUE
[02:48:32.283]      // while "1"  (timeout="200")
[02:48:32.283]      // while-condition  =>  TRUE
[02:48:32.283]      // while "1"  (timeout="200")
[02:48:32.283]      // while-condition  =>  TRUE
[02:48:32.283]      // while "1"  (timeout="200")
[02:48:32.283]      // while-condition  =>  TRUE
[02:48:32.283]      // while "1"  (timeout="200")
[02:48:32.283]      // while-condition  =>  TRUE
[02:48:32.284]      // while "1"  (timeout="200")
[02:48:32.284]      // while  =>  TIMEOUT
[02:48:32.284]      // end while "1"
[02:48:32.284]    </control>
[02:48:32.284]    <control if="canReadPins" while="" timeout="0" info="">
[02:48:32.284]      // if-block "canReadPins"
[02:48:32.284]        // =>  TRUE
[02:48:32.284]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:48:32.284]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:48:32.285]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:48:32.286]        // while-condition  =>  FALSE
[02:48:32.286]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:48:32.286]      </control>
[02:48:32.286]      // end if-block "canReadPins"
[02:48:32.286]    </control>
[02:48:32.286]    <control if="!canReadPins" while="" timeout="0" info="">
[02:48:32.287]      // if-block "!canReadPins"
[02:48:32.287]        // =>  FALSE
[02:48:32.287]      // skip if-block "!canReadPins"
[02:48:32.287]    </control>
[02:48:32.287]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:48:32.287]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:48:32.287]        // =>  TRUE
[02:48:32.287]      <block atomic="false" info="">
[02:48:32.287]        WriteAP(0x00, 0x190008);
[02:48:32.289]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:48:32.290]        WriteAP(0xF0, 0x01);
[02:48:32.292]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:48:32.292]      </block>
[02:48:32.292]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:48:32.293]    </control>
[02:48:32.293]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:48:32.293]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:48:32.293]        // =>  FALSE
[02:48:32.293]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:48:32.293]    </control>
[02:48:32.293]    <block atomic="false" info="">
[02:48:32.293]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:48:32.297]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:48:32.297]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:48:32.297]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:48:32.300]      __ap = 0; //lets make sure we reset the access point selection
[02:48:32.300]        // -> [__ap <= 0x00000000]
[02:48:32.300]    </block>
[02:48:32.300]  </sequence>
[02:48:32.300]  
[02:48:32.319]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:48:32.319]  
[02:48:32.319]  <debugvars>
[02:48:32.319]    // Pre-defined
[02:48:32.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:32.319]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:48:32.320]    __dp=0x00000000
[02:48:32.320]    __ap=0x00000000
[02:48:32.320]    __traceout=0x00000000      (Trace Disabled)
[02:48:32.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:32.320]    __FlashAddr=0x00000000
[02:48:32.320]    __FlashLen=0x00000000
[02:48:32.320]    __FlashArg=0x00000000
[02:48:32.320]    __FlashOp=0x00000000
[02:48:32.321]    __Result=0x00000000
[02:48:32.321]  </debugvars>
[02:48:32.321]  
[02:48:32.321]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:48:32.321]    <block atomic="false" info="">
[02:48:32.321]      __var deviceID = 0;
[02:48:32.321]        // -> [deviceID <= 0x00000000]
[02:48:32.321]      __var version = 0;
[02:48:32.321]        // -> [version <= 0x00000000]
[02:48:32.321]      __var partNum = 0;
[02:48:32.321]        // -> [partNum <= 0x00000000]
[02:48:32.322]      __var manuf = 0;
[02:48:32.322]        // -> [manuf <= 0x00000000]
[02:48:32.322]      __var isMSPM0G1X0X_G3X0X = 0;
[02:48:32.322]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:48:32.322]      __var isProduction = 0;
[02:48:32.322]        // -> [isProduction <= 0x00000000]
[02:48:32.322]      __var continueId = 0;
[02:48:32.322]        // -> [continueId <= 0x00000000]
[02:48:32.322]      deviceID =   Read32(0x41C40004);
[02:48:32.329]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:48:32.329]        // -> [deviceID <= 0x2BB8802F]
[02:48:32.329]      version = deviceID >> 28;
[02:48:32.330]        // -> [version <= 0x00000002]
[02:48:32.330]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:48:32.330]        // -> [partNum <= 0x0000BB88]
[02:48:32.330]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:48:32.330]        // -> [manuf <= 0x00000017]
[02:48:32.330]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:48:32.331]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:48:32.331]      isProduction = (version > 0);
[02:48:32.331]        // -> [isProduction <= 0x00000001]
[02:48:32.331]    </block>
[02:48:32.331]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:48:32.331]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:48:32.331]        // =>  FALSE
[02:48:32.331]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:48:32.331]    </control>
[02:48:32.331]    <control if="continueId == 4" while="" timeout="0" info="">
[02:48:32.331]      // if-block "continueId == 4"
[02:48:32.331]        // =>  FALSE
[02:48:32.331]      // skip if-block "continueId == 4"
[02:48:32.331]    </control>
[02:48:32.331]    <control if="!isProduction" while="" timeout="0" info="">
[02:48:32.331]      // if-block "!isProduction"
[02:48:32.332]        // =>  FALSE
[02:48:32.333]      // skip if-block "!isProduction"
[02:48:32.333]    </control>
[02:48:32.333]  </sequence>
[02:48:32.333]  
[02:51:49.245]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:51:49.245]  
[02:51:49.247]  <debugvars>
[02:51:49.247]    // Pre-defined
[02:51:49.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:51:49.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:51:49.248]    __dp=0x00000000
[02:51:49.248]    __ap=0x00000000
[02:51:49.248]    __traceout=0x00000000      (Trace Disabled)
[02:51:49.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:51:49.248]    __FlashAddr=0x00000000
[02:51:49.248]    __FlashLen=0x00000000
[02:51:49.248]    __FlashArg=0x00000000
[02:51:49.248]    __FlashOp=0x00000000
[02:51:49.248]    __Result=0x00000000
[02:51:49.248]  </debugvars>
[02:51:49.249]  
[02:51:49.249]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:51:49.249]    <block atomic="false" info="">
[02:51:49.249]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:51:49.249]        // -> [isSWJ <= 0x00000001]
[02:51:49.249]      __var hasDormant = __protocol & 0x00020000;
[02:51:49.249]        // -> [hasDormant <= 0x00000000]
[02:51:49.249]      __var protType   = __protocol & 0x0000FFFF;
[02:51:49.249]        // -> [protType <= 0x00000002]
[02:51:49.249]    </block>
[02:51:49.249]    <control if="protType == 1" while="" timeout="0" info="">
[02:51:49.249]      // if-block "protType == 1"
[02:51:49.249]        // =>  FALSE
[02:51:49.249]      // skip if-block "protType == 1"
[02:51:49.250]    </control>
[02:51:49.250]    <control if="protType == 2" while="" timeout="0" info="">
[02:51:49.250]      // if-block "protType == 2"
[02:51:49.250]        // =>  TRUE
[02:51:49.250]      <control if="isSWJ" while="" timeout="0" info="">
[02:51:49.250]        // if-block "isSWJ"
[02:51:49.250]          // =>  TRUE
[02:51:49.250]        <control if="hasDormant" while="" timeout="0" info="">
[02:51:49.250]          // if-block "hasDormant"
[02:51:49.250]            // =>  FALSE
[02:51:49.251]          // skip if-block "hasDormant"
[02:51:49.251]        </control>
[02:51:49.251]        <control if="!hasDormant" while="" timeout="0" info="">
[02:51:49.251]          // if-block "!hasDormant"
[02:51:49.251]            // =>  TRUE
[02:51:49.251]          <block atomic="false" info="">
[02:51:49.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:51:49.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:51:49.253]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:51:49.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:51:49.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:51:49.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:51:49.256]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:51:49.257]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:51:49.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:51:49.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:51:49.258]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:51:49.260]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:51:49.260]          </block>
[02:51:49.261]          // end if-block "!hasDormant"
[02:51:49.261]        </control>
[02:51:49.261]        // end if-block "isSWJ"
[02:51:49.261]      </control>
[02:51:49.261]      <control if="!isSWJ" while="" timeout="0" info="">
[02:51:49.261]        // if-block "!isSWJ"
[02:51:49.261]          // =>  FALSE
[02:51:49.262]        // skip if-block "!isSWJ"
[02:51:49.262]      </control>
[02:51:49.262]      <block atomic="false" info="">
[02:51:49.262]        ReadDP(0x0);
[02:51:49.264]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:51:49.264]      </block>
[02:51:49.264]      // end if-block "protType == 2"
[02:51:49.264]    </control>
[02:51:49.264]  </sequence>
[02:51:49.264]  
[02:51:49.267]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:51:49.267]  
[02:51:49.267]  <debugvars>
[02:51:49.267]    // Pre-defined
[02:51:49.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:51:49.267]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:51:49.268]    __dp=0x00000000
[02:51:49.268]    __ap=0x00000000
[02:51:49.268]    __traceout=0x00000000      (Trace Disabled)
[02:51:49.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:51:49.268]    __FlashAddr=0x00000000
[02:51:49.268]    __FlashLen=0x00000000
[02:51:49.268]    __FlashArg=0x00000000
[02:51:49.268]    __FlashOp=0x00000000
[02:51:49.268]    __Result=0x00000000
[02:51:49.268]  </debugvars>
[02:51:49.269]  
[02:51:49.269]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:51:49.269]    <block atomic="false" info="">
[02:51:49.269]      __var SW_DP_ABORT       = 0x0;
[02:51:49.269]        // -> [SW_DP_ABORT <= 0x00000000]
[02:51:49.269]      __var DP_CTRL_STAT      = 0x4;
[02:51:49.269]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:51:49.269]      __var DP_SELECT         = 0x8;
[02:51:49.269]        // -> [DP_SELECT <= 0x00000008]
[02:51:49.269]      __var powered_down      = 0;
[02:51:49.269]        // -> [powered_down <= 0x00000000]
[02:51:49.269]      WriteDP(DP_SELECT, 0x00000000);
[02:51:49.272]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:51:49.272]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:51:49.273]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:51:49.273]        // -> [powered_down <= 0x00000001]
[02:51:49.273]    </block>
[02:51:49.273]    <control if="powered_down" while="" timeout="0" info="">
[02:51:49.273]      // if-block "powered_down"
[02:51:49.273]        // =>  TRUE
[02:51:49.273]      <block atomic="false" info="">
[02:51:49.273]        Message(0, "Debug/System power-up request sent");
[02:51:49.277]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:51:49.278]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:51:49.279]      </block>
[02:51:49.279]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:51:49.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:51:49.281]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:51:49.281]        // while-condition  =>  FALSE
[02:51:49.281]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:51:49.281]      </control>
[02:51:49.281]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:51:49.281]        // if-block "(__protocol & 0xFFFF) == 1"
[02:51:49.281]          // =>  FALSE
[02:51:49.281]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:51:49.281]      </control>
[02:51:49.281]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:51:49.282]        // if-block "(__protocol & 0xFFFF) == 2"
[02:51:49.282]          // =>  TRUE
[02:51:49.282]        <block atomic="false" info="">
[02:51:49.282]          Message(0, "executing SWD power up");
[02:51:49.283]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:51:49.284]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:51:49.285]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:51:49.287]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:51:49.287]        </block>
[02:51:49.287]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:51:49.287]      </control>
[02:51:49.288]      // end if-block "powered_down"
[02:51:49.288]    </control>
[02:51:49.288]    <block atomic="false" info="">
[02:51:49.288]      __var DEBUG_PORT_VAL    = 0;
[02:51:49.288]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:51:49.288]      __var ACCESS_POINT_VAL  = 0;
[02:51:49.288]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:51:49.288]      __ap = 1; 
[02:51:49.288]        // -> [__ap <= 0x00000001]
[02:51:49.288]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:51:49.292]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:51:49.292]      __ap = 4;
[02:51:49.292]        // -> [__ap <= 0x00000004]
[02:51:49.292]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:51:49.295]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:51:49.296]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:51:49.296]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:51:49.297]    </block>
[02:51:49.297]    <block atomic="false" info="">
[02:51:49.297]      __var nReset = 0x80;
[02:51:49.297]        // -> [nReset <= 0x00000080]
[02:51:49.298]      __var canReadPins = 0;
[02:51:49.298]        // -> [canReadPins <= 0x00000000]
[02:51:49.298]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:51:49.299]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:51:49.300]        // -> [canReadPins <= 0x00000001]
[02:51:49.300]    </block>
[02:51:49.300]    <control if="" while="1" timeout="200" info="">
[02:51:49.300]      // while "1"  (timeout="200")
[02:51:49.300]      // while-condition  =>  TRUE
[02:51:49.300]      // while "1"  (timeout="200")
[02:51:49.300]      // while-condition  =>  TRUE
[02:51:49.300]      // while "1"  (timeout="200")
[02:51:49.300]      // while-condition  =>  TRUE
[02:51:49.300]      // while "1"  (timeout="200")
[02:51:49.301]      // while-condition  =>  TRUE
[02:51:49.301]      // while "1"  (timeout="200")
[02:51:49.301]      // while-condition  =>  TRUE
[02:51:49.301]      // while "1"  (timeout="200")
[02:51:49.301]      // while-condition  =>  TRUE
[02:51:49.301]      // while "1"  (timeout="200")
[02:51:49.301]      // while-condition  =>  TRUE
[02:51:49.301]      // while "1"  (timeout="200")
[02:51:49.301]      // while-condition  =>  TRUE
[02:51:49.301]      // while "1"  (timeout="200")
[02:51:49.301]      // while-condition  =>  TRUE
[02:51:49.301]      // while "1"  (timeout="200")
[02:51:49.302]      // while-condition  =>  TRUE
[02:51:49.302]      // while "1"  (timeout="200")
[02:51:49.302]      // while-condition  =>  TRUE
[02:51:49.302]      // while "1"  (timeout="200")
[02:51:49.302]      // while-condition  =>  TRUE
[02:51:49.302]      // while "1"  (timeout="200")
[02:51:49.302]      // while-condition  =>  TRUE
[02:51:49.302]      // while "1"  (timeout="200")
[02:51:49.302]      // while-condition  =>  TRUE
[02:51:49.302]      // while "1"  (timeout="200")
[02:51:49.302]      // while-condition  =>  TRUE
[02:51:49.302]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.303]      // while-condition  =>  TRUE
[02:51:49.303]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.305]      // while-condition  =>  TRUE
[02:51:49.305]      // while "1"  (timeout="200")
[02:51:49.306]      // while-condition  =>  TRUE
[02:51:49.306]      // while "1"  (timeout="200")
[02:51:49.306]      // while-condition  =>  TRUE
[02:51:49.306]      // while "1"  (timeout="200")
[02:51:49.306]      // while-condition  =>  TRUE
[02:51:49.306]      // while "1"  (timeout="200")
[02:51:49.306]      // while-condition  =>  TRUE
[02:51:49.306]      // while "1"  (timeout="200")
[02:51:49.306]      // while-condition  =>  TRUE
[02:51:49.306]      // while "1"  (timeout="200")
[02:51:49.307]      // while-condition  =>  TRUE
[02:51:49.307]      // while "1"  (timeout="200")
[02:51:49.307]      // while-condition  =>  TRUE
[02:51:49.307]      // while "1"  (timeout="200")
[02:51:49.307]      // while-condition  =>  TRUE
[02:51:49.307]      // while "1"  (timeout="200")
[02:51:49.307]      // while-condition  =>  TRUE
[02:51:49.307]      // while "1"  (timeout="200")
[02:51:49.307]      // while-condition  =>  TRUE
[02:51:49.307]      // while "1"  (timeout="200")
[02:51:49.307]      // while-condition  =>  TRUE
[02:51:49.307]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.308]      // while-condition  =>  TRUE
[02:51:49.308]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.310]      // while-condition  =>  TRUE
[02:51:49.310]      // while "1"  (timeout="200")
[02:51:49.311]      // while-condition  =>  TRUE
[02:51:49.311]      // while "1"  (timeout="200")
[02:51:49.311]      // while-condition  =>  TRUE
[02:51:49.311]      // while "1"  (timeout="200")
[02:51:49.311]      // while-condition  =>  TRUE
[02:51:49.311]      // while "1"  (timeout="200")
[02:51:49.311]      // while-condition  =>  TRUE
[02:51:49.311]      // while "1"  (timeout="200")
[02:51:49.311]      // while-condition  =>  TRUE
[02:51:49.311]      // while "1"  (timeout="200")
[02:51:49.311]      // while-condition  =>  TRUE
[02:51:49.312]      // while "1"  (timeout="200")
[02:51:49.312]      // while-condition  =>  TRUE
[02:51:49.312]      // while "1"  (timeout="200")
[02:51:49.312]      // while-condition  =>  TRUE
[02:51:49.312]      // while "1"  (timeout="200")
[02:51:49.312]      // while-condition  =>  TRUE
[02:51:49.312]      // while "1"  (timeout="200")
[02:51:49.312]      // while-condition  =>  TRUE
[02:51:49.312]      // while "1"  (timeout="200")
[02:51:49.312]      // while-condition  =>  TRUE
[02:51:49.313]      // while "1"  (timeout="200")
[02:51:49.313]      // while-condition  =>  TRUE
[02:51:49.313]      // while "1"  (timeout="200")
[02:51:49.313]      // while-condition  =>  TRUE
[02:51:49.313]      // while "1"  (timeout="200")
[02:51:49.313]      // while-condition  =>  TRUE
[02:51:49.313]      // while "1"  (timeout="200")
[02:51:49.313]      // while-condition  =>  TRUE
[02:51:49.313]      // while "1"  (timeout="200")
[02:51:49.313]      // while-condition  =>  TRUE
[02:51:49.313]      // while "1"  (timeout="200")
[02:51:49.314]      // while-condition  =>  TRUE
[02:51:49.314]      // while "1"  (timeout="200")
[02:51:49.314]      // while-condition  =>  TRUE
[02:51:49.314]      // while "1"  (timeout="200")
[02:51:49.314]      // while-condition  =>  TRUE
[02:51:49.314]      // while "1"  (timeout="200")
[02:51:49.314]      // while-condition  =>  TRUE
[02:51:49.314]      // while "1"  (timeout="200")
[02:51:49.314]      // while-condition  =>  TRUE
[02:51:49.314]      // while "1"  (timeout="200")
[02:51:49.314]      // while-condition  =>  TRUE
[02:51:49.315]      // while "1"  (timeout="200")
[02:51:49.315]      // while  =>  TIMEOUT
[02:51:49.315]      // end while "1"
[02:51:49.315]    </control>
[02:51:49.315]    <control if="canReadPins" while="" timeout="0" info="">
[02:51:49.315]      // if-block "canReadPins"
[02:51:49.315]        // =>  TRUE
[02:51:49.315]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:51:49.315]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:51:49.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:51:49.318]        // while-condition  =>  FALSE
[02:51:49.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:51:49.318]      </control>
[02:51:49.318]      // end if-block "canReadPins"
[02:51:49.318]    </control>
[02:51:49.319]    <control if="!canReadPins" while="" timeout="0" info="">
[02:51:49.319]      // if-block "!canReadPins"
[02:51:49.319]        // =>  FALSE
[02:51:49.319]      // skip if-block "!canReadPins"
[02:51:49.319]    </control>
[02:51:49.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:51:49.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:51:49.319]        // =>  TRUE
[02:51:49.319]      <block atomic="false" info="">
[02:51:49.319]        WriteAP(0x00, 0x190008);
[02:51:49.321]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:51:49.321]        WriteAP(0xF0, 0x01);
[02:51:49.324]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:51:49.324]      </block>
[02:51:49.325]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:51:49.325]    </control>
[02:51:49.325]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:51:49.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:51:49.325]        // =>  FALSE
[02:51:49.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:51:49.325]    </control>
[02:51:49.325]    <block atomic="false" info="">
[02:51:49.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:51:49.328]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:51:49.328]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:51:49.328]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:51:49.330]      __ap = 0; //lets make sure we reset the access point selection
[02:51:49.330]        // -> [__ap <= 0x00000000]
[02:51:49.330]    </block>
[02:51:49.330]  </sequence>
[02:51:49.330]  
[02:51:49.352]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:51:49.352]  
[02:51:49.352]  <debugvars>
[02:51:49.352]    // Pre-defined
[02:51:49.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:51:49.352]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:51:49.352]    __dp=0x00000000
[02:51:49.352]    __ap=0x00000000
[02:51:49.353]    __traceout=0x00000000      (Trace Disabled)
[02:51:49.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:51:49.353]    __FlashAddr=0x00000000
[02:51:49.353]    __FlashLen=0x00000000
[02:51:49.353]    __FlashArg=0x00000000
[02:51:49.353]    __FlashOp=0x00000000
[02:51:49.353]    __Result=0x00000000
[02:51:49.353]  </debugvars>
[02:51:49.353]  
[02:51:49.353]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:51:49.353]    <block atomic="false" info="">
[02:51:49.354]      __var deviceID = 0;
[02:51:49.354]        // -> [deviceID <= 0x00000000]
[02:51:49.354]      __var version = 0;
[02:51:49.354]        // -> [version <= 0x00000000]
[02:51:49.354]      __var partNum = 0;
[02:51:49.354]        // -> [partNum <= 0x00000000]
[02:51:49.354]      __var manuf = 0;
[02:51:49.354]        // -> [manuf <= 0x00000000]
[02:51:49.354]      __var isMSPM0G1X0X_G3X0X = 0;
[02:51:49.355]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:51:49.355]      __var isProduction = 0;
[02:51:49.355]        // -> [isProduction <= 0x00000000]
[02:51:49.355]      __var continueId = 0;
[02:51:49.355]        // -> [continueId <= 0x00000000]
[02:51:49.355]      deviceID =   Read32(0x41C40004);
[02:51:49.359]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:51:49.359]        // -> [deviceID <= 0x2BB8802F]
[02:51:49.359]      version = deviceID >> 28;
[02:51:49.359]        // -> [version <= 0x00000002]
[02:51:49.359]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:51:49.360]        // -> [partNum <= 0x0000BB88]
[02:51:49.360]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:51:49.360]        // -> [manuf <= 0x00000017]
[02:51:49.360]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:51:49.360]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:51:49.360]      isProduction = (version > 0);
[02:51:49.360]        // -> [isProduction <= 0x00000001]
[02:51:49.360]    </block>
[02:51:49.360]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:51:49.360]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:51:49.360]        // =>  FALSE
[02:51:49.360]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:51:49.361]    </control>
[02:51:49.361]    <control if="continueId == 4" while="" timeout="0" info="">
[02:51:49.361]      // if-block "continueId == 4"
[02:51:49.361]        // =>  FALSE
[02:51:49.361]      // skip if-block "continueId == 4"
[02:51:49.361]    </control>
[02:51:49.362]    <control if="!isProduction" while="" timeout="0" info="">
[02:51:49.362]      // if-block "!isProduction"
[02:51:49.362]        // =>  FALSE
[02:51:49.362]      // skip if-block "!isProduction"
[02:51:49.362]    </control>
[02:51:49.362]  </sequence>
[02:51:49.362]  
[02:53:07.723]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:53:07.723]  
[02:53:07.731]  <debugvars>
[02:53:07.731]    // Pre-defined
[02:53:07.731]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:07.731]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:07.731]    __dp=0x00000000
[02:53:07.731]    __ap=0x00000000
[02:53:07.731]    __traceout=0x00000000      (Trace Disabled)
[02:53:07.731]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:07.732]    __FlashAddr=0x00000000
[02:53:07.732]    __FlashLen=0x00000000
[02:53:07.732]    __FlashArg=0x00000000
[02:53:07.732]    __FlashOp=0x00000000
[02:53:07.732]    __Result=0x00000000
[02:53:07.732]  </debugvars>
[02:53:07.732]  
[02:53:07.732]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:53:07.732]    <block atomic="false" info="">
[02:53:07.732]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:53:07.732]        // -> [isSWJ <= 0x00000001]
[02:53:07.732]      __var hasDormant = __protocol & 0x00020000;
[02:53:07.732]        // -> [hasDormant <= 0x00000000]
[02:53:07.732]      __var protType   = __protocol & 0x0000FFFF;
[02:53:07.732]        // -> [protType <= 0x00000002]
[02:53:07.733]    </block>
[02:53:07.733]    <control if="protType == 1" while="" timeout="0" info="">
[02:53:07.733]      // if-block "protType == 1"
[02:53:07.733]        // =>  FALSE
[02:53:07.734]      // skip if-block "protType == 1"
[02:53:07.734]    </control>
[02:53:07.734]    <control if="protType == 2" while="" timeout="0" info="">
[02:53:07.734]      // if-block "protType == 2"
[02:53:07.734]        // =>  TRUE
[02:53:07.734]      <control if="isSWJ" while="" timeout="0" info="">
[02:53:07.734]        // if-block "isSWJ"
[02:53:07.734]          // =>  TRUE
[02:53:07.734]        <control if="hasDormant" while="" timeout="0" info="">
[02:53:07.734]          // if-block "hasDormant"
[02:53:07.734]            // =>  FALSE
[02:53:07.734]          // skip if-block "hasDormant"
[02:53:07.735]        </control>
[02:53:07.735]        <control if="!hasDormant" while="" timeout="0" info="">
[02:53:07.735]          // if-block "!hasDormant"
[02:53:07.735]            // =>  TRUE
[02:53:07.735]          <block atomic="false" info="">
[02:53:07.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:53:07.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:07.736]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:53:07.737]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:53:07.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:53:07.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:07.740]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:53:07.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:53:07.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:53:07.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:07.743]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:53:07.745]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:53:07.745]          </block>
[02:53:07.745]          // end if-block "!hasDormant"
[02:53:07.745]        </control>
[02:53:07.745]        // end if-block "isSWJ"
[02:53:07.745]      </control>
[02:53:07.745]      <control if="!isSWJ" while="" timeout="0" info="">
[02:53:07.745]        // if-block "!isSWJ"
[02:53:07.746]          // =>  FALSE
[02:53:07.746]        // skip if-block "!isSWJ"
[02:53:07.746]      </control>
[02:53:07.746]      <block atomic="false" info="">
[02:53:07.746]        ReadDP(0x0);
[02:53:07.748]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:53:07.748]      </block>
[02:53:07.748]      // end if-block "protType == 2"
[02:53:07.748]    </control>
[02:53:07.748]  </sequence>
[02:53:07.748]  
[02:53:07.751]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:53:07.751]  
[02:53:07.751]  <debugvars>
[02:53:07.751]    // Pre-defined
[02:53:07.751]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:07.751]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:07.751]    __dp=0x00000000
[02:53:07.752]    __ap=0x00000000
[02:53:07.752]    __traceout=0x00000000      (Trace Disabled)
[02:53:07.752]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:07.752]    __FlashAddr=0x00000000
[02:53:07.752]    __FlashLen=0x00000000
[02:53:07.752]    __FlashArg=0x00000000
[02:53:07.752]    __FlashOp=0x00000000
[02:53:07.752]    __Result=0x00000000
[02:53:07.752]  </debugvars>
[02:53:07.752]  
[02:53:07.752]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:53:07.752]    <block atomic="false" info="">
[02:53:07.752]      __var SW_DP_ABORT       = 0x0;
[02:53:07.752]        // -> [SW_DP_ABORT <= 0x00000000]
[02:53:07.754]      __var DP_CTRL_STAT      = 0x4;
[02:53:07.754]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:53:07.754]      __var DP_SELECT         = 0x8;
[02:53:07.754]        // -> [DP_SELECT <= 0x00000008]
[02:53:07.754]      __var powered_down      = 0;
[02:53:07.754]        // -> [powered_down <= 0x00000000]
[02:53:07.754]      WriteDP(DP_SELECT, 0x00000000);
[02:53:07.757]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:53:07.757]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:53:07.758]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:53:07.758]        // -> [powered_down <= 0x00000001]
[02:53:07.758]    </block>
[02:53:07.759]    <control if="powered_down" while="" timeout="0" info="">
[02:53:07.759]      // if-block "powered_down"
[02:53:07.759]        // =>  TRUE
[02:53:07.759]      <block atomic="false" info="">
[02:53:07.759]        Message(0, "Debug/System power-up request sent");
[02:53:07.762]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:53:07.763]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:53:07.763]      </block>
[02:53:07.764]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:53:07.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:53:07.765]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:53:07.765]        // while-condition  =>  FALSE
[02:53:07.765]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:53:07.765]      </control>
[02:53:07.765]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:53:07.765]        // if-block "(__protocol & 0xFFFF) == 1"
[02:53:07.765]          // =>  FALSE
[02:53:07.766]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:53:07.766]      </control>
[02:53:07.766]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:53:07.766]        // if-block "(__protocol & 0xFFFF) == 2"
[02:53:07.767]          // =>  TRUE
[02:53:07.767]        <block atomic="false" info="">
[02:53:07.767]          Message(0, "executing SWD power up");
[02:53:07.768]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:53:07.771]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:53:07.772]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:53:07.773]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:53:07.773]        </block>
[02:53:07.773]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:53:07.773]      </control>
[02:53:07.773]      // end if-block "powered_down"
[02:53:07.774]    </control>
[02:53:07.774]    <block atomic="false" info="">
[02:53:07.774]      __var DEBUG_PORT_VAL    = 0;
[02:53:07.774]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:53:07.774]      __var ACCESS_POINT_VAL  = 0;
[02:53:07.774]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:53:07.774]      __ap = 1; 
[02:53:07.774]        // -> [__ap <= 0x00000001]
[02:53:07.774]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:53:07.778]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:53:07.778]      __ap = 4;
[02:53:07.778]        // -> [__ap <= 0x00000004]
[02:53:07.778]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:07.781]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:53:07.781]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:53:07.781]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:07.783]    </block>
[02:53:07.783]    <block atomic="false" info="">
[02:53:07.783]      __var nReset = 0x80;
[02:53:07.783]        // -> [nReset <= 0x00000080]
[02:53:07.783]      __var canReadPins = 0;
[02:53:07.783]        // -> [canReadPins <= 0x00000000]
[02:53:07.783]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:53:07.784]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:53:07.784]        // -> [canReadPins <= 0x00000001]
[02:53:07.786]    </block>
[02:53:07.786]    <control if="" while="1" timeout="200" info="">
[02:53:07.786]      // while "1"  (timeout="200")
[02:53:07.786]      // while-condition  =>  TRUE
[02:53:07.786]      // while "1"  (timeout="200")
[02:53:07.786]      // while-condition  =>  TRUE
[02:53:07.786]      // while "1"  (timeout="200")
[02:53:07.786]      // while-condition  =>  TRUE
[02:53:07.786]      // while "1"  (timeout="200")
[02:53:07.786]      // while-condition  =>  TRUE
[02:53:07.786]      // while "1"  (timeout="200")
[02:53:07.786]      // while-condition  =>  TRUE
[02:53:07.787]      // while "1"  (timeout="200")
[02:53:07.787]      // while-condition  =>  TRUE
[02:53:07.787]      // while "1"  (timeout="200")
[02:53:07.787]      // while-condition  =>  TRUE
[02:53:07.787]      // while "1"  (timeout="200")
[02:53:07.787]      // while-condition  =>  TRUE
[02:53:07.787]      // while "1"  (timeout="200")
[02:53:07.787]      // while-condition  =>  TRUE
[02:53:07.787]      // while "1"  (timeout="200")
[02:53:07.787]      // while-condition  =>  TRUE
[02:53:07.787]      // while "1"  (timeout="200")
[02:53:07.787]      // while-condition  =>  TRUE
[02:53:07.787]      // while "1"  (timeout="200")
[02:53:07.788]      // while-condition  =>  TRUE
[02:53:07.788]      // while "1"  (timeout="200")
[02:53:07.788]      // while-condition  =>  TRUE
[02:53:07.789]      // while "1"  (timeout="200")
[02:53:07.789]      // while-condition  =>  TRUE
[02:53:07.789]      // while "1"  (timeout="200")
[02:53:07.789]      // while-condition  =>  TRUE
[02:53:07.789]      // while "1"  (timeout="200")
[02:53:07.789]      // while-condition  =>  TRUE
[02:53:07.789]      // while "1"  (timeout="200")
[02:53:07.789]      // while-condition  =>  TRUE
[02:53:07.789]      // while "1"  (timeout="200")
[02:53:07.790]      // while-condition  =>  TRUE
[02:53:07.790]      // while "1"  (timeout="200")
[02:53:07.790]      // while-condition  =>  TRUE
[02:53:07.790]      // while "1"  (timeout="200")
[02:53:07.790]      // while-condition  =>  TRUE
[02:53:07.790]      // while "1"  (timeout="200")
[02:53:07.790]      // while-condition  =>  TRUE
[02:53:07.790]      // while "1"  (timeout="200")
[02:53:07.790]      // while-condition  =>  TRUE
[02:53:07.790]      // while "1"  (timeout="200")
[02:53:07.790]      // while-condition  =>  TRUE
[02:53:07.790]      // while "1"  (timeout="200")
[02:53:07.790]      // while-condition  =>  TRUE
[02:53:07.791]      // while "1"  (timeout="200")
[02:53:07.791]      // while-condition  =>  TRUE
[02:53:07.791]      // while "1"  (timeout="200")
[02:53:07.791]      // while-condition  =>  TRUE
[02:53:07.791]      // while "1"  (timeout="200")
[02:53:07.791]      // while-condition  =>  TRUE
[02:53:07.791]      // while "1"  (timeout="200")
[02:53:07.791]      // while-condition  =>  TRUE
[02:53:07.791]      // while "1"  (timeout="200")
[02:53:07.791]      // while-condition  =>  TRUE
[02:53:07.791]      // while "1"  (timeout="200")
[02:53:07.791]      // while-condition  =>  TRUE
[02:53:07.791]      // while "1"  (timeout="200")
[02:53:07.792]      // while-condition  =>  TRUE
[02:53:07.792]      // while "1"  (timeout="200")
[02:53:07.792]      // while-condition  =>  TRUE
[02:53:07.792]      // while "1"  (timeout="200")
[02:53:07.792]      // while-condition  =>  TRUE
[02:53:07.792]      // while "1"  (timeout="200")
[02:53:07.792]      // while-condition  =>  TRUE
[02:53:07.792]      // while "1"  (timeout="200")
[02:53:07.792]      // while-condition  =>  TRUE
[02:53:07.792]      // while "1"  (timeout="200")
[02:53:07.792]      // while-condition  =>  TRUE
[02:53:07.793]      // while "1"  (timeout="200")
[02:53:07.793]      // while-condition  =>  TRUE
[02:53:07.793]      // while "1"  (timeout="200")
[02:53:07.793]      // while-condition  =>  TRUE
[02:53:07.793]      // while "1"  (timeout="200")
[02:53:07.793]      // while-condition  =>  TRUE
[02:53:07.794]      // while "1"  (timeout="200")
[02:53:07.794]      // while-condition  =>  TRUE
[02:53:07.794]      // while "1"  (timeout="200")
[02:53:07.794]      // while-condition  =>  TRUE
[02:53:07.794]      // while "1"  (timeout="200")
[02:53:07.794]      // while-condition  =>  TRUE
[02:53:07.794]      // while "1"  (timeout="200")
[02:53:07.794]      // while-condition  =>  TRUE
[02:53:07.794]      // while "1"  (timeout="200")
[02:53:07.795]      // while-condition  =>  TRUE
[02:53:07.795]      // while "1"  (timeout="200")
[02:53:07.795]      // while-condition  =>  TRUE
[02:53:07.795]      // while "1"  (timeout="200")
[02:53:07.795]      // while-condition  =>  TRUE
[02:53:07.795]      // while "1"  (timeout="200")
[02:53:07.795]      // while-condition  =>  TRUE
[02:53:07.795]      // while "1"  (timeout="200")
[02:53:07.795]      // while-condition  =>  TRUE
[02:53:07.795]      // while "1"  (timeout="200")
[02:53:07.795]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.796]      // while "1"  (timeout="200")
[02:53:07.796]      // while-condition  =>  TRUE
[02:53:07.798]      // while "1"  (timeout="200")
[02:53:07.798]      // while-condition  =>  TRUE
[02:53:07.798]      // while "1"  (timeout="200")
[02:53:07.798]      // while-condition  =>  TRUE
[02:53:07.798]      // while "1"  (timeout="200")
[02:53:07.798]      // while-condition  =>  TRUE
[02:53:07.798]      // while "1"  (timeout="200")
[02:53:07.798]      // while-condition  =>  TRUE
[02:53:07.798]      // while "1"  (timeout="200")
[02:53:07.798]      // while-condition  =>  TRUE
[02:53:07.798]      // while "1"  (timeout="200")
[02:53:07.798]      // while-condition  =>  TRUE
[02:53:07.798]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.799]      // while-condition  =>  TRUE
[02:53:07.799]      // while "1"  (timeout="200")
[02:53:07.800]      // while-condition  =>  TRUE
[02:53:07.800]      // while "1"  (timeout="200")
[02:53:07.800]      // while  =>  TIMEOUT
[02:53:07.800]      // end while "1"
[02:53:07.800]    </control>
[02:53:07.800]    <control if="canReadPins" while="" timeout="0" info="">
[02:53:07.800]      // if-block "canReadPins"
[02:53:07.800]        // =>  TRUE
[02:53:07.800]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:53:07.800]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:53:07.803]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:53:07.803]        // while-condition  =>  FALSE
[02:53:07.803]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:53:07.803]      </control>
[02:53:07.803]      // end if-block "canReadPins"
[02:53:07.803]    </control>
[02:53:07.803]    <control if="!canReadPins" while="" timeout="0" info="">
[02:53:07.803]      // if-block "!canReadPins"
[02:53:07.804]        // =>  FALSE
[02:53:07.804]      // skip if-block "!canReadPins"
[02:53:07.804]    </control>
[02:53:07.804]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:53:07.804]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:07.804]        // =>  TRUE
[02:53:07.804]      <block atomic="false" info="">
[02:53:07.805]        WriteAP(0x00, 0x190008);
[02:53:07.806]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:07.806]        WriteAP(0xF0, 0x01);
[02:53:07.809]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:07.810]      </block>
[02:53:07.810]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:07.810]    </control>
[02:53:07.810]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:53:07.810]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:07.810]        // =>  FALSE
[02:53:07.810]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:07.810]    </control>
[02:53:07.810]    <block atomic="false" info="">
[02:53:07.810]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:07.813]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:53:07.813]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:53:07.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:07.815]      __ap = 0; //lets make sure we reset the access point selection
[02:53:07.815]        // -> [__ap <= 0x00000000]
[02:53:07.815]    </block>
[02:53:07.815]  </sequence>
[02:53:07.815]  
[02:53:07.835]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:53:07.835]  
[02:53:07.836]  <debugvars>
[02:53:07.836]    // Pre-defined
[02:53:07.836]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:07.836]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:07.836]    __dp=0x00000000
[02:53:07.836]    __ap=0x00000000
[02:53:07.836]    __traceout=0x00000000      (Trace Disabled)
[02:53:07.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:07.836]    __FlashAddr=0x00000000
[02:53:07.836]    __FlashLen=0x00000000
[02:53:07.836]    __FlashArg=0x00000000
[02:53:07.837]    __FlashOp=0x00000000
[02:53:07.837]    __Result=0x00000000
[02:53:07.837]  </debugvars>
[02:53:07.837]  
[02:53:07.837]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:53:07.837]    <block atomic="false" info="">
[02:53:07.837]      __var deviceID = 0;
[02:53:07.837]        // -> [deviceID <= 0x00000000]
[02:53:07.837]      __var version = 0;
[02:53:07.837]        // -> [version <= 0x00000000]
[02:53:07.837]      __var partNum = 0;
[02:53:07.838]        // -> [partNum <= 0x00000000]
[02:53:07.838]      __var manuf = 0;
[02:53:07.838]        // -> [manuf <= 0x00000000]
[02:53:07.838]      __var isMSPM0G1X0X_G3X0X = 0;
[02:53:07.838]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:53:07.838]      __var isProduction = 0;
[02:53:07.838]        // -> [isProduction <= 0x00000000]
[02:53:07.838]      __var continueId = 0;
[02:53:07.838]        // -> [continueId <= 0x00000000]
[02:53:07.838]      deviceID =   Read32(0x41C40004);
[02:53:07.843]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:53:07.843]        // -> [deviceID <= 0x2BB8802F]
[02:53:07.843]      version = deviceID >> 28;
[02:53:07.843]        // -> [version <= 0x00000002]
[02:53:07.843]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:53:07.843]        // -> [partNum <= 0x0000BB88]
[02:53:07.843]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:53:07.843]        // -> [manuf <= 0x00000017]
[02:53:07.843]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:53:07.844]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:53:07.844]      isProduction = (version > 0);
[02:53:07.844]        // -> [isProduction <= 0x00000001]
[02:53:07.844]    </block>
[02:53:07.844]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:53:07.844]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:53:07.844]        // =>  FALSE
[02:53:07.844]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:53:07.844]    </control>
[02:53:07.844]    <control if="continueId == 4" while="" timeout="0" info="">
[02:53:07.845]      // if-block "continueId == 4"
[02:53:07.845]        // =>  FALSE
[02:53:07.845]      // skip if-block "continueId == 4"
[02:53:07.845]    </control>
[02:53:07.845]    <control if="!isProduction" while="" timeout="0" info="">
[02:53:07.845]      // if-block "!isProduction"
[02:53:07.845]        // =>  FALSE
[02:53:07.845]      // skip if-block "!isProduction"
[02:53:07.845]    </control>
[02:53:07.845]  </sequence>
[02:53:07.845]  
[02:53:16.146]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:53:16.146]  
[02:53:16.155]  <debugvars>
[02:53:16.155]    // Pre-defined
[02:53:16.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:16.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:16.155]    __dp=0x00000000
[02:53:16.155]    __ap=0x00000000
[02:53:16.156]    __traceout=0x00000000      (Trace Disabled)
[02:53:16.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:16.156]    __FlashAddr=0x00000000
[02:53:16.156]    __FlashLen=0x00000000
[02:53:16.156]    __FlashArg=0x00000000
[02:53:16.156]    __FlashOp=0x00000000
[02:53:16.156]    __Result=0x00000000
[02:53:16.156]  </debugvars>
[02:53:16.156]  
[02:53:16.157]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:53:16.157]    <block atomic="false" info="">
[02:53:16.157]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:53:16.157]        // -> [isSWJ <= 0x00000001]
[02:53:16.157]      __var hasDormant = __protocol & 0x00020000;
[02:53:16.157]        // -> [hasDormant <= 0x00000000]
[02:53:16.158]      __var protType   = __protocol & 0x0000FFFF;
[02:53:16.158]        // -> [protType <= 0x00000002]
[02:53:16.158]    </block>
[02:53:16.158]    <control if="protType == 1" while="" timeout="0" info="">
[02:53:16.158]      // if-block "protType == 1"
[02:53:16.158]        // =>  FALSE
[02:53:16.158]      // skip if-block "protType == 1"
[02:53:16.158]    </control>
[02:53:16.158]    <control if="protType == 2" while="" timeout="0" info="">
[02:53:16.158]      // if-block "protType == 2"
[02:53:16.158]        // =>  TRUE
[02:53:16.159]      <control if="isSWJ" while="" timeout="0" info="">
[02:53:16.159]        // if-block "isSWJ"
[02:53:16.159]          // =>  TRUE
[02:53:16.159]        <control if="hasDormant" while="" timeout="0" info="">
[02:53:16.159]          // if-block "hasDormant"
[02:53:16.159]            // =>  FALSE
[02:53:16.159]          // skip if-block "hasDormant"
[02:53:16.159]        </control>
[02:53:16.159]        <control if="!hasDormant" while="" timeout="0" info="">
[02:53:16.159]          // if-block "!hasDormant"
[02:53:16.160]            // =>  TRUE
[02:53:16.160]          <block atomic="false" info="">
[02:53:16.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:53:16.161]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:16.161]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:53:16.163]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:53:16.163]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:53:16.164]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:16.164]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:53:16.166]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:53:16.166]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:53:16.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:16.169]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:53:16.170]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:53:16.170]          </block>
[02:53:16.170]          // end if-block "!hasDormant"
[02:53:16.170]        </control>
[02:53:16.170]        // end if-block "isSWJ"
[02:53:16.170]      </control>
[02:53:16.170]      <control if="!isSWJ" while="" timeout="0" info="">
[02:53:16.171]        // if-block "!isSWJ"
[02:53:16.171]          // =>  FALSE
[02:53:16.171]        // skip if-block "!isSWJ"
[02:53:16.171]      </control>
[02:53:16.171]      <block atomic="false" info="">
[02:53:16.171]        ReadDP(0x0);
[02:53:16.173]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:53:16.173]      </block>
[02:53:16.173]      // end if-block "protType == 2"
[02:53:16.173]    </control>
[02:53:16.173]  </sequence>
[02:53:16.173]  
[02:53:16.175]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:53:16.175]  
[02:53:16.175]  <debugvars>
[02:53:16.175]    // Pre-defined
[02:53:16.176]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:16.176]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:16.176]    __dp=0x00000000
[02:53:16.176]    __ap=0x00000000
[02:53:16.176]    __traceout=0x00000000      (Trace Disabled)
[02:53:16.176]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:16.176]    __FlashAddr=0x00000000
[02:53:16.176]    __FlashLen=0x00000000
[02:53:16.176]    __FlashArg=0x00000000
[02:53:16.176]    __FlashOp=0x00000000
[02:53:16.177]    __Result=0x00000000
[02:53:16.177]  </debugvars>
[02:53:16.177]  
[02:53:16.177]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:53:16.177]    <block atomic="false" info="">
[02:53:16.177]      __var SW_DP_ABORT       = 0x0;
[02:53:16.177]        // -> [SW_DP_ABORT <= 0x00000000]
[02:53:16.177]      __var DP_CTRL_STAT      = 0x4;
[02:53:16.177]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:53:16.177]      __var DP_SELECT         = 0x8;
[02:53:16.177]        // -> [DP_SELECT <= 0x00000008]
[02:53:16.178]      __var powered_down      = 0;
[02:53:16.178]        // -> [powered_down <= 0x00000000]
[02:53:16.178]      WriteDP(DP_SELECT, 0x00000000);
[02:53:16.179]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:53:16.179]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:53:16.181]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:53:16.181]        // -> [powered_down <= 0x00000001]
[02:53:16.181]    </block>
[02:53:16.181]    <control if="powered_down" while="" timeout="0" info="">
[02:53:16.181]      // if-block "powered_down"
[02:53:16.181]        // =>  TRUE
[02:53:16.181]      <block atomic="false" info="">
[02:53:16.182]        Message(0, "Debug/System power-up request sent");
[02:53:16.186]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:53:16.187]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:53:16.188]      </block>
[02:53:16.188]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:53:16.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:53:16.191]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:53:16.191]        // while-condition  =>  FALSE
[02:53:16.191]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:53:16.191]      </control>
[02:53:16.191]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:53:16.191]        // if-block "(__protocol & 0xFFFF) == 1"
[02:53:16.192]          // =>  FALSE
[02:53:16.192]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:53:16.192]      </control>
[02:53:16.192]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:53:16.192]        // if-block "(__protocol & 0xFFFF) == 2"
[02:53:16.192]          // =>  TRUE
[02:53:16.192]        <block atomic="false" info="">
[02:53:16.192]          Message(0, "executing SWD power up");
[02:53:16.193]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:53:16.197]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:53:16.197]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:53:16.198]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:53:16.199]        </block>
[02:53:16.199]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:53:16.199]      </control>
[02:53:16.199]      // end if-block "powered_down"
[02:53:16.199]    </control>
[02:53:16.199]    <block atomic="false" info="">
[02:53:16.199]      __var DEBUG_PORT_VAL    = 0;
[02:53:16.200]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:53:16.200]      __var ACCESS_POINT_VAL  = 0;
[02:53:16.200]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:53:16.200]      __ap = 1; 
[02:53:16.200]        // -> [__ap <= 0x00000001]
[02:53:16.200]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:53:16.203]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:53:16.203]      __ap = 4;
[02:53:16.204]        // -> [__ap <= 0x00000004]
[02:53:16.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:16.207]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:53:16.207]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:53:16.208]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:16.209]    </block>
[02:53:16.209]    <block atomic="false" info="">
[02:53:16.209]      __var nReset = 0x80;
[02:53:16.210]        // -> [nReset <= 0x00000080]
[02:53:16.210]      __var canReadPins = 0;
[02:53:16.210]        // -> [canReadPins <= 0x00000000]
[02:53:16.210]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:53:16.211]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:53:16.212]        // -> [canReadPins <= 0x00000001]
[02:53:16.212]    </block>
[02:53:16.212]    <control if="" while="1" timeout="200" info="">
[02:53:16.212]      // while "1"  (timeout="200")
[02:53:16.212]      // while-condition  =>  TRUE
[02:53:16.212]      // while "1"  (timeout="200")
[02:53:16.212]      // while-condition  =>  TRUE
[02:53:16.212]      // while "1"  (timeout="200")
[02:53:16.212]      // while-condition  =>  TRUE
[02:53:16.212]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.213]      // while-condition  =>  TRUE
[02:53:16.213]      // while "1"  (timeout="200")
[02:53:16.214]      // while-condition  =>  TRUE
[02:53:16.214]      // while "1"  (timeout="200")
[02:53:16.214]      // while-condition  =>  TRUE
[02:53:16.214]      // while "1"  (timeout="200")
[02:53:16.214]      // while-condition  =>  TRUE
[02:53:16.214]      // while "1"  (timeout="200")
[02:53:16.214]      // while-condition  =>  TRUE
[02:53:16.214]      // while "1"  (timeout="200")
[02:53:16.214]      // while-condition  =>  TRUE
[02:53:16.214]      // while "1"  (timeout="200")
[02:53:16.214]      // while-condition  =>  TRUE
[02:53:16.215]      // while "1"  (timeout="200")
[02:53:16.215]      // while-condition  =>  TRUE
[02:53:16.215]      // while "1"  (timeout="200")
[02:53:16.215]      // while-condition  =>  TRUE
[02:53:16.215]      // while "1"  (timeout="200")
[02:53:16.215]      // while-condition  =>  TRUE
[02:53:16.215]      // while "1"  (timeout="200")
[02:53:16.215]      // while-condition  =>  TRUE
[02:53:16.216]      // while "1"  (timeout="200")
[02:53:16.216]      // while-condition  =>  TRUE
[02:53:16.216]      // while "1"  (timeout="200")
[02:53:16.216]      // while-condition  =>  TRUE
[02:53:16.216]      // while "1"  (timeout="200")
[02:53:16.216]      // while-condition  =>  TRUE
[02:53:16.216]      // while "1"  (timeout="200")
[02:53:16.217]      // while-condition  =>  TRUE
[02:53:16.217]      // while "1"  (timeout="200")
[02:53:16.217]      // while-condition  =>  TRUE
[02:53:16.217]      // while "1"  (timeout="200")
[02:53:16.217]      // while-condition  =>  TRUE
[02:53:16.217]      // while "1"  (timeout="200")
[02:53:16.217]      // while-condition  =>  TRUE
[02:53:16.217]      // while "1"  (timeout="200")
[02:53:16.217]      // while-condition  =>  TRUE
[02:53:16.217]      // while "1"  (timeout="200")
[02:53:16.218]      // while-condition  =>  TRUE
[02:53:16.218]      // while "1"  (timeout="200")
[02:53:16.218]      // while-condition  =>  TRUE
[02:53:16.218]      // while "1"  (timeout="200")
[02:53:16.218]      // while-condition  =>  TRUE
[02:53:16.218]      // while "1"  (timeout="200")
[02:53:16.218]      // while-condition  =>  TRUE
[02:53:16.218]      // while "1"  (timeout="200")
[02:53:16.219]      // while-condition  =>  TRUE
[02:53:16.219]      // while "1"  (timeout="200")
[02:53:16.219]      // while-condition  =>  TRUE
[02:53:16.219]      // while "1"  (timeout="200")
[02:53:16.219]      // while-condition  =>  TRUE
[02:53:16.219]      // while "1"  (timeout="200")
[02:53:16.219]      // while-condition  =>  TRUE
[02:53:16.219]      // while "1"  (timeout="200")
[02:53:16.219]      // while-condition  =>  TRUE
[02:53:16.219]      // while "1"  (timeout="200")
[02:53:16.220]      // while-condition  =>  TRUE
[02:53:16.220]      // while "1"  (timeout="200")
[02:53:16.220]      // while-condition  =>  TRUE
[02:53:16.220]      // while "1"  (timeout="200")
[02:53:16.220]      // while-condition  =>  TRUE
[02:53:16.220]      // while "1"  (timeout="200")
[02:53:16.220]      // while-condition  =>  TRUE
[02:53:16.220]      // while "1"  (timeout="200")
[02:53:16.220]      // while-condition  =>  TRUE
[02:53:16.220]      // while "1"  (timeout="200")
[02:53:16.221]      // while-condition  =>  TRUE
[02:53:16.221]      // while "1"  (timeout="200")
[02:53:16.221]      // while  =>  TIMEOUT
[02:53:16.221]      // end while "1"
[02:53:16.221]    </control>
[02:53:16.221]    <control if="canReadPins" while="" timeout="0" info="">
[02:53:16.221]      // if-block "canReadPins"
[02:53:16.222]        // =>  TRUE
[02:53:16.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:53:16.222]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:53:16.223]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:53:16.223]        // while-condition  =>  FALSE
[02:53:16.223]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:53:16.223]      </control>
[02:53:16.224]      // end if-block "canReadPins"
[02:53:16.224]    </control>
[02:53:16.224]    <control if="!canReadPins" while="" timeout="0" info="">
[02:53:16.224]      // if-block "!canReadPins"
[02:53:16.225]        // =>  FALSE
[02:53:16.225]      // skip if-block "!canReadPins"
[02:53:16.225]    </control>
[02:53:16.225]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:53:16.225]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:16.225]        // =>  TRUE
[02:53:16.225]      <block atomic="false" info="">
[02:53:16.225]        WriteAP(0x00, 0x190008);
[02:53:16.227]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:16.227]        WriteAP(0xF0, 0x01);
[02:53:16.232]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:16.232]      </block>
[02:53:16.232]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:16.232]    </control>
[02:53:16.232]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:53:16.232]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:16.233]        // =>  FALSE
[02:53:16.233]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:16.233]    </control>
[02:53:16.233]    <block atomic="false" info="">
[02:53:16.233]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:16.236]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:53:16.236]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:53:16.237]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:16.239]      __ap = 0; //lets make sure we reset the access point selection
[02:53:16.239]        // -> [__ap <= 0x00000000]
[02:53:16.239]    </block>
[02:53:16.239]  </sequence>
[02:53:16.239]  
[02:53:16.262]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:53:16.262]  
[02:53:16.262]  <debugvars>
[02:53:16.262]    // Pre-defined
[02:53:16.262]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:16.262]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:16.262]    __dp=0x00000000
[02:53:16.262]    __ap=0x00000000
[02:53:16.262]    __traceout=0x00000000      (Trace Disabled)
[02:53:16.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:16.263]    __FlashAddr=0x00000000
[02:53:16.263]    __FlashLen=0x00000000
[02:53:16.263]    __FlashArg=0x00000000
[02:53:16.263]    __FlashOp=0x00000000
[02:53:16.263]    __Result=0x00000000
[02:53:16.263]  </debugvars>
[02:53:16.263]  
[02:53:16.263]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:53:16.263]    <block atomic="false" info="">
[02:53:16.263]      __var deviceID = 0;
[02:53:16.264]        // -> [deviceID <= 0x00000000]
[02:53:16.264]      __var version = 0;
[02:53:16.264]        // -> [version <= 0x00000000]
[02:53:16.264]      __var partNum = 0;
[02:53:16.264]        // -> [partNum <= 0x00000000]
[02:53:16.264]      __var manuf = 0;
[02:53:16.264]        // -> [manuf <= 0x00000000]
[02:53:16.264]      __var isMSPM0G1X0X_G3X0X = 0;
[02:53:16.264]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:53:16.264]      __var isProduction = 0;
[02:53:16.264]        // -> [isProduction <= 0x00000000]
[02:53:16.264]      __var continueId = 0;
[02:53:16.265]        // -> [continueId <= 0x00000000]
[02:53:16.265]      deviceID =   Read32(0x41C40004);
[02:53:16.270]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:53:16.271]        // -> [deviceID <= 0x2BB8802F]
[02:53:16.271]      version = deviceID >> 28;
[02:53:16.271]        // -> [version <= 0x00000002]
[02:53:16.271]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:53:16.271]        // -> [partNum <= 0x0000BB88]
[02:53:16.271]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:53:16.271]        // -> [manuf <= 0x00000017]
[02:53:16.272]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:53:16.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:53:16.272]      isProduction = (version > 0);
[02:53:16.272]        // -> [isProduction <= 0x00000001]
[02:53:16.272]    </block>
[02:53:16.272]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:53:16.272]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:53:16.272]        // =>  FALSE
[02:53:16.272]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:53:16.272]    </control>
[02:53:16.272]    <control if="continueId == 4" while="" timeout="0" info="">
[02:53:16.273]      // if-block "continueId == 4"
[02:53:16.273]        // =>  FALSE
[02:53:16.273]      // skip if-block "continueId == 4"
[02:53:16.273]    </control>
[02:53:16.273]    <control if="!isProduction" while="" timeout="0" info="">
[02:53:16.273]      // if-block "!isProduction"
[02:53:16.273]        // =>  FALSE
[02:53:16.273]      // skip if-block "!isProduction"
[02:53:16.273]    </control>
[02:53:16.273]  </sequence>
[02:53:16.273]  
[02:53:59.110]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:53:59.110]  
[02:53:59.112]  <debugvars>
[02:53:59.112]    // Pre-defined
[02:53:59.112]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:59.112]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:59.112]    __dp=0x00000000
[02:53:59.112]    __ap=0x00000000
[02:53:59.112]    __traceout=0x00000000      (Trace Disabled)
[02:53:59.113]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:59.113]    __FlashAddr=0x00000000
[02:53:59.113]    __FlashLen=0x00000000
[02:53:59.113]    __FlashArg=0x00000000
[02:53:59.113]    __FlashOp=0x00000000
[02:53:59.113]    __Result=0x00000000
[02:53:59.113]  </debugvars>
[02:53:59.113]  
[02:53:59.113]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:53:59.113]    <block atomic="false" info="">
[02:53:59.113]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:53:59.114]        // -> [isSWJ <= 0x00000001]
[02:53:59.114]      __var hasDormant = __protocol & 0x00020000;
[02:53:59.114]        // -> [hasDormant <= 0x00000000]
[02:53:59.114]      __var protType   = __protocol & 0x0000FFFF;
[02:53:59.114]        // -> [protType <= 0x00000002]
[02:53:59.114]    </block>
[02:53:59.114]    <control if="protType == 1" while="" timeout="0" info="">
[02:53:59.114]      // if-block "protType == 1"
[02:53:59.114]        // =>  FALSE
[02:53:59.114]      // skip if-block "protType == 1"
[02:53:59.114]    </control>
[02:53:59.115]    <control if="protType == 2" while="" timeout="0" info="">
[02:53:59.115]      // if-block "protType == 2"
[02:53:59.115]        // =>  TRUE
[02:53:59.115]      <control if="isSWJ" while="" timeout="0" info="">
[02:53:59.115]        // if-block "isSWJ"
[02:53:59.115]          // =>  TRUE
[02:53:59.115]        <control if="hasDormant" while="" timeout="0" info="">
[02:53:59.115]          // if-block "hasDormant"
[02:53:59.115]            // =>  FALSE
[02:53:59.116]          // skip if-block "hasDormant"
[02:53:59.116]        </control>
[02:53:59.116]        <control if="!hasDormant" while="" timeout="0" info="">
[02:53:59.116]          // if-block "!hasDormant"
[02:53:59.116]            // =>  TRUE
[02:53:59.116]          <block atomic="false" info="">
[02:53:59.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:53:59.118]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:59.118]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:53:59.119]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:53:59.119]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:53:59.121]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:59.121]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:53:59.122]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:53:59.122]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:53:59.124]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:59.124]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:53:59.125]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:53:59.125]          </block>
[02:53:59.125]          // end if-block "!hasDormant"
[02:53:59.125]        </control>
[02:53:59.125]        // end if-block "isSWJ"
[02:53:59.126]      </control>
[02:53:59.126]      <control if="!isSWJ" while="" timeout="0" info="">
[02:53:59.126]        // if-block "!isSWJ"
[02:53:59.126]          // =>  FALSE
[02:53:59.126]        // skip if-block "!isSWJ"
[02:53:59.126]      </control>
[02:53:59.126]      <block atomic="false" info="">
[02:53:59.127]        ReadDP(0x0);
[02:53:59.128]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:53:59.128]      </block>
[02:53:59.128]      // end if-block "protType == 2"
[02:53:59.128]    </control>
[02:53:59.129]  </sequence>
[02:53:59.129]  
[02:53:59.131]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:53:59.131]  
[02:53:59.131]  <debugvars>
[02:53:59.131]    // Pre-defined
[02:53:59.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:59.132]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:59.132]    __dp=0x00000000
[02:53:59.132]    __ap=0x00000000
[02:53:59.132]    __traceout=0x00000000      (Trace Disabled)
[02:53:59.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:59.132]    __FlashAddr=0x00000000
[02:53:59.132]    __FlashLen=0x00000000
[02:53:59.132]    __FlashArg=0x00000000
[02:53:59.132]    __FlashOp=0x00000000
[02:53:59.132]    __Result=0x00000000
[02:53:59.133]  </debugvars>
[02:53:59.133]  
[02:53:59.133]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:53:59.133]    <block atomic="false" info="">
[02:53:59.133]      __var SW_DP_ABORT       = 0x0;
[02:53:59.133]        // -> [SW_DP_ABORT <= 0x00000000]
[02:53:59.133]      __var DP_CTRL_STAT      = 0x4;
[02:53:59.133]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:53:59.133]      __var DP_SELECT         = 0x8;
[02:53:59.133]        // -> [DP_SELECT <= 0x00000008]
[02:53:59.133]      __var powered_down      = 0;
[02:53:59.133]        // -> [powered_down <= 0x00000000]
[02:53:59.134]      WriteDP(DP_SELECT, 0x00000000);
[02:53:59.135]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:53:59.135]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:53:59.137]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:53:59.137]        // -> [powered_down <= 0x00000001]
[02:53:59.137]    </block>
[02:53:59.137]    <control if="powered_down" while="" timeout="0" info="">
[02:53:59.137]      // if-block "powered_down"
[02:53:59.138]        // =>  TRUE
[02:53:59.138]      <block atomic="false" info="">
[02:53:59.138]        Message(0, "Debug/System power-up request sent");
[02:53:59.141]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:53:59.143]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:53:59.143]      </block>
[02:53:59.143]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:53:59.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:53:59.145]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:53:59.145]        // while-condition  =>  FALSE
[02:53:59.145]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:53:59.145]      </control>
[02:53:59.145]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:53:59.145]        // if-block "(__protocol & 0xFFFF) == 1"
[02:53:59.145]          // =>  FALSE
[02:53:59.146]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:53:59.146]      </control>
[02:53:59.146]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:53:59.146]        // if-block "(__protocol & 0xFFFF) == 2"
[02:53:59.146]          // =>  TRUE
[02:53:59.146]        <block atomic="false" info="">
[02:53:59.146]          Message(0, "executing SWD power up");
[02:53:59.148]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:53:59.150]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:53:59.150]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:53:59.151]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:53:59.151]        </block>
[02:53:59.152]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:53:59.152]      </control>
[02:53:59.152]      // end if-block "powered_down"
[02:53:59.152]    </control>
[02:53:59.152]    <block atomic="false" info="">
[02:53:59.152]      __var DEBUG_PORT_VAL    = 0;
[02:53:59.152]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:53:59.152]      __var ACCESS_POINT_VAL  = 0;
[02:53:59.152]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:53:59.152]      __ap = 1; 
[02:53:59.152]        // -> [__ap <= 0x00000001]
[02:53:59.153]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:53:59.156]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:53:59.156]      __ap = 4;
[02:53:59.156]        // -> [__ap <= 0x00000004]
[02:53:59.157]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:59.160]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:53:59.160]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:53:59.160]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:59.162]    </block>
[02:53:59.162]    <block atomic="false" info="">
[02:53:59.162]      __var nReset = 0x80;
[02:53:59.162]        // -> [nReset <= 0x00000080]
[02:53:59.163]      __var canReadPins = 0;
[02:53:59.163]        // -> [canReadPins <= 0x00000000]
[02:53:59.163]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:53:59.164]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:53:59.165]        // -> [canReadPins <= 0x00000001]
[02:53:59.165]    </block>
[02:53:59.165]    <control if="" while="1" timeout="200" info="">
[02:53:59.165]      // while "1"  (timeout="200")
[02:53:59.165]      // while-condition  =>  TRUE
[02:53:59.165]      // while "1"  (timeout="200")
[02:53:59.166]      // while-condition  =>  TRUE
[02:53:59.166]      // while "1"  (timeout="200")
[02:53:59.166]      // while-condition  =>  TRUE
[02:53:59.166]      // while "1"  (timeout="200")
[02:53:59.166]      // while-condition  =>  TRUE
[02:53:59.166]      // while "1"  (timeout="200")
[02:53:59.166]      // while-condition  =>  TRUE
[02:53:59.166]      // while "1"  (timeout="200")
[02:53:59.166]      // while-condition  =>  TRUE
[02:53:59.167]      // while "1"  (timeout="200")
[02:53:59.167]      // while-condition  =>  TRUE
[02:53:59.167]      // while "1"  (timeout="200")
[02:53:59.167]      // while-condition  =>  TRUE
[02:53:59.167]      // while "1"  (timeout="200")
[02:53:59.167]      // while-condition  =>  TRUE
[02:53:59.167]      // while "1"  (timeout="200")
[02:53:59.167]      // while-condition  =>  TRUE
[02:53:59.168]      // while "1"  (timeout="200")
[02:53:59.168]      // while-condition  =>  TRUE
[02:53:59.168]      // while "1"  (timeout="200")
[02:53:59.168]      // while-condition  =>  TRUE
[02:53:59.168]      // while "1"  (timeout="200")
[02:53:59.168]      // while-condition  =>  TRUE
[02:53:59.169]      // while "1"  (timeout="200")
[02:53:59.169]      // while-condition  =>  TRUE
[02:53:59.169]      // while "1"  (timeout="200")
[02:53:59.169]      // while-condition  =>  TRUE
[02:53:59.169]      // while "1"  (timeout="200")
[02:53:59.169]      // while-condition  =>  TRUE
[02:53:59.169]      // while "1"  (timeout="200")
[02:53:59.169]      // while-condition  =>  TRUE
[02:53:59.169]      // while "1"  (timeout="200")
[02:53:59.169]      // while-condition  =>  TRUE
[02:53:59.170]      // while "1"  (timeout="200")
[02:53:59.170]      // while-condition  =>  TRUE
[02:53:59.170]      // while "1"  (timeout="200")
[02:53:59.170]      // while-condition  =>  TRUE
[02:53:59.170]      // while "1"  (timeout="200")
[02:53:59.170]      // while-condition  =>  TRUE
[02:53:59.170]      // while "1"  (timeout="200")
[02:53:59.171]      // while-condition  =>  TRUE
[02:53:59.171]      // while "1"  (timeout="200")
[02:53:59.171]      // while-condition  =>  TRUE
[02:53:59.171]      // while "1"  (timeout="200")
[02:53:59.171]      // while-condition  =>  TRUE
[02:53:59.171]      // while "1"  (timeout="200")
[02:53:59.171]      // while-condition  =>  TRUE
[02:53:59.171]      // while "1"  (timeout="200")
[02:53:59.171]      // while-condition  =>  TRUE
[02:53:59.171]      // while "1"  (timeout="200")
[02:53:59.172]      // while-condition  =>  TRUE
[02:53:59.172]      // while "1"  (timeout="200")
[02:53:59.172]      // while-condition  =>  TRUE
[02:53:59.172]      // while "1"  (timeout="200")
[02:53:59.172]      // while-condition  =>  TRUE
[02:53:59.172]      // while "1"  (timeout="200")
[02:53:59.172]      // while-condition  =>  TRUE
[02:53:59.172]      // while "1"  (timeout="200")
[02:53:59.173]      // while-condition  =>  TRUE
[02:53:59.173]      // while "1"  (timeout="200")
[02:53:59.173]      // while-condition  =>  TRUE
[02:53:59.173]      // while "1"  (timeout="200")
[02:53:59.173]      // while-condition  =>  TRUE
[02:53:59.173]      // while "1"  (timeout="200")
[02:53:59.173]      // while-condition  =>  TRUE
[02:53:59.173]      // while "1"  (timeout="200")
[02:53:59.173]      // while-condition  =>  TRUE
[02:53:59.173]      // while "1"  (timeout="200")
[02:53:59.174]      // while-condition  =>  TRUE
[02:53:59.174]      // while "1"  (timeout="200")
[02:53:59.174]      // while-condition  =>  TRUE
[02:53:59.174]      // while "1"  (timeout="200")
[02:53:59.174]      // while-condition  =>  TRUE
[02:53:59.174]      // while "1"  (timeout="200")
[02:53:59.174]      // while-condition  =>  TRUE
[02:53:59.174]      // while "1"  (timeout="200")
[02:53:59.175]      // while-condition  =>  TRUE
[02:53:59.175]      // while "1"  (timeout="200")
[02:53:59.175]      // while  =>  TIMEOUT
[02:53:59.175]      // end while "1"
[02:53:59.175]    </control>
[02:53:59.175]    <control if="canReadPins" while="" timeout="0" info="">
[02:53:59.175]      // if-block "canReadPins"
[02:53:59.175]        // =>  TRUE
[02:53:59.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:53:59.176]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:53:59.178]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:53:59.178]        // while-condition  =>  FALSE
[02:53:59.178]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:53:59.178]      </control>
[02:53:59.178]      // end if-block "canReadPins"
[02:53:59.178]    </control>
[02:53:59.178]    <control if="!canReadPins" while="" timeout="0" info="">
[02:53:59.178]      // if-block "!canReadPins"
[02:53:59.178]        // =>  FALSE
[02:53:59.178]      // skip if-block "!canReadPins"
[02:53:59.179]    </control>
[02:53:59.179]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:53:59.179]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:59.179]        // =>  TRUE
[02:53:59.179]      <block atomic="false" info="">
[02:53:59.179]        WriteAP(0x00, 0x190008);
[02:53:59.181]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:59.181]        WriteAP(0xF0, 0x01);
[02:53:59.184]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:59.184]      </block>
[02:53:59.184]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:59.185]    </control>
[02:53:59.185]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:53:59.185]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:59.185]        // =>  FALSE
[02:53:59.185]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:59.185]    </control>
[02:53:59.185]    <block atomic="false" info="">
[02:53:59.186]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:59.189]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:53:59.189]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:53:59.189]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:59.191]      __ap = 0; //lets make sure we reset the access point selection
[02:53:59.191]        // -> [__ap <= 0x00000000]
[02:53:59.192]    </block>
[02:53:59.192]  </sequence>
[02:53:59.192]  
[02:53:59.211]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:53:59.211]  
[02:53:59.211]  <debugvars>
[02:53:59.211]    // Pre-defined
[02:53:59.211]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:59.211]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:59.211]    __dp=0x00000000
[02:53:59.211]    __ap=0x00000000
[02:53:59.212]    __traceout=0x00000000      (Trace Disabled)
[02:53:59.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:59.212]    __FlashAddr=0x00000000
[02:53:59.212]    __FlashLen=0x00000000
[02:53:59.212]    __FlashArg=0x00000000
[02:53:59.212]    __FlashOp=0x00000000
[02:53:59.212]    __Result=0x00000000
[02:53:59.212]  </debugvars>
[02:53:59.212]  
[02:53:59.212]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:53:59.213]    <block atomic="false" info="">
[02:53:59.213]      __var deviceID = 0;
[02:53:59.213]        // -> [deviceID <= 0x00000000]
[02:53:59.213]      __var version = 0;
[02:53:59.213]        // -> [version <= 0x00000000]
[02:53:59.213]      __var partNum = 0;
[02:53:59.214]        // -> [partNum <= 0x00000000]
[02:53:59.214]      __var manuf = 0;
[02:53:59.214]        // -> [manuf <= 0x00000000]
[02:53:59.214]      __var isMSPM0G1X0X_G3X0X = 0;
[02:53:59.214]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:53:59.214]      __var isProduction = 0;
[02:53:59.214]        // -> [isProduction <= 0x00000000]
[02:53:59.214]      __var continueId = 0;
[02:53:59.214]        // -> [continueId <= 0x00000000]
[02:53:59.214]      deviceID =   Read32(0x41C40004);
[02:53:59.219]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:53:59.219]        // -> [deviceID <= 0x2BB8802F]
[02:53:59.219]      version = deviceID >> 28;
[02:53:59.219]        // -> [version <= 0x00000002]
[02:53:59.219]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:53:59.219]        // -> [partNum <= 0x0000BB88]
[02:53:59.220]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:53:59.220]        // -> [manuf <= 0x00000017]
[02:53:59.220]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:53:59.220]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:53:59.220]      isProduction = (version > 0);
[02:53:59.220]        // -> [isProduction <= 0x00000001]
[02:53:59.220]    </block>
[02:53:59.220]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:53:59.220]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:53:59.220]        // =>  FALSE
[02:53:59.221]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:53:59.221]    </control>
[02:53:59.221]    <control if="continueId == 4" while="" timeout="0" info="">
[02:53:59.221]      // if-block "continueId == 4"
[02:53:59.221]        // =>  FALSE
[02:53:59.221]      // skip if-block "continueId == 4"
[02:53:59.221]    </control>
[02:53:59.221]    <control if="!isProduction" while="" timeout="0" info="">
[02:53:59.221]      // if-block "!isProduction"
[02:53:59.221]        // =>  FALSE
[02:53:59.222]      // skip if-block "!isProduction"
[02:53:59.222]    </control>
[02:53:59.222]  </sequence>
[02:53:59.222]  
[02:54:23.509]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:54:23.509]  
[02:54:23.517]  <debugvars>
[02:54:23.517]    // Pre-defined
[02:54:23.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:23.517]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:23.517]    __dp=0x00000000
[02:54:23.517]    __ap=0x00000000
[02:54:23.517]    __traceout=0x00000000      (Trace Disabled)
[02:54:23.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:23.517]    __FlashAddr=0x00000000
[02:54:23.517]    __FlashLen=0x00000000
[02:54:23.517]    __FlashArg=0x00000000
[02:54:23.517]    __FlashOp=0x00000000
[02:54:23.517]    __Result=0x00000000
[02:54:23.518]  </debugvars>
[02:54:23.518]  
[02:54:23.518]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:54:23.518]    <block atomic="false" info="">
[02:54:23.518]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:54:23.518]        // -> [isSWJ <= 0x00000001]
[02:54:23.518]      __var hasDormant = __protocol & 0x00020000;
[02:54:23.518]        // -> [hasDormant <= 0x00000000]
[02:54:23.518]      __var protType   = __protocol & 0x0000FFFF;
[02:54:23.518]        // -> [protType <= 0x00000002]
[02:54:23.518]    </block>
[02:54:23.518]    <control if="protType == 1" while="" timeout="0" info="">
[02:54:23.518]      // if-block "protType == 1"
[02:54:23.520]        // =>  FALSE
[02:54:23.520]      // skip if-block "protType == 1"
[02:54:23.520]    </control>
[02:54:23.520]    <control if="protType == 2" while="" timeout="0" info="">
[02:54:23.520]      // if-block "protType == 2"
[02:54:23.520]        // =>  TRUE
[02:54:23.520]      <control if="isSWJ" while="" timeout="0" info="">
[02:54:23.520]        // if-block "isSWJ"
[02:54:23.520]          // =>  TRUE
[02:54:23.520]        <control if="hasDormant" while="" timeout="0" info="">
[02:54:23.520]          // if-block "hasDormant"
[02:54:23.520]            // =>  FALSE
[02:54:23.520]          // skip if-block "hasDormant"
[02:54:23.520]        </control>
[02:54:23.520]        <control if="!hasDormant" while="" timeout="0" info="">
[02:54:23.520]          // if-block "!hasDormant"
[02:54:23.520]            // =>  TRUE
[02:54:23.520]          <block atomic="false" info="">
[02:54:23.521]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:54:23.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:23.522]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:54:23.524]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:54:23.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:54:23.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:23.526]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:54:23.527]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:54:23.527]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:54:23.527]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:23.529]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:54:23.529]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:54:23.529]          </block>
[02:54:23.529]          // end if-block "!hasDormant"
[02:54:23.530]        </control>
[02:54:23.530]        // end if-block "isSWJ"
[02:54:23.530]      </control>
[02:54:23.530]      <control if="!isSWJ" while="" timeout="0" info="">
[02:54:23.530]        // if-block "!isSWJ"
[02:54:23.530]          // =>  FALSE
[02:54:23.530]        // skip if-block "!isSWJ"
[02:54:23.530]      </control>
[02:54:23.530]      <block atomic="false" info="">
[02:54:23.531]        ReadDP(0x0);
[02:54:23.532]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:54:23.532]      </block>
[02:54:23.533]      // end if-block "protType == 2"
[02:54:23.533]    </control>
[02:54:23.533]  </sequence>
[02:54:23.533]  
[02:54:23.536]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:54:23.536]  
[02:54:23.536]  <debugvars>
[02:54:23.536]    // Pre-defined
[02:54:23.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:23.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:23.537]    __dp=0x00000000
[02:54:23.537]    __ap=0x00000000
[02:54:23.537]    __traceout=0x00000000      (Trace Disabled)
[02:54:23.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:23.537]    __FlashAddr=0x00000000
[02:54:23.537]    __FlashLen=0x00000000
[02:54:23.537]    __FlashArg=0x00000000
[02:54:23.539]    __FlashOp=0x00000000
[02:54:23.539]    __Result=0x00000000
[02:54:23.539]  </debugvars>
[02:54:23.539]  
[02:54:23.539]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:54:23.539]    <block atomic="false" info="">
[02:54:23.540]      __var SW_DP_ABORT       = 0x0;
[02:54:23.540]        // -> [SW_DP_ABORT <= 0x00000000]
[02:54:23.540]      __var DP_CTRL_STAT      = 0x4;
[02:54:23.540]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:54:23.540]      __var DP_SELECT         = 0x8;
[02:54:23.540]        // -> [DP_SELECT <= 0x00000008]
[02:54:23.540]      __var powered_down      = 0;
[02:54:23.540]        // -> [powered_down <= 0x00000000]
[02:54:23.540]      WriteDP(DP_SELECT, 0x00000000);
[02:54:23.541]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:54:23.541]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:54:23.542]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:54:23.542]        // -> [powered_down <= 0x00000001]
[02:54:23.544]    </block>
[02:54:23.544]    <control if="powered_down" while="" timeout="0" info="">
[02:54:23.544]      // if-block "powered_down"
[02:54:23.544]        // =>  TRUE
[02:54:23.544]      <block atomic="false" info="">
[02:54:23.544]        Message(0, "Debug/System power-up request sent");
[02:54:23.546]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:54:23.549]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:54:23.549]      </block>
[02:54:23.549]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:54:23.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:54:23.550]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:54:23.551]        // while-condition  =>  FALSE
[02:54:23.551]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:54:23.551]      </control>
[02:54:23.551]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:54:23.551]        // if-block "(__protocol & 0xFFFF) == 1"
[02:54:23.551]          // =>  FALSE
[02:54:23.551]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:54:23.551]      </control>
[02:54:23.552]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:54:23.552]        // if-block "(__protocol & 0xFFFF) == 2"
[02:54:23.552]          // =>  TRUE
[02:54:23.552]        <block atomic="false" info="">
[02:54:23.552]          Message(0, "executing SWD power up");
[02:54:23.556]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:54:23.560]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:54:23.560]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:54:23.564]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:54:23.564]        </block>
[02:54:23.564]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:54:23.564]      </control>
[02:54:23.564]      // end if-block "powered_down"
[02:54:23.564]    </control>
[02:54:23.566]    <block atomic="false" info="">
[02:54:23.566]      __var DEBUG_PORT_VAL    = 0;
[02:54:23.566]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:54:23.566]      __var ACCESS_POINT_VAL  = 0;
[02:54:23.566]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:54:23.566]      __ap = 1; 
[02:54:23.566]        // -> [__ap <= 0x00000001]
[02:54:23.566]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:54:23.569]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:54:23.570]      __ap = 4;
[02:54:23.570]        // -> [__ap <= 0x00000004]
[02:54:23.570]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:23.575]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:54:23.575]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:54:23.575]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:23.576]    </block>
[02:54:23.576]    <block atomic="false" info="">
[02:54:23.577]      __var nReset = 0x80;
[02:54:23.577]        // -> [nReset <= 0x00000080]
[02:54:23.577]      __var canReadPins = 0;
[02:54:23.577]        // -> [canReadPins <= 0x00000000]
[02:54:23.577]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:54:23.579]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:54:23.579]        // -> [canReadPins <= 0x00000001]
[02:54:23.579]    </block>
[02:54:23.579]    <control if="" while="1" timeout="200" info="">
[02:54:23.579]      // while "1"  (timeout="200")
[02:54:23.579]      // while-condition  =>  TRUE
[02:54:23.579]      // while "1"  (timeout="200")
[02:54:23.579]      // while-condition  =>  TRUE
[02:54:23.579]      // while "1"  (timeout="200")
[02:54:23.580]      // while-condition  =>  TRUE
[02:54:23.580]      // while "1"  (timeout="200")
[02:54:23.580]      // while-condition  =>  TRUE
[02:54:23.580]      // while "1"  (timeout="200")
[02:54:23.580]      // while-condition  =>  TRUE
[02:54:23.580]      // while "1"  (timeout="200")
[02:54:23.580]      // while-condition  =>  TRUE
[02:54:23.580]      // while "1"  (timeout="200")
[02:54:23.580]      // while-condition  =>  TRUE
[02:54:23.580]      // while "1"  (timeout="200")
[02:54:23.580]      // while-condition  =>  TRUE
[02:54:23.581]      // while "1"  (timeout="200")
[02:54:23.581]      // while  =>  TIMEOUT
[02:54:23.581]      // end while "1"
[02:54:23.581]    </control>
[02:54:23.581]    <control if="canReadPins" while="" timeout="0" info="">
[02:54:23.581]      // if-block "canReadPins"
[02:54:23.581]        // =>  TRUE
[02:54:23.581]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:54:23.581]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:54:23.582]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:54:23.582]        // while-condition  =>  FALSE
[02:54:23.583]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:54:23.583]      </control>
[02:54:23.583]      // end if-block "canReadPins"
[02:54:23.583]    </control>
[02:54:23.583]    <control if="!canReadPins" while="" timeout="0" info="">
[02:54:23.583]      // if-block "!canReadPins"
[02:54:23.583]        // =>  FALSE
[02:54:23.583]      // skip if-block "!canReadPins"
[02:54:23.583]    </control>
[02:54:23.583]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:54:23.583]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:23.585]        // =>  TRUE
[02:54:23.585]      <block atomic="false" info="">
[02:54:23.585]        WriteAP(0x00, 0x190008);
[02:54:23.586]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:23.586]        WriteAP(0xF0, 0x01);
[02:54:23.589]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:23.589]      </block>
[02:54:23.589]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:23.589]    </control>
[02:54:23.589]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:54:23.590]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:23.590]        // =>  FALSE
[02:54:23.590]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:23.590]    </control>
[02:54:23.590]    <block atomic="false" info="">
[02:54:23.590]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:23.592]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:54:23.594]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:54:23.594]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:23.595]      __ap = 0; //lets make sure we reset the access point selection
[02:54:23.595]        // -> [__ap <= 0x00000000]
[02:54:23.595]    </block>
[02:54:23.595]  </sequence>
[02:54:23.595]  
[02:54:23.615]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:54:23.615]  
[02:54:23.615]  <debugvars>
[02:54:23.615]    // Pre-defined
[02:54:23.615]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:23.615]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:23.615]    __dp=0x00000000
[02:54:23.615]    __ap=0x00000000
[02:54:23.615]    __traceout=0x00000000      (Trace Disabled)
[02:54:23.615]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:23.615]    __FlashAddr=0x00000000
[02:54:23.615]    __FlashLen=0x00000000
[02:54:23.617]    __FlashArg=0x00000000
[02:54:23.617]    __FlashOp=0x00000000
[02:54:23.617]    __Result=0x00000000
[02:54:23.617]  </debugvars>
[02:54:23.617]  
[02:54:23.617]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:54:23.617]    <block atomic="false" info="">
[02:54:23.617]      __var deviceID = 0;
[02:54:23.617]        // -> [deviceID <= 0x00000000]
[02:54:23.618]      __var version = 0;
[02:54:23.618]        // -> [version <= 0x00000000]
[02:54:23.618]      __var partNum = 0;
[02:54:23.618]        // -> [partNum <= 0x00000000]
[02:54:23.618]      __var manuf = 0;
[02:54:23.618]        // -> [manuf <= 0x00000000]
[02:54:23.618]      __var isMSPM0G1X0X_G3X0X = 0;
[02:54:23.618]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:54:23.618]      __var isProduction = 0;
[02:54:23.618]        // -> [isProduction <= 0x00000000]
[02:54:23.618]      __var continueId = 0;
[02:54:23.618]        // -> [continueId <= 0x00000000]
[02:54:23.618]      deviceID =   Read32(0x41C40004);
[02:54:23.624]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:54:23.624]        // -> [deviceID <= 0x2BB8802F]
[02:54:23.624]      version = deviceID >> 28;
[02:54:23.624]        // -> [version <= 0x00000002]
[02:54:23.624]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:54:23.624]        // -> [partNum <= 0x0000BB88]
[02:54:23.624]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:54:23.624]        // -> [manuf <= 0x00000017]
[02:54:23.624]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:54:23.624]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:54:23.624]      isProduction = (version > 0);
[02:54:23.624]        // -> [isProduction <= 0x00000001]
[02:54:23.625]    </block>
[02:54:23.625]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:54:23.625]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:54:23.625]        // =>  FALSE
[02:54:23.625]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:54:23.625]    </control>
[02:54:23.625]    <control if="continueId == 4" while="" timeout="0" info="">
[02:54:23.625]      // if-block "continueId == 4"
[02:54:23.625]        // =>  FALSE
[02:54:23.626]      // skip if-block "continueId == 4"
[02:54:23.626]    </control>
[02:54:23.626]    <control if="!isProduction" while="" timeout="0" info="">
[02:54:23.626]      // if-block "!isProduction"
[02:54:23.626]        // =>  FALSE
[02:54:23.626]      // skip if-block "!isProduction"
[02:54:23.626]    </control>
[02:54:23.626]  </sequence>
[02:54:23.626]  
[02:55:07.201]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:55:07.201]  
[02:55:07.202]  <debugvars>
[02:55:07.203]    // Pre-defined
[02:55:07.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:07.203]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:07.203]    __dp=0x00000000
[02:55:07.203]    __ap=0x00000000
[02:55:07.203]    __traceout=0x00000000      (Trace Disabled)
[02:55:07.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:07.203]    __FlashAddr=0x00000000
[02:55:07.203]    __FlashLen=0x00000000
[02:55:07.203]    __FlashArg=0x00000000
[02:55:07.204]    __FlashOp=0x00000000
[02:55:07.204]    __Result=0x00000000
[02:55:07.204]  </debugvars>
[02:55:07.204]  
[02:55:07.204]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:55:07.204]    <block atomic="false" info="">
[02:55:07.204]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:55:07.204]        // -> [isSWJ <= 0x00000001]
[02:55:07.204]      __var hasDormant = __protocol & 0x00020000;
[02:55:07.204]        // -> [hasDormant <= 0x00000000]
[02:55:07.204]      __var protType   = __protocol & 0x0000FFFF;
[02:55:07.204]        // -> [protType <= 0x00000002]
[02:55:07.204]    </block>
[02:55:07.204]    <control if="protType == 1" while="" timeout="0" info="">
[02:55:07.205]      // if-block "protType == 1"
[02:55:07.205]        // =>  FALSE
[02:55:07.205]      // skip if-block "protType == 1"
[02:55:07.205]    </control>
[02:55:07.205]    <control if="protType == 2" while="" timeout="0" info="">
[02:55:07.205]      // if-block "protType == 2"
[02:55:07.205]        // =>  TRUE
[02:55:07.205]      <control if="isSWJ" while="" timeout="0" info="">
[02:55:07.205]        // if-block "isSWJ"
[02:55:07.205]          // =>  TRUE
[02:55:07.205]        <control if="hasDormant" while="" timeout="0" info="">
[02:55:07.205]          // if-block "hasDormant"
[02:55:07.205]            // =>  FALSE
[02:55:07.205]          // skip if-block "hasDormant"
[02:55:07.205]        </control>
[02:55:07.205]        <control if="!hasDormant" while="" timeout="0" info="">
[02:55:07.205]          // if-block "!hasDormant"
[02:55:07.207]            // =>  TRUE
[02:55:07.207]          <block atomic="false" info="">
[02:55:07.207]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:55:07.208]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:07.208]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:55:07.210]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:55:07.210]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:55:07.211]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:07.211]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:55:07.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:55:07.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:55:07.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:07.214]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:55:07.215]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:55:07.215]          </block>
[02:55:07.216]          // end if-block "!hasDormant"
[02:55:07.216]        </control>
[02:55:07.216]        // end if-block "isSWJ"
[02:55:07.216]      </control>
[02:55:07.216]      <control if="!isSWJ" while="" timeout="0" info="">
[02:55:07.216]        // if-block "!isSWJ"
[02:55:07.216]          // =>  FALSE
[02:55:07.216]        // skip if-block "!isSWJ"
[02:55:07.216]      </control>
[02:55:07.216]      <block atomic="false" info="">
[02:55:07.216]        ReadDP(0x0);
[02:55:07.218]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:55:07.219]      </block>
[02:55:07.219]      // end if-block "protType == 2"
[02:55:07.219]    </control>
[02:55:07.219]  </sequence>
[02:55:07.219]  
[02:55:07.222]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:55:07.222]  
[02:55:07.222]  <debugvars>
[02:55:07.222]    // Pre-defined
[02:55:07.222]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:07.222]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:07.222]    __dp=0x00000000
[02:55:07.222]    __ap=0x00000000
[02:55:07.222]    __traceout=0x00000000      (Trace Disabled)
[02:55:07.222]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:07.222]    __FlashAddr=0x00000000
[02:55:07.222]    __FlashLen=0x00000000
[02:55:07.222]    __FlashArg=0x00000000
[02:55:07.222]    __FlashOp=0x00000000
[02:55:07.224]    __Result=0x00000000
[02:55:07.224]  </debugvars>
[02:55:07.224]  
[02:55:07.224]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:55:07.224]    <block atomic="false" info="">
[02:55:07.224]      __var SW_DP_ABORT       = 0x0;
[02:55:07.224]        // -> [SW_DP_ABORT <= 0x00000000]
[02:55:07.224]      __var DP_CTRL_STAT      = 0x4;
[02:55:07.224]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:55:07.224]      __var DP_SELECT         = 0x8;
[02:55:07.224]        // -> [DP_SELECT <= 0x00000008]
[02:55:07.224]      __var powered_down      = 0;
[02:55:07.224]        // -> [powered_down <= 0x00000000]
[02:55:07.224]      WriteDP(DP_SELECT, 0x00000000);
[02:55:07.226]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:55:07.226]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:55:07.228]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:55:07.228]        // -> [powered_down <= 0x00000001]
[02:55:07.228]    </block>
[02:55:07.228]    <control if="powered_down" while="" timeout="0" info="">
[02:55:07.228]      // if-block "powered_down"
[02:55:07.228]        // =>  TRUE
[02:55:07.228]      <block atomic="false" info="">
[02:55:07.228]        Message(0, "Debug/System power-up request sent");
[02:55:07.231]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:55:07.233]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:55:07.233]      </block>
[02:55:07.233]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:55:07.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:55:07.234]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:55:07.234]        // while-condition  =>  FALSE
[02:55:07.235]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:55:07.235]      </control>
[02:55:07.236]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:55:07.236]        // if-block "(__protocol & 0xFFFF) == 1"
[02:55:07.236]          // =>  FALSE
[02:55:07.236]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:55:07.236]      </control>
[02:55:07.236]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:55:07.236]        // if-block "(__protocol & 0xFFFF) == 2"
[02:55:07.236]          // =>  TRUE
[02:55:07.237]        <block atomic="false" info="">
[02:55:07.237]          Message(0, "executing SWD power up");
[02:55:07.238]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:55:07.239]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:55:07.240]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:55:07.241]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:55:07.241]        </block>
[02:55:07.241]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:55:07.241]      </control>
[02:55:07.241]      // end if-block "powered_down"
[02:55:07.242]    </control>
[02:55:07.242]    <block atomic="false" info="">
[02:55:07.242]      __var DEBUG_PORT_VAL    = 0;
[02:55:07.242]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:55:07.242]      __var ACCESS_POINT_VAL  = 0;
[02:55:07.242]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:55:07.242]      __ap = 1; 
[02:55:07.242]        // -> [__ap <= 0x00000001]
[02:55:07.242]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:55:07.246]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:55:07.246]      __ap = 4;
[02:55:07.246]        // -> [__ap <= 0x00000004]
[02:55:07.246]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:55:07.250]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:55:07.250]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:55:07.250]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:55:07.251]    </block>
[02:55:07.251]    <block atomic="false" info="">
[02:55:07.251]      __var nReset = 0x80;
[02:55:07.252]        // -> [nReset <= 0x00000080]
[02:55:07.252]      __var canReadPins = 0;
[02:55:07.252]        // -> [canReadPins <= 0x00000000]
[02:55:07.252]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:55:07.254]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:55:07.254]        // -> [canReadPins <= 0x00000001]
[02:55:07.254]    </block>
[02:55:07.254]    <control if="" while="1" timeout="200" info="">
[02:55:07.255]      // while "1"  (timeout="200")
[02:55:07.255]      // while-condition  =>  TRUE
[02:55:07.255]      // while "1"  (timeout="200")
[02:55:07.255]      // while-condition  =>  TRUE
[02:55:07.255]      // while "1"  (timeout="200")
[02:55:07.255]      // while-condition  =>  TRUE
[02:55:07.255]      // while "1"  (timeout="200")
[02:55:07.255]      // while-condition  =>  TRUE
[02:55:07.255]      // while "1"  (timeout="200")
[02:55:07.255]      // while-condition  =>  TRUE
[02:55:07.255]      // while "1"  (timeout="200")
[02:55:07.255]      // while-condition  =>  TRUE
[02:55:07.255]      // while "1"  (timeout="200")
[02:55:07.256]      // while-condition  =>  TRUE
[02:55:07.256]      // while "1"  (timeout="200")
[02:55:07.256]      // while-condition  =>  TRUE
[02:55:07.256]      // while "1"  (timeout="200")
[02:55:07.256]      // while-condition  =>  TRUE
[02:55:07.256]      // while "1"  (timeout="200")
[02:55:07.257]      // while-condition  =>  TRUE
[02:55:07.257]      // while "1"  (timeout="200")
[02:55:07.257]      // while-condition  =>  TRUE
[02:55:07.257]      // while "1"  (timeout="200")
[02:55:07.257]      // while-condition  =>  TRUE
[02:55:07.257]      // while "1"  (timeout="200")
[02:55:07.257]      // while-condition  =>  TRUE
[02:55:07.257]      // while "1"  (timeout="200")
[02:55:07.257]      // while-condition  =>  TRUE
[02:55:07.257]      // while "1"  (timeout="200")
[02:55:07.257]      // while-condition  =>  TRUE
[02:55:07.257]      // while "1"  (timeout="200")
[02:55:07.259]      // while-condition  =>  TRUE
[02:55:07.259]      // while "1"  (timeout="200")
[02:55:07.259]      // while-condition  =>  TRUE
[02:55:07.259]      // while "1"  (timeout="200")
[02:55:07.259]      // while-condition  =>  TRUE
[02:55:07.259]      // while "1"  (timeout="200")
[02:55:07.259]      // while-condition  =>  TRUE
[02:55:07.259]      // while "1"  (timeout="200")
[02:55:07.259]      // while-condition  =>  TRUE
[02:55:07.259]      // while "1"  (timeout="200")
[02:55:07.259]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.260]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.260]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.260]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.260]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.260]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.260]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.260]      // while-condition  =>  TRUE
[02:55:07.260]      // while "1"  (timeout="200")
[02:55:07.262]      // while-condition  =>  TRUE
[02:55:07.262]      // while "1"  (timeout="200")
[02:55:07.262]      // while-condition  =>  TRUE
[02:55:07.262]      // while "1"  (timeout="200")
[02:55:07.262]      // while-condition  =>  TRUE
[02:55:07.262]      // while "1"  (timeout="200")
[02:55:07.262]      // while-condition  =>  TRUE
[02:55:07.262]      // while "1"  (timeout="200")
[02:55:07.262]      // while-condition  =>  TRUE
[02:55:07.262]      // while "1"  (timeout="200")
[02:55:07.262]      // while-condition  =>  TRUE
[02:55:07.263]      // while "1"  (timeout="200")
[02:55:07.263]      // while-condition  =>  TRUE
[02:55:07.263]      // while "1"  (timeout="200")
[02:55:07.263]      // while-condition  =>  TRUE
[02:55:07.263]      // while "1"  (timeout="200")
[02:55:07.263]      // while-condition  =>  TRUE
[02:55:07.264]      // while "1"  (timeout="200")
[02:55:07.264]      // while-condition  =>  TRUE
[02:55:07.264]      // while "1"  (timeout="200")
[02:55:07.264]      // while-condition  =>  TRUE
[02:55:07.264]      // while "1"  (timeout="200")
[02:55:07.264]      // while-condition  =>  TRUE
[02:55:07.264]      // while "1"  (timeout="200")
[02:55:07.264]      // while-condition  =>  TRUE
[02:55:07.264]      // while "1"  (timeout="200")
[02:55:07.264]      // while-condition  =>  TRUE
[02:55:07.264]      // while "1"  (timeout="200")
[02:55:07.265]      // while-condition  =>  TRUE
[02:55:07.265]      // while "1"  (timeout="200")
[02:55:07.265]      // while-condition  =>  TRUE
[02:55:07.265]      // while "1"  (timeout="200")
[02:55:07.265]      // while-condition  =>  TRUE
[02:55:07.265]      // while "1"  (timeout="200")
[02:55:07.265]      // while-condition  =>  TRUE
[02:55:07.265]      // while "1"  (timeout="200")
[02:55:07.265]      // while-condition  =>  TRUE
[02:55:07.265]      // while "1"  (timeout="200")
[02:55:07.265]      // while-condition  =>  TRUE
[02:55:07.266]      // while "1"  (timeout="200")
[02:55:07.266]      // while-condition  =>  TRUE
[02:55:07.266]      // while "1"  (timeout="200")
[02:55:07.267]      // while-condition  =>  TRUE
[02:55:07.267]      // while "1"  (timeout="200")
[02:55:07.267]      // while-condition  =>  TRUE
[02:55:07.267]      // while "1"  (timeout="200")
[02:55:07.267]      // while-condition  =>  TRUE
[02:55:07.267]      // while "1"  (timeout="200")
[02:55:07.267]      // while-condition  =>  TRUE
[02:55:07.267]      // while "1"  (timeout="200")
[02:55:07.267]      // while-condition  =>  TRUE
[02:55:07.267]      // while "1"  (timeout="200")
[02:55:07.267]      // while-condition  =>  TRUE
[02:55:07.267]      // while "1"  (timeout="200")
[02:55:07.268]      // while-condition  =>  TRUE
[02:55:07.268]      // while "1"  (timeout="200")
[02:55:07.268]      // while-condition  =>  TRUE
[02:55:07.268]      // while "1"  (timeout="200")
[02:55:07.268]      // while-condition  =>  TRUE
[02:55:07.268]      // while "1"  (timeout="200")
[02:55:07.268]      // while-condition  =>  TRUE
[02:55:07.268]      // while "1"  (timeout="200")
[02:55:07.268]      // while-condition  =>  TRUE
[02:55:07.268]      // while "1"  (timeout="200")
[02:55:07.268]      // while-condition  =>  TRUE
[02:55:07.268]      // while "1"  (timeout="200")
[02:55:07.268]      // while-condition  =>  TRUE
[02:55:07.269]      // while "1"  (timeout="200")
[02:55:07.269]      // while  =>  TIMEOUT
[02:55:07.269]      // end while "1"
[02:55:07.269]    </control>
[02:55:07.269]    <control if="canReadPins" while="" timeout="0" info="">
[02:55:07.269]      // if-block "canReadPins"
[02:55:07.269]        // =>  TRUE
[02:55:07.269]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:55:07.269]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:55:07.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:55:07.271]        // while-condition  =>  FALSE
[02:55:07.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:55:07.271]      </control>
[02:55:07.271]      // end if-block "canReadPins"
[02:55:07.271]    </control>
[02:55:07.271]    <control if="!canReadPins" while="" timeout="0" info="">
[02:55:07.271]      // if-block "!canReadPins"
[02:55:07.271]        // =>  FALSE
[02:55:07.271]      // skip if-block "!canReadPins"
[02:55:07.271]    </control>
[02:55:07.271]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:55:07.272]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:55:07.272]        // =>  TRUE
[02:55:07.272]      <block atomic="false" info="">
[02:55:07.272]        WriteAP(0x00, 0x190008);
[02:55:07.274]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:55:07.275]        WriteAP(0xF0, 0x01);
[02:55:07.277]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:55:07.277]      </block>
[02:55:07.278]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:55:07.278]    </control>
[02:55:07.278]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:55:07.278]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:55:07.278]        // =>  FALSE
[02:55:07.278]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:55:07.278]    </control>
[02:55:07.278]    <block atomic="false" info="">
[02:55:07.278]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:55:07.282]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:55:07.282]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:55:07.282]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:55:07.283]      __ap = 0; //lets make sure we reset the access point selection
[02:55:07.283]        // -> [__ap <= 0x00000000]
[02:55:07.283]    </block>
[02:55:07.284]  </sequence>
[02:55:07.284]  
[02:55:07.301]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:55:07.301]  
[02:55:07.303]  <debugvars>
[02:55:07.303]    // Pre-defined
[02:55:07.303]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:07.303]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:07.303]    __dp=0x00000000
[02:55:07.303]    __ap=0x00000000
[02:55:07.303]    __traceout=0x00000000      (Trace Disabled)
[02:55:07.303]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:07.303]    __FlashAddr=0x00000000
[02:55:07.303]    __FlashLen=0x00000000
[02:55:07.303]    __FlashArg=0x00000000
[02:55:07.304]    __FlashOp=0x00000000
[02:55:07.304]    __Result=0x00000000
[02:55:07.304]  </debugvars>
[02:55:07.304]  
[02:55:07.304]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:55:07.304]    <block atomic="false" info="">
[02:55:07.304]      __var deviceID = 0;
[02:55:07.304]        // -> [deviceID <= 0x00000000]
[02:55:07.304]      __var version = 0;
[02:55:07.304]        // -> [version <= 0x00000000]
[02:55:07.304]      __var partNum = 0;
[02:55:07.304]        // -> [partNum <= 0x00000000]
[02:55:07.304]      __var manuf = 0;
[02:55:07.304]        // -> [manuf <= 0x00000000]
[02:55:07.305]      __var isMSPM0G1X0X_G3X0X = 0;
[02:55:07.305]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:55:07.305]      __var isProduction = 0;
[02:55:07.305]        // -> [isProduction <= 0x00000000]
[02:55:07.305]      __var continueId = 0;
[02:55:07.305]        // -> [continueId <= 0x00000000]
[02:55:07.305]      deviceID =   Read32(0x41C40004);
[02:55:07.313]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:55:07.314]        // -> [deviceID <= 0x2BB8802F]
[02:55:07.314]      version = deviceID >> 28;
[02:55:07.314]        // -> [version <= 0x00000002]
[02:55:07.314]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:55:07.314]        // -> [partNum <= 0x0000BB88]
[02:55:07.314]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:55:07.314]        // -> [manuf <= 0x00000017]
[02:55:07.314]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:55:07.314]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:55:07.314]      isProduction = (version > 0);
[02:55:07.315]        // -> [isProduction <= 0x00000001]
[02:55:07.315]    </block>
[02:55:07.315]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:55:07.315]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:55:07.315]        // =>  FALSE
[02:55:07.315]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:55:07.315]    </control>
[02:55:07.315]    <control if="continueId == 4" while="" timeout="0" info="">
[02:55:07.315]      // if-block "continueId == 4"
[02:55:07.315]        // =>  FALSE
[02:55:07.317]      // skip if-block "continueId == 4"
[02:55:07.317]    </control>
[02:55:07.317]    <control if="!isProduction" while="" timeout="0" info="">
[02:55:07.317]      // if-block "!isProduction"
[02:55:07.317]        // =>  FALSE
[02:55:07.317]      // skip if-block "!isProduction"
[02:55:07.317]    </control>
[02:55:07.317]  </sequence>
[02:55:07.317]  
[02:55:25.272]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:55:25.272]  
[02:55:25.281]  <debugvars>
[02:55:25.281]    // Pre-defined
[02:55:25.281]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:25.281]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:25.281]    __dp=0x00000000
[02:55:25.281]    __ap=0x00000000
[02:55:25.281]    __traceout=0x00000000      (Trace Disabled)
[02:55:25.281]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:25.281]    __FlashAddr=0x00000000
[02:55:25.281]    __FlashLen=0x00000000
[02:55:25.281]    __FlashArg=0x00000000
[02:55:25.282]    __FlashOp=0x00000000
[02:55:25.282]    __Result=0x00000000
[02:55:25.282]  </debugvars>
[02:55:25.282]  
[02:55:25.282]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:55:25.282]    <block atomic="false" info="">
[02:55:25.282]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:55:25.282]        // -> [isSWJ <= 0x00000001]
[02:55:25.282]      __var hasDormant = __protocol & 0x00020000;
[02:55:25.282]        // -> [hasDormant <= 0x00000000]
[02:55:25.282]      __var protType   = __protocol & 0x0000FFFF;
[02:55:25.282]        // -> [protType <= 0x00000002]
[02:55:25.282]    </block>
[02:55:25.282]    <control if="protType == 1" while="" timeout="0" info="">
[02:55:25.284]      // if-block "protType == 1"
[02:55:25.284]        // =>  FALSE
[02:55:25.284]      // skip if-block "protType == 1"
[02:55:25.284]    </control>
[02:55:25.284]    <control if="protType == 2" while="" timeout="0" info="">
[02:55:25.284]      // if-block "protType == 2"
[02:55:25.284]        // =>  TRUE
[02:55:25.284]      <control if="isSWJ" while="" timeout="0" info="">
[02:55:25.284]        // if-block "isSWJ"
[02:55:25.284]          // =>  TRUE
[02:55:25.284]        <control if="hasDormant" while="" timeout="0" info="">
[02:55:25.284]          // if-block "hasDormant"
[02:55:25.285]            // =>  FALSE
[02:55:25.285]          // skip if-block "hasDormant"
[02:55:25.285]        </control>
[02:55:25.285]        <control if="!hasDormant" while="" timeout="0" info="">
[02:55:25.285]          // if-block "!hasDormant"
[02:55:25.285]            // =>  TRUE
[02:55:25.285]          <block atomic="false" info="">
[02:55:25.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:55:25.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:25.286]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:55:25.288]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:55:25.288]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:55:25.290]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:25.290]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:55:25.290]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:55:25.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:55:25.293]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:25.293]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:55:25.296]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:55:25.296]          </block>
[02:55:25.296]          // end if-block "!hasDormant"
[02:55:25.296]        </control>
[02:55:25.297]        // end if-block "isSWJ"
[02:55:25.297]      </control>
[02:55:25.297]      <control if="!isSWJ" while="" timeout="0" info="">
[02:55:25.297]        // if-block "!isSWJ"
[02:55:25.297]          // =>  FALSE
[02:55:25.297]        // skip if-block "!isSWJ"
[02:55:25.297]      </control>
[02:55:25.297]      <block atomic="false" info="">
[02:55:25.297]        ReadDP(0x0);
[02:55:25.299]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:55:25.299]      </block>
[02:55:25.299]      // end if-block "protType == 2"
[02:55:25.299]    </control>
[02:55:25.299]  </sequence>
[02:55:25.299]  
[02:55:25.302]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:55:25.302]  
[02:55:25.302]  <debugvars>
[02:55:25.302]    // Pre-defined
[02:55:25.303]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:25.303]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:25.303]    __dp=0x00000000
[02:55:25.303]    __ap=0x00000000
[02:55:25.303]    __traceout=0x00000000      (Trace Disabled)
[02:55:25.303]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:25.303]    __FlashAddr=0x00000000
[02:55:25.303]    __FlashLen=0x00000000
[02:55:25.303]    __FlashArg=0x00000000
[02:55:25.303]    __FlashOp=0x00000000
[02:55:25.303]    __Result=0x00000000
[02:55:25.303]  </debugvars>
[02:55:25.304]  
[02:55:25.304]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:55:25.304]    <block atomic="false" info="">
[02:55:25.304]      __var SW_DP_ABORT       = 0x0;
[02:55:25.304]        // -> [SW_DP_ABORT <= 0x00000000]
[02:55:25.304]      __var DP_CTRL_STAT      = 0x4;
[02:55:25.304]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:55:25.304]      __var DP_SELECT         = 0x8;
[02:55:25.304]        // -> [DP_SELECT <= 0x00000008]
[02:55:25.304]      __var powered_down      = 0;
[02:55:25.304]        // -> [powered_down <= 0x00000000]
[02:55:25.304]      WriteDP(DP_SELECT, 0x00000000);
[02:55:25.306]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:55:25.306]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:55:25.308]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:55:25.308]        // -> [powered_down <= 0x00000001]
[02:55:25.308]    </block>
[02:55:25.308]    <control if="powered_down" while="" timeout="0" info="">
[02:55:25.308]      // if-block "powered_down"
[02:55:25.308]        // =>  TRUE
[02:55:25.308]      <block atomic="false" info="">
[02:55:25.308]        Message(0, "Debug/System power-up request sent");
[02:55:25.311]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:55:25.313]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:55:25.313]      </block>
[02:55:25.313]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:55:25.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:55:25.314]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:55:25.314]        // while-condition  =>  FALSE
[02:55:25.314]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:55:25.315]      </control>
[02:55:25.315]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:55:25.315]        // if-block "(__protocol & 0xFFFF) == 1"
[02:55:25.315]          // =>  FALSE
[02:55:25.315]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:55:25.315]      </control>
[02:55:25.315]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:55:25.315]        // if-block "(__protocol & 0xFFFF) == 2"
[02:55:25.315]          // =>  TRUE
[02:55:25.316]        <block atomic="false" info="">
[02:55:25.316]          Message(0, "executing SWD power up");
[02:55:25.318]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:55:25.320]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:55:25.320]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:55:25.321]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:55:25.321]        </block>
[02:55:25.322]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:55:25.322]      </control>
[02:55:25.322]      // end if-block "powered_down"
[02:55:25.322]    </control>
[02:55:25.322]    <block atomic="false" info="">
[02:55:25.322]      __var DEBUG_PORT_VAL    = 0;
[02:55:25.322]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:55:25.322]      __var ACCESS_POINT_VAL  = 0;
[02:55:25.322]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:55:25.324]      __ap = 1; 
[02:55:25.324]        // -> [__ap <= 0x00000001]
[02:55:25.324]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:55:25.326]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:55:25.326]      __ap = 4;
[02:55:25.327]        // -> [__ap <= 0x00000004]
[02:55:25.327]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:55:25.329]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:55:25.330]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:55:25.330]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:55:25.331]    </block>
[02:55:25.331]    <block atomic="false" info="">
[02:55:25.333]      __var nReset = 0x80;
[02:55:25.333]        // -> [nReset <= 0x00000080]
[02:55:25.333]      __var canReadPins = 0;
[02:55:25.333]        // -> [canReadPins <= 0x00000000]
[02:55:25.333]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:55:25.336]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:55:25.336]        // -> [canReadPins <= 0x00000001]
[02:55:25.337]    </block>
[02:55:25.337]    <control if="" while="1" timeout="200" info="">
[02:55:25.337]      // while "1"  (timeout="200")
[02:55:25.337]      // while-condition  =>  TRUE
[02:55:25.337]      // while "1"  (timeout="200")
[02:55:25.337]      // while-condition  =>  TRUE
[02:55:25.337]      // while "1"  (timeout="200")
[02:55:25.337]      // while-condition  =>  TRUE
[02:55:25.337]      // while "1"  (timeout="200")
[02:55:25.337]      // while-condition  =>  TRUE
[02:55:25.337]      // while "1"  (timeout="200")
[02:55:25.337]      // while-condition  =>  TRUE
[02:55:25.337]      // while "1"  (timeout="200")
[02:55:25.337]      // while-condition  =>  TRUE
[02:55:25.337]      // while "1"  (timeout="200")
[02:55:25.337]      // while-condition  =>  TRUE
[02:55:25.338]      // while "1"  (timeout="200")
[02:55:25.338]      // while-condition  =>  TRUE
[02:55:25.338]      // while "1"  (timeout="200")
[02:55:25.338]      // while-condition  =>  TRUE
[02:55:25.338]      // while "1"  (timeout="200")
[02:55:25.338]      // while-condition  =>  TRUE
[02:55:25.338]      // while "1"  (timeout="200")
[02:55:25.338]      // while-condition  =>  TRUE
[02:55:25.338]      // while "1"  (timeout="200")
[02:55:25.338]      // while-condition  =>  TRUE
[02:55:25.339]      // while "1"  (timeout="200")
[02:55:25.339]      // while-condition  =>  TRUE
[02:55:25.339]      // while "1"  (timeout="200")
[02:55:25.339]      // while-condition  =>  TRUE
[02:55:25.339]      // while "1"  (timeout="200")
[02:55:25.339]      // while-condition  =>  TRUE
[02:55:25.339]      // while "1"  (timeout="200")
[02:55:25.339]      // while-condition  =>  TRUE
[02:55:25.339]      // while "1"  (timeout="200")
[02:55:25.339]      // while-condition  =>  TRUE
[02:55:25.340]      // while "1"  (timeout="200")
[02:55:25.340]      // while-condition  =>  TRUE
[02:55:25.340]      // while "1"  (timeout="200")
[02:55:25.340]      // while-condition  =>  TRUE
[02:55:25.340]      // while "1"  (timeout="200")
[02:55:25.340]      // while-condition  =>  TRUE
[02:55:25.340]      // while "1"  (timeout="200")
[02:55:25.341]      // while-condition  =>  TRUE
[02:55:25.341]      // while "1"  (timeout="200")
[02:55:25.341]      // while-condition  =>  TRUE
[02:55:25.341]      // while "1"  (timeout="200")
[02:55:25.341]      // while-condition  =>  TRUE
[02:55:25.341]      // while "1"  (timeout="200")
[02:55:25.341]      // while-condition  =>  TRUE
[02:55:25.341]      // while "1"  (timeout="200")
[02:55:25.341]      // while-condition  =>  TRUE
[02:55:25.341]      // while "1"  (timeout="200")
[02:55:25.341]      // while-condition  =>  TRUE
[02:55:25.341]      // while "1"  (timeout="200")
[02:55:25.342]      // while-condition  =>  TRUE
[02:55:25.342]      // while "1"  (timeout="200")
[02:55:25.342]      // while-condition  =>  TRUE
[02:55:25.342]      // while "1"  (timeout="200")
[02:55:25.342]      // while-condition  =>  TRUE
[02:55:25.342]      // while "1"  (timeout="200")
[02:55:25.342]      // while-condition  =>  TRUE
[02:55:25.342]      // while "1"  (timeout="200")
[02:55:25.342]      // while-condition  =>  TRUE
[02:55:25.342]      // while "1"  (timeout="200")
[02:55:25.342]      // while-condition  =>  TRUE
[02:55:25.343]      // while "1"  (timeout="200")
[02:55:25.343]      // while-condition  =>  TRUE
[02:55:25.343]      // while "1"  (timeout="200")
[02:55:25.343]      // while-condition  =>  TRUE
[02:55:25.343]      // while "1"  (timeout="200")
[02:55:25.343]      // while-condition  =>  TRUE
[02:55:25.343]      // while "1"  (timeout="200")
[02:55:25.343]      // while-condition  =>  TRUE
[02:55:25.343]      // while "1"  (timeout="200")
[02:55:25.343]      // while-condition  =>  TRUE
[02:55:25.343]      // while "1"  (timeout="200")
[02:55:25.343]      // while-condition  =>  TRUE
[02:55:25.343]      // while "1"  (timeout="200")
[02:55:25.344]      // while-condition  =>  TRUE
[02:55:25.344]      // while "1"  (timeout="200")
[02:55:25.344]      // while-condition  =>  TRUE
[02:55:25.344]      // while "1"  (timeout="200")
[02:55:25.344]      // while-condition  =>  TRUE
[02:55:25.344]      // while "1"  (timeout="200")
[02:55:25.344]      // while-condition  =>  TRUE
[02:55:25.344]      // while "1"  (timeout="200")
[02:55:25.344]      // while-condition  =>  TRUE
[02:55:25.344]      // while "1"  (timeout="200")
[02:55:25.345]      // while-condition  =>  TRUE
[02:55:25.345]      // while "1"  (timeout="200")
[02:55:25.345]      // while-condition  =>  TRUE
[02:55:25.345]      // while "1"  (timeout="200")
[02:55:25.345]      // while-condition  =>  TRUE
[02:55:25.345]      // while "1"  (timeout="200")
[02:55:25.345]      // while-condition  =>  TRUE
[02:55:25.345]      // while "1"  (timeout="200")
[02:55:25.345]      // while-condition  =>  TRUE
[02:55:25.345]      // while "1"  (timeout="200")
[02:55:25.345]      // while-condition  =>  TRUE
[02:55:25.345]      // while "1"  (timeout="200")
[02:55:25.347]      // while-condition  =>  TRUE
[02:55:25.347]      // while "1"  (timeout="200")
[02:55:25.347]      // while  =>  TIMEOUT
[02:55:25.347]      // end while "1"
[02:55:25.347]    </control>
[02:55:25.347]    <control if="canReadPins" while="" timeout="0" info="">
[02:55:25.347]      // if-block "canReadPins"
[02:55:25.347]        // =>  TRUE
[02:55:25.347]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:55:25.347]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:55:25.349]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:55:25.350]        // while-condition  =>  FALSE
[02:55:25.350]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:55:25.350]      </control>
[02:55:25.350]      // end if-block "canReadPins"
[02:55:25.350]    </control>
[02:55:25.350]    <control if="!canReadPins" while="" timeout="0" info="">
[02:55:25.350]      // if-block "!canReadPins"
[02:55:25.350]        // =>  FALSE
[02:55:25.350]      // skip if-block "!canReadPins"
[02:55:25.351]    </control>
[02:55:25.351]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:55:25.351]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:55:25.351]        // =>  TRUE
[02:55:25.351]      <block atomic="false" info="">
[02:55:25.351]        WriteAP(0x00, 0x190008);
[02:55:25.353]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:55:25.353]        WriteAP(0xF0, 0x01);
[02:55:25.359]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:55:25.359]      </block>
[02:55:25.359]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:55:25.359]    </control>
[02:55:25.359]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:55:25.359]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:55:25.359]        // =>  FALSE
[02:55:25.359]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:55:25.360]    </control>
[02:55:25.360]    <block atomic="false" info="">
[02:55:25.360]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:55:25.363]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:55:25.363]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:55:25.363]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:55:25.365]      __ap = 0; //lets make sure we reset the access point selection
[02:55:25.365]        // -> [__ap <= 0x00000000]
[02:55:25.365]    </block>
[02:55:25.365]  </sequence>
[02:55:25.365]  
[02:55:25.387]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:55:25.387]  
[02:55:25.387]  <debugvars>
[02:55:25.387]    // Pre-defined
[02:55:25.388]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:25.388]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:25.388]    __dp=0x00000000
[02:55:25.388]    __ap=0x00000000
[02:55:25.388]    __traceout=0x00000000      (Trace Disabled)
[02:55:25.388]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:25.389]    __FlashAddr=0x00000000
[02:55:25.389]    __FlashLen=0x00000000
[02:55:25.389]    __FlashArg=0x00000000
[02:55:25.389]    __FlashOp=0x00000000
[02:55:25.389]    __Result=0x00000000
[02:55:25.389]  </debugvars>
[02:55:25.390]  
[02:55:25.390]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:55:25.390]    <block atomic="false" info="">
[02:55:25.390]      __var deviceID = 0;
[02:55:25.390]        // -> [deviceID <= 0x00000000]
[02:55:25.390]      __var version = 0;
[02:55:25.390]        // -> [version <= 0x00000000]
[02:55:25.390]      __var partNum = 0;
[02:55:25.390]        // -> [partNum <= 0x00000000]
[02:55:25.390]      __var manuf = 0;
[02:55:25.392]        // -> [manuf <= 0x00000000]
[02:55:25.392]      __var isMSPM0G1X0X_G3X0X = 0;
[02:55:25.392]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:55:25.392]      __var isProduction = 0;
[02:55:25.392]        // -> [isProduction <= 0x00000000]
[02:55:25.392]      __var continueId = 0;
[02:55:25.392]        // -> [continueId <= 0x00000000]
[02:55:25.392]      deviceID =   Read32(0x41C40004);
[02:55:25.396]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:55:25.396]        // -> [deviceID <= 0x2BB8802F]
[02:55:25.396]      version = deviceID >> 28;
[02:55:25.397]        // -> [version <= 0x00000002]
[02:55:25.397]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:55:25.397]        // -> [partNum <= 0x0000BB88]
[02:55:25.397]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:55:25.397]        // -> [manuf <= 0x00000017]
[02:55:25.397]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:55:25.397]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:55:25.397]      isProduction = (version > 0);
[02:55:25.397]        // -> [isProduction <= 0x00000001]
[02:55:25.397]    </block>
[02:55:25.397]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:55:25.397]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:55:25.397]        // =>  FALSE
[02:55:25.397]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:55:25.397]    </control>
[02:55:25.397]    <control if="continueId == 4" while="" timeout="0" info="">
[02:55:25.398]      // if-block "continueId == 4"
[02:55:25.398]        // =>  FALSE
[02:55:25.398]      // skip if-block "continueId == 4"
[02:55:25.398]    </control>
[02:55:25.398]    <control if="!isProduction" while="" timeout="0" info="">
[02:55:25.398]      // if-block "!isProduction"
[02:55:25.398]        // =>  FALSE
[02:55:25.398]      // skip if-block "!isProduction"
[02:55:25.398]    </control>
[02:55:25.398]  </sequence>
[02:55:25.398]  
[02:56:42.960]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:56:42.960]  
[02:56:42.968]  <debugvars>
[02:56:42.968]    // Pre-defined
[02:56:42.968]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:42.968]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:42.968]    __dp=0x00000000
[02:56:42.968]    __ap=0x00000000
[02:56:42.968]    __traceout=0x00000000      (Trace Disabled)
[02:56:42.968]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:42.968]    __FlashAddr=0x00000000
[02:56:42.969]    __FlashLen=0x00000000
[02:56:42.969]    __FlashArg=0x00000000
[02:56:42.969]    __FlashOp=0x00000000
[02:56:42.969]    __Result=0x00000000
[02:56:42.969]  </debugvars>
[02:56:42.969]  
[02:56:42.969]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:56:42.969]    <block atomic="false" info="">
[02:56:42.969]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:56:42.969]        // -> [isSWJ <= 0x00000001]
[02:56:42.970]      __var hasDormant = __protocol & 0x00020000;
[02:56:42.970]        // -> [hasDormant <= 0x00000000]
[02:56:42.970]      __var protType   = __protocol & 0x0000FFFF;
[02:56:42.970]        // -> [protType <= 0x00000002]
[02:56:42.970]    </block>
[02:56:42.970]    <control if="protType == 1" while="" timeout="0" info="">
[02:56:42.971]      // if-block "protType == 1"
[02:56:42.971]        // =>  FALSE
[02:56:42.971]      // skip if-block "protType == 1"
[02:56:42.971]    </control>
[02:56:42.971]    <control if="protType == 2" while="" timeout="0" info="">
[02:56:42.971]      // if-block "protType == 2"
[02:56:42.971]        // =>  TRUE
[02:56:42.971]      <control if="isSWJ" while="" timeout="0" info="">
[02:56:42.971]        // if-block "isSWJ"
[02:56:42.971]          // =>  TRUE
[02:56:42.971]        <control if="hasDormant" while="" timeout="0" info="">
[02:56:42.971]          // if-block "hasDormant"
[02:56:42.972]            // =>  FALSE
[02:56:42.972]          // skip if-block "hasDormant"
[02:56:42.972]        </control>
[02:56:42.972]        <control if="!hasDormant" while="" timeout="0" info="">
[02:56:42.972]          // if-block "!hasDormant"
[02:56:42.972]            // =>  TRUE
[02:56:42.973]          <block atomic="false" info="">
[02:56:42.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:56:42.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:42.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:56:42.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:56:42.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:56:42.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:42.978]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:56:42.980]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:56:42.980]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:56:42.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:42.982]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:56:42.983]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:56:42.983]          </block>
[02:56:42.983]          // end if-block "!hasDormant"
[02:56:42.983]        </control>
[02:56:42.983]        // end if-block "isSWJ"
[02:56:42.983]      </control>
[02:56:42.983]      <control if="!isSWJ" while="" timeout="0" info="">
[02:56:42.983]        // if-block "!isSWJ"
[02:56:42.984]          // =>  FALSE
[02:56:42.984]        // skip if-block "!isSWJ"
[02:56:42.984]      </control>
[02:56:42.984]      <block atomic="false" info="">
[02:56:42.984]        ReadDP(0x0);
[02:56:42.985]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:56:42.985]      </block>
[02:56:42.986]      // end if-block "protType == 2"
[02:56:42.986]    </control>
[02:56:42.986]  </sequence>
[02:56:42.986]  
[02:56:42.988]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:56:42.988]  
[02:56:42.989]  <debugvars>
[02:56:42.989]    // Pre-defined
[02:56:42.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:42.989]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:42.989]    __dp=0x00000000
[02:56:42.989]    __ap=0x00000000
[02:56:42.989]    __traceout=0x00000000      (Trace Disabled)
[02:56:42.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:42.989]    __FlashAddr=0x00000000
[02:56:42.989]    __FlashLen=0x00000000
[02:56:42.990]    __FlashArg=0x00000000
[02:56:42.990]    __FlashOp=0x00000000
[02:56:42.990]    __Result=0x00000000
[02:56:42.990]  </debugvars>
[02:56:42.990]  
[02:56:42.990]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:56:42.990]    <block atomic="false" info="">
[02:56:42.990]      __var SW_DP_ABORT       = 0x0;
[02:56:42.990]        // -> [SW_DP_ABORT <= 0x00000000]
[02:56:42.990]      __var DP_CTRL_STAT      = 0x4;
[02:56:42.990]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:56:42.990]      __var DP_SELECT         = 0x8;
[02:56:42.990]        // -> [DP_SELECT <= 0x00000008]
[02:56:42.990]      __var powered_down      = 0;
[02:56:42.991]        // -> [powered_down <= 0x00000000]
[02:56:42.991]      WriteDP(DP_SELECT, 0x00000000);
[02:56:42.993]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:56:42.993]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:56:42.994]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:56:42.995]        // -> [powered_down <= 0x00000001]
[02:56:42.995]    </block>
[02:56:42.995]    <control if="powered_down" while="" timeout="0" info="">
[02:56:42.995]      // if-block "powered_down"
[02:56:42.995]        // =>  TRUE
[02:56:42.995]      <block atomic="false" info="">
[02:56:42.995]        Message(0, "Debug/System power-up request sent");
[02:56:42.997]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:56:42.999]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:56:42.999]      </block>
[02:56:42.999]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:56:43.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:56:43.001]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:56:43.001]        // while-condition  =>  FALSE
[02:56:43.001]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:56:43.001]      </control>
[02:56:43.001]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:56:43.002]        // if-block "(__protocol & 0xFFFF) == 1"
[02:56:43.002]          // =>  FALSE
[02:56:43.002]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:56:43.002]      </control>
[02:56:43.002]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:56:43.002]        // if-block "(__protocol & 0xFFFF) == 2"
[02:56:43.002]          // =>  TRUE
[02:56:43.002]        <block atomic="false" info="">
[02:56:43.002]          Message(0, "executing SWD power up");
[02:56:43.004]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:56:43.007]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:56:43.007]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:56:43.009]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:56:43.009]        </block>
[02:56:43.010]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:56:43.010]      </control>
[02:56:43.010]      // end if-block "powered_down"
[02:56:43.010]    </control>
[02:56:43.010]    <block atomic="false" info="">
[02:56:43.010]      __var DEBUG_PORT_VAL    = 0;
[02:56:43.010]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:56:43.010]      __var ACCESS_POINT_VAL  = 0;
[02:56:43.010]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:56:43.010]      __ap = 1; 
[02:56:43.010]        // -> [__ap <= 0x00000001]
[02:56:43.011]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:56:43.014]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:56:43.014]      __ap = 4;
[02:56:43.014]        // -> [__ap <= 0x00000004]
[02:56:43.014]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:56:43.018]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:56:43.018]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:56:43.018]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:56:43.020]    </block>
[02:56:43.020]    <block atomic="false" info="">
[02:56:43.020]      __var nReset = 0x80;
[02:56:43.020]        // -> [nReset <= 0x00000080]
[02:56:43.020]      __var canReadPins = 0;
[02:56:43.020]        // -> [canReadPins <= 0x00000000]
[02:56:43.020]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:56:43.022]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:56:43.022]        // -> [canReadPins <= 0x00000001]
[02:56:43.022]    </block>
[02:56:43.022]    <control if="" while="1" timeout="200" info="">
[02:56:43.022]      // while "1"  (timeout="200")
[02:56:43.022]      // while-condition  =>  TRUE
[02:56:43.022]      // while "1"  (timeout="200")
[02:56:43.022]      // while-condition  =>  TRUE
[02:56:43.022]      // while "1"  (timeout="200")
[02:56:43.022]      // while-condition  =>  TRUE
[02:56:43.022]      // while "1"  (timeout="200")
[02:56:43.023]      // while-condition  =>  TRUE
[02:56:43.023]      // while "1"  (timeout="200")
[02:56:43.023]      // while-condition  =>  TRUE
[02:56:43.023]      // while "1"  (timeout="200")
[02:56:43.024]      // while-condition  =>  TRUE
[02:56:43.024]      // while "1"  (timeout="200")
[02:56:43.024]      // while-condition  =>  TRUE
[02:56:43.024]      // while "1"  (timeout="200")
[02:56:43.024]      // while-condition  =>  TRUE
[02:56:43.024]      // while "1"  (timeout="200")
[02:56:43.024]      // while-condition  =>  TRUE
[02:56:43.024]      // while "1"  (timeout="200")
[02:56:43.024]      // while-condition  =>  TRUE
[02:56:43.024]      // while "1"  (timeout="200")
[02:56:43.024]      // while-condition  =>  TRUE
[02:56:43.025]      // while "1"  (timeout="200")
[02:56:43.025]      // while-condition  =>  TRUE
[02:56:43.025]      // while "1"  (timeout="200")
[02:56:43.025]      // while-condition  =>  TRUE
[02:56:43.025]      // while "1"  (timeout="200")
[02:56:43.025]      // while-condition  =>  TRUE
[02:56:43.025]      // while "1"  (timeout="200")
[02:56:43.025]      // while-condition  =>  TRUE
[02:56:43.025]      // while "1"  (timeout="200")
[02:56:43.025]      // while-condition  =>  TRUE
[02:56:43.025]      // while "1"  (timeout="200")
[02:56:43.026]      // while-condition  =>  TRUE
[02:56:43.026]      // while "1"  (timeout="200")
[02:56:43.026]      // while-condition  =>  TRUE
[02:56:43.026]      // while "1"  (timeout="200")
[02:56:43.026]      // while-condition  =>  TRUE
[02:56:43.026]      // while "1"  (timeout="200")
[02:56:43.026]      // while-condition  =>  TRUE
[02:56:43.026]      // while "1"  (timeout="200")
[02:56:43.026]      // while-condition  =>  TRUE
[02:56:43.026]      // while "1"  (timeout="200")
[02:56:43.026]      // while-condition  =>  TRUE
[02:56:43.026]      // while "1"  (timeout="200")
[02:56:43.026]      // while-condition  =>  TRUE
[02:56:43.026]      // while "1"  (timeout="200")
[02:56:43.027]      // while-condition  =>  TRUE
[02:56:43.027]      // while "1"  (timeout="200")
[02:56:43.027]      // while-condition  =>  TRUE
[02:56:43.027]      // while "1"  (timeout="200")
[02:56:43.027]      // while-condition  =>  TRUE
[02:56:43.027]      // while "1"  (timeout="200")
[02:56:43.027]      // while-condition  =>  TRUE
[02:56:43.027]      // while "1"  (timeout="200")
[02:56:43.027]      // while-condition  =>  TRUE
[02:56:43.027]      // while "1"  (timeout="200")
[02:56:43.027]      // while-condition  =>  TRUE
[02:56:43.027]      // while "1"  (timeout="200")
[02:56:43.028]      // while-condition  =>  TRUE
[02:56:43.028]      // while "1"  (timeout="200")
[02:56:43.028]      // while-condition  =>  TRUE
[02:56:43.029]      // while "1"  (timeout="200")
[02:56:43.029]      // while-condition  =>  TRUE
[02:56:43.029]      // while "1"  (timeout="200")
[02:56:43.029]      // while-condition  =>  TRUE
[02:56:43.029]      // while "1"  (timeout="200")
[02:56:43.029]      // while-condition  =>  TRUE
[02:56:43.029]      // while "1"  (timeout="200")
[02:56:43.029]      // while-condition  =>  TRUE
[02:56:43.030]      // while "1"  (timeout="200")
[02:56:43.030]      // while-condition  =>  TRUE
[02:56:43.030]      // while "1"  (timeout="200")
[02:56:43.030]      // while-condition  =>  TRUE
[02:56:43.030]      // while "1"  (timeout="200")
[02:56:43.030]      // while-condition  =>  TRUE
[02:56:43.030]      // while "1"  (timeout="200")
[02:56:43.030]      // while-condition  =>  TRUE
[02:56:43.030]      // while "1"  (timeout="200")
[02:56:43.030]      // while-condition  =>  TRUE
[02:56:43.030]      // while "1"  (timeout="200")
[02:56:43.031]      // while-condition  =>  TRUE
[02:56:43.031]      // while "1"  (timeout="200")
[02:56:43.031]      // while-condition  =>  TRUE
[02:56:43.031]      // while "1"  (timeout="200")
[02:56:43.031]      // while-condition  =>  TRUE
[02:56:43.031]      // while "1"  (timeout="200")
[02:56:43.031]      // while-condition  =>  TRUE
[02:56:43.031]      // while "1"  (timeout="200")
[02:56:43.031]      // while-condition  =>  TRUE
[02:56:43.031]      // while "1"  (timeout="200")
[02:56:43.032]      // while-condition  =>  TRUE
[02:56:43.032]      // while "1"  (timeout="200")
[02:56:43.032]      // while-condition  =>  TRUE
[02:56:43.032]      // while "1"  (timeout="200")
[02:56:43.032]      // while-condition  =>  TRUE
[02:56:43.032]      // while "1"  (timeout="200")
[02:56:43.032]      // while-condition  =>  TRUE
[02:56:43.032]      // while "1"  (timeout="200")
[02:56:43.032]      // while-condition  =>  TRUE
[02:56:43.032]      // while "1"  (timeout="200")
[02:56:43.032]      // while-condition  =>  TRUE
[02:56:43.032]      // while "1"  (timeout="200")
[02:56:43.032]      // while-condition  =>  TRUE
[02:56:43.033]      // while "1"  (timeout="200")
[02:56:43.033]      // while-condition  =>  TRUE
[02:56:43.033]      // while "1"  (timeout="200")
[02:56:43.034]      // while-condition  =>  TRUE
[02:56:43.034]      // while "1"  (timeout="200")
[02:56:43.034]      // while  =>  TIMEOUT
[02:56:43.034]      // end while "1"
[02:56:43.034]    </control>
[02:56:43.034]    <control if="canReadPins" while="" timeout="0" info="">
[02:56:43.035]      // if-block "canReadPins"
[02:56:43.035]        // =>  TRUE
[02:56:43.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:56:43.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:56:43.036]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:56:43.037]        // while-condition  =>  FALSE
[02:56:43.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:56:43.037]      </control>
[02:56:43.037]      // end if-block "canReadPins"
[02:56:43.037]    </control>
[02:56:43.037]    <control if="!canReadPins" while="" timeout="0" info="">
[02:56:43.037]      // if-block "!canReadPins"
[02:56:43.038]        // =>  FALSE
[02:56:43.038]      // skip if-block "!canReadPins"
[02:56:43.038]    </control>
[02:56:43.038]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:56:43.038]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:56:43.038]        // =>  TRUE
[02:56:43.038]      <block atomic="false" info="">
[02:56:43.038]        WriteAP(0x00, 0x190008);
[02:56:43.040]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:56:43.040]        WriteAP(0xF0, 0x01);
[02:56:43.043]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:56:43.044]      </block>
[02:56:43.044]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:56:43.044]    </control>
[02:56:43.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:56:43.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:56:43.044]        // =>  FALSE
[02:56:43.044]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:56:43.044]    </control>
[02:56:43.044]    <block atomic="false" info="">
[02:56:43.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:56:43.047]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:56:43.047]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:56:43.047]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:56:43.049]      __ap = 0; //lets make sure we reset the access point selection
[02:56:43.049]        // -> [__ap <= 0x00000000]
[02:56:43.049]    </block>
[02:56:43.049]  </sequence>
[02:56:43.049]  
[02:56:43.068]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:56:43.068]  
[02:56:43.069]  <debugvars>
[02:56:43.069]    // Pre-defined
[02:56:43.069]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:43.069]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:43.069]    __dp=0x00000000
[02:56:43.069]    __ap=0x00000000
[02:56:43.069]    __traceout=0x00000000      (Trace Disabled)
[02:56:43.069]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:43.069]    __FlashAddr=0x00000000
[02:56:43.070]    __FlashLen=0x00000000
[02:56:43.070]    __FlashArg=0x00000000
[02:56:43.070]    __FlashOp=0x00000000
[02:56:43.070]    __Result=0x00000000
[02:56:43.070]  </debugvars>
[02:56:43.071]  
[02:56:43.071]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:56:43.071]    <block atomic="false" info="">
[02:56:43.071]      __var deviceID = 0;
[02:56:43.071]        // -> [deviceID <= 0x00000000]
[02:56:43.071]      __var version = 0;
[02:56:43.071]        // -> [version <= 0x00000000]
[02:56:43.071]      __var partNum = 0;
[02:56:43.071]        // -> [partNum <= 0x00000000]
[02:56:43.071]      __var manuf = 0;
[02:56:43.072]        // -> [manuf <= 0x00000000]
[02:56:43.072]      __var isMSPM0G1X0X_G3X0X = 0;
[02:56:43.072]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:56:43.072]      __var isProduction = 0;
[02:56:43.072]        // -> [isProduction <= 0x00000000]
[02:56:43.072]      __var continueId = 0;
[02:56:43.072]        // -> [continueId <= 0x00000000]
[02:56:43.072]      deviceID =   Read32(0x41C40004);
[02:56:43.077]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:56:43.077]        // -> [deviceID <= 0x2BB8802F]
[02:56:43.077]      version = deviceID >> 28;
[02:56:43.077]        // -> [version <= 0x00000002]
[02:56:43.077]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:56:43.078]        // -> [partNum <= 0x0000BB88]
[02:56:43.078]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:56:43.078]        // -> [manuf <= 0x00000017]
[02:56:43.078]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:56:43.078]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:56:43.078]      isProduction = (version > 0);
[02:56:43.078]        // -> [isProduction <= 0x00000001]
[02:56:43.078]    </block>
[02:56:43.078]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:56:43.079]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:56:43.079]        // =>  FALSE
[02:56:43.079]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:56:43.079]    </control>
[02:56:43.079]    <control if="continueId == 4" while="" timeout="0" info="">
[02:56:43.079]      // if-block "continueId == 4"
[02:56:43.079]        // =>  FALSE
[02:56:43.079]      // skip if-block "continueId == 4"
[02:56:43.079]    </control>
[02:56:43.079]    <control if="!isProduction" while="" timeout="0" info="">
[02:56:43.079]      // if-block "!isProduction"
[02:56:43.079]        // =>  FALSE
[02:56:43.080]      // skip if-block "!isProduction"
[02:56:43.080]    </control>
[02:56:43.080]  </sequence>
[02:56:43.080]  
[02:57:27.045]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:57:27.045]  
[02:57:27.053]  <debugvars>
[02:57:27.053]    // Pre-defined
[02:57:27.053]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:57:27.053]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:57:27.053]    __dp=0x00000000
[02:57:27.053]    __ap=0x00000000
[02:57:27.053]    __traceout=0x00000000      (Trace Disabled)
[02:57:27.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:57:27.053]    __FlashAddr=0x00000000
[02:57:27.054]    __FlashLen=0x00000000
[02:57:27.054]    __FlashArg=0x00000000
[02:57:27.054]    __FlashOp=0x00000000
[02:57:27.054]    __Result=0x00000000
[02:57:27.054]  </debugvars>
[02:57:27.054]  
[02:57:27.054]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:57:27.054]    <block atomic="false" info="">
[02:57:27.054]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:57:27.054]        // -> [isSWJ <= 0x00000001]
[02:57:27.054]      __var hasDormant = __protocol & 0x00020000;
[02:57:27.055]        // -> [hasDormant <= 0x00000000]
[02:57:27.055]      __var protType   = __protocol & 0x0000FFFF;
[02:57:27.055]        // -> [protType <= 0x00000002]
[02:57:27.055]    </block>
[02:57:27.055]    <control if="protType == 1" while="" timeout="0" info="">
[02:57:27.055]      // if-block "protType == 1"
[02:57:27.055]        // =>  FALSE
[02:57:27.055]      // skip if-block "protType == 1"
[02:57:27.055]    </control>
[02:57:27.056]    <control if="protType == 2" while="" timeout="0" info="">
[02:57:27.056]      // if-block "protType == 2"
[02:57:27.056]        // =>  TRUE
[02:57:27.056]      <control if="isSWJ" while="" timeout="0" info="">
[02:57:27.056]        // if-block "isSWJ"
[02:57:27.056]          // =>  TRUE
[02:57:27.056]        <control if="hasDormant" while="" timeout="0" info="">
[02:57:27.056]          // if-block "hasDormant"
[02:57:27.057]            // =>  FALSE
[02:57:27.057]          // skip if-block "hasDormant"
[02:57:27.057]        </control>
[02:57:27.057]        <control if="!hasDormant" while="" timeout="0" info="">
[02:57:27.057]          // if-block "!hasDormant"
[02:57:27.057]            // =>  TRUE
[02:57:27.057]          <block atomic="false" info="">
[02:57:27.057]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:57:27.059]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:57:27.059]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:57:27.060]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:57:27.060]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:57:27.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:57:27.062]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:57:27.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:57:27.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:57:27.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:57:27.065]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:57:27.066]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:57:27.066]          </block>
[02:57:27.066]          // end if-block "!hasDormant"
[02:57:27.066]        </control>
[02:57:27.066]        // end if-block "isSWJ"
[02:57:27.066]      </control>
[02:57:27.067]      <control if="!isSWJ" while="" timeout="0" info="">
[02:57:27.067]        // if-block "!isSWJ"
[02:57:27.067]          // =>  FALSE
[02:57:27.067]        // skip if-block "!isSWJ"
[02:57:27.067]      </control>
[02:57:27.067]      <block atomic="false" info="">
[02:57:27.067]        ReadDP(0x0);
[02:57:27.069]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:57:27.069]      </block>
[02:57:27.069]      // end if-block "protType == 2"
[02:57:27.070]    </control>
[02:57:27.070]  </sequence>
[02:57:27.070]  
[02:57:27.072]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:57:27.072]  
[02:57:27.072]  <debugvars>
[02:57:27.072]    // Pre-defined
[02:57:27.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:57:27.072]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:57:27.072]    __dp=0x00000000
[02:57:27.072]    __ap=0x00000000
[02:57:27.072]    __traceout=0x00000000      (Trace Disabled)
[02:57:27.072]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:57:27.073]    __FlashAddr=0x00000000
[02:57:27.073]    __FlashLen=0x00000000
[02:57:27.073]    __FlashArg=0x00000000
[02:57:27.073]    __FlashOp=0x00000000
[02:57:27.073]    __Result=0x00000000
[02:57:27.073]  </debugvars>
[02:57:27.073]  
[02:57:27.073]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:57:27.073]    <block atomic="false" info="">
[02:57:27.074]      __var SW_DP_ABORT       = 0x0;
[02:57:27.074]        // -> [SW_DP_ABORT <= 0x00000000]
[02:57:27.074]      __var DP_CTRL_STAT      = 0x4;
[02:57:27.074]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:57:27.074]      __var DP_SELECT         = 0x8;
[02:57:27.074]        // -> [DP_SELECT <= 0x00000008]
[02:57:27.074]      __var powered_down      = 0;
[02:57:27.074]        // -> [powered_down <= 0x00000000]
[02:57:27.074]      WriteDP(DP_SELECT, 0x00000000);
[02:57:27.077]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:57:27.077]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:57:27.079]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:57:27.079]        // -> [powered_down <= 0x00000001]
[02:57:27.079]    </block>
[02:57:27.079]    <control if="powered_down" while="" timeout="0" info="">
[02:57:27.080]      // if-block "powered_down"
[02:57:27.080]        // =>  TRUE
[02:57:27.080]      <block atomic="false" info="">
[02:57:27.080]        Message(0, "Debug/System power-up request sent");
[02:57:27.081]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:57:27.084]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:57:27.084]      </block>
[02:57:27.084]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:57:27.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:57:27.085]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:57:27.086]        // while-condition  =>  FALSE
[02:57:27.086]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:57:27.086]      </control>
[02:57:27.086]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:57:27.086]        // if-block "(__protocol & 0xFFFF) == 1"
[02:57:27.086]          // =>  FALSE
[02:57:27.086]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:57:27.086]      </control>
[02:57:27.086]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:57:27.087]        // if-block "(__protocol & 0xFFFF) == 2"
[02:57:27.087]          // =>  TRUE
[02:57:27.087]        <block atomic="false" info="">
[02:57:27.087]          Message(0, "executing SWD power up");
[02:57:27.088]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:57:27.091]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:57:27.091]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:57:27.093]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:57:27.093]        </block>
[02:57:27.093]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:57:27.093]      </control>
[02:57:27.093]      // end if-block "powered_down"
[02:57:27.093]    </control>
[02:57:27.093]    <block atomic="false" info="">
[02:57:27.093]      __var DEBUG_PORT_VAL    = 0;
[02:57:27.093]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:57:27.093]      __var ACCESS_POINT_VAL  = 0;
[02:57:27.094]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:57:27.094]      __ap = 1; 
[02:57:27.094]        // -> [__ap <= 0x00000001]
[02:57:27.094]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:57:27.097]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:57:27.097]      __ap = 4;
[02:57:27.097]        // -> [__ap <= 0x00000004]
[02:57:27.097]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:57:27.100]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:57:27.100]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:57:27.100]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:57:27.102]    </block>
[02:57:27.102]    <block atomic="false" info="">
[02:57:27.102]      __var nReset = 0x80;
[02:57:27.102]        // -> [nReset <= 0x00000080]
[02:57:27.102]      __var canReadPins = 0;
[02:57:27.102]        // -> [canReadPins <= 0x00000000]
[02:57:27.103]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:57:27.104]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:57:27.105]        // -> [canReadPins <= 0x00000001]
[02:57:27.105]    </block>
[02:57:27.105]    <control if="" while="1" timeout="200" info="">
[02:57:27.105]      // while "1"  (timeout="200")
[02:57:27.105]      // while-condition  =>  TRUE
[02:57:27.105]      // while "1"  (timeout="200")
[02:57:27.106]      // while-condition  =>  TRUE
[02:57:27.106]      // while "1"  (timeout="200")
[02:57:27.106]      // while-condition  =>  TRUE
[02:57:27.106]      // while "1"  (timeout="200")
[02:57:27.106]      // while-condition  =>  TRUE
[02:57:27.106]      // while "1"  (timeout="200")
[02:57:27.106]      // while-condition  =>  TRUE
[02:57:27.106]      // while "1"  (timeout="200")
[02:57:27.106]      // while-condition  =>  TRUE
[02:57:27.106]      // while "1"  (timeout="200")
[02:57:27.106]      // while-condition  =>  TRUE
[02:57:27.106]      // while "1"  (timeout="200")
[02:57:27.107]      // while-condition  =>  TRUE
[02:57:27.107]      // while "1"  (timeout="200")
[02:57:27.107]      // while-condition  =>  TRUE
[02:57:27.107]      // while "1"  (timeout="200")
[02:57:27.107]      // while-condition  =>  TRUE
[02:57:27.107]      // while "1"  (timeout="200")
[02:57:27.107]      // while-condition  =>  TRUE
[02:57:27.108]      // while "1"  (timeout="200")
[02:57:27.108]      // while-condition  =>  TRUE
[02:57:27.108]      // while "1"  (timeout="200")
[02:57:27.108]      // while-condition  =>  TRUE
[02:57:27.108]      // while "1"  (timeout="200")
[02:57:27.108]      // while-condition  =>  TRUE
[02:57:27.108]      // while "1"  (timeout="200")
[02:57:27.108]      // while-condition  =>  TRUE
[02:57:27.109]      // while "1"  (timeout="200")
[02:57:27.109]      // while-condition  =>  TRUE
[02:57:27.109]      // while "1"  (timeout="200")
[02:57:27.109]      // while-condition  =>  TRUE
[02:57:27.109]      // while "1"  (timeout="200")
[02:57:27.109]      // while-condition  =>  TRUE
[02:57:27.109]      // while "1"  (timeout="200")
[02:57:27.109]      // while-condition  =>  TRUE
[02:57:27.109]      // while "1"  (timeout="200")
[02:57:27.109]      // while-condition  =>  TRUE
[02:57:27.109]      // while "1"  (timeout="200")
[02:57:27.110]      // while-condition  =>  TRUE
[02:57:27.110]      // while "1"  (timeout="200")
[02:57:27.110]      // while-condition  =>  TRUE
[02:57:27.110]      // while "1"  (timeout="200")
[02:57:27.110]      // while-condition  =>  TRUE
[02:57:27.110]      // while "1"  (timeout="200")
[02:57:27.110]      // while-condition  =>  TRUE
[02:57:27.110]      // while "1"  (timeout="200")
[02:57:27.110]      // while-condition  =>  TRUE
[02:57:27.110]      // while "1"  (timeout="200")
[02:57:27.110]      // while-condition  =>  TRUE
[02:57:27.111]      // while "1"  (timeout="200")
[02:57:27.111]      // while-condition  =>  TRUE
[02:57:27.111]      // while "1"  (timeout="200")
[02:57:27.111]      // while-condition  =>  TRUE
[02:57:27.111]      // while "1"  (timeout="200")
[02:57:27.111]      // while-condition  =>  TRUE
[02:57:27.111]      // while "1"  (timeout="200")
[02:57:27.111]      // while-condition  =>  TRUE
[02:57:27.111]      // while "1"  (timeout="200")
[02:57:27.111]      // while-condition  =>  TRUE
[02:57:27.111]      // while "1"  (timeout="200")
[02:57:27.112]      // while-condition  =>  TRUE
[02:57:27.112]      // while "1"  (timeout="200")
[02:57:27.112]      // while-condition  =>  TRUE
[02:57:27.112]      // while "1"  (timeout="200")
[02:57:27.112]      // while-condition  =>  TRUE
[02:57:27.112]      // while "1"  (timeout="200")
[02:57:27.112]      // while-condition  =>  TRUE
[02:57:27.112]      // while "1"  (timeout="200")
[02:57:27.112]      // while-condition  =>  TRUE
[02:57:27.112]      // while "1"  (timeout="200")
[02:57:27.112]      // while-condition  =>  TRUE
[02:57:27.112]      // while "1"  (timeout="200")
[02:57:27.113]      // while-condition  =>  TRUE
[02:57:27.113]      // while "1"  (timeout="200")
[02:57:27.113]      // while  =>  TIMEOUT
[02:57:27.113]      // end while "1"
[02:57:27.113]    </control>
[02:57:27.113]    <control if="canReadPins" while="" timeout="0" info="">
[02:57:27.113]      // if-block "canReadPins"
[02:57:27.113]        // =>  TRUE
[02:57:27.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:57:27.114]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:57:27.115]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:57:27.115]        // while-condition  =>  FALSE
[02:57:27.115]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:57:27.116]      </control>
[02:57:27.116]      // end if-block "canReadPins"
[02:57:27.116]    </control>
[02:57:27.116]    <control if="!canReadPins" while="" timeout="0" info="">
[02:57:27.116]      // if-block "!canReadPins"
[02:57:27.116]        // =>  FALSE
[02:57:27.116]      // skip if-block "!canReadPins"
[02:57:27.116]    </control>
[02:57:27.116]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:57:27.116]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:57:27.116]        // =>  TRUE
[02:57:27.116]      <block atomic="false" info="">
[02:57:27.117]        WriteAP(0x00, 0x190008);
[02:57:27.118]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:57:27.118]        WriteAP(0xF0, 0x01);
[02:57:27.121]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:57:27.121]      </block>
[02:57:27.121]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:57:27.121]    </control>
[02:57:27.121]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:57:27.122]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:57:27.122]        // =>  FALSE
[02:57:27.122]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:57:27.122]    </control>
[02:57:27.122]    <block atomic="false" info="">
[02:57:27.122]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:57:27.125]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:57:27.125]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:57:27.125]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:57:27.127]      __ap = 0; //lets make sure we reset the access point selection
[02:57:27.127]        // -> [__ap <= 0x00000000]
[02:57:27.127]    </block>
[02:57:27.127]  </sequence>
[02:57:27.127]  
[02:57:27.148]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:57:27.148]  
[02:57:27.148]  <debugvars>
[02:57:27.148]    // Pre-defined
[02:57:27.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:57:27.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:57:27.148]    __dp=0x00000000
[02:57:27.148]    __ap=0x00000000
[02:57:27.148]    __traceout=0x00000000      (Trace Disabled)
[02:57:27.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:57:27.149]    __FlashAddr=0x00000000
[02:57:27.149]    __FlashLen=0x00000000
[02:57:27.149]    __FlashArg=0x00000000
[02:57:27.149]    __FlashOp=0x00000000
[02:57:27.149]    __Result=0x00000000
[02:57:27.149]  </debugvars>
[02:57:27.149]  
[02:57:27.149]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:57:27.149]    <block atomic="false" info="">
[02:57:27.149]      __var deviceID = 0;
[02:57:27.149]        // -> [deviceID <= 0x00000000]
[02:57:27.150]      __var version = 0;
[02:57:27.150]        // -> [version <= 0x00000000]
[02:57:27.150]      __var partNum = 0;
[02:57:27.150]        // -> [partNum <= 0x00000000]
[02:57:27.150]      __var manuf = 0;
[02:57:27.150]        // -> [manuf <= 0x00000000]
[02:57:27.150]      __var isMSPM0G1X0X_G3X0X = 0;
[02:57:27.150]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:57:27.150]      __var isProduction = 0;
[02:57:27.151]        // -> [isProduction <= 0x00000000]
[02:57:27.151]      __var continueId = 0;
[02:57:27.151]        // -> [continueId <= 0x00000000]
[02:57:27.151]      deviceID =   Read32(0x41C40004);
[02:57:27.156]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:57:27.156]        // -> [deviceID <= 0x2BB8802F]
[02:57:27.157]      version = deviceID >> 28;
[02:57:27.157]        // -> [version <= 0x00000002]
[02:57:27.157]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:57:27.157]        // -> [partNum <= 0x0000BB88]
[02:57:27.157]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:57:27.157]        // -> [manuf <= 0x00000017]
[02:57:27.158]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:57:27.158]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:57:27.158]      isProduction = (version > 0);
[02:57:27.158]        // -> [isProduction <= 0x00000001]
[02:57:27.158]    </block>
[02:57:27.158]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:57:27.158]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:57:27.158]        // =>  FALSE
[02:57:27.158]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:57:27.158]    </control>
[02:57:27.158]    <control if="continueId == 4" while="" timeout="0" info="">
[02:57:27.158]      // if-block "continueId == 4"
[02:57:27.159]        // =>  FALSE
[02:57:27.159]      // skip if-block "continueId == 4"
[02:57:27.159]    </control>
[02:57:27.159]    <control if="!isProduction" while="" timeout="0" info="">
[02:57:27.159]      // if-block "!isProduction"
[02:57:27.159]        // =>  FALSE
[02:57:27.159]      // skip if-block "!isProduction"
[02:57:27.159]    </control>
[02:57:27.159]  </sequence>
[02:57:27.159]  
[02:58:37.314]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:58:37.314]  
[02:58:37.323]  <debugvars>
[02:58:37.323]    // Pre-defined
[02:58:37.323]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:58:37.323]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:58:37.323]    __dp=0x00000000
[02:58:37.323]    __ap=0x00000000
[02:58:37.324]    __traceout=0x00000000      (Trace Disabled)
[02:58:37.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:58:37.324]    __FlashAddr=0x00000000
[02:58:37.324]    __FlashLen=0x00000000
[02:58:37.324]    __FlashArg=0x00000000
[02:58:37.324]    __FlashOp=0x00000000
[02:58:37.324]    __Result=0x00000000
[02:58:37.324]  </debugvars>
[02:58:37.325]  
[02:58:37.325]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:58:37.325]    <block atomic="false" info="">
[02:58:37.325]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:58:37.325]        // -> [isSWJ <= 0x00000001]
[02:58:37.325]      __var hasDormant = __protocol & 0x00020000;
[02:58:37.326]        // -> [hasDormant <= 0x00000000]
[02:58:37.326]      __var protType   = __protocol & 0x0000FFFF;
[02:58:37.326]        // -> [protType <= 0x00000002]
[02:58:37.326]    </block>
[02:58:37.326]    <control if="protType == 1" while="" timeout="0" info="">
[02:58:37.326]      // if-block "protType == 1"
[02:58:37.327]        // =>  FALSE
[02:58:37.327]      // skip if-block "protType == 1"
[02:58:37.327]    </control>
[02:58:37.327]    <control if="protType == 2" while="" timeout="0" info="">
[02:58:37.327]      // if-block "protType == 2"
[02:58:37.327]        // =>  TRUE
[02:58:37.327]      <control if="isSWJ" while="" timeout="0" info="">
[02:58:37.327]        // if-block "isSWJ"
[02:58:37.327]          // =>  TRUE
[02:58:37.327]        <control if="hasDormant" while="" timeout="0" info="">
[02:58:37.327]          // if-block "hasDormant"
[02:58:37.328]            // =>  FALSE
[02:58:37.328]          // skip if-block "hasDormant"
[02:58:37.328]        </control>
[02:58:37.328]        <control if="!hasDormant" while="" timeout="0" info="">
[02:58:37.328]          // if-block "!hasDormant"
[02:58:37.328]            // =>  TRUE
[02:58:37.328]          <block atomic="false" info="">
[02:58:37.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:58:37.329]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:58:37.330]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:58:37.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:58:37.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:58:37.333]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:58:37.333]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:58:37.334]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:58:37.334]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:58:37.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:58:37.336]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:58:37.337]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:58:37.337]          </block>
[02:58:37.337]          // end if-block "!hasDormant"
[02:58:37.337]        </control>
[02:58:37.337]        // end if-block "isSWJ"
[02:58:37.338]      </control>
[02:58:37.338]      <control if="!isSWJ" while="" timeout="0" info="">
[02:58:37.338]        // if-block "!isSWJ"
[02:58:37.338]          // =>  FALSE
[02:58:37.338]        // skip if-block "!isSWJ"
[02:58:37.338]      </control>
[02:58:37.338]      <block atomic="false" info="">
[02:58:37.338]        ReadDP(0x0);
[02:58:37.339]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:58:37.339]      </block>
[02:58:37.339]      // end if-block "protType == 2"
[02:58:37.339]    </control>
[02:58:37.339]  </sequence>
[02:58:37.339]  
[02:58:37.342]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:58:37.342]  
[02:58:37.342]  <debugvars>
[02:58:37.343]    // Pre-defined
[02:58:37.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:58:37.343]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:58:37.343]    __dp=0x00000000
[02:58:37.343]    __ap=0x00000000
[02:58:37.343]    __traceout=0x00000000      (Trace Disabled)
[02:58:37.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:58:37.344]    __FlashAddr=0x00000000
[02:58:37.344]    __FlashLen=0x00000000
[02:58:37.344]    __FlashArg=0x00000000
[02:58:37.344]    __FlashOp=0x00000000
[02:58:37.344]    __Result=0x00000000
[02:58:37.344]  </debugvars>
[02:58:37.344]  
[02:58:37.344]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:58:37.344]    <block atomic="false" info="">
[02:58:37.344]      __var SW_DP_ABORT       = 0x0;
[02:58:37.345]        // -> [SW_DP_ABORT <= 0x00000000]
[02:58:37.345]      __var DP_CTRL_STAT      = 0x4;
[02:58:37.345]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:58:37.345]      __var DP_SELECT         = 0x8;
[02:58:37.346]        // -> [DP_SELECT <= 0x00000008]
[02:58:37.346]      __var powered_down      = 0;
[02:58:37.346]        // -> [powered_down <= 0x00000000]
[02:58:37.346]      WriteDP(DP_SELECT, 0x00000000);
[02:58:37.347]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:58:37.348]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:58:37.349]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:58:37.349]        // -> [powered_down <= 0x00000001]
[02:58:37.349]    </block>
[02:58:37.349]    <control if="powered_down" while="" timeout="0" info="">
[02:58:37.349]      // if-block "powered_down"
[02:58:37.349]        // =>  TRUE
[02:58:37.349]      <block atomic="false" info="">
[02:58:37.350]        Message(0, "Debug/System power-up request sent");
[02:58:37.353]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:58:37.354]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:58:37.354]      </block>
[02:58:37.355]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:58:37.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:58:37.356]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:58:37.356]        // while-condition  =>  FALSE
[02:58:37.356]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:58:37.356]      </control>
[02:58:37.356]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:58:37.356]        // if-block "(__protocol & 0xFFFF) == 1"
[02:58:37.356]          // =>  FALSE
[02:58:37.357]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:58:37.357]      </control>
[02:58:37.357]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:58:37.357]        // if-block "(__protocol & 0xFFFF) == 2"
[02:58:37.357]          // =>  TRUE
[02:58:37.357]        <block atomic="false" info="">
[02:58:37.357]          Message(0, "executing SWD power up");
[02:58:37.360]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:58:37.360]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:58:37.360]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:58:37.363]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:58:37.363]        </block>
[02:58:37.363]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:58:37.363]      </control>
[02:58:37.363]      // end if-block "powered_down"
[02:58:37.364]    </control>
[02:58:37.364]    <block atomic="false" info="">
[02:58:37.364]      __var DEBUG_PORT_VAL    = 0;
[02:58:37.364]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:58:37.364]      __var ACCESS_POINT_VAL  = 0;
[02:58:37.364]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:58:37.364]      __ap = 1; 
[02:58:37.364]        // -> [__ap <= 0x00000001]
[02:58:37.364]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:58:37.368]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:58:37.368]      __ap = 4;
[02:58:37.368]        // -> [__ap <= 0x00000004]
[02:58:37.369]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:58:37.372]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:58:37.372]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:58:37.372]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:58:37.373]    </block>
[02:58:37.374]    <block atomic="false" info="">
[02:58:37.374]      __var nReset = 0x80;
[02:58:37.374]        // -> [nReset <= 0x00000080]
[02:58:37.374]      __var canReadPins = 0;
[02:58:37.374]        // -> [canReadPins <= 0x00000000]
[02:58:37.374]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:58:37.375]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:58:37.375]        // -> [canReadPins <= 0x00000001]
[02:58:37.375]    </block>
[02:58:37.375]    <control if="" while="1" timeout="200" info="">
[02:58:37.376]      // while "1"  (timeout="200")
[02:58:37.376]      // while-condition  =>  TRUE
[02:58:37.376]      // while "1"  (timeout="200")
[02:58:37.376]      // while-condition  =>  TRUE
[02:58:37.376]      // while "1"  (timeout="200")
[02:58:37.376]      // while-condition  =>  TRUE
[02:58:37.376]      // while "1"  (timeout="200")
[02:58:37.376]      // while-condition  =>  TRUE
[02:58:37.376]      // while "1"  (timeout="200")
[02:58:37.376]      // while-condition  =>  TRUE
[02:58:37.376]      // while "1"  (timeout="200")
[02:58:37.377]      // while-condition  =>  TRUE
[02:58:37.377]      // while "1"  (timeout="200")
[02:58:37.377]      // while-condition  =>  TRUE
[02:58:37.377]      // while "1"  (timeout="200")
[02:58:37.377]      // while-condition  =>  TRUE
[02:58:37.378]      // while "1"  (timeout="200")
[02:58:37.378]      // while  =>  TIMEOUT
[02:58:37.378]      // end while "1"
[02:58:37.378]    </control>
[02:58:37.378]    <control if="canReadPins" while="" timeout="0" info="">
[02:58:37.378]      // if-block "canReadPins"
[02:58:37.379]        // =>  TRUE
[02:58:37.379]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:58:37.379]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:58:37.381]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:58:37.381]        // while-condition  =>  FALSE
[02:58:37.381]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:58:37.381]      </control>
[02:58:37.381]      // end if-block "canReadPins"
[02:58:37.381]    </control>
[02:58:37.381]    <control if="!canReadPins" while="" timeout="0" info="">
[02:58:37.381]      // if-block "!canReadPins"
[02:58:37.381]        // =>  FALSE
[02:58:37.382]      // skip if-block "!canReadPins"
[02:58:37.382]    </control>
[02:58:37.382]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:58:37.382]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:58:37.382]        // =>  TRUE
[02:58:37.382]      <block atomic="false" info="">
[02:58:37.382]        WriteAP(0x00, 0x190008);
[02:58:37.384]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:58:37.384]        WriteAP(0xF0, 0x01);
[02:58:37.387]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:58:37.388]      </block>
[02:58:37.388]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:58:37.388]    </control>
[02:58:37.388]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:58:37.388]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:58:37.388]        // =>  FALSE
[02:58:37.388]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:58:37.388]    </control>
[02:58:37.388]    <block atomic="false" info="">
[02:58:37.389]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:58:37.392]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:58:37.392]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:58:37.393]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:58:37.394]      __ap = 0; //lets make sure we reset the access point selection
[02:58:37.394]        // -> [__ap <= 0x00000000]
[02:58:37.395]    </block>
[02:58:37.395]  </sequence>
[02:58:37.395]  
[02:58:37.415]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:58:37.415]  
[02:58:37.415]  <debugvars>
[02:58:37.415]    // Pre-defined
[02:58:37.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:58:37.415]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:58:37.415]    __dp=0x00000000
[02:58:37.415]    __ap=0x00000000
[02:58:37.415]    __traceout=0x00000000      (Trace Disabled)
[02:58:37.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:58:37.415]    __FlashAddr=0x00000000
[02:58:37.415]    __FlashLen=0x00000000
[02:58:37.415]    __FlashArg=0x00000000
[02:58:37.415]    __FlashOp=0x00000000
[02:58:37.415]    __Result=0x00000000
[02:58:37.415]  </debugvars>
[02:58:37.416]  
[02:58:37.416]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:58:37.416]    <block atomic="false" info="">
[02:58:37.416]      __var deviceID = 0;
[02:58:37.416]        // -> [deviceID <= 0x00000000]
[02:58:37.416]      __var version = 0;
[02:58:37.416]        // -> [version <= 0x00000000]
[02:58:37.416]      __var partNum = 0;
[02:58:37.416]        // -> [partNum <= 0x00000000]
[02:58:37.416]      __var manuf = 0;
[02:58:37.416]        // -> [manuf <= 0x00000000]
[02:58:37.417]      __var isMSPM0G1X0X_G3X0X = 0;
[02:58:37.417]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:58:37.417]      __var isProduction = 0;
[02:58:37.417]        // -> [isProduction <= 0x00000000]
[02:58:37.417]      __var continueId = 0;
[02:58:37.417]        // -> [continueId <= 0x00000000]
[02:58:37.417]      deviceID =   Read32(0x41C40004);
[02:58:37.422]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:58:37.422]        // -> [deviceID <= 0x2BB8802F]
[02:58:37.422]      version = deviceID >> 28;
[02:58:37.422]        // -> [version <= 0x00000002]
[02:58:37.422]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:58:37.422]        // -> [partNum <= 0x0000BB88]
[02:58:37.422]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:58:37.422]        // -> [manuf <= 0x00000017]
[02:58:37.422]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:58:37.424]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:58:37.424]      isProduction = (version > 0);
[02:58:37.424]        // -> [isProduction <= 0x00000001]
[02:58:37.424]    </block>
[02:58:37.424]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:58:37.424]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:58:37.424]        // =>  FALSE
[02:58:37.424]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:58:37.424]    </control>
[02:58:37.424]    <control if="continueId == 4" while="" timeout="0" info="">
[02:58:37.424]      // if-block "continueId == 4"
[02:58:37.424]        // =>  FALSE
[02:58:37.424]      // skip if-block "continueId == 4"
[02:58:37.425]    </control>
[02:58:37.425]    <control if="!isProduction" while="" timeout="0" info="">
[02:58:37.425]      // if-block "!isProduction"
[02:58:37.425]        // =>  FALSE
[02:58:37.425]      // skip if-block "!isProduction"
[02:58:37.425]    </control>
[02:58:37.425]  </sequence>
[02:58:37.425]  
[02:59:53.446]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:59:53.446]  
[02:59:53.446]  <debugvars>
[02:59:53.447]    // Pre-defined
[02:59:53.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:53.447]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:59:53.447]    __dp=0x00000000
[02:59:53.447]    __ap=0x00000000
[02:59:53.447]    __traceout=0x00000000      (Trace Disabled)
[02:59:53.447]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:53.447]    __FlashAddr=0x00000000
[02:59:53.447]    __FlashLen=0x00000000
[02:59:53.447]    __FlashArg=0x00000000
[02:59:53.448]    __FlashOp=0x00000000
[02:59:53.448]    __Result=0x00000000
[02:59:53.448]  </debugvars>
[02:59:53.448]  
[02:59:53.448]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:59:53.448]    <block atomic="false" info="">
[02:59:53.448]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:59:53.448]        // -> [isSWJ <= 0x00000001]
[02:59:53.449]      __var hasDormant = __protocol & 0x00020000;
[02:59:53.449]        // -> [hasDormant <= 0x00000000]
[02:59:53.449]      __var protType   = __protocol & 0x0000FFFF;
[02:59:53.449]        // -> [protType <= 0x00000002]
[02:59:53.449]    </block>
[02:59:53.449]    <control if="protType == 1" while="" timeout="0" info="">
[02:59:53.449]      // if-block "protType == 1"
[02:59:53.449]        // =>  FALSE
[02:59:53.449]      // skip if-block "protType == 1"
[02:59:53.449]    </control>
[02:59:53.449]    <control if="protType == 2" while="" timeout="0" info="">
[02:59:53.450]      // if-block "protType == 2"
[02:59:53.450]        // =>  TRUE
[02:59:53.450]      <control if="isSWJ" while="" timeout="0" info="">
[02:59:53.450]        // if-block "isSWJ"
[02:59:53.450]          // =>  TRUE
[02:59:53.451]        <control if="hasDormant" while="" timeout="0" info="">
[02:59:53.451]          // if-block "hasDormant"
[02:59:53.451]            // =>  FALSE
[02:59:53.451]          // skip if-block "hasDormant"
[02:59:53.451]        </control>
[02:59:53.451]        <control if="!hasDormant" while="" timeout="0" info="">
[02:59:53.451]          // if-block "!hasDormant"
[02:59:53.452]            // =>  TRUE
[02:59:53.452]          <block atomic="false" info="">
[02:59:53.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:59:53.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:59:53.453]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:59:53.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:59:53.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:59:53.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:59:53.456]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:59:53.458]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:59:53.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:59:53.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:59:53.459]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:59:53.461]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:59:53.461]          </block>
[02:59:53.461]          // end if-block "!hasDormant"
[02:59:53.461]        </control>
[02:59:53.461]        // end if-block "isSWJ"
[02:59:53.461]      </control>
[02:59:53.461]      <control if="!isSWJ" while="" timeout="0" info="">
[02:59:53.461]        // if-block "!isSWJ"
[02:59:53.462]          // =>  FALSE
[02:59:53.462]        // skip if-block "!isSWJ"
[02:59:53.462]      </control>
[02:59:53.462]      <block atomic="false" info="">
[02:59:53.462]        ReadDP(0x0);
[02:59:53.464]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:59:53.465]      </block>
[02:59:53.465]      // end if-block "protType == 2"
[02:59:53.465]    </control>
[02:59:53.465]  </sequence>
[02:59:53.465]  
[02:59:53.468]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:59:53.468]  
[02:59:53.468]  <debugvars>
[02:59:53.468]    // Pre-defined
[02:59:53.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:53.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:59:53.469]    __dp=0x00000000
[02:59:53.469]    __ap=0x00000000
[02:59:53.469]    __traceout=0x00000000      (Trace Disabled)
[02:59:53.470]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:53.470]    __FlashAddr=0x00000000
[02:59:53.470]    __FlashLen=0x00000000
[02:59:53.470]    __FlashArg=0x00000000
[02:59:53.470]    __FlashOp=0x00000000
[02:59:53.470]    __Result=0x00000000
[02:59:53.470]  </debugvars>
[02:59:53.470]  
[02:59:53.470]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:59:53.470]    <block atomic="false" info="">
[02:59:53.471]      __var SW_DP_ABORT       = 0x0;
[02:59:53.471]        // -> [SW_DP_ABORT <= 0x00000000]
[02:59:53.471]      __var DP_CTRL_STAT      = 0x4;
[02:59:53.471]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:59:53.471]      __var DP_SELECT         = 0x8;
[02:59:53.471]        // -> [DP_SELECT <= 0x00000008]
[02:59:53.471]      __var powered_down      = 0;
[02:59:53.472]        // -> [powered_down <= 0x00000000]
[02:59:53.472]      WriteDP(DP_SELECT, 0x00000000);
[02:59:53.473]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:59:53.474]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:59:53.476]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:59:53.476]        // -> [powered_down <= 0x00000001]
[02:59:53.476]    </block>
[02:59:53.476]    <control if="powered_down" while="" timeout="0" info="">
[02:59:53.477]      // if-block "powered_down"
[02:59:53.477]        // =>  TRUE
[02:59:53.477]      <block atomic="false" info="">
[02:59:53.477]        Message(0, "Debug/System power-up request sent");
[02:59:53.479]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:59:53.480]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:59:53.480]      </block>
[02:59:53.480]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:59:53.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:59:53.482]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:59:53.482]        // while-condition  =>  FALSE
[02:59:53.483]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:59:53.483]      </control>
[02:59:53.483]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:59:53.483]        // if-block "(__protocol & 0xFFFF) == 1"
[02:59:53.483]          // =>  FALSE
[02:59:53.483]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:59:53.483]      </control>
[02:59:53.483]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:59:53.484]        // if-block "(__protocol & 0xFFFF) == 2"
[02:59:53.484]          // =>  TRUE
[02:59:53.484]        <block atomic="false" info="">
[02:59:53.484]          Message(0, "executing SWD power up");
[02:59:53.486]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:59:53.488]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:59:53.489]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:59:53.490]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:59:53.490]        </block>
[02:59:53.491]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:59:53.491]      </control>
[02:59:53.491]      // end if-block "powered_down"
[02:59:53.491]    </control>
[02:59:53.491]    <block atomic="false" info="">
[02:59:53.491]      __var DEBUG_PORT_VAL    = 0;
[02:59:53.491]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:59:53.491]      __var ACCESS_POINT_VAL  = 0;
[02:59:53.491]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:59:53.491]      __ap = 1; 
[02:59:53.491]        // -> [__ap <= 0x00000001]
[02:59:53.492]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:59:53.494]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:59:53.494]      __ap = 4;
[02:59:53.494]        // -> [__ap <= 0x00000004]
[02:59:53.494]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:59:53.497]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:59:53.497]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:59:53.497]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:59:53.500]    </block>
[02:59:53.500]    <block atomic="false" info="">
[02:59:53.500]      __var nReset = 0x80;
[02:59:53.500]        // -> [nReset <= 0x00000080]
[02:59:53.500]      __var canReadPins = 0;
[02:59:53.501]        // -> [canReadPins <= 0x00000000]
[02:59:53.501]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:59:53.502]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:59:53.502]        // -> [canReadPins <= 0x00000001]
[02:59:53.502]    </block>
[02:59:53.502]    <control if="" while="1" timeout="200" info="">
[02:59:53.502]      // while "1"  (timeout="200")
[02:59:53.502]      // while-condition  =>  TRUE
[02:59:53.502]      // while "1"  (timeout="200")
[02:59:53.503]      // while-condition  =>  TRUE
[02:59:53.503]      // while "1"  (timeout="200")
[02:59:53.503]      // while-condition  =>  TRUE
[02:59:53.503]      // while "1"  (timeout="200")
[02:59:53.503]      // while-condition  =>  TRUE
[02:59:53.503]      // while "1"  (timeout="200")
[02:59:53.504]      // while-condition  =>  TRUE
[02:59:53.504]      // while "1"  (timeout="200")
[02:59:53.504]      // while-condition  =>  TRUE
[02:59:53.504]      // while "1"  (timeout="200")
[02:59:53.504]      // while-condition  =>  TRUE
[02:59:53.504]      // while "1"  (timeout="200")
[02:59:53.504]      // while-condition  =>  TRUE
[02:59:53.505]      // while "1"  (timeout="200")
[02:59:53.505]      // while-condition  =>  TRUE
[02:59:53.505]      // while "1"  (timeout="200")
[02:59:53.505]      // while-condition  =>  TRUE
[02:59:53.505]      // while "1"  (timeout="200")
[02:59:53.505]      // while-condition  =>  TRUE
[02:59:53.505]      // while "1"  (timeout="200")
[02:59:53.505]      // while-condition  =>  TRUE
[02:59:53.506]      // while "1"  (timeout="200")
[02:59:53.506]      // while-condition  =>  TRUE
[02:59:53.507]      // while "1"  (timeout="200")
[02:59:53.507]      // while-condition  =>  TRUE
[02:59:53.507]      // while "1"  (timeout="200")
[02:59:53.507]      // while-condition  =>  TRUE
[02:59:53.507]      // while "1"  (timeout="200")
[02:59:53.507]      // while-condition  =>  TRUE
[02:59:53.507]      // while "1"  (timeout="200")
[02:59:53.507]      // while-condition  =>  TRUE
[02:59:53.507]      // while "1"  (timeout="200")
[02:59:53.507]      // while-condition  =>  TRUE
[02:59:53.508]      // while "1"  (timeout="200")
[02:59:53.508]      // while-condition  =>  TRUE
[02:59:53.508]      // while "1"  (timeout="200")
[02:59:53.508]      // while-condition  =>  TRUE
[02:59:53.508]      // while "1"  (timeout="200")
[02:59:53.508]      // while-condition  =>  TRUE
[02:59:53.508]      // while "1"  (timeout="200")
[02:59:53.508]      // while-condition  =>  TRUE
[02:59:53.508]      // while "1"  (timeout="200")
[02:59:53.508]      // while-condition  =>  TRUE
[02:59:53.508]      // while "1"  (timeout="200")
[02:59:53.508]      // while-condition  =>  TRUE
[02:59:53.508]      // while "1"  (timeout="200")
[02:59:53.508]      // while-condition  =>  TRUE
[02:59:53.509]      // while "1"  (timeout="200")
[02:59:53.509]      // while-condition  =>  TRUE
[02:59:53.509]      // while "1"  (timeout="200")
[02:59:53.509]      // while-condition  =>  TRUE
[02:59:53.509]      // while "1"  (timeout="200")
[02:59:53.509]      // while-condition  =>  TRUE
[02:59:53.509]      // while "1"  (timeout="200")
[02:59:53.509]      // while-condition  =>  TRUE
[02:59:53.509]      // while "1"  (timeout="200")
[02:59:53.509]      // while-condition  =>  TRUE
[02:59:53.509]      // while "1"  (timeout="200")
[02:59:53.510]      // while-condition  =>  TRUE
[02:59:53.510]      // while "1"  (timeout="200")
[02:59:53.510]      // while-condition  =>  TRUE
[02:59:53.510]      // while "1"  (timeout="200")
[02:59:53.510]      // while-condition  =>  TRUE
[02:59:53.510]      // while "1"  (timeout="200")
[02:59:53.510]      // while-condition  =>  TRUE
[02:59:53.510]      // while "1"  (timeout="200")
[02:59:53.510]      // while-condition  =>  TRUE
[02:59:53.510]      // while "1"  (timeout="200")
[02:59:53.510]      // while-condition  =>  TRUE
[02:59:53.511]      // while "1"  (timeout="200")
[02:59:53.511]      // while-condition  =>  TRUE
[02:59:53.511]      // while "1"  (timeout="200")
[02:59:53.511]      // while-condition  =>  TRUE
[02:59:53.511]      // while "1"  (timeout="200")
[02:59:53.511]      // while-condition  =>  TRUE
[02:59:53.511]      // while "1"  (timeout="200")
[02:59:53.511]      // while-condition  =>  TRUE
[02:59:53.511]      // while "1"  (timeout="200")
[02:59:53.511]      // while-condition  =>  TRUE
[02:59:53.511]      // while "1"  (timeout="200")
[02:59:53.512]      // while-condition  =>  TRUE
[02:59:53.512]      // while "1"  (timeout="200")
[02:59:53.512]      // while-condition  =>  TRUE
[02:59:53.512]      // while "1"  (timeout="200")
[02:59:53.512]      // while-condition  =>  TRUE
[02:59:53.512]      // while "1"  (timeout="200")
[02:59:53.512]      // while-condition  =>  TRUE
[02:59:53.513]      // while "1"  (timeout="200")
[02:59:53.513]      // while-condition  =>  TRUE
[02:59:53.514]      // while "1"  (timeout="200")
[02:59:53.514]      // while-condition  =>  TRUE
[02:59:53.514]      // while "1"  (timeout="200")
[02:59:53.514]      // while-condition  =>  TRUE
[02:59:53.514]      // while "1"  (timeout="200")
[02:59:53.514]      // while-condition  =>  TRUE
[02:59:53.514]      // while "1"  (timeout="200")
[02:59:53.514]      // while-condition  =>  TRUE
[02:59:53.514]      // while "1"  (timeout="200")
[02:59:53.514]      // while-condition  =>  TRUE
[02:59:53.514]      // while "1"  (timeout="200")
[02:59:53.514]      // while-condition  =>  TRUE
[02:59:53.515]      // while "1"  (timeout="200")
[02:59:53.515]      // while-condition  =>  TRUE
[02:59:53.515]      // while "1"  (timeout="200")
[02:59:53.515]      // while-condition  =>  TRUE
[02:59:53.515]      // while "1"  (timeout="200")
[02:59:53.515]      // while-condition  =>  TRUE
[02:59:53.515]      // while "1"  (timeout="200")
[02:59:53.515]      // while-condition  =>  TRUE
[02:59:53.515]      // while "1"  (timeout="200")
[02:59:53.515]      // while-condition  =>  TRUE
[02:59:53.515]      // while "1"  (timeout="200")
[02:59:53.515]      // while-condition  =>  TRUE
[02:59:53.515]      // while "1"  (timeout="200")
[02:59:53.515]      // while-condition  =>  TRUE
[02:59:53.516]      // while "1"  (timeout="200")
[02:59:53.516]      // while-condition  =>  TRUE
[02:59:53.516]      // while "1"  (timeout="200")
[02:59:53.516]      // while-condition  =>  TRUE
[02:59:53.516]      // while "1"  (timeout="200")
[02:59:53.516]      // while-condition  =>  TRUE
[02:59:53.516]      // while "1"  (timeout="200")
[02:59:53.516]      // while-condition  =>  TRUE
[02:59:53.516]      // while "1"  (timeout="200")
[02:59:53.516]      // while-condition  =>  TRUE
[02:59:53.517]      // while "1"  (timeout="200")
[02:59:53.517]      // while-condition  =>  TRUE
[02:59:53.517]      // while "1"  (timeout="200")
[02:59:53.517]      // while-condition  =>  TRUE
[02:59:53.517]      // while "1"  (timeout="200")
[02:59:53.517]      // while-condition  =>  TRUE
[02:59:53.517]      // while "1"  (timeout="200")
[02:59:53.517]      // while-condition  =>  TRUE
[02:59:53.517]      // while "1"  (timeout="200")
[02:59:53.517]      // while-condition  =>  TRUE
[02:59:53.518]      // while "1"  (timeout="200")
[02:59:53.518]      // while  =>  TIMEOUT
[02:59:53.518]      // end while "1"
[02:59:53.518]    </control>
[02:59:53.518]    <control if="canReadPins" while="" timeout="0" info="">
[02:59:53.518]      // if-block "canReadPins"
[02:59:53.518]        // =>  TRUE
[02:59:53.518]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:59:53.518]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:59:53.520]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:59:53.521]        // while-condition  =>  FALSE
[02:59:53.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:59:53.521]      </control>
[02:59:53.521]      // end if-block "canReadPins"
[02:59:53.521]    </control>
[02:59:53.521]    <control if="!canReadPins" while="" timeout="0" info="">
[02:59:53.521]      // if-block "!canReadPins"
[02:59:53.521]        // =>  FALSE
[02:59:53.522]      // skip if-block "!canReadPins"
[02:59:53.522]    </control>
[02:59:53.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:59:53.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:59:53.522]        // =>  TRUE
[02:59:53.522]      <block atomic="false" info="">
[02:59:53.522]        WriteAP(0x00, 0x190008);
[02:59:53.524]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:59:53.524]        WriteAP(0xF0, 0x01);
[02:59:53.527]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:59:53.527]      </block>
[02:59:53.527]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:59:53.527]    </control>
[02:59:53.527]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:59:53.528]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:59:53.528]        // =>  FALSE
[02:59:53.528]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:59:53.528]    </control>
[02:59:53.528]    <block atomic="false" info="">
[02:59:53.528]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:59:53.531]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:59:53.531]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:59:53.531]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:59:53.533]      __ap = 0; //lets make sure we reset the access point selection
[02:59:53.533]        // -> [__ap <= 0x00000000]
[02:59:53.533]    </block>
[02:59:53.533]  </sequence>
[02:59:53.533]  
[02:59:53.554]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:59:53.554]  
[02:59:53.554]  <debugvars>
[02:59:53.554]    // Pre-defined
[02:59:53.554]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:53.555]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:59:53.555]    __dp=0x00000000
[02:59:53.555]    __ap=0x00000000
[02:59:53.555]    __traceout=0x00000000      (Trace Disabled)
[02:59:53.555]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:53.555]    __FlashAddr=0x00000000
[02:59:53.555]    __FlashLen=0x00000000
[02:59:53.555]    __FlashArg=0x00000000
[02:59:53.555]    __FlashOp=0x00000000
[02:59:53.555]    __Result=0x00000000
[02:59:53.555]  </debugvars>
[02:59:53.555]  
[02:59:53.556]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:59:53.556]    <block atomic="false" info="">
[02:59:53.556]      __var deviceID = 0;
[02:59:53.557]        // -> [deviceID <= 0x00000000]
[02:59:53.557]      __var version = 0;
[02:59:53.557]        // -> [version <= 0x00000000]
[02:59:53.557]      __var partNum = 0;
[02:59:53.557]        // -> [partNum <= 0x00000000]
[02:59:53.557]      __var manuf = 0;
[02:59:53.557]        // -> [manuf <= 0x00000000]
[02:59:53.557]      __var isMSPM0G1X0X_G3X0X = 0;
[02:59:53.557]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:59:53.557]      __var isProduction = 0;
[02:59:53.558]        // -> [isProduction <= 0x00000000]
[02:59:53.558]      __var continueId = 0;
[02:59:53.558]        // -> [continueId <= 0x00000000]
[02:59:53.558]      deviceID =   Read32(0x41C40004);
[02:59:53.562]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:59:53.562]        // -> [deviceID <= 0x2BB8802F]
[02:59:53.562]      version = deviceID >> 28;
[02:59:53.562]        // -> [version <= 0x00000002]
[02:59:53.562]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:59:53.562]        // -> [partNum <= 0x0000BB88]
[02:59:53.562]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:59:53.562]        // -> [manuf <= 0x00000017]
[02:59:53.563]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:59:53.563]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:59:53.563]      isProduction = (version > 0);
[02:59:53.563]        // -> [isProduction <= 0x00000001]
[02:59:53.563]    </block>
[02:59:53.563]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:59:53.563]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:59:53.563]        // =>  FALSE
[02:59:53.563]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:59:53.563]    </control>
[02:59:53.563]    <control if="continueId == 4" while="" timeout="0" info="">
[02:59:53.563]      // if-block "continueId == 4"
[02:59:53.565]        // =>  FALSE
[02:59:53.565]      // skip if-block "continueId == 4"
[02:59:53.565]    </control>
[02:59:53.565]    <control if="!isProduction" while="" timeout="0" info="">
[02:59:53.565]      // if-block "!isProduction"
[02:59:53.565]        // =>  FALSE
[02:59:53.565]      // skip if-block "!isProduction"
[02:59:53.565]    </control>
[02:59:53.565]  </sequence>
[02:59:53.565]  
[03:00:22.795]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:00:22.795]  
[03:00:22.803]  <debugvars>
[03:00:22.803]    // Pre-defined
[03:00:22.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:22.803]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:00:22.803]    __dp=0x00000000
[03:00:22.803]    __ap=0x00000000
[03:00:22.803]    __traceout=0x00000000      (Trace Disabled)
[03:00:22.803]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:22.803]    __FlashAddr=0x00000000
[03:00:22.803]    __FlashLen=0x00000000
[03:00:22.803]    __FlashArg=0x00000000
[03:00:22.804]    __FlashOp=0x00000000
[03:00:22.804]    __Result=0x00000000
[03:00:22.804]  </debugvars>
[03:00:22.804]  
[03:00:22.804]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:00:22.804]    <block atomic="false" info="">
[03:00:22.804]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:00:22.804]        // -> [isSWJ <= 0x00000001]
[03:00:22.804]      __var hasDormant = __protocol & 0x00020000;
[03:00:22.804]        // -> [hasDormant <= 0x00000000]
[03:00:22.805]      __var protType   = __protocol & 0x0000FFFF;
[03:00:22.805]        // -> [protType <= 0x00000002]
[03:00:22.805]    </block>
[03:00:22.805]    <control if="protType == 1" while="" timeout="0" info="">
[03:00:22.805]      // if-block "protType == 1"
[03:00:22.805]        // =>  FALSE
[03:00:22.805]      // skip if-block "protType == 1"
[03:00:22.805]    </control>
[03:00:22.806]    <control if="protType == 2" while="" timeout="0" info="">
[03:00:22.806]      // if-block "protType == 2"
[03:00:22.806]        // =>  TRUE
[03:00:22.806]      <control if="isSWJ" while="" timeout="0" info="">
[03:00:22.806]        // if-block "isSWJ"
[03:00:22.806]          // =>  TRUE
[03:00:22.806]        <control if="hasDormant" while="" timeout="0" info="">
[03:00:22.806]          // if-block "hasDormant"
[03:00:22.806]            // =>  FALSE
[03:00:22.806]          // skip if-block "hasDormant"
[03:00:22.807]        </control>
[03:00:22.807]        <control if="!hasDormant" while="" timeout="0" info="">
[03:00:22.807]          // if-block "!hasDormant"
[03:00:22.808]            // =>  TRUE
[03:00:22.808]          <block atomic="false" info="">
[03:00:22.808]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:00:22.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:00:22.810]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:00:22.812]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:00:22.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:00:22.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:00:22.814]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:00:22.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:00:22.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:00:22.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:00:22.820]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:00:22.822]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:00:22.822]          </block>
[03:00:22.822]          // end if-block "!hasDormant"
[03:00:22.822]        </control>
[03:00:22.822]        // end if-block "isSWJ"
[03:00:22.823]      </control>
[03:00:22.823]      <control if="!isSWJ" while="" timeout="0" info="">
[03:00:22.823]        // if-block "!isSWJ"
[03:00:22.823]          // =>  FALSE
[03:00:22.823]        // skip if-block "!isSWJ"
[03:00:22.823]      </control>
[03:00:22.824]      <block atomic="false" info="">
[03:00:22.824]        ReadDP(0x0);
[03:00:22.825]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:00:22.825]      </block>
[03:00:22.825]      // end if-block "protType == 2"
[03:00:22.825]    </control>
[03:00:22.825]  </sequence>
[03:00:22.825]  
[03:00:22.827]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:00:22.827]  
[03:00:22.827]  <debugvars>
[03:00:22.827]    // Pre-defined
[03:00:22.827]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:22.827]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:00:22.829]    __dp=0x00000000
[03:00:22.829]    __ap=0x00000000
[03:00:22.829]    __traceout=0x00000000      (Trace Disabled)
[03:00:22.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:22.829]    __FlashAddr=0x00000000
[03:00:22.829]    __FlashLen=0x00000000
[03:00:22.829]    __FlashArg=0x00000000
[03:00:22.829]    __FlashOp=0x00000000
[03:00:22.829]    __Result=0x00000000
[03:00:22.829]  </debugvars>
[03:00:22.829]  
[03:00:22.830]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:00:22.830]    <block atomic="false" info="">
[03:00:22.830]      __var SW_DP_ABORT       = 0x0;
[03:00:22.830]        // -> [SW_DP_ABORT <= 0x00000000]
[03:00:22.830]      __var DP_CTRL_STAT      = 0x4;
[03:00:22.830]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:00:22.830]      __var DP_SELECT         = 0x8;
[03:00:22.830]        // -> [DP_SELECT <= 0x00000008]
[03:00:22.830]      __var powered_down      = 0;
[03:00:22.830]        // -> [powered_down <= 0x00000000]
[03:00:22.830]      WriteDP(DP_SELECT, 0x00000000);
[03:00:22.833]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:00:22.833]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:00:22.834]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:00:22.834]        // -> [powered_down <= 0x00000001]
[03:00:22.834]    </block>
[03:00:22.834]    <control if="powered_down" while="" timeout="0" info="">
[03:00:22.834]      // if-block "powered_down"
[03:00:22.834]        // =>  TRUE
[03:00:22.834]      <block atomic="false" info="">
[03:00:22.835]        Message(0, "Debug/System power-up request sent");
[03:00:22.838]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:00:22.839]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:00:22.839]      </block>
[03:00:22.839]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:00:22.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:00:22.841]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:00:22.841]        // while-condition  =>  FALSE
[03:00:22.841]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:00:22.841]      </control>
[03:00:22.841]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:00:22.841]        // if-block "(__protocol & 0xFFFF) == 1"
[03:00:22.841]          // =>  FALSE
[03:00:22.841]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:00:22.841]      </control>
[03:00:22.843]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:00:22.843]        // if-block "(__protocol & 0xFFFF) == 2"
[03:00:22.843]          // =>  TRUE
[03:00:22.843]        <block atomic="false" info="">
[03:00:22.843]          Message(0, "executing SWD power up");
[03:00:22.844]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:00:22.845]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:00:22.846]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:00:22.848]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:00:22.848]        </block>
[03:00:22.848]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:00:22.848]      </control>
[03:00:22.848]      // end if-block "powered_down"
[03:00:22.848]    </control>
[03:00:22.848]    <block atomic="false" info="">
[03:00:22.848]      __var DEBUG_PORT_VAL    = 0;
[03:00:22.848]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:00:22.848]      __var ACCESS_POINT_VAL  = 0;
[03:00:22.848]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:00:22.848]      __ap = 1; 
[03:00:22.849]        // -> [__ap <= 0x00000001]
[03:00:22.849]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:00:22.852]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:00:22.852]      __ap = 4;
[03:00:22.852]        // -> [__ap <= 0x00000004]
[03:00:22.852]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:00:22.856]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:00:22.856]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:00:22.856]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:00:22.858]    </block>
[03:00:22.858]    <block atomic="false" info="">
[03:00:22.858]      __var nReset = 0x80;
[03:00:22.858]        // -> [nReset <= 0x00000080]
[03:00:22.858]      __var canReadPins = 0;
[03:00:22.858]        // -> [canReadPins <= 0x00000000]
[03:00:22.859]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:00:22.860]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:00:22.860]        // -> [canReadPins <= 0x00000001]
[03:00:22.860]    </block>
[03:00:22.860]    <control if="" while="1" timeout="200" info="">
[03:00:22.860]      // while "1"  (timeout="200")
[03:00:22.861]      // while-condition  =>  TRUE
[03:00:22.861]      // while "1"  (timeout="200")
[03:00:22.861]      // while-condition  =>  TRUE
[03:00:22.861]      // while "1"  (timeout="200")
[03:00:22.861]      // while-condition  =>  TRUE
[03:00:22.861]      // while "1"  (timeout="200")
[03:00:22.861]      // while-condition  =>  TRUE
[03:00:22.861]      // while "1"  (timeout="200")
[03:00:22.861]      // while-condition  =>  TRUE
[03:00:22.861]      // while "1"  (timeout="200")
[03:00:22.861]      // while-condition  =>  TRUE
[03:00:22.861]      // while "1"  (timeout="200")
[03:00:22.861]      // while-condition  =>  TRUE
[03:00:22.861]      // while "1"  (timeout="200")
[03:00:22.862]      // while-condition  =>  TRUE
[03:00:22.862]      // while "1"  (timeout="200")
[03:00:22.862]      // while  =>  TIMEOUT
[03:00:22.862]      // end while "1"
[03:00:22.862]    </control>
[03:00:22.862]    <control if="canReadPins" while="" timeout="0" info="">
[03:00:22.862]      // if-block "canReadPins"
[03:00:22.863]        // =>  TRUE
[03:00:22.863]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:00:22.863]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:00:22.865]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:00:22.865]        // while-condition  =>  FALSE
[03:00:22.866]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:00:22.866]      </control>
[03:00:22.866]      // end if-block "canReadPins"
[03:00:22.866]    </control>
[03:00:22.866]    <control if="!canReadPins" while="" timeout="0" info="">
[03:00:22.866]      // if-block "!canReadPins"
[03:00:22.866]        // =>  FALSE
[03:00:22.866]      // skip if-block "!canReadPins"
[03:00:22.866]    </control>
[03:00:22.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:00:22.867]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:00:22.867]        // =>  TRUE
[03:00:22.867]      <block atomic="false" info="">
[03:00:22.867]        WriteAP(0x00, 0x190008);
[03:00:22.868]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:00:22.868]        WriteAP(0xF0, 0x01);
[03:00:22.872]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:00:22.872]      </block>
[03:00:22.872]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:00:22.872]    </control>
[03:00:22.872]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:00:22.873]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:00:22.873]        // =>  FALSE
[03:00:22.873]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:00:22.873]    </control>
[03:00:22.873]    <block atomic="false" info="">
[03:00:22.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:00:22.878]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:00:22.878]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:00:22.878]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:00:22.880]      __ap = 0; //lets make sure we reset the access point selection
[03:00:22.880]        // -> [__ap <= 0x00000000]
[03:00:22.880]    </block>
[03:00:22.880]  </sequence>
[03:00:22.880]  
[03:00:22.898]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:00:22.898]  
[03:00:22.898]  <debugvars>
[03:00:22.899]    // Pre-defined
[03:00:22.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:22.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:00:22.899]    __dp=0x00000000
[03:00:22.899]    __ap=0x00000000
[03:00:22.899]    __traceout=0x00000000      (Trace Disabled)
[03:00:22.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:22.899]    __FlashAddr=0x00000000
[03:00:22.899]    __FlashLen=0x00000000
[03:00:22.899]    __FlashArg=0x00000000
[03:00:22.899]    __FlashOp=0x00000000
[03:00:22.900]    __Result=0x00000000
[03:00:22.900]  </debugvars>
[03:00:22.900]  
[03:00:22.900]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:00:22.900]    <block atomic="false" info="">
[03:00:22.900]      __var deviceID = 0;
[03:00:22.900]        // -> [deviceID <= 0x00000000]
[03:00:22.900]      __var version = 0;
[03:00:22.900]        // -> [version <= 0x00000000]
[03:00:22.901]      __var partNum = 0;
[03:00:22.901]        // -> [partNum <= 0x00000000]
[03:00:22.901]      __var manuf = 0;
[03:00:22.901]        // -> [manuf <= 0x00000000]
[03:00:22.901]      __var isMSPM0G1X0X_G3X0X = 0;
[03:00:22.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:00:22.901]      __var isProduction = 0;
[03:00:22.901]        // -> [isProduction <= 0x00000000]
[03:00:22.901]      __var continueId = 0;
[03:00:22.901]        // -> [continueId <= 0x00000000]
[03:00:22.901]      deviceID =   Read32(0x41C40004);
[03:00:22.906]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:00:22.906]        // -> [deviceID <= 0x2BB8802F]
[03:00:22.906]      version = deviceID >> 28;
[03:00:22.906]        // -> [version <= 0x00000002]
[03:00:22.907]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:00:22.907]        // -> [partNum <= 0x0000BB88]
[03:00:22.907]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:00:22.907]        // -> [manuf <= 0x00000017]
[03:00:22.907]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:00:22.907]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:00:22.907]      isProduction = (version > 0);
[03:00:22.907]        // -> [isProduction <= 0x00000001]
[03:00:22.908]    </block>
[03:00:22.908]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:00:22.908]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:00:22.908]        // =>  FALSE
[03:00:22.908]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:00:22.908]    </control>
[03:00:22.908]    <control if="continueId == 4" while="" timeout="0" info="">
[03:00:22.908]      // if-block "continueId == 4"
[03:00:22.908]        // =>  FALSE
[03:00:22.909]      // skip if-block "continueId == 4"
[03:00:22.909]    </control>
[03:00:22.909]    <control if="!isProduction" while="" timeout="0" info="">
[03:00:22.909]      // if-block "!isProduction"
[03:00:22.909]        // =>  FALSE
[03:00:22.909]      // skip if-block "!isProduction"
[03:00:22.909]    </control>
[03:00:22.909]  </sequence>
[03:00:22.909]  
[03:00:42.499]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:00:42.499]  
[03:00:42.508]  <debugvars>
[03:00:42.508]    // Pre-defined
[03:00:42.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:42.508]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:00:42.508]    __dp=0x00000000
[03:00:42.508]    __ap=0x00000000
[03:00:42.508]    __traceout=0x00000000      (Trace Disabled)
[03:00:42.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:42.508]    __FlashAddr=0x00000000
[03:00:42.508]    __FlashLen=0x00000000
[03:00:42.508]    __FlashArg=0x00000000
[03:00:42.508]    __FlashOp=0x00000000
[03:00:42.509]    __Result=0x00000000
[03:00:42.509]  </debugvars>
[03:00:42.509]  
[03:00:42.509]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:00:42.509]    <block atomic="false" info="">
[03:00:42.509]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:00:42.510]        // -> [isSWJ <= 0x00000001]
[03:00:42.510]      __var hasDormant = __protocol & 0x00020000;
[03:00:42.510]        // -> [hasDormant <= 0x00000000]
[03:00:42.510]      __var protType   = __protocol & 0x0000FFFF;
[03:00:42.510]        // -> [protType <= 0x00000002]
[03:00:42.510]    </block>
[03:00:42.510]    <control if="protType == 1" while="" timeout="0" info="">
[03:00:42.510]      // if-block "protType == 1"
[03:00:42.510]        // =>  FALSE
[03:00:42.510]      // skip if-block "protType == 1"
[03:00:42.510]    </control>
[03:00:42.511]    <control if="protType == 2" while="" timeout="0" info="">
[03:00:42.511]      // if-block "protType == 2"
[03:00:42.511]        // =>  TRUE
[03:00:42.511]      <control if="isSWJ" while="" timeout="0" info="">
[03:00:42.511]        // if-block "isSWJ"
[03:00:42.511]          // =>  TRUE
[03:00:42.511]        <control if="hasDormant" while="" timeout="0" info="">
[03:00:42.511]          // if-block "hasDormant"
[03:00:42.511]            // =>  FALSE
[03:00:42.511]          // skip if-block "hasDormant"
[03:00:42.511]        </control>
[03:00:42.511]        <control if="!hasDormant" while="" timeout="0" info="">
[03:00:42.512]          // if-block "!hasDormant"
[03:00:42.512]            // =>  TRUE
[03:00:42.512]          <block atomic="false" info="">
[03:00:42.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:00:42.513]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:00:42.513]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:00:42.514]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:00:42.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:00:42.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:00:42.516]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:00:42.517]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:00:42.517]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:00:42.519]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:00:42.519]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:00:42.521]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:00:42.521]          </block>
[03:00:42.521]          // end if-block "!hasDormant"
[03:00:42.521]        </control>
[03:00:42.521]        // end if-block "isSWJ"
[03:00:42.522]      </control>
[03:00:42.522]      <control if="!isSWJ" while="" timeout="0" info="">
[03:00:42.522]        // if-block "!isSWJ"
[03:00:42.522]          // =>  FALSE
[03:00:42.522]        // skip if-block "!isSWJ"
[03:00:42.522]      </control>
[03:00:42.522]      <block atomic="false" info="">
[03:00:42.522]        ReadDP(0x0);
[03:00:42.526]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:00:42.526]      </block>
[03:00:42.526]      // end if-block "protType == 2"
[03:00:42.527]    </control>
[03:00:42.527]  </sequence>
[03:00:42.527]  
[03:00:42.529]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:00:42.529]  
[03:00:42.529]  <debugvars>
[03:00:42.530]    // Pre-defined
[03:00:42.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:42.530]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:00:42.530]    __dp=0x00000000
[03:00:42.530]    __ap=0x00000000
[03:00:42.531]    __traceout=0x00000000      (Trace Disabled)
[03:00:42.531]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:42.531]    __FlashAddr=0x00000000
[03:00:42.531]    __FlashLen=0x00000000
[03:00:42.531]    __FlashArg=0x00000000
[03:00:42.531]    __FlashOp=0x00000000
[03:00:42.531]    __Result=0x00000000
[03:00:42.531]  </debugvars>
[03:00:42.531]  
[03:00:42.531]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:00:42.531]    <block atomic="false" info="">
[03:00:42.531]      __var SW_DP_ABORT       = 0x0;
[03:00:42.532]        // -> [SW_DP_ABORT <= 0x00000000]
[03:00:42.532]      __var DP_CTRL_STAT      = 0x4;
[03:00:42.532]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:00:42.532]      __var DP_SELECT         = 0x8;
[03:00:42.532]        // -> [DP_SELECT <= 0x00000008]
[03:00:42.532]      __var powered_down      = 0;
[03:00:42.532]        // -> [powered_down <= 0x00000000]
[03:00:42.532]      WriteDP(DP_SELECT, 0x00000000);
[03:00:42.537]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:00:42.537]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:00:42.538]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:00:42.539]        // -> [powered_down <= 0x00000001]
[03:00:42.539]    </block>
[03:00:42.539]    <control if="powered_down" while="" timeout="0" info="">
[03:00:42.539]      // if-block "powered_down"
[03:00:42.539]        // =>  TRUE
[03:00:42.539]      <block atomic="false" info="">
[03:00:42.539]        Message(0, "Debug/System power-up request sent");
[03:00:42.542]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:00:42.544]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:00:42.544]      </block>
[03:00:42.544]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:00:42.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:00:42.546]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:00:42.546]        // while-condition  =>  FALSE
[03:00:42.546]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:00:42.546]      </control>
[03:00:42.546]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:00:42.546]        // if-block "(__protocol & 0xFFFF) == 1"
[03:00:42.547]          // =>  FALSE
[03:00:42.547]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:00:42.548]      </control>
[03:00:42.548]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:00:42.548]        // if-block "(__protocol & 0xFFFF) == 2"
[03:00:42.548]          // =>  TRUE
[03:00:42.548]        <block atomic="false" info="">
[03:00:42.548]          Message(0, "executing SWD power up");
[03:00:42.550]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:00:42.551]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:00:42.551]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:00:42.552]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:00:42.552]        </block>
[03:00:42.553]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:00:42.553]      </control>
[03:00:42.553]      // end if-block "powered_down"
[03:00:42.553]    </control>
[03:00:42.553]    <block atomic="false" info="">
[03:00:42.553]      __var DEBUG_PORT_VAL    = 0;
[03:00:42.553]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:00:42.553]      __var ACCESS_POINT_VAL  = 0;
[03:00:42.553]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:00:42.553]      __ap = 1; 
[03:00:42.553]        // -> [__ap <= 0x00000001]
[03:00:42.553]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:00:42.557]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:00:42.557]      __ap = 4;
[03:00:42.557]        // -> [__ap <= 0x00000004]
[03:00:42.557]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:00:42.561]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:00:42.561]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:00:42.561]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:00:42.563]    </block>
[03:00:42.563]    <block atomic="false" info="">
[03:00:42.563]      __var nReset = 0x80;
[03:00:42.563]        // -> [nReset <= 0x00000080]
[03:00:42.563]      __var canReadPins = 0;
[03:00:42.563]        // -> [canReadPins <= 0x00000000]
[03:00:42.563]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:00:42.565]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:00:42.565]        // -> [canReadPins <= 0x00000001]
[03:00:42.565]    </block>
[03:00:42.565]    <control if="" while="1" timeout="200" info="">
[03:00:42.565]      // while "1"  (timeout="200")
[03:00:42.565]      // while-condition  =>  TRUE
[03:00:42.565]      // while "1"  (timeout="200")
[03:00:42.565]      // while-condition  =>  TRUE
[03:00:42.565]      // while "1"  (timeout="200")
[03:00:42.565]      // while-condition  =>  TRUE
[03:00:42.565]      // while "1"  (timeout="200")
[03:00:42.565]      // while-condition  =>  TRUE
[03:00:42.565]      // while "1"  (timeout="200")
[03:00:42.567]      // while-condition  =>  TRUE
[03:00:42.567]      // while "1"  (timeout="200")
[03:00:42.567]      // while-condition  =>  TRUE
[03:00:42.567]      // while "1"  (timeout="200")
[03:00:42.568]      // while-condition  =>  TRUE
[03:00:42.568]      // while "1"  (timeout="200")
[03:00:42.568]      // while-condition  =>  TRUE
[03:00:42.568]      // while "1"  (timeout="200")
[03:00:42.568]      // while-condition  =>  TRUE
[03:00:42.568]      // while "1"  (timeout="200")
[03:00:42.568]      // while-condition  =>  TRUE
[03:00:42.568]      // while "1"  (timeout="200")
[03:00:42.568]      // while-condition  =>  TRUE
[03:00:42.568]      // while "1"  (timeout="200")
[03:00:42.568]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.569]      // while "1"  (timeout="200")
[03:00:42.569]      // while-condition  =>  TRUE
[03:00:42.571]      // while "1"  (timeout="200")
[03:00:42.571]      // while-condition  =>  TRUE
[03:00:42.571]      // while "1"  (timeout="200")
[03:00:42.571]      // while-condition  =>  TRUE
[03:00:42.571]      // while "1"  (timeout="200")
[03:00:42.571]      // while-condition  =>  TRUE
[03:00:42.571]      // while "1"  (timeout="200")
[03:00:42.571]      // while-condition  =>  TRUE
[03:00:42.571]      // while "1"  (timeout="200")
[03:00:42.571]      // while-condition  =>  TRUE
[03:00:42.571]      // while "1"  (timeout="200")
[03:00:42.571]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.572]      // while "1"  (timeout="200")
[03:00:42.572]      // while-condition  =>  TRUE
[03:00:42.573]      // while "1"  (timeout="200")
[03:00:42.573]      // while-condition  =>  TRUE
[03:00:42.573]      // while "1"  (timeout="200")
[03:00:42.573]      // while-condition  =>  TRUE
[03:00:42.573]      // while "1"  (timeout="200")
[03:00:42.573]      // while-condition  =>  TRUE
[03:00:42.573]      // while "1"  (timeout="200")
[03:00:42.573]      // while-condition  =>  TRUE
[03:00:42.573]      // while "1"  (timeout="200")
[03:00:42.574]      // while-condition  =>  TRUE
[03:00:42.574]      // while "1"  (timeout="200")
[03:00:42.574]      // while-condition  =>  TRUE
[03:00:42.574]      // while "1"  (timeout="200")
[03:00:42.574]      // while-condition  =>  TRUE
[03:00:42.574]      // while "1"  (timeout="200")
[03:00:42.574]      // while-condition  =>  TRUE
[03:00:42.575]      // while "1"  (timeout="200")
[03:00:42.575]      // while-condition  =>  TRUE
[03:00:42.575]      // while "1"  (timeout="200")
[03:00:42.575]      // while-condition  =>  TRUE
[03:00:42.575]      // while "1"  (timeout="200")
[03:00:42.576]      // while-condition  =>  TRUE
[03:00:42.576]      // while "1"  (timeout="200")
[03:00:42.576]      // while-condition  =>  TRUE
[03:00:42.576]      // while "1"  (timeout="200")
[03:00:42.577]      // while-condition  =>  TRUE
[03:00:42.577]      // while "1"  (timeout="200")
[03:00:42.577]      // while-condition  =>  TRUE
[03:00:42.577]      // while "1"  (timeout="200")
[03:00:42.577]      // while-condition  =>  TRUE
[03:00:42.577]      // while "1"  (timeout="200")
[03:00:42.577]      // while-condition  =>  TRUE
[03:00:42.577]      // while "1"  (timeout="200")
[03:00:42.577]      // while-condition  =>  TRUE
[03:00:42.577]      // while "1"  (timeout="200")
[03:00:42.577]      // while-condition  =>  TRUE
[03:00:42.578]      // while "1"  (timeout="200")
[03:00:42.578]      // while-condition  =>  TRUE
[03:00:42.578]      // while "1"  (timeout="200")
[03:00:42.578]      // while-condition  =>  TRUE
[03:00:42.578]      // while "1"  (timeout="200")
[03:00:42.578]      // while-condition  =>  TRUE
[03:00:42.578]      // while "1"  (timeout="200")
[03:00:42.578]      // while-condition  =>  TRUE
[03:00:42.578]      // while "1"  (timeout="200")
[03:00:42.578]      // while-condition  =>  TRUE
[03:00:42.579]      // while "1"  (timeout="200")
[03:00:42.579]      // while-condition  =>  TRUE
[03:00:42.579]      // while "1"  (timeout="200")
[03:00:42.579]      // while-condition  =>  TRUE
[03:00:42.579]      // while "1"  (timeout="200")
[03:00:42.579]      // while-condition  =>  TRUE
[03:00:42.579]      // while "1"  (timeout="200")
[03:00:42.579]      // while-condition  =>  TRUE
[03:00:42.579]      // while "1"  (timeout="200")
[03:00:42.579]      // while-condition  =>  TRUE
[03:00:42.580]      // while "1"  (timeout="200")
[03:00:42.580]      // while-condition  =>  TRUE
[03:00:42.580]      // while "1"  (timeout="200")
[03:00:42.580]      // while-condition  =>  TRUE
[03:00:42.580]      // while "1"  (timeout="200")
[03:00:42.580]      // while-condition  =>  TRUE
[03:00:42.580]      // while "1"  (timeout="200")
[03:00:42.580]      // while-condition  =>  TRUE
[03:00:42.580]      // while "1"  (timeout="200")
[03:00:42.580]      // while-condition  =>  TRUE
[03:00:42.580]      // while "1"  (timeout="200")
[03:00:42.580]      // while-condition  =>  TRUE
[03:00:42.581]      // while "1"  (timeout="200")
[03:00:42.581]      // while  =>  TIMEOUT
[03:00:42.581]      // end while "1"
[03:00:42.581]    </control>
[03:00:42.581]    <control if="canReadPins" while="" timeout="0" info="">
[03:00:42.581]      // if-block "canReadPins"
[03:00:42.582]        // =>  TRUE
[03:00:42.582]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:00:42.582]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:00:42.583]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:00:42.583]        // while-condition  =>  FALSE
[03:00:42.583]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:00:42.583]      </control>
[03:00:42.583]      // end if-block "canReadPins"
[03:00:42.583]    </control>
[03:00:42.583]    <control if="!canReadPins" while="" timeout="0" info="">
[03:00:42.583]      // if-block "!canReadPins"
[03:00:42.583]        // =>  FALSE
[03:00:42.583]      // skip if-block "!canReadPins"
[03:00:42.583]    </control>
[03:00:42.584]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:00:42.584]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:00:42.584]        // =>  TRUE
[03:00:42.584]      <block atomic="false" info="">
[03:00:42.584]        WriteAP(0x00, 0x190008);
[03:00:42.586]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:00:42.586]        WriteAP(0xF0, 0x01);
[03:00:42.589]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:00:42.589]      </block>
[03:00:42.589]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:00:42.589]    </control>
[03:00:42.589]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:00:42.589]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:00:42.589]        // =>  FALSE
[03:00:42.590]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:00:42.590]    </control>
[03:00:42.590]    <block atomic="false" info="">
[03:00:42.590]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:00:42.593]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:00:42.593]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:00:42.593]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:00:42.595]      __ap = 0; //lets make sure we reset the access point selection
[03:00:42.595]        // -> [__ap <= 0x00000000]
[03:00:42.595]    </block>
[03:00:42.595]  </sequence>
[03:00:42.595]  
[03:00:42.615]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:00:42.615]  
[03:00:42.615]  <debugvars>
[03:00:42.615]    // Pre-defined
[03:00:42.615]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:42.616]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:00:42.616]    __dp=0x00000000
[03:00:42.616]    __ap=0x00000000
[03:00:42.616]    __traceout=0x00000000      (Trace Disabled)
[03:00:42.616]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:42.616]    __FlashAddr=0x00000000
[03:00:42.616]    __FlashLen=0x00000000
[03:00:42.616]    __FlashArg=0x00000000
[03:00:42.616]    __FlashOp=0x00000000
[03:00:42.617]    __Result=0x00000000
[03:00:42.617]  </debugvars>
[03:00:42.617]  
[03:00:42.617]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:00:42.617]    <block atomic="false" info="">
[03:00:42.617]      __var deviceID = 0;
[03:00:42.617]        // -> [deviceID <= 0x00000000]
[03:00:42.618]      __var version = 0;
[03:00:42.618]        // -> [version <= 0x00000000]
[03:00:42.618]      __var partNum = 0;
[03:00:42.618]        // -> [partNum <= 0x00000000]
[03:00:42.618]      __var manuf = 0;
[03:00:42.618]        // -> [manuf <= 0x00000000]
[03:00:42.618]      __var isMSPM0G1X0X_G3X0X = 0;
[03:00:42.618]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:00:42.618]      __var isProduction = 0;
[03:00:42.618]        // -> [isProduction <= 0x00000000]
[03:00:42.618]      __var continueId = 0;
[03:00:42.618]        // -> [continueId <= 0x00000000]
[03:00:42.619]      deviceID =   Read32(0x41C40004);
[03:00:42.623]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:00:42.623]        // -> [deviceID <= 0x2BB8802F]
[03:00:42.623]      version = deviceID >> 28;
[03:00:42.623]        // -> [version <= 0x00000002]
[03:00:42.623]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:00:42.623]        // -> [partNum <= 0x0000BB88]
[03:00:42.624]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:00:42.624]        // -> [manuf <= 0x00000017]
[03:00:42.624]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:00:42.624]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:00:42.624]      isProduction = (version > 0);
[03:00:42.624]        // -> [isProduction <= 0x00000001]
[03:00:42.624]    </block>
[03:00:42.624]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:00:42.624]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:00:42.625]        // =>  FALSE
[03:00:42.625]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:00:42.625]    </control>
[03:00:42.625]    <control if="continueId == 4" while="" timeout="0" info="">
[03:00:42.625]      // if-block "continueId == 4"
[03:00:42.625]        // =>  FALSE
[03:00:42.625]      // skip if-block "continueId == 4"
[03:00:42.626]    </control>
[03:00:42.626]    <control if="!isProduction" while="" timeout="0" info="">
[03:00:42.626]      // if-block "!isProduction"
[03:00:42.626]        // =>  FALSE
[03:00:42.626]      // skip if-block "!isProduction"
[03:00:42.626]    </control>
[03:00:42.626]  </sequence>
[03:00:42.626]  
[03:03:21.890]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:03:21.890]  
[03:03:21.899]  <debugvars>
[03:03:21.899]    // Pre-defined
[03:03:21.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:21.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:03:21.899]    __dp=0x00000000
[03:03:21.899]    __ap=0x00000000
[03:03:21.899]    __traceout=0x00000000      (Trace Disabled)
[03:03:21.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:21.899]    __FlashAddr=0x00000000
[03:03:21.900]    __FlashLen=0x00000000
[03:03:21.900]    __FlashArg=0x00000000
[03:03:21.900]    __FlashOp=0x00000000
[03:03:21.900]    __Result=0x00000000
[03:03:21.900]  </debugvars>
[03:03:21.900]  
[03:03:21.900]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:03:21.900]    <block atomic="false" info="">
[03:03:21.900]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:03:21.900]        // -> [isSWJ <= 0x00000001]
[03:03:21.900]      __var hasDormant = __protocol & 0x00020000;
[03:03:21.901]        // -> [hasDormant <= 0x00000000]
[03:03:21.901]      __var protType   = __protocol & 0x0000FFFF;
[03:03:21.901]        // -> [protType <= 0x00000002]
[03:03:21.901]    </block>
[03:03:21.901]    <control if="protType == 1" while="" timeout="0" info="">
[03:03:21.901]      // if-block "protType == 1"
[03:03:21.901]        // =>  FALSE
[03:03:21.901]      // skip if-block "protType == 1"
[03:03:21.901]    </control>
[03:03:21.901]    <control if="protType == 2" while="" timeout="0" info="">
[03:03:21.901]      // if-block "protType == 2"
[03:03:21.902]        // =>  TRUE
[03:03:21.902]      <control if="isSWJ" while="" timeout="0" info="">
[03:03:21.902]        // if-block "isSWJ"
[03:03:21.902]          // =>  TRUE
[03:03:21.902]        <control if="hasDormant" while="" timeout="0" info="">
[03:03:21.902]          // if-block "hasDormant"
[03:03:21.903]            // =>  FALSE
[03:03:21.903]          // skip if-block "hasDormant"
[03:03:21.903]        </control>
[03:03:21.903]        <control if="!hasDormant" while="" timeout="0" info="">
[03:03:21.903]          // if-block "!hasDormant"
[03:03:21.903]            // =>  TRUE
[03:03:21.903]          <block atomic="false" info="">
[03:03:21.903]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:03:21.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:21.905]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:03:21.906]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:03:21.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:03:21.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:21.908]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:03:21.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:03:21.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:03:21.911]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:21.911]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:03:21.912]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:03:21.912]          </block>
[03:03:21.912]          // end if-block "!hasDormant"
[03:03:21.912]        </control>
[03:03:21.912]        // end if-block "isSWJ"
[03:03:21.913]      </control>
[03:03:21.913]      <control if="!isSWJ" while="" timeout="0" info="">
[03:03:21.913]        // if-block "!isSWJ"
[03:03:21.913]          // =>  FALSE
[03:03:21.913]        // skip if-block "!isSWJ"
[03:03:21.913]      </control>
[03:03:21.913]      <block atomic="false" info="">
[03:03:21.913]        ReadDP(0x0);
[03:03:21.915]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:03:21.915]      </block>
[03:03:21.915]      // end if-block "protType == 2"
[03:03:21.915]    </control>
[03:03:21.915]  </sequence>
[03:03:21.915]  
[03:03:21.918]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:03:21.918]  
[03:03:21.918]  <debugvars>
[03:03:21.918]    // Pre-defined
[03:03:21.918]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:21.919]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:03:21.919]    __dp=0x00000000
[03:03:21.919]    __ap=0x00000000
[03:03:21.919]    __traceout=0x00000000      (Trace Disabled)
[03:03:21.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:21.919]    __FlashAddr=0x00000000
[03:03:21.919]    __FlashLen=0x00000000
[03:03:21.919]    __FlashArg=0x00000000
[03:03:21.919]    __FlashOp=0x00000000
[03:03:21.919]    __Result=0x00000000
[03:03:21.919]  </debugvars>
[03:03:21.919]  
[03:03:21.920]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:03:21.920]    <block atomic="false" info="">
[03:03:21.920]      __var SW_DP_ABORT       = 0x0;
[03:03:21.920]        // -> [SW_DP_ABORT <= 0x00000000]
[03:03:21.920]      __var DP_CTRL_STAT      = 0x4;
[03:03:21.920]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:03:21.920]      __var DP_SELECT         = 0x8;
[03:03:21.920]        // -> [DP_SELECT <= 0x00000008]
[03:03:21.920]      __var powered_down      = 0;
[03:03:21.920]        // -> [powered_down <= 0x00000000]
[03:03:21.921]      WriteDP(DP_SELECT, 0x00000000);
[03:03:21.922]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:03:21.922]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:03:21.924]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:03:21.924]        // -> [powered_down <= 0x00000001]
[03:03:21.924]    </block>
[03:03:21.924]    <control if="powered_down" while="" timeout="0" info="">
[03:03:21.924]      // if-block "powered_down"
[03:03:21.924]        // =>  TRUE
[03:03:21.924]      <block atomic="false" info="">
[03:03:21.925]        Message(0, "Debug/System power-up request sent");
[03:03:21.928]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:03:21.929]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:03:21.929]      </block>
[03:03:21.930]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:03:21.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:03:21.932]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:03:21.932]        // while-condition  =>  FALSE
[03:03:21.932]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:03:21.932]      </control>
[03:03:21.932]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:03:21.932]        // if-block "(__protocol & 0xFFFF) == 1"
[03:03:21.932]          // =>  FALSE
[03:03:21.932]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:03:21.932]      </control>
[03:03:21.932]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:03:21.933]        // if-block "(__protocol & 0xFFFF) == 2"
[03:03:21.933]          // =>  TRUE
[03:03:21.933]        <block atomic="false" info="">
[03:03:21.933]          Message(0, "executing SWD power up");
[03:03:21.934]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:03:21.936]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:03:21.936]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:03:21.938]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:03:21.938]        </block>
[03:03:21.938]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:03:21.938]      </control>
[03:03:21.938]      // end if-block "powered_down"
[03:03:21.939]    </control>
[03:03:21.939]    <block atomic="false" info="">
[03:03:21.939]      __var DEBUG_PORT_VAL    = 0;
[03:03:21.939]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:03:21.939]      __var ACCESS_POINT_VAL  = 0;
[03:03:21.939]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:03:21.939]      __ap = 1; 
[03:03:21.939]        // -> [__ap <= 0x00000001]
[03:03:21.939]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:03:21.942]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:03:21.942]      __ap = 4;
[03:03:21.942]        // -> [__ap <= 0x00000004]
[03:03:21.942]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:03:21.946]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:03:21.946]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:03:21.946]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:03:21.948]    </block>
[03:03:21.948]    <block atomic="false" info="">
[03:03:21.948]      __var nReset = 0x80;
[03:03:21.948]        // -> [nReset <= 0x00000080]
[03:03:21.948]      __var canReadPins = 0;
[03:03:21.948]        // -> [canReadPins <= 0x00000000]
[03:03:21.948]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:03:21.949]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:03:21.950]        // -> [canReadPins <= 0x00000001]
[03:03:21.950]    </block>
[03:03:21.950]    <control if="" while="1" timeout="200" info="">
[03:03:21.950]      // while "1"  (timeout="200")
[03:03:21.950]      // while-condition  =>  TRUE
[03:03:21.951]      // while "1"  (timeout="200")
[03:03:21.951]      // while-condition  =>  TRUE
[03:03:21.951]      // while "1"  (timeout="200")
[03:03:21.951]      // while-condition  =>  TRUE
[03:03:21.951]      // while "1"  (timeout="200")
[03:03:21.951]      // while-condition  =>  TRUE
[03:03:21.951]      // while "1"  (timeout="200")
[03:03:21.951]      // while-condition  =>  TRUE
[03:03:21.951]      // while "1"  (timeout="200")
[03:03:21.951]      // while-condition  =>  TRUE
[03:03:21.952]      // while "1"  (timeout="200")
[03:03:21.952]      // while-condition  =>  TRUE
[03:03:21.952]      // while "1"  (timeout="200")
[03:03:21.952]      // while-condition  =>  TRUE
[03:03:21.952]      // while "1"  (timeout="200")
[03:03:21.952]      // while-condition  =>  TRUE
[03:03:21.952]      // while "1"  (timeout="200")
[03:03:21.953]      // while-condition  =>  TRUE
[03:03:21.953]      // while "1"  (timeout="200")
[03:03:21.953]      // while-condition  =>  TRUE
[03:03:21.953]      // while "1"  (timeout="200")
[03:03:21.953]      // while-condition  =>  TRUE
[03:03:21.953]      // while "1"  (timeout="200")
[03:03:21.953]      // while-condition  =>  TRUE
[03:03:21.953]      // while "1"  (timeout="200")
[03:03:21.953]      // while-condition  =>  TRUE
[03:03:21.953]      // while "1"  (timeout="200")
[03:03:21.953]      // while-condition  =>  TRUE
[03:03:21.953]      // while "1"  (timeout="200")
[03:03:21.954]      // while-condition  =>  TRUE
[03:03:21.954]      // while "1"  (timeout="200")
[03:03:21.954]      // while-condition  =>  TRUE
[03:03:21.954]      // while "1"  (timeout="200")
[03:03:21.954]      // while-condition  =>  TRUE
[03:03:21.955]      // while "1"  (timeout="200")
[03:03:21.955]      // while-condition  =>  TRUE
[03:03:21.955]      // while "1"  (timeout="200")
[03:03:21.955]      // while-condition  =>  TRUE
[03:03:21.955]      // while "1"  (timeout="200")
[03:03:21.955]      // while-condition  =>  TRUE
[03:03:21.955]      // while "1"  (timeout="200")
[03:03:21.955]      // while-condition  =>  TRUE
[03:03:21.955]      // while "1"  (timeout="200")
[03:03:21.955]      // while-condition  =>  TRUE
[03:03:21.955]      // while "1"  (timeout="200")
[03:03:21.955]      // while-condition  =>  TRUE
[03:03:21.956]      // while "1"  (timeout="200")
[03:03:21.956]      // while  =>  TIMEOUT
[03:03:21.956]      // end while "1"
[03:03:21.956]    </control>
[03:03:21.956]    <control if="canReadPins" while="" timeout="0" info="">
[03:03:21.956]      // if-block "canReadPins"
[03:03:21.956]        // =>  TRUE
[03:03:21.956]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:03:21.956]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:03:21.957]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:03:21.957]        // while-condition  =>  FALSE
[03:03:21.957]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:03:21.957]      </control>
[03:03:21.958]      // end if-block "canReadPins"
[03:03:21.958]    </control>
[03:03:21.958]    <control if="!canReadPins" while="" timeout="0" info="">
[03:03:21.958]      // if-block "!canReadPins"
[03:03:21.958]        // =>  FALSE
[03:03:21.958]      // skip if-block "!canReadPins"
[03:03:21.958]    </control>
[03:03:21.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:03:21.958]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:03:21.959]        // =>  TRUE
[03:03:21.959]      <block atomic="false" info="">
[03:03:21.959]        WriteAP(0x00, 0x190008);
[03:03:21.960]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:03:21.960]        WriteAP(0xF0, 0x01);
[03:03:21.963]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:03:21.963]      </block>
[03:03:21.965]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:03:21.965]    </control>
[03:03:21.965]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:03:21.965]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:03:21.965]        // =>  FALSE
[03:03:21.966]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:03:21.966]    </control>
[03:03:21.966]    <block atomic="false" info="">
[03:03:21.966]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:03:21.971]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:03:21.971]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:03:21.971]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:03:21.973]      __ap = 0; //lets make sure we reset the access point selection
[03:03:21.973]        // -> [__ap <= 0x00000000]
[03:03:21.973]    </block>
[03:03:21.973]  </sequence>
[03:03:21.973]  
[03:03:21.995]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:03:21.995]  
[03:03:21.996]  <debugvars>
[03:03:21.996]    // Pre-defined
[03:03:21.996]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:21.996]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:03:21.996]    __dp=0x00000000
[03:03:21.996]    __ap=0x00000000
[03:03:21.996]    __traceout=0x00000000      (Trace Disabled)
[03:03:21.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:21.996]    __FlashAddr=0x00000000
[03:03:21.997]    __FlashLen=0x00000000
[03:03:21.997]    __FlashArg=0x00000000
[03:03:21.997]    __FlashOp=0x00000000
[03:03:21.997]    __Result=0x00000000
[03:03:21.997]  </debugvars>
[03:03:21.997]  
[03:03:21.997]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:03:21.997]    <block atomic="false" info="">
[03:03:21.997]      __var deviceID = 0;
[03:03:21.997]        // -> [deviceID <= 0x00000000]
[03:03:21.997]      __var version = 0;
[03:03:21.997]        // -> [version <= 0x00000000]
[03:03:21.997]      __var partNum = 0;
[03:03:21.997]        // -> [partNum <= 0x00000000]
[03:03:21.997]      __var manuf = 0;
[03:03:21.997]        // -> [manuf <= 0x00000000]
[03:03:21.997]      __var isMSPM0G1X0X_G3X0X = 0;
[03:03:21.997]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:03:21.998]      __var isProduction = 0;
[03:03:21.998]        // -> [isProduction <= 0x00000000]
[03:03:21.998]      __var continueId = 0;
[03:03:21.998]        // -> [continueId <= 0x00000000]
[03:03:21.998]      deviceID =   Read32(0x41C40004);
[03:03:22.003]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:03:22.003]        // -> [deviceID <= 0x2BB8802F]
[03:03:22.003]      version = deviceID >> 28;
[03:03:22.003]        // -> [version <= 0x00000002]
[03:03:22.003]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:03:22.003]        // -> [partNum <= 0x0000BB88]
[03:03:22.003]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:03:22.003]        // -> [manuf <= 0x00000017]
[03:03:22.003]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:03:22.003]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:03:22.003]      isProduction = (version > 0);
[03:03:22.005]        // -> [isProduction <= 0x00000001]
[03:03:22.005]    </block>
[03:03:22.005]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:03:22.005]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:03:22.005]        // =>  FALSE
[03:03:22.005]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:03:22.005]    </control>
[03:03:22.005]    <control if="continueId == 4" while="" timeout="0" info="">
[03:03:22.005]      // if-block "continueId == 4"
[03:03:22.005]        // =>  FALSE
[03:03:22.005]      // skip if-block "continueId == 4"
[03:03:22.005]    </control>
[03:03:22.005]    <control if="!isProduction" while="" timeout="0" info="">
[03:03:22.005]      // if-block "!isProduction"
[03:03:22.005]        // =>  FALSE
[03:03:22.005]      // skip if-block "!isProduction"
[03:03:22.005]    </control>
[03:03:22.005]  </sequence>
[03:03:22.007]  
[03:04:09.644]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:09.644]  
[03:04:09.653]  <debugvars>
[03:04:09.653]    // Pre-defined
[03:04:09.653]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:09.653]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:09.653]    __dp=0x00000000
[03:04:09.653]    __ap=0x00000000
[03:04:09.653]    __traceout=0x00000000      (Trace Disabled)
[03:04:09.653]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:09.653]    __FlashAddr=0x00000000
[03:04:09.653]    __FlashLen=0x00000000
[03:04:09.653]    __FlashArg=0x00000000
[03:04:09.654]    __FlashOp=0x00000000
[03:04:09.654]    __Result=0x00000000
[03:04:09.654]  </debugvars>
[03:04:09.654]  
[03:04:09.654]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:09.654]    <block atomic="false" info="">
[03:04:09.654]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:09.654]        // -> [isSWJ <= 0x00000001]
[03:04:09.655]      __var hasDormant = __protocol & 0x00020000;
[03:04:09.655]        // -> [hasDormant <= 0x00000000]
[03:04:09.655]      __var protType   = __protocol & 0x0000FFFF;
[03:04:09.655]        // -> [protType <= 0x00000002]
[03:04:09.655]    </block>
[03:04:09.655]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:09.655]      // if-block "protType == 1"
[03:04:09.656]        // =>  FALSE
[03:04:09.656]      // skip if-block "protType == 1"
[03:04:09.656]    </control>
[03:04:09.656]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:09.656]      // if-block "protType == 2"
[03:04:09.656]        // =>  TRUE
[03:04:09.656]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:09.656]        // if-block "isSWJ"
[03:04:09.656]          // =>  TRUE
[03:04:09.656]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:09.657]          // if-block "hasDormant"
[03:04:09.657]            // =>  FALSE
[03:04:09.657]          // skip if-block "hasDormant"
[03:04:09.657]        </control>
[03:04:09.657]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:09.657]          // if-block "!hasDormant"
[03:04:09.657]            // =>  TRUE
[03:04:09.657]          <block atomic="false" info="">
[03:04:09.657]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:09.658]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:09.658]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:09.660]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:09.660]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:09.661]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:09.662]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:09.663]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:04:09.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:04:09.665]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:09.665]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:04:09.666]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:04:09.666]          </block>
[03:04:09.666]          // end if-block "!hasDormant"
[03:04:09.666]        </control>
[03:04:09.666]        // end if-block "isSWJ"
[03:04:09.667]      </control>
[03:04:09.667]      <control if="!isSWJ" while="" timeout="0" info="">
[03:04:09.667]        // if-block "!isSWJ"
[03:04:09.667]          // =>  FALSE
[03:04:09.667]        // skip if-block "!isSWJ"
[03:04:09.667]      </control>
[03:04:09.667]      <block atomic="false" info="">
[03:04:09.667]        ReadDP(0x0);
[03:04:09.670]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:04:09.670]      </block>
[03:04:09.670]      // end if-block "protType == 2"
[03:04:09.670]    </control>
[03:04:09.670]  </sequence>
[03:04:09.670]  
[03:04:09.672]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:04:09.672]  
[03:04:09.672]  <debugvars>
[03:04:09.672]    // Pre-defined
[03:04:09.672]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:09.672]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:09.673]    __dp=0x00000000
[03:04:09.673]    __ap=0x00000000
[03:04:09.673]    __traceout=0x00000000      (Trace Disabled)
[03:04:09.673]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:09.673]    __FlashAddr=0x00000000
[03:04:09.673]    __FlashLen=0x00000000
[03:04:09.673]    __FlashArg=0x00000000
[03:04:09.673]    __FlashOp=0x00000000
[03:04:09.673]    __Result=0x00000000
[03:04:09.674]  </debugvars>
[03:04:09.674]  
[03:04:09.674]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:04:09.674]    <block atomic="false" info="">
[03:04:09.674]      __var SW_DP_ABORT       = 0x0;
[03:04:09.674]        // -> [SW_DP_ABORT <= 0x00000000]
[03:04:09.674]      __var DP_CTRL_STAT      = 0x4;
[03:04:09.674]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:04:09.674]      __var DP_SELECT         = 0x8;
[03:04:09.674]        // -> [DP_SELECT <= 0x00000008]
[03:04:09.674]      __var powered_down      = 0;
[03:04:09.674]        // -> [powered_down <= 0x00000000]
[03:04:09.675]      WriteDP(DP_SELECT, 0x00000000);
[03:04:09.677]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:04:09.677]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:04:09.678]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:04:09.678]        // -> [powered_down <= 0x00000001]
[03:04:09.678]    </block>
[03:04:09.678]    <control if="powered_down" while="" timeout="0" info="">
[03:04:09.678]      // if-block "powered_down"
[03:04:09.678]        // =>  TRUE
[03:04:09.678]      <block atomic="false" info="">
[03:04:09.678]        Message(0, "Debug/System power-up request sent");
[03:04:09.681]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:04:09.683]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:04:09.684]      </block>
[03:04:09.684]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:04:09.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:04:09.686]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:04:09.686]        // while-condition  =>  FALSE
[03:04:09.686]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:04:09.686]      </control>
[03:04:09.686]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:04:09.686]        // if-block "(__protocol & 0xFFFF) == 1"
[03:04:09.686]          // =>  FALSE
[03:04:09.687]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:04:09.687]      </control>
[03:04:09.687]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:04:09.687]        // if-block "(__protocol & 0xFFFF) == 2"
[03:04:09.687]          // =>  TRUE
[03:04:09.687]        <block atomic="false" info="">
[03:04:09.687]          Message(0, "executing SWD power up");
[03:04:09.689]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:04:09.690]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:04:09.690]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:04:09.693]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:04:09.693]        </block>
[03:04:09.693]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:04:09.693]      </control>
[03:04:09.693]      // end if-block "powered_down"
[03:04:09.693]    </control>
[03:04:09.693]    <block atomic="false" info="">
[03:04:09.694]      __var DEBUG_PORT_VAL    = 0;
[03:04:09.694]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:04:09.694]      __var ACCESS_POINT_VAL  = 0;
[03:04:09.694]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:04:09.694]      __ap = 1; 
[03:04:09.695]        // -> [__ap <= 0x00000001]
[03:04:09.695]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:04:09.699]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:04:09.699]      __ap = 4;
[03:04:09.699]        // -> [__ap <= 0x00000004]
[03:04:09.699]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:04:09.702]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:04:09.702]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:04:09.703]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:04:09.705]    </block>
[03:04:09.705]    <block atomic="false" info="">
[03:04:09.705]      __var nReset = 0x80;
[03:04:09.705]        // -> [nReset <= 0x00000080]
[03:04:09.705]      __var canReadPins = 0;
[03:04:09.705]        // -> [canReadPins <= 0x00000000]
[03:04:09.705]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:04:09.707]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:04:09.707]        // -> [canReadPins <= 0x00000001]
[03:04:09.707]    </block>
[03:04:09.707]    <control if="" while="1" timeout="200" info="">
[03:04:09.707]      // while "1"  (timeout="200")
[03:04:09.707]      // while-condition  =>  TRUE
[03:04:09.708]      // while "1"  (timeout="200")
[03:04:09.708]      // while-condition  =>  TRUE
[03:04:09.708]      // while "1"  (timeout="200")
[03:04:09.708]      // while-condition  =>  TRUE
[03:04:09.708]      // while "1"  (timeout="200")
[03:04:09.708]      // while-condition  =>  TRUE
[03:04:09.708]      // while "1"  (timeout="200")
[03:04:09.708]      // while-condition  =>  TRUE
[03:04:09.708]      // while "1"  (timeout="200")
[03:04:09.709]      // while-condition  =>  TRUE
[03:04:09.709]      // while "1"  (timeout="200")
[03:04:09.709]      // while-condition  =>  TRUE
[03:04:09.709]      // while "1"  (timeout="200")
[03:04:09.709]      // while-condition  =>  TRUE
[03:04:09.709]      // while "1"  (timeout="200")
[03:04:09.709]      // while-condition  =>  TRUE
[03:04:09.709]      // while "1"  (timeout="200")
[03:04:09.709]      // while-condition  =>  TRUE
[03:04:09.710]      // while "1"  (timeout="200")
[03:04:09.710]      // while-condition  =>  TRUE
[03:04:09.710]      // while "1"  (timeout="200")
[03:04:09.711]      // while-condition  =>  TRUE
[03:04:09.711]      // while "1"  (timeout="200")
[03:04:09.711]      // while-condition  =>  TRUE
[03:04:09.711]      // while "1"  (timeout="200")
[03:04:09.711]      // while-condition  =>  TRUE
[03:04:09.711]      // while "1"  (timeout="200")
[03:04:09.711]      // while-condition  =>  TRUE
[03:04:09.711]      // while "1"  (timeout="200")
[03:04:09.711]      // while-condition  =>  TRUE
[03:04:09.711]      // while "1"  (timeout="200")
[03:04:09.711]      // while-condition  =>  TRUE
[03:04:09.711]      // while "1"  (timeout="200")
[03:04:09.711]      // while-condition  =>  TRUE
[03:04:09.711]      // while "1"  (timeout="200")
[03:04:09.712]      // while-condition  =>  TRUE
[03:04:09.712]      // while "1"  (timeout="200")
[03:04:09.712]      // while-condition  =>  TRUE
[03:04:09.712]      // while "1"  (timeout="200")
[03:04:09.712]      // while-condition  =>  TRUE
[03:04:09.712]      // while "1"  (timeout="200")
[03:04:09.712]      // while-condition  =>  TRUE
[03:04:09.712]      // while "1"  (timeout="200")
[03:04:09.712]      // while-condition  =>  TRUE
[03:04:09.713]      // while "1"  (timeout="200")
[03:04:09.713]      // while-condition  =>  TRUE
[03:04:09.713]      // while "1"  (timeout="200")
[03:04:09.713]      // while-condition  =>  TRUE
[03:04:09.713]      // while "1"  (timeout="200")
[03:04:09.713]      // while-condition  =>  TRUE
[03:04:09.714]      // while "1"  (timeout="200")
[03:04:09.714]      // while-condition  =>  TRUE
[03:04:09.714]      // while "1"  (timeout="200")
[03:04:09.714]      // while-condition  =>  TRUE
[03:04:09.714]      // while "1"  (timeout="200")
[03:04:09.714]      // while-condition  =>  TRUE
[03:04:09.714]      // while "1"  (timeout="200")
[03:04:09.714]      // while-condition  =>  TRUE
[03:04:09.714]      // while "1"  (timeout="200")
[03:04:09.714]      // while-condition  =>  TRUE
[03:04:09.715]      // while "1"  (timeout="200")
[03:04:09.715]      // while-condition  =>  TRUE
[03:04:09.715]      // while "1"  (timeout="200")
[03:04:09.715]      // while-condition  =>  TRUE
[03:04:09.715]      // while "1"  (timeout="200")
[03:04:09.715]      // while-condition  =>  TRUE
[03:04:09.715]      // while "1"  (timeout="200")
[03:04:09.715]      // while-condition  =>  TRUE
[03:04:09.715]      // while "1"  (timeout="200")
[03:04:09.716]      // while-condition  =>  TRUE
[03:04:09.716]      // while "1"  (timeout="200")
[03:04:09.716]      // while-condition  =>  TRUE
[03:04:09.716]      // while "1"  (timeout="200")
[03:04:09.716]      // while-condition  =>  TRUE
[03:04:09.716]      // while "1"  (timeout="200")
[03:04:09.716]      // while-condition  =>  TRUE
[03:04:09.716]      // while "1"  (timeout="200")
[03:04:09.716]      // while-condition  =>  TRUE
[03:04:09.717]      // while "1"  (timeout="200")
[03:04:09.717]      // while-condition  =>  TRUE
[03:04:09.717]      // while "1"  (timeout="200")
[03:04:09.717]      // while-condition  =>  TRUE
[03:04:09.718]      // while "1"  (timeout="200")
[03:04:09.718]      // while-condition  =>  TRUE
[03:04:09.718]      // while "1"  (timeout="200")
[03:04:09.718]      // while-condition  =>  TRUE
[03:04:09.718]      // while "1"  (timeout="200")
[03:04:09.718]      // while-condition  =>  TRUE
[03:04:09.718]      // while "1"  (timeout="200")
[03:04:09.718]      // while-condition  =>  TRUE
[03:04:09.718]      // while "1"  (timeout="200")
[03:04:09.718]      // while-condition  =>  TRUE
[03:04:09.718]      // while "1"  (timeout="200")
[03:04:09.718]      // while-condition  =>  TRUE
[03:04:09.718]      // while "1"  (timeout="200")
[03:04:09.718]      // while-condition  =>  TRUE
[03:04:09.719]      // while "1"  (timeout="200")
[03:04:09.719]      // while-condition  =>  TRUE
[03:04:09.719]      // while "1"  (timeout="200")
[03:04:09.719]      // while-condition  =>  TRUE
[03:04:09.720]      // while "1"  (timeout="200")
[03:04:09.720]      // while-condition  =>  TRUE
[03:04:09.720]      // while "1"  (timeout="200")
[03:04:09.720]      // while-condition  =>  TRUE
[03:04:09.720]      // while "1"  (timeout="200")
[03:04:09.720]      // while-condition  =>  TRUE
[03:04:09.720]      // while "1"  (timeout="200")
[03:04:09.720]      // while-condition  =>  TRUE
[03:04:09.720]      // while "1"  (timeout="200")
[03:04:09.720]      // while-condition  =>  TRUE
[03:04:09.720]      // while "1"  (timeout="200")
[03:04:09.720]      // while-condition  =>  TRUE
[03:04:09.721]      // while "1"  (timeout="200")
[03:04:09.721]      // while-condition  =>  TRUE
[03:04:09.721]      // while "1"  (timeout="200")
[03:04:09.721]      // while-condition  =>  TRUE
[03:04:09.721]      // while "1"  (timeout="200")
[03:04:09.721]      // while-condition  =>  TRUE
[03:04:09.721]      // while "1"  (timeout="200")
[03:04:09.722]      // while-condition  =>  TRUE
[03:04:09.722]      // while "1"  (timeout="200")
[03:04:09.722]      // while  =>  TIMEOUT
[03:04:09.722]      // end while "1"
[03:04:09.722]    </control>
[03:04:09.722]    <control if="canReadPins" while="" timeout="0" info="">
[03:04:09.722]      // if-block "canReadPins"
[03:04:09.722]        // =>  TRUE
[03:04:09.722]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:04:09.722]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:04:09.724]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:04:09.724]        // while-condition  =>  FALSE
[03:04:09.724]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:04:09.724]      </control>
[03:04:09.724]      // end if-block "canReadPins"
[03:04:09.724]    </control>
[03:04:09.724]    <control if="!canReadPins" while="" timeout="0" info="">
[03:04:09.724]      // if-block "!canReadPins"
[03:04:09.724]        // =>  FALSE
[03:04:09.725]      // skip if-block "!canReadPins"
[03:04:09.725]    </control>
[03:04:09.725]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:04:09.725]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:04:09.725]        // =>  TRUE
[03:04:09.725]      <block atomic="false" info="">
[03:04:09.725]        WriteAP(0x00, 0x190008);
[03:04:09.727]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:04:09.727]        WriteAP(0xF0, 0x01);
[03:04:09.730]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:04:09.731]      </block>
[03:04:09.731]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:04:09.731]    </control>
[03:04:09.731]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:04:09.731]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:04:09.731]        // =>  FALSE
[03:04:09.731]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:04:09.731]    </control>
[03:04:09.731]    <block atomic="false" info="">
[03:04:09.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:04:09.734]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:04:09.735]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:04:09.735]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:04:09.736]      __ap = 0; //lets make sure we reset the access point selection
[03:04:09.736]        // -> [__ap <= 0x00000000]
[03:04:09.737]    </block>
[03:04:09.737]  </sequence>
[03:04:09.737]  
[03:04:09.757]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:04:09.757]  
[03:04:09.757]  <debugvars>
[03:04:09.757]    // Pre-defined
[03:04:09.757]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:09.757]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:09.758]    __dp=0x00000000
[03:04:09.758]    __ap=0x00000000
[03:04:09.758]    __traceout=0x00000000      (Trace Disabled)
[03:04:09.758]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:09.758]    __FlashAddr=0x00000000
[03:04:09.758]    __FlashLen=0x00000000
[03:04:09.758]    __FlashArg=0x00000000
[03:04:09.758]    __FlashOp=0x00000000
[03:04:09.758]    __Result=0x00000000
[03:04:09.758]  </debugvars>
[03:04:09.758]  
[03:04:09.759]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:04:09.759]    <block atomic="false" info="">
[03:04:09.759]      __var deviceID = 0;
[03:04:09.759]        // -> [deviceID <= 0x00000000]
[03:04:09.759]      __var version = 0;
[03:04:09.759]        // -> [version <= 0x00000000]
[03:04:09.759]      __var partNum = 0;
[03:04:09.759]        // -> [partNum <= 0x00000000]
[03:04:09.759]      __var manuf = 0;
[03:04:09.759]        // -> [manuf <= 0x00000000]
[03:04:09.759]      __var isMSPM0G1X0X_G3X0X = 0;
[03:04:09.759]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:04:09.760]      __var isProduction = 0;
[03:04:09.760]        // -> [isProduction <= 0x00000000]
[03:04:09.760]      __var continueId = 0;
[03:04:09.760]        // -> [continueId <= 0x00000000]
[03:04:09.760]      deviceID =   Read32(0x41C40004);
[03:04:09.764]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:04:09.764]        // -> [deviceID <= 0x2BB8802F]
[03:04:09.764]      version = deviceID >> 28;
[03:04:09.764]        // -> [version <= 0x00000002]
[03:04:09.764]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:04:09.764]        // -> [partNum <= 0x0000BB88]
[03:04:09.764]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:04:09.764]        // -> [manuf <= 0x00000017]
[03:04:09.765]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:04:09.765]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:04:09.765]      isProduction = (version > 0);
[03:04:09.765]        // -> [isProduction <= 0x00000001]
[03:04:09.765]    </block>
[03:04:09.765]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:04:09.765]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:04:09.765]        // =>  FALSE
[03:04:09.765]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:04:09.765]    </control>
[03:04:09.765]    <control if="continueId == 4" while="" timeout="0" info="">
[03:04:09.766]      // if-block "continueId == 4"
[03:04:09.766]        // =>  FALSE
[03:04:09.767]      // skip if-block "continueId == 4"
[03:04:09.767]    </control>
[03:04:09.767]    <control if="!isProduction" while="" timeout="0" info="">
[03:04:09.767]      // if-block "!isProduction"
[03:04:09.767]        // =>  FALSE
[03:04:09.767]      // skip if-block "!isProduction"
[03:04:09.767]    </control>
[03:04:09.768]  </sequence>
[03:04:09.768]  
[03:05:11.780]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:11.780]  
[03:05:11.788]  <debugvars>
[03:05:11.789]    // Pre-defined
[03:05:11.789]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:11.789]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:11.789]    __dp=0x00000000
[03:05:11.789]    __ap=0x00000000
[03:05:11.789]    __traceout=0x00000000      (Trace Disabled)
[03:05:11.789]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:11.790]    __FlashAddr=0x00000000
[03:05:11.790]    __FlashLen=0x00000000
[03:05:11.790]    __FlashArg=0x00000000
[03:05:11.790]    __FlashOp=0x00000000
[03:05:11.790]    __Result=0x00000000
[03:05:11.790]  </debugvars>
[03:05:11.790]  
[03:05:11.790]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:11.790]    <block atomic="false" info="">
[03:05:11.790]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:11.791]        // -> [isSWJ <= 0x00000001]
[03:05:11.791]      __var hasDormant = __protocol & 0x00020000;
[03:05:11.791]        // -> [hasDormant <= 0x00000000]
[03:05:11.791]      __var protType   = __protocol & 0x0000FFFF;
[03:05:11.791]        // -> [protType <= 0x00000002]
[03:05:11.791]    </block>
[03:05:11.791]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:11.791]      // if-block "protType == 1"
[03:05:11.791]        // =>  FALSE
[03:05:11.792]      // skip if-block "protType == 1"
[03:05:11.792]    </control>
[03:05:11.792]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:11.792]      // if-block "protType == 2"
[03:05:11.792]        // =>  TRUE
[03:05:11.792]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:11.792]        // if-block "isSWJ"
[03:05:11.792]          // =>  TRUE
[03:05:11.793]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:11.793]          // if-block "hasDormant"
[03:05:11.793]            // =>  FALSE
[03:05:11.793]          // skip if-block "hasDormant"
[03:05:11.793]        </control>
[03:05:11.793]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:11.793]          // if-block "!hasDormant"
[03:05:11.793]            // =>  TRUE
[03:05:11.793]          <block atomic="false" info="">
[03:05:11.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:11.795]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:11.795]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:11.796]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:11.796]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:11.798]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:11.798]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:11.799]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:11.799]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:11.801]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:11.801]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:11.803]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:11.803]          </block>
[03:05:11.803]          // end if-block "!hasDormant"
[03:05:11.803]        </control>
[03:05:11.803]        // end if-block "isSWJ"
[03:05:11.803]      </control>
[03:05:11.803]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:11.803]        // if-block "!isSWJ"
[03:05:11.803]          // =>  FALSE
[03:05:11.803]        // skip if-block "!isSWJ"
[03:05:11.803]      </control>
[03:05:11.803]      <block atomic="false" info="">
[03:05:11.803]        ReadDP(0x0);
[03:05:11.805]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:11.805]      </block>
[03:05:11.805]      // end if-block "protType == 2"
[03:05:11.805]    </control>
[03:05:11.805]  </sequence>
[03:05:11.805]  
[03:05:11.807]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:05:11.807]  
[03:05:11.807]  <debugvars>
[03:05:11.808]    // Pre-defined
[03:05:11.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:11.808]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:11.808]    __dp=0x00000000
[03:05:11.808]    __ap=0x00000000
[03:05:11.808]    __traceout=0x00000000      (Trace Disabled)
[03:05:11.809]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:11.809]    __FlashAddr=0x00000000
[03:05:11.809]    __FlashLen=0x00000000
[03:05:11.809]    __FlashArg=0x00000000
[03:05:11.809]    __FlashOp=0x00000000
[03:05:11.809]    __Result=0x00000000
[03:05:11.809]  </debugvars>
[03:05:11.809]  
[03:05:11.809]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:05:11.809]    <block atomic="false" info="">
[03:05:11.809]      __var SW_DP_ABORT       = 0x0;
[03:05:11.809]        // -> [SW_DP_ABORT <= 0x00000000]
[03:05:11.809]      __var DP_CTRL_STAT      = 0x4;
[03:05:11.810]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:05:11.810]      __var DP_SELECT         = 0x8;
[03:05:11.810]        // -> [DP_SELECT <= 0x00000008]
[03:05:11.810]      __var powered_down      = 0;
[03:05:11.810]        // -> [powered_down <= 0x00000000]
[03:05:11.810]      WriteDP(DP_SELECT, 0x00000000);
[03:05:11.811]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:05:11.812]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:05:11.813]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:05:11.813]        // -> [powered_down <= 0x00000001]
[03:05:11.813]    </block>
[03:05:11.814]    <control if="powered_down" while="" timeout="0" info="">
[03:05:11.814]      // if-block "powered_down"
[03:05:11.814]        // =>  TRUE
[03:05:11.814]      <block atomic="false" info="">
[03:05:11.814]        Message(0, "Debug/System power-up request sent");
[03:05:11.817]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:05:11.819]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:05:11.819]      </block>
[03:05:11.819]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:05:11.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.821]        // while-condition  =>  TRUE
[03:05:11.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.823]        // while-condition  =>  TRUE
[03:05:11.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.824]        // while-condition  =>  TRUE
[03:05:11.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.826]        // while-condition  =>  TRUE
[03:05:11.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.827]        // while-condition  =>  TRUE
[03:05:11.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.829]        // while-condition  =>  TRUE
[03:05:11.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.831]        // while-condition  =>  TRUE
[03:05:11.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.833]        // while-condition  =>  TRUE
[03:05:11.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.834]        // while-condition  =>  TRUE
[03:05:11.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.836]        // while-condition  =>  TRUE
[03:05:11.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.838]        // while-condition  =>  TRUE
[03:05:11.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.839]        // while-condition  =>  TRUE
[03:05:11.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.841]        // while-condition  =>  TRUE
[03:05:11.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.844]        // while-condition  =>  TRUE
[03:05:11.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.846]        // while-condition  =>  TRUE
[03:05:11.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.847]        // while-condition  =>  TRUE
[03:05:11.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.849]        // while-condition  =>  TRUE
[03:05:11.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.851]        // while-condition  =>  TRUE
[03:05:11.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.853]        // while-condition  =>  TRUE
[03:05:11.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.854]        // while-condition  =>  TRUE
[03:05:11.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.856]        // while-condition  =>  TRUE
[03:05:11.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.858]        // while-condition  =>  TRUE
[03:05:11.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.860]        // while-condition  =>  TRUE
[03:05:11.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.861]        // while-condition  =>  TRUE
[03:05:11.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.863]        // while-condition  =>  TRUE
[03:05:11.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.865]        // while-condition  =>  TRUE
[03:05:11.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.866]        // while-condition  =>  TRUE
[03:05:11.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.868]        // while-condition  =>  TRUE
[03:05:11.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.870]        // while-condition  =>  TRUE
[03:05:11.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.872]        // while-condition  =>  TRUE
[03:05:11.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.873]        // while-condition  =>  TRUE
[03:05:11.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.875]        // while-condition  =>  TRUE
[03:05:11.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.877]        // while-condition  =>  TRUE
[03:05:11.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.879]        // while-condition  =>  TRUE
[03:05:11.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.881]        // while-condition  =>  TRUE
[03:05:11.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.883]        // while-condition  =>  TRUE
[03:05:11.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.885]        // while-condition  =>  TRUE
[03:05:11.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.886]        // while-condition  =>  TRUE
[03:05:11.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.888]        // while-condition  =>  TRUE
[03:05:11.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.890]        // while-condition  =>  TRUE
[03:05:11.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.892]        // while-condition  =>  TRUE
[03:05:11.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.893]        // while-condition  =>  TRUE
[03:05:11.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.895]        // while-condition  =>  TRUE
[03:05:11.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.896]        // while-condition  =>  TRUE
[03:05:11.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.898]        // while-condition  =>  TRUE
[03:05:11.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.900]        // while-condition  =>  TRUE
[03:05:11.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.901]        // while-condition  =>  TRUE
[03:05:11.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.903]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.903]        // while-condition  =>  TRUE
[03:05:11.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.905]        // while-condition  =>  TRUE
[03:05:11.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.907]        // while-condition  =>  TRUE
[03:05:11.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.909]        // while-condition  =>  TRUE
[03:05:11.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.910]        // while-condition  =>  TRUE
[03:05:11.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.913]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.914]        // while-condition  =>  TRUE
[03:05:11.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.915]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.915]        // while-condition  =>  TRUE
[03:05:11.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.917]        // while-condition  =>  TRUE
[03:05:11.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.919]        // while-condition  =>  TRUE
[03:05:11.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.920]        // while-condition  =>  TRUE
[03:05:11.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.921]        // while-condition  =>  TRUE
[03:05:11.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.923]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.923]        // while-condition  =>  TRUE
[03:05:11.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.925]        // while-condition  =>  TRUE
[03:05:11.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.926]        // while-condition  =>  TRUE
[03:05:11.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.928]        // while-condition  =>  TRUE
[03:05:11.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.929]        // while-condition  =>  TRUE
[03:05:11.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.931]        // while-condition  =>  TRUE
[03:05:11.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.933]        // while-condition  =>  TRUE
[03:05:11.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.935]        // while-condition  =>  TRUE
[03:05:11.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.937]        // while-condition  =>  TRUE
[03:05:11.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.938]        // while-condition  =>  TRUE
[03:05:11.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.940]        // while-condition  =>  TRUE
[03:05:11.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.942]        // while-condition  =>  TRUE
[03:05:11.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.944]        // while-condition  =>  TRUE
[03:05:11.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.946]        // while-condition  =>  TRUE
[03:05:11.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.948]        // while-condition  =>  TRUE
[03:05:11.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.950]        // while-condition  =>  TRUE
[03:05:11.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.951]        // while-condition  =>  TRUE
[03:05:11.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.953]        // while-condition  =>  TRUE
[03:05:11.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.955]        // while-condition  =>  TRUE
[03:05:11.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.957]        // while-condition  =>  TRUE
[03:05:11.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.959]        // while-condition  =>  TRUE
[03:05:11.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.960]        // while-condition  =>  TRUE
[03:05:11.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.962]        // while-condition  =>  TRUE
[03:05:11.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.964]        // while-condition  =>  TRUE
[03:05:11.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.965]        // while-condition  =>  TRUE
[03:05:11.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.967]        // while-condition  =>  TRUE
[03:05:11.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.969]        // while-condition  =>  TRUE
[03:05:11.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.971]        // while-condition  =>  TRUE
[03:05:11.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.972]        // while-condition  =>  TRUE
[03:05:11.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.973]        // while-condition  =>  TRUE
[03:05:11.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.976]        // while-condition  =>  TRUE
[03:05:11.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.977]        // while-condition  =>  TRUE
[03:05:11.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.979]        // while-condition  =>  TRUE
[03:05:11.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.980]        // while-condition  =>  TRUE
[03:05:11.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.983]        // while-condition  =>  TRUE
[03:05:11.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.984]        // while-condition  =>  TRUE
[03:05:11.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.985]        // while-condition  =>  TRUE
[03:05:11.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.987]        // while-condition  =>  TRUE
[03:05:11.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.990]        // while-condition  =>  TRUE
[03:05:11.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.991]        // while-condition  =>  TRUE
[03:05:11.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.992]        // while-condition  =>  TRUE
[03:05:11.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.994]        // while-condition  =>  TRUE
[03:05:11.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.997]        // while-condition  =>  TRUE
[03:05:11.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.998]        // while-condition  =>  TRUE
[03:05:11.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:11.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:11.999]        // while-condition  =>  TRUE
[03:05:11.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.001]        // while-condition  =>  TRUE
[03:05:12.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.003]        // while-condition  =>  TRUE
[03:05:12.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.005]        // while-condition  =>  TRUE
[03:05:12.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.007]        // while-condition  =>  TRUE
[03:05:12.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.008]        // while-condition  =>  TRUE
[03:05:12.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.010]        // while-condition  =>  TRUE
[03:05:12.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.012]        // while-condition  =>  TRUE
[03:05:12.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.013]        // while-condition  =>  TRUE
[03:05:12.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.016]        // while-condition  =>  TRUE
[03:05:12.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.018]        // while-condition  =>  TRUE
[03:05:12.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.019]        // while-condition  =>  TRUE
[03:05:12.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.021]        // while-condition  =>  TRUE
[03:05:12.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.023]        // while-condition  =>  TRUE
[03:05:12.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.025]        // while-condition  =>  TRUE
[03:05:12.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.027]        // while-condition  =>  TRUE
[03:05:12.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.028]        // while-condition  =>  TRUE
[03:05:12.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.030]        // while-condition  =>  TRUE
[03:05:12.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.031]        // while-condition  =>  TRUE
[03:05:12.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.033]        // while-condition  =>  TRUE
[03:05:12.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.035]        // while-condition  =>  TRUE
[03:05:12.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.037]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.037]        // while-condition  =>  TRUE
[03:05:12.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.038]        // while-condition  =>  TRUE
[03:05:12.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.040]        // while-condition  =>  TRUE
[03:05:12.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.041]        // while-condition  =>  TRUE
[03:05:12.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.043]        // while-condition  =>  TRUE
[03:05:12.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.045]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.045]        // while-condition  =>  TRUE
[03:05:12.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.048]        // while-condition  =>  TRUE
[03:05:12.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.050]        // while-condition  =>  TRUE
[03:05:12.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.052]        // while-condition  =>  TRUE
[03:05:12.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.053]        // while-condition  =>  TRUE
[03:05:12.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.055]        // while-condition  =>  TRUE
[03:05:12.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.057]        // while-condition  =>  TRUE
[03:05:12.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.059]        // while-condition  =>  TRUE
[03:05:12.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.061]        // while-condition  =>  TRUE
[03:05:12.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.062]        // while-condition  =>  TRUE
[03:05:12.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.064]        // while-condition  =>  TRUE
[03:05:12.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.066]        // while-condition  =>  TRUE
[03:05:12.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.068]        // while-condition  =>  TRUE
[03:05:12.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.069]        // while-condition  =>  TRUE
[03:05:12.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.071]        // while-condition  =>  TRUE
[03:05:12.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.073]        // while-condition  =>  TRUE
[03:05:12.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.074]        // while-condition  =>  TRUE
[03:05:12.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.076]        // while-condition  =>  TRUE
[03:05:12.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.078]        // while-condition  =>  TRUE
[03:05:12.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.080]        // while-condition  =>  TRUE
[03:05:12.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.081]        // while-condition  =>  TRUE
[03:05:12.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.083]        // while-condition  =>  TRUE
[03:05:12.083]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.085]        // while-condition  =>  TRUE
[03:05:12.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.086]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.087]        // while-condition  =>  TRUE
[03:05:12.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.088]        // while-condition  =>  TRUE
[03:05:12.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.090]        // while-condition  =>  TRUE
[03:05:12.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.091]        // while-condition  =>  TRUE
[03:05:12.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.094]        // while-condition  =>  TRUE
[03:05:12.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.095]        // while-condition  =>  TRUE
[03:05:12.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.096]        // while-condition  =>  TRUE
[03:05:12.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.098]        // while-condition  =>  TRUE
[03:05:12.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.101]        // while-condition  =>  TRUE
[03:05:12.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.102]        // while-condition  =>  TRUE
[03:05:12.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.104]        // while-condition  =>  TRUE
[03:05:12.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.106]        // while-condition  =>  TRUE
[03:05:12.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.108]        // while-condition  =>  TRUE
[03:05:12.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.109]        // while-condition  =>  TRUE
[03:05:12.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.110]        // while-condition  =>  TRUE
[03:05:12.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.112]        // while-condition  =>  TRUE
[03:05:12.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.113]        // while-condition  =>  TRUE
[03:05:12.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.116]        // while-condition  =>  TRUE
[03:05:12.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.118]        // while-condition  =>  TRUE
[03:05:12.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.120]        // while-condition  =>  TRUE
[03:05:12.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.122]        // while-condition  =>  TRUE
[03:05:12.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.124]        // while-condition  =>  TRUE
[03:05:12.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.125]        // while-condition  =>  TRUE
[03:05:12.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.127]        // while-condition  =>  TRUE
[03:05:12.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.129]        // while-condition  =>  TRUE
[03:05:12.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.131]        // while-condition  =>  TRUE
[03:05:12.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.132]        // while-condition  =>  TRUE
[03:05:12.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.133]        // while-condition  =>  TRUE
[03:05:12.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.135]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.135]        // while-condition  =>  TRUE
[03:05:12.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.136]        // while-condition  =>  TRUE
[03:05:12.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.139]        // while-condition  =>  TRUE
[03:05:12.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.140]        // while-condition  =>  TRUE
[03:05:12.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.142]        // while-condition  =>  TRUE
[03:05:12.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.143]        // while-condition  =>  TRUE
[03:05:12.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.146]        // while-condition  =>  TRUE
[03:05:12.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.147]        // while-condition  =>  TRUE
[03:05:12.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.149]        // while-condition  =>  TRUE
[03:05:12.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.152]        // while-condition  =>  TRUE
[03:05:12.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.154]        // while-condition  =>  TRUE
[03:05:12.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.156]        // while-condition  =>  TRUE
[03:05:12.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.157]        // while-condition  =>  TRUE
[03:05:12.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.159]        // while-condition  =>  TRUE
[03:05:12.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.161]        // while-condition  =>  TRUE
[03:05:12.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.163]        // while-condition  =>  TRUE
[03:05:12.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.164]        // while-condition  =>  TRUE
[03:05:12.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.167]        // while-condition  =>  TRUE
[03:05:12.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.168]        // while-condition  =>  TRUE
[03:05:12.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.170]        // while-condition  =>  TRUE
[03:05:12.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.171]        // while-condition  =>  TRUE
[03:05:12.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.173]        // while-condition  =>  TRUE
[03:05:12.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.174]        // while-condition  =>  TRUE
[03:05:12.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.177]        // while-condition  =>  TRUE
[03:05:12.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.178]        // while-condition  =>  TRUE
[03:05:12.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.180]        // while-condition  =>  TRUE
[03:05:12.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.182]        // while-condition  =>  TRUE
[03:05:12.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.184]        // while-condition  =>  TRUE
[03:05:12.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.185]        // while-condition  =>  TRUE
[03:05:12.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.187]        // while-condition  =>  TRUE
[03:05:12.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.189]        // while-condition  =>  TRUE
[03:05:12.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.191]        // while-condition  =>  TRUE
[03:05:12.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.192]        // while-condition  =>  TRUE
[03:05:12.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.194]        // while-condition  =>  TRUE
[03:05:12.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.196]        // while-condition  =>  TRUE
[03:05:12.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.198]        // while-condition  =>  TRUE
[03:05:12.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.199]        // while-condition  =>  TRUE
[03:05:12.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.201]        // while-condition  =>  TRUE
[03:05:12.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.203]        // while-condition  =>  TRUE
[03:05:12.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.205]        // while-condition  =>  TRUE
[03:05:12.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.206]        // while-condition  =>  TRUE
[03:05:12.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.208]        // while-condition  =>  TRUE
[03:05:12.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.210]        // while-condition  =>  TRUE
[03:05:12.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.212]        // while-condition  =>  TRUE
[03:05:12.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.213]        // while-condition  =>  TRUE
[03:05:12.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.216]        // while-condition  =>  TRUE
[03:05:12.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.217]        // while-condition  =>  TRUE
[03:05:12.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.219]        // while-condition  =>  TRUE
[03:05:12.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.221]        // while-condition  =>  TRUE
[03:05:12.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.223]        // while-condition  =>  TRUE
[03:05:12.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.225]        // while-condition  =>  TRUE
[03:05:12.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.227]        // while-condition  =>  TRUE
[03:05:12.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.228]        // while-condition  =>  TRUE
[03:05:12.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.231]        // while-condition  =>  TRUE
[03:05:12.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.233]        // while-condition  =>  TRUE
[03:05:12.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.234]        // while-condition  =>  TRUE
[03:05:12.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.236]        // while-condition  =>  TRUE
[03:05:12.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.238]        // while-condition  =>  TRUE
[03:05:12.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.239]        // while-condition  =>  TRUE
[03:05:12.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.241]        // while-condition  =>  TRUE
[03:05:12.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.243]        // while-condition  =>  TRUE
[03:05:12.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.245]        // while-condition  =>  TRUE
[03:05:12.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.247]        // while-condition  =>  TRUE
[03:05:12.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.248]        // while-condition  =>  TRUE
[03:05:12.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.250]        // while-condition  =>  TRUE
[03:05:12.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.252]        // while-condition  =>  TRUE
[03:05:12.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.253]        // while-condition  =>  TRUE
[03:05:12.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.255]        // while-condition  =>  TRUE
[03:05:12.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.258]        // while-condition  =>  TRUE
[03:05:12.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.260]        // while-condition  =>  TRUE
[03:05:12.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.261]        // while-condition  =>  TRUE
[03:05:12.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.263]        // while-condition  =>  TRUE
[03:05:12.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.266]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.266]        // while-condition  =>  TRUE
[03:05:12.266]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.267]        // while-condition  =>  TRUE
[03:05:12.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.270]        // while-condition  =>  TRUE
[03:05:12.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.272]        // while-condition  =>  TRUE
[03:05:12.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.274]        // while-condition  =>  TRUE
[03:05:12.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.279]        // while-condition  =>  TRUE
[03:05:12.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.281]        // while-condition  =>  TRUE
[03:05:12.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.283]        // while-condition  =>  TRUE
[03:05:12.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.285]        // while-condition  =>  TRUE
[03:05:12.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.287]        // while-condition  =>  TRUE
[03:05:12.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.289]        // while-condition  =>  TRUE
[03:05:12.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.290]        // while-condition  =>  TRUE
[03:05:12.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.292]        // while-condition  =>  TRUE
[03:05:12.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.294]        // while-condition  =>  TRUE
[03:05:12.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.296]        // while-condition  =>  TRUE
[03:05:12.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.298]        // while-condition  =>  TRUE
[03:05:12.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.299]        // while-condition  =>  TRUE
[03:05:12.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.301]        // while-condition  =>  TRUE
[03:05:12.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.302]        // while-condition  =>  TRUE
[03:05:12.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.305]        // while-condition  =>  TRUE
[03:05:12.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.306]        // while-condition  =>  TRUE
[03:05:12.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.308]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.308]        // while-condition  =>  TRUE
[03:05:12.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.310]        // while-condition  =>  TRUE
[03:05:12.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.312]        // while-condition  =>  TRUE
[03:05:12.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.313]        // while-condition  =>  TRUE
[03:05:12.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.315]        // while-condition  =>  TRUE
[03:05:12.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.316]        // while-condition  =>  TRUE
[03:05:12.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.318]        // while-condition  =>  TRUE
[03:05:12.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.320]        // while-condition  =>  TRUE
[03:05:12.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.323]        // while-condition  =>  TRUE
[03:05:12.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.324]        // while-condition  =>  TRUE
[03:05:12.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.325]        // while-condition  =>  TRUE
[03:05:12.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.327]        // while-condition  =>  TRUE
[03:05:12.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.330]        // while-condition  =>  TRUE
[03:05:12.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.331]        // while-condition  =>  TRUE
[03:05:12.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.332]        // while-condition  =>  TRUE
[03:05:12.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.334]        // while-condition  =>  TRUE
[03:05:12.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.335]        // while-condition  =>  TRUE
[03:05:12.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.338]        // while-condition  =>  TRUE
[03:05:12.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.339]        // while-condition  =>  TRUE
[03:05:12.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.341]        // while-condition  =>  TRUE
[03:05:12.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.343]        // while-condition  =>  TRUE
[03:05:12.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.344]        // while-condition  =>  TRUE
[03:05:12.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.346]        // while-condition  =>  TRUE
[03:05:12.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.347]        // while-condition  =>  TRUE
[03:05:12.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.348]        // while-condition  =>  TRUE
[03:05:12.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.351]        // while-condition  =>  TRUE
[03:05:12.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.352]        // while-condition  =>  TRUE
[03:05:12.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.354]        // while-condition  =>  TRUE
[03:05:12.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.356]        // while-condition  =>  TRUE
[03:05:12.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.358]        // while-condition  =>  TRUE
[03:05:12.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.360]        // while-condition  =>  TRUE
[03:05:12.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.361]        // while-condition  =>  TRUE
[03:05:12.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.362]        // while-condition  =>  TRUE
[03:05:12.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.365]        // while-condition  =>  TRUE
[03:05:12.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.365]        // while-condition  =>  TRUE
[03:05:12.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.371]        // while-condition  =>  TRUE
[03:05:12.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.373]        // while-condition  =>  TRUE
[03:05:12.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.375]        // while-condition  =>  TRUE
[03:05:12.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.381]        // while-condition  =>  TRUE
[03:05:12.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.383]        // while-condition  =>  TRUE
[03:05:12.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.385]        // while-condition  =>  TRUE
[03:05:12.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.386]        // while-condition  =>  TRUE
[03:05:12.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.388]        // while-condition  =>  TRUE
[03:05:12.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.390]        // while-condition  =>  TRUE
[03:05:12.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.392]        // while-condition  =>  TRUE
[03:05:12.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.393]        // while-condition  =>  TRUE
[03:05:12.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.395]        // while-condition  =>  TRUE
[03:05:12.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.397]        // while-condition  =>  TRUE
[03:05:12.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.399]        // while-condition  =>  TRUE
[03:05:12.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.400]        // while-condition  =>  TRUE
[03:05:12.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.402]        // while-condition  =>  TRUE
[03:05:12.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.404]        // while-condition  =>  TRUE
[03:05:12.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.406]        // while-condition  =>  TRUE
[03:05:12.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.407]        // while-condition  =>  TRUE
[03:05:12.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.409]        // while-condition  =>  TRUE
[03:05:12.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.411]        // while-condition  =>  TRUE
[03:05:12.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.413]        // while-condition  =>  TRUE
[03:05:12.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.414]        // while-condition  =>  TRUE
[03:05:12.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.416]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.416]        // while-condition  =>  TRUE
[03:05:12.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.418]        // while-condition  =>  TRUE
[03:05:12.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.420]        // while-condition  =>  TRUE
[03:05:12.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.422]        // while-condition  =>  TRUE
[03:05:12.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.423]        // while-condition  =>  TRUE
[03:05:12.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.427]        // while-condition  =>  TRUE
[03:05:12.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.429]        // while-condition  =>  TRUE
[03:05:12.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.430]        // while-condition  =>  TRUE
[03:05:12.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.432]        // while-condition  =>  TRUE
[03:05:12.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.434]        // while-condition  =>  TRUE
[03:05:12.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.436]        // while-condition  =>  TRUE
[03:05:12.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.437]        // while-condition  =>  TRUE
[03:05:12.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.439]        // while-condition  =>  TRUE
[03:05:12.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.441]        // while-condition  =>  TRUE
[03:05:12.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.443]        // while-condition  =>  TRUE
[03:05:12.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.444]        // while-condition  =>  TRUE
[03:05:12.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.446]        // while-condition  =>  TRUE
[03:05:12.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.448]        // while-condition  =>  TRUE
[03:05:12.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.450]        // while-condition  =>  TRUE
[03:05:12.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.451]        // while-condition  =>  TRUE
[03:05:12.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.453]        // while-condition  =>  TRUE
[03:05:12.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.455]        // while-condition  =>  TRUE
[03:05:12.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.459]        // while-condition  =>  TRUE
[03:05:12.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.461]        // while-condition  =>  TRUE
[03:05:12.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.463]        // while-condition  =>  TRUE
[03:05:12.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.466]        // while-condition  =>  TRUE
[03:05:12.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.468]        // while-condition  =>  TRUE
[03:05:12.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.469]        // while-condition  =>  TRUE
[03:05:12.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.472]        // while-condition  =>  TRUE
[03:05:12.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.474]        // while-condition  =>  TRUE
[03:05:12.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.476]        // while-condition  =>  TRUE
[03:05:12.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.477]        // while-condition  =>  TRUE
[03:05:12.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.479]        // while-condition  =>  TRUE
[03:05:12.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.481]        // while-condition  =>  TRUE
[03:05:12.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.484]        // while-condition  =>  TRUE
[03:05:12.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.485]        // while-condition  =>  TRUE
[03:05:12.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.487]        // while-condition  =>  TRUE
[03:05:12.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.489]        // while-condition  =>  TRUE
[03:05:12.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.490]        // while-condition  =>  TRUE
[03:05:12.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.492]        // while-condition  =>  TRUE
[03:05:12.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.494]        // while-condition  =>  TRUE
[03:05:12.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.496]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.496]        // while-condition  =>  TRUE
[03:05:12.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.498]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.498]        // while-condition  =>  TRUE
[03:05:12.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.499]        // while-condition  =>  TRUE
[03:05:12.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.501]        // while-condition  =>  TRUE
[03:05:12.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.503]        // while-condition  =>  TRUE
[03:05:12.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.505]        // while-condition  =>  TRUE
[03:05:12.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.507]        // while-condition  =>  TRUE
[03:05:12.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.508]        // while-condition  =>  TRUE
[03:05:12.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.510]        // while-condition  =>  TRUE
[03:05:12.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.512]        // while-condition  =>  TRUE
[03:05:12.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.513]        // while-condition  =>  TRUE
[03:05:12.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.515]        // while-condition  =>  TRUE
[03:05:12.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.517]        // while-condition  =>  TRUE
[03:05:12.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.520]        // while-condition  =>  TRUE
[03:05:12.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.521]        // while-condition  =>  TRUE
[03:05:12.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.523]        // while-condition  =>  TRUE
[03:05:12.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.524]        // while-condition  =>  TRUE
[03:05:12.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.528]        // while-condition  =>  TRUE
[03:05:12.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.530]        // while-condition  =>  TRUE
[03:05:12.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.531]        // while-condition  =>  TRUE
[03:05:12.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.533]        // while-condition  =>  TRUE
[03:05:12.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.535]        // while-condition  =>  TRUE
[03:05:12.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.537]        // while-condition  =>  TRUE
[03:05:12.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.538]        // while-condition  =>  TRUE
[03:05:12.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.540]        // while-condition  =>  TRUE
[03:05:12.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.541]        // while-condition  =>  TRUE
[03:05:12.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.543]        // while-condition  =>  TRUE
[03:05:12.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.545]        // while-condition  =>  TRUE
[03:05:12.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.546]        // while-condition  =>  TRUE
[03:05:12.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.549]        // while-condition  =>  TRUE
[03:05:12.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.551]        // while-condition  =>  TRUE
[03:05:12.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.552]        // while-condition  =>  TRUE
[03:05:12.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.553]        // while-condition  =>  TRUE
[03:05:12.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.555]        // while-condition  =>  TRUE
[03:05:12.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.558]        // while-condition  =>  TRUE
[03:05:12.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.560]        // while-condition  =>  TRUE
[03:05:12.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.566]        // while-condition  =>  TRUE
[03:05:12.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.567]        // while-condition  =>  TRUE
[03:05:12.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.571]        // while-condition  =>  TRUE
[03:05:12.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.573]        // while-condition  =>  TRUE
[03:05:12.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.575]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.575]        // while-condition  =>  TRUE
[03:05:12.575]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.576]        // while-condition  =>  TRUE
[03:05:12.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.578]        // while-condition  =>  TRUE
[03:05:12.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.581]        // while-condition  =>  TRUE
[03:05:12.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.582]        // while-condition  =>  TRUE
[03:05:12.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.584]        // while-condition  =>  TRUE
[03:05:12.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.587]        // while-condition  =>  TRUE
[03:05:12.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.588]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.589]        // while-condition  =>  TRUE
[03:05:12.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.591]        // while-condition  =>  TRUE
[03:05:12.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.592]        // while-condition  =>  TRUE
[03:05:12.592]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.594]        // while-condition  =>  TRUE
[03:05:12.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.595]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.595]        // while-condition  =>  TRUE
[03:05:12.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.597]        // while-condition  =>  TRUE
[03:05:12.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.598]        // while-condition  =>  TRUE
[03:05:12.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.601]        // while-condition  =>  TRUE
[03:05:12.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.601]        // while-condition  =>  TRUE
[03:05:12.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.603]        // while-condition  =>  TRUE
[03:05:12.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.605]        // while-condition  =>  TRUE
[03:05:12.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.608]        // while-condition  =>  TRUE
[03:05:12.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.609]        // while-condition  =>  TRUE
[03:05:12.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.612]        // while-condition  =>  TRUE
[03:05:12.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.613]        // while-condition  =>  TRUE
[03:05:12.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.615]        // while-condition  =>  TRUE
[03:05:12.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.616]        // while-condition  =>  TRUE
[03:05:12.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.618]        // while-condition  =>  TRUE
[03:05:12.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.619]        // while-condition  =>  TRUE
[03:05:12.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.621]        // while-condition  =>  TRUE
[03:05:12.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.623]        // while-condition  =>  TRUE
[03:05:12.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.625]        // while-condition  =>  TRUE
[03:05:12.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.626]        // while-condition  =>  TRUE
[03:05:12.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.628]        // while-condition  =>  TRUE
[03:05:12.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.631]        // while-condition  =>  TRUE
[03:05:12.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.633]        // while-condition  =>  TRUE
[03:05:12.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.634]        // while-condition  =>  TRUE
[03:05:12.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.636]        // while-condition  =>  TRUE
[03:05:12.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.638]        // while-condition  =>  TRUE
[03:05:12.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.639]        // while-condition  =>  TRUE
[03:05:12.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.641]        // while-condition  =>  TRUE
[03:05:12.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.643]        // while-condition  =>  TRUE
[03:05:12.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.645]        // while-condition  =>  TRUE
[03:05:12.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.646]        // while-condition  =>  TRUE
[03:05:12.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.648]        // while-condition  =>  TRUE
[03:05:12.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.650]        // while-condition  =>  TRUE
[03:05:12.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.652]        // while-condition  =>  TRUE
[03:05:12.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.653]        // while-condition  =>  TRUE
[03:05:12.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.655]        // while-condition  =>  TRUE
[03:05:12.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.657]        // while-condition  =>  TRUE
[03:05:12.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.658]        // while-condition  =>  TRUE
[03:05:12.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.660]        // while-condition  =>  TRUE
[03:05:12.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.663]        // while-condition  =>  TRUE
[03:05:12.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.665]        // while-condition  =>  TRUE
[03:05:12.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.666]        // while-condition  =>  TRUE
[03:05:12.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.668]        // while-condition  =>  TRUE
[03:05:12.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.670]        // while-condition  =>  TRUE
[03:05:12.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.672]        // while-condition  =>  TRUE
[03:05:12.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.674]        // while-condition  =>  TRUE
[03:05:12.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.675]        // while-condition  =>  TRUE
[03:05:12.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.677]        // while-condition  =>  TRUE
[03:05:12.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.678]        // while-condition  =>  TRUE
[03:05:12.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.680]        // while-condition  =>  TRUE
[03:05:12.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.682]        // while-condition  =>  TRUE
[03:05:12.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.684]        // while-condition  =>  TRUE
[03:05:12.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.685]        // while-condition  =>  TRUE
[03:05:12.685]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.687]        // while-condition  =>  TRUE
[03:05:12.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.689]        // while-condition  =>  TRUE
[03:05:12.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.691]        // while-condition  =>  TRUE
[03:05:12.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.692]        // while-condition  =>  TRUE
[03:05:12.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.694]        // while-condition  =>  TRUE
[03:05:12.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.700]        // while-condition  =>  TRUE
[03:05:12.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.702]        // while-condition  =>  TRUE
[03:05:12.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.704]        // while-condition  =>  TRUE
[03:05:12.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.705]        // while-condition  =>  TRUE
[03:05:12.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.706]        // while-condition  =>  TRUE
[03:05:12.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.708]        // while-condition  =>  TRUE
[03:05:12.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.710]        // while-condition  =>  TRUE
[03:05:12.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.712]        // while-condition  =>  TRUE
[03:05:12.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.713]        // while-condition  =>  TRUE
[03:05:12.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.715]        // while-condition  =>  TRUE
[03:05:12.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.717]        // while-condition  =>  TRUE
[03:05:12.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.719]        // while-condition  =>  TRUE
[03:05:12.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.719]        // while-condition  =>  TRUE
[03:05:12.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.722]        // while-condition  =>  TRUE
[03:05:12.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.723]        // while-condition  =>  TRUE
[03:05:12.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.726]        // while-condition  =>  TRUE
[03:05:12.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.727]        // while-condition  =>  TRUE
[03:05:12.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.729]        // while-condition  =>  TRUE
[03:05:12.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.731]        // while-condition  =>  TRUE
[03:05:12.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.733]        // while-condition  =>  TRUE
[03:05:12.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.735]        // while-condition  =>  TRUE
[03:05:12.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.736]        // while-condition  =>  TRUE
[03:05:12.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.738]        // while-condition  =>  TRUE
[03:05:12.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.740]        // while-condition  =>  TRUE
[03:05:12.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.741]        // while-condition  =>  TRUE
[03:05:12.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.743]        // while-condition  =>  TRUE
[03:05:12.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.745]        // while-condition  =>  TRUE
[03:05:12.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.747]        // while-condition  =>  TRUE
[03:05:12.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.748]        // while-condition  =>  TRUE
[03:05:12.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.750]        // while-condition  =>  TRUE
[03:05:12.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.752]        // while-condition  =>  TRUE
[03:05:12.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.753]        // while-condition  =>  TRUE
[03:05:12.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.755]        // while-condition  =>  TRUE
[03:05:12.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.757]        // while-condition  =>  TRUE
[03:05:12.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.759]        // while-condition  =>  TRUE
[03:05:12.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.760]        // while-condition  =>  TRUE
[03:05:12.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.762]        // while-condition  =>  TRUE
[03:05:12.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.765]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.765]        // while-condition  =>  TRUE
[03:05:12.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.767]        // while-condition  =>  TRUE
[03:05:12.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.768]        // while-condition  =>  TRUE
[03:05:12.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.770]        // while-condition  =>  TRUE
[03:05:12.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.772]        // while-condition  =>  TRUE
[03:05:12.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.774]        // while-condition  =>  TRUE
[03:05:12.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.775]        // while-condition  =>  TRUE
[03:05:12.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.778]        // while-condition  =>  TRUE
[03:05:12.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.779]        // while-condition  =>  TRUE
[03:05:12.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.781]        // while-condition  =>  TRUE
[03:05:12.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.784]        // while-condition  =>  TRUE
[03:05:12.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.786]        // while-condition  =>  TRUE
[03:05:12.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.788]        // while-condition  =>  TRUE
[03:05:12.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.789]        // while-condition  =>  TRUE
[03:05:12.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.791]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.792]        // while-condition  =>  TRUE
[03:05:12.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.793]        // while-condition  =>  TRUE
[03:05:12.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.795]        // while-condition  =>  TRUE
[03:05:12.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.797]        // while-condition  =>  TRUE
[03:05:12.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.799]        // while-condition  =>  TRUE
[03:05:12.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.801]        // while-condition  =>  TRUE
[03:05:12.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.803]        // while-condition  =>  TRUE
[03:05:12.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.804]        // while-condition  =>  TRUE
[03:05:12.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.806]        // while-condition  =>  TRUE
[03:05:12.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.807]        // while-condition  =>  TRUE
[03:05:12.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.809]        // while-condition  =>  TRUE
[03:05:12.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.812]        // while-condition  =>  TRUE
[03:05:12.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.813]        // while-condition  =>  TRUE
[03:05:12.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.815]        // while-condition  =>  TRUE
[03:05:12.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.816]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:12.816]        // while-condition  =>  TRUE
[03:05:12.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:12.817]        // while  =>  TIMEOUT
[03:05:12.817]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:05:12.817]      </control>
[03:05:12.817]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:05:12.817]        // if-block "(__protocol & 0xFFFF) == 1"
[03:05:12.817]          // =>  FALSE
[03:05:12.817]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:05:12.817]      </control>
[03:05:12.817]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:05:12.817]        // if-block "(__protocol & 0xFFFF) == 2"
[03:05:12.817]          // =>  TRUE
[03:05:12.817]        <block atomic="false" info="">
[03:05:12.817]          Message(0, "executing SWD power up");
[03:05:12.820]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:05:12.821]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:05:12.821]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:05:12.823]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:05:12.823]        </block>
[03:05:12.823]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:05:12.823]      </control>
[03:05:12.823]      // end if-block "powered_down"
[03:05:12.823]    </control>
[03:05:12.823]    <block atomic="false" info="">
[03:05:12.823]      __var DEBUG_PORT_VAL    = 0;
[03:05:12.823]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:05:12.823]      __var ACCESS_POINT_VAL  = 0;
[03:05:12.823]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:05:12.823]      __ap = 1; 
[03:05:12.823]        // -> [__ap <= 0x00000001]
[03:05:12.825]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:05:12.837]  
[03:05:12.837]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[03:05:12.837]  
[03:05:12.838]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:05:12.838]    </block>
[03:05:12.838]  </sequence>
[03:05:12.839]  
[03:05:17.517]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:17.517]  
[03:05:17.518]  <debugvars>
[03:05:17.518]    // Pre-defined
[03:05:17.518]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:17.518]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:17.518]    __dp=0x00000000
[03:05:17.518]    __ap=0x00000000
[03:05:17.518]    __traceout=0x00000000      (Trace Disabled)
[03:05:17.518]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:17.518]    __FlashAddr=0x00000000
[03:05:17.518]    __FlashLen=0x00000000
[03:05:17.519]    __FlashArg=0x00000000
[03:05:17.519]    __FlashOp=0x00000000
[03:05:17.519]    __Result=0x00000000
[03:05:17.519]  </debugvars>
[03:05:17.519]  
[03:05:17.519]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:17.519]    <block atomic="false" info="">
[03:05:17.519]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:17.519]        // -> [isSWJ <= 0x00000001]
[03:05:17.519]      __var hasDormant = __protocol & 0x00020000;
[03:05:17.519]        // -> [hasDormant <= 0x00000000]
[03:05:17.519]      __var protType   = __protocol & 0x0000FFFF;
[03:05:17.520]        // -> [protType <= 0x00000002]
[03:05:17.520]    </block>
[03:05:17.520]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:17.520]      // if-block "protType == 1"
[03:05:17.520]        // =>  FALSE
[03:05:17.520]      // skip if-block "protType == 1"
[03:05:17.520]    </control>
[03:05:17.520]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:17.520]      // if-block "protType == 2"
[03:05:17.520]        // =>  TRUE
[03:05:17.520]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:17.520]        // if-block "isSWJ"
[03:05:17.520]          // =>  TRUE
[03:05:17.520]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:17.520]          // if-block "hasDormant"
[03:05:17.520]            // =>  FALSE
[03:05:17.520]          // skip if-block "hasDormant"
[03:05:17.521]        </control>
[03:05:17.521]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:17.521]          // if-block "!hasDormant"
[03:05:17.521]            // =>  TRUE
[03:05:17.521]          <block atomic="false" info="">
[03:05:17.521]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:17.523]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:17.523]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:17.525]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:17.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:17.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:17.527]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:17.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:17.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:17.529]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:17.529]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:17.531]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:17.531]          </block>
[03:05:17.531]          // end if-block "!hasDormant"
[03:05:17.531]        </control>
[03:05:17.531]        // end if-block "isSWJ"
[03:05:17.531]      </control>
[03:05:17.531]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:17.531]        // if-block "!isSWJ"
[03:05:17.531]          // =>  FALSE
[03:05:17.531]        // skip if-block "!isSWJ"
[03:05:17.531]      </control>
[03:05:17.532]      <block atomic="false" info="">
[03:05:17.532]        ReadDP(0x0);
[03:05:17.534]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:17.534]      </block>
[03:05:17.534]      // end if-block "protType == 2"
[03:05:17.534]    </control>
[03:05:17.534]  </sequence>
[03:05:17.534]  
[03:05:17.537]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:05:17.537]  
[03:05:17.537]  <debugvars>
[03:05:17.537]    // Pre-defined
[03:05:17.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:17.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:17.537]    __dp=0x00000000
[03:05:17.537]    __ap=0x00000000
[03:05:17.537]    __traceout=0x00000000      (Trace Disabled)
[03:05:17.538]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:17.538]    __FlashAddr=0x00000000
[03:05:17.538]    __FlashLen=0x00000000
[03:05:17.538]    __FlashArg=0x00000000
[03:05:17.538]    __FlashOp=0x00000000
[03:05:17.538]    __Result=0x00000000
[03:05:17.538]  </debugvars>
[03:05:17.538]  
[03:05:17.538]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:05:17.538]    <block atomic="false" info="">
[03:05:17.538]      __var SW_DP_ABORT       = 0x0;
[03:05:17.538]        // -> [SW_DP_ABORT <= 0x00000000]
[03:05:17.538]      __var DP_CTRL_STAT      = 0x4;
[03:05:17.538]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:05:17.538]      __var DP_SELECT         = 0x8;
[03:05:17.538]        // -> [DP_SELECT <= 0x00000008]
[03:05:17.540]      __var powered_down      = 0;
[03:05:17.540]        // -> [powered_down <= 0x00000000]
[03:05:17.540]      WriteDP(DP_SELECT, 0x00000000);
[03:05:17.542]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:05:17.542]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:05:17.543]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:05:17.543]        // -> [powered_down <= 0x00000001]
[03:05:17.543]    </block>
[03:05:17.543]    <control if="powered_down" while="" timeout="0" info="">
[03:05:17.543]      // if-block "powered_down"
[03:05:17.543]        // =>  TRUE
[03:05:17.544]      <block atomic="false" info="">
[03:05:17.544]        Message(0, "Debug/System power-up request sent");
[03:05:17.545]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:05:17.547]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:05:17.547]      </block>
[03:05:17.547]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:05:17.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.548]        // while-condition  =>  TRUE
[03:05:17.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.551]        // while-condition  =>  TRUE
[03:05:17.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.553]        // while-condition  =>  TRUE
[03:05:17.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.555]        // while-condition  =>  TRUE
[03:05:17.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.557]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.557]        // while-condition  =>  TRUE
[03:05:17.557]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.558]        // while-condition  =>  TRUE
[03:05:17.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.559]        // while-condition  =>  TRUE
[03:05:17.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.561]        // while-condition  =>  TRUE
[03:05:17.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.563]        // while-condition  =>  TRUE
[03:05:17.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.565]        // while-condition  =>  TRUE
[03:05:17.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.567]        // while-condition  =>  TRUE
[03:05:17.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.569]        // while-condition  =>  TRUE
[03:05:17.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.571]        // while-condition  =>  TRUE
[03:05:17.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.573]        // while-condition  =>  TRUE
[03:05:17.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.574]        // while-condition  =>  TRUE
[03:05:17.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.576]        // while-condition  =>  TRUE
[03:05:17.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.579]        // while-condition  =>  TRUE
[03:05:17.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.580]        // while-condition  =>  TRUE
[03:05:17.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.582]        // while-condition  =>  TRUE
[03:05:17.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.584]        // while-condition  =>  TRUE
[03:05:17.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.585]        // while-condition  =>  TRUE
[03:05:17.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.587]        // while-condition  =>  TRUE
[03:05:17.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.589]        // while-condition  =>  TRUE
[03:05:17.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.591]        // while-condition  =>  TRUE
[03:05:17.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.593]        // while-condition  =>  TRUE
[03:05:17.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.594]        // while-condition  =>  TRUE
[03:05:17.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.596]        // while-condition  =>  TRUE
[03:05:17.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.597]        // while-condition  =>  TRUE
[03:05:17.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.599]        // while-condition  =>  TRUE
[03:05:17.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.601]        // while-condition  =>  TRUE
[03:05:17.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.603]        // while-condition  =>  TRUE
[03:05:17.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.605]        // while-condition  =>  TRUE
[03:05:17.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.606]        // while-condition  =>  TRUE
[03:05:17.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.608]        // while-condition  =>  TRUE
[03:05:17.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.610]        // while-condition  =>  TRUE
[03:05:17.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.611]        // while-condition  =>  TRUE
[03:05:17.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.613]        // while-condition  =>  TRUE
[03:05:17.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.615]        // while-condition  =>  TRUE
[03:05:17.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.617]        // while-condition  =>  TRUE
[03:05:17.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.619]        // while-condition  =>  TRUE
[03:05:17.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.620]        // while-condition  =>  TRUE
[03:05:17.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.622]        // while-condition  =>  TRUE
[03:05:17.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.623]        // while-condition  =>  TRUE
[03:05:17.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.625]        // while-condition  =>  TRUE
[03:05:17.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.627]        // while-condition  =>  TRUE
[03:05:17.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.629]        // while-condition  =>  TRUE
[03:05:17.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.630]        // while-condition  =>  TRUE
[03:05:17.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.632]        // while-condition  =>  TRUE
[03:05:17.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.633]        // while-condition  =>  TRUE
[03:05:17.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.636]        // while-condition  =>  TRUE
[03:05:17.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.638]        // while-condition  =>  TRUE
[03:05:17.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.639]        // while-condition  =>  TRUE
[03:05:17.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.641]        // while-condition  =>  TRUE
[03:05:17.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.643]        // while-condition  =>  TRUE
[03:05:17.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.644]        // while-condition  =>  TRUE
[03:05:17.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.646]        // while-condition  =>  TRUE
[03:05:17.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.648]        // while-condition  =>  TRUE
[03:05:17.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.650]        // while-condition  =>  TRUE
[03:05:17.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.652]        // while-condition  =>  TRUE
[03:05:17.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.653]        // while-condition  =>  TRUE
[03:05:17.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.655]        // while-condition  =>  TRUE
[03:05:17.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.657]        // while-condition  =>  TRUE
[03:05:17.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.658]        // while-condition  =>  TRUE
[03:05:17.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.660]        // while-condition  =>  TRUE
[03:05:17.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.662]        // while-condition  =>  TRUE
[03:05:17.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.664]        // while-condition  =>  TRUE
[03:05:17.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.666]        // while-condition  =>  TRUE
[03:05:17.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.668]        // while-condition  =>  TRUE
[03:05:17.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.670]        // while-condition  =>  TRUE
[03:05:17.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.672]        // while-condition  =>  TRUE
[03:05:17.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.674]        // while-condition  =>  TRUE
[03:05:17.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.676]        // while-condition  =>  TRUE
[03:05:17.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.677]        // while-condition  =>  TRUE
[03:05:17.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.680]        // while-condition  =>  TRUE
[03:05:17.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.682]        // while-condition  =>  TRUE
[03:05:17.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.684]        // while-condition  =>  TRUE
[03:05:17.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.686]        // while-condition  =>  TRUE
[03:05:17.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.687]        // while-condition  =>  TRUE
[03:05:17.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.689]        // while-condition  =>  TRUE
[03:05:17.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.691]        // while-condition  =>  TRUE
[03:05:17.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.694]        // while-condition  =>  TRUE
[03:05:17.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.695]        // while-condition  =>  TRUE
[03:05:17.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.697]        // while-condition  =>  TRUE
[03:05:17.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.698]        // while-condition  =>  TRUE
[03:05:17.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.700]        // while-condition  =>  TRUE
[03:05:17.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.702]        // while-condition  =>  TRUE
[03:05:17.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.704]        // while-condition  =>  TRUE
[03:05:17.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.705]        // while-condition  =>  TRUE
[03:05:17.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.707]        // while-condition  =>  TRUE
[03:05:17.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.709]        // while-condition  =>  TRUE
[03:05:17.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.711]        // while-condition  =>  TRUE
[03:05:17.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.712]        // while-condition  =>  TRUE
[03:05:17.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.714]        // while-condition  =>  TRUE
[03:05:17.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.715]        // while-condition  =>  TRUE
[03:05:17.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.717]        // while-condition  =>  TRUE
[03:05:17.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.719]        // while-condition  =>  TRUE
[03:05:17.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.721]        // while-condition  =>  TRUE
[03:05:17.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.723]        // while-condition  =>  TRUE
[03:05:17.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.724]        // while-condition  =>  TRUE
[03:05:17.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.726]        // while-condition  =>  TRUE
[03:05:17.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.727]        // while-condition  =>  TRUE
[03:05:17.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.729]        // while-condition  =>  TRUE
[03:05:17.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.731]        // while-condition  =>  TRUE
[03:05:17.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.733]        // while-condition  =>  TRUE
[03:05:17.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.735]        // while-condition  =>  TRUE
[03:05:17.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.736]        // while-condition  =>  TRUE
[03:05:17.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.738]        // while-condition  =>  TRUE
[03:05:17.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.740]        // while-condition  =>  TRUE
[03:05:17.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.741]        // while-condition  =>  TRUE
[03:05:17.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.743]        // while-condition  =>  TRUE
[03:05:17.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.744]        // while-condition  =>  TRUE
[03:05:17.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.747]        // while-condition  =>  TRUE
[03:05:17.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.749]        // while-condition  =>  TRUE
[03:05:17.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.751]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.751]        // while-condition  =>  TRUE
[03:05:17.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.753]        // while-condition  =>  TRUE
[03:05:17.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.754]        // while-condition  =>  TRUE
[03:05:17.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.755]        // while-condition  =>  TRUE
[03:05:17.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.757]        // while-condition  =>  TRUE
[03:05:17.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.759]        // while-condition  =>  TRUE
[03:05:17.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.761]        // while-condition  =>  TRUE
[03:05:17.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.762]        // while-condition  =>  TRUE
[03:05:17.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.764]        // while-condition  =>  TRUE
[03:05:17.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.766]        // while-condition  =>  TRUE
[03:05:17.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.768]        // while-condition  =>  TRUE
[03:05:17.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.769]        // while-condition  =>  TRUE
[03:05:17.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.772]        // while-condition  =>  TRUE
[03:05:17.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.773]        // while-condition  =>  TRUE
[03:05:17.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.775]        // while-condition  =>  TRUE
[03:05:17.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.776]        // while-condition  =>  TRUE
[03:05:17.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.778]        // while-condition  =>  TRUE
[03:05:17.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.780]        // while-condition  =>  TRUE
[03:05:17.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.784]        // while-condition  =>  TRUE
[03:05:17.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.785]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.785]        // while-condition  =>  TRUE
[03:05:17.785]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.787]        // while-condition  =>  TRUE
[03:05:17.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.789]        // while-condition  =>  TRUE
[03:05:17.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.790]        // while-condition  =>  TRUE
[03:05:17.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.792]        // while-condition  =>  TRUE
[03:05:17.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.794]        // while-condition  =>  TRUE
[03:05:17.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.796]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.796]        // while-condition  =>  TRUE
[03:05:17.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.798]        // while-condition  =>  TRUE
[03:05:17.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.799]        // while-condition  =>  TRUE
[03:05:17.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.801]        // while-condition  =>  TRUE
[03:05:17.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.803]        // while-condition  =>  TRUE
[03:05:17.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.804]        // while-condition  =>  TRUE
[03:05:17.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.806]        // while-condition  =>  TRUE
[03:05:17.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.808]        // while-condition  =>  TRUE
[03:05:17.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.809]        // while-condition  =>  TRUE
[03:05:17.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.811]        // while-condition  =>  TRUE
[03:05:17.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.813]        // while-condition  =>  TRUE
[03:05:17.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.815]        // while-condition  =>  TRUE
[03:05:17.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.816]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.816]        // while-condition  =>  TRUE
[03:05:17.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.818]        // while-condition  =>  TRUE
[03:05:17.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.819]        // while-condition  =>  TRUE
[03:05:17.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.821]        // while-condition  =>  TRUE
[03:05:17.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.823]        // while-condition  =>  TRUE
[03:05:17.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.824]        // while-condition  =>  TRUE
[03:05:17.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.826]        // while-condition  =>  TRUE
[03:05:17.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.828]        // while-condition  =>  TRUE
[03:05:17.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.830]        // while-condition  =>  TRUE
[03:05:17.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.831]        // while-condition  =>  TRUE
[03:05:17.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.832]        // while-condition  =>  TRUE
[03:05:17.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.834]        // while-condition  =>  TRUE
[03:05:17.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.837]        // while-condition  =>  TRUE
[03:05:17.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.838]        // while-condition  =>  TRUE
[03:05:17.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.840]        // while-condition  =>  TRUE
[03:05:17.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.842]        // while-condition  =>  TRUE
[03:05:17.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.844]        // while-condition  =>  TRUE
[03:05:17.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.845]        // while-condition  =>  TRUE
[03:05:17.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.847]        // while-condition  =>  TRUE
[03:05:17.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.849]        // while-condition  =>  TRUE
[03:05:17.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.851]        // while-condition  =>  TRUE
[03:05:17.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.853]        // while-condition  =>  TRUE
[03:05:17.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.855]        // while-condition  =>  TRUE
[03:05:17.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.857]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.857]        // while-condition  =>  TRUE
[03:05:17.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.858]        // while-condition  =>  TRUE
[03:05:17.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.860]        // while-condition  =>  TRUE
[03:05:17.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.861]        // while-condition  =>  TRUE
[03:05:17.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.863]        // while-condition  =>  TRUE
[03:05:17.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.865]        // while-condition  =>  TRUE
[03:05:17.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.867]        // while-condition  =>  TRUE
[03:05:17.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.868]        // while-condition  =>  TRUE
[03:05:17.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.869]        // while-condition  =>  TRUE
[03:05:17.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.872]        // while-condition  =>  TRUE
[03:05:17.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.873]        // while-condition  =>  TRUE
[03:05:17.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.875]        // while-condition  =>  TRUE
[03:05:17.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.877]        // while-condition  =>  TRUE
[03:05:17.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.878]        // while-condition  =>  TRUE
[03:05:17.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.880]        // while-condition  =>  TRUE
[03:05:17.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.882]        // while-condition  =>  TRUE
[03:05:17.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.883]        // while-condition  =>  TRUE
[03:05:17.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.886]        // while-condition  =>  TRUE
[03:05:17.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.888]        // while-condition  =>  TRUE
[03:05:17.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.889]        // while-condition  =>  TRUE
[03:05:17.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.891]        // while-condition  =>  TRUE
[03:05:17.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.904]        // while-condition  =>  TRUE
[03:05:17.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.906]        // while-condition  =>  TRUE
[03:05:17.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.907]        // while-condition  =>  TRUE
[03:05:17.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.910]        // while-condition  =>  TRUE
[03:05:17.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.912]        // while-condition  =>  TRUE
[03:05:17.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.916]        // while-condition  =>  TRUE
[03:05:17.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.920]        // while-condition  =>  TRUE
[03:05:17.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.921]        // while-condition  =>  TRUE
[03:05:17.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.925]        // while-condition  =>  TRUE
[03:05:17.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.926]        // while-condition  =>  TRUE
[03:05:17.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.928]        // while-condition  =>  TRUE
[03:05:17.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.930]        // while-condition  =>  TRUE
[03:05:17.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.932]        // while-condition  =>  TRUE
[03:05:17.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.934]        // while-condition  =>  TRUE
[03:05:17.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.935]        // while-condition  =>  TRUE
[03:05:17.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.937]        // while-condition  =>  TRUE
[03:05:17.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.939]        // while-condition  =>  TRUE
[03:05:17.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.940]        // while-condition  =>  TRUE
[03:05:17.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.942]        // while-condition  =>  TRUE
[03:05:17.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.943]        // while-condition  =>  TRUE
[03:05:17.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.945]        // while-condition  =>  TRUE
[03:05:17.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.947]        // while-condition  =>  TRUE
[03:05:17.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.949]        // while-condition  =>  TRUE
[03:05:17.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.951]        // while-condition  =>  TRUE
[03:05:17.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.953]        // while-condition  =>  TRUE
[03:05:17.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.955]        // while-condition  =>  TRUE
[03:05:17.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.957]        // while-condition  =>  TRUE
[03:05:17.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.959]        // while-condition  =>  TRUE
[03:05:17.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.961]        // while-condition  =>  TRUE
[03:05:17.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.962]        // while-condition  =>  TRUE
[03:05:17.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.963]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.964]        // while-condition  =>  TRUE
[03:05:17.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.965]        // while-condition  =>  TRUE
[03:05:17.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.967]        // while-condition  =>  TRUE
[03:05:17.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.969]        // while-condition  =>  TRUE
[03:05:17.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.970]        // while-condition  =>  TRUE
[03:05:17.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.972]        // while-condition  =>  TRUE
[03:05:17.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.974]        // while-condition  =>  TRUE
[03:05:17.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.976]        // while-condition  =>  TRUE
[03:05:17.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.977]        // while-condition  =>  TRUE
[03:05:17.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.979]        // while-condition  =>  TRUE
[03:05:17.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.981]        // while-condition  =>  TRUE
[03:05:17.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.983]        // while-condition  =>  TRUE
[03:05:17.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.985]        // while-condition  =>  TRUE
[03:05:17.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.987]        // while-condition  =>  TRUE
[03:05:17.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.990]        // while-condition  =>  TRUE
[03:05:17.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.991]        // while-condition  =>  TRUE
[03:05:17.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.993]        // while-condition  =>  TRUE
[03:05:17.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:17.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:17.997]        // while-condition  =>  TRUE
[03:05:17.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.001]        // while-condition  =>  TRUE
[03:05:18.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.003]        // while-condition  =>  TRUE
[03:05:18.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.007]        // while-condition  =>  TRUE
[03:05:18.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.010]        // while-condition  =>  TRUE
[03:05:18.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.011]        // while-condition  =>  TRUE
[03:05:18.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.013]        // while-condition  =>  TRUE
[03:05:18.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.014]        // while-condition  =>  TRUE
[03:05:18.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.016]        // while-condition  =>  TRUE
[03:05:18.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.018]        // while-condition  =>  TRUE
[03:05:18.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.020]        // while-condition  =>  TRUE
[03:05:18.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.022]        // while-condition  =>  TRUE
[03:05:18.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.024]        // while-condition  =>  TRUE
[03:05:18.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.025]        // while-condition  =>  TRUE
[03:05:18.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.027]        // while-condition  =>  TRUE
[03:05:18.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.029]        // while-condition  =>  TRUE
[03:05:18.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.031]        // while-condition  =>  TRUE
[03:05:18.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.032]        // while-condition  =>  TRUE
[03:05:18.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.034]        // while-condition  =>  TRUE
[03:05:18.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.037]        // while-condition  =>  TRUE
[03:05:18.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.038]        // while-condition  =>  TRUE
[03:05:18.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.039]        // while-condition  =>  TRUE
[03:05:18.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.041]        // while-condition  =>  TRUE
[03:05:18.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.043]        // while-condition  =>  TRUE
[03:05:18.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.045]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.045]        // while-condition  =>  TRUE
[03:05:18.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.046]        // while-condition  =>  TRUE
[03:05:18.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.048]        // while-condition  =>  TRUE
[03:05:18.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.050]        // while-condition  =>  TRUE
[03:05:18.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.052]        // while-condition  =>  TRUE
[03:05:18.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.053]        // while-condition  =>  TRUE
[03:05:18.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.056]        // while-condition  =>  TRUE
[03:05:18.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.058]        // while-condition  =>  TRUE
[03:05:18.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.060]        // while-condition  =>  TRUE
[03:05:18.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.062]        // while-condition  =>  TRUE
[03:05:18.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.063]        // while-condition  =>  TRUE
[03:05:18.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.065]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.065]        // while-condition  =>  TRUE
[03:05:18.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.067]        // while-condition  =>  TRUE
[03:05:18.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.068]        // while-condition  =>  TRUE
[03:05:18.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.070]        // while-condition  =>  TRUE
[03:05:18.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.072]        // while-condition  =>  TRUE
[03:05:18.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.073]        // while-condition  =>  TRUE
[03:05:18.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.075]        // while-condition  =>  TRUE
[03:05:18.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.076]        // while-condition  =>  TRUE
[03:05:18.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.078]        // while-condition  =>  TRUE
[03:05:18.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.080]        // while-condition  =>  TRUE
[03:05:18.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.082]        // while-condition  =>  TRUE
[03:05:18.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.084]        // while-condition  =>  TRUE
[03:05:18.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.086]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.086]        // while-condition  =>  TRUE
[03:05:18.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.087]        // while-condition  =>  TRUE
[03:05:18.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.090]        // while-condition  =>  TRUE
[03:05:18.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.091]        // while-condition  =>  TRUE
[03:05:18.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.093]        // while-condition  =>  TRUE
[03:05:18.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.095]        // while-condition  =>  TRUE
[03:05:18.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.095]        // while-condition  =>  TRUE
[03:05:18.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.098]        // while-condition  =>  TRUE
[03:05:18.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.100]        // while-condition  =>  TRUE
[03:05:18.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.102]        // while-condition  =>  TRUE
[03:05:18.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.104]        // while-condition  =>  TRUE
[03:05:18.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.106]        // while-condition  =>  TRUE
[03:05:18.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.108]        // while-condition  =>  TRUE
[03:05:18.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.110]        // while-condition  =>  TRUE
[03:05:18.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.111]        // while-condition  =>  TRUE
[03:05:18.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.113]        // while-condition  =>  TRUE
[03:05:18.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.115]        // while-condition  =>  TRUE
[03:05:18.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.117]        // while-condition  =>  TRUE
[03:05:18.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.118]        // while-condition  =>  TRUE
[03:05:18.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.120]        // while-condition  =>  TRUE
[03:05:18.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.122]        // while-condition  =>  TRUE
[03:05:18.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.124]        // while-condition  =>  TRUE
[03:05:18.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.125]        // while-condition  =>  TRUE
[03:05:18.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.127]        // while-condition  =>  TRUE
[03:05:18.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.128]        // while-condition  =>  TRUE
[03:05:18.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.130]        // while-condition  =>  TRUE
[03:05:18.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.132]        // while-condition  =>  TRUE
[03:05:18.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.134]        // while-condition  =>  TRUE
[03:05:18.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.136]        // while-condition  =>  TRUE
[03:05:18.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.138]        // while-condition  =>  TRUE
[03:05:18.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.139]        // while-condition  =>  TRUE
[03:05:18.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.141]        // while-condition  =>  TRUE
[03:05:18.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.142]        // while-condition  =>  TRUE
[03:05:18.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.145]        // while-condition  =>  TRUE
[03:05:18.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.146]        // while-condition  =>  TRUE
[03:05:18.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.148]        // while-condition  =>  TRUE
[03:05:18.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.150]        // while-condition  =>  TRUE
[03:05:18.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.152]        // while-condition  =>  TRUE
[03:05:18.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.154]        // while-condition  =>  TRUE
[03:05:18.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.156]        // while-condition  =>  TRUE
[03:05:18.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.158]        // while-condition  =>  TRUE
[03:05:18.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.160]        // while-condition  =>  TRUE
[03:05:18.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.162]        // while-condition  =>  TRUE
[03:05:18.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.164]        // while-condition  =>  TRUE
[03:05:18.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.166]        // while-condition  =>  TRUE
[03:05:18.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.167]        // while-condition  =>  TRUE
[03:05:18.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.168]        // while-condition  =>  TRUE
[03:05:18.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.170]        // while-condition  =>  TRUE
[03:05:18.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.172]        // while-condition  =>  TRUE
[03:05:18.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.174]        // while-condition  =>  TRUE
[03:05:18.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.176]        // while-condition  =>  TRUE
[03:05:18.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.177]        // while-condition  =>  TRUE
[03:05:18.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.179]        // while-condition  =>  TRUE
[03:05:18.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.180]        // while-condition  =>  TRUE
[03:05:18.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.182]        // while-condition  =>  TRUE
[03:05:18.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.184]        // while-condition  =>  TRUE
[03:05:18.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.186]        // while-condition  =>  TRUE
[03:05:18.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.188]        // while-condition  =>  TRUE
[03:05:18.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.189]        // while-condition  =>  TRUE
[03:05:18.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.191]        // while-condition  =>  TRUE
[03:05:18.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.194]        // while-condition  =>  TRUE
[03:05:18.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.195]        // while-condition  =>  TRUE
[03:05:18.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.198]        // while-condition  =>  TRUE
[03:05:18.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.200]        // while-condition  =>  TRUE
[03:05:18.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.201]        // while-condition  =>  TRUE
[03:05:18.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.203]        // while-condition  =>  TRUE
[03:05:18.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.206]        // while-condition  =>  TRUE
[03:05:18.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.207]        // while-condition  =>  TRUE
[03:05:18.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.208]        // while-condition  =>  TRUE
[03:05:18.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.210]        // while-condition  =>  TRUE
[03:05:18.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.212]        // while-condition  =>  TRUE
[03:05:18.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.214]        // while-condition  =>  TRUE
[03:05:18.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.215]        // while-condition  =>  TRUE
[03:05:18.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.216]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.217]        // while-condition  =>  TRUE
[03:05:18.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.219]        // while-condition  =>  TRUE
[03:05:18.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.221]        // while-condition  =>  TRUE
[03:05:18.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.222]        // while-condition  =>  TRUE
[03:05:18.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.224]        // while-condition  =>  TRUE
[03:05:18.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.227]        // while-condition  =>  TRUE
[03:05:18.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.228]        // while-condition  =>  TRUE
[03:05:18.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.230]        // while-condition  =>  TRUE
[03:05:18.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.232]        // while-condition  =>  TRUE
[03:05:18.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.234]        // while-condition  =>  TRUE
[03:05:18.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.235]        // while-condition  =>  TRUE
[03:05:18.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.237]        // while-condition  =>  TRUE
[03:05:18.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.238]        // while-condition  =>  TRUE
[03:05:18.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.241]        // while-condition  =>  TRUE
[03:05:18.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.242]        // while-condition  =>  TRUE
[03:05:18.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.243]        // while-condition  =>  TRUE
[03:05:18.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.245]        // while-condition  =>  TRUE
[03:05:18.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.248]        // while-condition  =>  TRUE
[03:05:18.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.249]        // while-condition  =>  TRUE
[03:05:18.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.250]        // while-condition  =>  TRUE
[03:05:18.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.252]        // while-condition  =>  TRUE
[03:05:18.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.255]        // while-condition  =>  TRUE
[03:05:18.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.256]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.256]        // while-condition  =>  TRUE
[03:05:18.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.257]        // while-condition  =>  TRUE
[03:05:18.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.259]        // while-condition  =>  TRUE
[03:05:18.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.263]        // while-condition  =>  TRUE
[03:05:18.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.265]        // while-condition  =>  TRUE
[03:05:18.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.267]        // while-condition  =>  TRUE
[03:05:18.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.269]        // while-condition  =>  TRUE
[03:05:18.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.270]        // while-condition  =>  TRUE
[03:05:18.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.272]        // while-condition  =>  TRUE
[03:05:18.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.273]        // while-condition  =>  TRUE
[03:05:18.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.275]        // while-condition  =>  TRUE
[03:05:18.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.277]        // while-condition  =>  TRUE
[03:05:18.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.278]        // while-condition  =>  TRUE
[03:05:18.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.280]        // while-condition  =>  TRUE
[03:05:18.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.282]        // while-condition  =>  TRUE
[03:05:18.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.284]        // while-condition  =>  TRUE
[03:05:18.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.286]        // while-condition  =>  TRUE
[03:05:18.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.288]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.288]        // while-condition  =>  TRUE
[03:05:18.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.289]        // while-condition  =>  TRUE
[03:05:18.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.291]        // while-condition  =>  TRUE
[03:05:18.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.293]        // while-condition  =>  TRUE
[03:05:18.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.294]        // while-condition  =>  TRUE
[03:05:18.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.296]        // while-condition  =>  TRUE
[03:05:18.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.299]        // while-condition  =>  TRUE
[03:05:18.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.301]        // while-condition  =>  TRUE
[03:05:18.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.302]        // while-condition  =>  TRUE
[03:05:18.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.304]        // while-condition  =>  TRUE
[03:05:18.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.306]        // while-condition  =>  TRUE
[03:05:18.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.308]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.309]        // while-condition  =>  TRUE
[03:05:18.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.310]        // while-condition  =>  TRUE
[03:05:18.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.311]        // while-condition  =>  TRUE
[03:05:18.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.313]        // while-condition  =>  TRUE
[03:05:18.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.315]        // while-condition  =>  TRUE
[03:05:18.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.317]        // while-condition  =>  TRUE
[03:05:18.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.319]        // while-condition  =>  TRUE
[03:05:18.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.321]        // while-condition  =>  TRUE
[03:05:18.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.323]        // while-condition  =>  TRUE
[03:05:18.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.324]        // while-condition  =>  TRUE
[03:05:18.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.326]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.327]        // while-condition  =>  TRUE
[03:05:18.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.328]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.328]        // while-condition  =>  TRUE
[03:05:18.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.330]        // while-condition  =>  TRUE
[03:05:18.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.331]        // while-condition  =>  TRUE
[03:05:18.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.333]        // while-condition  =>  TRUE
[03:05:18.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.335]        // while-condition  =>  TRUE
[03:05:18.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.337]        // while-condition  =>  TRUE
[03:05:18.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.338]        // while-condition  =>  TRUE
[03:05:18.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.339]        // while-condition  =>  TRUE
[03:05:18.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.341]        // while-condition  =>  TRUE
[03:05:18.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.344]        // while-condition  =>  TRUE
[03:05:18.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.345]        // while-condition  =>  TRUE
[03:05:18.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.347]        // while-condition  =>  TRUE
[03:05:18.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.348]        // while-condition  =>  TRUE
[03:05:18.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.351]        // while-condition  =>  TRUE
[03:05:18.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.352]        // while-condition  =>  TRUE
[03:05:18.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.353]        // while-condition  =>  TRUE
[03:05:18.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.355]        // while-condition  =>  TRUE
[03:05:18.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.358]        // while-condition  =>  TRUE
[03:05:18.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.359]        // while-condition  =>  TRUE
[03:05:18.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.360]        // while-condition  =>  TRUE
[03:05:18.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.362]        // while-condition  =>  TRUE
[03:05:18.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.366]        // while-condition  =>  TRUE
[03:05:18.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.367]        // while-condition  =>  TRUE
[03:05:18.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.368]        // while-condition  =>  TRUE
[03:05:18.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.370]        // while-condition  =>  TRUE
[03:05:18.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.372]        // while-condition  =>  TRUE
[03:05:18.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.374]        // while-condition  =>  TRUE
[03:05:18.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.375]        // while-condition  =>  TRUE
[03:05:18.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.377]        // while-condition  =>  TRUE
[03:05:18.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.379]        // while-condition  =>  TRUE
[03:05:18.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.381]        // while-condition  =>  TRUE
[03:05:18.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.382]        // while-condition  =>  TRUE
[03:05:18.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.383]        // while-condition  =>  TRUE
[03:05:18.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.385]        // while-condition  =>  TRUE
[03:05:18.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.387]        // while-condition  =>  TRUE
[03:05:18.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.389]        // while-condition  =>  TRUE
[03:05:18.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.391]        // while-condition  =>  TRUE
[03:05:18.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.392]        // while-condition  =>  TRUE
[03:05:18.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.393]        // while-condition  =>  TRUE
[03:05:18.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.395]        // while-condition  =>  TRUE
[03:05:18.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.398]        // while-condition  =>  TRUE
[03:05:18.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.399]        // while-condition  =>  TRUE
[03:05:18.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.401]        // while-condition  =>  TRUE
[03:05:18.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.403]        // while-condition  =>  TRUE
[03:05:18.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.405]        // while-condition  =>  TRUE
[03:05:18.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.406]        // while-condition  =>  TRUE
[03:05:18.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.410]        // while-condition  =>  TRUE
[03:05:18.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.412]        // while-condition  =>  TRUE
[03:05:18.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.413]        // while-condition  =>  TRUE
[03:05:18.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.415]        // while-condition  =>  TRUE
[03:05:18.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.417]        // while-condition  =>  TRUE
[03:05:18.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.422]        // while-condition  =>  TRUE
[03:05:18.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.424]        // while-condition  =>  TRUE
[03:05:18.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.425]        // while-condition  =>  TRUE
[03:05:18.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.427]        // while-condition  =>  TRUE
[03:05:18.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.430]        // while-condition  =>  TRUE
[03:05:18.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.433]        // while-condition  =>  TRUE
[03:05:18.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.434]        // while-condition  =>  TRUE
[03:05:18.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.435]        // while-condition  =>  TRUE
[03:05:18.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.438]        // while-condition  =>  TRUE
[03:05:18.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.439]        // while-condition  =>  TRUE
[03:05:18.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.441]        // while-condition  =>  TRUE
[03:05:18.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.442]        // while-condition  =>  TRUE
[03:05:18.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.444]        // while-condition  =>  TRUE
[03:05:18.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.446]        // while-condition  =>  TRUE
[03:05:18.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.448]        // while-condition  =>  TRUE
[03:05:18.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.449]        // while-condition  =>  TRUE
[03:05:18.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.451]        // while-condition  =>  TRUE
[03:05:18.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.453]        // while-condition  =>  TRUE
[03:05:18.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.459]        // while-condition  =>  TRUE
[03:05:18.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.461]        // while-condition  =>  TRUE
[03:05:18.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.463]        // while-condition  =>  TRUE
[03:05:18.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.465]        // while-condition  =>  TRUE
[03:05:18.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.467]        // while-condition  =>  TRUE
[03:05:18.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.470]        // while-condition  =>  TRUE
[03:05:18.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.471]        // while-condition  =>  TRUE
[03:05:18.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.473]        // while-condition  =>  TRUE
[03:05:18.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.475]        // while-condition  =>  TRUE
[03:05:18.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.479]        // while-condition  =>  TRUE
[03:05:18.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.481]        // while-condition  =>  TRUE
[03:05:18.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.483]        // while-condition  =>  TRUE
[03:05:18.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.483]        // while-condition  =>  TRUE
[03:05:18.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.486]        // while-condition  =>  TRUE
[03:05:18.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.488]        // while-condition  =>  TRUE
[03:05:18.488]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.490]        // while-condition  =>  TRUE
[03:05:18.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.492]        // while-condition  =>  TRUE
[03:05:18.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.493]        // while-condition  =>  TRUE
[03:05:18.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.495]        // while-condition  =>  TRUE
[03:05:18.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.497]        // while-condition  =>  TRUE
[03:05:18.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.500]        // while-condition  =>  TRUE
[03:05:18.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.502]        // while-condition  =>  TRUE
[03:05:18.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.504]        // while-condition  =>  TRUE
[03:05:18.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.504]        // while-condition  =>  TRUE
[03:05:18.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.506]        // while-condition  =>  TRUE
[03:05:18.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.508]        // while-condition  =>  TRUE
[03:05:18.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.510]        // while-condition  =>  TRUE
[03:05:18.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.512]        // while-condition  =>  TRUE
[03:05:18.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.514]        // while-condition  =>  TRUE
[03:05:18.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.515]        // while-condition  =>  TRUE
[03:05:18.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.517]        // while-condition  =>  TRUE
[03:05:18.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.520]        // while-condition  =>  TRUE
[03:05:18.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.522]        // while-condition  =>  TRUE
[03:05:18.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.523]        // while-condition  =>  TRUE
[03:05:18.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.525]        // while-condition  =>  TRUE
[03:05:18.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.526]        // while-condition  =>  TRUE
[03:05:18.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.528]        // while-condition  =>  TRUE
[03:05:18.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.530]        // while-condition  =>  TRUE
[03:05:18.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.531]        // while-condition  =>  TRUE
[03:05:18.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.533]        // while-condition  =>  TRUE
[03:05:18.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:05:18.535]        // while-condition  =>  TRUE
[03:05:18.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:18.535]        // while  =>  TIMEOUT
[03:05:18.535]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:05:18.536]      </control>
[03:05:18.536]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:05:18.536]        // if-block "(__protocol & 0xFFFF) == 1"
[03:05:18.536]          // =>  FALSE
[03:05:18.536]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:05:18.536]      </control>
[03:05:18.536]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:05:18.536]        // if-block "(__protocol & 0xFFFF) == 2"
[03:05:18.536]          // =>  TRUE
[03:05:18.537]        <block atomic="false" info="">
[03:05:18.537]          Message(0, "executing SWD power up");
[03:05:18.538]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:05:18.540]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:05:18.540]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:05:18.541]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:05:18.541]        </block>
[03:05:18.542]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:05:18.542]      </control>
[03:05:18.542]      // end if-block "powered_down"
[03:05:18.542]    </control>
[03:05:18.542]    <block atomic="false" info="">
[03:05:18.542]      __var DEBUG_PORT_VAL    = 0;
[03:05:18.542]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:05:18.542]      __var ACCESS_POINT_VAL  = 0;
[03:05:18.543]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:05:18.543]      __ap = 1; 
[03:05:18.543]        // -> [__ap <= 0x00000001]
[03:05:18.543]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:05:18.556]  
[03:05:18.556]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[03:05:18.556]  
[03:05:18.559]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:05:18.559]    </block>
[03:05:18.559]  </sequence>
[03:05:18.559]  
[03:05:28.604]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:28.604]  
[03:05:28.612]  <debugvars>
[03:05:28.612]    // Pre-defined
[03:05:28.612]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:28.612]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:28.612]    __dp=0x00000000
[03:05:28.613]    __ap=0x00000000
[03:05:28.613]    __traceout=0x00000000      (Trace Disabled)
[03:05:28.613]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:28.613]    __FlashAddr=0x00000000
[03:05:28.613]    __FlashLen=0x00000000
[03:05:28.613]    __FlashArg=0x00000000
[03:05:28.613]    __FlashOp=0x00000000
[03:05:28.613]    __Result=0x00000000
[03:05:28.613]  </debugvars>
[03:05:28.614]  
[03:05:28.614]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:28.614]    <block atomic="false" info="">
[03:05:28.614]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:28.614]        // -> [isSWJ <= 0x00000001]
[03:05:28.615]      __var hasDormant = __protocol & 0x00020000;
[03:05:28.615]        // -> [hasDormant <= 0x00000000]
[03:05:28.615]      __var protType   = __protocol & 0x0000FFFF;
[03:05:28.615]        // -> [protType <= 0x00000002]
[03:05:28.615]    </block>
[03:05:28.615]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:28.615]      // if-block "protType == 1"
[03:05:28.615]        // =>  FALSE
[03:05:28.615]      // skip if-block "protType == 1"
[03:05:28.616]    </control>
[03:05:28.616]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:28.616]      // if-block "protType == 2"
[03:05:28.616]        // =>  TRUE
[03:05:28.616]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:28.616]        // if-block "isSWJ"
[03:05:28.616]          // =>  TRUE
[03:05:28.616]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:28.616]          // if-block "hasDormant"
[03:05:28.616]            // =>  FALSE
[03:05:28.616]          // skip if-block "hasDormant"
[03:05:28.616]        </control>
[03:05:28.616]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:28.617]          // if-block "!hasDormant"
[03:05:28.617]            // =>  TRUE
[03:05:28.617]          <block atomic="false" info="">
[03:05:28.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:28.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:28.619]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:28.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:28.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:28.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:28.622]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:28.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:28.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:28.624]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:28.625]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:28.626]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:28.626]          </block>
[03:05:28.626]          // end if-block "!hasDormant"
[03:05:28.626]        </control>
[03:05:28.626]        // end if-block "isSWJ"
[03:05:28.626]      </control>
[03:05:28.626]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:28.626]        // if-block "!isSWJ"
[03:05:28.627]          // =>  FALSE
[03:05:28.627]        // skip if-block "!isSWJ"
[03:05:28.627]      </control>
[03:05:28.627]      <block atomic="false" info="">
[03:05:28.627]        ReadDP(0x0);
[03:05:28.629]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:28.629]      </block>
[03:05:28.629]      // end if-block "protType == 2"
[03:05:28.629]    </control>
[03:05:28.629]  </sequence>
[03:05:28.629]  
[03:05:28.631]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:05:28.631]  
[03:05:28.631]  <debugvars>
[03:05:28.631]    // Pre-defined
[03:05:28.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:28.631]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:28.631]    __dp=0x00000000
[03:05:28.632]    __ap=0x00000000
[03:05:28.632]    __traceout=0x00000000      (Trace Disabled)
[03:05:28.632]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:28.632]    __FlashAddr=0x00000000
[03:05:28.632]    __FlashLen=0x00000000
[03:05:28.632]    __FlashArg=0x00000000
[03:05:28.632]    __FlashOp=0x00000000
[03:05:28.632]    __Result=0x00000000
[03:05:28.632]  </debugvars>
[03:05:28.632]  
[03:05:28.632]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:05:28.633]    <block atomic="false" info="">
[03:05:28.633]      __var SW_DP_ABORT       = 0x0;
[03:05:28.633]        // -> [SW_DP_ABORT <= 0x00000000]
[03:05:28.633]      __var DP_CTRL_STAT      = 0x4;
[03:05:28.633]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:05:28.633]      __var DP_SELECT         = 0x8;
[03:05:28.633]        // -> [DP_SELECT <= 0x00000008]
[03:05:28.633]      __var powered_down      = 0;
[03:05:28.633]        // -> [powered_down <= 0x00000000]
[03:05:28.633]      WriteDP(DP_SELECT, 0x00000000);
[03:05:28.637]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:05:28.637]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:05:28.638]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:05:28.639]        // -> [powered_down <= 0x00000001]
[03:05:28.639]    </block>
[03:05:28.639]    <control if="powered_down" while="" timeout="0" info="">
[03:05:28.639]      // if-block "powered_down"
[03:05:28.639]        // =>  TRUE
[03:05:28.639]      <block atomic="false" info="">
[03:05:28.639]        Message(0, "Debug/System power-up request sent");
[03:05:28.642]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:05:28.643]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:05:28.643]      </block>
[03:05:28.643]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:05:28.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:28.644]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:05:28.645]        // while-condition  =>  FALSE
[03:05:28.645]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:05:28.645]      </control>
[03:05:28.645]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:05:28.645]        // if-block "(__protocol & 0xFFFF) == 1"
[03:05:28.645]          // =>  FALSE
[03:05:28.645]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:05:28.645]      </control>
[03:05:28.645]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:05:28.645]        // if-block "(__protocol & 0xFFFF) == 2"
[03:05:28.646]          // =>  TRUE
[03:05:28.646]        <block atomic="false" info="">
[03:05:28.646]          Message(0, "executing SWD power up");
[03:05:28.647]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:05:28.649]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:05:28.649]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:05:28.652]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:05:28.652]        </block>
[03:05:28.652]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:05:28.652]      </control>
[03:05:28.653]      // end if-block "powered_down"
[03:05:28.653]    </control>
[03:05:28.653]    <block atomic="false" info="">
[03:05:28.653]      __var DEBUG_PORT_VAL    = 0;
[03:05:28.653]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:05:28.653]      __var ACCESS_POINT_VAL  = 0;
[03:05:28.653]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:05:28.653]      __ap = 1; 
[03:05:28.653]        // -> [__ap <= 0x00000001]
[03:05:28.653]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:05:28.656]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:05:28.656]      __ap = 4;
[03:05:28.657]        // -> [__ap <= 0x00000004]
[03:05:28.657]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:05:28.661]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:05:28.661]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:05:28.661]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:05:28.662]    </block>
[03:05:28.663]    <block atomic="false" info="">
[03:05:28.663]      __var nReset = 0x80;
[03:05:28.663]        // -> [nReset <= 0x00000080]
[03:05:28.663]      __var canReadPins = 0;
[03:05:28.663]        // -> [canReadPins <= 0x00000000]
[03:05:28.663]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:05:28.664]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:05:28.665]        // -> [canReadPins <= 0x00000001]
[03:05:28.665]    </block>
[03:05:28.665]    <control if="" while="1" timeout="200" info="">
[03:05:28.666]      // while "1"  (timeout="200")
[03:05:28.666]      // while-condition  =>  TRUE
[03:05:28.666]      // while "1"  (timeout="200")
[03:05:28.666]      // while-condition  =>  TRUE
[03:05:28.666]      // while "1"  (timeout="200")
[03:05:28.666]      // while-condition  =>  TRUE
[03:05:28.666]      // while "1"  (timeout="200")
[03:05:28.666]      // while-condition  =>  TRUE
[03:05:28.666]      // while "1"  (timeout="200")
[03:05:28.666]      // while-condition  =>  TRUE
[03:05:28.667]      // while "1"  (timeout="200")
[03:05:28.667]      // while-condition  =>  TRUE
[03:05:28.667]      // while "1"  (timeout="200")
[03:05:28.667]      // while-condition  =>  TRUE
[03:05:28.667]      // while "1"  (timeout="200")
[03:05:28.667]      // while-condition  =>  TRUE
[03:05:28.667]      // while "1"  (timeout="200")
[03:05:28.667]      // while-condition  =>  TRUE
[03:05:28.667]      // while "1"  (timeout="200")
[03:05:28.668]      // while-condition  =>  TRUE
[03:05:28.668]      // while "1"  (timeout="200")
[03:05:28.668]      // while-condition  =>  TRUE
[03:05:28.668]      // while "1"  (timeout="200")
[03:05:28.668]      // while-condition  =>  TRUE
[03:05:28.668]      // while "1"  (timeout="200")
[03:05:28.668]      // while-condition  =>  TRUE
[03:05:28.668]      // while "1"  (timeout="200")
[03:05:28.668]      // while-condition  =>  TRUE
[03:05:28.668]      // while "1"  (timeout="200")
[03:05:28.668]      // while-condition  =>  TRUE
[03:05:28.668]      // while "1"  (timeout="200")
[03:05:28.669]      // while-condition  =>  TRUE
[03:05:28.669]      // while "1"  (timeout="200")
[03:05:28.669]      // while-condition  =>  TRUE
[03:05:28.669]      // while "1"  (timeout="200")
[03:05:28.669]      // while-condition  =>  TRUE
[03:05:28.669]      // while "1"  (timeout="200")
[03:05:28.669]      // while-condition  =>  TRUE
[03:05:28.669]      // while "1"  (timeout="200")
[03:05:28.669]      // while-condition  =>  TRUE
[03:05:28.669]      // while "1"  (timeout="200")
[03:05:28.669]      // while-condition  =>  TRUE
[03:05:28.670]      // while "1"  (timeout="200")
[03:05:28.670]      // while-condition  =>  TRUE
[03:05:28.670]      // while "1"  (timeout="200")
[03:05:28.670]      // while-condition  =>  TRUE
[03:05:28.670]      // while "1"  (timeout="200")
[03:05:28.670]      // while-condition  =>  TRUE
[03:05:28.670]      // while "1"  (timeout="200")
[03:05:28.670]      // while-condition  =>  TRUE
[03:05:28.670]      // while "1"  (timeout="200")
[03:05:28.670]      // while-condition  =>  TRUE
[03:05:28.670]      // while "1"  (timeout="200")
[03:05:28.670]      // while-condition  =>  TRUE
[03:05:28.671]      // while "1"  (timeout="200")
[03:05:28.671]      // while-condition  =>  TRUE
[03:05:28.671]      // while "1"  (timeout="200")
[03:05:28.671]      // while-condition  =>  TRUE
[03:05:28.671]      // while "1"  (timeout="200")
[03:05:28.671]      // while-condition  =>  TRUE
[03:05:28.671]      // while "1"  (timeout="200")
[03:05:28.671]      // while-condition  =>  TRUE
[03:05:28.671]      // while "1"  (timeout="200")
[03:05:28.671]      // while-condition  =>  TRUE
[03:05:28.671]      // while "1"  (timeout="200")
[03:05:28.672]      // while-condition  =>  TRUE
[03:05:28.672]      // while "1"  (timeout="200")
[03:05:28.672]      // while-condition  =>  TRUE
[03:05:28.672]      // while "1"  (timeout="200")
[03:05:28.672]      // while-condition  =>  TRUE
[03:05:28.672]      // while "1"  (timeout="200")
[03:05:28.672]      // while-condition  =>  TRUE
[03:05:28.673]      // while "1"  (timeout="200")
[03:05:28.673]      // while-condition  =>  TRUE
[03:05:28.673]      // while "1"  (timeout="200")
[03:05:28.673]      // while-condition  =>  TRUE
[03:05:28.673]      // while "1"  (timeout="200")
[03:05:28.673]      // while-condition  =>  TRUE
[03:05:28.673]      // while "1"  (timeout="200")
[03:05:28.673]      // while-condition  =>  TRUE
[03:05:28.673]      // while "1"  (timeout="200")
[03:05:28.673]      // while-condition  =>  TRUE
[03:05:28.673]      // while "1"  (timeout="200")
[03:05:28.674]      // while-condition  =>  TRUE
[03:05:28.674]      // while "1"  (timeout="200")
[03:05:28.674]      // while-condition  =>  TRUE
[03:05:28.674]      // while "1"  (timeout="200")
[03:05:28.674]      // while-condition  =>  TRUE
[03:05:28.674]      // while "1"  (timeout="200")
[03:05:28.674]      // while-condition  =>  TRUE
[03:05:28.674]      // while "1"  (timeout="200")
[03:05:28.674]      // while  =>  TIMEOUT
[03:05:28.674]      // end while "1"
[03:05:28.675]    </control>
[03:05:28.675]    <control if="canReadPins" while="" timeout="0" info="">
[03:05:28.675]      // if-block "canReadPins"
[03:05:28.675]        // =>  TRUE
[03:05:28.675]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:05:28.675]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:05:28.677]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:05:28.677]        // while-condition  =>  FALSE
[03:05:28.677]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:05:28.677]      </control>
[03:05:28.677]      // end if-block "canReadPins"
[03:05:28.677]    </control>
[03:05:28.677]    <control if="!canReadPins" while="" timeout="0" info="">
[03:05:28.677]      // if-block "!canReadPins"
[03:05:28.678]        // =>  FALSE
[03:05:28.678]      // skip if-block "!canReadPins"
[03:05:28.678]    </control>
[03:05:28.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:05:28.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:05:28.678]        // =>  TRUE
[03:05:28.678]      <block atomic="false" info="">
[03:05:28.678]        WriteAP(0x00, 0x190008);
[03:05:28.682]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:05:28.682]        WriteAP(0xF0, 0x01);
[03:05:28.686]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:05:28.686]      </block>
[03:05:28.686]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:05:28.686]    </control>
[03:05:28.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:05:28.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:05:28.686]        // =>  FALSE
[03:05:28.686]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:05:28.686]    </control>
[03:05:28.686]    <block atomic="false" info="">
[03:05:28.687]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:05:28.691]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:05:28.691]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:05:28.691]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:05:28.692]      __ap = 0; //lets make sure we reset the access point selection
[03:05:28.693]        // -> [__ap <= 0x00000000]
[03:05:28.693]    </block>
[03:05:28.693]  </sequence>
[03:05:28.693]  
[03:05:28.715]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:05:28.715]  
[03:05:28.715]  <debugvars>
[03:05:28.715]    // Pre-defined
[03:05:28.716]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:28.716]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:28.716]    __dp=0x00000000
[03:05:28.716]    __ap=0x00000000
[03:05:28.716]    __traceout=0x00000000      (Trace Disabled)
[03:05:28.716]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:28.716]    __FlashAddr=0x00000000
[03:05:28.716]    __FlashLen=0x00000000
[03:05:28.716]    __FlashArg=0x00000000
[03:05:28.717]    __FlashOp=0x00000000
[03:05:28.717]    __Result=0x00000000
[03:05:28.717]  </debugvars>
[03:05:28.717]  
[03:05:28.717]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:05:28.717]    <block atomic="false" info="">
[03:05:28.717]      __var deviceID = 0;
[03:05:28.717]        // -> [deviceID <= 0x00000000]
[03:05:28.717]      __var version = 0;
[03:05:28.717]        // -> [version <= 0x00000000]
[03:05:28.717]      __var partNum = 0;
[03:05:28.718]        // -> [partNum <= 0x00000000]
[03:05:28.718]      __var manuf = 0;
[03:05:28.718]        // -> [manuf <= 0x00000000]
[03:05:28.719]      __var isMSPM0G1X0X_G3X0X = 0;
[03:05:28.719]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:05:28.719]      __var isProduction = 0;
[03:05:28.719]        // -> [isProduction <= 0x00000000]
[03:05:28.719]      __var continueId = 0;
[03:05:28.719]        // -> [continueId <= 0x00000000]
[03:05:28.719]      deviceID =   Read32(0x41C40004);
[03:05:28.723]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:05:28.723]        // -> [deviceID <= 0x2BB8802F]
[03:05:28.723]      version = deviceID >> 28;
[03:05:28.723]        // -> [version <= 0x00000002]
[03:05:28.723]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:05:28.724]        // -> [partNum <= 0x0000BB88]
[03:05:28.724]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:05:28.724]        // -> [manuf <= 0x00000017]
[03:05:28.724]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:05:28.724]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:05:28.724]      isProduction = (version > 0);
[03:05:28.724]        // -> [isProduction <= 0x00000001]
[03:05:28.724]    </block>
[03:05:28.724]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:05:28.724]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:05:28.724]        // =>  FALSE
[03:05:28.725]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:05:28.725]    </control>
[03:05:28.725]    <control if="continueId == 4" while="" timeout="0" info="">
[03:05:28.725]      // if-block "continueId == 4"
[03:05:28.725]        // =>  FALSE
[03:05:28.726]      // skip if-block "continueId == 4"
[03:05:28.726]    </control>
[03:05:28.726]    <control if="!isProduction" while="" timeout="0" info="">
[03:05:28.726]      // if-block "!isProduction"
[03:05:28.726]        // =>  FALSE
[03:05:28.726]      // skip if-block "!isProduction"
[03:05:28.726]    </control>
[03:05:28.726]  </sequence>
[03:05:28.726]  
[03:08:29.864]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:08:29.864]  
[03:08:29.872]  <debugvars>
[03:08:29.872]    // Pre-defined
[03:08:29.872]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:08:29.872]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:08:29.872]    __dp=0x00000000
[03:08:29.872]    __ap=0x00000000
[03:08:29.872]    __traceout=0x00000000      (Trace Disabled)
[03:08:29.872]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:08:29.873]    __FlashAddr=0x00000000
[03:08:29.873]    __FlashLen=0x00000000
[03:08:29.873]    __FlashArg=0x00000000
[03:08:29.873]    __FlashOp=0x00000000
[03:08:29.873]    __Result=0x00000000
[03:08:29.873]  </debugvars>
[03:08:29.873]  
[03:08:29.874]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:08:29.874]    <block atomic="false" info="">
[03:08:29.874]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:08:29.874]        // -> [isSWJ <= 0x00000001]
[03:08:29.874]      __var hasDormant = __protocol & 0x00020000;
[03:08:29.874]        // -> [hasDormant <= 0x00000000]
[03:08:29.874]      __var protType   = __protocol & 0x0000FFFF;
[03:08:29.874]        // -> [protType <= 0x00000002]
[03:08:29.874]    </block>
[03:08:29.874]    <control if="protType == 1" while="" timeout="0" info="">
[03:08:29.874]      // if-block "protType == 1"
[03:08:29.875]        // =>  FALSE
[03:08:29.875]      // skip if-block "protType == 1"
[03:08:29.875]    </control>
[03:08:29.875]    <control if="protType == 2" while="" timeout="0" info="">
[03:08:29.875]      // if-block "protType == 2"
[03:08:29.875]        // =>  TRUE
[03:08:29.875]      <control if="isSWJ" while="" timeout="0" info="">
[03:08:29.875]        // if-block "isSWJ"
[03:08:29.875]          // =>  TRUE
[03:08:29.875]        <control if="hasDormant" while="" timeout="0" info="">
[03:08:29.875]          // if-block "hasDormant"
[03:08:29.876]            // =>  FALSE
[03:08:29.876]          // skip if-block "hasDormant"
[03:08:29.876]        </control>
[03:08:29.876]        <control if="!hasDormant" while="" timeout="0" info="">
[03:08:29.876]          // if-block "!hasDormant"
[03:08:29.876]            // =>  TRUE
[03:08:29.876]          <block atomic="false" info="">
[03:08:29.876]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:08:29.877]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:08:29.878]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:08:29.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:08:29.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:08:29.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:08:29.882]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:08:29.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:08:29.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:08:29.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:08:29.885]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:08:29.886]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:08:29.886]          </block>
[03:08:29.886]          // end if-block "!hasDormant"
[03:08:29.886]        </control>
[03:08:29.886]        // end if-block "isSWJ"
[03:08:29.886]      </control>
[03:08:29.886]      <control if="!isSWJ" while="" timeout="0" info="">
[03:08:29.886]        // if-block "!isSWJ"
[03:08:29.886]          // =>  FALSE
[03:08:29.887]        // skip if-block "!isSWJ"
[03:08:29.887]      </control>
[03:08:29.887]      <block atomic="false" info="">
[03:08:29.887]        ReadDP(0x0);
[03:08:29.890]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:08:29.890]      </block>
[03:08:29.890]      // end if-block "protType == 2"
[03:08:29.890]    </control>
[03:08:29.890]  </sequence>
[03:08:29.890]  
[03:08:29.892]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:08:29.892]  
[03:08:29.892]  <debugvars>
[03:08:29.892]    // Pre-defined
[03:08:29.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:08:29.892]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:08:29.892]    __dp=0x00000000
[03:08:29.892]    __ap=0x00000000
[03:08:29.893]    __traceout=0x00000000      (Trace Disabled)
[03:08:29.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:08:29.893]    __FlashAddr=0x00000000
[03:08:29.893]    __FlashLen=0x00000000
[03:08:29.893]    __FlashArg=0x00000000
[03:08:29.893]    __FlashOp=0x00000000
[03:08:29.893]    __Result=0x00000000
[03:08:29.893]  </debugvars>
[03:08:29.893]  
[03:08:29.893]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:08:29.893]    <block atomic="false" info="">
[03:08:29.894]      __var SW_DP_ABORT       = 0x0;
[03:08:29.894]        // -> [SW_DP_ABORT <= 0x00000000]
[03:08:29.894]      __var DP_CTRL_STAT      = 0x4;
[03:08:29.895]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:08:29.895]      __var DP_SELECT         = 0x8;
[03:08:29.895]        // -> [DP_SELECT <= 0x00000008]
[03:08:29.895]      __var powered_down      = 0;
[03:08:29.895]        // -> [powered_down <= 0x00000000]
[03:08:29.895]      WriteDP(DP_SELECT, 0x00000000);
[03:08:29.896]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:08:29.897]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:08:29.898]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:08:29.898]        // -> [powered_down <= 0x00000001]
[03:08:29.899]    </block>
[03:08:29.899]    <control if="powered_down" while="" timeout="0" info="">
[03:08:29.899]      // if-block "powered_down"
[03:08:29.899]        // =>  TRUE
[03:08:29.899]      <block atomic="false" info="">
[03:08:29.899]        Message(0, "Debug/System power-up request sent");
[03:08:29.901]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:08:29.903]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:08:29.903]      </block>
[03:08:29.903]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:08:29.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:08:29.904]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:08:29.904]        // while-condition  =>  FALSE
[03:08:29.904]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:08:29.905]      </control>
[03:08:29.905]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:08:29.905]        // if-block "(__protocol & 0xFFFF) == 1"
[03:08:29.905]          // =>  FALSE
[03:08:29.905]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:08:29.905]      </control>
[03:08:29.906]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:08:29.906]        // if-block "(__protocol & 0xFFFF) == 2"
[03:08:29.906]          // =>  TRUE
[03:08:29.906]        <block atomic="false" info="">
[03:08:29.906]          Message(0, "executing SWD power up");
[03:08:29.907]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:08:29.910]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:08:29.910]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:08:29.911]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:08:29.912]        </block>
[03:08:29.912]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:08:29.912]      </control>
[03:08:29.912]      // end if-block "powered_down"
[03:08:29.912]    </control>
[03:08:29.913]    <block atomic="false" info="">
[03:08:29.913]      __var DEBUG_PORT_VAL    = 0;
[03:08:29.913]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:08:29.913]      __var ACCESS_POINT_VAL  = 0;
[03:08:29.913]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:08:29.913]      __ap = 1; 
[03:08:29.914]        // -> [__ap <= 0x00000001]
[03:08:29.914]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:08:29.917]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:08:29.918]      __ap = 4;
[03:08:29.918]        // -> [__ap <= 0x00000004]
[03:08:29.918]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:08:29.923]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:08:29.924]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:08:29.924]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:08:29.925]    </block>
[03:08:29.925]    <block atomic="false" info="">
[03:08:29.925]      __var nReset = 0x80;
[03:08:29.926]        // -> [nReset <= 0x00000080]
[03:08:29.926]      __var canReadPins = 0;
[03:08:29.926]        // -> [canReadPins <= 0x00000000]
[03:08:29.926]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:08:29.928]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:08:29.928]        // -> [canReadPins <= 0x00000001]
[03:08:29.928]    </block>
[03:08:29.929]    <control if="" while="1" timeout="200" info="">
[03:08:29.929]      // while "1"  (timeout="200")
[03:08:29.930]      // while-condition  =>  TRUE
[03:08:29.930]      // while "1"  (timeout="200")
[03:08:29.930]      // while-condition  =>  TRUE
[03:08:29.930]      // while "1"  (timeout="200")
[03:08:29.930]      // while-condition  =>  TRUE
[03:08:29.930]      // while "1"  (timeout="200")
[03:08:29.930]      // while-condition  =>  TRUE
[03:08:29.930]      // while "1"  (timeout="200")
[03:08:29.930]      // while-condition  =>  TRUE
[03:08:29.931]      // while "1"  (timeout="200")
[03:08:29.931]      // while-condition  =>  TRUE
[03:08:29.931]      // while "1"  (timeout="200")
[03:08:29.931]      // while-condition  =>  TRUE
[03:08:29.931]      // while "1"  (timeout="200")
[03:08:29.931]      // while-condition  =>  TRUE
[03:08:29.931]      // while "1"  (timeout="200")
[03:08:29.931]      // while-condition  =>  TRUE
[03:08:29.931]      // while "1"  (timeout="200")
[03:08:29.931]      // while-condition  =>  TRUE
[03:08:29.932]      // while "1"  (timeout="200")
[03:08:29.932]      // while-condition  =>  TRUE
[03:08:29.932]      // while "1"  (timeout="200")
[03:08:29.932]      // while-condition  =>  TRUE
[03:08:29.932]      // while "1"  (timeout="200")
[03:08:29.932]      // while-condition  =>  TRUE
[03:08:29.932]      // while "1"  (timeout="200")
[03:08:29.932]      // while-condition  =>  TRUE
[03:08:29.932]      // while "1"  (timeout="200")
[03:08:29.932]      // while-condition  =>  TRUE
[03:08:29.932]      // while "1"  (timeout="200")
[03:08:29.932]      // while-condition  =>  TRUE
[03:08:29.933]      // while "1"  (timeout="200")
[03:08:29.933]      // while-condition  =>  TRUE
[03:08:29.933]      // while "1"  (timeout="200")
[03:08:29.933]      // while-condition  =>  TRUE
[03:08:29.933]      // while "1"  (timeout="200")
[03:08:29.933]      // while-condition  =>  TRUE
[03:08:29.933]      // while "1"  (timeout="200")
[03:08:29.933]      // while-condition  =>  TRUE
[03:08:29.933]      // while "1"  (timeout="200")
[03:08:29.933]      // while-condition  =>  TRUE
[03:08:29.933]      // while "1"  (timeout="200")
[03:08:29.934]      // while-condition  =>  TRUE
[03:08:29.934]      // while "1"  (timeout="200")
[03:08:29.934]      // while-condition  =>  TRUE
[03:08:29.934]      // while "1"  (timeout="200")
[03:08:29.934]      // while-condition  =>  TRUE
[03:08:29.934]      // while "1"  (timeout="200")
[03:08:29.934]      // while-condition  =>  TRUE
[03:08:29.934]      // while "1"  (timeout="200")
[03:08:29.934]      // while-condition  =>  TRUE
[03:08:29.934]      // while "1"  (timeout="200")
[03:08:29.934]      // while-condition  =>  TRUE
[03:08:29.935]      // while "1"  (timeout="200")
[03:08:29.935]      // while-condition  =>  TRUE
[03:08:29.935]      // while "1"  (timeout="200")
[03:08:29.935]      // while-condition  =>  TRUE
[03:08:29.935]      // while "1"  (timeout="200")
[03:08:29.935]      // while-condition  =>  TRUE
[03:08:29.935]      // while "1"  (timeout="200")
[03:08:29.935]      // while-condition  =>  TRUE
[03:08:29.935]      // while "1"  (timeout="200")
[03:08:29.935]      // while-condition  =>  TRUE
[03:08:29.935]      // while "1"  (timeout="200")
[03:08:29.936]      // while-condition  =>  TRUE
[03:08:29.936]      // while "1"  (timeout="200")
[03:08:29.936]      // while-condition  =>  TRUE
[03:08:29.936]      // while "1"  (timeout="200")
[03:08:29.936]      // while-condition  =>  TRUE
[03:08:29.936]      // while "1"  (timeout="200")
[03:08:29.936]      // while-condition  =>  TRUE
[03:08:29.936]      // while "1"  (timeout="200")
[03:08:29.936]      // while-condition  =>  TRUE
[03:08:29.936]      // while "1"  (timeout="200")
[03:08:29.936]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.937]      // while-condition  =>  TRUE
[03:08:29.937]      // while "1"  (timeout="200")
[03:08:29.938]      // while-condition  =>  TRUE
[03:08:29.938]      // while "1"  (timeout="200")
[03:08:29.938]      // while-condition  =>  TRUE
[03:08:29.938]      // while "1"  (timeout="200")
[03:08:29.938]      // while-condition  =>  TRUE
[03:08:29.938]      // while "1"  (timeout="200")
[03:08:29.939]      // while-condition  =>  TRUE
[03:08:29.939]      // while "1"  (timeout="200")
[03:08:29.939]      // while-condition  =>  TRUE
[03:08:29.939]      // while "1"  (timeout="200")
[03:08:29.939]      // while-condition  =>  TRUE
[03:08:29.939]      // while "1"  (timeout="200")
[03:08:29.939]      // while-condition  =>  TRUE
[03:08:29.939]      // while "1"  (timeout="200")
[03:08:29.939]      // while-condition  =>  TRUE
[03:08:29.939]      // while "1"  (timeout="200")
[03:08:29.939]      // while-condition  =>  TRUE
[03:08:29.939]      // while "1"  (timeout="200")
[03:08:29.940]      // while-condition  =>  TRUE
[03:08:29.940]      // while "1"  (timeout="200")
[03:08:29.940]      // while  =>  TIMEOUT
[03:08:29.940]      // end while "1"
[03:08:29.940]    </control>
[03:08:29.940]    <control if="canReadPins" while="" timeout="0" info="">
[03:08:29.940]      // if-block "canReadPins"
[03:08:29.940]        // =>  TRUE
[03:08:29.940]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:08:29.941]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:08:29.942]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:08:29.943]        // while-condition  =>  FALSE
[03:08:29.943]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:08:29.943]      </control>
[03:08:29.944]      // end if-block "canReadPins"
[03:08:29.944]    </control>
[03:08:29.944]    <control if="!canReadPins" while="" timeout="0" info="">
[03:08:29.944]      // if-block "!canReadPins"
[03:08:29.944]        // =>  FALSE
[03:08:29.944]      // skip if-block "!canReadPins"
[03:08:29.944]    </control>
[03:08:29.944]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:08:29.944]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:08:29.944]        // =>  TRUE
[03:08:29.944]      <block atomic="false" info="">
[03:08:29.944]        WriteAP(0x00, 0x190008);
[03:08:29.946]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:08:29.946]        WriteAP(0xF0, 0x01);
[03:08:29.949]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:08:29.949]      </block>
[03:08:29.949]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:08:29.949]    </control>
[03:08:29.949]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:08:29.949]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:08:29.950]        // =>  FALSE
[03:08:29.950]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:08:29.951]    </control>
[03:08:29.951]    <block atomic="false" info="">
[03:08:29.951]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:08:29.954]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:08:29.954]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:08:29.954]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:08:29.956]      __ap = 0; //lets make sure we reset the access point selection
[03:08:29.956]        // -> [__ap <= 0x00000000]
[03:08:29.956]    </block>
[03:08:29.956]  </sequence>
[03:08:29.956]  
[03:08:29.980]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:08:29.980]  
[03:08:29.981]  <debugvars>
[03:08:29.981]    // Pre-defined
[03:08:29.981]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:08:29.981]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:08:29.981]    __dp=0x00000000
[03:08:29.981]    __ap=0x00000000
[03:08:29.982]    __traceout=0x00000000      (Trace Disabled)
[03:08:29.982]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:08:29.982]    __FlashAddr=0x00000000
[03:08:29.982]    __FlashLen=0x00000000
[03:08:29.982]    __FlashArg=0x00000000
[03:08:29.982]    __FlashOp=0x00000000
[03:08:29.982]    __Result=0x00000000
[03:08:29.982]  </debugvars>
[03:08:29.982]  
[03:08:29.982]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:08:29.983]    <block atomic="false" info="">
[03:08:29.983]      __var deviceID = 0;
[03:08:29.983]        // -> [deviceID <= 0x00000000]
[03:08:29.983]      __var version = 0;
[03:08:29.983]        // -> [version <= 0x00000000]
[03:08:29.983]      __var partNum = 0;
[03:08:29.983]        // -> [partNum <= 0x00000000]
[03:08:29.983]      __var manuf = 0;
[03:08:29.983]        // -> [manuf <= 0x00000000]
[03:08:29.984]      __var isMSPM0G1X0X_G3X0X = 0;
[03:08:29.984]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:08:29.984]      __var isProduction = 0;
[03:08:29.984]        // -> [isProduction <= 0x00000000]
[03:08:29.984]      __var continueId = 0;
[03:08:29.984]        // -> [continueId <= 0x00000000]
[03:08:29.985]      deviceID =   Read32(0x41C40004);
[03:08:29.989]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:08:29.989]        // -> [deviceID <= 0x2BB8802F]
[03:08:29.989]      version = deviceID >> 28;
[03:08:29.989]        // -> [version <= 0x00000002]
[03:08:29.989]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:08:29.989]        // -> [partNum <= 0x0000BB88]
[03:08:29.990]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:08:29.990]        // -> [manuf <= 0x00000017]
[03:08:29.990]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:08:29.990]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:08:29.990]      isProduction = (version > 0);
[03:08:29.990]        // -> [isProduction <= 0x00000001]
[03:08:29.990]    </block>
[03:08:29.990]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:08:29.990]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:08:29.990]        // =>  FALSE
[03:08:29.990]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:08:29.991]    </control>
[03:08:29.991]    <control if="continueId == 4" while="" timeout="0" info="">
[03:08:29.991]      // if-block "continueId == 4"
[03:08:29.991]        // =>  FALSE
[03:08:29.991]      // skip if-block "continueId == 4"
[03:08:29.991]    </control>
[03:08:29.991]    <control if="!isProduction" while="" timeout="0" info="">
[03:08:29.991]      // if-block "!isProduction"
[03:08:29.991]        // =>  FALSE
[03:08:29.992]      // skip if-block "!isProduction"
[03:08:29.992]    </control>
[03:08:29.992]  </sequence>
[03:08:29.992]  
[03:10:22.424]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:10:22.424]  
[03:10:22.432]  <debugvars>
[03:10:22.432]    // Pre-defined
[03:10:22.432]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:22.432]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:10:22.433]    __dp=0x00000000
[03:10:22.433]    __ap=0x00000000
[03:10:22.433]    __traceout=0x00000000      (Trace Disabled)
[03:10:22.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:22.433]    __FlashAddr=0x00000000
[03:10:22.433]    __FlashLen=0x00000000
[03:10:22.433]    __FlashArg=0x00000000
[03:10:22.433]    __FlashOp=0x00000000
[03:10:22.434]    __Result=0x00000000
[03:10:22.434]  </debugvars>
[03:10:22.434]  
[03:10:22.434]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:10:22.434]    <block atomic="false" info="">
[03:10:22.434]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:10:22.435]        // -> [isSWJ <= 0x00000001]
[03:10:22.435]      __var hasDormant = __protocol & 0x00020000;
[03:10:22.435]        // -> [hasDormant <= 0x00000000]
[03:10:22.435]      __var protType   = __protocol & 0x0000FFFF;
[03:10:22.435]        // -> [protType <= 0x00000002]
[03:10:22.435]    </block>
[03:10:22.435]    <control if="protType == 1" while="" timeout="0" info="">
[03:10:22.435]      // if-block "protType == 1"
[03:10:22.435]        // =>  FALSE
[03:10:22.435]      // skip if-block "protType == 1"
[03:10:22.435]    </control>
[03:10:22.435]    <control if="protType == 2" while="" timeout="0" info="">
[03:10:22.436]      // if-block "protType == 2"
[03:10:22.436]        // =>  TRUE
[03:10:22.436]      <control if="isSWJ" while="" timeout="0" info="">
[03:10:22.436]        // if-block "isSWJ"
[03:10:22.436]          // =>  TRUE
[03:10:22.436]        <control if="hasDormant" while="" timeout="0" info="">
[03:10:22.436]          // if-block "hasDormant"
[03:10:22.436]            // =>  FALSE
[03:10:22.437]          // skip if-block "hasDormant"
[03:10:22.437]        </control>
[03:10:22.437]        <control if="!hasDormant" while="" timeout="0" info="">
[03:10:22.437]          // if-block "!hasDormant"
[03:10:22.437]            // =>  TRUE
[03:10:22.437]          <block atomic="false" info="">
[03:10:22.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:10:22.439]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:10:22.439]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:10:22.440]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:10:22.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:10:22.442]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:10:22.442]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:10:22.444]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:10:22.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:10:22.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:10:22.445]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:10:22.446]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:10:22.446]          </block>
[03:10:22.446]          // end if-block "!hasDormant"
[03:10:22.447]        </control>
[03:10:22.447]        // end if-block "isSWJ"
[03:10:22.447]      </control>
[03:10:22.447]      <control if="!isSWJ" while="" timeout="0" info="">
[03:10:22.448]        // if-block "!isSWJ"
[03:10:22.448]          // =>  FALSE
[03:10:22.448]        // skip if-block "!isSWJ"
[03:10:22.448]      </control>
[03:10:22.448]      <block atomic="false" info="">
[03:10:22.448]        ReadDP(0x0);
[03:10:22.449]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:10:22.449]      </block>
[03:10:22.449]      // end if-block "protType == 2"
[03:10:22.450]    </control>
[03:10:22.450]  </sequence>
[03:10:22.450]  
[03:10:22.452]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:10:22.452]  
[03:10:22.452]  <debugvars>
[03:10:22.452]    // Pre-defined
[03:10:22.452]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:22.452]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:10:22.452]    __dp=0x00000000
[03:10:22.453]    __ap=0x00000000
[03:10:22.453]    __traceout=0x00000000      (Trace Disabled)
[03:10:22.453]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:22.453]    __FlashAddr=0x00000000
[03:10:22.453]    __FlashLen=0x00000000
[03:10:22.453]    __FlashArg=0x00000000
[03:10:22.453]    __FlashOp=0x00000000
[03:10:22.453]    __Result=0x00000000
[03:10:22.453]  </debugvars>
[03:10:22.453]  
[03:10:22.453]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:10:22.454]    <block atomic="false" info="">
[03:10:22.454]      __var SW_DP_ABORT       = 0x0;
[03:10:22.454]        // -> [SW_DP_ABORT <= 0x00000000]
[03:10:22.454]      __var DP_CTRL_STAT      = 0x4;
[03:10:22.454]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:10:22.454]      __var DP_SELECT         = 0x8;
[03:10:22.454]        // -> [DP_SELECT <= 0x00000008]
[03:10:22.454]      __var powered_down      = 0;
[03:10:22.454]        // -> [powered_down <= 0x00000000]
[03:10:22.454]      WriteDP(DP_SELECT, 0x00000000);
[03:10:22.456]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:10:22.456]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:10:22.458]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:10:22.458]        // -> [powered_down <= 0x00000001]
[03:10:22.458]    </block>
[03:10:22.458]    <control if="powered_down" while="" timeout="0" info="">
[03:10:22.458]      // if-block "powered_down"
[03:10:22.458]        // =>  TRUE
[03:10:22.458]      <block atomic="false" info="">
[03:10:22.459]        Message(0, "Debug/System power-up request sent");
[03:10:22.460]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:10:22.462]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:10:22.462]      </block>
[03:10:22.462]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:10:22.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:10:22.463]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:10:22.463]        // while-condition  =>  FALSE
[03:10:22.463]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:10:22.464]      </control>
[03:10:22.464]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:10:22.464]        // if-block "(__protocol & 0xFFFF) == 1"
[03:10:22.464]          // =>  FALSE
[03:10:22.464]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:10:22.464]      </control>
[03:10:22.464]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:10:22.464]        // if-block "(__protocol & 0xFFFF) == 2"
[03:10:22.464]          // =>  TRUE
[03:10:22.464]        <block atomic="false" info="">
[03:10:22.465]          Message(0, "executing SWD power up");
[03:10:22.466]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:10:22.467]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:10:22.467]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:10:22.470]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:10:22.470]        </block>
[03:10:22.470]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:10:22.470]      </control>
[03:10:22.470]      // end if-block "powered_down"
[03:10:22.471]    </control>
[03:10:22.471]    <block atomic="false" info="">
[03:10:22.471]      __var DEBUG_PORT_VAL    = 0;
[03:10:22.471]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:10:22.471]      __var ACCESS_POINT_VAL  = 0;
[03:10:22.471]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:10:22.471]      __ap = 1; 
[03:10:22.471]        // -> [__ap <= 0x00000001]
[03:10:22.471]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:10:22.475]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:10:22.475]      __ap = 4;
[03:10:22.475]        // -> [__ap <= 0x00000004]
[03:10:22.475]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:10:22.478]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:10:22.478]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:10:22.478]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:10:22.480]    </block>
[03:10:22.480]    <block atomic="false" info="">
[03:10:22.480]      __var nReset = 0x80;
[03:10:22.480]        // -> [nReset <= 0x00000080]
[03:10:22.480]      __var canReadPins = 0;
[03:10:22.480]        // -> [canReadPins <= 0x00000000]
[03:10:22.480]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:10:22.483]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:10:22.483]        // -> [canReadPins <= 0x00000001]
[03:10:22.483]    </block>
[03:10:22.483]    <control if="" while="1" timeout="200" info="">
[03:10:22.483]      // while "1"  (timeout="200")
[03:10:22.483]      // while-condition  =>  TRUE
[03:10:22.484]      // while "1"  (timeout="200")
[03:10:22.484]      // while-condition  =>  TRUE
[03:10:22.484]      // while "1"  (timeout="200")
[03:10:22.484]      // while-condition  =>  TRUE
[03:10:22.484]      // while "1"  (timeout="200")
[03:10:22.484]      // while-condition  =>  TRUE
[03:10:22.484]      // while "1"  (timeout="200")
[03:10:22.484]      // while-condition  =>  TRUE
[03:10:22.484]      // while "1"  (timeout="200")
[03:10:22.484]      // while-condition  =>  TRUE
[03:10:22.484]      // while "1"  (timeout="200")
[03:10:22.485]      // while-condition  =>  TRUE
[03:10:22.485]      // while "1"  (timeout="200")
[03:10:22.485]      // while-condition  =>  TRUE
[03:10:22.485]      // while "1"  (timeout="200")
[03:10:22.485]      // while-condition  =>  TRUE
[03:10:22.485]      // while "1"  (timeout="200")
[03:10:22.485]      // while-condition  =>  TRUE
[03:10:22.485]      // while "1"  (timeout="200")
[03:10:22.485]      // while-condition  =>  TRUE
[03:10:22.485]      // while "1"  (timeout="200")
[03:10:22.486]      // while-condition  =>  TRUE
[03:10:22.486]      // while "1"  (timeout="200")
[03:10:22.486]      // while-condition  =>  TRUE
[03:10:22.486]      // while "1"  (timeout="200")
[03:10:22.486]      // while-condition  =>  TRUE
[03:10:22.486]      // while "1"  (timeout="200")
[03:10:22.486]      // while-condition  =>  TRUE
[03:10:22.486]      // while "1"  (timeout="200")
[03:10:22.486]      // while-condition  =>  TRUE
[03:10:22.486]      // while "1"  (timeout="200")
[03:10:22.486]      // while-condition  =>  TRUE
[03:10:22.487]      // while "1"  (timeout="200")
[03:10:22.487]      // while  =>  TIMEOUT
[03:10:22.487]      // end while "1"
[03:10:22.487]    </control>
[03:10:22.487]    <control if="canReadPins" while="" timeout="0" info="">
[03:10:22.487]      // if-block "canReadPins"
[03:10:22.488]        // =>  TRUE
[03:10:22.488]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:10:22.488]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:10:22.489]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:10:22.489]        // while-condition  =>  FALSE
[03:10:22.490]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:10:22.490]      </control>
[03:10:22.490]      // end if-block "canReadPins"
[03:10:22.490]    </control>
[03:10:22.490]    <control if="!canReadPins" while="" timeout="0" info="">
[03:10:22.490]      // if-block "!canReadPins"
[03:10:22.490]        // =>  FALSE
[03:10:22.490]      // skip if-block "!canReadPins"
[03:10:22.490]    </control>
[03:10:22.490]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:10:22.490]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:10:22.490]        // =>  TRUE
[03:10:22.490]      <block atomic="false" info="">
[03:10:22.490]        WriteAP(0x00, 0x190008);
[03:10:22.492]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:10:22.493]        WriteAP(0xF0, 0x01);
[03:10:22.496]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:10:22.496]      </block>
[03:10:22.496]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:10:22.496]    </control>
[03:10:22.496]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:10:22.496]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:10:22.496]        // =>  FALSE
[03:10:22.496]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:10:22.497]    </control>
[03:10:22.497]    <block atomic="false" info="">
[03:10:22.497]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:10:22.500]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:10:22.500]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:10:22.500]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:10:22.502]      __ap = 0; //lets make sure we reset the access point selection
[03:10:22.502]        // -> [__ap <= 0x00000000]
[03:10:22.502]    </block>
[03:10:22.502]  </sequence>
[03:10:22.503]  
[03:10:22.523]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:10:22.523]  
[03:10:22.523]  <debugvars>
[03:10:22.523]    // Pre-defined
[03:10:22.523]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:22.523]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:10:22.523]    __dp=0x00000000
[03:10:22.523]    __ap=0x00000000
[03:10:22.523]    __traceout=0x00000000      (Trace Disabled)
[03:10:22.523]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:22.523]    __FlashAddr=0x00000000
[03:10:22.523]    __FlashLen=0x00000000
[03:10:22.523]    __FlashArg=0x00000000
[03:10:22.524]    __FlashOp=0x00000000
[03:10:22.524]    __Result=0x00000000
[03:10:22.524]  </debugvars>
[03:10:22.524]  
[03:10:22.524]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:10:22.524]    <block atomic="false" info="">
[03:10:22.524]      __var deviceID = 0;
[03:10:22.524]        // -> [deviceID <= 0x00000000]
[03:10:22.525]      __var version = 0;
[03:10:22.525]        // -> [version <= 0x00000000]
[03:10:22.525]      __var partNum = 0;
[03:10:22.525]        // -> [partNum <= 0x00000000]
[03:10:22.526]      __var manuf = 0;
[03:10:22.526]        // -> [manuf <= 0x00000000]
[03:10:22.526]      __var isMSPM0G1X0X_G3X0X = 0;
[03:10:22.526]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:10:22.526]      __var isProduction = 0;
[03:10:22.526]        // -> [isProduction <= 0x00000000]
[03:10:22.526]      __var continueId = 0;
[03:10:22.526]        // -> [continueId <= 0x00000000]
[03:10:22.526]      deviceID =   Read32(0x41C40004);
[03:10:22.532]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:10:22.532]        // -> [deviceID <= 0x2BB8802F]
[03:10:22.532]      version = deviceID >> 28;
[03:10:22.532]        // -> [version <= 0x00000002]
[03:10:22.533]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:10:22.533]        // -> [partNum <= 0x0000BB88]
[03:10:22.533]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:10:22.533]        // -> [manuf <= 0x00000017]
[03:10:22.533]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:10:22.533]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:10:22.533]      isProduction = (version > 0);
[03:10:22.533]        // -> [isProduction <= 0x00000001]
[03:10:22.533]    </block>
[03:10:22.533]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:10:22.533]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:10:22.534]        // =>  FALSE
[03:10:22.534]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:10:22.534]    </control>
[03:10:22.534]    <control if="continueId == 4" while="" timeout="0" info="">
[03:10:22.534]      // if-block "continueId == 4"
[03:10:22.534]        // =>  FALSE
[03:10:22.534]      // skip if-block "continueId == 4"
[03:10:22.534]    </control>
[03:10:22.535]    <control if="!isProduction" while="" timeout="0" info="">
[03:10:22.535]      // if-block "!isProduction"
[03:10:22.535]        // =>  FALSE
[03:10:22.535]      // skip if-block "!isProduction"
[03:10:22.535]    </control>
[03:10:22.535]  </sequence>
[03:10:22.535]  
[03:12:23.154]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:12:23.154]  
[03:12:23.163]  <debugvars>
[03:12:23.163]    // Pre-defined
[03:12:23.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:23.163]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:12:23.163]    __dp=0x00000000
[03:12:23.163]    __ap=0x00000000
[03:12:23.164]    __traceout=0x00000000      (Trace Disabled)
[03:12:23.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:23.164]    __FlashAddr=0x00000000
[03:12:23.164]    __FlashLen=0x00000000
[03:12:23.164]    __FlashArg=0x00000000
[03:12:23.164]    __FlashOp=0x00000000
[03:12:23.164]    __Result=0x00000000
[03:12:23.164]  </debugvars>
[03:12:23.164]  
[03:12:23.164]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:12:23.164]    <block atomic="false" info="">
[03:12:23.164]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:12:23.165]        // -> [isSWJ <= 0x00000001]
[03:12:23.165]      __var hasDormant = __protocol & 0x00020000;
[03:12:23.165]        // -> [hasDormant <= 0x00000000]
[03:12:23.165]      __var protType   = __protocol & 0x0000FFFF;
[03:12:23.165]        // -> [protType <= 0x00000002]
[03:12:23.165]    </block>
[03:12:23.165]    <control if="protType == 1" while="" timeout="0" info="">
[03:12:23.165]      // if-block "protType == 1"
[03:12:23.165]        // =>  FALSE
[03:12:23.165]      // skip if-block "protType == 1"
[03:12:23.165]    </control>
[03:12:23.165]    <control if="protType == 2" while="" timeout="0" info="">
[03:12:23.165]      // if-block "protType == 2"
[03:12:23.165]        // =>  TRUE
[03:12:23.165]      <control if="isSWJ" while="" timeout="0" info="">
[03:12:23.165]        // if-block "isSWJ"
[03:12:23.165]          // =>  TRUE
[03:12:23.165]        <control if="hasDormant" while="" timeout="0" info="">
[03:12:23.165]          // if-block "hasDormant"
[03:12:23.167]            // =>  FALSE
[03:12:23.167]          // skip if-block "hasDormant"
[03:12:23.167]        </control>
[03:12:23.167]        <control if="!hasDormant" while="" timeout="0" info="">
[03:12:23.167]          // if-block "!hasDormant"
[03:12:23.167]            // =>  TRUE
[03:12:23.167]          <block atomic="false" info="">
[03:12:23.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:12:23.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:12:23.168]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:12:23.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:12:23.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:12:23.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:12:23.172]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:12:23.174]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:12:23.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:12:23.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:12:23.177]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:12:23.178]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:12:23.178]          </block>
[03:12:23.178]          // end if-block "!hasDormant"
[03:12:23.178]        </control>
[03:12:23.178]        // end if-block "isSWJ"
[03:12:23.179]      </control>
[03:12:23.179]      <control if="!isSWJ" while="" timeout="0" info="">
[03:12:23.179]        // if-block "!isSWJ"
[03:12:23.179]          // =>  FALSE
[03:12:23.179]        // skip if-block "!isSWJ"
[03:12:23.179]      </control>
[03:12:23.179]      <block atomic="false" info="">
[03:12:23.179]        ReadDP(0x0);
[03:12:23.181]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:12:23.181]      </block>
[03:12:23.181]      // end if-block "protType == 2"
[03:12:23.182]    </control>
[03:12:23.182]  </sequence>
[03:12:23.182]  
[03:12:23.184]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:12:23.184]  
[03:12:23.184]  <debugvars>
[03:12:23.184]    // Pre-defined
[03:12:23.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:23.184]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:12:23.184]    __dp=0x00000000
[03:12:23.184]    __ap=0x00000000
[03:12:23.184]    __traceout=0x00000000      (Trace Disabled)
[03:12:23.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:23.184]    __FlashAddr=0x00000000
[03:12:23.185]    __FlashLen=0x00000000
[03:12:23.185]    __FlashArg=0x00000000
[03:12:23.185]    __FlashOp=0x00000000
[03:12:23.185]    __Result=0x00000000
[03:12:23.185]  </debugvars>
[03:12:23.185]  
[03:12:23.185]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:12:23.185]    <block atomic="false" info="">
[03:12:23.185]      __var SW_DP_ABORT       = 0x0;
[03:12:23.185]        // -> [SW_DP_ABORT <= 0x00000000]
[03:12:23.185]      __var DP_CTRL_STAT      = 0x4;
[03:12:23.185]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:12:23.186]      __var DP_SELECT         = 0x8;
[03:12:23.186]        // -> [DP_SELECT <= 0x00000008]
[03:12:23.186]      __var powered_down      = 0;
[03:12:23.186]        // -> [powered_down <= 0x00000000]
[03:12:23.186]      WriteDP(DP_SELECT, 0x00000000);
[03:12:23.188]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:12:23.188]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:12:23.190]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:12:23.190]        // -> [powered_down <= 0x00000001]
[03:12:23.190]    </block>
[03:12:23.190]    <control if="powered_down" while="" timeout="0" info="">
[03:12:23.190]      // if-block "powered_down"
[03:12:23.191]        // =>  TRUE
[03:12:23.191]      <block atomic="false" info="">
[03:12:23.191]        Message(0, "Debug/System power-up request sent");
[03:12:23.195]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:12:23.196]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:12:23.196]      </block>
[03:12:23.196]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:12:23.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:12:23.197]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:12:23.197]        // while-condition  =>  FALSE
[03:12:23.199]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:12:23.199]      </control>
[03:12:23.199]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:12:23.199]        // if-block "(__protocol & 0xFFFF) == 1"
[03:12:23.199]          // =>  FALSE
[03:12:23.199]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:12:23.199]      </control>
[03:12:23.199]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:12:23.199]        // if-block "(__protocol & 0xFFFF) == 2"
[03:12:23.199]          // =>  TRUE
[03:12:23.199]        <block atomic="false" info="">
[03:12:23.199]          Message(0, "executing SWD power up");
[03:12:23.202]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:12:23.203]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:12:23.203]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:12:23.204]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:12:23.204]        </block>
[03:12:23.204]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:12:23.204]      </control>
[03:12:23.205]      // end if-block "powered_down"
[03:12:23.205]    </control>
[03:12:23.205]    <block atomic="false" info="">
[03:12:23.205]      __var DEBUG_PORT_VAL    = 0;
[03:12:23.205]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:12:23.205]      __var ACCESS_POINT_VAL  = 0;
[03:12:23.205]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:12:23.205]      __ap = 1; 
[03:12:23.205]        // -> [__ap <= 0x00000001]
[03:12:23.205]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:12:23.209]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:12:23.210]      __ap = 4;
[03:12:23.210]        // -> [__ap <= 0x00000004]
[03:12:23.210]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:12:23.213]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:12:23.213]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:12:23.213]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:12:23.215]    </block>
[03:12:23.215]    <block atomic="false" info="">
[03:12:23.215]      __var nReset = 0x80;
[03:12:23.215]        // -> [nReset <= 0x00000080]
[03:12:23.215]      __var canReadPins = 0;
[03:12:23.215]        // -> [canReadPins <= 0x00000000]
[03:12:23.215]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:12:23.217]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:12:23.217]        // -> [canReadPins <= 0x00000001]
[03:12:23.217]    </block>
[03:12:23.217]    <control if="" while="1" timeout="200" info="">
[03:12:23.217]      // while "1"  (timeout="200")
[03:12:23.217]      // while-condition  =>  TRUE
[03:12:23.217]      // while "1"  (timeout="200")
[03:12:23.217]      // while-condition  =>  TRUE
[03:12:23.217]      // while "1"  (timeout="200")
[03:12:23.218]      // while-condition  =>  TRUE
[03:12:23.218]      // while "1"  (timeout="200")
[03:12:23.218]      // while-condition  =>  TRUE
[03:12:23.218]      // while "1"  (timeout="200")
[03:12:23.218]      // while-condition  =>  TRUE
[03:12:23.218]      // while "1"  (timeout="200")
[03:12:23.218]      // while-condition  =>  TRUE
[03:12:23.218]      // while "1"  (timeout="200")
[03:12:23.218]      // while-condition  =>  TRUE
[03:12:23.218]      // while "1"  (timeout="200")
[03:12:23.218]      // while-condition  =>  TRUE
[03:12:23.219]      // while "1"  (timeout="200")
[03:12:23.219]      // while-condition  =>  TRUE
[03:12:23.219]      // while "1"  (timeout="200")
[03:12:23.219]      // while-condition  =>  TRUE
[03:12:23.219]      // while "1"  (timeout="200")
[03:12:23.219]      // while-condition  =>  TRUE
[03:12:23.219]      // while "1"  (timeout="200")
[03:12:23.219]      // while-condition  =>  TRUE
[03:12:23.219]      // while "1"  (timeout="200")
[03:12:23.219]      // while-condition  =>  TRUE
[03:12:23.219]      // while "1"  (timeout="200")
[03:12:23.219]      // while-condition  =>  TRUE
[03:12:23.220]      // while "1"  (timeout="200")
[03:12:23.220]      // while-condition  =>  TRUE
[03:12:23.220]      // while "1"  (timeout="200")
[03:12:23.220]      // while-condition  =>  TRUE
[03:12:23.220]      // while "1"  (timeout="200")
[03:12:23.220]      // while-condition  =>  TRUE
[03:12:23.220]      // while "1"  (timeout="200")
[03:12:23.221]      // while-condition  =>  TRUE
[03:12:23.221]      // while "1"  (timeout="200")
[03:12:23.221]      // while-condition  =>  TRUE
[03:12:23.221]      // while "1"  (timeout="200")
[03:12:23.221]      // while-condition  =>  TRUE
[03:12:23.221]      // while "1"  (timeout="200")
[03:12:23.222]      // while-condition  =>  TRUE
[03:12:23.222]      // while "1"  (timeout="200")
[03:12:23.222]      // while  =>  TIMEOUT
[03:12:23.222]      // end while "1"
[03:12:23.222]    </control>
[03:12:23.222]    <control if="canReadPins" while="" timeout="0" info="">
[03:12:23.222]      // if-block "canReadPins"
[03:12:23.222]        // =>  TRUE
[03:12:23.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:12:23.222]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:12:23.224]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:12:23.224]        // while-condition  =>  FALSE
[03:12:23.224]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:12:23.224]      </control>
[03:12:23.224]      // end if-block "canReadPins"
[03:12:23.225]    </control>
[03:12:23.225]    <control if="!canReadPins" while="" timeout="0" info="">
[03:12:23.225]      // if-block "!canReadPins"
[03:12:23.225]        // =>  FALSE
[03:12:23.225]      // skip if-block "!canReadPins"
[03:12:23.225]    </control>
[03:12:23.225]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:12:23.225]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:12:23.225]        // =>  TRUE
[03:12:23.225]      <block atomic="false" info="">
[03:12:23.225]        WriteAP(0x00, 0x190008);
[03:12:23.227]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:12:23.227]        WriteAP(0xF0, 0x01);
[03:12:23.232]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:12:23.232]      </block>
[03:12:23.232]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:12:23.232]    </control>
[03:12:23.232]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:12:23.232]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:12:23.232]        // =>  FALSE
[03:12:23.233]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:12:23.233]    </control>
[03:12:23.233]    <block atomic="false" info="">
[03:12:23.233]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:12:23.235]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:12:23.235]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:12:23.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:12:23.238]      __ap = 0; //lets make sure we reset the access point selection
[03:12:23.238]        // -> [__ap <= 0x00000000]
[03:12:23.239]    </block>
[03:12:23.239]  </sequence>
[03:12:23.239]  
[03:12:23.257]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:12:23.257]  
[03:12:23.257]  <debugvars>
[03:12:23.257]    // Pre-defined
[03:12:23.258]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:23.259]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:12:23.259]    __dp=0x00000000
[03:12:23.259]    __ap=0x00000000
[03:12:23.259]    __traceout=0x00000000      (Trace Disabled)
[03:12:23.259]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:23.259]    __FlashAddr=0x00000000
[03:12:23.259]    __FlashLen=0x00000000
[03:12:23.259]    __FlashArg=0x00000000
[03:12:23.259]    __FlashOp=0x00000000
[03:12:23.259]    __Result=0x00000000
[03:12:23.259]  </debugvars>
[03:12:23.259]  
[03:12:23.260]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:12:23.260]    <block atomic="false" info="">
[03:12:23.260]      __var deviceID = 0;
[03:12:23.260]        // -> [deviceID <= 0x00000000]
[03:12:23.260]      __var version = 0;
[03:12:23.260]        // -> [version <= 0x00000000]
[03:12:23.260]      __var partNum = 0;
[03:12:23.260]        // -> [partNum <= 0x00000000]
[03:12:23.260]      __var manuf = 0;
[03:12:23.260]        // -> [manuf <= 0x00000000]
[03:12:23.260]      __var isMSPM0G1X0X_G3X0X = 0;
[03:12:23.260]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:12:23.261]      __var isProduction = 0;
[03:12:23.261]        // -> [isProduction <= 0x00000000]
[03:12:23.261]      __var continueId = 0;
[03:12:23.261]        // -> [continueId <= 0x00000000]
[03:12:23.261]      deviceID =   Read32(0x41C40004);
[03:12:23.267]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:12:23.267]        // -> [deviceID <= 0x2BB8802F]
[03:12:23.267]      version = deviceID >> 28;
[03:12:23.267]        // -> [version <= 0x00000002]
[03:12:23.267]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:12:23.267]        // -> [partNum <= 0x0000BB88]
[03:12:23.267]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:12:23.267]        // -> [manuf <= 0x00000017]
[03:12:23.267]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:12:23.267]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:12:23.268]      isProduction = (version > 0);
[03:12:23.268]        // -> [isProduction <= 0x00000001]
[03:12:23.268]    </block>
[03:12:23.268]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:12:23.268]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:12:23.268]        // =>  FALSE
[03:12:23.268]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:12:23.268]    </control>
[03:12:23.268]    <control if="continueId == 4" while="" timeout="0" info="">
[03:12:23.268]      // if-block "continueId == 4"
[03:12:23.268]        // =>  FALSE
[03:12:23.269]      // skip if-block "continueId == 4"
[03:12:23.269]    </control>
[03:12:23.269]    <control if="!isProduction" while="" timeout="0" info="">
[03:12:23.269]      // if-block "!isProduction"
[03:12:23.269]        // =>  FALSE
[03:12:23.269]      // skip if-block "!isProduction"
[03:12:23.269]    </control>
[03:12:23.269]  </sequence>
[03:12:23.269]  
[03:13:25.977]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:13:25.977]  
[03:13:25.977]  <debugvars>
[03:13:25.977]    // Pre-defined
[03:13:25.977]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:25.977]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:13:25.977]    __dp=0x00000000
[03:13:25.978]    __ap=0x00000000
[03:13:25.978]    __traceout=0x00000000      (Trace Disabled)
[03:13:25.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:25.978]    __FlashAddr=0x00000000
[03:13:25.978]    __FlashLen=0x00000000
[03:13:25.978]    __FlashArg=0x00000000
[03:13:25.978]    __FlashOp=0x00000000
[03:13:25.978]    __Result=0x00000000
[03:13:25.978]  </debugvars>
[03:13:25.978]  
[03:13:25.978]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:13:25.978]    <block atomic="false" info="">
[03:13:25.978]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:13:25.978]        // -> [isSWJ <= 0x00000001]
[03:13:25.978]      __var hasDormant = __protocol & 0x00020000;
[03:13:25.978]        // -> [hasDormant <= 0x00000000]
[03:13:25.980]      __var protType   = __protocol & 0x0000FFFF;
[03:13:25.980]        // -> [protType <= 0x00000002]
[03:13:25.980]    </block>
[03:13:25.980]    <control if="protType == 1" while="" timeout="0" info="">
[03:13:25.980]      // if-block "protType == 1"
[03:13:25.980]        // =>  FALSE
[03:13:25.980]      // skip if-block "protType == 1"
[03:13:25.980]    </control>
[03:13:25.980]    <control if="protType == 2" while="" timeout="0" info="">
[03:13:25.980]      // if-block "protType == 2"
[03:13:25.980]        // =>  TRUE
[03:13:25.980]      <control if="isSWJ" while="" timeout="0" info="">
[03:13:25.980]        // if-block "isSWJ"
[03:13:25.980]          // =>  TRUE
[03:13:25.980]        <control if="hasDormant" while="" timeout="0" info="">
[03:13:25.980]          // if-block "hasDormant"
[03:13:25.981]            // =>  FALSE
[03:13:25.981]          // skip if-block "hasDormant"
[03:13:25.982]        </control>
[03:13:25.982]        <control if="!hasDormant" while="" timeout="0" info="">
[03:13:25.982]          // if-block "!hasDormant"
[03:13:25.982]            // =>  TRUE
[03:13:25.982]          <block atomic="false" info="">
[03:13:25.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:13:25.983]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:13:25.983]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:13:25.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:13:25.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:13:25.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:13:25.987]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:13:25.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:13:25.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:13:25.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:13:25.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:13:25.991]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:13:25.991]          </block>
[03:13:25.991]          // end if-block "!hasDormant"
[03:13:25.991]        </control>
[03:13:25.991]        // end if-block "isSWJ"
[03:13:25.991]      </control>
[03:13:25.991]      <control if="!isSWJ" while="" timeout="0" info="">
[03:13:25.991]        // if-block "!isSWJ"
[03:13:25.992]          // =>  FALSE
[03:13:25.992]        // skip if-block "!isSWJ"
[03:13:25.992]      </control>
[03:13:25.992]      <block atomic="false" info="">
[03:13:25.992]        ReadDP(0x0);
[03:13:25.993]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:13:25.993]      </block>
[03:13:25.993]      // end if-block "protType == 2"
[03:13:25.993]    </control>
[03:13:25.993]  </sequence>
[03:13:25.994]  
[03:13:25.996]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:13:25.996]  
[03:13:25.997]  <debugvars>
[03:13:25.997]    // Pre-defined
[03:13:25.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:25.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:13:25.997]    __dp=0x00000000
[03:13:25.997]    __ap=0x00000000
[03:13:25.997]    __traceout=0x00000000      (Trace Disabled)
[03:13:25.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:25.997]    __FlashAddr=0x00000000
[03:13:25.997]    __FlashLen=0x00000000
[03:13:25.997]    __FlashArg=0x00000000
[03:13:25.997]    __FlashOp=0x00000000
[03:13:25.997]    __Result=0x00000000
[03:13:25.997]  </debugvars>
[03:13:25.997]  
[03:13:25.998]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:13:25.998]    <block atomic="false" info="">
[03:13:25.998]      __var SW_DP_ABORT       = 0x0;
[03:13:25.998]        // -> [SW_DP_ABORT <= 0x00000000]
[03:13:25.998]      __var DP_CTRL_STAT      = 0x4;
[03:13:25.998]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:13:25.998]      __var DP_SELECT         = 0x8;
[03:13:25.998]        // -> [DP_SELECT <= 0x00000008]
[03:13:25.998]      __var powered_down      = 0;
[03:13:25.998]        // -> [powered_down <= 0x00000000]
[03:13:25.998]      WriteDP(DP_SELECT, 0x00000000);
[03:13:26.000]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:13:26.000]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:13:26.003]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:13:26.003]        // -> [powered_down <= 0x00000001]
[03:13:26.003]    </block>
[03:13:26.003]    <control if="powered_down" while="" timeout="0" info="">
[03:13:26.003]      // if-block "powered_down"
[03:13:26.004]        // =>  TRUE
[03:13:26.004]      <block atomic="false" info="">
[03:13:26.004]        Message(0, "Debug/System power-up request sent");
[03:13:26.006]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:13:26.007]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:13:26.007]      </block>
[03:13:26.008]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:13:26.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:13:26.010]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:13:26.010]        // while-condition  =>  FALSE
[03:13:26.010]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:13:26.010]      </control>
[03:13:26.010]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:13:26.010]        // if-block "(__protocol & 0xFFFF) == 1"
[03:13:26.010]          // =>  FALSE
[03:13:26.010]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:13:26.010]      </control>
[03:13:26.010]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:13:26.010]        // if-block "(__protocol & 0xFFFF) == 2"
[03:13:26.010]          // =>  TRUE
[03:13:26.010]        <block atomic="false" info="">
[03:13:26.011]          Message(0, "executing SWD power up");
[03:13:26.012]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:13:26.014]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:13:26.014]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:13:26.015]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:13:26.015]        </block>
[03:13:26.016]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:13:26.016]      </control>
[03:13:26.017]      // end if-block "powered_down"
[03:13:26.017]    </control>
[03:13:26.017]    <block atomic="false" info="">
[03:13:26.017]      __var DEBUG_PORT_VAL    = 0;
[03:13:26.017]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:13:26.017]      __var ACCESS_POINT_VAL  = 0;
[03:13:26.017]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:13:26.017]      __ap = 1; 
[03:13:26.017]        // -> [__ap <= 0x00000001]
[03:13:26.017]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:13:26.021]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:13:26.021]      __ap = 4;
[03:13:26.021]        // -> [__ap <= 0x00000004]
[03:13:26.021]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:13:26.023]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:13:26.023]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:13:26.023]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:13:26.025]    </block>
[03:13:26.025]    <block atomic="false" info="">
[03:13:26.025]      __var nReset = 0x80;
[03:13:26.025]        // -> [nReset <= 0x00000080]
[03:13:26.025]      __var canReadPins = 0;
[03:13:26.026]        // -> [canReadPins <= 0x00000000]
[03:13:26.026]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:13:26.027]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:13:26.027]        // -> [canReadPins <= 0x00000001]
[03:13:26.027]    </block>
[03:13:26.028]    <control if="" while="1" timeout="200" info="">
[03:13:26.028]      // while "1"  (timeout="200")
[03:13:26.028]      // while-condition  =>  TRUE
[03:13:26.028]      // while "1"  (timeout="200")
[03:13:26.028]      // while-condition  =>  TRUE
[03:13:26.028]      // while "1"  (timeout="200")
[03:13:26.028]      // while-condition  =>  TRUE
[03:13:26.028]      // while "1"  (timeout="200")
[03:13:26.028]      // while-condition  =>  TRUE
[03:13:26.028]      // while "1"  (timeout="200")
[03:13:26.029]      // while-condition  =>  TRUE
[03:13:26.029]      // while "1"  (timeout="200")
[03:13:26.029]      // while-condition  =>  TRUE
[03:13:26.029]      // while "1"  (timeout="200")
[03:13:26.029]      // while-condition  =>  TRUE
[03:13:26.029]      // while "1"  (timeout="200")
[03:13:26.029]      // while-condition  =>  TRUE
[03:13:26.029]      // while "1"  (timeout="200")
[03:13:26.029]      // while-condition  =>  TRUE
[03:13:26.030]      // while "1"  (timeout="200")
[03:13:26.030]      // while-condition  =>  TRUE
[03:13:26.030]      // while "1"  (timeout="200")
[03:13:26.030]      // while-condition  =>  TRUE
[03:13:26.030]      // while "1"  (timeout="200")
[03:13:26.030]      // while-condition  =>  TRUE
[03:13:26.030]      // while "1"  (timeout="200")
[03:13:26.030]      // while-condition  =>  TRUE
[03:13:26.030]      // while "1"  (timeout="200")
[03:13:26.031]      // while-condition  =>  TRUE
[03:13:26.031]      // while "1"  (timeout="200")
[03:13:26.031]      // while-condition  =>  TRUE
[03:13:26.031]      // while "1"  (timeout="200")
[03:13:26.031]      // while-condition  =>  TRUE
[03:13:26.031]      // while "1"  (timeout="200")
[03:13:26.031]      // while-condition  =>  TRUE
[03:13:26.031]      // while "1"  (timeout="200")
[03:13:26.031]      // while-condition  =>  TRUE
[03:13:26.031]      // while "1"  (timeout="200")
[03:13:26.031]      // while-condition  =>  TRUE
[03:13:26.031]      // while "1"  (timeout="200")
[03:13:26.032]      // while-condition  =>  TRUE
[03:13:26.032]      // while "1"  (timeout="200")
[03:13:26.032]      // while-condition  =>  TRUE
[03:13:26.032]      // while "1"  (timeout="200")
[03:13:26.032]      // while-condition  =>  TRUE
[03:13:26.032]      // while "1"  (timeout="200")
[03:13:26.032]      // while-condition  =>  TRUE
[03:13:26.032]      // while "1"  (timeout="200")
[03:13:26.032]      // while-condition  =>  TRUE
[03:13:26.032]      // while "1"  (timeout="200")
[03:13:26.033]      // while-condition  =>  TRUE
[03:13:26.033]      // while "1"  (timeout="200")
[03:13:26.033]      // while-condition  =>  TRUE
[03:13:26.033]      // while "1"  (timeout="200")
[03:13:26.033]      // while-condition  =>  TRUE
[03:13:26.033]      // while "1"  (timeout="200")
[03:13:26.033]      // while-condition  =>  TRUE
[03:13:26.034]      // while "1"  (timeout="200")
[03:13:26.034]      // while  =>  TIMEOUT
[03:13:26.034]      // end while "1"
[03:13:26.034]    </control>
[03:13:26.034]    <control if="canReadPins" while="" timeout="0" info="">
[03:13:26.034]      // if-block "canReadPins"
[03:13:26.034]        // =>  TRUE
[03:13:26.034]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:13:26.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:13:26.037]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:13:26.037]        // while-condition  =>  FALSE
[03:13:26.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:13:26.037]      </control>
[03:13:26.037]      // end if-block "canReadPins"
[03:13:26.037]    </control>
[03:13:26.038]    <control if="!canReadPins" while="" timeout="0" info="">
[03:13:26.038]      // if-block "!canReadPins"
[03:13:26.038]        // =>  FALSE
[03:13:26.038]      // skip if-block "!canReadPins"
[03:13:26.038]    </control>
[03:13:26.038]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:13:26.038]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:13:26.038]        // =>  TRUE
[03:13:26.038]      <block atomic="false" info="">
[03:13:26.038]        WriteAP(0x00, 0x190008);
[03:13:26.040]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:13:26.041]        WriteAP(0xF0, 0x01);
[03:13:26.045]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:13:26.045]      </block>
[03:13:26.045]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:13:26.045]    </control>
[03:13:26.045]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:13:26.045]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:13:26.045]        // =>  FALSE
[03:13:26.045]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:13:26.046]    </control>
[03:13:26.046]    <block atomic="false" info="">
[03:13:26.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:13:26.050]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:13:26.051]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:13:26.051]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:13:26.052]      __ap = 0; //lets make sure we reset the access point selection
[03:13:26.052]        // -> [__ap <= 0x00000000]
[03:13:26.053]    </block>
[03:13:26.053]  </sequence>
[03:13:26.053]  
[03:13:26.071]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:13:26.071]  
[03:13:26.071]  <debugvars>
[03:13:26.072]    // Pre-defined
[03:13:26.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:26.072]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:13:26.072]    __dp=0x00000000
[03:13:26.072]    __ap=0x00000000
[03:13:26.072]    __traceout=0x00000000      (Trace Disabled)
[03:13:26.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:26.073]    __FlashAddr=0x00000000
[03:13:26.073]    __FlashLen=0x00000000
[03:13:26.073]    __FlashArg=0x00000000
[03:13:26.073]    __FlashOp=0x00000000
[03:13:26.073]    __Result=0x00000000
[03:13:26.073]  </debugvars>
[03:13:26.073]  
[03:13:26.073]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:13:26.073]    <block atomic="false" info="">
[03:13:26.073]      __var deviceID = 0;
[03:13:26.073]        // -> [deviceID <= 0x00000000]
[03:13:26.073]      __var version = 0;
[03:13:26.073]        // -> [version <= 0x00000000]
[03:13:26.074]      __var partNum = 0;
[03:13:26.074]        // -> [partNum <= 0x00000000]
[03:13:26.074]      __var manuf = 0;
[03:13:26.074]        // -> [manuf <= 0x00000000]
[03:13:26.074]      __var isMSPM0G1X0X_G3X0X = 0;
[03:13:26.074]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:13:26.074]      __var isProduction = 0;
[03:13:26.074]        // -> [isProduction <= 0x00000000]
[03:13:26.074]      __var continueId = 0;
[03:13:26.074]        // -> [continueId <= 0x00000000]
[03:13:26.074]      deviceID =   Read32(0x41C40004);
[03:13:26.079]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:13:26.079]        // -> [deviceID <= 0x2BB8802F]
[03:13:26.079]      version = deviceID >> 28;
[03:13:26.080]        // -> [version <= 0x00000002]
[03:13:26.080]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:13:26.080]        // -> [partNum <= 0x0000BB88]
[03:13:26.080]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:13:26.080]        // -> [manuf <= 0x00000017]
[03:13:26.080]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:13:26.080]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:13:26.080]      isProduction = (version > 0);
[03:13:26.080]        // -> [isProduction <= 0x00000001]
[03:13:26.080]    </block>
[03:13:26.080]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:13:26.080]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:13:26.080]        // =>  FALSE
[03:13:26.080]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:13:26.081]    </control>
[03:13:26.081]    <control if="continueId == 4" while="" timeout="0" info="">
[03:13:26.081]      // if-block "continueId == 4"
[03:13:26.081]        // =>  FALSE
[03:13:26.081]      // skip if-block "continueId == 4"
[03:13:26.081]    </control>
[03:13:26.081]    <control if="!isProduction" while="" timeout="0" info="">
[03:13:26.081]      // if-block "!isProduction"
[03:13:26.081]        // =>  FALSE
[03:13:26.081]      // skip if-block "!isProduction"
[03:13:26.081]    </control>
[03:13:26.081]  </sequence>
[03:13:26.081]  
[03:16:57.800]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:16:57.800]  
[03:16:57.809]  <debugvars>
[03:16:57.809]    // Pre-defined
[03:16:57.809]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:16:57.809]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:16:57.809]    __dp=0x00000000
[03:16:57.809]    __ap=0x00000000
[03:16:57.809]    __traceout=0x00000000      (Trace Disabled)
[03:16:57.809]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:16:57.809]    __FlashAddr=0x00000000
[03:16:57.809]    __FlashLen=0x00000000
[03:16:57.810]    __FlashArg=0x00000000
[03:16:57.810]    __FlashOp=0x00000000
[03:16:57.810]    __Result=0x00000000
[03:16:57.810]  </debugvars>
[03:16:57.810]  
[03:16:57.810]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:16:57.810]    <block atomic="false" info="">
[03:16:57.810]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:16:57.810]        // -> [isSWJ <= 0x00000001]
[03:16:57.810]      __var hasDormant = __protocol & 0x00020000;
[03:16:57.810]        // -> [hasDormant <= 0x00000000]
[03:16:57.810]      __var protType   = __protocol & 0x0000FFFF;
[03:16:57.810]        // -> [protType <= 0x00000002]
[03:16:57.812]    </block>
[03:16:57.812]    <control if="protType == 1" while="" timeout="0" info="">
[03:16:57.812]      // if-block "protType == 1"
[03:16:57.812]        // =>  FALSE
[03:16:57.812]      // skip if-block "protType == 1"
[03:16:57.812]    </control>
[03:16:57.812]    <control if="protType == 2" while="" timeout="0" info="">
[03:16:57.812]      // if-block "protType == 2"
[03:16:57.812]        // =>  TRUE
[03:16:57.812]      <control if="isSWJ" while="" timeout="0" info="">
[03:16:57.812]        // if-block "isSWJ"
[03:16:57.812]          // =>  TRUE
[03:16:57.812]        <control if="hasDormant" while="" timeout="0" info="">
[03:16:57.812]          // if-block "hasDormant"
[03:16:57.812]            // =>  FALSE
[03:16:57.813]          // skip if-block "hasDormant"
[03:16:57.813]        </control>
[03:16:57.813]        <control if="!hasDormant" while="" timeout="0" info="">
[03:16:57.813]          // if-block "!hasDormant"
[03:16:57.813]            // =>  TRUE
[03:16:57.813]          <block atomic="false" info="">
[03:16:57.813]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:16:57.815]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:16:57.815]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:16:57.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:16:57.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:16:57.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:16:57.818]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:16:57.819]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:16:57.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:16:57.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:16:57.822]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:16:57.823]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:16:57.823]          </block>
[03:16:57.823]          // end if-block "!hasDormant"
[03:16:57.823]        </control>
[03:16:57.824]        // end if-block "isSWJ"
[03:16:57.824]      </control>
[03:16:57.824]      <control if="!isSWJ" while="" timeout="0" info="">
[03:16:57.824]        // if-block "!isSWJ"
[03:16:57.824]          // =>  FALSE
[03:16:57.824]        // skip if-block "!isSWJ"
[03:16:57.824]      </control>
[03:16:57.825]      <block atomic="false" info="">
[03:16:57.825]        ReadDP(0x0);
[03:16:57.827]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:16:57.827]      </block>
[03:16:57.827]      // end if-block "protType == 2"
[03:16:57.827]    </control>
[03:16:57.827]  </sequence>
[03:16:57.828]  
[03:16:57.831]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:16:57.831]  
[03:16:57.831]  <debugvars>
[03:16:57.831]    // Pre-defined
[03:16:57.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:16:57.831]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:16:57.831]    __dp=0x00000000
[03:16:57.831]    __ap=0x00000000
[03:16:57.831]    __traceout=0x00000000      (Trace Disabled)
[03:16:57.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:16:57.832]    __FlashAddr=0x00000000
[03:16:57.832]    __FlashLen=0x00000000
[03:16:57.832]    __FlashArg=0x00000000
[03:16:57.832]    __FlashOp=0x00000000
[03:16:57.832]    __Result=0x00000000
[03:16:57.832]  </debugvars>
[03:16:57.832]  
[03:16:57.832]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:16:57.832]    <block atomic="false" info="">
[03:16:57.832]      __var SW_DP_ABORT       = 0x0;
[03:16:57.832]        // -> [SW_DP_ABORT <= 0x00000000]
[03:16:57.832]      __var DP_CTRL_STAT      = 0x4;
[03:16:57.832]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:16:57.832]      __var DP_SELECT         = 0x8;
[03:16:57.832]        // -> [DP_SELECT <= 0x00000008]
[03:16:57.833]      __var powered_down      = 0;
[03:16:57.833]        // -> [powered_down <= 0x00000000]
[03:16:57.833]      WriteDP(DP_SELECT, 0x00000000);
[03:16:57.835]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:16:57.835]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:16:57.837]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:16:57.837]        // -> [powered_down <= 0x00000001]
[03:16:57.837]    </block>
[03:16:57.837]    <control if="powered_down" while="" timeout="0" info="">
[03:16:57.837]      // if-block "powered_down"
[03:16:57.837]        // =>  TRUE
[03:16:57.837]      <block atomic="false" info="">
[03:16:57.837]        Message(0, "Debug/System power-up request sent");
[03:16:57.839]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:16:57.840]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:16:57.840]      </block>
[03:16:57.841]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:16:57.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:16:57.842]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:16:57.842]        // while-condition  =>  FALSE
[03:16:57.842]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:16:57.843]      </control>
[03:16:57.843]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:16:57.843]        // if-block "(__protocol & 0xFFFF) == 1"
[03:16:57.843]          // =>  FALSE
[03:16:57.843]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:16:57.843]      </control>
[03:16:57.843]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:16:57.843]        // if-block "(__protocol & 0xFFFF) == 2"
[03:16:57.843]          // =>  TRUE
[03:16:57.844]        <block atomic="false" info="">
[03:16:57.844]          Message(0, "executing SWD power up");
[03:16:57.845]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:16:57.846]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:16:57.846]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:16:57.849]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:16:57.849]        </block>
[03:16:57.849]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:16:57.849]      </control>
[03:16:57.849]      // end if-block "powered_down"
[03:16:57.849]    </control>
[03:16:57.849]    <block atomic="false" info="">
[03:16:57.849]      __var DEBUG_PORT_VAL    = 0;
[03:16:57.850]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:16:57.850]      __var ACCESS_POINT_VAL  = 0;
[03:16:57.850]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:16:57.850]      __ap = 1; 
[03:16:57.850]        // -> [__ap <= 0x00000001]
[03:16:57.850]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:16:57.854]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:16:57.854]      __ap = 4;
[03:16:57.854]        // -> [__ap <= 0x00000004]
[03:16:57.854]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:16:57.857]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:16:57.857]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:16:57.857]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:16:57.858]    </block>
[03:16:57.858]    <block atomic="false" info="">
[03:16:57.858]      __var nReset = 0x80;
[03:16:57.858]        // -> [nReset <= 0x00000080]
[03:16:57.858]      __var canReadPins = 0;
[03:16:57.859]        // -> [canReadPins <= 0x00000000]
[03:16:57.859]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:16:57.860]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:16:57.860]        // -> [canReadPins <= 0x00000001]
[03:16:57.860]    </block>
[03:16:57.861]    <control if="" while="1" timeout="200" info="">
[03:16:57.861]      // while "1"  (timeout="200")
[03:16:57.861]      // while-condition  =>  TRUE
[03:16:57.861]      // while "1"  (timeout="200")
[03:16:57.861]      // while-condition  =>  TRUE
[03:16:57.861]      // while "1"  (timeout="200")
[03:16:57.861]      // while-condition  =>  TRUE
[03:16:57.861]      // while "1"  (timeout="200")
[03:16:57.861]      // while-condition  =>  TRUE
[03:16:57.861]      // while "1"  (timeout="200")
[03:16:57.862]      // while-condition  =>  TRUE
[03:16:57.862]      // while "1"  (timeout="200")
[03:16:57.862]      // while  =>  TIMEOUT
[03:16:57.862]      // end while "1"
[03:16:57.862]    </control>
[03:16:57.862]    <control if="canReadPins" while="" timeout="0" info="">
[03:16:57.862]      // if-block "canReadPins"
[03:16:57.862]        // =>  TRUE
[03:16:57.862]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:16:57.862]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:16:57.864]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:16:57.864]        // while-condition  =>  FALSE
[03:16:57.864]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:16:57.865]      </control>
[03:16:57.865]      // end if-block "canReadPins"
[03:16:57.865]    </control>
[03:16:57.865]    <control if="!canReadPins" while="" timeout="0" info="">
[03:16:57.865]      // if-block "!canReadPins"
[03:16:57.865]        // =>  FALSE
[03:16:57.865]      // skip if-block "!canReadPins"
[03:16:57.865]    </control>
[03:16:57.865]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:16:57.865]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:16:57.865]        // =>  TRUE
[03:16:57.867]      <block atomic="false" info="">
[03:16:57.867]        WriteAP(0x00, 0x190008);
[03:16:57.868]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:16:57.868]        WriteAP(0xF0, 0x01);
[03:16:57.872]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:16:57.872]      </block>
[03:16:57.872]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:16:57.873]    </control>
[03:16:57.873]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:16:57.873]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:16:57.873]        // =>  FALSE
[03:16:57.873]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:16:57.873]    </control>
[03:16:57.873]    <block atomic="false" info="">
[03:16:57.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:16:57.877]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:16:57.877]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:16:57.877]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:16:57.878]      __ap = 0; //lets make sure we reset the access point selection
[03:16:57.878]        // -> [__ap <= 0x00000000]
[03:16:57.879]    </block>
[03:16:57.879]  </sequence>
[03:16:57.879]  
[03:16:57.897]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:16:57.897]  
[03:16:57.897]  <debugvars>
[03:16:57.899]    // Pre-defined
[03:16:57.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:16:57.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:16:57.899]    __dp=0x00000000
[03:16:57.899]    __ap=0x00000000
[03:16:57.899]    __traceout=0x00000000      (Trace Disabled)
[03:16:57.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:16:57.899]    __FlashAddr=0x00000000
[03:16:57.899]    __FlashLen=0x00000000
[03:16:57.899]    __FlashArg=0x00000000
[03:16:57.900]    __FlashOp=0x00000000
[03:16:57.900]    __Result=0x00000000
[03:16:57.900]  </debugvars>
[03:16:57.900]  
[03:16:57.900]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:16:57.900]    <block atomic="false" info="">
[03:16:57.900]      __var deviceID = 0;
[03:16:57.900]        // -> [deviceID <= 0x00000000]
[03:16:57.900]      __var version = 0;
[03:16:57.901]        // -> [version <= 0x00000000]
[03:16:57.901]      __var partNum = 0;
[03:16:57.901]        // -> [partNum <= 0x00000000]
[03:16:57.901]      __var manuf = 0;
[03:16:57.901]        // -> [manuf <= 0x00000000]
[03:16:57.901]      __var isMSPM0G1X0X_G3X0X = 0;
[03:16:57.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:16:57.902]      __var isProduction = 0;
[03:16:57.902]        // -> [isProduction <= 0x00000000]
[03:16:57.902]      __var continueId = 0;
[03:16:57.902]        // -> [continueId <= 0x00000000]
[03:16:57.902]      deviceID =   Read32(0x41C40004);
[03:16:57.907]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:16:57.908]        // -> [deviceID <= 0x2BB8802F]
[03:16:57.908]      version = deviceID >> 28;
[03:16:57.908]        // -> [version <= 0x00000002]
[03:16:57.908]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:16:57.908]        // -> [partNum <= 0x0000BB88]
[03:16:57.908]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:16:57.908]        // -> [manuf <= 0x00000017]
[03:16:57.908]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:16:57.908]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:16:57.908]      isProduction = (version > 0);
[03:16:57.908]        // -> [isProduction <= 0x00000001]
[03:16:57.909]    </block>
[03:16:57.909]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:16:57.909]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:16:57.909]        // =>  FALSE
[03:16:57.909]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:16:57.909]    </control>
[03:16:57.909]    <control if="continueId == 4" while="" timeout="0" info="">
[03:16:57.909]      // if-block "continueId == 4"
[03:16:57.909]        // =>  FALSE
[03:16:57.909]      // skip if-block "continueId == 4"
[03:16:57.909]    </control>
[03:16:57.910]    <control if="!isProduction" while="" timeout="0" info="">
[03:16:57.910]      // if-block "!isProduction"
[03:16:57.910]        // =>  FALSE
[03:16:57.910]      // skip if-block "!isProduction"
[03:16:57.910]    </control>
[03:16:57.910]  </sequence>
[03:16:57.910]  
[03:20:10.120]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:20:10.120]  
[03:20:10.129]  <debugvars>
[03:20:10.129]    // Pre-defined
[03:20:10.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:20:10.129]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:20:10.129]    __dp=0x00000000
[03:20:10.129]    __ap=0x00000000
[03:20:10.129]    __traceout=0x00000000      (Trace Disabled)
[03:20:10.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:20:10.129]    __FlashAddr=0x00000000
[03:20:10.130]    __FlashLen=0x00000000
[03:20:10.130]    __FlashArg=0x00000000
[03:20:10.130]    __FlashOp=0x00000000
[03:20:10.130]    __Result=0x00000000
[03:20:10.130]  </debugvars>
[03:20:10.130]  
[03:20:10.130]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:20:10.130]    <block atomic="false" info="">
[03:20:10.130]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:20:10.130]        // -> [isSWJ <= 0x00000001]
[03:20:10.130]      __var hasDormant = __protocol & 0x00020000;
[03:20:10.130]        // -> [hasDormant <= 0x00000000]
[03:20:10.131]      __var protType   = __protocol & 0x0000FFFF;
[03:20:10.131]        // -> [protType <= 0x00000002]
[03:20:10.131]    </block>
[03:20:10.131]    <control if="protType == 1" while="" timeout="0" info="">
[03:20:10.131]      // if-block "protType == 1"
[03:20:10.131]        // =>  FALSE
[03:20:10.131]      // skip if-block "protType == 1"
[03:20:10.131]    </control>
[03:20:10.131]    <control if="protType == 2" while="" timeout="0" info="">
[03:20:10.131]      // if-block "protType == 2"
[03:20:10.131]        // =>  TRUE
[03:20:10.131]      <control if="isSWJ" while="" timeout="0" info="">
[03:20:10.132]        // if-block "isSWJ"
[03:20:10.132]          // =>  TRUE
[03:20:10.132]        <control if="hasDormant" while="" timeout="0" info="">
[03:20:10.132]          // if-block "hasDormant"
[03:20:10.132]            // =>  FALSE
[03:20:10.132]          // skip if-block "hasDormant"
[03:20:10.132]        </control>
[03:20:10.132]        <control if="!hasDormant" while="" timeout="0" info="">
[03:20:10.132]          // if-block "!hasDormant"
[03:20:10.132]            // =>  TRUE
[03:20:10.132]          <block atomic="false" info="">
[03:20:10.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:20:10.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:20:10.133]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:20:10.136]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:20:10.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:20:10.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:20:10.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:20:10.138]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:20:10.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:20:10.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:20:10.140]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:20:10.141]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:20:10.141]          </block>
[03:20:10.141]          // end if-block "!hasDormant"
[03:20:10.141]        </control>
[03:20:10.141]        // end if-block "isSWJ"
[03:20:10.141]      </control>
[03:20:10.141]      <control if="!isSWJ" while="" timeout="0" info="">
[03:20:10.141]        // if-block "!isSWJ"
[03:20:10.141]          // =>  FALSE
[03:20:10.141]        // skip if-block "!isSWJ"
[03:20:10.141]      </control>
[03:20:10.142]      <block atomic="false" info="">
[03:20:10.142]        ReadDP(0x0);
[03:20:10.143]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:20:10.143]      </block>
[03:20:10.143]      // end if-block "protType == 2"
[03:20:10.143]    </control>
[03:20:10.143]  </sequence>
[03:20:10.143]  
[03:20:10.147]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:20:10.147]  
[03:20:10.147]  <debugvars>
[03:20:10.147]    // Pre-defined
[03:20:10.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:20:10.147]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:20:10.147]    __dp=0x00000000
[03:20:10.147]    __ap=0x00000000
[03:20:10.147]    __traceout=0x00000000      (Trace Disabled)
[03:20:10.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:20:10.148]    __FlashAddr=0x00000000
[03:20:10.148]    __FlashLen=0x00000000
[03:20:10.148]    __FlashArg=0x00000000
[03:20:10.148]    __FlashOp=0x00000000
[03:20:10.148]    __Result=0x00000000
[03:20:10.148]  </debugvars>
[03:20:10.148]  
[03:20:10.148]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:20:10.148]    <block atomic="false" info="">
[03:20:10.148]      __var SW_DP_ABORT       = 0x0;
[03:20:10.148]        // -> [SW_DP_ABORT <= 0x00000000]
[03:20:10.148]      __var DP_CTRL_STAT      = 0x4;
[03:20:10.149]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:20:10.149]      __var DP_SELECT         = 0x8;
[03:20:10.149]        // -> [DP_SELECT <= 0x00000008]
[03:20:10.149]      __var powered_down      = 0;
[03:20:10.149]        // -> [powered_down <= 0x00000000]
[03:20:10.149]      WriteDP(DP_SELECT, 0x00000000);
[03:20:10.150]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:20:10.150]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:20:10.151]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:20:10.152]        // -> [powered_down <= 0x00000001]
[03:20:10.152]    </block>
[03:20:10.152]    <control if="powered_down" while="" timeout="0" info="">
[03:20:10.152]      // if-block "powered_down"
[03:20:10.153]        // =>  TRUE
[03:20:10.153]      <block atomic="false" info="">
[03:20:10.153]        Message(0, "Debug/System power-up request sent");
[03:20:10.156]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:20:10.157]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:20:10.158]      </block>
[03:20:10.158]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:20:10.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:20:10.159]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:20:10.159]        // while-condition  =>  FALSE
[03:20:10.159]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:20:10.159]      </control>
[03:20:10.159]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:20:10.159]        // if-block "(__protocol & 0xFFFF) == 1"
[03:20:10.160]          // =>  FALSE
[03:20:10.160]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:20:10.160]      </control>
[03:20:10.160]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:20:10.160]        // if-block "(__protocol & 0xFFFF) == 2"
[03:20:10.160]          // =>  TRUE
[03:20:10.160]        <block atomic="false" info="">
[03:20:10.160]          Message(0, "executing SWD power up");
[03:20:10.163]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:20:10.164]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:20:10.164]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:20:10.167]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:20:10.167]        </block>
[03:20:10.167]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:20:10.168]      </control>
[03:20:10.168]      // end if-block "powered_down"
[03:20:10.168]    </control>
[03:20:10.168]    <block atomic="false" info="">
[03:20:10.168]      __var DEBUG_PORT_VAL    = 0;
[03:20:10.168]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:20:10.168]      __var ACCESS_POINT_VAL  = 0;
[03:20:10.168]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:20:10.168]      __ap = 1; 
[03:20:10.168]        // -> [__ap <= 0x00000001]
[03:20:10.168]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:20:10.171]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:20:10.171]      __ap = 4;
[03:20:10.171]        // -> [__ap <= 0x00000004]
[03:20:10.172]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:20:10.175]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.175]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:20:10.175]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:20:10.182]    </block>
[03:20:10.182]    <block atomic="false" info="">
[03:20:10.182]      __var nReset = 0x80;
[03:20:10.182]        // -> [nReset <= 0x00000080]
[03:20:10.182]      __var canReadPins = 0;
[03:20:10.182]        // -> [canReadPins <= 0x00000000]
[03:20:10.182]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:20:10.185]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:20:10.185]        // -> [canReadPins <= 0x00000001]
[03:20:10.185]    </block>
[03:20:10.185]    <control if="" while="1" timeout="200" info="">
[03:20:10.185]      // while "1"  (timeout="200")
[03:20:10.185]      // while-condition  =>  TRUE
[03:20:10.185]      // while "1"  (timeout="200")
[03:20:10.185]      // while-condition  =>  TRUE
[03:20:10.185]      // while "1"  (timeout="200")
[03:20:10.187]      // while-condition  =>  TRUE
[03:20:10.187]      // while "1"  (timeout="200")
[03:20:10.187]      // while-condition  =>  TRUE
[03:20:10.187]      // while "1"  (timeout="200")
[03:20:10.187]      // while-condition  =>  TRUE
[03:20:10.187]      // while "1"  (timeout="200")
[03:20:10.187]      // while-condition  =>  TRUE
[03:20:10.187]      // while "1"  (timeout="200")
[03:20:10.187]      // while-condition  =>  TRUE
[03:20:10.188]      // while "1"  (timeout="200")
[03:20:10.188]      // while-condition  =>  TRUE
[03:20:10.188]      // while "1"  (timeout="200")
[03:20:10.188]      // while-condition  =>  TRUE
[03:20:10.188]      // while "1"  (timeout="200")
[03:20:10.188]      // while-condition  =>  TRUE
[03:20:10.188]      // while "1"  (timeout="200")
[03:20:10.188]      // while-condition  =>  TRUE
[03:20:10.188]      // while "1"  (timeout="200")
[03:20:10.188]      // while-condition  =>  TRUE
[03:20:10.189]      // while "1"  (timeout="200")
[03:20:10.189]      // while-condition  =>  TRUE
[03:20:10.189]      // while "1"  (timeout="200")
[03:20:10.189]      // while-condition  =>  TRUE
[03:20:10.189]      // while "1"  (timeout="200")
[03:20:10.189]      // while-condition  =>  TRUE
[03:20:10.189]      // while "1"  (timeout="200")
[03:20:10.189]      // while-condition  =>  TRUE
[03:20:10.189]      // while "1"  (timeout="200")
[03:20:10.189]      // while-condition  =>  TRUE
[03:20:10.189]      // while "1"  (timeout="200")
[03:20:10.189]      // while-condition  =>  TRUE
[03:20:10.191]      // while "1"  (timeout="200")
[03:20:10.191]      // while  =>  TIMEOUT
[03:20:10.191]      // end while "1"
[03:20:10.191]    </control>
[03:20:10.191]    <control if="canReadPins" while="" timeout="0" info="">
[03:20:10.191]      // if-block "canReadPins"
[03:20:10.192]        // =>  TRUE
[03:20:10.192]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:20:10.192]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:20:10.193]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:20:10.193]        // while-condition  =>  FALSE
[03:20:10.193]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:20:10.193]      </control>
[03:20:10.193]      // end if-block "canReadPins"
[03:20:10.193]    </control>
[03:20:10.194]    <control if="!canReadPins" while="" timeout="0" info="">
[03:20:10.194]      // if-block "!canReadPins"
[03:20:10.194]        // =>  FALSE
[03:20:10.194]      // skip if-block "!canReadPins"
[03:20:10.194]    </control>
[03:20:10.194]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:20:10.195]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:20:10.195]        // =>  TRUE
[03:20:10.195]      <block atomic="false" info="">
[03:20:10.195]        WriteAP(0x00, 0x190008);
[03:20:10.196]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.196]        WriteAP(0xF0, 0x01);
[03:20:10.199]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.199]      </block>
[03:20:10.199]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:20:10.201]    </control>
[03:20:10.201]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:20:10.201]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:20:10.201]        // =>  FALSE
[03:20:10.201]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:20:10.201]    </control>
[03:20:10.201]    <block atomic="false" info="">
[03:20:10.201]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:20:10.204]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.204]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:20:10.204]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:20:10.206]      __ap = 0; //lets make sure we reset the access point selection
[03:20:10.206]        // -> [__ap <= 0x00000000]
[03:20:10.206]    </block>
[03:20:10.206]  </sequence>
[03:20:10.207]  
[03:20:10.227]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:20:10.227]  
[03:20:10.227]  <debugvars>
[03:20:10.228]    // Pre-defined
[03:20:10.228]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:20:10.228]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:20:10.228]    __dp=0x00000000
[03:20:10.228]    __ap=0x00000000
[03:20:10.228]    __traceout=0x00000000      (Trace Disabled)
[03:20:10.228]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:20:10.228]    __FlashAddr=0x00000000
[03:20:10.228]    __FlashLen=0x00000000
[03:20:10.230]    __FlashArg=0x00000000
[03:20:10.230]    __FlashOp=0x00000000
[03:20:10.230]    __Result=0x00000000
[03:20:10.230]  </debugvars>
[03:20:10.230]  
[03:20:10.230]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:20:10.230]    <block atomic="false" info="">
[03:20:10.230]      __var deviceID = 0;
[03:20:10.230]        // -> [deviceID <= 0x00000000]
[03:20:10.230]      __var version = 0;
[03:20:10.230]        // -> [version <= 0x00000000]
[03:20:10.231]      __var partNum = 0;
[03:20:10.231]        // -> [partNum <= 0x00000000]
[03:20:10.231]      __var manuf = 0;
[03:20:10.231]        // -> [manuf <= 0x00000000]
[03:20:10.231]      __var isMSPM0G1X0X_G3X0X = 0;
[03:20:10.231]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:20:10.231]      __var isProduction = 0;
[03:20:10.231]        // -> [isProduction <= 0x00000000]
[03:20:10.231]      __var continueId = 0;
[03:20:10.231]        // -> [continueId <= 0x00000000]
[03:20:10.231]      deviceID =   Read32(0x41C40004);
[03:20:10.235]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:20:10.235]        // -> [deviceID <= 0x2BB8802F]
[03:20:10.237]      version = deviceID >> 28;
[03:20:10.237]        // -> [version <= 0x00000002]
[03:20:10.237]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:20:10.237]        // -> [partNum <= 0x0000BB88]
[03:20:10.237]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:20:10.237]        // -> [manuf <= 0x00000017]
[03:20:10.237]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:20:10.237]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:20:10.237]      isProduction = (version > 0);
[03:20:10.237]        // -> [isProduction <= 0x00000001]
[03:20:10.238]    </block>
[03:20:10.238]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:20:10.238]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:20:10.238]        // =>  FALSE
[03:20:10.238]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:20:10.238]    </control>
[03:20:10.238]    <control if="continueId == 4" while="" timeout="0" info="">
[03:20:10.238]      // if-block "continueId == 4"
[03:20:10.238]        // =>  FALSE
[03:20:10.238]      // skip if-block "continueId == 4"
[03:20:10.238]    </control>
[03:20:10.238]    <control if="!isProduction" while="" timeout="0" info="">
[03:20:10.239]      // if-block "!isProduction"
[03:20:10.239]        // =>  FALSE
[03:20:10.239]      // skip if-block "!isProduction"
[03:20:10.239]    </control>
[03:20:10.239]  </sequence>
[03:20:10.239]  
[03:21:50.924]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:21:50.924]  
[03:21:50.932]  <debugvars>
[03:21:50.932]    // Pre-defined
[03:21:50.932]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:50.932]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:50.932]    __dp=0x00000000
[03:21:50.932]    __ap=0x00000000
[03:21:50.932]    __traceout=0x00000000      (Trace Disabled)
[03:21:50.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:50.932]    __FlashAddr=0x00000000
[03:21:50.932]    __FlashLen=0x00000000
[03:21:50.932]    __FlashArg=0x00000000
[03:21:50.933]    __FlashOp=0x00000000
[03:21:50.933]    __Result=0x00000000
[03:21:50.933]  </debugvars>
[03:21:50.933]  
[03:21:50.933]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:21:50.933]    <block atomic="false" info="">
[03:21:50.933]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:21:50.933]        // -> [isSWJ <= 0x00000001]
[03:21:50.933]      __var hasDormant = __protocol & 0x00020000;
[03:21:50.933]        // -> [hasDormant <= 0x00000000]
[03:21:50.934]      __var protType   = __protocol & 0x0000FFFF;
[03:21:50.934]        // -> [protType <= 0x00000002]
[03:21:50.934]    </block>
[03:21:50.934]    <control if="protType == 1" while="" timeout="0" info="">
[03:21:50.934]      // if-block "protType == 1"
[03:21:50.934]        // =>  FALSE
[03:21:50.934]      // skip if-block "protType == 1"
[03:21:50.934]    </control>
[03:21:50.934]    <control if="protType == 2" while="" timeout="0" info="">
[03:21:50.935]      // if-block "protType == 2"
[03:21:50.935]        // =>  TRUE
[03:21:50.935]      <control if="isSWJ" while="" timeout="0" info="">
[03:21:50.936]        // if-block "isSWJ"
[03:21:50.936]          // =>  TRUE
[03:21:50.936]        <control if="hasDormant" while="" timeout="0" info="">
[03:21:50.936]          // if-block "hasDormant"
[03:21:50.936]            // =>  FALSE
[03:21:50.936]          // skip if-block "hasDormant"
[03:21:50.936]        </control>
[03:21:50.936]        <control if="!hasDormant" while="" timeout="0" info="">
[03:21:50.936]          // if-block "!hasDormant"
[03:21:50.936]            // =>  TRUE
[03:21:50.936]          <block atomic="false" info="">
[03:21:50.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:21:50.938]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:50.938]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:21:50.939]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:21:50.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:21:50.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:50.941]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:21:50.942]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:21:50.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:21:50.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:50.945]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:21:50.946]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:21:50.946]          </block>
[03:21:50.946]          // end if-block "!hasDormant"
[03:21:50.947]        </control>
[03:21:50.947]        // end if-block "isSWJ"
[03:21:50.947]      </control>
[03:21:50.947]      <control if="!isSWJ" while="" timeout="0" info="">
[03:21:50.947]        // if-block "!isSWJ"
[03:21:50.947]          // =>  FALSE
[03:21:50.947]        // skip if-block "!isSWJ"
[03:21:50.947]      </control>
[03:21:50.947]      <block atomic="false" info="">
[03:21:50.947]        ReadDP(0x0);
[03:21:50.949]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:21:50.949]      </block>
[03:21:50.949]      // end if-block "protType == 2"
[03:21:50.949]    </control>
[03:21:50.949]  </sequence>
[03:21:50.949]  
[03:21:50.951]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:21:50.951]  
[03:21:50.952]  <debugvars>
[03:21:50.952]    // Pre-defined
[03:21:50.952]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:50.952]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:50.952]    __dp=0x00000000
[03:21:50.952]    __ap=0x00000000
[03:21:50.952]    __traceout=0x00000000      (Trace Disabled)
[03:21:50.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:50.953]    __FlashAddr=0x00000000
[03:21:50.953]    __FlashLen=0x00000000
[03:21:50.953]    __FlashArg=0x00000000
[03:21:50.953]    __FlashOp=0x00000000
[03:21:50.953]    __Result=0x00000000
[03:21:50.953]  </debugvars>
[03:21:50.953]  
[03:21:50.954]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:21:50.954]    <block atomic="false" info="">
[03:21:50.955]      __var SW_DP_ABORT       = 0x0;
[03:21:50.955]        // -> [SW_DP_ABORT <= 0x00000000]
[03:21:50.955]      __var DP_CTRL_STAT      = 0x4;
[03:21:50.955]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:21:50.955]      __var DP_SELECT         = 0x8;
[03:21:50.955]        // -> [DP_SELECT <= 0x00000008]
[03:21:50.955]      __var powered_down      = 0;
[03:21:50.955]        // -> [powered_down <= 0x00000000]
[03:21:50.956]      WriteDP(DP_SELECT, 0x00000000);
[03:21:50.957]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:21:50.957]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:21:50.958]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:21:50.959]        // -> [powered_down <= 0x00000001]
[03:21:50.959]    </block>
[03:21:50.959]    <control if="powered_down" while="" timeout="0" info="">
[03:21:50.959]      // if-block "powered_down"
[03:21:50.959]        // =>  TRUE
[03:21:50.959]      <block atomic="false" info="">
[03:21:50.959]        Message(0, "Debug/System power-up request sent");
[03:21:50.961]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:21:50.962]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:21:50.962]      </block>
[03:21:50.962]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:21:50.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:21:50.964]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:21:50.964]        // while-condition  =>  FALSE
[03:21:50.964]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:21:50.964]      </control>
[03:21:50.964]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:21:50.964]        // if-block "(__protocol & 0xFFFF) == 1"
[03:21:50.964]          // =>  FALSE
[03:21:50.964]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:21:50.964]      </control>
[03:21:50.965]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:21:50.965]        // if-block "(__protocol & 0xFFFF) == 2"
[03:21:50.965]          // =>  TRUE
[03:21:50.965]        <block atomic="false" info="">
[03:21:50.965]          Message(0, "executing SWD power up");
[03:21:50.967]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:21:50.969]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:21:50.969]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:21:50.971]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:21:50.971]        </block>
[03:21:50.971]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:21:50.971]      </control>
[03:21:50.971]      // end if-block "powered_down"
[03:21:50.971]    </control>
[03:21:50.971]    <block atomic="false" info="">
[03:21:50.971]      __var DEBUG_PORT_VAL    = 0;
[03:21:50.971]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:21:50.972]      __var ACCESS_POINT_VAL  = 0;
[03:21:50.972]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:21:50.972]      __ap = 1; 
[03:21:50.972]        // -> [__ap <= 0x00000001]
[03:21:50.972]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:21:50.974]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:21:50.974]      __ap = 4;
[03:21:50.974]        // -> [__ap <= 0x00000004]
[03:21:50.975]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:21:50.978]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:21:50.979]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:21:50.979]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:21:50.980]    </block>
[03:21:50.980]    <block atomic="false" info="">
[03:21:50.980]      __var nReset = 0x80;
[03:21:50.981]        // -> [nReset <= 0x00000080]
[03:21:50.981]      __var canReadPins = 0;
[03:21:50.981]        // -> [canReadPins <= 0x00000000]
[03:21:50.981]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:21:50.982]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:21:50.982]        // -> [canReadPins <= 0x00000001]
[03:21:50.982]    </block>
[03:21:50.983]    <control if="" while="1" timeout="200" info="">
[03:21:50.983]      // while "1"  (timeout="200")
[03:21:50.983]      // while-condition  =>  TRUE
[03:21:50.983]      // while "1"  (timeout="200")
[03:21:50.983]      // while-condition  =>  TRUE
[03:21:50.983]      // while "1"  (timeout="200")
[03:21:50.983]      // while-condition  =>  TRUE
[03:21:50.983]      // while "1"  (timeout="200")
[03:21:50.983]      // while-condition  =>  TRUE
[03:21:50.983]      // while "1"  (timeout="200")
[03:21:50.983]      // while-condition  =>  TRUE
[03:21:50.983]      // while "1"  (timeout="200")
[03:21:50.983]      // while-condition  =>  TRUE
[03:21:50.983]      // while "1"  (timeout="200")
[03:21:50.985]      // while-condition  =>  TRUE
[03:21:50.985]      // while "1"  (timeout="200")
[03:21:50.985]      // while-condition  =>  TRUE
[03:21:50.985]      // while "1"  (timeout="200")
[03:21:50.985]      // while-condition  =>  TRUE
[03:21:50.985]      // while "1"  (timeout="200")
[03:21:50.985]      // while-condition  =>  TRUE
[03:21:50.985]      // while "1"  (timeout="200")
[03:21:50.985]      // while-condition  =>  TRUE
[03:21:50.985]      // while "1"  (timeout="200")
[03:21:50.985]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.986]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.986]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.986]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.986]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.986]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.986]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.986]      // while-condition  =>  TRUE
[03:21:50.986]      // while "1"  (timeout="200")
[03:21:50.987]      // while-condition  =>  TRUE
[03:21:50.987]      // while "1"  (timeout="200")
[03:21:50.987]      // while  =>  TIMEOUT
[03:21:50.987]      // end while "1"
[03:21:50.987]    </control>
[03:21:50.987]    <control if="canReadPins" while="" timeout="0" info="">
[03:21:50.987]      // if-block "canReadPins"
[03:21:50.988]        // =>  TRUE
[03:21:50.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:21:50.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:21:50.989]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:21:50.989]        // while-condition  =>  FALSE
[03:21:50.989]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:21:50.989]      </control>
[03:21:50.989]      // end if-block "canReadPins"
[03:21:50.989]    </control>
[03:21:50.989]    <control if="!canReadPins" while="" timeout="0" info="">
[03:21:50.990]      // if-block "!canReadPins"
[03:21:50.990]        // =>  FALSE
[03:21:50.990]      // skip if-block "!canReadPins"
[03:21:50.990]    </control>
[03:21:50.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:21:50.991]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:21:50.991]        // =>  TRUE
[03:21:50.991]      <block atomic="false" info="">
[03:21:50.991]        WriteAP(0x00, 0x190008);
[03:21:50.992]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:21:50.992]        WriteAP(0xF0, 0x01);
[03:21:50.996]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:21:50.996]      </block>
[03:21:50.996]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:21:50.996]    </control>
[03:21:50.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:21:50.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:21:50.996]        // =>  FALSE
[03:21:50.996]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:21:50.997]    </control>
[03:21:50.997]    <block atomic="false" info="">
[03:21:50.997]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:21:50.999]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:21:50.999]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:21:50.999]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:21:51.002]      __ap = 0; //lets make sure we reset the access point selection
[03:21:51.002]        // -> [__ap <= 0x00000000]
[03:21:51.003]    </block>
[03:21:51.003]  </sequence>
[03:21:51.003]  
[03:21:51.021]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:21:51.021]  
[03:21:51.021]  <debugvars>
[03:21:51.021]    // Pre-defined
[03:21:51.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:51.022]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:51.022]    __dp=0x00000000
[03:21:51.022]    __ap=0x00000000
[03:21:51.022]    __traceout=0x00000000      (Trace Disabled)
[03:21:51.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:51.022]    __FlashAddr=0x00000000
[03:21:51.022]    __FlashLen=0x00000000
[03:21:51.022]    __FlashArg=0x00000000
[03:21:51.022]    __FlashOp=0x00000000
[03:21:51.022]    __Result=0x00000000
[03:21:51.023]  </debugvars>
[03:21:51.023]  
[03:21:51.023]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:21:51.023]    <block atomic="false" info="">
[03:21:51.023]      __var deviceID = 0;
[03:21:51.023]        // -> [deviceID <= 0x00000000]
[03:21:51.023]      __var version = 0;
[03:21:51.023]        // -> [version <= 0x00000000]
[03:21:51.023]      __var partNum = 0;
[03:21:51.023]        // -> [partNum <= 0x00000000]
[03:21:51.023]      __var manuf = 0;
[03:21:51.023]        // -> [manuf <= 0x00000000]
[03:21:51.023]      __var isMSPM0G1X0X_G3X0X = 0;
[03:21:51.023]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:21:51.023]      __var isProduction = 0;
[03:21:51.023]        // -> [isProduction <= 0x00000000]
[03:21:51.023]      __var continueId = 0;
[03:21:51.023]        // -> [continueId <= 0x00000000]
[03:21:51.024]      deviceID =   Read32(0x41C40004);
[03:21:51.029]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:21:51.029]        // -> [deviceID <= 0x2BB8802F]
[03:21:51.029]      version = deviceID >> 28;
[03:21:51.029]        // -> [version <= 0x00000002]
[03:21:51.029]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:21:51.029]        // -> [partNum <= 0x0000BB88]
[03:21:51.029]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:21:51.029]        // -> [manuf <= 0x00000017]
[03:21:51.029]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:21:51.029]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:21:51.030]      isProduction = (version > 0);
[03:21:51.030]        // -> [isProduction <= 0x00000001]
[03:21:51.030]    </block>
[03:21:51.030]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:21:51.031]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:21:51.031]        // =>  FALSE
[03:21:51.031]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:21:51.031]    </control>
[03:21:51.031]    <control if="continueId == 4" while="" timeout="0" info="">
[03:21:51.031]      // if-block "continueId == 4"
[03:21:51.031]        // =>  FALSE
[03:21:51.031]      // skip if-block "continueId == 4"
[03:21:51.031]    </control>
[03:21:51.031]    <control if="!isProduction" while="" timeout="0" info="">
[03:21:51.031]      // if-block "!isProduction"
[03:21:51.031]        // =>  FALSE
[03:21:51.032]      // skip if-block "!isProduction"
[03:21:51.032]    </control>
[03:21:51.032]  </sequence>
[03:21:51.032]  
[03:25:46.219]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:25:46.219]  
[03:25:46.228]  <debugvars>
[03:25:46.228]    // Pre-defined
[03:25:46.228]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:46.228]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:25:46.228]    __dp=0x00000000
[03:25:46.228]    __ap=0x00000000
[03:25:46.228]    __traceout=0x00000000      (Trace Disabled)
[03:25:46.228]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:46.228]    __FlashAddr=0x00000000
[03:25:46.228]    __FlashLen=0x00000000
[03:25:46.228]    __FlashArg=0x00000000
[03:25:46.230]    __FlashOp=0x00000000
[03:25:46.230]    __Result=0x00000000
[03:25:46.230]  </debugvars>
[03:25:46.230]  
[03:25:46.230]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:25:46.230]    <block atomic="false" info="">
[03:25:46.231]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:25:46.231]        // -> [isSWJ <= 0x00000001]
[03:25:46.231]      __var hasDormant = __protocol & 0x00020000;
[03:25:46.231]        // -> [hasDormant <= 0x00000000]
[03:25:46.231]      __var protType   = __protocol & 0x0000FFFF;
[03:25:46.231]        // -> [protType <= 0x00000002]
[03:25:46.231]    </block>
[03:25:46.231]    <control if="protType == 1" while="" timeout="0" info="">
[03:25:46.231]      // if-block "protType == 1"
[03:25:46.231]        // =>  FALSE
[03:25:46.231]      // skip if-block "protType == 1"
[03:25:46.231]    </control>
[03:25:46.231]    <control if="protType == 2" while="" timeout="0" info="">
[03:25:46.231]      // if-block "protType == 2"
[03:25:46.231]        // =>  TRUE
[03:25:46.231]      <control if="isSWJ" while="" timeout="0" info="">
[03:25:46.231]        // if-block "isSWJ"
[03:25:46.231]          // =>  TRUE
[03:25:46.231]        <control if="hasDormant" while="" timeout="0" info="">
[03:25:46.231]          // if-block "hasDormant"
[03:25:46.231]            // =>  FALSE
[03:25:46.231]          // skip if-block "hasDormant"
[03:25:46.231]        </control>
[03:25:46.231]        <control if="!hasDormant" while="" timeout="0" info="">
[03:25:46.231]          // if-block "!hasDormant"
[03:25:46.231]            // =>  TRUE
[03:25:46.231]          <block atomic="false" info="">
[03:25:46.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:25:46.234]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:25:46.234]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:25:46.234]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:25:46.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:25:46.237]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:25:46.237]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:25:46.237]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:25:46.237]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:25:46.237]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:25:46.237]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:25:46.237]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:25:46.237]          </block>
[03:25:46.237]          // end if-block "!hasDormant"
[03:25:46.237]        </control>
[03:25:46.237]        // end if-block "isSWJ"
[03:25:46.237]      </control>
[03:25:46.237]      <control if="!isSWJ" while="" timeout="0" info="">
[03:25:46.237]        // if-block "!isSWJ"
[03:25:46.237]          // =>  FALSE
[03:25:46.237]        // skip if-block "!isSWJ"
[03:25:46.237]      </control>
[03:25:46.237]      <block atomic="false" info="">
[03:25:46.237]        ReadDP(0x0);
[03:25:46.237]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:25:46.237]      </block>
[03:25:46.237]      // end if-block "protType == 2"
[03:25:46.237]    </control>
[03:25:46.237]  </sequence>
[03:25:46.237]  
[03:25:46.247]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:25:46.247]  
[03:25:46.247]  <debugvars>
[03:25:46.247]    // Pre-defined
[03:25:46.247]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:46.247]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:25:46.247]    __dp=0x00000000
[03:25:46.247]    __ap=0x00000000
[03:25:46.247]    __traceout=0x00000000      (Trace Disabled)
[03:25:46.247]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:46.247]    __FlashAddr=0x00000000
[03:25:46.247]    __FlashLen=0x00000000
[03:25:46.247]    __FlashArg=0x00000000
[03:25:46.247]    __FlashOp=0x00000000
[03:25:46.247]    __Result=0x00000000
[03:25:46.247]  </debugvars>
[03:25:46.247]  
[03:25:46.247]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:25:46.247]    <block atomic="false" info="">
[03:25:46.247]      __var SW_DP_ABORT       = 0x0;
[03:25:46.247]        // -> [SW_DP_ABORT <= 0x00000000]
[03:25:46.247]      __var DP_CTRL_STAT      = 0x4;
[03:25:46.247]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:25:46.247]      __var DP_SELECT         = 0x8;
[03:25:46.247]        // -> [DP_SELECT <= 0x00000008]
[03:25:46.247]      __var powered_down      = 0;
[03:25:46.247]        // -> [powered_down <= 0x00000000]
[03:25:46.247]      WriteDP(DP_SELECT, 0x00000000);
[03:25:46.247]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:25:46.247]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:25:46.247]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:25:46.247]        // -> [powered_down <= 0x00000001]
[03:25:46.247]    </block>
[03:25:46.247]    <control if="powered_down" while="" timeout="0" info="">
[03:25:46.247]      // if-block "powered_down"
[03:25:46.247]        // =>  TRUE
[03:25:46.247]      <block atomic="false" info="">
[03:25:46.247]        Message(0, "Debug/System power-up request sent");
[03:25:46.257]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:25:46.257]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:25:46.257]      </block>
[03:25:46.257]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:25:46.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:25:46.257]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:25:46.257]        // while-condition  =>  FALSE
[03:25:46.257]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:25:46.257]      </control>
[03:25:46.257]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:25:46.257]        // if-block "(__protocol & 0xFFFF) == 1"
[03:25:46.257]          // =>  FALSE
[03:25:46.257]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:25:46.257]      </control>
[03:25:46.257]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:25:46.257]        // if-block "(__protocol & 0xFFFF) == 2"
[03:25:46.257]          // =>  TRUE
[03:25:46.257]        <block atomic="false" info="">
[03:25:46.257]          Message(0, "executing SWD power up");
[03:25:46.267]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:25:46.267]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:25:46.267]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:25:46.267]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:25:46.267]        </block>
[03:25:46.267]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:25:46.267]      </control>
[03:25:46.267]      // end if-block "powered_down"
[03:25:46.267]    </control>
[03:25:46.267]    <block atomic="false" info="">
[03:25:46.267]      __var DEBUG_PORT_VAL    = 0;
[03:25:46.267]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:25:46.267]      __var ACCESS_POINT_VAL  = 0;
[03:25:46.267]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:25:46.267]      __ap = 1; 
[03:25:46.267]        // -> [__ap <= 0x00000001]
[03:25:46.267]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:25:46.277]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:25:46.277]      __ap = 4;
[03:25:46.277]        // -> [__ap <= 0x00000004]
[03:25:46.277]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:25:46.279]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:25:46.279]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:25:46.279]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:25:46.279]    </block>
[03:25:46.279]    <block atomic="false" info="">
[03:25:46.279]      __var nReset = 0x80;
[03:25:46.279]        // -> [nReset <= 0x00000080]
[03:25:46.279]      __var canReadPins = 0;
[03:25:46.279]        // -> [canReadPins <= 0x00000000]
[03:25:46.279]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:25:46.279]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:25:46.279]        // -> [canReadPins <= 0x00000001]
[03:25:46.279]    </block>
[03:25:46.279]    <control if="" while="1" timeout="200" info="">
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.279]      // while "1"  (timeout="200")
[03:25:46.279]      // while-condition  =>  TRUE
[03:25:46.288]      // while "1"  (timeout="200")
[03:25:46.288]      // while  =>  TIMEOUT
[03:25:46.288]      // end while "1"
[03:25:46.288]    </control>
[03:25:46.288]    <control if="canReadPins" while="" timeout="0" info="">
[03:25:46.288]      // if-block "canReadPins"
[03:25:46.288]        // =>  TRUE
[03:25:46.288]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:25:46.288]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:25:46.289]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:25:46.289]        // while-condition  =>  FALSE
[03:25:46.289]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:25:46.289]      </control>
[03:25:46.291]      // end if-block "canReadPins"
[03:25:46.291]    </control>
[03:25:46.291]    <control if="!canReadPins" while="" timeout="0" info="">
[03:25:46.291]      // if-block "!canReadPins"
[03:25:46.291]        // =>  FALSE
[03:25:46.291]      // skip if-block "!canReadPins"
[03:25:46.291]    </control>
[03:25:46.291]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:25:46.291]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:25:46.291]        // =>  TRUE
[03:25:46.291]      <block atomic="false" info="">
[03:25:46.291]        WriteAP(0x00, 0x190008);
[03:25:46.291]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:25:46.291]        WriteAP(0xF0, 0x01);
[03:25:46.291]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:25:46.291]      </block>
[03:25:46.291]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:25:46.291]    </control>
[03:25:46.291]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:25:46.291]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:25:46.291]        // =>  FALSE
[03:25:46.291]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:25:46.291]    </control>
[03:25:46.298]    <block atomic="false" info="">
[03:25:46.298]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:25:46.298]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:25:46.298]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:25:46.298]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:25:46.298]      __ap = 0; //lets make sure we reset the access point selection
[03:25:46.298]        // -> [__ap <= 0x00000000]
[03:25:46.298]    </block>
[03:25:46.298]  </sequence>
[03:25:46.298]  
[03:25:46.318]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:25:46.318]  
[03:25:46.318]  <debugvars>
[03:25:46.318]    // Pre-defined
[03:25:46.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:46.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:25:46.318]    __dp=0x00000000
[03:25:46.318]    __ap=0x00000000
[03:25:46.318]    __traceout=0x00000000      (Trace Disabled)
[03:25:46.318]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:46.318]    __FlashAddr=0x00000000
[03:25:46.318]    __FlashLen=0x00000000
[03:25:46.318]    __FlashArg=0x00000000
[03:25:46.318]    __FlashOp=0x00000000
[03:25:46.318]    __Result=0x00000000
[03:25:46.318]  </debugvars>
[03:25:46.318]  
[03:25:46.318]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:25:46.318]    <block atomic="false" info="">
[03:25:46.318]      __var deviceID = 0;
[03:25:46.318]        // -> [deviceID <= 0x00000000]
[03:25:46.318]      __var version = 0;
[03:25:46.318]        // -> [version <= 0x00000000]
[03:25:46.318]      __var partNum = 0;
[03:25:46.318]        // -> [partNum <= 0x00000000]
[03:25:46.318]      __var manuf = 0;
[03:25:46.318]        // -> [manuf <= 0x00000000]
[03:25:46.318]      __var isMSPM0G1X0X_G3X0X = 0;
[03:25:46.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:25:46.328]      __var isProduction = 0;
[03:25:46.328]        // -> [isProduction <= 0x00000000]
[03:25:46.328]      __var continueId = 0;
[03:25:46.328]        // -> [continueId <= 0x00000000]
[03:25:46.328]      deviceID =   Read32(0x41C40004);
[03:25:46.328]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:25:46.328]        // -> [deviceID <= 0x2BB8802F]
[03:25:46.328]      version = deviceID >> 28;
[03:25:46.328]        // -> [version <= 0x00000002]
[03:25:46.328]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:25:46.328]        // -> [partNum <= 0x0000BB88]
[03:25:46.328]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:25:46.328]        // -> [manuf <= 0x00000017]
[03:25:46.328]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:25:46.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:25:46.328]      isProduction = (version > 0);
[03:25:46.328]        // -> [isProduction <= 0x00000001]
[03:25:46.328]    </block>
[03:25:46.328]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:25:46.328]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:25:46.328]        // =>  FALSE
[03:25:46.328]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:25:46.328]    </control>
[03:25:46.328]    <control if="continueId == 4" while="" timeout="0" info="">
[03:25:46.328]      // if-block "continueId == 4"
[03:25:46.328]        // =>  FALSE
[03:25:46.328]      // skip if-block "continueId == 4"
[03:25:46.328]    </control>
[03:25:46.328]    <control if="!isProduction" while="" timeout="0" info="">
[03:25:46.328]      // if-block "!isProduction"
[03:25:46.328]        // =>  FALSE
[03:25:46.328]      // skip if-block "!isProduction"
[03:25:46.328]    </control>
[03:25:46.328]  </sequence>
[03:25:46.338]  
[03:29:08.744]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:29:08.744]  
[03:29:08.744]  <debugvars>
[03:29:08.744]    // Pre-defined
[03:29:08.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:08.744]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:29:08.744]    __dp=0x00000000
[03:29:08.744]    __ap=0x00000000
[03:29:08.744]    __traceout=0x00000000      (Trace Disabled)
[03:29:08.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:08.744]    __FlashAddr=0x00000000
[03:29:08.744]    __FlashLen=0x00000000
[03:29:08.744]    __FlashArg=0x00000000
[03:29:08.744]    __FlashOp=0x00000000
[03:29:08.744]    __Result=0x00000000
[03:29:08.744]  </debugvars>
[03:29:08.744]  
[03:29:08.744]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:29:08.744]    <block atomic="false" info="">
[03:29:08.744]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:29:08.744]        // -> [isSWJ <= 0x00000001]
[03:29:08.744]      __var hasDormant = __protocol & 0x00020000;
[03:29:08.744]        // -> [hasDormant <= 0x00000000]
[03:29:08.744]      __var protType   = __protocol & 0x0000FFFF;
[03:29:08.750]        // -> [protType <= 0x00000002]
[03:29:08.750]    </block>
[03:29:08.750]    <control if="protType == 1" while="" timeout="0" info="">
[03:29:08.750]      // if-block "protType == 1"
[03:29:08.750]        // =>  FALSE
[03:29:08.750]      // skip if-block "protType == 1"
[03:29:08.750]    </control>
[03:29:08.750]    <control if="protType == 2" while="" timeout="0" info="">
[03:29:08.750]      // if-block "protType == 2"
[03:29:08.750]        // =>  TRUE
[03:29:08.750]      <control if="isSWJ" while="" timeout="0" info="">
[03:29:08.750]        // if-block "isSWJ"
[03:29:08.750]          // =>  TRUE
[03:29:08.750]        <control if="hasDormant" while="" timeout="0" info="">
[03:29:08.750]          // if-block "hasDormant"
[03:29:08.750]            // =>  FALSE
[03:29:08.750]          // skip if-block "hasDormant"
[03:29:08.750]        </control>
[03:29:08.750]        <control if="!hasDormant" while="" timeout="0" info="">
[03:29:08.750]          // if-block "!hasDormant"
[03:29:08.750]            // =>  TRUE
[03:29:08.750]          <block atomic="false" info="">
[03:29:08.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:29:08.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:29:08.756]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:29:08.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:29:08.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:29:08.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:29:08.759]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:29:08.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:29:08.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:29:08.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:29:08.763]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:29:08.765]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:29:08.765]          </block>
[03:29:08.765]          // end if-block "!hasDormant"
[03:29:08.765]        </control>
[03:29:08.765]        // end if-block "isSWJ"
[03:29:08.765]      </control>
[03:29:08.765]      <control if="!isSWJ" while="" timeout="0" info="">
[03:29:08.765]        // if-block "!isSWJ"
[03:29:08.766]          // =>  FALSE
[03:29:08.766]        // skip if-block "!isSWJ"
[03:29:08.766]      </control>
[03:29:08.766]      <block atomic="false" info="">
[03:29:08.766]        ReadDP(0x0);
[03:29:08.767]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:29:08.767]      </block>
[03:29:08.767]      // end if-block "protType == 2"
[03:29:08.768]    </control>
[03:29:08.768]  </sequence>
[03:29:08.768]  
[03:29:08.770]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:29:08.770]  
[03:29:08.770]  <debugvars>
[03:29:08.770]    // Pre-defined
[03:29:08.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:08.770]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:29:08.770]    __dp=0x00000000
[03:29:08.771]    __ap=0x00000000
[03:29:08.771]    __traceout=0x00000000      (Trace Disabled)
[03:29:08.771]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:08.771]    __FlashAddr=0x00000000
[03:29:08.771]    __FlashLen=0x00000000
[03:29:08.771]    __FlashArg=0x00000000
[03:29:08.771]    __FlashOp=0x00000000
[03:29:08.771]    __Result=0x00000000
[03:29:08.771]  </debugvars>
[03:29:08.771]  
[03:29:08.771]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:29:08.771]    <block atomic="false" info="">
[03:29:08.772]      __var SW_DP_ABORT       = 0x0;
[03:29:08.772]        // -> [SW_DP_ABORT <= 0x00000000]
[03:29:08.772]      __var DP_CTRL_STAT      = 0x4;
[03:29:08.772]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:29:08.772]      __var DP_SELECT         = 0x8;
[03:29:08.772]        // -> [DP_SELECT <= 0x00000008]
[03:29:08.772]      __var powered_down      = 0;
[03:29:08.773]        // -> [powered_down <= 0x00000000]
[03:29:08.773]      WriteDP(DP_SELECT, 0x00000000);
[03:29:08.774]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:29:08.774]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:29:08.776]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:29:08.776]        // -> [powered_down <= 0x00000001]
[03:29:08.776]    </block>
[03:29:08.777]    <control if="powered_down" while="" timeout="0" info="">
[03:29:08.777]      // if-block "powered_down"
[03:29:08.777]        // =>  TRUE
[03:29:08.777]      <block atomic="false" info="">
[03:29:08.777]        Message(0, "Debug/System power-up request sent");
[03:29:08.780]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:29:08.781]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:29:08.782]      </block>
[03:29:08.782]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:29:08.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:29:08.783]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:29:08.783]        // while-condition  =>  FALSE
[03:29:08.783]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:29:08.784]      </control>
[03:29:08.784]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:29:08.784]        // if-block "(__protocol & 0xFFFF) == 1"
[03:29:08.784]          // =>  FALSE
[03:29:08.784]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:29:08.784]      </control>
[03:29:08.784]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:29:08.784]        // if-block "(__protocol & 0xFFFF) == 2"
[03:29:08.784]          // =>  TRUE
[03:29:08.785]        <block atomic="false" info="">
[03:29:08.785]          Message(0, "executing SWD power up");
[03:29:08.786]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:29:08.788]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:29:08.789]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:29:08.790]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:29:08.790]        </block>
[03:29:08.790]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:29:08.791]      </control>
[03:29:08.791]      // end if-block "powered_down"
[03:29:08.791]    </control>
[03:29:08.791]    <block atomic="false" info="">
[03:29:08.791]      __var DEBUG_PORT_VAL    = 0;
[03:29:08.791]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:29:08.791]      __var ACCESS_POINT_VAL  = 0;
[03:29:08.791]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:29:08.791]      __ap = 1; 
[03:29:08.791]        // -> [__ap <= 0x00000001]
[03:29:08.791]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:29:08.793]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:29:08.795]      __ap = 4;
[03:29:08.795]        // -> [__ap <= 0x00000004]
[03:29:08.795]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:29:08.795]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:29:08.795]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:29:08.795]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:29:08.795]    </block>
[03:29:08.795]    <block atomic="false" info="">
[03:29:08.795]      __var nReset = 0x80;
[03:29:08.795]        // -> [nReset <= 0x00000080]
[03:29:08.795]      __var canReadPins = 0;
[03:29:08.795]        // -> [canReadPins <= 0x00000000]
[03:29:08.795]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:29:08.802]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:29:08.802]        // -> [canReadPins <= 0x00000001]
[03:29:08.802]    </block>
[03:29:08.802]    <control if="" while="1" timeout="200" info="">
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.802]      // while-condition  =>  TRUE
[03:29:08.802]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.812]      // while "1"  (timeout="200")
[03:29:08.812]      // while-condition  =>  TRUE
[03:29:08.822]      // while "1"  (timeout="200")
[03:29:08.822]      // while  =>  TIMEOUT
[03:29:08.822]      // end while "1"
[03:29:08.822]    </control>
[03:29:08.822]    <control if="canReadPins" while="" timeout="0" info="">
[03:29:08.822]      // if-block "canReadPins"
[03:29:08.822]        // =>  TRUE
[03:29:08.822]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:29:08.822]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:29:08.822]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:29:08.822]        // while-condition  =>  FALSE
[03:29:08.822]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:29:08.822]      </control>
[03:29:08.822]      // end if-block "canReadPins"
[03:29:08.822]    </control>
[03:29:08.822]    <control if="!canReadPins" while="" timeout="0" info="">
[03:29:08.822]      // if-block "!canReadPins"
[03:29:08.822]        // =>  FALSE
[03:29:08.822]      // skip if-block "!canReadPins"
[03:29:08.822]    </control>
[03:29:08.822]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:29:08.822]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:29:08.822]        // =>  TRUE
[03:29:08.822]      <block atomic="false" info="">
[03:29:08.822]        WriteAP(0x00, 0x190008);
[03:29:08.822]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:29:08.822]        WriteAP(0xF0, 0x01);
[03:29:08.832]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:29:08.832]      </block>
[03:29:08.832]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:29:08.832]    </control>
[03:29:08.832]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:29:08.832]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:29:08.832]        // =>  FALSE
[03:29:08.832]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:29:08.832]    </control>
[03:29:08.832]    <block atomic="false" info="">
[03:29:08.832]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:29:08.832]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:29:08.832]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:29:08.832]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:29:08.832]      __ap = 0; //lets make sure we reset the access point selection
[03:29:08.832]        // -> [__ap <= 0x00000000]
[03:29:08.832]    </block>
[03:29:08.832]  </sequence>
[03:29:08.832]  
[03:29:08.856]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:29:08.856]  
[03:29:08.856]  <debugvars>
[03:29:08.856]    // Pre-defined
[03:29:08.856]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:08.856]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:29:08.856]    __dp=0x00000000
[03:29:08.856]    __ap=0x00000000
[03:29:08.856]    __traceout=0x00000000      (Trace Disabled)
[03:29:08.856]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:08.856]    __FlashAddr=0x00000000
[03:29:08.856]    __FlashLen=0x00000000
[03:29:08.856]    __FlashArg=0x00000000
[03:29:08.856]    __FlashOp=0x00000000
[03:29:08.856]    __Result=0x00000000
[03:29:08.856]  </debugvars>
[03:29:08.856]  
[03:29:08.856]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:29:08.856]    <block atomic="false" info="">
[03:29:08.856]      __var deviceID = 0;
[03:29:08.856]        // -> [deviceID <= 0x00000000]
[03:29:08.856]      __var version = 0;
[03:29:08.856]        // -> [version <= 0x00000000]
[03:29:08.856]      __var partNum = 0;
[03:29:08.856]        // -> [partNum <= 0x00000000]
[03:29:08.856]      __var manuf = 0;
[03:29:08.856]        // -> [manuf <= 0x00000000]
[03:29:08.856]      __var isMSPM0G1X0X_G3X0X = 0;
[03:29:08.856]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:29:08.856]      __var isProduction = 0;
[03:29:08.856]        // -> [isProduction <= 0x00000000]
[03:29:08.863]      __var continueId = 0;
[03:29:08.863]        // -> [continueId <= 0x00000000]
[03:29:08.863]      deviceID =   Read32(0x41C40004);
[03:29:08.863]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:29:08.863]        // -> [deviceID <= 0x2BB8802F]
[03:29:08.863]      version = deviceID >> 28;
[03:29:08.863]        // -> [version <= 0x00000002]
[03:29:08.863]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:29:08.863]        // -> [partNum <= 0x0000BB88]
[03:29:08.863]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:29:08.863]        // -> [manuf <= 0x00000017]
[03:29:08.863]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:29:08.863]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:29:08.863]      isProduction = (version > 0);
[03:29:08.863]        // -> [isProduction <= 0x00000001]
[03:29:08.863]    </block>
[03:29:08.863]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:29:08.863]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:29:08.863]        // =>  FALSE
[03:29:08.863]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:29:08.863]    </control>
[03:29:08.863]    <control if="continueId == 4" while="" timeout="0" info="">
[03:29:08.863]      // if-block "continueId == 4"
[03:29:08.863]        // =>  FALSE
[03:29:08.863]      // skip if-block "continueId == 4"
[03:29:08.863]    </control>
[03:29:08.863]    <control if="!isProduction" while="" timeout="0" info="">
[03:29:08.863]      // if-block "!isProduction"
[03:29:08.863]        // =>  FALSE
[03:29:08.863]      // skip if-block "!isProduction"
[03:29:08.863]    </control>
[03:29:08.863]  </sequence>
[03:29:08.863]  
[03:29:39.137]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:29:39.137]  
[03:29:39.148]  <debugvars>
[03:29:39.148]    // Pre-defined
[03:29:39.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:39.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:29:39.148]    __dp=0x00000000
[03:29:39.148]    __ap=0x00000000
[03:29:39.148]    __traceout=0x00000000      (Trace Disabled)
[03:29:39.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:39.148]    __FlashAddr=0x00000000
[03:29:39.148]    __FlashLen=0x00000000
[03:29:39.148]    __FlashArg=0x00000000
[03:29:39.148]    __FlashOp=0x00000000
[03:29:39.148]    __Result=0x00000000
[03:29:39.148]  </debugvars>
[03:29:39.148]  
[03:29:39.148]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:29:39.148]    <block atomic="false" info="">
[03:29:39.148]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:29:39.148]        // -> [isSWJ <= 0x00000001]
[03:29:39.148]      __var hasDormant = __protocol & 0x00020000;
[03:29:39.148]        // -> [hasDormant <= 0x00000000]
[03:29:39.148]      __var protType   = __protocol & 0x0000FFFF;
[03:29:39.148]        // -> [protType <= 0x00000002]
[03:29:39.148]    </block>
[03:29:39.148]    <control if="protType == 1" while="" timeout="0" info="">
[03:29:39.148]      // if-block "protType == 1"
[03:29:39.148]        // =>  FALSE
[03:29:39.148]      // skip if-block "protType == 1"
[03:29:39.148]    </control>
[03:29:39.148]    <control if="protType == 2" while="" timeout="0" info="">
[03:29:39.148]      // if-block "protType == 2"
[03:29:39.148]        // =>  TRUE
[03:29:39.148]      <control if="isSWJ" while="" timeout="0" info="">
[03:29:39.148]        // if-block "isSWJ"
[03:29:39.148]          // =>  TRUE
[03:29:39.148]        <control if="hasDormant" while="" timeout="0" info="">
[03:29:39.148]          // if-block "hasDormant"
[03:29:39.148]            // =>  FALSE
[03:29:39.148]          // skip if-block "hasDormant"
[03:29:39.148]        </control>
[03:29:39.148]        <control if="!hasDormant" while="" timeout="0" info="">
[03:29:39.148]          // if-block "!hasDormant"
[03:29:39.148]            // =>  TRUE
[03:29:39.148]          <block atomic="false" info="">
[03:29:39.148]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:29:39.154]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:29:39.154]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:29:39.154]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:29:39.154]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:29:39.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:29:39.157]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:29:39.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:29:39.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:29:39.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:29:39.157]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:29:39.157]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:29:39.157]          </block>
[03:29:39.157]          // end if-block "!hasDormant"
[03:29:39.157]        </control>
[03:29:39.157]        // end if-block "isSWJ"
[03:29:39.157]      </control>
[03:29:39.157]      <control if="!isSWJ" while="" timeout="0" info="">
[03:29:39.157]        // if-block "!isSWJ"
[03:29:39.157]          // =>  FALSE
[03:29:39.157]        // skip if-block "!isSWJ"
[03:29:39.157]      </control>
[03:29:39.164]      <block atomic="false" info="">
[03:29:39.164]        ReadDP(0x0);
[03:29:39.164]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:29:39.164]      </block>
[03:29:39.164]      // end if-block "protType == 2"
[03:29:39.164]    </control>
[03:29:39.164]  </sequence>
[03:29:39.164]  
[03:29:39.167]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:29:39.167]  
[03:29:39.167]  <debugvars>
[03:29:39.167]    // Pre-defined
[03:29:39.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:39.167]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:29:39.167]    __dp=0x00000000
[03:29:39.167]    __ap=0x00000000
[03:29:39.167]    __traceout=0x00000000      (Trace Disabled)
[03:29:39.167]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:39.167]    __FlashAddr=0x00000000
[03:29:39.167]    __FlashLen=0x00000000
[03:29:39.167]    __FlashArg=0x00000000
[03:29:39.167]    __FlashOp=0x00000000
[03:29:39.167]    __Result=0x00000000
[03:29:39.167]  </debugvars>
[03:29:39.167]  
[03:29:39.167]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:29:39.167]    <block atomic="false" info="">
[03:29:39.167]      __var SW_DP_ABORT       = 0x0;
[03:29:39.167]        // -> [SW_DP_ABORT <= 0x00000000]
[03:29:39.167]      __var DP_CTRL_STAT      = 0x4;
[03:29:39.167]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:29:39.167]      __var DP_SELECT         = 0x8;
[03:29:39.167]        // -> [DP_SELECT <= 0x00000008]
[03:29:39.167]      __var powered_down      = 0;
[03:29:39.167]        // -> [powered_down <= 0x00000000]
[03:29:39.167]      WriteDP(DP_SELECT, 0x00000000);
[03:29:39.175]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:29:39.175]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:29:39.177]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:29:39.177]        // -> [powered_down <= 0x00000001]
[03:29:39.177]    </block>
[03:29:39.177]    <control if="powered_down" while="" timeout="0" info="">
[03:29:39.177]      // if-block "powered_down"
[03:29:39.177]        // =>  TRUE
[03:29:39.177]      <block atomic="false" info="">
[03:29:39.177]        Message(0, "Debug/System power-up request sent");
[03:29:39.180]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:29:39.180]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:29:39.180]      </block>
[03:29:39.180]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:29:39.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:29:39.184]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:29:39.184]        // while-condition  =>  FALSE
[03:29:39.184]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:29:39.184]      </control>
[03:29:39.184]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:29:39.184]        // if-block "(__protocol & 0xFFFF) == 1"
[03:29:39.184]          // =>  FALSE
[03:29:39.184]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:29:39.184]      </control>
[03:29:39.184]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:29:39.184]        // if-block "(__protocol & 0xFFFF) == 2"
[03:29:39.184]          // =>  TRUE
[03:29:39.184]        <block atomic="false" info="">
[03:29:39.184]          Message(0, "executing SWD power up");
[03:29:39.188]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:29:39.188]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:29:39.188]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:29:39.188]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:29:39.188]        </block>
[03:29:39.188]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:29:39.188]      </control>
[03:29:39.188]      // end if-block "powered_down"
[03:29:39.188]    </control>
[03:29:39.188]    <block atomic="false" info="">
[03:29:39.188]      __var DEBUG_PORT_VAL    = 0;
[03:29:39.188]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:29:39.188]      __var ACCESS_POINT_VAL  = 0;
[03:29:39.188]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:29:39.188]      __ap = 1; 
[03:29:39.188]        // -> [__ap <= 0x00000001]
[03:29:39.188]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:29:39.194]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:29:39.194]      __ap = 4;
[03:29:39.194]        // -> [__ap <= 0x00000004]
[03:29:39.194]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:29:39.198]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:29:39.198]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:29:39.198]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:29:39.198]    </block>
[03:29:39.198]    <block atomic="false" info="">
[03:29:39.198]      __var nReset = 0x80;
[03:29:39.198]        // -> [nReset <= 0x00000080]
[03:29:39.198]      __var canReadPins = 0;
[03:29:39.198]        // -> [canReadPins <= 0x00000000]
[03:29:39.198]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:29:39.198]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:29:39.198]        // -> [canReadPins <= 0x00000001]
[03:29:39.198]    </block>
[03:29:39.198]    <control if="" while="1" timeout="200" info="">
[03:29:39.198]      // while "1"  (timeout="200")
[03:29:39.198]      // while-condition  =>  TRUE
[03:29:39.198]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.204]      // while "1"  (timeout="200")
[03:29:39.204]      // while-condition  =>  TRUE
[03:29:39.208]      // while "1"  (timeout="200")
[03:29:39.208]      // while  =>  TIMEOUT
[03:29:39.208]      // end while "1"
[03:29:39.208]    </control>
[03:29:39.208]    <control if="canReadPins" while="" timeout="0" info="">
[03:29:39.208]      // if-block "canReadPins"
[03:29:39.208]        // =>  TRUE
[03:29:39.208]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:29:39.208]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:29:39.210]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:29:39.210]        // while-condition  =>  FALSE
[03:29:39.210]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:29:39.210]      </control>
[03:29:39.210]      // end if-block "canReadPins"
[03:29:39.210]    </control>
[03:29:39.210]    <control if="!canReadPins" while="" timeout="0" info="">
[03:29:39.210]      // if-block "!canReadPins"
[03:29:39.211]        // =>  FALSE
[03:29:39.211]      // skip if-block "!canReadPins"
[03:29:39.211]    </control>
[03:29:39.211]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:29:39.211]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:29:39.211]        // =>  TRUE
[03:29:39.211]      <block atomic="false" info="">
[03:29:39.211]        WriteAP(0x00, 0x190008);
[03:29:39.213]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:29:39.213]        WriteAP(0xF0, 0x01);
[03:29:39.216]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:29:39.216]      </block>
[03:29:39.216]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:29:39.216]    </control>
[03:29:39.216]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:29:39.216]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:29:39.218]        // =>  FALSE
[03:29:39.218]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:29:39.218]    </control>
[03:29:39.218]    <block atomic="false" info="">
[03:29:39.218]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:29:39.218]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:29:39.218]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:29:39.218]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:29:39.223]      __ap = 0; //lets make sure we reset the access point selection
[03:29:39.223]        // -> [__ap <= 0x00000000]
[03:29:39.223]    </block>
[03:29:39.224]  </sequence>
[03:29:39.224]  
[03:29:39.237]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:29:39.237]  
[03:29:39.237]  <debugvars>
[03:29:39.244]    // Pre-defined
[03:29:39.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:39.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:29:39.244]    __dp=0x00000000
[03:29:39.244]    __ap=0x00000000
[03:29:39.244]    __traceout=0x00000000      (Trace Disabled)
[03:29:39.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:39.244]    __FlashAddr=0x00000000
[03:29:39.244]    __FlashLen=0x00000000
[03:29:39.244]    __FlashArg=0x00000000
[03:29:39.244]    __FlashOp=0x00000000
[03:29:39.244]    __Result=0x00000000
[03:29:39.244]  </debugvars>
[03:29:39.244]  
[03:29:39.244]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:29:39.244]    <block atomic="false" info="">
[03:29:39.244]      __var deviceID = 0;
[03:29:39.244]        // -> [deviceID <= 0x00000000]
[03:29:39.244]      __var version = 0;
[03:29:39.244]        // -> [version <= 0x00000000]
[03:29:39.244]      __var partNum = 0;
[03:29:39.244]        // -> [partNum <= 0x00000000]
[03:29:39.244]      __var manuf = 0;
[03:29:39.244]        // -> [manuf <= 0x00000000]
[03:29:39.244]      __var isMSPM0G1X0X_G3X0X = 0;
[03:29:39.244]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:29:39.244]      __var isProduction = 0;
[03:29:39.244]        // -> [isProduction <= 0x00000000]
[03:29:39.244]      __var continueId = 0;
[03:29:39.244]        // -> [continueId <= 0x00000000]
[03:29:39.244]      deviceID =   Read32(0x41C40004);
[03:29:39.249]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:29:39.249]        // -> [deviceID <= 0x2BB8802F]
[03:29:39.249]      version = deviceID >> 28;
[03:29:39.249]        // -> [version <= 0x00000002]
[03:29:39.249]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:29:39.249]        // -> [partNum <= 0x0000BB88]
[03:29:39.249]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:29:39.249]        // -> [manuf <= 0x00000017]
[03:29:39.249]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:29:39.249]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:29:39.249]      isProduction = (version > 0);
[03:29:39.249]        // -> [isProduction <= 0x00000001]
[03:29:39.249]    </block>
[03:29:39.249]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:29:39.249]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:29:39.249]        // =>  FALSE
[03:29:39.249]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:29:39.249]    </control>
[03:29:39.249]    <control if="continueId == 4" while="" timeout="0" info="">
[03:29:39.249]      // if-block "continueId == 4"
[03:29:39.249]        // =>  FALSE
[03:29:39.249]      // skip if-block "continueId == 4"
[03:29:39.249]    </control>
[03:29:39.254]    <control if="!isProduction" while="" timeout="0" info="">
[03:29:39.254]      // if-block "!isProduction"
[03:29:39.254]        // =>  FALSE
[03:29:39.254]      // skip if-block "!isProduction"
[03:29:39.254]    </control>
[03:29:39.254]  </sequence>
[03:29:39.254]  
[03:31:57.428]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:31:57.428]  
[03:31:57.438]  <debugvars>
[03:31:57.438]    // Pre-defined
[03:31:57.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:31:57.438]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:31:57.438]    __dp=0x00000000
[03:31:57.438]    __ap=0x00000000
[03:31:57.438]    __traceout=0x00000000      (Trace Disabled)
[03:31:57.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:31:57.438]    __FlashAddr=0x00000000
[03:31:57.438]    __FlashLen=0x00000000
[03:31:57.438]    __FlashArg=0x00000000
[03:31:57.438]    __FlashOp=0x00000000
[03:31:57.439]    __Result=0x00000000
[03:31:57.439]  </debugvars>
[03:31:57.439]  
[03:31:57.439]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:31:57.439]    <block atomic="false" info="">
[03:31:57.439]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:31:57.440]        // -> [isSWJ <= 0x00000001]
[03:31:57.440]      __var hasDormant = __protocol & 0x00020000;
[03:31:57.440]        // -> [hasDormant <= 0x00000000]
[03:31:57.440]      __var protType   = __protocol & 0x0000FFFF;
[03:31:57.440]        // -> [protType <= 0x00000002]
[03:31:57.440]    </block>
[03:31:57.440]    <control if="protType == 1" while="" timeout="0" info="">
[03:31:57.440]      // if-block "protType == 1"
[03:31:57.440]        // =>  FALSE
[03:31:57.440]      // skip if-block "protType == 1"
[03:31:57.440]    </control>
[03:31:57.440]    <control if="protType == 2" while="" timeout="0" info="">
[03:31:57.440]      // if-block "protType == 2"
[03:31:57.440]        // =>  TRUE
[03:31:57.440]      <control if="isSWJ" while="" timeout="0" info="">
[03:31:57.440]        // if-block "isSWJ"
[03:31:57.440]          // =>  TRUE
[03:31:57.440]        <control if="hasDormant" while="" timeout="0" info="">
[03:31:57.440]          // if-block "hasDormant"
[03:31:57.440]            // =>  FALSE
[03:31:57.440]          // skip if-block "hasDormant"
[03:31:57.440]        </control>
[03:31:57.440]        <control if="!hasDormant" while="" timeout="0" info="">
[03:31:57.440]          // if-block "!hasDormant"
[03:31:57.440]            // =>  TRUE
[03:31:57.440]          <block atomic="false" info="">
[03:31:57.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:31:57.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:31:57.440]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:31:57.440]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:31:57.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:31:57.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:31:57.440]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:31:57.448]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:31:57.448]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:31:57.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:31:57.448]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:31:57.448]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:31:57.448]          </block>
[03:31:57.448]          // end if-block "!hasDormant"
[03:31:57.448]        </control>
[03:31:57.448]        // end if-block "isSWJ"
[03:31:57.448]      </control>
[03:31:57.448]      <control if="!isSWJ" while="" timeout="0" info="">
[03:31:57.448]        // if-block "!isSWJ"
[03:31:57.448]          // =>  FALSE
[03:31:57.448]        // skip if-block "!isSWJ"
[03:31:57.448]      </control>
[03:31:57.448]      <block atomic="false" info="">
[03:31:57.448]        ReadDP(0x0);
[03:31:57.448]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:31:57.448]      </block>
[03:31:57.448]      // end if-block "protType == 2"
[03:31:57.448]    </control>
[03:31:57.448]  </sequence>
[03:31:57.448]  
[03:31:57.448]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:31:57.448]  
[03:31:57.448]  <debugvars>
[03:31:57.448]    // Pre-defined
[03:31:57.448]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:31:57.448]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:31:57.448]    __dp=0x00000000
[03:31:57.448]    __ap=0x00000000
[03:31:57.448]    __traceout=0x00000000      (Trace Disabled)
[03:31:57.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:31:57.448]    __FlashAddr=0x00000000
[03:31:57.448]    __FlashLen=0x00000000
[03:31:57.448]    __FlashArg=0x00000000
[03:31:57.448]    __FlashOp=0x00000000
[03:31:57.448]    __Result=0x00000000
[03:31:57.448]  </debugvars>
[03:31:57.448]  
[03:31:57.448]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:31:57.458]    <block atomic="false" info="">
[03:31:57.458]      __var SW_DP_ABORT       = 0x0;
[03:31:57.458]        // -> [SW_DP_ABORT <= 0x00000000]
[03:31:57.459]      __var DP_CTRL_STAT      = 0x4;
[03:31:57.459]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:31:57.459]      __var DP_SELECT         = 0x8;
[03:31:57.459]        // -> [DP_SELECT <= 0x00000008]
[03:31:57.459]      __var powered_down      = 0;
[03:31:57.459]        // -> [powered_down <= 0x00000000]
[03:31:57.459]      WriteDP(DP_SELECT, 0x00000000);
[03:31:57.461]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:31:57.461]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:31:57.461]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:31:57.461]        // -> [powered_down <= 0x00000001]
[03:31:57.461]    </block>
[03:31:57.461]    <control if="powered_down" while="" timeout="0" info="">
[03:31:57.461]      // if-block "powered_down"
[03:31:57.461]        // =>  TRUE
[03:31:57.461]      <block atomic="false" info="">
[03:31:57.461]        Message(0, "Debug/System power-up request sent");
[03:31:57.464]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:31:57.464]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:31:57.464]      </block>
[03:31:57.464]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:31:57.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:31:57.468]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:31:57.469]        // while-condition  =>  FALSE
[03:31:57.469]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:31:57.469]      </control>
[03:31:57.469]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:31:57.469]        // if-block "(__protocol & 0xFFFF) == 1"
[03:31:57.469]          // =>  FALSE
[03:31:57.469]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:31:57.469]      </control>
[03:31:57.470]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:31:57.470]        // if-block "(__protocol & 0xFFFF) == 2"
[03:31:57.470]          // =>  TRUE
[03:31:57.470]        <block atomic="false" info="">
[03:31:57.470]          Message(0, "executing SWD power up");
[03:31:57.471]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:31:57.473]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:31:57.473]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:31:57.475]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:31:57.475]        </block>
[03:31:57.475]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:31:57.475]      </control>
[03:31:57.475]      // end if-block "powered_down"
[03:31:57.475]    </control>
[03:31:57.475]    <block atomic="false" info="">
[03:31:57.475]      __var DEBUG_PORT_VAL    = 0;
[03:31:57.475]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:31:57.476]      __var ACCESS_POINT_VAL  = 0;
[03:31:57.476]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:31:57.476]      __ap = 1; 
[03:31:57.476]        // -> [__ap <= 0x00000001]
[03:31:57.476]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:31:57.479]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:31:57.479]      __ap = 4;
[03:31:57.479]        // -> [__ap <= 0x00000004]
[03:31:57.479]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:31:57.482]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:31:57.482]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:31:57.482]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:31:57.482]    </block>
[03:31:57.482]    <block atomic="false" info="">
[03:31:57.482]      __var nReset = 0x80;
[03:31:57.482]        // -> [nReset <= 0x00000080]
[03:31:57.482]      __var canReadPins = 0;
[03:31:57.482]        // -> [canReadPins <= 0x00000000]
[03:31:57.482]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:31:57.482]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:31:57.482]        // -> [canReadPins <= 0x00000001]
[03:31:57.482]    </block>
[03:31:57.482]    <control if="" while="1" timeout="200" info="">
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.482]      // while "1"  (timeout="200")
[03:31:57.482]      // while-condition  =>  TRUE
[03:31:57.492]      // while "1"  (timeout="200")
[03:31:57.492]      // while  =>  TIMEOUT
[03:31:57.492]      // end while "1"
[03:31:57.492]    </control>
[03:31:57.492]    <control if="canReadPins" while="" timeout="0" info="">
[03:31:57.492]      // if-block "canReadPins"
[03:31:57.492]        // =>  TRUE
[03:31:57.492]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:31:57.492]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:31:57.492]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:31:57.492]        // while-condition  =>  FALSE
[03:31:57.492]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:31:57.492]      </control>
[03:31:57.492]      // end if-block "canReadPins"
[03:31:57.492]    </control>
[03:31:57.492]    <control if="!canReadPins" while="" timeout="0" info="">
[03:31:57.492]      // if-block "!canReadPins"
[03:31:57.492]        // =>  FALSE
[03:31:57.492]      // skip if-block "!canReadPins"
[03:31:57.492]    </control>
[03:31:57.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:31:57.492]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:31:57.492]        // =>  TRUE
[03:31:57.492]      <block atomic="false" info="">
[03:31:57.492]        WriteAP(0x00, 0x190008);
[03:31:57.492]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:31:57.492]        WriteAP(0xF0, 0x01);
[03:31:57.492]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:31:57.492]      </block>
[03:31:57.492]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:31:57.492]    </control>
[03:31:57.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:31:57.492]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:31:57.492]        // =>  FALSE
[03:31:57.492]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:31:57.492]    </control>
[03:31:57.502]    <block atomic="false" info="">
[03:31:57.502]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:31:57.502]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:31:57.502]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:31:57.502]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:31:57.502]      __ap = 0; //lets make sure we reset the access point selection
[03:31:57.502]        // -> [__ap <= 0x00000000]
[03:31:57.502]    </block>
[03:31:57.502]  </sequence>
[03:31:57.502]  
[03:31:57.522]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:31:57.522]  
[03:31:57.522]  <debugvars>
[03:31:57.522]    // Pre-defined
[03:31:57.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:31:57.522]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:31:57.522]    __dp=0x00000000
[03:31:57.522]    __ap=0x00000000
[03:31:57.522]    __traceout=0x00000000      (Trace Disabled)
[03:31:57.522]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:31:57.522]    __FlashAddr=0x00000000
[03:31:57.522]    __FlashLen=0x00000000
[03:31:57.522]    __FlashArg=0x00000000
[03:31:57.522]    __FlashOp=0x00000000
[03:31:57.522]    __Result=0x00000000
[03:31:57.522]  </debugvars>
[03:31:57.522]  
[03:31:57.522]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:31:57.522]    <block atomic="false" info="">
[03:31:57.522]      __var deviceID = 0;
[03:31:57.522]        // -> [deviceID <= 0x00000000]
[03:31:57.522]      __var version = 0;
[03:31:57.522]        // -> [version <= 0x00000000]
[03:31:57.522]      __var partNum = 0;
[03:31:57.522]        // -> [partNum <= 0x00000000]
[03:31:57.522]      __var manuf = 0;
[03:31:57.522]        // -> [manuf <= 0x00000000]
[03:31:57.522]      __var isMSPM0G1X0X_G3X0X = 0;
[03:31:57.522]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:31:57.532]      __var isProduction = 0;
[03:31:57.532]        // -> [isProduction <= 0x00000000]
[03:31:57.532]      __var continueId = 0;
[03:31:57.532]        // -> [continueId <= 0x00000000]
[03:31:57.532]      deviceID =   Read32(0x41C40004);
[03:31:57.532]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:31:57.532]        // -> [deviceID <= 0x2BB8802F]
[03:31:57.532]      version = deviceID >> 28;
[03:31:57.532]        // -> [version <= 0x00000002]
[03:31:57.532]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:31:57.532]        // -> [partNum <= 0x0000BB88]
[03:31:57.532]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:31:57.532]        // -> [manuf <= 0x00000017]
[03:31:57.532]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:31:57.532]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:31:57.532]      isProduction = (version > 0);
[03:31:57.532]        // -> [isProduction <= 0x00000001]
[03:31:57.532]    </block>
[03:31:57.532]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:31:57.532]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:31:57.532]        // =>  FALSE
[03:31:57.532]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:31:57.532]    </control>
[03:31:57.532]    <control if="continueId == 4" while="" timeout="0" info="">
[03:31:57.532]      // if-block "continueId == 4"
[03:31:57.532]        // =>  FALSE
[03:31:57.532]      // skip if-block "continueId == 4"
[03:31:57.532]    </control>
[03:31:57.532]    <control if="!isProduction" while="" timeout="0" info="">
[03:31:57.532]      // if-block "!isProduction"
[03:31:57.532]        // =>  FALSE
[03:31:57.532]      // skip if-block "!isProduction"
[03:31:57.532]    </control>
[03:31:57.532]  </sequence>
[03:31:57.532]  
[03:36:14.478]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:36:14.478]  
[03:36:14.492]  <debugvars>
[03:36:14.492]    // Pre-defined
[03:36:14.492]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:36:14.492]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:36:14.492]    __dp=0x00000000
[03:36:14.492]    __ap=0x00000000
[03:36:14.492]    __traceout=0x00000000      (Trace Disabled)
[03:36:14.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:36:14.492]    __FlashAddr=0x00000000
[03:36:14.492]    __FlashLen=0x00000000
[03:36:14.492]    __FlashArg=0x00000000
[03:36:14.492]    __FlashOp=0x00000000
[03:36:14.492]    __Result=0x00000000
[03:36:14.492]  </debugvars>
[03:36:14.492]  
[03:36:14.492]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:36:14.492]    <block atomic="false" info="">
[03:36:14.492]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:36:14.492]        // -> [isSWJ <= 0x00000001]
[03:36:14.492]      __var hasDormant = __protocol & 0x00020000;
[03:36:14.492]        // -> [hasDormant <= 0x00000000]
[03:36:14.492]      __var protType   = __protocol & 0x0000FFFF;
[03:36:14.492]        // -> [protType <= 0x00000002]
[03:36:14.492]    </block>
[03:36:14.492]    <control if="protType == 1" while="" timeout="0" info="">
[03:36:14.492]      // if-block "protType == 1"
[03:36:14.492]        // =>  FALSE
[03:36:14.492]      // skip if-block "protType == 1"
[03:36:14.492]    </control>
[03:36:14.492]    <control if="protType == 2" while="" timeout="0" info="">
[03:36:14.492]      // if-block "protType == 2"
[03:36:14.492]        // =>  TRUE
[03:36:14.492]      <control if="isSWJ" while="" timeout="0" info="">
[03:36:14.492]        // if-block "isSWJ"
[03:36:14.492]          // =>  TRUE
[03:36:14.492]        <control if="hasDormant" while="" timeout="0" info="">
[03:36:14.492]          // if-block "hasDormant"
[03:36:14.492]            // =>  FALSE
[03:36:14.492]          // skip if-block "hasDormant"
[03:36:14.492]        </control>
[03:36:14.492]        <control if="!hasDormant" while="" timeout="0" info="">
[03:36:14.492]          // if-block "!hasDormant"
[03:36:14.492]            // =>  TRUE
[03:36:14.492]          <block atomic="false" info="">
[03:36:14.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:36:14.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:36:14.492]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:36:14.499]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:36:14.499]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:36:14.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:36:14.499]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:36:14.499]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:36:14.499]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:36:14.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:36:14.499]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:36:14.499]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:36:14.499]          </block>
[03:36:14.499]          // end if-block "!hasDormant"
[03:36:14.499]        </control>
[03:36:14.499]        // end if-block "isSWJ"
[03:36:14.499]      </control>
[03:36:14.499]      <control if="!isSWJ" while="" timeout="0" info="">
[03:36:14.499]        // if-block "!isSWJ"
[03:36:14.499]          // =>  FALSE
[03:36:14.499]        // skip if-block "!isSWJ"
[03:36:14.499]      </control>
[03:36:14.499]      <block atomic="false" info="">
[03:36:14.499]        ReadDP(0x0);
[03:36:14.509]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:36:14.509]      </block>
[03:36:14.509]      // end if-block "protType == 2"
[03:36:14.509]    </control>
[03:36:14.509]  </sequence>
[03:36:14.509]  
[03:36:14.509]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:36:14.509]  
[03:36:14.509]  <debugvars>
[03:36:14.509]    // Pre-defined
[03:36:14.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:36:14.509]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:36:14.509]    __dp=0x00000000
[03:36:14.509]    __ap=0x00000000
[03:36:14.509]    __traceout=0x00000000      (Trace Disabled)
[03:36:14.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:36:14.509]    __FlashAddr=0x00000000
[03:36:14.509]    __FlashLen=0x00000000
[03:36:14.509]    __FlashArg=0x00000000
[03:36:14.509]    __FlashOp=0x00000000
[03:36:14.509]    __Result=0x00000000
[03:36:14.509]  </debugvars>
[03:36:14.509]  
[03:36:14.509]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:36:14.509]    <block atomic="false" info="">
[03:36:14.509]      __var SW_DP_ABORT       = 0x0;
[03:36:14.509]        // -> [SW_DP_ABORT <= 0x00000000]
[03:36:14.509]      __var DP_CTRL_STAT      = 0x4;
[03:36:14.509]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:36:14.509]      __var DP_SELECT         = 0x8;
[03:36:14.509]        // -> [DP_SELECT <= 0x00000008]
[03:36:14.509]      __var powered_down      = 0;
[03:36:14.509]        // -> [powered_down <= 0x00000000]
[03:36:14.509]      WriteDP(DP_SELECT, 0x00000000);
[03:36:14.509]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:36:14.509]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:36:14.509]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:36:14.509]        // -> [powered_down <= 0x00000001]
[03:36:14.509]    </block>
[03:36:14.509]    <control if="powered_down" while="" timeout="0" info="">
[03:36:14.519]      // if-block "powered_down"
[03:36:14.519]        // =>  TRUE
[03:36:14.519]      <block atomic="false" info="">
[03:36:14.519]        Message(0, "Debug/System power-up request sent");
[03:36:14.521]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:36:14.521]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:36:14.521]      </block>
[03:36:14.521]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:36:14.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:36:14.521]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:36:14.521]        // while-condition  =>  FALSE
[03:36:14.521]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:36:14.521]      </control>
[03:36:14.521]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:36:14.521]        // if-block "(__protocol & 0xFFFF) == 1"
[03:36:14.521]          // =>  FALSE
[03:36:14.521]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:36:14.521]      </control>
[03:36:14.521]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:36:14.521]        // if-block "(__protocol & 0xFFFF) == 2"
[03:36:14.521]          // =>  TRUE
[03:36:14.521]        <block atomic="false" info="">
[03:36:14.521]          Message(0, "executing SWD power up");
[03:36:14.521]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:36:14.529]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:36:14.529]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:36:14.529]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:36:14.529]        </block>
[03:36:14.529]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:36:14.529]      </control>
[03:36:14.529]      // end if-block "powered_down"
[03:36:14.529]    </control>
[03:36:14.529]    <block atomic="false" info="">
[03:36:14.529]      __var DEBUG_PORT_VAL    = 0;
[03:36:14.529]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:36:14.529]      __var ACCESS_POINT_VAL  = 0;
[03:36:14.529]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:36:14.529]      __ap = 1; 
[03:36:14.529]        // -> [__ap <= 0x00000001]
[03:36:14.529]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:36:14.529]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:36:14.529]      __ap = 4;
[03:36:14.529]        // -> [__ap <= 0x00000004]
[03:36:14.529]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:36:14.539]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:36:14.539]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:36:14.539]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:36:14.539]    </block>
[03:36:14.539]    <block atomic="false" info="">
[03:36:14.539]      __var nReset = 0x80;
[03:36:14.539]        // -> [nReset <= 0x00000080]
[03:36:14.539]      __var canReadPins = 0;
[03:36:14.539]        // -> [canReadPins <= 0x00000000]
[03:36:14.539]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:36:14.539]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:36:14.539]        // -> [canReadPins <= 0x00000001]
[03:36:14.539]    </block>
[03:36:14.539]    <control if="" while="1" timeout="200" info="">
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.539]      // while "1"  (timeout="200")
[03:36:14.539]      // while-condition  =>  TRUE
[03:36:14.549]      // while "1"  (timeout="200")
[03:36:14.549]      // while  =>  TIMEOUT
[03:36:14.549]      // end while "1"
[03:36:14.549]    </control>
[03:36:14.549]    <control if="canReadPins" while="" timeout="0" info="">
[03:36:14.549]      // if-block "canReadPins"
[03:36:14.549]        // =>  TRUE
[03:36:14.549]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:36:14.549]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:36:14.549]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:36:14.549]        // while-condition  =>  FALSE
[03:36:14.549]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:36:14.549]      </control>
[03:36:14.549]      // end if-block "canReadPins"
[03:36:14.549]    </control>
[03:36:14.549]    <control if="!canReadPins" while="" timeout="0" info="">
[03:36:14.549]      // if-block "!canReadPins"
[03:36:14.549]        // =>  FALSE
[03:36:14.549]      // skip if-block "!canReadPins"
[03:36:14.549]    </control>
[03:36:14.549]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:36:14.549]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:36:14.549]        // =>  TRUE
[03:36:14.549]      <block atomic="false" info="">
[03:36:14.549]        WriteAP(0x00, 0x190008);
[03:36:14.549]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:36:14.549]        WriteAP(0xF0, 0x01);
[03:36:14.549]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:36:14.549]      </block>
[03:36:14.549]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:36:14.549]    </control>
[03:36:14.549]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:36:14.549]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:36:14.559]        // =>  FALSE
[03:36:14.559]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:36:14.559]    </control>
[03:36:14.559]    <block atomic="false" info="">
[03:36:14.559]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:36:14.559]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:36:14.559]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:36:14.559]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:36:14.565]      __ap = 0; //lets make sure we reset the access point selection
[03:36:14.565]        // -> [__ap <= 0x00000000]
[03:36:14.565]    </block>
[03:36:14.565]  </sequence>
[03:36:14.565]  
[03:36:14.580]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:36:14.580]  
[03:36:14.580]  <debugvars>
[03:36:14.580]    // Pre-defined
[03:36:14.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:36:14.580]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:36:14.580]    __dp=0x00000000
[03:36:14.580]    __ap=0x00000000
[03:36:14.580]    __traceout=0x00000000      (Trace Disabled)
[03:36:14.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:36:14.580]    __FlashAddr=0x00000000
[03:36:14.580]    __FlashLen=0x00000000
[03:36:14.580]    __FlashArg=0x00000000
[03:36:14.580]    __FlashOp=0x00000000
[03:36:14.580]    __Result=0x00000000
[03:36:14.580]  </debugvars>
[03:36:14.580]  
[03:36:14.580]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:36:14.580]    <block atomic="false" info="">
[03:36:14.580]      __var deviceID = 0;
[03:36:14.580]        // -> [deviceID <= 0x00000000]
[03:36:14.580]      __var version = 0;
[03:36:14.580]        // -> [version <= 0x00000000]
[03:36:14.580]      __var partNum = 0;
[03:36:14.580]        // -> [partNum <= 0x00000000]
[03:36:14.580]      __var manuf = 0;
[03:36:14.580]        // -> [manuf <= 0x00000000]
[03:36:14.580]      __var isMSPM0G1X0X_G3X0X = 0;
[03:36:14.580]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:36:14.580]      __var isProduction = 0;
[03:36:14.580]        // -> [isProduction <= 0x00000000]
[03:36:14.580]      __var continueId = 0;
[03:36:14.580]        // -> [continueId <= 0x00000000]
[03:36:14.580]      deviceID =   Read32(0x41C40004);
[03:36:14.590]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:36:14.590]        // -> [deviceID <= 0x2BB8802F]
[03:36:14.590]      version = deviceID >> 28;
[03:36:14.590]        // -> [version <= 0x00000002]
[03:36:14.590]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:36:14.590]        // -> [partNum <= 0x0000BB88]
[03:36:14.590]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:36:14.590]        // -> [manuf <= 0x00000017]
[03:36:14.590]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:36:14.590]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:36:14.590]      isProduction = (version > 0);
[03:36:14.590]        // -> [isProduction <= 0x00000001]
[03:36:14.590]    </block>
[03:36:14.590]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:36:14.590]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:36:14.590]        // =>  FALSE
[03:36:14.590]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:36:14.590]    </control>
[03:36:14.590]    <control if="continueId == 4" while="" timeout="0" info="">
[03:36:14.590]      // if-block "continueId == 4"
[03:36:14.590]        // =>  FALSE
[03:36:14.590]      // skip if-block "continueId == 4"
[03:36:14.590]    </control>
[03:36:14.590]    <control if="!isProduction" while="" timeout="0" info="">
[03:36:14.590]      // if-block "!isProduction"
[03:36:14.590]        // =>  FALSE
[03:36:14.590]      // skip if-block "!isProduction"
[03:36:14.590]    </control>
[03:36:14.590]  </sequence>
[03:36:14.590]  
[03:37:41.279]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:37:41.279]  
[03:37:41.279]  <debugvars>
[03:37:41.279]    // Pre-defined
[03:37:41.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:37:41.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:37:41.279]    __dp=0x00000000
[03:37:41.279]    __ap=0x00000000
[03:37:41.279]    __traceout=0x00000000      (Trace Disabled)
[03:37:41.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:37:41.279]    __FlashAddr=0x00000000
[03:37:41.279]    __FlashLen=0x00000000
[03:37:41.279]    __FlashArg=0x00000000
[03:37:41.279]    __FlashOp=0x00000000
[03:37:41.279]    __Result=0x00000000
[03:37:41.279]  </debugvars>
[03:37:41.279]  
[03:37:41.279]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:37:41.279]    <block atomic="false" info="">
[03:37:41.279]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:37:41.279]        // -> [isSWJ <= 0x00000001]
[03:37:41.279]      __var hasDormant = __protocol & 0x00020000;
[03:37:41.279]        // -> [hasDormant <= 0x00000000]
[03:37:41.279]      __var protType   = __protocol & 0x0000FFFF;
[03:37:41.279]        // -> [protType <= 0x00000002]
[03:37:41.279]    </block>
[03:37:41.279]    <control if="protType == 1" while="" timeout="0" info="">
[03:37:41.279]      // if-block "protType == 1"
[03:37:41.279]        // =>  FALSE
[03:37:41.279]      // skip if-block "protType == 1"
[03:37:41.279]    </control>
[03:37:41.279]    <control if="protType == 2" while="" timeout="0" info="">
[03:37:41.279]      // if-block "protType == 2"
[03:37:41.279]        // =>  TRUE
[03:37:41.279]      <control if="isSWJ" while="" timeout="0" info="">
[03:37:41.279]        // if-block "isSWJ"
[03:37:41.279]          // =>  TRUE
[03:37:41.279]        <control if="hasDormant" while="" timeout="0" info="">
[03:37:41.279]          // if-block "hasDormant"
[03:37:41.279]            // =>  FALSE
[03:37:41.279]          // skip if-block "hasDormant"
[03:37:41.279]        </control>
[03:37:41.279]        <control if="!hasDormant" while="" timeout="0" info="">
[03:37:41.279]          // if-block "!hasDormant"
[03:37:41.279]            // =>  TRUE
[03:37:41.279]          <block atomic="false" info="">
[03:37:41.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:37:41.289]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:37:41.289]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:37:41.289]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:37:41.289]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:37:41.289]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:37:41.289]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:37:41.289]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:37:41.289]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:37:41.289]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:37:41.289]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:37:41.289]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:37:41.289]          </block>
[03:37:41.289]          // end if-block "!hasDormant"
[03:37:41.289]        </control>
[03:37:41.289]        // end if-block "isSWJ"
[03:37:41.289]      </control>
[03:37:41.289]      <control if="!isSWJ" while="" timeout="0" info="">
[03:37:41.289]        // if-block "!isSWJ"
[03:37:41.289]          // =>  FALSE
[03:37:41.289]        // skip if-block "!isSWJ"
[03:37:41.289]      </control>
[03:37:41.289]      <block atomic="false" info="">
[03:37:41.289]        ReadDP(0x0);
[03:37:41.299]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:37:41.299]      </block>
[03:37:41.299]      // end if-block "protType == 2"
[03:37:41.299]    </control>
[03:37:41.299]  </sequence>
[03:37:41.299]  
[03:37:41.299]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:37:41.299]  
[03:37:41.299]  <debugvars>
[03:37:41.299]    // Pre-defined
[03:37:41.299]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:37:41.299]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:37:41.299]    __dp=0x00000000
[03:37:41.299]    __ap=0x00000000
[03:37:41.299]    __traceout=0x00000000      (Trace Disabled)
[03:37:41.299]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:37:41.299]    __FlashAddr=0x00000000
[03:37:41.299]    __FlashLen=0x00000000
[03:37:41.299]    __FlashArg=0x00000000
[03:37:41.299]    __FlashOp=0x00000000
[03:37:41.299]    __Result=0x00000000
[03:37:41.299]  </debugvars>
[03:37:41.299]  
[03:37:41.299]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:37:41.299]    <block atomic="false" info="">
[03:37:41.299]      __var SW_DP_ABORT       = 0x0;
[03:37:41.299]        // -> [SW_DP_ABORT <= 0x00000000]
[03:37:41.299]      __var DP_CTRL_STAT      = 0x4;
[03:37:41.299]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:37:41.299]      __var DP_SELECT         = 0x8;
[03:37:41.299]        // -> [DP_SELECT <= 0x00000008]
[03:37:41.299]      __var powered_down      = 0;
[03:37:41.299]        // -> [powered_down <= 0x00000000]
[03:37:41.299]      WriteDP(DP_SELECT, 0x00000000);
[03:37:41.299]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:37:41.299]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:37:41.309]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:37:41.309]        // -> [powered_down <= 0x00000001]
[03:37:41.309]    </block>
[03:37:41.309]    <control if="powered_down" while="" timeout="0" info="">
[03:37:41.309]      // if-block "powered_down"
[03:37:41.309]        // =>  TRUE
[03:37:41.309]      <block atomic="false" info="">
[03:37:41.309]        Message(0, "Debug/System power-up request sent");
[03:37:41.309]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:37:41.309]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:37:41.309]      </block>
[03:37:41.309]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:37:41.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:37:41.309]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:37:41.309]        // while-condition  =>  FALSE
[03:37:41.309]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:37:41.309]      </control>
[03:37:41.309]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:37:41.309]        // if-block "(__protocol & 0xFFFF) == 1"
[03:37:41.309]          // =>  FALSE
[03:37:41.309]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:37:41.319]      </control>
[03:37:41.319]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:37:41.319]        // if-block "(__protocol & 0xFFFF) == 2"
[03:37:41.319]          // =>  TRUE
[03:37:41.319]        <block atomic="false" info="">
[03:37:41.319]          Message(0, "executing SWD power up");
[03:37:41.319]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:37:41.319]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:37:41.319]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:37:41.319]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:37:41.319]        </block>
[03:37:41.319]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:37:41.319]      </control>
[03:37:41.319]      // end if-block "powered_down"
[03:37:41.319]    </control>
[03:37:41.319]    <block atomic="false" info="">
[03:37:41.319]      __var DEBUG_PORT_VAL    = 0;
[03:37:41.319]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:37:41.319]      __var ACCESS_POINT_VAL  = 0;
[03:37:41.319]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:37:41.319]      __ap = 1; 
[03:37:41.319]        // -> [__ap <= 0x00000001]
[03:37:41.319]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:37:41.329]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:37:41.329]      __ap = 4;
[03:37:41.329]        // -> [__ap <= 0x00000004]
[03:37:41.329]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:37:41.329]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:37:41.329]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:37:41.329]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:37:41.329]    </block>
[03:37:41.329]    <block atomic="false" info="">
[03:37:41.329]      __var nReset = 0x80;
[03:37:41.329]        // -> [nReset <= 0x00000080]
[03:37:41.329]      __var canReadPins = 0;
[03:37:41.329]        // -> [canReadPins <= 0x00000000]
[03:37:41.329]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:37:41.329]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:37:41.329]        // -> [canReadPins <= 0x00000001]
[03:37:41.329]    </block>
[03:37:41.329]    <control if="" while="1" timeout="200" info="">
[03:37:41.329]      // while "1"  (timeout="200")
[03:37:41.329]      // while-condition  =>  TRUE
[03:37:41.329]      // while "1"  (timeout="200")
[03:37:41.329]      // while-condition  =>  TRUE
[03:37:41.329]      // while "1"  (timeout="200")
[03:37:41.329]      // while-condition  =>  TRUE
[03:37:41.329]      // while "1"  (timeout="200")
[03:37:41.329]      // while-condition  =>  TRUE
[03:37:41.329]      // while "1"  (timeout="200")
[03:37:41.329]      // while-condition  =>  TRUE
[03:37:41.329]      // while "1"  (timeout="200")
[03:37:41.329]      // while-condition  =>  TRUE
[03:37:41.339]      // while "1"  (timeout="200")
[03:37:41.339]      // while  =>  TIMEOUT
[03:37:41.339]      // end while "1"
[03:37:41.339]    </control>
[03:37:41.339]    <control if="canReadPins" while="" timeout="0" info="">
[03:37:41.339]      // if-block "canReadPins"
[03:37:41.339]        // =>  TRUE
[03:37:41.339]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:37:41.339]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:37:41.341]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:37:41.341]        // while-condition  =>  FALSE
[03:37:41.341]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:37:41.341]      </control>
[03:37:41.341]      // end if-block "canReadPins"
[03:37:41.341]    </control>
[03:37:41.341]    <control if="!canReadPins" while="" timeout="0" info="">
[03:37:41.341]      // if-block "!canReadPins"
[03:37:41.341]        // =>  FALSE
[03:37:41.341]      // skip if-block "!canReadPins"
[03:37:41.341]    </control>
[03:37:41.341]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:37:41.341]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:37:41.341]        // =>  TRUE
[03:37:41.341]      <block atomic="false" info="">
[03:37:41.341]        WriteAP(0x00, 0x190008);
[03:37:41.341]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:37:41.341]        WriteAP(0xF0, 0x01);
[03:37:41.341]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:37:41.341]      </block>
[03:37:41.341]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:37:41.341]    </control>
[03:37:41.341]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:37:41.341]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:37:41.350]        // =>  FALSE
[03:37:41.350]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:37:41.350]    </control>
[03:37:41.350]    <block atomic="false" info="">
[03:37:41.350]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:37:41.352]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:37:41.352]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:37:41.352]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:37:41.352]      __ap = 0; //lets make sure we reset the access point selection
[03:37:41.352]        // -> [__ap <= 0x00000000]
[03:37:41.352]    </block>
[03:37:41.352]  </sequence>
[03:37:41.352]  
[03:37:41.373]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:37:41.373]  
[03:37:41.373]  <debugvars>
[03:37:41.373]    // Pre-defined
[03:37:41.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:37:41.373]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:37:41.373]    __dp=0x00000000
[03:37:41.373]    __ap=0x00000000
[03:37:41.373]    __traceout=0x00000000      (Trace Disabled)
[03:37:41.373]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:37:41.373]    __FlashAddr=0x00000000
[03:37:41.373]    __FlashLen=0x00000000
[03:37:41.373]    __FlashArg=0x00000000
[03:37:41.373]    __FlashOp=0x00000000
[03:37:41.373]    __Result=0x00000000
[03:37:41.373]  </debugvars>
[03:37:41.373]  
[03:37:41.373]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:37:41.373]    <block atomic="false" info="">
[03:37:41.373]      __var deviceID = 0;
[03:37:41.373]        // -> [deviceID <= 0x00000000]
[03:37:41.373]      __var version = 0;
[03:37:41.373]        // -> [version <= 0x00000000]
[03:37:41.373]      __var partNum = 0;
[03:37:41.373]        // -> [partNum <= 0x00000000]
[03:37:41.373]      __var manuf = 0;
[03:37:41.373]        // -> [manuf <= 0x00000000]
[03:37:41.373]      __var isMSPM0G1X0X_G3X0X = 0;
[03:37:41.373]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:37:41.373]      __var isProduction = 0;
[03:37:41.373]        // -> [isProduction <= 0x00000000]
[03:37:41.373]      __var continueId = 0;
[03:37:41.373]        // -> [continueId <= 0x00000000]
[03:37:41.373]      deviceID =   Read32(0x41C40004);
[03:37:41.381]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:37:41.381]        // -> [deviceID <= 0x2BB8802F]
[03:37:41.381]      version = deviceID >> 28;
[03:37:41.381]        // -> [version <= 0x00000002]
[03:37:41.381]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:37:41.381]        // -> [partNum <= 0x0000BB88]
[03:37:41.381]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:37:41.381]        // -> [manuf <= 0x00000017]
[03:37:41.381]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:37:41.381]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:37:41.381]      isProduction = (version > 0);
[03:37:41.381]        // -> [isProduction <= 0x00000001]
[03:37:41.381]    </block>
[03:37:41.381]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:37:41.381]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:37:41.381]        // =>  FALSE
[03:37:41.381]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:37:41.381]    </control>
[03:37:41.381]    <control if="continueId == 4" while="" timeout="0" info="">
[03:37:41.381]      // if-block "continueId == 4"
[03:37:41.381]        // =>  FALSE
[03:37:41.381]      // skip if-block "continueId == 4"
[03:37:41.381]    </control>
[03:37:41.381]    <control if="!isProduction" while="" timeout="0" info="">
[03:37:41.381]      // if-block "!isProduction"
[03:37:41.381]        // =>  FALSE
[03:37:41.381]      // skip if-block "!isProduction"
[03:37:41.381]    </control>
[03:37:41.381]  </sequence>
[03:37:41.381]  
[03:40:47.715]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:40:47.715]  
[03:40:47.724]  <debugvars>
[03:40:47.724]    // Pre-defined
[03:40:47.724]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:47.724]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:40:47.724]    __dp=0x00000000
[03:40:47.724]    __ap=0x00000000
[03:40:47.724]    __traceout=0x00000000      (Trace Disabled)
[03:40:47.724]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:47.724]    __FlashAddr=0x00000000
[03:40:47.724]    __FlashLen=0x00000000
[03:40:47.724]    __FlashArg=0x00000000
[03:40:47.724]    __FlashOp=0x00000000
[03:40:47.724]    __Result=0x00000000
[03:40:47.724]  </debugvars>
[03:40:47.724]  
[03:40:47.724]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:40:47.724]    <block atomic="false" info="">
[03:40:47.724]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:40:47.724]        // -> [isSWJ <= 0x00000001]
[03:40:47.724]      __var hasDormant = __protocol & 0x00020000;
[03:40:47.724]        // -> [hasDormant <= 0x00000000]
[03:40:47.724]      __var protType   = __protocol & 0x0000FFFF;
[03:40:47.724]        // -> [protType <= 0x00000002]
[03:40:47.724]    </block>
[03:40:47.724]    <control if="protType == 1" while="" timeout="0" info="">
[03:40:47.724]      // if-block "protType == 1"
[03:40:47.724]        // =>  FALSE
[03:40:47.724]      // skip if-block "protType == 1"
[03:40:47.724]    </control>
[03:40:47.724]    <control if="protType == 2" while="" timeout="0" info="">
[03:40:47.724]      // if-block "protType == 2"
[03:40:47.724]        // =>  TRUE
[03:40:47.724]      <control if="isSWJ" while="" timeout="0" info="">
[03:40:47.724]        // if-block "isSWJ"
[03:40:47.724]          // =>  TRUE
[03:40:47.724]        <control if="hasDormant" while="" timeout="0" info="">
[03:40:47.724]          // if-block "hasDormant"
[03:40:47.724]            // =>  FALSE
[03:40:47.724]          // skip if-block "hasDormant"
[03:40:47.724]        </control>
[03:40:47.724]        <control if="!hasDormant" while="" timeout="0" info="">
[03:40:47.724]          // if-block "!hasDormant"
[03:40:47.724]            // =>  TRUE
[03:40:47.724]          <block atomic="false" info="">
[03:40:47.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:40:47.724]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:40:47.724]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:40:47.724]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:40:47.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:40:47.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:40:47.734]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:40:47.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:40:47.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:40:47.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:40:47.734]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:40:47.734]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:40:47.734]          </block>
[03:40:47.734]          // end if-block "!hasDormant"
[03:40:47.734]        </control>
[03:40:47.734]        // end if-block "isSWJ"
[03:40:47.734]      </control>
[03:40:47.734]      <control if="!isSWJ" while="" timeout="0" info="">
[03:40:47.734]        // if-block "!isSWJ"
[03:40:47.734]          // =>  FALSE
[03:40:47.734]        // skip if-block "!isSWJ"
[03:40:47.734]      </control>
[03:40:47.734]      <block atomic="false" info="">
[03:40:47.734]        ReadDP(0x0);
[03:40:47.734]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:40:47.734]      </block>
[03:40:47.734]      // end if-block "protType == 2"
[03:40:47.734]    </control>
[03:40:47.734]  </sequence>
[03:40:47.734]  
[03:40:47.744]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:40:47.744]  
[03:40:47.744]  <debugvars>
[03:40:47.744]    // Pre-defined
[03:40:47.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:47.744]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:40:47.744]    __dp=0x00000000
[03:40:47.744]    __ap=0x00000000
[03:40:47.744]    __traceout=0x00000000      (Trace Disabled)
[03:40:47.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:47.744]    __FlashAddr=0x00000000
[03:40:47.744]    __FlashLen=0x00000000
[03:40:47.744]    __FlashArg=0x00000000
[03:40:47.744]    __FlashOp=0x00000000
[03:40:47.744]    __Result=0x00000000
[03:40:47.744]  </debugvars>
[03:40:47.744]  
[03:40:47.744]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:40:47.744]    <block atomic="false" info="">
[03:40:47.744]      __var SW_DP_ABORT       = 0x0;
[03:40:47.744]        // -> [SW_DP_ABORT <= 0x00000000]
[03:40:47.744]      __var DP_CTRL_STAT      = 0x4;
[03:40:47.744]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:40:47.744]      __var DP_SELECT         = 0x8;
[03:40:47.744]        // -> [DP_SELECT <= 0x00000008]
[03:40:47.744]      __var powered_down      = 0;
[03:40:47.744]        // -> [powered_down <= 0x00000000]
[03:40:47.744]      WriteDP(DP_SELECT, 0x00000000);
[03:40:47.744]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:40:47.744]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:40:47.744]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:40:47.744]        // -> [powered_down <= 0x00000001]
[03:40:47.754]    </block>
[03:40:47.754]    <control if="powered_down" while="" timeout="0" info="">
[03:40:47.754]      // if-block "powered_down"
[03:40:47.754]        // =>  TRUE
[03:40:47.754]      <block atomic="false" info="">
[03:40:47.754]        Message(0, "Debug/System power-up request sent");
[03:40:47.757]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:40:47.757]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:40:47.757]      </block>
[03:40:47.757]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:40:47.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:40:47.757]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:40:47.757]        // while-condition  =>  FALSE
[03:40:47.757]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:40:47.757]      </control>
[03:40:47.757]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:40:47.757]        // if-block "(__protocol & 0xFFFF) == 1"
[03:40:47.757]          // =>  FALSE
[03:40:47.757]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:40:47.757]      </control>
[03:40:47.757]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:40:47.757]        // if-block "(__protocol & 0xFFFF) == 2"
[03:40:47.757]          // =>  TRUE
[03:40:47.757]        <block atomic="false" info="">
[03:40:47.757]          Message(0, "executing SWD power up");
[03:40:47.765]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:40:47.765]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:40:47.765]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:40:47.765]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:40:47.765]        </block>
[03:40:47.765]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:40:47.765]      </control>
[03:40:47.765]      // end if-block "powered_down"
[03:40:47.765]    </control>
[03:40:47.765]    <block atomic="false" info="">
[03:40:47.765]      __var DEBUG_PORT_VAL    = 0;
[03:40:47.765]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:40:47.765]      __var ACCESS_POINT_VAL  = 0;
[03:40:47.765]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:40:47.765]      __ap = 1; 
[03:40:47.765]        // -> [__ap <= 0x00000001]
[03:40:47.765]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:40:47.765]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:40:47.765]      __ap = 4;
[03:40:47.765]        // -> [__ap <= 0x00000004]
[03:40:47.765]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:40:47.775]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:40:47.775]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:40:47.775]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:40:47.775]    </block>
[03:40:47.775]    <block atomic="false" info="">
[03:40:47.775]      __var nReset = 0x80;
[03:40:47.775]        // -> [nReset <= 0x00000080]
[03:40:47.775]      __var canReadPins = 0;
[03:40:47.775]        // -> [canReadPins <= 0x00000000]
[03:40:47.775]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:40:47.775]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:40:47.775]        // -> [canReadPins <= 0x00000001]
[03:40:47.775]    </block>
[03:40:47.775]    <control if="" while="1" timeout="200" info="">
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.775]      // while-condition  =>  TRUE
[03:40:47.775]      // while "1"  (timeout="200")
[03:40:47.785]      // while-condition  =>  TRUE
[03:40:47.785]      // while "1"  (timeout="200")
[03:40:47.785]      // while  =>  TIMEOUT
[03:40:47.785]      // end while "1"
[03:40:47.785]    </control>
[03:40:47.785]    <control if="canReadPins" while="" timeout="0" info="">
[03:40:47.785]      // if-block "canReadPins"
[03:40:47.785]        // =>  TRUE
[03:40:47.785]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:40:47.785]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:40:47.787]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:40:47.787]        // while-condition  =>  FALSE
[03:40:47.787]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:40:47.787]      </control>
[03:40:47.787]      // end if-block "canReadPins"
[03:40:47.787]    </control>
[03:40:47.787]    <control if="!canReadPins" while="" timeout="0" info="">
[03:40:47.787]      // if-block "!canReadPins"
[03:40:47.787]        // =>  FALSE
[03:40:47.787]      // skip if-block "!canReadPins"
[03:40:47.787]    </control>
[03:40:47.787]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:40:47.787]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:40:47.787]        // =>  TRUE
[03:40:47.787]      <block atomic="false" info="">
[03:40:47.787]        WriteAP(0x00, 0x190008);
[03:40:47.787]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:40:47.787]        WriteAP(0xF0, 0x01);
[03:40:47.787]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:40:47.787]      </block>
[03:40:47.787]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:40:47.787]    </control>
[03:40:47.787]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:40:47.787]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:40:47.795]        // =>  FALSE
[03:40:47.795]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:40:47.795]    </control>
[03:40:47.795]    <block atomic="false" info="">
[03:40:47.795]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:40:47.795]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:40:47.795]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:40:47.795]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:40:47.795]      __ap = 0; //lets make sure we reset the access point selection
[03:40:47.795]        // -> [__ap <= 0x00000000]
[03:40:47.795]    </block>
[03:40:47.795]  </sequence>
[03:40:47.795]  
[03:40:47.817]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:40:47.817]  
[03:40:47.817]  <debugvars>
[03:40:47.817]    // Pre-defined
[03:40:47.817]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:47.817]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:40:47.817]    __dp=0x00000000
[03:40:47.817]    __ap=0x00000000
[03:40:47.817]    __traceout=0x00000000      (Trace Disabled)
[03:40:47.817]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:47.817]    __FlashAddr=0x00000000
[03:40:47.817]    __FlashLen=0x00000000
[03:40:47.817]    __FlashArg=0x00000000
[03:40:47.817]    __FlashOp=0x00000000
[03:40:47.817]    __Result=0x00000000
[03:40:47.817]  </debugvars>
[03:40:47.817]  
[03:40:47.817]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:40:47.817]    <block atomic="false" info="">
[03:40:47.817]      __var deviceID = 0;
[03:40:47.817]        // -> [deviceID <= 0x00000000]
[03:40:47.817]      __var version = 0;
[03:40:47.817]        // -> [version <= 0x00000000]
[03:40:47.817]      __var partNum = 0;
[03:40:47.817]        // -> [partNum <= 0x00000000]
[03:40:47.817]      __var manuf = 0;
[03:40:47.817]        // -> [manuf <= 0x00000000]
[03:40:47.817]      __var isMSPM0G1X0X_G3X0X = 0;
[03:40:47.817]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:40:47.817]      __var isProduction = 0;
[03:40:47.817]        // -> [isProduction <= 0x00000000]
[03:40:47.826]      __var continueId = 0;
[03:40:47.826]        // -> [continueId <= 0x00000000]
[03:40:47.826]      deviceID =   Read32(0x41C40004);
[03:40:47.826]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:40:47.826]        // -> [deviceID <= 0x2BB8802F]
[03:40:47.826]      version = deviceID >> 28;
[03:40:47.826]        // -> [version <= 0x00000002]
[03:40:47.826]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:40:47.826]        // -> [partNum <= 0x0000BB88]
[03:40:47.826]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:40:47.826]        // -> [manuf <= 0x00000017]
[03:40:47.826]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:40:47.826]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:40:47.826]      isProduction = (version > 0);
[03:40:47.826]        // -> [isProduction <= 0x00000001]
[03:40:47.826]    </block>
[03:40:47.826]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:40:47.826]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:40:47.826]        // =>  FALSE
[03:40:47.826]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:40:47.826]    </control>
[03:40:47.826]    <control if="continueId == 4" while="" timeout="0" info="">
[03:40:47.826]      // if-block "continueId == 4"
[03:40:47.826]        // =>  FALSE
[03:40:47.826]      // skip if-block "continueId == 4"
[03:40:47.826]    </control>
[03:40:47.826]    <control if="!isProduction" while="" timeout="0" info="">
[03:40:47.826]      // if-block "!isProduction"
[03:40:47.826]        // =>  FALSE
[03:40:47.826]      // skip if-block "!isProduction"
[03:40:47.826]    </control>
[03:40:47.826]  </sequence>
[03:40:47.826]  
[03:41:25.914]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:41:25.914]  
[03:41:25.929]  <debugvars>
[03:41:25.929]    // Pre-defined
[03:41:25.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:41:25.929]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:41:25.929]    __dp=0x00000000
[03:41:25.929]    __ap=0x00000000
[03:41:25.929]    __traceout=0x00000000      (Trace Disabled)
[03:41:25.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:41:25.929]    __FlashAddr=0x00000000
[03:41:25.929]    __FlashLen=0x00000000
[03:41:25.929]    __FlashArg=0x00000000
[03:41:25.929]    __FlashOp=0x00000000
[03:41:25.929]    __Result=0x00000000
[03:41:25.929]  </debugvars>
[03:41:25.929]  
[03:41:25.929]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:41:25.929]    <block atomic="false" info="">
[03:41:25.929]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:41:25.929]        // -> [isSWJ <= 0x00000001]
[03:41:25.929]      __var hasDormant = __protocol & 0x00020000;
[03:41:25.929]        // -> [hasDormant <= 0x00000000]
[03:41:25.932]      __var protType   = __protocol & 0x0000FFFF;
[03:41:25.932]        // -> [protType <= 0x00000002]
[03:41:25.932]    </block>
[03:41:25.932]    <control if="protType == 1" while="" timeout="0" info="">
[03:41:25.932]      // if-block "protType == 1"
[03:41:25.932]        // =>  FALSE
[03:41:25.932]      // skip if-block "protType == 1"
[03:41:25.932]    </control>
[03:41:25.933]    <control if="protType == 2" while="" timeout="0" info="">
[03:41:25.933]      // if-block "protType == 2"
[03:41:25.933]        // =>  TRUE
[03:41:25.933]      <control if="isSWJ" while="" timeout="0" info="">
[03:41:25.933]        // if-block "isSWJ"
[03:41:25.933]          // =>  TRUE
[03:41:25.933]        <control if="hasDormant" while="" timeout="0" info="">
[03:41:25.933]          // if-block "hasDormant"
[03:41:25.933]            // =>  FALSE
[03:41:25.933]          // skip if-block "hasDormant"
[03:41:25.933]        </control>
[03:41:25.933]        <control if="!hasDormant" while="" timeout="0" info="">
[03:41:25.933]          // if-block "!hasDormant"
[03:41:25.933]            // =>  TRUE
[03:41:25.933]          <block atomic="false" info="">
[03:41:25.933]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:41:25.933]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:41:25.933]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:41:25.933]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:41:25.933]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:41:25.938]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:41:25.938]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:41:25.938]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:41:25.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:41:25.942]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:41:25.943]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:41:25.944]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:41:25.944]          </block>
[03:41:25.944]          // end if-block "!hasDormant"
[03:41:25.944]        </control>
[03:41:25.944]        // end if-block "isSWJ"
[03:41:25.944]      </control>
[03:41:25.944]      <control if="!isSWJ" while="" timeout="0" info="">
[03:41:25.944]        // if-block "!isSWJ"
[03:41:25.944]          // =>  FALSE
[03:41:25.944]        // skip if-block "!isSWJ"
[03:41:25.944]      </control>
[03:41:25.944]      <block atomic="false" info="">
[03:41:25.944]        ReadDP(0x0);
[03:41:25.948]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:41:25.948]      </block>
[03:41:25.948]      // end if-block "protType == 2"
[03:41:25.948]    </control>
[03:41:25.948]  </sequence>
[03:41:25.948]  
[03:41:25.948]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:41:25.948]  
[03:41:25.948]  <debugvars>
[03:41:25.948]    // Pre-defined
[03:41:25.953]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:41:25.953]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:41:25.953]    __dp=0x00000000
[03:41:25.953]    __ap=0x00000000
[03:41:25.953]    __traceout=0x00000000      (Trace Disabled)
[03:41:25.953]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:41:25.953]    __FlashAddr=0x00000000
[03:41:25.953]    __FlashLen=0x00000000
[03:41:25.953]    __FlashArg=0x00000000
[03:41:25.953]    __FlashOp=0x00000000
[03:41:25.953]    __Result=0x00000000
[03:41:25.953]  </debugvars>
[03:41:25.953]  
[03:41:25.953]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:41:25.954]    <block atomic="false" info="">
[03:41:25.954]      __var SW_DP_ABORT       = 0x0;
[03:41:25.954]        // -> [SW_DP_ABORT <= 0x00000000]
[03:41:25.954]      __var DP_CTRL_STAT      = 0x4;
[03:41:25.954]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:41:25.954]      __var DP_SELECT         = 0x8;
[03:41:25.954]        // -> [DP_SELECT <= 0x00000008]
[03:41:25.954]      __var powered_down      = 0;
[03:41:25.954]        // -> [powered_down <= 0x00000000]
[03:41:25.954]      WriteDP(DP_SELECT, 0x00000000);
[03:41:25.958]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:41:25.958]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:41:25.959]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:41:25.959]        // -> [powered_down <= 0x00000001]
[03:41:25.960]    </block>
[03:41:25.960]    <control if="powered_down" while="" timeout="0" info="">
[03:41:25.960]      // if-block "powered_down"
[03:41:25.960]        // =>  TRUE
[03:41:25.960]      <block atomic="false" info="">
[03:41:25.961]        Message(0, "Debug/System power-up request sent");
[03:41:25.964]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:41:25.964]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:41:25.964]      </block>
[03:41:25.964]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:41:25.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:41:25.968]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:41:25.968]        // while-condition  =>  FALSE
[03:41:25.968]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:41:25.968]      </control>
[03:41:25.968]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:41:25.968]        // if-block "(__protocol & 0xFFFF) == 1"
[03:41:25.968]          // =>  FALSE
[03:41:25.968]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:41:25.968]      </control>
[03:41:25.968]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:41:25.968]        // if-block "(__protocol & 0xFFFF) == 2"
[03:41:25.970]          // =>  TRUE
[03:41:25.970]        <block atomic="false" info="">
[03:41:25.970]          Message(0, "executing SWD power up");
[03:41:25.973]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:41:25.975]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:41:25.975]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:41:25.977]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:41:25.977]        </block>
[03:41:25.977]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:41:25.977]      </control>
[03:41:25.977]      // end if-block "powered_down"
[03:41:25.977]    </control>
[03:41:25.977]    <block atomic="false" info="">
[03:41:25.977]      __var DEBUG_PORT_VAL    = 0;
[03:41:25.977]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:41:25.978]      __var ACCESS_POINT_VAL  = 0;
[03:41:25.978]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:41:25.978]      __ap = 1; 
[03:41:25.978]        // -> [__ap <= 0x00000001]
[03:41:25.978]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:41:25.981]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:41:25.981]      __ap = 4;
[03:41:25.981]        // -> [__ap <= 0x00000004]
[03:41:25.981]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:41:25.983]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:41:25.983]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:41:25.983]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:41:25.983]    </block>
[03:41:25.983]    <block atomic="false" info="">
[03:41:25.983]      __var nReset = 0x80;
[03:41:25.983]        // -> [nReset <= 0x00000080]
[03:41:25.983]      __var canReadPins = 0;
[03:41:25.983]        // -> [canReadPins <= 0x00000000]
[03:41:25.983]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:41:25.988]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:41:25.988]        // -> [canReadPins <= 0x00000001]
[03:41:25.988]    </block>
[03:41:25.988]    <control if="" while="1" timeout="200" info="">
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.988]      // while-condition  =>  TRUE
[03:41:25.988]      // while "1"  (timeout="200")
[03:41:25.992]      // while-condition  =>  TRUE
[03:41:25.992]      // while "1"  (timeout="200")
[03:41:25.992]      // while-condition  =>  TRUE
[03:41:25.992]      // while "1"  (timeout="200")
[03:41:25.992]      // while-condition  =>  TRUE
[03:41:25.992]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.993]      // while-condition  =>  TRUE
[03:41:25.993]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:25.998]      // while "1"  (timeout="200")
[03:41:25.998]      // while-condition  =>  TRUE
[03:41:26.002]      // while "1"  (timeout="200")
[03:41:26.002]      // while-condition  =>  TRUE
[03:41:26.002]      // while "1"  (timeout="200")
[03:41:26.002]      // while-condition  =>  TRUE
[03:41:26.002]      // while "1"  (timeout="200")
[03:41:26.002]      // while-condition  =>  TRUE
[03:41:26.002]      // while "1"  (timeout="200")
[03:41:26.003]      // while-condition  =>  TRUE
[03:41:26.003]      // while "1"  (timeout="200")
[03:41:26.003]      // while  =>  TIMEOUT
[03:41:26.003]      // end while "1"
[03:41:26.003]    </control>
[03:41:26.003]    <control if="canReadPins" while="" timeout="0" info="">
[03:41:26.003]      // if-block "canReadPins"
[03:41:26.003]        // =>  TRUE
[03:41:26.003]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:41:26.003]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:41:26.003]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:41:26.003]        // while-condition  =>  FALSE
[03:41:26.003]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:41:26.003]      </control>
[03:41:26.003]      // end if-block "canReadPins"
[03:41:26.003]    </control>
[03:41:26.003]    <control if="!canReadPins" while="" timeout="0" info="">
[03:41:26.003]      // if-block "!canReadPins"
[03:41:26.003]        // =>  FALSE
[03:41:26.003]      // skip if-block "!canReadPins"
[03:41:26.008]    </control>
[03:41:26.008]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:41:26.008]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:41:26.008]        // =>  TRUE
[03:41:26.008]      <block atomic="false" info="">
[03:41:26.008]        WriteAP(0x00, 0x190008);
[03:41:26.008]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:41:26.008]        WriteAP(0xF0, 0x01);
[03:41:26.013]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:41:26.013]      </block>
[03:41:26.013]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:41:26.013]    </control>
[03:41:26.013]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:41:26.013]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:41:26.013]        // =>  FALSE
[03:41:26.013]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:41:26.013]    </control>
[03:41:26.013]    <block atomic="false" info="">
[03:41:26.013]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:41:26.015]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:41:26.015]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:41:26.015]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:41:26.015]      __ap = 0; //lets make sure we reset the access point selection
[03:41:26.015]        // -> [__ap <= 0x00000000]
[03:41:26.015]    </block>
[03:41:26.015]  </sequence>
[03:41:26.015]  
[03:41:26.038]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:41:26.038]  
[03:41:26.038]  <debugvars>
[03:41:26.038]    // Pre-defined
[03:41:26.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:41:26.038]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:41:26.038]    __dp=0x00000000
[03:41:26.038]    __ap=0x00000000
[03:41:26.038]    __traceout=0x00000000      (Trace Disabled)
[03:41:26.038]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:41:26.038]    __FlashAddr=0x00000000
[03:41:26.038]    __FlashLen=0x00000000
[03:41:26.038]    __FlashArg=0x00000000
[03:41:26.038]    __FlashOp=0x00000000
[03:41:26.038]    __Result=0x00000000
[03:41:26.038]  </debugvars>
[03:41:26.038]  
[03:41:26.038]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:41:26.038]    <block atomic="false" info="">
[03:41:26.038]      __var deviceID = 0;
[03:41:26.038]        // -> [deviceID <= 0x00000000]
[03:41:26.038]      __var version = 0;
[03:41:26.038]        // -> [version <= 0x00000000]
[03:41:26.038]      __var partNum = 0;
[03:41:26.038]        // -> [partNum <= 0x00000000]
[03:41:26.038]      __var manuf = 0;
[03:41:26.038]        // -> [manuf <= 0x00000000]
[03:41:26.038]      __var isMSPM0G1X0X_G3X0X = 0;
[03:41:26.038]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:41:26.038]      __var isProduction = 0;
[03:41:26.038]        // -> [isProduction <= 0x00000000]
[03:41:26.038]      __var continueId = 0;
[03:41:26.038]        // -> [continueId <= 0x00000000]
[03:41:26.038]      deviceID =   Read32(0x41C40004);
[03:41:26.048]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:41:26.048]        // -> [deviceID <= 0x2BB8802F]
[03:41:26.048]      version = deviceID >> 28;
[03:41:26.048]        // -> [version <= 0x00000002]
[03:41:26.048]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:41:26.048]        // -> [partNum <= 0x0000BB88]
[03:41:26.048]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:41:26.048]        // -> [manuf <= 0x00000017]
[03:41:26.048]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:41:26.048]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:41:26.048]      isProduction = (version > 0);
[03:41:26.048]        // -> [isProduction <= 0x00000001]
[03:41:26.048]    </block>
[03:41:26.048]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:41:26.048]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:41:26.048]        // =>  FALSE
[03:41:26.048]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:41:26.048]    </control>
[03:41:26.048]    <control if="continueId == 4" while="" timeout="0" info="">
[03:41:26.048]      // if-block "continueId == 4"
[03:41:26.048]        // =>  FALSE
[03:41:26.048]      // skip if-block "continueId == 4"
[03:41:26.048]    </control>
[03:41:26.048]    <control if="!isProduction" while="" timeout="0" info="">
[03:41:26.048]      // if-block "!isProduction"
[03:41:26.048]        // =>  FALSE
[03:41:26.048]      // skip if-block "!isProduction"
[03:41:26.048]    </control>
[03:41:26.048]  </sequence>
[03:41:26.048]  
[03:42:09.573]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:42:09.573]  
[03:42:09.585]  <debugvars>
[03:42:09.585]    // Pre-defined
[03:42:09.585]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:42:09.585]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:42:09.585]    __dp=0x00000000
[03:42:09.585]    __ap=0x00000000
[03:42:09.585]    __traceout=0x00000000      (Trace Disabled)
[03:42:09.585]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:42:09.585]    __FlashAddr=0x00000000
[03:42:09.585]    __FlashLen=0x00000000
[03:42:09.585]    __FlashArg=0x00000000
[03:42:09.585]    __FlashOp=0x00000000
[03:42:09.585]    __Result=0x00000000
[03:42:09.585]  </debugvars>
[03:42:09.585]  
[03:42:09.585]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:42:09.585]    <block atomic="false" info="">
[03:42:09.585]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:42:09.585]        // -> [isSWJ <= 0x00000001]
[03:42:09.585]      __var hasDormant = __protocol & 0x00020000;
[03:42:09.585]        // -> [hasDormant <= 0x00000000]
[03:42:09.585]      __var protType   = __protocol & 0x0000FFFF;
[03:42:09.585]        // -> [protType <= 0x00000002]
[03:42:09.585]    </block>
[03:42:09.585]    <control if="protType == 1" while="" timeout="0" info="">
[03:42:09.585]      // if-block "protType == 1"
[03:42:09.585]        // =>  FALSE
[03:42:09.585]      // skip if-block "protType == 1"
[03:42:09.585]    </control>
[03:42:09.585]    <control if="protType == 2" while="" timeout="0" info="">
[03:42:09.585]      // if-block "protType == 2"
[03:42:09.585]        // =>  TRUE
[03:42:09.585]      <control if="isSWJ" while="" timeout="0" info="">
[03:42:09.585]        // if-block "isSWJ"
[03:42:09.585]          // =>  TRUE
[03:42:09.589]        <control if="hasDormant" while="" timeout="0" info="">
[03:42:09.589]          // if-block "hasDormant"
[03:42:09.589]            // =>  FALSE
[03:42:09.589]          // skip if-block "hasDormant"
[03:42:09.589]        </control>
[03:42:09.589]        <control if="!hasDormant" while="" timeout="0" info="">
[03:42:09.589]          // if-block "!hasDormant"
[03:42:09.589]            // =>  TRUE
[03:42:09.589]          <block atomic="false" info="">
[03:42:09.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:42:09.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:42:09.591]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:42:09.591]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:42:09.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:42:09.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:42:09.591]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:42:09.591]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:42:09.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:42:09.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:42:09.591]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:42:09.591]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:42:09.591]          </block>
[03:42:09.599]          // end if-block "!hasDormant"
[03:42:09.599]        </control>
[03:42:09.599]        // end if-block "isSWJ"
[03:42:09.599]      </control>
[03:42:09.599]      <control if="!isSWJ" while="" timeout="0" info="">
[03:42:09.599]        // if-block "!isSWJ"
[03:42:09.599]          // =>  FALSE
[03:42:09.599]        // skip if-block "!isSWJ"
[03:42:09.599]      </control>
[03:42:09.599]      <block atomic="false" info="">
[03:42:09.599]        ReadDP(0x0);
[03:42:09.599]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:42:09.599]      </block>
[03:42:09.599]      // end if-block "protType == 2"
[03:42:09.599]    </control>
[03:42:09.599]  </sequence>
[03:42:09.599]  
[03:42:09.599]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:42:09.599]  
[03:42:09.599]  <debugvars>
[03:42:09.599]    // Pre-defined
[03:42:09.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:42:09.599]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:42:09.599]    __dp=0x00000000
[03:42:09.599]    __ap=0x00000000
[03:42:09.599]    __traceout=0x00000000      (Trace Disabled)
[03:42:09.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:42:09.599]    __FlashAddr=0x00000000
[03:42:09.599]    __FlashLen=0x00000000
[03:42:09.599]    __FlashArg=0x00000000
[03:42:09.599]    __FlashOp=0x00000000
[03:42:09.599]    __Result=0x00000000
[03:42:09.599]  </debugvars>
[03:42:09.599]  
[03:42:09.599]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:42:09.599]    <block atomic="false" info="">
[03:42:09.599]      __var SW_DP_ABORT       = 0x0;
[03:42:09.599]        // -> [SW_DP_ABORT <= 0x00000000]
[03:42:09.599]      __var DP_CTRL_STAT      = 0x4;
[03:42:09.599]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:42:09.599]      __var DP_SELECT         = 0x8;
[03:42:09.599]        // -> [DP_SELECT <= 0x00000008]
[03:42:09.599]      __var powered_down      = 0;
[03:42:09.599]        // -> [powered_down <= 0x00000000]
[03:42:09.609]      WriteDP(DP_SELECT, 0x00000000);
[03:42:09.609]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:42:09.609]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:42:09.609]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:42:09.609]        // -> [powered_down <= 0x00000001]
[03:42:09.609]    </block>
[03:42:09.609]    <control if="powered_down" while="" timeout="0" info="">
[03:42:09.609]      // if-block "powered_down"
[03:42:09.609]        // =>  TRUE
[03:42:09.609]      <block atomic="false" info="">
[03:42:09.609]        Message(0, "Debug/System power-up request sent");
[03:42:09.609]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:42:09.609]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:42:09.609]      </block>
[03:42:09.609]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:42:09.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:42:09.619]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:42:09.619]        // while-condition  =>  FALSE
[03:42:09.619]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:42:09.619]      </control>
[03:42:09.619]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:42:09.619]        // if-block "(__protocol & 0xFFFF) == 1"
[03:42:09.619]          // =>  FALSE
[03:42:09.619]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:42:09.619]      </control>
[03:42:09.619]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:42:09.621]        // if-block "(__protocol & 0xFFFF) == 2"
[03:42:09.621]          // =>  TRUE
[03:42:09.621]        <block atomic="false" info="">
[03:42:09.621]          Message(0, "executing SWD power up");
[03:42:09.621]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:42:09.621]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:42:09.621]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:42:09.621]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:42:09.621]        </block>
[03:42:09.621]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:42:09.621]      </control>
[03:42:09.621]      // end if-block "powered_down"
[03:42:09.621]    </control>
[03:42:09.621]    <block atomic="false" info="">
[03:42:09.621]      __var DEBUG_PORT_VAL    = 0;
[03:42:09.621]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:42:09.621]      __var ACCESS_POINT_VAL  = 0;
[03:42:09.621]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:42:09.621]      __ap = 1; 
[03:42:09.621]        // -> [__ap <= 0x00000001]
[03:42:09.621]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:42:09.630]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:42:09.630]      __ap = 4;
[03:42:09.630]        // -> [__ap <= 0x00000004]
[03:42:09.630]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:42:09.630]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:42:09.630]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:42:09.630]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:42:09.630]    </block>
[03:42:09.630]    <block atomic="false" info="">
[03:42:09.630]      __var nReset = 0x80;
[03:42:09.630]        // -> [nReset <= 0x00000080]
[03:42:09.630]      __var canReadPins = 0;
[03:42:09.630]        // -> [canReadPins <= 0x00000000]
[03:42:09.630]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:42:09.640]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:42:09.640]        // -> [canReadPins <= 0x00000001]
[03:42:09.640]    </block>
[03:42:09.640]    <control if="" while="1" timeout="200" info="">
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.640]      // while "1"  (timeout="200")
[03:42:09.640]      // while-condition  =>  TRUE
[03:42:09.650]      // while "1"  (timeout="200")
[03:42:09.650]      // while  =>  TIMEOUT
[03:42:09.650]      // end while "1"
[03:42:09.650]    </control>
[03:42:09.650]    <control if="canReadPins" while="" timeout="0" info="">
[03:42:09.650]      // if-block "canReadPins"
[03:42:09.650]        // =>  TRUE
[03:42:09.650]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:42:09.650]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:42:09.650]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:42:09.650]        // while-condition  =>  FALSE
[03:42:09.650]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:42:09.650]      </control>
[03:42:09.650]      // end if-block "canReadPins"
[03:42:09.650]    </control>
[03:42:09.650]    <control if="!canReadPins" while="" timeout="0" info="">
[03:42:09.650]      // if-block "!canReadPins"
[03:42:09.650]        // =>  FALSE
[03:42:09.650]      // skip if-block "!canReadPins"
[03:42:09.650]    </control>
[03:42:09.650]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:42:09.650]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:42:09.650]        // =>  TRUE
[03:42:09.650]      <block atomic="false" info="">
[03:42:09.650]        WriteAP(0x00, 0x190008);
[03:42:09.650]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:42:09.650]        WriteAP(0xF0, 0x01);
[03:42:09.650]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:42:09.650]      </block>
[03:42:09.650]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:42:09.650]    </control>
[03:42:09.650]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:42:09.650]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:42:09.650]        // =>  FALSE
[03:42:09.650]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:42:09.650]    </control>
[03:42:09.660]    <block atomic="false" info="">
[03:42:09.660]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:42:09.662]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:42:09.662]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:42:09.662]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:42:09.662]      __ap = 0; //lets make sure we reset the access point selection
[03:42:09.662]        // -> [__ap <= 0x00000000]
[03:42:09.662]    </block>
[03:42:09.662]  </sequence>
[03:42:09.662]  
[03:42:09.682]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:42:09.682]  
[03:42:09.682]  <debugvars>
[03:42:09.682]    // Pre-defined
[03:42:09.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:42:09.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:42:09.682]    __dp=0x00000000
[03:42:09.682]    __ap=0x00000000
[03:42:09.682]    __traceout=0x00000000      (Trace Disabled)
[03:42:09.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:42:09.682]    __FlashAddr=0x00000000
[03:42:09.682]    __FlashLen=0x00000000
[03:42:09.682]    __FlashArg=0x00000000
[03:42:09.682]    __FlashOp=0x00000000
[03:42:09.682]    __Result=0x00000000
[03:42:09.682]  </debugvars>
[03:42:09.682]  
[03:42:09.682]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:42:09.682]    <block atomic="false" info="">
[03:42:09.690]      __var deviceID = 0;
[03:42:09.690]        // -> [deviceID <= 0x00000000]
[03:42:09.690]      __var version = 0;
[03:42:09.690]        // -> [version <= 0x00000000]
[03:42:09.690]      __var partNum = 0;
[03:42:09.690]        // -> [partNum <= 0x00000000]
[03:42:09.690]      __var manuf = 0;
[03:42:09.690]        // -> [manuf <= 0x00000000]
[03:42:09.690]      __var isMSPM0G1X0X_G3X0X = 0;
[03:42:09.690]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:42:09.690]      __var isProduction = 0;
[03:42:09.690]        // -> [isProduction <= 0x00000000]
[03:42:09.690]      __var continueId = 0;
[03:42:09.690]        // -> [continueId <= 0x00000000]
[03:42:09.690]      deviceID =   Read32(0x41C40004);
[03:42:09.690]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:42:09.690]        // -> [deviceID <= 0x2BB8802F]
[03:42:09.690]      version = deviceID >> 28;
[03:42:09.690]        // -> [version <= 0x00000002]
[03:42:09.690]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:42:09.690]        // -> [partNum <= 0x0000BB88]
[03:42:09.690]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:42:09.690]        // -> [manuf <= 0x00000017]
[03:42:09.690]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:42:09.690]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:42:09.690]      isProduction = (version > 0);
[03:42:09.690]        // -> [isProduction <= 0x00000001]
[03:42:09.690]    </block>
[03:42:09.690]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:42:09.690]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:42:09.690]        // =>  FALSE
[03:42:09.690]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:42:09.690]    </control>
[03:42:09.690]    <control if="continueId == 4" while="" timeout="0" info="">
[03:42:09.690]      // if-block "continueId == 4"
[03:42:09.690]        // =>  FALSE
[03:42:09.690]      // skip if-block "continueId == 4"
[03:42:09.690]    </control>
[03:42:09.690]    <control if="!isProduction" while="" timeout="0" info="">
[03:42:09.690]      // if-block "!isProduction"
[03:42:09.690]        // =>  FALSE
[03:42:09.690]      // skip if-block "!isProduction"
[03:42:09.690]    </control>
[03:42:09.690]  </sequence>
[03:42:09.690]  
[03:43:11.483]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:43:11.483]  
[03:43:11.500]  <debugvars>
[03:43:11.500]    // Pre-defined
[03:43:11.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:43:11.500]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:43:11.500]    __dp=0x00000000
[03:43:11.500]    __ap=0x00000000
[03:43:11.500]    __traceout=0x00000000      (Trace Disabled)
[03:43:11.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:43:11.500]    __FlashAddr=0x00000000
[03:43:11.500]    __FlashLen=0x00000000
[03:43:11.500]    __FlashArg=0x00000000
[03:43:11.500]    __FlashOp=0x00000000
[03:43:11.500]    __Result=0x00000000
[03:43:11.500]  </debugvars>
[03:43:11.500]  
[03:43:11.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:43:11.500]    <block atomic="false" info="">
[03:43:11.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:43:11.500]        // -> [isSWJ <= 0x00000001]
[03:43:11.500]      __var hasDormant = __protocol & 0x00020000;
[03:43:11.500]        // -> [hasDormant <= 0x00000000]
[03:43:11.500]      __var protType   = __protocol & 0x0000FFFF;
[03:43:11.500]        // -> [protType <= 0x00000002]
[03:43:11.500]    </block>
[03:43:11.500]    <control if="protType == 1" while="" timeout="0" info="">
[03:43:11.500]      // if-block "protType == 1"
[03:43:11.500]        // =>  FALSE
[03:43:11.500]      // skip if-block "protType == 1"
[03:43:11.500]    </control>
[03:43:11.500]    <control if="protType == 2" while="" timeout="0" info="">
[03:43:11.500]      // if-block "protType == 2"
[03:43:11.503]        // =>  TRUE
[03:43:11.503]      <control if="isSWJ" while="" timeout="0" info="">
[03:43:11.503]        // if-block "isSWJ"
[03:43:11.503]          // =>  TRUE
[03:43:11.503]        <control if="hasDormant" while="" timeout="0" info="">
[03:43:11.503]          // if-block "hasDormant"
[03:43:11.503]            // =>  FALSE
[03:43:11.503]          // skip if-block "hasDormant"
[03:43:11.504]        </control>
[03:43:11.504]        <control if="!hasDormant" while="" timeout="0" info="">
[03:43:11.504]          // if-block "!hasDormant"
[03:43:11.504]            // =>  TRUE
[03:43:11.504]          <block atomic="false" info="">
[03:43:11.504]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:43:11.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:43:11.505]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:43:11.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:43:11.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:43:11.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:43:11.505]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:43:11.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:43:11.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:43:11.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:43:11.505]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:43:11.513]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:43:11.513]          </block>
[03:43:11.513]          // end if-block "!hasDormant"
[03:43:11.513]        </control>
[03:43:11.513]        // end if-block "isSWJ"
[03:43:11.513]      </control>
[03:43:11.513]      <control if="!isSWJ" while="" timeout="0" info="">
[03:43:11.513]        // if-block "!isSWJ"
[03:43:11.513]          // =>  FALSE
[03:43:11.513]        // skip if-block "!isSWJ"
[03:43:11.513]      </control>
[03:43:11.513]      <block atomic="false" info="">
[03:43:11.513]        ReadDP(0x0);
[03:43:11.513]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:43:11.513]      </block>
[03:43:11.513]      // end if-block "protType == 2"
[03:43:11.513]    </control>
[03:43:11.513]  </sequence>
[03:43:11.513]  
[03:43:11.513]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:43:11.513]  
[03:43:11.513]  <debugvars>
[03:43:11.513]    // Pre-defined
[03:43:11.513]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:43:11.513]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:43:11.513]    __dp=0x00000000
[03:43:11.513]    __ap=0x00000000
[03:43:11.513]    __traceout=0x00000000      (Trace Disabled)
[03:43:11.513]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:43:11.513]    __FlashAddr=0x00000000
[03:43:11.513]    __FlashLen=0x00000000
[03:43:11.513]    __FlashArg=0x00000000
[03:43:11.513]    __FlashOp=0x00000000
[03:43:11.513]    __Result=0x00000000
[03:43:11.513]  </debugvars>
[03:43:11.513]  
[03:43:11.513]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:43:11.513]    <block atomic="false" info="">
[03:43:11.513]      __var SW_DP_ABORT       = 0x0;
[03:43:11.513]        // -> [SW_DP_ABORT <= 0x00000000]
[03:43:11.513]      __var DP_CTRL_STAT      = 0x4;
[03:43:11.513]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:43:11.513]      __var DP_SELECT         = 0x8;
[03:43:11.513]        // -> [DP_SELECT <= 0x00000008]
[03:43:11.513]      __var powered_down      = 0;
[03:43:11.513]        // -> [powered_down <= 0x00000000]
[03:43:11.513]      WriteDP(DP_SELECT, 0x00000000);
[03:43:11.523]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:43:11.523]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:43:11.525]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:43:11.525]        // -> [powered_down <= 0x00000001]
[03:43:11.525]    </block>
[03:43:11.525]    <control if="powered_down" while="" timeout="0" info="">
[03:43:11.525]      // if-block "powered_down"
[03:43:11.525]        // =>  TRUE
[03:43:11.525]      <block atomic="false" info="">
[03:43:11.525]        Message(0, "Debug/System power-up request sent");
[03:43:11.525]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:43:11.525]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:43:11.525]      </block>
[03:43:11.525]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:43:11.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:43:11.533]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:43:11.533]        // while-condition  =>  FALSE
[03:43:11.533]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:43:11.533]      </control>
[03:43:11.533]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:43:11.533]        // if-block "(__protocol & 0xFFFF) == 1"
[03:43:11.533]          // =>  FALSE
[03:43:11.533]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:43:11.533]      </control>
[03:43:11.533]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:43:11.533]        // if-block "(__protocol & 0xFFFF) == 2"
[03:43:11.533]          // =>  TRUE
[03:43:11.533]        <block atomic="false" info="">
[03:43:11.533]          Message(0, "executing SWD power up");
[03:43:11.533]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:43:11.533]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:43:11.533]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:43:11.533]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:43:11.533]        </block>
[03:43:11.533]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:43:11.533]      </control>
[03:43:11.533]      // end if-block "powered_down"
[03:43:11.533]    </control>
[03:43:11.533]    <block atomic="false" info="">
[03:43:11.533]      __var DEBUG_PORT_VAL    = 0;
[03:43:11.533]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:43:11.533]      __var ACCESS_POINT_VAL  = 0;
[03:43:11.533]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:43:11.533]      __ap = 1; 
[03:43:11.533]        // -> [__ap <= 0x00000001]
[03:43:11.533]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:43:11.543]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:43:11.543]      __ap = 4;
[03:43:11.543]        // -> [__ap <= 0x00000004]
[03:43:11.543]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:43:11.543]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:43:11.543]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:43:11.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:43:11.543]    </block>
[03:43:11.543]    <block atomic="false" info="">
[03:43:11.543]      __var nReset = 0x80;
[03:43:11.543]        // -> [nReset <= 0x00000080]
[03:43:11.543]      __var canReadPins = 0;
[03:43:11.543]        // -> [canReadPins <= 0x00000000]
[03:43:11.543]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:43:11.543]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:43:11.543]        // -> [canReadPins <= 0x00000001]
[03:43:11.543]    </block>
[03:43:11.543]    <control if="" while="1" timeout="200" info="">
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.543]      // while-condition  =>  TRUE
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.543]      // while-condition  =>  TRUE
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.543]      // while-condition  =>  TRUE
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.543]      // while-condition  =>  TRUE
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.543]      // while-condition  =>  TRUE
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.543]      // while-condition  =>  TRUE
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.543]      // while-condition  =>  TRUE
[03:43:11.543]      // while "1"  (timeout="200")
[03:43:11.553]      // while-condition  =>  TRUE
[03:43:11.553]      // while "1"  (timeout="200")
[03:43:11.553]      // while  =>  TIMEOUT
[03:43:11.553]      // end while "1"
[03:43:11.553]    </control>
[03:43:11.553]    <control if="canReadPins" while="" timeout="0" info="">
[03:43:11.553]      // if-block "canReadPins"
[03:43:11.553]        // =>  TRUE
[03:43:11.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:43:11.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:43:11.556]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:43:11.556]        // while-condition  =>  FALSE
[03:43:11.556]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:43:11.556]      </control>
[03:43:11.556]      // end if-block "canReadPins"
[03:43:11.556]    </control>
[03:43:11.556]    <control if="!canReadPins" while="" timeout="0" info="">
[03:43:11.556]      // if-block "!canReadPins"
[03:43:11.556]        // =>  FALSE
[03:43:11.556]      // skip if-block "!canReadPins"
[03:43:11.556]    </control>
[03:43:11.556]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:43:11.556]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:43:11.556]        // =>  TRUE
[03:43:11.556]      <block atomic="false" info="">
[03:43:11.556]        WriteAP(0x00, 0x190008);
[03:43:11.556]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:43:11.556]        WriteAP(0xF0, 0x01);
[03:43:11.556]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:43:11.556]      </block>
[03:43:11.556]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:43:11.556]    </control>
[03:43:11.556]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:43:11.556]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:43:11.556]        // =>  FALSE
[03:43:11.556]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:43:11.556]    </control>
[03:43:11.556]    <block atomic="false" info="">
[03:43:11.556]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:43:11.564]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:43:11.564]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:43:11.564]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:43:11.564]      __ap = 0; //lets make sure we reset the access point selection
[03:43:11.564]        // -> [__ap <= 0x00000000]
[03:43:11.564]    </block>
[03:43:11.564]  </sequence>
[03:43:11.564]  
[03:43:11.584]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:43:11.584]  
[03:43:11.584]  <debugvars>
[03:43:11.584]    // Pre-defined
[03:43:11.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:43:11.584]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:43:11.584]    __dp=0x00000000
[03:43:11.584]    __ap=0x00000000
[03:43:11.584]    __traceout=0x00000000      (Trace Disabled)
[03:43:11.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:43:11.584]    __FlashAddr=0x00000000
[03:43:11.584]    __FlashLen=0x00000000
[03:43:11.584]    __FlashArg=0x00000000
[03:43:11.584]    __FlashOp=0x00000000
[03:43:11.584]    __Result=0x00000000
[03:43:11.584]  </debugvars>
[03:43:11.584]  
[03:43:11.584]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:43:11.584]    <block atomic="false" info="">
[03:43:11.584]      __var deviceID = 0;
[03:43:11.584]        // -> [deviceID <= 0x00000000]
[03:43:11.584]      __var version = 0;
[03:43:11.584]        // -> [version <= 0x00000000]
[03:43:11.584]      __var partNum = 0;
[03:43:11.584]        // -> [partNum <= 0x00000000]
[03:43:11.584]      __var manuf = 0;
[03:43:11.584]        // -> [manuf <= 0x00000000]
[03:43:11.584]      __var isMSPM0G1X0X_G3X0X = 0;
[03:43:11.584]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:43:11.584]      __var isProduction = 0;
[03:43:11.584]        // -> [isProduction <= 0x00000000]
[03:43:11.584]      __var continueId = 0;
[03:43:11.584]        // -> [continueId <= 0x00000000]
[03:43:11.584]      deviceID =   Read32(0x41C40004);
[03:43:11.594]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:43:11.594]        // -> [deviceID <= 0x2BB8802F]
[03:43:11.594]      version = deviceID >> 28;
[03:43:11.594]        // -> [version <= 0x00000002]
[03:43:11.594]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:43:11.594]        // -> [partNum <= 0x0000BB88]
[03:43:11.594]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:43:11.594]        // -> [manuf <= 0x00000017]
[03:43:11.594]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:43:11.594]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:43:11.594]      isProduction = (version > 0);
[03:43:11.594]        // -> [isProduction <= 0x00000001]
[03:43:11.594]    </block>
[03:43:11.594]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:43:11.594]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:43:11.594]        // =>  FALSE
[03:43:11.594]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:43:11.594]    </control>
[03:43:11.594]    <control if="continueId == 4" while="" timeout="0" info="">
[03:43:11.594]      // if-block "continueId == 4"
[03:43:11.594]        // =>  FALSE
[03:43:11.594]      // skip if-block "continueId == 4"
[03:43:11.594]    </control>
[03:43:11.594]    <control if="!isProduction" while="" timeout="0" info="">
[03:43:11.594]      // if-block "!isProduction"
[03:43:11.594]        // =>  FALSE
[03:43:11.594]      // skip if-block "!isProduction"
[03:43:11.594]    </control>
[03:43:11.594]  </sequence>
[03:43:11.594]  
[03:45:08.268]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:45:08.268]  
[03:45:08.268]  <debugvars>
[03:45:08.268]    // Pre-defined
[03:45:08.268]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:08.268]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:45:08.268]    __dp=0x00000000
[03:45:08.268]    __ap=0x00000000
[03:45:08.268]    __traceout=0x00000000      (Trace Disabled)
[03:45:08.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:08.268]    __FlashAddr=0x00000000
[03:45:08.268]    __FlashLen=0x00000000
[03:45:08.268]    __FlashArg=0x00000000
[03:45:08.268]    __FlashOp=0x00000000
[03:45:08.268]    __Result=0x00000000
[03:45:08.268]  </debugvars>
[03:45:08.268]  
[03:45:08.268]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:45:08.268]    <block atomic="false" info="">
[03:45:08.268]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:45:08.268]        // -> [isSWJ <= 0x00000001]
[03:45:08.268]      __var hasDormant = __protocol & 0x00020000;
[03:45:08.268]        // -> [hasDormant <= 0x00000000]
[03:45:08.268]      __var protType   = __protocol & 0x0000FFFF;
[03:45:08.268]        // -> [protType <= 0x00000002]
[03:45:08.268]    </block>
[03:45:08.268]    <control if="protType == 1" while="" timeout="0" info="">
[03:45:08.268]      // if-block "protType == 1"
[03:45:08.268]        // =>  FALSE
[03:45:08.268]      // skip if-block "protType == 1"
[03:45:08.268]    </control>
[03:45:08.268]    <control if="protType == 2" while="" timeout="0" info="">
[03:45:08.268]      // if-block "protType == 2"
[03:45:08.278]        // =>  TRUE
[03:45:08.278]      <control if="isSWJ" while="" timeout="0" info="">
[03:45:08.278]        // if-block "isSWJ"
[03:45:08.278]          // =>  TRUE
[03:45:08.278]        <control if="hasDormant" while="" timeout="0" info="">
[03:45:08.278]          // if-block "hasDormant"
[03:45:08.278]            // =>  FALSE
[03:45:08.278]          // skip if-block "hasDormant"
[03:45:08.278]        </control>
[03:45:08.278]        <control if="!hasDormant" while="" timeout="0" info="">
[03:45:08.278]          // if-block "!hasDormant"
[03:45:08.278]            // =>  TRUE
[03:45:08.278]          <block atomic="false" info="">
[03:45:08.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:45:08.278]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:08.278]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:45:08.278]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:45:08.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:45:08.278]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:08.278]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:45:08.278]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:45:08.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:45:08.278]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:08.278]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:45:08.278]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:45:08.278]          </block>
[03:45:08.278]          // end if-block "!hasDormant"
[03:45:08.278]        </control>
[03:45:08.278]        // end if-block "isSWJ"
[03:45:08.278]      </control>
[03:45:08.278]      <control if="!isSWJ" while="" timeout="0" info="">
[03:45:08.278]        // if-block "!isSWJ"
[03:45:08.278]          // =>  FALSE
[03:45:08.278]        // skip if-block "!isSWJ"
[03:45:08.288]      </control>
[03:45:08.288]      <block atomic="false" info="">
[03:45:08.288]        ReadDP(0x0);
[03:45:08.288]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:45:08.288]      </block>
[03:45:08.288]      // end if-block "protType == 2"
[03:45:08.288]    </control>
[03:45:08.288]  </sequence>
[03:45:08.288]  
[03:45:08.288]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:45:08.288]  
[03:45:08.288]  <debugvars>
[03:45:08.288]    // Pre-defined
[03:45:08.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:08.288]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:45:08.288]    __dp=0x00000000
[03:45:08.288]    __ap=0x00000000
[03:45:08.288]    __traceout=0x00000000      (Trace Disabled)
[03:45:08.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:08.288]    __FlashAddr=0x00000000
[03:45:08.288]    __FlashLen=0x00000000
[03:45:08.288]    __FlashArg=0x00000000
[03:45:08.288]    __FlashOp=0x00000000
[03:45:08.288]    __Result=0x00000000
[03:45:08.288]  </debugvars>
[03:45:08.288]  
[03:45:08.288]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:45:08.288]    <block atomic="false" info="">
[03:45:08.288]      __var SW_DP_ABORT       = 0x0;
[03:45:08.288]        // -> [SW_DP_ABORT <= 0x00000000]
[03:45:08.288]      __var DP_CTRL_STAT      = 0x4;
[03:45:08.288]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:45:08.288]      __var DP_SELECT         = 0x8;
[03:45:08.288]        // -> [DP_SELECT <= 0x00000008]
[03:45:08.288]      __var powered_down      = 0;
[03:45:08.288]        // -> [powered_down <= 0x00000000]
[03:45:08.288]      WriteDP(DP_SELECT, 0x00000000);
[03:45:08.288]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:45:08.288]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:45:08.298]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:45:08.298]        // -> [powered_down <= 0x00000001]
[03:45:08.298]    </block>
[03:45:08.298]    <control if="powered_down" while="" timeout="0" info="">
[03:45:08.298]      // if-block "powered_down"
[03:45:08.298]        // =>  TRUE
[03:45:08.298]      <block atomic="false" info="">
[03:45:08.298]        Message(0, "Debug/System power-up request sent");
[03:45:08.298]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:45:08.298]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:45:08.298]      </block>
[03:45:08.298]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:45:08.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:45:08.298]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:45:08.298]        // while-condition  =>  FALSE
[03:45:08.298]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:45:08.298]      </control>
[03:45:08.298]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:45:08.298]        // if-block "(__protocol & 0xFFFF) == 1"
[03:45:08.298]          // =>  FALSE
[03:45:08.298]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:45:08.298]      </control>
[03:45:08.298]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:45:08.298]        // if-block "(__protocol & 0xFFFF) == 2"
[03:45:08.298]          // =>  TRUE
[03:45:08.298]        <block atomic="false" info="">
[03:45:08.298]          Message(0, "executing SWD power up");
[03:45:08.298]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:45:08.308]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:45:08.308]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:45:08.308]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:45:08.308]        </block>
[03:45:08.308]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:45:08.308]      </control>
[03:45:08.308]      // end if-block "powered_down"
[03:45:08.308]    </control>
[03:45:08.308]    <block atomic="false" info="">
[03:45:08.308]      __var DEBUG_PORT_VAL    = 0;
[03:45:08.308]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:45:08.308]      __var ACCESS_POINT_VAL  = 0;
[03:45:08.308]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:45:08.308]      __ap = 1; 
[03:45:08.308]        // -> [__ap <= 0x00000001]
[03:45:08.308]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:45:08.308]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:45:08.308]      __ap = 4;
[03:45:08.308]        // -> [__ap <= 0x00000004]
[03:45:08.308]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:45:08.308]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:45:08.318]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:45:08.318]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:45:08.320]    </block>
[03:45:08.320]    <block atomic="false" info="">
[03:45:08.320]      __var nReset = 0x80;
[03:45:08.320]        // -> [nReset <= 0x00000080]
[03:45:08.320]      __var canReadPins = 0;
[03:45:08.320]        // -> [canReadPins <= 0x00000000]
[03:45:08.320]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:45:08.320]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:45:08.320]        // -> [canReadPins <= 0x00000001]
[03:45:08.320]    </block>
[03:45:08.320]    <control if="" while="1" timeout="200" info="">
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.320]      // while-condition  =>  TRUE
[03:45:08.320]      // while "1"  (timeout="200")
[03:45:08.328]      // while-condition  =>  TRUE
[03:45:08.328]      // while "1"  (timeout="200")
[03:45:08.328]      // while-condition  =>  TRUE
[03:45:08.328]      // while "1"  (timeout="200")
[03:45:08.328]      // while-condition  =>  TRUE
[03:45:08.328]      // while "1"  (timeout="200")
[03:45:08.328]      // while-condition  =>  TRUE
[03:45:08.328]      // while "1"  (timeout="200")
[03:45:08.328]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.329]      // while-condition  =>  TRUE
[03:45:08.329]      // while "1"  (timeout="200")
[03:45:08.338]      // while-condition  =>  TRUE
[03:45:08.338]      // while "1"  (timeout="200")
[03:45:08.338]      // while  =>  TIMEOUT
[03:45:08.338]      // end while "1"
[03:45:08.338]    </control>
[03:45:08.338]    <control if="canReadPins" while="" timeout="0" info="">
[03:45:08.338]      // if-block "canReadPins"
[03:45:08.338]        // =>  TRUE
[03:45:08.339]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:45:08.339]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:45:08.340]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:45:08.340]        // while-condition  =>  FALSE
[03:45:08.340]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:45:08.340]      </control>
[03:45:08.340]      // end if-block "canReadPins"
[03:45:08.340]    </control>
[03:45:08.340]    <control if="!canReadPins" while="" timeout="0" info="">
[03:45:08.340]      // if-block "!canReadPins"
[03:45:08.340]        // =>  FALSE
[03:45:08.340]      // skip if-block "!canReadPins"
[03:45:08.340]    </control>
[03:45:08.340]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:45:08.340]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:45:08.340]        // =>  TRUE
[03:45:08.340]      <block atomic="false" info="">
[03:45:08.340]        WriteAP(0x00, 0x190008);
[03:45:08.340]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:45:08.340]        WriteAP(0xF0, 0x01);
[03:45:08.348]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:45:08.348]      </block>
[03:45:08.348]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:45:08.348]    </control>
[03:45:08.348]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:45:08.348]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:45:08.348]        // =>  FALSE
[03:45:08.348]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:45:08.348]    </control>
[03:45:08.348]    <block atomic="false" info="">
[03:45:08.348]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:45:08.348]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:45:08.348]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:45:08.348]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:45:08.348]      __ap = 0; //lets make sure we reset the access point selection
[03:45:08.348]        // -> [__ap <= 0x00000000]
[03:45:08.348]    </block>
[03:45:08.348]  </sequence>
[03:45:08.348]  
[03:45:08.368]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:45:08.368]  
[03:45:08.368]  <debugvars>
[03:45:08.368]    // Pre-defined
[03:45:08.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:08.368]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:45:08.368]    __dp=0x00000000
[03:45:08.368]    __ap=0x00000000
[03:45:08.368]    __traceout=0x00000000      (Trace Disabled)
[03:45:08.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:08.368]    __FlashAddr=0x00000000
[03:45:08.368]    __FlashLen=0x00000000
[03:45:08.368]    __FlashArg=0x00000000
[03:45:08.368]    __FlashOp=0x00000000
[03:45:08.368]    __Result=0x00000000
[03:45:08.368]  </debugvars>
[03:45:08.368]  
[03:45:08.368]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:45:08.368]    <block atomic="false" info="">
[03:45:08.368]      __var deviceID = 0;
[03:45:08.368]        // -> [deviceID <= 0x00000000]
[03:45:08.368]      __var version = 0;
[03:45:08.368]        // -> [version <= 0x00000000]
[03:45:08.368]      __var partNum = 0;
[03:45:08.368]        // -> [partNum <= 0x00000000]
[03:45:08.368]      __var manuf = 0;
[03:45:08.368]        // -> [manuf <= 0x00000000]
[03:45:08.368]      __var isMSPM0G1X0X_G3X0X = 0;
[03:45:08.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:45:08.368]      __var isProduction = 0;
[03:45:08.368]        // -> [isProduction <= 0x00000000]
[03:45:08.368]      __var continueId = 0;
[03:45:08.368]        // -> [continueId <= 0x00000000]
[03:45:08.368]      deviceID =   Read32(0x41C40004);
[03:45:08.378]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:45:08.378]        // -> [deviceID <= 0x2BB8802F]
[03:45:08.378]      version = deviceID >> 28;
[03:45:08.378]        // -> [version <= 0x00000002]
[03:45:08.378]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:45:08.378]        // -> [partNum <= 0x0000BB88]
[03:45:08.378]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:45:08.378]        // -> [manuf <= 0x00000017]
[03:45:08.378]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:45:08.378]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:45:08.378]      isProduction = (version > 0);
[03:45:08.378]        // -> [isProduction <= 0x00000001]
[03:45:08.378]    </block>
[03:45:08.378]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:45:08.378]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:45:08.378]        // =>  FALSE
[03:45:08.378]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:45:08.378]    </control>
[03:45:08.378]    <control if="continueId == 4" while="" timeout="0" info="">
[03:45:08.378]      // if-block "continueId == 4"
[03:45:08.378]        // =>  FALSE
[03:45:08.378]      // skip if-block "continueId == 4"
[03:45:08.378]    </control>
[03:45:08.378]    <control if="!isProduction" while="" timeout="0" info="">
[03:45:08.378]      // if-block "!isProduction"
[03:45:08.378]        // =>  FALSE
[03:45:08.378]      // skip if-block "!isProduction"
[03:45:08.378]    </control>
[03:45:08.378]  </sequence>
[03:45:08.378]  
[03:48:21.017]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:48:21.017]  
[03:48:21.036]  <debugvars>
[03:48:21.036]    // Pre-defined
[03:48:21.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:21.036]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:21.036]    __dp=0x00000000
[03:48:21.036]    __ap=0x00000000
[03:48:21.036]    __traceout=0x00000000      (Trace Disabled)
[03:48:21.036]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:21.036]    __FlashAddr=0x00000000
[03:48:21.036]    __FlashLen=0x00000000
[03:48:21.036]    __FlashArg=0x00000000
[03:48:21.036]    __FlashOp=0x00000000
[03:48:21.036]    __Result=0x00000000
[03:48:21.036]  </debugvars>
[03:48:21.036]  
[03:48:21.036]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:48:21.036]    <block atomic="false" info="">
[03:48:21.038]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:48:21.038]        // -> [isSWJ <= 0x00000001]
[03:48:21.038]      __var hasDormant = __protocol & 0x00020000;
[03:48:21.038]        // -> [hasDormant <= 0x00000000]
[03:48:21.038]      __var protType   = __protocol & 0x0000FFFF;
[03:48:21.038]        // -> [protType <= 0x00000002]
[03:48:21.038]    </block>
[03:48:21.038]    <control if="protType == 1" while="" timeout="0" info="">
[03:48:21.038]      // if-block "protType == 1"
[03:48:21.038]        // =>  FALSE
[03:48:21.038]      // skip if-block "protType == 1"
[03:48:21.038]    </control>
[03:48:21.038]    <control if="protType == 2" while="" timeout="0" info="">
[03:48:21.038]      // if-block "protType == 2"
[03:48:21.038]        // =>  TRUE
[03:48:21.038]      <control if="isSWJ" while="" timeout="0" info="">
[03:48:21.038]        // if-block "isSWJ"
[03:48:21.038]          // =>  TRUE
[03:48:21.038]        <control if="hasDormant" while="" timeout="0" info="">
[03:48:21.038]          // if-block "hasDormant"
[03:48:21.038]            // =>  FALSE
[03:48:21.038]          // skip if-block "hasDormant"
[03:48:21.038]        </control>
[03:48:21.038]        <control if="!hasDormant" while="" timeout="0" info="">
[03:48:21.038]          // if-block "!hasDormant"
[03:48:21.038]            // =>  TRUE
[03:48:21.038]          <block atomic="false" info="">
[03:48:21.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:48:21.038]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:21.038]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:48:21.038]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:48:21.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:48:21.038]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:21.038]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:48:21.038]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:48:21.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:48:21.048]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:21.048]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:48:21.048]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:48:21.048]          </block>
[03:48:21.048]          // end if-block "!hasDormant"
[03:48:21.048]        </control>
[03:48:21.048]        // end if-block "isSWJ"
[03:48:21.048]      </control>
[03:48:21.048]      <control if="!isSWJ" while="" timeout="0" info="">
[03:48:21.048]        // if-block "!isSWJ"
[03:48:21.048]          // =>  FALSE
[03:48:21.048]        // skip if-block "!isSWJ"
[03:48:21.048]      </control>
[03:48:21.048]      <block atomic="false" info="">
[03:48:21.048]        ReadDP(0x0);
[03:48:21.048]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:48:21.048]      </block>
[03:48:21.048]      // end if-block "protType == 2"
[03:48:21.048]    </control>
[03:48:21.048]  </sequence>
[03:48:21.048]  
[03:48:21.048]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:48:21.048]  
[03:48:21.048]  <debugvars>
[03:48:21.048]    // Pre-defined
[03:48:21.048]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:21.048]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:21.048]    __dp=0x00000000
[03:48:21.048]    __ap=0x00000000
[03:48:21.048]    __traceout=0x00000000      (Trace Disabled)
[03:48:21.048]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:21.048]    __FlashAddr=0x00000000
[03:48:21.048]    __FlashLen=0x00000000
[03:48:21.048]    __FlashArg=0x00000000
[03:48:21.048]    __FlashOp=0x00000000
[03:48:21.048]    __Result=0x00000000
[03:48:21.048]  </debugvars>
[03:48:21.048]  
[03:48:21.048]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:48:21.048]    <block atomic="false" info="">
[03:48:21.048]      __var SW_DP_ABORT       = 0x0;
[03:48:21.048]        // -> [SW_DP_ABORT <= 0x00000000]
[03:48:21.048]      __var DP_CTRL_STAT      = 0x4;
[03:48:21.048]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:48:21.048]      __var DP_SELECT         = 0x8;
[03:48:21.048]        // -> [DP_SELECT <= 0x00000008]
[03:48:21.048]      __var powered_down      = 0;
[03:48:21.048]        // -> [powered_down <= 0x00000000]
[03:48:21.048]      WriteDP(DP_SELECT, 0x00000000);
[03:48:21.058]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:48:21.058]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:48:21.058]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:48:21.058]        // -> [powered_down <= 0x00000001]
[03:48:21.058]    </block>
[03:48:21.058]    <control if="powered_down" while="" timeout="0" info="">
[03:48:21.058]      // if-block "powered_down"
[03:48:21.058]        // =>  TRUE
[03:48:21.058]      <block atomic="false" info="">
[03:48:21.058]        Message(0, "Debug/System power-up request sent");
[03:48:21.058]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:48:21.058]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:48:21.058]      </block>
[03:48:21.058]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:48:21.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:48:21.058]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:48:21.058]        // while-condition  =>  FALSE
[03:48:21.058]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:48:21.058]      </control>
[03:48:21.058]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:48:21.058]        // if-block "(__protocol & 0xFFFF) == 1"
[03:48:21.058]          // =>  FALSE
[03:48:21.058]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:48:21.068]      </control>
[03:48:21.068]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:48:21.068]        // if-block "(__protocol & 0xFFFF) == 2"
[03:48:21.068]          // =>  TRUE
[03:48:21.068]        <block atomic="false" info="">
[03:48:21.068]          Message(0, "executing SWD power up");
[03:48:21.068]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:48:21.068]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:48:21.068]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:48:21.068]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:48:21.068]        </block>
[03:48:21.068]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:48:21.068]      </control>
[03:48:21.068]      // end if-block "powered_down"
[03:48:21.068]    </control>
[03:48:21.068]    <block atomic="false" info="">
[03:48:21.068]      __var DEBUG_PORT_VAL    = 0;
[03:48:21.068]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:48:21.068]      __var ACCESS_POINT_VAL  = 0;
[03:48:21.068]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:48:21.068]      __ap = 1; 
[03:48:21.068]        // -> [__ap <= 0x00000001]
[03:48:21.068]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:48:21.078]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:48:21.078]      __ap = 4;
[03:48:21.078]        // -> [__ap <= 0x00000004]
[03:48:21.078]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:48:21.078]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.078]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:48:21.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:48:21.078]    </block>
[03:48:21.078]    <block atomic="false" info="">
[03:48:21.078]      __var nReset = 0x80;
[03:48:21.078]        // -> [nReset <= 0x00000080]
[03:48:21.078]      __var canReadPins = 0;
[03:48:21.078]        // -> [canReadPins <= 0x00000000]
[03:48:21.078]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:48:21.078]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:48:21.078]        // -> [canReadPins <= 0x00000001]
[03:48:21.078]    </block>
[03:48:21.078]    <control if="" while="1" timeout="200" info="">
[03:48:21.078]      // while "1"  (timeout="200")
[03:48:21.078]      // while-condition  =>  TRUE
[03:48:21.078]      // while "1"  (timeout="200")
[03:48:21.078]      // while-condition  =>  TRUE
[03:48:21.078]      // while "1"  (timeout="200")
[03:48:21.078]      // while-condition  =>  TRUE
[03:48:21.078]      // while "1"  (timeout="200")
[03:48:21.078]      // while-condition  =>  TRUE
[03:48:21.078]      // while "1"  (timeout="200")
[03:48:21.078]      // while-condition  =>  TRUE
[03:48:21.078]      // while "1"  (timeout="200")
[03:48:21.078]      // while-condition  =>  TRUE
[03:48:21.088]      // while "1"  (timeout="200")
[03:48:21.088]      // while  =>  TIMEOUT
[03:48:21.088]      // end while "1"
[03:48:21.088]    </control>
[03:48:21.088]    <control if="canReadPins" while="" timeout="0" info="">
[03:48:21.088]      // if-block "canReadPins"
[03:48:21.088]        // =>  TRUE
[03:48:21.088]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:48:21.088]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:48:21.088]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:48:21.088]        // while-condition  =>  FALSE
[03:48:21.088]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:48:21.088]      </control>
[03:48:21.088]      // end if-block "canReadPins"
[03:48:21.088]    </control>
[03:48:21.088]    <control if="!canReadPins" while="" timeout="0" info="">
[03:48:21.088]      // if-block "!canReadPins"
[03:48:21.088]        // =>  FALSE
[03:48:21.088]      // skip if-block "!canReadPins"
[03:48:21.088]    </control>
[03:48:21.088]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:48:21.088]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:48:21.088]        // =>  TRUE
[03:48:21.088]      <block atomic="false" info="">
[03:48:21.088]        WriteAP(0x00, 0x190008);
[03:48:21.088]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.088]        WriteAP(0xF0, 0x01);
[03:48:21.098]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.098]      </block>
[03:48:21.098]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:48:21.098]    </control>
[03:48:21.098]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:48:21.098]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:48:21.098]        // =>  FALSE
[03:48:21.098]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:48:21.098]    </control>
[03:48:21.098]    <block atomic="false" info="">
[03:48:21.098]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:48:21.098]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.098]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:48:21.098]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:48:21.098]      __ap = 0; //lets make sure we reset the access point selection
[03:48:21.098]        // -> [__ap <= 0x00000000]
[03:48:21.098]    </block>
[03:48:21.098]  </sequence>
[03:48:21.098]  
[03:48:21.118]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:48:21.118]  
[03:48:21.118]  <debugvars>
[03:48:21.118]    // Pre-defined
[03:48:21.118]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:21.118]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:21.118]    __dp=0x00000000
[03:48:21.118]    __ap=0x00000000
[03:48:21.118]    __traceout=0x00000000      (Trace Disabled)
[03:48:21.118]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:21.118]    __FlashAddr=0x00000000
[03:48:21.118]    __FlashLen=0x00000000
[03:48:21.118]    __FlashArg=0x00000000
[03:48:21.118]    __FlashOp=0x00000000
[03:48:21.118]    __Result=0x00000000
[03:48:21.118]  </debugvars>
[03:48:21.118]  
[03:48:21.118]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:48:21.118]    <block atomic="false" info="">
[03:48:21.118]      __var deviceID = 0;
[03:48:21.118]        // -> [deviceID <= 0x00000000]
[03:48:21.118]      __var version = 0;
[03:48:21.118]        // -> [version <= 0x00000000]
[03:48:21.118]      __var partNum = 0;
[03:48:21.118]        // -> [partNum <= 0x00000000]
[03:48:21.118]      __var manuf = 0;
[03:48:21.118]        // -> [manuf <= 0x00000000]
[03:48:21.118]      __var isMSPM0G1X0X_G3X0X = 0;
[03:48:21.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:48:21.118]      __var isProduction = 0;
[03:48:21.118]        // -> [isProduction <= 0x00000000]
[03:48:21.118]      __var continueId = 0;
[03:48:21.118]        // -> [continueId <= 0x00000000]
[03:48:21.118]      deviceID =   Read32(0x41C40004);
[03:48:21.132]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:48:21.132]        // -> [deviceID <= 0x2BB8802F]
[03:48:21.132]      version = deviceID >> 28;
[03:48:21.132]        // -> [version <= 0x00000002]
[03:48:21.132]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:48:21.132]        // -> [partNum <= 0x0000BB88]
[03:48:21.132]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:48:21.132]        // -> [manuf <= 0x00000017]
[03:48:21.132]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:48:21.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:48:21.132]      isProduction = (version > 0);
[03:48:21.132]        // -> [isProduction <= 0x00000001]
[03:48:21.132]    </block>
[03:48:21.132]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:48:21.132]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:48:21.132]        // =>  FALSE
[03:48:21.132]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:48:21.132]    </control>
[03:48:21.132]    <control if="continueId == 4" while="" timeout="0" info="">
[03:48:21.132]      // if-block "continueId == 4"
[03:48:21.132]        // =>  FALSE
[03:48:21.132]      // skip if-block "continueId == 4"
[03:48:21.132]    </control>
[03:48:21.132]    <control if="!isProduction" while="" timeout="0" info="">
[03:48:21.132]      // if-block "!isProduction"
[03:48:21.132]        // =>  FALSE
[03:48:21.132]      // skip if-block "!isProduction"
[03:48:21.132]    </control>
[03:48:21.132]  </sequence>
[03:48:21.132]  
[03:50:44.987]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:50:44.987]  
[03:50:44.998]  <debugvars>
[03:50:44.998]    // Pre-defined
[03:50:44.998]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:50:44.998]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:50:44.998]    __dp=0x00000000
[03:50:44.998]    __ap=0x00000000
[03:50:44.998]    __traceout=0x00000000      (Trace Disabled)
[03:50:44.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:50:44.998]    __FlashAddr=0x00000000
[03:50:44.998]    __FlashLen=0x00000000
[03:50:44.998]    __FlashArg=0x00000000
[03:50:44.998]    __FlashOp=0x00000000
[03:50:44.998]    __Result=0x00000000
[03:50:44.998]  </debugvars>
[03:50:44.998]  
[03:50:44.998]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:50:44.998]    <block atomic="false" info="">
[03:50:44.998]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:50:44.998]        // -> [isSWJ <= 0x00000001]
[03:50:44.998]      __var hasDormant = __protocol & 0x00020000;
[03:50:44.998]        // -> [hasDormant <= 0x00000000]
[03:50:44.998]      __var protType   = __protocol & 0x0000FFFF;
[03:50:44.998]        // -> [protType <= 0x00000002]
[03:50:44.998]    </block>
[03:50:44.998]    <control if="protType == 1" while="" timeout="0" info="">
[03:50:44.998]      // if-block "protType == 1"
[03:50:44.998]        // =>  FALSE
[03:50:44.998]      // skip if-block "protType == 1"
[03:50:44.998]    </control>
[03:50:44.998]    <control if="protType == 2" while="" timeout="0" info="">
[03:50:44.998]      // if-block "protType == 2"
[03:50:44.998]        // =>  TRUE
[03:50:44.998]      <control if="isSWJ" while="" timeout="0" info="">
[03:50:44.998]        // if-block "isSWJ"
[03:50:44.998]          // =>  TRUE
[03:50:44.998]        <control if="hasDormant" while="" timeout="0" info="">
[03:50:44.998]          // if-block "hasDormant"
[03:50:44.998]            // =>  FALSE
[03:50:44.998]          // skip if-block "hasDormant"
[03:50:44.998]        </control>
[03:50:44.998]        <control if="!hasDormant" while="" timeout="0" info="">
[03:50:44.998]          // if-block "!hasDormant"
[03:50:44.998]            // =>  TRUE
[03:50:44.998]          <block atomic="false" info="">
[03:50:44.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:50:44.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:50:45.005]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:50:45.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:50:45.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:50:45.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:50:45.005]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:50:45.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:50:45.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:50:45.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:50:45.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:50:45.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:50:45.005]          </block>
[03:50:45.005]          // end if-block "!hasDormant"
[03:50:45.005]        </control>
[03:50:45.005]        // end if-block "isSWJ"
[03:50:45.005]      </control>
[03:50:45.005]      <control if="!isSWJ" while="" timeout="0" info="">
[03:50:45.005]        // if-block "!isSWJ"
[03:50:45.005]          // =>  FALSE
[03:50:45.005]        // skip if-block "!isSWJ"
[03:50:45.005]      </control>
[03:50:45.005]      <block atomic="false" info="">
[03:50:45.005]        ReadDP(0x0);
[03:50:45.005]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:50:45.005]      </block>
[03:50:45.005]      // end if-block "protType == 2"
[03:50:45.005]    </control>
[03:50:45.015]  </sequence>
[03:50:45.015]  
[03:50:45.015]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:50:45.015]  
[03:50:45.015]  <debugvars>
[03:50:45.015]    // Pre-defined
[03:50:45.015]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:50:45.015]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:50:45.015]    __dp=0x00000000
[03:50:45.015]    __ap=0x00000000
[03:50:45.015]    __traceout=0x00000000      (Trace Disabled)
[03:50:45.015]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:50:45.015]    __FlashAddr=0x00000000
[03:50:45.015]    __FlashLen=0x00000000
[03:50:45.015]    __FlashArg=0x00000000
[03:50:45.015]    __FlashOp=0x00000000
[03:50:45.015]    __Result=0x00000000
[03:50:45.015]  </debugvars>
[03:50:45.015]  
[03:50:45.015]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:50:45.015]    <block atomic="false" info="">
[03:50:45.015]      __var SW_DP_ABORT       = 0x0;
[03:50:45.015]        // -> [SW_DP_ABORT <= 0x00000000]
[03:50:45.015]      __var DP_CTRL_STAT      = 0x4;
[03:50:45.015]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:50:45.015]      __var DP_SELECT         = 0x8;
[03:50:45.015]        // -> [DP_SELECT <= 0x00000008]
[03:50:45.015]      __var powered_down      = 0;
[03:50:45.015]        // -> [powered_down <= 0x00000000]
[03:50:45.015]      WriteDP(DP_SELECT, 0x00000000);
[03:50:45.015]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:50:45.015]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:50:45.015]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:50:45.025]        // -> [powered_down <= 0x00000001]
[03:50:45.025]    </block>
[03:50:45.025]    <control if="powered_down" while="" timeout="0" info="">
[03:50:45.025]      // if-block "powered_down"
[03:50:45.025]        // =>  TRUE
[03:50:45.025]      <block atomic="false" info="">
[03:50:45.025]        Message(0, "Debug/System power-up request sent");
[03:50:45.027]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:50:45.027]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:50:45.027]      </block>
[03:50:45.027]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:50:45.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:50:45.027]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:50:45.027]        // while-condition  =>  FALSE
[03:50:45.027]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:50:45.027]      </control>
[03:50:45.027]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:50:45.027]        // if-block "(__protocol & 0xFFFF) == 1"
[03:50:45.027]          // =>  FALSE
[03:50:45.027]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:50:45.027]      </control>
[03:50:45.027]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:50:45.027]        // if-block "(__protocol & 0xFFFF) == 2"
[03:50:45.027]          // =>  TRUE
[03:50:45.027]        <block atomic="false" info="">
[03:50:45.027]          Message(0, "executing SWD power up");
[03:50:45.027]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:50:45.035]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:50:45.035]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:50:45.035]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:50:45.035]        </block>
[03:50:45.035]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:50:45.035]      </control>
[03:50:45.035]      // end if-block "powered_down"
[03:50:45.035]    </control>
[03:50:45.035]    <block atomic="false" info="">
[03:50:45.035]      __var DEBUG_PORT_VAL    = 0;
[03:50:45.035]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:50:45.035]      __var ACCESS_POINT_VAL  = 0;
[03:50:45.035]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:50:45.035]      __ap = 1; 
[03:50:45.035]        // -> [__ap <= 0x00000001]
[03:50:45.035]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:50:45.035]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:50:45.035]      __ap = 4;
[03:50:45.035]        // -> [__ap <= 0x00000004]
[03:50:45.035]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:50:45.045]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:50:45.045]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:50:45.045]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:50:45.045]    </block>
[03:50:45.045]    <block atomic="false" info="">
[03:50:45.045]      __var nReset = 0x80;
[03:50:45.045]        // -> [nReset <= 0x00000080]
[03:50:45.045]      __var canReadPins = 0;
[03:50:45.045]        // -> [canReadPins <= 0x00000000]
[03:50:45.045]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:50:45.045]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:50:45.045]        // -> [canReadPins <= 0x00000001]
[03:50:45.045]    </block>
[03:50:45.045]    <control if="" while="1" timeout="200" info="">
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.045]      // while-condition  =>  TRUE
[03:50:45.045]      // while "1"  (timeout="200")
[03:50:45.055]      // while-condition  =>  TRUE
[03:50:45.055]      // while "1"  (timeout="200")
[03:50:45.055]      // while  =>  TIMEOUT
[03:50:45.055]      // end while "1"
[03:50:45.055]    </control>
[03:50:45.055]    <control if="canReadPins" while="" timeout="0" info="">
[03:50:45.055]      // if-block "canReadPins"
[03:50:45.055]        // =>  TRUE
[03:50:45.055]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:50:45.055]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:50:45.055]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:50:45.055]        // while-condition  =>  FALSE
[03:50:45.055]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:50:45.055]      </control>
[03:50:45.055]      // end if-block "canReadPins"
[03:50:45.055]    </control>
[03:50:45.055]    <control if="!canReadPins" while="" timeout="0" info="">
[03:50:45.055]      // if-block "!canReadPins"
[03:50:45.055]        // =>  FALSE
[03:50:45.055]      // skip if-block "!canReadPins"
[03:50:45.055]    </control>
[03:50:45.055]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:50:45.055]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:50:45.055]        // =>  TRUE
[03:50:45.055]      <block atomic="false" info="">
[03:50:45.055]        WriteAP(0x00, 0x190008);
[03:50:45.055]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:50:45.055]        WriteAP(0xF0, 0x01);
[03:50:45.065]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:50:45.065]      </block>
[03:50:45.065]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:50:45.065]    </control>
[03:50:45.065]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:50:45.065]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:50:45.065]        // =>  FALSE
[03:50:45.065]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:50:45.065]    </control>
[03:50:45.065]    <block atomic="false" info="">
[03:50:45.065]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:50:45.065]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:50:45.065]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:50:45.065]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:50:45.065]      __ap = 0; //lets make sure we reset the access point selection
[03:50:45.065]        // -> [__ap <= 0x00000000]
[03:50:45.065]    </block>
[03:50:45.065]  </sequence>
[03:50:45.065]  
[03:50:45.085]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:50:45.085]  
[03:50:45.085]  <debugvars>
[03:50:45.085]    // Pre-defined
[03:50:45.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:50:45.085]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:50:45.085]    __dp=0x00000000
[03:50:45.085]    __ap=0x00000000
[03:50:45.085]    __traceout=0x00000000      (Trace Disabled)
[03:50:45.085]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:50:45.085]    __FlashAddr=0x00000000
[03:50:45.085]    __FlashLen=0x00000000
[03:50:45.085]    __FlashArg=0x00000000
[03:50:45.085]    __FlashOp=0x00000000
[03:50:45.085]    __Result=0x00000000
[03:50:45.085]  </debugvars>
[03:50:45.085]  
[03:50:45.085]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:50:45.085]    <block atomic="false" info="">
[03:50:45.085]      __var deviceID = 0;
[03:50:45.085]        // -> [deviceID <= 0x00000000]
[03:50:45.085]      __var version = 0;
[03:50:45.085]        // -> [version <= 0x00000000]
[03:50:45.085]      __var partNum = 0;
[03:50:45.085]        // -> [partNum <= 0x00000000]
[03:50:45.085]      __var manuf = 0;
[03:50:45.085]        // -> [manuf <= 0x00000000]
[03:50:45.085]      __var isMSPM0G1X0X_G3X0X = 0;
[03:50:45.085]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:50:45.085]      __var isProduction = 0;
[03:50:45.085]        // -> [isProduction <= 0x00000000]
[03:50:45.085]      __var continueId = 0;
[03:50:45.085]        // -> [continueId <= 0x00000000]
[03:50:45.095]      deviceID =   Read32(0x41C40004);
[03:50:45.095]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:50:45.095]        // -> [deviceID <= 0x2BB8802F]
[03:50:45.095]      version = deviceID >> 28;
[03:50:45.095]        // -> [version <= 0x00000002]
[03:50:45.095]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:50:45.095]        // -> [partNum <= 0x0000BB88]
[03:50:45.095]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:50:45.095]        // -> [manuf <= 0x00000017]
[03:50:45.095]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:50:45.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:50:45.095]      isProduction = (version > 0);
[03:50:45.095]        // -> [isProduction <= 0x00000001]
[03:50:45.095]    </block>
[03:50:45.095]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:50:45.095]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:50:45.095]        // =>  FALSE
[03:50:45.095]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:50:45.095]    </control>
[03:50:45.095]    <control if="continueId == 4" while="" timeout="0" info="">
[03:50:45.095]      // if-block "continueId == 4"
[03:50:45.095]        // =>  FALSE
[03:50:45.095]      // skip if-block "continueId == 4"
[03:50:45.095]    </control>
[03:50:45.095]    <control if="!isProduction" while="" timeout="0" info="">
[03:50:45.095]      // if-block "!isProduction"
[03:50:45.095]        // =>  FALSE
[03:50:45.095]      // skip if-block "!isProduction"
[03:50:45.095]    </control>
[03:50:45.095]  </sequence>
[03:50:45.095]  
[03:50:50.225]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:50:50.225]  
[03:50:50.241]  <debugvars>
[03:50:50.241]    // Pre-defined
[03:50:50.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:50:50.241]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:50:50.241]    __dp=0x00000000
[03:50:50.241]    __ap=0x00000000
[03:50:50.241]    __traceout=0x00000000      (Trace Disabled)
[03:50:50.241]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:50:50.241]    __FlashAddr=0x00000000
[03:50:50.241]    __FlashLen=0x00000000
[03:50:50.241]    __FlashArg=0x00000000
[03:50:50.241]    __FlashOp=0x00000000
[03:50:50.241]    __Result=0x00000000
[03:50:50.241]  </debugvars>
[03:50:50.241]  
[03:50:50.241]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:50:50.241]    <block atomic="false" info="">
[03:50:50.241]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:50:50.241]        // -> [isSWJ <= 0x00000001]
[03:50:50.241]      __var hasDormant = __protocol & 0x00020000;
[03:50:50.241]        // -> [hasDormant <= 0x00000000]
[03:50:50.241]      __var protType   = __protocol & 0x0000FFFF;
[03:50:50.241]        // -> [protType <= 0x00000002]
[03:50:50.241]    </block>
[03:50:50.241]    <control if="protType == 1" while="" timeout="0" info="">
[03:50:50.241]      // if-block "protType == 1"
[03:50:50.241]        // =>  FALSE
[03:50:50.241]      // skip if-block "protType == 1"
[03:50:50.241]    </control>
[03:50:50.241]    <control if="protType == 2" while="" timeout="0" info="">
[03:50:50.241]      // if-block "protType == 2"
[03:50:50.241]        // =>  TRUE
[03:50:50.241]      <control if="isSWJ" while="" timeout="0" info="">
[03:50:50.241]        // if-block "isSWJ"
[03:50:50.241]          // =>  TRUE
[03:50:50.241]        <control if="hasDormant" while="" timeout="0" info="">
[03:50:50.245]          // if-block "hasDormant"
[03:50:50.245]            // =>  FALSE
[03:50:50.245]          // skip if-block "hasDormant"
[03:50:50.245]        </control>
[03:50:50.245]        <control if="!hasDormant" while="" timeout="0" info="">
[03:50:50.245]          // if-block "!hasDormant"
[03:50:50.245]            // =>  TRUE
[03:50:50.245]          <block atomic="false" info="">
[03:50:50.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:50:50.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:50:50.245]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:50:50.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:50:50.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:50:50.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:50:50.245]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:50:50.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:50:50.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:50:50.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:50:50.245]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:50:50.245]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:50:50.245]          </block>
[03:50:50.245]          // end if-block "!hasDormant"
[03:50:50.245]        </control>
[03:50:50.245]        // end if-block "isSWJ"
[03:50:50.245]      </control>
[03:50:50.255]      <control if="!isSWJ" while="" timeout="0" info="">
[03:50:50.255]        // if-block "!isSWJ"
[03:50:50.255]          // =>  FALSE
[03:50:50.255]        // skip if-block "!isSWJ"
[03:50:50.255]      </control>
[03:50:50.255]      <block atomic="false" info="">
[03:50:50.255]        ReadDP(0x0);
[03:50:50.257]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:50:50.257]      </block>
[03:50:50.257]      // end if-block "protType == 2"
[03:50:50.257]    </control>
[03:50:50.257]  </sequence>
[03:50:50.257]  
[03:50:50.257]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:50:50.257]  
[03:50:50.257]  <debugvars>
[03:50:50.257]    // Pre-defined
[03:50:50.257]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:50:50.257]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:50:50.257]    __dp=0x00000000
[03:50:50.257]    __ap=0x00000000
[03:50:50.257]    __traceout=0x00000000      (Trace Disabled)
[03:50:50.257]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:50:50.257]    __FlashAddr=0x00000000
[03:50:50.257]    __FlashLen=0x00000000
[03:50:50.257]    __FlashArg=0x00000000
[03:50:50.257]    __FlashOp=0x00000000
[03:50:50.257]    __Result=0x00000000
[03:50:50.257]  </debugvars>
[03:50:50.257]  
[03:50:50.257]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:50:50.257]    <block atomic="false" info="">
[03:50:50.257]      __var SW_DP_ABORT       = 0x0;
[03:50:50.257]        // -> [SW_DP_ABORT <= 0x00000000]
[03:50:50.257]      __var DP_CTRL_STAT      = 0x4;
[03:50:50.257]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:50:50.257]      __var DP_SELECT         = 0x8;
[03:50:50.257]        // -> [DP_SELECT <= 0x00000008]
[03:50:50.257]      __var powered_down      = 0;
[03:50:50.257]        // -> [powered_down <= 0x00000000]
[03:50:50.257]      WriteDP(DP_SELECT, 0x00000000);
[03:50:50.257]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:50:50.257]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:50:50.265]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:50:50.265]        // -> [powered_down <= 0x00000001]
[03:50:50.265]    </block>
[03:50:50.265]    <control if="powered_down" while="" timeout="0" info="">
[03:50:50.265]      // if-block "powered_down"
[03:50:50.265]        // =>  TRUE
[03:50:50.265]      <block atomic="false" info="">
[03:50:50.265]        Message(0, "Debug/System power-up request sent");
[03:50:50.265]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:50:50.265]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:50:50.265]      </block>
[03:50:50.265]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:50:50.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:50:50.265]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:50:50.265]        // while-condition  =>  FALSE
[03:50:50.265]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:50:50.265]      </control>
[03:50:50.265]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:50:50.265]        // if-block "(__protocol & 0xFFFF) == 1"
[03:50:50.265]          // =>  FALSE
[03:50:50.265]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:50:50.265]      </control>
[03:50:50.265]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:50:50.265]        // if-block "(__protocol & 0xFFFF) == 2"
[03:50:50.265]          // =>  TRUE
[03:50:50.265]        <block atomic="false" info="">
[03:50:50.265]          Message(0, "executing SWD power up");
[03:50:50.265]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:50:50.275]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:50:50.275]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:50:50.275]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:50:50.275]        </block>
[03:50:50.275]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:50:50.275]      </control>
[03:50:50.275]      // end if-block "powered_down"
[03:50:50.275]    </control>
[03:50:50.275]    <block atomic="false" info="">
[03:50:50.275]      __var DEBUG_PORT_VAL    = 0;
[03:50:50.275]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:50:50.275]      __var ACCESS_POINT_VAL  = 0;
[03:50:50.275]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:50:50.275]      __ap = 1; 
[03:50:50.275]        // -> [__ap <= 0x00000001]
[03:50:50.275]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:50:50.275]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:50:50.275]      __ap = 4;
[03:50:50.275]        // -> [__ap <= 0x00000004]
[03:50:50.275]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:50:50.285]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:50:50.285]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:50:50.285]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:50:50.285]    </block>
[03:50:50.285]    <block atomic="false" info="">
[03:50:50.285]      __var nReset = 0x80;
[03:50:50.285]        // -> [nReset <= 0x00000080]
[03:50:50.285]      __var canReadPins = 0;
[03:50:50.285]        // -> [canReadPins <= 0x00000000]
[03:50:50.285]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:50:50.285]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:50:50.285]        // -> [canReadPins <= 0x00000001]
[03:50:50.285]    </block>
[03:50:50.285]    <control if="" while="1" timeout="200" info="">
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.285]      // while "1"  (timeout="200")
[03:50:50.285]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.295]      // while "1"  (timeout="200")
[03:50:50.295]      // while-condition  =>  TRUE
[03:50:50.305]      // while "1"  (timeout="200")
[03:50:50.305]      // while  =>  TIMEOUT
[03:50:50.305]      // end while "1"
[03:50:50.305]    </control>
[03:50:50.305]    <control if="canReadPins" while="" timeout="0" info="">
[03:50:50.305]      // if-block "canReadPins"
[03:50:50.305]        // =>  TRUE
[03:50:50.305]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:50:50.305]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:50:50.308]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:50:50.308]        // while-condition  =>  FALSE
[03:50:50.308]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:50:50.308]      </control>
[03:50:50.308]      // end if-block "canReadPins"
[03:50:50.308]    </control>
[03:50:50.308]    <control if="!canReadPins" while="" timeout="0" info="">
[03:50:50.308]      // if-block "!canReadPins"
[03:50:50.308]        // =>  FALSE
[03:50:50.308]      // skip if-block "!canReadPins"
[03:50:50.308]    </control>
[03:50:50.308]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:50:50.308]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:50:50.308]        // =>  TRUE
[03:50:50.308]      <block atomic="false" info="">
[03:50:50.308]        WriteAP(0x00, 0x190008);
[03:50:50.311]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:50:50.311]        WriteAP(0xF0, 0x01);
[03:50:50.311]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:50:50.311]      </block>
[03:50:50.311]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:50:50.311]    </control>
[03:50:50.311]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:50:50.311]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:50:50.311]        // =>  FALSE
[03:50:50.315]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:50:50.315]    </control>
[03:50:50.315]    <block atomic="false" info="">
[03:50:50.315]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:50:50.315]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:50:50.315]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:50:50.315]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:50:50.315]      __ap = 0; //lets make sure we reset the access point selection
[03:50:50.315]        // -> [__ap <= 0x00000000]
[03:50:50.315]    </block>
[03:50:50.315]  </sequence>
[03:50:50.315]  
[03:50:50.335]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:50:50.335]  
[03:50:50.335]  <debugvars>
[03:50:50.335]    // Pre-defined
[03:50:50.335]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:50:50.335]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:50:50.335]    __dp=0x00000000
[03:50:50.335]    __ap=0x00000000
[03:50:50.335]    __traceout=0x00000000      (Trace Disabled)
[03:50:50.335]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:50:50.335]    __FlashAddr=0x00000000
[03:50:50.335]    __FlashLen=0x00000000
[03:50:50.335]    __FlashArg=0x00000000
[03:50:50.335]    __FlashOp=0x00000000
[03:50:50.335]    __Result=0x00000000
[03:50:50.335]  </debugvars>
[03:50:50.335]  
[03:50:50.335]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:50:50.335]    <block atomic="false" info="">
[03:50:50.335]      __var deviceID = 0;
[03:50:50.335]        // -> [deviceID <= 0x00000000]
[03:50:50.335]      __var version = 0;
[03:50:50.335]        // -> [version <= 0x00000000]
[03:50:50.335]      __var partNum = 0;
[03:50:50.335]        // -> [partNum <= 0x00000000]
[03:50:50.335]      __var manuf = 0;
[03:50:50.335]        // -> [manuf <= 0x00000000]
[03:50:50.335]      __var isMSPM0G1X0X_G3X0X = 0;
[03:50:50.335]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:50:50.335]      __var isProduction = 0;
[03:50:50.335]        // -> [isProduction <= 0x00000000]
[03:50:50.335]      __var continueId = 0;
[03:50:50.335]        // -> [continueId <= 0x00000000]
[03:50:50.335]      deviceID =   Read32(0x41C40004);
[03:50:50.345]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:50:50.345]        // -> [deviceID <= 0x2BB8802F]
[03:50:50.345]      version = deviceID >> 28;
[03:50:50.345]        // -> [version <= 0x00000002]
[03:50:50.345]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:50:50.345]        // -> [partNum <= 0x0000BB88]
[03:50:50.345]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:50:50.345]        // -> [manuf <= 0x00000017]
[03:50:50.345]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:50:50.345]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:50:50.345]      isProduction = (version > 0);
[03:50:50.345]        // -> [isProduction <= 0x00000001]
[03:50:50.345]    </block>
[03:50:50.345]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:50:50.345]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:50:50.345]        // =>  FALSE
[03:50:50.345]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:50:50.345]    </control>
[03:50:50.345]    <control if="continueId == 4" while="" timeout="0" info="">
[03:50:50.345]      // if-block "continueId == 4"
[03:50:50.345]        // =>  FALSE
[03:50:50.345]      // skip if-block "continueId == 4"
[03:50:50.345]    </control>
[03:50:50.345]    <control if="!isProduction" while="" timeout="0" info="">
[03:50:50.345]      // if-block "!isProduction"
[03:50:50.345]        // =>  FALSE
[03:50:50.345]      // skip if-block "!isProduction"
[03:50:50.345]    </control>
[03:50:50.345]  </sequence>
[03:50:50.345]  
[03:53:28.843]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:53:28.843]  
[03:53:28.843]  <debugvars>
[03:53:28.843]    // Pre-defined
[03:53:28.843]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:28.843]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:28.843]    __dp=0x00000000
[03:53:28.843]    __ap=0x00000000
[03:53:28.843]    __traceout=0x00000000      (Trace Disabled)
[03:53:28.843]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:28.843]    __FlashAddr=0x00000000
[03:53:28.843]    __FlashLen=0x00000000
[03:53:28.843]    __FlashArg=0x00000000
[03:53:28.843]    __FlashOp=0x00000000
[03:53:28.843]    __Result=0x00000000
[03:53:28.843]  </debugvars>
[03:53:28.843]  
[03:53:28.843]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:53:28.843]    <block atomic="false" info="">
[03:53:28.843]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:53:28.843]        // -> [isSWJ <= 0x00000001]
[03:53:28.843]      __var hasDormant = __protocol & 0x00020000;
[03:53:28.843]        // -> [hasDormant <= 0x00000000]
[03:53:28.843]      __var protType   = __protocol & 0x0000FFFF;
[03:53:28.843]        // -> [protType <= 0x00000002]
[03:53:28.843]    </block>
[03:53:28.843]    <control if="protType == 1" while="" timeout="0" info="">
[03:53:28.843]      // if-block "protType == 1"
[03:53:28.848]        // =>  FALSE
[03:53:28.848]      // skip if-block "protType == 1"
[03:53:28.848]    </control>
[03:53:28.848]    <control if="protType == 2" while="" timeout="0" info="">
[03:53:28.848]      // if-block "protType == 2"
[03:53:28.848]        // =>  TRUE
[03:53:28.848]      <control if="isSWJ" while="" timeout="0" info="">
[03:53:28.848]        // if-block "isSWJ"
[03:53:28.848]          // =>  TRUE
[03:53:28.848]        <control if="hasDormant" while="" timeout="0" info="">
[03:53:28.848]          // if-block "hasDormant"
[03:53:28.848]            // =>  FALSE
[03:53:28.848]          // skip if-block "hasDormant"
[03:53:28.848]        </control>
[03:53:28.848]        <control if="!hasDormant" while="" timeout="0" info="">
[03:53:28.848]          // if-block "!hasDormant"
[03:53:28.848]            // =>  TRUE
[03:53:28.848]          <block atomic="false" info="">
[03:53:28.848]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:53:28.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:28.848]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:53:28.853]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:53:28.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:53:28.855]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:28.855]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:53:28.855]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:53:28.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:53:28.855]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:28.855]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:53:28.863]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:53:28.863]          </block>
[03:53:28.863]          // end if-block "!hasDormant"
[03:53:28.863]        </control>
[03:53:28.863]        // end if-block "isSWJ"
[03:53:28.863]      </control>
[03:53:28.863]      <control if="!isSWJ" while="" timeout="0" info="">
[03:53:28.863]        // if-block "!isSWJ"
[03:53:28.863]          // =>  FALSE
[03:53:28.863]        // skip if-block "!isSWJ"
[03:53:28.863]      </control>
[03:53:28.863]      <block atomic="false" info="">
[03:53:28.863]        ReadDP(0x0);
[03:53:28.863]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:53:28.863]      </block>
[03:53:28.863]      // end if-block "protType == 2"
[03:53:28.863]    </control>
[03:53:28.863]  </sequence>
[03:53:28.863]  
[03:53:28.868]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:53:28.868]  
[03:53:28.868]  <debugvars>
[03:53:28.868]    // Pre-defined
[03:53:28.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:28.868]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:28.868]    __dp=0x00000000
[03:53:28.868]    __ap=0x00000000
[03:53:28.868]    __traceout=0x00000000      (Trace Disabled)
[03:53:28.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:28.868]    __FlashAddr=0x00000000
[03:53:28.868]    __FlashLen=0x00000000
[03:53:28.868]    __FlashArg=0x00000000
[03:53:28.868]    __FlashOp=0x00000000
[03:53:28.868]    __Result=0x00000000
[03:53:28.868]  </debugvars>
[03:53:28.868]  
[03:53:28.868]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:53:28.868]    <block atomic="false" info="">
[03:53:28.868]      __var SW_DP_ABORT       = 0x0;
[03:53:28.868]        // -> [SW_DP_ABORT <= 0x00000000]
[03:53:28.868]      __var DP_CTRL_STAT      = 0x4;
[03:53:28.868]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:53:28.868]      __var DP_SELECT         = 0x8;
[03:53:28.868]        // -> [DP_SELECT <= 0x00000008]
[03:53:28.868]      __var powered_down      = 0;
[03:53:28.868]        // -> [powered_down <= 0x00000000]
[03:53:28.868]      WriteDP(DP_SELECT, 0x00000000);
[03:53:28.873]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:53:28.873]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:53:28.873]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:53:28.873]        // -> [powered_down <= 0x00000001]
[03:53:28.873]    </block>
[03:53:28.873]    <control if="powered_down" while="" timeout="0" info="">
[03:53:28.873]      // if-block "powered_down"
[03:53:28.873]        // =>  TRUE
[03:53:28.873]      <block atomic="false" info="">
[03:53:28.873]        Message(0, "Debug/System power-up request sent");
[03:53:28.878]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:53:28.878]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:53:28.878]      </block>
[03:53:28.878]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:53:28.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:53:28.883]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:53:28.883]        // while-condition  =>  FALSE
[03:53:28.883]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:53:28.883]      </control>
[03:53:28.883]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:53:28.883]        // if-block "(__protocol & 0xFFFF) == 1"
[03:53:28.883]          // =>  FALSE
[03:53:28.883]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:53:28.883]      </control>
[03:53:28.883]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:53:28.883]        // if-block "(__protocol & 0xFFFF) == 2"
[03:53:28.883]          // =>  TRUE
[03:53:28.883]        <block atomic="false" info="">
[03:53:28.883]          Message(0, "executing SWD power up");
[03:53:28.883]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:53:28.883]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:53:28.883]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:53:28.888]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:53:28.888]        </block>
[03:53:28.888]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:53:28.888]      </control>
[03:53:28.888]      // end if-block "powered_down"
[03:53:28.888]    </control>
[03:53:28.888]    <block atomic="false" info="">
[03:53:28.888]      __var DEBUG_PORT_VAL    = 0;
[03:53:28.888]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:53:28.888]      __var ACCESS_POINT_VAL  = 0;
[03:53:28.888]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:53:28.888]      __ap = 1; 
[03:53:28.888]        // -> [__ap <= 0x00000001]
[03:53:28.888]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:53:28.893]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:53:28.893]      __ap = 4;
[03:53:28.893]        // -> [__ap <= 0x00000004]
[03:53:28.893]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:53:28.893]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:53:28.893]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:53:28.893]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:53:28.898]    </block>
[03:53:28.898]    <block atomic="false" info="">
[03:53:28.898]      __var nReset = 0x80;
[03:53:28.898]        // -> [nReset <= 0x00000080]
[03:53:28.898]      __var canReadPins = 0;
[03:53:28.898]        // -> [canReadPins <= 0x00000000]
[03:53:28.898]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:53:28.898]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:53:28.898]        // -> [canReadPins <= 0x00000001]
[03:53:28.898]    </block>
[03:53:28.898]    <control if="" while="1" timeout="200" info="">
[03:53:28.898]      // while "1"  (timeout="200")
[03:53:28.898]      // while-condition  =>  TRUE
[03:53:28.898]      // while "1"  (timeout="200")
[03:53:28.898]      // while-condition  =>  TRUE
[03:53:28.898]      // while "1"  (timeout="200")
[03:53:28.898]      // while-condition  =>  TRUE
[03:53:28.903]      // while "1"  (timeout="200")
[03:53:28.903]      // while-condition  =>  TRUE
[03:53:28.903]      // while "1"  (timeout="200")
[03:53:28.903]      // while-condition  =>  TRUE
[03:53:28.903]      // while "1"  (timeout="200")
[03:53:28.903]      // while-condition  =>  TRUE
[03:53:28.903]      // while "1"  (timeout="200")
[03:53:28.903]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.904]      // while "1"  (timeout="200")
[03:53:28.904]      // while-condition  =>  TRUE
[03:53:28.913]      // while "1"  (timeout="200")
[03:53:28.913]      // while  =>  TIMEOUT
[03:53:28.913]      // end while "1"
[03:53:28.913]    </control>
[03:53:28.913]    <control if="canReadPins" while="" timeout="0" info="">
[03:53:28.913]      // if-block "canReadPins"
[03:53:28.913]        // =>  TRUE
[03:53:28.913]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:53:28.913]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:53:28.913]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:53:28.913]        // while-condition  =>  FALSE
[03:53:28.913]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:53:28.913]      </control>
[03:53:28.913]      // end if-block "canReadPins"
[03:53:28.913]    </control>
[03:53:28.913]    <control if="!canReadPins" while="" timeout="0" info="">
[03:53:28.913]      // if-block "!canReadPins"
[03:53:28.918]        // =>  FALSE
[03:53:28.918]      // skip if-block "!canReadPins"
[03:53:28.918]    </control>
[03:53:28.918]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:53:28.918]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:53:28.918]        // =>  TRUE
[03:53:28.918]      <block atomic="false" info="">
[03:53:28.918]        WriteAP(0x00, 0x190008);
[03:53:28.918]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:53:28.918]        WriteAP(0xF0, 0x01);
[03:53:28.923]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:53:28.923]      </block>
[03:53:28.923]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:53:28.923]    </control>
[03:53:28.923]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:53:28.923]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:53:28.923]        // =>  FALSE
[03:53:28.923]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:53:28.923]    </control>
[03:53:28.923]    <block atomic="false" info="">
[03:53:28.923]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:53:28.928]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:53:28.928]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:53:28.928]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:53:28.928]      __ap = 0; //lets make sure we reset the access point selection
[03:53:28.928]        // -> [__ap <= 0x00000000]
[03:53:28.928]    </block>
[03:53:28.928]  </sequence>
[03:53:28.928]  
[03:53:28.948]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:53:28.948]  
[03:53:28.948]  <debugvars>
[03:53:28.948]    // Pre-defined
[03:53:28.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:28.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:28.948]    __dp=0x00000000
[03:53:28.948]    __ap=0x00000000
[03:53:28.948]    __traceout=0x00000000      (Trace Disabled)
[03:53:28.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:28.948]    __FlashAddr=0x00000000
[03:53:28.948]    __FlashLen=0x00000000
[03:53:28.948]    __FlashArg=0x00000000
[03:53:28.948]    __FlashOp=0x00000000
[03:53:28.948]    __Result=0x00000000
[03:53:28.948]  </debugvars>
[03:53:28.948]  
[03:53:28.948]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:53:28.948]    <block atomic="false" info="">
[03:53:28.948]      __var deviceID = 0;
[03:53:28.948]        // -> [deviceID <= 0x00000000]
[03:53:28.948]      __var version = 0;
[03:53:28.948]        // -> [version <= 0x00000000]
[03:53:28.953]      __var partNum = 0;
[03:53:28.953]        // -> [partNum <= 0x00000000]
[03:53:28.953]      __var manuf = 0;
[03:53:28.953]        // -> [manuf <= 0x00000000]
[03:53:28.953]      __var isMSPM0G1X0X_G3X0X = 0;
[03:53:28.953]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:53:28.953]      __var isProduction = 0;
[03:53:28.953]        // -> [isProduction <= 0x00000000]
[03:53:28.954]      __var continueId = 0;
[03:53:28.954]        // -> [continueId <= 0x00000000]
[03:53:28.954]      deviceID =   Read32(0x41C40004);
[03:53:28.958]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:53:28.958]        // -> [deviceID <= 0x2BB8802F]
[03:53:28.958]      version = deviceID >> 28;
[03:53:28.958]        // -> [version <= 0x00000002]
[03:53:28.958]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:53:28.959]        // -> [partNum <= 0x0000BB88]
[03:53:28.959]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:53:28.959]        // -> [manuf <= 0x00000017]
[03:53:28.959]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:53:28.959]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:53:28.959]      isProduction = (version > 0);
[03:53:28.959]        // -> [isProduction <= 0x00000001]
[03:53:28.959]    </block>
[03:53:28.959]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:53:28.959]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:53:28.959]        // =>  FALSE
[03:53:28.959]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:53:28.959]    </control>
[03:53:28.959]    <control if="continueId == 4" while="" timeout="0" info="">
[03:53:28.959]      // if-block "continueId == 4"
[03:53:28.959]        // =>  FALSE
[03:53:28.959]      // skip if-block "continueId == 4"
[03:53:28.959]    </control>
[03:53:28.959]    <control if="!isProduction" while="" timeout="0" info="">
[03:53:28.959]      // if-block "!isProduction"
[03:53:28.959]        // =>  FALSE
[03:53:28.959]      // skip if-block "!isProduction"
[03:53:28.959]    </control>
[03:53:28.959]  </sequence>
[03:53:28.959]  
[03:55:14.782]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:55:14.782]  
[03:55:14.794]  <debugvars>
[03:55:14.794]    // Pre-defined
[03:55:14.794]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:14.794]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:55:14.794]    __dp=0x00000000
[03:55:14.794]    __ap=0x00000000
[03:55:14.794]    __traceout=0x00000000      (Trace Disabled)
[03:55:14.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:14.794]    __FlashAddr=0x00000000
[03:55:14.794]    __FlashLen=0x00000000
[03:55:14.794]    __FlashArg=0x00000000
[03:55:14.794]    __FlashOp=0x00000000
[03:55:14.794]    __Result=0x00000000
[03:55:14.794]  </debugvars>
[03:55:14.794]  
[03:55:14.794]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:55:14.794]    <block atomic="false" info="">
[03:55:14.794]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:55:14.794]        // -> [isSWJ <= 0x00000001]
[03:55:14.794]      __var hasDormant = __protocol & 0x00020000;
[03:55:14.794]        // -> [hasDormant <= 0x00000000]
[03:55:14.794]      __var protType   = __protocol & 0x0000FFFF;
[03:55:14.794]        // -> [protType <= 0x00000002]
[03:55:14.794]    </block>
[03:55:14.794]    <control if="protType == 1" while="" timeout="0" info="">
[03:55:14.794]      // if-block "protType == 1"
[03:55:14.794]        // =>  FALSE
[03:55:14.794]      // skip if-block "protType == 1"
[03:55:14.794]    </control>
[03:55:14.794]    <control if="protType == 2" while="" timeout="0" info="">
[03:55:14.794]      // if-block "protType == 2"
[03:55:14.794]        // =>  TRUE
[03:55:14.794]      <control if="isSWJ" while="" timeout="0" info="">
[03:55:14.794]        // if-block "isSWJ"
[03:55:14.794]          // =>  TRUE
[03:55:14.794]        <control if="hasDormant" while="" timeout="0" info="">
[03:55:14.794]          // if-block "hasDormant"
[03:55:14.794]            // =>  FALSE
[03:55:14.794]          // skip if-block "hasDormant"
[03:55:14.794]        </control>
[03:55:14.794]        <control if="!hasDormant" while="" timeout="0" info="">
[03:55:14.794]          // if-block "!hasDormant"
[03:55:14.794]            // =>  TRUE
[03:55:14.794]          <block atomic="false" info="">
[03:55:14.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:55:14.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:55:14.794]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:55:14.802]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:55:14.802]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:55:14.804]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:55:14.804]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:55:14.804]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:55:14.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:55:14.804]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:55:14.804]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:55:14.804]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:55:14.804]          </block>
[03:55:14.804]          // end if-block "!hasDormant"
[03:55:14.804]        </control>
[03:55:14.804]        // end if-block "isSWJ"
[03:55:14.804]      </control>
[03:55:14.804]      <control if="!isSWJ" while="" timeout="0" info="">
[03:55:14.804]        // if-block "!isSWJ"
[03:55:14.804]          // =>  FALSE
[03:55:14.804]        // skip if-block "!isSWJ"
[03:55:14.804]      </control>
[03:55:14.804]      <block atomic="false" info="">
[03:55:14.804]        ReadDP(0x0);
[03:55:14.804]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:55:14.804]      </block>
[03:55:14.804]      // end if-block "protType == 2"
[03:55:14.804]    </control>
[03:55:14.804]  </sequence>
[03:55:14.804]  
[03:55:14.812]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:55:14.812]  
[03:55:14.812]  <debugvars>
[03:55:14.812]    // Pre-defined
[03:55:14.812]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:14.812]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:55:14.812]    __dp=0x00000000
[03:55:14.812]    __ap=0x00000000
[03:55:14.812]    __traceout=0x00000000      (Trace Disabled)
[03:55:14.812]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:14.812]    __FlashAddr=0x00000000
[03:55:14.812]    __FlashLen=0x00000000
[03:55:14.812]    __FlashArg=0x00000000
[03:55:14.812]    __FlashOp=0x00000000
[03:55:14.812]    __Result=0x00000000
[03:55:14.812]  </debugvars>
[03:55:14.812]  
[03:55:14.812]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:55:14.812]    <block atomic="false" info="">
[03:55:14.812]      __var SW_DP_ABORT       = 0x0;
[03:55:14.812]        // -> [SW_DP_ABORT <= 0x00000000]
[03:55:14.812]      __var DP_CTRL_STAT      = 0x4;
[03:55:14.812]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:55:14.812]      __var DP_SELECT         = 0x8;
[03:55:14.812]        // -> [DP_SELECT <= 0x00000008]
[03:55:14.812]      __var powered_down      = 0;
[03:55:14.812]        // -> [powered_down <= 0x00000000]
[03:55:14.812]      WriteDP(DP_SELECT, 0x00000000);
[03:55:14.812]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:55:14.812]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:55:14.812]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:55:14.812]        // -> [powered_down <= 0x00000001]
[03:55:14.812]    </block>
[03:55:14.812]    <control if="powered_down" while="" timeout="0" info="">
[03:55:14.812]      // if-block "powered_down"
[03:55:14.812]        // =>  TRUE
[03:55:14.812]      <block atomic="false" info="">
[03:55:14.812]        Message(0, "Debug/System power-up request sent");
[03:55:14.812]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:55:14.822]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:55:14.822]      </block>
[03:55:14.822]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:55:14.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:55:14.824]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:55:14.824]        // while-condition  =>  FALSE
[03:55:14.824]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:55:14.824]      </control>
[03:55:14.824]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:55:14.824]        // if-block "(__protocol & 0xFFFF) == 1"
[03:55:14.824]          // =>  FALSE
[03:55:14.824]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:55:14.824]      </control>
[03:55:14.824]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:55:14.824]        // if-block "(__protocol & 0xFFFF) == 2"
[03:55:14.824]          // =>  TRUE
[03:55:14.824]        <block atomic="false" info="">
[03:55:14.824]          Message(0, "executing SWD power up");
[03:55:14.824]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:55:14.824]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:55:14.824]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:55:14.824]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:55:14.824]        </block>
[03:55:14.824]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:55:14.824]      </control>
[03:55:14.824]      // end if-block "powered_down"
[03:55:14.824]    </control>
[03:55:14.824]    <block atomic="false" info="">
[03:55:14.824]      __var DEBUG_PORT_VAL    = 0;
[03:55:14.824]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:55:14.824]      __var ACCESS_POINT_VAL  = 0;
[03:55:14.824]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:55:14.824]      __ap = 1; 
[03:55:14.824]        // -> [__ap <= 0x00000001]
[03:55:14.824]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:55:14.834]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:55:14.834]      __ap = 4;
[03:55:14.834]        // -> [__ap <= 0x00000004]
[03:55:14.834]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:55:14.834]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:55:14.834]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:55:14.834]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:55:14.834]    </block>
[03:55:14.834]    <block atomic="false" info="">
[03:55:14.834]      __var nReset = 0x80;
[03:55:14.834]        // -> [nReset <= 0x00000080]
[03:55:14.834]      __var canReadPins = 0;
[03:55:14.834]        // -> [canReadPins <= 0x00000000]
[03:55:14.834]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:55:14.834]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:55:14.834]        // -> [canReadPins <= 0x00000001]
[03:55:14.834]    </block>
[03:55:14.834]    <control if="" while="1" timeout="200" info="">
[03:55:14.834]      // while "1"  (timeout="200")
[03:55:14.834]      // while-condition  =>  TRUE
[03:55:14.834]      // while "1"  (timeout="200")
[03:55:14.834]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.843]      // while "1"  (timeout="200")
[03:55:14.843]      // while-condition  =>  TRUE
[03:55:14.845]      // while "1"  (timeout="200")
[03:55:14.845]      // while-condition  =>  TRUE
[03:55:14.845]      // while "1"  (timeout="200")
[03:55:14.845]      // while-condition  =>  TRUE
[03:55:14.845]      // while "1"  (timeout="200")
[03:55:14.846]      // while-condition  =>  TRUE
[03:55:14.846]      // while "1"  (timeout="200")
[03:55:14.846]      // while-condition  =>  TRUE
[03:55:14.846]      // while "1"  (timeout="200")
[03:55:14.846]      // while-condition  =>  TRUE
[03:55:14.846]      // while "1"  (timeout="200")
[03:55:14.846]      // while-condition  =>  TRUE
[03:55:14.846]      // while "1"  (timeout="200")
[03:55:14.846]      // while-condition  =>  TRUE
[03:55:14.846]      // while "1"  (timeout="200")
[03:55:14.847]      // while-condition  =>  TRUE
[03:55:14.847]      // while "1"  (timeout="200")
[03:55:14.847]      // while  =>  TIMEOUT
[03:55:14.847]      // end while "1"
[03:55:14.847]    </control>
[03:55:14.847]    <control if="canReadPins" while="" timeout="0" info="">
[03:55:14.847]      // if-block "canReadPins"
[03:55:14.847]        // =>  TRUE
[03:55:14.847]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:55:14.847]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:55:14.847]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:55:14.847]        // while-condition  =>  FALSE
[03:55:14.847]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:55:14.847]      </control>
[03:55:14.847]      // end if-block "canReadPins"
[03:55:14.847]    </control>
[03:55:14.847]    <control if="!canReadPins" while="" timeout="0" info="">
[03:55:14.847]      // if-block "!canReadPins"
[03:55:14.847]        // =>  FALSE
[03:55:14.847]      // skip if-block "!canReadPins"
[03:55:14.847]    </control>
[03:55:14.847]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:55:14.847]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:55:14.847]        // =>  TRUE
[03:55:14.847]      <block atomic="false" info="">
[03:55:14.847]        WriteAP(0x00, 0x190008);
[03:55:14.853]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:55:14.853]        WriteAP(0xF0, 0x01);
[03:55:14.853]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:55:14.853]      </block>
[03:55:14.853]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:55:14.853]    </control>
[03:55:14.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:55:14.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:55:14.853]        // =>  FALSE
[03:55:14.853]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:55:14.853]    </control>
[03:55:14.853]    <block atomic="false" info="">
[03:55:14.853]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:55:14.853]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:55:14.853]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:55:14.853]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:55:14.863]      __ap = 0; //lets make sure we reset the access point selection
[03:55:14.863]        // -> [__ap <= 0x00000000]
[03:55:14.863]    </block>
[03:55:14.863]  </sequence>
[03:55:14.863]  
[03:55:14.883]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:55:14.883]  
[03:55:14.883]  <debugvars>
[03:55:14.883]    // Pre-defined
[03:55:14.883]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:14.883]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:55:14.883]    __dp=0x00000000
[03:55:14.883]    __ap=0x00000000
[03:55:14.883]    __traceout=0x00000000      (Trace Disabled)
[03:55:14.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:14.884]    __FlashAddr=0x00000000
[03:55:14.884]    __FlashLen=0x00000000
[03:55:14.884]    __FlashArg=0x00000000
[03:55:14.884]    __FlashOp=0x00000000
[03:55:14.884]    __Result=0x00000000
[03:55:14.884]  </debugvars>
[03:55:14.884]  
[03:55:14.884]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:55:14.885]    <block atomic="false" info="">
[03:55:14.885]      __var deviceID = 0;
[03:55:14.885]        // -> [deviceID <= 0x00000000]
[03:55:14.885]      __var version = 0;
[03:55:14.885]        // -> [version <= 0x00000000]
[03:55:14.885]      __var partNum = 0;
[03:55:14.885]        // -> [partNum <= 0x00000000]
[03:55:14.885]      __var manuf = 0;
[03:55:14.885]        // -> [manuf <= 0x00000000]
[03:55:14.885]      __var isMSPM0G1X0X_G3X0X = 0;
[03:55:14.886]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:55:14.886]      __var isProduction = 0;
[03:55:14.886]        // -> [isProduction <= 0x00000000]
[03:55:14.886]      __var continueId = 0;
[03:55:14.886]        // -> [continueId <= 0x00000000]
[03:55:14.886]      deviceID =   Read32(0x41C40004);
[03:55:14.892]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:55:14.892]        // -> [deviceID <= 0x2BB8802F]
[03:55:14.892]      version = deviceID >> 28;
[03:55:14.892]        // -> [version <= 0x00000002]
[03:55:14.892]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:55:14.892]        // -> [partNum <= 0x0000BB88]
[03:55:14.892]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:55:14.893]        // -> [manuf <= 0x00000017]
[03:55:14.893]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:55:14.893]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:55:14.893]      isProduction = (version > 0);
[03:55:14.893]        // -> [isProduction <= 0x00000001]
[03:55:14.893]    </block>
[03:55:14.893]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:55:14.893]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:55:14.893]        // =>  FALSE
[03:55:14.893]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:55:14.893]    </control>
[03:55:14.894]    <control if="continueId == 4" while="" timeout="0" info="">
[03:55:14.894]      // if-block "continueId == 4"
[03:55:14.894]        // =>  FALSE
[03:55:14.894]      // skip if-block "continueId == 4"
[03:55:14.894]    </control>
[03:55:14.894]    <control if="!isProduction" while="" timeout="0" info="">
[03:55:14.894]      // if-block "!isProduction"
[03:55:14.894]        // =>  FALSE
[03:55:14.894]      // skip if-block "!isProduction"
[03:55:14.894]    </control>
[03:55:14.894]  </sequence>
[03:55:14.894]  
[04:02:09.125]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:02:09.125]  
[04:02:09.135]  <debugvars>
[04:02:09.135]    // Pre-defined
[04:02:09.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:02:09.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:02:09.135]    __dp=0x00000000
[04:02:09.135]    __ap=0x00000000
[04:02:09.135]    __traceout=0x00000000      (Trace Disabled)
[04:02:09.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:02:09.135]    __FlashAddr=0x00000000
[04:02:09.135]    __FlashLen=0x00000000
[04:02:09.135]    __FlashArg=0x00000000
[04:02:09.135]    __FlashOp=0x00000000
[04:02:09.135]    __Result=0x00000000
[04:02:09.135]  </debugvars>
[04:02:09.135]  
[04:02:09.135]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:02:09.135]    <block atomic="false" info="">
[04:02:09.135]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:02:09.135]        // -> [isSWJ <= 0x00000001]
[04:02:09.135]      __var hasDormant = __protocol & 0x00020000;
[04:02:09.135]        // -> [hasDormant <= 0x00000000]
[04:02:09.135]      __var protType   = __protocol & 0x0000FFFF;
[04:02:09.135]        // -> [protType <= 0x00000002]
[04:02:09.135]    </block>
[04:02:09.135]    <control if="protType == 1" while="" timeout="0" info="">
[04:02:09.135]      // if-block "protType == 1"
[04:02:09.135]        // =>  FALSE
[04:02:09.135]      // skip if-block "protType == 1"
[04:02:09.135]    </control>
[04:02:09.135]    <control if="protType == 2" while="" timeout="0" info="">
[04:02:09.135]      // if-block "protType == 2"
[04:02:09.135]        // =>  TRUE
[04:02:09.135]      <control if="isSWJ" while="" timeout="0" info="">
[04:02:09.135]        // if-block "isSWJ"
[04:02:09.135]          // =>  TRUE
[04:02:09.135]        <control if="hasDormant" while="" timeout="0" info="">
[04:02:09.135]          // if-block "hasDormant"
[04:02:09.135]            // =>  FALSE
[04:02:09.135]          // skip if-block "hasDormant"
[04:02:09.135]        </control>
[04:02:09.135]        <control if="!hasDormant" while="" timeout="0" info="">
[04:02:09.135]          // if-block "!hasDormant"
[04:02:09.135]            // =>  TRUE
[04:02:09.135]          <block atomic="false" info="">
[04:02:09.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:02:09.135]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:02:09.135]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:02:09.135]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:02:09.144]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:02:09.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:02:09.144]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:02:09.144]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:02:09.144]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:02:09.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:02:09.144]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:02:09.144]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:02:09.144]          </block>
[04:02:09.144]          // end if-block "!hasDormant"
[04:02:09.144]        </control>
[04:02:09.144]        // end if-block "isSWJ"
[04:02:09.144]      </control>
[04:02:09.144]      <control if="!isSWJ" while="" timeout="0" info="">
[04:02:09.144]        // if-block "!isSWJ"
[04:02:09.144]          // =>  FALSE
[04:02:09.144]        // skip if-block "!isSWJ"
[04:02:09.144]      </control>
[04:02:09.144]      <block atomic="false" info="">
[04:02:09.144]        ReadDP(0x0);
[04:02:09.154]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:02:09.154]      </block>
[04:02:09.154]      // end if-block "protType == 2"
[04:02:09.154]    </control>
[04:02:09.154]  </sequence>
[04:02:09.154]  
[04:02:09.154]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:02:09.154]  
[04:02:09.154]  <debugvars>
[04:02:09.154]    // Pre-defined
[04:02:09.154]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:02:09.154]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:02:09.154]    __dp=0x00000000
[04:02:09.154]    __ap=0x00000000
[04:02:09.154]    __traceout=0x00000000      (Trace Disabled)
[04:02:09.154]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:02:09.154]    __FlashAddr=0x00000000
[04:02:09.154]    __FlashLen=0x00000000
[04:02:09.154]    __FlashArg=0x00000000
[04:02:09.154]    __FlashOp=0x00000000
[04:02:09.154]    __Result=0x00000000
[04:02:09.154]  </debugvars>
[04:02:09.154]  
[04:02:09.154]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:02:09.154]    <block atomic="false" info="">
[04:02:09.154]      __var SW_DP_ABORT       = 0x0;
[04:02:09.154]        // -> [SW_DP_ABORT <= 0x00000000]
[04:02:09.154]      __var DP_CTRL_STAT      = 0x4;
[04:02:09.154]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:02:09.154]      __var DP_SELECT         = 0x8;
[04:02:09.154]        // -> [DP_SELECT <= 0x00000008]
[04:02:09.154]      __var powered_down      = 0;
[04:02:09.154]        // -> [powered_down <= 0x00000000]
[04:02:09.154]      WriteDP(DP_SELECT, 0x00000000);
[04:02:09.154]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:02:09.154]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:02:09.164]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:02:09.166]        // -> [powered_down <= 0x00000001]
[04:02:09.166]    </block>
[04:02:09.166]    <control if="powered_down" while="" timeout="0" info="">
[04:02:09.166]      // if-block "powered_down"
[04:02:09.166]        // =>  TRUE
[04:02:09.166]      <block atomic="false" info="">
[04:02:09.166]        Message(0, "Debug/System power-up request sent");
[04:02:09.166]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:02:09.166]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:02:09.166]      </block>
[04:02:09.166]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:02:09.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:02:09.166]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:02:09.166]        // while-condition  =>  FALSE
[04:02:09.166]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:02:09.166]      </control>
[04:02:09.166]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:02:09.166]        // if-block "(__protocol & 0xFFFF) == 1"
[04:02:09.166]          // =>  FALSE
[04:02:09.166]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:02:09.166]      </control>
[04:02:09.166]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:02:09.166]        // if-block "(__protocol & 0xFFFF) == 2"
[04:02:09.166]          // =>  TRUE
[04:02:09.166]        <block atomic="false" info="">
[04:02:09.166]          Message(0, "executing SWD power up");
[04:02:09.175]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:02:09.175]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:02:09.175]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:02:09.175]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:02:09.175]        </block>
[04:02:09.175]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:02:09.175]      </control>
[04:02:09.175]      // end if-block "powered_down"
[04:02:09.175]    </control>
[04:02:09.175]    <block atomic="false" info="">
[04:02:09.175]      __var DEBUG_PORT_VAL    = 0;
[04:02:09.175]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:02:09.175]      __var ACCESS_POINT_VAL  = 0;
[04:02:09.175]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:02:09.175]      __ap = 1; 
[04:02:09.175]        // -> [__ap <= 0x00000001]
[04:02:09.175]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:02:09.175]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:02:09.175]      __ap = 4;
[04:02:09.175]        // -> [__ap <= 0x00000004]
[04:02:09.175]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:02:09.185]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:02:09.185]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:02:09.185]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:02:09.185]    </block>
[04:02:09.185]    <block atomic="false" info="">
[04:02:09.185]      __var nReset = 0x80;
[04:02:09.185]        // -> [nReset <= 0x00000080]
[04:02:09.185]      __var canReadPins = 0;
[04:02:09.185]        // -> [canReadPins <= 0x00000000]
[04:02:09.185]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:02:09.185]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:02:09.185]        // -> [canReadPins <= 0x00000001]
[04:02:09.185]    </block>
[04:02:09.185]    <control if="" while="1" timeout="200" info="">
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.185]      // while "1"  (timeout="200")
[04:02:09.185]      // while-condition  =>  TRUE
[04:02:09.195]      // while "1"  (timeout="200")
[04:02:09.195]      // while  =>  TIMEOUT
[04:02:09.195]      // end while "1"
[04:02:09.195]    </control>
[04:02:09.195]    <control if="canReadPins" while="" timeout="0" info="">
[04:02:09.195]      // if-block "canReadPins"
[04:02:09.195]        // =>  TRUE
[04:02:09.195]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:02:09.195]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:02:09.195]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:02:09.195]        // while-condition  =>  FALSE
[04:02:09.195]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:02:09.195]      </control>
[04:02:09.195]      // end if-block "canReadPins"
[04:02:09.195]    </control>
[04:02:09.195]    <control if="!canReadPins" while="" timeout="0" info="">
[04:02:09.195]      // if-block "!canReadPins"
[04:02:09.195]        // =>  FALSE
[04:02:09.195]      // skip if-block "!canReadPins"
[04:02:09.195]    </control>
[04:02:09.195]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:02:09.195]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:02:09.195]        // =>  TRUE
[04:02:09.195]      <block atomic="false" info="">
[04:02:09.195]        WriteAP(0x00, 0x190008);
[04:02:09.195]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:02:09.195]        WriteAP(0xF0, 0x01);
[04:02:09.195]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:02:09.195]      </block>
[04:02:09.195]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:02:09.195]    </control>
[04:02:09.195]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:02:09.195]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:02:09.195]        // =>  FALSE
[04:02:09.205]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:02:09.205]    </control>
[04:02:09.205]    <block atomic="false" info="">
[04:02:09.205]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:02:09.208]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:02:09.208]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:02:09.208]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:02:09.209]      __ap = 0; //lets make sure we reset the access point selection
[04:02:09.209]        // -> [__ap <= 0x00000000]
[04:02:09.209]    </block>
[04:02:09.209]  </sequence>
[04:02:09.209]  
[04:02:09.227]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:02:09.227]  
[04:02:09.227]  <debugvars>
[04:02:09.227]    // Pre-defined
[04:02:09.227]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:02:09.227]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:02:09.227]    __dp=0x00000000
[04:02:09.227]    __ap=0x00000000
[04:02:09.227]    __traceout=0x00000000      (Trace Disabled)
[04:02:09.227]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:02:09.227]    __FlashAddr=0x00000000
[04:02:09.227]    __FlashLen=0x00000000
[04:02:09.227]    __FlashArg=0x00000000
[04:02:09.227]    __FlashOp=0x00000000
[04:02:09.227]    __Result=0x00000000
[04:02:09.227]  </debugvars>
[04:02:09.227]  
[04:02:09.227]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:02:09.227]    <block atomic="false" info="">
[04:02:09.227]      __var deviceID = 0;
[04:02:09.227]        // -> [deviceID <= 0x00000000]
[04:02:09.227]      __var version = 0;
[04:02:09.227]        // -> [version <= 0x00000000]
[04:02:09.227]      __var partNum = 0;
[04:02:09.227]        // -> [partNum <= 0x00000000]
[04:02:09.227]      __var manuf = 0;
[04:02:09.227]        // -> [manuf <= 0x00000000]
[04:02:09.227]      __var isMSPM0G1X0X_G3X0X = 0;
[04:02:09.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:02:09.227]      __var isProduction = 0;
[04:02:09.227]        // -> [isProduction <= 0x00000000]
[04:02:09.227]      __var continueId = 0;
[04:02:09.227]        // -> [continueId <= 0x00000000]
[04:02:09.227]      deviceID =   Read32(0x41C40004);
[04:02:09.227]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:02:09.227]        // -> [deviceID <= 0x2BB8802F]
[04:02:09.237]      version = deviceID >> 28;
[04:02:09.237]        // -> [version <= 0x00000002]
[04:02:09.237]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:02:09.237]        // -> [partNum <= 0x0000BB88]
[04:02:09.237]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:02:09.237]        // -> [manuf <= 0x00000017]
[04:02:09.237]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:02:09.237]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:02:09.237]      isProduction = (version > 0);
[04:02:09.237]        // -> [isProduction <= 0x00000001]
[04:02:09.237]    </block>
[04:02:09.237]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:02:09.237]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:02:09.237]        // =>  FALSE
[04:02:09.237]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:02:09.238]    </control>
[04:02:09.238]    <control if="continueId == 4" while="" timeout="0" info="">
[04:02:09.238]      // if-block "continueId == 4"
[04:02:09.238]        // =>  FALSE
[04:02:09.238]      // skip if-block "continueId == 4"
[04:02:09.238]    </control>
[04:02:09.239]    <control if="!isProduction" while="" timeout="0" info="">
[04:02:09.239]      // if-block "!isProduction"
[04:02:09.239]        // =>  FALSE
[04:02:09.239]      // skip if-block "!isProduction"
[04:02:09.239]    </control>
[04:02:09.239]  </sequence>
[04:02:09.239]  
[04:04:27.571]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:04:27.571]  
[04:04:27.586]  <debugvars>
[04:04:27.586]    // Pre-defined
[04:04:27.586]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:27.586]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:27.586]    __dp=0x00000000
[04:04:27.586]    __ap=0x00000000
[04:04:27.586]    __traceout=0x00000000      (Trace Disabled)
[04:04:27.586]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:27.586]    __FlashAddr=0x00000000
[04:04:27.586]    __FlashLen=0x00000000
[04:04:27.586]    __FlashArg=0x00000000
[04:04:27.586]    __FlashOp=0x00000000
[04:04:27.586]    __Result=0x00000000
[04:04:27.586]  </debugvars>
[04:04:27.586]  
[04:04:27.586]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:04:27.586]    <block atomic="false" info="">
[04:04:27.586]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:04:27.586]        // -> [isSWJ <= 0x00000001]
[04:04:27.586]      __var hasDormant = __protocol & 0x00020000;
[04:04:27.586]        // -> [hasDormant <= 0x00000000]
[04:04:27.586]      __var protType   = __protocol & 0x0000FFFF;
[04:04:27.586]        // -> [protType <= 0x00000002]
[04:04:27.586]    </block>
[04:04:27.586]    <control if="protType == 1" while="" timeout="0" info="">
[04:04:27.586]      // if-block "protType == 1"
[04:04:27.589]        // =>  FALSE
[04:04:27.589]      // skip if-block "protType == 1"
[04:04:27.589]    </control>
[04:04:27.589]    <control if="protType == 2" while="" timeout="0" info="">
[04:04:27.589]      // if-block "protType == 2"
[04:04:27.589]        // =>  TRUE
[04:04:27.589]      <control if="isSWJ" while="" timeout="0" info="">
[04:04:27.589]        // if-block "isSWJ"
[04:04:27.589]          // =>  TRUE
[04:04:27.589]        <control if="hasDormant" while="" timeout="0" info="">
[04:04:27.589]          // if-block "hasDormant"
[04:04:27.589]            // =>  FALSE
[04:04:27.589]          // skip if-block "hasDormant"
[04:04:27.589]        </control>
[04:04:27.589]        <control if="!hasDormant" while="" timeout="0" info="">
[04:04:27.589]          // if-block "!hasDormant"
[04:04:27.589]            // =>  TRUE
[04:04:27.589]          <block atomic="false" info="">
[04:04:27.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:04:27.589]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:27.589]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:04:27.589]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:04:27.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:04:27.589]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:27.589]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:04:27.589]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:04:27.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:04:27.589]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:04:27.589]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:04:27.599]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:04:27.599]          </block>
[04:04:27.599]          // end if-block "!hasDormant"
[04:04:27.599]        </control>
[04:04:27.599]        // end if-block "isSWJ"
[04:04:27.599]      </control>
[04:04:27.599]      <control if="!isSWJ" while="" timeout="0" info="">
[04:04:27.599]        // if-block "!isSWJ"
[04:04:27.599]          // =>  FALSE
[04:04:27.599]        // skip if-block "!isSWJ"
[04:04:27.599]      </control>
[04:04:27.601]      <block atomic="false" info="">
[04:04:27.601]        ReadDP(0x0);
[04:04:27.601]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:04:27.601]      </block>
[04:04:27.601]      // end if-block "protType == 2"
[04:04:27.601]    </control>
[04:04:27.601]  </sequence>
[04:04:27.601]  
[04:04:27.601]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:04:27.601]  
[04:04:27.601]  <debugvars>
[04:04:27.601]    // Pre-defined
[04:04:27.601]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:27.601]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:27.601]    __dp=0x00000000
[04:04:27.601]    __ap=0x00000000
[04:04:27.601]    __traceout=0x00000000      (Trace Disabled)
[04:04:27.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:27.601]    __FlashAddr=0x00000000
[04:04:27.601]    __FlashLen=0x00000000
[04:04:27.601]    __FlashArg=0x00000000
[04:04:27.601]    __FlashOp=0x00000000
[04:04:27.601]    __Result=0x00000000
[04:04:27.601]  </debugvars>
[04:04:27.601]  
[04:04:27.601]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:04:27.601]    <block atomic="false" info="">
[04:04:27.601]      __var SW_DP_ABORT       = 0x0;
[04:04:27.601]        // -> [SW_DP_ABORT <= 0x00000000]
[04:04:27.601]      __var DP_CTRL_STAT      = 0x4;
[04:04:27.601]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:04:27.601]      __var DP_SELECT         = 0x8;
[04:04:27.601]        // -> [DP_SELECT <= 0x00000008]
[04:04:27.601]      __var powered_down      = 0;
[04:04:27.601]        // -> [powered_down <= 0x00000000]
[04:04:27.601]      WriteDP(DP_SELECT, 0x00000000);
[04:04:27.609]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:04:27.609]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:04:27.609]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:04:27.609]        // -> [powered_down <= 0x00000001]
[04:04:27.609]    </block>
[04:04:27.609]    <control if="powered_down" while="" timeout="0" info="">
[04:04:27.609]      // if-block "powered_down"
[04:04:27.609]        // =>  TRUE
[04:04:27.609]      <block atomic="false" info="">
[04:04:27.609]        Message(0, "Debug/System power-up request sent");
[04:04:27.609]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:04:27.609]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:04:27.609]      </block>
[04:04:27.609]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:04:27.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:04:27.609]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:04:27.609]        // while-condition  =>  FALSE
[04:04:27.609]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:04:27.609]      </control>
[04:04:27.609]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:04:27.609]        // if-block "(__protocol & 0xFFFF) == 1"
[04:04:27.609]          // =>  FALSE
[04:04:27.609]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:04:27.609]      </control>
[04:04:27.609]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:04:27.609]        // if-block "(__protocol & 0xFFFF) == 2"
[04:04:27.619]          // =>  TRUE
[04:04:27.619]        <block atomic="false" info="">
[04:04:27.619]          Message(0, "executing SWD power up");
[04:04:27.619]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:04:27.619]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:04:27.619]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:04:27.619]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:04:27.619]        </block>
[04:04:27.619]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:04:27.619]      </control>
[04:04:27.619]      // end if-block "powered_down"
[04:04:27.619]    </control>
[04:04:27.619]    <block atomic="false" info="">
[04:04:27.619]      __var DEBUG_PORT_VAL    = 0;
[04:04:27.619]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:04:27.619]      __var ACCESS_POINT_VAL  = 0;
[04:04:27.619]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:04:27.619]      __ap = 1; 
[04:04:27.619]        // -> [__ap <= 0x00000001]
[04:04:27.619]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:04:27.629]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:04:27.629]      __ap = 4;
[04:04:27.629]        // -> [__ap <= 0x00000004]
[04:04:27.629]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:04:27.632]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:04:27.632]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:04:27.632]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:04:27.632]    </block>
[04:04:27.632]    <block atomic="false" info="">
[04:04:27.632]      __var nReset = 0x80;
[04:04:27.632]        // -> [nReset <= 0x00000080]
[04:04:27.632]      __var canReadPins = 0;
[04:04:27.632]        // -> [canReadPins <= 0x00000000]
[04:04:27.632]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:04:27.632]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:04:27.632]        // -> [canReadPins <= 0x00000001]
[04:04:27.632]    </block>
[04:04:27.632]    <control if="" while="1" timeout="200" info="">
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.632]      // while "1"  (timeout="200")
[04:04:27.632]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.640]      // while "1"  (timeout="200")
[04:04:27.640]      // while-condition  =>  TRUE
[04:04:27.650]      // while "1"  (timeout="200")
[04:04:27.650]      // while  =>  TIMEOUT
[04:04:27.650]      // end while "1"
[04:04:27.650]    </control>
[04:04:27.650]    <control if="canReadPins" while="" timeout="0" info="">
[04:04:27.650]      // if-block "canReadPins"
[04:04:27.650]        // =>  TRUE
[04:04:27.650]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:04:27.650]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:04:27.650]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:04:27.650]        // while-condition  =>  FALSE
[04:04:27.650]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:04:27.650]      </control>
[04:04:27.650]      // end if-block "canReadPins"
[04:04:27.650]    </control>
[04:04:27.650]    <control if="!canReadPins" while="" timeout="0" info="">
[04:04:27.650]      // if-block "!canReadPins"
[04:04:27.650]        // =>  FALSE
[04:04:27.650]      // skip if-block "!canReadPins"
[04:04:27.650]    </control>
[04:04:27.650]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:04:27.650]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:04:27.650]        // =>  TRUE
[04:04:27.650]      <block atomic="false" info="">
[04:04:27.650]        WriteAP(0x00, 0x190008);
[04:04:27.650]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:04:27.650]        WriteAP(0xF0, 0x01);
[04:04:27.660]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:04:27.660]      </block>
[04:04:27.660]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:04:27.660]    </control>
[04:04:27.660]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:04:27.660]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:04:27.660]        // =>  FALSE
[04:04:27.660]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:04:27.660]    </control>
[04:04:27.660]    <block atomic="false" info="">
[04:04:27.660]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:04:27.670]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:04:27.670]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:04:27.670]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:04:27.670]      __ap = 0; //lets make sure we reset the access point selection
[04:04:27.670]        // -> [__ap <= 0x00000000]
[04:04:27.670]    </block>
[04:04:27.670]  </sequence>
[04:04:27.670]  
[04:04:27.690]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:04:27.690]  
[04:04:27.690]  <debugvars>
[04:04:27.690]    // Pre-defined
[04:04:27.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:04:27.690]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:04:27.690]    __dp=0x00000000
[04:04:27.690]    __ap=0x00000000
[04:04:27.690]    __traceout=0x00000000      (Trace Disabled)
[04:04:27.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:04:27.691]    __FlashAddr=0x00000000
[04:04:27.691]    __FlashLen=0x00000000
[04:04:27.692]    __FlashArg=0x00000000
[04:04:27.692]    __FlashOp=0x00000000
[04:04:27.692]    __Result=0x00000000
[04:04:27.692]  </debugvars>
[04:04:27.692]  
[04:04:27.692]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:04:27.692]    <block atomic="false" info="">
[04:04:27.692]      __var deviceID = 0;
[04:04:27.692]        // -> [deviceID <= 0x00000000]
[04:04:27.692]      __var version = 0;
[04:04:27.692]        // -> [version <= 0x00000000]
[04:04:27.692]      __var partNum = 0;
[04:04:27.692]        // -> [partNum <= 0x00000000]
[04:04:27.692]      __var manuf = 0;
[04:04:27.692]        // -> [manuf <= 0x00000000]
[04:04:27.692]      __var isMSPM0G1X0X_G3X0X = 0;
[04:04:27.692]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:04:27.692]      __var isProduction = 0;
[04:04:27.692]        // -> [isProduction <= 0x00000000]
[04:04:27.692]      __var continueId = 0;
[04:04:27.692]        // -> [continueId <= 0x00000000]
[04:04:27.692]      deviceID =   Read32(0x41C40004);
[04:04:27.692]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:04:27.692]        // -> [deviceID <= 0x2BB8802F]
[04:04:27.692]      version = deviceID >> 28;
[04:04:27.692]        // -> [version <= 0x00000002]
[04:04:27.692]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:04:27.692]        // -> [partNum <= 0x0000BB88]
[04:04:27.692]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:04:27.692]        // -> [manuf <= 0x00000017]
[04:04:27.692]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:04:27.692]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:04:27.692]      isProduction = (version > 0);
[04:04:27.692]        // -> [isProduction <= 0x00000001]
[04:04:27.692]    </block>
[04:04:27.692]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:04:27.692]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:04:27.700]        // =>  FALSE
[04:04:27.700]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:04:27.700]    </control>
[04:04:27.700]    <control if="continueId == 4" while="" timeout="0" info="">
[04:04:27.700]      // if-block "continueId == 4"
[04:04:27.700]        // =>  FALSE
[04:04:27.700]      // skip if-block "continueId == 4"
[04:04:27.700]    </control>
[04:04:27.700]    <control if="!isProduction" while="" timeout="0" info="">
[04:04:27.700]      // if-block "!isProduction"
[04:04:27.700]        // =>  FALSE
[04:04:27.700]      // skip if-block "!isProduction"
[04:04:27.700]    </control>
[04:04:27.700]  </sequence>
[04:04:27.701]  
[04:07:34.874]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:07:34.874]  
[04:07:34.885]  <debugvars>
[04:07:34.885]    // Pre-defined
[04:07:34.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:34.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:07:34.885]    __dp=0x00000000
[04:07:34.885]    __ap=0x00000000
[04:07:34.885]    __traceout=0x00000000      (Trace Disabled)
[04:07:34.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:34.885]    __FlashAddr=0x00000000
[04:07:34.885]    __FlashLen=0x00000000
[04:07:34.885]    __FlashArg=0x00000000
[04:07:34.885]    __FlashOp=0x00000000
[04:07:34.885]    __Result=0x00000000
[04:07:34.885]  </debugvars>
[04:07:34.885]  
[04:07:34.885]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:07:34.885]    <block atomic="false" info="">
[04:07:34.885]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:07:34.885]        // -> [isSWJ <= 0x00000001]
[04:07:34.885]      __var hasDormant = __protocol & 0x00020000;
[04:07:34.885]        // -> [hasDormant <= 0x00000000]
[04:07:34.885]      __var protType   = __protocol & 0x0000FFFF;
[04:07:34.885]        // -> [protType <= 0x00000002]
[04:07:34.885]    </block>
[04:07:34.885]    <control if="protType == 1" while="" timeout="0" info="">
[04:07:34.885]      // if-block "protType == 1"
[04:07:34.885]        // =>  FALSE
[04:07:34.885]      // skip if-block "protType == 1"
[04:07:34.885]    </control>
[04:07:34.885]    <control if="protType == 2" while="" timeout="0" info="">
[04:07:34.885]      // if-block "protType == 2"
[04:07:34.885]        // =>  TRUE
[04:07:34.885]      <control if="isSWJ" while="" timeout="0" info="">
[04:07:34.885]        // if-block "isSWJ"
[04:07:34.885]          // =>  TRUE
[04:07:34.885]        <control if="hasDormant" while="" timeout="0" info="">
[04:07:34.885]          // if-block "hasDormant"
[04:07:34.885]            // =>  FALSE
[04:07:34.885]          // skip if-block "hasDormant"
[04:07:34.885]        </control>
[04:07:34.885]        <control if="!hasDormant" while="" timeout="0" info="">
[04:07:34.885]          // if-block "!hasDormant"
[04:07:34.885]            // =>  TRUE
[04:07:34.885]          <block atomic="false" info="">
[04:07:34.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:07:34.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:34.885]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:07:34.885]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:07:34.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:07:34.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:34.894]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:07:34.894]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:07:34.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:07:34.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:34.894]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:07:34.894]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:07:34.894]          </block>
[04:07:34.894]          // end if-block "!hasDormant"
[04:07:34.894]        </control>
[04:07:34.894]        // end if-block "isSWJ"
[04:07:34.894]      </control>
[04:07:34.894]      <control if="!isSWJ" while="" timeout="0" info="">
[04:07:34.894]        // if-block "!isSWJ"
[04:07:34.894]          // =>  FALSE
[04:07:34.894]        // skip if-block "!isSWJ"
[04:07:34.894]      </control>
[04:07:34.894]      <block atomic="false" info="">
[04:07:34.894]        ReadDP(0x0);
[04:07:34.894]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:07:34.894]      </block>
[04:07:34.894]      // end if-block "protType == 2"
[04:07:34.894]    </control>
[04:07:34.894]  </sequence>
[04:07:34.894]  
[04:07:34.904]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:07:34.904]  
[04:07:34.904]  <debugvars>
[04:07:34.904]    // Pre-defined
[04:07:34.904]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:34.904]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:07:34.904]    __dp=0x00000000
[04:07:34.904]    __ap=0x00000000
[04:07:34.904]    __traceout=0x00000000      (Trace Disabled)
[04:07:34.904]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:34.904]    __FlashAddr=0x00000000
[04:07:34.904]    __FlashLen=0x00000000
[04:07:34.904]    __FlashArg=0x00000000
[04:07:34.904]    __FlashOp=0x00000000
[04:07:34.904]    __Result=0x00000000
[04:07:34.904]  </debugvars>
[04:07:34.904]  
[04:07:34.904]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:07:34.904]    <block atomic="false" info="">
[04:07:34.904]      __var SW_DP_ABORT       = 0x0;
[04:07:34.904]        // -> [SW_DP_ABORT <= 0x00000000]
[04:07:34.904]      __var DP_CTRL_STAT      = 0x4;
[04:07:34.904]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:07:34.904]      __var DP_SELECT         = 0x8;
[04:07:34.904]        // -> [DP_SELECT <= 0x00000008]
[04:07:34.904]      __var powered_down      = 0;
[04:07:34.904]        // -> [powered_down <= 0x00000000]
[04:07:34.904]      WriteDP(DP_SELECT, 0x00000000);
[04:07:34.904]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:07:34.904]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:07:34.904]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:07:34.904]        // -> [powered_down <= 0x00000001]
[04:07:34.904]    </block>
[04:07:34.904]    <control if="powered_down" while="" timeout="0" info="">
[04:07:34.904]      // if-block "powered_down"
[04:07:34.904]        // =>  TRUE
[04:07:34.904]      <block atomic="false" info="">
[04:07:34.904]        Message(0, "Debug/System power-up request sent");
[04:07:34.914]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:07:34.914]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:07:34.914]      </block>
[04:07:34.914]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:07:34.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:07:34.914]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:07:34.914]        // while-condition  =>  FALSE
[04:07:34.914]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:07:34.914]      </control>
[04:07:34.914]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:07:34.914]        // if-block "(__protocol & 0xFFFF) == 1"
[04:07:34.914]          // =>  FALSE
[04:07:34.914]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:07:34.914]      </control>
[04:07:34.914]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:07:34.914]        // if-block "(__protocol & 0xFFFF) == 2"
[04:07:34.914]          // =>  TRUE
[04:07:34.914]        <block atomic="false" info="">
[04:07:34.914]          Message(0, "executing SWD power up");
[04:07:34.914]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:07:34.914]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:07:34.914]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:07:34.924]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:07:34.924]        </block>
[04:07:34.924]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:07:34.924]      </control>
[04:07:34.924]      // end if-block "powered_down"
[04:07:34.924]    </control>
[04:07:34.924]    <block atomic="false" info="">
[04:07:34.924]      __var DEBUG_PORT_VAL    = 0;
[04:07:34.924]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:07:34.924]      __var ACCESS_POINT_VAL  = 0;
[04:07:34.924]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:07:34.924]      __ap = 1; 
[04:07:34.924]        // -> [__ap <= 0x00000001]
[04:07:34.924]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:07:34.924]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:07:34.924]      __ap = 4;
[04:07:34.924]        // -> [__ap <= 0x00000004]
[04:07:34.924]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:07:34.924]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:07:34.924]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:07:34.934]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:07:34.936]    </block>
[04:07:34.936]    <block atomic="false" info="">
[04:07:34.936]      __var nReset = 0x80;
[04:07:34.936]        // -> [nReset <= 0x00000080]
[04:07:34.936]      __var canReadPins = 0;
[04:07:34.936]        // -> [canReadPins <= 0x00000000]
[04:07:34.936]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:07:34.936]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:07:34.936]        // -> [canReadPins <= 0x00000001]
[04:07:34.936]    </block>
[04:07:34.936]    <control if="" while="1" timeout="200" info="">
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.936]      // while-condition  =>  TRUE
[04:07:34.936]      // while "1"  (timeout="200")
[04:07:34.945]      // while-condition  =>  TRUE
[04:07:34.945]      // while "1"  (timeout="200")
[04:07:34.945]      // while  =>  TIMEOUT
[04:07:34.945]      // end while "1"
[04:07:34.945]    </control>
[04:07:34.945]    <control if="canReadPins" while="" timeout="0" info="">
[04:07:34.945]      // if-block "canReadPins"
[04:07:34.945]        // =>  TRUE
[04:07:34.945]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:07:34.945]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:07:34.945]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:07:34.945]        // while-condition  =>  FALSE
[04:07:34.945]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:07:34.945]      </control>
[04:07:34.945]      // end if-block "canReadPins"
[04:07:34.945]    </control>
[04:07:34.945]    <control if="!canReadPins" while="" timeout="0" info="">
[04:07:34.945]      // if-block "!canReadPins"
[04:07:34.945]        // =>  FALSE
[04:07:34.945]      // skip if-block "!canReadPins"
[04:07:34.945]    </control>
[04:07:34.945]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:07:34.945]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:07:34.945]        // =>  TRUE
[04:07:34.945]      <block atomic="false" info="">
[04:07:34.945]        WriteAP(0x00, 0x190008);
[04:07:34.945]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:07:34.945]        WriteAP(0xF0, 0x01);
[04:07:34.955]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:07:34.955]      </block>
[04:07:34.955]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:07:34.955]    </control>
[04:07:34.955]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:07:34.955]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:07:34.955]        // =>  FALSE
[04:07:34.955]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:07:34.955]    </control>
[04:07:34.955]    <block atomic="false" info="">
[04:07:34.955]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:07:34.959]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:07:34.959]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:07:34.959]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:07:34.961]      __ap = 0; //lets make sure we reset the access point selection
[04:07:34.961]        // -> [__ap <= 0x00000000]
[04:07:34.961]    </block>
[04:07:34.961]  </sequence>
[04:07:34.961]  
[04:07:34.973]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:07:34.973]  
[04:07:34.973]  <debugvars>
[04:07:34.973]    // Pre-defined
[04:07:34.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:34.973]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:07:34.973]    __dp=0x00000000
[04:07:34.973]    __ap=0x00000000
[04:07:34.973]    __traceout=0x00000000      (Trace Disabled)
[04:07:34.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:34.973]    __FlashAddr=0x00000000
[04:07:34.983]    __FlashLen=0x00000000
[04:07:34.983]    __FlashArg=0x00000000
[04:07:34.983]    __FlashOp=0x00000000
[04:07:34.983]    __Result=0x00000000
[04:07:34.983]  </debugvars>
[04:07:34.983]  
[04:07:34.983]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:07:34.983]    <block atomic="false" info="">
[04:07:34.983]      __var deviceID = 0;
[04:07:34.983]        // -> [deviceID <= 0x00000000]
[04:07:34.983]      __var version = 0;
[04:07:34.984]        // -> [version <= 0x00000000]
[04:07:34.984]      __var partNum = 0;
[04:07:34.984]        // -> [partNum <= 0x00000000]
[04:07:34.984]      __var manuf = 0;
[04:07:34.984]        // -> [manuf <= 0x00000000]
[04:07:34.984]      __var isMSPM0G1X0X_G3X0X = 0;
[04:07:34.985]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:07:34.985]      __var isProduction = 0;
[04:07:34.985]        // -> [isProduction <= 0x00000000]
[04:07:34.985]      __var continueId = 0;
[04:07:34.985]        // -> [continueId <= 0x00000000]
[04:07:34.985]      deviceID =   Read32(0x41C40004);
[04:07:34.985]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:07:34.985]        // -> [deviceID <= 0x2BB8802F]
[04:07:34.985]      version = deviceID >> 28;
[04:07:34.985]        // -> [version <= 0x00000002]
[04:07:34.985]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:07:34.985]        // -> [partNum <= 0x0000BB88]
[04:07:34.985]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:07:34.985]        // -> [manuf <= 0x00000017]
[04:07:34.985]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:07:34.985]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:07:34.985]      isProduction = (version > 0);
[04:07:34.985]        // -> [isProduction <= 0x00000001]
[04:07:34.985]    </block>
[04:07:34.985]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:07:34.985]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:07:34.985]        // =>  FALSE
[04:07:34.985]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:07:34.985]    </control>
[04:07:34.985]    <control if="continueId == 4" while="" timeout="0" info="">
[04:07:34.985]      // if-block "continueId == 4"
[04:07:34.985]        // =>  FALSE
[04:07:34.985]      // skip if-block "continueId == 4"
[04:07:34.985]    </control>
[04:07:34.985]    <control if="!isProduction" while="" timeout="0" info="">
[04:07:34.985]      // if-block "!isProduction"
[04:07:34.985]        // =>  FALSE
[04:07:34.985]      // skip if-block "!isProduction"
[04:07:34.985]    </control>
[04:07:34.985]  </sequence>
[04:07:34.985]  
[04:07:41.821]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:07:41.821]  
[04:07:41.834]  <debugvars>
[04:07:41.834]    // Pre-defined
[04:07:41.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:41.834]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:07:41.834]    __dp=0x00000000
[04:07:41.834]    __ap=0x00000000
[04:07:41.834]    __traceout=0x00000000      (Trace Disabled)
[04:07:41.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:41.834]    __FlashAddr=0x00000000
[04:07:41.834]    __FlashLen=0x00000000
[04:07:41.834]    __FlashArg=0x00000000
[04:07:41.834]    __FlashOp=0x00000000
[04:07:41.834]    __Result=0x00000000
[04:07:41.834]  </debugvars>
[04:07:41.834]  
[04:07:41.834]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:07:41.834]    <block atomic="false" info="">
[04:07:41.834]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:07:41.834]        // -> [isSWJ <= 0x00000001]
[04:07:41.834]      __var hasDormant = __protocol & 0x00020000;
[04:07:41.834]        // -> [hasDormant <= 0x00000000]
[04:07:41.834]      __var protType   = __protocol & 0x0000FFFF;
[04:07:41.834]        // -> [protType <= 0x00000002]
[04:07:41.834]    </block>
[04:07:41.834]    <control if="protType == 1" while="" timeout="0" info="">
[04:07:41.834]      // if-block "protType == 1"
[04:07:41.834]        // =>  FALSE
[04:07:41.834]      // skip if-block "protType == 1"
[04:07:41.834]    </control>
[04:07:41.834]    <control if="protType == 2" while="" timeout="0" info="">
[04:07:41.834]      // if-block "protType == 2"
[04:07:41.834]        // =>  TRUE
[04:07:41.834]      <control if="isSWJ" while="" timeout="0" info="">
[04:07:41.834]        // if-block "isSWJ"
[04:07:41.834]          // =>  TRUE
[04:07:41.834]        <control if="hasDormant" while="" timeout="0" info="">
[04:07:41.834]          // if-block "hasDormant"
[04:07:41.834]            // =>  FALSE
[04:07:41.834]          // skip if-block "hasDormant"
[04:07:41.834]        </control>
[04:07:41.834]        <control if="!hasDormant" while="" timeout="0" info="">
[04:07:41.834]          // if-block "!hasDormant"
[04:07:41.834]            // =>  TRUE
[04:07:41.834]          <block atomic="false" info="">
[04:07:41.834]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:07:41.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:41.834]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:07:41.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:07:41.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:07:41.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:41.840]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:07:41.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:07:41.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:07:41.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:41.840]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:07:41.840]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:07:41.840]          </block>
[04:07:41.840]          // end if-block "!hasDormant"
[04:07:41.840]        </control>
[04:07:41.840]        // end if-block "isSWJ"
[04:07:41.840]      </control>
[04:07:41.840]      <control if="!isSWJ" while="" timeout="0" info="">
[04:07:41.840]        // if-block "!isSWJ"
[04:07:41.840]          // =>  FALSE
[04:07:41.840]        // skip if-block "!isSWJ"
[04:07:41.840]      </control>
[04:07:41.840]      <block atomic="false" info="">
[04:07:41.840]        ReadDP(0x0);
[04:07:41.840]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:07:41.840]      </block>
[04:07:41.840]      // end if-block "protType == 2"
[04:07:41.840]    </control>
[04:07:41.840]  </sequence>
[04:07:41.840]  
[04:07:41.852]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:07:41.852]  
[04:07:41.852]  <debugvars>
[04:07:41.853]    // Pre-defined
[04:07:41.853]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:41.853]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:07:41.853]    __dp=0x00000000
[04:07:41.853]    __ap=0x00000000
[04:07:41.853]    __traceout=0x00000000      (Trace Disabled)
[04:07:41.853]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:41.853]    __FlashAddr=0x00000000
[04:07:41.853]    __FlashLen=0x00000000
[04:07:41.853]    __FlashArg=0x00000000
[04:07:41.853]    __FlashOp=0x00000000
[04:07:41.853]    __Result=0x00000000
[04:07:41.853]  </debugvars>
[04:07:41.853]  
[04:07:41.853]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:07:41.853]    <block atomic="false" info="">
[04:07:41.853]      __var SW_DP_ABORT       = 0x0;
[04:07:41.853]        // -> [SW_DP_ABORT <= 0x00000000]
[04:07:41.853]      __var DP_CTRL_STAT      = 0x4;
[04:07:41.853]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:07:41.853]      __var DP_SELECT         = 0x8;
[04:07:41.853]        // -> [DP_SELECT <= 0x00000008]
[04:07:41.853]      __var powered_down      = 0;
[04:07:41.853]        // -> [powered_down <= 0x00000000]
[04:07:41.853]      WriteDP(DP_SELECT, 0x00000000);
[04:07:41.853]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:07:41.853]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:07:41.853]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:07:41.853]        // -> [powered_down <= 0x00000001]
[04:07:41.853]    </block>
[04:07:41.853]    <control if="powered_down" while="" timeout="0" info="">
[04:07:41.853]      // if-block "powered_down"
[04:07:41.853]        // =>  TRUE
[04:07:41.853]      <block atomic="false" info="">
[04:07:41.853]        Message(0, "Debug/System power-up request sent");
[04:07:41.853]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:07:41.861]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:07:41.861]      </block>
[04:07:41.861]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:07:41.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:07:41.861]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:07:41.861]        // while-condition  =>  FALSE
[04:07:41.861]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:07:41.861]      </control>
[04:07:41.861]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:07:41.861]        // if-block "(__protocol & 0xFFFF) == 1"
[04:07:41.861]          // =>  FALSE
[04:07:41.861]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:07:41.861]      </control>
[04:07:41.861]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:07:41.861]        // if-block "(__protocol & 0xFFFF) == 2"
[04:07:41.861]          // =>  TRUE
[04:07:41.861]        <block atomic="false" info="">
[04:07:41.861]          Message(0, "executing SWD power up");
[04:07:41.861]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:07:41.861]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:07:41.861]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:07:41.871]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:07:41.871]        </block>
[04:07:41.871]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:07:41.871]      </control>
[04:07:41.871]      // end if-block "powered_down"
[04:07:41.871]    </control>
[04:07:41.871]    <block atomic="false" info="">
[04:07:41.871]      __var DEBUG_PORT_VAL    = 0;
[04:07:41.871]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:07:41.871]      __var ACCESS_POINT_VAL  = 0;
[04:07:41.871]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:07:41.871]      __ap = 1; 
[04:07:41.871]        // -> [__ap <= 0x00000001]
[04:07:41.871]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:07:41.871]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:07:41.871]      __ap = 4;
[04:07:41.871]        // -> [__ap <= 0x00000004]
[04:07:41.871]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:07:41.871]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:07:41.871]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:07:41.871]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:07:41.881]    </block>
[04:07:41.881]    <block atomic="false" info="">
[04:07:41.881]      __var nReset = 0x80;
[04:07:41.881]        // -> [nReset <= 0x00000080]
[04:07:41.881]      __var canReadPins = 0;
[04:07:41.881]        // -> [canReadPins <= 0x00000000]
[04:07:41.881]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:07:41.881]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:07:41.881]        // -> [canReadPins <= 0x00000001]
[04:07:41.881]    </block>
[04:07:41.881]    <control if="" while="1" timeout="200" info="">
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.881]      // while-condition  =>  TRUE
[04:07:41.881]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.891]      // while-condition  =>  TRUE
[04:07:41.891]      // while "1"  (timeout="200")
[04:07:41.901]      // while-condition  =>  TRUE
[04:07:41.901]      // while "1"  (timeout="200")
[04:07:41.901]      // while  =>  TIMEOUT
[04:07:41.901]      // end while "1"
[04:07:41.901]    </control>
[04:07:41.901]    <control if="canReadPins" while="" timeout="0" info="">
[04:07:41.901]      // if-block "canReadPins"
[04:07:41.901]        // =>  TRUE
[04:07:41.901]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:07:41.901]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:07:41.901]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:07:41.901]        // while-condition  =>  FALSE
[04:07:41.901]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:07:41.901]      </control>
[04:07:41.901]      // end if-block "canReadPins"
[04:07:41.901]    </control>
[04:07:41.901]    <control if="!canReadPins" while="" timeout="0" info="">
[04:07:41.901]      // if-block "!canReadPins"
[04:07:41.901]        // =>  FALSE
[04:07:41.901]      // skip if-block "!canReadPins"
[04:07:41.901]    </control>
[04:07:41.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:07:41.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:07:41.901]        // =>  TRUE
[04:07:41.901]      <block atomic="false" info="">
[04:07:41.901]        WriteAP(0x00, 0x190008);
[04:07:41.901]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:07:41.901]        WriteAP(0xF0, 0x01);
[04:07:41.901]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:07:41.901]      </block>
[04:07:41.901]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:07:41.901]    </control>
[04:07:41.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:07:41.911]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:07:41.911]        // =>  FALSE
[04:07:41.911]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:07:41.911]    </control>
[04:07:41.911]    <block atomic="false" info="">
[04:07:41.911]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:07:41.911]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:07:41.911]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:07:41.911]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:07:41.911]      __ap = 0; //lets make sure we reset the access point selection
[04:07:41.911]        // -> [__ap <= 0x00000000]
[04:07:41.911]    </block>
[04:07:41.911]  </sequence>
[04:07:41.911]  
[04:07:41.931]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:07:41.931]  
[04:07:41.931]  <debugvars>
[04:07:41.931]    // Pre-defined
[04:07:41.931]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:41.931]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:07:41.931]    __dp=0x00000000
[04:07:41.931]    __ap=0x00000000
[04:07:41.931]    __traceout=0x00000000      (Trace Disabled)
[04:07:41.931]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:41.931]    __FlashAddr=0x00000000
[04:07:41.931]    __FlashLen=0x00000000
[04:07:41.931]    __FlashArg=0x00000000
[04:07:41.931]    __FlashOp=0x00000000
[04:07:41.931]    __Result=0x00000000
[04:07:41.931]  </debugvars>
[04:07:41.931]  
[04:07:41.931]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:07:41.931]    <block atomic="false" info="">
[04:07:41.931]      __var deviceID = 0;
[04:07:41.931]        // -> [deviceID <= 0x00000000]
[04:07:41.931]      __var version = 0;
[04:07:41.931]        // -> [version <= 0x00000000]
[04:07:41.931]      __var partNum = 0;
[04:07:41.931]        // -> [partNum <= 0x00000000]
[04:07:41.931]      __var manuf = 0;
[04:07:41.931]        // -> [manuf <= 0x00000000]
[04:07:41.931]      __var isMSPM0G1X0X_G3X0X = 0;
[04:07:41.931]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:07:41.931]      __var isProduction = 0;
[04:07:41.931]        // -> [isProduction <= 0x00000000]
[04:07:41.931]      __var continueId = 0;
[04:07:41.931]        // -> [continueId <= 0x00000000]
[04:07:41.931]      deviceID =   Read32(0x41C40004);
[04:07:41.941]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:07:41.941]        // -> [deviceID <= 0x2BB8802F]
[04:07:41.941]      version = deviceID >> 28;
[04:07:41.941]        // -> [version <= 0x00000002]
[04:07:41.941]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:07:41.941]        // -> [partNum <= 0x0000BB88]
[04:07:41.941]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:07:41.941]        // -> [manuf <= 0x00000017]
[04:07:41.941]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:07:41.941]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:07:41.941]      isProduction = (version > 0);
[04:07:41.941]        // -> [isProduction <= 0x00000001]
[04:07:41.941]    </block>
[04:07:41.941]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:07:41.941]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:07:41.941]        // =>  FALSE
[04:07:41.941]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:07:41.941]    </control>
[04:07:41.941]    <control if="continueId == 4" while="" timeout="0" info="">
[04:07:41.941]      // if-block "continueId == 4"
[04:07:41.941]        // =>  FALSE
[04:07:41.941]      // skip if-block "continueId == 4"
[04:07:41.941]    </control>
[04:07:41.941]    <control if="!isProduction" while="" timeout="0" info="">
[04:07:41.941]      // if-block "!isProduction"
[04:07:41.941]        // =>  FALSE
[04:07:41.941]      // skip if-block "!isProduction"
[04:07:41.941]    </control>
[04:07:41.941]  </sequence>
[04:07:41.941]  
[04:08:33.245]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:08:33.245]  
[04:08:33.261]  <debugvars>
[04:08:33.261]    // Pre-defined
[04:08:33.261]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:08:33.261]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:08:33.261]    __dp=0x00000000
[04:08:33.261]    __ap=0x00000000
[04:08:33.261]    __traceout=0x00000000      (Trace Disabled)
[04:08:33.261]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:08:33.261]    __FlashAddr=0x00000000
[04:08:33.261]    __FlashLen=0x00000000
[04:08:33.261]    __FlashArg=0x00000000
[04:08:33.261]    __FlashOp=0x00000000
[04:08:33.261]    __Result=0x00000000
[04:08:33.261]  </debugvars>
[04:08:33.261]  
[04:08:33.261]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:08:33.261]    <block atomic="false" info="">
[04:08:33.261]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:08:33.261]        // -> [isSWJ <= 0x00000001]
[04:08:33.261]      __var hasDormant = __protocol & 0x00020000;
[04:08:33.261]        // -> [hasDormant <= 0x00000000]
[04:08:33.261]      __var protType   = __protocol & 0x0000FFFF;
[04:08:33.261]        // -> [protType <= 0x00000002]
[04:08:33.261]    </block>
[04:08:33.261]    <control if="protType == 1" while="" timeout="0" info="">
[04:08:33.261]      // if-block "protType == 1"
[04:08:33.261]        // =>  FALSE
[04:08:33.261]      // skip if-block "protType == 1"
[04:08:33.261]    </control>
[04:08:33.261]    <control if="protType == 2" while="" timeout="0" info="">
[04:08:33.261]      // if-block "protType == 2"
[04:08:33.261]        // =>  TRUE
[04:08:33.261]      <control if="isSWJ" while="" timeout="0" info="">
[04:08:33.261]        // if-block "isSWJ"
[04:08:33.261]          // =>  TRUE
[04:08:33.261]        <control if="hasDormant" while="" timeout="0" info="">
[04:08:33.261]          // if-block "hasDormant"
[04:08:33.261]            // =>  FALSE
[04:08:33.261]          // skip if-block "hasDormant"
[04:08:33.261]        </control>
[04:08:33.261]        <control if="!hasDormant" while="" timeout="0" info="">
[04:08:33.261]          // if-block "!hasDormant"
[04:08:33.261]            // =>  TRUE
[04:08:33.261]          <block atomic="false" info="">
[04:08:33.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:08:33.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:08:33.265]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:08:33.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:08:33.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:08:33.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:08:33.265]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:08:33.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:08:33.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:08:33.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:08:33.265]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:08:33.265]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:08:33.265]          </block>
[04:08:33.265]          // end if-block "!hasDormant"
[04:08:33.265]        </control>
[04:08:33.275]        // end if-block "isSWJ"
[04:08:33.275]      </control>
[04:08:33.275]      <control if="!isSWJ" while="" timeout="0" info="">
[04:08:33.275]        // if-block "!isSWJ"
[04:08:33.275]          // =>  FALSE
[04:08:33.275]        // skip if-block "!isSWJ"
[04:08:33.275]      </control>
[04:08:33.275]      <block atomic="false" info="">
[04:08:33.275]        ReadDP(0x0);
[04:08:33.275]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:08:33.275]      </block>
[04:08:33.275]      // end if-block "protType == 2"
[04:08:33.275]    </control>
[04:08:33.275]  </sequence>
[04:08:33.275]  
[04:08:33.275]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:08:33.275]  
[04:08:33.275]  <debugvars>
[04:08:33.275]    // Pre-defined
[04:08:33.275]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:08:33.275]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:08:33.275]    __dp=0x00000000
[04:08:33.275]    __ap=0x00000000
[04:08:33.275]    __traceout=0x00000000      (Trace Disabled)
[04:08:33.275]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:08:33.275]    __FlashAddr=0x00000000
[04:08:33.275]    __FlashLen=0x00000000
[04:08:33.275]    __FlashArg=0x00000000
[04:08:33.275]    __FlashOp=0x00000000
[04:08:33.275]    __Result=0x00000000
[04:08:33.275]  </debugvars>
[04:08:33.275]  
[04:08:33.275]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:08:33.275]    <block atomic="false" info="">
[04:08:33.275]      __var SW_DP_ABORT       = 0x0;
[04:08:33.275]        // -> [SW_DP_ABORT <= 0x00000000]
[04:08:33.275]      __var DP_CTRL_STAT      = 0x4;
[04:08:33.275]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:08:33.275]      __var DP_SELECT         = 0x8;
[04:08:33.275]        // -> [DP_SELECT <= 0x00000008]
[04:08:33.275]      __var powered_down      = 0;
[04:08:33.275]        // -> [powered_down <= 0x00000000]
[04:08:33.275]      WriteDP(DP_SELECT, 0x00000000);
[04:08:33.275]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:08:33.275]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:08:33.285]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:08:33.285]        // -> [powered_down <= 0x00000001]
[04:08:33.285]    </block>
[04:08:33.285]    <control if="powered_down" while="" timeout="0" info="">
[04:08:33.285]      // if-block "powered_down"
[04:08:33.285]        // =>  TRUE
[04:08:33.285]      <block atomic="false" info="">
[04:08:33.285]        Message(0, "Debug/System power-up request sent");
[04:08:33.285]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:08:33.285]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:08:33.285]      </block>
[04:08:33.285]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:08:33.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:08:33.285]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:08:33.285]        // while-condition  =>  FALSE
[04:08:33.285]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:08:33.285]      </control>
[04:08:33.285]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:08:33.285]        // if-block "(__protocol & 0xFFFF) == 1"
[04:08:33.285]          // =>  FALSE
[04:08:33.285]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:08:33.285]      </control>
[04:08:33.285]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:08:33.295]        // if-block "(__protocol & 0xFFFF) == 2"
[04:08:33.295]          // =>  TRUE
[04:08:33.295]        <block atomic="false" info="">
[04:08:33.295]          Message(0, "executing SWD power up");
[04:08:33.295]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:08:33.295]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:08:33.295]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:08:33.295]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:08:33.295]        </block>
[04:08:33.295]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:08:33.295]      </control>
[04:08:33.295]      // end if-block "powered_down"
[04:08:33.295]    </control>
[04:08:33.295]    <block atomic="false" info="">
[04:08:33.295]      __var DEBUG_PORT_VAL    = 0;
[04:08:33.295]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:08:33.295]      __var ACCESS_POINT_VAL  = 0;
[04:08:33.295]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:08:33.295]      __ap = 1; 
[04:08:33.295]        // -> [__ap <= 0x00000001]
[04:08:33.295]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:08:33.305]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:08:33.305]      __ap = 4;
[04:08:33.305]        // -> [__ap <= 0x00000004]
[04:08:33.305]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:08:33.305]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:08:33.305]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:08:33.305]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:08:33.305]    </block>
[04:08:33.305]    <block atomic="false" info="">
[04:08:33.305]      __var nReset = 0x80;
[04:08:33.305]        // -> [nReset <= 0x00000080]
[04:08:33.305]      __var canReadPins = 0;
[04:08:33.305]        // -> [canReadPins <= 0x00000000]
[04:08:33.305]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:08:33.305]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:08:33.305]        // -> [canReadPins <= 0x00000001]
[04:08:33.305]    </block>
[04:08:33.305]    <control if="" while="1" timeout="200" info="">
[04:08:33.305]      // while "1"  (timeout="200")
[04:08:33.305]      // while-condition  =>  TRUE
[04:08:33.305]      // while "1"  (timeout="200")
[04:08:33.305]      // while-condition  =>  TRUE
[04:08:33.305]      // while "1"  (timeout="200")
[04:08:33.305]      // while-condition  =>  TRUE
[04:08:33.305]      // while "1"  (timeout="200")
[04:08:33.315]      // while-condition  =>  TRUE
[04:08:33.315]      // while "1"  (timeout="200")
[04:08:33.315]      // while  =>  TIMEOUT
[04:08:33.315]      // end while "1"
[04:08:33.315]    </control>
[04:08:33.315]    <control if="canReadPins" while="" timeout="0" info="">
[04:08:33.315]      // if-block "canReadPins"
[04:08:33.315]        // =>  TRUE
[04:08:33.315]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:08:33.315]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:08:33.315]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:08:33.315]        // while-condition  =>  FALSE
[04:08:33.315]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:08:33.315]      </control>
[04:08:33.315]      // end if-block "canReadPins"
[04:08:33.315]    </control>
[04:08:33.315]    <control if="!canReadPins" while="" timeout="0" info="">
[04:08:33.315]      // if-block "!canReadPins"
[04:08:33.315]        // =>  FALSE
[04:08:33.315]      // skip if-block "!canReadPins"
[04:08:33.315]    </control>
[04:08:33.315]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:08:33.315]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:08:33.315]        // =>  TRUE
[04:08:33.315]      <block atomic="false" info="">
[04:08:33.315]        WriteAP(0x00, 0x190008);
[04:08:33.315]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:08:33.315]        WriteAP(0xF0, 0x01);
[04:08:33.325]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:08:33.325]      </block>
[04:08:33.325]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:08:33.325]    </control>
[04:08:33.325]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:08:33.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:08:33.327]        // =>  FALSE
[04:08:33.327]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:08:33.327]    </control>
[04:08:33.327]    <block atomic="false" info="">
[04:08:33.327]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:08:33.327]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:08:33.327]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:08:33.327]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:08:33.327]      __ap = 0; //lets make sure we reset the access point selection
[04:08:33.327]        // -> [__ap <= 0x00000000]
[04:08:33.327]    </block>
[04:08:33.327]  </sequence>
[04:08:33.327]  
[04:08:33.345]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:08:33.345]  
[04:08:33.345]  <debugvars>
[04:08:33.345]    // Pre-defined
[04:08:33.345]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:08:33.345]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:08:33.345]    __dp=0x00000000
[04:08:33.345]    __ap=0x00000000
[04:08:33.345]    __traceout=0x00000000      (Trace Disabled)
[04:08:33.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:08:33.345]    __FlashAddr=0x00000000
[04:08:33.345]    __FlashLen=0x00000000
[04:08:33.345]    __FlashArg=0x00000000
[04:08:33.345]    __FlashOp=0x00000000
[04:08:33.345]    __Result=0x00000000
[04:08:33.345]  </debugvars>
[04:08:33.345]  
[04:08:33.345]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:08:33.345]    <block atomic="false" info="">
[04:08:33.345]      __var deviceID = 0;
[04:08:33.345]        // -> [deviceID <= 0x00000000]
[04:08:33.345]      __var version = 0;
[04:08:33.345]        // -> [version <= 0x00000000]
[04:08:33.345]      __var partNum = 0;
[04:08:33.345]        // -> [partNum <= 0x00000000]
[04:08:33.345]      __var manuf = 0;
[04:08:33.345]        // -> [manuf <= 0x00000000]
[04:08:33.345]      __var isMSPM0G1X0X_G3X0X = 0;
[04:08:33.345]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:08:33.345]      __var isProduction = 0;
[04:08:33.345]        // -> [isProduction <= 0x00000000]
[04:08:33.345]      __var continueId = 0;
[04:08:33.345]        // -> [continueId <= 0x00000000]
[04:08:33.345]      deviceID =   Read32(0x41C40004);
[04:08:33.355]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:08:33.355]        // -> [deviceID <= 0x2BB8802F]
[04:08:33.355]      version = deviceID >> 28;
[04:08:33.355]        // -> [version <= 0x00000002]
[04:08:33.355]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:08:33.355]        // -> [partNum <= 0x0000BB88]
[04:08:33.355]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:08:33.355]        // -> [manuf <= 0x00000017]
[04:08:33.355]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:08:33.355]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:08:33.355]      isProduction = (version > 0);
[04:08:33.355]        // -> [isProduction <= 0x00000001]
[04:08:33.355]    </block>
[04:08:33.355]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:08:33.355]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:08:33.355]        // =>  FALSE
[04:08:33.355]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:08:33.355]    </control>
[04:08:33.355]    <control if="continueId == 4" while="" timeout="0" info="">
[04:08:33.355]      // if-block "continueId == 4"
[04:08:33.355]        // =>  FALSE
[04:08:33.355]      // skip if-block "continueId == 4"
[04:08:33.355]    </control>
[04:08:33.355]    <control if="!isProduction" while="" timeout="0" info="">
[04:08:33.355]      // if-block "!isProduction"
[04:08:33.355]        // =>  FALSE
[04:08:33.355]      // skip if-block "!isProduction"
[04:08:33.355]    </control>
[04:08:33.355]  </sequence>
[04:08:33.355]  
[04:09:08.924]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:09:08.924]  
[04:09:08.936]  <debugvars>
[04:09:08.936]    // Pre-defined
[04:09:08.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:08.936]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:09:08.936]    __dp=0x00000000
[04:09:08.936]    __ap=0x00000000
[04:09:08.936]    __traceout=0x00000000      (Trace Disabled)
[04:09:08.936]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:08.936]    __FlashAddr=0x00000000
[04:09:08.936]    __FlashLen=0x00000000
[04:09:08.936]    __FlashArg=0x00000000
[04:09:08.936]    __FlashOp=0x00000000
[04:09:08.936]    __Result=0x00000000
[04:09:08.936]  </debugvars>
[04:09:08.936]  
[04:09:08.936]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:09:08.936]    <block atomic="false" info="">
[04:09:08.936]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:09:08.936]        // -> [isSWJ <= 0x00000001]
[04:09:08.936]      __var hasDormant = __protocol & 0x00020000;
[04:09:08.936]        // -> [hasDormant <= 0x00000000]
[04:09:08.936]      __var protType   = __protocol & 0x0000FFFF;
[04:09:08.936]        // -> [protType <= 0x00000002]
[04:09:08.936]    </block>
[04:09:08.936]    <control if="protType == 1" while="" timeout="0" info="">
[04:09:08.936]      // if-block "protType == 1"
[04:09:08.936]        // =>  FALSE
[04:09:08.936]      // skip if-block "protType == 1"
[04:09:08.936]    </control>
[04:09:08.936]    <control if="protType == 2" while="" timeout="0" info="">
[04:09:08.936]      // if-block "protType == 2"
[04:09:08.936]        // =>  TRUE
[04:09:08.936]      <control if="isSWJ" while="" timeout="0" info="">
[04:09:08.936]        // if-block "isSWJ"
[04:09:08.936]          // =>  TRUE
[04:09:08.936]        <control if="hasDormant" while="" timeout="0" info="">
[04:09:08.936]          // if-block "hasDormant"
[04:09:08.936]            // =>  FALSE
[04:09:08.936]          // skip if-block "hasDormant"
[04:09:08.936]        </control>
[04:09:08.936]        <control if="!hasDormant" while="" timeout="0" info="">
[04:09:08.936]          // if-block "!hasDormant"
[04:09:08.936]            // =>  TRUE
[04:09:08.936]          <block atomic="false" info="">
[04:09:08.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:09:08.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:09:08.936]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:09:08.936]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:09:08.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:09:08.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:09:08.944]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:09:08.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:09:08.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:09:08.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:09:08.947]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:09:08.947]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:09:08.947]          </block>
[04:09:08.947]          // end if-block "!hasDormant"
[04:09:08.947]        </control>
[04:09:08.947]        // end if-block "isSWJ"
[04:09:08.947]      </control>
[04:09:08.947]      <control if="!isSWJ" while="" timeout="0" info="">
[04:09:08.947]        // if-block "!isSWJ"
[04:09:08.947]          // =>  FALSE
[04:09:08.947]        // skip if-block "!isSWJ"
[04:09:08.947]      </control>
[04:09:08.947]      <block atomic="false" info="">
[04:09:08.947]        ReadDP(0x0);
[04:09:08.947]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:09:08.947]      </block>
[04:09:08.947]      // end if-block "protType == 2"
[04:09:08.947]    </control>
[04:09:08.947]  </sequence>
[04:09:08.947]  
[04:09:08.955]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:09:08.955]  
[04:09:08.955]  <debugvars>
[04:09:08.955]    // Pre-defined
[04:09:08.955]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:08.955]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:09:08.955]    __dp=0x00000000
[04:09:08.955]    __ap=0x00000000
[04:09:08.955]    __traceout=0x00000000      (Trace Disabled)
[04:09:08.955]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:08.955]    __FlashAddr=0x00000000
[04:09:08.956]    __FlashLen=0x00000000
[04:09:08.956]    __FlashArg=0x00000000
[04:09:08.956]    __FlashOp=0x00000000
[04:09:08.956]    __Result=0x00000000
[04:09:08.956]  </debugvars>
[04:09:08.956]  
[04:09:08.956]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:09:08.956]    <block atomic="false" info="">
[04:09:08.956]      __var SW_DP_ABORT       = 0x0;
[04:09:08.956]        // -> [SW_DP_ABORT <= 0x00000000]
[04:09:08.956]      __var DP_CTRL_STAT      = 0x4;
[04:09:08.956]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:09:08.957]      __var DP_SELECT         = 0x8;
[04:09:08.957]        // -> [DP_SELECT <= 0x00000008]
[04:09:08.957]      __var powered_down      = 0;
[04:09:08.957]        // -> [powered_down <= 0x00000000]
[04:09:08.957]      WriteDP(DP_SELECT, 0x00000000);
[04:09:08.957]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:09:08.957]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:09:08.959]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:09:08.959]        // -> [powered_down <= 0x00000001]
[04:09:08.960]    </block>
[04:09:08.960]    <control if="powered_down" while="" timeout="0" info="">
[04:09:08.960]      // if-block "powered_down"
[04:09:08.960]        // =>  TRUE
[04:09:08.960]      <block atomic="false" info="">
[04:09:08.960]        Message(0, "Debug/System power-up request sent");
[04:09:08.963]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:09:08.965]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:09:08.966]      </block>
[04:09:08.966]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:09:08.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:09:08.967]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:09:08.967]        // while-condition  =>  FALSE
[04:09:08.967]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:09:08.967]      </control>
[04:09:08.967]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:09:08.967]        // if-block "(__protocol & 0xFFFF) == 1"
[04:09:08.967]          // =>  FALSE
[04:09:08.967]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:09:08.968]      </control>
[04:09:08.968]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:09:08.968]        // if-block "(__protocol & 0xFFFF) == 2"
[04:09:08.968]          // =>  TRUE
[04:09:08.968]        <block atomic="false" info="">
[04:09:08.968]          Message(0, "executing SWD power up");
[04:09:08.970]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:09:08.972]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:09:08.972]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:09:08.974]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:09:08.974]        </block>
[04:09:08.974]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:09:08.974]      </control>
[04:09:08.974]      // end if-block "powered_down"
[04:09:08.974]    </control>
[04:09:08.974]    <block atomic="false" info="">
[04:09:08.975]      __var DEBUG_PORT_VAL    = 0;
[04:09:08.975]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:09:08.975]      __var ACCESS_POINT_VAL  = 0;
[04:09:08.975]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:09:08.975]      __ap = 1; 
[04:09:08.975]        // -> [__ap <= 0x00000001]
[04:09:08.975]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:09:08.977]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:09:08.977]      __ap = 4;
[04:09:08.977]        // -> [__ap <= 0x00000004]
[04:09:08.977]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:09:08.977]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:09:08.977]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:09:08.977]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:09:08.977]    </block>
[04:09:08.977]    <block atomic="false" info="">
[04:09:08.977]      __var nReset = 0x80;
[04:09:08.977]        // -> [nReset <= 0x00000080]
[04:09:08.985]      __var canReadPins = 0;
[04:09:08.985]        // -> [canReadPins <= 0x00000000]
[04:09:08.985]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:09:08.987]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:09:08.987]        // -> [canReadPins <= 0x00000001]
[04:09:08.987]    </block>
[04:09:08.987]    <control if="" while="1" timeout="200" info="">
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.987]      // while-condition  =>  TRUE
[04:09:08.987]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:08.995]      // while-condition  =>  TRUE
[04:09:08.995]      // while "1"  (timeout="200")
[04:09:09.005]      // while-condition  =>  TRUE
[04:09:09.005]      // while "1"  (timeout="200")
[04:09:09.005]      // while  =>  TIMEOUT
[04:09:09.005]      // end while "1"
[04:09:09.005]    </control>
[04:09:09.005]    <control if="canReadPins" while="" timeout="0" info="">
[04:09:09.005]      // if-block "canReadPins"
[04:09:09.005]        // =>  TRUE
[04:09:09.005]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:09:09.005]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:09:09.007]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:09:09.007]        // while-condition  =>  FALSE
[04:09:09.007]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:09:09.007]      </control>
[04:09:09.007]      // end if-block "canReadPins"
[04:09:09.007]    </control>
[04:09:09.007]    <control if="!canReadPins" while="" timeout="0" info="">
[04:09:09.007]      // if-block "!canReadPins"
[04:09:09.007]        // =>  FALSE
[04:09:09.007]      // skip if-block "!canReadPins"
[04:09:09.007]    </control>
[04:09:09.007]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:09:09.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:09:09.007]        // =>  TRUE
[04:09:09.007]      <block atomic="false" info="">
[04:09:09.007]        WriteAP(0x00, 0x190008);
[04:09:09.007]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:09:09.007]        WriteAP(0xF0, 0x01);
[04:09:09.015]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:09:09.015]      </block>
[04:09:09.015]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:09:09.015]    </control>
[04:09:09.015]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:09:09.015]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:09:09.015]        // =>  FALSE
[04:09:09.015]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:09:09.015]    </control>
[04:09:09.015]    <block atomic="false" info="">
[04:09:09.015]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:09:09.015]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:09:09.015]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:09:09.015]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:09:09.015]      __ap = 0; //lets make sure we reset the access point selection
[04:09:09.015]        // -> [__ap <= 0x00000000]
[04:09:09.015]    </block>
[04:09:09.015]  </sequence>
[04:09:09.015]  
[04:09:09.035]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:09:09.035]  
[04:09:09.035]  <debugvars>
[04:09:09.035]    // Pre-defined
[04:09:09.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:09.035]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:09:09.035]    __dp=0x00000000
[04:09:09.035]    __ap=0x00000000
[04:09:09.035]    __traceout=0x00000000      (Trace Disabled)
[04:09:09.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:09.035]    __FlashAddr=0x00000000
[04:09:09.035]    __FlashLen=0x00000000
[04:09:09.035]    __FlashArg=0x00000000
[04:09:09.035]    __FlashOp=0x00000000
[04:09:09.035]    __Result=0x00000000
[04:09:09.035]  </debugvars>
[04:09:09.035]  
[04:09:09.035]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:09:09.035]    <block atomic="false" info="">
[04:09:09.035]      __var deviceID = 0;
[04:09:09.035]        // -> [deviceID <= 0x00000000]
[04:09:09.035]      __var version = 0;
[04:09:09.035]        // -> [version <= 0x00000000]
[04:09:09.035]      __var partNum = 0;
[04:09:09.035]        // -> [partNum <= 0x00000000]
[04:09:09.035]      __var manuf = 0;
[04:09:09.035]        // -> [manuf <= 0x00000000]
[04:09:09.035]      __var isMSPM0G1X0X_G3X0X = 0;
[04:09:09.035]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:09:09.035]      __var isProduction = 0;
[04:09:09.035]        // -> [isProduction <= 0x00000000]
[04:09:09.035]      __var continueId = 0;
[04:09:09.035]        // -> [continueId <= 0x00000000]
[04:09:09.035]      deviceID =   Read32(0x41C40004);
[04:09:09.045]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:09:09.045]        // -> [deviceID <= 0x2BB8802F]
[04:09:09.045]      version = deviceID >> 28;
[04:09:09.045]        // -> [version <= 0x00000002]
[04:09:09.045]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:09:09.045]        // -> [partNum <= 0x0000BB88]
[04:09:09.045]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:09:09.045]        // -> [manuf <= 0x00000017]
[04:09:09.045]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:09:09.045]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:09:09.045]      isProduction = (version > 0);
[04:09:09.045]        // -> [isProduction <= 0x00000001]
[04:09:09.045]    </block>
[04:09:09.045]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:09:09.045]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:09:09.045]        // =>  FALSE
[04:09:09.045]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:09:09.045]    </control>
[04:09:09.045]    <control if="continueId == 4" while="" timeout="0" info="">
[04:09:09.045]      // if-block "continueId == 4"
[04:09:09.045]        // =>  FALSE
[04:09:09.045]      // skip if-block "continueId == 4"
[04:09:09.045]    </control>
[04:09:09.045]    <control if="!isProduction" while="" timeout="0" info="">
[04:09:09.045]      // if-block "!isProduction"
[04:09:09.045]        // =>  FALSE
[04:09:09.045]      // skip if-block "!isProduction"
[04:09:09.045]    </control>
[04:09:09.045]  </sequence>
[04:09:09.045]  
[04:09:27.086]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:09:27.086]  
[04:09:27.086]  <debugvars>
[04:09:27.086]    // Pre-defined
[04:09:27.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:27.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:09:27.086]    __dp=0x00000000
[04:09:27.086]    __ap=0x00000000
[04:09:27.086]    __traceout=0x00000000      (Trace Disabled)
[04:09:27.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:27.086]    __FlashAddr=0x00000000
[04:09:27.086]    __FlashLen=0x00000000
[04:09:27.086]    __FlashArg=0x00000000
[04:09:27.086]    __FlashOp=0x00000000
[04:09:27.086]    __Result=0x00000000
[04:09:27.086]  </debugvars>
[04:09:27.086]  
[04:09:27.086]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:09:27.086]    <block atomic="false" info="">
[04:09:27.086]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:09:27.086]        // -> [isSWJ <= 0x00000001]
[04:09:27.086]      __var hasDormant = __protocol & 0x00020000;
[04:09:27.086]        // -> [hasDormant <= 0x00000000]
[04:09:27.086]      __var protType   = __protocol & 0x0000FFFF;
[04:09:27.086]        // -> [protType <= 0x00000002]
[04:09:27.086]    </block>
[04:09:27.086]    <control if="protType == 1" while="" timeout="0" info="">
[04:09:27.086]      // if-block "protType == 1"
[04:09:27.086]        // =>  FALSE
[04:09:27.086]      // skip if-block "protType == 1"
[04:09:27.086]    </control>
[04:09:27.086]    <control if="protType == 2" while="" timeout="0" info="">
[04:09:27.091]      // if-block "protType == 2"
[04:09:27.091]        // =>  TRUE
[04:09:27.091]      <control if="isSWJ" while="" timeout="0" info="">
[04:09:27.091]        // if-block "isSWJ"
[04:09:27.091]          // =>  TRUE
[04:09:27.091]        <control if="hasDormant" while="" timeout="0" info="">
[04:09:27.091]          // if-block "hasDormant"
[04:09:27.091]            // =>  FALSE
[04:09:27.091]          // skip if-block "hasDormant"
[04:09:27.091]        </control>
[04:09:27.091]        <control if="!hasDormant" while="" timeout="0" info="">
[04:09:27.091]          // if-block "!hasDormant"
[04:09:27.091]            // =>  TRUE
[04:09:27.091]          <block atomic="false" info="">
[04:09:27.091]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:09:27.091]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:09:27.091]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:09:27.096]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:09:27.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:09:27.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:09:27.096]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:09:27.096]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:09:27.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:09:27.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:09:27.101]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:09:27.101]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:09:27.101]          </block>
[04:09:27.101]          // end if-block "!hasDormant"
[04:09:27.101]        </control>
[04:09:27.101]        // end if-block "isSWJ"
[04:09:27.101]      </control>
[04:09:27.101]      <control if="!isSWJ" while="" timeout="0" info="">
[04:09:27.101]        // if-block "!isSWJ"
[04:09:27.101]          // =>  FALSE
[04:09:27.101]        // skip if-block "!isSWJ"
[04:09:27.101]      </control>
[04:09:27.101]      <block atomic="false" info="">
[04:09:27.101]        ReadDP(0x0);
[04:09:27.106]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:09:27.106]      </block>
[04:09:27.106]      // end if-block "protType == 2"
[04:09:27.106]    </control>
[04:09:27.106]  </sequence>
[04:09:27.106]  
[04:09:27.106]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:09:27.106]  
[04:09:27.106]  <debugvars>
[04:09:27.106]    // Pre-defined
[04:09:27.106]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:27.106]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:09:27.106]    __dp=0x00000000
[04:09:27.106]    __ap=0x00000000
[04:09:27.106]    __traceout=0x00000000      (Trace Disabled)
[04:09:27.106]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:27.106]    __FlashAddr=0x00000000
[04:09:27.106]    __FlashLen=0x00000000
[04:09:27.111]    __FlashArg=0x00000000
[04:09:27.111]    __FlashOp=0x00000000
[04:09:27.111]    __Result=0x00000000
[04:09:27.111]  </debugvars>
[04:09:27.111]  
[04:09:27.111]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:09:27.111]    <block atomic="false" info="">
[04:09:27.111]      __var SW_DP_ABORT       = 0x0;
[04:09:27.111]        // -> [SW_DP_ABORT <= 0x00000000]
[04:09:27.111]      __var DP_CTRL_STAT      = 0x4;
[04:09:27.111]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:09:27.111]      __var DP_SELECT         = 0x8;
[04:09:27.111]        // -> [DP_SELECT <= 0x00000008]
[04:09:27.111]      __var powered_down      = 0;
[04:09:27.111]        // -> [powered_down <= 0x00000000]
[04:09:27.111]      WriteDP(DP_SELECT, 0x00000000);
[04:09:27.111]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:09:27.111]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:09:27.116]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:09:27.116]        // -> [powered_down <= 0x00000001]
[04:09:27.116]    </block>
[04:09:27.116]    <control if="powered_down" while="" timeout="0" info="">
[04:09:27.116]      // if-block "powered_down"
[04:09:27.116]        // =>  TRUE
[04:09:27.116]      <block atomic="false" info="">
[04:09:27.116]        Message(0, "Debug/System power-up request sent");
[04:09:27.116]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:09:27.121]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:09:27.121]      </block>
[04:09:27.121]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:09:27.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:09:27.121]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:09:27.121]        // while-condition  =>  FALSE
[04:09:27.121]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:09:27.121]      </control>
[04:09:27.121]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:09:27.121]        // if-block "(__protocol & 0xFFFF) == 1"
[04:09:27.121]          // =>  FALSE
[04:09:27.121]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:09:27.121]      </control>
[04:09:27.121]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:09:27.121]        // if-block "(__protocol & 0xFFFF) == 2"
[04:09:27.121]          // =>  TRUE
[04:09:27.121]        <block atomic="false" info="">
[04:09:27.121]          Message(0, "executing SWD power up");
[04:09:27.126]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:09:27.126]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:09:27.126]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:09:27.126]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:09:27.126]        </block>
[04:09:27.126]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:09:27.126]      </control>
[04:09:27.126]      // end if-block "powered_down"
[04:09:27.126]    </control>
[04:09:27.126]    <block atomic="false" info="">
[04:09:27.126]      __var DEBUG_PORT_VAL    = 0;
[04:09:27.126]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:09:27.126]      __var ACCESS_POINT_VAL  = 0;
[04:09:27.126]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:09:27.126]      __ap = 1; 
[04:09:27.131]        // -> [__ap <= 0x00000001]
[04:09:27.131]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:09:27.131]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:09:27.131]      __ap = 4;
[04:09:27.131]        // -> [__ap <= 0x00000004]
[04:09:27.131]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:09:27.136]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:09:27.136]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:09:27.136]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:09:27.141]    </block>
[04:09:27.141]    <block atomic="false" info="">
[04:09:27.141]      __var nReset = 0x80;
[04:09:27.141]        // -> [nReset <= 0x00000080]
[04:09:27.141]      __var canReadPins = 0;
[04:09:27.141]        // -> [canReadPins <= 0x00000000]
[04:09:27.141]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:09:27.141]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:09:27.141]        // -> [canReadPins <= 0x00000001]
[04:09:27.141]    </block>
[04:09:27.141]    <control if="" while="1" timeout="200" info="">
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.141]      // while-condition  =>  TRUE
[04:09:27.141]      // while "1"  (timeout="200")
[04:09:27.146]      // while-condition  =>  TRUE
[04:09:27.146]      // while "1"  (timeout="200")
[04:09:27.146]      // while  =>  TIMEOUT
[04:09:27.146]      // end while "1"
[04:09:27.146]    </control>
[04:09:27.146]    <control if="canReadPins" while="" timeout="0" info="">
[04:09:27.146]      // if-block "canReadPins"
[04:09:27.146]        // =>  TRUE
[04:09:27.146]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:09:27.146]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:09:27.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:09:27.146]        // while-condition  =>  FALSE
[04:09:27.146]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:09:27.146]      </control>
[04:09:27.146]      // end if-block "canReadPins"
[04:09:27.146]    </control>
[04:09:27.146]    <control if="!canReadPins" while="" timeout="0" info="">
[04:09:27.146]      // if-block "!canReadPins"
[04:09:27.146]        // =>  FALSE
[04:09:27.146]      // skip if-block "!canReadPins"
[04:09:27.146]    </control>
[04:09:27.146]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:09:27.146]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:09:27.146]        // =>  TRUE
[04:09:27.146]      <block atomic="false" info="">
[04:09:27.146]        WriteAP(0x00, 0x190008);
[04:09:27.151]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:09:27.151]        WriteAP(0xF0, 0x01);
[04:09:27.156]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:09:27.156]      </block>
[04:09:27.156]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:09:27.156]    </control>
[04:09:27.156]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:09:27.156]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:09:27.156]        // =>  FALSE
[04:09:27.156]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:09:27.156]    </control>
[04:09:27.156]    <block atomic="false" info="">
[04:09:27.156]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:09:27.166]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:09:27.166]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:09:27.166]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:09:27.171]      __ap = 0; //lets make sure we reset the access point selection
[04:09:27.171]        // -> [__ap <= 0x00000000]
[04:09:27.171]    </block>
[04:09:27.171]  </sequence>
[04:09:27.171]  
[04:09:27.193]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:09:27.193]  
[04:09:27.193]  <debugvars>
[04:09:27.193]    // Pre-defined
[04:09:27.193]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:27.193]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:09:27.193]    __dp=0x00000000
[04:09:27.193]    __ap=0x00000000
[04:09:27.193]    __traceout=0x00000000      (Trace Disabled)
[04:09:27.193]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:27.193]    __FlashAddr=0x00000000
[04:09:27.193]    __FlashLen=0x00000000
[04:09:27.193]    __FlashArg=0x00000000
[04:09:27.193]    __FlashOp=0x00000000
[04:09:27.193]    __Result=0x00000000
[04:09:27.193]  </debugvars>
[04:09:27.193]  
[04:09:27.193]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:09:27.193]    <block atomic="false" info="">
[04:09:27.193]      __var deviceID = 0;
[04:09:27.193]        // -> [deviceID <= 0x00000000]
[04:09:27.193]      __var version = 0;
[04:09:27.193]        // -> [version <= 0x00000000]
[04:09:27.193]      __var partNum = 0;
[04:09:27.193]        // -> [partNum <= 0x00000000]
[04:09:27.193]      __var manuf = 0;
[04:09:27.193]        // -> [manuf <= 0x00000000]
[04:09:27.193]      __var isMSPM0G1X0X_G3X0X = 0;
[04:09:27.193]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:09:27.193]      __var isProduction = 0;
[04:09:27.193]        // -> [isProduction <= 0x00000000]
[04:09:27.193]      __var continueId = 0;
[04:09:27.193]        // -> [continueId <= 0x00000000]
[04:09:27.193]      deviceID =   Read32(0x41C40004);
[04:09:27.205]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:09:27.205]        // -> [deviceID <= 0x2BB8802F]
[04:09:27.205]      version = deviceID >> 28;
[04:09:27.205]        // -> [version <= 0x00000002]
[04:09:27.205]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:09:27.205]        // -> [partNum <= 0x0000BB88]
[04:09:27.205]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:09:27.205]        // -> [manuf <= 0x00000017]
[04:09:27.205]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:09:27.205]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:09:27.205]      isProduction = (version > 0);
[04:09:27.205]        // -> [isProduction <= 0x00000001]
[04:09:27.205]    </block>
[04:09:27.205]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:09:27.205]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:09:27.205]        // =>  FALSE
[04:09:27.205]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:09:27.205]    </control>
[04:09:27.205]    <control if="continueId == 4" while="" timeout="0" info="">
[04:09:27.205]      // if-block "continueId == 4"
[04:09:27.205]        // =>  FALSE
[04:09:27.205]      // skip if-block "continueId == 4"
[04:09:27.205]    </control>
[04:09:27.205]    <control if="!isProduction" while="" timeout="0" info="">
[04:09:27.205]      // if-block "!isProduction"
[04:09:27.205]        // =>  FALSE
[04:09:27.205]      // skip if-block "!isProduction"
[04:09:27.205]    </control>
[04:09:27.205]  </sequence>
[04:09:27.205]  
[04:10:49.526]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:10:49.526]  
[04:10:49.537]  <debugvars>
[04:10:49.537]    // Pre-defined
[04:10:49.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:10:49.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:10:49.537]    __dp=0x00000000
[04:10:49.537]    __ap=0x00000000
[04:10:49.537]    __traceout=0x00000000      (Trace Disabled)
[04:10:49.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:10:49.537]    __FlashAddr=0x00000000
[04:10:49.537]    __FlashLen=0x00000000
[04:10:49.537]    __FlashArg=0x00000000
[04:10:49.537]    __FlashOp=0x00000000
[04:10:49.537]    __Result=0x00000000
[04:10:49.537]  </debugvars>
[04:10:49.537]  
[04:10:49.537]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:10:49.537]    <block atomic="false" info="">
[04:10:49.537]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:10:49.537]        // -> [isSWJ <= 0x00000001]
[04:10:49.537]      __var hasDormant = __protocol & 0x00020000;
[04:10:49.537]        // -> [hasDormant <= 0x00000000]
[04:10:49.537]      __var protType   = __protocol & 0x0000FFFF;
[04:10:49.537]        // -> [protType <= 0x00000002]
[04:10:49.537]    </block>
[04:10:49.537]    <control if="protType == 1" while="" timeout="0" info="">
[04:10:49.537]      // if-block "protType == 1"
[04:10:49.537]        // =>  FALSE
[04:10:49.537]      // skip if-block "protType == 1"
[04:10:49.537]    </control>
[04:10:49.537]    <control if="protType == 2" while="" timeout="0" info="">
[04:10:49.537]      // if-block "protType == 2"
[04:10:49.537]        // =>  TRUE
[04:10:49.537]      <control if="isSWJ" while="" timeout="0" info="">
[04:10:49.537]        // if-block "isSWJ"
[04:10:49.537]          // =>  TRUE
[04:10:49.537]        <control if="hasDormant" while="" timeout="0" info="">
[04:10:49.537]          // if-block "hasDormant"
[04:10:49.537]            // =>  FALSE
[04:10:49.537]          // skip if-block "hasDormant"
[04:10:49.537]        </control>
[04:10:49.537]        <control if="!hasDormant" while="" timeout="0" info="">
[04:10:49.537]          // if-block "!hasDormant"
[04:10:49.537]            // =>  TRUE
[04:10:49.537]          <block atomic="false" info="">
[04:10:49.537]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:10:49.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:10:49.537]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:10:49.537]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:10:49.537]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:10:49.546]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:10:49.546]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:10:49.546]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:10:49.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:10:49.546]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:10:49.546]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:10:49.546]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:10:49.546]          </block>
[04:10:49.546]          // end if-block "!hasDormant"
[04:10:49.546]        </control>
[04:10:49.546]        // end if-block "isSWJ"
[04:10:49.546]      </control>
[04:10:49.546]      <control if="!isSWJ" while="" timeout="0" info="">
[04:10:49.546]        // if-block "!isSWJ"
[04:10:49.546]          // =>  FALSE
[04:10:49.546]        // skip if-block "!isSWJ"
[04:10:49.546]      </control>
[04:10:49.546]      <block atomic="false" info="">
[04:10:49.546]        ReadDP(0x0);
[04:10:49.546]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:10:49.546]      </block>
[04:10:49.546]      // end if-block "protType == 2"
[04:10:49.546]    </control>
[04:10:49.546]  </sequence>
[04:10:49.546]  
[04:10:49.558]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:10:49.558]  
[04:10:49.558]  <debugvars>
[04:10:49.558]    // Pre-defined
[04:10:49.558]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:10:49.558]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:10:49.558]    __dp=0x00000000
[04:10:49.558]    __ap=0x00000000
[04:10:49.558]    __traceout=0x00000000      (Trace Disabled)
[04:10:49.558]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:10:49.558]    __FlashAddr=0x00000000
[04:10:49.558]    __FlashLen=0x00000000
[04:10:49.558]    __FlashArg=0x00000000
[04:10:49.558]    __FlashOp=0x00000000
[04:10:49.558]    __Result=0x00000000
[04:10:49.558]  </debugvars>
[04:10:49.558]  
[04:10:49.558]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:10:49.558]    <block atomic="false" info="">
[04:10:49.558]      __var SW_DP_ABORT       = 0x0;
[04:10:49.558]        // -> [SW_DP_ABORT <= 0x00000000]
[04:10:49.558]      __var DP_CTRL_STAT      = 0x4;
[04:10:49.558]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:10:49.558]      __var DP_SELECT         = 0x8;
[04:10:49.558]        // -> [DP_SELECT <= 0x00000008]
[04:10:49.558]      __var powered_down      = 0;
[04:10:49.558]        // -> [powered_down <= 0x00000000]
[04:10:49.558]      WriteDP(DP_SELECT, 0x00000000);
[04:10:49.558]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:10:49.558]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:10:49.558]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:10:49.558]        // -> [powered_down <= 0x00000001]
[04:10:49.558]    </block>
[04:10:49.558]    <control if="powered_down" while="" timeout="0" info="">
[04:10:49.558]      // if-block "powered_down"
[04:10:49.558]        // =>  TRUE
[04:10:49.558]      <block atomic="false" info="">
[04:10:49.558]        Message(0, "Debug/System power-up request sent");
[04:10:49.566]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:10:49.568]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:10:49.568]      </block>
[04:10:49.568]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:10:49.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:10:49.568]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:10:49.568]        // while-condition  =>  FALSE
[04:10:49.568]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:10:49.568]      </control>
[04:10:49.568]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:10:49.568]        // if-block "(__protocol & 0xFFFF) == 1"
[04:10:49.568]          // =>  FALSE
[04:10:49.568]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:10:49.568]      </control>
[04:10:49.568]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:10:49.568]        // if-block "(__protocol & 0xFFFF) == 2"
[04:10:49.568]          // =>  TRUE
[04:10:49.568]        <block atomic="false" info="">
[04:10:49.568]          Message(0, "executing SWD power up");
[04:10:49.568]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:10:49.576]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:10:49.576]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:10:49.576]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:10:49.576]        </block>
[04:10:49.576]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:10:49.576]      </control>
[04:10:49.576]      // end if-block "powered_down"
[04:10:49.576]    </control>
[04:10:49.576]    <block atomic="false" info="">
[04:10:49.576]      __var DEBUG_PORT_VAL    = 0;
[04:10:49.576]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:10:49.576]      __var ACCESS_POINT_VAL  = 0;
[04:10:49.576]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:10:49.576]      __ap = 1; 
[04:10:49.576]        // -> [__ap <= 0x00000001]
[04:10:49.576]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:10:49.576]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:10:49.576]      __ap = 4;
[04:10:49.576]        // -> [__ap <= 0x00000004]
[04:10:49.576]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:10:49.586]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:10:49.586]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:10:49.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:10:49.586]    </block>
[04:10:49.586]    <block atomic="false" info="">
[04:10:49.586]      __var nReset = 0x80;
[04:10:49.586]        // -> [nReset <= 0x00000080]
[04:10:49.586]      __var canReadPins = 0;
[04:10:49.586]        // -> [canReadPins <= 0x00000000]
[04:10:49.586]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:10:49.586]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:10:49.586]        // -> [canReadPins <= 0x00000001]
[04:10:49.586]    </block>
[04:10:49.586]    <control if="" while="1" timeout="200" info="">
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.586]      // while-condition  =>  TRUE
[04:10:49.586]      // while "1"  (timeout="200")
[04:10:49.596]      // while-condition  =>  TRUE
[04:10:49.596]      // while "1"  (timeout="200")
[04:10:49.596]      // while  =>  TIMEOUT
[04:10:49.596]      // end while "1"
[04:10:49.596]    </control>
[04:10:49.596]    <control if="canReadPins" while="" timeout="0" info="">
[04:10:49.596]      // if-block "canReadPins"
[04:10:49.596]        // =>  TRUE
[04:10:49.596]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:10:49.596]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:10:49.596]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:10:49.596]        // while-condition  =>  FALSE
[04:10:49.596]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:10:49.596]      </control>
[04:10:49.596]      // end if-block "canReadPins"
[04:10:49.596]    </control>
[04:10:49.596]    <control if="!canReadPins" while="" timeout="0" info="">
[04:10:49.596]      // if-block "!canReadPins"
[04:10:49.596]        // =>  FALSE
[04:10:49.596]      // skip if-block "!canReadPins"
[04:10:49.596]    </control>
[04:10:49.596]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:10:49.596]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:10:49.596]        // =>  TRUE
[04:10:49.596]      <block atomic="false" info="">
[04:10:49.596]        WriteAP(0x00, 0x190008);
[04:10:49.596]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:10:49.596]        WriteAP(0xF0, 0x01);
[04:10:49.596]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:10:49.596]      </block>
[04:10:49.596]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:10:49.596]    </control>
[04:10:49.596]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:10:49.596]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:10:49.596]        // =>  FALSE
[04:10:49.596]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:10:49.606]    </control>
[04:10:49.606]    <block atomic="false" info="">
[04:10:49.606]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:10:49.606]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:10:49.606]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:10:49.606]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:10:49.606]      __ap = 0; //lets make sure we reset the access point selection
[04:10:49.606]        // -> [__ap <= 0x00000000]
[04:10:49.606]    </block>
[04:10:49.606]  </sequence>
[04:10:49.606]  
[04:10:49.626]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:10:49.626]  
[04:10:49.626]  <debugvars>
[04:10:49.636]    // Pre-defined
[04:10:49.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:10:49.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:10:49.636]    __dp=0x00000000
[04:10:49.636]    __ap=0x00000000
[04:10:49.636]    __traceout=0x00000000      (Trace Disabled)
[04:10:49.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:10:49.636]    __FlashAddr=0x00000000
[04:10:49.636]    __FlashLen=0x00000000
[04:10:49.636]    __FlashArg=0x00000000
[04:10:49.636]    __FlashOp=0x00000000
[04:10:49.636]    __Result=0x00000000
[04:10:49.636]  </debugvars>
[04:10:49.636]  
[04:10:49.636]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:10:49.636]    <block atomic="false" info="">
[04:10:49.636]      __var deviceID = 0;
[04:10:49.636]        // -> [deviceID <= 0x00000000]
[04:10:49.636]      __var version = 0;
[04:10:49.636]        // -> [version <= 0x00000000]
[04:10:49.636]      __var partNum = 0;
[04:10:49.636]        // -> [partNum <= 0x00000000]
[04:10:49.636]      __var manuf = 0;
[04:10:49.636]        // -> [manuf <= 0x00000000]
[04:10:49.636]      __var isMSPM0G1X0X_G3X0X = 0;
[04:10:49.636]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:10:49.636]      __var isProduction = 0;
[04:10:49.636]        // -> [isProduction <= 0x00000000]
[04:10:49.636]      __var continueId = 0;
[04:10:49.636]        // -> [continueId <= 0x00000000]
[04:10:49.636]      deviceID =   Read32(0x41C40004);
[04:10:49.636]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:10:49.636]        // -> [deviceID <= 0x2BB8802F]
[04:10:49.636]      version = deviceID >> 28;
[04:10:49.636]        // -> [version <= 0x00000002]
[04:10:49.636]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:10:49.636]        // -> [partNum <= 0x0000BB88]
[04:10:49.636]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:10:49.636]        // -> [manuf <= 0x00000017]
[04:10:49.636]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:10:49.636]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:10:49.636]      isProduction = (version > 0);
[04:10:49.636]        // -> [isProduction <= 0x00000001]
[04:10:49.636]    </block>
[04:10:49.636]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:10:49.636]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:10:49.636]        // =>  FALSE
[04:10:49.636]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:10:49.636]    </control>
[04:10:49.636]    <control if="continueId == 4" while="" timeout="0" info="">
[04:10:49.636]      // if-block "continueId == 4"
[04:10:49.646]        // =>  FALSE
[04:10:49.646]      // skip if-block "continueId == 4"
[04:10:49.646]    </control>
[04:10:49.646]    <control if="!isProduction" while="" timeout="0" info="">
[04:10:49.646]      // if-block "!isProduction"
[04:10:49.646]        // =>  FALSE
[04:10:49.646]      // skip if-block "!isProduction"
[04:10:49.646]    </control>
[04:10:49.646]  </sequence>
[04:10:49.646]  
[04:12:12.626]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:12:12.626]  
[04:12:12.636]  <debugvars>
[04:12:12.636]    // Pre-defined
[04:12:12.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:12.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:12.636]    __dp=0x00000000
[04:12:12.636]    __ap=0x00000000
[04:12:12.636]    __traceout=0x00000000      (Trace Disabled)
[04:12:12.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:12.636]    __FlashAddr=0x00000000
[04:12:12.636]    __FlashLen=0x00000000
[04:12:12.636]    __FlashArg=0x00000000
[04:12:12.636]    __FlashOp=0x00000000
[04:12:12.636]    __Result=0x00000000
[04:12:12.636]  </debugvars>
[04:12:12.636]  
[04:12:12.636]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:12:12.636]    <block atomic="false" info="">
[04:12:12.636]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:12:12.636]        // -> [isSWJ <= 0x00000001]
[04:12:12.636]      __var hasDormant = __protocol & 0x00020000;
[04:12:12.636]        // -> [hasDormant <= 0x00000000]
[04:12:12.636]      __var protType   = __protocol & 0x0000FFFF;
[04:12:12.636]        // -> [protType <= 0x00000002]
[04:12:12.636]    </block>
[04:12:12.636]    <control if="protType == 1" while="" timeout="0" info="">
[04:12:12.636]      // if-block "protType == 1"
[04:12:12.636]        // =>  FALSE
[04:12:12.636]      // skip if-block "protType == 1"
[04:12:12.636]    </control>
[04:12:12.636]    <control if="protType == 2" while="" timeout="0" info="">
[04:12:12.636]      // if-block "protType == 2"
[04:12:12.636]        // =>  TRUE
[04:12:12.636]      <control if="isSWJ" while="" timeout="0" info="">
[04:12:12.636]        // if-block "isSWJ"
[04:12:12.636]          // =>  TRUE
[04:12:12.636]        <control if="hasDormant" while="" timeout="0" info="">
[04:12:12.636]          // if-block "hasDormant"
[04:12:12.636]            // =>  FALSE
[04:12:12.636]          // skip if-block "hasDormant"
[04:12:12.636]        </control>
[04:12:12.636]        <control if="!hasDormant" while="" timeout="0" info="">
[04:12:12.636]          // if-block "!hasDormant"
[04:12:12.636]            // =>  TRUE
[04:12:12.636]          <block atomic="false" info="">
[04:12:12.636]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:12:12.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:12.636]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:12:12.636]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:12:12.636]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:12:12.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:12.636]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:12:12.646]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:12:12.646]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:12:12.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:12.648]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:12:12.648]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:12:12.648]          </block>
[04:12:12.648]          // end if-block "!hasDormant"
[04:12:12.648]        </control>
[04:12:12.648]        // end if-block "isSWJ"
[04:12:12.648]      </control>
[04:12:12.648]      <control if="!isSWJ" while="" timeout="0" info="">
[04:12:12.648]        // if-block "!isSWJ"
[04:12:12.648]          // =>  FALSE
[04:12:12.648]        // skip if-block "!isSWJ"
[04:12:12.648]      </control>
[04:12:12.648]      <block atomic="false" info="">
[04:12:12.648]        ReadDP(0x0);
[04:12:12.648]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:12:12.648]      </block>
[04:12:12.648]      // end if-block "protType == 2"
[04:12:12.648]    </control>
[04:12:12.648]  </sequence>
[04:12:12.648]  
[04:12:12.648]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:12:12.648]  
[04:12:12.648]  <debugvars>
[04:12:12.648]    // Pre-defined
[04:12:12.648]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:12.648]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:12.648]    __dp=0x00000000
[04:12:12.648]    __ap=0x00000000
[04:12:12.648]    __traceout=0x00000000      (Trace Disabled)
[04:12:12.648]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:12.648]    __FlashAddr=0x00000000
[04:12:12.648]    __FlashLen=0x00000000
[04:12:12.648]    __FlashArg=0x00000000
[04:12:12.648]    __FlashOp=0x00000000
[04:12:12.648]    __Result=0x00000000
[04:12:12.648]  </debugvars>
[04:12:12.657]  
[04:12:12.657]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:12:12.657]    <block atomic="false" info="">
[04:12:12.657]      __var SW_DP_ABORT       = 0x0;
[04:12:12.657]        // -> [SW_DP_ABORT <= 0x00000000]
[04:12:12.657]      __var DP_CTRL_STAT      = 0x4;
[04:12:12.657]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:12:12.657]      __var DP_SELECT         = 0x8;
[04:12:12.657]        // -> [DP_SELECT <= 0x00000008]
[04:12:12.657]      __var powered_down      = 0;
[04:12:12.657]        // -> [powered_down <= 0x00000000]
[04:12:12.657]      WriteDP(DP_SELECT, 0x00000000);
[04:12:12.657]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:12:12.657]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:12:12.657]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:12:12.657]        // -> [powered_down <= 0x00000001]
[04:12:12.657]    </block>
[04:12:12.657]    <control if="powered_down" while="" timeout="0" info="">
[04:12:12.657]      // if-block "powered_down"
[04:12:12.657]        // =>  TRUE
[04:12:12.657]      <block atomic="false" info="">
[04:12:12.657]        Message(0, "Debug/System power-up request sent");
[04:12:12.657]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:12:12.657]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:12:12.657]      </block>
[04:12:12.657]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:12:12.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:12:12.667]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:12:12.667]        // while-condition  =>  FALSE
[04:12:12.667]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:12:12.667]      </control>
[04:12:12.667]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:12:12.667]        // if-block "(__protocol & 0xFFFF) == 1"
[04:12:12.667]          // =>  FALSE
[04:12:12.667]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:12:12.667]      </control>
[04:12:12.667]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:12:12.667]        // if-block "(__protocol & 0xFFFF) == 2"
[04:12:12.667]          // =>  TRUE
[04:12:12.667]        <block atomic="false" info="">
[04:12:12.667]          Message(0, "executing SWD power up");
[04:12:12.667]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:12:12.667]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:12:12.667]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:12:12.667]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:12:12.667]        </block>
[04:12:12.667]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:12:12.667]      </control>
[04:12:12.667]      // end if-block "powered_down"
[04:12:12.667]    </control>
[04:12:12.667]    <block atomic="false" info="">
[04:12:12.667]      __var DEBUG_PORT_VAL    = 0;
[04:12:12.667]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:12:12.667]      __var ACCESS_POINT_VAL  = 0;
[04:12:12.667]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:12:12.667]      __ap = 1; 
[04:12:12.667]        // -> [__ap <= 0x00000001]
[04:12:12.667]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:12:12.677]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:12:12.677]      __ap = 4;
[04:12:12.677]        // -> [__ap <= 0x00000004]
[04:12:12.677]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:12:12.677]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:12:12.677]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:12:12.677]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:12:12.677]    </block>
[04:12:12.677]    <block atomic="false" info="">
[04:12:12.677]      __var nReset = 0x80;
[04:12:12.677]        // -> [nReset <= 0x00000080]
[04:12:12.677]      __var canReadPins = 0;
[04:12:12.677]        // -> [canReadPins <= 0x00000000]
[04:12:12.677]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:12:12.687]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:12:12.687]        // -> [canReadPins <= 0x00000001]
[04:12:12.687]    </block>
[04:12:12.687]    <control if="" while="1" timeout="200" info="">
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.687]      // while-condition  =>  TRUE
[04:12:12.687]      // while "1"  (timeout="200")
[04:12:12.697]      // while-condition  =>  TRUE
[04:12:12.697]      // while "1"  (timeout="200")
[04:12:12.697]      // while  =>  TIMEOUT
[04:12:12.697]      // end while "1"
[04:12:12.697]    </control>
[04:12:12.697]    <control if="canReadPins" while="" timeout="0" info="">
[04:12:12.697]      // if-block "canReadPins"
[04:12:12.697]        // =>  TRUE
[04:12:12.697]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:12:12.697]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:12:12.697]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:12:12.697]        // while-condition  =>  FALSE
[04:12:12.697]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:12:12.697]      </control>
[04:12:12.697]      // end if-block "canReadPins"
[04:12:12.697]    </control>
[04:12:12.697]    <control if="!canReadPins" while="" timeout="0" info="">
[04:12:12.697]      // if-block "!canReadPins"
[04:12:12.697]        // =>  FALSE
[04:12:12.697]      // skip if-block "!canReadPins"
[04:12:12.697]    </control>
[04:12:12.697]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:12:12.697]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:12:12.697]        // =>  TRUE
[04:12:12.697]      <block atomic="false" info="">
[04:12:12.697]        WriteAP(0x00, 0x190008);
[04:12:12.697]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:12:12.697]        WriteAP(0xF0, 0x01);
[04:12:12.697]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:12:12.697]      </block>
[04:12:12.697]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:12:12.697]    </control>
[04:12:12.697]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:12:12.697]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:12:12.697]        // =>  FALSE
[04:12:12.697]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:12:12.697]    </control>
[04:12:12.707]    <block atomic="false" info="">
[04:12:12.707]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:12:12.710]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:12:12.710]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:12:12.710]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:12:12.711]      __ap = 0; //lets make sure we reset the access point selection
[04:12:12.711]        // -> [__ap <= 0x00000000]
[04:12:12.711]    </block>
[04:12:12.712]  </sequence>
[04:12:12.712]  
[04:12:12.727]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:12:12.727]  
[04:12:12.727]  <debugvars>
[04:12:12.727]    // Pre-defined
[04:12:12.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:12.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:12.727]    __dp=0x00000000
[04:12:12.727]    __ap=0x00000000
[04:12:12.727]    __traceout=0x00000000      (Trace Disabled)
[04:12:12.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:12.727]    __FlashAddr=0x00000000
[04:12:12.727]    __FlashLen=0x00000000
[04:12:12.727]    __FlashArg=0x00000000
[04:12:12.727]    __FlashOp=0x00000000
[04:12:12.727]    __Result=0x00000000
[04:12:12.727]  </debugvars>
[04:12:12.727]  
[04:12:12.727]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:12:12.727]    <block atomic="false" info="">
[04:12:12.727]      __var deviceID = 0;
[04:12:12.727]        // -> [deviceID <= 0x00000000]
[04:12:12.727]      __var version = 0;
[04:12:12.727]        // -> [version <= 0x00000000]
[04:12:12.727]      __var partNum = 0;
[04:12:12.727]        // -> [partNum <= 0x00000000]
[04:12:12.727]      __var manuf = 0;
[04:12:12.727]        // -> [manuf <= 0x00000000]
[04:12:12.727]      __var isMSPM0G1X0X_G3X0X = 0;
[04:12:12.727]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:12:12.727]      __var isProduction = 0;
[04:12:12.727]        // -> [isProduction <= 0x00000000]
[04:12:12.727]      __var continueId = 0;
[04:12:12.727]        // -> [continueId <= 0x00000000]
[04:12:12.727]      deviceID =   Read32(0x41C40004);
[04:12:12.737]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:12:12.737]        // -> [deviceID <= 0x2BB8802F]
[04:12:12.737]      version = deviceID >> 28;
[04:12:12.737]        // -> [version <= 0x00000002]
[04:12:12.737]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:12:12.737]        // -> [partNum <= 0x0000BB88]
[04:12:12.737]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:12:12.737]        // -> [manuf <= 0x00000017]
[04:12:12.737]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:12:12.737]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:12:12.737]      isProduction = (version > 0);
[04:12:12.737]        // -> [isProduction <= 0x00000001]
[04:12:12.737]    </block>
[04:12:12.737]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:12:12.737]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:12:12.737]        // =>  FALSE
[04:12:12.737]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:12:12.737]    </control>
[04:12:12.737]    <control if="continueId == 4" while="" timeout="0" info="">
[04:12:12.737]      // if-block "continueId == 4"
[04:12:12.737]        // =>  FALSE
[04:12:12.737]      // skip if-block "continueId == 4"
[04:12:12.737]    </control>
[04:12:12.737]    <control if="!isProduction" while="" timeout="0" info="">
[04:12:12.737]      // if-block "!isProduction"
[04:12:12.737]        // =>  FALSE
[04:12:12.737]      // skip if-block "!isProduction"
[04:12:12.737]    </control>
[04:12:12.737]  </sequence>
[04:12:12.737]  
[04:12:36.407]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:12:36.407]  
[04:12:36.416]  <debugvars>
[04:12:36.416]    // Pre-defined
[04:12:36.416]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:36.416]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:36.416]    __dp=0x00000000
[04:12:36.416]    __ap=0x00000000
[04:12:36.416]    __traceout=0x00000000      (Trace Disabled)
[04:12:36.416]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:36.416]    __FlashAddr=0x00000000
[04:12:36.418]    __FlashLen=0x00000000
[04:12:36.418]    __FlashArg=0x00000000
[04:12:36.418]    __FlashOp=0x00000000
[04:12:36.418]    __Result=0x00000000
[04:12:36.418]  </debugvars>
[04:12:36.418]  
[04:12:36.418]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:12:36.418]    <block atomic="false" info="">
[04:12:36.418]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:12:36.418]        // -> [isSWJ <= 0x00000001]
[04:12:36.418]      __var hasDormant = __protocol & 0x00020000;
[04:12:36.418]        // -> [hasDormant <= 0x00000000]
[04:12:36.418]      __var protType   = __protocol & 0x0000FFFF;
[04:12:36.418]        // -> [protType <= 0x00000002]
[04:12:36.418]    </block>
[04:12:36.418]    <control if="protType == 1" while="" timeout="0" info="">
[04:12:36.418]      // if-block "protType == 1"
[04:12:36.418]        // =>  FALSE
[04:12:36.418]      // skip if-block "protType == 1"
[04:12:36.418]    </control>
[04:12:36.418]    <control if="protType == 2" while="" timeout="0" info="">
[04:12:36.418]      // if-block "protType == 2"
[04:12:36.418]        // =>  TRUE
[04:12:36.418]      <control if="isSWJ" while="" timeout="0" info="">
[04:12:36.418]        // if-block "isSWJ"
[04:12:36.418]          // =>  TRUE
[04:12:36.418]        <control if="hasDormant" while="" timeout="0" info="">
[04:12:36.418]          // if-block "hasDormant"
[04:12:36.418]            // =>  FALSE
[04:12:36.418]          // skip if-block "hasDormant"
[04:12:36.418]        </control>
[04:12:36.418]        <control if="!hasDormant" while="" timeout="0" info="">
[04:12:36.422]          // if-block "!hasDormant"
[04:12:36.422]            // =>  TRUE
[04:12:36.422]          <block atomic="false" info="">
[04:12:36.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:12:36.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:36.422]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:12:36.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:12:36.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:12:36.428]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:36.428]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:12:36.428]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:12:36.428]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:12:36.428]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:36.428]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:12:36.432]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:12:36.432]          </block>
[04:12:36.432]          // end if-block "!hasDormant"
[04:12:36.432]        </control>
[04:12:36.432]        // end if-block "isSWJ"
[04:12:36.432]      </control>
[04:12:36.432]      <control if="!isSWJ" while="" timeout="0" info="">
[04:12:36.432]        // if-block "!isSWJ"
[04:12:36.432]          // =>  FALSE
[04:12:36.432]        // skip if-block "!isSWJ"
[04:12:36.432]      </control>
[04:12:36.432]      <block atomic="false" info="">
[04:12:36.432]        ReadDP(0x0);
[04:12:36.432]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:12:36.432]      </block>
[04:12:36.432]      // end if-block "protType == 2"
[04:12:36.432]    </control>
[04:12:36.432]  </sequence>
[04:12:36.432]  
[04:12:36.438]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:12:36.438]  
[04:12:36.438]  <debugvars>
[04:12:36.438]    // Pre-defined
[04:12:36.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:36.438]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:36.438]    __dp=0x00000000
[04:12:36.438]    __ap=0x00000000
[04:12:36.438]    __traceout=0x00000000      (Trace Disabled)
[04:12:36.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:36.438]    __FlashAddr=0x00000000
[04:12:36.438]    __FlashLen=0x00000000
[04:12:36.438]    __FlashArg=0x00000000
[04:12:36.438]    __FlashOp=0x00000000
[04:12:36.438]    __Result=0x00000000
[04:12:36.438]  </debugvars>
[04:12:36.438]  
[04:12:36.438]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:12:36.438]    <block atomic="false" info="">
[04:12:36.438]      __var SW_DP_ABORT       = 0x0;
[04:12:36.438]        // -> [SW_DP_ABORT <= 0x00000000]
[04:12:36.438]      __var DP_CTRL_STAT      = 0x4;
[04:12:36.438]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:12:36.438]      __var DP_SELECT         = 0x8;
[04:12:36.438]        // -> [DP_SELECT <= 0x00000008]
[04:12:36.438]      __var powered_down      = 0;
[04:12:36.438]        // -> [powered_down <= 0x00000000]
[04:12:36.438]      WriteDP(DP_SELECT, 0x00000000);
[04:12:36.442]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:12:36.442]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:12:36.442]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:12:36.442]        // -> [powered_down <= 0x00000001]
[04:12:36.442]    </block>
[04:12:36.442]    <control if="powered_down" while="" timeout="0" info="">
[04:12:36.442]      // if-block "powered_down"
[04:12:36.442]        // =>  TRUE
[04:12:36.442]      <block atomic="false" info="">
[04:12:36.442]        Message(0, "Debug/System power-up request sent");
[04:12:36.447]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:12:36.447]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:12:36.447]      </block>
[04:12:36.447]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:12:36.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:12:36.447]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:12:36.452]        // while-condition  =>  FALSE
[04:12:36.452]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:12:36.452]      </control>
[04:12:36.452]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:12:36.452]        // if-block "(__protocol & 0xFFFF) == 1"
[04:12:36.452]          // =>  FALSE
[04:12:36.452]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:12:36.452]      </control>
[04:12:36.452]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:12:36.452]        // if-block "(__protocol & 0xFFFF) == 2"
[04:12:36.452]          // =>  TRUE
[04:12:36.452]        <block atomic="false" info="">
[04:12:36.452]          Message(0, "executing SWD power up");
[04:12:36.452]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:12:36.452]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:12:36.452]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:12:36.457]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:12:36.457]        </block>
[04:12:36.457]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:12:36.457]      </control>
[04:12:36.457]      // end if-block "powered_down"
[04:12:36.457]    </control>
[04:12:36.457]    <block atomic="false" info="">
[04:12:36.457]      __var DEBUG_PORT_VAL    = 0;
[04:12:36.457]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:12:36.457]      __var ACCESS_POINT_VAL  = 0;
[04:12:36.457]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:12:36.457]      __ap = 1; 
[04:12:36.457]        // -> [__ap <= 0x00000001]
[04:12:36.457]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:12:36.462]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:12:36.462]      __ap = 4;
[04:12:36.463]        // -> [__ap <= 0x00000004]
[04:12:36.463]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:12:36.465]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:12:36.465]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:12:36.466]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:12:36.468]    </block>
[04:12:36.468]    <block atomic="false" info="">
[04:12:36.468]      __var nReset = 0x80;
[04:12:36.468]        // -> [nReset <= 0x00000080]
[04:12:36.468]      __var canReadPins = 0;
[04:12:36.468]        // -> [canReadPins <= 0x00000000]
[04:12:36.468]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:12:36.468]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:12:36.470]        // -> [canReadPins <= 0x00000001]
[04:12:36.470]    </block>
[04:12:36.470]    <control if="" while="1" timeout="200" info="">
[04:12:36.470]      // while "1"  (timeout="200")
[04:12:36.470]      // while-condition  =>  TRUE
[04:12:36.470]      // while "1"  (timeout="200")
[04:12:36.470]      // while-condition  =>  TRUE
[04:12:36.470]      // while "1"  (timeout="200")
[04:12:36.471]      // while-condition  =>  TRUE
[04:12:36.471]      // while "1"  (timeout="200")
[04:12:36.471]      // while-condition  =>  TRUE
[04:12:36.471]      // while "1"  (timeout="200")
[04:12:36.471]      // while-condition  =>  TRUE
[04:12:36.471]      // while "1"  (timeout="200")
[04:12:36.471]      // while-condition  =>  TRUE
[04:12:36.471]      // while "1"  (timeout="200")
[04:12:36.471]      // while-condition  =>  TRUE
[04:12:36.471]      // while "1"  (timeout="200")
[04:12:36.471]      // while-condition  =>  TRUE
[04:12:36.471]      // while "1"  (timeout="200")
[04:12:36.472]      // while-condition  =>  TRUE
[04:12:36.472]      // while "1"  (timeout="200")
[04:12:36.472]      // while  =>  TIMEOUT
[04:12:36.472]      // end while "1"
[04:12:36.472]    </control>
[04:12:36.472]    <control if="canReadPins" while="" timeout="0" info="">
[04:12:36.472]      // if-block "canReadPins"
[04:12:36.472]        // =>  TRUE
[04:12:36.472]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:12:36.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:12:36.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:12:36.474]        // while-condition  =>  FALSE
[04:12:36.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:12:36.474]      </control>
[04:12:36.474]      // end if-block "canReadPins"
[04:12:36.474]    </control>
[04:12:36.474]    <control if="!canReadPins" while="" timeout="0" info="">
[04:12:36.474]      // if-block "!canReadPins"
[04:12:36.475]        // =>  FALSE
[04:12:36.475]      // skip if-block "!canReadPins"
[04:12:36.475]    </control>
[04:12:36.475]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:12:36.475]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:12:36.475]        // =>  TRUE
[04:12:36.475]      <block atomic="false" info="">
[04:12:36.475]        WriteAP(0x00, 0x190008);
[04:12:36.477]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:12:36.477]        WriteAP(0xF0, 0x01);
[04:12:36.481]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:12:36.481]      </block>
[04:12:36.481]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:12:36.481]    </control>
[04:12:36.481]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:12:36.481]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:12:36.482]        // =>  FALSE
[04:12:36.482]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:12:36.482]    </control>
[04:12:36.482]    <block atomic="false" info="">
[04:12:36.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:12:36.485]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:12:36.485]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:12:36.485]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:12:36.485]      __ap = 0; //lets make sure we reset the access point selection
[04:12:36.485]        // -> [__ap <= 0x00000000]
[04:12:36.485]    </block>
[04:12:36.485]  </sequence>
[04:12:36.485]  
[04:12:36.505]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:12:36.505]  
[04:12:36.505]  <debugvars>
[04:12:36.505]    // Pre-defined
[04:12:36.505]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:36.505]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:36.505]    __dp=0x00000000
[04:12:36.505]    __ap=0x00000000
[04:12:36.505]    __traceout=0x00000000      (Trace Disabled)
[04:12:36.505]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:36.506]    __FlashAddr=0x00000000
[04:12:36.506]    __FlashLen=0x00000000
[04:12:36.506]    __FlashArg=0x00000000
[04:12:36.506]    __FlashOp=0x00000000
[04:12:36.507]    __Result=0x00000000
[04:12:36.507]  </debugvars>
[04:12:36.507]  
[04:12:36.507]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:12:36.507]    <block atomic="false" info="">
[04:12:36.507]      __var deviceID = 0;
[04:12:36.507]        // -> [deviceID <= 0x00000000]
[04:12:36.507]      __var version = 0;
[04:12:36.508]        // -> [version <= 0x00000000]
[04:12:36.508]      __var partNum = 0;
[04:12:36.508]        // -> [partNum <= 0x00000000]
[04:12:36.508]      __var manuf = 0;
[04:12:36.508]        // -> [manuf <= 0x00000000]
[04:12:36.508]      __var isMSPM0G1X0X_G3X0X = 0;
[04:12:36.508]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:12:36.508]      __var isProduction = 0;
[04:12:36.508]        // -> [isProduction <= 0x00000000]
[04:12:36.508]      __var continueId = 0;
[04:12:36.508]        // -> [continueId <= 0x00000000]
[04:12:36.508]      deviceID =   Read32(0x41C40004);
[04:12:36.513]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:12:36.513]        // -> [deviceID <= 0x2BB8802F]
[04:12:36.513]      version = deviceID >> 28;
[04:12:36.513]        // -> [version <= 0x00000002]
[04:12:36.513]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:12:36.513]        // -> [partNum <= 0x0000BB88]
[04:12:36.513]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:12:36.513]        // -> [manuf <= 0x00000017]
[04:12:36.513]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:12:36.513]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:12:36.513]      isProduction = (version > 0);
[04:12:36.513]        // -> [isProduction <= 0x00000001]
[04:12:36.513]    </block>
[04:12:36.513]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:12:36.513]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:12:36.513]        // =>  FALSE
[04:12:36.515]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:12:36.515]    </control>
[04:12:36.515]    <control if="continueId == 4" while="" timeout="0" info="">
[04:12:36.515]      // if-block "continueId == 4"
[04:12:36.515]        // =>  FALSE
[04:12:36.515]      // skip if-block "continueId == 4"
[04:12:36.515]    </control>
[04:12:36.515]    <control if="!isProduction" while="" timeout="0" info="">
[04:12:36.515]      // if-block "!isProduction"
[04:12:36.515]        // =>  FALSE
[04:12:36.515]      // skip if-block "!isProduction"
[04:12:36.515]    </control>
[04:12:36.515]  </sequence>
[04:12:36.515]  
[04:13:18.164]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:13:18.164]  
[04:13:18.164]  <debugvars>
[04:13:18.164]    // Pre-defined
[04:13:18.164]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:13:18.164]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:13:18.164]    __dp=0x00000000
[04:13:18.164]    __ap=0x00000000
[04:13:18.164]    __traceout=0x00000000      (Trace Disabled)
[04:13:18.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:13:18.164]    __FlashAddr=0x00000000
[04:13:18.164]    __FlashLen=0x00000000
[04:13:18.164]    __FlashArg=0x00000000
[04:13:18.164]    __FlashOp=0x00000000
[04:13:18.164]    __Result=0x00000000
[04:13:18.164]  </debugvars>
[04:13:18.164]  
[04:13:18.164]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:13:18.164]    <block atomic="false" info="">
[04:13:18.164]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:13:18.164]        // -> [isSWJ <= 0x00000001]
[04:13:18.172]      __var hasDormant = __protocol & 0x00020000;
[04:13:18.172]        // -> [hasDormant <= 0x00000000]
[04:13:18.172]      __var protType   = __protocol & 0x0000FFFF;
[04:13:18.172]        // -> [protType <= 0x00000002]
[04:13:18.172]    </block>
[04:13:18.172]    <control if="protType == 1" while="" timeout="0" info="">
[04:13:18.172]      // if-block "protType == 1"
[04:13:18.172]        // =>  FALSE
[04:13:18.172]      // skip if-block "protType == 1"
[04:13:18.172]    </control>
[04:13:18.172]    <control if="protType == 2" while="" timeout="0" info="">
[04:13:18.172]      // if-block "protType == 2"
[04:13:18.172]        // =>  TRUE
[04:13:18.172]      <control if="isSWJ" while="" timeout="0" info="">
[04:13:18.172]        // if-block "isSWJ"
[04:13:18.172]          // =>  TRUE
[04:13:18.172]        <control if="hasDormant" while="" timeout="0" info="">
[04:13:18.172]          // if-block "hasDormant"
[04:13:18.172]            // =>  FALSE
[04:13:18.172]          // skip if-block "hasDormant"
[04:13:18.172]        </control>
[04:13:18.172]        <control if="!hasDormant" while="" timeout="0" info="">
[04:13:18.172]          // if-block "!hasDormant"
[04:13:18.172]            // =>  TRUE
[04:13:18.172]          <block atomic="false" info="">
[04:13:18.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:13:18.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:13:18.172]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:13:18.172]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:13:18.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:13:18.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:13:18.172]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:13:18.182]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:13:18.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:13:18.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:13:18.182]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:13:18.182]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:13:18.182]          </block>
[04:13:18.182]          // end if-block "!hasDormant"
[04:13:18.182]        </control>
[04:13:18.182]        // end if-block "isSWJ"
[04:13:18.182]      </control>
[04:13:18.182]      <control if="!isSWJ" while="" timeout="0" info="">
[04:13:18.182]        // if-block "!isSWJ"
[04:13:18.182]          // =>  FALSE
[04:13:18.182]        // skip if-block "!isSWJ"
[04:13:18.182]      </control>
[04:13:18.182]      <block atomic="false" info="">
[04:13:18.182]        ReadDP(0x0);
[04:13:18.182]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:13:18.182]      </block>
[04:13:18.182]      // end if-block "protType == 2"
[04:13:18.182]    </control>
[04:13:18.182]  </sequence>
[04:13:18.182]  
[04:13:18.182]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:13:18.182]  
[04:13:18.182]  <debugvars>
[04:13:18.182]    // Pre-defined
[04:13:18.182]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:13:18.182]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:13:18.182]    __dp=0x00000000
[04:13:18.182]    __ap=0x00000000
[04:13:18.182]    __traceout=0x00000000      (Trace Disabled)
[04:13:18.182]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:13:18.182]    __FlashAddr=0x00000000
[04:13:18.182]    __FlashLen=0x00000000
[04:13:18.182]    __FlashArg=0x00000000
[04:13:18.182]    __FlashOp=0x00000000
[04:13:18.182]    __Result=0x00000000
[04:13:18.192]  </debugvars>
[04:13:18.192]  
[04:13:18.192]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:13:18.192]    <block atomic="false" info="">
[04:13:18.192]      __var SW_DP_ABORT       = 0x0;
[04:13:18.192]        // -> [SW_DP_ABORT <= 0x00000000]
[04:13:18.192]      __var DP_CTRL_STAT      = 0x4;
[04:13:18.192]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:13:18.192]      __var DP_SELECT         = 0x8;
[04:13:18.192]        // -> [DP_SELECT <= 0x00000008]
[04:13:18.192]      __var powered_down      = 0;
[04:13:18.192]        // -> [powered_down <= 0x00000000]
[04:13:18.192]      WriteDP(DP_SELECT, 0x00000000);
[04:13:18.192]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:13:18.192]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:13:18.192]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:13:18.192]        // -> [powered_down <= 0x00000001]
[04:13:18.192]    </block>
[04:13:18.192]    <control if="powered_down" while="" timeout="0" info="">
[04:13:18.192]      // if-block "powered_down"
[04:13:18.192]        // =>  TRUE
[04:13:18.192]      <block atomic="false" info="">
[04:13:18.192]        Message(0, "Debug/System power-up request sent");
[04:13:18.192]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:13:18.203]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:13:18.203]      </block>
[04:13:18.203]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:13:18.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:13:18.205]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:13:18.205]        // while-condition  =>  FALSE
[04:13:18.205]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:13:18.205]      </control>
[04:13:18.206]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:13:18.206]        // if-block "(__protocol & 0xFFFF) == 1"
[04:13:18.206]          // =>  FALSE
[04:13:18.206]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:13:18.206]      </control>
[04:13:18.206]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:13:18.206]        // if-block "(__protocol & 0xFFFF) == 2"
[04:13:18.206]          // =>  TRUE
[04:13:18.206]        <block atomic="false" info="">
[04:13:18.206]          Message(0, "executing SWD power up");
[04:13:18.208]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:13:18.209]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:13:18.210]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:13:18.211]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:13:18.211]        </block>
[04:13:18.211]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:13:18.212]      </control>
[04:13:18.212]      // end if-block "powered_down"
[04:13:18.212]    </control>
[04:13:18.212]    <block atomic="false" info="">
[04:13:18.212]      __var DEBUG_PORT_VAL    = 0;
[04:13:18.212]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:13:18.213]      __var ACCESS_POINT_VAL  = 0;
[04:13:18.213]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:13:18.213]      __ap = 1; 
[04:13:18.213]        // -> [__ap <= 0x00000001]
[04:13:18.213]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:13:18.216]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:13:18.216]      __ap = 4;
[04:13:18.217]        // -> [__ap <= 0x00000004]
[04:13:18.217]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:13:18.220]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:13:18.220]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:13:18.220]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:13:18.220]    </block>
[04:13:18.220]    <block atomic="false" info="">
[04:13:18.220]      __var nReset = 0x80;
[04:13:18.220]        // -> [nReset <= 0x00000080]
[04:13:18.220]      __var canReadPins = 0;
[04:13:18.220]        // -> [canReadPins <= 0x00000000]
[04:13:18.220]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:13:18.220]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:13:18.220]        // -> [canReadPins <= 0x00000001]
[04:13:18.220]    </block>
[04:13:18.220]    <control if="" while="1" timeout="200" info="">
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.220]      // while-condition  =>  TRUE
[04:13:18.220]      // while "1"  (timeout="200")
[04:13:18.230]      // while-condition  =>  TRUE
[04:13:18.230]      // while "1"  (timeout="200")
[04:13:18.230]      // while  =>  TIMEOUT
[04:13:18.230]      // end while "1"
[04:13:18.230]    </control>
[04:13:18.230]    <control if="canReadPins" while="" timeout="0" info="">
[04:13:18.230]      // if-block "canReadPins"
[04:13:18.230]        // =>  TRUE
[04:13:18.230]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:13:18.230]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:13:18.233]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:13:18.233]        // while-condition  =>  FALSE
[04:13:18.233]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:13:18.233]      </control>
[04:13:18.233]      // end if-block "canReadPins"
[04:13:18.233]    </control>
[04:13:18.233]    <control if="!canReadPins" while="" timeout="0" info="">
[04:13:18.233]      // if-block "!canReadPins"
[04:13:18.233]        // =>  FALSE
[04:13:18.233]      // skip if-block "!canReadPins"
[04:13:18.233]    </control>
[04:13:18.233]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:13:18.233]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:13:18.233]        // =>  TRUE
[04:13:18.233]      <block atomic="false" info="">
[04:13:18.233]        WriteAP(0x00, 0x190008);
[04:13:18.233]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:13:18.233]        WriteAP(0xF0, 0x01);
[04:13:18.233]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:13:18.233]      </block>
[04:13:18.233]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:13:18.241]    </control>
[04:13:18.241]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:13:18.241]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:13:18.241]        // =>  FALSE
[04:13:18.241]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:13:18.241]    </control>
[04:13:18.241]    <block atomic="false" info="">
[04:13:18.241]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:13:18.241]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:13:18.241]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:13:18.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:13:18.241]      __ap = 0; //lets make sure we reset the access point selection
[04:13:18.241]        // -> [__ap <= 0x00000000]
[04:13:18.241]    </block>
[04:13:18.241]  </sequence>
[04:13:18.241]  
[04:13:18.271]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:13:18.271]  
[04:13:18.271]  <debugvars>
[04:13:18.271]    // Pre-defined
[04:13:18.271]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:13:18.271]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:13:18.271]    __dp=0x00000000
[04:13:18.271]    __ap=0x00000000
[04:13:18.271]    __traceout=0x00000000      (Trace Disabled)
[04:13:18.271]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:13:18.271]    __FlashAddr=0x00000000
[04:13:18.271]    __FlashLen=0x00000000
[04:13:18.271]    __FlashArg=0x00000000
[04:13:18.271]    __FlashOp=0x00000000
[04:13:18.271]    __Result=0x00000000
[04:13:18.271]  </debugvars>
[04:13:18.271]  
[04:13:18.271]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:13:18.271]    <block atomic="false" info="">
[04:13:18.271]      __var deviceID = 0;
[04:13:18.271]        // -> [deviceID <= 0x00000000]
[04:13:18.271]      __var version = 0;
[04:13:18.271]        // -> [version <= 0x00000000]
[04:13:18.271]      __var partNum = 0;
[04:13:18.271]        // -> [partNum <= 0x00000000]
[04:13:18.271]      __var manuf = 0;
[04:13:18.271]        // -> [manuf <= 0x00000000]
[04:13:18.271]      __var isMSPM0G1X0X_G3X0X = 0;
[04:13:18.271]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:13:18.271]      __var isProduction = 0;
[04:13:18.271]        // -> [isProduction <= 0x00000000]
[04:13:18.271]      __var continueId = 0;
[04:13:18.271]        // -> [continueId <= 0x00000000]
[04:13:18.271]      deviceID =   Read32(0x41C40004);
[04:13:18.271]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:13:18.271]        // -> [deviceID <= 0x2BB8802F]
[04:13:18.271]      version = deviceID >> 28;
[04:13:18.271]        // -> [version <= 0x00000002]
[04:13:18.281]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:13:18.281]        // -> [partNum <= 0x0000BB88]
[04:13:18.281]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:13:18.281]        // -> [manuf <= 0x00000017]
[04:13:18.281]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:13:18.281]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:13:18.281]      isProduction = (version > 0);
[04:13:18.281]        // -> [isProduction <= 0x00000001]
[04:13:18.281]    </block>
[04:13:18.281]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:13:18.281]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:13:18.281]        // =>  FALSE
[04:13:18.281]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:13:18.281]    </control>
[04:13:18.281]    <control if="continueId == 4" while="" timeout="0" info="">
[04:13:18.281]      // if-block "continueId == 4"
[04:13:18.281]        // =>  FALSE
[04:13:18.281]      // skip if-block "continueId == 4"
[04:13:18.281]    </control>
[04:13:18.281]    <control if="!isProduction" while="" timeout="0" info="">
[04:13:18.281]      // if-block "!isProduction"
[04:13:18.281]        // =>  FALSE
[04:13:18.281]      // skip if-block "!isProduction"
[04:13:18.281]    </control>
[04:13:18.281]  </sequence>
[04:13:18.281]  
[04:13:49.474]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:13:49.474]  
[04:13:49.482]  <debugvars>
[04:13:49.482]    // Pre-defined
[04:13:49.482]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:13:49.482]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:13:49.482]    __dp=0x00000000
[04:13:49.483]    __ap=0x00000000
[04:13:49.483]    __traceout=0x00000000      (Trace Disabled)
[04:13:49.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:13:49.483]    __FlashAddr=0x00000000
[04:13:49.483]    __FlashLen=0x00000000
[04:13:49.483]    __FlashArg=0x00000000
[04:13:49.483]    __FlashOp=0x00000000
[04:13:49.483]    __Result=0x00000000
[04:13:49.483]  </debugvars>
[04:13:49.483]  
[04:13:49.483]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:13:49.483]    <block atomic="false" info="">
[04:13:49.484]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:13:49.484]        // -> [isSWJ <= 0x00000001]
[04:13:49.484]      __var hasDormant = __protocol & 0x00020000;
[04:13:49.484]        // -> [hasDormant <= 0x00000000]
[04:13:49.484]      __var protType   = __protocol & 0x0000FFFF;
[04:13:49.484]        // -> [protType <= 0x00000002]
[04:13:49.484]    </block>
[04:13:49.484]    <control if="protType == 1" while="" timeout="0" info="">
[04:13:49.484]      // if-block "protType == 1"
[04:13:49.484]        // =>  FALSE
[04:13:49.484]      // skip if-block "protType == 1"
[04:13:49.485]    </control>
[04:13:49.485]    <control if="protType == 2" while="" timeout="0" info="">
[04:13:49.485]      // if-block "protType == 2"
[04:13:49.485]        // =>  TRUE
[04:13:49.485]      <control if="isSWJ" while="" timeout="0" info="">
[04:13:49.485]        // if-block "isSWJ"
[04:13:49.485]          // =>  TRUE
[04:13:49.485]        <control if="hasDormant" while="" timeout="0" info="">
[04:13:49.485]          // if-block "hasDormant"
[04:13:49.485]            // =>  FALSE
[04:13:49.485]          // skip if-block "hasDormant"
[04:13:49.485]        </control>
[04:13:49.485]        <control if="!hasDormant" while="" timeout="0" info="">
[04:13:49.485]          // if-block "!hasDormant"
[04:13:49.485]            // =>  TRUE
[04:13:49.485]          <block atomic="false" info="">
[04:13:49.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:13:49.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:13:49.485]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:13:49.485]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:13:49.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:13:49.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:13:49.485]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:13:49.485]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:13:49.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:13:49.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:13:49.495]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:13:49.495]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:13:49.495]          </block>
[04:13:49.495]          // end if-block "!hasDormant"
[04:13:49.495]        </control>
[04:13:49.495]        // end if-block "isSWJ"
[04:13:49.495]      </control>
[04:13:49.495]      <control if="!isSWJ" while="" timeout="0" info="">
[04:13:49.495]        // if-block "!isSWJ"
[04:13:49.495]          // =>  FALSE
[04:13:49.495]        // skip if-block "!isSWJ"
[04:13:49.495]      </control>
[04:13:49.495]      <block atomic="false" info="">
[04:13:49.495]        ReadDP(0x0);
[04:13:49.495]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:13:49.495]      </block>
[04:13:49.495]      // end if-block "protType == 2"
[04:13:49.495]    </control>
[04:13:49.495]  </sequence>
[04:13:49.495]  
[04:13:49.495]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:13:49.495]  
[04:13:49.495]  <debugvars>
[04:13:49.495]    // Pre-defined
[04:13:49.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:13:49.495]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:13:49.495]    __dp=0x00000000
[04:13:49.495]    __ap=0x00000000
[04:13:49.495]    __traceout=0x00000000      (Trace Disabled)
[04:13:49.495]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:13:49.495]    __FlashAddr=0x00000000
[04:13:49.495]    __FlashLen=0x00000000
[04:13:49.495]    __FlashArg=0x00000000
[04:13:49.495]    __FlashOp=0x00000000
[04:13:49.495]    __Result=0x00000000
[04:13:49.495]  </debugvars>
[04:13:49.495]  
[04:13:49.495]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:13:49.495]    <block atomic="false" info="">
[04:13:49.495]      __var SW_DP_ABORT       = 0x0;
[04:13:49.495]        // -> [SW_DP_ABORT <= 0x00000000]
[04:13:49.495]      __var DP_CTRL_STAT      = 0x4;
[04:13:49.495]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:13:49.495]      __var DP_SELECT         = 0x8;
[04:13:49.495]        // -> [DP_SELECT <= 0x00000008]
[04:13:49.495]      __var powered_down      = 0;
[04:13:49.495]        // -> [powered_down <= 0x00000000]
[04:13:49.505]      WriteDP(DP_SELECT, 0x00000000);
[04:13:49.506]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:13:49.507]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:13:49.507]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:13:49.507]        // -> [powered_down <= 0x00000001]
[04:13:49.507]    </block>
[04:13:49.507]    <control if="powered_down" while="" timeout="0" info="">
[04:13:49.507]      // if-block "powered_down"
[04:13:49.507]        // =>  TRUE
[04:13:49.507]      <block atomic="false" info="">
[04:13:49.507]        Message(0, "Debug/System power-up request sent");
[04:13:49.507]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:13:49.507]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:13:49.507]      </block>
[04:13:49.507]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:13:49.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:13:49.507]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:13:49.507]        // while-condition  =>  FALSE
[04:13:49.507]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:13:49.507]      </control>
[04:13:49.507]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:13:49.507]        // if-block "(__protocol & 0xFFFF) == 1"
[04:13:49.507]          // =>  FALSE
[04:13:49.507]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:13:49.507]      </control>
[04:13:49.507]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:13:49.507]        // if-block "(__protocol & 0xFFFF) == 2"
[04:13:49.507]          // =>  TRUE
[04:13:49.507]        <block atomic="false" info="">
[04:13:49.507]          Message(0, "executing SWD power up");
[04:13:49.515]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:13:49.515]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:13:49.515]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:13:49.515]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:13:49.515]        </block>
[04:13:49.515]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:13:49.515]      </control>
[04:13:49.515]      // end if-block "powered_down"
[04:13:49.515]    </control>
[04:13:49.515]    <block atomic="false" info="">
[04:13:49.515]      __var DEBUG_PORT_VAL    = 0;
[04:13:49.515]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:13:49.515]      __var ACCESS_POINT_VAL  = 0;
[04:13:49.515]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:13:49.515]      __ap = 1; 
[04:13:49.515]        // -> [__ap <= 0x00000001]
[04:13:49.515]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:13:49.515]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:13:49.515]      __ap = 4;
[04:13:49.515]        // -> [__ap <= 0x00000004]
[04:13:49.525]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:13:49.525]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:13:49.525]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:13:49.525]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:13:49.525]    </block>
[04:13:49.525]    <block atomic="false" info="">
[04:13:49.525]      __var nReset = 0x80;
[04:13:49.525]        // -> [nReset <= 0x00000080]
[04:13:49.525]      __var canReadPins = 0;
[04:13:49.525]        // -> [canReadPins <= 0x00000000]
[04:13:49.525]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:13:49.525]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:13:49.525]        // -> [canReadPins <= 0x00000001]
[04:13:49.525]    </block>
[04:13:49.525]    <control if="" while="1" timeout="200" info="">
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.525]      // while "1"  (timeout="200")
[04:13:49.525]      // while-condition  =>  TRUE
[04:13:49.535]      // while "1"  (timeout="200")
[04:13:49.535]      // while  =>  TIMEOUT
[04:13:49.535]      // end while "1"
[04:13:49.535]    </control>
[04:13:49.535]    <control if="canReadPins" while="" timeout="0" info="">
[04:13:49.535]      // if-block "canReadPins"
[04:13:49.535]        // =>  TRUE
[04:13:49.535]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:13:49.535]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:13:49.535]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:13:49.535]        // while-condition  =>  FALSE
[04:13:49.535]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:13:49.535]      </control>
[04:13:49.535]      // end if-block "canReadPins"
[04:13:49.535]    </control>
[04:13:49.535]    <control if="!canReadPins" while="" timeout="0" info="">
[04:13:49.535]      // if-block "!canReadPins"
[04:13:49.535]        // =>  FALSE
[04:13:49.535]      // skip if-block "!canReadPins"
[04:13:49.535]    </control>
[04:13:49.535]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:13:49.535]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:13:49.535]        // =>  TRUE
[04:13:49.535]      <block atomic="false" info="">
[04:13:49.535]        WriteAP(0x00, 0x190008);
[04:13:49.535]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:13:49.535]        WriteAP(0xF0, 0x01);
[04:13:49.535]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:13:49.545]      </block>
[04:13:49.545]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:13:49.545]    </control>
[04:13:49.545]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:13:49.545]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:13:49.545]        // =>  FALSE
[04:13:49.545]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:13:49.545]    </control>
[04:13:49.545]    <block atomic="false" info="">
[04:13:49.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:13:49.545]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:13:49.545]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:13:49.545]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:13:49.545]      __ap = 0; //lets make sure we reset the access point selection
[04:13:49.545]        // -> [__ap <= 0x00000000]
[04:13:49.545]    </block>
[04:13:49.545]  </sequence>
[04:13:49.545]  
[04:13:49.567]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:13:49.567]  
[04:13:49.567]  <debugvars>
[04:13:49.567]    // Pre-defined
[04:13:49.567]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:13:49.567]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:13:49.567]    __dp=0x00000000
[04:13:49.567]    __ap=0x00000000
[04:13:49.567]    __traceout=0x00000000      (Trace Disabled)
[04:13:49.567]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:13:49.567]    __FlashAddr=0x00000000
[04:13:49.567]    __FlashLen=0x00000000
[04:13:49.567]    __FlashArg=0x00000000
[04:13:49.567]    __FlashOp=0x00000000
[04:13:49.567]    __Result=0x00000000
[04:13:49.567]  </debugvars>
[04:13:49.567]  
[04:13:49.567]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:13:49.567]    <block atomic="false" info="">
[04:13:49.567]      __var deviceID = 0;
[04:13:49.567]        // -> [deviceID <= 0x00000000]
[04:13:49.567]      __var version = 0;
[04:13:49.567]        // -> [version <= 0x00000000]
[04:13:49.567]      __var partNum = 0;
[04:13:49.567]        // -> [partNum <= 0x00000000]
[04:13:49.567]      __var manuf = 0;
[04:13:49.567]        // -> [manuf <= 0x00000000]
[04:13:49.567]      __var isMSPM0G1X0X_G3X0X = 0;
[04:13:49.567]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:13:49.567]      __var isProduction = 0;
[04:13:49.567]        // -> [isProduction <= 0x00000000]
[04:13:49.567]      __var continueId = 0;
[04:13:49.567]        // -> [continueId <= 0x00000000]
[04:13:49.567]      deviceID =   Read32(0x41C40004);
[04:13:49.575]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:13:49.575]        // -> [deviceID <= 0x2BB8802F]
[04:13:49.575]      version = deviceID >> 28;
[04:13:49.575]        // -> [version <= 0x00000002]
[04:13:49.575]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:13:49.575]        // -> [partNum <= 0x0000BB88]
[04:13:49.575]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:13:49.575]        // -> [manuf <= 0x00000017]
[04:13:49.575]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:13:49.575]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:13:49.575]      isProduction = (version > 0);
[04:13:49.575]        // -> [isProduction <= 0x00000001]
[04:13:49.575]    </block>
[04:13:49.575]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:13:49.575]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:13:49.575]        // =>  FALSE
[04:13:49.575]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:13:49.575]    </control>
[04:13:49.575]    <control if="continueId == 4" while="" timeout="0" info="">
[04:13:49.575]      // if-block "continueId == 4"
[04:13:49.575]        // =>  FALSE
[04:13:49.575]      // skip if-block "continueId == 4"
[04:13:49.575]    </control>
[04:13:49.575]    <control if="!isProduction" while="" timeout="0" info="">
[04:13:49.575]      // if-block "!isProduction"
[04:13:49.575]        // =>  FALSE
[04:13:49.575]      // skip if-block "!isProduction"
[04:13:49.575]    </control>
[04:13:49.575]  </sequence>
[04:13:49.575]  
[04:16:07.142]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:16:07.142]  
[04:16:07.155]  <debugvars>
[04:16:07.155]    // Pre-defined
[04:16:07.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:07.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:07.155]    __dp=0x00000000
[04:16:07.155]    __ap=0x00000000
[04:16:07.155]    __traceout=0x00000000      (Trace Disabled)
[04:16:07.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:07.155]    __FlashAddr=0x00000000
[04:16:07.155]    __FlashLen=0x00000000
[04:16:07.155]    __FlashArg=0x00000000
[04:16:07.155]    __FlashOp=0x00000000
[04:16:07.155]    __Result=0x00000000
[04:16:07.155]  </debugvars>
[04:16:07.155]  
[04:16:07.155]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:16:07.155]    <block atomic="false" info="">
[04:16:07.155]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:16:07.155]        // -> [isSWJ <= 0x00000001]
[04:16:07.155]      __var hasDormant = __protocol & 0x00020000;
[04:16:07.155]        // -> [hasDormant <= 0x00000000]
[04:16:07.155]      __var protType   = __protocol & 0x0000FFFF;
[04:16:07.155]        // -> [protType <= 0x00000002]
[04:16:07.155]    </block>
[04:16:07.155]    <control if="protType == 1" while="" timeout="0" info="">
[04:16:07.155]      // if-block "protType == 1"
[04:16:07.155]        // =>  FALSE
[04:16:07.155]      // skip if-block "protType == 1"
[04:16:07.155]    </control>
[04:16:07.155]    <control if="protType == 2" while="" timeout="0" info="">
[04:16:07.155]      // if-block "protType == 2"
[04:16:07.155]        // =>  TRUE
[04:16:07.155]      <control if="isSWJ" while="" timeout="0" info="">
[04:16:07.155]        // if-block "isSWJ"
[04:16:07.155]          // =>  TRUE
[04:16:07.155]        <control if="hasDormant" while="" timeout="0" info="">
[04:16:07.155]          // if-block "hasDormant"
[04:16:07.155]            // =>  FALSE
[04:16:07.155]          // skip if-block "hasDormant"
[04:16:07.155]        </control>
[04:16:07.155]        <control if="!hasDormant" while="" timeout="0" info="">
[04:16:07.155]          // if-block "!hasDormant"
[04:16:07.155]            // =>  TRUE
[04:16:07.155]          <block atomic="false" info="">
[04:16:07.155]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:16:07.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:07.155]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:16:07.162]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:16:07.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:16:07.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:07.162]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:16:07.162]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:16:07.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:16:07.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:07.162]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:16:07.162]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:16:07.162]          </block>
[04:16:07.162]          // end if-block "!hasDormant"
[04:16:07.162]        </control>
[04:16:07.162]        // end if-block "isSWJ"
[04:16:07.162]      </control>
[04:16:07.162]      <control if="!isSWJ" while="" timeout="0" info="">
[04:16:07.162]        // if-block "!isSWJ"
[04:16:07.162]          // =>  FALSE
[04:16:07.162]        // skip if-block "!isSWJ"
[04:16:07.162]      </control>
[04:16:07.162]      <block atomic="false" info="">
[04:16:07.162]        ReadDP(0x0);
[04:16:07.172]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:16:07.172]      </block>
[04:16:07.172]      // end if-block "protType == 2"
[04:16:07.172]    </control>
[04:16:07.172]  </sequence>
[04:16:07.172]  
[04:16:07.172]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:16:07.172]  
[04:16:07.172]  <debugvars>
[04:16:07.172]    // Pre-defined
[04:16:07.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:07.172]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:07.172]    __dp=0x00000000
[04:16:07.172]    __ap=0x00000000
[04:16:07.172]    __traceout=0x00000000      (Trace Disabled)
[04:16:07.172]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:07.172]    __FlashAddr=0x00000000
[04:16:07.172]    __FlashLen=0x00000000
[04:16:07.172]    __FlashArg=0x00000000
[04:16:07.172]    __FlashOp=0x00000000
[04:16:07.172]    __Result=0x00000000
[04:16:07.172]  </debugvars>
[04:16:07.172]  
[04:16:07.172]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:16:07.172]    <block atomic="false" info="">
[04:16:07.172]      __var SW_DP_ABORT       = 0x0;
[04:16:07.172]        // -> [SW_DP_ABORT <= 0x00000000]
[04:16:07.172]      __var DP_CTRL_STAT      = 0x4;
[04:16:07.172]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:16:07.172]      __var DP_SELECT         = 0x8;
[04:16:07.172]        // -> [DP_SELECT <= 0x00000008]
[04:16:07.172]      __var powered_down      = 0;
[04:16:07.172]        // -> [powered_down <= 0x00000000]
[04:16:07.172]      WriteDP(DP_SELECT, 0x00000000);
[04:16:07.172]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:16:07.172]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:16:07.172]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:16:07.182]        // -> [powered_down <= 0x00000001]
[04:16:07.182]    </block>
[04:16:07.182]    <control if="powered_down" while="" timeout="0" info="">
[04:16:07.182]      // if-block "powered_down"
[04:16:07.182]        // =>  TRUE
[04:16:07.182]      <block atomic="false" info="">
[04:16:07.182]        Message(0, "Debug/System power-up request sent");
[04:16:07.182]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:16:07.182]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:16:07.182]      </block>
[04:16:07.182]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:16:07.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:16:07.182]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:16:07.182]        // while-condition  =>  FALSE
[04:16:07.182]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:16:07.182]      </control>
[04:16:07.182]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:16:07.182]        // if-block "(__protocol & 0xFFFF) == 1"
[04:16:07.182]          // =>  FALSE
[04:16:07.182]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:16:07.182]      </control>
[04:16:07.182]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:16:07.182]        // if-block "(__protocol & 0xFFFF) == 2"
[04:16:07.182]          // =>  TRUE
[04:16:07.182]        <block atomic="false" info="">
[04:16:07.182]          Message(0, "executing SWD power up");
[04:16:07.182]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:16:07.192]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:16:07.192]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:16:07.192]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:16:07.192]        </block>
[04:16:07.192]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:16:07.192]      </control>
[04:16:07.192]      // end if-block "powered_down"
[04:16:07.192]    </control>
[04:16:07.192]    <block atomic="false" info="">
[04:16:07.192]      __var DEBUG_PORT_VAL    = 0;
[04:16:07.192]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:16:07.192]      __var ACCESS_POINT_VAL  = 0;
[04:16:07.192]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:16:07.192]      __ap = 1; 
[04:16:07.192]        // -> [__ap <= 0x00000001]
[04:16:07.192]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:16:07.192]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:16:07.192]      __ap = 4;
[04:16:07.192]        // -> [__ap <= 0x00000004]
[04:16:07.192]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:07.192]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.202]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:16:07.202]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:07.204]    </block>
[04:16:07.204]    <block atomic="false" info="">
[04:16:07.205]      __var nReset = 0x80;
[04:16:07.205]        // -> [nReset <= 0x00000080]
[04:16:07.205]      __var canReadPins = 0;
[04:16:07.205]        // -> [canReadPins <= 0x00000000]
[04:16:07.205]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:16:07.206]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:16:07.207]        // -> [canReadPins <= 0x00000001]
[04:16:07.207]    </block>
[04:16:07.207]    <control if="" while="1" timeout="200" info="">
[04:16:07.207]      // while "1"  (timeout="200")
[04:16:07.207]      // while-condition  =>  TRUE
[04:16:07.207]      // while "1"  (timeout="200")
[04:16:07.207]      // while-condition  =>  TRUE
[04:16:07.207]      // while "1"  (timeout="200")
[04:16:07.207]      // while-condition  =>  TRUE
[04:16:07.207]      // while "1"  (timeout="200")
[04:16:07.207]      // while-condition  =>  TRUE
[04:16:07.207]      // while "1"  (timeout="200")
[04:16:07.207]      // while-condition  =>  TRUE
[04:16:07.208]      // while "1"  (timeout="200")
[04:16:07.208]      // while-condition  =>  TRUE
[04:16:07.208]      // while "1"  (timeout="200")
[04:16:07.208]      // while-condition  =>  TRUE
[04:16:07.208]      // while "1"  (timeout="200")
[04:16:07.208]      // while-condition  =>  TRUE
[04:16:07.208]      // while "1"  (timeout="200")
[04:16:07.208]      // while-condition  =>  TRUE
[04:16:07.208]      // while "1"  (timeout="200")
[04:16:07.208]      // while-condition  =>  TRUE
[04:16:07.208]      // while "1"  (timeout="200")
[04:16:07.208]      // while-condition  =>  TRUE
[04:16:07.208]      // while "1"  (timeout="200")
[04:16:07.209]      // while-condition  =>  TRUE
[04:16:07.209]      // while "1"  (timeout="200")
[04:16:07.209]      // while-condition  =>  TRUE
[04:16:07.209]      // while "1"  (timeout="200")
[04:16:07.209]      // while-condition  =>  TRUE
[04:16:07.210]      // while "1"  (timeout="200")
[04:16:07.210]      // while-condition  =>  TRUE
[04:16:07.210]      // while "1"  (timeout="200")
[04:16:07.210]      // while-condition  =>  TRUE
[04:16:07.210]      // while "1"  (timeout="200")
[04:16:07.210]      // while-condition  =>  TRUE
[04:16:07.210]      // while "1"  (timeout="200")
[04:16:07.210]      // while-condition  =>  TRUE
[04:16:07.210]      // while "1"  (timeout="200")
[04:16:07.210]      // while-condition  =>  TRUE
[04:16:07.210]      // while "1"  (timeout="200")
[04:16:07.210]      // while-condition  =>  TRUE
[04:16:07.211]      // while "1"  (timeout="200")
[04:16:07.211]      // while-condition  =>  TRUE
[04:16:07.211]      // while "1"  (timeout="200")
[04:16:07.211]      // while-condition  =>  TRUE
[04:16:07.211]      // while "1"  (timeout="200")
[04:16:07.211]      // while-condition  =>  TRUE
[04:16:07.211]      // while "1"  (timeout="200")
[04:16:07.211]      // while-condition  =>  TRUE
[04:16:07.211]      // while "1"  (timeout="200")
[04:16:07.211]      // while-condition  =>  TRUE
[04:16:07.212]      // while "1"  (timeout="200")
[04:16:07.212]      // while-condition  =>  TRUE
[04:16:07.212]      // while "1"  (timeout="200")
[04:16:07.212]      // while-condition  =>  TRUE
[04:16:07.212]      // while "1"  (timeout="200")
[04:16:07.212]      // while-condition  =>  TRUE
[04:16:07.212]      // while "1"  (timeout="200")
[04:16:07.212]      // while-condition  =>  TRUE
[04:16:07.212]      // while "1"  (timeout="200")
[04:16:07.212]      // while-condition  =>  TRUE
[04:16:07.212]      // while "1"  (timeout="200")
[04:16:07.213]      // while-condition  =>  TRUE
[04:16:07.213]      // while "1"  (timeout="200")
[04:16:07.213]      // while-condition  =>  TRUE
[04:16:07.213]      // while "1"  (timeout="200")
[04:16:07.213]      // while-condition  =>  TRUE
[04:16:07.213]      // while "1"  (timeout="200")
[04:16:07.213]      // while-condition  =>  TRUE
[04:16:07.213]      // while "1"  (timeout="200")
[04:16:07.213]      // while-condition  =>  TRUE
[04:16:07.213]      // while "1"  (timeout="200")
[04:16:07.213]      // while-condition  =>  TRUE
[04:16:07.213]      // while "1"  (timeout="200")
[04:16:07.213]      // while-condition  =>  TRUE
[04:16:07.214]      // while "1"  (timeout="200")
[04:16:07.214]      // while-condition  =>  TRUE
[04:16:07.214]      // while "1"  (timeout="200")
[04:16:07.214]      // while-condition  =>  TRUE
[04:16:07.214]      // while "1"  (timeout="200")
[04:16:07.214]      // while-condition  =>  TRUE
[04:16:07.214]      // while "1"  (timeout="200")
[04:16:07.214]      // while-condition  =>  TRUE
[04:16:07.214]      // while "1"  (timeout="200")
[04:16:07.214]      // while-condition  =>  TRUE
[04:16:07.214]      // while "1"  (timeout="200")
[04:16:07.214]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.215]      // while-condition  =>  TRUE
[04:16:07.215]      // while "1"  (timeout="200")
[04:16:07.217]      // while-condition  =>  TRUE
[04:16:07.217]      // while "1"  (timeout="200")
[04:16:07.217]      // while-condition  =>  TRUE
[04:16:07.217]      // while "1"  (timeout="200")
[04:16:07.217]      // while-condition  =>  TRUE
[04:16:07.217]      // while "1"  (timeout="200")
[04:16:07.217]      // while-condition  =>  TRUE
[04:16:07.217]      // while "1"  (timeout="200")
[04:16:07.217]      // while-condition  =>  TRUE
[04:16:07.217]      // while "1"  (timeout="200")
[04:16:07.218]      // while-condition  =>  TRUE
[04:16:07.218]      // while "1"  (timeout="200")
[04:16:07.218]      // while-condition  =>  TRUE
[04:16:07.218]      // while "1"  (timeout="200")
[04:16:07.218]      // while-condition  =>  TRUE
[04:16:07.218]      // while "1"  (timeout="200")
[04:16:07.218]      // while-condition  =>  TRUE
[04:16:07.219]      // while "1"  (timeout="200")
[04:16:07.219]      // while-condition  =>  TRUE
[04:16:07.219]      // while "1"  (timeout="200")
[04:16:07.219]      // while-condition  =>  TRUE
[04:16:07.219]      // while "1"  (timeout="200")
[04:16:07.219]      // while-condition  =>  TRUE
[04:16:07.219]      // while "1"  (timeout="200")
[04:16:07.219]      // while-condition  =>  TRUE
[04:16:07.220]      // while "1"  (timeout="200")
[04:16:07.220]      // while-condition  =>  TRUE
[04:16:07.220]      // while "1"  (timeout="200")
[04:16:07.220]      // while-condition  =>  TRUE
[04:16:07.220]      // while "1"  (timeout="200")
[04:16:07.220]      // while-condition  =>  TRUE
[04:16:07.220]      // while "1"  (timeout="200")
[04:16:07.220]      // while-condition  =>  TRUE
[04:16:07.220]      // while "1"  (timeout="200")
[04:16:07.220]      // while-condition  =>  TRUE
[04:16:07.220]      // while "1"  (timeout="200")
[04:16:07.221]      // while-condition  =>  TRUE
[04:16:07.221]      // while "1"  (timeout="200")
[04:16:07.221]      // while-condition  =>  TRUE
[04:16:07.221]      // while "1"  (timeout="200")
[04:16:07.221]      // while-condition  =>  TRUE
[04:16:07.221]      // while "1"  (timeout="200")
[04:16:07.221]      // while-condition  =>  TRUE
[04:16:07.221]      // while "1"  (timeout="200")
[04:16:07.221]      // while-condition  =>  TRUE
[04:16:07.221]      // while "1"  (timeout="200")
[04:16:07.221]      // while-condition  =>  TRUE
[04:16:07.221]      // while "1"  (timeout="200")
[04:16:07.222]      // while-condition  =>  TRUE
[04:16:07.222]      // while "1"  (timeout="200")
[04:16:07.222]      // while  =>  TIMEOUT
[04:16:07.222]      // end while "1"
[04:16:07.222]    </control>
[04:16:07.222]    <control if="canReadPins" while="" timeout="0" info="">
[04:16:07.222]      // if-block "canReadPins"
[04:16:07.222]        // =>  TRUE
[04:16:07.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:16:07.222]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:16:07.223]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:16:07.223]        // while-condition  =>  FALSE
[04:16:07.223]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:16:07.223]      </control>
[04:16:07.223]      // end if-block "canReadPins"
[04:16:07.223]    </control>
[04:16:07.223]    <control if="!canReadPins" while="" timeout="0" info="">
[04:16:07.223]      // if-block "!canReadPins"
[04:16:07.223]        // =>  FALSE
[04:16:07.223]      // skip if-block "!canReadPins"
[04:16:07.223]    </control>
[04:16:07.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:16:07.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:07.223]        // =>  TRUE
[04:16:07.223]      <block atomic="false" info="">
[04:16:07.223]        WriteAP(0x00, 0x190008);
[04:16:07.223]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.223]        WriteAP(0xF0, 0x01);
[04:16:07.223]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.223]      </block>
[04:16:07.223]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:07.223]    </control>
[04:16:07.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:16:07.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:07.223]        // =>  FALSE
[04:16:07.223]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:07.223]    </control>
[04:16:07.223]    <block atomic="false" info="">
[04:16:07.223]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:07.233]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:16:07.233]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:16:07.233]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:07.233]      __ap = 0; //lets make sure we reset the access point selection
[04:16:07.233]        // -> [__ap <= 0x00000000]
[04:16:07.233]    </block>
[04:16:07.233]  </sequence>
[04:16:07.233]  
[04:16:07.255]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:16:07.255]  
[04:16:07.255]  <debugvars>
[04:16:07.255]    // Pre-defined
[04:16:07.255]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:07.255]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:07.255]    __dp=0x00000000
[04:16:07.255]    __ap=0x00000000
[04:16:07.255]    __traceout=0x00000000      (Trace Disabled)
[04:16:07.255]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:07.255]    __FlashAddr=0x00000000
[04:16:07.255]    __FlashLen=0x00000000
[04:16:07.255]    __FlashArg=0x00000000
[04:16:07.255]    __FlashOp=0x00000000
[04:16:07.255]    __Result=0x00000000
[04:16:07.255]  </debugvars>
[04:16:07.255]  
[04:16:07.255]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:16:07.255]    <block atomic="false" info="">
[04:16:07.255]      __var deviceID = 0;
[04:16:07.255]        // -> [deviceID <= 0x00000000]
[04:16:07.255]      __var version = 0;
[04:16:07.255]        // -> [version <= 0x00000000]
[04:16:07.255]      __var partNum = 0;
[04:16:07.255]        // -> [partNum <= 0x00000000]
[04:16:07.255]      __var manuf = 0;
[04:16:07.255]        // -> [manuf <= 0x00000000]
[04:16:07.255]      __var isMSPM0G1X0X_G3X0X = 0;
[04:16:07.255]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:16:07.255]      __var isProduction = 0;
[04:16:07.255]        // -> [isProduction <= 0x00000000]
[04:16:07.255]      __var continueId = 0;
[04:16:07.255]        // -> [continueId <= 0x00000000]
[04:16:07.255]      deviceID =   Read32(0x41C40004);
[04:16:07.263]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:16:07.263]        // -> [deviceID <= 0x2BB8802F]
[04:16:07.263]      version = deviceID >> 28;
[04:16:07.263]        // -> [version <= 0x00000002]
[04:16:07.263]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:16:07.263]        // -> [partNum <= 0x0000BB88]
[04:16:07.263]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:16:07.263]        // -> [manuf <= 0x00000017]
[04:16:07.263]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:16:07.263]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:16:07.263]      isProduction = (version > 0);
[04:16:07.263]        // -> [isProduction <= 0x00000001]
[04:16:07.263]    </block>
[04:16:07.263]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:16:07.263]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:16:07.263]        // =>  FALSE
[04:16:07.263]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:16:07.263]    </control>
[04:16:07.263]    <control if="continueId == 4" while="" timeout="0" info="">
[04:16:07.263]      // if-block "continueId == 4"
[04:16:07.263]        // =>  FALSE
[04:16:07.263]      // skip if-block "continueId == 4"
[04:16:07.263]    </control>
[04:16:07.263]    <control if="!isProduction" while="" timeout="0" info="">
[04:16:07.263]      // if-block "!isProduction"
[04:16:07.263]        // =>  FALSE
[04:16:07.263]      // skip if-block "!isProduction"
[04:16:07.263]    </control>
[04:16:07.263]  </sequence>
[04:16:07.263]  
[04:16:19.522]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:16:19.522]  
[04:16:19.535]  <debugvars>
[04:16:19.535]    // Pre-defined
[04:16:19.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:19.535]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:19.535]    __dp=0x00000000
[04:16:19.535]    __ap=0x00000000
[04:16:19.535]    __traceout=0x00000000      (Trace Disabled)
[04:16:19.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:19.535]    __FlashAddr=0x00000000
[04:16:19.535]    __FlashLen=0x00000000
[04:16:19.535]    __FlashArg=0x00000000
[04:16:19.535]    __FlashOp=0x00000000
[04:16:19.535]    __Result=0x00000000
[04:16:19.535]  </debugvars>
[04:16:19.535]  
[04:16:19.535]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:16:19.535]    <block atomic="false" info="">
[04:16:19.535]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:16:19.535]        // -> [isSWJ <= 0x00000001]
[04:16:19.535]      __var hasDormant = __protocol & 0x00020000;
[04:16:19.535]        // -> [hasDormant <= 0x00000000]
[04:16:19.535]      __var protType   = __protocol & 0x0000FFFF;
[04:16:19.535]        // -> [protType <= 0x00000002]
[04:16:19.535]    </block>
[04:16:19.535]    <control if="protType == 1" while="" timeout="0" info="">
[04:16:19.535]      // if-block "protType == 1"
[04:16:19.535]        // =>  FALSE
[04:16:19.535]      // skip if-block "protType == 1"
[04:16:19.535]    </control>
[04:16:19.535]    <control if="protType == 2" while="" timeout="0" info="">
[04:16:19.535]      // if-block "protType == 2"
[04:16:19.535]        // =>  TRUE
[04:16:19.535]      <control if="isSWJ" while="" timeout="0" info="">
[04:16:19.535]        // if-block "isSWJ"
[04:16:19.535]          // =>  TRUE
[04:16:19.535]        <control if="hasDormant" while="" timeout="0" info="">
[04:16:19.535]          // if-block "hasDormant"
[04:16:19.535]            // =>  FALSE
[04:16:19.535]          // skip if-block "hasDormant"
[04:16:19.535]        </control>
[04:16:19.535]        <control if="!hasDormant" while="" timeout="0" info="">
[04:16:19.535]          // if-block "!hasDormant"
[04:16:19.535]            // =>  TRUE
[04:16:19.535]          <block atomic="false" info="">
[04:16:19.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:16:19.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:19.540]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:16:19.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:16:19.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:16:19.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:19.540]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:16:19.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:16:19.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:16:19.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:19.540]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:16:19.540]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:16:19.540]          </block>
[04:16:19.540]          // end if-block "!hasDormant"
[04:16:19.540]        </control>
[04:16:19.540]        // end if-block "isSWJ"
[04:16:19.540]      </control>
[04:16:19.550]      <control if="!isSWJ" while="" timeout="0" info="">
[04:16:19.550]        // if-block "!isSWJ"
[04:16:19.550]          // =>  FALSE
[04:16:19.550]        // skip if-block "!isSWJ"
[04:16:19.550]      </control>
[04:16:19.550]      <block atomic="false" info="">
[04:16:19.550]        ReadDP(0x0);
[04:16:19.550]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:16:19.550]      </block>
[04:16:19.550]      // end if-block "protType == 2"
[04:16:19.550]    </control>
[04:16:19.550]  </sequence>
[04:16:19.550]  
[04:16:19.550]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:16:19.550]  
[04:16:19.550]  <debugvars>
[04:16:19.550]    // Pre-defined
[04:16:19.550]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:19.550]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:19.550]    __dp=0x00000000
[04:16:19.550]    __ap=0x00000000
[04:16:19.550]    __traceout=0x00000000      (Trace Disabled)
[04:16:19.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:19.550]    __FlashAddr=0x00000000
[04:16:19.550]    __FlashLen=0x00000000
[04:16:19.550]    __FlashArg=0x00000000
[04:16:19.550]    __FlashOp=0x00000000
[04:16:19.550]    __Result=0x00000000
[04:16:19.550]  </debugvars>
[04:16:19.550]  
[04:16:19.550]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:16:19.550]    <block atomic="false" info="">
[04:16:19.550]      __var SW_DP_ABORT       = 0x0;
[04:16:19.550]        // -> [SW_DP_ABORT <= 0x00000000]
[04:16:19.550]      __var DP_CTRL_STAT      = 0x4;
[04:16:19.550]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:16:19.550]      __var DP_SELECT         = 0x8;
[04:16:19.550]        // -> [DP_SELECT <= 0x00000008]
[04:16:19.550]      __var powered_down      = 0;
[04:16:19.550]        // -> [powered_down <= 0x00000000]
[04:16:19.550]      WriteDP(DP_SELECT, 0x00000000);
[04:16:19.550]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:16:19.550]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:16:19.560]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:16:19.560]        // -> [powered_down <= 0x00000001]
[04:16:19.560]    </block>
[04:16:19.560]    <control if="powered_down" while="" timeout="0" info="">
[04:16:19.560]      // if-block "powered_down"
[04:16:19.560]        // =>  TRUE
[04:16:19.560]      <block atomic="false" info="">
[04:16:19.560]        Message(0, "Debug/System power-up request sent");
[04:16:19.560]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:16:19.560]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:16:19.560]      </block>
[04:16:19.560]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:16:19.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:16:19.560]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:16:19.560]        // while-condition  =>  FALSE
[04:16:19.560]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:16:19.560]      </control>
[04:16:19.560]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:16:19.560]        // if-block "(__protocol & 0xFFFF) == 1"
[04:16:19.560]          // =>  FALSE
[04:16:19.560]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:16:19.560]      </control>
[04:16:19.560]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:16:19.560]        // if-block "(__protocol & 0xFFFF) == 2"
[04:16:19.560]          // =>  TRUE
[04:16:19.560]        <block atomic="false" info="">
[04:16:19.560]          Message(0, "executing SWD power up");
[04:16:19.570]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:16:19.572]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:16:19.572]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:16:19.572]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:16:19.572]        </block>
[04:16:19.572]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:16:19.572]      </control>
[04:16:19.572]      // end if-block "powered_down"
[04:16:19.572]    </control>
[04:16:19.572]    <block atomic="false" info="">
[04:16:19.572]      __var DEBUG_PORT_VAL    = 0;
[04:16:19.572]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:16:19.572]      __var ACCESS_POINT_VAL  = 0;
[04:16:19.572]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:16:19.572]      __ap = 1; 
[04:16:19.572]        // -> [__ap <= 0x00000001]
[04:16:19.572]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:16:19.572]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:16:19.572]      __ap = 4;
[04:16:19.572]        // -> [__ap <= 0x00000004]
[04:16:19.572]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:19.580]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:16:19.580]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:16:19.580]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:19.580]    </block>
[04:16:19.580]    <block atomic="false" info="">
[04:16:19.580]      __var nReset = 0x80;
[04:16:19.580]        // -> [nReset <= 0x00000080]
[04:16:19.580]      __var canReadPins = 0;
[04:16:19.580]        // -> [canReadPins <= 0x00000000]
[04:16:19.580]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:16:19.580]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:16:19.580]        // -> [canReadPins <= 0x00000001]
[04:16:19.580]    </block>
[04:16:19.580]    <control if="" while="1" timeout="200" info="">
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.580]      // while-condition  =>  TRUE
[04:16:19.580]      // while "1"  (timeout="200")
[04:16:19.590]      // while-condition  =>  TRUE
[04:16:19.590]      // while "1"  (timeout="200")
[04:16:19.590]      // while  =>  TIMEOUT
[04:16:19.590]      // end while "1"
[04:16:19.590]    </control>
[04:16:19.590]    <control if="canReadPins" while="" timeout="0" info="">
[04:16:19.590]      // if-block "canReadPins"
[04:16:19.590]        // =>  TRUE
[04:16:19.590]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:16:19.590]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:16:19.592]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:16:19.592]        // while-condition  =>  FALSE
[04:16:19.592]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:16:19.592]      </control>
[04:16:19.592]      // end if-block "canReadPins"
[04:16:19.592]    </control>
[04:16:19.592]    <control if="!canReadPins" while="" timeout="0" info="">
[04:16:19.592]      // if-block "!canReadPins"
[04:16:19.592]        // =>  FALSE
[04:16:19.592]      // skip if-block "!canReadPins"
[04:16:19.592]    </control>
[04:16:19.592]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:16:19.592]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:19.592]        // =>  TRUE
[04:16:19.592]      <block atomic="false" info="">
[04:16:19.592]        WriteAP(0x00, 0x190008);
[04:16:19.592]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:19.592]        WriteAP(0xF0, 0x01);
[04:16:19.592]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:19.592]      </block>
[04:16:19.592]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:19.592]    </control>
[04:16:19.592]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:16:19.592]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:19.592]        // =>  FALSE
[04:16:19.592]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:19.592]    </control>
[04:16:19.592]    <block atomic="false" info="">
[04:16:19.601]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:19.601]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:16:19.601]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:16:19.601]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:19.601]      __ap = 0; //lets make sure we reset the access point selection
[04:16:19.601]        // -> [__ap <= 0x00000000]
[04:16:19.601]    </block>
[04:16:19.601]  </sequence>
[04:16:19.601]  
[04:16:19.621]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:16:19.621]  
[04:16:19.621]  <debugvars>
[04:16:19.621]    // Pre-defined
[04:16:19.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:19.621]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:19.621]    __dp=0x00000000
[04:16:19.621]    __ap=0x00000000
[04:16:19.621]    __traceout=0x00000000      (Trace Disabled)
[04:16:19.621]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:19.621]    __FlashAddr=0x00000000
[04:16:19.621]    __FlashLen=0x00000000
[04:16:19.621]    __FlashArg=0x00000000
[04:16:19.621]    __FlashOp=0x00000000
[04:16:19.621]    __Result=0x00000000
[04:16:19.621]  </debugvars>
[04:16:19.621]  
[04:16:19.621]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:16:19.621]    <block atomic="false" info="">
[04:16:19.621]      __var deviceID = 0;
[04:16:19.621]        // -> [deviceID <= 0x00000000]
[04:16:19.621]      __var version = 0;
[04:16:19.621]        // -> [version <= 0x00000000]
[04:16:19.621]      __var partNum = 0;
[04:16:19.621]        // -> [partNum <= 0x00000000]
[04:16:19.621]      __var manuf = 0;
[04:16:19.621]        // -> [manuf <= 0x00000000]
[04:16:19.621]      __var isMSPM0G1X0X_G3X0X = 0;
[04:16:19.621]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:16:19.621]      __var isProduction = 0;
[04:16:19.621]        // -> [isProduction <= 0x00000000]
[04:16:19.621]      __var continueId = 0;
[04:16:19.621]        // -> [continueId <= 0x00000000]
[04:16:19.621]      deviceID =   Read32(0x41C40004);
[04:16:19.631]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:16:19.631]        // -> [deviceID <= 0x2BB8802F]
[04:16:19.631]      version = deviceID >> 28;
[04:16:19.631]        // -> [version <= 0x00000002]
[04:16:19.631]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:16:19.631]        // -> [partNum <= 0x0000BB88]
[04:16:19.631]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:16:19.631]        // -> [manuf <= 0x00000017]
[04:16:19.631]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:16:19.631]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:16:19.631]      isProduction = (version > 0);
[04:16:19.631]        // -> [isProduction <= 0x00000001]
[04:16:19.631]    </block>
[04:16:19.631]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:16:19.631]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:16:19.631]        // =>  FALSE
[04:16:19.631]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:16:19.631]    </control>
[04:16:19.631]    <control if="continueId == 4" while="" timeout="0" info="">
[04:16:19.631]      // if-block "continueId == 4"
[04:16:19.631]        // =>  FALSE
[04:16:19.631]      // skip if-block "continueId == 4"
[04:16:19.631]    </control>
[04:16:19.631]    <control if="!isProduction" while="" timeout="0" info="">
[04:16:19.631]      // if-block "!isProduction"
[04:16:19.631]        // =>  FALSE
[04:16:19.631]      // skip if-block "!isProduction"
[04:16:19.631]    </control>
[04:16:19.631]  </sequence>
[04:16:19.631]  
[04:16:27.782]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:16:27.782]  
[04:16:27.797]  <debugvars>
[04:16:27.797]    // Pre-defined
[04:16:27.797]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:27.797]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:27.797]    __dp=0x00000000
[04:16:27.797]    __ap=0x00000000
[04:16:27.797]    __traceout=0x00000000      (Trace Disabled)
[04:16:27.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:27.797]    __FlashAddr=0x00000000
[04:16:27.797]    __FlashLen=0x00000000
[04:16:27.797]    __FlashArg=0x00000000
[04:16:27.797]    __FlashOp=0x00000000
[04:16:27.797]    __Result=0x00000000
[04:16:27.797]  </debugvars>
[04:16:27.797]  
[04:16:27.797]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:16:27.797]    <block atomic="false" info="">
[04:16:27.797]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:16:27.797]        // -> [isSWJ <= 0x00000001]
[04:16:27.797]      __var hasDormant = __protocol & 0x00020000;
[04:16:27.797]        // -> [hasDormant <= 0x00000000]
[04:16:27.797]      __var protType   = __protocol & 0x0000FFFF;
[04:16:27.797]        // -> [protType <= 0x00000002]
[04:16:27.797]    </block>
[04:16:27.797]    <control if="protType == 1" while="" timeout="0" info="">
[04:16:27.797]      // if-block "protType == 1"
[04:16:27.797]        // =>  FALSE
[04:16:27.797]      // skip if-block "protType == 1"
[04:16:27.797]    </control>
[04:16:27.797]    <control if="protType == 2" while="" timeout="0" info="">
[04:16:27.797]      // if-block "protType == 2"
[04:16:27.797]        // =>  TRUE
[04:16:27.797]      <control if="isSWJ" while="" timeout="0" info="">
[04:16:27.797]        // if-block "isSWJ"
[04:16:27.800]          // =>  TRUE
[04:16:27.800]        <control if="hasDormant" while="" timeout="0" info="">
[04:16:27.800]          // if-block "hasDormant"
[04:16:27.800]            // =>  FALSE
[04:16:27.800]          // skip if-block "hasDormant"
[04:16:27.800]        </control>
[04:16:27.800]        <control if="!hasDormant" while="" timeout="0" info="">
[04:16:27.800]          // if-block "!hasDormant"
[04:16:27.800]            // =>  TRUE
[04:16:27.800]          <block atomic="false" info="">
[04:16:27.800]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:16:27.800]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:27.800]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:16:27.805]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:16:27.805]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:16:27.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:27.805]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:16:27.805]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:16:27.805]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:16:27.811]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:16:27.811]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:16:27.811]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:16:27.811]          </block>
[04:16:27.811]          // end if-block "!hasDormant"
[04:16:27.811]        </control>
[04:16:27.811]        // end if-block "isSWJ"
[04:16:27.811]      </control>
[04:16:27.811]      <control if="!isSWJ" while="" timeout="0" info="">
[04:16:27.811]        // if-block "!isSWJ"
[04:16:27.811]          // =>  FALSE
[04:16:27.811]        // skip if-block "!isSWJ"
[04:16:27.811]      </control>
[04:16:27.811]      <block atomic="false" info="">
[04:16:27.811]        ReadDP(0x0);
[04:16:27.816]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:16:27.816]      </block>
[04:16:27.816]      // end if-block "protType == 2"
[04:16:27.816]    </control>
[04:16:27.816]  </sequence>
[04:16:27.816]  
[04:16:27.816]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:16:27.816]  
[04:16:27.816]  <debugvars>
[04:16:27.816]    // Pre-defined
[04:16:27.816]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:27.816]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:27.816]    __dp=0x00000000
[04:16:27.816]    __ap=0x00000000
[04:16:27.816]    __traceout=0x00000000      (Trace Disabled)
[04:16:27.816]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:27.816]    __FlashAddr=0x00000000
[04:16:27.816]    __FlashLen=0x00000000
[04:16:27.816]    __FlashArg=0x00000000
[04:16:27.816]    __FlashOp=0x00000000
[04:16:27.816]    __Result=0x00000000
[04:16:27.816]  </debugvars>
[04:16:27.816]  
[04:16:27.816]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:16:27.820]    <block atomic="false" info="">
[04:16:27.820]      __var SW_DP_ABORT       = 0x0;
[04:16:27.820]        // -> [SW_DP_ABORT <= 0x00000000]
[04:16:27.820]      __var DP_CTRL_STAT      = 0x4;
[04:16:27.820]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:16:27.820]      __var DP_SELECT         = 0x8;
[04:16:27.820]        // -> [DP_SELECT <= 0x00000008]
[04:16:27.820]      __var powered_down      = 0;
[04:16:27.820]        // -> [powered_down <= 0x00000000]
[04:16:27.820]      WriteDP(DP_SELECT, 0x00000000);
[04:16:27.820]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:16:27.820]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:16:27.825]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:16:27.825]        // -> [powered_down <= 0x00000001]
[04:16:27.825]    </block>
[04:16:27.825]    <control if="powered_down" while="" timeout="0" info="">
[04:16:27.825]      // if-block "powered_down"
[04:16:27.825]        // =>  TRUE
[04:16:27.825]      <block atomic="false" info="">
[04:16:27.825]        Message(0, "Debug/System power-up request sent");
[04:16:27.825]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:16:27.830]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:16:27.830]      </block>
[04:16:27.830]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:16:27.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:16:27.830]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:16:27.830]        // while-condition  =>  FALSE
[04:16:27.830]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:16:27.830]      </control>
[04:16:27.830]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:16:27.830]        // if-block "(__protocol & 0xFFFF) == 1"
[04:16:27.830]          // =>  FALSE
[04:16:27.830]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:16:27.830]      </control>
[04:16:27.830]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:16:27.830]        // if-block "(__protocol & 0xFFFF) == 2"
[04:16:27.830]          // =>  TRUE
[04:16:27.830]        <block atomic="false" info="">
[04:16:27.830]          Message(0, "executing SWD power up");
[04:16:27.835]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:16:27.835]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:16:27.835]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:16:27.835]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:16:27.835]        </block>
[04:16:27.835]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:16:27.835]      </control>
[04:16:27.835]      // end if-block "powered_down"
[04:16:27.835]    </control>
[04:16:27.835]    <block atomic="false" info="">
[04:16:27.840]      __var DEBUG_PORT_VAL    = 0;
[04:16:27.840]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:16:27.840]      __var ACCESS_POINT_VAL  = 0;
[04:16:27.840]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:16:27.840]      __ap = 1; 
[04:16:27.840]        // -> [__ap <= 0x00000001]
[04:16:27.840]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:16:27.846]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:16:27.846]      __ap = 4;
[04:16:27.846]        // -> [__ap <= 0x00000004]
[04:16:27.846]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:27.846]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:16:27.846]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:16:27.846]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:27.850]    </block>
[04:16:27.850]    <block atomic="false" info="">
[04:16:27.850]      __var nReset = 0x80;
[04:16:27.850]        // -> [nReset <= 0x00000080]
[04:16:27.850]      __var canReadPins = 0;
[04:16:27.850]        // -> [canReadPins <= 0x00000000]
[04:16:27.850]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:16:27.850]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:16:27.850]        // -> [canReadPins <= 0x00000001]
[04:16:27.850]    </block>
[04:16:27.850]    <control if="" while="1" timeout="200" info="">
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.850]      // while-condition  =>  TRUE
[04:16:27.850]      // while "1"  (timeout="200")
[04:16:27.860]      // while-condition  =>  TRUE
[04:16:27.860]      // while "1"  (timeout="200")
[04:16:27.860]      // while-condition  =>  TRUE
[04:16:27.860]      // while "1"  (timeout="200")
[04:16:27.860]      // while-condition  =>  TRUE
[04:16:27.860]      // while "1"  (timeout="200")
[04:16:27.860]      // while-condition  =>  TRUE
[04:16:27.860]      // while "1"  (timeout="200")
[04:16:27.860]      // while-condition  =>  TRUE
[04:16:27.860]      // while "1"  (timeout="200")
[04:16:27.862]      // while-condition  =>  TRUE
[04:16:27.862]      // while "1"  (timeout="200")
[04:16:27.862]      // while  =>  TIMEOUT
[04:16:27.862]      // end while "1"
[04:16:27.862]    </control>
[04:16:27.862]    <control if="canReadPins" while="" timeout="0" info="">
[04:16:27.862]      // if-block "canReadPins"
[04:16:27.862]        // =>  TRUE
[04:16:27.862]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:16:27.862]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:16:27.862]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:16:27.862]        // while-condition  =>  FALSE
[04:16:27.862]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:16:27.862]      </control>
[04:16:27.862]      // end if-block "canReadPins"
[04:16:27.862]    </control>
[04:16:27.862]    <control if="!canReadPins" while="" timeout="0" info="">
[04:16:27.862]      // if-block "!canReadPins"
[04:16:27.862]        // =>  FALSE
[04:16:27.862]      // skip if-block "!canReadPins"
[04:16:27.862]    </control>
[04:16:27.862]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:16:27.862]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:27.862]        // =>  TRUE
[04:16:27.862]      <block atomic="false" info="">
[04:16:27.862]        WriteAP(0x00, 0x190008);
[04:16:27.862]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:27.862]        WriteAP(0xF0, 0x01);
[04:16:27.870]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:16:27.870]      </block>
[04:16:27.870]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:16:27.870]    </control>
[04:16:27.870]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:16:27.870]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:27.870]        // =>  FALSE
[04:16:27.870]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:16:27.870]    </control>
[04:16:27.870]    <block atomic="false" info="">
[04:16:27.870]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:16:27.876]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:16:27.876]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:16:27.876]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:16:27.876]      __ap = 0; //lets make sure we reset the access point selection
[04:16:27.876]        // -> [__ap <= 0x00000000]
[04:16:27.876]    </block>
[04:16:27.876]  </sequence>
[04:16:27.876]  
[04:16:27.895]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:16:27.895]  
[04:16:27.895]  <debugvars>
[04:16:27.895]    // Pre-defined
[04:16:27.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:16:27.900]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:16:27.900]    __dp=0x00000000
[04:16:27.900]    __ap=0x00000000
[04:16:27.900]    __traceout=0x00000000      (Trace Disabled)
[04:16:27.900]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:16:27.900]    __FlashAddr=0x00000000
[04:16:27.900]    __FlashLen=0x00000000
[04:16:27.900]    __FlashArg=0x00000000
[04:16:27.900]    __FlashOp=0x00000000
[04:16:27.900]    __Result=0x00000000
[04:16:27.900]  </debugvars>
[04:16:27.902]  
[04:16:27.902]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:16:27.902]    <block atomic="false" info="">
[04:16:27.902]      __var deviceID = 0;
[04:16:27.902]        // -> [deviceID <= 0x00000000]
[04:16:27.902]      __var version = 0;
[04:16:27.902]        // -> [version <= 0x00000000]
[04:16:27.902]      __var partNum = 0;
[04:16:27.902]        // -> [partNum <= 0x00000000]
[04:16:27.902]      __var manuf = 0;
[04:16:27.902]        // -> [manuf <= 0x00000000]
[04:16:27.902]      __var isMSPM0G1X0X_G3X0X = 0;
[04:16:27.902]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:16:27.902]      __var isProduction = 0;
[04:16:27.902]        // -> [isProduction <= 0x00000000]
[04:16:27.902]      __var continueId = 0;
[04:16:27.902]        // -> [continueId <= 0x00000000]
[04:16:27.902]      deviceID =   Read32(0x41C40004);
[04:16:27.911]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:16:27.911]        // -> [deviceID <= 0x2BB8802F]
[04:16:27.911]      version = deviceID >> 28;
[04:16:27.911]        // -> [version <= 0x00000002]
[04:16:27.911]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:16:27.912]        // -> [partNum <= 0x0000BB88]
[04:16:27.912]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:16:27.912]        // -> [manuf <= 0x00000017]
[04:16:27.912]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:16:27.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:16:27.912]      isProduction = (version > 0);
[04:16:27.912]        // -> [isProduction <= 0x00000001]
[04:16:27.912]    </block>
[04:16:27.912]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:16:27.912]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:16:27.912]        // =>  FALSE
[04:16:27.912]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:16:27.912]    </control>
[04:16:27.912]    <control if="continueId == 4" while="" timeout="0" info="">
[04:16:27.912]      // if-block "continueId == 4"
[04:16:27.912]        // =>  FALSE
[04:16:27.912]      // skip if-block "continueId == 4"
[04:16:27.912]    </control>
[04:16:27.912]    <control if="!isProduction" while="" timeout="0" info="">
[04:16:27.912]      // if-block "!isProduction"
[04:16:27.912]        // =>  FALSE
[04:16:27.912]      // skip if-block "!isProduction"
[04:16:27.912]    </control>
[04:16:27.912]  </sequence>
[04:16:27.912]  
[04:20:29.603]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:20:29.603]  
[04:20:29.603]  <debugvars>
[04:20:29.603]    // Pre-defined
[04:20:29.603]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:29.603]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:29.603]    __dp=0x00000000
[04:20:29.603]    __ap=0x00000000
[04:20:29.603]    __traceout=0x00000000      (Trace Disabled)
[04:20:29.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:29.603]    __FlashAddr=0x00000000
[04:20:29.603]    __FlashLen=0x00000000
[04:20:29.603]    __FlashArg=0x00000000
[04:20:29.603]    __FlashOp=0x00000000
[04:20:29.603]    __Result=0x00000000
[04:20:29.613]  </debugvars>
[04:20:29.613]  
[04:20:29.613]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:20:29.613]    <block atomic="false" info="">
[04:20:29.613]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:20:29.613]        // -> [isSWJ <= 0x00000001]
[04:20:29.613]      __var hasDormant = __protocol & 0x00020000;
[04:20:29.613]        // -> [hasDormant <= 0x00000000]
[04:20:29.613]      __var protType   = __protocol & 0x0000FFFF;
[04:20:29.613]        // -> [protType <= 0x00000002]
[04:20:29.613]    </block>
[04:20:29.613]    <control if="protType == 1" while="" timeout="0" info="">
[04:20:29.613]      // if-block "protType == 1"
[04:20:29.613]        // =>  FALSE
[04:20:29.613]      // skip if-block "protType == 1"
[04:20:29.613]    </control>
[04:20:29.613]    <control if="protType == 2" while="" timeout="0" info="">
[04:20:29.613]      // if-block "protType == 2"
[04:20:29.613]        // =>  TRUE
[04:20:29.613]      <control if="isSWJ" while="" timeout="0" info="">
[04:20:29.613]        // if-block "isSWJ"
[04:20:29.613]          // =>  TRUE
[04:20:29.613]        <control if="hasDormant" while="" timeout="0" info="">
[04:20:29.613]          // if-block "hasDormant"
[04:20:29.613]            // =>  FALSE
[04:20:29.613]          // skip if-block "hasDormant"
[04:20:29.613]        </control>
[04:20:29.613]        <control if="!hasDormant" while="" timeout="0" info="">
[04:20:29.613]          // if-block "!hasDormant"
[04:20:29.613]            // =>  TRUE
[04:20:29.613]          <block atomic="false" info="">
[04:20:29.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:20:29.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:29.613]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:20:29.613]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:20:29.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:20:29.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:29.613]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:20:29.613]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:20:29.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:20:29.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:29.625]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:20:29.625]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:20:29.625]          </block>
[04:20:29.625]          // end if-block "!hasDormant"
[04:20:29.625]        </control>
[04:20:29.625]        // end if-block "isSWJ"
[04:20:29.625]      </control>
[04:20:29.625]      <control if="!isSWJ" while="" timeout="0" info="">
[04:20:29.625]        // if-block "!isSWJ"
[04:20:29.625]          // =>  FALSE
[04:20:29.625]        // skip if-block "!isSWJ"
[04:20:29.625]      </control>
[04:20:29.625]      <block atomic="false" info="">
[04:20:29.625]        ReadDP(0x0);
[04:20:29.625]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:20:29.625]      </block>
[04:20:29.625]      // end if-block "protType == 2"
[04:20:29.625]    </control>
[04:20:29.625]  </sequence>
[04:20:29.625]  
[04:20:29.625]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:20:29.625]  
[04:20:29.625]  <debugvars>
[04:20:29.625]    // Pre-defined
[04:20:29.625]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:29.625]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:29.625]    __dp=0x00000000
[04:20:29.633]    __ap=0x00000000
[04:20:29.633]    __traceout=0x00000000      (Trace Disabled)
[04:20:29.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:29.633]    __FlashAddr=0x00000000
[04:20:29.633]    __FlashLen=0x00000000
[04:20:29.633]    __FlashArg=0x00000000
[04:20:29.633]    __FlashOp=0x00000000
[04:20:29.633]    __Result=0x00000000
[04:20:29.633]  </debugvars>
[04:20:29.633]  
[04:20:29.633]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:20:29.633]    <block atomic="false" info="">
[04:20:29.633]      __var SW_DP_ABORT       = 0x0;
[04:20:29.633]        // -> [SW_DP_ABORT <= 0x00000000]
[04:20:29.633]      __var DP_CTRL_STAT      = 0x4;
[04:20:29.633]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:20:29.633]      __var DP_SELECT         = 0x8;
[04:20:29.633]        // -> [DP_SELECT <= 0x00000008]
[04:20:29.633]      __var powered_down      = 0;
[04:20:29.633]        // -> [powered_down <= 0x00000000]
[04:20:29.633]      WriteDP(DP_SELECT, 0x00000000);
[04:20:29.633]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:20:29.633]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:20:29.633]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:20:29.633]        // -> [powered_down <= 0x00000001]
[04:20:29.633]    </block>
[04:20:29.633]    <control if="powered_down" while="" timeout="0" info="">
[04:20:29.633]      // if-block "powered_down"
[04:20:29.633]        // =>  TRUE
[04:20:29.633]      <block atomic="false" info="">
[04:20:29.633]        Message(0, "Debug/System power-up request sent");
[04:20:29.633]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:20:29.633]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:20:29.633]      </block>
[04:20:29.633]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:20:29.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:20:29.643]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:20:29.643]        // while-condition  =>  FALSE
[04:20:29.643]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:20:29.643]      </control>
[04:20:29.643]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:20:29.643]        // if-block "(__protocol & 0xFFFF) == 1"
[04:20:29.643]          // =>  FALSE
[04:20:29.643]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:20:29.643]      </control>
[04:20:29.643]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:20:29.643]        // if-block "(__protocol & 0xFFFF) == 2"
[04:20:29.643]          // =>  TRUE
[04:20:29.643]        <block atomic="false" info="">
[04:20:29.643]          Message(0, "executing SWD power up");
[04:20:29.643]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:20:29.643]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:20:29.643]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:20:29.643]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:20:29.643]        </block>
[04:20:29.643]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:20:29.643]      </control>
[04:20:29.643]      // end if-block "powered_down"
[04:20:29.643]    </control>
[04:20:29.643]    <block atomic="false" info="">
[04:20:29.643]      __var DEBUG_PORT_VAL    = 0;
[04:20:29.643]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:20:29.643]      __var ACCESS_POINT_VAL  = 0;
[04:20:29.643]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:20:29.643]      __ap = 1; 
[04:20:29.643]        // -> [__ap <= 0x00000001]
[04:20:29.643]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:20:29.653]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:20:29.653]      __ap = 4;
[04:20:29.653]        // -> [__ap <= 0x00000004]
[04:20:29.653]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:20:29.653]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:20:29.653]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:20:29.653]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:20:29.653]    </block>
[04:20:29.653]    <block atomic="false" info="">
[04:20:29.653]      __var nReset = 0x80;
[04:20:29.653]        // -> [nReset <= 0x00000080]
[04:20:29.653]      __var canReadPins = 0;
[04:20:29.653]        // -> [canReadPins <= 0x00000000]
[04:20:29.653]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:20:29.653]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:20:29.653]        // -> [canReadPins <= 0x00000001]
[04:20:29.653]    </block>
[04:20:29.653]    <control if="" while="1" timeout="200" info="">
[04:20:29.663]      // while "1"  (timeout="200")
[04:20:29.663]      // while-condition  =>  TRUE
[04:20:29.663]      // while "1"  (timeout="200")
[04:20:29.663]      // while-condition  =>  TRUE
[04:20:29.663]      // while "1"  (timeout="200")
[04:20:29.663]      // while-condition  =>  TRUE
[04:20:29.663]      // while "1"  (timeout="200")
[04:20:29.663]      // while-condition  =>  TRUE
[04:20:29.663]      // while "1"  (timeout="200")
[04:20:29.663]      // while-condition  =>  TRUE
[04:20:29.663]      // while "1"  (timeout="200")
[04:20:29.664]      // while-condition  =>  TRUE
[04:20:29.664]      // while "1"  (timeout="200")
[04:20:29.664]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.665]      // while-condition  =>  TRUE
[04:20:29.665]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.673]      // while "1"  (timeout="200")
[04:20:29.673]      // while-condition  =>  TRUE
[04:20:29.683]      // while "1"  (timeout="200")
[04:20:29.683]      // while  =>  TIMEOUT
[04:20:29.683]      // end while "1"
[04:20:29.683]    </control>
[04:20:29.683]    <control if="canReadPins" while="" timeout="0" info="">
[04:20:29.683]      // if-block "canReadPins"
[04:20:29.683]        // =>  TRUE
[04:20:29.683]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:20:29.683]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:20:29.683]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:20:29.683]        // while-condition  =>  FALSE
[04:20:29.683]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:20:29.683]      </control>
[04:20:29.683]      // end if-block "canReadPins"
[04:20:29.683]    </control>
[04:20:29.683]    <control if="!canReadPins" while="" timeout="0" info="">
[04:20:29.683]      // if-block "!canReadPins"
[04:20:29.683]        // =>  FALSE
[04:20:29.683]      // skip if-block "!canReadPins"
[04:20:29.683]    </control>
[04:20:29.683]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:20:29.683]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:20:29.683]        // =>  TRUE
[04:20:29.683]      <block atomic="false" info="">
[04:20:29.683]        WriteAP(0x00, 0x190008);
[04:20:29.683]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:20:29.683]        WriteAP(0xF0, 0x01);
[04:20:29.683]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:20:29.683]      </block>
[04:20:29.683]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:20:29.683]    </control>
[04:20:29.683]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:20:29.683]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:20:29.683]        // =>  FALSE
[04:20:29.693]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:20:29.693]    </control>
[04:20:29.693]    <block atomic="false" info="">
[04:20:29.693]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:20:29.693]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:20:29.693]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:20:29.693]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:20:29.693]      __ap = 0; //lets make sure we reset the access point selection
[04:20:29.693]        // -> [__ap <= 0x00000000]
[04:20:29.693]    </block>
[04:20:29.693]  </sequence>
[04:20:29.693]  
[04:20:29.712]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:20:29.712]  
[04:20:29.712]  <debugvars>
[04:20:29.712]    // Pre-defined
[04:20:29.712]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:29.712]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:29.712]    __dp=0x00000000
[04:20:29.718]    __ap=0x00000000
[04:20:29.718]    __traceout=0x00000000      (Trace Disabled)
[04:20:29.718]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:29.718]    __FlashAddr=0x00000000
[04:20:29.718]    __FlashLen=0x00000000
[04:20:29.718]    __FlashArg=0x00000000
[04:20:29.718]    __FlashOp=0x00000000
[04:20:29.718]    __Result=0x00000000
[04:20:29.718]  </debugvars>
[04:20:29.720]  
[04:20:29.720]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:20:29.720]    <block atomic="false" info="">
[04:20:29.720]      __var deviceID = 0;
[04:20:29.720]        // -> [deviceID <= 0x00000000]
[04:20:29.720]      __var version = 0;
[04:20:29.720]        // -> [version <= 0x00000000]
[04:20:29.720]      __var partNum = 0;
[04:20:29.720]        // -> [partNum <= 0x00000000]
[04:20:29.720]      __var manuf = 0;
[04:20:29.720]        // -> [manuf <= 0x00000000]
[04:20:29.721]      __var isMSPM0G1X0X_G3X0X = 0;
[04:20:29.721]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:20:29.721]      __var isProduction = 0;
[04:20:29.721]        // -> [isProduction <= 0x00000000]
[04:20:29.721]      __var continueId = 0;
[04:20:29.721]        // -> [continueId <= 0x00000000]
[04:20:29.721]      deviceID =   Read32(0x41C40004);
[04:20:29.726]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:20:29.726]        // -> [deviceID <= 0x2BB8802F]
[04:20:29.726]      version = deviceID >> 28;
[04:20:29.726]        // -> [version <= 0x00000002]
[04:20:29.726]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:20:29.727]        // -> [partNum <= 0x0000BB88]
[04:20:29.727]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:20:29.727]        // -> [manuf <= 0x00000017]
[04:20:29.727]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:20:29.727]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:20:29.727]      isProduction = (version > 0);
[04:20:29.727]        // -> [isProduction <= 0x00000001]
[04:20:29.728]    </block>
[04:20:29.728]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:20:29.728]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:20:29.728]        // =>  FALSE
[04:20:29.728]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:20:29.728]    </control>
[04:20:29.728]    <control if="continueId == 4" while="" timeout="0" info="">
[04:20:29.728]      // if-block "continueId == 4"
[04:20:29.728]        // =>  FALSE
[04:20:29.728]      // skip if-block "continueId == 4"
[04:20:29.728]    </control>
[04:20:29.728]    <control if="!isProduction" while="" timeout="0" info="">
[04:20:29.729]      // if-block "!isProduction"
[04:20:29.729]        // =>  FALSE
[04:20:29.729]      // skip if-block "!isProduction"
[04:20:29.729]    </control>
[04:20:29.729]  </sequence>
[04:20:29.729]  
[04:20:51.847]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:20:51.847]  
[04:20:51.856]  <debugvars>
[04:20:51.856]    // Pre-defined
[04:20:51.856]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:51.856]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:51.856]    __dp=0x00000000
[04:20:51.856]    __ap=0x00000000
[04:20:51.856]    __traceout=0x00000000      (Trace Disabled)
[04:20:51.856]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:51.856]    __FlashAddr=0x00000000
[04:20:51.856]    __FlashLen=0x00000000
[04:20:51.856]    __FlashArg=0x00000000
[04:20:51.856]    __FlashOp=0x00000000
[04:20:51.856]    __Result=0x00000000
[04:20:51.856]  </debugvars>
[04:20:51.856]  
[04:20:51.856]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:20:51.856]    <block atomic="false" info="">
[04:20:51.856]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:20:51.856]        // -> [isSWJ <= 0x00000001]
[04:20:51.856]      __var hasDormant = __protocol & 0x00020000;
[04:20:51.856]        // -> [hasDormant <= 0x00000000]
[04:20:51.856]      __var protType   = __protocol & 0x0000FFFF;
[04:20:51.856]        // -> [protType <= 0x00000002]
[04:20:51.856]    </block>
[04:20:51.856]    <control if="protType == 1" while="" timeout="0" info="">
[04:20:51.856]      // if-block "protType == 1"
[04:20:51.856]        // =>  FALSE
[04:20:51.856]      // skip if-block "protType == 1"
[04:20:51.856]    </control>
[04:20:51.856]    <control if="protType == 2" while="" timeout="0" info="">
[04:20:51.856]      // if-block "protType == 2"
[04:20:51.856]        // =>  TRUE
[04:20:51.856]      <control if="isSWJ" while="" timeout="0" info="">
[04:20:51.856]        // if-block "isSWJ"
[04:20:51.856]          // =>  TRUE
[04:20:51.856]        <control if="hasDormant" while="" timeout="0" info="">
[04:20:51.856]          // if-block "hasDormant"
[04:20:51.856]            // =>  FALSE
[04:20:51.856]          // skip if-block "hasDormant"
[04:20:51.856]        </control>
[04:20:51.856]        <control if="!hasDormant" while="" timeout="0" info="">
[04:20:51.856]          // if-block "!hasDormant"
[04:20:51.856]            // =>  TRUE
[04:20:51.856]          <block atomic="false" info="">
[04:20:51.856]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:20:51.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:51.862]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:20:51.864]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:20:51.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:20:51.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:51.865]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:20:51.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:20:51.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:20:51.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:20:51.865]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:20:51.865]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:20:51.865]          </block>
[04:20:51.865]          // end if-block "!hasDormant"
[04:20:51.865]        </control>
[04:20:51.865]        // end if-block "isSWJ"
[04:20:51.865]      </control>
[04:20:51.865]      <control if="!isSWJ" while="" timeout="0" info="">
[04:20:51.865]        // if-block "!isSWJ"
[04:20:51.865]          // =>  FALSE
[04:20:51.865]        // skip if-block "!isSWJ"
[04:20:51.865]      </control>
[04:20:51.865]      <block atomic="false" info="">
[04:20:51.865]        ReadDP(0x0);
[04:20:51.872]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:20:51.872]      </block>
[04:20:51.872]      // end if-block "protType == 2"
[04:20:51.872]    </control>
[04:20:51.872]  </sequence>
[04:20:51.872]  
[04:20:51.872]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:20:51.872]  
[04:20:51.872]  <debugvars>
[04:20:51.872]    // Pre-defined
[04:20:51.872]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:51.872]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:51.872]    __dp=0x00000000
[04:20:51.872]    __ap=0x00000000
[04:20:51.872]    __traceout=0x00000000      (Trace Disabled)
[04:20:51.872]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:51.872]    __FlashAddr=0x00000000
[04:20:51.872]    __FlashLen=0x00000000
[04:20:51.872]    __FlashArg=0x00000000
[04:20:51.872]    __FlashOp=0x00000000
[04:20:51.872]    __Result=0x00000000
[04:20:51.872]  </debugvars>
[04:20:51.872]  
[04:20:51.877]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:20:51.877]    <block atomic="false" info="">
[04:20:51.877]      __var SW_DP_ABORT       = 0x0;
[04:20:51.877]        // -> [SW_DP_ABORT <= 0x00000000]
[04:20:51.877]      __var DP_CTRL_STAT      = 0x4;
[04:20:51.877]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:20:51.877]      __var DP_SELECT         = 0x8;
[04:20:51.877]        // -> [DP_SELECT <= 0x00000008]
[04:20:51.877]      __var powered_down      = 0;
[04:20:51.877]        // -> [powered_down <= 0x00000000]
[04:20:51.877]      WriteDP(DP_SELECT, 0x00000000);
[04:20:51.877]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:20:51.877]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:20:51.877]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:20:51.877]        // -> [powered_down <= 0x00000001]
[04:20:51.877]    </block>
[04:20:51.877]    <control if="powered_down" while="" timeout="0" info="">
[04:20:51.877]      // if-block "powered_down"
[04:20:51.882]        // =>  TRUE
[04:20:51.882]      <block atomic="false" info="">
[04:20:51.882]        Message(0, "Debug/System power-up request sent");
[04:20:51.882]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:20:51.882]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:20:51.882]      </block>
[04:20:51.882]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:20:51.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:20:51.887]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:20:51.887]        // while-condition  =>  FALSE
[04:20:51.887]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:20:51.887]      </control>
[04:20:51.887]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:20:51.887]        // if-block "(__protocol & 0xFFFF) == 1"
[04:20:51.887]          // =>  FALSE
[04:20:51.887]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:20:51.887]      </control>
[04:20:51.887]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:20:51.887]        // if-block "(__protocol & 0xFFFF) == 2"
[04:20:51.887]          // =>  TRUE
[04:20:51.887]        <block atomic="false" info="">
[04:20:51.887]          Message(0, "executing SWD power up");
[04:20:51.887]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:20:51.892]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:20:51.892]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:20:51.892]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:20:51.892]        </block>
[04:20:51.892]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:20:51.892]      </control>
[04:20:51.892]      // end if-block "powered_down"
[04:20:51.892]    </control>
[04:20:51.892]    <block atomic="false" info="">
[04:20:51.892]      __var DEBUG_PORT_VAL    = 0;
[04:20:51.892]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:20:51.892]      __var ACCESS_POINT_VAL  = 0;
[04:20:51.892]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:20:51.892]      __ap = 1; 
[04:20:51.892]        // -> [__ap <= 0x00000001]
[04:20:51.892]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:20:51.897]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:20:51.897]      __ap = 4;
[04:20:51.897]        // -> [__ap <= 0x00000004]
[04:20:51.897]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:20:51.904]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:20:51.904]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:20:51.904]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:20:51.904]    </block>
[04:20:51.904]    <block atomic="false" info="">
[04:20:51.904]      __var nReset = 0x80;
[04:20:51.904]        // -> [nReset <= 0x00000080]
[04:20:51.904]      __var canReadPins = 0;
[04:20:51.904]        // -> [canReadPins <= 0x00000000]
[04:20:51.904]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:20:51.904]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:20:51.904]        // -> [canReadPins <= 0x00000001]
[04:20:51.904]    </block>
[04:20:51.904]    <control if="" while="1" timeout="200" info="">
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.904]      // while-condition  =>  TRUE
[04:20:51.904]      // while "1"  (timeout="200")
[04:20:51.912]      // while-condition  =>  TRUE
[04:20:51.912]      // while "1"  (timeout="200")
[04:20:51.912]      // while  =>  TIMEOUT
[04:20:51.912]      // end while "1"
[04:20:51.912]    </control>
[04:20:51.912]    <control if="canReadPins" while="" timeout="0" info="">
[04:20:51.912]      // if-block "canReadPins"
[04:20:51.912]        // =>  TRUE
[04:20:51.912]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:20:51.912]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:20:51.912]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:20:51.912]        // while-condition  =>  FALSE
[04:20:51.912]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:20:51.912]      </control>
[04:20:51.912]      // end if-block "canReadPins"
[04:20:51.912]    </control>
[04:20:51.912]    <control if="!canReadPins" while="" timeout="0" info="">
[04:20:51.912]      // if-block "!canReadPins"
[04:20:51.912]        // =>  FALSE
[04:20:51.912]      // skip if-block "!canReadPins"
[04:20:51.912]    </control>
[04:20:51.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:20:51.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:20:51.912]        // =>  TRUE
[04:20:51.912]      <block atomic="false" info="">
[04:20:51.912]        WriteAP(0x00, 0x190008);
[04:20:51.917]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:20:51.917]        WriteAP(0xF0, 0x01);
[04:20:51.922]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:20:51.922]      </block>
[04:20:51.922]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:20:51.922]    </control>
[04:20:51.922]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:20:51.922]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:20:51.922]        // =>  FALSE
[04:20:51.922]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:20:51.922]    </control>
[04:20:51.922]    <block atomic="false" info="">
[04:20:51.922]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:20:51.922]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:20:51.922]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:20:51.922]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:20:51.927]      __ap = 0; //lets make sure we reset the access point selection
[04:20:51.927]        // -> [__ap <= 0x00000000]
[04:20:51.927]    </block>
[04:20:51.927]  </sequence>
[04:20:51.927]  
[04:20:51.947]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:20:51.947]  
[04:20:51.947]  <debugvars>
[04:20:51.947]    // Pre-defined
[04:20:51.947]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:20:51.947]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:20:51.947]    __dp=0x00000000
[04:20:51.947]    __ap=0x00000000
[04:20:51.947]    __traceout=0x00000000      (Trace Disabled)
[04:20:51.947]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:20:51.947]    __FlashAddr=0x00000000
[04:20:51.947]    __FlashLen=0x00000000
[04:20:51.947]    __FlashArg=0x00000000
[04:20:51.947]    __FlashOp=0x00000000
[04:20:51.947]    __Result=0x00000000
[04:20:51.947]  </debugvars>
[04:20:51.947]  
[04:20:51.947]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:20:51.947]    <block atomic="false" info="">
[04:20:51.947]      __var deviceID = 0;
[04:20:51.947]        // -> [deviceID <= 0x00000000]
[04:20:51.947]      __var version = 0;
[04:20:51.947]        // -> [version <= 0x00000000]
[04:20:51.952]      __var partNum = 0;
[04:20:51.952]        // -> [partNum <= 0x00000000]
[04:20:51.952]      __var manuf = 0;
[04:20:51.952]        // -> [manuf <= 0x00000000]
[04:20:51.952]      __var isMSPM0G1X0X_G3X0X = 0;
[04:20:51.952]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:20:51.952]      __var isProduction = 0;
[04:20:51.952]        // -> [isProduction <= 0x00000000]
[04:20:51.953]      __var continueId = 0;
[04:20:51.953]        // -> [continueId <= 0x00000000]
[04:20:51.953]      deviceID =   Read32(0x41C40004);
[04:20:51.953]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:20:51.953]        // -> [deviceID <= 0x2BB8802F]
[04:20:51.953]      version = deviceID >> 28;
[04:20:51.953]        // -> [version <= 0x00000002]
[04:20:51.953]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:20:51.953]        // -> [partNum <= 0x0000BB88]
[04:20:51.953]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:20:51.953]        // -> [manuf <= 0x00000017]
[04:20:51.953]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:20:51.953]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:20:51.953]      isProduction = (version > 0);
[04:20:51.953]        // -> [isProduction <= 0x00000001]
[04:20:51.953]    </block>
[04:20:51.953]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:20:51.953]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:20:51.953]        // =>  FALSE
[04:20:51.953]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:20:51.953]    </control>
[04:20:51.953]    <control if="continueId == 4" while="" timeout="0" info="">
[04:20:51.953]      // if-block "continueId == 4"
[04:20:51.953]        // =>  FALSE
[04:20:51.953]      // skip if-block "continueId == 4"
[04:20:51.953]    </control>
[04:20:51.953]    <control if="!isProduction" while="" timeout="0" info="">
[04:20:51.953]      // if-block "!isProduction"
[04:20:51.953]        // =>  FALSE
[04:20:51.953]      // skip if-block "!isProduction"
[04:20:51.953]    </control>
[04:20:51.953]  </sequence>
[04:20:51.953]  
[04:21:33.436]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:21:33.436]  
[04:21:33.440]  <debugvars>
[04:21:33.440]    // Pre-defined
[04:21:33.440]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:33.440]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:33.440]    __dp=0x00000000
[04:21:33.440]    __ap=0x00000000
[04:21:33.440]    __traceout=0x00000000      (Trace Disabled)
[04:21:33.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:33.440]    __FlashAddr=0x00000000
[04:21:33.440]    __FlashLen=0x00000000
[04:21:33.440]    __FlashArg=0x00000000
[04:21:33.440]    __FlashOp=0x00000000
[04:21:33.440]    __Result=0x00000000
[04:21:33.440]  </debugvars>
[04:21:33.440]  
[04:21:33.442]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:21:33.442]    <block atomic="false" info="">
[04:21:33.442]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:21:33.442]        // -> [isSWJ <= 0x00000001]
[04:21:33.442]      __var hasDormant = __protocol & 0x00020000;
[04:21:33.442]        // -> [hasDormant <= 0x00000000]
[04:21:33.442]      __var protType   = __protocol & 0x0000FFFF;
[04:21:33.442]        // -> [protType <= 0x00000002]
[04:21:33.442]    </block>
[04:21:33.442]    <control if="protType == 1" while="" timeout="0" info="">
[04:21:33.443]      // if-block "protType == 1"
[04:21:33.443]        // =>  FALSE
[04:21:33.443]      // skip if-block "protType == 1"
[04:21:33.443]    </control>
[04:21:33.443]    <control if="protType == 2" while="" timeout="0" info="">
[04:21:33.443]      // if-block "protType == 2"
[04:21:33.443]        // =>  TRUE
[04:21:33.443]      <control if="isSWJ" while="" timeout="0" info="">
[04:21:33.443]        // if-block "isSWJ"
[04:21:33.443]          // =>  TRUE
[04:21:33.443]        <control if="hasDormant" while="" timeout="0" info="">
[04:21:33.443]          // if-block "hasDormant"
[04:21:33.443]            // =>  FALSE
[04:21:33.443]          // skip if-block "hasDormant"
[04:21:33.443]        </control>
[04:21:33.443]        <control if="!hasDormant" while="" timeout="0" info="">
[04:21:33.443]          // if-block "!hasDormant"
[04:21:33.443]            // =>  TRUE
[04:21:33.443]          <block atomic="false" info="">
[04:21:33.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:21:33.443]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:33.443]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:21:33.448]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:21:33.448]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:21:33.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:33.448]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:21:33.448]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:21:33.448]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:21:33.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:33.452]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:21:33.452]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:21:33.452]          </block>
[04:21:33.452]          // end if-block "!hasDormant"
[04:21:33.452]        </control>
[04:21:33.452]        // end if-block "isSWJ"
[04:21:33.452]      </control>
[04:21:33.452]      <control if="!isSWJ" while="" timeout="0" info="">
[04:21:33.452]        // if-block "!isSWJ"
[04:21:33.452]          // =>  FALSE
[04:21:33.452]        // skip if-block "!isSWJ"
[04:21:33.452]      </control>
[04:21:33.452]      <block atomic="false" info="">
[04:21:33.452]        ReadDP(0x0);
[04:21:33.457]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:21:33.458]      </block>
[04:21:33.458]      // end if-block "protType == 2"
[04:21:33.458]    </control>
[04:21:33.458]  </sequence>
[04:21:33.458]  
[04:21:33.464]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:21:33.464]  
[04:21:33.464]  <debugvars>
[04:21:33.464]    // Pre-defined
[04:21:33.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:33.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:33.465]    __dp=0x00000000
[04:21:33.465]    __ap=0x00000000
[04:21:33.465]    __traceout=0x00000000      (Trace Disabled)
[04:21:33.465]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:33.465]    __FlashAddr=0x00000000
[04:21:33.465]    __FlashLen=0x00000000
[04:21:33.465]    __FlashArg=0x00000000
[04:21:33.465]    __FlashOp=0x00000000
[04:21:33.465]    __Result=0x00000000
[04:21:33.465]  </debugvars>
[04:21:33.466]  
[04:21:33.466]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:21:33.466]    <block atomic="false" info="">
[04:21:33.466]      __var SW_DP_ABORT       = 0x0;
[04:21:33.466]        // -> [SW_DP_ABORT <= 0x00000000]
[04:21:33.466]      __var DP_CTRL_STAT      = 0x4;
[04:21:33.466]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:21:33.466]      __var DP_SELECT         = 0x8;
[04:21:33.466]        // -> [DP_SELECT <= 0x00000008]
[04:21:33.466]      __var powered_down      = 0;
[04:21:33.466]        // -> [powered_down <= 0x00000000]
[04:21:33.467]      WriteDP(DP_SELECT, 0x00000000);
[04:21:33.468]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:21:33.468]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:21:33.469]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:21:33.470]        // -> [powered_down <= 0x00000001]
[04:21:33.470]    </block>
[04:21:33.470]    <control if="powered_down" while="" timeout="0" info="">
[04:21:33.470]      // if-block "powered_down"
[04:21:33.470]        // =>  TRUE
[04:21:33.470]      <block atomic="false" info="">
[04:21:33.470]        Message(0, "Debug/System power-up request sent");
[04:21:33.474]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:21:33.475]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:21:33.475]      </block>
[04:21:33.475]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:21:33.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:21:33.477]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:21:33.477]        // while-condition  =>  FALSE
[04:21:33.477]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:21:33.477]      </control>
[04:21:33.477]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:21:33.477]        // if-block "(__protocol & 0xFFFF) == 1"
[04:21:33.477]          // =>  FALSE
[04:21:33.478]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:21:33.478]      </control>
[04:21:33.478]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:21:33.478]        // if-block "(__protocol & 0xFFFF) == 2"
[04:21:33.478]          // =>  TRUE
[04:21:33.478]        <block atomic="false" info="">
[04:21:33.478]          Message(0, "executing SWD power up");
[04:21:33.481]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:21:33.483]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:21:33.483]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:21:33.484]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:21:33.485]        </block>
[04:21:33.485]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:21:33.485]      </control>
[04:21:33.485]      // end if-block "powered_down"
[04:21:33.485]    </control>
[04:21:33.485]    <block atomic="false" info="">
[04:21:33.485]      __var DEBUG_PORT_VAL    = 0;
[04:21:33.485]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:21:33.485]      __var ACCESS_POINT_VAL  = 0;
[04:21:33.485]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:21:33.485]      __ap = 1; 
[04:21:33.485]        // -> [__ap <= 0x00000001]
[04:21:33.485]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:21:33.488]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:21:33.488]      __ap = 4;
[04:21:33.488]        // -> [__ap <= 0x00000004]
[04:21:33.488]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:33.492]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:21:33.492]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:21:33.492]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:33.494]    </block>
[04:21:33.494]    <block atomic="false" info="">
[04:21:33.494]      __var nReset = 0x80;
[04:21:33.494]        // -> [nReset <= 0x00000080]
[04:21:33.494]      __var canReadPins = 0;
[04:21:33.494]        // -> [canReadPins <= 0x00000000]
[04:21:33.494]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:21:33.494]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:21:33.494]        // -> [canReadPins <= 0x00000001]
[04:21:33.494]    </block>
[04:21:33.494]    <control if="" while="1" timeout="200" info="">
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.498]      // while "1"  (timeout="200")
[04:21:33.498]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.502]      // while "1"  (timeout="200")
[04:21:33.502]      // while-condition  =>  TRUE
[04:21:33.508]      // while "1"  (timeout="200")
[04:21:33.508]      // while  =>  TIMEOUT
[04:21:33.508]      // end while "1"
[04:21:33.508]    </control>
[04:21:33.508]    <control if="canReadPins" while="" timeout="0" info="">
[04:21:33.508]      // if-block "canReadPins"
[04:21:33.508]        // =>  TRUE
[04:21:33.508]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:21:33.508]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:21:33.508]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:21:33.508]        // while-condition  =>  FALSE
[04:21:33.508]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:21:33.508]      </control>
[04:21:33.508]      // end if-block "canReadPins"
[04:21:33.508]    </control>
[04:21:33.508]    <control if="!canReadPins" while="" timeout="0" info="">
[04:21:33.508]      // if-block "!canReadPins"
[04:21:33.508]        // =>  FALSE
[04:21:33.508]      // skip if-block "!canReadPins"
[04:21:33.508]    </control>
[04:21:33.508]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:21:33.508]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:33.508]        // =>  TRUE
[04:21:33.508]      <block atomic="false" info="">
[04:21:33.508]        WriteAP(0x00, 0x190008);
[04:21:33.513]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:33.513]        WriteAP(0xF0, 0x01);
[04:21:33.513]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:33.513]      </block>
[04:21:33.513]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:33.513]    </control>
[04:21:33.513]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:21:33.518]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:33.518]        // =>  FALSE
[04:21:33.518]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:33.518]    </control>
[04:21:33.518]    <block atomic="false" info="">
[04:21:33.518]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:33.518]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:21:33.518]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:21:33.518]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:33.523]      __ap = 0; //lets make sure we reset the access point selection
[04:21:33.523]        // -> [__ap <= 0x00000000]
[04:21:33.523]    </block>
[04:21:33.523]  </sequence>
[04:21:33.523]  
[04:21:33.543]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:21:33.543]  
[04:21:33.543]  <debugvars>
[04:21:33.543]    // Pre-defined
[04:21:33.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:33.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:33.545]    __dp=0x00000000
[04:21:33.545]    __ap=0x00000000
[04:21:33.545]    __traceout=0x00000000      (Trace Disabled)
[04:21:33.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:33.545]    __FlashAddr=0x00000000
[04:21:33.545]    __FlashLen=0x00000000
[04:21:33.545]    __FlashArg=0x00000000
[04:21:33.545]    __FlashOp=0x00000000
[04:21:33.545]    __Result=0x00000000
[04:21:33.545]  </debugvars>
[04:21:33.545]  
[04:21:33.545]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:21:33.545]    <block atomic="false" info="">
[04:21:33.545]      __var deviceID = 0;
[04:21:33.545]        // -> [deviceID <= 0x00000000]
[04:21:33.545]      __var version = 0;
[04:21:33.545]        // -> [version <= 0x00000000]
[04:21:33.545]      __var partNum = 0;
[04:21:33.545]        // -> [partNum <= 0x00000000]
[04:21:33.545]      __var manuf = 0;
[04:21:33.545]        // -> [manuf <= 0x00000000]
[04:21:33.545]      __var isMSPM0G1X0X_G3X0X = 0;
[04:21:33.545]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:21:33.545]      __var isProduction = 0;
[04:21:33.545]        // -> [isProduction <= 0x00000000]
[04:21:33.545]      __var continueId = 0;
[04:21:33.548]        // -> [continueId <= 0x00000000]
[04:21:33.548]      deviceID =   Read32(0x41C40004);
[04:21:33.548]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:21:33.548]        // -> [deviceID <= 0x2BB8802F]
[04:21:33.548]      version = deviceID >> 28;
[04:21:33.548]        // -> [version <= 0x00000002]
[04:21:33.548]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:21:33.553]        // -> [partNum <= 0x0000BB88]
[04:21:33.553]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:21:33.553]        // -> [manuf <= 0x00000017]
[04:21:33.553]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:21:33.553]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:21:33.553]      isProduction = (version > 0);
[04:21:33.553]        // -> [isProduction <= 0x00000001]
[04:21:33.553]    </block>
[04:21:33.553]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:21:33.553]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:21:33.553]        // =>  FALSE
[04:21:33.553]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:21:33.553]    </control>
[04:21:33.553]    <control if="continueId == 4" while="" timeout="0" info="">
[04:21:33.553]      // if-block "continueId == 4"
[04:21:33.553]        // =>  FALSE
[04:21:33.553]      // skip if-block "continueId == 4"
[04:21:33.553]    </control>
[04:21:33.553]    <control if="!isProduction" while="" timeout="0" info="">
[04:21:33.553]      // if-block "!isProduction"
[04:21:33.553]        // =>  FALSE
[04:21:33.553]      // skip if-block "!isProduction"
[04:21:33.553]    </control>
[04:21:33.553]  </sequence>
[04:21:33.553]  
[04:21:59.467]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:21:59.467]  
[04:21:59.467]  <debugvars>
[04:21:59.467]    // Pre-defined
[04:21:59.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:59.467]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:59.467]    __dp=0x00000000
[04:21:59.472]    __ap=0x00000000
[04:21:59.472]    __traceout=0x00000000      (Trace Disabled)
[04:21:59.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:59.472]    __FlashAddr=0x00000000
[04:21:59.472]    __FlashLen=0x00000000
[04:21:59.472]    __FlashArg=0x00000000
[04:21:59.472]    __FlashOp=0x00000000
[04:21:59.472]    __Result=0x00000000
[04:21:59.472]  </debugvars>
[04:21:59.472]  
[04:21:59.472]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:21:59.472]    <block atomic="false" info="">
[04:21:59.472]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:21:59.472]        // -> [isSWJ <= 0x00000001]
[04:21:59.472]      __var hasDormant = __protocol & 0x00020000;
[04:21:59.472]        // -> [hasDormant <= 0x00000000]
[04:21:59.472]      __var protType   = __protocol & 0x0000FFFF;
[04:21:59.472]        // -> [protType <= 0x00000002]
[04:21:59.472]    </block>
[04:21:59.472]    <control if="protType == 1" while="" timeout="0" info="">
[04:21:59.472]      // if-block "protType == 1"
[04:21:59.472]        // =>  FALSE
[04:21:59.472]      // skip if-block "protType == 1"
[04:21:59.472]    </control>
[04:21:59.472]    <control if="protType == 2" while="" timeout="0" info="">
[04:21:59.472]      // if-block "protType == 2"
[04:21:59.472]        // =>  TRUE
[04:21:59.472]      <control if="isSWJ" while="" timeout="0" info="">
[04:21:59.472]        // if-block "isSWJ"
[04:21:59.472]          // =>  TRUE
[04:21:59.472]        <control if="hasDormant" while="" timeout="0" info="">
[04:21:59.472]          // if-block "hasDormant"
[04:21:59.472]            // =>  FALSE
[04:21:59.472]          // skip if-block "hasDormant"
[04:21:59.472]        </control>
[04:21:59.472]        <control if="!hasDormant" while="" timeout="0" info="">
[04:21:59.472]          // if-block "!hasDormant"
[04:21:59.472]            // =>  TRUE
[04:21:59.472]          <block atomic="false" info="">
[04:21:59.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:21:59.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:59.477]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:21:59.477]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:21:59.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:21:59.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:59.477]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:21:59.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:21:59.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:21:59.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:59.482]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:21:59.482]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:21:59.482]          </block>
[04:21:59.482]          // end if-block "!hasDormant"
[04:21:59.487]        </control>
[04:21:59.487]        // end if-block "isSWJ"
[04:21:59.487]      </control>
[04:21:59.487]      <control if="!isSWJ" while="" timeout="0" info="">
[04:21:59.487]        // if-block "!isSWJ"
[04:21:59.487]          // =>  FALSE
[04:21:59.487]        // skip if-block "!isSWJ"
[04:21:59.487]      </control>
[04:21:59.487]      <block atomic="false" info="">
[04:21:59.487]        ReadDP(0x0);
[04:21:59.489]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:21:59.489]      </block>
[04:21:59.489]      // end if-block "protType == 2"
[04:21:59.489]    </control>
[04:21:59.489]  </sequence>
[04:21:59.489]  
[04:21:59.489]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:21:59.489]  
[04:21:59.489]  <debugvars>
[04:21:59.489]    // Pre-defined
[04:21:59.489]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:59.489]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:59.489]    __dp=0x00000000
[04:21:59.489]    __ap=0x00000000
[04:21:59.489]    __traceout=0x00000000      (Trace Disabled)
[04:21:59.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:59.489]    __FlashAddr=0x00000000
[04:21:59.489]    __FlashLen=0x00000000
[04:21:59.489]    __FlashArg=0x00000000
[04:21:59.489]    __FlashOp=0x00000000
[04:21:59.489]    __Result=0x00000000
[04:21:59.489]  </debugvars>
[04:21:59.489]  
[04:21:59.489]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:21:59.489]    <block atomic="false" info="">
[04:21:59.489]      __var SW_DP_ABORT       = 0x0;
[04:21:59.489]        // -> [SW_DP_ABORT <= 0x00000000]
[04:21:59.489]      __var DP_CTRL_STAT      = 0x4;
[04:21:59.489]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:21:59.489]      __var DP_SELECT         = 0x8;
[04:21:59.489]        // -> [DP_SELECT <= 0x00000008]
[04:21:59.489]      __var powered_down      = 0;
[04:21:59.489]        // -> [powered_down <= 0x00000000]
[04:21:59.489]      WriteDP(DP_SELECT, 0x00000000);
[04:21:59.489]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:21:59.489]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:21:59.497]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:21:59.497]        // -> [powered_down <= 0x00000001]
[04:21:59.497]    </block>
[04:21:59.497]    <control if="powered_down" while="" timeout="0" info="">
[04:21:59.497]      // if-block "powered_down"
[04:21:59.497]        // =>  TRUE
[04:21:59.497]      <block atomic="false" info="">
[04:21:59.497]        Message(0, "Debug/System power-up request sent");
[04:21:59.497]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:21:59.502]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:21:59.502]      </block>
[04:21:59.502]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:21:59.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:21:59.502]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:21:59.502]        // while-condition  =>  FALSE
[04:21:59.502]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:21:59.502]      </control>
[04:21:59.502]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:21:59.502]        // if-block "(__protocol & 0xFFFF) == 1"
[04:21:59.502]          // =>  FALSE
[04:21:59.502]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:21:59.502]      </control>
[04:21:59.502]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:21:59.502]        // if-block "(__protocol & 0xFFFF) == 2"
[04:21:59.502]          // =>  TRUE
[04:21:59.502]        <block atomic="false" info="">
[04:21:59.502]          Message(0, "executing SWD power up");
[04:21:59.509]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:21:59.509]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:21:59.509]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:21:59.511]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:21:59.511]        </block>
[04:21:59.511]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:21:59.511]      </control>
[04:21:59.511]      // end if-block "powered_down"
[04:21:59.511]    </control>
[04:21:59.511]    <block atomic="false" info="">
[04:21:59.511]      __var DEBUG_PORT_VAL    = 0;
[04:21:59.511]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:21:59.511]      __var ACCESS_POINT_VAL  = 0;
[04:21:59.511]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:21:59.511]      __ap = 1; 
[04:21:59.511]        // -> [__ap <= 0x00000001]
[04:21:59.511]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:21:59.517]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:21:59.517]      __ap = 4;
[04:21:59.517]        // -> [__ap <= 0x00000004]
[04:21:59.517]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:59.517]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:21:59.517]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:21:59.517]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:59.522]    </block>
[04:21:59.522]    <block atomic="false" info="">
[04:21:59.522]      __var nReset = 0x80;
[04:21:59.522]        // -> [nReset <= 0x00000080]
[04:21:59.522]      __var canReadPins = 0;
[04:21:59.522]        // -> [canReadPins <= 0x00000000]
[04:21:59.522]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:21:59.522]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:21:59.522]        // -> [canReadPins <= 0x00000001]
[04:21:59.522]    </block>
[04:21:59.522]    <control if="" while="1" timeout="200" info="">
[04:21:59.522]      // while "1"  (timeout="200")
[04:21:59.522]      // while-condition  =>  TRUE
[04:21:59.522]      // while "1"  (timeout="200")
[04:21:59.522]      // while-condition  =>  TRUE
[04:21:59.522]      // while "1"  (timeout="200")
[04:21:59.522]      // while-condition  =>  TRUE
[04:21:59.522]      // while "1"  (timeout="200")
[04:21:59.522]      // while-condition  =>  TRUE
[04:21:59.522]      // while "1"  (timeout="200")
[04:21:59.522]      // while-condition  =>  TRUE
[04:21:59.522]      // while "1"  (timeout="200")
[04:21:59.522]      // while-condition  =>  TRUE
[04:21:59.522]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.527]      // while "1"  (timeout="200")
[04:21:59.527]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.532]      // while-condition  =>  TRUE
[04:21:59.532]      // while "1"  (timeout="200")
[04:21:59.537]      // while-condition  =>  TRUE
[04:21:59.537]      // while "1"  (timeout="200")
[04:21:59.537]      // while  =>  TIMEOUT
[04:21:59.537]      // end while "1"
[04:21:59.537]    </control>
[04:21:59.537]    <control if="canReadPins" while="" timeout="0" info="">
[04:21:59.537]      // if-block "canReadPins"
[04:21:59.537]        // =>  TRUE
[04:21:59.537]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:21:59.537]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:21:59.542]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:21:59.542]        // while-condition  =>  FALSE
[04:21:59.542]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:21:59.542]      </control>
[04:21:59.542]      // end if-block "canReadPins"
[04:21:59.542]    </control>
[04:21:59.542]    <control if="!canReadPins" while="" timeout="0" info="">
[04:21:59.542]      // if-block "!canReadPins"
[04:21:59.542]        // =>  FALSE
[04:21:59.542]      // skip if-block "!canReadPins"
[04:21:59.542]    </control>
[04:21:59.542]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:21:59.542]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:59.542]        // =>  TRUE
[04:21:59.542]      <block atomic="false" info="">
[04:21:59.542]        WriteAP(0x00, 0x190008);
[04:21:59.547]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:59.547]        WriteAP(0xF0, 0x01);
[04:21:59.547]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:59.547]      </block>
[04:21:59.547]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:59.547]    </control>
[04:21:59.552]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:21:59.552]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:59.552]        // =>  FALSE
[04:21:59.552]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:59.552]    </control>
[04:21:59.552]    <block atomic="false" info="">
[04:21:59.552]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:59.552]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:21:59.552]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:21:59.552]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:59.557]      __ap = 0; //lets make sure we reset the access point selection
[04:21:59.557]        // -> [__ap <= 0x00000000]
[04:21:59.557]    </block>
[04:21:59.557]  </sequence>
[04:21:59.557]  
[04:21:59.572]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:21:59.572]  
[04:21:59.572]  <debugvars>
[04:21:59.572]    // Pre-defined
[04:21:59.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:59.572]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:59.577]    __dp=0x00000000
[04:21:59.577]    __ap=0x00000000
[04:21:59.577]    __traceout=0x00000000      (Trace Disabled)
[04:21:59.577]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:59.577]    __FlashAddr=0x00000000
[04:21:59.577]    __FlashLen=0x00000000
[04:21:59.577]    __FlashArg=0x00000000
[04:21:59.577]    __FlashOp=0x00000000
[04:21:59.577]    __Result=0x00000000
[04:21:59.577]  </debugvars>
[04:21:59.577]  
[04:21:59.577]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:21:59.577]    <block atomic="false" info="">
[04:21:59.577]      __var deviceID = 0;
[04:21:59.577]        // -> [deviceID <= 0x00000000]
[04:21:59.577]      __var version = 0;
[04:21:59.577]        // -> [version <= 0x00000000]
[04:21:59.577]      __var partNum = 0;
[04:21:59.577]        // -> [partNum <= 0x00000000]
[04:21:59.577]      __var manuf = 0;
[04:21:59.577]        // -> [manuf <= 0x00000000]
[04:21:59.577]      __var isMSPM0G1X0X_G3X0X = 0;
[04:21:59.577]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:21:59.577]      __var isProduction = 0;
[04:21:59.577]        // -> [isProduction <= 0x00000000]
[04:21:59.577]      __var continueId = 0;
[04:21:59.577]        // -> [continueId <= 0x00000000]
[04:21:59.577]      deviceID =   Read32(0x41C40004);
[04:21:59.582]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:21:59.582]        // -> [deviceID <= 0x2BB8802F]
[04:21:59.582]      version = deviceID >> 28;
[04:21:59.582]        // -> [version <= 0x00000002]
[04:21:59.582]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:21:59.582]        // -> [partNum <= 0x0000BB88]
[04:21:59.582]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:21:59.582]        // -> [manuf <= 0x00000017]
[04:21:59.582]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:21:59.582]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:21:59.582]      isProduction = (version > 0);
[04:21:59.582]        // -> [isProduction <= 0x00000001]
[04:21:59.582]    </block>
[04:21:59.582]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:21:59.582]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:21:59.582]        // =>  FALSE
[04:21:59.582]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:21:59.582]    </control>
[04:21:59.582]    <control if="continueId == 4" while="" timeout="0" info="">
[04:21:59.582]      // if-block "continueId == 4"
[04:21:59.582]        // =>  FALSE
[04:21:59.582]      // skip if-block "continueId == 4"
[04:21:59.582]    </control>
[04:21:59.582]    <control if="!isProduction" while="" timeout="0" info="">
[04:21:59.587]      // if-block "!isProduction"
[04:21:59.587]        // =>  FALSE
[04:21:59.587]      // skip if-block "!isProduction"
[04:21:59.587]    </control>
[04:21:59.587]  </sequence>
[04:21:59.587]  
[04:22:18.617]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:22:18.617]  
[04:22:18.625]  <debugvars>
[04:22:18.625]    // Pre-defined
[04:22:18.625]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:18.625]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:18.625]    __dp=0x00000000
[04:22:18.625]    __ap=0x00000000
[04:22:18.625]    __traceout=0x00000000      (Trace Disabled)
[04:22:18.625]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:18.625]    __FlashAddr=0x00000000
[04:22:18.625]    __FlashLen=0x00000000
[04:22:18.625]    __FlashArg=0x00000000
[04:22:18.625]    __FlashOp=0x00000000
[04:22:18.625]    __Result=0x00000000
[04:22:18.625]  </debugvars>
[04:22:18.625]  
[04:22:18.625]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:22:18.625]    <block atomic="false" info="">
[04:22:18.625]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:22:18.625]        // -> [isSWJ <= 0x00000001]
[04:22:18.625]      __var hasDormant = __protocol & 0x00020000;
[04:22:18.625]        // -> [hasDormant <= 0x00000000]
[04:22:18.625]      __var protType   = __protocol & 0x0000FFFF;
[04:22:18.625]        // -> [protType <= 0x00000002]
[04:22:18.627]    </block>
[04:22:18.627]    <control if="protType == 1" while="" timeout="0" info="">
[04:22:18.627]      // if-block "protType == 1"
[04:22:18.627]        // =>  FALSE
[04:22:18.627]      // skip if-block "protType == 1"
[04:22:18.627]    </control>
[04:22:18.627]    <control if="protType == 2" while="" timeout="0" info="">
[04:22:18.627]      // if-block "protType == 2"
[04:22:18.627]        // =>  TRUE
[04:22:18.627]      <control if="isSWJ" while="" timeout="0" info="">
[04:22:18.627]        // if-block "isSWJ"
[04:22:18.627]          // =>  TRUE
[04:22:18.627]        <control if="hasDormant" while="" timeout="0" info="">
[04:22:18.627]          // if-block "hasDormant"
[04:22:18.627]            // =>  FALSE
[04:22:18.627]          // skip if-block "hasDormant"
[04:22:18.627]        </control>
[04:22:18.627]        <control if="!hasDormant" while="" timeout="0" info="">
[04:22:18.627]          // if-block "!hasDormant"
[04:22:18.627]            // =>  TRUE
[04:22:18.627]          <block atomic="false" info="">
[04:22:18.627]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:22:18.627]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:18.627]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:22:18.627]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:22:18.627]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:22:18.635]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:18.635]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:22:18.635]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:22:18.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:22:18.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:18.638]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:22:18.638]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:22:18.638]          </block>
[04:22:18.638]          // end if-block "!hasDormant"
[04:22:18.638]        </control>
[04:22:18.638]        // end if-block "isSWJ"
[04:22:18.638]      </control>
[04:22:18.638]      <control if="!isSWJ" while="" timeout="0" info="">
[04:22:18.638]        // if-block "!isSWJ"
[04:22:18.638]          // =>  FALSE
[04:22:18.638]        // skip if-block "!isSWJ"
[04:22:18.638]      </control>
[04:22:18.638]      <block atomic="false" info="">
[04:22:18.638]        ReadDP(0x0);
[04:22:18.643]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:22:18.643]      </block>
[04:22:18.643]      // end if-block "protType == 2"
[04:22:18.643]    </control>
[04:22:18.643]  </sequence>
[04:22:18.643]  
[04:22:18.645]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:22:18.645]  
[04:22:18.645]  <debugvars>
[04:22:18.645]    // Pre-defined
[04:22:18.645]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:18.645]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:18.645]    __dp=0x00000000
[04:22:18.645]    __ap=0x00000000
[04:22:18.645]    __traceout=0x00000000      (Trace Disabled)
[04:22:18.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:18.645]    __FlashAddr=0x00000000
[04:22:18.645]    __FlashLen=0x00000000
[04:22:18.645]    __FlashArg=0x00000000
[04:22:18.645]    __FlashOp=0x00000000
[04:22:18.645]    __Result=0x00000000
[04:22:18.645]  </debugvars>
[04:22:18.647]  
[04:22:18.647]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:22:18.647]    <block atomic="false" info="">
[04:22:18.647]      __var SW_DP_ABORT       = 0x0;
[04:22:18.647]        // -> [SW_DP_ABORT <= 0x00000000]
[04:22:18.647]      __var DP_CTRL_STAT      = 0x4;
[04:22:18.647]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:22:18.647]      __var DP_SELECT         = 0x8;
[04:22:18.647]        // -> [DP_SELECT <= 0x00000008]
[04:22:18.647]      __var powered_down      = 0;
[04:22:18.647]        // -> [powered_down <= 0x00000000]
[04:22:18.647]      WriteDP(DP_SELECT, 0x00000000);
[04:22:18.647]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:22:18.647]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:22:18.647]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:22:18.647]        // -> [powered_down <= 0x00000001]
[04:22:18.647]    </block>
[04:22:18.647]    <control if="powered_down" while="" timeout="0" info="">
[04:22:18.647]      // if-block "powered_down"
[04:22:18.647]        // =>  TRUE
[04:22:18.647]      <block atomic="false" info="">
[04:22:18.647]        Message(0, "Debug/System power-up request sent");
[04:22:18.655]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:22:18.656]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:22:18.656]      </block>
[04:22:18.656]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:22:18.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:22:18.657]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:22:18.657]        // while-condition  =>  FALSE
[04:22:18.657]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:22:18.657]      </control>
[04:22:18.657]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:22:18.657]        // if-block "(__protocol & 0xFFFF) == 1"
[04:22:18.657]          // =>  FALSE
[04:22:18.657]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:22:18.657]      </control>
[04:22:18.657]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:22:18.657]        // if-block "(__protocol & 0xFFFF) == 2"
[04:22:18.657]          // =>  TRUE
[04:22:18.657]        <block atomic="false" info="">
[04:22:18.657]          Message(0, "executing SWD power up");
[04:22:18.657]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:22:18.657]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:22:18.657]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:22:18.657]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:22:18.657]        </block>
[04:22:18.657]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:22:18.657]      </control>
[04:22:18.665]      // end if-block "powered_down"
[04:22:18.665]    </control>
[04:22:18.665]    <block atomic="false" info="">
[04:22:18.665]      __var DEBUG_PORT_VAL    = 0;
[04:22:18.665]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:22:18.665]      __var ACCESS_POINT_VAL  = 0;
[04:22:18.665]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:22:18.665]      __ap = 1; 
[04:22:18.665]        // -> [__ap <= 0x00000001]
[04:22:18.665]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:22:18.667]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:22:18.669]      __ap = 4;
[04:22:18.669]        // -> [__ap <= 0x00000004]
[04:22:18.669]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:22:18.670]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:22:18.670]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:22:18.670]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:22:18.670]    </block>
[04:22:18.670]    <block atomic="false" info="">
[04:22:18.670]      __var nReset = 0x80;
[04:22:18.670]        // -> [nReset <= 0x00000080]
[04:22:18.675]      __var canReadPins = 0;
[04:22:18.675]        // -> [canReadPins <= 0x00000000]
[04:22:18.675]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:22:18.675]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:22:18.675]        // -> [canReadPins <= 0x00000001]
[04:22:18.675]    </block>
[04:22:18.675]    <control if="" while="1" timeout="200" info="">
[04:22:18.675]      // while "1"  (timeout="200")
[04:22:18.675]      // while-condition  =>  TRUE
[04:22:18.675]      // while "1"  (timeout="200")
[04:22:18.675]      // while-condition  =>  TRUE
[04:22:18.675]      // while "1"  (timeout="200")
[04:22:18.675]      // while-condition  =>  TRUE
[04:22:18.675]      // while "1"  (timeout="200")
[04:22:18.678]      // while-condition  =>  TRUE
[04:22:18.678]      // while "1"  (timeout="200")
[04:22:18.678]      // while-condition  =>  TRUE
[04:22:18.678]      // while "1"  (timeout="200")
[04:22:18.678]      // while-condition  =>  TRUE
[04:22:18.678]      // while "1"  (timeout="200")
[04:22:18.678]      // while-condition  =>  TRUE
[04:22:18.678]      // while "1"  (timeout="200")
[04:22:18.678]      // while-condition  =>  TRUE
[04:22:18.678]      // while "1"  (timeout="200")
[04:22:18.678]      // while-condition  =>  TRUE
[04:22:18.678]      // while "1"  (timeout="200")
[04:22:18.679]      // while-condition  =>  TRUE
[04:22:18.679]      // while "1"  (timeout="200")
[04:22:18.679]      // while-condition  =>  TRUE
[04:22:18.679]      // while "1"  (timeout="200")
[04:22:18.679]      // while-condition  =>  TRUE
[04:22:18.679]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.680]      // while "1"  (timeout="200")
[04:22:18.680]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.685]      // while "1"  (timeout="200")
[04:22:18.685]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.688]      // while "1"  (timeout="200")
[04:22:18.688]      // while-condition  =>  TRUE
[04:22:18.695]      // while "1"  (timeout="200")
[04:22:18.695]      // while  =>  TIMEOUT
[04:22:18.695]      // end while "1"
[04:22:18.695]    </control>
[04:22:18.695]    <control if="canReadPins" while="" timeout="0" info="">
[04:22:18.695]      // if-block "canReadPins"
[04:22:18.695]        // =>  TRUE
[04:22:18.695]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:22:18.695]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:22:18.695]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:22:18.695]        // while-condition  =>  FALSE
[04:22:18.695]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:22:18.695]      </control>
[04:22:18.695]      // end if-block "canReadPins"
[04:22:18.698]    </control>
[04:22:18.698]    <control if="!canReadPins" while="" timeout="0" info="">
[04:22:18.698]      // if-block "!canReadPins"
[04:22:18.698]        // =>  FALSE
[04:22:18.698]      // skip if-block "!canReadPins"
[04:22:18.698]    </control>
[04:22:18.698]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:22:18.698]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:22:18.698]        // =>  TRUE
[04:22:18.698]      <block atomic="false" info="">
[04:22:18.698]        WriteAP(0x00, 0x190008);
[04:22:18.700]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:22:18.700]        WriteAP(0xF0, 0x01);
[04:22:18.700]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:22:18.705]      </block>
[04:22:18.705]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:22:18.705]    </control>
[04:22:18.705]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:22:18.705]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:22:18.705]        // =>  FALSE
[04:22:18.705]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:22:18.705]    </control>
[04:22:18.705]    <block atomic="false" info="">
[04:22:18.705]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:22:18.709]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:22:18.709]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:22:18.709]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:22:18.711]      __ap = 0; //lets make sure we reset the access point selection
[04:22:18.711]        // -> [__ap <= 0x00000000]
[04:22:18.711]    </block>
[04:22:18.711]  </sequence>
[04:22:18.711]  
[04:22:18.729]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:22:18.729]  
[04:22:18.729]  <debugvars>
[04:22:18.729]    // Pre-defined
[04:22:18.729]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:18.729]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:18.729]    __dp=0x00000000
[04:22:18.729]    __ap=0x00000000
[04:22:18.729]    __traceout=0x00000000      (Trace Disabled)
[04:22:18.729]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:18.729]    __FlashAddr=0x00000000
[04:22:18.729]    __FlashLen=0x00000000
[04:22:18.729]    __FlashArg=0x00000000
[04:22:18.729]    __FlashOp=0x00000000
[04:22:18.729]    __Result=0x00000000
[04:22:18.729]  </debugvars>
[04:22:18.729]  
[04:22:18.729]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:22:18.729]    <block atomic="false" info="">
[04:22:18.729]      __var deviceID = 0;
[04:22:18.729]        // -> [deviceID <= 0x00000000]
[04:22:18.729]      __var version = 0;
[04:22:18.729]        // -> [version <= 0x00000000]
[04:22:18.729]      __var partNum = 0;
[04:22:18.729]        // -> [partNum <= 0x00000000]
[04:22:18.729]      __var manuf = 0;
[04:22:18.729]        // -> [manuf <= 0x00000000]
[04:22:18.729]      __var isMSPM0G1X0X_G3X0X = 0;
[04:22:18.729]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:22:18.729]      __var isProduction = 0;
[04:22:18.729]        // -> [isProduction <= 0x00000000]
[04:22:18.729]      __var continueId = 0;
[04:22:18.729]        // -> [continueId <= 0x00000000]
[04:22:18.729]      deviceID =   Read32(0x41C40004);
[04:22:18.737]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:22:18.737]        // -> [deviceID <= 0x2BB8802F]
[04:22:18.737]      version = deviceID >> 28;
[04:22:18.737]        // -> [version <= 0x00000002]
[04:22:18.737]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:22:18.737]        // -> [partNum <= 0x0000BB88]
[04:22:18.737]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:22:18.737]        // -> [manuf <= 0x00000017]
[04:22:18.737]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:22:18.737]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:22:18.737]      isProduction = (version > 0);
[04:22:18.737]        // -> [isProduction <= 0x00000001]
[04:22:18.737]    </block>
[04:22:18.737]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:22:18.737]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:22:18.737]        // =>  FALSE
[04:22:18.737]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:22:18.737]    </control>
[04:22:18.737]    <control if="continueId == 4" while="" timeout="0" info="">
[04:22:18.737]      // if-block "continueId == 4"
[04:22:18.737]        // =>  FALSE
[04:22:18.737]      // skip if-block "continueId == 4"
[04:22:18.737]    </control>
[04:22:18.737]    <control if="!isProduction" while="" timeout="0" info="">
[04:22:18.737]      // if-block "!isProduction"
[04:22:18.737]        // =>  FALSE
[04:22:18.737]      // skip if-block "!isProduction"
[04:22:18.737]    </control>
[04:22:18.737]  </sequence>
[04:22:18.737]  
[04:22:38.308]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:22:38.308]  
[04:22:38.308]  <debugvars>
[04:22:38.308]    // Pre-defined
[04:22:38.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:38.308]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:38.308]    __dp=0x00000000
[04:22:38.308]    __ap=0x00000000
[04:22:38.308]    __traceout=0x00000000      (Trace Disabled)
[04:22:38.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:38.308]    __FlashAddr=0x00000000
[04:22:38.308]    __FlashLen=0x00000000
[04:22:38.315]    __FlashArg=0x00000000
[04:22:38.315]    __FlashOp=0x00000000
[04:22:38.315]    __Result=0x00000000
[04:22:38.315]  </debugvars>
[04:22:38.315]  
[04:22:38.315]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:22:38.315]    <block atomic="false" info="">
[04:22:38.315]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:22:38.315]        // -> [isSWJ <= 0x00000001]
[04:22:38.315]      __var hasDormant = __protocol & 0x00020000;
[04:22:38.315]        // -> [hasDormant <= 0x00000000]
[04:22:38.315]      __var protType   = __protocol & 0x0000FFFF;
[04:22:38.315]        // -> [protType <= 0x00000002]
[04:22:38.315]    </block>
[04:22:38.315]    <control if="protType == 1" while="" timeout="0" info="">
[04:22:38.315]      // if-block "protType == 1"
[04:22:38.315]        // =>  FALSE
[04:22:38.315]      // skip if-block "protType == 1"
[04:22:38.315]    </control>
[04:22:38.315]    <control if="protType == 2" while="" timeout="0" info="">
[04:22:38.315]      // if-block "protType == 2"
[04:22:38.315]        // =>  TRUE
[04:22:38.315]      <control if="isSWJ" while="" timeout="0" info="">
[04:22:38.315]        // if-block "isSWJ"
[04:22:38.315]          // =>  TRUE
[04:22:38.315]        <control if="hasDormant" while="" timeout="0" info="">
[04:22:38.318]          // if-block "hasDormant"
[04:22:38.318]            // =>  FALSE
[04:22:38.318]          // skip if-block "hasDormant"
[04:22:38.318]        </control>
[04:22:38.318]        <control if="!hasDormant" while="" timeout="0" info="">
[04:22:38.318]          // if-block "!hasDormant"
[04:22:38.318]            // =>  TRUE
[04:22:38.318]          <block atomic="false" info="">
[04:22:38.318]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:22:38.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:38.321]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:22:38.321]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:22:38.321]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:22:38.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:38.321]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:22:38.325]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:22:38.325]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:22:38.325]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:38.325]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:22:38.325]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:22:38.325]          </block>
[04:22:38.325]          // end if-block "!hasDormant"
[04:22:38.325]        </control>
[04:22:38.325]        // end if-block "isSWJ"
[04:22:38.325]      </control>
[04:22:38.329]      <control if="!isSWJ" while="" timeout="0" info="">
[04:22:38.329]        // if-block "!isSWJ"
[04:22:38.329]          // =>  FALSE
[04:22:38.329]        // skip if-block "!isSWJ"
[04:22:38.329]      </control>
[04:22:38.329]      <block atomic="false" info="">
[04:22:38.329]        ReadDP(0x0);
[04:22:38.329]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:22:38.329]      </block>
[04:22:38.329]      // end if-block "protType == 2"
[04:22:38.329]    </control>
[04:22:38.329]  </sequence>
[04:22:38.329]  
[04:22:38.336]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:22:38.336]  
[04:22:38.336]  <debugvars>
[04:22:38.336]    // Pre-defined
[04:22:38.339]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:38.339]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:38.339]    __dp=0x00000000
[04:22:38.339]    __ap=0x00000000
[04:22:38.339]    __traceout=0x00000000      (Trace Disabled)
[04:22:38.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:38.339]    __FlashAddr=0x00000000
[04:22:38.339]    __FlashLen=0x00000000
[04:22:38.339]    __FlashArg=0x00000000
[04:22:38.339]    __FlashOp=0x00000000
[04:22:38.339]    __Result=0x00000000
[04:22:38.339]  </debugvars>
[04:22:38.339]  
[04:22:38.339]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:22:38.339]    <block atomic="false" info="">
[04:22:38.339]      __var SW_DP_ABORT       = 0x0;
[04:22:38.339]        // -> [SW_DP_ABORT <= 0x00000000]
[04:22:38.339]      __var DP_CTRL_STAT      = 0x4;
[04:22:38.339]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:22:38.339]      __var DP_SELECT         = 0x8;
[04:22:38.339]        // -> [DP_SELECT <= 0x00000008]
[04:22:38.339]      __var powered_down      = 0;
[04:22:38.339]        // -> [powered_down <= 0x00000000]
[04:22:38.339]      WriteDP(DP_SELECT, 0x00000000);
[04:22:38.339]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:22:38.339]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:22:38.345]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:22:38.345]        // -> [powered_down <= 0x00000001]
[04:22:38.345]    </block>
[04:22:38.345]    <control if="powered_down" while="" timeout="0" info="">
[04:22:38.345]      // if-block "powered_down"
[04:22:38.345]        // =>  TRUE
[04:22:38.345]      <block atomic="false" info="">
[04:22:38.345]        Message(0, "Debug/System power-up request sent");
[04:22:38.349]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:22:38.350]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:22:38.350]      </block>
[04:22:38.350]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:22:38.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:22:38.353]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:22:38.353]        // while-condition  =>  FALSE
[04:22:38.353]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:22:38.353]      </control>
[04:22:38.353]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:22:38.353]        // if-block "(__protocol & 0xFFFF) == 1"
[04:22:38.353]          // =>  FALSE
[04:22:38.353]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:22:38.353]      </control>
[04:22:38.353]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:22:38.353]        // if-block "(__protocol & 0xFFFF) == 2"
[04:22:38.353]          // =>  TRUE
[04:22:38.353]        <block atomic="false" info="">
[04:22:38.353]          Message(0, "executing SWD power up");
[04:22:38.355]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:22:38.359]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:22:38.359]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:22:38.361]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:22:38.361]        </block>
[04:22:38.361]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:22:38.361]      </control>
[04:22:38.362]      // end if-block "powered_down"
[04:22:38.362]    </control>
[04:22:38.362]    <block atomic="false" info="">
[04:22:38.362]      __var DEBUG_PORT_VAL    = 0;
[04:22:38.362]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:22:38.362]      __var ACCESS_POINT_VAL  = 0;
[04:22:38.362]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:22:38.362]      __ap = 1; 
[04:22:38.362]        // -> [__ap <= 0x00000001]
[04:22:38.362]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:22:38.365]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:22:38.365]      __ap = 4;
[04:22:38.365]        // -> [__ap <= 0x00000004]
[04:22:38.366]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:22:38.369]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:22:38.369]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:22:38.369]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:22:38.372]    </block>
[04:22:38.372]    <block atomic="false" info="">
[04:22:38.372]      __var nReset = 0x80;
[04:22:38.372]        // -> [nReset <= 0x00000080]
[04:22:38.372]      __var canReadPins = 0;
[04:22:38.372]        // -> [canReadPins <= 0x00000000]
[04:22:38.373]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:22:38.374]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:22:38.374]        // -> [canReadPins <= 0x00000001]
[04:22:38.374]    </block>
[04:22:38.374]    <control if="" while="1" timeout="200" info="">
[04:22:38.374]      // while "1"  (timeout="200")
[04:22:38.375]      // while-condition  =>  TRUE
[04:22:38.375]      // while "1"  (timeout="200")
[04:22:38.375]      // while-condition  =>  TRUE
[04:22:38.375]      // while "1"  (timeout="200")
[04:22:38.375]      // while-condition  =>  TRUE
[04:22:38.375]      // while "1"  (timeout="200")
[04:22:38.375]      // while-condition  =>  TRUE
[04:22:38.375]      // while "1"  (timeout="200")
[04:22:38.376]      // while-condition  =>  TRUE
[04:22:38.376]      // while "1"  (timeout="200")
[04:22:38.376]      // while-condition  =>  TRUE
[04:22:38.376]      // while "1"  (timeout="200")
[04:22:38.376]      // while-condition  =>  TRUE
[04:22:38.376]      // while "1"  (timeout="200")
[04:22:38.376]      // while-condition  =>  TRUE
[04:22:38.376]      // while "1"  (timeout="200")
[04:22:38.376]      // while-condition  =>  TRUE
[04:22:38.376]      // while "1"  (timeout="200")
[04:22:38.377]      // while-condition  =>  TRUE
[04:22:38.377]      // while "1"  (timeout="200")
[04:22:38.377]      // while-condition  =>  TRUE
[04:22:38.377]      // while "1"  (timeout="200")
[04:22:38.377]      // while-condition  =>  TRUE
[04:22:38.377]      // while "1"  (timeout="200")
[04:22:38.377]      // while  =>  TIMEOUT
[04:22:38.377]      // end while "1"
[04:22:38.377]    </control>
[04:22:38.377]    <control if="canReadPins" while="" timeout="0" info="">
[04:22:38.378]      // if-block "canReadPins"
[04:22:38.378]        // =>  TRUE
[04:22:38.378]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:22:38.378]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:22:38.380]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:22:38.380]        // while-condition  =>  FALSE
[04:22:38.380]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:22:38.380]      </control>
[04:22:38.380]      // end if-block "canReadPins"
[04:22:38.381]    </control>
[04:22:38.381]    <control if="!canReadPins" while="" timeout="0" info="">
[04:22:38.381]      // if-block "!canReadPins"
[04:22:38.381]        // =>  FALSE
[04:22:38.381]      // skip if-block "!canReadPins"
[04:22:38.381]    </control>
[04:22:38.381]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:22:38.381]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:22:38.381]        // =>  TRUE
[04:22:38.382]      <block atomic="false" info="">
[04:22:38.382]        WriteAP(0x00, 0x190008);
[04:22:38.383]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:22:38.383]        WriteAP(0xF0, 0x01);
[04:22:38.387]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:22:38.387]      </block>
[04:22:38.387]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:22:38.387]    </control>
[04:22:38.387]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:22:38.387]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:22:38.387]        // =>  FALSE
[04:22:38.387]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:22:38.387]    </control>
[04:22:38.387]    <block atomic="false" info="">
[04:22:38.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:22:38.389]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:22:38.389]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:22:38.389]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:22:38.389]      __ap = 0; //lets make sure we reset the access point selection
[04:22:38.389]        // -> [__ap <= 0x00000000]
[04:22:38.389]    </block>
[04:22:38.389]  </sequence>
[04:22:38.389]  
[04:22:38.412]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:22:38.412]  
[04:22:38.412]  <debugvars>
[04:22:38.412]    // Pre-defined
[04:22:38.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:38.415]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:38.415]    __dp=0x00000000
[04:22:38.415]    __ap=0x00000000
[04:22:38.415]    __traceout=0x00000000      (Trace Disabled)
[04:22:38.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:38.415]    __FlashAddr=0x00000000
[04:22:38.415]    __FlashLen=0x00000000
[04:22:38.415]    __FlashArg=0x00000000
[04:22:38.415]    __FlashOp=0x00000000
[04:22:38.415]    __Result=0x00000000
[04:22:38.415]  </debugvars>
[04:22:38.415]  
[04:22:38.415]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:22:38.415]    <block atomic="false" info="">
[04:22:38.415]      __var deviceID = 0;
[04:22:38.415]        // -> [deviceID <= 0x00000000]
[04:22:38.415]      __var version = 0;
[04:22:38.415]        // -> [version <= 0x00000000]
[04:22:38.415]      __var partNum = 0;
[04:22:38.415]        // -> [partNum <= 0x00000000]
[04:22:38.415]      __var manuf = 0;
[04:22:38.415]        // -> [manuf <= 0x00000000]
[04:22:38.415]      __var isMSPM0G1X0X_G3X0X = 0;
[04:22:38.415]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:22:38.415]      __var isProduction = 0;
[04:22:38.415]        // -> [isProduction <= 0x00000000]
[04:22:38.415]      __var continueId = 0;
[04:22:38.415]        // -> [continueId <= 0x00000000]
[04:22:38.415]      deviceID =   Read32(0x41C40004);
[04:22:38.419]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:22:38.419]        // -> [deviceID <= 0x2BB8802F]
[04:22:38.423]      version = deviceID >> 28;
[04:22:38.423]        // -> [version <= 0x00000002]
[04:22:38.423]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:22:38.423]        // -> [partNum <= 0x0000BB88]
[04:22:38.423]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:22:38.424]        // -> [manuf <= 0x00000017]
[04:22:38.424]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:22:38.424]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:22:38.424]      isProduction = (version > 0);
[04:22:38.424]        // -> [isProduction <= 0x00000001]
[04:22:38.424]    </block>
[04:22:38.424]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:22:38.424]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:22:38.424]        // =>  FALSE
[04:22:38.424]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:22:38.424]    </control>
[04:22:38.424]    <control if="continueId == 4" while="" timeout="0" info="">
[04:22:38.424]      // if-block "continueId == 4"
[04:22:38.424]        // =>  FALSE
[04:22:38.424]      // skip if-block "continueId == 4"
[04:22:38.424]    </control>
[04:22:38.424]    <control if="!isProduction" while="" timeout="0" info="">
[04:22:38.425]      // if-block "!isProduction"
[04:22:38.425]        // =>  FALSE
[04:22:38.425]      // skip if-block "!isProduction"
[04:22:38.425]    </control>
[04:22:38.425]  </sequence>
[04:22:38.425]  
[04:22:56.345]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:22:56.345]  
[04:22:56.354]  <debugvars>
[04:22:56.354]    // Pre-defined
[04:22:56.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:56.354]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:56.354]    __dp=0x00000000
[04:22:56.354]    __ap=0x00000000
[04:22:56.354]    __traceout=0x00000000      (Trace Disabled)
[04:22:56.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:56.354]    __FlashAddr=0x00000000
[04:22:56.354]    __FlashLen=0x00000000
[04:22:56.354]    __FlashArg=0x00000000
[04:22:56.354]    __FlashOp=0x00000000
[04:22:56.354]    __Result=0x00000000
[04:22:56.354]  </debugvars>
[04:22:56.354]  
[04:22:56.354]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:22:56.354]    <block atomic="false" info="">
[04:22:56.354]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:22:56.354]        // -> [isSWJ <= 0x00000001]
[04:22:56.354]      __var hasDormant = __protocol & 0x00020000;
[04:22:56.356]        // -> [hasDormant <= 0x00000000]
[04:22:56.356]      __var protType   = __protocol & 0x0000FFFF;
[04:22:56.356]        // -> [protType <= 0x00000002]
[04:22:56.356]    </block>
[04:22:56.356]    <control if="protType == 1" while="" timeout="0" info="">
[04:22:56.356]      // if-block "protType == 1"
[04:22:56.356]        // =>  FALSE
[04:22:56.356]      // skip if-block "protType == 1"
[04:22:56.356]    </control>
[04:22:56.356]    <control if="protType == 2" while="" timeout="0" info="">
[04:22:56.356]      // if-block "protType == 2"
[04:22:56.356]        // =>  TRUE
[04:22:56.356]      <control if="isSWJ" while="" timeout="0" info="">
[04:22:56.356]        // if-block "isSWJ"
[04:22:56.356]          // =>  TRUE
[04:22:56.356]        <control if="hasDormant" while="" timeout="0" info="">
[04:22:56.356]          // if-block "hasDormant"
[04:22:56.356]            // =>  FALSE
[04:22:56.356]          // skip if-block "hasDormant"
[04:22:56.356]        </control>
[04:22:56.356]        <control if="!hasDormant" while="" timeout="0" info="">
[04:22:56.356]          // if-block "!hasDormant"
[04:22:56.356]            // =>  TRUE
[04:22:56.356]          <block atomic="false" info="">
[04:22:56.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:22:56.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:56.356]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:22:56.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:22:56.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:22:56.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:56.361]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:22:56.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:22:56.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:22:56.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:22:56.366]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:22:56.368]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:22:56.368]          </block>
[04:22:56.368]          // end if-block "!hasDormant"
[04:22:56.368]        </control>
[04:22:56.370]        // end if-block "isSWJ"
[04:22:56.370]      </control>
[04:22:56.370]      <control if="!isSWJ" while="" timeout="0" info="">
[04:22:56.370]        // if-block "!isSWJ"
[04:22:56.370]          // =>  FALSE
[04:22:56.370]        // skip if-block "!isSWJ"
[04:22:56.370]      </control>
[04:22:56.370]      <block atomic="false" info="">
[04:22:56.370]        ReadDP(0x0);
[04:22:56.370]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:22:56.370]      </block>
[04:22:56.370]      // end if-block "protType == 2"
[04:22:56.370]    </control>
[04:22:56.370]  </sequence>
[04:22:56.370]  
[04:22:56.375]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:22:56.375]  
[04:22:56.375]  <debugvars>
[04:22:56.375]    // Pre-defined
[04:22:56.375]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:56.375]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:56.375]    __dp=0x00000000
[04:22:56.375]    __ap=0x00000000
[04:22:56.375]    __traceout=0x00000000      (Trace Disabled)
[04:22:56.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:56.375]    __FlashAddr=0x00000000
[04:22:56.375]    __FlashLen=0x00000000
[04:22:56.375]    __FlashArg=0x00000000
[04:22:56.375]    __FlashOp=0x00000000
[04:22:56.375]    __Result=0x00000000
[04:22:56.375]  </debugvars>
[04:22:56.375]  
[04:22:56.375]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:22:56.375]    <block atomic="false" info="">
[04:22:56.375]      __var SW_DP_ABORT       = 0x0;
[04:22:56.375]        // -> [SW_DP_ABORT <= 0x00000000]
[04:22:56.375]      __var DP_CTRL_STAT      = 0x4;
[04:22:56.375]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:22:56.375]      __var DP_SELECT         = 0x8;
[04:22:56.375]        // -> [DP_SELECT <= 0x00000008]
[04:22:56.375]      __var powered_down      = 0;
[04:22:56.375]        // -> [powered_down <= 0x00000000]
[04:22:56.375]      WriteDP(DP_SELECT, 0x00000000);
[04:22:56.375]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:22:56.375]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:22:56.380]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:22:56.380]        // -> [powered_down <= 0x00000001]
[04:22:56.380]    </block>
[04:22:56.380]    <control if="powered_down" while="" timeout="0" info="">
[04:22:56.380]      // if-block "powered_down"
[04:22:56.380]        // =>  TRUE
[04:22:56.380]      <block atomic="false" info="">
[04:22:56.380]        Message(0, "Debug/System power-up request sent");
[04:22:56.380]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:22:56.385]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:22:56.385]      </block>
[04:22:56.385]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:22:56.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:22:56.385]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:22:56.385]        // while-condition  =>  FALSE
[04:22:56.385]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:22:56.385]      </control>
[04:22:56.385]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:22:56.385]        // if-block "(__protocol & 0xFFFF) == 1"
[04:22:56.385]          // =>  FALSE
[04:22:56.385]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:22:56.385]      </control>
[04:22:56.385]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:22:56.385]        // if-block "(__protocol & 0xFFFF) == 2"
[04:22:56.385]          // =>  TRUE
[04:22:56.385]        <block atomic="false" info="">
[04:22:56.385]          Message(0, "executing SWD power up");
[04:22:56.390]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:22:56.390]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:22:56.390]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:22:56.390]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:22:56.390]        </block>
[04:22:56.390]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:22:56.390]      </control>
[04:22:56.390]      // end if-block "powered_down"
[04:22:56.390]    </control>
[04:22:56.390]    <block atomic="false" info="">
[04:22:56.390]      __var DEBUG_PORT_VAL    = 0;
[04:22:56.390]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:22:56.390]      __var ACCESS_POINT_VAL  = 0;
[04:22:56.395]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:22:56.395]      __ap = 1; 
[04:22:56.395]        // -> [__ap <= 0x00000001]
[04:22:56.395]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:22:56.395]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:22:56.395]      __ap = 4;
[04:22:56.395]        // -> [__ap <= 0x00000004]
[04:22:56.395]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:22:56.400]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:22:56.400]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:22:56.400]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:22:56.400]    </block>
[04:22:56.400]    <block atomic="false" info="">
[04:22:56.400]      __var nReset = 0x80;
[04:22:56.400]        // -> [nReset <= 0x00000080]
[04:22:56.400]      __var canReadPins = 0;
[04:22:56.400]        // -> [canReadPins <= 0x00000000]
[04:22:56.400]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:22:56.406]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:22:56.406]        // -> [canReadPins <= 0x00000001]
[04:22:56.406]    </block>
[04:22:56.406]    <control if="" while="1" timeout="200" info="">
[04:22:56.406]      // while "1"  (timeout="200")
[04:22:56.406]      // while-condition  =>  TRUE
[04:22:56.406]      // while "1"  (timeout="200")
[04:22:56.406]      // while-condition  =>  TRUE
[04:22:56.406]      // while "1"  (timeout="200")
[04:22:56.406]      // while-condition  =>  TRUE
[04:22:56.407]      // while "1"  (timeout="200")
[04:22:56.407]      // while-condition  =>  TRUE
[04:22:56.407]      // while "1"  (timeout="200")
[04:22:56.407]      // while-condition  =>  TRUE
[04:22:56.407]      // while "1"  (timeout="200")
[04:22:56.407]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.408]      // while-condition  =>  TRUE
[04:22:56.408]      // while "1"  (timeout="200")
[04:22:56.410]      // while-condition  =>  TRUE
[04:22:56.410]      // while "1"  (timeout="200")
[04:22:56.410]      // while  =>  TIMEOUT
[04:22:56.410]      // end while "1"
[04:22:56.410]    </control>
[04:22:56.410]    <control if="canReadPins" while="" timeout="0" info="">
[04:22:56.410]      // if-block "canReadPins"
[04:22:56.410]        // =>  TRUE
[04:22:56.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:22:56.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:22:56.410]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:22:56.410]        // while-condition  =>  FALSE
[04:22:56.410]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:22:56.410]      </control>
[04:22:56.410]      // end if-block "canReadPins"
[04:22:56.410]    </control>
[04:22:56.410]    <control if="!canReadPins" while="" timeout="0" info="">
[04:22:56.410]      // if-block "!canReadPins"
[04:22:56.410]        // =>  FALSE
[04:22:56.410]      // skip if-block "!canReadPins"
[04:22:56.410]    </control>
[04:22:56.410]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:22:56.410]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:22:56.410]        // =>  TRUE
[04:22:56.410]      <block atomic="false" info="">
[04:22:56.410]        WriteAP(0x00, 0x190008);
[04:22:56.410]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:22:56.410]        WriteAP(0xF0, 0x01);
[04:22:56.415]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:22:56.420]      </block>
[04:22:56.420]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:22:56.420]    </control>
[04:22:56.420]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:22:56.420]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:22:56.420]        // =>  FALSE
[04:22:56.420]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:22:56.420]    </control>
[04:22:56.420]    <block atomic="false" info="">
[04:22:56.420]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:22:56.420]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:22:56.420]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:22:56.420]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:22:56.425]      __ap = 0; //lets make sure we reset the access point selection
[04:22:56.425]        // -> [__ap <= 0x00000000]
[04:22:56.425]    </block>
[04:22:56.425]  </sequence>
[04:22:56.425]  
[04:22:56.441]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:22:56.441]  
[04:22:56.441]  <debugvars>
[04:22:56.441]    // Pre-defined
[04:22:56.446]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:22:56.446]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:22:56.446]    __dp=0x00000000
[04:22:56.446]    __ap=0x00000000
[04:22:56.446]    __traceout=0x00000000      (Trace Disabled)
[04:22:56.446]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:22:56.446]    __FlashAddr=0x00000000
[04:22:56.446]    __FlashLen=0x00000000
[04:22:56.446]    __FlashArg=0x00000000
[04:22:56.446]    __FlashOp=0x00000000
[04:22:56.446]    __Result=0x00000000
[04:22:56.446]  </debugvars>
[04:22:56.446]  
[04:22:56.446]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:22:56.446]    <block atomic="false" info="">
[04:22:56.446]      __var deviceID = 0;
[04:22:56.446]        // -> [deviceID <= 0x00000000]
[04:22:56.446]      __var version = 0;
[04:22:56.446]        // -> [version <= 0x00000000]
[04:22:56.446]      __var partNum = 0;
[04:22:56.446]        // -> [partNum <= 0x00000000]
[04:22:56.446]      __var manuf = 0;
[04:22:56.446]        // -> [manuf <= 0x00000000]
[04:22:56.446]      __var isMSPM0G1X0X_G3X0X = 0;
[04:22:56.446]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:22:56.446]      __var isProduction = 0;
[04:22:56.446]        // -> [isProduction <= 0x00000000]
[04:22:56.446]      __var continueId = 0;
[04:22:56.446]        // -> [continueId <= 0x00000000]
[04:22:56.446]      deviceID =   Read32(0x41C40004);
[04:22:56.451]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:22:56.451]        // -> [deviceID <= 0x2BB8802F]
[04:22:56.451]      version = deviceID >> 28;
[04:22:56.451]        // -> [version <= 0x00000002]
[04:22:56.451]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:22:56.451]        // -> [partNum <= 0x0000BB88]
[04:22:56.451]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:22:56.451]        // -> [manuf <= 0x00000017]
[04:22:56.451]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:22:56.451]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:22:56.451]      isProduction = (version > 0);
[04:22:56.451]        // -> [isProduction <= 0x00000001]
[04:22:56.451]    </block>
[04:22:56.451]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:22:56.451]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:22:56.451]        // =>  FALSE
[04:22:56.451]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:22:56.451]    </control>
[04:22:56.451]    <control if="continueId == 4" while="" timeout="0" info="">
[04:22:56.451]      // if-block "continueId == 4"
[04:22:56.451]        // =>  FALSE
[04:22:56.456]      // skip if-block "continueId == 4"
[04:22:56.456]    </control>
[04:22:56.456]    <control if="!isProduction" while="" timeout="0" info="">
[04:22:56.456]      // if-block "!isProduction"
[04:22:56.456]        // =>  FALSE
[04:22:56.456]      // skip if-block "!isProduction"
[04:22:56.456]    </control>
[04:22:56.456]  </sequence>
[04:22:56.456]  
