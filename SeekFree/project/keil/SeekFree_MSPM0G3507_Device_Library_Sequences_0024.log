/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0024.log
 *  Created     : 16:58:14 (27/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[16:58:14.907]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:58:14.907]  
[16:58:14.907]  <debugvars>
[16:58:14.908]    // Pre-defined
[16:58:14.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:58:14.908]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:58:14.908]    __dp=0x00000000
[16:58:14.908]    __ap=0x00000000
[16:58:14.908]    __traceout=0x00000000      (Trace Disabled)
[16:58:14.908]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:58:14.908]    __FlashAddr=0x00000000
[16:58:14.908]    __FlashLen=0x00000000
[16:58:14.908]    __FlashArg=0x00000000
[16:58:14.908]    __FlashOp=0x00000000
[16:58:14.908]    __Result=0x00000000
[16:58:14.908]  </debugvars>
[16:58:14.908]  
[16:58:14.908]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:58:14.908]    <block atomic="false" info="">
[16:58:14.908]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:58:14.908]        // -> [isSWJ <= 0x00000001]
[16:58:14.908]      __var hasDormant = __protocol & 0x00020000;
[16:58:14.908]        // -> [hasDormant <= 0x00000000]
[16:58:14.908]      __var protType   = __protocol & 0x0000FFFF;
[16:58:14.908]        // -> [protType <= 0x00000002]
[16:58:14.908]    </block>
[16:58:14.908]    <control if="protType == 1" while="" timeout="0" info="">
[16:58:14.908]      // if-block "protType == 1"
[16:58:14.908]        // =>  FALSE
[16:58:14.908]      // skip if-block "protType == 1"
[16:58:14.908]    </control>
[16:58:14.908]    <control if="protType == 2" while="" timeout="0" info="">
[16:58:14.908]      // if-block "protType == 2"
[16:58:14.908]        // =>  TRUE
[16:58:14.908]      <control if="isSWJ" while="" timeout="0" info="">
[16:58:14.908]        // if-block "isSWJ"
[16:58:14.908]          // =>  TRUE
[16:58:14.908]        <control if="hasDormant" while="" timeout="0" info="">
[16:58:14.908]          // if-block "hasDormant"
[16:58:14.908]            // =>  FALSE
[16:58:14.908]          // skip if-block "hasDormant"
[16:58:14.908]        </control>
[16:58:14.908]        <control if="!hasDormant" while="" timeout="0" info="">
[16:58:14.908]          // if-block "!hasDormant"
[16:58:14.908]            // =>  TRUE
[16:58:14.908]          <block atomic="false" info="">
[16:58:14.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:58:14.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:58:14.908]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:58:14.908]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:58:14.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:58:14.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:58:14.918]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:58:14.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:58:14.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:58:14.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:58:14.928]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:58:14.928]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:58:14.928]          </block>
[16:58:14.928]          // end if-block "!hasDormant"
[16:58:14.928]        </control>
[16:58:14.928]        // end if-block "isSWJ"
[16:58:14.928]      </control>
[16:58:14.928]      <control if="!isSWJ" while="" timeout="0" info="">
[16:58:14.928]        // if-block "!isSWJ"
[16:58:14.928]          // =>  FALSE
[16:58:14.928]        // skip if-block "!isSWJ"
[16:58:14.928]      </control>
[16:58:14.928]      <block atomic="false" info="">
[16:58:14.928]        ReadDP(0x0);
[16:58:14.928]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:58:14.928]      </block>
[16:58:14.928]      // end if-block "protType == 2"
[16:58:14.928]    </control>
[16:58:14.928]  </sequence>
[16:58:14.928]  
[16:58:14.938]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:58:14.938]  
[16:58:14.938]  <debugvars>
[16:58:14.938]    // Pre-defined
[16:58:14.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:58:14.938]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:58:14.938]    __dp=0x00000000
[16:58:14.938]    __ap=0x00000000
[16:58:14.938]    __traceout=0x00000000      (Trace Disabled)
[16:58:14.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:58:14.938]    __FlashAddr=0x00000000
[16:58:14.938]    __FlashLen=0x00000000
[16:58:14.938]    __FlashArg=0x00000000
[16:58:14.938]    __FlashOp=0x00000000
[16:58:14.938]    __Result=0x00000000
[16:58:14.938]  </debugvars>
[16:58:14.938]  
[16:58:14.938]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:58:14.938]    <block atomic="false" info="">
[16:58:14.938]      __var SW_DP_ABORT       = 0x0;
[16:58:14.938]        // -> [SW_DP_ABORT <= 0x00000000]
[16:58:14.938]      __var DP_CTRL_STAT      = 0x4;
[16:58:14.938]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:58:14.938]      __var DP_SELECT         = 0x8;
[16:58:14.938]        // -> [DP_SELECT <= 0x00000008]
[16:58:14.938]      __var powered_down      = 0;
[16:58:14.938]        // -> [powered_down <= 0x00000000]
[16:58:14.938]      WriteDP(DP_SELECT, 0x00000000);
[16:58:14.948]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:58:14.948]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:58:14.948]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:58:14.948]        // -> [powered_down <= 0x00000001]
[16:58:14.948]    </block>
[16:58:14.948]    <control if="powered_down" while="" timeout="0" info="">
[16:58:14.948]      // if-block "powered_down"
[16:58:14.948]        // =>  TRUE
[16:58:14.948]      <block atomic="false" info="">
[16:58:14.948]        Message(0, "Debug/System power-up request sent");
[16:58:14.948]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:58:14.958]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:58:14.958]      </block>
[16:58:14.958]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:58:14.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:58:14.958]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:58:14.958]        // while-condition  =>  FALSE
[16:58:14.958]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:58:14.958]      </control>
[16:58:14.958]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:58:14.958]        // if-block "(__protocol & 0xFFFF) == 1"
[16:58:14.958]          // =>  FALSE
[16:58:14.958]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:58:14.958]      </control>
[16:58:14.958]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:58:14.958]        // if-block "(__protocol & 0xFFFF) == 2"
[16:58:14.958]          // =>  TRUE
[16:58:14.958]        <block atomic="false" info="">
[16:58:14.958]          Message(0, "executing SWD power up");
[16:58:14.958]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:58:14.968]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:58:14.968]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:58:14.968]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:58:14.968]        </block>
[16:58:14.968]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:58:14.968]      </control>
[16:58:14.968]      // end if-block "powered_down"
[16:58:14.968]    </control>
[16:58:14.968]    <block atomic="false" info="">
[16:58:14.968]      __var DEBUG_PORT_VAL    = 0;
[16:58:14.968]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:58:14.968]      __var ACCESS_POINT_VAL  = 0;
[16:58:14.968]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:58:14.968]      __ap = 1; 
[16:58:14.968]        // -> [__ap <= 0x00000001]
[16:58:14.968]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:58:14.978]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:58:14.978]      __ap = 4;
[16:58:14.978]        // -> [__ap <= 0x00000004]
[16:58:14.978]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:58:14.988]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:58:14.988]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:58:14.988]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:58:14.988]    </block>
[16:58:14.988]    <block atomic="false" info="">
[16:58:14.988]      __var nReset = 0x80;
[16:58:14.988]        // -> [nReset <= 0x00000080]
[16:58:14.988]      __var canReadPins = 0;
[16:58:14.988]        // -> [canReadPins <= 0x00000000]
[16:58:14.988]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:58:14.998]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:58:14.998]        // -> [canReadPins <= 0x00000001]
[16:58:14.998]    </block>
[16:58:14.998]    <control if="" while="1" timeout="200" info="">
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:14.998]      // while-condition  =>  TRUE
[16:58:14.998]      // while "1"  (timeout="200")
[16:58:15.008]      // while-condition  =>  TRUE
[16:58:15.008]      // while "1"  (timeout="200")
[16:58:15.008]      // while  =>  TIMEOUT
[16:58:15.008]      // end while "1"
[16:58:15.008]    </control>
[16:58:15.008]    <control if="canReadPins" while="" timeout="0" info="">
[16:58:15.008]      // if-block "canReadPins"
[16:58:15.008]        // =>  TRUE
[16:58:15.008]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:58:15.008]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:58:15.018]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:58:15.018]        // while-condition  =>  FALSE
[16:58:15.018]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:58:15.018]      </control>
[16:58:15.018]      // end if-block "canReadPins"
[16:58:15.018]    </control>
[16:58:15.018]    <control if="!canReadPins" while="" timeout="0" info="">
[16:58:15.018]      // if-block "!canReadPins"
[16:58:15.018]        // =>  FALSE
[16:58:15.018]      // skip if-block "!canReadPins"
[16:58:15.018]    </control>
[16:58:15.018]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:58:15.018]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:58:15.018]        // =>  TRUE
[16:58:15.018]      <block atomic="false" info="">
[16:58:15.018]        WriteAP(0x00, 0x190008);
[16:58:15.018]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:58:15.018]        WriteAP(0xF0, 0x01);
[16:58:15.028]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:58:15.028]      </block>
[16:58:15.028]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:58:15.028]    </control>
[16:58:15.028]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:58:15.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:58:15.028]        // =>  FALSE
[16:58:15.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:58:15.028]    </control>
[16:58:15.028]    <block atomic="false" info="">
[16:58:15.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:58:15.028]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:58:15.028]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:58:15.028]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:58:15.028]      __ap = 0; //lets make sure we reset the access point selection
[16:58:15.028]        // -> [__ap <= 0x00000000]
[16:58:15.028]    </block>
[16:58:15.028]  </sequence>
[16:58:15.028]  
[16:58:15.058]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:58:15.058]  
[16:58:15.058]  <debugvars>
[16:58:15.068]    // Pre-defined
[16:58:15.068]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:58:15.068]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:58:15.068]    __dp=0x00000000
[16:58:15.068]    __ap=0x00000000
[16:58:15.068]    __traceout=0x00000000      (Trace Disabled)
[16:58:15.068]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:58:15.068]    __FlashAddr=0x00000000
[16:58:15.068]    __FlashLen=0x00000000
[16:58:15.068]    __FlashArg=0x00000000
[16:58:15.068]    __FlashOp=0x00000000
[16:58:15.068]    __Result=0x00000000
[16:58:15.068]  </debugvars>
[16:58:15.068]  
[16:58:15.068]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:58:15.068]    <block atomic="false" info="">
[16:58:15.068]      __var deviceID = 0;
[16:58:15.068]        // -> [deviceID <= 0x00000000]
[16:58:15.068]      __var version = 0;
[16:58:15.068]        // -> [version <= 0x00000000]
[16:58:15.068]      __var partNum = 0;
[16:58:15.068]        // -> [partNum <= 0x00000000]
[16:58:15.068]      __var manuf = 0;
[16:58:15.068]        // -> [manuf <= 0x00000000]
[16:58:15.068]      __var isMSPM0G1X0X_G3X0X = 0;
[16:58:15.068]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:58:15.068]      __var isProduction = 0;
[16:58:15.068]        // -> [isProduction <= 0x00000000]
[16:58:15.068]      __var continueId = 0;
[16:58:15.068]        // -> [continueId <= 0x00000000]
[16:58:15.068]      deviceID =   Read32(0x41C40004);
[16:58:15.068]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:58:15.068]        // -> [deviceID <= 0x2BB8802F]
[16:58:15.068]      version = deviceID >> 28;
[16:58:15.068]        // -> [version <= 0x00000002]
[16:58:15.068]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:58:15.068]        // -> [partNum <= 0x0000BB88]
[16:58:15.068]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:58:15.068]        // -> [manuf <= 0x00000017]
[16:58:15.068]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:58:15.068]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:58:15.068]      isProduction = (version > 0);
[16:58:15.078]        // -> [isProduction <= 0x00000001]
[16:58:15.078]    </block>
[16:58:15.078]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:58:15.078]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:58:15.078]        // =>  FALSE
[16:58:15.078]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:58:15.078]    </control>
[16:58:15.078]    <control if="continueId == 4" while="" timeout="0" info="">
[16:58:15.078]      // if-block "continueId == 4"
[16:58:15.078]        // =>  FALSE
[16:58:15.078]      // skip if-block "continueId == 4"
[16:58:15.078]    </control>
[16:58:15.078]    <control if="!isProduction" while="" timeout="0" info="">
[16:58:15.078]      // if-block "!isProduction"
[16:58:15.078]        // =>  FALSE
[16:58:15.078]      // skip if-block "!isProduction"
[16:58:15.078]    </control>
[16:58:15.078]  </sequence>
[16:58:15.078]  
[17:00:58.247]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:00:58.247]  
[17:00:58.261]  <debugvars>
[17:00:58.261]    // Pre-defined
[17:00:58.261]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:00:58.261]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:00:58.261]    __dp=0x00000000
[17:00:58.261]    __ap=0x00000000
[17:00:58.261]    __traceout=0x00000000      (Trace Disabled)
[17:00:58.261]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:00:58.261]    __FlashAddr=0x00000000
[17:00:58.261]    __FlashLen=0x00000000
[17:00:58.261]    __FlashArg=0x00000000
[17:00:58.261]    __FlashOp=0x00000000
[17:00:58.261]    __Result=0x00000000
[17:00:58.261]  </debugvars>
[17:00:58.261]  
[17:00:58.261]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:00:58.261]    <block atomic="false" info="">
[17:00:58.261]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:00:58.261]        // -> [isSWJ <= 0x00000001]
[17:00:58.261]      __var hasDormant = __protocol & 0x00020000;
[17:00:58.261]        // -> [hasDormant <= 0x00000000]
[17:00:58.261]      __var protType   = __protocol & 0x0000FFFF;
[17:00:58.261]        // -> [protType <= 0x00000002]
[17:00:58.261]    </block>
[17:00:58.261]    <control if="protType == 1" while="" timeout="0" info="">
[17:00:58.261]      // if-block "protType == 1"
[17:00:58.261]        // =>  FALSE
[17:00:58.261]      // skip if-block "protType == 1"
[17:00:58.261]    </control>
[17:00:58.261]    <control if="protType == 2" while="" timeout="0" info="">
[17:00:58.261]      // if-block "protType == 2"
[17:00:58.261]        // =>  TRUE
[17:00:58.261]      <control if="isSWJ" while="" timeout="0" info="">
[17:00:58.264]        // if-block "isSWJ"
[17:00:58.264]          // =>  TRUE
[17:00:58.264]        <control if="hasDormant" while="" timeout="0" info="">
[17:00:58.264]          // if-block "hasDormant"
[17:00:58.264]            // =>  FALSE
[17:00:58.264]          // skip if-block "hasDormant"
[17:00:58.264]        </control>
[17:00:58.264]        <control if="!hasDormant" while="" timeout="0" info="">
[17:00:58.264]          // if-block "!hasDormant"
[17:00:58.264]            // =>  TRUE
[17:00:58.264]          <block atomic="false" info="">
[17:00:58.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:00:58.266]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:00:58.266]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:00:58.267]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:00:58.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:00:58.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:00:58.269]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:00:58.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:00:58.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:00:58.272]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:00:58.272]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:00:58.272]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:00:58.272]          </block>
[17:00:58.272]          // end if-block "!hasDormant"
[17:00:58.272]        </control>
[17:00:58.272]        // end if-block "isSWJ"
[17:00:58.272]      </control>
[17:00:58.272]      <control if="!isSWJ" while="" timeout="0" info="">
[17:00:58.272]        // if-block "!isSWJ"
[17:00:58.272]          // =>  FALSE
[17:00:58.272]        // skip if-block "!isSWJ"
[17:00:58.272]      </control>
[17:00:58.272]      <block atomic="false" info="">
[17:00:58.272]        ReadDP(0x0);
[17:00:58.275]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:00:58.276]      </block>
[17:00:58.276]      // end if-block "protType == 2"
[17:00:58.276]    </control>
[17:00:58.277]  </sequence>
[17:00:58.277]  
[17:00:58.277]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:00:58.277]  
[17:00:58.277]  <debugvars>
[17:00:58.277]    // Pre-defined
[17:00:58.277]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:00:58.277]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:00:58.277]    __dp=0x00000000
[17:00:58.277]    __ap=0x00000000
[17:00:58.277]    __traceout=0x00000000      (Trace Disabled)
[17:00:58.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:00:58.277]    __FlashAddr=0x00000000
[17:00:58.277]    __FlashLen=0x00000000
[17:00:58.277]    __FlashArg=0x00000000
[17:00:58.277]    __FlashOp=0x00000000
[17:00:58.277]    __Result=0x00000000
[17:00:58.277]  </debugvars>
[17:00:58.277]  
[17:00:58.277]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:00:58.277]    <block atomic="false" info="">
[17:00:58.277]      __var SW_DP_ABORT       = 0x0;
[17:00:58.277]        // -> [SW_DP_ABORT <= 0x00000000]
[17:00:58.277]      __var DP_CTRL_STAT      = 0x4;
[17:00:58.277]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:00:58.277]      __var DP_SELECT         = 0x8;
[17:00:58.277]        // -> [DP_SELECT <= 0x00000008]
[17:00:58.277]      __var powered_down      = 0;
[17:00:58.277]        // -> [powered_down <= 0x00000000]
[17:00:58.285]      WriteDP(DP_SELECT, 0x00000000);
[17:00:58.285]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:00:58.285]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:00:58.285]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:00:58.285]        // -> [powered_down <= 0x00000001]
[17:00:58.285]    </block>
[17:00:58.285]    <control if="powered_down" while="" timeout="0" info="">
[17:00:58.285]      // if-block "powered_down"
[17:00:58.285]        // =>  TRUE
[17:00:58.285]      <block atomic="false" info="">
[17:00:58.285]        Message(0, "Debug/System power-up request sent");
[17:00:58.285]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:00:58.290]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:00:58.290]      </block>
[17:00:58.290]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:00:58.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.290]        // while-condition  =>  TRUE
[17:00:58.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.290]        // while-condition  =>  TRUE
[17:00:58.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.295]        // while-condition  =>  TRUE
[17:00:58.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.295]        // while-condition  =>  TRUE
[17:00:58.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.295]        // while-condition  =>  TRUE
[17:00:58.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.300]        // while-condition  =>  TRUE
[17:00:58.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.300]        // while-condition  =>  TRUE
[17:00:58.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.305]        // while-condition  =>  TRUE
[17:00:58.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.305]        // while-condition  =>  TRUE
[17:00:58.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.305]        // while-condition  =>  TRUE
[17:00:58.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.310]        // while-condition  =>  TRUE
[17:00:58.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.310]        // while-condition  =>  TRUE
[17:00:58.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.315]        // while-condition  =>  TRUE
[17:00:58.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.315]        // while-condition  =>  TRUE
[17:00:58.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.315]        // while-condition  =>  TRUE
[17:00:58.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.315]        // while-condition  =>  TRUE
[17:00:58.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.315]        // while-condition  =>  TRUE
[17:00:58.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.315]        // while-condition  =>  TRUE
[17:00:58.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.327]        // while-condition  =>  TRUE
[17:00:58.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.327]        // while-condition  =>  TRUE
[17:00:58.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.327]        // while-condition  =>  TRUE
[17:00:58.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.327]        // while-condition  =>  TRUE
[17:00:58.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.335]        // while-condition  =>  TRUE
[17:00:58.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.335]        // while-condition  =>  TRUE
[17:00:58.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.335]        // while-condition  =>  TRUE
[17:00:58.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.340]        // while-condition  =>  TRUE
[17:00:58.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.340]        // while-condition  =>  TRUE
[17:00:58.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.347]        // while-condition  =>  TRUE
[17:00:58.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.347]        // while-condition  =>  TRUE
[17:00:58.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.347]        // while-condition  =>  TRUE
[17:00:58.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.347]        // while-condition  =>  TRUE
[17:00:58.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.347]        // while-condition  =>  TRUE
[17:00:58.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.355]        // while-condition  =>  TRUE
[17:00:58.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.355]        // while-condition  =>  TRUE
[17:00:58.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.355]        // while-condition  =>  TRUE
[17:00:58.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.360]        // while-condition  =>  TRUE
[17:00:58.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.360]        // while-condition  =>  TRUE
[17:00:58.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.360]        // while-condition  =>  TRUE
[17:00:58.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.365]        // while-condition  =>  TRUE
[17:00:58.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.367]        // while-condition  =>  TRUE
[17:00:58.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.367]        // while-condition  =>  TRUE
[17:00:58.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.367]        // while-condition  =>  TRUE
[17:00:58.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.367]        // while-condition  =>  TRUE
[17:00:58.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.375]        // while-condition  =>  TRUE
[17:00:58.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.380]        // while-condition  =>  TRUE
[17:00:58.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.385]        // while-condition  =>  TRUE
[17:00:58.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.391]        // while-condition  =>  TRUE
[17:00:58.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.391]        // while-condition  =>  TRUE
[17:00:58.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.395]        // while-condition  =>  TRUE
[17:00:58.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.397]        // while-condition  =>  TRUE
[17:00:58.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.397]        // while-condition  =>  TRUE
[17:00:58.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.397]        // while-condition  =>  TRUE
[17:00:58.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.397]        // while-condition  =>  TRUE
[17:00:58.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.397]        // while-condition  =>  TRUE
[17:00:58.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.397]        // while-condition  =>  TRUE
[17:00:58.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.407]        // while-condition  =>  TRUE
[17:00:58.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.410]        // while-condition  =>  TRUE
[17:00:58.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.410]        // while-condition  =>  TRUE
[17:00:58.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.417]        // while-condition  =>  TRUE
[17:00:58.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.417]        // while-condition  =>  TRUE
[17:00:58.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.417]        // while-condition  =>  TRUE
[17:00:58.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.417]        // while-condition  =>  TRUE
[17:00:58.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.417]        // while-condition  =>  TRUE
[17:00:58.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.427]        // while-condition  =>  TRUE
[17:00:58.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.427]        // while-condition  =>  TRUE
[17:00:58.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.427]        // while-condition  =>  TRUE
[17:00:58.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.427]        // while-condition  =>  TRUE
[17:00:58.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.427]        // while-condition  =>  TRUE
[17:00:58.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.435]        // while-condition  =>  TRUE
[17:00:58.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.435]        // while-condition  =>  TRUE
[17:00:58.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.435]        // while-condition  =>  TRUE
[17:00:58.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.440]        // while-condition  =>  TRUE
[17:00:58.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.440]        // while-condition  =>  TRUE
[17:00:58.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.440]        // while-condition  =>  TRUE
[17:00:58.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.445]        // while-condition  =>  TRUE
[17:00:58.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.445]        // while-condition  =>  TRUE
[17:00:58.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.450]        // while-condition  =>  TRUE
[17:00:58.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.450]        // while-condition  =>  TRUE
[17:00:58.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.450]        // while-condition  =>  TRUE
[17:00:58.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.456]        // while-condition  =>  TRUE
[17:00:58.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.456]        // while-condition  =>  TRUE
[17:00:58.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.460]        // while-condition  =>  TRUE
[17:00:58.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.460]        // while-condition  =>  TRUE
[17:00:58.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.465]        // while-condition  =>  TRUE
[17:00:58.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.465]        // while-condition  =>  TRUE
[17:00:58.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.465]        // while-condition  =>  TRUE
[17:00:58.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.470]        // while-condition  =>  TRUE
[17:00:58.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.470]        // while-condition  =>  TRUE
[17:00:58.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.470]        // while-condition  =>  TRUE
[17:00:58.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.475]        // while-condition  =>  TRUE
[17:00:58.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.475]        // while-condition  =>  TRUE
[17:00:58.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.475]        // while-condition  =>  TRUE
[17:00:58.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.480]        // while-condition  =>  TRUE
[17:00:58.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.480]        // while-condition  =>  TRUE
[17:00:58.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.486]        // while-condition  =>  TRUE
[17:00:58.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.487]        // while-condition  =>  TRUE
[17:00:58.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.487]        // while-condition  =>  TRUE
[17:00:58.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.487]        // while-condition  =>  TRUE
[17:00:58.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.487]        // while-condition  =>  TRUE
[17:00:58.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.487]        // while-condition  =>  TRUE
[17:00:58.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.497]        // while-condition  =>  TRUE
[17:00:58.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.497]        // while-condition  =>  TRUE
[17:00:58.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.497]        // while-condition  =>  TRUE
[17:00:58.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.497]        // while-condition  =>  TRUE
[17:00:58.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.506]        // while-condition  =>  TRUE
[17:00:58.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.506]        // while-condition  =>  TRUE
[17:00:58.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.506]        // while-condition  =>  TRUE
[17:00:58.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.506]        // while-condition  =>  TRUE
[17:00:58.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.506]        // while-condition  =>  TRUE
[17:00:58.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.506]        // while-condition  =>  TRUE
[17:00:58.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.515]        // while-condition  =>  TRUE
[17:00:58.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.515]        // while-condition  =>  TRUE
[17:00:58.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.515]        // while-condition  =>  TRUE
[17:00:58.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.525]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.525]        // while-condition  =>  TRUE
[17:00:58.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.527]        // while-condition  =>  TRUE
[17:00:58.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.527]        // while-condition  =>  TRUE
[17:00:58.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.527]        // while-condition  =>  TRUE
[17:00:58.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.527]        // while-condition  =>  TRUE
[17:00:58.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.527]        // while-condition  =>  TRUE
[17:00:58.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.537]        // while-condition  =>  TRUE
[17:00:58.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.538]        // while-condition  =>  TRUE
[17:00:58.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.538]        // while-condition  =>  TRUE
[17:00:58.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.545]        // while-condition  =>  TRUE
[17:00:58.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.545]        // while-condition  =>  TRUE
[17:00:58.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.545]        // while-condition  =>  TRUE
[17:00:58.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.545]        // while-condition  =>  TRUE
[17:00:58.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.555]        // while-condition  =>  TRUE
[17:00:58.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.557]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.557]        // while-condition  =>  TRUE
[17:00:58.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.558]        // while-condition  =>  TRUE
[17:00:58.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.558]        // while-condition  =>  TRUE
[17:00:58.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.558]        // while-condition  =>  TRUE
[17:00:58.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.558]        // while-condition  =>  TRUE
[17:00:58.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.566]        // while-condition  =>  TRUE
[17:00:58.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.568]        // while-condition  =>  TRUE
[17:00:58.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.568]        // while-condition  =>  TRUE
[17:00:58.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.568]        // while-condition  =>  TRUE
[17:00:58.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.568]        // while-condition  =>  TRUE
[17:00:58.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.568]        // while-condition  =>  TRUE
[17:00:58.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.576]        // while-condition  =>  TRUE
[17:00:58.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.576]        // while-condition  =>  TRUE
[17:00:58.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.576]        // while-condition  =>  TRUE
[17:00:58.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.576]        // while-condition  =>  TRUE
[17:00:58.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.576]        // while-condition  =>  TRUE
[17:00:58.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.586]        // while-condition  =>  TRUE
[17:00:58.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.586]        // while-condition  =>  TRUE
[17:00:58.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.586]        // while-condition  =>  TRUE
[17:00:58.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.586]        // while-condition  =>  TRUE
[17:00:58.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.586]        // while-condition  =>  TRUE
[17:00:58.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.596]        // while-condition  =>  TRUE
[17:00:58.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.596]        // while-condition  =>  TRUE
[17:00:58.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.596]        // while-condition  =>  TRUE
[17:00:58.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.596]        // while-condition  =>  TRUE
[17:00:58.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.596]        // while-condition  =>  TRUE
[17:00:58.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.606]        // while-condition  =>  TRUE
[17:00:58.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.608]        // while-condition  =>  TRUE
[17:00:58.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.608]        // while-condition  =>  TRUE
[17:00:58.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.608]        // while-condition  =>  TRUE
[17:00:58.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.608]        // while-condition  =>  TRUE
[17:00:58.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.608]        // while-condition  =>  TRUE
[17:00:58.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.616]        // while-condition  =>  TRUE
[17:00:58.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.617]        // while-condition  =>  TRUE
[17:00:58.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.617]        // while-condition  =>  TRUE
[17:00:58.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.617]        // while-condition  =>  TRUE
[17:00:58.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.617]        // while-condition  =>  TRUE
[17:00:58.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.626]        // while-condition  =>  TRUE
[17:00:58.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.626]        // while-condition  =>  TRUE
[17:00:58.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.626]        // while-condition  =>  TRUE
[17:00:58.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.636]        // while-condition  =>  TRUE
[17:00:58.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.636]        // while-condition  =>  TRUE
[17:00:58.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.636]        // while-condition  =>  TRUE
[17:00:58.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.636]        // while-condition  =>  TRUE
[17:00:58.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.636]        // while-condition  =>  TRUE
[17:00:58.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.646]        // while-condition  =>  TRUE
[17:00:58.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.646]        // while-condition  =>  TRUE
[17:00:58.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.646]        // while-condition  =>  TRUE
[17:00:58.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.646]        // while-condition  =>  TRUE
[17:00:58.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.656]        // while-condition  =>  TRUE
[17:00:58.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.656]        // while-condition  =>  TRUE
[17:00:58.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.656]        // while-condition  =>  TRUE
[17:00:58.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.656]        // while-condition  =>  TRUE
[17:00:58.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.656]        // while-condition  =>  TRUE
[17:00:58.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.666]        // while-condition  =>  TRUE
[17:00:58.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.666]        // while-condition  =>  TRUE
[17:00:58.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.666]        // while-condition  =>  TRUE
[17:00:58.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.666]        // while-condition  =>  TRUE
[17:00:58.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.666]        // while-condition  =>  TRUE
[17:00:58.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.677]        // while-condition  =>  TRUE
[17:00:58.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.678]        // while-condition  =>  TRUE
[17:00:58.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.678]        // while-condition  =>  TRUE
[17:00:58.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.678]        // while-condition  =>  TRUE
[17:00:58.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.678]        // while-condition  =>  TRUE
[17:00:58.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.678]        // while-condition  =>  TRUE
[17:00:58.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.687]        // while-condition  =>  TRUE
[17:00:58.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.687]        // while-condition  =>  TRUE
[17:00:58.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.687]        // while-condition  =>  TRUE
[17:00:58.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.687]        // while-condition  =>  TRUE
[17:00:58.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.687]        // while-condition  =>  TRUE
[17:00:58.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.687]        // while-condition  =>  TRUE
[17:00:58.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.697]        // while-condition  =>  TRUE
[17:00:58.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.697]        // while-condition  =>  TRUE
[17:00:58.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.697]        // while-condition  =>  TRUE
[17:00:58.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.697]        // while-condition  =>  TRUE
[17:00:58.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.697]        // while-condition  =>  TRUE
[17:00:58.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.697]        // while-condition  =>  TRUE
[17:00:58.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.707]        // while-condition  =>  TRUE
[17:00:58.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.707]        // while-condition  =>  TRUE
[17:00:58.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.707]        // while-condition  =>  TRUE
[17:00:58.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.707]        // while-condition  =>  TRUE
[17:00:58.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.717]        // while-condition  =>  TRUE
[17:00:58.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.717]        // while-condition  =>  TRUE
[17:00:58.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.717]        // while-condition  =>  TRUE
[17:00:58.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.727]        // while-condition  =>  TRUE
[17:00:58.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.727]        // while-condition  =>  TRUE
[17:00:58.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.727]        // while-condition  =>  TRUE
[17:00:58.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.727]        // while-condition  =>  TRUE
[17:00:58.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.727]        // while-condition  =>  TRUE
[17:00:58.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.737]        // while-condition  =>  TRUE
[17:00:58.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.737]        // while-condition  =>  TRUE
[17:00:58.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.737]        // while-condition  =>  TRUE
[17:00:58.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.737]        // while-condition  =>  TRUE
[17:00:58.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.737]        // while-condition  =>  TRUE
[17:00:58.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.747]        // while-condition  =>  TRUE
[17:00:58.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.747]        // while-condition  =>  TRUE
[17:00:58.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.747]        // while-condition  =>  TRUE
[17:00:58.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.747]        // while-condition  =>  TRUE
[17:00:58.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.747]        // while-condition  =>  TRUE
[17:00:58.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.757]        // while-condition  =>  TRUE
[17:00:58.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.757]        // while-condition  =>  TRUE
[17:00:58.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.757]        // while-condition  =>  TRUE
[17:00:58.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.757]        // while-condition  =>  TRUE
[17:00:58.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.767]        // while-condition  =>  TRUE
[17:00:58.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.767]        // while-condition  =>  TRUE
[17:00:58.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.767]        // while-condition  =>  TRUE
[17:00:58.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.767]        // while-condition  =>  TRUE
[17:00:58.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.767]        // while-condition  =>  TRUE
[17:00:58.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.767]        // while-condition  =>  TRUE
[17:00:58.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.777]        // while-condition  =>  TRUE
[17:00:58.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.777]        // while-condition  =>  TRUE
[17:00:58.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.777]        // while-condition  =>  TRUE
[17:00:58.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.777]        // while-condition  =>  TRUE
[17:00:58.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.777]        // while-condition  =>  TRUE
[17:00:58.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.787]        // while-condition  =>  TRUE
[17:00:58.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.787]        // while-condition  =>  TRUE
[17:00:58.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.787]        // while-condition  =>  TRUE
[17:00:58.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.787]        // while-condition  =>  TRUE
[17:00:58.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.787]        // while-condition  =>  TRUE
[17:00:58.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.787]        // while-condition  =>  TRUE
[17:00:58.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.797]        // while-condition  =>  TRUE
[17:00:58.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.797]        // while-condition  =>  TRUE
[17:00:58.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.797]        // while-condition  =>  TRUE
[17:00:58.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.807]        // while-condition  =>  TRUE
[17:00:58.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.807]        // while-condition  =>  TRUE
[17:00:58.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.807]        // while-condition  =>  TRUE
[17:00:58.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.807]        // while-condition  =>  TRUE
[17:00:58.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.807]        // while-condition  =>  TRUE
[17:00:58.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.807]        // while-condition  =>  TRUE
[17:00:58.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.818]        // while-condition  =>  TRUE
[17:00:58.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.819]        // while-condition  =>  TRUE
[17:00:58.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.819]        // while-condition  =>  TRUE
[17:00:58.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.819]        // while-condition  =>  TRUE
[17:00:58.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.827]        // while-condition  =>  TRUE
[17:00:58.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.827]        // while-condition  =>  TRUE
[17:00:58.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.827]        // while-condition  =>  TRUE
[17:00:58.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.827]        // while-condition  =>  TRUE
[17:00:58.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.837]        // while-condition  =>  TRUE
[17:00:58.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.839]        // while-condition  =>  TRUE
[17:00:58.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.839]        // while-condition  =>  TRUE
[17:00:58.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.847]        // while-condition  =>  TRUE
[17:00:58.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.847]        // while-condition  =>  TRUE
[17:00:58.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.847]        // while-condition  =>  TRUE
[17:00:58.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.847]        // while-condition  =>  TRUE
[17:00:58.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.847]        // while-condition  =>  TRUE
[17:00:58.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.858]        // while-condition  =>  TRUE
[17:00:58.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.859]        // while-condition  =>  TRUE
[17:00:58.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.859]        // while-condition  =>  TRUE
[17:00:58.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.859]        // while-condition  =>  TRUE
[17:00:58.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.859]        // while-condition  =>  TRUE
[17:00:58.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.859]        // while-condition  =>  TRUE
[17:00:58.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.868]        // while-condition  =>  TRUE
[17:00:58.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.868]        // while-condition  =>  TRUE
[17:00:58.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.868]        // while-condition  =>  TRUE
[17:00:58.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.868]        // while-condition  =>  TRUE
[17:00:58.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.868]        // while-condition  =>  TRUE
[17:00:58.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.878]        // while-condition  =>  TRUE
[17:00:58.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.878]        // while-condition  =>  TRUE
[17:00:58.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.878]        // while-condition  =>  TRUE
[17:00:58.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.878]        // while-condition  =>  TRUE
[17:00:58.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.878]        // while-condition  =>  TRUE
[17:00:58.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.878]        // while-condition  =>  TRUE
[17:00:58.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.888]        // while-condition  =>  TRUE
[17:00:58.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.888]        // while-condition  =>  TRUE
[17:00:58.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.888]        // while-condition  =>  TRUE
[17:00:58.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.888]        // while-condition  =>  TRUE
[17:00:58.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.888]        // while-condition  =>  TRUE
[17:00:58.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.898]        // while-condition  =>  TRUE
[17:00:58.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.898]        // while-condition  =>  TRUE
[17:00:58.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.898]        // while-condition  =>  TRUE
[17:00:58.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.898]        // while-condition  =>  TRUE
[17:00:58.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.898]        // while-condition  =>  TRUE
[17:00:58.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.908]        // while-condition  =>  TRUE
[17:00:58.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.908]        // while-condition  =>  TRUE
[17:00:58.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.908]        // while-condition  =>  TRUE
[17:00:58.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.908]        // while-condition  =>  TRUE
[17:00:58.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.908]        // while-condition  =>  TRUE
[17:00:58.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.908]        // while-condition  =>  TRUE
[17:00:58.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.918]        // while-condition  =>  TRUE
[17:00:58.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.918]        // while-condition  =>  TRUE
[17:00:58.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.918]        // while-condition  =>  TRUE
[17:00:58.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.918]        // while-condition  =>  TRUE
[17:00:58.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.918]        // while-condition  =>  TRUE
[17:00:58.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.928]        // while-condition  =>  TRUE
[17:00:58.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.928]        // while-condition  =>  TRUE
[17:00:58.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.928]        // while-condition  =>  TRUE
[17:00:58.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.938]        // while-condition  =>  TRUE
[17:00:58.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.938]        // while-condition  =>  TRUE
[17:00:58.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.938]        // while-condition  =>  TRUE
[17:00:58.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.938]        // while-condition  =>  TRUE
[17:00:58.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.938]        // while-condition  =>  TRUE
[17:00:58.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.948]        // while-condition  =>  TRUE
[17:00:58.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.948]        // while-condition  =>  TRUE
[17:00:58.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.948]        // while-condition  =>  TRUE
[17:00:58.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.948]        // while-condition  =>  TRUE
[17:00:58.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.948]        // while-condition  =>  TRUE
[17:00:58.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.958]        // while-condition  =>  TRUE
[17:00:58.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.958]        // while-condition  =>  TRUE
[17:00:58.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.958]        // while-condition  =>  TRUE
[17:00:58.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.968]        // while-condition  =>  TRUE
[17:00:58.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.968]        // while-condition  =>  TRUE
[17:00:58.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.968]        // while-condition  =>  TRUE
[17:00:58.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.968]        // while-condition  =>  TRUE
[17:00:58.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.968]        // while-condition  =>  TRUE
[17:00:58.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.978]        // while-condition  =>  TRUE
[17:00:58.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.978]        // while-condition  =>  TRUE
[17:00:58.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.978]        // while-condition  =>  TRUE
[17:00:58.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.978]        // while-condition  =>  TRUE
[17:00:58.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.989]        // while-condition  =>  TRUE
[17:00:58.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.989]        // while-condition  =>  TRUE
[17:00:58.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.989]        // while-condition  =>  TRUE
[17:00:58.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.989]        // while-condition  =>  TRUE
[17:00:58.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.989]        // while-condition  =>  TRUE
[17:00:58.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.998]        // while-condition  =>  TRUE
[17:00:58.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.998]        // while-condition  =>  TRUE
[17:00:58.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.998]        // while-condition  =>  TRUE
[17:00:58.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.998]        // while-condition  =>  TRUE
[17:00:58.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.998]        // while-condition  =>  TRUE
[17:00:58.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:58.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:58.998]        // while-condition  =>  TRUE
[17:00:58.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.008]        // while-condition  =>  TRUE
[17:00:59.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.008]        // while-condition  =>  TRUE
[17:00:59.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.008]        // while-condition  =>  TRUE
[17:00:59.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.008]        // while-condition  =>  TRUE
[17:00:59.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.008]        // while-condition  =>  TRUE
[17:00:59.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.018]        // while-condition  =>  TRUE
[17:00:59.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.018]        // while-condition  =>  TRUE
[17:00:59.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.018]        // while-condition  =>  TRUE
[17:00:59.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.018]        // while-condition  =>  TRUE
[17:00:59.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.018]        // while-condition  =>  TRUE
[17:00:59.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.018]        // while-condition  =>  TRUE
[17:00:59.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.028]        // while-condition  =>  TRUE
[17:00:59.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.028]        // while-condition  =>  TRUE
[17:00:59.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.028]        // while-condition  =>  TRUE
[17:00:59.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.028]        // while-condition  =>  TRUE
[17:00:59.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.038]        // while-condition  =>  TRUE
[17:00:59.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.038]        // while-condition  =>  TRUE
[17:00:59.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.038]        // while-condition  =>  TRUE
[17:00:59.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.038]        // while-condition  =>  TRUE
[17:00:59.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.048]        // while-condition  =>  TRUE
[17:00:59.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.048]        // while-condition  =>  TRUE
[17:00:59.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.048]        // while-condition  =>  TRUE
[17:00:59.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.048]        // while-condition  =>  TRUE
[17:00:59.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.048]        // while-condition  =>  TRUE
[17:00:59.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.058]        // while-condition  =>  TRUE
[17:00:59.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.058]        // while-condition  =>  TRUE
[17:00:59.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.058]        // while-condition  =>  TRUE
[17:00:59.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.058]        // while-condition  =>  TRUE
[17:00:59.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.058]        // while-condition  =>  TRUE
[17:00:59.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.068]        // while-condition  =>  TRUE
[17:00:59.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.068]        // while-condition  =>  TRUE
[17:00:59.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.068]        // while-condition  =>  TRUE
[17:00:59.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.068]        // while-condition  =>  TRUE
[17:00:59.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.068]        // while-condition  =>  TRUE
[17:00:59.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.068]        // while-condition  =>  TRUE
[17:00:59.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.078]        // while-condition  =>  TRUE
[17:00:59.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.078]        // while-condition  =>  TRUE
[17:00:59.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.078]        // while-condition  =>  TRUE
[17:00:59.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.078]        // while-condition  =>  TRUE
[17:00:59.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.088]        // while-condition  =>  TRUE
[17:00:59.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.088]        // while-condition  =>  TRUE
[17:00:59.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.088]        // while-condition  =>  TRUE
[17:00:59.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.088]        // while-condition  =>  TRUE
[17:00:59.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.088]        // while-condition  =>  TRUE
[17:00:59.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.088]        // while-condition  =>  TRUE
[17:00:59.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.098]        // while-condition  =>  TRUE
[17:00:59.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.098]        // while-condition  =>  TRUE
[17:00:59.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.098]        // while-condition  =>  TRUE
[17:00:59.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.108]        // while-condition  =>  TRUE
[17:00:59.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.108]        // while-condition  =>  TRUE
[17:00:59.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.108]        // while-condition  =>  TRUE
[17:00:59.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.108]        // while-condition  =>  TRUE
[17:00:59.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.108]        // while-condition  =>  TRUE
[17:00:59.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.108]        // while-condition  =>  TRUE
[17:00:59.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.118]        // while-condition  =>  TRUE
[17:00:59.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.118]        // while-condition  =>  TRUE
[17:00:59.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.118]        // while-condition  =>  TRUE
[17:00:59.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.118]        // while-condition  =>  TRUE
[17:00:59.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.118]        // while-condition  =>  TRUE
[17:00:59.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.128]        // while-condition  =>  TRUE
[17:00:59.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.128]        // while-condition  =>  TRUE
[17:00:59.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.128]        // while-condition  =>  TRUE
[17:00:59.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.128]        // while-condition  =>  TRUE
[17:00:59.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.128]        // while-condition  =>  TRUE
[17:00:59.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.138]        // while-condition  =>  TRUE
[17:00:59.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.138]        // while-condition  =>  TRUE
[17:00:59.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.138]        // while-condition  =>  TRUE
[17:00:59.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.138]        // while-condition  =>  TRUE
[17:00:59.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.138]        // while-condition  =>  TRUE
[17:00:59.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.148]        // while-condition  =>  TRUE
[17:00:59.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.148]        // while-condition  =>  TRUE
[17:00:59.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.148]        // while-condition  =>  TRUE
[17:00:59.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.155]        // while-condition  =>  TRUE
[17:00:59.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.155]        // while-condition  =>  TRUE
[17:00:59.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.158]        // while-condition  =>  TRUE
[17:00:59.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.158]        // while-condition  =>  TRUE
[17:00:59.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.158]        // while-condition  =>  TRUE
[17:00:59.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.158]        // while-condition  =>  TRUE
[17:00:59.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.158]        // while-condition  =>  TRUE
[17:00:59.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.168]        // while-condition  =>  TRUE
[17:00:59.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.168]        // while-condition  =>  TRUE
[17:00:59.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.168]        // while-condition  =>  TRUE
[17:00:59.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.168]        // while-condition  =>  TRUE
[17:00:59.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.168]        // while-condition  =>  TRUE
[17:00:59.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.168]        // while-condition  =>  TRUE
[17:00:59.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.178]        // while-condition  =>  TRUE
[17:00:59.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.178]        // while-condition  =>  TRUE
[17:00:59.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.178]        // while-condition  =>  TRUE
[17:00:59.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.178]        // while-condition  =>  TRUE
[17:00:59.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.178]        // while-condition  =>  TRUE
[17:00:59.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.178]        // while-condition  =>  TRUE
[17:00:59.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.188]        // while-condition  =>  TRUE
[17:00:59.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.188]        // while-condition  =>  TRUE
[17:00:59.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.198]        // while-condition  =>  TRUE
[17:00:59.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.198]        // while-condition  =>  TRUE
[17:00:59.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.198]        // while-condition  =>  TRUE
[17:00:59.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.198]        // while-condition  =>  TRUE
[17:00:59.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.198]        // while-condition  =>  TRUE
[17:00:59.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.208]        // while-condition  =>  TRUE
[17:00:59.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.210]        // while-condition  =>  TRUE
[17:00:59.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.214]        // while-condition  =>  TRUE
[17:00:59.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.214]        // while-condition  =>  TRUE
[17:00:59.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.218]        // while-condition  =>  TRUE
[17:00:59.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.218]        // while-condition  =>  TRUE
[17:00:59.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.218]        // while-condition  =>  TRUE
[17:00:59.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.218]        // while-condition  =>  TRUE
[17:00:59.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.218]        // while-condition  =>  TRUE
[17:00:59.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.228]        // while-condition  =>  TRUE
[17:00:59.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.228]        // while-condition  =>  TRUE
[17:00:59.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.228]        // while-condition  =>  TRUE
[17:00:59.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.228]        // while-condition  =>  TRUE
[17:00:59.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.228]        // while-condition  =>  TRUE
[17:00:59.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.238]        // while-condition  =>  TRUE
[17:00:59.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.238]        // while-condition  =>  TRUE
[17:00:59.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.238]        // while-condition  =>  TRUE
[17:00:59.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.248]        // while-condition  =>  TRUE
[17:00:59.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.250]        // while-condition  =>  TRUE
[17:00:59.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.250]        // while-condition  =>  TRUE
[17:00:59.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.250]        // while-condition  =>  TRUE
[17:00:59.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.250]        // while-condition  =>  TRUE
[17:00:59.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.259]        // while-condition  =>  TRUE
[17:00:59.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.259]        // while-condition  =>  TRUE
[17:00:59.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.259]        // while-condition  =>  TRUE
[17:00:59.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.259]        // while-condition  =>  TRUE
[17:00:59.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.259]        // while-condition  =>  TRUE
[17:00:59.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.269]        // while-condition  =>  TRUE
[17:00:59.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.269]        // while-condition  =>  TRUE
[17:00:59.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.279]        // while-condition  =>  TRUE
[17:00:59.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.279]        // while-condition  =>  TRUE
[17:00:59.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.279]        // while-condition  =>  TRUE
[17:00:59.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.279]        // while-condition  =>  TRUE
[17:00:59.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.279]        // while-condition  =>  TRUE
[17:00:59.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.279]        // while-condition  =>  TRUE
[17:00:59.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:00:59.289]        // while-condition  =>  TRUE
[17:00:59.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:00:59.289]        // while  =>  TIMEOUT
[17:00:59.289]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:00:59.289]      </control>
[17:00:59.289]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:00:59.289]        // if-block "(__protocol & 0xFFFF) == 1"
[17:00:59.289]          // =>  FALSE
[17:00:59.289]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:00:59.289]      </control>
[17:00:59.289]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:00:59.289]        // if-block "(__protocol & 0xFFFF) == 2"
[17:00:59.289]          // =>  TRUE
[17:00:59.289]        <block atomic="false" info="">
[17:00:59.289]          Message(0, "executing SWD power up");
[17:00:59.289]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:00:59.289]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:00:59.289]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:00:59.289]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:00:59.289]        </block>
[17:00:59.289]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:00:59.289]      </control>
[17:00:59.289]      // end if-block "powered_down"
[17:00:59.289]    </control>
[17:00:59.289]    <block atomic="false" info="">
[17:00:59.289]      __var DEBUG_PORT_VAL    = 0;
[17:00:59.289]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:00:59.289]      __var ACCESS_POINT_VAL  = 0;
[17:00:59.289]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:00:59.289]      __ap = 1; 
[17:00:59.289]        // -> [__ap <= 0x00000001]
[17:00:59.289]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:00:59.310]  
[17:00:59.310]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[17:00:59.310]  
[17:00:59.310]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:00:59.310]    </block>
[17:00:59.310]  </sequence>
[17:00:59.310]  
[17:01:12.261]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:01:12.261]  
[17:01:12.261]  <debugvars>
[17:01:12.261]    // Pre-defined
[17:01:12.261]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:12.261]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:12.261]    __dp=0x00000000
[17:01:12.261]    __ap=0x00000000
[17:01:12.261]    __traceout=0x00000000      (Trace Disabled)
[17:01:12.261]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:12.261]    __FlashAddr=0x00000000
[17:01:12.261]    __FlashLen=0x00000000
[17:01:12.261]    __FlashArg=0x00000000
[17:01:12.261]    __FlashOp=0x00000000
[17:01:12.261]    __Result=0x00000000
[17:01:12.261]  </debugvars>
[17:01:12.261]  
[17:01:12.261]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:01:12.261]    <block atomic="false" info="">
[17:01:12.261]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:01:12.261]        // -> [isSWJ <= 0x00000001]
[17:01:12.261]      __var hasDormant = __protocol & 0x00020000;
[17:01:12.265]        // -> [hasDormant <= 0x00000000]
[17:01:12.265]      __var protType   = __protocol & 0x0000FFFF;
[17:01:12.265]        // -> [protType <= 0x00000002]
[17:01:12.265]    </block>
[17:01:12.265]    <control if="protType == 1" while="" timeout="0" info="">
[17:01:12.265]      // if-block "protType == 1"
[17:01:12.265]        // =>  FALSE
[17:01:12.265]      // skip if-block "protType == 1"
[17:01:12.265]    </control>
[17:01:12.265]    <control if="protType == 2" while="" timeout="0" info="">
[17:01:12.265]      // if-block "protType == 2"
[17:01:12.265]        // =>  TRUE
[17:01:12.265]      <control if="isSWJ" while="" timeout="0" info="">
[17:01:12.265]        // if-block "isSWJ"
[17:01:12.265]          // =>  TRUE
[17:01:12.265]        <control if="hasDormant" while="" timeout="0" info="">
[17:01:12.265]          // if-block "hasDormant"
[17:01:12.265]            // =>  FALSE
[17:01:12.265]          // skip if-block "hasDormant"
[17:01:12.265]        </control>
[17:01:12.265]        <control if="!hasDormant" while="" timeout="0" info="">
[17:01:12.265]          // if-block "!hasDormant"
[17:01:12.265]            // =>  TRUE
[17:01:12.265]          <block atomic="false" info="">
[17:01:12.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:01:12.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:12.265]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:01:12.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:01:12.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:01:12.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:12.271]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:01:12.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:01:12.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:01:12.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:12.275]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:01:12.276]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:01:12.276]          </block>
[17:01:12.276]          // end if-block "!hasDormant"
[17:01:12.276]        </control>
[17:01:12.276]        // end if-block "isSWJ"
[17:01:12.276]      </control>
[17:01:12.276]      <control if="!isSWJ" while="" timeout="0" info="">
[17:01:12.276]        // if-block "!isSWJ"
[17:01:12.276]          // =>  FALSE
[17:01:12.276]        // skip if-block "!isSWJ"
[17:01:12.276]      </control>
[17:01:12.276]      <block atomic="false" info="">
[17:01:12.276]        ReadDP(0x0);
[17:01:12.276]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:01:12.276]      </block>
[17:01:12.276]      // end if-block "protType == 2"
[17:01:12.276]    </control>
[17:01:12.281]  </sequence>
[17:01:12.281]  
[17:01:12.281]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:01:12.281]  
[17:01:12.281]  <debugvars>
[17:01:12.281]    // Pre-defined
[17:01:12.281]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:12.281]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:12.281]    __dp=0x00000000
[17:01:12.281]    __ap=0x00000000
[17:01:12.281]    __traceout=0x00000000      (Trace Disabled)
[17:01:12.281]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:12.281]    __FlashAddr=0x00000000
[17:01:12.285]    __FlashLen=0x00000000
[17:01:12.285]    __FlashArg=0x00000000
[17:01:12.285]    __FlashOp=0x00000000
[17:01:12.285]    __Result=0x00000000
[17:01:12.285]  </debugvars>
[17:01:12.285]  
[17:01:12.285]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:01:12.285]    <block atomic="false" info="">
[17:01:12.285]      __var SW_DP_ABORT       = 0x0;
[17:01:12.285]        // -> [SW_DP_ABORT <= 0x00000000]
[17:01:12.285]      __var DP_CTRL_STAT      = 0x4;
[17:01:12.285]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:01:12.286]      __var DP_SELECT         = 0x8;
[17:01:12.286]        // -> [DP_SELECT <= 0x00000008]
[17:01:12.286]      __var powered_down      = 0;
[17:01:12.286]        // -> [powered_down <= 0x00000000]
[17:01:12.286]      WriteDP(DP_SELECT, 0x00000000);
[17:01:12.286]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:01:12.286]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:01:12.286]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:01:12.286]        // -> [powered_down <= 0x00000001]
[17:01:12.286]    </block>
[17:01:12.286]    <control if="powered_down" while="" timeout="0" info="">
[17:01:12.286]      // if-block "powered_down"
[17:01:12.286]        // =>  TRUE
[17:01:12.286]      <block atomic="false" info="">
[17:01:12.286]        Message(0, "Debug/System power-up request sent");
[17:01:12.286]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:01:12.291]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:01:12.293]      </block>
[17:01:12.293]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:01:12.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:01:12.293]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:01:12.293]        // while-condition  =>  FALSE
[17:01:12.293]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:01:12.293]      </control>
[17:01:12.295]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:01:12.295]        // if-block "(__protocol & 0xFFFF) == 1"
[17:01:12.295]          // =>  FALSE
[17:01:12.295]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:01:12.295]      </control>
[17:01:12.295]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:01:12.295]        // if-block "(__protocol & 0xFFFF) == 2"
[17:01:12.295]          // =>  TRUE
[17:01:12.295]        <block atomic="false" info="">
[17:01:12.295]          Message(0, "executing SWD power up");
[17:01:12.295]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:01:12.295]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:01:12.295]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:01:12.295]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:01:12.295]        </block>
[17:01:12.295]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:01:12.295]      </control>
[17:01:12.295]      // end if-block "powered_down"
[17:01:12.295]    </control>
[17:01:12.295]    <block atomic="false" info="">
[17:01:12.301]      __var DEBUG_PORT_VAL    = 0;
[17:01:12.301]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:01:12.301]      __var ACCESS_POINT_VAL  = 0;
[17:01:12.301]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:01:12.301]      __ap = 1; 
[17:01:12.301]        // -> [__ap <= 0x00000001]
[17:01:12.301]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:01:12.301]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:01:12.301]      __ap = 4;
[17:01:12.301]        // -> [__ap <= 0x00000004]
[17:01:12.301]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:12.305]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:01:12.305]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:01:12.305]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:12.305]    </block>
[17:01:12.305]    <block atomic="false" info="">
[17:01:12.305]      __var nReset = 0x80;
[17:01:12.305]        // -> [nReset <= 0x00000080]
[17:01:12.305]      __var canReadPins = 0;
[17:01:12.305]        // -> [canReadPins <= 0x00000000]
[17:01:12.305]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:01:12.305]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:01:12.305]        // -> [canReadPins <= 0x00000001]
[17:01:12.311]    </block>
[17:01:12.311]    <control if="" while="1" timeout="200" info="">
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.311]      // while-condition  =>  TRUE
[17:01:12.311]      // while "1"  (timeout="200")
[17:01:12.315]      // while-condition  =>  TRUE
[17:01:12.315]      // while "1"  (timeout="200")
[17:01:12.315]      // while  =>  TIMEOUT
[17:01:12.316]      // end while "1"
[17:01:12.316]    </control>
[17:01:12.316]    <control if="canReadPins" while="" timeout="0" info="">
[17:01:12.316]      // if-block "canReadPins"
[17:01:12.316]        // =>  TRUE
[17:01:12.316]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:01:12.316]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:01:12.317]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:01:12.317]        // while-condition  =>  FALSE
[17:01:12.317]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:01:12.317]      </control>
[17:01:12.317]      // end if-block "canReadPins"
[17:01:12.317]    </control>
[17:01:12.317]    <control if="!canReadPins" while="" timeout="0" info="">
[17:01:12.317]      // if-block "!canReadPins"
[17:01:12.317]        // =>  FALSE
[17:01:12.317]      // skip if-block "!canReadPins"
[17:01:12.317]    </control>
[17:01:12.317]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:01:12.317]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:12.317]        // =>  TRUE
[17:01:12.317]      <block atomic="false" info="">
[17:01:12.317]        WriteAP(0x00, 0x190008);
[17:01:12.325]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:12.325]        WriteAP(0xF0, 0x01);
[17:01:12.337]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:12.337]      </block>
[17:01:12.337]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:12.337]    </control>
[17:01:12.337]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:01:12.337]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:12.337]        // =>  FALSE
[17:01:12.337]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:12.337]    </control>
[17:01:12.337]    <block atomic="false" info="">
[17:01:12.337]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:12.341]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:01:12.341]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:01:12.341]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:12.344]      __ap = 0; //lets make sure we reset the access point selection
[17:01:12.344]        // -> [__ap <= 0x00000000]
[17:01:12.344]    </block>
[17:01:12.344]  </sequence>
[17:01:12.344]  
[17:01:12.366]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:01:12.366]  
[17:01:12.366]  <debugvars>
[17:01:12.366]    // Pre-defined
[17:01:12.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:12.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:12.366]    __dp=0x00000000
[17:01:12.368]    __ap=0x00000000
[17:01:12.368]    __traceout=0x00000000      (Trace Disabled)
[17:01:12.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:12.368]    __FlashAddr=0x00000000
[17:01:12.368]    __FlashLen=0x00000000
[17:01:12.368]    __FlashArg=0x00000000
[17:01:12.368]    __FlashOp=0x00000000
[17:01:12.368]    __Result=0x00000000
[17:01:12.368]  </debugvars>
[17:01:12.368]  
[17:01:12.368]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:01:12.368]    <block atomic="false" info="">
[17:01:12.368]      __var deviceID = 0;
[17:01:12.368]        // -> [deviceID <= 0x00000000]
[17:01:12.368]      __var version = 0;
[17:01:12.368]        // -> [version <= 0x00000000]
[17:01:12.368]      __var partNum = 0;
[17:01:12.368]        // -> [partNum <= 0x00000000]
[17:01:12.368]      __var manuf = 0;
[17:01:12.368]        // -> [manuf <= 0x00000000]
[17:01:12.368]      __var isMSPM0G1X0X_G3X0X = 0;
[17:01:12.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:01:12.368]      __var isProduction = 0;
[17:01:12.368]        // -> [isProduction <= 0x00000000]
[17:01:12.368]      __var continueId = 0;
[17:01:12.368]        // -> [continueId <= 0x00000000]
[17:01:12.368]      deviceID =   Read32(0x41C40004);
[17:01:12.374]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:01:12.374]        // -> [deviceID <= 0x2BB8802F]
[17:01:12.374]      version = deviceID >> 28;
[17:01:12.374]        // -> [version <= 0x00000002]
[17:01:12.374]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:01:12.374]        // -> [partNum <= 0x0000BB88]
[17:01:12.374]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:01:12.374]        // -> [manuf <= 0x00000017]
[17:01:12.374]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:01:12.374]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:01:12.377]      isProduction = (version > 0);
[17:01:12.377]        // -> [isProduction <= 0x00000001]
[17:01:12.377]    </block>
[17:01:12.377]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:01:12.377]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:01:12.377]        // =>  FALSE
[17:01:12.377]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:01:12.377]    </control>
[17:01:12.377]    <control if="continueId == 4" while="" timeout="0" info="">
[17:01:12.377]      // if-block "continueId == 4"
[17:01:12.377]        // =>  FALSE
[17:01:12.377]      // skip if-block "continueId == 4"
[17:01:12.377]    </control>
[17:01:12.377]    <control if="!isProduction" while="" timeout="0" info="">
[17:01:12.377]      // if-block "!isProduction"
[17:01:12.377]        // =>  FALSE
[17:01:12.377]      // skip if-block "!isProduction"
[17:01:12.377]    </control>
[17:01:12.377]  </sequence>
[17:01:12.377]  
[17:01:29.207]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:01:29.207]  
[17:01:29.216]  <debugvars>
[17:01:29.216]    // Pre-defined
[17:01:29.216]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:29.216]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:29.216]    __dp=0x00000000
[17:01:29.216]    __ap=0x00000000
[17:01:29.216]    __traceout=0x00000000      (Trace Disabled)
[17:01:29.217]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:29.217]    __FlashAddr=0x00000000
[17:01:29.217]    __FlashLen=0x00000000
[17:01:29.217]    __FlashArg=0x00000000
[17:01:29.217]    __FlashOp=0x00000000
[17:01:29.217]    __Result=0x00000000
[17:01:29.217]  </debugvars>
[17:01:29.217]  
[17:01:29.217]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:01:29.217]    <block atomic="false" info="">
[17:01:29.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:01:29.217]        // -> [isSWJ <= 0x00000001]
[17:01:29.217]      __var hasDormant = __protocol & 0x00020000;
[17:01:29.217]        // -> [hasDormant <= 0x00000000]
[17:01:29.217]      __var protType   = __protocol & 0x0000FFFF;
[17:01:29.217]        // -> [protType <= 0x00000002]
[17:01:29.217]    </block>
[17:01:29.217]    <control if="protType == 1" while="" timeout="0" info="">
[17:01:29.217]      // if-block "protType == 1"
[17:01:29.217]        // =>  FALSE
[17:01:29.217]      // skip if-block "protType == 1"
[17:01:29.217]    </control>
[17:01:29.220]    <control if="protType == 2" while="" timeout="0" info="">
[17:01:29.220]      // if-block "protType == 2"
[17:01:29.220]        // =>  TRUE
[17:01:29.220]      <control if="isSWJ" while="" timeout="0" info="">
[17:01:29.220]        // if-block "isSWJ"
[17:01:29.220]          // =>  TRUE
[17:01:29.220]        <control if="hasDormant" while="" timeout="0" info="">
[17:01:29.220]          // if-block "hasDormant"
[17:01:29.220]            // =>  FALSE
[17:01:29.220]          // skip if-block "hasDormant"
[17:01:29.220]        </control>
[17:01:29.220]        <control if="!hasDormant" while="" timeout="0" info="">
[17:01:29.220]          // if-block "!hasDormant"
[17:01:29.220]            // =>  TRUE
[17:01:29.220]          <block atomic="false" info="">
[17:01:29.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:01:29.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:29.220]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:01:29.220]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:01:29.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:01:29.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:29.220]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:01:29.220]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:01:29.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:01:29.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:29.228]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:01:29.229]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:01:29.229]          </block>
[17:01:29.229]          // end if-block "!hasDormant"
[17:01:29.229]        </control>
[17:01:29.229]        // end if-block "isSWJ"
[17:01:29.229]      </control>
[17:01:29.229]      <control if="!isSWJ" while="" timeout="0" info="">
[17:01:29.229]        // if-block "!isSWJ"
[17:01:29.229]          // =>  FALSE
[17:01:29.229]        // skip if-block "!isSWJ"
[17:01:29.229]      </control>
[17:01:29.229]      <block atomic="false" info="">
[17:01:29.229]        ReadDP(0x0);
[17:01:29.229]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:01:29.229]      </block>
[17:01:29.229]      // end if-block "protType == 2"
[17:01:29.229]    </control>
[17:01:29.229]  </sequence>
[17:01:29.229]  
[17:01:29.229]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:01:29.229]  
[17:01:29.229]  <debugvars>
[17:01:29.229]    // Pre-defined
[17:01:29.229]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:29.229]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:29.229]    __dp=0x00000000
[17:01:29.229]    __ap=0x00000000
[17:01:29.229]    __traceout=0x00000000      (Trace Disabled)
[17:01:29.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:29.229]    __FlashAddr=0x00000000
[17:01:29.229]    __FlashLen=0x00000000
[17:01:29.229]    __FlashArg=0x00000000
[17:01:29.229]    __FlashOp=0x00000000
[17:01:29.229]    __Result=0x00000000
[17:01:29.229]  </debugvars>
[17:01:29.229]  
[17:01:29.229]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:01:29.229]    <block atomic="false" info="">
[17:01:29.229]      __var SW_DP_ABORT       = 0x0;
[17:01:29.229]        // -> [SW_DP_ABORT <= 0x00000000]
[17:01:29.229]      __var DP_CTRL_STAT      = 0x4;
[17:01:29.229]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:01:29.229]      __var DP_SELECT         = 0x8;
[17:01:29.229]        // -> [DP_SELECT <= 0x00000008]
[17:01:29.229]      __var powered_down      = 0;
[17:01:29.229]        // -> [powered_down <= 0x00000000]
[17:01:29.238]      WriteDP(DP_SELECT, 0x00000000);
[17:01:29.239]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:01:29.239]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:01:29.239]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:01:29.239]        // -> [powered_down <= 0x00000001]
[17:01:29.239]    </block>
[17:01:29.239]    <control if="powered_down" while="" timeout="0" info="">
[17:01:29.239]      // if-block "powered_down"
[17:01:29.239]        // =>  TRUE
[17:01:29.239]      <block atomic="false" info="">
[17:01:29.239]        Message(0, "Debug/System power-up request sent");
[17:01:29.239]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:01:29.239]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:01:29.239]      </block>
[17:01:29.239]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:01:29.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:01:29.239]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:01:29.248]        // while-condition  =>  FALSE
[17:01:29.248]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:01:29.248]      </control>
[17:01:29.248]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:01:29.248]        // if-block "(__protocol & 0xFFFF) == 1"
[17:01:29.248]          // =>  FALSE
[17:01:29.248]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:01:29.248]      </control>
[17:01:29.248]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:01:29.248]        // if-block "(__protocol & 0xFFFF) == 2"
[17:01:29.248]          // =>  TRUE
[17:01:29.248]        <block atomic="false" info="">
[17:01:29.248]          Message(0, "executing SWD power up");
[17:01:29.248]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:01:29.248]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:01:29.248]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:01:29.248]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:01:29.248]        </block>
[17:01:29.248]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:01:29.248]      </control>
[17:01:29.248]      // end if-block "powered_down"
[17:01:29.248]    </control>
[17:01:29.248]    <block atomic="false" info="">
[17:01:29.248]      __var DEBUG_PORT_VAL    = 0;
[17:01:29.248]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:01:29.248]      __var ACCESS_POINT_VAL  = 0;
[17:01:29.248]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:01:29.248]      __ap = 1; 
[17:01:29.248]        // -> [__ap <= 0x00000001]
[17:01:29.248]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:01:29.258]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:01:29.259]      __ap = 4;
[17:01:29.259]        // -> [__ap <= 0x00000004]
[17:01:29.259]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:29.259]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[17:01:29.259]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[17:01:29.259]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:29.259]    </block>
[17:01:29.259]    <block atomic="false" info="">
[17:01:29.259]      __var nReset = 0x80;
[17:01:29.259]        // -> [nReset <= 0x00000080]
[17:01:29.259]      __var canReadPins = 0;
[17:01:29.259]        // -> [canReadPins <= 0x00000000]
[17:01:29.259]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:01:29.259]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:01:29.259]        // -> [canReadPins <= 0x00000001]
[17:01:29.259]    </block>
[17:01:29.259]    <control if="" while="1" timeout="200" info="">
[17:01:29.259]      // while "1"  (timeout="200")
[17:01:29.259]      // while-condition  =>  TRUE
[17:01:29.259]      // while "1"  (timeout="200")
[17:01:29.259]      // while-condition  =>  TRUE
[17:01:29.259]      // while "1"  (timeout="200")
[17:01:29.259]      // while-condition  =>  TRUE
[17:01:29.259]      // while "1"  (timeout="200")
[17:01:29.259]      // while-condition  =>  TRUE
[17:01:29.259]      // while "1"  (timeout="200")
[17:01:29.259]      // while-condition  =>  TRUE
[17:01:29.259]      // while "1"  (timeout="200")
[17:01:29.259]      // while-condition  =>  TRUE
[17:01:29.259]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.268]      // while "1"  (timeout="200")
[17:01:29.268]      // while-condition  =>  TRUE
[17:01:29.278]      // while "1"  (timeout="200")
[17:01:29.278]      // while  =>  TIMEOUT
[17:01:29.278]      // end while "1"
[17:01:29.278]    </control>
[17:01:29.278]    <control if="canReadPins" while="" timeout="0" info="">
[17:01:29.278]      // if-block "canReadPins"
[17:01:29.278]        // =>  TRUE
[17:01:29.278]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:01:29.278]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:01:29.278]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:01:29.278]        // while-condition  =>  FALSE
[17:01:29.278]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:01:29.278]      </control>
[17:01:29.278]      // end if-block "canReadPins"
[17:01:29.278]    </control>
[17:01:29.278]    <control if="!canReadPins" while="" timeout="0" info="">
[17:01:29.278]      // if-block "!canReadPins"
[17:01:29.278]        // =>  FALSE
[17:01:29.278]      // skip if-block "!canReadPins"
[17:01:29.278]    </control>
[17:01:29.278]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:01:29.278]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:29.278]        // =>  TRUE
[17:01:29.278]      <block atomic="false" info="">
[17:01:29.278]        WriteAP(0x00, 0x190008);
[17:01:29.278]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:29.278]        WriteAP(0xF0, 0x01);
[17:01:29.278]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:29.278]      </block>
[17:01:29.278]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:29.278]    </control>
[17:01:29.278]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:01:29.278]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:29.278]        // =>  FALSE
[17:01:29.278]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:29.288]    </control>
[17:01:29.288]    <block atomic="false" info="">
[17:01:29.288]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:29.288]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[17:01:29.288]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[17:01:29.288]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:29.297]      __ap = 0; //lets make sure we reset the access point selection
[17:01:29.297]        // -> [__ap <= 0x00000000]
[17:01:29.297]    </block>
[17:01:29.297]  </sequence>
[17:01:29.297]  
[17:01:29.308]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:01:29.308]  
[17:01:29.308]  <debugvars>
[17:01:29.308]    // Pre-defined
[17:01:29.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:29.308]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:29.308]    __dp=0x00000000
[17:01:29.308]    __ap=0x00000000
[17:01:29.308]    __traceout=0x00000000      (Trace Disabled)
[17:01:29.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:29.308]    __FlashAddr=0x00000000
[17:01:29.318]    __FlashLen=0x00000000
[17:01:29.318]    __FlashArg=0x00000000
[17:01:29.318]    __FlashOp=0x00000000
[17:01:29.318]    __Result=0x00000000
[17:01:29.318]  </debugvars>
[17:01:29.318]  
[17:01:29.318]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:01:29.318]    <block atomic="false" info="">
[17:01:29.318]      __var deviceID = 0;
[17:01:29.318]        // -> [deviceID <= 0x00000000]
[17:01:29.318]      __var version = 0;
[17:01:29.318]        // -> [version <= 0x00000000]
[17:01:29.318]      __var partNum = 0;
[17:01:29.318]        // -> [partNum <= 0x00000000]
[17:01:29.318]      __var manuf = 0;
[17:01:29.318]        // -> [manuf <= 0x00000000]
[17:01:29.318]      __var isMSPM0G1X0X_G3X0X = 0;
[17:01:29.318]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:01:29.318]      __var isProduction = 0;
[17:01:29.318]        // -> [isProduction <= 0x00000000]
[17:01:29.318]      __var continueId = 0;
[17:01:29.318]        // -> [continueId <= 0x00000000]
[17:01:29.318]      deviceID =   Read32(0x41C40004);
[17:01:29.323]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:01:29.323]        // -> [deviceID <= 0x2BB8802F]
[17:01:29.323]      version = deviceID >> 28;
[17:01:29.323]        // -> [version <= 0x00000002]
[17:01:29.323]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:01:29.323]        // -> [partNum <= 0x0000BB88]
[17:01:29.323]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:01:29.323]        // -> [manuf <= 0x00000017]
[17:01:29.323]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:01:29.323]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:01:29.323]      isProduction = (version > 0);
[17:01:29.323]        // -> [isProduction <= 0x00000001]
[17:01:29.323]    </block>
[17:01:29.323]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:01:29.323]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:01:29.328]        // =>  FALSE
[17:01:29.328]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:01:29.328]    </control>
[17:01:29.328]    <control if="continueId == 4" while="" timeout="0" info="">
[17:01:29.328]      // if-block "continueId == 4"
[17:01:29.328]        // =>  FALSE
[17:01:29.328]      // skip if-block "continueId == 4"
[17:01:29.328]    </control>
[17:01:29.328]    <control if="!isProduction" while="" timeout="0" info="">
[17:01:29.328]      // if-block "!isProduction"
[17:01:29.328]        // =>  FALSE
[17:01:29.328]      // skip if-block "!isProduction"
[17:01:29.328]    </control>
[17:01:29.328]  </sequence>
[17:01:29.328]  
[17:03:46.482]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:03:46.482]  
[17:03:46.490]  <debugvars>
[17:03:46.490]    // Pre-defined
[17:03:46.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:03:46.490]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:03:46.490]    __dp=0x00000000
[17:03:46.490]    __ap=0x00000000
[17:03:46.490]    __traceout=0x00000000      (Trace Disabled)
[17:03:46.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:03:46.490]    __FlashAddr=0x00000000
[17:03:46.490]    __FlashLen=0x00000000
[17:03:46.490]    __FlashArg=0x00000000
[17:03:46.490]    __FlashOp=0x00000000
[17:03:46.490]    __Result=0x00000000
[17:03:46.490]  </debugvars>
[17:03:46.490]  
[17:03:46.490]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:03:46.490]    <block atomic="false" info="">
[17:03:46.490]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:03:46.490]        // -> [isSWJ <= 0x00000001]
[17:03:46.490]      __var hasDormant = __protocol & 0x00020000;
[17:03:46.490]        // -> [hasDormant <= 0x00000000]
[17:03:46.490]      __var protType   = __protocol & 0x0000FFFF;
[17:03:46.490]        // -> [protType <= 0x00000002]
[17:03:46.490]    </block>
[17:03:46.490]    <control if="protType == 1" while="" timeout="0" info="">
[17:03:46.490]      // if-block "protType == 1"
[17:03:46.493]        // =>  FALSE
[17:03:46.493]      // skip if-block "protType == 1"
[17:03:46.493]    </control>
[17:03:46.493]    <control if="protType == 2" while="" timeout="0" info="">
[17:03:46.493]      // if-block "protType == 2"
[17:03:46.493]        // =>  TRUE
[17:03:46.493]      <control if="isSWJ" while="" timeout="0" info="">
[17:03:46.493]        // if-block "isSWJ"
[17:03:46.493]          // =>  TRUE
[17:03:46.493]        <control if="hasDormant" while="" timeout="0" info="">
[17:03:46.493]          // if-block "hasDormant"
[17:03:46.493]            // =>  FALSE
[17:03:46.493]          // skip if-block "hasDormant"
[17:03:46.493]        </control>
[17:03:46.493]        <control if="!hasDormant" while="" timeout="0" info="">
[17:03:46.493]          // if-block "!hasDormant"
[17:03:46.493]            // =>  TRUE
[17:03:46.493]          <block atomic="false" info="">
[17:03:46.493]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:03:46.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:03:46.493]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:03:46.493]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:03:46.493]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:03:46.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:03:46.493]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:03:46.493]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:03:46.493]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:03:46.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:03:46.503]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:03:46.503]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:03:46.503]          </block>
[17:03:46.503]          // end if-block "!hasDormant"
[17:03:46.503]        </control>
[17:03:46.503]        // end if-block "isSWJ"
[17:03:46.503]      </control>
[17:03:46.503]      <control if="!isSWJ" while="" timeout="0" info="">
[17:03:46.503]        // if-block "!isSWJ"
[17:03:46.503]          // =>  FALSE
[17:03:46.503]        // skip if-block "!isSWJ"
[17:03:46.503]      </control>
[17:03:46.503]      <block atomic="false" info="">
[17:03:46.503]        ReadDP(0x0);
[17:03:46.503]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:03:46.503]      </block>
[17:03:46.503]      // end if-block "protType == 2"
[17:03:46.503]    </control>
[17:03:46.503]  </sequence>
[17:03:46.503]  
[17:03:46.503]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:03:46.503]  
[17:03:46.513]  <debugvars>
[17:03:46.513]    // Pre-defined
[17:03:46.513]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:03:46.513]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:03:46.513]    __dp=0x00000000
[17:03:46.513]    __ap=0x00000000
[17:03:46.513]    __traceout=0x00000000      (Trace Disabled)
[17:03:46.513]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:03:46.513]    __FlashAddr=0x00000000
[17:03:46.513]    __FlashLen=0x00000000
[17:03:46.513]    __FlashArg=0x00000000
[17:03:46.513]    __FlashOp=0x00000000
[17:03:46.513]    __Result=0x00000000
[17:03:46.513]  </debugvars>
[17:03:46.513]  
[17:03:46.513]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:03:46.513]    <block atomic="false" info="">
[17:03:46.513]      __var SW_DP_ABORT       = 0x0;
[17:03:46.513]        // -> [SW_DP_ABORT <= 0x00000000]
[17:03:46.513]      __var DP_CTRL_STAT      = 0x4;
[17:03:46.513]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:03:46.513]      __var DP_SELECT         = 0x8;
[17:03:46.513]        // -> [DP_SELECT <= 0x00000008]
[17:03:46.513]      __var powered_down      = 0;
[17:03:46.513]        // -> [powered_down <= 0x00000000]
[17:03:46.513]      WriteDP(DP_SELECT, 0x00000000);
[17:03:46.513]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:03:46.513]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:03:46.513]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:03:46.513]        // -> [powered_down <= 0x00000001]
[17:03:46.513]    </block>
[17:03:46.513]    <control if="powered_down" while="" timeout="0" info="">
[17:03:46.513]      // if-block "powered_down"
[17:03:46.513]        // =>  TRUE
[17:03:46.513]      <block atomic="false" info="">
[17:03:46.513]        Message(0, "Debug/System power-up request sent");
[17:03:46.513]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:03:46.523]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:03:46.523]      </block>
[17:03:46.523]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:03:46.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:03:46.523]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:03:46.523]        // while-condition  =>  FALSE
[17:03:46.523]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:03:46.523]      </control>
[17:03:46.523]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:03:46.523]        // if-block "(__protocol & 0xFFFF) == 1"
[17:03:46.523]          // =>  FALSE
[17:03:46.523]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:03:46.523]      </control>
[17:03:46.523]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:03:46.523]        // if-block "(__protocol & 0xFFFF) == 2"
[17:03:46.523]          // =>  TRUE
[17:03:46.523]        <block atomic="false" info="">
[17:03:46.523]          Message(0, "executing SWD power up");
[17:03:46.523]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:03:46.523]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:03:46.523]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:03:46.523]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:03:46.533]        </block>
[17:03:46.533]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:03:46.533]      </control>
[17:03:46.533]      // end if-block "powered_down"
[17:03:46.533]    </control>
[17:03:46.533]    <block atomic="false" info="">
[17:03:46.533]      __var DEBUG_PORT_VAL    = 0;
[17:03:46.533]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:03:46.533]      __var ACCESS_POINT_VAL  = 0;
[17:03:46.533]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:03:46.533]      __ap = 1; 
[17:03:46.533]        // -> [__ap <= 0x00000001]
[17:03:46.533]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:03:46.533]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:03:46.533]      __ap = 4;
[17:03:46.533]        // -> [__ap <= 0x00000004]
[17:03:46.533]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:03:46.543]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:03:46.543]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:03:46.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:03:46.543]    </block>
[17:03:46.543]    <block atomic="false" info="">
[17:03:46.543]      __var nReset = 0x80;
[17:03:46.543]        // -> [nReset <= 0x00000080]
[17:03:46.543]      __var canReadPins = 0;
[17:03:46.543]        // -> [canReadPins <= 0x00000000]
[17:03:46.543]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:03:46.543]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:03:46.543]        // -> [canReadPins <= 0x00000001]
[17:03:46.543]    </block>
[17:03:46.543]    <control if="" while="1" timeout="200" info="">
[17:03:46.543]      // while "1"  (timeout="200")
[17:03:46.543]      // while-condition  =>  TRUE
[17:03:46.543]      // while "1"  (timeout="200")
[17:03:46.543]      // while-condition  =>  TRUE
[17:03:46.543]      // while "1"  (timeout="200")
[17:03:46.543]      // while-condition  =>  TRUE
[17:03:46.543]      // while "1"  (timeout="200")
[17:03:46.543]      // while-condition  =>  TRUE
[17:03:46.543]      // while "1"  (timeout="200")
[17:03:46.543]      // while-condition  =>  TRUE
[17:03:46.543]      // while "1"  (timeout="200")
[17:03:46.543]      // while-condition  =>  TRUE
[17:03:46.553]      // while "1"  (timeout="200")
[17:03:46.553]      // while  =>  TIMEOUT
[17:03:46.553]      // end while "1"
[17:03:46.553]    </control>
[17:03:46.553]    <control if="canReadPins" while="" timeout="0" info="">
[17:03:46.553]      // if-block "canReadPins"
[17:03:46.553]        // =>  TRUE
[17:03:46.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:03:46.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:03:46.553]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:03:46.553]        // while-condition  =>  FALSE
[17:03:46.553]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:03:46.553]      </control>
[17:03:46.553]      // end if-block "canReadPins"
[17:03:46.553]    </control>
[17:03:46.553]    <control if="!canReadPins" while="" timeout="0" info="">
[17:03:46.553]      // if-block "!canReadPins"
[17:03:46.553]        // =>  FALSE
[17:03:46.553]      // skip if-block "!canReadPins"
[17:03:46.553]    </control>
[17:03:46.553]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:03:46.553]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:03:46.553]        // =>  TRUE
[17:03:46.553]      <block atomic="false" info="">
[17:03:46.553]        WriteAP(0x00, 0x190008);
[17:03:46.553]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:03:46.553]        WriteAP(0xF0, 0x01);
[17:03:46.563]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:03:46.563]      </block>
[17:03:46.573]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:03:46.573]    </control>
[17:03:46.573]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:03:46.573]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:03:46.573]        // =>  FALSE
[17:03:46.573]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:03:46.573]    </control>
[17:03:46.573]    <block atomic="false" info="">
[17:03:46.573]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:03:46.573]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:03:46.573]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:03:46.573]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:03:46.583]      __ap = 0; //lets make sure we reset the access point selection
[17:03:46.583]        // -> [__ap <= 0x00000000]
[17:03:46.583]    </block>
[17:03:46.583]  </sequence>
[17:03:46.583]  
[17:03:46.623]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:03:46.623]  
[17:03:46.623]  <debugvars>
[17:03:46.623]    // Pre-defined
[17:03:46.623]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:03:46.623]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:03:46.623]    __dp=0x00000000
[17:03:46.623]    __ap=0x00000000
[17:03:46.623]    __traceout=0x00000000      (Trace Disabled)
[17:03:46.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:03:46.623]    __FlashAddr=0x00000000
[17:03:46.623]    __FlashLen=0x00000000
[17:03:46.623]    __FlashArg=0x00000000
[17:03:46.623]    __FlashOp=0x00000000
[17:03:46.623]    __Result=0x00000000
[17:03:46.623]  </debugvars>
[17:03:46.623]  
[17:03:46.623]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:03:46.623]    <block atomic="false" info="">
[17:03:46.623]      __var deviceID = 0;
[17:03:46.623]        // -> [deviceID <= 0x00000000]
[17:03:46.623]      __var version = 0;
[17:03:46.623]        // -> [version <= 0x00000000]
[17:03:46.623]      __var partNum = 0;
[17:03:46.623]        // -> [partNum <= 0x00000000]
[17:03:46.623]      __var manuf = 0;
[17:03:46.623]        // -> [manuf <= 0x00000000]
[17:03:46.623]      __var isMSPM0G1X0X_G3X0X = 0;
[17:03:46.623]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:03:46.623]      __var isProduction = 0;
[17:03:46.623]        // -> [isProduction <= 0x00000000]
[17:03:46.623]      __var continueId = 0;
[17:03:46.623]        // -> [continueId <= 0x00000000]
[17:03:46.623]      deviceID =   Read32(0x41C40004);
[17:03:46.633]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:03:46.633]        // -> [deviceID <= 0x2BB8802F]
[17:03:46.633]      version = deviceID >> 28;
[17:03:46.633]        // -> [version <= 0x00000002]
[17:03:46.633]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:03:46.633]        // -> [partNum <= 0x0000BB88]
[17:03:46.633]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:03:46.633]        // -> [manuf <= 0x00000017]
[17:03:46.633]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:03:46.633]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:03:46.633]      isProduction = (version > 0);
[17:03:46.633]        // -> [isProduction <= 0x00000001]
[17:03:46.633]    </block>
[17:03:46.633]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:03:46.633]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:03:46.633]        // =>  FALSE
[17:03:46.633]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:03:46.633]    </control>
[17:03:46.633]    <control if="continueId == 4" while="" timeout="0" info="">
[17:03:46.633]      // if-block "continueId == 4"
[17:03:46.633]        // =>  FALSE
[17:03:46.633]      // skip if-block "continueId == 4"
[17:03:46.633]    </control>
[17:03:46.633]    <control if="!isProduction" while="" timeout="0" info="">
[17:03:46.633]      // if-block "!isProduction"
[17:03:46.633]        // =>  FALSE
[17:03:46.633]      // skip if-block "!isProduction"
[17:03:46.633]    </control>
[17:03:46.633]  </sequence>
[17:03:46.633]  
