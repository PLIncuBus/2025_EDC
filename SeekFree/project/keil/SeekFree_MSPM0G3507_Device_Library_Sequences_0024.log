/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\CAO\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0024.log
 *  Created     : 02:52:39 (03/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[02:52:39.805]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:52:39.805]  
[02:52:39.805]  <debugvars>
[02:52:39.805]    // Pre-defined
[02:52:39.806]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:52:39.806]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:52:39.806]    __dp=0x00000000
[02:52:39.806]    __ap=0x00000000
[02:52:39.806]    __traceout=0x00000000      (Trace Disabled)
[02:52:39.806]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:52:39.806]    __FlashAddr=0x00000000
[02:52:39.806]    __FlashLen=0x00000000
[02:52:39.806]    __FlashArg=0x00000000
[02:52:39.806]    __FlashOp=0x00000000
[02:52:39.807]    __Result=0x00000000
[02:52:39.807]  </debugvars>
[02:52:39.807]  
[02:52:39.807]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:52:39.807]    <block atomic="false" info="">
[02:52:39.807]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:52:39.807]        // -> [isSWJ <= 0x00000001]
[02:52:39.807]      __var hasDormant = __protocol & 0x00020000;
[02:52:39.807]        // -> [hasDormant <= 0x00000000]
[02:52:39.807]      __var protType   = __protocol & 0x0000FFFF;
[02:52:39.807]        // -> [protType <= 0x00000002]
[02:52:39.807]    </block>
[02:52:39.807]    <control if="protType == 1" while="" timeout="0" info="">
[02:52:39.807]      // if-block "protType == 1"
[02:52:39.809]        // =>  FALSE
[02:52:39.809]      // skip if-block "protType == 1"
[02:52:39.809]    </control>
[02:52:39.809]    <control if="protType == 2" while="" timeout="0" info="">
[02:52:39.809]      // if-block "protType == 2"
[02:52:39.809]        // =>  TRUE
[02:52:39.809]      <control if="isSWJ" while="" timeout="0" info="">
[02:52:39.809]        // if-block "isSWJ"
[02:52:39.810]          // =>  TRUE
[02:52:39.810]        <control if="hasDormant" while="" timeout="0" info="">
[02:52:39.810]          // if-block "hasDormant"
[02:52:39.810]            // =>  FALSE
[02:52:39.810]          // skip if-block "hasDormant"
[02:52:39.810]        </control>
[02:52:39.810]        <control if="!hasDormant" while="" timeout="0" info="">
[02:52:39.810]          // if-block "!hasDormant"
[02:52:39.811]            // =>  TRUE
[02:52:39.811]          <block atomic="false" info="">
[02:52:39.811]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:52:39.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:52:39.814]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:52:39.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:52:39.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:52:39.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:52:39.820]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:52:39.823]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:52:39.824]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:52:39.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:52:39.829]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:52:39.830]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:52:39.831]          </block>
[02:52:39.831]          // end if-block "!hasDormant"
[02:52:39.831]        </control>
[02:52:39.831]        // end if-block "isSWJ"
[02:52:39.831]      </control>
[02:52:39.831]      <control if="!isSWJ" while="" timeout="0" info="">
[02:52:39.831]        // if-block "!isSWJ"
[02:52:39.831]          // =>  FALSE
[02:52:39.832]        // skip if-block "!isSWJ"
[02:52:39.832]      </control>
[02:52:39.832]      <block atomic="false" info="">
[02:52:39.832]        ReadDP(0x0);
[02:52:39.833]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:52:39.833]      </block>
[02:52:39.833]      // end if-block "protType == 2"
[02:52:39.833]    </control>
[02:52:39.833]  </sequence>
[02:52:39.833]  
[02:52:39.837]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:52:39.837]  
[02:52:39.837]  <debugvars>
[02:52:39.837]    // Pre-defined
[02:52:39.837]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:52:39.837]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:52:39.837]    __dp=0x00000000
[02:52:39.838]    __ap=0x00000000
[02:52:39.838]    __traceout=0x00000000      (Trace Disabled)
[02:52:39.838]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:52:39.838]    __FlashAddr=0x00000000
[02:52:39.838]    __FlashLen=0x00000000
[02:52:39.838]    __FlashArg=0x00000000
[02:52:39.838]    __FlashOp=0x00000000
[02:52:39.838]    __Result=0x00000000
[02:52:39.838]  </debugvars>
[02:52:39.839]  
[02:52:39.839]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:52:39.839]    <block atomic="false" info="">
[02:52:39.839]      __var SW_DP_ABORT       = 0x0;
[02:52:39.839]        // -> [SW_DP_ABORT <= 0x00000000]
[02:52:39.839]      __var DP_CTRL_STAT      = 0x4;
[02:52:39.839]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:52:39.840]      __var DP_SELECT         = 0x8;
[02:52:39.840]        // -> [DP_SELECT <= 0x00000008]
[02:52:39.840]      __var powered_down      = 0;
[02:52:39.840]        // -> [powered_down <= 0x00000000]
[02:52:39.840]      WriteDP(DP_SELECT, 0x00000000);
[02:52:39.841]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:52:39.841]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:52:39.843]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:52:39.843]        // -> [powered_down <= 0x00000001]
[02:52:39.843]    </block>
[02:52:39.843]    <control if="powered_down" while="" timeout="0" info="">
[02:52:39.843]      // if-block "powered_down"
[02:52:39.843]        // =>  TRUE
[02:52:39.843]      <block atomic="false" info="">
[02:52:39.843]        Message(0, "Debug/System power-up request sent");
[02:52:39.845]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:52:39.846]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:52:39.846]      </block>
[02:52:39.846]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:52:39.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:52:39.850]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:52:39.850]        // while-condition  =>  FALSE
[02:52:39.850]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:52:39.851]      </control>
[02:52:39.851]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:52:39.851]        // if-block "(__protocol & 0xFFFF) == 1"
[02:52:39.851]          // =>  FALSE
[02:52:39.851]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:52:39.851]      </control>
[02:52:39.851]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:52:39.851]        // if-block "(__protocol & 0xFFFF) == 2"
[02:52:39.851]          // =>  TRUE
[02:52:39.851]        <block atomic="false" info="">
[02:52:39.852]          Message(0, "executing SWD power up");
[02:52:39.852]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:52:39.853]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:52:39.853]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:52:39.855]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:52:39.856]        </block>
[02:52:39.856]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:52:39.856]      </control>
[02:52:39.856]      // end if-block "powered_down"
[02:52:39.856]    </control>
[02:52:39.856]    <block atomic="false" info="">
[02:52:39.856]      __var DEBUG_PORT_VAL    = 0;
[02:52:39.856]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:52:39.856]      __var ACCESS_POINT_VAL  = 0;
[02:52:39.856]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:52:39.856]      __ap = 1; 
[02:52:39.857]        // -> [__ap <= 0x00000001]
[02:52:39.857]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:52:39.860]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:52:39.860]      __ap = 4;
[02:52:39.860]        // -> [__ap <= 0x00000004]
[02:52:39.860]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:52:39.866]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:52:39.866]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:52:39.866]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:52:39.866]    </block>
[02:52:39.866]    <block atomic="false" info="">
[02:52:39.866]      __var nReset = 0x80;
[02:52:39.866]        // -> [nReset <= 0x00000080]
[02:52:39.866]      __var canReadPins = 0;
[02:52:39.866]        // -> [canReadPins <= 0x00000000]
[02:52:39.868]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:52:39.869]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:52:39.869]        // -> [canReadPins <= 0x00000001]
[02:52:39.869]    </block>
[02:52:39.869]    <control if="" while="1" timeout="200" info="">
[02:52:39.869]      // while "1"  (timeout="200")
[02:52:39.869]      // while-condition  =>  TRUE
[02:52:39.869]      // while "1"  (timeout="200")
[02:52:39.869]      // while-condition  =>  TRUE
[02:52:39.869]      // while "1"  (timeout="200")
[02:52:39.869]      // while-condition  =>  TRUE
[02:52:39.869]      // while "1"  (timeout="200")
[02:52:39.869]      // while-condition  =>  TRUE
[02:52:39.870]      // while "1"  (timeout="200")
[02:52:39.870]      // while-condition  =>  TRUE
[02:52:39.870]      // while "1"  (timeout="200")
[02:52:39.870]      // while-condition  =>  TRUE
[02:52:39.870]      // while "1"  (timeout="200")
[02:52:39.870]      // while-condition  =>  TRUE
[02:52:39.870]      // while "1"  (timeout="200")
[02:52:39.870]      // while-condition  =>  TRUE
[02:52:39.870]      // while "1"  (timeout="200")
[02:52:39.870]      // while-condition  =>  TRUE
[02:52:39.871]      // while "1"  (timeout="200")
[02:52:39.871]      // while-condition  =>  TRUE
[02:52:39.871]      // while "1"  (timeout="200")
[02:52:39.871]      // while-condition  =>  TRUE
[02:52:39.871]      // while "1"  (timeout="200")
[02:52:39.871]      // while-condition  =>  TRUE
[02:52:39.871]      // while "1"  (timeout="200")
[02:52:39.871]      // while-condition  =>  TRUE
[02:52:39.871]      // while "1"  (timeout="200")
[02:52:39.871]      // while-condition  =>  TRUE
[02:52:39.872]      // while "1"  (timeout="200")
[02:52:39.872]      // while-condition  =>  TRUE
[02:52:39.872]      // while "1"  (timeout="200")
[02:52:39.872]      // while-condition  =>  TRUE
[02:52:39.872]      // while "1"  (timeout="200")
[02:52:39.872]      // while-condition  =>  TRUE
[02:52:39.872]      // while "1"  (timeout="200")
[02:52:39.872]      // while-condition  =>  TRUE
[02:52:39.872]      // while "1"  (timeout="200")
[02:52:39.872]      // while-condition  =>  TRUE
[02:52:39.873]      // while "1"  (timeout="200")
[02:52:39.873]      // while-condition  =>  TRUE
[02:52:39.873]      // while "1"  (timeout="200")
[02:52:39.873]      // while-condition  =>  TRUE
[02:52:39.873]      // while "1"  (timeout="200")
[02:52:39.873]      // while-condition  =>  TRUE
[02:52:39.873]      // while "1"  (timeout="200")
[02:52:39.873]      // while-condition  =>  TRUE
[02:52:39.873]      // while "1"  (timeout="200")
[02:52:39.873]      // while-condition  =>  TRUE
[02:52:39.873]      // while "1"  (timeout="200")
[02:52:39.873]      // while-condition  =>  TRUE
[02:52:39.874]      // while "1"  (timeout="200")
[02:52:39.874]      // while-condition  =>  TRUE
[02:52:39.875]      // while "1"  (timeout="200")
[02:52:39.875]      // while-condition  =>  TRUE
[02:52:39.875]      // while "1"  (timeout="200")
[02:52:39.875]      // while-condition  =>  TRUE
[02:52:39.875]      // while "1"  (timeout="200")
[02:52:39.875]      // while-condition  =>  TRUE
[02:52:39.875]      // while "1"  (timeout="200")
[02:52:39.875]      // while-condition  =>  TRUE
[02:52:39.875]      // while "1"  (timeout="200")
[02:52:39.875]      // while-condition  =>  TRUE
[02:52:39.875]      // while "1"  (timeout="200")
[02:52:39.875]      // while-condition  =>  TRUE
[02:52:39.876]      // while "1"  (timeout="200")
[02:52:39.876]      // while-condition  =>  TRUE
[02:52:39.876]      // while "1"  (timeout="200")
[02:52:39.876]      // while-condition  =>  TRUE
[02:52:39.876]      // while "1"  (timeout="200")
[02:52:39.876]      // while-condition  =>  TRUE
[02:52:39.876]      // while "1"  (timeout="200")
[02:52:39.876]      // while-condition  =>  TRUE
[02:52:39.876]      // while "1"  (timeout="200")
[02:52:39.876]      // while-condition  =>  TRUE
[02:52:39.876]      // while "1"  (timeout="200")
[02:52:39.877]      // while-condition  =>  TRUE
[02:52:39.877]      // while "1"  (timeout="200")
[02:52:39.877]      // while  =>  TIMEOUT
[02:52:39.877]      // end while "1"
[02:52:39.877]    </control>
[02:52:39.877]    <control if="canReadPins" while="" timeout="0" info="">
[02:52:39.877]      // if-block "canReadPins"
[02:52:39.877]        // =>  TRUE
[02:52:39.877]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:52:39.877]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:52:39.879]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:52:39.879]        // while-condition  =>  FALSE
[02:52:39.879]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:52:39.879]      </control>
[02:52:39.879]      // end if-block "canReadPins"
[02:52:39.880]    </control>
[02:52:39.880]    <control if="!canReadPins" while="" timeout="0" info="">
[02:52:39.880]      // if-block "!canReadPins"
[02:52:39.880]        // =>  FALSE
[02:52:39.880]      // skip if-block "!canReadPins"
[02:52:39.880]    </control>
[02:52:39.880]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:52:39.880]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:52:39.881]        // =>  TRUE
[02:52:39.881]      <block atomic="false" info="">
[02:52:39.881]        WriteAP(0x00, 0x190008);
[02:52:39.884]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:52:39.884]        WriteAP(0xF0, 0x01);
[02:52:39.911]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:52:39.911]      </block>
[02:52:39.911]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:52:39.911]    </control>
[02:52:39.911]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:52:39.911]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:52:39.912]        // =>  FALSE
[02:52:39.912]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:52:39.912]    </control>
[02:52:39.912]    <block atomic="false" info="">
[02:52:39.912]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:52:39.922]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:52:39.922]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:52:39.923]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:52:39.923]      __ap = 0; //lets make sure we reset the access point selection
[02:52:39.923]        // -> [__ap <= 0x00000000]
[02:52:39.923]    </block>
[02:52:39.923]  </sequence>
[02:52:39.923]  
[02:52:39.974]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:52:39.974]  
[02:52:39.974]  <debugvars>
[02:52:39.974]    // Pre-defined
[02:52:39.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:52:39.974]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:52:39.974]    __dp=0x00000000
[02:52:39.975]    __ap=0x00000000
[02:52:39.975]    __traceout=0x00000000      (Trace Disabled)
[02:52:39.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:52:39.975]    __FlashAddr=0x00000000
[02:52:39.975]    __FlashLen=0x00000000
[02:52:39.975]    __FlashArg=0x00000000
[02:52:39.975]    __FlashOp=0x00000000
[02:52:39.975]    __Result=0x00000000
[02:52:39.975]  </debugvars>
[02:52:39.975]  
[02:52:39.975]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:52:39.975]    <block atomic="false" info="">
[02:52:39.976]      __var deviceID = 0;
[02:52:39.976]        // -> [deviceID <= 0x00000000]
[02:52:39.976]      __var version = 0;
[02:52:39.976]        // -> [version <= 0x00000000]
[02:52:39.976]      __var partNum = 0;
[02:52:39.976]        // -> [partNum <= 0x00000000]
[02:52:39.977]      __var manuf = 0;
[02:52:39.977]        // -> [manuf <= 0x00000000]
[02:52:39.977]      __var isMSPM0G1X0X_G3X0X = 0;
[02:52:39.977]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:52:39.977]      __var isProduction = 0;
[02:52:39.977]        // -> [isProduction <= 0x00000000]
[02:52:39.977]      __var continueId = 0;
[02:52:39.977]        // -> [continueId <= 0x00000000]
[02:52:39.977]      deviceID =   Read32(0x41C40004);
[02:52:39.983]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:52:39.983]        // -> [deviceID <= 0x2BB8802F]
[02:52:39.983]      version = deviceID >> 28;
[02:52:39.983]        // -> [version <= 0x00000002]
[02:52:39.983]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:52:39.983]        // -> [partNum <= 0x0000BB88]
[02:52:39.983]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:52:39.983]        // -> [manuf <= 0x00000017]
[02:52:39.983]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:52:39.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:52:39.983]      isProduction = (version > 0);
[02:52:39.983]        // -> [isProduction <= 0x00000001]
[02:52:39.983]    </block>
[02:52:39.984]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:52:39.984]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:52:39.984]        // =>  FALSE
[02:52:39.984]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:52:39.984]    </control>
[02:52:39.984]    <control if="continueId == 4" while="" timeout="0" info="">
[02:52:39.984]      // if-block "continueId == 4"
[02:52:39.984]        // =>  FALSE
[02:52:39.984]      // skip if-block "continueId == 4"
[02:52:39.984]    </control>
[02:52:39.984]    <control if="!isProduction" while="" timeout="0" info="">
[02:52:39.984]      // if-block "!isProduction"
[02:52:39.985]        // =>  FALSE
[02:52:39.985]      // skip if-block "!isProduction"
[02:52:39.985]    </control>
[02:52:39.985]  </sequence>
[02:52:39.985]  
[02:54:15.208]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:54:15.208]  
[02:54:15.217]  <debugvars>
[02:54:15.217]    // Pre-defined
[02:54:15.217]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:15.217]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:15.217]    __dp=0x00000000
[02:54:15.217]    __ap=0x00000000
[02:54:15.217]    __traceout=0x00000000      (Trace Disabled)
[02:54:15.217]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:15.218]    __FlashAddr=0x00000000
[02:54:15.218]    __FlashLen=0x00000000
[02:54:15.218]    __FlashArg=0x00000000
[02:54:15.218]    __FlashOp=0x00000000
[02:54:15.218]    __Result=0x00000000
[02:54:15.218]  </debugvars>
[02:54:15.218]  
[02:54:15.218]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:54:15.218]    <block atomic="false" info="">
[02:54:15.218]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:54:15.218]        // -> [isSWJ <= 0x00000001]
[02:54:15.219]      __var hasDormant = __protocol & 0x00020000;
[02:54:15.219]        // -> [hasDormant <= 0x00000000]
[02:54:15.219]      __var protType   = __protocol & 0x0000FFFF;
[02:54:15.219]        // -> [protType <= 0x00000002]
[02:54:15.219]    </block>
[02:54:15.219]    <control if="protType == 1" while="" timeout="0" info="">
[02:54:15.219]      // if-block "protType == 1"
[02:54:15.219]        // =>  FALSE
[02:54:15.219]      // skip if-block "protType == 1"
[02:54:15.219]    </control>
[02:54:15.219]    <control if="protType == 2" while="" timeout="0" info="">
[02:54:15.219]      // if-block "protType == 2"
[02:54:15.219]        // =>  TRUE
[02:54:15.219]      <control if="isSWJ" while="" timeout="0" info="">
[02:54:15.219]        // if-block "isSWJ"
[02:54:15.220]          // =>  TRUE
[02:54:15.220]        <control if="hasDormant" while="" timeout="0" info="">
[02:54:15.220]          // if-block "hasDormant"
[02:54:15.220]            // =>  FALSE
[02:54:15.220]          // skip if-block "hasDormant"
[02:54:15.220]        </control>
[02:54:15.220]        <control if="!hasDormant" while="" timeout="0" info="">
[02:54:15.220]          // if-block "!hasDormant"
[02:54:15.220]            // =>  TRUE
[02:54:15.220]          <block atomic="false" info="">
[02:54:15.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:54:15.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:15.224]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:54:15.236]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:54:15.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:54:15.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:15.238]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:54:15.240]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:54:15.240]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:54:15.249]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:15.249]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:54:15.251]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:54:15.251]          </block>
[02:54:15.251]          // end if-block "!hasDormant"
[02:54:15.251]        </control>
[02:54:15.251]        // end if-block "isSWJ"
[02:54:15.251]      </control>
[02:54:15.251]      <control if="!isSWJ" while="" timeout="0" info="">
[02:54:15.251]        // if-block "!isSWJ"
[02:54:15.251]          // =>  FALSE
[02:54:15.251]        // skip if-block "!isSWJ"
[02:54:15.252]      </control>
[02:54:15.252]      <block atomic="false" info="">
[02:54:15.252]        ReadDP(0x0);
[02:54:15.253]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:54:15.253]      </block>
[02:54:15.253]      // end if-block "protType == 2"
[02:54:15.254]    </control>
[02:54:15.254]  </sequence>
[02:54:15.254]  
[02:54:15.259]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:54:15.259]  
[02:54:15.259]  <debugvars>
[02:54:15.259]    // Pre-defined
[02:54:15.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:15.259]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:15.260]    __dp=0x00000000
[02:54:15.260]    __ap=0x00000000
[02:54:15.260]    __traceout=0x00000000      (Trace Disabled)
[02:54:15.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:15.260]    __FlashAddr=0x00000000
[02:54:15.260]    __FlashLen=0x00000000
[02:54:15.260]    __FlashArg=0x00000000
[02:54:15.260]    __FlashOp=0x00000000
[02:54:15.260]    __Result=0x00000000
[02:54:15.260]  </debugvars>
[02:54:15.261]  
[02:54:15.261]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:54:15.261]    <block atomic="false" info="">
[02:54:15.261]      __var SW_DP_ABORT       = 0x0;
[02:54:15.261]        // -> [SW_DP_ABORT <= 0x00000000]
[02:54:15.261]      __var DP_CTRL_STAT      = 0x4;
[02:54:15.261]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:54:15.261]      __var DP_SELECT         = 0x8;
[02:54:15.261]        // -> [DP_SELECT <= 0x00000008]
[02:54:15.261]      __var powered_down      = 0;
[02:54:15.261]        // -> [powered_down <= 0x00000000]
[02:54:15.262]      WriteDP(DP_SELECT, 0x00000000);
[02:54:15.267]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:54:15.267]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:54:15.269]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:54:15.269]        // -> [powered_down <= 0x00000001]
[02:54:15.270]    </block>
[02:54:15.270]    <control if="powered_down" while="" timeout="0" info="">
[02:54:15.270]      // if-block "powered_down"
[02:54:15.270]        // =>  TRUE
[02:54:15.270]      <block atomic="false" info="">
[02:54:15.270]        Message(0, "Debug/System power-up request sent");
[02:54:15.270]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:54:15.274]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:54:15.274]      </block>
[02:54:15.275]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:54:15.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:54:15.277]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:54:15.277]        // while-condition  =>  FALSE
[02:54:15.278]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:54:15.278]      </control>
[02:54:15.278]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:54:15.278]        // if-block "(__protocol & 0xFFFF) == 1"
[02:54:15.278]          // =>  FALSE
[02:54:15.278]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:54:15.278]      </control>
[02:54:15.278]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:54:15.279]        // if-block "(__protocol & 0xFFFF) == 2"
[02:54:15.279]          // =>  TRUE
[02:54:15.279]        <block atomic="false" info="">
[02:54:15.279]          Message(0, "executing SWD power up");
[02:54:15.279]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:54:15.281]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:54:15.281]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:54:15.283]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:54:15.283]        </block>
[02:54:15.283]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:54:15.283]      </control>
[02:54:15.283]      // end if-block "powered_down"
[02:54:15.283]    </control>
[02:54:15.284]    <block atomic="false" info="">
[02:54:15.284]      __var DEBUG_PORT_VAL    = 0;
[02:54:15.284]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:54:15.284]      __var ACCESS_POINT_VAL  = 0;
[02:54:15.284]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:54:15.284]      __ap = 1; 
[02:54:15.284]        // -> [__ap <= 0x00000001]
[02:54:15.284]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:54:15.289]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:54:15.289]      __ap = 4;
[02:54:15.289]        // -> [__ap <= 0x00000004]
[02:54:15.289]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:15.293]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.293]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:54:15.293]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:15.293]    </block>
[02:54:15.293]    <block atomic="false" info="">
[02:54:15.293]      __var nReset = 0x80;
[02:54:15.293]        // -> [nReset <= 0x00000080]
[02:54:15.293]      __var canReadPins = 0;
[02:54:15.293]        // -> [canReadPins <= 0x00000000]
[02:54:15.293]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:54:15.296]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:54:15.296]        // -> [canReadPins <= 0x00000001]
[02:54:15.296]    </block>
[02:54:15.296]    <control if="" while="1" timeout="200" info="">
[02:54:15.296]      // while "1"  (timeout="200")
[02:54:15.297]      // while-condition  =>  TRUE
[02:54:15.297]      // while "1"  (timeout="200")
[02:54:15.297]      // while-condition  =>  TRUE
[02:54:15.297]      // while "1"  (timeout="200")
[02:54:15.297]      // while-condition  =>  TRUE
[02:54:15.297]      // while "1"  (timeout="200")
[02:54:15.297]      // while-condition  =>  TRUE
[02:54:15.297]      // while "1"  (timeout="200")
[02:54:15.297]      // while-condition  =>  TRUE
[02:54:15.297]      // while "1"  (timeout="200")
[02:54:15.297]      // while-condition  =>  TRUE
[02:54:15.298]      // while "1"  (timeout="200")
[02:54:15.298]      // while  =>  TIMEOUT
[02:54:15.298]      // end while "1"
[02:54:15.298]    </control>
[02:54:15.298]    <control if="canReadPins" while="" timeout="0" info="">
[02:54:15.298]      // if-block "canReadPins"
[02:54:15.298]        // =>  TRUE
[02:54:15.298]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:54:15.298]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:54:15.305]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:54:15.305]        // while-condition  =>  FALSE
[02:54:15.305]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:54:15.305]      </control>
[02:54:15.306]      // end if-block "canReadPins"
[02:54:15.306]    </control>
[02:54:15.306]    <control if="!canReadPins" while="" timeout="0" info="">
[02:54:15.306]      // if-block "!canReadPins"
[02:54:15.306]        // =>  FALSE
[02:54:15.306]      // skip if-block "!canReadPins"
[02:54:15.306]    </control>
[02:54:15.306]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:54:15.306]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:15.307]        // =>  TRUE
[02:54:15.307]      <block atomic="false" info="">
[02:54:15.307]        WriteAP(0x00, 0x190008);
[02:54:15.308]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.308]        WriteAP(0xF0, 0x01);
[02:54:15.312]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.312]      </block>
[02:54:15.312]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:15.312]    </control>
[02:54:15.312]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:54:15.312]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:15.313]        // =>  FALSE
[02:54:15.313]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:15.313]    </control>
[02:54:15.313]    <block atomic="false" info="">
[02:54:15.313]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:15.317]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.317]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:54:15.317]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:15.317]      __ap = 0; //lets make sure we reset the access point selection
[02:54:15.318]        // -> [__ap <= 0x00000000]
[02:54:15.318]    </block>
[02:54:15.318]  </sequence>
[02:54:15.318]  
[02:54:15.353]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:54:15.353]  
[02:54:15.353]  <debugvars>
[02:54:15.353]    // Pre-defined
[02:54:15.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:15.353]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:15.354]    __dp=0x00000000
[02:54:15.354]    __ap=0x00000000
[02:54:15.354]    __traceout=0x00000000      (Trace Disabled)
[02:54:15.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:15.354]    __FlashAddr=0x00000000
[02:54:15.354]    __FlashLen=0x00000000
[02:54:15.354]    __FlashArg=0x00000000
[02:54:15.354]    __FlashOp=0x00000000
[02:54:15.354]    __Result=0x00000000
[02:54:15.355]  </debugvars>
[02:54:15.355]  
[02:54:15.355]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:54:15.355]    <block atomic="false" info="">
[02:54:15.355]      __var deviceID = 0;
[02:54:15.355]        // -> [deviceID <= 0x00000000]
[02:54:15.355]      __var version = 0;
[02:54:15.355]        // -> [version <= 0x00000000]
[02:54:15.355]      __var partNum = 0;
[02:54:15.355]        // -> [partNum <= 0x00000000]
[02:54:15.355]      __var manuf = 0;
[02:54:15.355]        // -> [manuf <= 0x00000000]
[02:54:15.356]      __var isMSPM0G1X0X_G3X0X = 0;
[02:54:15.356]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:54:15.356]      __var isProduction = 0;
[02:54:15.356]        // -> [isProduction <= 0x00000000]
[02:54:15.356]      __var continueId = 0;
[02:54:15.356]        // -> [continueId <= 0x00000000]
[02:54:15.356]      deviceID =   Read32(0x41C40004);
[02:54:15.374]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:54:15.375]        // -> [deviceID <= 0x2BB8802F]
[02:54:15.375]      version = deviceID >> 28;
[02:54:15.375]        // -> [version <= 0x00000002]
[02:54:15.375]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:54:15.375]        // -> [partNum <= 0x0000BB88]
[02:54:15.375]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:54:15.375]        // -> [manuf <= 0x00000017]
[02:54:15.375]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:54:15.375]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:54:15.375]      isProduction = (version > 0);
[02:54:15.376]        // -> [isProduction <= 0x00000001]
[02:54:15.376]    </block>
[02:54:15.376]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:54:15.376]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:54:15.376]        // =>  FALSE
[02:54:15.376]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:54:15.376]    </control>
[02:54:15.376]    <control if="continueId == 4" while="" timeout="0" info="">
[02:54:15.377]      // if-block "continueId == 4"
[02:54:15.377]        // =>  FALSE
[02:54:15.377]      // skip if-block "continueId == 4"
[02:54:15.377]    </control>
[02:54:15.377]    <control if="!isProduction" while="" timeout="0" info="">
[02:54:15.377]      // if-block "!isProduction"
[02:54:15.377]        // =>  FALSE
[02:54:15.377]      // skip if-block "!isProduction"
[02:54:15.377]    </control>
[02:54:15.377]  </sequence>
[02:54:15.377]  
[02:56:44.494]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:56:44.494]  
[02:56:44.504]  <debugvars>
[02:56:44.504]    // Pre-defined
[02:56:44.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:44.504]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:44.504]    __dp=0x00000000
[02:56:44.504]    __ap=0x00000000
[02:56:44.505]    __traceout=0x00000000      (Trace Disabled)
[02:56:44.505]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:44.505]    __FlashAddr=0x00000000
[02:56:44.505]    __FlashLen=0x00000000
[02:56:44.505]    __FlashArg=0x00000000
[02:56:44.505]    __FlashOp=0x00000000
[02:56:44.505]    __Result=0x00000000
[02:56:44.505]  </debugvars>
[02:56:44.505]  
[02:56:44.505]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:56:44.506]    <block atomic="false" info="">
[02:56:44.506]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:56:44.506]        // -> [isSWJ <= 0x00000001]
[02:56:44.506]      __var hasDormant = __protocol & 0x00020000;
[02:56:44.506]        // -> [hasDormant <= 0x00000000]
[02:56:44.506]      __var protType   = __protocol & 0x0000FFFF;
[02:56:44.506]        // -> [protType <= 0x00000002]
[02:56:44.506]    </block>
[02:56:44.506]    <control if="protType == 1" while="" timeout="0" info="">
[02:56:44.507]      // if-block "protType == 1"
[02:56:44.507]        // =>  FALSE
[02:56:44.507]      // skip if-block "protType == 1"
[02:56:44.507]    </control>
[02:56:44.507]    <control if="protType == 2" while="" timeout="0" info="">
[02:56:44.507]      // if-block "protType == 2"
[02:56:44.507]        // =>  TRUE
[02:56:44.507]      <control if="isSWJ" while="" timeout="0" info="">
[02:56:44.507]        // if-block "isSWJ"
[02:56:44.508]          // =>  TRUE
[02:56:44.508]        <control if="hasDormant" while="" timeout="0" info="">
[02:56:44.508]          // if-block "hasDormant"
[02:56:44.508]            // =>  FALSE
[02:56:44.508]          // skip if-block "hasDormant"
[02:56:44.508]        </control>
[02:56:44.508]        <control if="!hasDormant" while="" timeout="0" info="">
[02:56:44.509]          // if-block "!hasDormant"
[02:56:44.509]            // =>  TRUE
[02:56:44.509]          <block atomic="false" info="">
[02:56:44.509]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:56:44.511]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:44.511]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:56:44.512]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:56:44.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:56:44.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:44.514]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:56:44.515]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:56:44.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:56:44.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:44.518]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:56:44.519]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:56:44.519]          </block>
[02:56:44.520]          // end if-block "!hasDormant"
[02:56:44.520]        </control>
[02:56:44.520]        // end if-block "isSWJ"
[02:56:44.520]      </control>
[02:56:44.520]      <control if="!isSWJ" while="" timeout="0" info="">
[02:56:44.521]        // if-block "!isSWJ"
[02:56:44.521]          // =>  FALSE
[02:56:44.521]        // skip if-block "!isSWJ"
[02:56:44.521]      </control>
[02:56:44.521]      <block atomic="false" info="">
[02:56:44.521]        ReadDP(0x0);
[02:56:44.522]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:56:44.523]      </block>
[02:56:44.523]      // end if-block "protType == 2"
[02:56:44.523]    </control>
[02:56:44.523]  </sequence>
[02:56:44.523]  
[02:56:44.539]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:56:44.539]  
[02:56:44.539]  <debugvars>
[02:56:44.540]    // Pre-defined
[02:56:44.540]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:44.540]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:44.540]    __dp=0x00000000
[02:56:44.540]    __ap=0x00000000
[02:56:44.540]    __traceout=0x00000000      (Trace Disabled)
[02:56:44.540]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:44.540]    __FlashAddr=0x00000000
[02:56:44.540]    __FlashLen=0x00000000
[02:56:44.540]    __FlashArg=0x00000000
[02:56:44.540]    __FlashOp=0x00000000
[02:56:44.542]    __Result=0x00000000
[02:56:44.542]  </debugvars>
[02:56:44.542]  
[02:56:44.542]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:56:44.542]    <block atomic="false" info="">
[02:56:44.542]      __var SW_DP_ABORT       = 0x0;
[02:56:44.542]        // -> [SW_DP_ABORT <= 0x00000000]
[02:56:44.542]      __var DP_CTRL_STAT      = 0x4;
[02:56:44.542]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:56:44.542]      __var DP_SELECT         = 0x8;
[02:56:44.543]        // -> [DP_SELECT <= 0x00000008]
[02:56:44.543]      __var powered_down      = 0;
[02:56:44.543]        // -> [powered_down <= 0x00000000]
[02:56:44.543]      WriteDP(DP_SELECT, 0x00000000);
[02:56:44.548]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:56:44.548]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:56:44.551]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:56:44.552]        // -> [powered_down <= 0x00000001]
[02:56:44.552]    </block>
[02:56:44.552]    <control if="powered_down" while="" timeout="0" info="">
[02:56:44.552]      // if-block "powered_down"
[02:56:44.552]        // =>  TRUE
[02:56:44.552]      <block atomic="false" info="">
[02:56:44.552]        Message(0, "Debug/System power-up request sent");
[02:56:44.553]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:56:44.554]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:56:44.554]      </block>
[02:56:44.554]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:56:44.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:56:44.556]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:56:44.556]        // while-condition  =>  FALSE
[02:56:44.556]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:56:44.556]      </control>
[02:56:44.556]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:56:44.556]        // if-block "(__protocol & 0xFFFF) == 1"
[02:56:44.556]          // =>  FALSE
[02:56:44.556]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:56:44.558]      </control>
[02:56:44.558]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:56:44.558]        // if-block "(__protocol & 0xFFFF) == 2"
[02:56:44.558]          // =>  TRUE
[02:56:44.558]        <block atomic="false" info="">
[02:56:44.558]          Message(0, "executing SWD power up");
[02:56:44.558]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:56:44.566]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:56:44.568]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:56:44.569]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:56:44.569]        </block>
[02:56:44.569]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:56:44.569]      </control>
[02:56:44.569]      // end if-block "powered_down"
[02:56:44.569]    </control>
[02:56:44.569]    <block atomic="false" info="">
[02:56:44.569]      __var DEBUG_PORT_VAL    = 0;
[02:56:44.571]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:56:44.571]      __var ACCESS_POINT_VAL  = 0;
[02:56:44.571]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:56:44.571]      __ap = 1; 
[02:56:44.571]        // -> [__ap <= 0x00000001]
[02:56:44.571]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:56:44.574]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:56:44.574]      __ap = 4;
[02:56:44.574]        // -> [__ap <= 0x00000004]
[02:56:44.574]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:56:44.577]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:56:44.577]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:56:44.577]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:56:44.577]    </block>
[02:56:44.578]    <block atomic="false" info="">
[02:56:44.578]      __var nReset = 0x80;
[02:56:44.578]        // -> [nReset <= 0x00000080]
[02:56:44.578]      __var canReadPins = 0;
[02:56:44.578]        // -> [canReadPins <= 0x00000000]
[02:56:44.578]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:56:44.584]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:56:44.584]        // -> [canReadPins <= 0x00000001]
[02:56:44.584]    </block>
[02:56:44.584]    <control if="" while="1" timeout="200" info="">
[02:56:44.584]      // while "1"  (timeout="200")
[02:56:44.585]      // while-condition  =>  TRUE
[02:56:44.585]      // while "1"  (timeout="200")
[02:56:44.585]      // while-condition  =>  TRUE
[02:56:44.585]      // while "1"  (timeout="200")
[02:56:44.585]      // while-condition  =>  TRUE
[02:56:44.585]      // while "1"  (timeout="200")
[02:56:44.585]      // while-condition  =>  TRUE
[02:56:44.586]      // while "1"  (timeout="200")
[02:56:44.586]      // while-condition  =>  TRUE
[02:56:44.586]      // while "1"  (timeout="200")
[02:56:44.586]      // while-condition  =>  TRUE
[02:56:44.586]      // while "1"  (timeout="200")
[02:56:44.586]      // while-condition  =>  TRUE
[02:56:44.586]      // while "1"  (timeout="200")
[02:56:44.586]      // while-condition  =>  TRUE
[02:56:44.587]      // while "1"  (timeout="200")
[02:56:44.587]      // while-condition  =>  TRUE
[02:56:44.587]      // while "1"  (timeout="200")
[02:56:44.587]      // while-condition  =>  TRUE
[02:56:44.587]      // while "1"  (timeout="200")
[02:56:44.587]      // while-condition  =>  TRUE
[02:56:44.587]      // while "1"  (timeout="200")
[02:56:44.587]      // while-condition  =>  TRUE
[02:56:44.587]      // while "1"  (timeout="200")
[02:56:44.587]      // while-condition  =>  TRUE
[02:56:44.588]      // while "1"  (timeout="200")
[02:56:44.588]      // while-condition  =>  TRUE
[02:56:44.588]      // while "1"  (timeout="200")
[02:56:44.588]      // while-condition  =>  TRUE
[02:56:44.588]      // while "1"  (timeout="200")
[02:56:44.588]      // while-condition  =>  TRUE
[02:56:44.588]      // while "1"  (timeout="200")
[02:56:44.588]      // while-condition  =>  TRUE
[02:56:44.588]      // while "1"  (timeout="200")
[02:56:44.588]      // while-condition  =>  TRUE
[02:56:44.588]      // while "1"  (timeout="200")
[02:56:44.589]      // while-condition  =>  TRUE
[02:56:44.589]      // while "1"  (timeout="200")
[02:56:44.589]      // while-condition  =>  TRUE
[02:56:44.589]      // while "1"  (timeout="200")
[02:56:44.589]      // while-condition  =>  TRUE
[02:56:44.589]      // while "1"  (timeout="200")
[02:56:44.589]      // while-condition  =>  TRUE
[02:56:44.589]      // while "1"  (timeout="200")
[02:56:44.589]      // while-condition  =>  TRUE
[02:56:44.589]      // while "1"  (timeout="200")
[02:56:44.589]      // while-condition  =>  TRUE
[02:56:44.589]      // while "1"  (timeout="200")
[02:56:44.589]      // while-condition  =>  TRUE
[02:56:44.590]      // while "1"  (timeout="200")
[02:56:44.590]      // while-condition  =>  TRUE
[02:56:44.590]      // while "1"  (timeout="200")
[02:56:44.590]      // while-condition  =>  TRUE
[02:56:44.590]      // while "1"  (timeout="200")
[02:56:44.590]      // while-condition  =>  TRUE
[02:56:44.590]      // while "1"  (timeout="200")
[02:56:44.590]      // while-condition  =>  TRUE
[02:56:44.590]      // while "1"  (timeout="200")
[02:56:44.591]      // while-condition  =>  TRUE
[02:56:44.591]      // while "1"  (timeout="200")
[02:56:44.591]      // while-condition  =>  TRUE
[02:56:44.591]      // while "1"  (timeout="200")
[02:56:44.591]      // while-condition  =>  TRUE
[02:56:44.591]      // while "1"  (timeout="200")
[02:56:44.591]      // while-condition  =>  TRUE
[02:56:44.591]      // while "1"  (timeout="200")
[02:56:44.591]      // while-condition  =>  TRUE
[02:56:44.592]      // while "1"  (timeout="200")
[02:56:44.592]      // while-condition  =>  TRUE
[02:56:44.592]      // while "1"  (timeout="200")
[02:56:44.592]      // while-condition  =>  TRUE
[02:56:44.592]      // while "1"  (timeout="200")
[02:56:44.592]      // while-condition  =>  TRUE
[02:56:44.592]      // while "1"  (timeout="200")
[02:56:44.592]      // while-condition  =>  TRUE
[02:56:44.592]      // while "1"  (timeout="200")
[02:56:44.592]      // while-condition  =>  TRUE
[02:56:44.594]      // while "1"  (timeout="200")
[02:56:44.594]      // while-condition  =>  TRUE
[02:56:44.594]      // while "1"  (timeout="200")
[02:56:44.594]      // while-condition  =>  TRUE
[02:56:44.594]      // while "1"  (timeout="200")
[02:56:44.594]      // while-condition  =>  TRUE
[02:56:44.594]      // while "1"  (timeout="200")
[02:56:44.594]      // while-condition  =>  TRUE
[02:56:44.594]      // while "1"  (timeout="200")
[02:56:44.594]      // while-condition  =>  TRUE
[02:56:44.595]      // while "1"  (timeout="200")
[02:56:44.595]      // while  =>  TIMEOUT
[02:56:44.595]      // end while "1"
[02:56:44.595]    </control>
[02:56:44.595]    <control if="canReadPins" while="" timeout="0" info="">
[02:56:44.595]      // if-block "canReadPins"
[02:56:44.595]        // =>  TRUE
[02:56:44.595]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:56:44.595]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:56:44.597]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:56:44.597]        // while-condition  =>  FALSE
[02:56:44.597]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:56:44.597]      </control>
[02:56:44.597]      // end if-block "canReadPins"
[02:56:44.597]    </control>
[02:56:44.597]    <control if="!canReadPins" while="" timeout="0" info="">
[02:56:44.598]      // if-block "!canReadPins"
[02:56:44.598]        // =>  FALSE
[02:56:44.598]      // skip if-block "!canReadPins"
[02:56:44.598]    </control>
[02:56:44.598]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:56:44.598]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:56:44.598]        // =>  TRUE
[02:56:44.598]      <block atomic="false" info="">
[02:56:44.598]        WriteAP(0x00, 0x190008);
[02:56:44.603]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:56:44.603]        WriteAP(0xF0, 0x01);
[02:56:44.607]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:56:44.607]      </block>
[02:56:44.607]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:56:44.607]    </control>
[02:56:44.607]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:56:44.607]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:56:44.607]        // =>  FALSE
[02:56:44.607]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:56:44.607]    </control>
[02:56:44.607]    <block atomic="false" info="">
[02:56:44.607]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:56:44.612]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:56:44.612]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:56:44.612]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:56:44.614]      __ap = 0; //lets make sure we reset the access point selection
[02:56:44.614]        // -> [__ap <= 0x00000000]
[02:56:44.614]    </block>
[02:56:44.614]  </sequence>
[02:56:44.614]  
[02:56:44.647]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:56:44.647]  
[02:56:44.647]  <debugvars>
[02:56:44.648]    // Pre-defined
[02:56:44.648]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:44.648]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:44.648]    __dp=0x00000000
[02:56:44.648]    __ap=0x00000000
[02:56:44.649]    __traceout=0x00000000      (Trace Disabled)
[02:56:44.649]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:44.649]    __FlashAddr=0x00000000
[02:56:44.649]    __FlashLen=0x00000000
[02:56:44.649]    __FlashArg=0x00000000
[02:56:44.649]    __FlashOp=0x00000000
[02:56:44.649]    __Result=0x00000000
[02:56:44.649]  </debugvars>
[02:56:44.649]  
[02:56:44.650]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:56:44.650]    <block atomic="false" info="">
[02:56:44.650]      __var deviceID = 0;
[02:56:44.650]        // -> [deviceID <= 0x00000000]
[02:56:44.650]      __var version = 0;
[02:56:44.650]        // -> [version <= 0x00000000]
[02:56:44.650]      __var partNum = 0;
[02:56:44.650]        // -> [partNum <= 0x00000000]
[02:56:44.650]      __var manuf = 0;
[02:56:44.650]        // -> [manuf <= 0x00000000]
[02:56:44.651]      __var isMSPM0G1X0X_G3X0X = 0;
[02:56:44.651]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:56:44.651]      __var isProduction = 0;
[02:56:44.651]        // -> [isProduction <= 0x00000000]
[02:56:44.651]      __var continueId = 0;
[02:56:44.651]        // -> [continueId <= 0x00000000]
[02:56:44.651]      deviceID =   Read32(0x41C40004);
[02:56:44.658]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:56:44.658]        // -> [deviceID <= 0x2BB8802F]
[02:56:44.658]      version = deviceID >> 28;
[02:56:44.658]        // -> [version <= 0x00000002]
[02:56:44.658]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:56:44.658]        // -> [partNum <= 0x0000BB88]
[02:56:44.658]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:56:44.659]        // -> [manuf <= 0x00000017]
[02:56:44.659]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:56:44.659]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:56:44.659]      isProduction = (version > 0);
[02:56:44.659]        // -> [isProduction <= 0x00000001]
[02:56:44.659]    </block>
[02:56:44.659]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:56:44.659]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:56:44.659]        // =>  FALSE
[02:56:44.659]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:56:44.659]    </control>
[02:56:44.660]    <control if="continueId == 4" while="" timeout="0" info="">
[02:56:44.660]      // if-block "continueId == 4"
[02:56:44.660]        // =>  FALSE
[02:56:44.660]      // skip if-block "continueId == 4"
[02:56:44.660]    </control>
[02:56:44.660]    <control if="!isProduction" while="" timeout="0" info="">
[02:56:44.660]      // if-block "!isProduction"
[02:56:44.660]        // =>  FALSE
[02:56:44.660]      // skip if-block "!isProduction"
[02:56:44.660]    </control>
[02:56:44.661]  </sequence>
[02:56:44.661]  
[03:06:44.781]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:44.781]  
[03:06:44.789]  <debugvars>
[03:06:44.789]    // Pre-defined
[03:06:44.789]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:44.789]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:06:44.790]    __dp=0x00000000
[03:06:44.790]    __ap=0x00000000
[03:06:44.790]    __traceout=0x00000000      (Trace Disabled)
[03:06:44.790]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:44.790]    __FlashAddr=0x00000000
[03:06:44.790]    __FlashLen=0x00000000
[03:06:44.790]    __FlashArg=0x00000000
[03:06:44.790]    __FlashOp=0x00000000
[03:06:44.790]    __Result=0x00000000
[03:06:44.790]  </debugvars>
[03:06:44.791]  
[03:06:44.791]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:44.791]    <block atomic="false" info="">
[03:06:44.791]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:44.791]        // -> [isSWJ <= 0x00000001]
[03:06:44.791]      __var hasDormant = __protocol & 0x00020000;
[03:06:44.791]        // -> [hasDormant <= 0x00000000]
[03:06:44.791]      __var protType   = __protocol & 0x0000FFFF;
[03:06:44.791]        // -> [protType <= 0x00000002]
[03:06:44.791]    </block>
[03:06:44.792]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:44.792]      // if-block "protType == 1"
[03:06:44.792]        // =>  FALSE
[03:06:44.792]      // skip if-block "protType == 1"
[03:06:44.792]    </control>
[03:06:44.792]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:44.792]      // if-block "protType == 2"
[03:06:44.793]        // =>  TRUE
[03:06:44.793]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:44.793]        // if-block "isSWJ"
[03:06:44.793]          // =>  TRUE
[03:06:44.793]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:44.793]          // if-block "hasDormant"
[03:06:44.793]            // =>  FALSE
[03:06:44.794]          // skip if-block "hasDormant"
[03:06:44.794]        </control>
[03:06:44.794]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:44.794]          // if-block "!hasDormant"
[03:06:44.794]            // =>  TRUE
[03:06:44.794]          <block atomic="false" info="">
[03:06:44.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:44.795]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:44.795]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:44.797]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:44.797]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:44.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:44.799]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:44.800]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:44.800]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:44.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:44.806]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:44.808]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:44.809]          </block>
[03:06:44.809]          // end if-block "!hasDormant"
[03:06:44.809]        </control>
[03:06:44.809]        // end if-block "isSWJ"
[03:06:44.809]      </control>
[03:06:44.809]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:44.809]        // if-block "!isSWJ"
[03:06:44.810]          // =>  FALSE
[03:06:44.810]        // skip if-block "!isSWJ"
[03:06:44.810]      </control>
[03:06:44.810]      <block atomic="false" info="">
[03:06:44.810]        ReadDP(0x0);
[03:06:44.813]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:44.814]      </block>
[03:06:44.814]      // end if-block "protType == 2"
[03:06:44.814]    </control>
[03:06:44.814]  </sequence>
[03:06:44.814]  
[03:06:44.816]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:06:44.816]  
[03:06:44.816]  <debugvars>
[03:06:44.816]    // Pre-defined
[03:06:44.816]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:44.816]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:06:44.816]    __dp=0x00000000
[03:06:44.816]    __ap=0x00000000
[03:06:44.817]    __traceout=0x00000000      (Trace Disabled)
[03:06:44.817]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:44.817]    __FlashAddr=0x00000000
[03:06:44.817]    __FlashLen=0x00000000
[03:06:44.817]    __FlashArg=0x00000000
[03:06:44.817]    __FlashOp=0x00000000
[03:06:44.817]    __Result=0x00000000
[03:06:44.817]  </debugvars>
[03:06:44.817]  
[03:06:44.817]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:06:44.819]    <block atomic="false" info="">
[03:06:44.819]      __var SW_DP_ABORT       = 0x0;
[03:06:44.819]        // -> [SW_DP_ABORT <= 0x00000000]
[03:06:44.819]      __var DP_CTRL_STAT      = 0x4;
[03:06:44.819]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:06:44.819]      __var DP_SELECT         = 0x8;
[03:06:44.819]        // -> [DP_SELECT <= 0x00000008]
[03:06:44.819]      __var powered_down      = 0;
[03:06:44.819]        // -> [powered_down <= 0x00000000]
[03:06:44.819]      WriteDP(DP_SELECT, 0x00000000);
[03:06:44.821]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:06:44.821]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:06:44.822]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:06:44.822]        // -> [powered_down <= 0x00000001]
[03:06:44.822]    </block>
[03:06:44.822]    <control if="powered_down" while="" timeout="0" info="">
[03:06:44.822]      // if-block "powered_down"
[03:06:44.822]        // =>  TRUE
[03:06:44.822]      <block atomic="false" info="">
[03:06:44.824]        Message(0, "Debug/System power-up request sent");
[03:06:44.826]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:06:44.832]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:06:44.832]      </block>
[03:06:44.832]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:06:44.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:06:44.833]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:06:44.833]        // while-condition  =>  FALSE
[03:06:44.833]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:06:44.834]      </control>
[03:06:44.834]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:06:44.834]        // if-block "(__protocol & 0xFFFF) == 1"
[03:06:44.835]          // =>  FALSE
[03:06:44.835]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:06:44.835]      </control>
[03:06:44.835]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:06:44.835]        // if-block "(__protocol & 0xFFFF) == 2"
[03:06:44.835]          // =>  TRUE
[03:06:44.835]        <block atomic="false" info="">
[03:06:44.836]          Message(0, "executing SWD power up");
[03:06:44.838]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:06:44.842]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:06:44.842]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:06:44.844]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:06:44.844]        </block>
[03:06:44.844]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:06:44.844]      </control>
[03:06:44.844]      // end if-block "powered_down"
[03:06:44.845]    </control>
[03:06:44.845]    <block atomic="false" info="">
[03:06:44.845]      __var DEBUG_PORT_VAL    = 0;
[03:06:44.845]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:06:44.845]      __var ACCESS_POINT_VAL  = 0;
[03:06:44.845]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:06:44.845]      __ap = 1; 
[03:06:44.845]        // -> [__ap <= 0x00000001]
[03:06:44.845]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:06:44.849]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:06:44.849]      __ap = 4;
[03:06:44.850]        // -> [__ap <= 0x00000004]
[03:06:44.850]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:06:44.855]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:06:44.855]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:06:44.855]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:06:44.857]    </block>
[03:06:44.858]    <block atomic="false" info="">
[03:06:44.858]      __var nReset = 0x80;
[03:06:44.858]        // -> [nReset <= 0x00000080]
[03:06:44.858]      __var canReadPins = 0;
[03:06:44.858]        // -> [canReadPins <= 0x00000000]
[03:06:44.858]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:06:44.860]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:06:44.860]        // -> [canReadPins <= 0x00000001]
[03:06:44.860]    </block>
[03:06:44.860]    <control if="" while="1" timeout="200" info="">
[03:06:44.860]      // while "1"  (timeout="200")
[03:06:44.860]      // while-condition  =>  TRUE
[03:06:44.860]      // while "1"  (timeout="200")
[03:06:44.860]      // while-condition  =>  TRUE
[03:06:44.860]      // while "1"  (timeout="200")
[03:06:44.860]      // while-condition  =>  TRUE
[03:06:44.860]      // while "1"  (timeout="200")
[03:06:44.860]      // while-condition  =>  TRUE
[03:06:44.860]      // while "1"  (timeout="200")
[03:06:44.860]      // while-condition  =>  TRUE
[03:06:44.860]      // while "1"  (timeout="200")
[03:06:44.862]      // while-condition  =>  TRUE
[03:06:44.862]      // while "1"  (timeout="200")
[03:06:44.862]      // while-condition  =>  TRUE
[03:06:44.862]      // while "1"  (timeout="200")
[03:06:44.862]      // while-condition  =>  TRUE
[03:06:44.862]      // while "1"  (timeout="200")
[03:06:44.862]      // while-condition  =>  TRUE
[03:06:44.862]      // while "1"  (timeout="200")
[03:06:44.862]      // while-condition  =>  TRUE
[03:06:44.862]      // while "1"  (timeout="200")
[03:06:44.863]      // while-condition  =>  TRUE
[03:06:44.863]      // while "1"  (timeout="200")
[03:06:44.863]      // while-condition  =>  TRUE
[03:06:44.863]      // while "1"  (timeout="200")
[03:06:44.863]      // while-condition  =>  TRUE
[03:06:44.863]      // while "1"  (timeout="200")
[03:06:44.863]      // while-condition  =>  TRUE
[03:06:44.863]      // while "1"  (timeout="200")
[03:06:44.863]      // while-condition  =>  TRUE
[03:06:44.863]      // while "1"  (timeout="200")
[03:06:44.864]      // while-condition  =>  TRUE
[03:06:44.864]      // while "1"  (timeout="200")
[03:06:44.864]      // while-condition  =>  TRUE
[03:06:44.864]      // while "1"  (timeout="200")
[03:06:44.864]      // while-condition  =>  TRUE
[03:06:44.864]      // while "1"  (timeout="200")
[03:06:44.864]      // while-condition  =>  TRUE
[03:06:44.864]      // while "1"  (timeout="200")
[03:06:44.865]      // while-condition  =>  TRUE
[03:06:44.865]      // while "1"  (timeout="200")
[03:06:44.865]      // while-condition  =>  TRUE
[03:06:44.865]      // while "1"  (timeout="200")
[03:06:44.865]      // while-condition  =>  TRUE
[03:06:44.865]      // while "1"  (timeout="200")
[03:06:44.865]      // while-condition  =>  TRUE
[03:06:44.865]      // while "1"  (timeout="200")
[03:06:44.865]      // while-condition  =>  TRUE
[03:06:44.865]      // while "1"  (timeout="200")
[03:06:44.865]      // while-condition  =>  TRUE
[03:06:44.866]      // while "1"  (timeout="200")
[03:06:44.866]      // while-condition  =>  TRUE
[03:06:44.866]      // while "1"  (timeout="200")
[03:06:44.866]      // while-condition  =>  TRUE
[03:06:44.866]      // while "1"  (timeout="200")
[03:06:44.866]      // while-condition  =>  TRUE
[03:06:44.866]      // while "1"  (timeout="200")
[03:06:44.866]      // while-condition  =>  TRUE
[03:06:44.866]      // while "1"  (timeout="200")
[03:06:44.866]      // while-condition  =>  TRUE
[03:06:44.866]      // while "1"  (timeout="200")
[03:06:44.867]      // while-condition  =>  TRUE
[03:06:44.867]      // while "1"  (timeout="200")
[03:06:44.867]      // while-condition  =>  TRUE
[03:06:44.867]      // while "1"  (timeout="200")
[03:06:44.867]      // while-condition  =>  TRUE
[03:06:44.867]      // while "1"  (timeout="200")
[03:06:44.867]      // while-condition  =>  TRUE
[03:06:44.867]      // while "1"  (timeout="200")
[03:06:44.867]      // while-condition  =>  TRUE
[03:06:44.867]      // while "1"  (timeout="200")
[03:06:44.867]      // while-condition  =>  TRUE
[03:06:44.868]      // while "1"  (timeout="200")
[03:06:44.868]      // while-condition  =>  TRUE
[03:06:44.868]      // while "1"  (timeout="200")
[03:06:44.868]      // while-condition  =>  TRUE
[03:06:44.868]      // while "1"  (timeout="200")
[03:06:44.868]      // while-condition  =>  TRUE
[03:06:44.868]      // while "1"  (timeout="200")
[03:06:44.868]      // while-condition  =>  TRUE
[03:06:44.868]      // while "1"  (timeout="200")
[03:06:44.868]      // while-condition  =>  TRUE
[03:06:44.869]      // while "1"  (timeout="200")
[03:06:44.869]      // while-condition  =>  TRUE
[03:06:44.869]      // while "1"  (timeout="200")
[03:06:44.869]      // while-condition  =>  TRUE
[03:06:44.869]      // while "1"  (timeout="200")
[03:06:44.869]      // while-condition  =>  TRUE
[03:06:44.869]      // while "1"  (timeout="200")
[03:06:44.869]      // while-condition  =>  TRUE
[03:06:44.869]      // while "1"  (timeout="200")
[03:06:44.869]      // while-condition  =>  TRUE
[03:06:44.870]      // while "1"  (timeout="200")
[03:06:44.870]      // while-condition  =>  TRUE
[03:06:44.870]      // while "1"  (timeout="200")
[03:06:44.870]      // while-condition  =>  TRUE
[03:06:44.870]      // while "1"  (timeout="200")
[03:06:44.870]      // while-condition  =>  TRUE
[03:06:44.870]      // while "1"  (timeout="200")
[03:06:44.870]      // while-condition  =>  TRUE
[03:06:44.870]      // while "1"  (timeout="200")
[03:06:44.870]      // while-condition  =>  TRUE
[03:06:44.870]      // while "1"  (timeout="200")
[03:06:44.870]      // while-condition  =>  TRUE
[03:06:44.872]      // while "1"  (timeout="200")
[03:06:44.872]      // while-condition  =>  TRUE
[03:06:44.872]      // while "1"  (timeout="200")
[03:06:44.872]      // while-condition  =>  TRUE
[03:06:44.872]      // while "1"  (timeout="200")
[03:06:44.872]      // while-condition  =>  TRUE
[03:06:44.872]      // while "1"  (timeout="200")
[03:06:44.872]      // while-condition  =>  TRUE
[03:06:44.872]      // while "1"  (timeout="200")
[03:06:44.873]      // while-condition  =>  TRUE
[03:06:44.873]      // while "1"  (timeout="200")
[03:06:44.873]      // while-condition  =>  TRUE
[03:06:44.873]      // while "1"  (timeout="200")
[03:06:44.873]      // while-condition  =>  TRUE
[03:06:44.873]      // while "1"  (timeout="200")
[03:06:44.873]      // while-condition  =>  TRUE
[03:06:44.873]      // while "1"  (timeout="200")
[03:06:44.873]      // while-condition  =>  TRUE
[03:06:44.873]      // while "1"  (timeout="200")
[03:06:44.874]      // while-condition  =>  TRUE
[03:06:44.874]      // while "1"  (timeout="200")
[03:06:44.874]      // while-condition  =>  TRUE
[03:06:44.874]      // while "1"  (timeout="200")
[03:06:44.874]      // while-condition  =>  TRUE
[03:06:44.875]      // while "1"  (timeout="200")
[03:06:44.875]      // while-condition  =>  TRUE
[03:06:44.875]      // while "1"  (timeout="200")
[03:06:44.875]      // while-condition  =>  TRUE
[03:06:44.875]      // while "1"  (timeout="200")
[03:06:44.875]      // while-condition  =>  TRUE
[03:06:44.875]      // while "1"  (timeout="200")
[03:06:44.875]      // while-condition  =>  TRUE
[03:06:44.875]      // while "1"  (timeout="200")
[03:06:44.875]      // while-condition  =>  TRUE
[03:06:44.875]      // while "1"  (timeout="200")
[03:06:44.875]      // while-condition  =>  TRUE
[03:06:44.876]      // while "1"  (timeout="200")
[03:06:44.876]      // while  =>  TIMEOUT
[03:06:44.876]      // end while "1"
[03:06:44.876]    </control>
[03:06:44.876]    <control if="canReadPins" while="" timeout="0" info="">
[03:06:44.876]      // if-block "canReadPins"
[03:06:44.876]        // =>  TRUE
[03:06:44.876]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:06:44.876]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:06:44.879]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:06:44.879]        // while-condition  =>  FALSE
[03:06:44.879]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:06:44.879]      </control>
[03:06:44.880]      // end if-block "canReadPins"
[03:06:44.881]    </control>
[03:06:44.881]    <control if="!canReadPins" while="" timeout="0" info="">
[03:06:44.881]      // if-block "!canReadPins"
[03:06:44.881]        // =>  FALSE
[03:06:44.881]      // skip if-block "!canReadPins"
[03:06:44.881]    </control>
[03:06:44.881]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:06:44.881]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:06:44.881]        // =>  TRUE
[03:06:44.881]      <block atomic="false" info="">
[03:06:44.881]        WriteAP(0x00, 0x190008);
[03:06:44.883]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:06:44.883]        WriteAP(0xF0, 0x01);
[03:06:44.886]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:06:44.887]      </block>
[03:06:44.887]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:06:44.887]    </control>
[03:06:44.887]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:06:44.887]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:06:44.887]        // =>  FALSE
[03:06:44.887]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:06:44.887]    </control>
[03:06:44.887]    <block atomic="false" info="">
[03:06:44.887]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:06:44.891]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:06:44.891]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:06:44.891]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:06:44.894]      __ap = 0; //lets make sure we reset the access point selection
[03:06:44.894]        // -> [__ap <= 0x00000000]
[03:06:44.894]    </block>
[03:06:44.894]  </sequence>
[03:06:44.894]  
[03:06:44.923]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:06:44.923]  
[03:06:44.924]  <debugvars>
[03:06:44.924]    // Pre-defined
[03:06:44.924]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:44.924]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:06:44.924]    __dp=0x00000000
[03:06:44.925]    __ap=0x00000000
[03:06:44.925]    __traceout=0x00000000      (Trace Disabled)
[03:06:44.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:44.925]    __FlashAddr=0x00000000
[03:06:44.925]    __FlashLen=0x00000000
[03:06:44.925]    __FlashArg=0x00000000
[03:06:44.925]    __FlashOp=0x00000000
[03:06:44.925]    __Result=0x00000000
[03:06:44.925]  </debugvars>
[03:06:44.925]  
[03:06:44.926]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:06:44.926]    <block atomic="false" info="">
[03:06:44.926]      __var deviceID = 0;
[03:06:44.926]        // -> [deviceID <= 0x00000000]
[03:06:44.926]      __var version = 0;
[03:06:44.926]        // -> [version <= 0x00000000]
[03:06:44.927]      __var partNum = 0;
[03:06:44.927]        // -> [partNum <= 0x00000000]
[03:06:44.927]      __var manuf = 0;
[03:06:44.927]        // -> [manuf <= 0x00000000]
[03:06:44.927]      __var isMSPM0G1X0X_G3X0X = 0;
[03:06:44.928]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:06:44.928]      __var isProduction = 0;
[03:06:44.928]        // -> [isProduction <= 0x00000000]
[03:06:44.928]      __var continueId = 0;
[03:06:44.928]        // -> [continueId <= 0x00000000]
[03:06:44.928]      deviceID =   Read32(0x41C40004);
[03:06:44.934]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:06:44.934]        // -> [deviceID <= 0x2BB8802F]
[03:06:44.934]      version = deviceID >> 28;
[03:06:44.934]        // -> [version <= 0x00000002]
[03:06:44.934]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:06:44.935]        // -> [partNum <= 0x0000BB88]
[03:06:44.935]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:06:44.935]        // -> [manuf <= 0x00000017]
[03:06:44.935]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:06:44.935]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:06:44.935]      isProduction = (version > 0);
[03:06:44.935]        // -> [isProduction <= 0x00000001]
[03:06:44.935]    </block>
[03:06:44.936]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:06:44.936]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:06:44.936]        // =>  FALSE
[03:06:44.936]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:06:44.936]    </control>
[03:06:44.936]    <control if="continueId == 4" while="" timeout="0" info="">
[03:06:44.936]      // if-block "continueId == 4"
[03:06:44.936]        // =>  FALSE
[03:06:44.936]      // skip if-block "continueId == 4"
[03:06:44.936]    </control>
[03:06:44.936]    <control if="!isProduction" while="" timeout="0" info="">
[03:06:44.936]      // if-block "!isProduction"
[03:06:44.936]        // =>  FALSE
[03:06:44.936]      // skip if-block "!isProduction"
[03:06:44.938]    </control>
[03:06:44.938]  </sequence>
[03:06:44.938]  
[03:09:15.452]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:09:15.452]  
[03:09:15.452]  <debugvars>
[03:09:15.452]    // Pre-defined
[03:09:15.452]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:15.452]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:09:15.452]    __dp=0x00000000
[03:09:15.452]    __ap=0x00000000
[03:09:15.452]    __traceout=0x00000000      (Trace Disabled)
[03:09:15.452]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:15.453]    __FlashAddr=0x00000000
[03:09:15.453]    __FlashLen=0x00000000
[03:09:15.453]    __FlashArg=0x00000000
[03:09:15.453]    __FlashOp=0x00000000
[03:09:15.453]    __Result=0x00000000
[03:09:15.453]  </debugvars>
[03:09:15.453]  
[03:09:15.453]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:09:15.453]    <block atomic="false" info="">
[03:09:15.453]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:09:15.453]        // -> [isSWJ <= 0x00000001]
[03:09:15.453]      __var hasDormant = __protocol & 0x00020000;
[03:09:15.454]        // -> [hasDormant <= 0x00000000]
[03:09:15.454]      __var protType   = __protocol & 0x0000FFFF;
[03:09:15.454]        // -> [protType <= 0x00000002]
[03:09:15.454]    </block>
[03:09:15.454]    <control if="protType == 1" while="" timeout="0" info="">
[03:09:15.454]      // if-block "protType == 1"
[03:09:15.454]        // =>  FALSE
[03:09:15.454]      // skip if-block "protType == 1"
[03:09:15.454]    </control>
[03:09:15.454]    <control if="protType == 2" while="" timeout="0" info="">
[03:09:15.454]      // if-block "protType == 2"
[03:09:15.454]        // =>  TRUE
[03:09:15.454]      <control if="isSWJ" while="" timeout="0" info="">
[03:09:15.454]        // if-block "isSWJ"
[03:09:15.454]          // =>  TRUE
[03:09:15.454]        <control if="hasDormant" while="" timeout="0" info="">
[03:09:15.456]          // if-block "hasDormant"
[03:09:15.456]            // =>  FALSE
[03:09:15.456]          // skip if-block "hasDormant"
[03:09:15.456]        </control>
[03:09:15.456]        <control if="!hasDormant" while="" timeout="0" info="">
[03:09:15.456]          // if-block "!hasDormant"
[03:09:15.456]            // =>  TRUE
[03:09:15.456]          <block atomic="false" info="">
[03:09:15.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:09:15.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:09:15.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:09:15.459]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:09:15.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:09:15.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:09:15.461]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:09:15.464]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:09:15.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:09:15.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:09:15.466]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:09:15.468]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:09:15.468]          </block>
[03:09:15.468]          // end if-block "!hasDormant"
[03:09:15.468]        </control>
[03:09:15.468]        // end if-block "isSWJ"
[03:09:15.469]      </control>
[03:09:15.469]      <control if="!isSWJ" while="" timeout="0" info="">
[03:09:15.469]        // if-block "!isSWJ"
[03:09:15.469]          // =>  FALSE
[03:09:15.469]        // skip if-block "!isSWJ"
[03:09:15.469]      </control>
[03:09:15.469]      <block atomic="false" info="">
[03:09:15.469]        ReadDP(0x0);
[03:09:15.475]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:09:15.475]      </block>
[03:09:15.475]      // end if-block "protType == 2"
[03:09:15.476]    </control>
[03:09:15.476]  </sequence>
[03:09:15.476]  
[03:09:15.478]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:09:15.478]  
[03:09:15.479]  <debugvars>
[03:09:15.479]    // Pre-defined
[03:09:15.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:15.479]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:09:15.479]    __dp=0x00000000
[03:09:15.479]    __ap=0x00000000
[03:09:15.479]    __traceout=0x00000000      (Trace Disabled)
[03:09:15.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:15.479]    __FlashAddr=0x00000000
[03:09:15.479]    __FlashLen=0x00000000
[03:09:15.479]    __FlashArg=0x00000000
[03:09:15.480]    __FlashOp=0x00000000
[03:09:15.480]    __Result=0x00000000
[03:09:15.480]  </debugvars>
[03:09:15.480]  
[03:09:15.480]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:09:15.480]    <block atomic="false" info="">
[03:09:15.480]      __var SW_DP_ABORT       = 0x0;
[03:09:15.480]        // -> [SW_DP_ABORT <= 0x00000000]
[03:09:15.480]      __var DP_CTRL_STAT      = 0x4;
[03:09:15.480]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:09:15.480]      __var DP_SELECT         = 0x8;
[03:09:15.480]        // -> [DP_SELECT <= 0x00000008]
[03:09:15.480]      __var powered_down      = 0;
[03:09:15.481]        // -> [powered_down <= 0x00000000]
[03:09:15.481]      WriteDP(DP_SELECT, 0x00000000);
[03:09:15.484]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:09:15.484]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:09:15.487]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:09:15.487]        // -> [powered_down <= 0x00000001]
[03:09:15.487]    </block>
[03:09:15.487]    <control if="powered_down" while="" timeout="0" info="">
[03:09:15.487]      // if-block "powered_down"
[03:09:15.488]        // =>  TRUE
[03:09:15.488]      <block atomic="false" info="">
[03:09:15.488]        Message(0, "Debug/System power-up request sent");
[03:09:15.490]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:09:15.491]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:09:15.491]      </block>
[03:09:15.492]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:09:15.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:09:15.494]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:09:15.494]        // while-condition  =>  FALSE
[03:09:15.494]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:09:15.494]      </control>
[03:09:15.494]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:09:15.494]        // if-block "(__protocol & 0xFFFF) == 1"
[03:09:15.494]          // =>  FALSE
[03:09:15.494]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:09:15.495]      </control>
[03:09:15.495]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:09:15.495]        // if-block "(__protocol & 0xFFFF) == 2"
[03:09:15.495]          // =>  TRUE
[03:09:15.495]        <block atomic="false" info="">
[03:09:15.495]          Message(0, "executing SWD power up");
[03:09:15.497]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:09:15.498]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:09:15.499]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:09:15.502]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:09:15.503]        </block>
[03:09:15.503]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:09:15.503]      </control>
[03:09:15.503]      // end if-block "powered_down"
[03:09:15.504]    </control>
[03:09:15.504]    <block atomic="false" info="">
[03:09:15.504]      __var DEBUG_PORT_VAL    = 0;
[03:09:15.504]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:09:15.504]      __var ACCESS_POINT_VAL  = 0;
[03:09:15.504]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:09:15.505]      __ap = 1; 
[03:09:15.505]        // -> [__ap <= 0x00000001]
[03:09:15.505]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:09:15.513]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:09:15.513]      __ap = 4;
[03:09:15.513]        // -> [__ap <= 0x00000004]
[03:09:15.513]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:09:15.517]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:09:15.517]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:09:15.517]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:09:15.519]    </block>
[03:09:15.519]    <block atomic="false" info="">
[03:09:15.519]      __var nReset = 0x80;
[03:09:15.519]        // -> [nReset <= 0x00000080]
[03:09:15.519]      __var canReadPins = 0;
[03:09:15.519]        // -> [canReadPins <= 0x00000000]
[03:09:15.519]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:09:15.521]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:09:15.521]        // -> [canReadPins <= 0x00000001]
[03:09:15.521]    </block>
[03:09:15.521]    <control if="" while="1" timeout="200" info="">
[03:09:15.521]      // while "1"  (timeout="200")
[03:09:15.521]      // while-condition  =>  TRUE
[03:09:15.521]      // while "1"  (timeout="200")
[03:09:15.521]      // while-condition  =>  TRUE
[03:09:15.521]      // while "1"  (timeout="200")
[03:09:15.522]      // while-condition  =>  TRUE
[03:09:15.522]      // while "1"  (timeout="200")
[03:09:15.522]      // while-condition  =>  TRUE
[03:09:15.522]      // while "1"  (timeout="200")
[03:09:15.522]      // while-condition  =>  TRUE
[03:09:15.522]      // while "1"  (timeout="200")
[03:09:15.522]      // while-condition  =>  TRUE
[03:09:15.522]      // while "1"  (timeout="200")
[03:09:15.522]      // while-condition  =>  TRUE
[03:09:15.522]      // while "1"  (timeout="200")
[03:09:15.522]      // while-condition  =>  TRUE
[03:09:15.523]      // while "1"  (timeout="200")
[03:09:15.523]      // while-condition  =>  TRUE
[03:09:15.523]      // while "1"  (timeout="200")
[03:09:15.523]      // while-condition  =>  TRUE
[03:09:15.523]      // while "1"  (timeout="200")
[03:09:15.523]      // while-condition  =>  TRUE
[03:09:15.523]      // while "1"  (timeout="200")
[03:09:15.523]      // while-condition  =>  TRUE
[03:09:15.523]      // while "1"  (timeout="200")
[03:09:15.523]      // while-condition  =>  TRUE
[03:09:15.524]      // while "1"  (timeout="200")
[03:09:15.524]      // while-condition  =>  TRUE
[03:09:15.524]      // while "1"  (timeout="200")
[03:09:15.524]      // while-condition  =>  TRUE
[03:09:15.524]      // while "1"  (timeout="200")
[03:09:15.524]      // while-condition  =>  TRUE
[03:09:15.524]      // while "1"  (timeout="200")
[03:09:15.525]      // while-condition  =>  TRUE
[03:09:15.525]      // while "1"  (timeout="200")
[03:09:15.525]      // while-condition  =>  TRUE
[03:09:15.525]      // while "1"  (timeout="200")
[03:09:15.525]      // while-condition  =>  TRUE
[03:09:15.525]      // while "1"  (timeout="200")
[03:09:15.525]      // while-condition  =>  TRUE
[03:09:15.525]      // while "1"  (timeout="200")
[03:09:15.525]      // while-condition  =>  TRUE
[03:09:15.525]      // while "1"  (timeout="200")
[03:09:15.525]      // while-condition  =>  TRUE
[03:09:15.526]      // while "1"  (timeout="200")
[03:09:15.526]      // while-condition  =>  TRUE
[03:09:15.527]      // while "1"  (timeout="200")
[03:09:15.527]      // while-condition  =>  TRUE
[03:09:15.527]      // while "1"  (timeout="200")
[03:09:15.527]      // while-condition  =>  TRUE
[03:09:15.527]      // while "1"  (timeout="200")
[03:09:15.527]      // while-condition  =>  TRUE
[03:09:15.527]      // while "1"  (timeout="200")
[03:09:15.527]      // while-condition  =>  TRUE
[03:09:15.528]      // while "1"  (timeout="200")
[03:09:15.528]      // while-condition  =>  TRUE
[03:09:15.528]      // while "1"  (timeout="200")
[03:09:15.528]      // while-condition  =>  TRUE
[03:09:15.528]      // while "1"  (timeout="200")
[03:09:15.528]      // while-condition  =>  TRUE
[03:09:15.529]      // while "1"  (timeout="200")
[03:09:15.529]      // while-condition  =>  TRUE
[03:09:15.529]      // while "1"  (timeout="200")
[03:09:15.529]      // while-condition  =>  TRUE
[03:09:15.529]      // while "1"  (timeout="200")
[03:09:15.529]      // while-condition  =>  TRUE
[03:09:15.529]      // while "1"  (timeout="200")
[03:09:15.529]      // while-condition  =>  TRUE
[03:09:15.529]      // while "1"  (timeout="200")
[03:09:15.529]      // while-condition  =>  TRUE
[03:09:15.530]      // while "1"  (timeout="200")
[03:09:15.530]      // while-condition  =>  TRUE
[03:09:15.530]      // while "1"  (timeout="200")
[03:09:15.530]      // while-condition  =>  TRUE
[03:09:15.530]      // while "1"  (timeout="200")
[03:09:15.530]      // while-condition  =>  TRUE
[03:09:15.530]      // while "1"  (timeout="200")
[03:09:15.530]      // while-condition  =>  TRUE
[03:09:15.530]      // while "1"  (timeout="200")
[03:09:15.530]      // while-condition  =>  TRUE
[03:09:15.530]      // while "1"  (timeout="200")
[03:09:15.531]      // while-condition  =>  TRUE
[03:09:15.531]      // while "1"  (timeout="200")
[03:09:15.531]      // while-condition  =>  TRUE
[03:09:15.531]      // while "1"  (timeout="200")
[03:09:15.531]      // while-condition  =>  TRUE
[03:09:15.531]      // while "1"  (timeout="200")
[03:09:15.531]      // while-condition  =>  TRUE
[03:09:15.531]      // while "1"  (timeout="200")
[03:09:15.531]      // while-condition  =>  TRUE
[03:09:15.531]      // while "1"  (timeout="200")
[03:09:15.531]      // while-condition  =>  TRUE
[03:09:15.531]      // while "1"  (timeout="200")
[03:09:15.532]      // while-condition  =>  TRUE
[03:09:15.532]      // while "1"  (timeout="200")
[03:09:15.532]      // while-condition  =>  TRUE
[03:09:15.532]      // while "1"  (timeout="200")
[03:09:15.532]      // while-condition  =>  TRUE
[03:09:15.532]      // while "1"  (timeout="200")
[03:09:15.532]      // while-condition  =>  TRUE
[03:09:15.532]      // while "1"  (timeout="200")
[03:09:15.532]      // while-condition  =>  TRUE
[03:09:15.532]      // while "1"  (timeout="200")
[03:09:15.532]      // while-condition  =>  TRUE
[03:09:15.532]      // while "1"  (timeout="200")
[03:09:15.533]      // while-condition  =>  TRUE
[03:09:15.533]      // while "1"  (timeout="200")
[03:09:15.533]      // while  =>  TIMEOUT
[03:09:15.533]      // end while "1"
[03:09:15.533]    </control>
[03:09:15.533]    <control if="canReadPins" while="" timeout="0" info="">
[03:09:15.533]      // if-block "canReadPins"
[03:09:15.533]        // =>  TRUE
[03:09:15.533]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:09:15.533]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:09:15.536]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:09:15.537]        // while-condition  =>  FALSE
[03:09:15.537]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:09:15.537]      </control>
[03:09:15.537]      // end if-block "canReadPins"
[03:09:15.537]    </control>
[03:09:15.538]    <control if="!canReadPins" while="" timeout="0" info="">
[03:09:15.538]      // if-block "!canReadPins"
[03:09:15.538]        // =>  FALSE
[03:09:15.538]      // skip if-block "!canReadPins"
[03:09:15.538]    </control>
[03:09:15.538]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:09:15.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:09:15.539]        // =>  TRUE
[03:09:15.539]      <block atomic="false" info="">
[03:09:15.539]        WriteAP(0x00, 0x190008);
[03:09:15.543]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:09:15.543]        WriteAP(0xF0, 0x01);
[03:09:15.548]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:09:15.548]      </block>
[03:09:15.549]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:09:15.549]    </control>
[03:09:15.549]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:09:15.549]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:09:15.549]        // =>  FALSE
[03:09:15.549]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:09:15.549]    </control>
[03:09:15.549]    <block atomic="false" info="">
[03:09:15.549]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:09:15.554]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:09:15.555]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:09:15.555]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:09:15.556]      __ap = 0; //lets make sure we reset the access point selection
[03:09:15.556]        // -> [__ap <= 0x00000000]
[03:09:15.556]    </block>
[03:09:15.556]  </sequence>
[03:09:15.556]  
[03:09:15.588]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:09:15.588]  
[03:09:15.590]  <debugvars>
[03:09:15.590]    // Pre-defined
[03:09:15.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:15.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:09:15.590]    __dp=0x00000000
[03:09:15.590]    __ap=0x00000000
[03:09:15.590]    __traceout=0x00000000      (Trace Disabled)
[03:09:15.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:15.590]    __FlashAddr=0x00000000
[03:09:15.590]    __FlashLen=0x00000000
[03:09:15.591]    __FlashArg=0x00000000
[03:09:15.591]    __FlashOp=0x00000000
[03:09:15.591]    __Result=0x00000000
[03:09:15.591]  </debugvars>
[03:09:15.591]  
[03:09:15.591]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:09:15.591]    <block atomic="false" info="">
[03:09:15.591]      __var deviceID = 0;
[03:09:15.591]        // -> [deviceID <= 0x00000000]
[03:09:15.591]      __var version = 0;
[03:09:15.592]        // -> [version <= 0x00000000]
[03:09:15.592]      __var partNum = 0;
[03:09:15.592]        // -> [partNum <= 0x00000000]
[03:09:15.592]      __var manuf = 0;
[03:09:15.592]        // -> [manuf <= 0x00000000]
[03:09:15.592]      __var isMSPM0G1X0X_G3X0X = 0;
[03:09:15.592]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:09:15.592]      __var isProduction = 0;
[03:09:15.592]        // -> [isProduction <= 0x00000000]
[03:09:15.592]      __var continueId = 0;
[03:09:15.592]        // -> [continueId <= 0x00000000]
[03:09:15.593]      deviceID =   Read32(0x41C40004);
[03:09:15.599]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:09:15.599]        // -> [deviceID <= 0x2BB8802F]
[03:09:15.599]      version = deviceID >> 28;
[03:09:15.599]        // -> [version <= 0x00000002]
[03:09:15.599]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:09:15.599]        // -> [partNum <= 0x0000BB88]
[03:09:15.599]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:09:15.600]        // -> [manuf <= 0x00000017]
[03:09:15.600]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:09:15.600]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:09:15.600]      isProduction = (version > 0);
[03:09:15.600]        // -> [isProduction <= 0x00000001]
[03:09:15.600]    </block>
[03:09:15.600]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:09:15.600]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:09:15.600]        // =>  FALSE
[03:09:15.600]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:09:15.600]    </control>
[03:09:15.601]    <control if="continueId == 4" while="" timeout="0" info="">
[03:09:15.601]      // if-block "continueId == 4"
[03:09:15.601]        // =>  FALSE
[03:09:15.601]      // skip if-block "continueId == 4"
[03:09:15.601]    </control>
[03:09:15.601]    <control if="!isProduction" while="" timeout="0" info="">
[03:09:15.601]      // if-block "!isProduction"
[03:09:15.601]        // =>  FALSE
[03:09:15.602]      // skip if-block "!isProduction"
[03:09:15.602]    </control>
[03:09:15.602]  </sequence>
[03:09:15.602]  
[03:10:04.186]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:10:04.186]  
[03:10:04.193]  <debugvars>
[03:10:04.193]    // Pre-defined
[03:10:04.193]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:04.193]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:10:04.193]    __dp=0x00000000
[03:10:04.193]    __ap=0x00000000
[03:10:04.194]    __traceout=0x00000000      (Trace Disabled)
[03:10:04.194]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:04.194]    __FlashAddr=0x00000000
[03:10:04.194]    __FlashLen=0x00000000
[03:10:04.194]    __FlashArg=0x00000000
[03:10:04.194]    __FlashOp=0x00000000
[03:10:04.194]    __Result=0x00000000
[03:10:04.194]  </debugvars>
[03:10:04.194]  
[03:10:04.194]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:10:04.195]    <block atomic="false" info="">
[03:10:04.195]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:10:04.195]        // -> [isSWJ <= 0x00000001]
[03:10:04.196]      __var hasDormant = __protocol & 0x00020000;
[03:10:04.196]        // -> [hasDormant <= 0x00000000]
[03:10:04.196]      __var protType   = __protocol & 0x0000FFFF;
[03:10:04.196]        // -> [protType <= 0x00000002]
[03:10:04.196]    </block>
[03:10:04.196]    <control if="protType == 1" while="" timeout="0" info="">
[03:10:04.196]      // if-block "protType == 1"
[03:10:04.196]        // =>  FALSE
[03:10:04.196]      // skip if-block "protType == 1"
[03:10:04.196]    </control>
[03:10:04.196]    <control if="protType == 2" while="" timeout="0" info="">
[03:10:04.196]      // if-block "protType == 2"
[03:10:04.197]        // =>  TRUE
[03:10:04.197]      <control if="isSWJ" while="" timeout="0" info="">
[03:10:04.197]        // if-block "isSWJ"
[03:10:04.197]          // =>  TRUE
[03:10:04.197]        <control if="hasDormant" while="" timeout="0" info="">
[03:10:04.197]          // if-block "hasDormant"
[03:10:04.197]            // =>  FALSE
[03:10:04.197]          // skip if-block "hasDormant"
[03:10:04.197]        </control>
[03:10:04.198]        <control if="!hasDormant" while="" timeout="0" info="">
[03:10:04.198]          // if-block "!hasDormant"
[03:10:04.198]            // =>  TRUE
[03:10:04.198]          <block atomic="false" info="">
[03:10:04.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:10:04.199]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:10:04.200]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:10:04.201]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:10:04.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:10:04.202]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:10:04.202]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:10:04.204]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:10:04.204]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:10:04.205]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:10:04.206]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:10:04.208]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:10:04.208]          </block>
[03:10:04.208]          // end if-block "!hasDormant"
[03:10:04.209]        </control>
[03:10:04.209]        // end if-block "isSWJ"
[03:10:04.209]      </control>
[03:10:04.209]      <control if="!isSWJ" while="" timeout="0" info="">
[03:10:04.209]        // if-block "!isSWJ"
[03:10:04.209]          // =>  FALSE
[03:10:04.209]        // skip if-block "!isSWJ"
[03:10:04.209]      </control>
[03:10:04.209]      <block atomic="false" info="">
[03:10:04.209]        ReadDP(0x0);
[03:10:04.211]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:10:04.211]      </block>
[03:10:04.211]      // end if-block "protType == 2"
[03:10:04.211]    </control>
[03:10:04.211]  </sequence>
[03:10:04.211]  
[03:10:04.218]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:10:04.218]  
[03:10:04.218]  <debugvars>
[03:10:04.219]    // Pre-defined
[03:10:04.219]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:04.220]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:10:04.220]    __dp=0x00000000
[03:10:04.220]    __ap=0x00000000
[03:10:04.220]    __traceout=0x00000000      (Trace Disabled)
[03:10:04.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:04.220]    __FlashAddr=0x00000000
[03:10:04.220]    __FlashLen=0x00000000
[03:10:04.220]    __FlashArg=0x00000000
[03:10:04.220]    __FlashOp=0x00000000
[03:10:04.220]    __Result=0x00000000
[03:10:04.220]  </debugvars>
[03:10:04.220]  
[03:10:04.220]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:10:04.220]    <block atomic="false" info="">
[03:10:04.220]      __var SW_DP_ABORT       = 0x0;
[03:10:04.221]        // -> [SW_DP_ABORT <= 0x00000000]
[03:10:04.221]      __var DP_CTRL_STAT      = 0x4;
[03:10:04.221]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:10:04.221]      __var DP_SELECT         = 0x8;
[03:10:04.221]        // -> [DP_SELECT <= 0x00000008]
[03:10:04.221]      __var powered_down      = 0;
[03:10:04.221]        // -> [powered_down <= 0x00000000]
[03:10:04.221]      WriteDP(DP_SELECT, 0x00000000);
[03:10:04.223]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:10:04.223]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:10:04.225]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:10:04.225]        // -> [powered_down <= 0x00000001]
[03:10:04.225]    </block>
[03:10:04.225]    <control if="powered_down" while="" timeout="0" info="">
[03:10:04.225]      // if-block "powered_down"
[03:10:04.225]        // =>  TRUE
[03:10:04.225]      <block atomic="false" info="">
[03:10:04.226]        Message(0, "Debug/System power-up request sent");
[03:10:04.228]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:10:04.230]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:10:04.230]      </block>
[03:10:04.231]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:10:04.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:10:04.233]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:10:04.233]        // while-condition  =>  FALSE
[03:10:04.233]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:10:04.233]      </control>
[03:10:04.233]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:10:04.233]        // if-block "(__protocol & 0xFFFF) == 1"
[03:10:04.233]          // =>  FALSE
[03:10:04.233]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:10:04.233]      </control>
[03:10:04.233]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:10:04.233]        // if-block "(__protocol & 0xFFFF) == 2"
[03:10:04.233]          // =>  TRUE
[03:10:04.234]        <block atomic="false" info="">
[03:10:04.234]          Message(0, "executing SWD power up");
[03:10:04.236]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:10:04.238]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:10:04.238]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:10:04.241]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:10:04.241]        </block>
[03:10:04.241]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:10:04.241]      </control>
[03:10:04.241]      // end if-block "powered_down"
[03:10:04.241]    </control>
[03:10:04.241]    <block atomic="false" info="">
[03:10:04.241]      __var DEBUG_PORT_VAL    = 0;
[03:10:04.241]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:10:04.241]      __var ACCESS_POINT_VAL  = 0;
[03:10:04.241]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:10:04.242]      __ap = 1; 
[03:10:04.242]        // -> [__ap <= 0x00000001]
[03:10:04.242]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:10:04.246]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:10:04.246]      __ap = 4;
[03:10:04.246]        // -> [__ap <= 0x00000004]
[03:10:04.246]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:10:04.250]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:10:04.250]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:10:04.250]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:10:04.252]    </block>
[03:10:04.252]    <block atomic="false" info="">
[03:10:04.252]      __var nReset = 0x80;
[03:10:04.252]        // -> [nReset <= 0x00000080]
[03:10:04.252]      __var canReadPins = 0;
[03:10:04.252]        // -> [canReadPins <= 0x00000000]
[03:10:04.253]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:10:04.254]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:10:04.254]        // -> [canReadPins <= 0x00000001]
[03:10:04.254]    </block>
[03:10:04.254]    <control if="" while="1" timeout="200" info="">
[03:10:04.254]      // while "1"  (timeout="200")
[03:10:04.255]      // while-condition  =>  TRUE
[03:10:04.255]      // while "1"  (timeout="200")
[03:10:04.255]      // while-condition  =>  TRUE
[03:10:04.255]      // while "1"  (timeout="200")
[03:10:04.255]      // while-condition  =>  TRUE
[03:10:04.255]      // while "1"  (timeout="200")
[03:10:04.255]      // while-condition  =>  TRUE
[03:10:04.255]      // while "1"  (timeout="200")
[03:10:04.255]      // while-condition  =>  TRUE
[03:10:04.255]      // while "1"  (timeout="200")
[03:10:04.255]      // while-condition  =>  TRUE
[03:10:04.256]      // while "1"  (timeout="200")
[03:10:04.256]      // while-condition  =>  TRUE
[03:10:04.256]      // while "1"  (timeout="200")
[03:10:04.256]      // while-condition  =>  TRUE
[03:10:04.256]      // while "1"  (timeout="200")
[03:10:04.256]      // while-condition  =>  TRUE
[03:10:04.257]      // while "1"  (timeout="200")
[03:10:04.257]      // while-condition  =>  TRUE
[03:10:04.257]      // while "1"  (timeout="200")
[03:10:04.257]      // while-condition  =>  TRUE
[03:10:04.257]      // while "1"  (timeout="200")
[03:10:04.257]      // while-condition  =>  TRUE
[03:10:04.257]      // while "1"  (timeout="200")
[03:10:04.257]      // while-condition  =>  TRUE
[03:10:04.257]      // while "1"  (timeout="200")
[03:10:04.257]      // while-condition  =>  TRUE
[03:10:04.257]      // while "1"  (timeout="200")
[03:10:04.258]      // while-condition  =>  TRUE
[03:10:04.258]      // while "1"  (timeout="200")
[03:10:04.258]      // while-condition  =>  TRUE
[03:10:04.258]      // while "1"  (timeout="200")
[03:10:04.258]      // while-condition  =>  TRUE
[03:10:04.258]      // while "1"  (timeout="200")
[03:10:04.258]      // while-condition  =>  TRUE
[03:10:04.258]      // while "1"  (timeout="200")
[03:10:04.258]      // while-condition  =>  TRUE
[03:10:04.258]      // while "1"  (timeout="200")
[03:10:04.258]      // while-condition  =>  TRUE
[03:10:04.258]      // while "1"  (timeout="200")
[03:10:04.259]      // while-condition  =>  TRUE
[03:10:04.259]      // while "1"  (timeout="200")
[03:10:04.259]      // while-condition  =>  TRUE
[03:10:04.259]      // while "1"  (timeout="200")
[03:10:04.259]      // while-condition  =>  TRUE
[03:10:04.259]      // while "1"  (timeout="200")
[03:10:04.259]      // while-condition  =>  TRUE
[03:10:04.260]      // while "1"  (timeout="200")
[03:10:04.260]      // while-condition  =>  TRUE
[03:10:04.260]      // while "1"  (timeout="200")
[03:10:04.260]      // while-condition  =>  TRUE
[03:10:04.260]      // while "1"  (timeout="200")
[03:10:04.260]      // while-condition  =>  TRUE
[03:10:04.260]      // while "1"  (timeout="200")
[03:10:04.260]      // while-condition  =>  TRUE
[03:10:04.260]      // while "1"  (timeout="200")
[03:10:04.260]      // while-condition  =>  TRUE
[03:10:04.261]      // while "1"  (timeout="200")
[03:10:04.261]      // while-condition  =>  TRUE
[03:10:04.261]      // while "1"  (timeout="200")
[03:10:04.261]      // while-condition  =>  TRUE
[03:10:04.261]      // while "1"  (timeout="200")
[03:10:04.261]      // while-condition  =>  TRUE
[03:10:04.261]      // while "1"  (timeout="200")
[03:10:04.261]      // while-condition  =>  TRUE
[03:10:04.261]      // while "1"  (timeout="200")
[03:10:04.261]      // while-condition  =>  TRUE
[03:10:04.261]      // while "1"  (timeout="200")
[03:10:04.262]      // while-condition  =>  TRUE
[03:10:04.262]      // while "1"  (timeout="200")
[03:10:04.262]      // while-condition  =>  TRUE
[03:10:04.262]      // while "1"  (timeout="200")
[03:10:04.262]      // while-condition  =>  TRUE
[03:10:04.262]      // while "1"  (timeout="200")
[03:10:04.262]      // while-condition  =>  TRUE
[03:10:04.262]      // while "1"  (timeout="200")
[03:10:04.262]      // while-condition  =>  TRUE
[03:10:04.262]      // while "1"  (timeout="200")
[03:10:04.262]      // while-condition  =>  TRUE
[03:10:04.262]      // while "1"  (timeout="200")
[03:10:04.262]      // while-condition  =>  TRUE
[03:10:04.263]      // while "1"  (timeout="200")
[03:10:04.263]      // while-condition  =>  TRUE
[03:10:04.263]      // while "1"  (timeout="200")
[03:10:04.263]      // while-condition  =>  TRUE
[03:10:04.263]      // while "1"  (timeout="200")
[03:10:04.263]      // while-condition  =>  TRUE
[03:10:04.263]      // while "1"  (timeout="200")
[03:10:04.263]      // while-condition  =>  TRUE
[03:10:04.263]      // while "1"  (timeout="200")
[03:10:04.263]      // while-condition  =>  TRUE
[03:10:04.263]      // while "1"  (timeout="200")
[03:10:04.263]      // while-condition  =>  TRUE
[03:10:04.263]      // while "1"  (timeout="200")
[03:10:04.264]      // while-condition  =>  TRUE
[03:10:04.264]      // while "1"  (timeout="200")
[03:10:04.264]      // while-condition  =>  TRUE
[03:10:04.264]      // while "1"  (timeout="200")
[03:10:04.264]      // while-condition  =>  TRUE
[03:10:04.264]      // while "1"  (timeout="200")
[03:10:04.264]      // while-condition  =>  TRUE
[03:10:04.264]      // while "1"  (timeout="200")
[03:10:04.266]      // while-condition  =>  TRUE
[03:10:04.266]      // while "1"  (timeout="200")
[03:10:04.266]      // while-condition  =>  TRUE
[03:10:04.266]      // while "1"  (timeout="200")
[03:10:04.266]      // while-condition  =>  TRUE
[03:10:04.266]      // while "1"  (timeout="200")
[03:10:04.266]      // while-condition  =>  TRUE
[03:10:04.266]      // while "1"  (timeout="200")
[03:10:04.266]      // while-condition  =>  TRUE
[03:10:04.266]      // while "1"  (timeout="200")
[03:10:04.266]      // while-condition  =>  TRUE
[03:10:04.267]      // while "1"  (timeout="200")
[03:10:04.267]      // while  =>  TIMEOUT
[03:10:04.267]      // end while "1"
[03:10:04.267]    </control>
[03:10:04.267]    <control if="canReadPins" while="" timeout="0" info="">
[03:10:04.267]      // if-block "canReadPins"
[03:10:04.267]        // =>  TRUE
[03:10:04.267]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:10:04.267]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:10:04.268]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:10:04.268]        // while-condition  =>  FALSE
[03:10:04.268]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:10:04.268]      </control>
[03:10:04.268]      // end if-block "canReadPins"
[03:10:04.268]    </control>
[03:10:04.268]    <control if="!canReadPins" while="" timeout="0" info="">
[03:10:04.268]      // if-block "!canReadPins"
[03:10:04.269]        // =>  FALSE
[03:10:04.269]      // skip if-block "!canReadPins"
[03:10:04.269]    </control>
[03:10:04.269]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:10:04.269]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:10:04.269]        // =>  TRUE
[03:10:04.269]      <block atomic="false" info="">
[03:10:04.269]        WriteAP(0x00, 0x190008);
[03:10:04.272]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:10:04.272]        WriteAP(0xF0, 0x01);
[03:10:04.275]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:10:04.275]      </block>
[03:10:04.275]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:10:04.275]    </control>
[03:10:04.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:10:04.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:10:04.275]        // =>  FALSE
[03:10:04.275]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:10:04.275]    </control>
[03:10:04.275]    <block atomic="false" info="">
[03:10:04.275]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:10:04.282]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:10:04.282]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:10:04.282]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:10:04.284]      __ap = 0; //lets make sure we reset the access point selection
[03:10:04.284]        // -> [__ap <= 0x00000000]
[03:10:04.285]    </block>
[03:10:04.285]  </sequence>
[03:10:04.285]  
[03:10:04.310]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:10:04.310]  
[03:10:04.310]  <debugvars>
[03:10:04.310]    // Pre-defined
[03:10:04.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:04.310]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:10:04.310]    __dp=0x00000000
[03:10:04.310]    __ap=0x00000000
[03:10:04.310]    __traceout=0x00000000      (Trace Disabled)
[03:10:04.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:04.310]    __FlashAddr=0x00000000
[03:10:04.310]    __FlashLen=0x00000000
[03:10:04.310]    __FlashArg=0x00000000
[03:10:04.310]    __FlashOp=0x00000000
[03:10:04.311]    __Result=0x00000000
[03:10:04.311]  </debugvars>
[03:10:04.311]  
[03:10:04.311]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:10:04.311]    <block atomic="false" info="">
[03:10:04.311]      __var deviceID = 0;
[03:10:04.311]        // -> [deviceID <= 0x00000000]
[03:10:04.311]      __var version = 0;
[03:10:04.311]        // -> [version <= 0x00000000]
[03:10:04.311]      __var partNum = 0;
[03:10:04.311]        // -> [partNum <= 0x00000000]
[03:10:04.312]      __var manuf = 0;
[03:10:04.312]        // -> [manuf <= 0x00000000]
[03:10:04.312]      __var isMSPM0G1X0X_G3X0X = 0;
[03:10:04.312]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:10:04.312]      __var isProduction = 0;
[03:10:04.312]        // -> [isProduction <= 0x00000000]
[03:10:04.312]      __var continueId = 0;
[03:10:04.312]        // -> [continueId <= 0x00000000]
[03:10:04.312]      deviceID =   Read32(0x41C40004);
[03:10:04.326]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:10:04.326]        // -> [deviceID <= 0x2BB8802F]
[03:10:04.326]      version = deviceID >> 28;
[03:10:04.327]        // -> [version <= 0x00000002]
[03:10:04.327]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:10:04.327]        // -> [partNum <= 0x0000BB88]
[03:10:04.327]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:10:04.327]        // -> [manuf <= 0x00000017]
[03:10:04.327]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:10:04.327]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:10:04.327]      isProduction = (version > 0);
[03:10:04.327]        // -> [isProduction <= 0x00000001]
[03:10:04.327]    </block>
[03:10:04.327]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:10:04.328]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:10:04.328]        // =>  FALSE
[03:10:04.328]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:10:04.328]    </control>
[03:10:04.328]    <control if="continueId == 4" while="" timeout="0" info="">
[03:10:04.328]      // if-block "continueId == 4"
[03:10:04.328]        // =>  FALSE
[03:10:04.328]      // skip if-block "continueId == 4"
[03:10:04.328]    </control>
[03:10:04.328]    <control if="!isProduction" while="" timeout="0" info="">
[03:10:04.328]      // if-block "!isProduction"
[03:10:04.328]        // =>  FALSE
[03:10:04.328]      // skip if-block "!isProduction"
[03:10:04.329]    </control>
[03:10:04.329]  </sequence>
[03:10:04.329]  
[03:11:23.385]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:11:23.385]  
[03:11:23.385]  <debugvars>
[03:11:23.385]    // Pre-defined
[03:11:23.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:11:23.386]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:11:23.386]    __dp=0x00000000
[03:11:23.386]    __ap=0x00000000
[03:11:23.386]    __traceout=0x00000000      (Trace Disabled)
[03:11:23.386]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:11:23.386]    __FlashAddr=0x00000000
[03:11:23.386]    __FlashLen=0x00000000
[03:11:23.386]    __FlashArg=0x00000000
[03:11:23.386]    __FlashOp=0x00000000
[03:11:23.386]    __Result=0x00000000
[03:11:23.386]  </debugvars>
[03:11:23.387]  
[03:11:23.387]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:11:23.387]    <block atomic="false" info="">
[03:11:23.387]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:11:23.387]        // -> [isSWJ <= 0x00000001]
[03:11:23.387]      __var hasDormant = __protocol & 0x00020000;
[03:11:23.388]        // -> [hasDormant <= 0x00000000]
[03:11:23.388]      __var protType   = __protocol & 0x0000FFFF;
[03:11:23.388]        // -> [protType <= 0x00000002]
[03:11:23.388]    </block>
[03:11:23.388]    <control if="protType == 1" while="" timeout="0" info="">
[03:11:23.388]      // if-block "protType == 1"
[03:11:23.388]        // =>  FALSE
[03:11:23.388]      // skip if-block "protType == 1"
[03:11:23.388]    </control>
[03:11:23.388]    <control if="protType == 2" while="" timeout="0" info="">
[03:11:23.388]      // if-block "protType == 2"
[03:11:23.388]        // =>  TRUE
[03:11:23.388]      <control if="isSWJ" while="" timeout="0" info="">
[03:11:23.388]        // if-block "isSWJ"
[03:11:23.388]          // =>  TRUE
[03:11:23.390]        <control if="hasDormant" while="" timeout="0" info="">
[03:11:23.390]          // if-block "hasDormant"
[03:11:23.390]            // =>  FALSE
[03:11:23.390]          // skip if-block "hasDormant"
[03:11:23.390]        </control>
[03:11:23.390]        <control if="!hasDormant" while="" timeout="0" info="">
[03:11:23.390]          // if-block "!hasDormant"
[03:11:23.390]            // =>  TRUE
[03:11:23.390]          <block atomic="false" info="">
[03:11:23.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:11:23.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:11:23.392]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:11:23.394]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:11:23.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:11:23.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:11:23.396]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:11:23.398]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:11:23.398]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:11:23.399]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:11:23.400]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:11:23.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:11:23.402]          </block>
[03:11:23.402]          // end if-block "!hasDormant"
[03:11:23.402]        </control>
[03:11:23.403]        // end if-block "isSWJ"
[03:11:23.403]      </control>
[03:11:23.403]      <control if="!isSWJ" while="" timeout="0" info="">
[03:11:23.403]        // if-block "!isSWJ"
[03:11:23.403]          // =>  FALSE
[03:11:23.403]        // skip if-block "!isSWJ"
[03:11:23.403]      </control>
[03:11:23.403]      <block atomic="false" info="">
[03:11:23.403]        ReadDP(0x0);
[03:11:23.404]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:11:23.404]      </block>
[03:11:23.404]      // end if-block "protType == 2"
[03:11:23.405]    </control>
[03:11:23.405]  </sequence>
[03:11:23.405]  
[03:11:23.410]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:11:23.410]  
[03:11:23.410]  <debugvars>
[03:11:23.410]    // Pre-defined
[03:11:23.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:11:23.410]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:11:23.410]    __dp=0x00000000
[03:11:23.410]    __ap=0x00000000
[03:11:23.411]    __traceout=0x00000000      (Trace Disabled)
[03:11:23.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:11:23.411]    __FlashAddr=0x00000000
[03:11:23.411]    __FlashLen=0x00000000
[03:11:23.411]    __FlashArg=0x00000000
[03:11:23.411]    __FlashOp=0x00000000
[03:11:23.411]    __Result=0x00000000
[03:11:23.411]  </debugvars>
[03:11:23.412]  
[03:11:23.412]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:11:23.412]    <block atomic="false" info="">
[03:11:23.412]      __var SW_DP_ABORT       = 0x0;
[03:11:23.412]        // -> [SW_DP_ABORT <= 0x00000000]
[03:11:23.412]      __var DP_CTRL_STAT      = 0x4;
[03:11:23.413]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:11:23.413]      __var DP_SELECT         = 0x8;
[03:11:23.413]        // -> [DP_SELECT <= 0x00000008]
[03:11:23.413]      __var powered_down      = 0;
[03:11:23.413]        // -> [powered_down <= 0x00000000]
[03:11:23.413]      WriteDP(DP_SELECT, 0x00000000);
[03:11:23.415]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:11:23.415]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:11:23.417]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:11:23.417]        // -> [powered_down <= 0x00000001]
[03:11:23.417]    </block>
[03:11:23.418]    <control if="powered_down" while="" timeout="0" info="">
[03:11:23.418]      // if-block "powered_down"
[03:11:23.418]        // =>  TRUE
[03:11:23.418]      <block atomic="false" info="">
[03:11:23.418]        Message(0, "Debug/System power-up request sent");
[03:11:23.420]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:11:23.422]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:11:23.423]      </block>
[03:11:23.423]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:11:23.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:11:23.424]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:11:23.425]        // while-condition  =>  FALSE
[03:11:23.425]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:11:23.425]      </control>
[03:11:23.425]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:11:23.425]        // if-block "(__protocol & 0xFFFF) == 1"
[03:11:23.425]          // =>  FALSE
[03:11:23.425]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:11:23.425]      </control>
[03:11:23.425]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:11:23.425]        // if-block "(__protocol & 0xFFFF) == 2"
[03:11:23.425]          // =>  TRUE
[03:11:23.426]        <block atomic="false" info="">
[03:11:23.426]          Message(0, "executing SWD power up");
[03:11:23.428]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:11:23.430]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:11:23.430]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:11:23.432]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:11:23.432]        </block>
[03:11:23.432]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:11:23.432]      </control>
[03:11:23.432]      // end if-block "powered_down"
[03:11:23.432]    </control>
[03:11:23.433]    <block atomic="false" info="">
[03:11:23.433]      __var DEBUG_PORT_VAL    = 0;
[03:11:23.433]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:11:23.433]      __var ACCESS_POINT_VAL  = 0;
[03:11:23.433]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:11:23.433]      __ap = 1; 
[03:11:23.433]        // -> [__ap <= 0x00000001]
[03:11:23.433]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:11:23.443]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:11:23.443]      __ap = 4;
[03:11:23.443]        // -> [__ap <= 0x00000004]
[03:11:23.443]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:11:23.447]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:11:23.448]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:11:23.448]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:11:23.450]    </block>
[03:11:23.450]    <block atomic="false" info="">
[03:11:23.450]      __var nReset = 0x80;
[03:11:23.451]        // -> [nReset <= 0x00000080]
[03:11:23.451]      __var canReadPins = 0;
[03:11:23.451]        // -> [canReadPins <= 0x00000000]
[03:11:23.451]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:11:23.452]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:11:23.453]        // -> [canReadPins <= 0x00000001]
[03:11:23.453]    </block>
[03:11:23.453]    <control if="" while="1" timeout="200" info="">
[03:11:23.453]      // while "1"  (timeout="200")
[03:11:23.453]      // while-condition  =>  TRUE
[03:11:23.453]      // while "1"  (timeout="200")
[03:11:23.453]      // while-condition  =>  TRUE
[03:11:23.453]      // while "1"  (timeout="200")
[03:11:23.453]      // while-condition  =>  TRUE
[03:11:23.454]      // while "1"  (timeout="200")
[03:11:23.454]      // while-condition  =>  TRUE
[03:11:23.454]      // while "1"  (timeout="200")
[03:11:23.454]      // while-condition  =>  TRUE
[03:11:23.454]      // while "1"  (timeout="200")
[03:11:23.454]      // while-condition  =>  TRUE
[03:11:23.454]      // while "1"  (timeout="200")
[03:11:23.454]      // while-condition  =>  TRUE
[03:11:23.455]      // while "1"  (timeout="200")
[03:11:23.455]      // while  =>  TIMEOUT
[03:11:23.455]      // end while "1"
[03:11:23.455]    </control>
[03:11:23.455]    <control if="canReadPins" while="" timeout="0" info="">
[03:11:23.455]      // if-block "canReadPins"
[03:11:23.455]        // =>  TRUE
[03:11:23.455]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:11:23.455]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:11:23.457]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:11:23.457]        // while-condition  =>  FALSE
[03:11:23.457]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:11:23.457]      </control>
[03:11:23.457]      // end if-block "canReadPins"
[03:11:23.457]    </control>
[03:11:23.457]    <control if="!canReadPins" while="" timeout="0" info="">
[03:11:23.457]      // if-block "!canReadPins"
[03:11:23.457]        // =>  FALSE
[03:11:23.457]      // skip if-block "!canReadPins"
[03:11:23.458]    </control>
[03:11:23.458]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:11:23.458]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:11:23.458]        // =>  TRUE
[03:11:23.458]      <block atomic="false" info="">
[03:11:23.458]        WriteAP(0x00, 0x190008);
[03:11:23.461]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:11:23.461]        WriteAP(0xF0, 0x01);
[03:11:23.465]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:11:23.465]      </block>
[03:11:23.465]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:11:23.465]    </control>
[03:11:23.465]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:11:23.466]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:11:23.466]        // =>  FALSE
[03:11:23.466]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:11:23.466]    </control>
[03:11:23.466]    <block atomic="false" info="">
[03:11:23.466]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:11:23.470]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:11:23.470]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:11:23.470]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:11:23.473]      __ap = 0; //lets make sure we reset the access point selection
[03:11:23.473]        // -> [__ap <= 0x00000000]
[03:11:23.473]    </block>
[03:11:23.473]  </sequence>
[03:11:23.473]  
[03:11:23.518]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:11:23.518]  
[03:11:23.518]  <debugvars>
[03:11:23.518]    // Pre-defined
[03:11:23.518]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:11:23.519]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:11:23.519]    __dp=0x00000000
[03:11:23.519]    __ap=0x00000000
[03:11:23.519]    __traceout=0x00000000      (Trace Disabled)
[03:11:23.519]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:11:23.519]    __FlashAddr=0x00000000
[03:11:23.519]    __FlashLen=0x00000000
[03:11:23.519]    __FlashArg=0x00000000
[03:11:23.520]    __FlashOp=0x00000000
[03:11:23.520]    __Result=0x00000000
[03:11:23.520]  </debugvars>
[03:11:23.520]  
[03:11:23.520]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:11:23.520]    <block atomic="false" info="">
[03:11:23.520]      __var deviceID = 0;
[03:11:23.521]        // -> [deviceID <= 0x00000000]
[03:11:23.521]      __var version = 0;
[03:11:23.521]        // -> [version <= 0x00000000]
[03:11:23.521]      __var partNum = 0;
[03:11:23.521]        // -> [partNum <= 0x00000000]
[03:11:23.521]      __var manuf = 0;
[03:11:23.521]        // -> [manuf <= 0x00000000]
[03:11:23.521]      __var isMSPM0G1X0X_G3X0X = 0;
[03:11:23.522]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:11:23.522]      __var isProduction = 0;
[03:11:23.522]        // -> [isProduction <= 0x00000000]
[03:11:23.522]      __var continueId = 0;
[03:11:23.522]        // -> [continueId <= 0x00000000]
[03:11:23.522]      deviceID =   Read32(0x41C40004);
[03:11:23.528]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:11:23.528]        // -> [deviceID <= 0x2BB8802F]
[03:11:23.528]      version = deviceID >> 28;
[03:11:23.528]        // -> [version <= 0x00000002]
[03:11:23.528]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:11:23.528]        // -> [partNum <= 0x0000BB88]
[03:11:23.528]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:11:23.528]        // -> [manuf <= 0x00000017]
[03:11:23.529]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:11:23.529]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:11:23.529]      isProduction = (version > 0);
[03:11:23.529]        // -> [isProduction <= 0x00000001]
[03:11:23.529]    </block>
[03:11:23.529]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:11:23.529]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:11:23.529]        // =>  FALSE
[03:11:23.529]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:11:23.529]    </control>
[03:11:23.530]    <control if="continueId == 4" while="" timeout="0" info="">
[03:11:23.530]      // if-block "continueId == 4"
[03:11:23.530]        // =>  FALSE
[03:11:23.530]      // skip if-block "continueId == 4"
[03:11:23.530]    </control>
[03:11:23.530]    <control if="!isProduction" while="" timeout="0" info="">
[03:11:23.530]      // if-block "!isProduction"
[03:11:23.531]        // =>  FALSE
[03:11:23.531]      // skip if-block "!isProduction"
[03:11:23.531]    </control>
[03:11:23.532]  </sequence>
[03:11:23.532]  
[03:12:57.876]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:12:57.876]  
[03:12:57.876]  <debugvars>
[03:12:57.876]    // Pre-defined
[03:12:57.877]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:57.877]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:12:57.877]    __dp=0x00000000
[03:12:57.877]    __ap=0x00000000
[03:12:57.877]    __traceout=0x00000000      (Trace Disabled)
[03:12:57.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:57.877]    __FlashAddr=0x00000000
[03:12:57.877]    __FlashLen=0x00000000
[03:12:57.877]    __FlashArg=0x00000000
[03:12:57.877]    __FlashOp=0x00000000
[03:12:57.877]    __Result=0x00000000
[03:12:57.877]  </debugvars>
[03:12:57.877]  
[03:12:57.879]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:12:57.879]    <block atomic="false" info="">
[03:12:57.879]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:12:57.879]        // -> [isSWJ <= 0x00000001]
[03:12:57.879]      __var hasDormant = __protocol & 0x00020000;
[03:12:57.879]        // -> [hasDormant <= 0x00000000]
[03:12:57.880]      __var protType   = __protocol & 0x0000FFFF;
[03:12:57.880]        // -> [protType <= 0x00000002]
[03:12:57.880]    </block>
[03:12:57.880]    <control if="protType == 1" while="" timeout="0" info="">
[03:12:57.880]      // if-block "protType == 1"
[03:12:57.880]        // =>  FALSE
[03:12:57.880]      // skip if-block "protType == 1"
[03:12:57.881]    </control>
[03:12:57.881]    <control if="protType == 2" while="" timeout="0" info="">
[03:12:57.881]      // if-block "protType == 2"
[03:12:57.881]        // =>  TRUE
[03:12:57.881]      <control if="isSWJ" while="" timeout="0" info="">
[03:12:57.881]        // if-block "isSWJ"
[03:12:57.881]          // =>  TRUE
[03:12:57.882]        <control if="hasDormant" while="" timeout="0" info="">
[03:12:57.882]          // if-block "hasDormant"
[03:12:57.882]            // =>  FALSE
[03:12:57.882]          // skip if-block "hasDormant"
[03:12:57.882]        </control>
[03:12:57.882]        <control if="!hasDormant" while="" timeout="0" info="">
[03:12:57.882]          // if-block "!hasDormant"
[03:12:57.882]            // =>  TRUE
[03:12:57.882]          <block atomic="false" info="">
[03:12:57.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:12:57.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:12:57.886]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:12:57.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:12:57.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:12:57.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:12:57.889]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:12:57.890]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:12:57.891]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:12:57.892]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:12:57.892]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:12:57.894]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:12:57.894]          </block>
[03:12:57.894]          // end if-block "!hasDormant"
[03:12:57.894]        </control>
[03:12:57.894]        // end if-block "isSWJ"
[03:12:57.894]      </control>
[03:12:57.895]      <control if="!isSWJ" while="" timeout="0" info="">
[03:12:57.895]        // if-block "!isSWJ"
[03:12:57.895]          // =>  FALSE
[03:12:57.895]        // skip if-block "!isSWJ"
[03:12:57.895]      </control>
[03:12:57.895]      <block atomic="false" info="">
[03:12:57.895]        ReadDP(0x0);
[03:12:57.897]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:12:57.897]      </block>
[03:12:57.897]      // end if-block "protType == 2"
[03:12:57.897]    </control>
[03:12:57.897]  </sequence>
[03:12:57.897]  
[03:12:57.900]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:12:57.900]  
[03:12:57.900]  <debugvars>
[03:12:57.900]    // Pre-defined
[03:12:57.900]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:57.900]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:12:57.901]    __dp=0x00000000
[03:12:57.901]    __ap=0x00000000
[03:12:57.901]    __traceout=0x00000000      (Trace Disabled)
[03:12:57.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:57.901]    __FlashAddr=0x00000000
[03:12:57.901]    __FlashLen=0x00000000
[03:12:57.901]    __FlashArg=0x00000000
[03:12:57.901]    __FlashOp=0x00000000
[03:12:57.902]    __Result=0x00000000
[03:12:57.902]  </debugvars>
[03:12:57.902]  
[03:12:57.902]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:12:57.902]    <block atomic="false" info="">
[03:12:57.902]      __var SW_DP_ABORT       = 0x0;
[03:12:57.902]        // -> [SW_DP_ABORT <= 0x00000000]
[03:12:57.902]      __var DP_CTRL_STAT      = 0x4;
[03:12:57.902]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:12:57.902]      __var DP_SELECT         = 0x8;
[03:12:57.902]        // -> [DP_SELECT <= 0x00000008]
[03:12:57.902]      __var powered_down      = 0;
[03:12:57.902]        // -> [powered_down <= 0x00000000]
[03:12:57.902]      WriteDP(DP_SELECT, 0x00000000);
[03:12:57.906]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:12:57.906]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:12:57.907]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:12:57.907]        // -> [powered_down <= 0x00000001]
[03:12:57.907]    </block>
[03:12:57.907]    <control if="powered_down" while="" timeout="0" info="">
[03:12:57.907]      // if-block "powered_down"
[03:12:57.908]        // =>  TRUE
[03:12:57.908]      <block atomic="false" info="">
[03:12:57.908]        Message(0, "Debug/System power-up request sent");
[03:12:57.910]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:12:57.911]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:12:57.912]      </block>
[03:12:57.912]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:12:57.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:12:57.914]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:12:57.914]        // while-condition  =>  FALSE
[03:12:57.914]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:12:57.914]      </control>
[03:12:57.915]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:12:57.915]        // if-block "(__protocol & 0xFFFF) == 1"
[03:12:57.915]          // =>  FALSE
[03:12:57.915]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:12:57.915]      </control>
[03:12:57.915]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:12:57.915]        // if-block "(__protocol & 0xFFFF) == 2"
[03:12:57.915]          // =>  TRUE
[03:12:57.915]        <block atomic="false" info="">
[03:12:57.915]          Message(0, "executing SWD power up");
[03:12:57.917]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:12:57.919]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:12:57.919]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:12:57.921]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:12:57.921]        </block>
[03:12:57.921]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:12:57.921]      </control>
[03:12:57.921]      // end if-block "powered_down"
[03:12:57.921]    </control>
[03:12:57.921]    <block atomic="false" info="">
[03:12:57.922]      __var DEBUG_PORT_VAL    = 0;
[03:12:57.922]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:12:57.922]      __var ACCESS_POINT_VAL  = 0;
[03:12:57.922]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:12:57.922]      __ap = 1; 
[03:12:57.922]        // -> [__ap <= 0x00000001]
[03:12:57.922]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:12:57.927]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:12:57.927]      __ap = 4;
[03:12:57.927]        // -> [__ap <= 0x00000004]
[03:12:57.927]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:12:57.931]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:12:57.931]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:12:57.931]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:12:57.933]    </block>
[03:12:57.933]    <block atomic="false" info="">
[03:12:57.933]      __var nReset = 0x80;
[03:12:57.933]        // -> [nReset <= 0x00000080]
[03:12:57.933]      __var canReadPins = 0;
[03:12:57.933]        // -> [canReadPins <= 0x00000000]
[03:12:57.933]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:12:57.935]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:12:57.935]        // -> [canReadPins <= 0x00000001]
[03:12:57.935]    </block>
[03:12:57.935]    <control if="" while="1" timeout="200" info="">
[03:12:57.935]      // while "1"  (timeout="200")
[03:12:57.935]      // while-condition  =>  TRUE
[03:12:57.935]      // while "1"  (timeout="200")
[03:12:57.935]      // while-condition  =>  TRUE
[03:12:57.935]      // while "1"  (timeout="200")
[03:12:57.935]      // while-condition  =>  TRUE
[03:12:57.937]      // while "1"  (timeout="200")
[03:12:57.937]      // while-condition  =>  TRUE
[03:12:57.937]      // while "1"  (timeout="200")
[03:12:57.937]      // while-condition  =>  TRUE
[03:12:57.937]      // while "1"  (timeout="200")
[03:12:57.937]      // while-condition  =>  TRUE
[03:12:57.937]      // while "1"  (timeout="200")
[03:12:57.937]      // while-condition  =>  TRUE
[03:12:57.937]      // while "1"  (timeout="200")
[03:12:57.937]      // while-condition  =>  TRUE
[03:12:57.937]      // while "1"  (timeout="200")
[03:12:57.937]      // while-condition  =>  TRUE
[03:12:57.937]      // while "1"  (timeout="200")
[03:12:57.938]      // while-condition  =>  TRUE
[03:12:57.938]      // while "1"  (timeout="200")
[03:12:57.938]      // while-condition  =>  TRUE
[03:12:57.938]      // while "1"  (timeout="200")
[03:12:57.938]      // while-condition  =>  TRUE
[03:12:57.938]      // while "1"  (timeout="200")
[03:12:57.938]      // while-condition  =>  TRUE
[03:12:57.938]      // while "1"  (timeout="200")
[03:12:57.938]      // while-condition  =>  TRUE
[03:12:57.938]      // while "1"  (timeout="200")
[03:12:57.938]      // while-condition  =>  TRUE
[03:12:57.939]      // while "1"  (timeout="200")
[03:12:57.939]      // while  =>  TIMEOUT
[03:12:57.939]      // end while "1"
[03:12:57.939]    </control>
[03:12:57.939]    <control if="canReadPins" while="" timeout="0" info="">
[03:12:57.939]      // if-block "canReadPins"
[03:12:57.940]        // =>  TRUE
[03:12:57.940]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:12:57.940]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:12:57.941]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:12:57.942]        // while-condition  =>  FALSE
[03:12:57.942]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:12:57.942]      </control>
[03:12:57.942]      // end if-block "canReadPins"
[03:12:57.942]    </control>
[03:12:57.942]    <control if="!canReadPins" while="" timeout="0" info="">
[03:12:57.942]      // if-block "!canReadPins"
[03:12:57.942]        // =>  FALSE
[03:12:57.943]      // skip if-block "!canReadPins"
[03:12:57.943]    </control>
[03:12:57.943]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:12:57.943]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:12:57.943]        // =>  TRUE
[03:12:57.943]      <block atomic="false" info="">
[03:12:57.944]        WriteAP(0x00, 0x190008);
[03:12:57.947]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:12:57.947]        WriteAP(0xF0, 0x01);
[03:12:57.952]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:12:57.952]      </block>
[03:12:57.952]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:12:57.952]    </control>
[03:12:57.952]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:12:57.952]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:12:57.952]        // =>  FALSE
[03:12:57.952]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:12:57.952]    </control>
[03:12:57.953]    <block atomic="false" info="">
[03:12:57.953]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:12:57.962]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:12:57.962]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:12:57.962]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:12:57.964]      __ap = 0; //lets make sure we reset the access point selection
[03:12:57.965]        // -> [__ap <= 0x00000000]
[03:12:57.965]    </block>
[03:12:57.965]  </sequence>
[03:12:57.965]  
[03:12:57.986]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:12:57.986]  
[03:12:57.986]  <debugvars>
[03:12:57.986]    // Pre-defined
[03:12:57.987]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:57.987]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:12:57.987]    __dp=0x00000000
[03:12:57.987]    __ap=0x00000000
[03:12:57.987]    __traceout=0x00000000      (Trace Disabled)
[03:12:57.987]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:57.987]    __FlashAddr=0x00000000
[03:12:57.987]    __FlashLen=0x00000000
[03:12:57.987]    __FlashArg=0x00000000
[03:12:57.988]    __FlashOp=0x00000000
[03:12:57.988]    __Result=0x00000000
[03:12:57.988]  </debugvars>
[03:12:57.988]  
[03:12:57.988]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:12:57.988]    <block atomic="false" info="">
[03:12:57.988]      __var deviceID = 0;
[03:12:57.988]        // -> [deviceID <= 0x00000000]
[03:12:57.988]      __var version = 0;
[03:12:57.988]        // -> [version <= 0x00000000]
[03:12:57.988]      __var partNum = 0;
[03:12:57.989]        // -> [partNum <= 0x00000000]
[03:12:57.989]      __var manuf = 0;
[03:12:57.989]        // -> [manuf <= 0x00000000]
[03:12:57.989]      __var isMSPM0G1X0X_G3X0X = 0;
[03:12:57.989]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:12:57.989]      __var isProduction = 0;
[03:12:57.989]        // -> [isProduction <= 0x00000000]
[03:12:57.989]      __var continueId = 0;
[03:12:57.989]        // -> [continueId <= 0x00000000]
[03:12:57.990]      deviceID =   Read32(0x41C40004);
[03:12:57.994]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:12:57.994]        // -> [deviceID <= 0x2BB8802F]
[03:12:57.994]      version = deviceID >> 28;
[03:12:57.994]        // -> [version <= 0x00000002]
[03:12:57.995]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:12:57.995]        // -> [partNum <= 0x0000BB88]
[03:12:57.995]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:12:57.995]        // -> [manuf <= 0x00000017]
[03:12:57.995]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:12:57.995]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:12:57.996]      isProduction = (version > 0);
[03:12:57.996]        // -> [isProduction <= 0x00000001]
[03:12:57.996]    </block>
[03:12:57.996]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:12:57.996]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:12:57.996]        // =>  FALSE
[03:12:57.996]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:12:57.996]    </control>
[03:12:57.996]    <control if="continueId == 4" while="" timeout="0" info="">
[03:12:57.996]      // if-block "continueId == 4"
[03:12:57.996]        // =>  FALSE
[03:12:57.996]      // skip if-block "continueId == 4"
[03:12:57.997]    </control>
[03:12:57.997]    <control if="!isProduction" while="" timeout="0" info="">
[03:12:57.997]      // if-block "!isProduction"
[03:12:57.997]        // =>  FALSE
[03:12:57.997]      // skip if-block "!isProduction"
[03:12:57.997]    </control>
[03:12:57.997]  </sequence>
[03:12:57.997]  
[03:14:13.473]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:14:13.473]  
[03:14:13.482]  <debugvars>
[03:14:13.482]    // Pre-defined
[03:14:13.482]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:14:13.482]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:14:13.482]    __dp=0x00000000
[03:14:13.482]    __ap=0x00000000
[03:14:13.482]    __traceout=0x00000000      (Trace Disabled)
[03:14:13.482]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:14:13.482]    __FlashAddr=0x00000000
[03:14:13.482]    __FlashLen=0x00000000
[03:14:13.482]    __FlashArg=0x00000000
[03:14:13.483]    __FlashOp=0x00000000
[03:14:13.483]    __Result=0x00000000
[03:14:13.483]  </debugvars>
[03:14:13.483]  
[03:14:13.483]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:14:13.483]    <block atomic="false" info="">
[03:14:13.483]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:14:13.483]        // -> [isSWJ <= 0x00000001]
[03:14:13.483]      __var hasDormant = __protocol & 0x00020000;
[03:14:13.483]        // -> [hasDormant <= 0x00000000]
[03:14:13.483]      __var protType   = __protocol & 0x0000FFFF;
[03:14:13.484]        // -> [protType <= 0x00000002]
[03:14:13.484]    </block>
[03:14:13.484]    <control if="protType == 1" while="" timeout="0" info="">
[03:14:13.484]      // if-block "protType == 1"
[03:14:13.484]        // =>  FALSE
[03:14:13.484]      // skip if-block "protType == 1"
[03:14:13.484]    </control>
[03:14:13.484]    <control if="protType == 2" while="" timeout="0" info="">
[03:14:13.484]      // if-block "protType == 2"
[03:14:13.484]        // =>  TRUE
[03:14:13.484]      <control if="isSWJ" while="" timeout="0" info="">
[03:14:13.485]        // if-block "isSWJ"
[03:14:13.485]          // =>  TRUE
[03:14:13.485]        <control if="hasDormant" while="" timeout="0" info="">
[03:14:13.485]          // if-block "hasDormant"
[03:14:13.485]            // =>  FALSE
[03:14:13.485]          // skip if-block "hasDormant"
[03:14:13.485]        </control>
[03:14:13.485]        <control if="!hasDormant" while="" timeout="0" info="">
[03:14:13.485]          // if-block "!hasDormant"
[03:14:13.485]            // =>  TRUE
[03:14:13.486]          <block atomic="false" info="">
[03:14:13.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:14:13.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:14:13.488]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:14:13.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:14:13.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:14:13.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:14:13.492]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:14:13.494]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:14:13.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:14:13.498]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:14:13.498]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:14:13.501]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:14:13.501]          </block>
[03:14:13.501]          // end if-block "!hasDormant"
[03:14:13.501]        </control>
[03:14:13.502]        // end if-block "isSWJ"
[03:14:13.502]      </control>
[03:14:13.502]      <control if="!isSWJ" while="" timeout="0" info="">
[03:14:13.502]        // if-block "!isSWJ"
[03:14:13.502]          // =>  FALSE
[03:14:13.502]        // skip if-block "!isSWJ"
[03:14:13.502]      </control>
[03:14:13.502]      <block atomic="false" info="">
[03:14:13.502]        ReadDP(0x0);
[03:14:13.504]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:14:13.504]      </block>
[03:14:13.504]      // end if-block "protType == 2"
[03:14:13.504]    </control>
[03:14:13.504]  </sequence>
[03:14:13.504]  
[03:14:13.507]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:14:13.507]  
[03:14:13.507]  <debugvars>
[03:14:13.507]    // Pre-defined
[03:14:13.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:14:13.507]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:14:13.507]    __dp=0x00000000
[03:14:13.508]    __ap=0x00000000
[03:14:13.508]    __traceout=0x00000000      (Trace Disabled)
[03:14:13.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:14:13.508]    __FlashAddr=0x00000000
[03:14:13.508]    __FlashLen=0x00000000
[03:14:13.508]    __FlashArg=0x00000000
[03:14:13.508]    __FlashOp=0x00000000
[03:14:13.508]    __Result=0x00000000
[03:14:13.508]  </debugvars>
[03:14:13.508]  
[03:14:13.509]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:14:13.509]    <block atomic="false" info="">
[03:14:13.509]      __var SW_DP_ABORT       = 0x0;
[03:14:13.509]        // -> [SW_DP_ABORT <= 0x00000000]
[03:14:13.509]      __var DP_CTRL_STAT      = 0x4;
[03:14:13.509]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:14:13.509]      __var DP_SELECT         = 0x8;
[03:14:13.509]        // -> [DP_SELECT <= 0x00000008]
[03:14:13.509]      __var powered_down      = 0;
[03:14:13.509]        // -> [powered_down <= 0x00000000]
[03:14:13.509]      WriteDP(DP_SELECT, 0x00000000);
[03:14:13.511]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:14:13.511]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:14:13.512]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:14:13.513]        // -> [powered_down <= 0x00000001]
[03:14:13.513]    </block>
[03:14:13.513]    <control if="powered_down" while="" timeout="0" info="">
[03:14:13.513]      // if-block "powered_down"
[03:14:13.513]        // =>  TRUE
[03:14:13.513]      <block atomic="false" info="">
[03:14:13.513]        Message(0, "Debug/System power-up request sent");
[03:14:13.515]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:14:13.518]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:14:13.518]      </block>
[03:14:13.518]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:14:13.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:14:13.520]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:14:13.520]        // while-condition  =>  FALSE
[03:14:13.520]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:14:13.520]      </control>
[03:14:13.520]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:14:13.520]        // if-block "(__protocol & 0xFFFF) == 1"
[03:14:13.520]          // =>  FALSE
[03:14:13.520]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:14:13.520]      </control>
[03:14:13.520]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:14:13.520]        // if-block "(__protocol & 0xFFFF) == 2"
[03:14:13.520]          // =>  TRUE
[03:14:13.520]        <block atomic="false" info="">
[03:14:13.520]          Message(0, "executing SWD power up");
[03:14:13.523]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:14:13.524]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:14:13.525]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:14:13.529]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:14:13.529]        </block>
[03:14:13.529]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:14:13.529]      </control>
[03:14:13.529]      // end if-block "powered_down"
[03:14:13.529]    </control>
[03:14:13.529]    <block atomic="false" info="">
[03:14:13.529]      __var DEBUG_PORT_VAL    = 0;
[03:14:13.530]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:14:13.530]      __var ACCESS_POINT_VAL  = 0;
[03:14:13.530]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:14:13.530]      __ap = 1; 
[03:14:13.530]        // -> [__ap <= 0x00000001]
[03:14:13.530]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:14:13.535]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:14:13.535]      __ap = 4;
[03:14:13.535]        // -> [__ap <= 0x00000004]
[03:14:13.535]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:14:13.542]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:14:13.543]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:14:13.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:14:13.545]    </block>
[03:14:13.545]    <block atomic="false" info="">
[03:14:13.545]      __var nReset = 0x80;
[03:14:13.546]        // -> [nReset <= 0x00000080]
[03:14:13.546]      __var canReadPins = 0;
[03:14:13.546]        // -> [canReadPins <= 0x00000000]
[03:14:13.546]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:14:13.548]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:14:13.548]        // -> [canReadPins <= 0x00000001]
[03:14:13.548]    </block>
[03:14:13.548]    <control if="" while="1" timeout="200" info="">
[03:14:13.548]      // while "1"  (timeout="200")
[03:14:13.548]      // while-condition  =>  TRUE
[03:14:13.549]      // while "1"  (timeout="200")
[03:14:13.549]      // while-condition  =>  TRUE
[03:14:13.549]      // while "1"  (timeout="200")
[03:14:13.549]      // while-condition  =>  TRUE
[03:14:13.549]      // while "1"  (timeout="200")
[03:14:13.549]      // while-condition  =>  TRUE
[03:14:13.549]      // while "1"  (timeout="200")
[03:14:13.549]      // while-condition  =>  TRUE
[03:14:13.549]      // while "1"  (timeout="200")
[03:14:13.549]      // while-condition  =>  TRUE
[03:14:13.549]      // while "1"  (timeout="200")
[03:14:13.549]      // while-condition  =>  TRUE
[03:14:13.549]      // while "1"  (timeout="200")
[03:14:13.550]      // while-condition  =>  TRUE
[03:14:13.550]      // while "1"  (timeout="200")
[03:14:13.550]      // while-condition  =>  TRUE
[03:14:13.550]      // while "1"  (timeout="200")
[03:14:13.550]      // while-condition  =>  TRUE
[03:14:13.550]      // while "1"  (timeout="200")
[03:14:13.550]      // while-condition  =>  TRUE
[03:14:13.550]      // while "1"  (timeout="200")
[03:14:13.550]      // while-condition  =>  TRUE
[03:14:13.551]      // while "1"  (timeout="200")
[03:14:13.551]      // while-condition  =>  TRUE
[03:14:13.551]      // while "1"  (timeout="200")
[03:14:13.551]      // while-condition  =>  TRUE
[03:14:13.551]      // while "1"  (timeout="200")
[03:14:13.551]      // while-condition  =>  TRUE
[03:14:13.551]      // while "1"  (timeout="200")
[03:14:13.551]      // while-condition  =>  TRUE
[03:14:13.552]      // while "1"  (timeout="200")
[03:14:13.552]      // while-condition  =>  TRUE
[03:14:13.552]      // while "1"  (timeout="200")
[03:14:13.552]      // while-condition  =>  TRUE
[03:14:13.552]      // while "1"  (timeout="200")
[03:14:13.552]      // while-condition  =>  TRUE
[03:14:13.552]      // while "1"  (timeout="200")
[03:14:13.552]      // while-condition  =>  TRUE
[03:14:13.553]      // while "1"  (timeout="200")
[03:14:13.553]      // while-condition  =>  TRUE
[03:14:13.553]      // while "1"  (timeout="200")
[03:14:13.553]      // while-condition  =>  TRUE
[03:14:13.553]      // while "1"  (timeout="200")
[03:14:13.553]      // while-condition  =>  TRUE
[03:14:13.553]      // while "1"  (timeout="200")
[03:14:13.553]      // while-condition  =>  TRUE
[03:14:13.553]      // while "1"  (timeout="200")
[03:14:13.554]      // while-condition  =>  TRUE
[03:14:13.554]      // while "1"  (timeout="200")
[03:14:13.554]      // while-condition  =>  TRUE
[03:14:13.554]      // while "1"  (timeout="200")
[03:14:13.554]      // while-condition  =>  TRUE
[03:14:13.554]      // while "1"  (timeout="200")
[03:14:13.554]      // while-condition  =>  TRUE
[03:14:13.554]      // while "1"  (timeout="200")
[03:14:13.554]      // while-condition  =>  TRUE
[03:14:13.554]      // while "1"  (timeout="200")
[03:14:13.554]      // while-condition  =>  TRUE
[03:14:13.555]      // while "1"  (timeout="200")
[03:14:13.555]      // while-condition  =>  TRUE
[03:14:13.555]      // while "1"  (timeout="200")
[03:14:13.555]      // while-condition  =>  TRUE
[03:14:13.555]      // while "1"  (timeout="200")
[03:14:13.555]      // while-condition  =>  TRUE
[03:14:13.555]      // while "1"  (timeout="200")
[03:14:13.555]      // while-condition  =>  TRUE
[03:14:13.555]      // while "1"  (timeout="200")
[03:14:13.555]      // while-condition  =>  TRUE
[03:14:13.556]      // while "1"  (timeout="200")
[03:14:13.556]      // while-condition  =>  TRUE
[03:14:13.556]      // while "1"  (timeout="200")
[03:14:13.556]      // while-condition  =>  TRUE
[03:14:13.556]      // while "1"  (timeout="200")
[03:14:13.556]      // while-condition  =>  TRUE
[03:14:13.556]      // while "1"  (timeout="200")
[03:14:13.556]      // while-condition  =>  TRUE
[03:14:13.556]      // while "1"  (timeout="200")
[03:14:13.556]      // while-condition  =>  TRUE
[03:14:13.556]      // while "1"  (timeout="200")
[03:14:13.556]      // while-condition  =>  TRUE
[03:14:13.556]      // while "1"  (timeout="200")
[03:14:13.556]      // while-condition  =>  TRUE
[03:14:13.558]      // while "1"  (timeout="200")
[03:14:13.558]      // while-condition  =>  TRUE
[03:14:13.558]      // while "1"  (timeout="200")
[03:14:13.558]      // while-condition  =>  TRUE
[03:14:13.558]      // while "1"  (timeout="200")
[03:14:13.558]      // while-condition  =>  TRUE
[03:14:13.558]      // while "1"  (timeout="200")
[03:14:13.558]      // while-condition  =>  TRUE
[03:14:13.558]      // while "1"  (timeout="200")
[03:14:13.558]      // while-condition  =>  TRUE
[03:14:13.558]      // while "1"  (timeout="200")
[03:14:13.558]      // while-condition  =>  TRUE
[03:14:13.559]      // while "1"  (timeout="200")
[03:14:13.559]      // while-condition  =>  TRUE
[03:14:13.559]      // while "1"  (timeout="200")
[03:14:13.559]      // while-condition  =>  TRUE
[03:14:13.559]      // while "1"  (timeout="200")
[03:14:13.559]      // while-condition  =>  TRUE
[03:14:13.559]      // while "1"  (timeout="200")
[03:14:13.559]      // while-condition  =>  TRUE
[03:14:13.560]      // while "1"  (timeout="200")
[03:14:13.560]      // while-condition  =>  TRUE
[03:14:13.560]      // while "1"  (timeout="200")
[03:14:13.560]      // while-condition  =>  TRUE
[03:14:13.560]      // while "1"  (timeout="200")
[03:14:13.560]      // while-condition  =>  TRUE
[03:14:13.560]      // while "1"  (timeout="200")
[03:14:13.560]      // while-condition  =>  TRUE
[03:14:13.560]      // while "1"  (timeout="200")
[03:14:13.560]      // while-condition  =>  TRUE
[03:14:13.560]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.561]      // while "1"  (timeout="200")
[03:14:13.561]      // while-condition  =>  TRUE
[03:14:13.562]      // while "1"  (timeout="200")
[03:14:13.562]      // while-condition  =>  TRUE
[03:14:13.562]      // while "1"  (timeout="200")
[03:14:13.562]      // while-condition  =>  TRUE
[03:14:13.562]      // while "1"  (timeout="200")
[03:14:13.562]      // while-condition  =>  TRUE
[03:14:13.562]      // while "1"  (timeout="200")
[03:14:13.562]      // while-condition  =>  TRUE
[03:14:13.563]      // while "1"  (timeout="200")
[03:14:13.563]      // while  =>  TIMEOUT
[03:14:13.563]      // end while "1"
[03:14:13.563]    </control>
[03:14:13.563]    <control if="canReadPins" while="" timeout="0" info="">
[03:14:13.563]      // if-block "canReadPins"
[03:14:13.563]        // =>  TRUE
[03:14:13.563]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:14:13.563]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:14:13.565]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:14:13.565]        // while-condition  =>  FALSE
[03:14:13.565]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:14:13.565]      </control>
[03:14:13.565]      // end if-block "canReadPins"
[03:14:13.565]    </control>
[03:14:13.565]    <control if="!canReadPins" while="" timeout="0" info="">
[03:14:13.565]      // if-block "!canReadPins"
[03:14:13.566]        // =>  FALSE
[03:14:13.566]      // skip if-block "!canReadPins"
[03:14:13.566]    </control>
[03:14:13.566]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:14:13.566]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:14:13.566]        // =>  TRUE
[03:14:13.566]      <block atomic="false" info="">
[03:14:13.566]        WriteAP(0x00, 0x190008);
[03:14:13.572]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:14:13.572]        WriteAP(0xF0, 0x01);
[03:14:13.575]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:14:13.576]      </block>
[03:14:13.576]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:14:13.576]    </control>
[03:14:13.576]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:14:13.576]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:14:13.577]        // =>  FALSE
[03:14:13.577]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:14:13.577]    </control>
[03:14:13.577]    <block atomic="false" info="">
[03:14:13.577]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:14:13.580]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:14:13.581]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:14:13.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:14:13.582]      __ap = 0; //lets make sure we reset the access point selection
[03:14:13.583]        // -> [__ap <= 0x00000000]
[03:14:13.583]    </block>
[03:14:13.583]  </sequence>
[03:14:13.583]  
[03:14:13.610]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:14:13.610]  
[03:14:13.610]  <debugvars>
[03:14:13.610]    // Pre-defined
[03:14:13.610]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:14:13.610]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:14:13.610]    __dp=0x00000000
[03:14:13.610]    __ap=0x00000000
[03:14:13.610]    __traceout=0x00000000      (Trace Disabled)
[03:14:13.610]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:14:13.612]    __FlashAddr=0x00000000
[03:14:13.612]    __FlashLen=0x00000000
[03:14:13.612]    __FlashArg=0x00000000
[03:14:13.612]    __FlashOp=0x00000000
[03:14:13.612]    __Result=0x00000000
[03:14:13.612]  </debugvars>
[03:14:13.612]  
[03:14:13.612]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:14:13.612]    <block atomic="false" info="">
[03:14:13.612]      __var deviceID = 0;
[03:14:13.612]        // -> [deviceID <= 0x00000000]
[03:14:13.613]      __var version = 0;
[03:14:13.613]        // -> [version <= 0x00000000]
[03:14:13.613]      __var partNum = 0;
[03:14:13.613]        // -> [partNum <= 0x00000000]
[03:14:13.613]      __var manuf = 0;
[03:14:13.613]        // -> [manuf <= 0x00000000]
[03:14:13.613]      __var isMSPM0G1X0X_G3X0X = 0;
[03:14:13.613]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:14:13.613]      __var isProduction = 0;
[03:14:13.613]        // -> [isProduction <= 0x00000000]
[03:14:13.613]      __var continueId = 0;
[03:14:13.614]        // -> [continueId <= 0x00000000]
[03:14:13.614]      deviceID =   Read32(0x41C40004);
[03:14:13.620]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:14:13.620]        // -> [deviceID <= 0x2BB8802F]
[03:14:13.620]      version = deviceID >> 28;
[03:14:13.621]        // -> [version <= 0x00000002]
[03:14:13.621]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:14:13.621]        // -> [partNum <= 0x0000BB88]
[03:14:13.621]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:14:13.621]        // -> [manuf <= 0x00000017]
[03:14:13.621]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:14:13.621]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:14:13.621]      isProduction = (version > 0);
[03:14:13.621]        // -> [isProduction <= 0x00000001]
[03:14:13.621]    </block>
[03:14:13.621]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:14:13.622]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:14:13.622]        // =>  FALSE
[03:14:13.622]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:14:13.622]    </control>
[03:14:13.622]    <control if="continueId == 4" while="" timeout="0" info="">
[03:14:13.622]      // if-block "continueId == 4"
[03:14:13.622]        // =>  FALSE
[03:14:13.622]      // skip if-block "continueId == 4"
[03:14:13.622]    </control>
[03:14:13.622]    <control if="!isProduction" while="" timeout="0" info="">
[03:14:13.622]      // if-block "!isProduction"
[03:14:13.623]        // =>  FALSE
[03:14:13.623]      // skip if-block "!isProduction"
[03:14:13.623]    </control>
[03:14:13.623]  </sequence>
[03:14:13.623]  
[03:19:21.591]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:19:21.591]  
[03:19:21.599]  <debugvars>
[03:19:21.599]    // Pre-defined
[03:19:21.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:21.599]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:19:21.599]    __dp=0x00000000
[03:19:21.599]    __ap=0x00000000
[03:19:21.599]    __traceout=0x00000000      (Trace Disabled)
[03:19:21.600]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:21.600]    __FlashAddr=0x00000000
[03:19:21.600]    __FlashLen=0x00000000
[03:19:21.600]    __FlashArg=0x00000000
[03:19:21.600]    __FlashOp=0x00000000
[03:19:21.600]    __Result=0x00000000
[03:19:21.600]  </debugvars>
[03:19:21.600]  
[03:19:21.600]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:19:21.600]    <block atomic="false" info="">
[03:19:21.600]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:19:21.601]        // -> [isSWJ <= 0x00000001]
[03:19:21.601]      __var hasDormant = __protocol & 0x00020000;
[03:19:21.601]        // -> [hasDormant <= 0x00000000]
[03:19:21.601]      __var protType   = __protocol & 0x0000FFFF;
[03:19:21.601]        // -> [protType <= 0x00000002]
[03:19:21.601]    </block>
[03:19:21.601]    <control if="protType == 1" while="" timeout="0" info="">
[03:19:21.601]      // if-block "protType == 1"
[03:19:21.601]        // =>  FALSE
[03:19:21.601]      // skip if-block "protType == 1"
[03:19:21.601]    </control>
[03:19:21.602]    <control if="protType == 2" while="" timeout="0" info="">
[03:19:21.602]      // if-block "protType == 2"
[03:19:21.602]        // =>  TRUE
[03:19:21.602]      <control if="isSWJ" while="" timeout="0" info="">
[03:19:21.602]        // if-block "isSWJ"
[03:19:21.602]          // =>  TRUE
[03:19:21.603]        <control if="hasDormant" while="" timeout="0" info="">
[03:19:21.603]          // if-block "hasDormant"
[03:19:21.603]            // =>  FALSE
[03:19:21.603]          // skip if-block "hasDormant"
[03:19:21.603]        </control>
[03:19:21.603]        <control if="!hasDormant" while="" timeout="0" info="">
[03:19:21.603]          // if-block "!hasDormant"
[03:19:21.603]            // =>  TRUE
[03:19:21.603]          <block atomic="false" info="">
[03:19:21.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:19:21.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:19:21.606]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:19:21.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:19:21.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:19:21.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:19:21.609]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:19:21.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:19:21.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:19:21.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:19:21.613]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:19:21.614]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:19:21.615]          </block>
[03:19:21.615]          // end if-block "!hasDormant"
[03:19:21.615]        </control>
[03:19:21.615]        // end if-block "isSWJ"
[03:19:21.615]      </control>
[03:19:21.615]      <control if="!isSWJ" while="" timeout="0" info="">
[03:19:21.615]        // if-block "!isSWJ"
[03:19:21.615]          // =>  FALSE
[03:19:21.616]        // skip if-block "!isSWJ"
[03:19:21.616]      </control>
[03:19:21.616]      <block atomic="false" info="">
[03:19:21.616]        ReadDP(0x0);
[03:19:21.617]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:19:21.617]      </block>
[03:19:21.617]      // end if-block "protType == 2"
[03:19:21.617]    </control>
[03:19:21.617]  </sequence>
[03:19:21.618]  
[03:19:21.620]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:19:21.620]  
[03:19:21.620]  <debugvars>
[03:19:21.620]    // Pre-defined
[03:19:21.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:21.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:19:21.620]    __dp=0x00000000
[03:19:21.620]    __ap=0x00000000
[03:19:21.621]    __traceout=0x00000000      (Trace Disabled)
[03:19:21.621]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:21.621]    __FlashAddr=0x00000000
[03:19:21.621]    __FlashLen=0x00000000
[03:19:21.621]    __FlashArg=0x00000000
[03:19:21.621]    __FlashOp=0x00000000
[03:19:21.621]    __Result=0x00000000
[03:19:21.621]  </debugvars>
[03:19:21.621]  
[03:19:21.621]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:19:21.621]    <block atomic="false" info="">
[03:19:21.621]      __var SW_DP_ABORT       = 0x0;
[03:19:21.622]        // -> [SW_DP_ABORT <= 0x00000000]
[03:19:21.622]      __var DP_CTRL_STAT      = 0x4;
[03:19:21.622]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:19:21.622]      __var DP_SELECT         = 0x8;
[03:19:21.622]        // -> [DP_SELECT <= 0x00000008]
[03:19:21.622]      __var powered_down      = 0;
[03:19:21.622]        // -> [powered_down <= 0x00000000]
[03:19:21.622]      WriteDP(DP_SELECT, 0x00000000);
[03:19:21.624]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:19:21.624]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:19:21.626]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:19:21.626]        // -> [powered_down <= 0x00000001]
[03:19:21.626]    </block>
[03:19:21.626]    <control if="powered_down" while="" timeout="0" info="">
[03:19:21.626]      // if-block "powered_down"
[03:19:21.626]        // =>  TRUE
[03:19:21.626]      <block atomic="false" info="">
[03:19:21.626]        Message(0, "Debug/System power-up request sent");
[03:19:21.630]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:19:21.632]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:19:21.632]      </block>
[03:19:21.632]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:19:21.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:19:21.633]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:19:21.633]        // while-condition  =>  FALSE
[03:19:21.634]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:19:21.634]      </control>
[03:19:21.634]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:19:21.634]        // if-block "(__protocol & 0xFFFF) == 1"
[03:19:21.634]          // =>  FALSE
[03:19:21.634]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:19:21.634]      </control>
[03:19:21.634]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:19:21.635]        // if-block "(__protocol & 0xFFFF) == 2"
[03:19:21.635]          // =>  TRUE
[03:19:21.635]        <block atomic="false" info="">
[03:19:21.635]          Message(0, "executing SWD power up");
[03:19:21.637]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:19:21.638]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:19:21.639]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:19:21.640]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:19:21.640]        </block>
[03:19:21.640]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:19:21.641]      </control>
[03:19:21.641]      // end if-block "powered_down"
[03:19:21.641]    </control>
[03:19:21.641]    <block atomic="false" info="">
[03:19:21.641]      __var DEBUG_PORT_VAL    = 0;
[03:19:21.641]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:19:21.641]      __var ACCESS_POINT_VAL  = 0;
[03:19:21.642]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:19:21.642]      __ap = 1; 
[03:19:21.642]        // -> [__ap <= 0x00000001]
[03:19:21.642]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:19:21.648]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:19:21.648]      __ap = 4;
[03:19:21.648]        // -> [__ap <= 0x00000004]
[03:19:21.648]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:19:21.658]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:19:21.658]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:19:21.658]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:19:21.660]    </block>
[03:19:21.660]    <block atomic="false" info="">
[03:19:21.660]      __var nReset = 0x80;
[03:19:21.660]        // -> [nReset <= 0x00000080]
[03:19:21.661]      __var canReadPins = 0;
[03:19:21.661]        // -> [canReadPins <= 0x00000000]
[03:19:21.661]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:19:21.663]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:19:21.663]        // -> [canReadPins <= 0x00000001]
[03:19:21.663]    </block>
[03:19:21.663]    <control if="" while="1" timeout="200" info="">
[03:19:21.663]      // while "1"  (timeout="200")
[03:19:21.663]      // while-condition  =>  TRUE
[03:19:21.663]      // while "1"  (timeout="200")
[03:19:21.663]      // while-condition  =>  TRUE
[03:19:21.663]      // while "1"  (timeout="200")
[03:19:21.663]      // while-condition  =>  TRUE
[03:19:21.663]      // while "1"  (timeout="200")
[03:19:21.664]      // while-condition  =>  TRUE
[03:19:21.664]      // while "1"  (timeout="200")
[03:19:21.664]      // while-condition  =>  TRUE
[03:19:21.664]      // while "1"  (timeout="200")
[03:19:21.664]      // while-condition  =>  TRUE
[03:19:21.664]      // while "1"  (timeout="200")
[03:19:21.664]      // while-condition  =>  TRUE
[03:19:21.664]      // while "1"  (timeout="200")
[03:19:21.664]      // while-condition  =>  TRUE
[03:19:21.664]      // while "1"  (timeout="200")
[03:19:21.664]      // while-condition  =>  TRUE
[03:19:21.664]      // while "1"  (timeout="200")
[03:19:21.665]      // while-condition  =>  TRUE
[03:19:21.665]      // while "1"  (timeout="200")
[03:19:21.665]      // while-condition  =>  TRUE
[03:19:21.665]      // while "1"  (timeout="200")
[03:19:21.665]      // while-condition  =>  TRUE
[03:19:21.665]      // while "1"  (timeout="200")
[03:19:21.665]      // while-condition  =>  TRUE
[03:19:21.665]      // while "1"  (timeout="200")
[03:19:21.665]      // while-condition  =>  TRUE
[03:19:21.665]      // while "1"  (timeout="200")
[03:19:21.666]      // while-condition  =>  TRUE
[03:19:21.666]      // while "1"  (timeout="200")
[03:19:21.666]      // while-condition  =>  TRUE
[03:19:21.666]      // while "1"  (timeout="200")
[03:19:21.666]      // while-condition  =>  TRUE
[03:19:21.666]      // while "1"  (timeout="200")
[03:19:21.666]      // while-condition  =>  TRUE
[03:19:21.667]      // while "1"  (timeout="200")
[03:19:21.667]      // while-condition  =>  TRUE
[03:19:21.667]      // while "1"  (timeout="200")
[03:19:21.667]      // while-condition  =>  TRUE
[03:19:21.667]      // while "1"  (timeout="200")
[03:19:21.667]      // while-condition  =>  TRUE
[03:19:21.667]      // while "1"  (timeout="200")
[03:19:21.667]      // while-condition  =>  TRUE
[03:19:21.667]      // while "1"  (timeout="200")
[03:19:21.667]      // while-condition  =>  TRUE
[03:19:21.667]      // while "1"  (timeout="200")
[03:19:21.667]      // while-condition  =>  TRUE
[03:19:21.668]      // while "1"  (timeout="200")
[03:19:21.668]      // while-condition  =>  TRUE
[03:19:21.668]      // while "1"  (timeout="200")
[03:19:21.668]      // while-condition  =>  TRUE
[03:19:21.668]      // while "1"  (timeout="200")
[03:19:21.668]      // while-condition  =>  TRUE
[03:19:21.668]      // while "1"  (timeout="200")
[03:19:21.668]      // while-condition  =>  TRUE
[03:19:21.668]      // while "1"  (timeout="200")
[03:19:21.668]      // while-condition  =>  TRUE
[03:19:21.668]      // while "1"  (timeout="200")
[03:19:21.669]      // while-condition  =>  TRUE
[03:19:21.669]      // while "1"  (timeout="200")
[03:19:21.669]      // while-condition  =>  TRUE
[03:19:21.669]      // while "1"  (timeout="200")
[03:19:21.669]      // while-condition  =>  TRUE
[03:19:21.669]      // while "1"  (timeout="200")
[03:19:21.669]      // while-condition  =>  TRUE
[03:19:21.670]      // while "1"  (timeout="200")
[03:19:21.670]      // while-condition  =>  TRUE
[03:19:21.670]      // while "1"  (timeout="200")
[03:19:21.670]      // while-condition  =>  TRUE
[03:19:21.670]      // while "1"  (timeout="200")
[03:19:21.670]      // while-condition  =>  TRUE
[03:19:21.671]      // while "1"  (timeout="200")
[03:19:21.671]      // while-condition  =>  TRUE
[03:19:21.671]      // while "1"  (timeout="200")
[03:19:21.671]      // while-condition  =>  TRUE
[03:19:21.671]      // while "1"  (timeout="200")
[03:19:21.671]      // while-condition  =>  TRUE
[03:19:21.671]      // while "1"  (timeout="200")
[03:19:21.671]      // while-condition  =>  TRUE
[03:19:21.671]      // while "1"  (timeout="200")
[03:19:21.671]      // while-condition  =>  TRUE
[03:19:21.671]      // while "1"  (timeout="200")
[03:19:21.672]      // while-condition  =>  TRUE
[03:19:21.672]      // while "1"  (timeout="200")
[03:19:21.672]      // while-condition  =>  TRUE
[03:19:21.672]      // while "1"  (timeout="200")
[03:19:21.672]      // while-condition  =>  TRUE
[03:19:21.672]      // while "1"  (timeout="200")
[03:19:21.672]      // while-condition  =>  TRUE
[03:19:21.672]      // while "1"  (timeout="200")
[03:19:21.672]      // while-condition  =>  TRUE
[03:19:21.672]      // while "1"  (timeout="200")
[03:19:21.672]      // while-condition  =>  TRUE
[03:19:21.672]      // while "1"  (timeout="200")
[03:19:21.673]      // while-condition  =>  TRUE
[03:19:21.673]      // while "1"  (timeout="200")
[03:19:21.673]      // while  =>  TIMEOUT
[03:19:21.673]      // end while "1"
[03:19:21.673]    </control>
[03:19:21.673]    <control if="canReadPins" while="" timeout="0" info="">
[03:19:21.673]      // if-block "canReadPins"
[03:19:21.674]        // =>  TRUE
[03:19:21.674]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:19:21.674]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:19:21.676]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:19:21.677]        // while-condition  =>  FALSE
[03:19:21.677]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:19:21.677]      </control>
[03:19:21.677]      // end if-block "canReadPins"
[03:19:21.677]    </control>
[03:19:21.677]    <control if="!canReadPins" while="" timeout="0" info="">
[03:19:21.677]      // if-block "!canReadPins"
[03:19:21.677]        // =>  FALSE
[03:19:21.678]      // skip if-block "!canReadPins"
[03:19:21.678]    </control>
[03:19:21.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:19:21.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:19:21.678]        // =>  TRUE
[03:19:21.678]      <block atomic="false" info="">
[03:19:21.678]        WriteAP(0x00, 0x190008);
[03:19:21.679]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:19:21.679]        WriteAP(0xF0, 0x01);
[03:19:21.688]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:19:21.688]      </block>
[03:19:21.688]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:19:21.688]    </control>
[03:19:21.689]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:19:21.689]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:19:21.689]        // =>  FALSE
[03:19:21.689]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:19:21.689]    </control>
[03:19:21.689]    <block atomic="false" info="">
[03:19:21.689]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:19:21.692]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:19:21.693]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:19:21.693]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:19:21.695]      __ap = 0; //lets make sure we reset the access point selection
[03:19:21.695]        // -> [__ap <= 0x00000000]
[03:19:21.695]    </block>
[03:19:21.695]  </sequence>
[03:19:21.695]  
[03:19:21.714]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:19:21.714]  
[03:19:21.714]  <debugvars>
[03:19:21.714]    // Pre-defined
[03:19:21.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:21.715]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:19:21.715]    __dp=0x00000000
[03:19:21.715]    __ap=0x00000000
[03:19:21.715]    __traceout=0x00000000      (Trace Disabled)
[03:19:21.715]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:21.715]    __FlashAddr=0x00000000
[03:19:21.715]    __FlashLen=0x00000000
[03:19:21.715]    __FlashArg=0x00000000
[03:19:21.715]    __FlashOp=0x00000000
[03:19:21.715]    __Result=0x00000000
[03:19:21.715]  </debugvars>
[03:19:21.716]  
[03:19:21.716]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:19:21.716]    <block atomic="false" info="">
[03:19:21.716]      __var deviceID = 0;
[03:19:21.716]        // -> [deviceID <= 0x00000000]
[03:19:21.716]      __var version = 0;
[03:19:21.716]        // -> [version <= 0x00000000]
[03:19:21.716]      __var partNum = 0;
[03:19:21.716]        // -> [partNum <= 0x00000000]
[03:19:21.716]      __var manuf = 0;
[03:19:21.717]        // -> [manuf <= 0x00000000]
[03:19:21.717]      __var isMSPM0G1X0X_G3X0X = 0;
[03:19:21.717]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:19:21.717]      __var isProduction = 0;
[03:19:21.717]        // -> [isProduction <= 0x00000000]
[03:19:21.717]      __var continueId = 0;
[03:19:21.717]        // -> [continueId <= 0x00000000]
[03:19:21.717]      deviceID =   Read32(0x41C40004);
[03:19:21.722]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:19:21.722]        // -> [deviceID <= 0x2BB8802F]
[03:19:21.722]      version = deviceID >> 28;
[03:19:21.722]        // -> [version <= 0x00000002]
[03:19:21.722]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:19:21.722]        // -> [partNum <= 0x0000BB88]
[03:19:21.722]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:19:21.722]        // -> [manuf <= 0x00000017]
[03:19:21.722]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:19:21.722]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:19:21.722]      isProduction = (version > 0);
[03:19:21.722]        // -> [isProduction <= 0x00000001]
[03:19:21.723]    </block>
[03:19:21.723]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:19:21.723]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:19:21.723]        // =>  FALSE
[03:19:21.723]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:19:21.723]    </control>
[03:19:21.724]    <control if="continueId == 4" while="" timeout="0" info="">
[03:19:21.724]      // if-block "continueId == 4"
[03:19:21.724]        // =>  FALSE
[03:19:21.724]      // skip if-block "continueId == 4"
[03:19:21.724]    </control>
[03:19:21.724]    <control if="!isProduction" while="" timeout="0" info="">
[03:19:21.724]      // if-block "!isProduction"
[03:19:21.724]        // =>  FALSE
[03:19:21.725]      // skip if-block "!isProduction"
[03:19:21.725]    </control>
[03:19:21.725]  </sequence>
[03:19:21.725]  
[03:20:10.396]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:20:10.396]  
[03:20:10.406]  <debugvars>
[03:20:10.406]    // Pre-defined
[03:20:10.406]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:20:10.406]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:20:10.406]    __dp=0x00000000
[03:20:10.406]    __ap=0x00000000
[03:20:10.407]    __traceout=0x00000000      (Trace Disabled)
[03:20:10.407]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:20:10.407]    __FlashAddr=0x00000000
[03:20:10.407]    __FlashLen=0x00000000
[03:20:10.407]    __FlashArg=0x00000000
[03:20:10.407]    __FlashOp=0x00000000
[03:20:10.407]    __Result=0x00000000
[03:20:10.407]  </debugvars>
[03:20:10.407]  
[03:20:10.407]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:20:10.407]    <block atomic="false" info="">
[03:20:10.407]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:20:10.408]        // -> [isSWJ <= 0x00000001]
[03:20:10.408]      __var hasDormant = __protocol & 0x00020000;
[03:20:10.408]        // -> [hasDormant <= 0x00000000]
[03:20:10.408]      __var protType   = __protocol & 0x0000FFFF;
[03:20:10.408]        // -> [protType <= 0x00000002]
[03:20:10.408]    </block>
[03:20:10.408]    <control if="protType == 1" while="" timeout="0" info="">
[03:20:10.408]      // if-block "protType == 1"
[03:20:10.408]        // =>  FALSE
[03:20:10.408]      // skip if-block "protType == 1"
[03:20:10.408]    </control>
[03:20:10.408]    <control if="protType == 2" while="" timeout="0" info="">
[03:20:10.408]      // if-block "protType == 2"
[03:20:10.409]        // =>  TRUE
[03:20:10.409]      <control if="isSWJ" while="" timeout="0" info="">
[03:20:10.409]        // if-block "isSWJ"
[03:20:10.409]          // =>  TRUE
[03:20:10.409]        <control if="hasDormant" while="" timeout="0" info="">
[03:20:10.409]          // if-block "hasDormant"
[03:20:10.410]            // =>  FALSE
[03:20:10.410]          // skip if-block "hasDormant"
[03:20:10.410]        </control>
[03:20:10.410]        <control if="!hasDormant" while="" timeout="0" info="">
[03:20:10.410]          // if-block "!hasDormant"
[03:20:10.410]            // =>  TRUE
[03:20:10.410]          <block atomic="false" info="">
[03:20:10.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:20:10.412]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:20:10.412]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:20:10.413]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:20:10.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:20:10.415]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:20:10.415]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:20:10.417]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:20:10.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:20:10.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:20:10.419]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:20:10.420]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:20:10.420]          </block>
[03:20:10.420]          // end if-block "!hasDormant"
[03:20:10.421]        </control>
[03:20:10.421]        // end if-block "isSWJ"
[03:20:10.421]      </control>
[03:20:10.421]      <control if="!isSWJ" while="" timeout="0" info="">
[03:20:10.421]        // if-block "!isSWJ"
[03:20:10.421]          // =>  FALSE
[03:20:10.421]        // skip if-block "!isSWJ"
[03:20:10.421]      </control>
[03:20:10.421]      <block atomic="false" info="">
[03:20:10.421]        ReadDP(0x0);
[03:20:10.427]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:20:10.427]      </block>
[03:20:10.427]      // end if-block "protType == 2"
[03:20:10.427]    </control>
[03:20:10.428]  </sequence>
[03:20:10.428]  
[03:20:10.431]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:20:10.432]  
[03:20:10.432]  <debugvars>
[03:20:10.432]    // Pre-defined
[03:20:10.432]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:20:10.432]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:20:10.432]    __dp=0x00000000
[03:20:10.432]    __ap=0x00000000
[03:20:10.432]    __traceout=0x00000000      (Trace Disabled)
[03:20:10.432]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:20:10.433]    __FlashAddr=0x00000000
[03:20:10.433]    __FlashLen=0x00000000
[03:20:10.433]    __FlashArg=0x00000000
[03:20:10.433]    __FlashOp=0x00000000
[03:20:10.433]    __Result=0x00000000
[03:20:10.433]  </debugvars>
[03:20:10.433]  
[03:20:10.433]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:20:10.433]    <block atomic="false" info="">
[03:20:10.433]      __var SW_DP_ABORT       = 0x0;
[03:20:10.433]        // -> [SW_DP_ABORT <= 0x00000000]
[03:20:10.434]      __var DP_CTRL_STAT      = 0x4;
[03:20:10.434]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:20:10.434]      __var DP_SELECT         = 0x8;
[03:20:10.434]        // -> [DP_SELECT <= 0x00000008]
[03:20:10.434]      __var powered_down      = 0;
[03:20:10.434]        // -> [powered_down <= 0x00000000]
[03:20:10.434]      WriteDP(DP_SELECT, 0x00000000);
[03:20:10.436]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:20:10.436]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:20:10.437]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:20:10.438]        // -> [powered_down <= 0x00000001]
[03:20:10.438]    </block>
[03:20:10.438]    <control if="powered_down" while="" timeout="0" info="">
[03:20:10.438]      // if-block "powered_down"
[03:20:10.438]        // =>  TRUE
[03:20:10.438]      <block atomic="false" info="">
[03:20:10.438]        Message(0, "Debug/System power-up request sent");
[03:20:10.441]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:20:10.445]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:20:10.445]      </block>
[03:20:10.445]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:20:10.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:20:10.446]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:20:10.447]        // while-condition  =>  FALSE
[03:20:10.447]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:20:10.447]      </control>
[03:20:10.447]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:20:10.447]        // if-block "(__protocol & 0xFFFF) == 1"
[03:20:10.448]          // =>  FALSE
[03:20:10.448]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:20:10.448]      </control>
[03:20:10.449]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:20:10.449]        // if-block "(__protocol & 0xFFFF) == 2"
[03:20:10.449]          // =>  TRUE
[03:20:10.449]        <block atomic="false" info="">
[03:20:10.449]          Message(0, "executing SWD power up");
[03:20:10.451]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:20:10.454]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:20:10.454]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:20:10.456]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:20:10.456]        </block>
[03:20:10.456]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:20:10.457]      </control>
[03:20:10.457]      // end if-block "powered_down"
[03:20:10.457]    </control>
[03:20:10.457]    <block atomic="false" info="">
[03:20:10.457]      __var DEBUG_PORT_VAL    = 0;
[03:20:10.457]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:20:10.457]      __var ACCESS_POINT_VAL  = 0;
[03:20:10.457]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:20:10.457]      __ap = 1; 
[03:20:10.458]        // -> [__ap <= 0x00000001]
[03:20:10.458]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:20:10.461]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:20:10.461]      __ap = 4;
[03:20:10.461]        // -> [__ap <= 0x00000004]
[03:20:10.461]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:20:10.464]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.464]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:20:10.465]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:20:10.467]    </block>
[03:20:10.467]    <block atomic="false" info="">
[03:20:10.467]      __var nReset = 0x80;
[03:20:10.467]        // -> [nReset <= 0x00000080]
[03:20:10.467]      __var canReadPins = 0;
[03:20:10.467]        // -> [canReadPins <= 0x00000000]
[03:20:10.468]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:20:10.469]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:20:10.469]        // -> [canReadPins <= 0x00000001]
[03:20:10.469]    </block>
[03:20:10.469]    <control if="" while="1" timeout="200" info="">
[03:20:10.469]      // while "1"  (timeout="200")
[03:20:10.469]      // while-condition  =>  TRUE
[03:20:10.469]      // while "1"  (timeout="200")
[03:20:10.469]      // while-condition  =>  TRUE
[03:20:10.469]      // while "1"  (timeout="200")
[03:20:10.469]      // while-condition  =>  TRUE
[03:20:10.469]      // while "1"  (timeout="200")
[03:20:10.471]      // while-condition  =>  TRUE
[03:20:10.471]      // while "1"  (timeout="200")
[03:20:10.471]      // while  =>  TIMEOUT
[03:20:10.471]      // end while "1"
[03:20:10.471]    </control>
[03:20:10.471]    <control if="canReadPins" while="" timeout="0" info="">
[03:20:10.471]      // if-block "canReadPins"
[03:20:10.471]        // =>  TRUE
[03:20:10.471]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:20:10.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:20:10.473]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:20:10.473]        // while-condition  =>  FALSE
[03:20:10.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:20:10.474]      </control>
[03:20:10.474]      // end if-block "canReadPins"
[03:20:10.474]    </control>
[03:20:10.474]    <control if="!canReadPins" while="" timeout="0" info="">
[03:20:10.474]      // if-block "!canReadPins"
[03:20:10.474]        // =>  FALSE
[03:20:10.474]      // skip if-block "!canReadPins"
[03:20:10.474]    </control>
[03:20:10.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:20:10.475]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:20:10.475]        // =>  TRUE
[03:20:10.475]      <block atomic="false" info="">
[03:20:10.475]        WriteAP(0x00, 0x190008);
[03:20:10.476]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.476]        WriteAP(0xF0, 0x01);
[03:20:10.480]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.480]      </block>
[03:20:10.480]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:20:10.480]    </control>
[03:20:10.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:20:10.481]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:20:10.481]        // =>  FALSE
[03:20:10.481]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:20:10.481]    </control>
[03:20:10.481]    <block atomic="false" info="">
[03:20:10.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:20:10.484]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:20:10.484]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:20:10.484]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:20:10.486]      __ap = 0; //lets make sure we reset the access point selection
[03:20:10.486]        // -> [__ap <= 0x00000000]
[03:20:10.486]    </block>
[03:20:10.486]  </sequence>
[03:20:10.486]  
[03:20:10.513]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:20:10.513]  
[03:20:10.513]  <debugvars>
[03:20:10.513]    // Pre-defined
[03:20:10.513]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:20:10.514]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:20:10.514]    __dp=0x00000000
[03:20:10.514]    __ap=0x00000000
[03:20:10.514]    __traceout=0x00000000      (Trace Disabled)
[03:20:10.514]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:20:10.514]    __FlashAddr=0x00000000
[03:20:10.514]    __FlashLen=0x00000000
[03:20:10.514]    __FlashArg=0x00000000
[03:20:10.515]    __FlashOp=0x00000000
[03:20:10.515]    __Result=0x00000000
[03:20:10.515]  </debugvars>
[03:20:10.515]  
[03:20:10.515]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:20:10.515]    <block atomic="false" info="">
[03:20:10.515]      __var deviceID = 0;
[03:20:10.515]        // -> [deviceID <= 0x00000000]
[03:20:10.515]      __var version = 0;
[03:20:10.515]        // -> [version <= 0x00000000]
[03:20:10.515]      __var partNum = 0;
[03:20:10.515]        // -> [partNum <= 0x00000000]
[03:20:10.516]      __var manuf = 0;
[03:20:10.516]        // -> [manuf <= 0x00000000]
[03:20:10.516]      __var isMSPM0G1X0X_G3X0X = 0;
[03:20:10.516]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:20:10.516]      __var isProduction = 0;
[03:20:10.516]        // -> [isProduction <= 0x00000000]
[03:20:10.516]      __var continueId = 0;
[03:20:10.516]        // -> [continueId <= 0x00000000]
[03:20:10.516]      deviceID =   Read32(0x41C40004);
[03:20:10.522]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:20:10.522]        // -> [deviceID <= 0x2BB8802F]
[03:20:10.522]      version = deviceID >> 28;
[03:20:10.522]        // -> [version <= 0x00000002]
[03:20:10.522]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:20:10.522]        // -> [partNum <= 0x0000BB88]
[03:20:10.522]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:20:10.522]        // -> [manuf <= 0x00000017]
[03:20:10.523]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:20:10.524]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:20:10.524]      isProduction = (version > 0);
[03:20:10.524]        // -> [isProduction <= 0x00000001]
[03:20:10.524]    </block>
[03:20:10.524]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:20:10.524]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:20:10.524]        // =>  FALSE
[03:20:10.524]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:20:10.524]    </control>
[03:20:10.524]    <control if="continueId == 4" while="" timeout="0" info="">
[03:20:10.524]      // if-block "continueId == 4"
[03:20:10.524]        // =>  FALSE
[03:20:10.524]      // skip if-block "continueId == 4"
[03:20:10.525]    </control>
[03:20:10.525]    <control if="!isProduction" while="" timeout="0" info="">
[03:20:10.525]      // if-block "!isProduction"
[03:20:10.525]        // =>  FALSE
[03:20:10.525]      // skip if-block "!isProduction"
[03:20:10.525]    </control>
[03:20:10.525]  </sequence>
[03:20:10.525]  
[03:21:07.102]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:21:07.102]  
[03:21:07.111]  <debugvars>
[03:21:07.111]    // Pre-defined
[03:21:07.111]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:07.111]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:07.111]    __dp=0x00000000
[03:21:07.111]    __ap=0x00000000
[03:21:07.111]    __traceout=0x00000000      (Trace Disabled)
[03:21:07.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:07.112]    __FlashAddr=0x00000000
[03:21:07.112]    __FlashLen=0x00000000
[03:21:07.112]    __FlashArg=0x00000000
[03:21:07.112]    __FlashOp=0x00000000
[03:21:07.112]    __Result=0x00000000
[03:21:07.112]  </debugvars>
[03:21:07.113]  
[03:21:07.114]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:21:07.114]    <block atomic="false" info="">
[03:21:07.114]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:21:07.114]        // -> [isSWJ <= 0x00000001]
[03:21:07.114]      __var hasDormant = __protocol & 0x00020000;
[03:21:07.114]        // -> [hasDormant <= 0x00000000]
[03:21:07.114]      __var protType   = __protocol & 0x0000FFFF;
[03:21:07.114]        // -> [protType <= 0x00000002]
[03:21:07.114]    </block>
[03:21:07.114]    <control if="protType == 1" while="" timeout="0" info="">
[03:21:07.114]      // if-block "protType == 1"
[03:21:07.114]        // =>  FALSE
[03:21:07.114]      // skip if-block "protType == 1"
[03:21:07.114]    </control>
[03:21:07.114]    <control if="protType == 2" while="" timeout="0" info="">
[03:21:07.114]      // if-block "protType == 2"
[03:21:07.116]        // =>  TRUE
[03:21:07.116]      <control if="isSWJ" while="" timeout="0" info="">
[03:21:07.116]        // if-block "isSWJ"
[03:21:07.116]          // =>  TRUE
[03:21:07.116]        <control if="hasDormant" while="" timeout="0" info="">
[03:21:07.116]          // if-block "hasDormant"
[03:21:07.116]            // =>  FALSE
[03:21:07.116]          // skip if-block "hasDormant"
[03:21:07.116]        </control>
[03:21:07.116]        <control if="!hasDormant" while="" timeout="0" info="">
[03:21:07.117]          // if-block "!hasDormant"
[03:21:07.117]            // =>  TRUE
[03:21:07.117]          <block atomic="false" info="">
[03:21:07.117]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:21:07.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:07.120]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:21:07.121]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:21:07.122]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:21:07.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:07.123]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:21:07.125]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:21:07.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:21:07.127]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:07.128]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:21:07.129]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:21:07.129]          </block>
[03:21:07.129]          // end if-block "!hasDormant"
[03:21:07.129]        </control>
[03:21:07.129]        // end if-block "isSWJ"
[03:21:07.129]      </control>
[03:21:07.129]      <control if="!isSWJ" while="" timeout="0" info="">
[03:21:07.129]        // if-block "!isSWJ"
[03:21:07.129]          // =>  FALSE
[03:21:07.130]        // skip if-block "!isSWJ"
[03:21:07.130]      </control>
[03:21:07.130]      <block atomic="false" info="">
[03:21:07.131]        ReadDP(0x0);
[03:21:07.132]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:21:07.132]      </block>
[03:21:07.132]      // end if-block "protType == 2"
[03:21:07.132]    </control>
[03:21:07.133]  </sequence>
[03:21:07.133]  
[03:21:07.135]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:21:07.135]  
[03:21:07.135]  <debugvars>
[03:21:07.135]    // Pre-defined
[03:21:07.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:07.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:07.135]    __dp=0x00000000
[03:21:07.135]    __ap=0x00000000
[03:21:07.136]    __traceout=0x00000000      (Trace Disabled)
[03:21:07.136]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:07.136]    __FlashAddr=0x00000000
[03:21:07.136]    __FlashLen=0x00000000
[03:21:07.136]    __FlashArg=0x00000000
[03:21:07.138]    __FlashOp=0x00000000
[03:21:07.138]    __Result=0x00000000
[03:21:07.138]  </debugvars>
[03:21:07.138]  
[03:21:07.138]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:21:07.138]    <block atomic="false" info="">
[03:21:07.138]      __var SW_DP_ABORT       = 0x0;
[03:21:07.138]        // -> [SW_DP_ABORT <= 0x00000000]
[03:21:07.138]      __var DP_CTRL_STAT      = 0x4;
[03:21:07.138]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:21:07.139]      __var DP_SELECT         = 0x8;
[03:21:07.139]        // -> [DP_SELECT <= 0x00000008]
[03:21:07.139]      __var powered_down      = 0;
[03:21:07.139]        // -> [powered_down <= 0x00000000]
[03:21:07.139]      WriteDP(DP_SELECT, 0x00000000);
[03:21:07.140]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:21:07.141]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:21:07.142]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:21:07.142]        // -> [powered_down <= 0x00000001]
[03:21:07.142]    </block>
[03:21:07.142]    <control if="powered_down" while="" timeout="0" info="">
[03:21:07.142]      // if-block "powered_down"
[03:21:07.143]        // =>  TRUE
[03:21:07.143]      <block atomic="false" info="">
[03:21:07.143]        Message(0, "Debug/System power-up request sent");
[03:21:07.146]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:21:07.148]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:21:07.148]      </block>
[03:21:07.148]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:21:07.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:21:07.153]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:21:07.153]        // while-condition  =>  FALSE
[03:21:07.153]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:21:07.153]      </control>
[03:21:07.153]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:21:07.154]        // if-block "(__protocol & 0xFFFF) == 1"
[03:21:07.154]          // =>  FALSE
[03:21:07.154]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:21:07.154]      </control>
[03:21:07.154]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:21:07.154]        // if-block "(__protocol & 0xFFFF) == 2"
[03:21:07.155]          // =>  TRUE
[03:21:07.155]        <block atomic="false" info="">
[03:21:07.155]          Message(0, "executing SWD power up");
[03:21:07.157]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:21:07.162]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:21:07.162]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:21:07.164]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:21:07.164]        </block>
[03:21:07.164]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:21:07.164]      </control>
[03:21:07.164]      // end if-block "powered_down"
[03:21:07.164]    </control>
[03:21:07.164]    <block atomic="false" info="">
[03:21:07.164]      __var DEBUG_PORT_VAL    = 0;
[03:21:07.164]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:21:07.164]      __var ACCESS_POINT_VAL  = 0;
[03:21:07.164]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:21:07.165]      __ap = 1; 
[03:21:07.165]        // -> [__ap <= 0x00000001]
[03:21:07.165]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:21:07.170]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:21:07.170]      __ap = 4;
[03:21:07.170]        // -> [__ap <= 0x00000004]
[03:21:07.170]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:21:07.174]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:21:07.174]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:21:07.174]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:21:07.177]    </block>
[03:21:07.177]    <block atomic="false" info="">
[03:21:07.178]      __var nReset = 0x80;
[03:21:07.178]        // -> [nReset <= 0x00000080]
[03:21:07.178]      __var canReadPins = 0;
[03:21:07.178]        // -> [canReadPins <= 0x00000000]
[03:21:07.178]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:21:07.180]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:21:07.180]        // -> [canReadPins <= 0x00000001]
[03:21:07.180]    </block>
[03:21:07.181]    <control if="" while="1" timeout="200" info="">
[03:21:07.181]      // while "1"  (timeout="200")
[03:21:07.181]      // while-condition  =>  TRUE
[03:21:07.181]      // while "1"  (timeout="200")
[03:21:07.181]      // while-condition  =>  TRUE
[03:21:07.181]      // while "1"  (timeout="200")
[03:21:07.181]      // while-condition  =>  TRUE
[03:21:07.181]      // while "1"  (timeout="200")
[03:21:07.181]      // while-condition  =>  TRUE
[03:21:07.181]      // while "1"  (timeout="200")
[03:21:07.181]      // while-condition  =>  TRUE
[03:21:07.182]      // while "1"  (timeout="200")
[03:21:07.182]      // while-condition  =>  TRUE
[03:21:07.182]      // while "1"  (timeout="200")
[03:21:07.182]      // while-condition  =>  TRUE
[03:21:07.182]      // while "1"  (timeout="200")
[03:21:07.182]      // while-condition  =>  TRUE
[03:21:07.182]      // while "1"  (timeout="200")
[03:21:07.182]      // while-condition  =>  TRUE
[03:21:07.182]      // while "1"  (timeout="200")
[03:21:07.182]      // while-condition  =>  TRUE
[03:21:07.183]      // while "1"  (timeout="200")
[03:21:07.183]      // while-condition  =>  TRUE
[03:21:07.183]      // while "1"  (timeout="200")
[03:21:07.183]      // while-condition  =>  TRUE
[03:21:07.183]      // while "1"  (timeout="200")
[03:21:07.183]      // while-condition  =>  TRUE
[03:21:07.183]      // while "1"  (timeout="200")
[03:21:07.183]      // while-condition  =>  TRUE
[03:21:07.183]      // while "1"  (timeout="200")
[03:21:07.184]      // while-condition  =>  TRUE
[03:21:07.184]      // while "1"  (timeout="200")
[03:21:07.184]      // while-condition  =>  TRUE
[03:21:07.184]      // while "1"  (timeout="200")
[03:21:07.184]      // while-condition  =>  TRUE
[03:21:07.184]      // while "1"  (timeout="200")
[03:21:07.184]      // while-condition  =>  TRUE
[03:21:07.185]      // while "1"  (timeout="200")
[03:21:07.185]      // while-condition  =>  TRUE
[03:21:07.185]      // while "1"  (timeout="200")
[03:21:07.185]      // while-condition  =>  TRUE
[03:21:07.185]      // while "1"  (timeout="200")
[03:21:07.185]      // while-condition  =>  TRUE
[03:21:07.186]      // while "1"  (timeout="200")
[03:21:07.186]      // while-condition  =>  TRUE
[03:21:07.186]      // while "1"  (timeout="200")
[03:21:07.186]      // while-condition  =>  TRUE
[03:21:07.186]      // while "1"  (timeout="200")
[03:21:07.186]      // while-condition  =>  TRUE
[03:21:07.186]      // while "1"  (timeout="200")
[03:21:07.186]      // while-condition  =>  TRUE
[03:21:07.186]      // while "1"  (timeout="200")
[03:21:07.187]      // while-condition  =>  TRUE
[03:21:07.187]      // while "1"  (timeout="200")
[03:21:07.187]      // while-condition  =>  TRUE
[03:21:07.187]      // while "1"  (timeout="200")
[03:21:07.187]      // while-condition  =>  TRUE
[03:21:07.187]      // while "1"  (timeout="200")
[03:21:07.187]      // while-condition  =>  TRUE
[03:21:07.187]      // while "1"  (timeout="200")
[03:21:07.188]      // while-condition  =>  TRUE
[03:21:07.188]      // while "1"  (timeout="200")
[03:21:07.188]      // while  =>  TIMEOUT
[03:21:07.188]      // end while "1"
[03:21:07.188]    </control>
[03:21:07.188]    <control if="canReadPins" while="" timeout="0" info="">
[03:21:07.189]      // if-block "canReadPins"
[03:21:07.189]        // =>  TRUE
[03:21:07.189]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:21:07.189]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:21:07.190]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:21:07.191]        // while-condition  =>  FALSE
[03:21:07.191]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:21:07.191]      </control>
[03:21:07.191]      // end if-block "canReadPins"
[03:21:07.191]    </control>
[03:21:07.191]    <control if="!canReadPins" while="" timeout="0" info="">
[03:21:07.191]      // if-block "!canReadPins"
[03:21:07.192]        // =>  FALSE
[03:21:07.192]      // skip if-block "!canReadPins"
[03:21:07.192]    </control>
[03:21:07.192]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:21:07.192]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:21:07.192]        // =>  TRUE
[03:21:07.192]      <block atomic="false" info="">
[03:21:07.193]        WriteAP(0x00, 0x190008);
[03:21:07.194]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:21:07.194]        WriteAP(0xF0, 0x01);
[03:21:07.199]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:21:07.200]      </block>
[03:21:07.200]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:21:07.200]    </control>
[03:21:07.200]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:21:07.200]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:21:07.200]        // =>  FALSE
[03:21:07.200]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:21:07.200]    </control>
[03:21:07.202]    <block atomic="false" info="">
[03:21:07.202]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:21:07.205]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:21:07.205]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:21:07.205]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:21:07.208]      __ap = 0; //lets make sure we reset the access point selection
[03:21:07.208]        // -> [__ap <= 0x00000000]
[03:21:07.208]    </block>
[03:21:07.208]  </sequence>
[03:21:07.208]  
[03:21:07.229]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:21:07.229]  
[03:21:07.229]  <debugvars>
[03:21:07.229]    // Pre-defined
[03:21:07.229]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:07.229]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:07.230]    __dp=0x00000000
[03:21:07.230]    __ap=0x00000000
[03:21:07.230]    __traceout=0x00000000      (Trace Disabled)
[03:21:07.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:07.230]    __FlashAddr=0x00000000
[03:21:07.230]    __FlashLen=0x00000000
[03:21:07.230]    __FlashArg=0x00000000
[03:21:07.230]    __FlashOp=0x00000000
[03:21:07.230]    __Result=0x00000000
[03:21:07.231]  </debugvars>
[03:21:07.231]  
[03:21:07.231]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:21:07.231]    <block atomic="false" info="">
[03:21:07.231]      __var deviceID = 0;
[03:21:07.231]        // -> [deviceID <= 0x00000000]
[03:21:07.231]      __var version = 0;
[03:21:07.231]        // -> [version <= 0x00000000]
[03:21:07.231]      __var partNum = 0;
[03:21:07.232]        // -> [partNum <= 0x00000000]
[03:21:07.232]      __var manuf = 0;
[03:21:07.232]        // -> [manuf <= 0x00000000]
[03:21:07.232]      __var isMSPM0G1X0X_G3X0X = 0;
[03:21:07.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:21:07.232]      __var isProduction = 0;
[03:21:07.232]        // -> [isProduction <= 0x00000000]
[03:21:07.234]      __var continueId = 0;
[03:21:07.234]        // -> [continueId <= 0x00000000]
[03:21:07.234]      deviceID =   Read32(0x41C40004);
[03:21:07.238]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:21:07.239]        // -> [deviceID <= 0x2BB8802F]
[03:21:07.239]      version = deviceID >> 28;
[03:21:07.239]        // -> [version <= 0x00000002]
[03:21:07.239]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:21:07.239]        // -> [partNum <= 0x0000BB88]
[03:21:07.239]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:21:07.239]        // -> [manuf <= 0x00000017]
[03:21:07.239]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:21:07.239]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:21:07.239]      isProduction = (version > 0);
[03:21:07.239]        // -> [isProduction <= 0x00000001]
[03:21:07.240]    </block>
[03:21:07.240]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:21:07.240]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:21:07.240]        // =>  FALSE
[03:21:07.240]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:21:07.240]    </control>
[03:21:07.240]    <control if="continueId == 4" while="" timeout="0" info="">
[03:21:07.240]      // if-block "continueId == 4"
[03:21:07.240]        // =>  FALSE
[03:21:07.241]      // skip if-block "continueId == 4"
[03:21:07.241]    </control>
[03:21:07.241]    <control if="!isProduction" while="" timeout="0" info="">
[03:21:07.241]      // if-block "!isProduction"
[03:21:07.241]        // =>  FALSE
[03:21:07.241]      // skip if-block "!isProduction"
[03:21:07.241]    </control>
[03:21:07.241]  </sequence>
[03:21:07.241]  
[03:21:20.589]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:21:20.590]  
[03:21:20.598]  <debugvars>
[03:21:20.598]    // Pre-defined
[03:21:20.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:20.598]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:20.598]    __dp=0x00000000
[03:21:20.598]    __ap=0x00000000
[03:21:20.599]    __traceout=0x00000000      (Trace Disabled)
[03:21:20.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:20.599]    __FlashAddr=0x00000000
[03:21:20.599]    __FlashLen=0x00000000
[03:21:20.599]    __FlashArg=0x00000000
[03:21:20.599]    __FlashOp=0x00000000
[03:21:20.599]    __Result=0x00000000
[03:21:20.600]  </debugvars>
[03:21:20.600]  
[03:21:20.600]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:21:20.600]    <block atomic="false" info="">
[03:21:20.600]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:21:20.600]        // -> [isSWJ <= 0x00000001]
[03:21:20.600]      __var hasDormant = __protocol & 0x00020000;
[03:21:20.600]        // -> [hasDormant <= 0x00000000]
[03:21:20.600]      __var protType   = __protocol & 0x0000FFFF;
[03:21:20.600]        // -> [protType <= 0x00000002]
[03:21:20.600]    </block>
[03:21:20.600]    <control if="protType == 1" while="" timeout="0" info="">
[03:21:20.601]      // if-block "protType == 1"
[03:21:20.601]        // =>  FALSE
[03:21:20.601]      // skip if-block "protType == 1"
[03:21:20.601]    </control>
[03:21:20.601]    <control if="protType == 2" while="" timeout="0" info="">
[03:21:20.601]      // if-block "protType == 2"
[03:21:20.601]        // =>  TRUE
[03:21:20.601]      <control if="isSWJ" while="" timeout="0" info="">
[03:21:20.601]        // if-block "isSWJ"
[03:21:20.601]          // =>  TRUE
[03:21:20.601]        <control if="hasDormant" while="" timeout="0" info="">
[03:21:20.602]          // if-block "hasDormant"
[03:21:20.602]            // =>  FALSE
[03:21:20.602]          // skip if-block "hasDormant"
[03:21:20.602]        </control>
[03:21:20.602]        <control if="!hasDormant" while="" timeout="0" info="">
[03:21:20.602]          // if-block "!hasDormant"
[03:21:20.602]            // =>  TRUE
[03:21:20.602]          <block atomic="false" info="">
[03:21:20.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:21:20.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:20.604]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:21:20.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:21:20.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:21:20.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:20.607]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:21:20.612]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:21:20.612]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:21:20.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:21:20.614]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:21:20.615]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:21:20.615]          </block>
[03:21:20.615]          // end if-block "!hasDormant"
[03:21:20.615]        </control>
[03:21:20.615]        // end if-block "isSWJ"
[03:21:20.615]      </control>
[03:21:20.615]      <control if="!isSWJ" while="" timeout="0" info="">
[03:21:20.615]        // if-block "!isSWJ"
[03:21:20.615]          // =>  FALSE
[03:21:20.615]        // skip if-block "!isSWJ"
[03:21:20.615]      </control>
[03:21:20.615]      <block atomic="false" info="">
[03:21:20.615]        ReadDP(0x0);
[03:21:20.618]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:21:20.618]      </block>
[03:21:20.618]      // end if-block "protType == 2"
[03:21:20.618]    </control>
[03:21:20.618]  </sequence>
[03:21:20.618]  
[03:21:20.621]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:21:20.621]  
[03:21:20.621]  <debugvars>
[03:21:20.621]    // Pre-defined
[03:21:20.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:20.621]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:20.621]    __dp=0x00000000
[03:21:20.621]    __ap=0x00000000
[03:21:20.621]    __traceout=0x00000000      (Trace Disabled)
[03:21:20.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:20.622]    __FlashAddr=0x00000000
[03:21:20.622]    __FlashLen=0x00000000
[03:21:20.622]    __FlashArg=0x00000000
[03:21:20.622]    __FlashOp=0x00000000
[03:21:20.622]    __Result=0x00000000
[03:21:20.622]  </debugvars>
[03:21:20.622]  
[03:21:20.622]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:21:20.622]    <block atomic="false" info="">
[03:21:20.622]      __var SW_DP_ABORT       = 0x0;
[03:21:20.622]        // -> [SW_DP_ABORT <= 0x00000000]
[03:21:20.622]      __var DP_CTRL_STAT      = 0x4;
[03:21:20.622]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:21:20.622]      __var DP_SELECT         = 0x8;
[03:21:20.623]        // -> [DP_SELECT <= 0x00000008]
[03:21:20.623]      __var powered_down      = 0;
[03:21:20.623]        // -> [powered_down <= 0x00000000]
[03:21:20.623]      WriteDP(DP_SELECT, 0x00000000);
[03:21:20.624]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:21:20.624]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:21:20.627]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:21:20.627]        // -> [powered_down <= 0x00000001]
[03:21:20.627]    </block>
[03:21:20.627]    <control if="powered_down" while="" timeout="0" info="">
[03:21:20.627]      // if-block "powered_down"
[03:21:20.627]        // =>  TRUE
[03:21:20.627]      <block atomic="false" info="">
[03:21:20.627]        Message(0, "Debug/System power-up request sent");
[03:21:20.629]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:21:20.631]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:21:20.631]      </block>
[03:21:20.631]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:21:20.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:21:20.632]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:21:20.632]        // while-condition  =>  FALSE
[03:21:20.633]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:21:20.633]      </control>
[03:21:20.633]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:21:20.633]        // if-block "(__protocol & 0xFFFF) == 1"
[03:21:20.633]          // =>  FALSE
[03:21:20.633]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:21:20.633]      </control>
[03:21:20.634]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:21:20.634]        // if-block "(__protocol & 0xFFFF) == 2"
[03:21:20.634]          // =>  TRUE
[03:21:20.634]        <block atomic="false" info="">
[03:21:20.634]          Message(0, "executing SWD power up");
[03:21:20.636]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:21:20.639]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:21:20.639]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:21:20.641]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:21:20.641]        </block>
[03:21:20.641]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:21:20.641]      </control>
[03:21:20.641]      // end if-block "powered_down"
[03:21:20.641]    </control>
[03:21:20.641]    <block atomic="false" info="">
[03:21:20.641]      __var DEBUG_PORT_VAL    = 0;
[03:21:20.641]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:21:20.642]      __var ACCESS_POINT_VAL  = 0;
[03:21:20.642]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:21:20.642]      __ap = 1; 
[03:21:20.642]        // -> [__ap <= 0x00000001]
[03:21:20.642]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:21:20.646]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:21:20.646]      __ap = 4;
[03:21:20.646]        // -> [__ap <= 0x00000004]
[03:21:20.646]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:21:20.650]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:21:20.650]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:21:20.650]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:21:20.652]    </block>
[03:21:20.652]    <block atomic="false" info="">
[03:21:20.652]      __var nReset = 0x80;
[03:21:20.652]        // -> [nReset <= 0x00000080]
[03:21:20.653]      __var canReadPins = 0;
[03:21:20.653]        // -> [canReadPins <= 0x00000000]
[03:21:20.653]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:21:20.658]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:21:20.658]        // -> [canReadPins <= 0x00000001]
[03:21:20.658]    </block>
[03:21:20.658]    <control if="" while="1" timeout="200" info="">
[03:21:20.658]      // while "1"  (timeout="200")
[03:21:20.658]      // while-condition  =>  TRUE
[03:21:20.658]      // while "1"  (timeout="200")
[03:21:20.659]      // while-condition  =>  TRUE
[03:21:20.659]      // while "1"  (timeout="200")
[03:21:20.659]      // while-condition  =>  TRUE
[03:21:20.659]      // while "1"  (timeout="200")
[03:21:20.659]      // while-condition  =>  TRUE
[03:21:20.659]      // while "1"  (timeout="200")
[03:21:20.659]      // while-condition  =>  TRUE
[03:21:20.660]      // while "1"  (timeout="200")
[03:21:20.660]      // while-condition  =>  TRUE
[03:21:20.660]      // while "1"  (timeout="200")
[03:21:20.660]      // while-condition  =>  TRUE
[03:21:20.660]      // while "1"  (timeout="200")
[03:21:20.660]      // while-condition  =>  TRUE
[03:21:20.660]      // while "1"  (timeout="200")
[03:21:20.660]      // while-condition  =>  TRUE
[03:21:20.660]      // while "1"  (timeout="200")
[03:21:20.661]      // while-condition  =>  TRUE
[03:21:20.661]      // while "1"  (timeout="200")
[03:21:20.661]      // while-condition  =>  TRUE
[03:21:20.661]      // while "1"  (timeout="200")
[03:21:20.661]      // while-condition  =>  TRUE
[03:21:20.661]      // while "1"  (timeout="200")
[03:21:20.661]      // while-condition  =>  TRUE
[03:21:20.661]      // while "1"  (timeout="200")
[03:21:20.661]      // while-condition  =>  TRUE
[03:21:20.661]      // while "1"  (timeout="200")
[03:21:20.661]      // while-condition  =>  TRUE
[03:21:20.661]      // while "1"  (timeout="200")
[03:21:20.662]      // while-condition  =>  TRUE
[03:21:20.662]      // while "1"  (timeout="200")
[03:21:20.662]      // while-condition  =>  TRUE
[03:21:20.662]      // while "1"  (timeout="200")
[03:21:20.662]      // while-condition  =>  TRUE
[03:21:20.662]      // while "1"  (timeout="200")
[03:21:20.662]      // while-condition  =>  TRUE
[03:21:20.662]      // while "1"  (timeout="200")
[03:21:20.662]      // while-condition  =>  TRUE
[03:21:20.662]      // while "1"  (timeout="200")
[03:21:20.662]      // while-condition  =>  TRUE
[03:21:20.663]      // while "1"  (timeout="200")
[03:21:20.663]      // while-condition  =>  TRUE
[03:21:20.663]      // while "1"  (timeout="200")
[03:21:20.663]      // while-condition  =>  TRUE
[03:21:20.663]      // while "1"  (timeout="200")
[03:21:20.663]      // while-condition  =>  TRUE
[03:21:20.663]      // while "1"  (timeout="200")
[03:21:20.663]      // while-condition  =>  TRUE
[03:21:20.663]      // while "1"  (timeout="200")
[03:21:20.663]      // while-condition  =>  TRUE
[03:21:20.664]      // while "1"  (timeout="200")
[03:21:20.664]      // while-condition  =>  TRUE
[03:21:20.664]      // while "1"  (timeout="200")
[03:21:20.664]      // while-condition  =>  TRUE
[03:21:20.664]      // while "1"  (timeout="200")
[03:21:20.664]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.665]      // while "1"  (timeout="200")
[03:21:20.665]      // while-condition  =>  TRUE
[03:21:20.666]      // while "1"  (timeout="200")
[03:21:20.666]      // while-condition  =>  TRUE
[03:21:20.666]      // while "1"  (timeout="200")
[03:21:20.666]      // while-condition  =>  TRUE
[03:21:20.666]      // while "1"  (timeout="200")
[03:21:20.666]      // while-condition  =>  TRUE
[03:21:20.666]      // while "1"  (timeout="200")
[03:21:20.666]      // while-condition  =>  TRUE
[03:21:20.666]      // while "1"  (timeout="200")
[03:21:20.667]      // while-condition  =>  TRUE
[03:21:20.667]      // while "1"  (timeout="200")
[03:21:20.667]      // while-condition  =>  TRUE
[03:21:20.667]      // while "1"  (timeout="200")
[03:21:20.667]      // while-condition  =>  TRUE
[03:21:20.667]      // while "1"  (timeout="200")
[03:21:20.667]      // while-condition  =>  TRUE
[03:21:20.667]      // while "1"  (timeout="200")
[03:21:20.667]      // while-condition  =>  TRUE
[03:21:20.667]      // while "1"  (timeout="200")
[03:21:20.667]      // while-condition  =>  TRUE
[03:21:20.668]      // while "1"  (timeout="200")
[03:21:20.668]      // while-condition  =>  TRUE
[03:21:20.668]      // while "1"  (timeout="200")
[03:21:20.668]      // while-condition  =>  TRUE
[03:21:20.668]      // while "1"  (timeout="200")
[03:21:20.668]      // while-condition  =>  TRUE
[03:21:20.668]      // while "1"  (timeout="200")
[03:21:20.668]      // while-condition  =>  TRUE
[03:21:20.668]      // while "1"  (timeout="200")
[03:21:20.668]      // while-condition  =>  TRUE
[03:21:20.668]      // while "1"  (timeout="200")
[03:21:20.669]      // while-condition  =>  TRUE
[03:21:20.669]      // while "1"  (timeout="200")
[03:21:20.669]      // while-condition  =>  TRUE
[03:21:20.669]      // while "1"  (timeout="200")
[03:21:20.669]      // while-condition  =>  TRUE
[03:21:20.669]      // while "1"  (timeout="200")
[03:21:20.669]      // while-condition  =>  TRUE
[03:21:20.669]      // while "1"  (timeout="200")
[03:21:20.669]      // while-condition  =>  TRUE
[03:21:20.670]      // while "1"  (timeout="200")
[03:21:20.670]      // while-condition  =>  TRUE
[03:21:20.670]      // while "1"  (timeout="200")
[03:21:20.670]      // while-condition  =>  TRUE
[03:21:20.670]      // while "1"  (timeout="200")
[03:21:20.670]      // while-condition  =>  TRUE
[03:21:20.670]      // while "1"  (timeout="200")
[03:21:20.670]      // while-condition  =>  TRUE
[03:21:20.670]      // while "1"  (timeout="200")
[03:21:20.670]      // while-condition  =>  TRUE
[03:21:20.670]      // while "1"  (timeout="200")
[03:21:20.671]      // while-condition  =>  TRUE
[03:21:20.671]      // while "1"  (timeout="200")
[03:21:20.671]      // while-condition  =>  TRUE
[03:21:20.671]      // while "1"  (timeout="200")
[03:21:20.671]      // while-condition  =>  TRUE
[03:21:20.672]      // while "1"  (timeout="200")
[03:21:20.672]      // while-condition  =>  TRUE
[03:21:20.672]      // while "1"  (timeout="200")
[03:21:20.672]      // while-condition  =>  TRUE
[03:21:20.672]      // while "1"  (timeout="200")
[03:21:20.672]      // while-condition  =>  TRUE
[03:21:20.672]      // while "1"  (timeout="200")
[03:21:20.672]      // while-condition  =>  TRUE
[03:21:20.672]      // while "1"  (timeout="200")
[03:21:20.672]      // while-condition  =>  TRUE
[03:21:20.672]      // while "1"  (timeout="200")
[03:21:20.672]      // while-condition  =>  TRUE
[03:21:20.673]      // while "1"  (timeout="200")
[03:21:20.673]      // while  =>  TIMEOUT
[03:21:20.673]      // end while "1"
[03:21:20.673]    </control>
[03:21:20.673]    <control if="canReadPins" while="" timeout="0" info="">
[03:21:20.673]      // if-block "canReadPins"
[03:21:20.673]        // =>  TRUE
[03:21:20.673]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:21:20.673]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:21:20.678]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:21:20.678]        // while-condition  =>  FALSE
[03:21:20.679]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:21:20.679]      </control>
[03:21:20.679]      // end if-block "canReadPins"
[03:21:20.679]    </control>
[03:21:20.679]    <control if="!canReadPins" while="" timeout="0" info="">
[03:21:20.679]      // if-block "!canReadPins"
[03:21:20.679]        // =>  FALSE
[03:21:20.679]      // skip if-block "!canReadPins"
[03:21:20.679]    </control>
[03:21:20.680]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:21:20.680]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:21:20.680]        // =>  TRUE
[03:21:20.680]      <block atomic="false" info="">
[03:21:20.680]        WriteAP(0x00, 0x190008);
[03:21:20.681]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:21:20.681]        WriteAP(0xF0, 0x01);
[03:21:20.688]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:21:20.688]      </block>
[03:21:20.688]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:21:20.689]    </control>
[03:21:20.689]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:21:20.689]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:21:20.689]        // =>  FALSE
[03:21:20.689]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:21:20.689]    </control>
[03:21:20.689]    <block atomic="false" info="">
[03:21:20.689]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:21:20.692]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:21:20.692]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:21:20.693]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:21:20.695]      __ap = 0; //lets make sure we reset the access point selection
[03:21:20.695]        // -> [__ap <= 0x00000000]
[03:21:20.695]    </block>
[03:21:20.695]  </sequence>
[03:21:20.695]  
[03:21:20.715]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:21:20.715]  
[03:21:20.715]  <debugvars>
[03:21:20.715]    // Pre-defined
[03:21:20.716]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:21:20.717]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:21:20.717]    __dp=0x00000000
[03:21:20.717]    __ap=0x00000000
[03:21:20.717]    __traceout=0x00000000      (Trace Disabled)
[03:21:20.717]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:21:20.717]    __FlashAddr=0x00000000
[03:21:20.717]    __FlashLen=0x00000000
[03:21:20.717]    __FlashArg=0x00000000
[03:21:20.717]    __FlashOp=0x00000000
[03:21:20.717]    __Result=0x00000000
[03:21:20.717]  </debugvars>
[03:21:20.717]  
[03:21:20.717]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:21:20.718]    <block atomic="false" info="">
[03:21:20.718]      __var deviceID = 0;
[03:21:20.718]        // -> [deviceID <= 0x00000000]
[03:21:20.718]      __var version = 0;
[03:21:20.718]        // -> [version <= 0x00000000]
[03:21:20.718]      __var partNum = 0;
[03:21:20.718]        // -> [partNum <= 0x00000000]
[03:21:20.718]      __var manuf = 0;
[03:21:20.718]        // -> [manuf <= 0x00000000]
[03:21:20.719]      __var isMSPM0G1X0X_G3X0X = 0;
[03:21:20.719]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:21:20.719]      __var isProduction = 0;
[03:21:20.719]        // -> [isProduction <= 0x00000000]
[03:21:20.719]      __var continueId = 0;
[03:21:20.719]        // -> [continueId <= 0x00000000]
[03:21:20.719]      deviceID =   Read32(0x41C40004);
[03:21:20.723]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:21:20.723]        // -> [deviceID <= 0x2BB8802F]
[03:21:20.723]      version = deviceID >> 28;
[03:21:20.724]        // -> [version <= 0x00000002]
[03:21:20.724]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:21:20.724]        // -> [partNum <= 0x0000BB88]
[03:21:20.724]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:21:20.724]        // -> [manuf <= 0x00000017]
[03:21:20.724]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:21:20.724]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:21:20.724]      isProduction = (version > 0);
[03:21:20.724]        // -> [isProduction <= 0x00000001]
[03:21:20.726]    </block>
[03:21:20.726]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:21:20.726]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:21:20.726]        // =>  FALSE
[03:21:20.726]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:21:20.726]    </control>
[03:21:20.726]    <control if="continueId == 4" while="" timeout="0" info="">
[03:21:20.726]      // if-block "continueId == 4"
[03:21:20.726]        // =>  FALSE
[03:21:20.726]      // skip if-block "continueId == 4"
[03:21:20.726]    </control>
[03:21:20.727]    <control if="!isProduction" while="" timeout="0" info="">
[03:21:20.727]      // if-block "!isProduction"
[03:21:20.727]        // =>  FALSE
[03:21:20.727]      // skip if-block "!isProduction"
[03:21:20.727]    </control>
[03:21:20.727]  </sequence>
[03:21:20.727]  
[03:24:16.723]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:24:16.723]  
[03:24:16.731]  <debugvars>
[03:24:16.731]    // Pre-defined
[03:24:16.731]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:24:16.731]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:24:16.731]    __dp=0x00000000
[03:24:16.731]    __ap=0x00000000
[03:24:16.731]    __traceout=0x00000000      (Trace Disabled)
[03:24:16.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:24:16.732]    __FlashAddr=0x00000000
[03:24:16.732]    __FlashLen=0x00000000
[03:24:16.732]    __FlashArg=0x00000000
[03:24:16.732]    __FlashOp=0x00000000
[03:24:16.732]    __Result=0x00000000
[03:24:16.732]  </debugvars>
[03:24:16.732]  
[03:24:16.732]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:24:16.733]    <block atomic="false" info="">
[03:24:16.733]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:24:16.733]        // -> [isSWJ <= 0x00000001]
[03:24:16.733]      __var hasDormant = __protocol & 0x00020000;
[03:24:16.733]        // -> [hasDormant <= 0x00000000]
[03:24:16.733]      __var protType   = __protocol & 0x0000FFFF;
[03:24:16.733]        // -> [protType <= 0x00000002]
[03:24:16.733]    </block>
[03:24:16.733]    <control if="protType == 1" while="" timeout="0" info="">
[03:24:16.734]      // if-block "protType == 1"
[03:24:16.734]        // =>  FALSE
[03:24:16.734]      // skip if-block "protType == 1"
[03:24:16.734]    </control>
[03:24:16.734]    <control if="protType == 2" while="" timeout="0" info="">
[03:24:16.734]      // if-block "protType == 2"
[03:24:16.735]        // =>  TRUE
[03:24:16.735]      <control if="isSWJ" while="" timeout="0" info="">
[03:24:16.735]        // if-block "isSWJ"
[03:24:16.735]          // =>  TRUE
[03:24:16.735]        <control if="hasDormant" while="" timeout="0" info="">
[03:24:16.735]          // if-block "hasDormant"
[03:24:16.735]            // =>  FALSE
[03:24:16.736]          // skip if-block "hasDormant"
[03:24:16.736]        </control>
[03:24:16.736]        <control if="!hasDormant" while="" timeout="0" info="">
[03:24:16.736]          // if-block "!hasDormant"
[03:24:16.736]            // =>  TRUE
[03:24:16.736]          <block atomic="false" info="">
[03:24:16.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:24:16.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:24:16.738]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:24:16.739]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:24:16.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:24:16.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:24:16.744]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:24:16.745]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:24:16.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:24:16.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:24:16.747]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:24:16.748]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:24:16.748]          </block>
[03:24:16.748]          // end if-block "!hasDormant"
[03:24:16.748]        </control>
[03:24:16.748]        // end if-block "isSWJ"
[03:24:16.748]      </control>
[03:24:16.748]      <control if="!isSWJ" while="" timeout="0" info="">
[03:24:16.748]        // if-block "!isSWJ"
[03:24:16.748]          // =>  FALSE
[03:24:16.748]        // skip if-block "!isSWJ"
[03:24:16.748]      </control>
[03:24:16.748]      <block atomic="false" info="">
[03:24:16.748]        ReadDP(0x0);
[03:24:16.751]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:24:16.751]      </block>
[03:24:16.751]      // end if-block "protType == 2"
[03:24:16.751]    </control>
[03:24:16.751]  </sequence>
[03:24:16.751]  
[03:24:16.754]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:24:16.754]  
[03:24:16.754]  <debugvars>
[03:24:16.754]    // Pre-defined
[03:24:16.754]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:24:16.754]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:24:16.754]    __dp=0x00000000
[03:24:16.754]    __ap=0x00000000
[03:24:16.754]    __traceout=0x00000000      (Trace Disabled)
[03:24:16.754]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:24:16.754]    __FlashAddr=0x00000000
[03:24:16.755]    __FlashLen=0x00000000
[03:24:16.755]    __FlashArg=0x00000000
[03:24:16.755]    __FlashOp=0x00000000
[03:24:16.755]    __Result=0x00000000
[03:24:16.755]  </debugvars>
[03:24:16.755]  
[03:24:16.755]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:24:16.755]    <block atomic="false" info="">
[03:24:16.756]      __var SW_DP_ABORT       = 0x0;
[03:24:16.756]        // -> [SW_DP_ABORT <= 0x00000000]
[03:24:16.756]      __var DP_CTRL_STAT      = 0x4;
[03:24:16.756]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:24:16.756]      __var DP_SELECT         = 0x8;
[03:24:16.756]        // -> [DP_SELECT <= 0x00000008]
[03:24:16.757]      __var powered_down      = 0;
[03:24:16.757]        // -> [powered_down <= 0x00000000]
[03:24:16.757]      WriteDP(DP_SELECT, 0x00000000);
[03:24:16.762]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:24:16.762]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:24:16.766]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:24:16.766]        // -> [powered_down <= 0x00000001]
[03:24:16.766]    </block>
[03:24:16.766]    <control if="powered_down" while="" timeout="0" info="">
[03:24:16.767]      // if-block "powered_down"
[03:24:16.767]        // =>  TRUE
[03:24:16.767]      <block atomic="false" info="">
[03:24:16.767]        Message(0, "Debug/System power-up request sent");
[03:24:16.770]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:24:16.772]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:24:16.772]      </block>
[03:24:16.772]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:24:16.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:24:16.775]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:24:16.776]        // while-condition  =>  FALSE
[03:24:16.776]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:24:16.776]      </control>
[03:24:16.776]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:24:16.776]        // if-block "(__protocol & 0xFFFF) == 1"
[03:24:16.776]          // =>  FALSE
[03:24:16.777]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:24:16.777]      </control>
[03:24:16.777]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:24:16.777]        // if-block "(__protocol & 0xFFFF) == 2"
[03:24:16.777]          // =>  TRUE
[03:24:16.777]        <block atomic="false" info="">
[03:24:16.777]          Message(0, "executing SWD power up");
[03:24:16.780]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:24:16.782]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:24:16.782]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:24:16.783]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:24:16.784]        </block>
[03:24:16.784]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:24:16.784]      </control>
[03:24:16.784]      // end if-block "powered_down"
[03:24:16.784]    </control>
[03:24:16.784]    <block atomic="false" info="">
[03:24:16.784]      __var DEBUG_PORT_VAL    = 0;
[03:24:16.784]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:24:16.784]      __var ACCESS_POINT_VAL  = 0;
[03:24:16.784]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:24:16.785]      __ap = 1; 
[03:24:16.785]        // -> [__ap <= 0x00000001]
[03:24:16.785]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:24:16.789]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:24:16.789]      __ap = 4;
[03:24:16.789]        // -> [__ap <= 0x00000004]
[03:24:16.789]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:24:16.792]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:24:16.792]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:24:16.793]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:24:16.795]    </block>
[03:24:16.795]    <block atomic="false" info="">
[03:24:16.796]      __var nReset = 0x80;
[03:24:16.796]        // -> [nReset <= 0x00000080]
[03:24:16.796]      __var canReadPins = 0;
[03:24:16.796]        // -> [canReadPins <= 0x00000000]
[03:24:16.796]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:24:16.798]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:24:16.798]        // -> [canReadPins <= 0x00000001]
[03:24:16.798]    </block>
[03:24:16.799]    <control if="" while="1" timeout="200" info="">
[03:24:16.799]      // while "1"  (timeout="200")
[03:24:16.799]      // while-condition  =>  TRUE
[03:24:16.799]      // while "1"  (timeout="200")
[03:24:16.799]      // while-condition  =>  TRUE
[03:24:16.799]      // while "1"  (timeout="200")
[03:24:16.800]      // while-condition  =>  TRUE
[03:24:16.800]      // while "1"  (timeout="200")
[03:24:16.800]      // while-condition  =>  TRUE
[03:24:16.800]      // while "1"  (timeout="200")
[03:24:16.800]      // while-condition  =>  TRUE
[03:24:16.800]      // while "1"  (timeout="200")
[03:24:16.800]      // while-condition  =>  TRUE
[03:24:16.801]      // while "1"  (timeout="200")
[03:24:16.801]      // while-condition  =>  TRUE
[03:24:16.801]      // while "1"  (timeout="200")
[03:24:16.801]      // while-condition  =>  TRUE
[03:24:16.801]      // while "1"  (timeout="200")
[03:24:16.801]      // while-condition  =>  TRUE
[03:24:16.801]      // while "1"  (timeout="200")
[03:24:16.802]      // while-condition  =>  TRUE
[03:24:16.802]      // while "1"  (timeout="200")
[03:24:16.802]      // while-condition  =>  TRUE
[03:24:16.802]      // while "1"  (timeout="200")
[03:24:16.802]      // while-condition  =>  TRUE
[03:24:16.802]      // while "1"  (timeout="200")
[03:24:16.803]      // while-condition  =>  TRUE
[03:24:16.803]      // while "1"  (timeout="200")
[03:24:16.803]      // while-condition  =>  TRUE
[03:24:16.803]      // while "1"  (timeout="200")
[03:24:16.803]      // while-condition  =>  TRUE
[03:24:16.803]      // while "1"  (timeout="200")
[03:24:16.804]      // while-condition  =>  TRUE
[03:24:16.804]      // while "1"  (timeout="200")
[03:24:16.804]      // while-condition  =>  TRUE
[03:24:16.804]      // while "1"  (timeout="200")
[03:24:16.804]      // while-condition  =>  TRUE
[03:24:16.804]      // while "1"  (timeout="200")
[03:24:16.805]      // while-condition  =>  TRUE
[03:24:16.805]      // while "1"  (timeout="200")
[03:24:16.805]      // while-condition  =>  TRUE
[03:24:16.805]      // while "1"  (timeout="200")
[03:24:16.805]      // while-condition  =>  TRUE
[03:24:16.805]      // while "1"  (timeout="200")
[03:24:16.806]      // while-condition  =>  TRUE
[03:24:16.807]      // while "1"  (timeout="200")
[03:24:16.807]      // while-condition  =>  TRUE
[03:24:16.807]      // while "1"  (timeout="200")
[03:24:16.807]      // while-condition  =>  TRUE
[03:24:16.807]      // while "1"  (timeout="200")
[03:24:16.807]      // while-condition  =>  TRUE
[03:24:16.807]      // while "1"  (timeout="200")
[03:24:16.807]      // while-condition  =>  TRUE
[03:24:16.808]      // while "1"  (timeout="200")
[03:24:16.808]      // while-condition  =>  TRUE
[03:24:16.808]      // while "1"  (timeout="200")
[03:24:16.808]      // while-condition  =>  TRUE
[03:24:16.808]      // while "1"  (timeout="200")
[03:24:16.808]      // while-condition  =>  TRUE
[03:24:16.808]      // while "1"  (timeout="200")
[03:24:16.808]      // while-condition  =>  TRUE
[03:24:16.808]      // while "1"  (timeout="200")
[03:24:16.809]      // while-condition  =>  TRUE
[03:24:16.809]      // while "1"  (timeout="200")
[03:24:16.809]      // while-condition  =>  TRUE
[03:24:16.809]      // while "1"  (timeout="200")
[03:24:16.809]      // while-condition  =>  TRUE
[03:24:16.809]      // while "1"  (timeout="200")
[03:24:16.809]      // while-condition  =>  TRUE
[03:24:16.809]      // while "1"  (timeout="200")
[03:24:16.809]      // while-condition  =>  TRUE
[03:24:16.809]      // while "1"  (timeout="200")
[03:24:16.810]      // while-condition  =>  TRUE
[03:24:16.810]      // while "1"  (timeout="200")
[03:24:16.810]      // while-condition  =>  TRUE
[03:24:16.810]      // while "1"  (timeout="200")
[03:24:16.810]      // while-condition  =>  TRUE
[03:24:16.810]      // while "1"  (timeout="200")
[03:24:16.810]      // while-condition  =>  TRUE
[03:24:16.810]      // while "1"  (timeout="200")
[03:24:16.810]      // while-condition  =>  TRUE
[03:24:16.811]      // while "1"  (timeout="200")
[03:24:16.811]      // while-condition  =>  TRUE
[03:24:16.811]      // while "1"  (timeout="200")
[03:24:16.811]      // while-condition  =>  TRUE
[03:24:16.811]      // while "1"  (timeout="200")
[03:24:16.811]      // while-condition  =>  TRUE
[03:24:16.811]      // while "1"  (timeout="200")
[03:24:16.811]      // while-condition  =>  TRUE
[03:24:16.811]      // while "1"  (timeout="200")
[03:24:16.812]      // while-condition  =>  TRUE
[03:24:16.812]      // while "1"  (timeout="200")
[03:24:16.812]      // while-condition  =>  TRUE
[03:24:16.812]      // while "1"  (timeout="200")
[03:24:16.812]      // while-condition  =>  TRUE
[03:24:16.812]      // while "1"  (timeout="200")
[03:24:16.812]      // while-condition  =>  TRUE
[03:24:16.813]      // while "1"  (timeout="200")
[03:24:16.813]      // while-condition  =>  TRUE
[03:24:16.813]      // while "1"  (timeout="200")
[03:24:16.813]      // while-condition  =>  TRUE
[03:24:16.813]      // while "1"  (timeout="200")
[03:24:16.813]      // while-condition  =>  TRUE
[03:24:16.813]      // while "1"  (timeout="200")
[03:24:16.813]      // while-condition  =>  TRUE
[03:24:16.814]      // while "1"  (timeout="200")
[03:24:16.814]      // while  =>  TIMEOUT
[03:24:16.814]      // end while "1"
[03:24:16.814]    </control>
[03:24:16.814]    <control if="canReadPins" while="" timeout="0" info="">
[03:24:16.814]      // if-block "canReadPins"
[03:24:16.814]        // =>  TRUE
[03:24:16.814]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:24:16.814]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:24:16.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:24:16.816]        // while-condition  =>  FALSE
[03:24:16.816]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:24:16.816]      </control>
[03:24:16.816]      // end if-block "canReadPins"
[03:24:16.817]    </control>
[03:24:16.817]    <control if="!canReadPins" while="" timeout="0" info="">
[03:24:16.817]      // if-block "!canReadPins"
[03:24:16.817]        // =>  FALSE
[03:24:16.817]      // skip if-block "!canReadPins"
[03:24:16.817]    </control>
[03:24:16.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:24:16.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:24:16.818]        // =>  TRUE
[03:24:16.818]      <block atomic="false" info="">
[03:24:16.818]        WriteAP(0x00, 0x190008);
[03:24:16.823]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:24:16.823]        WriteAP(0xF0, 0x01);
[03:24:16.827]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:24:16.827]      </block>
[03:24:16.827]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:24:16.827]    </control>
[03:24:16.827]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:24:16.827]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:24:16.827]        // =>  FALSE
[03:24:16.827]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:24:16.827]    </control>
[03:24:16.827]    <block atomic="false" info="">
[03:24:16.827]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:24:16.831]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:24:16.831]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:24:16.831]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:24:16.833]      __ap = 0; //lets make sure we reset the access point selection
[03:24:16.834]        // -> [__ap <= 0x00000000]
[03:24:16.834]    </block>
[03:24:16.834]  </sequence>
[03:24:16.834]  
[03:24:16.855]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:24:16.855]  
[03:24:16.855]  <debugvars>
[03:24:16.855]    // Pre-defined
[03:24:16.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:24:16.856]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:24:16.856]    __dp=0x00000000
[03:24:16.856]    __ap=0x00000000
[03:24:16.856]    __traceout=0x00000000      (Trace Disabled)
[03:24:16.856]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:24:16.856]    __FlashAddr=0x00000000
[03:24:16.856]    __FlashLen=0x00000000
[03:24:16.856]    __FlashArg=0x00000000
[03:24:16.856]    __FlashOp=0x00000000
[03:24:16.858]    __Result=0x00000000
[03:24:16.858]  </debugvars>
[03:24:16.858]  
[03:24:16.858]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:24:16.858]    <block atomic="false" info="">
[03:24:16.858]      __var deviceID = 0;
[03:24:16.858]        // -> [deviceID <= 0x00000000]
[03:24:16.859]      __var version = 0;
[03:24:16.859]        // -> [version <= 0x00000000]
[03:24:16.859]      __var partNum = 0;
[03:24:16.859]        // -> [partNum <= 0x00000000]
[03:24:16.859]      __var manuf = 0;
[03:24:16.859]        // -> [manuf <= 0x00000000]
[03:24:16.859]      __var isMSPM0G1X0X_G3X0X = 0;
[03:24:16.859]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:24:16.859]      __var isProduction = 0;
[03:24:16.860]        // -> [isProduction <= 0x00000000]
[03:24:16.860]      __var continueId = 0;
[03:24:16.860]        // -> [continueId <= 0x00000000]
[03:24:16.860]      deviceID =   Read32(0x41C40004);
[03:24:16.865]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:24:16.865]        // -> [deviceID <= 0x2BB8802F]
[03:24:16.865]      version = deviceID >> 28;
[03:24:16.865]        // -> [version <= 0x00000002]
[03:24:16.865]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:24:16.865]        // -> [partNum <= 0x0000BB88]
[03:24:16.865]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:24:16.865]        // -> [manuf <= 0x00000017]
[03:24:16.866]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:24:16.866]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:24:16.866]      isProduction = (version > 0);
[03:24:16.866]        // -> [isProduction <= 0x00000001]
[03:24:16.866]    </block>
[03:24:16.866]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:24:16.866]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:24:16.866]        // =>  FALSE
[03:24:16.866]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:24:16.867]    </control>
[03:24:16.867]    <control if="continueId == 4" while="" timeout="0" info="">
[03:24:16.867]      // if-block "continueId == 4"
[03:24:16.867]        // =>  FALSE
[03:24:16.867]      // skip if-block "continueId == 4"
[03:24:16.867]    </control>
[03:24:16.867]    <control if="!isProduction" while="" timeout="0" info="">
[03:24:16.867]      // if-block "!isProduction"
[03:24:16.867]        // =>  FALSE
[03:24:16.868]      // skip if-block "!isProduction"
[03:24:16.868]    </control>
[03:24:16.868]  </sequence>
[03:24:16.868]  
[03:28:59.892]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:28:59.892]  
[03:28:59.901]  <debugvars>
[03:28:59.901]    // Pre-defined
[03:28:59.901]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:28:59.901]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:28:59.901]    __dp=0x00000000
[03:28:59.901]    __ap=0x00000000
[03:28:59.901]    __traceout=0x00000000      (Trace Disabled)
[03:28:59.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:28:59.901]    __FlashAddr=0x00000000
[03:28:59.901]    __FlashLen=0x00000000
[03:28:59.902]    __FlashArg=0x00000000
[03:28:59.902]    __FlashOp=0x00000000
[03:28:59.902]    __Result=0x00000000
[03:28:59.902]  </debugvars>
[03:28:59.902]  
[03:28:59.902]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:28:59.902]    <block atomic="false" info="">
[03:28:59.902]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:28:59.902]        // -> [isSWJ <= 0x00000001]
[03:28:59.902]      __var hasDormant = __protocol & 0x00020000;
[03:28:59.903]        // -> [hasDormant <= 0x00000000]
[03:28:59.903]      __var protType   = __protocol & 0x0000FFFF;
[03:28:59.903]        // -> [protType <= 0x00000002]
[03:28:59.903]    </block>
[03:28:59.903]    <control if="protType == 1" while="" timeout="0" info="">
[03:28:59.904]      // if-block "protType == 1"
[03:28:59.904]        // =>  FALSE
[03:28:59.904]      // skip if-block "protType == 1"
[03:28:59.904]    </control>
[03:28:59.904]    <control if="protType == 2" while="" timeout="0" info="">
[03:28:59.904]      // if-block "protType == 2"
[03:28:59.905]        // =>  TRUE
[03:28:59.905]      <control if="isSWJ" while="" timeout="0" info="">
[03:28:59.905]        // if-block "isSWJ"
[03:28:59.905]          // =>  TRUE
[03:28:59.905]        <control if="hasDormant" while="" timeout="0" info="">
[03:28:59.905]          // if-block "hasDormant"
[03:28:59.905]            // =>  FALSE
[03:28:59.905]          // skip if-block "hasDormant"
[03:28:59.905]        </control>
[03:28:59.905]        <control if="!hasDormant" while="" timeout="0" info="">
[03:28:59.905]          // if-block "!hasDormant"
[03:28:59.905]            // =>  TRUE
[03:28:59.905]          <block atomic="false" info="">
[03:28:59.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:28:59.907]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:28:59.907]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:28:59.908]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:28:59.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:28:59.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:28:59.910]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:28:59.911]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:28:59.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:28:59.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:28:59.916]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:28:59.917]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:28:59.917]          </block>
[03:28:59.917]          // end if-block "!hasDormant"
[03:28:59.917]        </control>
[03:28:59.917]        // end if-block "isSWJ"
[03:28:59.917]      </control>
[03:28:59.917]      <control if="!isSWJ" while="" timeout="0" info="">
[03:28:59.918]        // if-block "!isSWJ"
[03:28:59.918]          // =>  FALSE
[03:28:59.918]        // skip if-block "!isSWJ"
[03:28:59.918]      </control>
[03:28:59.918]      <block atomic="false" info="">
[03:28:59.918]        ReadDP(0x0);
[03:28:59.919]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:28:59.919]      </block>
[03:28:59.919]      // end if-block "protType == 2"
[03:28:59.920]    </control>
[03:28:59.920]  </sequence>
[03:28:59.920]  
[03:28:59.922]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:28:59.922]  
[03:28:59.922]  <debugvars>
[03:28:59.922]    // Pre-defined
[03:28:59.922]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:28:59.923]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:28:59.923]    __dp=0x00000000
[03:28:59.923]    __ap=0x00000000
[03:28:59.923]    __traceout=0x00000000      (Trace Disabled)
[03:28:59.923]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:28:59.923]    __FlashAddr=0x00000000
[03:28:59.923]    __FlashLen=0x00000000
[03:28:59.923]    __FlashArg=0x00000000
[03:28:59.923]    __FlashOp=0x00000000
[03:28:59.923]    __Result=0x00000000
[03:28:59.924]  </debugvars>
[03:28:59.924]  
[03:28:59.924]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:28:59.924]    <block atomic="false" info="">
[03:28:59.924]      __var SW_DP_ABORT       = 0x0;
[03:28:59.924]        // -> [SW_DP_ABORT <= 0x00000000]
[03:28:59.924]      __var DP_CTRL_STAT      = 0x4;
[03:28:59.924]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:28:59.924]      __var DP_SELECT         = 0x8;
[03:28:59.924]        // -> [DP_SELECT <= 0x00000008]
[03:28:59.925]      __var powered_down      = 0;
[03:28:59.925]        // -> [powered_down <= 0x00000000]
[03:28:59.925]      WriteDP(DP_SELECT, 0x00000000);
[03:28:59.927]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:28:59.927]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:28:59.930]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:28:59.930]        // -> [powered_down <= 0x00000001]
[03:28:59.930]    </block>
[03:28:59.930]    <control if="powered_down" while="" timeout="0" info="">
[03:28:59.930]      // if-block "powered_down"
[03:28:59.930]        // =>  TRUE
[03:28:59.930]      <block atomic="false" info="">
[03:28:59.930]        Message(0, "Debug/System power-up request sent");
[03:28:59.931]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:28:59.932]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:28:59.933]      </block>
[03:28:59.933]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:28:59.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:28:59.936]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:28:59.936]        // while-condition  =>  FALSE
[03:28:59.936]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:28:59.936]      </control>
[03:28:59.937]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:28:59.937]        // if-block "(__protocol & 0xFFFF) == 1"
[03:28:59.937]          // =>  FALSE
[03:28:59.937]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:28:59.937]      </control>
[03:28:59.937]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:28:59.937]        // if-block "(__protocol & 0xFFFF) == 2"
[03:28:59.937]          // =>  TRUE
[03:28:59.937]        <block atomic="false" info="">
[03:28:59.937]          Message(0, "executing SWD power up");
[03:28:59.938]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:28:59.939]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:28:59.939]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:28:59.941]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:28:59.941]        </block>
[03:28:59.941]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:28:59.941]      </control>
[03:28:59.941]      // end if-block "powered_down"
[03:28:59.942]    </control>
[03:28:59.942]    <block atomic="false" info="">
[03:28:59.942]      __var DEBUG_PORT_VAL    = 0;
[03:28:59.942]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:28:59.942]      __var ACCESS_POINT_VAL  = 0;
[03:28:59.942]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:28:59.942]      __ap = 1; 
[03:28:59.942]        // -> [__ap <= 0x00000001]
[03:28:59.942]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:28:59.950]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:28:59.950]      __ap = 4;
[03:28:59.950]        // -> [__ap <= 0x00000004]
[03:28:59.950]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:28:59.955]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:28:59.955]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:28:59.955]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:28:59.956]    </block>
[03:28:59.956]    <block atomic="false" info="">
[03:28:59.956]      __var nReset = 0x80;
[03:28:59.956]        // -> [nReset <= 0x00000080]
[03:28:59.956]      __var canReadPins = 0;
[03:28:59.956]        // -> [canReadPins <= 0x00000000]
[03:28:59.956]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:28:59.957]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:28:59.958]        // -> [canReadPins <= 0x00000001]
[03:28:59.958]    </block>
[03:28:59.958]    <control if="" while="1" timeout="200" info="">
[03:28:59.958]      // while "1"  (timeout="200")
[03:28:59.958]      // while-condition  =>  TRUE
[03:28:59.958]      // while "1"  (timeout="200")
[03:28:59.958]      // while-condition  =>  TRUE
[03:28:59.958]      // while "1"  (timeout="200")
[03:28:59.958]      // while-condition  =>  TRUE
[03:28:59.958]      // while "1"  (timeout="200")
[03:28:59.958]      // while-condition  =>  TRUE
[03:28:59.958]      // while "1"  (timeout="200")
[03:28:59.958]      // while-condition  =>  TRUE
[03:28:59.959]      // while "1"  (timeout="200")
[03:28:59.959]      // while-condition  =>  TRUE
[03:28:59.959]      // while "1"  (timeout="200")
[03:28:59.959]      // while-condition  =>  TRUE
[03:28:59.959]      // while "1"  (timeout="200")
[03:28:59.959]      // while-condition  =>  TRUE
[03:28:59.959]      // while "1"  (timeout="200")
[03:28:59.959]      // while-condition  =>  TRUE
[03:28:59.959]      // while "1"  (timeout="200")
[03:28:59.959]      // while-condition  =>  TRUE
[03:28:59.959]      // while "1"  (timeout="200")
[03:28:59.959]      // while-condition  =>  TRUE
[03:28:59.961]      // while "1"  (timeout="200")
[03:28:59.961]      // while-condition  =>  TRUE
[03:28:59.961]      // while "1"  (timeout="200")
[03:28:59.961]      // while-condition  =>  TRUE
[03:28:59.961]      // while "1"  (timeout="200")
[03:28:59.961]      // while-condition  =>  TRUE
[03:28:59.961]      // while "1"  (timeout="200")
[03:28:59.961]      // while-condition  =>  TRUE
[03:28:59.961]      // while "1"  (timeout="200")
[03:28:59.962]      // while-condition  =>  TRUE
[03:28:59.962]      // while "1"  (timeout="200")
[03:28:59.962]      // while-condition  =>  TRUE
[03:28:59.962]      // while "1"  (timeout="200")
[03:28:59.962]      // while-condition  =>  TRUE
[03:28:59.962]      // while "1"  (timeout="200")
[03:28:59.962]      // while-condition  =>  TRUE
[03:28:59.962]      // while "1"  (timeout="200")
[03:28:59.962]      // while-condition  =>  TRUE
[03:28:59.963]      // while "1"  (timeout="200")
[03:28:59.963]      // while-condition  =>  TRUE
[03:28:59.963]      // while "1"  (timeout="200")
[03:28:59.963]      // while-condition  =>  TRUE
[03:28:59.963]      // while "1"  (timeout="200")
[03:28:59.963]      // while-condition  =>  TRUE
[03:28:59.963]      // while "1"  (timeout="200")
[03:28:59.963]      // while-condition  =>  TRUE
[03:28:59.963]      // while "1"  (timeout="200")
[03:28:59.963]      // while-condition  =>  TRUE
[03:28:59.963]      // while "1"  (timeout="200")
[03:28:59.963]      // while-condition  =>  TRUE
[03:28:59.964]      // while "1"  (timeout="200")
[03:28:59.964]      // while-condition  =>  TRUE
[03:28:59.964]      // while "1"  (timeout="200")
[03:28:59.964]      // while-condition  =>  TRUE
[03:28:59.964]      // while "1"  (timeout="200")
[03:28:59.964]      // while-condition  =>  TRUE
[03:28:59.964]      // while "1"  (timeout="200")
[03:28:59.964]      // while-condition  =>  TRUE
[03:28:59.964]      // while "1"  (timeout="200")
[03:28:59.964]      // while-condition  =>  TRUE
[03:28:59.964]      // while "1"  (timeout="200")
[03:28:59.964]      // while-condition  =>  TRUE
[03:28:59.964]      // while "1"  (timeout="200")
[03:28:59.964]      // while-condition  =>  TRUE
[03:28:59.965]      // while "1"  (timeout="200")
[03:28:59.965]      // while-condition  =>  TRUE
[03:28:59.965]      // while "1"  (timeout="200")
[03:28:59.965]      // while-condition  =>  TRUE
[03:28:59.965]      // while "1"  (timeout="200")
[03:28:59.965]      // while-condition  =>  TRUE
[03:28:59.965]      // while "1"  (timeout="200")
[03:28:59.965]      // while-condition  =>  TRUE
[03:28:59.965]      // while "1"  (timeout="200")
[03:28:59.966]      // while-condition  =>  TRUE
[03:28:59.966]      // while "1"  (timeout="200")
[03:28:59.966]      // while-condition  =>  TRUE
[03:28:59.966]      // while "1"  (timeout="200")
[03:28:59.966]      // while-condition  =>  TRUE
[03:28:59.966]      // while "1"  (timeout="200")
[03:28:59.966]      // while-condition  =>  TRUE
[03:28:59.966]      // while "1"  (timeout="200")
[03:28:59.966]      // while-condition  =>  TRUE
[03:28:59.966]      // while "1"  (timeout="200")
[03:28:59.968]      // while-condition  =>  TRUE
[03:28:59.968]      // while "1"  (timeout="200")
[03:28:59.968]      // while-condition  =>  TRUE
[03:28:59.968]      // while "1"  (timeout="200")
[03:28:59.968]      // while-condition  =>  TRUE
[03:28:59.968]      // while "1"  (timeout="200")
[03:28:59.968]      // while-condition  =>  TRUE
[03:28:59.969]      // while "1"  (timeout="200")
[03:28:59.969]      // while-condition  =>  TRUE
[03:28:59.969]      // while "1"  (timeout="200")
[03:28:59.969]      // while-condition  =>  TRUE
[03:28:59.969]      // while "1"  (timeout="200")
[03:28:59.969]      // while-condition  =>  TRUE
[03:28:59.969]      // while "1"  (timeout="200")
[03:28:59.969]      // while-condition  =>  TRUE
[03:28:59.969]      // while "1"  (timeout="200")
[03:28:59.969]      // while-condition  =>  TRUE
[03:28:59.969]      // while "1"  (timeout="200")
[03:28:59.970]      // while-condition  =>  TRUE
[03:28:59.970]      // while "1"  (timeout="200")
[03:28:59.970]      // while  =>  TIMEOUT
[03:28:59.970]      // end while "1"
[03:28:59.970]    </control>
[03:28:59.970]    <control if="canReadPins" while="" timeout="0" info="">
[03:28:59.970]      // if-block "canReadPins"
[03:28:59.970]        // =>  TRUE
[03:28:59.970]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:28:59.970]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:28:59.971]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:28:59.971]        // while-condition  =>  FALSE
[03:28:59.972]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:28:59.972]      </control>
[03:28:59.972]      // end if-block "canReadPins"
[03:28:59.972]    </control>
[03:28:59.972]    <control if="!canReadPins" while="" timeout="0" info="">
[03:28:59.972]      // if-block "!canReadPins"
[03:28:59.972]        // =>  FALSE
[03:28:59.972]      // skip if-block "!canReadPins"
[03:28:59.972]    </control>
[03:28:59.972]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:28:59.972]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:28:59.972]        // =>  TRUE
[03:28:59.974]      <block atomic="false" info="">
[03:28:59.974]        WriteAP(0x00, 0x190008);
[03:28:59.975]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:28:59.975]        WriteAP(0xF0, 0x01);
[03:28:59.979]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:28:59.979]      </block>
[03:28:59.979]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:28:59.979]    </control>
[03:28:59.979]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:28:59.979]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:28:59.979]        // =>  FALSE
[03:28:59.979]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:28:59.980]    </control>
[03:28:59.980]    <block atomic="false" info="">
[03:28:59.980]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:28:59.985]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:28:59.985]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:28:59.985]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:28:59.986]      __ap = 0; //lets make sure we reset the access point selection
[03:28:59.986]        // -> [__ap <= 0x00000000]
[03:28:59.986]    </block>
[03:28:59.986]  </sequence>
[03:28:59.986]  
[03:29:00.007]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:29:00.007]  
[03:29:00.007]  <debugvars>
[03:29:00.007]    // Pre-defined
[03:29:00.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:00.007]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:29:00.007]    __dp=0x00000000
[03:29:00.007]    __ap=0x00000000
[03:29:00.007]    __traceout=0x00000000      (Trace Disabled)
[03:29:00.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:00.008]    __FlashAddr=0x00000000
[03:29:00.008]    __FlashLen=0x00000000
[03:29:00.008]    __FlashArg=0x00000000
[03:29:00.008]    __FlashOp=0x00000000
[03:29:00.008]    __Result=0x00000000
[03:29:00.008]  </debugvars>
[03:29:00.008]  
[03:29:00.008]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:29:00.008]    <block atomic="false" info="">
[03:29:00.008]      __var deviceID = 0;
[03:29:00.008]        // -> [deviceID <= 0x00000000]
[03:29:00.008]      __var version = 0;
[03:29:00.009]        // -> [version <= 0x00000000]
[03:29:00.009]      __var partNum = 0;
[03:29:00.009]        // -> [partNum <= 0x00000000]
[03:29:00.009]      __var manuf = 0;
[03:29:00.009]        // -> [manuf <= 0x00000000]
[03:29:00.009]      __var isMSPM0G1X0X_G3X0X = 0;
[03:29:00.009]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:29:00.009]      __var isProduction = 0;
[03:29:00.009]        // -> [isProduction <= 0x00000000]
[03:29:00.009]      __var continueId = 0;
[03:29:00.009]        // -> [continueId <= 0x00000000]
[03:29:00.009]      deviceID =   Read32(0x41C40004);
[03:29:00.017]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:29:00.018]        // -> [deviceID <= 0x2BB8802F]
[03:29:00.018]      version = deviceID >> 28;
[03:29:00.018]        // -> [version <= 0x00000002]
[03:29:00.018]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:29:00.018]        // -> [partNum <= 0x0000BB88]
[03:29:00.018]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:29:00.018]        // -> [manuf <= 0x00000017]
[03:29:00.018]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:29:00.018]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:29:00.019]      isProduction = (version > 0);
[03:29:00.019]        // -> [isProduction <= 0x00000001]
[03:29:00.019]    </block>
[03:29:00.019]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:29:00.019]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:29:00.019]        // =>  FALSE
[03:29:00.019]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:29:00.019]    </control>
[03:29:00.019]    <control if="continueId == 4" while="" timeout="0" info="">
[03:29:00.019]      // if-block "continueId == 4"
[03:29:00.019]        // =>  FALSE
[03:29:00.019]      // skip if-block "continueId == 4"
[03:29:00.021]    </control>
[03:29:00.021]    <control if="!isProduction" while="" timeout="0" info="">
[03:29:00.021]      // if-block "!isProduction"
[03:29:00.021]        // =>  FALSE
[03:29:00.021]      // skip if-block "!isProduction"
[03:29:00.021]    </control>
[03:29:00.021]  </sequence>
[03:29:00.021]  
[03:32:07.969]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:32:07.969]  
[03:32:07.978]  <debugvars>
[03:32:07.978]    // Pre-defined
[03:32:07.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:07.978]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:32:07.978]    __dp=0x00000000
[03:32:07.978]    __ap=0x00000000
[03:32:07.978]    __traceout=0x00000000      (Trace Disabled)
[03:32:07.979]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:07.979]    __FlashAddr=0x00000000
[03:32:07.979]    __FlashLen=0x00000000
[03:32:07.979]    __FlashArg=0x00000000
[03:32:07.979]    __FlashOp=0x00000000
[03:32:07.979]    __Result=0x00000000
[03:32:07.979]  </debugvars>
[03:32:07.979]  
[03:32:07.979]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:32:07.979]    <block atomic="false" info="">
[03:32:07.980]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:32:07.980]        // -> [isSWJ <= 0x00000001]
[03:32:07.980]      __var hasDormant = __protocol & 0x00020000;
[03:32:07.980]        // -> [hasDormant <= 0x00000000]
[03:32:07.980]      __var protType   = __protocol & 0x0000FFFF;
[03:32:07.980]        // -> [protType <= 0x00000002]
[03:32:07.980]    </block>
[03:32:07.980]    <control if="protType == 1" while="" timeout="0" info="">
[03:32:07.980]      // if-block "protType == 1"
[03:32:07.981]        // =>  FALSE
[03:32:07.981]      // skip if-block "protType == 1"
[03:32:07.981]    </control>
[03:32:07.981]    <control if="protType == 2" while="" timeout="0" info="">
[03:32:07.981]      // if-block "protType == 2"
[03:32:07.981]        // =>  TRUE
[03:32:07.982]      <control if="isSWJ" while="" timeout="0" info="">
[03:32:07.982]        // if-block "isSWJ"
[03:32:07.982]          // =>  TRUE
[03:32:07.982]        <control if="hasDormant" while="" timeout="0" info="">
[03:32:07.982]          // if-block "hasDormant"
[03:32:07.982]            // =>  FALSE
[03:32:07.982]          // skip if-block "hasDormant"
[03:32:07.982]        </control>
[03:32:07.983]        <control if="!hasDormant" while="" timeout="0" info="">
[03:32:07.983]          // if-block "!hasDormant"
[03:32:07.983]            // =>  TRUE
[03:32:07.983]          <block atomic="false" info="">
[03:32:07.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:32:07.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:32:07.985]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:32:07.986]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:32:07.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:32:07.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:32:07.988]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:32:07.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:32:07.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:32:07.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:32:07.994]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:32:07.995]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:32:07.996]          </block>
[03:32:07.996]          // end if-block "!hasDormant"
[03:32:07.996]        </control>
[03:32:07.996]        // end if-block "isSWJ"
[03:32:07.996]      </control>
[03:32:07.996]      <control if="!isSWJ" while="" timeout="0" info="">
[03:32:07.996]        // if-block "!isSWJ"
[03:32:07.996]          // =>  FALSE
[03:32:07.996]        // skip if-block "!isSWJ"
[03:32:07.996]      </control>
[03:32:07.996]      <block atomic="false" info="">
[03:32:07.996]        ReadDP(0x0);
[03:32:07.998]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:32:07.998]      </block>
[03:32:07.998]      // end if-block "protType == 2"
[03:32:07.998]    </control>
[03:32:07.998]  </sequence>
[03:32:07.998]  
[03:32:08.000]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:32:08.000]  
[03:32:08.000]  <debugvars>
[03:32:08.002]    // Pre-defined
[03:32:08.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:08.002]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:32:08.002]    __dp=0x00000000
[03:32:08.002]    __ap=0x00000000
[03:32:08.002]    __traceout=0x00000000      (Trace Disabled)
[03:32:08.002]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:08.002]    __FlashAddr=0x00000000
[03:32:08.003]    __FlashLen=0x00000000
[03:32:08.003]    __FlashArg=0x00000000
[03:32:08.003]    __FlashOp=0x00000000
[03:32:08.003]    __Result=0x00000000
[03:32:08.003]  </debugvars>
[03:32:08.003]  
[03:32:08.003]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:32:08.004]    <block atomic="false" info="">
[03:32:08.004]      __var SW_DP_ABORT       = 0x0;
[03:32:08.004]        // -> [SW_DP_ABORT <= 0x00000000]
[03:32:08.004]      __var DP_CTRL_STAT      = 0x4;
[03:32:08.004]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:32:08.004]      __var DP_SELECT         = 0x8;
[03:32:08.004]        // -> [DP_SELECT <= 0x00000008]
[03:32:08.004]      __var powered_down      = 0;
[03:32:08.004]        // -> [powered_down <= 0x00000000]
[03:32:08.005]      WriteDP(DP_SELECT, 0x00000000);
[03:32:08.006]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:32:08.006]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:32:08.007]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:32:08.007]        // -> [powered_down <= 0x00000001]
[03:32:08.007]    </block>
[03:32:08.007]    <control if="powered_down" while="" timeout="0" info="">
[03:32:08.008]      // if-block "powered_down"
[03:32:08.008]        // =>  TRUE
[03:32:08.008]      <block atomic="false" info="">
[03:32:08.008]        Message(0, "Debug/System power-up request sent");
[03:32:08.010]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:32:08.014]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:32:08.014]      </block>
[03:32:08.014]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:32:08.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:32:08.017]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:32:08.017]        // while-condition  =>  FALSE
[03:32:08.017]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:32:08.017]      </control>
[03:32:08.017]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:32:08.017]        // if-block "(__protocol & 0xFFFF) == 1"
[03:32:08.017]          // =>  FALSE
[03:32:08.017]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:32:08.017]      </control>
[03:32:08.017]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:32:08.018]        // if-block "(__protocol & 0xFFFF) == 2"
[03:32:08.018]          // =>  TRUE
[03:32:08.018]        <block atomic="false" info="">
[03:32:08.018]          Message(0, "executing SWD power up");
[03:32:08.020]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:32:08.022]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:32:08.022]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:32:08.025]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:32:08.026]        </block>
[03:32:08.026]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:32:08.026]      </control>
[03:32:08.026]      // end if-block "powered_down"
[03:32:08.026]    </control>
[03:32:08.026]    <block atomic="false" info="">
[03:32:08.026]      __var DEBUG_PORT_VAL    = 0;
[03:32:08.026]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:32:08.027]      __var ACCESS_POINT_VAL  = 0;
[03:32:08.027]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:32:08.027]      __ap = 1; 
[03:32:08.027]        // -> [__ap <= 0x00000001]
[03:32:08.027]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:32:08.030]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:32:08.030]      __ap = 4;
[03:32:08.030]        // -> [__ap <= 0x00000004]
[03:32:08.031]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:32:08.035]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:32:08.035]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:32:08.035]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:32:08.037]    </block>
[03:32:08.037]    <block atomic="false" info="">
[03:32:08.037]      __var nReset = 0x80;
[03:32:08.037]        // -> [nReset <= 0x00000080]
[03:32:08.037]      __var canReadPins = 0;
[03:32:08.037]        // -> [canReadPins <= 0x00000000]
[03:32:08.037]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:32:08.039]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:32:08.039]        // -> [canReadPins <= 0x00000001]
[03:32:08.039]    </block>
[03:32:08.039]    <control if="" while="1" timeout="200" info="">
[03:32:08.039]      // while "1"  (timeout="200")
[03:32:08.039]      // while-condition  =>  TRUE
[03:32:08.039]      // while "1"  (timeout="200")
[03:32:08.040]      // while-condition  =>  TRUE
[03:32:08.040]      // while "1"  (timeout="200")
[03:32:08.040]      // while-condition  =>  TRUE
[03:32:08.040]      // while "1"  (timeout="200")
[03:32:08.040]      // while-condition  =>  TRUE
[03:32:08.040]      // while "1"  (timeout="200")
[03:32:08.040]      // while-condition  =>  TRUE
[03:32:08.040]      // while "1"  (timeout="200")
[03:32:08.041]      // while-condition  =>  TRUE
[03:32:08.041]      // while "1"  (timeout="200")
[03:32:08.041]      // while-condition  =>  TRUE
[03:32:08.041]      // while "1"  (timeout="200")
[03:32:08.041]      // while-condition  =>  TRUE
[03:32:08.041]      // while "1"  (timeout="200")
[03:32:08.041]      // while-condition  =>  TRUE
[03:32:08.041]      // while "1"  (timeout="200")
[03:32:08.041]      // while-condition  =>  TRUE
[03:32:08.041]      // while "1"  (timeout="200")
[03:32:08.041]      // while-condition  =>  TRUE
[03:32:08.043]      // while "1"  (timeout="200")
[03:32:08.043]      // while-condition  =>  TRUE
[03:32:08.043]      // while "1"  (timeout="200")
[03:32:08.043]      // while-condition  =>  TRUE
[03:32:08.043]      // while "1"  (timeout="200")
[03:32:08.043]      // while-condition  =>  TRUE
[03:32:08.043]      // while "1"  (timeout="200")
[03:32:08.044]      // while-condition  =>  TRUE
[03:32:08.044]      // while "1"  (timeout="200")
[03:32:08.044]      // while-condition  =>  TRUE
[03:32:08.044]      // while "1"  (timeout="200")
[03:32:08.044]      // while-condition  =>  TRUE
[03:32:08.044]      // while "1"  (timeout="200")
[03:32:08.044]      // while-condition  =>  TRUE
[03:32:08.044]      // while "1"  (timeout="200")
[03:32:08.045]      // while-condition  =>  TRUE
[03:32:08.045]      // while "1"  (timeout="200")
[03:32:08.045]      // while-condition  =>  TRUE
[03:32:08.045]      // while "1"  (timeout="200")
[03:32:08.045]      // while-condition  =>  TRUE
[03:32:08.045]      // while "1"  (timeout="200")
[03:32:08.045]      // while-condition  =>  TRUE
[03:32:08.045]      // while "1"  (timeout="200")
[03:32:08.045]      // while-condition  =>  TRUE
[03:32:08.046]      // while "1"  (timeout="200")
[03:32:08.046]      // while-condition  =>  TRUE
[03:32:08.046]      // while "1"  (timeout="200")
[03:32:08.046]      // while-condition  =>  TRUE
[03:32:08.046]      // while "1"  (timeout="200")
[03:32:08.046]      // while-condition  =>  TRUE
[03:32:08.046]      // while "1"  (timeout="200")
[03:32:08.046]      // while-condition  =>  TRUE
[03:32:08.047]      // while "1"  (timeout="200")
[03:32:08.047]      // while-condition  =>  TRUE
[03:32:08.047]      // while "1"  (timeout="200")
[03:32:08.047]      // while-condition  =>  TRUE
[03:32:08.047]      // while "1"  (timeout="200")
[03:32:08.047]      // while-condition  =>  TRUE
[03:32:08.047]      // while "1"  (timeout="200")
[03:32:08.048]      // while-condition  =>  TRUE
[03:32:08.048]      // while "1"  (timeout="200")
[03:32:08.048]      // while  =>  TIMEOUT
[03:32:08.048]      // end while "1"
[03:32:08.048]    </control>
[03:32:08.048]    <control if="canReadPins" while="" timeout="0" info="">
[03:32:08.048]      // if-block "canReadPins"
[03:32:08.048]        // =>  TRUE
[03:32:08.049]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:32:08.049]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:32:08.050]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:32:08.050]        // while-condition  =>  FALSE
[03:32:08.050]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:32:08.050]      </control>
[03:32:08.051]      // end if-block "canReadPins"
[03:32:08.051]    </control>
[03:32:08.051]    <control if="!canReadPins" while="" timeout="0" info="">
[03:32:08.051]      // if-block "!canReadPins"
[03:32:08.051]        // =>  FALSE
[03:32:08.051]      // skip if-block "!canReadPins"
[03:32:08.051]    </control>
[03:32:08.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:32:08.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:32:08.052]        // =>  TRUE
[03:32:08.052]      <block atomic="false" info="">
[03:32:08.052]        WriteAP(0x00, 0x190008);
[03:32:08.054]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:32:08.054]        WriteAP(0xF0, 0x01);
[03:32:08.061]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:32:08.061]      </block>
[03:32:08.062]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:32:08.062]    </control>
[03:32:08.062]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:32:08.062]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:32:08.062]        // =>  FALSE
[03:32:08.062]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:32:08.063]    </control>
[03:32:08.063]    <block atomic="false" info="">
[03:32:08.063]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:32:08.067]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:32:08.067]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:32:08.067]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:32:08.069]      __ap = 0; //lets make sure we reset the access point selection
[03:32:08.069]        // -> [__ap <= 0x00000000]
[03:32:08.069]    </block>
[03:32:08.070]  </sequence>
[03:32:08.070]  
[03:32:08.090]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:32:08.090]  
[03:32:08.090]  <debugvars>
[03:32:08.090]    // Pre-defined
[03:32:08.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:08.090]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:32:08.090]    __dp=0x00000000
[03:32:08.090]    __ap=0x00000000
[03:32:08.090]    __traceout=0x00000000      (Trace Disabled)
[03:32:08.090]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:08.091]    __FlashAddr=0x00000000
[03:32:08.091]    __FlashLen=0x00000000
[03:32:08.091]    __FlashArg=0x00000000
[03:32:08.091]    __FlashOp=0x00000000
[03:32:08.091]    __Result=0x00000000
[03:32:08.091]  </debugvars>
[03:32:08.091]  
[03:32:08.091]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:32:08.091]    <block atomic="false" info="">
[03:32:08.092]      __var deviceID = 0;
[03:32:08.092]        // -> [deviceID <= 0x00000000]
[03:32:08.092]      __var version = 0;
[03:32:08.092]        // -> [version <= 0x00000000]
[03:32:08.092]      __var partNum = 0;
[03:32:08.092]        // -> [partNum <= 0x00000000]
[03:32:08.094]      __var manuf = 0;
[03:32:08.094]        // -> [manuf <= 0x00000000]
[03:32:08.094]      __var isMSPM0G1X0X_G3X0X = 0;
[03:32:08.094]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:32:08.094]      __var isProduction = 0;
[03:32:08.094]        // -> [isProduction <= 0x00000000]
[03:32:08.095]      __var continueId = 0;
[03:32:08.095]        // -> [continueId <= 0x00000000]
[03:32:08.095]      deviceID =   Read32(0x41C40004);
[03:32:08.102]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:32:08.102]        // -> [deviceID <= 0x2BB8802F]
[03:32:08.102]      version = deviceID >> 28;
[03:32:08.102]        // -> [version <= 0x00000002]
[03:32:08.103]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:32:08.103]        // -> [partNum <= 0x0000BB88]
[03:32:08.103]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:32:08.103]        // -> [manuf <= 0x00000017]
[03:32:08.103]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:32:08.103]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:32:08.103]      isProduction = (version > 0);
[03:32:08.103]        // -> [isProduction <= 0x00000001]
[03:32:08.104]    </block>
[03:32:08.104]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:32:08.104]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:32:08.104]        // =>  FALSE
[03:32:08.104]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:32:08.104]    </control>
[03:32:08.104]    <control if="continueId == 4" while="" timeout="0" info="">
[03:32:08.104]      // if-block "continueId == 4"
[03:32:08.104]        // =>  FALSE
[03:32:08.105]      // skip if-block "continueId == 4"
[03:32:08.105]    </control>
[03:32:08.105]    <control if="!isProduction" while="" timeout="0" info="">
[03:32:08.105]      // if-block "!isProduction"
[03:32:08.105]        // =>  FALSE
[03:32:08.105]      // skip if-block "!isProduction"
[03:32:08.105]    </control>
[03:32:08.105]  </sequence>
[03:32:08.105]  
[03:33:55.166]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:33:55.166]  
[03:33:55.175]  <debugvars>
[03:33:55.176]    // Pre-defined
[03:33:55.176]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:55.176]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:33:55.176]    __dp=0x00000000
[03:33:55.176]    __ap=0x00000000
[03:33:55.176]    __traceout=0x00000000      (Trace Disabled)
[03:33:55.176]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:55.176]    __FlashAddr=0x00000000
[03:33:55.176]    __FlashLen=0x00000000
[03:33:55.176]    __FlashArg=0x00000000
[03:33:55.177]    __FlashOp=0x00000000
[03:33:55.177]    __Result=0x00000000
[03:33:55.177]  </debugvars>
[03:33:55.177]  
[03:33:55.177]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:33:55.177]    <block atomic="false" info="">
[03:33:55.177]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:33:55.177]        // -> [isSWJ <= 0x00000001]
[03:33:55.177]      __var hasDormant = __protocol & 0x00020000;
[03:33:55.178]        // -> [hasDormant <= 0x00000000]
[03:33:55.178]      __var protType   = __protocol & 0x0000FFFF;
[03:33:55.178]        // -> [protType <= 0x00000002]
[03:33:55.178]    </block>
[03:33:55.178]    <control if="protType == 1" while="" timeout="0" info="">
[03:33:55.178]      // if-block "protType == 1"
[03:33:55.178]        // =>  FALSE
[03:33:55.178]      // skip if-block "protType == 1"
[03:33:55.178]    </control>
[03:33:55.178]    <control if="protType == 2" while="" timeout="0" info="">
[03:33:55.179]      // if-block "protType == 2"
[03:33:55.179]        // =>  TRUE
[03:33:55.179]      <control if="isSWJ" while="" timeout="0" info="">
[03:33:55.179]        // if-block "isSWJ"
[03:33:55.179]          // =>  TRUE
[03:33:55.179]        <control if="hasDormant" while="" timeout="0" info="">
[03:33:55.179]          // if-block "hasDormant"
[03:33:55.179]            // =>  FALSE
[03:33:55.179]          // skip if-block "hasDormant"
[03:33:55.180]        </control>
[03:33:55.180]        <control if="!hasDormant" while="" timeout="0" info="">
[03:33:55.180]          // if-block "!hasDormant"
[03:33:55.180]            // =>  TRUE
[03:33:55.180]          <block atomic="false" info="">
[03:33:55.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:33:55.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:33:55.182]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:33:55.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:33:55.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:33:55.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:33:55.186]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:33:55.188]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:33:55.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:33:55.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:33:55.191]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:33:55.192]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:33:55.192]          </block>
[03:33:55.192]          // end if-block "!hasDormant"
[03:33:55.192]        </control>
[03:33:55.192]        // end if-block "isSWJ"
[03:33:55.192]      </control>
[03:33:55.192]      <control if="!isSWJ" while="" timeout="0" info="">
[03:33:55.193]        // if-block "!isSWJ"
[03:33:55.193]          // =>  FALSE
[03:33:55.193]        // skip if-block "!isSWJ"
[03:33:55.193]      </control>
[03:33:55.193]      <block atomic="false" info="">
[03:33:55.193]        ReadDP(0x0);
[03:33:55.195]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:33:55.195]      </block>
[03:33:55.195]      // end if-block "protType == 2"
[03:33:55.195]    </control>
[03:33:55.195]  </sequence>
[03:33:55.195]  
[03:33:55.197]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:33:55.197]  
[03:33:55.197]  <debugvars>
[03:33:55.199]    // Pre-defined
[03:33:55.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:55.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:33:55.199]    __dp=0x00000000
[03:33:55.199]    __ap=0x00000000
[03:33:55.199]    __traceout=0x00000000      (Trace Disabled)
[03:33:55.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:55.199]    __FlashAddr=0x00000000
[03:33:55.199]    __FlashLen=0x00000000
[03:33:55.199]    __FlashArg=0x00000000
[03:33:55.200]    __FlashOp=0x00000000
[03:33:55.200]    __Result=0x00000000
[03:33:55.200]  </debugvars>
[03:33:55.200]  
[03:33:55.200]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:33:55.200]    <block atomic="false" info="">
[03:33:55.200]      __var SW_DP_ABORT       = 0x0;
[03:33:55.200]        // -> [SW_DP_ABORT <= 0x00000000]
[03:33:55.200]      __var DP_CTRL_STAT      = 0x4;
[03:33:55.200]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:33:55.201]      __var DP_SELECT         = 0x8;
[03:33:55.201]        // -> [DP_SELECT <= 0x00000008]
[03:33:55.201]      __var powered_down      = 0;
[03:33:55.201]        // -> [powered_down <= 0x00000000]
[03:33:55.201]      WriteDP(DP_SELECT, 0x00000000);
[03:33:55.203]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:33:55.203]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:33:55.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:33:55.205]        // -> [powered_down <= 0x00000001]
[03:33:55.205]    </block>
[03:33:55.205]    <control if="powered_down" while="" timeout="0" info="">
[03:33:55.205]      // if-block "powered_down"
[03:33:55.205]        // =>  TRUE
[03:33:55.205]      <block atomic="false" info="">
[03:33:55.205]        Message(0, "Debug/System power-up request sent");
[03:33:55.206]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:33:55.208]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:33:55.208]      </block>
[03:33:55.208]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:33:55.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:33:55.210]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:33:55.210]        // while-condition  =>  FALSE
[03:33:55.211]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:33:55.211]      </control>
[03:33:55.211]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:33:55.211]        // if-block "(__protocol & 0xFFFF) == 1"
[03:33:55.211]          // =>  FALSE
[03:33:55.211]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:33:55.211]      </control>
[03:33:55.211]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:33:55.211]        // if-block "(__protocol & 0xFFFF) == 2"
[03:33:55.212]          // =>  TRUE
[03:33:55.212]        <block atomic="false" info="">
[03:33:55.212]          Message(0, "executing SWD power up");
[03:33:55.212]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:33:55.217]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:33:55.218]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:33:55.219]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:33:55.219]        </block>
[03:33:55.219]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:33:55.220]      </control>
[03:33:55.220]      // end if-block "powered_down"
[03:33:55.220]    </control>
[03:33:55.220]    <block atomic="false" info="">
[03:33:55.220]      __var DEBUG_PORT_VAL    = 0;
[03:33:55.220]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:33:55.220]      __var ACCESS_POINT_VAL  = 0;
[03:33:55.220]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:33:55.220]      __ap = 1; 
[03:33:55.221]        // -> [__ap <= 0x00000001]
[03:33:55.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:33:55.224]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:33:55.224]      __ap = 4;
[03:33:55.224]        // -> [__ap <= 0x00000004]
[03:33:55.224]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:33:55.230]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:33:55.230]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:33:55.230]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:33:55.230]    </block>
[03:33:55.231]    <block atomic="false" info="">
[03:33:55.231]      __var nReset = 0x80;
[03:33:55.231]        // -> [nReset <= 0x00000080]
[03:33:55.231]      __var canReadPins = 0;
[03:33:55.231]        // -> [canReadPins <= 0x00000000]
[03:33:55.231]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:33:55.233]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:33:55.233]        // -> [canReadPins <= 0x00000001]
[03:33:55.233]    </block>
[03:33:55.234]    <control if="" while="1" timeout="200" info="">
[03:33:55.234]      // while "1"  (timeout="200")
[03:33:55.234]      // while-condition  =>  TRUE
[03:33:55.234]      // while "1"  (timeout="200")
[03:33:55.234]      // while-condition  =>  TRUE
[03:33:55.234]      // while "1"  (timeout="200")
[03:33:55.234]      // while-condition  =>  TRUE
[03:33:55.234]      // while "1"  (timeout="200")
[03:33:55.235]      // while-condition  =>  TRUE
[03:33:55.235]      // while "1"  (timeout="200")
[03:33:55.235]      // while-condition  =>  TRUE
[03:33:55.235]      // while "1"  (timeout="200")
[03:33:55.235]      // while-condition  =>  TRUE
[03:33:55.235]      // while "1"  (timeout="200")
[03:33:55.235]      // while-condition  =>  TRUE
[03:33:55.235]      // while "1"  (timeout="200")
[03:33:55.235]      // while-condition  =>  TRUE
[03:33:55.235]      // while "1"  (timeout="200")
[03:33:55.236]      // while-condition  =>  TRUE
[03:33:55.236]      // while "1"  (timeout="200")
[03:33:55.236]      // while  =>  TIMEOUT
[03:33:55.236]      // end while "1"
[03:33:55.236]    </control>
[03:33:55.236]    <control if="canReadPins" while="" timeout="0" info="">
[03:33:55.236]      // if-block "canReadPins"
[03:33:55.236]        // =>  TRUE
[03:33:55.236]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:33:55.236]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:33:55.238]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:33:55.238]        // while-condition  =>  FALSE
[03:33:55.238]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:33:55.238]      </control>
[03:33:55.238]      // end if-block "canReadPins"
[03:33:55.238]    </control>
[03:33:55.238]    <control if="!canReadPins" while="" timeout="0" info="">
[03:33:55.238]      // if-block "!canReadPins"
[03:33:55.240]        // =>  FALSE
[03:33:55.240]      // skip if-block "!canReadPins"
[03:33:55.240]    </control>
[03:33:55.240]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:33:55.240]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:33:55.240]        // =>  TRUE
[03:33:55.240]      <block atomic="false" info="">
[03:33:55.240]        WriteAP(0x00, 0x190008);
[03:33:55.241]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:33:55.241]        WriteAP(0xF0, 0x01);
[03:33:55.245]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:33:55.245]      </block>
[03:33:55.245]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:33:55.245]    </control>
[03:33:55.245]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:33:55.245]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:33:55.245]        // =>  FALSE
[03:33:55.246]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:33:55.246]    </control>
[03:33:55.246]    <block atomic="false" info="">
[03:33:55.246]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:33:55.251]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:33:55.251]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:33:55.251]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:33:55.251]      __ap = 0; //lets make sure we reset the access point selection
[03:33:55.251]        // -> [__ap <= 0x00000000]
[03:33:55.252]    </block>
[03:33:55.252]  </sequence>
[03:33:55.252]  
[03:33:55.278]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:33:55.278]  
[03:33:55.278]  <debugvars>
[03:33:55.279]    // Pre-defined
[03:33:55.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:55.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:33:55.279]    __dp=0x00000000
[03:33:55.279]    __ap=0x00000000
[03:33:55.279]    __traceout=0x00000000      (Trace Disabled)
[03:33:55.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:55.279]    __FlashAddr=0x00000000
[03:33:55.280]    __FlashLen=0x00000000
[03:33:55.280]    __FlashArg=0x00000000
[03:33:55.280]    __FlashOp=0x00000000
[03:33:55.280]    __Result=0x00000000
[03:33:55.280]  </debugvars>
[03:33:55.280]  
[03:33:55.280]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:33:55.280]    <block atomic="false" info="">
[03:33:55.280]      __var deviceID = 0;
[03:33:55.281]        // -> [deviceID <= 0x00000000]
[03:33:55.281]      __var version = 0;
[03:33:55.281]        // -> [version <= 0x00000000]
[03:33:55.281]      __var partNum = 0;
[03:33:55.281]        // -> [partNum <= 0x00000000]
[03:33:55.281]      __var manuf = 0;
[03:33:55.281]        // -> [manuf <= 0x00000000]
[03:33:55.281]      __var isMSPM0G1X0X_G3X0X = 0;
[03:33:55.281]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:33:55.282]      __var isProduction = 0;
[03:33:55.282]        // -> [isProduction <= 0x00000000]
[03:33:55.282]      __var continueId = 0;
[03:33:55.282]        // -> [continueId <= 0x00000000]
[03:33:55.282]      deviceID =   Read32(0x41C40004);
[03:33:55.292]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:33:55.292]        // -> [deviceID <= 0x2BB8802F]
[03:33:55.292]      version = deviceID >> 28;
[03:33:55.293]        // -> [version <= 0x00000002]
[03:33:55.293]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:33:55.293]        // -> [partNum <= 0x0000BB88]
[03:33:55.293]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:33:55.293]        // -> [manuf <= 0x00000017]
[03:33:55.293]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:33:55.294]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:33:55.294]      isProduction = (version > 0);
[03:33:55.294]        // -> [isProduction <= 0x00000001]
[03:33:55.294]    </block>
[03:33:55.294]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:33:55.294]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:33:55.294]        // =>  FALSE
[03:33:55.294]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:33:55.295]    </control>
[03:33:55.295]    <control if="continueId == 4" while="" timeout="0" info="">
[03:33:55.295]      // if-block "continueId == 4"
[03:33:55.295]        // =>  FALSE
[03:33:55.295]      // skip if-block "continueId == 4"
[03:33:55.295]    </control>
[03:33:55.295]    <control if="!isProduction" while="" timeout="0" info="">
[03:33:55.295]      // if-block "!isProduction"
[03:33:55.295]        // =>  FALSE
[03:33:55.295]      // skip if-block "!isProduction"
[03:33:55.295]    </control>
[03:33:55.295]  </sequence>
[03:33:55.297]  
[03:40:02.198]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:40:02.198]  
[03:40:02.208]  <debugvars>
[03:40:02.208]    // Pre-defined
[03:40:02.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:02.208]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:40:02.208]    __dp=0x00000000
[03:40:02.208]    __ap=0x00000000
[03:40:02.208]    __traceout=0x00000000      (Trace Disabled)
[03:40:02.209]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:02.209]    __FlashAddr=0x00000000
[03:40:02.209]    __FlashLen=0x00000000
[03:40:02.209]    __FlashArg=0x00000000
[03:40:02.209]    __FlashOp=0x00000000
[03:40:02.209]    __Result=0x00000000
[03:40:02.209]  </debugvars>
[03:40:02.209]  
[03:40:02.209]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:40:02.209]    <block atomic="false" info="">
[03:40:02.209]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:40:02.210]        // -> [isSWJ <= 0x00000001]
[03:40:02.210]      __var hasDormant = __protocol & 0x00020000;
[03:40:02.210]        // -> [hasDormant <= 0x00000000]
[03:40:02.210]      __var protType   = __protocol & 0x0000FFFF;
[03:40:02.210]        // -> [protType <= 0x00000002]
[03:40:02.210]    </block>
[03:40:02.210]    <control if="protType == 1" while="" timeout="0" info="">
[03:40:02.210]      // if-block "protType == 1"
[03:40:02.210]        // =>  FALSE
[03:40:02.210]      // skip if-block "protType == 1"
[03:40:02.211]    </control>
[03:40:02.211]    <control if="protType == 2" while="" timeout="0" info="">
[03:40:02.211]      // if-block "protType == 2"
[03:40:02.211]        // =>  TRUE
[03:40:02.211]      <control if="isSWJ" while="" timeout="0" info="">
[03:40:02.211]        // if-block "isSWJ"
[03:40:02.211]          // =>  TRUE
[03:40:02.211]        <control if="hasDormant" while="" timeout="0" info="">
[03:40:02.211]          // if-block "hasDormant"
[03:40:02.211]            // =>  FALSE
[03:40:02.211]          // skip if-block "hasDormant"
[03:40:02.211]        </control>
[03:40:02.212]        <control if="!hasDormant" while="" timeout="0" info="">
[03:40:02.212]          // if-block "!hasDormant"
[03:40:02.212]            // =>  TRUE
[03:40:02.212]          <block atomic="false" info="">
[03:40:02.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:40:02.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:40:02.213]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:40:02.215]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:40:02.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:40:02.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:40:02.216]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:40:02.218]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:40:02.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:40:02.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:40:02.220]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:40:02.221]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:40:02.221]          </block>
[03:40:02.221]          // end if-block "!hasDormant"
[03:40:02.221]        </control>
[03:40:02.221]        // end if-block "isSWJ"
[03:40:02.221]      </control>
[03:40:02.222]      <control if="!isSWJ" while="" timeout="0" info="">
[03:40:02.222]        // if-block "!isSWJ"
[03:40:02.222]          // =>  FALSE
[03:40:02.222]        // skip if-block "!isSWJ"
[03:40:02.222]      </control>
[03:40:02.222]      <block atomic="false" info="">
[03:40:02.222]        ReadDP(0x0);
[03:40:02.227]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:40:02.227]      </block>
[03:40:02.227]      // end if-block "protType == 2"
[03:40:02.227]    </control>
[03:40:02.227]  </sequence>
[03:40:02.227]  
[03:40:02.230]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:40:02.230]  
[03:40:02.230]  <debugvars>
[03:40:02.230]    // Pre-defined
[03:40:02.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:02.231]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:40:02.231]    __dp=0x00000000
[03:40:02.231]    __ap=0x00000000
[03:40:02.231]    __traceout=0x00000000      (Trace Disabled)
[03:40:02.231]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:02.231]    __FlashAddr=0x00000000
[03:40:02.231]    __FlashLen=0x00000000
[03:40:02.231]    __FlashArg=0x00000000
[03:40:02.231]    __FlashOp=0x00000000
[03:40:02.231]    __Result=0x00000000
[03:40:02.231]  </debugvars>
[03:40:02.231]  
[03:40:02.231]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:40:02.232]    <block atomic="false" info="">
[03:40:02.232]      __var SW_DP_ABORT       = 0x0;
[03:40:02.232]        // -> [SW_DP_ABORT <= 0x00000000]
[03:40:02.232]      __var DP_CTRL_STAT      = 0x4;
[03:40:02.232]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:40:02.232]      __var DP_SELECT         = 0x8;
[03:40:02.232]        // -> [DP_SELECT <= 0x00000008]
[03:40:02.232]      __var powered_down      = 0;
[03:40:02.232]        // -> [powered_down <= 0x00000000]
[03:40:02.232]      WriteDP(DP_SELECT, 0x00000000);
[03:40:02.235]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:40:02.235]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:40:02.237]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:40:02.237]        // -> [powered_down <= 0x00000001]
[03:40:02.237]    </block>
[03:40:02.237]    <control if="powered_down" while="" timeout="0" info="">
[03:40:02.237]      // if-block "powered_down"
[03:40:02.237]        // =>  TRUE
[03:40:02.237]      <block atomic="false" info="">
[03:40:02.237]        Message(0, "Debug/System power-up request sent");
[03:40:02.238]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:40:02.239]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:40:02.239]      </block>
[03:40:02.239]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:40:02.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:40:02.241]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:40:02.241]        // while-condition  =>  FALSE
[03:40:02.241]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:40:02.241]      </control>
[03:40:02.241]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:40:02.241]        // if-block "(__protocol & 0xFFFF) == 1"
[03:40:02.241]          // =>  FALSE
[03:40:02.242]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:40:02.242]      </control>
[03:40:02.242]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:40:02.242]        // if-block "(__protocol & 0xFFFF) == 2"
[03:40:02.242]          // =>  TRUE
[03:40:02.242]        <block atomic="false" info="">
[03:40:02.242]          Message(0, "executing SWD power up");
[03:40:02.242]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:40:02.244]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:40:02.244]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:40:02.246]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:40:02.246]        </block>
[03:40:02.246]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:40:02.246]      </control>
[03:40:02.246]      // end if-block "powered_down"
[03:40:02.246]    </control>
[03:40:02.246]    <block atomic="false" info="">
[03:40:02.246]      __var DEBUG_PORT_VAL    = 0;
[03:40:02.246]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:40:02.247]      __var ACCESS_POINT_VAL  = 0;
[03:40:02.247]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:40:02.247]      __ap = 1; 
[03:40:02.247]        // -> [__ap <= 0x00000001]
[03:40:02.247]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:40:02.251]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:40:02.251]      __ap = 4;
[03:40:02.251]        // -> [__ap <= 0x00000004]
[03:40:02.251]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:40:02.254]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:40:02.254]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:40:02.254]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:40:02.254]    </block>
[03:40:02.254]    <block atomic="false" info="">
[03:40:02.254]      __var nReset = 0x80;
[03:40:02.255]        // -> [nReset <= 0x00000080]
[03:40:02.255]      __var canReadPins = 0;
[03:40:02.255]        // -> [canReadPins <= 0x00000000]
[03:40:02.255]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:40:02.256]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:40:02.256]        // -> [canReadPins <= 0x00000001]
[03:40:02.256]    </block>
[03:40:02.257]    <control if="" while="1" timeout="200" info="">
[03:40:02.257]      // while "1"  (timeout="200")
[03:40:02.257]      // while-condition  =>  TRUE
[03:40:02.257]      // while "1"  (timeout="200")
[03:40:02.257]      // while-condition  =>  TRUE
[03:40:02.257]      // while "1"  (timeout="200")
[03:40:02.257]      // while-condition  =>  TRUE
[03:40:02.257]      // while "1"  (timeout="200")
[03:40:02.257]      // while-condition  =>  TRUE
[03:40:02.257]      // while "1"  (timeout="200")
[03:40:02.257]      // while-condition  =>  TRUE
[03:40:02.258]      // while "1"  (timeout="200")
[03:40:02.258]      // while-condition  =>  TRUE
[03:40:02.258]      // while "1"  (timeout="200")
[03:40:02.258]      // while-condition  =>  TRUE
[03:40:02.258]      // while "1"  (timeout="200")
[03:40:02.258]      // while-condition  =>  TRUE
[03:40:02.258]      // while "1"  (timeout="200")
[03:40:02.258]      // while-condition  =>  TRUE
[03:40:02.258]      // while "1"  (timeout="200")
[03:40:02.258]      // while-condition  =>  TRUE
[03:40:02.258]      // while "1"  (timeout="200")
[03:40:02.259]      // while-condition  =>  TRUE
[03:40:02.259]      // while "1"  (timeout="200")
[03:40:02.259]      // while-condition  =>  TRUE
[03:40:02.259]      // while "1"  (timeout="200")
[03:40:02.259]      // while-condition  =>  TRUE
[03:40:02.259]      // while "1"  (timeout="200")
[03:40:02.259]      // while-condition  =>  TRUE
[03:40:02.259]      // while "1"  (timeout="200")
[03:40:02.259]      // while-condition  =>  TRUE
[03:40:02.259]      // while "1"  (timeout="200")
[03:40:02.259]      // while-condition  =>  TRUE
[03:40:02.260]      // while "1"  (timeout="200")
[03:40:02.260]      // while-condition  =>  TRUE
[03:40:02.260]      // while "1"  (timeout="200")
[03:40:02.260]      // while-condition  =>  TRUE
[03:40:02.260]      // while "1"  (timeout="200")
[03:40:02.260]      // while-condition  =>  TRUE
[03:40:02.260]      // while "1"  (timeout="200")
[03:40:02.260]      // while-condition  =>  TRUE
[03:40:02.260]      // while "1"  (timeout="200")
[03:40:02.260]      // while-condition  =>  TRUE
[03:40:02.260]      // while "1"  (timeout="200")
[03:40:02.261]      // while-condition  =>  TRUE
[03:40:02.261]      // while "1"  (timeout="200")
[03:40:02.261]      // while-condition  =>  TRUE
[03:40:02.261]      // while "1"  (timeout="200")
[03:40:02.261]      // while-condition  =>  TRUE
[03:40:02.261]      // while "1"  (timeout="200")
[03:40:02.261]      // while-condition  =>  TRUE
[03:40:02.261]      // while "1"  (timeout="200")
[03:40:02.261]      // while-condition  =>  TRUE
[03:40:02.261]      // while "1"  (timeout="200")
[03:40:02.261]      // while-condition  =>  TRUE
[03:40:02.262]      // while "1"  (timeout="200")
[03:40:02.262]      // while-condition  =>  TRUE
[03:40:02.262]      // while "1"  (timeout="200")
[03:40:02.262]      // while-condition  =>  TRUE
[03:40:02.262]      // while "1"  (timeout="200")
[03:40:02.262]      // while-condition  =>  TRUE
[03:40:02.262]      // while "1"  (timeout="200")
[03:40:02.262]      // while-condition  =>  TRUE
[03:40:02.263]      // while "1"  (timeout="200")
[03:40:02.263]      // while-condition  =>  TRUE
[03:40:02.263]      // while "1"  (timeout="200")
[03:40:02.263]      // while-condition  =>  TRUE
[03:40:02.263]      // while "1"  (timeout="200")
[03:40:02.263]      // while-condition  =>  TRUE
[03:40:02.263]      // while "1"  (timeout="200")
[03:40:02.263]      // while-condition  =>  TRUE
[03:40:02.263]      // while "1"  (timeout="200")
[03:40:02.264]      // while-condition  =>  TRUE
[03:40:02.264]      // while "1"  (timeout="200")
[03:40:02.264]      // while-condition  =>  TRUE
[03:40:02.264]      // while "1"  (timeout="200")
[03:40:02.264]      // while-condition  =>  TRUE
[03:40:02.264]      // while "1"  (timeout="200")
[03:40:02.264]      // while-condition  =>  TRUE
[03:40:02.264]      // while "1"  (timeout="200")
[03:40:02.264]      // while-condition  =>  TRUE
[03:40:02.264]      // while "1"  (timeout="200")
[03:40:02.265]      // while-condition  =>  TRUE
[03:40:02.265]      // while "1"  (timeout="200")
[03:40:02.265]      // while-condition  =>  TRUE
[03:40:02.265]      // while "1"  (timeout="200")
[03:40:02.265]      // while-condition  =>  TRUE
[03:40:02.265]      // while "1"  (timeout="200")
[03:40:02.265]      // while-condition  =>  TRUE
[03:40:02.265]      // while "1"  (timeout="200")
[03:40:02.265]      // while-condition  =>  TRUE
[03:40:02.265]      // while "1"  (timeout="200")
[03:40:02.267]      // while-condition  =>  TRUE
[03:40:02.267]      // while "1"  (timeout="200")
[03:40:02.267]      // while  =>  TIMEOUT
[03:40:02.267]      // end while "1"
[03:40:02.267]    </control>
[03:40:02.267]    <control if="canReadPins" while="" timeout="0" info="">
[03:40:02.267]      // if-block "canReadPins"
[03:40:02.267]        // =>  TRUE
[03:40:02.268]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:40:02.268]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:40:02.269]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:40:02.269]        // while-condition  =>  FALSE
[03:40:02.269]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:40:02.269]      </control>
[03:40:02.269]      // end if-block "canReadPins"
[03:40:02.269]    </control>
[03:40:02.269]    <control if="!canReadPins" while="" timeout="0" info="">
[03:40:02.269]      // if-block "!canReadPins"
[03:40:02.270]        // =>  FALSE
[03:40:02.270]      // skip if-block "!canReadPins"
[03:40:02.270]    </control>
[03:40:02.270]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:40:02.270]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:40:02.270]        // =>  TRUE
[03:40:02.270]      <block atomic="false" info="">
[03:40:02.270]        WriteAP(0x00, 0x190008);
[03:40:02.272]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:40:02.272]        WriteAP(0xF0, 0x01);
[03:40:02.275]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:40:02.275]      </block>
[03:40:02.275]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:40:02.275]    </control>
[03:40:02.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:40:02.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:40:02.275]        // =>  FALSE
[03:40:02.276]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:40:02.276]    </control>
[03:40:02.276]    <block atomic="false" info="">
[03:40:02.276]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:40:02.280]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:40:02.280]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:40:02.281]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:40:02.281]      __ap = 0; //lets make sure we reset the access point selection
[03:40:02.281]        // -> [__ap <= 0x00000000]
[03:40:02.281]    </block>
[03:40:02.281]  </sequence>
[03:40:02.281]  
[03:40:02.300]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:40:02.300]  
[03:40:02.300]  <debugvars>
[03:40:02.300]    // Pre-defined
[03:40:02.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:02.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:40:02.300]    __dp=0x00000000
[03:40:02.300]    __ap=0x00000000
[03:40:02.300]    __traceout=0x00000000      (Trace Disabled)
[03:40:02.300]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:02.300]    __FlashAddr=0x00000000
[03:40:02.300]    __FlashLen=0x00000000
[03:40:02.301]    __FlashArg=0x00000000
[03:40:02.301]    __FlashOp=0x00000000
[03:40:02.301]    __Result=0x00000000
[03:40:02.301]  </debugvars>
[03:40:02.301]  
[03:40:02.301]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:40:02.301]    <block atomic="false" info="">
[03:40:02.301]      __var deviceID = 0;
[03:40:02.301]        // -> [deviceID <= 0x00000000]
[03:40:02.301]      __var version = 0;
[03:40:02.301]        // -> [version <= 0x00000000]
[03:40:02.301]      __var partNum = 0;
[03:40:02.302]        // -> [partNum <= 0x00000000]
[03:40:02.302]      __var manuf = 0;
[03:40:02.302]        // -> [manuf <= 0x00000000]
[03:40:02.302]      __var isMSPM0G1X0X_G3X0X = 0;
[03:40:02.302]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:40:02.302]      __var isProduction = 0;
[03:40:02.302]        // -> [isProduction <= 0x00000000]
[03:40:02.302]      __var continueId = 0;
[03:40:02.302]        // -> [continueId <= 0x00000000]
[03:40:02.302]      deviceID =   Read32(0x41C40004);
[03:40:02.307]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:40:02.307]        // -> [deviceID <= 0x2BB8802F]
[03:40:02.307]      version = deviceID >> 28;
[03:40:02.307]        // -> [version <= 0x00000002]
[03:40:02.307]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:40:02.307]        // -> [partNum <= 0x0000BB88]
[03:40:02.307]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:40:02.307]        // -> [manuf <= 0x00000017]
[03:40:02.307]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:40:02.308]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:40:02.308]      isProduction = (version > 0);
[03:40:02.308]        // -> [isProduction <= 0x00000001]
[03:40:02.308]    </block>
[03:40:02.308]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:40:02.308]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:40:02.308]        // =>  FALSE
[03:40:02.308]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:40:02.308]    </control>
[03:40:02.308]    <control if="continueId == 4" while="" timeout="0" info="">
[03:40:02.308]      // if-block "continueId == 4"
[03:40:02.309]        // =>  FALSE
[03:40:02.309]      // skip if-block "continueId == 4"
[03:40:02.309]    </control>
[03:40:02.309]    <control if="!isProduction" while="" timeout="0" info="">
[03:40:02.309]      // if-block "!isProduction"
[03:40:02.309]        // =>  FALSE
[03:40:02.309]      // skip if-block "!isProduction"
[03:40:02.309]    </control>
[03:40:02.309]  </sequence>
[03:40:02.309]  
[03:41:40.627]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:41:40.627]  
[03:41:40.635]  <debugvars>
[03:41:40.635]    // Pre-defined
[03:41:40.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:41:40.635]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:41:40.635]    __dp=0x00000000
[03:41:40.635]    __ap=0x00000000
[03:41:40.635]    __traceout=0x00000000      (Trace Disabled)
[03:41:40.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:41:40.636]    __FlashAddr=0x00000000
[03:41:40.636]    __FlashLen=0x00000000
[03:41:40.636]    __FlashArg=0x00000000
[03:41:40.636]    __FlashOp=0x00000000
[03:41:40.636]    __Result=0x00000000
[03:41:40.636]  </debugvars>
[03:41:40.636]  
[03:41:40.636]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:41:40.636]    <block atomic="false" info="">
[03:41:40.636]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:41:40.636]        // -> [isSWJ <= 0x00000001]
[03:41:40.636]      __var hasDormant = __protocol & 0x00020000;
[03:41:40.637]        // -> [hasDormant <= 0x00000000]
[03:41:40.637]      __var protType   = __protocol & 0x0000FFFF;
[03:41:40.637]        // -> [protType <= 0x00000002]
[03:41:40.637]    </block>
[03:41:40.637]    <control if="protType == 1" while="" timeout="0" info="">
[03:41:40.637]      // if-block "protType == 1"
[03:41:40.637]        // =>  FALSE
[03:41:40.638]      // skip if-block "protType == 1"
[03:41:40.638]    </control>
[03:41:40.638]    <control if="protType == 2" while="" timeout="0" info="">
[03:41:40.638]      // if-block "protType == 2"
[03:41:40.638]        // =>  TRUE
[03:41:40.638]      <control if="isSWJ" while="" timeout="0" info="">
[03:41:40.638]        // if-block "isSWJ"
[03:41:40.638]          // =>  TRUE
[03:41:40.638]        <control if="hasDormant" while="" timeout="0" info="">
[03:41:40.639]          // if-block "hasDormant"
[03:41:40.639]            // =>  FALSE
[03:41:40.639]          // skip if-block "hasDormant"
[03:41:40.639]        </control>
[03:41:40.639]        <control if="!hasDormant" while="" timeout="0" info="">
[03:41:40.639]          // if-block "!hasDormant"
[03:41:40.639]            // =>  TRUE
[03:41:40.639]          <block atomic="false" info="">
[03:41:40.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:41:40.642]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:41:40.643]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:41:40.656]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:41:40.656]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:41:40.658]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:41:40.658]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:41:40.661]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:41:40.661]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:41:40.664]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:41:40.664]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:41:40.669]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:41:40.669]          </block>
[03:41:40.669]          // end if-block "!hasDormant"
[03:41:40.669]        </control>
[03:41:40.669]        // end if-block "isSWJ"
[03:41:40.669]      </control>
[03:41:40.669]      <control if="!isSWJ" while="" timeout="0" info="">
[03:41:40.670]        // if-block "!isSWJ"
[03:41:40.670]          // =>  FALSE
[03:41:40.670]        // skip if-block "!isSWJ"
[03:41:40.670]      </control>
[03:41:40.670]      <block atomic="false" info="">
[03:41:40.670]        ReadDP(0x0);
[03:41:40.674]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:41:40.675]      </block>
[03:41:40.675]      // end if-block "protType == 2"
[03:41:40.675]    </control>
[03:41:40.675]  </sequence>
[03:41:40.675]  
[03:41:40.691]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:41:40.691]  
[03:41:40.692]  <debugvars>
[03:41:40.692]    // Pre-defined
[03:41:40.692]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:41:40.692]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:41:40.692]    __dp=0x00000000
[03:41:40.692]    __ap=0x00000000
[03:41:40.692]    __traceout=0x00000000      (Trace Disabled)
[03:41:40.693]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:41:40.693]    __FlashAddr=0x00000000
[03:41:40.693]    __FlashLen=0x00000000
[03:41:40.693]    __FlashArg=0x00000000
[03:41:40.693]    __FlashOp=0x00000000
[03:41:40.693]    __Result=0x00000000
[03:41:40.693]  </debugvars>
[03:41:40.693]  
[03:41:40.693]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:41:40.693]    <block atomic="false" info="">
[03:41:40.693]      __var SW_DP_ABORT       = 0x0;
[03:41:40.694]        // -> [SW_DP_ABORT <= 0x00000000]
[03:41:40.694]      __var DP_CTRL_STAT      = 0x4;
[03:41:40.694]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:41:40.694]      __var DP_SELECT         = 0x8;
[03:41:40.694]        // -> [DP_SELECT <= 0x00000008]
[03:41:40.694]      __var powered_down      = 0;
[03:41:40.694]        // -> [powered_down <= 0x00000000]
[03:41:40.694]      WriteDP(DP_SELECT, 0x00000000);
[03:41:40.699]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:41:40.699]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:41:40.701]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:41:40.701]        // -> [powered_down <= 0x00000001]
[03:41:40.701]    </block>
[03:41:40.701]    <control if="powered_down" while="" timeout="0" info="">
[03:41:40.701]      // if-block "powered_down"
[03:41:40.701]        // =>  TRUE
[03:41:40.701]      <block atomic="false" info="">
[03:41:40.701]        Message(0, "Debug/System power-up request sent");
[03:41:40.705]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:41:40.709]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:41:40.709]      </block>
[03:41:40.709]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:41:40.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:41:40.712]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:41:40.713]        // while-condition  =>  FALSE
[03:41:40.713]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:41:40.713]      </control>
[03:41:40.713]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:41:40.713]        // if-block "(__protocol & 0xFFFF) == 1"
[03:41:40.713]          // =>  FALSE
[03:41:40.713]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:41:40.714]      </control>
[03:41:40.714]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:41:40.714]        // if-block "(__protocol & 0xFFFF) == 2"
[03:41:40.714]          // =>  TRUE
[03:41:40.714]        <block atomic="false" info="">
[03:41:40.714]          Message(0, "executing SWD power up");
[03:41:40.717]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:41:40.719]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:41:40.719]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:41:40.725]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:41:40.725]        </block>
[03:41:40.725]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:41:40.725]      </control>
[03:41:40.725]      // end if-block "powered_down"
[03:41:40.725]    </control>
[03:41:40.725]    <block atomic="false" info="">
[03:41:40.725]      __var DEBUG_PORT_VAL    = 0;
[03:41:40.725]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:41:40.725]      __var ACCESS_POINT_VAL  = 0;
[03:41:40.725]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:41:40.725]      __ap = 1; 
[03:41:40.726]        // -> [__ap <= 0x00000001]
[03:41:40.726]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:41:40.732]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:41:40.732]      __ap = 4;
[03:41:40.732]        // -> [__ap <= 0x00000004]
[03:41:40.733]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:41:40.738]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:41:40.738]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:41:40.738]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:41:40.742]    </block>
[03:41:40.742]    <block atomic="false" info="">
[03:41:40.742]      __var nReset = 0x80;
[03:41:40.743]        // -> [nReset <= 0x00000080]
[03:41:40.743]      __var canReadPins = 0;
[03:41:40.743]        // -> [canReadPins <= 0x00000000]
[03:41:40.743]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:41:40.745]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:41:40.745]        // -> [canReadPins <= 0x00000001]
[03:41:40.746]    </block>
[03:41:40.746]    <control if="" while="1" timeout="200" info="">
[03:41:40.746]      // while "1"  (timeout="200")
[03:41:40.746]      // while-condition  =>  TRUE
[03:41:40.746]      // while "1"  (timeout="200")
[03:41:40.746]      // while-condition  =>  TRUE
[03:41:40.746]      // while "1"  (timeout="200")
[03:41:40.746]      // while-condition  =>  TRUE
[03:41:40.746]      // while "1"  (timeout="200")
[03:41:40.747]      // while-condition  =>  TRUE
[03:41:40.747]      // while "1"  (timeout="200")
[03:41:40.747]      // while-condition  =>  TRUE
[03:41:40.747]      // while "1"  (timeout="200")
[03:41:40.747]      // while-condition  =>  TRUE
[03:41:40.747]      // while "1"  (timeout="200")
[03:41:40.747]      // while-condition  =>  TRUE
[03:41:40.747]      // while "1"  (timeout="200")
[03:41:40.747]      // while-condition  =>  TRUE
[03:41:40.748]      // while "1"  (timeout="200")
[03:41:40.748]      // while-condition  =>  TRUE
[03:41:40.748]      // while "1"  (timeout="200")
[03:41:40.748]      // while-condition  =>  TRUE
[03:41:40.748]      // while "1"  (timeout="200")
[03:41:40.748]      // while-condition  =>  TRUE
[03:41:40.748]      // while "1"  (timeout="200")
[03:41:40.748]      // while-condition  =>  TRUE
[03:41:40.750]      // while "1"  (timeout="200")
[03:41:40.750]      // while-condition  =>  TRUE
[03:41:40.750]      // while "1"  (timeout="200")
[03:41:40.750]      // while-condition  =>  TRUE
[03:41:40.750]      // while "1"  (timeout="200")
[03:41:40.750]      // while-condition  =>  TRUE
[03:41:40.750]      // while "1"  (timeout="200")
[03:41:40.750]      // while-condition  =>  TRUE
[03:41:40.750]      // while "1"  (timeout="200")
[03:41:40.750]      // while-condition  =>  TRUE
[03:41:40.750]      // while "1"  (timeout="200")
[03:41:40.750]      // while-condition  =>  TRUE
[03:41:40.751]      // while "1"  (timeout="200")
[03:41:40.751]      // while  =>  TIMEOUT
[03:41:40.751]      // end while "1"
[03:41:40.751]    </control>
[03:41:40.751]    <control if="canReadPins" while="" timeout="0" info="">
[03:41:40.751]      // if-block "canReadPins"
[03:41:40.751]        // =>  TRUE
[03:41:40.751]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:41:40.751]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:41:40.770]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:41:40.771]        // while-condition  =>  FALSE
[03:41:40.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:41:40.771]      </control>
[03:41:40.771]      // end if-block "canReadPins"
[03:41:40.771]    </control>
[03:41:40.771]    <control if="!canReadPins" while="" timeout="0" info="">
[03:41:40.772]      // if-block "!canReadPins"
[03:41:40.772]        // =>  FALSE
[03:41:40.772]      // skip if-block "!canReadPins"
[03:41:40.772]    </control>
[03:41:40.772]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:41:40.772]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:41:40.772]        // =>  TRUE
[03:41:40.772]      <block atomic="false" info="">
[03:41:40.772]        WriteAP(0x00, 0x190008);
[03:41:40.782]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:41:40.782]        WriteAP(0xF0, 0x01);
[03:41:40.792]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:41:40.792]      </block>
[03:41:40.792]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:41:40.792]    </control>
[03:41:40.792]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:41:40.792]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:41:40.792]        // =>  FALSE
[03:41:40.792]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:41:40.793]    </control>
[03:41:40.793]    <block atomic="false" info="">
[03:41:40.793]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:41:40.799]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:41:40.799]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:41:40.801]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:41:40.803]      __ap = 0; //lets make sure we reset the access point selection
[03:41:40.803]        // -> [__ap <= 0x00000000]
[03:41:40.804]    </block>
[03:41:40.804]  </sequence>
[03:41:40.804]  
[03:41:40.869]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:41:40.869]  
[03:41:40.869]  <debugvars>
[03:41:40.869]    // Pre-defined
[03:41:40.869]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:41:40.869]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:41:40.870]    __dp=0x00000000
[03:41:40.870]    __ap=0x00000000
[03:41:40.870]    __traceout=0x00000000      (Trace Disabled)
[03:41:40.870]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:41:40.870]    __FlashAddr=0x00000000
[03:41:40.870]    __FlashLen=0x00000000
[03:41:40.870]    __FlashArg=0x00000000
[03:41:40.870]    __FlashOp=0x00000000
[03:41:40.870]    __Result=0x00000000
[03:41:40.871]  </debugvars>
[03:41:40.871]  
[03:41:40.871]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:41:40.871]    <block atomic="false" info="">
[03:41:40.871]      __var deviceID = 0;
[03:41:40.871]        // -> [deviceID <= 0x00000000]
[03:41:40.872]      __var version = 0;
[03:41:40.872]        // -> [version <= 0x00000000]
[03:41:40.872]      __var partNum = 0;
[03:41:40.872]        // -> [partNum <= 0x00000000]
[03:41:40.872]      __var manuf = 0;
[03:41:40.872]        // -> [manuf <= 0x00000000]
[03:41:40.872]      __var isMSPM0G1X0X_G3X0X = 0;
[03:41:40.872]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:41:40.873]      __var isProduction = 0;
[03:41:40.873]        // -> [isProduction <= 0x00000000]
[03:41:40.873]      __var continueId = 0;
[03:41:40.873]        // -> [continueId <= 0x00000000]
[03:41:40.873]      deviceID =   Read32(0x41C40004);
[03:41:40.879]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:41:40.879]        // -> [deviceID <= 0x2BB8802F]
[03:41:40.880]      version = deviceID >> 28;
[03:41:40.880]        // -> [version <= 0x00000002]
[03:41:40.880]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:41:40.880]        // -> [partNum <= 0x0000BB88]
[03:41:40.880]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:41:40.880]        // -> [manuf <= 0x00000017]
[03:41:40.880]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:41:40.880]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:41:40.880]      isProduction = (version > 0);
[03:41:40.880]        // -> [isProduction <= 0x00000001]
[03:41:40.880]    </block>
[03:41:40.881]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:41:40.881]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:41:40.881]        // =>  FALSE
[03:41:40.881]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:41:40.881]    </control>
[03:41:40.882]    <control if="continueId == 4" while="" timeout="0" info="">
[03:41:40.882]      // if-block "continueId == 4"
[03:41:40.882]        // =>  FALSE
[03:41:40.882]      // skip if-block "continueId == 4"
[03:41:40.882]    </control>
[03:41:40.882]    <control if="!isProduction" while="" timeout="0" info="">
[03:41:40.882]      // if-block "!isProduction"
[03:41:40.882]        // =>  FALSE
[03:41:40.882]      // skip if-block "!isProduction"
[03:41:40.883]    </control>
[03:41:40.883]  </sequence>
[03:41:40.883]  
[03:45:20.901]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:45:20.901]  
[03:45:20.909]  <debugvars>
[03:45:20.909]    // Pre-defined
[03:45:20.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:20.909]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:45:20.909]    __dp=0x00000000
[03:45:20.909]    __ap=0x00000000
[03:45:20.909]    __traceout=0x00000000      (Trace Disabled)
[03:45:20.910]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:20.910]    __FlashAddr=0x00000000
[03:45:20.910]    __FlashLen=0x00000000
[03:45:20.910]    __FlashArg=0x00000000
[03:45:20.910]    __FlashOp=0x00000000
[03:45:20.910]    __Result=0x00000000
[03:45:20.910]  </debugvars>
[03:45:20.910]  
[03:45:20.910]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:45:20.910]    <block atomic="false" info="">
[03:45:20.911]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:45:20.911]        // -> [isSWJ <= 0x00000001]
[03:45:20.911]      __var hasDormant = __protocol & 0x00020000;
[03:45:20.911]        // -> [hasDormant <= 0x00000000]
[03:45:20.911]      __var protType   = __protocol & 0x0000FFFF;
[03:45:20.911]        // -> [protType <= 0x00000002]
[03:45:20.912]    </block>
[03:45:20.912]    <control if="protType == 1" while="" timeout="0" info="">
[03:45:20.912]      // if-block "protType == 1"
[03:45:20.912]        // =>  FALSE
[03:45:20.912]      // skip if-block "protType == 1"
[03:45:20.912]    </control>
[03:45:20.912]    <control if="protType == 2" while="" timeout="0" info="">
[03:45:20.912]      // if-block "protType == 2"
[03:45:20.913]        // =>  TRUE
[03:45:20.914]      <control if="isSWJ" while="" timeout="0" info="">
[03:45:20.914]        // if-block "isSWJ"
[03:45:20.914]          // =>  TRUE
[03:45:20.914]        <control if="hasDormant" while="" timeout="0" info="">
[03:45:20.914]          // if-block "hasDormant"
[03:45:20.914]            // =>  FALSE
[03:45:20.914]          // skip if-block "hasDormant"
[03:45:20.914]        </control>
[03:45:20.914]        <control if="!hasDormant" while="" timeout="0" info="">
[03:45:20.914]          // if-block "!hasDormant"
[03:45:20.914]            // =>  TRUE
[03:45:20.915]          <block atomic="false" info="">
[03:45:20.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:45:20.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:20.916]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:45:20.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:45:20.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:45:20.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:20.919]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:45:20.921]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:45:20.921]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:45:20.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:20.923]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:45:20.925]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:45:20.925]          </block>
[03:45:20.925]          // end if-block "!hasDormant"
[03:45:20.925]        </control>
[03:45:20.925]        // end if-block "isSWJ"
[03:45:20.925]      </control>
[03:45:20.925]      <control if="!isSWJ" while="" timeout="0" info="">
[03:45:20.925]        // if-block "!isSWJ"
[03:45:20.925]          // =>  FALSE
[03:45:20.925]        // skip if-block "!isSWJ"
[03:45:20.925]      </control>
[03:45:20.926]      <block atomic="false" info="">
[03:45:20.926]        ReadDP(0x0);
[03:45:20.928]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:45:20.928]      </block>
[03:45:20.928]      // end if-block "protType == 2"
[03:45:20.928]    </control>
[03:45:20.928]  </sequence>
[03:45:20.928]  
[03:45:20.933]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:45:20.933]  
[03:45:20.934]  <debugvars>
[03:45:20.934]    // Pre-defined
[03:45:20.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:20.934]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:45:20.934]    __dp=0x00000000
[03:45:20.934]    __ap=0x00000000
[03:45:20.934]    __traceout=0x00000000      (Trace Disabled)
[03:45:20.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:20.935]    __FlashAddr=0x00000000
[03:45:20.935]    __FlashLen=0x00000000
[03:45:20.935]    __FlashArg=0x00000000
[03:45:20.935]    __FlashOp=0x00000000
[03:45:20.935]    __Result=0x00000000
[03:45:20.935]  </debugvars>
[03:45:20.935]  
[03:45:20.935]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:45:20.936]    <block atomic="false" info="">
[03:45:20.936]      __var SW_DP_ABORT       = 0x0;
[03:45:20.936]        // -> [SW_DP_ABORT <= 0x00000000]
[03:45:20.936]      __var DP_CTRL_STAT      = 0x4;
[03:45:20.936]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:45:20.936]      __var DP_SELECT         = 0x8;
[03:45:20.937]        // -> [DP_SELECT <= 0x00000008]
[03:45:20.938]      __var powered_down      = 0;
[03:45:20.938]        // -> [powered_down <= 0x00000000]
[03:45:20.938]      WriteDP(DP_SELECT, 0x00000000);
[03:45:20.940]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:45:20.940]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:45:20.942]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:45:20.942]        // -> [powered_down <= 0x00000001]
[03:45:20.942]    </block>
[03:45:20.942]    <control if="powered_down" while="" timeout="0" info="">
[03:45:20.943]      // if-block "powered_down"
[03:45:20.943]        // =>  TRUE
[03:45:20.943]      <block atomic="false" info="">
[03:45:20.943]        Message(0, "Debug/System power-up request sent");
[03:45:20.943]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:45:20.945]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:45:20.945]      </block>
[03:45:20.945]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:45:20.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:45:20.947]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:45:20.947]        // while-condition  =>  FALSE
[03:45:20.947]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:45:20.947]      </control>
[03:45:20.948]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:45:20.948]        // if-block "(__protocol & 0xFFFF) == 1"
[03:45:20.948]          // =>  FALSE
[03:45:20.948]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:45:20.948]      </control>
[03:45:20.948]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:45:20.948]        // if-block "(__protocol & 0xFFFF) == 2"
[03:45:20.948]          // =>  TRUE
[03:45:20.948]        <block atomic="false" info="">
[03:45:20.948]          Message(0, "executing SWD power up");
[03:45:20.950]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:45:20.951]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:45:20.951]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:45:20.953]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:45:20.953]        </block>
[03:45:20.953]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:45:20.953]      </control>
[03:45:20.953]      // end if-block "powered_down"
[03:45:20.953]    </control>
[03:45:20.953]    <block atomic="false" info="">
[03:45:20.953]      __var DEBUG_PORT_VAL    = 0;
[03:45:20.953]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:45:20.955]      __var ACCESS_POINT_VAL  = 0;
[03:45:20.955]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:45:20.955]      __ap = 1; 
[03:45:20.955]        // -> [__ap <= 0x00000001]
[03:45:20.955]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:45:20.958]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:45:20.958]      __ap = 4;
[03:45:20.959]        // -> [__ap <= 0x00000004]
[03:45:20.959]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:45:20.962]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:45:20.962]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:45:20.962]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:45:20.962]    </block>
[03:45:20.962]    <block atomic="false" info="">
[03:45:20.962]      __var nReset = 0x80;
[03:45:20.963]        // -> [nReset <= 0x00000080]
[03:45:20.963]      __var canReadPins = 0;
[03:45:20.963]        // -> [canReadPins <= 0x00000000]
[03:45:20.963]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:45:20.965]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:45:20.965]        // -> [canReadPins <= 0x00000001]
[03:45:20.965]    </block>
[03:45:20.966]    <control if="" while="1" timeout="200" info="">
[03:45:20.966]      // while "1"  (timeout="200")
[03:45:20.966]      // while-condition  =>  TRUE
[03:45:20.966]      // while "1"  (timeout="200")
[03:45:20.966]      // while-condition  =>  TRUE
[03:45:20.966]      // while "1"  (timeout="200")
[03:45:20.966]      // while-condition  =>  TRUE
[03:45:20.966]      // while "1"  (timeout="200")
[03:45:20.966]      // while-condition  =>  TRUE
[03:45:20.967]      // while "1"  (timeout="200")
[03:45:20.967]      // while-condition  =>  TRUE
[03:45:20.967]      // while "1"  (timeout="200")
[03:45:20.967]      // while-condition  =>  TRUE
[03:45:20.967]      // while "1"  (timeout="200")
[03:45:20.967]      // while-condition  =>  TRUE
[03:45:20.967]      // while "1"  (timeout="200")
[03:45:20.967]      // while-condition  =>  TRUE
[03:45:20.967]      // while "1"  (timeout="200")
[03:45:20.967]      // while-condition  =>  TRUE
[03:45:20.968]      // while "1"  (timeout="200")
[03:45:20.968]      // while-condition  =>  TRUE
[03:45:20.968]      // while "1"  (timeout="200")
[03:45:20.968]      // while-condition  =>  TRUE
[03:45:20.968]      // while "1"  (timeout="200")
[03:45:20.968]      // while-condition  =>  TRUE
[03:45:20.968]      // while "1"  (timeout="200")
[03:45:20.969]      // while-condition  =>  TRUE
[03:45:20.969]      // while "1"  (timeout="200")
[03:45:20.969]      // while-condition  =>  TRUE
[03:45:20.969]      // while "1"  (timeout="200")
[03:45:20.969]      // while-condition  =>  TRUE
[03:45:20.970]      // while "1"  (timeout="200")
[03:45:20.970]      // while  =>  TIMEOUT
[03:45:20.970]      // end while "1"
[03:45:20.970]    </control>
[03:45:20.970]    <control if="canReadPins" while="" timeout="0" info="">
[03:45:20.971]      // if-block "canReadPins"
[03:45:20.971]        // =>  TRUE
[03:45:20.971]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:45:20.971]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:45:20.973]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:45:20.973]        // while-condition  =>  FALSE
[03:45:20.973]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:45:20.973]      </control>
[03:45:20.974]      // end if-block "canReadPins"
[03:45:20.974]    </control>
[03:45:20.974]    <control if="!canReadPins" while="" timeout="0" info="">
[03:45:20.974]      // if-block "!canReadPins"
[03:45:20.974]        // =>  FALSE
[03:45:20.974]      // skip if-block "!canReadPins"
[03:45:20.974]    </control>
[03:45:20.974]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:45:20.975]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:45:20.975]        // =>  TRUE
[03:45:20.975]      <block atomic="false" info="">
[03:45:20.975]        WriteAP(0x00, 0x190008);
[03:45:20.977]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:45:20.977]        WriteAP(0xF0, 0x01);
[03:45:20.980]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:45:20.980]      </block>
[03:45:20.980]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:45:20.980]    </control>
[03:45:20.981]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:45:20.981]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:45:20.981]        // =>  FALSE
[03:45:20.981]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:45:20.981]    </control>
[03:45:20.981]    <block atomic="false" info="">
[03:45:20.981]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:45:20.985]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:45:20.986]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:45:20.986]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:45:20.986]      __ap = 0; //lets make sure we reset the access point selection
[03:45:20.986]        // -> [__ap <= 0x00000000]
[03:45:20.986]    </block>
[03:45:20.986]  </sequence>
[03:45:20.986]  
[03:45:21.019]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:45:21.019]  
[03:45:21.019]  <debugvars>
[03:45:21.019]    // Pre-defined
[03:45:21.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:21.019]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:45:21.019]    __dp=0x00000000
[03:45:21.020]    __ap=0x00000000
[03:45:21.020]    __traceout=0x00000000      (Trace Disabled)
[03:45:21.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:21.020]    __FlashAddr=0x00000000
[03:45:21.020]    __FlashLen=0x00000000
[03:45:21.020]    __FlashArg=0x00000000
[03:45:21.020]    __FlashOp=0x00000000
[03:45:21.020]    __Result=0x00000000
[03:45:21.021]  </debugvars>
[03:45:21.021]  
[03:45:21.021]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:45:21.021]    <block atomic="false" info="">
[03:45:21.021]      __var deviceID = 0;
[03:45:21.021]        // -> [deviceID <= 0x00000000]
[03:45:21.021]      __var version = 0;
[03:45:21.021]        // -> [version <= 0x00000000]
[03:45:21.022]      __var partNum = 0;
[03:45:21.022]        // -> [partNum <= 0x00000000]
[03:45:21.022]      __var manuf = 0;
[03:45:21.022]        // -> [manuf <= 0x00000000]
[03:45:21.022]      __var isMSPM0G1X0X_G3X0X = 0;
[03:45:21.022]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:45:21.023]      __var isProduction = 0;
[03:45:21.023]        // -> [isProduction <= 0x00000000]
[03:45:21.023]      __var continueId = 0;
[03:45:21.023]        // -> [continueId <= 0x00000000]
[03:45:21.023]      deviceID =   Read32(0x41C40004);
[03:45:21.035]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:45:21.035]        // -> [deviceID <= 0x2BB8802F]
[03:45:21.035]      version = deviceID >> 28;
[03:45:21.035]        // -> [version <= 0x00000002]
[03:45:21.035]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:45:21.036]        // -> [partNum <= 0x0000BB88]
[03:45:21.036]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:45:21.036]        // -> [manuf <= 0x00000017]
[03:45:21.036]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:45:21.036]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:45:21.036]      isProduction = (version > 0);
[03:45:21.036]        // -> [isProduction <= 0x00000001]
[03:45:21.037]    </block>
[03:45:21.037]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:45:21.037]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:45:21.037]        // =>  FALSE
[03:45:21.037]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:45:21.037]    </control>
[03:45:21.037]    <control if="continueId == 4" while="" timeout="0" info="">
[03:45:21.037]      // if-block "continueId == 4"
[03:45:21.037]        // =>  FALSE
[03:45:21.038]      // skip if-block "continueId == 4"
[03:45:21.038]    </control>
[03:45:21.038]    <control if="!isProduction" while="" timeout="0" info="">
[03:45:21.038]      // if-block "!isProduction"
[03:45:21.038]        // =>  FALSE
[03:45:21.038]      // skip if-block "!isProduction"
[03:45:21.038]    </control>
[03:45:21.038]  </sequence>
[03:45:21.038]  
